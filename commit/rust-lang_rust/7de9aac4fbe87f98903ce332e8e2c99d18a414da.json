{"sha": "7de9aac4fbe87f98903ce332e8e2c99d18a414da", "node_id": "C_kwDOAAsO6NoAKDdkZTlhYWM0ZmJlODdmOTg5MDNjZTMzMmU4ZTJjOTlkMThhNDE0ZGE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-11T18:00:08Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-13T10:12:15Z"}, "message": "Support ConstantIndex in debuginfo.", "tree": {"sha": "41a2eefebe0b91e9356361c4037285d0b5a19e6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41a2eefebe0b91e9356361c4037285d0b5a19e6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7de9aac4fbe87f98903ce332e8e2c99d18a414da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7de9aac4fbe87f98903ce332e8e2c99d18a414da", "html_url": "https://github.com/rust-lang/rust/commit/7de9aac4fbe87f98903ce332e8e2c99d18a414da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7de9aac4fbe87f98903ce332e8e2c99d18a414da/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ec007191348ef7cc13eb55e44e007b02cf75cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec007191348ef7cc13eb55e44e007b02cf75cf3", "html_url": "https://github.com/rust-lang/rust/commit/2ec007191348ef7cc13eb55e44e007b02cf75cf3"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "bba2800fb0545bbb8c6d1f600b69cf0ea4d62a9a", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7de9aac4fbe87f98903ce332e8e2c99d18a414da/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de9aac4fbe87f98903ce332e8e2c99d18a414da/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=7de9aac4fbe87f98903ce332e8e2c99d18a414da", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_session::config::DebugInfo;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};\n-use rustc_target::abi::{Abi, FieldIdx, Size, VariantIdx};\n+use rustc_target::abi::{Abi, FieldIdx, FieldsShape, Size, VariantIdx};\n \n use super::operand::{OperandRef, OperandValue};\n use super::place::PlaceRef;\n@@ -83,6 +83,7 @@ trait DebugInfoOffsetLocation<'tcx, Bx> {\n     fn deref(&self, bx: &mut Bx) -> Self;\n     fn layout(&self) -> TyAndLayout<'tcx>;\n     fn project_field(&self, bx: &mut Bx, field: FieldIdx) -> Self;\n+    fn project_constant_index(&self, bx: &mut Bx, offset: u64) -> Self;\n     fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self;\n }\n \n@@ -101,6 +102,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n         PlaceRef::project_field(*self, bx, field.index())\n     }\n \n+    fn project_constant_index(&self, bx: &mut Bx, offset: u64) -> Self {\n+        let lloffset = bx.cx().const_usize(offset);\n+        self.project_index(bx, lloffset)\n+    }\n+\n     fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self {\n         self.project_downcast(bx, variant)\n     }\n@@ -123,6 +129,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n         self.field(bx.cx(), field.index())\n     }\n \n+    fn project_constant_index(&self, bx: &mut Bx, index: u64) -> Self {\n+        self.field(bx.cx(), index as usize)\n+    }\n+\n     fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self {\n         self.for_variant(bx.cx(), variant)\n     }\n@@ -168,6 +178,18 @@ fn calculate_debuginfo_offset<\n             mir::ProjectionElem::Downcast(_, variant) => {\n                 place = place.downcast(bx, variant);\n             }\n+            mir::ProjectionElem::ConstantIndex {\n+                offset: index,\n+                min_length: _,\n+                from_end: false,\n+            } => {\n+                let offset = indirect_offsets.last_mut().unwrap_or(&mut direct_offset);\n+                let FieldsShape::Array { stride, count: _ } = place.layout().fields else {\n+                    span_bug!(var.source_info.span, \"ConstantIndex on non-array type {:?}\", place.layout())\n+                };\n+                *offset += stride * index;\n+                place = place.project_constant_index(bx, index);\n+            }\n             _ => {\n                 // Sanity check for `can_use_in_debuginfo`.\n                 debug_assert!(!elem.can_use_in_debuginfo());"}, {"sha": "6b0401a4c9bb7223e3963b754c5ceeb8d059de83", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7de9aac4fbe87f98903ce332e8e2c99d18a414da/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7de9aac4fbe87f98903ce332e8e2c99d18a414da/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=7de9aac4fbe87f98903ce332e8e2c99d18a414da", "patch": "@@ -1554,8 +1554,11 @@ impl<V, T> ProjectionElem<V, T> {\n     /// Returns `true` if this is accepted inside `VarDebugInfoContents::Place`.\n     pub fn can_use_in_debuginfo(&self) -> bool {\n         match self {\n-            Self::Deref | Self::Downcast(_, _) | Self::Field(_, _) => true,\n-            Self::ConstantIndex { .. }\n+            Self::ConstantIndex { from_end: false, .. }\n+            | Self::Deref\n+            | Self::Downcast(_, _)\n+            | Self::Field(_, _) => true,\n+            Self::ConstantIndex { from_end: true, .. }\n             | Self::Index(_)\n             | Self::OpaqueCast(_)\n             | Self::Subslice { .. } => false,"}, {"sha": "73b9ea46c449bbdd7845738cdd045b1b38fc83d5", "filename": "tests/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7de9aac4fbe87f98903ce332e8e2c99d18a414da/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7de9aac4fbe87f98903ce332e8e2c99d18a414da/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=7de9aac4fbe87f98903ce332e8e2c99d18a414da", "patch": "@@ -21,9 +21,9 @@\n           let _13: &T;                     // in scope 1 at $DIR/issue_76432.rs:+3:18: +3:24\n           let _14: &T;                     // in scope 1 at $DIR/issue_76432.rs:+3:26: +3:32\n           scope 2 {\n-              debug v1 => _12;             // in scope 2 at $DIR/issue_76432.rs:+3:10: +3:16\n-              debug v2 => _13;             // in scope 2 at $DIR/issue_76432.rs:+3:18: +3:24\n-              debug v3 => _14;             // in scope 2 at $DIR/issue_76432.rs:+3:26: +3:32\n+              debug v1 => &(*_2)[0 of 3];  // in scope 2 at $DIR/issue_76432.rs:+3:10: +3:16\n+              debug v2 => &(*_2)[1 of 3];  // in scope 2 at $DIR/issue_76432.rs:+3:18: +3:24\n+              debug v3 => &(*_2)[2 of 3];  // in scope 2 at $DIR/issue_76432.rs:+3:26: +3:32\n           }\n       }\n   \n@@ -52,15 +52,6 @@\n       }\n   \n       bb2: {\n-          StorageLive(_12);                // scope 1 at $DIR/issue_76432.rs:+3:10: +3:16\n-          _12 = &(*_2)[0 of 3];            // scope 1 at $DIR/issue_76432.rs:+3:10: +3:16\n-          StorageLive(_13);                // scope 1 at $DIR/issue_76432.rs:+3:18: +3:24\n-          _13 = &(*_2)[1 of 3];            // scope 1 at $DIR/issue_76432.rs:+3:18: +3:24\n-          StorageLive(_14);                // scope 1 at $DIR/issue_76432.rs:+3:26: +3:32\n-          _14 = &(*_2)[2 of 3];            // scope 1 at $DIR/issue_76432.rs:+3:26: +3:32\n-          StorageDead(_14);                // scope 1 at $DIR/issue_76432.rs:+3:84: +3:85\n-          StorageDead(_13);                // scope 1 at $DIR/issue_76432.rs:+3:84: +3:85\n-          StorageDead(_12);                // scope 1 at $DIR/issue_76432.rs:+3:84: +3:85\n           StorageDead(_5);                 // scope 0 at $DIR/issue_76432.rs:+6:1: +6:2\n           StorageDead(_2);                 // scope 0 at $DIR/issue_76432.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/issue_76432.rs:+6:2: +6:2"}]}