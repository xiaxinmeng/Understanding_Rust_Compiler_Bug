{"sha": "aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMzY3OGQ0ZjRjOWFhOGJkNTBlOGQwOGUzODdkYzlkOGQzMjYxNTQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-01T16:10:12Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-30T10:29:29Z"}, "message": "Remove HirVec from Generics.", "tree": {"sha": "ba870de4fb706784d305a525cd4d609c8998668b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba870de4fb706784d305a525cd4d609c8998668b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "html_url": "https://github.com/rust-lang/rust/commit/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d297b1966391e3f9990b9400b8c81408a6594cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d297b1966391e3f9990b9400b8c81408a6594cbd", "html_url": "https://github.com/rust-lang/rust/commit/d297b1966391e3f9990b9400b8c81408a6594cbd"}], "stats": {"total": 214, "additions": 127, "deletions": 87}, "files": [{"sha": "9ac63001bf34b2bbd6af84e25c5872f0b9345dbb", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "patch": "@@ -672,7 +672,7 @@ pub fn walk_generic_args<'v, V: Visitor<'v>>(\n     _path_span: Span,\n     generic_args: &'v GenericArgs<'v>,\n ) {\n-    walk_list!(visitor, visit_generic_arg, &generic_args.args);\n+    walk_list!(visitor, visit_generic_arg, generic_args.args);\n     walk_list!(visitor, visit_assoc_type_binding, generic_args.bindings);\n }\n \n@@ -780,7 +780,7 @@ pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Generi\n }\n \n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics<'v>) {\n-    walk_list!(visitor, visit_generic_param, &generics.params);\n+    walk_list!(visitor, visit_generic_param, generics.params);\n     walk_list!(visitor, visit_where_predicate, generics.where_clause.predicates);\n }\n "}, {"sha": "196f1044f59427b8264e613daf360a8fa310c716", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 62, "deletions": 35, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "patch": "@@ -893,7 +893,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // in-band-lifetimes introduced by generics or where-clauses\n                     // wouldn't have been added yet.\n                     let generics =\n-                        this.lower_generics(generics, ImplTraitContext::Universal(&mut params));\n+                        this.lower_generics_mut(generics, ImplTraitContext::Universal(&mut params));\n                     let res = f(this, &mut params);\n                     (params, (generics, res))\n                 })\n@@ -914,6 +914,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         lowered_generics.params = lowered_params.into();\n \n+        let lowered_generics = lowered_generics.into_generics(self.arena);\n         (lowered_generics, res)\n     }\n \n@@ -1224,28 +1225,25 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 };\n                 hir::TyKind::Rptr(lifetime, self.lower_mt(mt, itctx))\n             }\n-            TyKind::BareFn(ref f) => self.with_in_scope_lifetime_defs(&f.generic_params, |this| {\n-                this.with_anonymous_lifetime_mode(AnonymousLifetimeMode::PassThrough, |this| {\n-                    hir::TyKind::BareFn(\n-                        this.arena.alloc(hir::BareFnTy {\n-                            generic_params: this.arena.alloc_from_iter(\n-                                this.lower_generic_params(\n-                                    &f.generic_params,\n-                                    &NodeMap::default(),\n-                                    ImplTraitContext::disallowed(),\n-                                )\n-                                .into_iter(),\n+            TyKind::BareFn(ref f) => {\n+                self.with_in_scope_lifetime_defs(&f.generic_params, |this| {\n+                    this.with_anonymous_lifetime_mode(AnonymousLifetimeMode::PassThrough, |this| {\n+                        hir::TyKind::BareFn(this.arena.alloc(hir::BareFnTy {\n+                            generic_params: this.lower_generic_params(\n+                                &f.generic_params,\n+                                &NodeMap::default(),\n+                                ImplTraitContext::disallowed(),\n                             ),\n                             unsafety: f.unsafety,\n                             abi: this.lower_extern(f.ext),\n                             decl: this.lower_fn_decl(&f.decl, None, false, None),\n                             param_names: this.arena.alloc_from_iter(\n                                 this.lower_fn_params_to_names(&f.decl).into_iter(),\n                             ),\n-                        }),\n-                    )\n+                        }))\n+                    })\n                 })\n-            }),\n+            }\n             TyKind::Never => hir::TyKind::Never,\n             TyKind::Tup(ref tys) => {\n                 hir::TyKind::Tup(self.arena.alloc_from_iter(\n@@ -1414,12 +1412,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             opaque_ty_def_index,\n             &hir_bounds,\n         );\n+        let lifetime_defs = self.arena.alloc_from_iter(lifetime_defs.into_iter());\n \n         debug!(\"lower_opaque_impl_trait: lifetimes={:#?}\", lifetimes,);\n \n         debug!(\"lower_opaque_impl_trait: lifetime_defs={:#?}\", lifetime_defs,);\n \n-        self.with_hir_id_owner(opaque_ty_node_id, |lctx| {\n+        self.with_hir_id_owner(opaque_ty_node_id, move |lctx| {\n             let opaque_ty_item = hir::OpaqueTy {\n                 generics: hir::Generics {\n                     params: lifetime_defs,\n@@ -1978,7 +1977,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             hir_id: Some(id),\n             res: Some(self.lower_res(res)),\n             infer_args,\n-            args: if generic_args.is_empty() { None } else { Some(self.arena.alloc(generic_args)) },\n+            args: if generic_args.is_empty() {\n+                None\n+            } else {\n+                Some(self.arena.alloc(generic_args.into_generic_args(self.arena)))\n+            },\n         }\n     }\n \n@@ -1987,15 +1990,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         data: &AngleBracketedArgs,\n         param_mode: ParamMode,\n         mut itctx: ImplTraitContext<'_, 'hir>,\n-    ) -> (hir::GenericArgs<'hir>, bool) {\n+    ) -> (GenericArgsCtor<'hir>, bool) {\n         let &AngleBracketedArgs { ref args, ref constraints, .. } = data;\n         let has_non_lt_args = args.iter().any(|arg| match arg {\n             ast::GenericArg::Lifetime(_) => false,\n             ast::GenericArg::Type(_) => true,\n             ast::GenericArg::Const(_) => true,\n         });\n         (\n-            hir::GenericArgs {\n+            GenericArgsCtor {\n                 args: args.iter().map(|a| self.lower_generic_arg(a, itctx.reborrow())).collect(),\n                 bindings: self.arena.alloc_from_iter(\n                     constraints.iter().map(|b| self.lower_assoc_ty_constraint(b, itctx.reborrow())),\n@@ -2009,7 +2012,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_parenthesized_parameter_data(\n         &mut self,\n         data: &ParenthesizedArgs,\n-    ) -> (hir::GenericArgs<'hir>, bool) {\n+    ) -> (GenericArgsCtor<'hir>, bool) {\n         // Switch to `PassThrough` mode for anonymous lifetimes; this\n         // means that we permit things like `&Ref<T>`, where `Ref` has\n         // a hidden lifetime parameter. This is needed for backwards\n@@ -2024,15 +2027,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 FunctionRetTy::Ty(ty) => this.lower_ty(&ty, ImplTraitContext::disallowed()),\n                 FunctionRetTy::Default(_) => this.arena.alloc(this.ty_tup(span, &[])),\n             };\n-            let args = hir_vec![GenericArg::Type(this.ty_tup(span, inputs))];\n+            let args = vec![GenericArg::Type(this.ty_tup(span, inputs))];\n             let binding = hir::TypeBinding {\n                 hir_id: this.next_id(),\n                 ident: Ident::with_dummy_span(FN_OUTPUT_NAME),\n                 span: output_ty.span,\n                 kind: hir::TypeBindingKind::Equality { ty: output_ty },\n             };\n             (\n-                hir::GenericArgs { args, bindings: arena_vec![this; binding], parenthesized: true },\n+                GenericArgsCtor { args, bindings: arena_vec![this; binding], parenthesized: true },\n                 false,\n             )\n         })\n@@ -2310,12 +2313,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             debug!(\"lower_async_fn_ret_ty: lifetimes_to_define={:#?}\", this.lifetimes_to_define);\n             debug!(\"lower_async_fn_ret_ty: lifetime_params={:#?}\", lifetime_params);\n \n-            let generic_params = lifetime_params\n-                .iter()\n-                .map(|(span, hir_name)| {\n+            let generic_params =\n+                this.arena.alloc_from_iter(lifetime_params.iter().map(|(span, hir_name)| {\n                     this.lifetime_to_generic_param(*span, *hir_name, opaque_ty_def_index)\n-                })\n-                .collect();\n+                }));\n \n             let opaque_ty_item = hir::OpaqueTy {\n                 generics: hir::Generics {\n@@ -2395,7 +2396,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         // \"<Output = T>\"\n         let future_params = self.arena.alloc(hir::GenericArgs {\n-            args: HirVec::new(),\n+            args: &[],\n             bindings: arena_vec![self; hir::TypeBinding {\n                 ident: Ident::with_dummy_span(FN_OUTPUT_NAME),\n                 kind: hir::TypeBindingKind::Equality { ty: output_ty },\n@@ -2474,18 +2475,27 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::Lifetime { hir_id: self.lower_node_id(id), span, name }\n     }\n \n-    fn lower_generic_params(\n+    fn lower_generic_params_mut(\n         &mut self,\n         params: &[GenericParam],\n         add_bounds: &NodeMap<Vec<GenericBound>>,\n         mut itctx: ImplTraitContext<'_, 'hir>,\n-    ) -> HirVec<hir::GenericParam<'hir>> {\n+    ) -> Vec<hir::GenericParam<'hir>> {\n         params\n             .iter()\n             .map(|param| self.lower_generic_param(param, add_bounds, itctx.reborrow()))\n             .collect()\n     }\n \n+    fn lower_generic_params(\n+        &mut self,\n+        params: &[GenericParam],\n+        add_bounds: &NodeMap<Vec<GenericBound>>,\n+        itctx: ImplTraitContext<'_, 'hir>,\n+    ) -> &'hir [hir::GenericParam<'hir>] {\n+        self.arena.alloc_from_iter(self.lower_generic_params_mut(params, add_bounds, itctx))\n+    }\n+\n     fn lower_generic_param(\n         &mut self,\n         param: &GenericParam,\n@@ -2593,11 +2603,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             this.lower_trait_ref(&p.trait_ref, itctx)\n         });\n \n-        hir::PolyTraitRef {\n-            bound_generic_params: self.arena.alloc_from_iter(bound_generic_params.into_iter()),\n-            trait_ref,\n-            span: p.span,\n-        }\n+        hir::PolyTraitRef { bound_generic_params, trait_ref, span: p.span }\n     }\n \n     fn lower_mt(&mut self, mt: &MutTy, itctx: ImplTraitContext<'_, 'hir>) -> hir::MutTy<'hir> {\n@@ -3304,3 +3310,24 @@ fn body_ids(bodies: &BTreeMap<hir::BodyId, hir::Body<'hir>>) -> Vec<hir::BodyId>\n     body_ids.sort_by_key(|b| bodies[b].value.span);\n     body_ids\n }\n+\n+/// Helper struct for delayed construction of GenericArgs.\n+struct GenericArgsCtor<'hir> {\n+    args: Vec<hir::GenericArg<'hir>>,\n+    bindings: &'hir [hir::TypeBinding<'hir>],\n+    parenthesized: bool,\n+}\n+\n+impl GenericArgsCtor<'hir> {\n+    fn is_empty(&self) -> bool {\n+        self.args.is_empty() && self.bindings.is_empty() && !self.parenthesized\n+    }\n+\n+    fn into_generic_args(self, arena: &'hir Arena<'hir>) -> hir::GenericArgs<'hir> {\n+        hir::GenericArgs {\n+            args: arena.alloc_from_iter(self.args),\n+            bindings: self.bindings,\n+            parenthesized: self.parenthesized,\n+        }\n+    }\n+}"}, {"sha": "c9dd0a23a7d1ebe0ac38c3f67d25c335198df6b5", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "patch": "@@ -5,6 +5,7 @@ use super::ImplTraitTypeIdVisitor;\n use super::LoweringContext;\n use super::ParamMode;\n \n+use crate::arena::Arena;\n use crate::hir;\n use crate::hir::def::{DefKind, Res};\n use crate::hir::def_id::DefId;\n@@ -1295,11 +1296,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    pub(super) fn lower_generics(\n+    pub(super) fn lower_generics_mut(\n         &mut self,\n         generics: &Generics,\n         itctx: ImplTraitContext<'_, 'hir>,\n-    ) -> hir::Generics<'hir> {\n+    ) -> GenericsCtor<'hir> {\n         // Collect `?Trait` bounds in where clause and move them to parameter definitions.\n         // FIXME: this could probably be done with less rightward drift. It also looks like two\n         // control paths where `report_error` is called are the only paths that advance to after the\n@@ -1355,13 +1356,22 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n         }\n \n-        hir::Generics {\n-            params: self.lower_generic_params(&generics.params, &add_bounds, itctx),\n+        GenericsCtor {\n+            params: self.lower_generic_params_mut(&generics.params, &add_bounds, itctx),\n             where_clause: self.lower_where_clause(&generics.where_clause),\n             span: generics.span,\n         }\n     }\n \n+    pub(super) fn lower_generics(\n+        &mut self,\n+        generics: &Generics,\n+        itctx: ImplTraitContext<'_, 'hir>,\n+    ) -> hir::Generics<'hir> {\n+        let generics_ctor = self.lower_generics_mut(generics, itctx);\n+        generics_ctor.into_generics(self.arena)\n+    }\n+\n     fn lower_where_clause(&mut self, wc: &WhereClause) -> hir::WhereClause<'hir> {\n         self.with_anonymous_lifetime_mode(AnonymousLifetimeMode::ReportError, |this| {\n             hir::WhereClause {\n@@ -1383,13 +1393,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }) => {\n                 self.with_in_scope_lifetime_defs(&bound_generic_params, |this| {\n                     hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n-                        bound_generic_params: this.arena.alloc_from_iter(\n-                            this.lower_generic_params(\n-                                bound_generic_params,\n-                                &NodeMap::default(),\n-                                ImplTraitContext::disallowed(),\n-                            )\n-                            .into_iter(),\n+                        bound_generic_params: this.lower_generic_params(\n+                            bound_generic_params,\n+                            &NodeMap::default(),\n+                            ImplTraitContext::disallowed(),\n                         ),\n                         bounded_ty: this.lower_ty(bounded_ty, ImplTraitContext::disallowed()),\n                         bounds: this.arena.alloc_from_iter(bounds.iter().filter_map(|bound| {\n@@ -1426,3 +1433,20 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n }\n+\n+/// Helper struct for delayed construction of Generics.\n+pub(super) struct GenericsCtor<'hir> {\n+    pub(super) params: Vec<hir::GenericParam<'hir>>,\n+    where_clause: hir::WhereClause<'hir>,\n+    span: Span,\n+}\n+\n+impl GenericsCtor<'hir> {\n+    pub(super) fn into_generics(self, arena: &'hir Arena<'hir>) -> hir::Generics<'hir> {\n+        hir::Generics {\n+            params: arena.alloc_from_iter(self.params),\n+            where_clause: self.where_clause,\n+            span: self.span,\n+        }\n+    }\n+}"}, {"sha": "a66863ed77cc15a15ad20f2c0244666277432508", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "patch": "@@ -41,15 +41,6 @@ use syntax_pos::{MultiSpan, Span, DUMMY_SP};\n /// of `Vec` to avoid keeping extra capacity.\n pub type HirVec<T> = P<[T]>;\n \n-macro_rules! hir_vec {\n-    ($elem:expr; $n:expr) => (\n-        $crate::hir::HirVec::from(vec![$elem; $n])\n-    );\n-    ($($x:expr),*) => (\n-        $crate::hir::HirVec::from(vec![$($x),*])\n-    );\n-}\n-\n pub mod check_attr;\n pub mod def;\n pub mod def_id;\n@@ -415,7 +406,7 @@ impl GenericArg<'_> {\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct GenericArgs<'hir> {\n     /// The generic arguments for this path segment.\n-    pub args: HirVec<GenericArg<'hir>>,\n+    pub args: &'hir [GenericArg<'hir>],\n     /// Bindings (equality constraints) on associated types, if present.\n     /// E.g., `Foo<A = Bar>`.\n     pub bindings: &'hir [TypeBinding<'hir>],\n@@ -427,7 +418,7 @@ pub struct GenericArgs<'hir> {\n \n impl GenericArgs<'_> {\n     pub const fn none() -> Self {\n-        Self { args: HirVec::new(), bindings: &[], parenthesized: false }\n+        Self { args: &[], bindings: &[], parenthesized: false }\n     }\n \n     pub fn is_empty(&self) -> bool {\n@@ -436,7 +427,7 @@ impl GenericArgs<'_> {\n \n     pub fn inputs(&self) -> &[Ty<'_>] {\n         if self.parenthesized {\n-            for arg in &self.args {\n+            for arg in self.args {\n                 match arg {\n                     GenericArg::Lifetime(_) => {}\n                     GenericArg::Type(ref ty) => {\n@@ -458,7 +449,7 @@ impl GenericArgs<'_> {\n         // presence of this method will be a constant reminder.\n         let mut own_counts: GenericParamCount = Default::default();\n \n-        for arg in &self.args {\n+        for arg in self.args {\n             match arg {\n                 GenericArg::Lifetime(_) => own_counts.lifetimes += 1,\n                 GenericArg::Type(_) => own_counts.types += 1,\n@@ -555,15 +546,15 @@ pub struct GenericParamCount {\n /// of a function, enum, trait, etc.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct Generics<'hir> {\n-    pub params: HirVec<GenericParam<'hir>>,\n+    pub params: &'hir [GenericParam<'hir>],\n     pub where_clause: WhereClause<'hir>,\n     pub span: Span,\n }\n \n impl Generics<'hir> {\n     pub const fn empty() -> Generics<'hir> {\n         Generics {\n-            params: HirVec::new(),\n+            params: &[],\n             where_clause: WhereClause { predicates: &[], span: DUMMY_SP },\n             span: DUMMY_SP,\n         }\n@@ -575,7 +566,7 @@ impl Generics<'hir> {\n         // presence of this method will be a constant reminder.\n         let mut own_counts: GenericParamCount = Default::default();\n \n-        for param in &self.params {\n+        for param in self.params {\n             match param.kind {\n                 GenericParamKind::Lifetime { .. } => own_counts.lifetimes += 1,\n                 GenericParamKind::Type { .. } => own_counts.types += 1,\n@@ -587,7 +578,7 @@ impl Generics<'hir> {\n     }\n \n     pub fn get_named(&self, name: Symbol) -> Option<&GenericParam<'_>> {\n-        for param in &self.params {\n+        for param in self.params {\n             if name == param.name.ident().name {\n                 return Some(param);\n             }\n@@ -2128,7 +2119,7 @@ pub struct InlineAsmOutput {\n }\n \n // NOTE(eddyb) This is used within MIR as well, so unlike the rest of the HIR,\n-// it needs to be `Clone` and use plain `Vec<T>` instead of `HirVec<T>`.\n+// it needs to be `Clone` and use plain `Vec<T>` instead of arena-allocated slice.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable, PartialEq)]\n pub struct InlineAsmInner {\n     pub asm: Symbol,"}, {"sha": "ae760d22f751c2afac5ae9aa642e0dbaa025ec6d", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "patch": "@@ -10,7 +10,6 @@ use syntax::util::parser::{self, AssocOp, Fixity};\n use syntax_pos::{self, BytePos, FileName};\n \n use crate::hir;\n-use crate::hir::HirVec;\n use crate::hir::{GenericArg, GenericParam, GenericParamKind};\n use crate::hir::{GenericBound, PatKind, RangeEnd, TraitBoundModifier};\n \n@@ -2097,7 +2096,7 @@ impl<'a> State<'a> {\n             self.print_generic_params(generic_params);\n         }\n         let generics = hir::Generics {\n-            params: HirVec::new(),\n+            params: &[],\n             where_clause: hir::WhereClause { predicates: &[], span: syntax_pos::DUMMY_SP },\n             span: syntax_pos::DUMMY_SP,\n         };"}, {"sha": "5f8a58636c083e5e8a866b379c8248b315f9956b", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "patch": "@@ -657,7 +657,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 let mut elision = None;\n                 let mut lifetimes = FxHashMap::default();\n                 let mut non_lifetime_count = 0;\n-                for param in &generics.params {\n+                for param in generics.params {\n                     match param.kind {\n                         GenericParamKind::Lifetime { .. } => {\n                             let (name, reg) = Region::early(&self.tcx.hir(), &mut index, &param);\n@@ -899,7 +899,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {\n         check_mixed_explicit_and_in_band_defs(self.tcx, &generics.params);\n-        for param in &generics.params {\n+        for param in generics.params {\n             match param.kind {\n                 GenericParamKind::Lifetime { .. } => {}\n                 GenericParamKind::Type { ref default, .. } => {\n@@ -1996,7 +1996,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         debug!(\"visit_segment_args: object_lifetime_defaults={:?}\", object_lifetime_defaults);\n \n         let mut i = 0;\n-        for arg in &generic_args.args {\n+        for arg in generic_args.args {\n             match arg {\n                 GenericArg::Lifetime(_) => {}\n                 GenericArg::Type(ty) => {\n@@ -2789,7 +2789,7 @@ fn insert_late_bound_lifetimes(\n     let mut appears_in_where_clause = AllCollector::default();\n     appears_in_where_clause.visit_generics(generics);\n \n-    for param in &generics.params {\n+    for param in generics.params {\n         if let hir::GenericParamKind::Lifetime { .. } = param.kind {\n             if !param.bounds.is_empty() {\n                 // `'a: 'b` means both `'a` and `'b` are referenced\n@@ -2809,7 +2809,7 @@ fn insert_late_bound_lifetimes(\n     // - appear in the inputs\n     // - do not appear in the where-clauses\n     // - are not implicitly captured by `impl Trait`\n-    for param in &generics.params {\n+    for param in generics.params {\n         match param.kind {\n             hir::GenericParamKind::Lifetime { .. } => { /* fall through */ }\n "}, {"sha": "9cf49f8ab4b09dc8acea517b2c5bd36b3ed2bea6", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "patch": "@@ -841,7 +841,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n         match it.kind {\n             hir::ItemKind::Fn(.., ref generics, _) => {\n                 if let Some(no_mangle_attr) = attr::find_by_name(&it.attrs, sym::no_mangle) {\n-                    for param in &generics.params {\n+                    for param in generics.params {\n                         match param.kind {\n                             GenericParamKind::Lifetime { .. } => {}\n                             GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {\n@@ -1663,7 +1663,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitOutlivesRequirements {\n             let mut bound_count = 0;\n             let mut lint_spans = Vec::new();\n \n-            for param in &hir_generics.params {\n+            for param in hir_generics.params {\n                 let has_lifetime_bounds = param.bounds.iter().any(|bound| {\n                     if let hir::GenericBound::Outlives(_) = bound { true } else { false }\n                 });"}, {"sha": "b14c9c0eb590c96e8891e570e39ee6c7bf522427", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "patch": "@@ -1569,7 +1569,7 @@ impl EncodeContext<'tcx> {\n     }\n \n     fn encode_info_for_generics(&mut self, generics: &hir::Generics<'tcx>) {\n-        for param in &generics.params {\n+        for param in generics.params {\n             let def_id = self.tcx.hir().local_def_id(param.hir_id);\n             match param.kind {\n                 GenericParamKind::Lifetime { .. } => continue,"}, {"sha": "f28539c74f44709f50661258047b61b42ab31fbf", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "patch": "@@ -650,7 +650,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         args: &'hir hir::GenericArgs<'hir>,\n         search_stack: &mut Vec<(Ty<'tcx>, &'hir hir::Ty<'hir>)>,\n     ) -> Option<&'hir hir::Lifetime> {\n-        for (kind, hir_arg) in substs.iter().zip(&args.args) {\n+        for (kind, hir_arg) in substs.iter().zip(args.args) {\n             match (kind.unpack(), hir_arg) {\n                 (GenericArgKind::Lifetime(r), hir::GenericArg::Lifetime(lt)) => {\n                     if r.to_region_vid() == needle_fr {"}, {"sha": "844bebdf7b87457d031c138a064b469d0e2968e3", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "patch": "@@ -1132,7 +1132,7 @@ fn create_mono_items_for_default_impls<'tcx>(\n ) {\n     match item.kind {\n         hir::ItemKind::Impl(_, _, _, ref generics, .., ref impl_item_refs) => {\n-            for param in &generics.params {\n+            for param in generics.params {\n                 match param.kind {\n                     hir::GenericParamKind::Lifetime { .. } => {}\n                     hir::GenericParamKind::Type { .. } | hir::GenericParamKind::Const { .. } => {"}, {"sha": "d666c80b899e99e13d86e223d020945f80f90823", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "patch": "@@ -1653,7 +1653,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {\n-        for param in &generics.params {\n+        for param in generics.params {\n             for bound in param.bounds {\n                 self.check_generic_bound(bound);\n             }"}, {"sha": "4cfa051adc182a2c39a9bd376e1eb5598c35081b", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "patch": "@@ -6,7 +6,7 @@ use crate::hir::def::{CtorOf, DefKind, Res};\n use crate::hir::def_id::DefId;\n use crate::hir::print;\n use crate::hir::ptr::P;\n-use crate::hir::{self, ExprKind, GenericArg, GenericArgs, HirVec};\n+use crate::hir::{self, ExprKind, GenericArg, GenericArgs};\n use crate::lint;\n use crate::middle::lang_items::SizedTraitLangItem;\n use crate::middle::resolve_lifetime as rl;\n@@ -255,8 +255,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         seg: &hir::PathSegment<'_>,\n         is_method_call: bool,\n     ) -> bool {\n-        let empty_args =\n-            P(hir::GenericArgs { args: HirVec::new(), bindings: &[], parenthesized: false });\n+        let empty_args = P(hir::GenericArgs { args: &[], bindings: &[], parenthesized: false });\n         let suppress_mismatch = Self::check_impl_trait(tcx, seg, &def);\n         Self::check_generic_arg_count(\n             tcx,\n@@ -2278,7 +2277,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let mut has_err = false;\n         for segment in segments {\n             let (mut err_for_lt, mut err_for_ty, mut err_for_ct) = (false, false, false);\n-            for arg in &segment.generic_args().args {\n+            for arg in segment.generic_args().args {\n                 let (span, kind) = match arg {\n                     hir::GenericArg::Lifetime(lt) => {\n                         if err_for_lt {"}, {"sha": "b387a5d15201764f090dc37c0e0845b81151a65c", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "patch": "@@ -83,7 +83,7 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n                 }\n                 Err(traits::OrphanCheckErr::UncoveredTy(param_ty, local_type)) => {\n                     let mut sp = sp;\n-                    for param in &generics.params {\n+                    for param in generics.params {\n                         if param.name.ident().to_string() == param_ty.to_string() {\n                             sp = param.span;\n                         }"}, {"sha": "1e3e6d77b9261103312a2f7a56fc88c40cbf5ef3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=aa3678d4f4c9aa8bd50e8d08e387dc9d8d326154", "patch": "@@ -117,7 +117,7 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n     }\n \n     fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {\n-        for param in &generics.params {\n+        for param in generics.params {\n             match param.kind {\n                 hir::GenericParamKind::Lifetime { .. } => {}\n                 hir::GenericParamKind::Type { default: Some(_), .. } => {\n@@ -860,7 +860,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n             outer_index: ty::INNERMOST,\n             has_late_bound_regions: None,\n         };\n-        for param in &generics.params {\n+        for param in generics.params {\n             if let GenericParamKind::Lifetime { .. } = param.kind {\n                 if tcx.is_late_bound(param.hir_id) {\n                     return Some(param.span);\n@@ -2102,7 +2102,7 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n \n     // Collect the predicates that were written inline by the user on each\n     // type parameter (e.g., `<T: Foo>`).\n-    for param in &ast_generics.params {\n+    for param in ast_generics.params {\n         if let GenericParamKind::Type { .. } = param.kind {\n             let name = param.name.ident().name;\n             let param_ty = ty::ParamTy::new(index, name).to_ty(tcx);"}]}