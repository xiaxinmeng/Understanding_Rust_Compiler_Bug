{"sha": "b80a111e19d9ac8e1847ea406c099f42a8ff7310", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MGExMTFlMTlkOWFjOGUxODQ3ZWE0MDZjMDk5ZjQyYThmZjczMTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T04:53:25Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:30Z"}, "message": "librustc: De-`@mut` `FunctionDebugContextData::scope_map`", "tree": {"sha": "d8bfdb80492d30ebd29ef540764db31462fda3d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8bfdb80492d30ebd29ef540764db31462fda3d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b80a111e19d9ac8e1847ea406c099f42a8ff7310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b80a111e19d9ac8e1847ea406c099f42a8ff7310", "html_url": "https://github.com/rust-lang/rust/commit/b80a111e19d9ac8e1847ea406c099f42a8ff7310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b80a111e19d9ac8e1847ea406c099f42a8ff7310/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7437a56f3b6fdecaac8bd537befdc5cebccce8f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7437a56f3b6fdecaac8bd537befdc5cebccce8f1", "html_url": "https://github.com/rust-lang/rust/commit/7437a56f3b6fdecaac8bd537befdc5cebccce8f1"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "fec70bd4a1b4a37d69418100a11dc965b763e532", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b80a111e19d9ac8e1847ea406c099f42a8ff7310/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80a111e19d9ac8e1847ea406c099f42a8ff7310/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=b80a111e19d9ac8e1847ea406c099f42a8ff7310", "patch": "@@ -248,7 +248,7 @@ impl FunctionDebugContext {\n }\n \n struct FunctionDebugContextData {\n-    scope_map: HashMap<ast::NodeId, DIScope>,\n+    scope_map: RefCell<HashMap<ast::NodeId, DIScope>>,\n     fn_metadata: DISubprogram,\n     argument_counter: uint,\n     source_locations_enabled: bool,\n@@ -762,14 +762,21 @@ pub fn create_function_debug_context(cx: &CrateContext,\n \n     // Initialize fn debug context (including scope map and namespace map)\n     let mut fn_debug_context = ~FunctionDebugContextData {\n-        scope_map: HashMap::new(),\n+        scope_map: RefCell::new(HashMap::new()),\n         fn_metadata: fn_metadata,\n         argument_counter: 1,\n         source_locations_enabled: false,\n     };\n \n     let arg_pats = fn_decl.inputs.map(|arg_ref| arg_ref.pat);\n-    populate_scope_map(cx, arg_pats, top_level_block, fn_metadata, &mut fn_debug_context.scope_map);\n+    {\n+        let mut scope_map = fn_debug_context.scope_map.borrow_mut();\n+        populate_scope_map(cx,\n+                           arg_pats,\n+                           top_level_block,\n+                           fn_metadata,\n+                           scope_map.get());\n+    }\n \n     // Clear the debug location so we don't assign them in the function prelude\n     set_debug_location(cx, UnknownLocation);\n@@ -1089,8 +1096,9 @@ fn scope_metadata(fcx: &FunctionContext,\n                   span: Span)\n                -> DIScope {\n     let scope_map = &fcx.debug_context.get_ref(fcx.ccx, span).scope_map;\n+    let scope_map = scope_map.borrow();\n \n-    match scope_map.find_copy(&node_id) {\n+    match scope_map.get().find_copy(&node_id) {\n         Some(scope_metadata) => scope_metadata,\n         None => {\n             let node = fcx.ccx.tcx.items.get_copy(&node_id);"}]}