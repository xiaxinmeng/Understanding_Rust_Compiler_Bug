{"sha": "28cce241dc7ee3c848021f00e48fcb991c067db4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4Y2NlMjQxZGM3ZWUzYzg0ODAyMWYwMGU0OGZjYjk5MWMwNjdkYjQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-07T20:52:01Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-07T20:52:01Z"}, "message": "syntax: try to fix pattern printing harder, r=burningtree.", "tree": {"sha": "24d1608b86b35cf46c3cb25f2d3f8d414669a469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24d1608b86b35cf46c3cb25f2d3f8d414669a469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28cce241dc7ee3c848021f00e48fcb991c067db4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28cce241dc7ee3c848021f00e48fcb991c067db4", "html_url": "https://github.com/rust-lang/rust/commit/28cce241dc7ee3c848021f00e48fcb991c067db4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28cce241dc7ee3c848021f00e48fcb991c067db4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bdbfa41e6a2ce519e6ef2473aa812589bb475ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bdbfa41e6a2ce519e6ef2473aa812589bb475ab", "html_url": "https://github.com/rust-lang/rust/commit/5bdbfa41e6a2ce519e6ef2473aa812589bb475ab"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "bb4b05c36e6610800997195dafaea7fc67ff411e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/28cce241dc7ee3c848021f00e48fcb991c067db4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28cce241dc7ee3c848021f00e48fcb991c067db4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=28cce241dc7ee3c848021f00e48fcb991c067db4", "patch": "@@ -1539,6 +1539,10 @@ fn print_path(s: ps, &&path: @ast::path, colons_before_params: bool) {\n }\n \n fn print_pat(s: ps, &&pat: @ast::pat) {\n+    print_pat_full(s, pat, true)\n+}\n+\n+fn print_pat_full(s: ps, &&pat: @ast::pat, print_binding_mode: bool) {\n     maybe_print_comment(s, pat.span.lo);\n     let ann_node = node_pat(s, pat);\n     (s.ann.pre)(ann_node);\n@@ -1547,24 +1551,29 @@ fn print_pat(s: ps, &&pat: @ast::pat) {\n     match pat.node {\n       ast::pat_wild => word(s.s, ~\"_\"),\n       ast::pat_ident(binding_mode, path, sub) => {\n-        match binding_mode {\n-          ast::bind_by_ref(mutbl) => {\n-            word_nbsp(s, ~\"ref\");\n-            print_mutability(s, mutbl);\n-          }\n-          ast::bind_by_move => {\n-            word_nbsp(s, ~\"move\");\n+          if print_binding_mode {\n+              match binding_mode {\n+                  ast::bind_by_ref(mutbl) => {\n+                      word_nbsp(s, ~\"ref\");\n+                      print_mutability(s, mutbl);\n+                  }\n+                  ast::bind_by_move => {\n+                      word_nbsp(s, ~\"move\");\n+                  }\n+                  ast::bind_by_value => {\n+                      word_nbsp(s, ~\"copy\");\n+                  }\n+                  ast::bind_by_implicit_ref => {}\n+              }\n           }\n-          ast::bind_by_value => {\n-            word_nbsp(s, ~\"copy\");\n+          print_path(s, path, true);\n+          match sub {\n+              Some(p) => {\n+                  word(s.s, ~\"@\");\n+                  print_pat(s, p);\n+              }\n+              None => ()\n           }\n-          ast::bind_by_implicit_ref => {}\n-        }\n-        print_path(s, path, true);\n-        match sub {\n-          Some(p) => { word(s.s, ~\"@\"); print_pat(s, p); }\n-          None => ()\n-        }\n       }\n       ast::pat_enum(path, args_) => {\n         print_path(s, path, true);\n@@ -1619,8 +1628,14 @@ fn print_pat(s: ps, &&pat: @ast::pat) {\n         commasep(s, inconsistent, elts, print_pat);\n         pclose(s);\n       }\n-      ast::pat_box(inner) => { word(s.s, ~\"@\"); print_pat(s, inner); }\n-      ast::pat_uniq(inner) => { word(s.s, ~\"~\"); print_pat(s, inner); }\n+      ast::pat_box(inner) => {\n+          word(s.s, ~\"@\");\n+          print_pat(s, inner);\n+      }\n+      ast::pat_uniq(inner) => {\n+          word(s.s, ~\"~\");\n+          print_pat(s, inner);\n+      }\n       ast::pat_region(inner) => {\n           word(s.s, ~\"&\");\n           print_pat(s, inner);\n@@ -1870,7 +1885,7 @@ fn print_arg(s: ps, input: ast::arg) {\n     ibox(s, indent_unit);\n     print_arg_mode(s, input.mode);\n     match input.ty.node {\n-      ast::ty_infer => print_pat(s, input.pat),\n+      ast::ty_infer => print_pat_full(s, input.pat, false),\n       _ => {\n         match input.pat.node {\n             ast::pat_ident(_, path, _) if\n@@ -1879,7 +1894,7 @@ fn print_arg(s: ps, input: ast::arg) {\n                 // Do nothing.\n             }\n             _ => {\n-                print_pat(s, input.pat);\n+                print_pat_full(s, input.pat, false);\n                 word(s.s, ~\":\");\n                 space(s.s);\n             }"}]}