{"sha": "de3d581198eaf71053d19ee5b65cbe012e2e7aeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlM2Q1ODExOThlYWY3MTA1M2QxOWVlNWI2NWNiZTAxMmUyZTdhZWI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T04:13:59Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:29Z"}, "message": "librustc: De-`@mut` the typechecking crate context", "tree": {"sha": "edebac4d6b118b733c69f4f04d0525e7fe44ba3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edebac4d6b118b733c69f4f04d0525e7fe44ba3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de3d581198eaf71053d19ee5b65cbe012e2e7aeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de3d581198eaf71053d19ee5b65cbe012e2e7aeb", "html_url": "https://github.com/rust-lang/rust/commit/de3d581198eaf71053d19ee5b65cbe012e2e7aeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de3d581198eaf71053d19ee5b65cbe012e2e7aeb/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fe1cb1aff79ecf66a7962374c5e048110f8d782", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe1cb1aff79ecf66a7962374c5e048110f8d782", "html_url": "https://github.com/rust-lang/rust/commit/4fe1cb1aff79ecf66a7962374c5e048110f8d782"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "747c097f199ed24676dcd0d4a71e2074c2f62f8d", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de3d581198eaf71053d19ee5b65cbe012e2e7aeb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3d581198eaf71053d19ee5b65cbe012e2e7aeb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=de3d581198eaf71053d19ee5b65cbe012e2e7aeb", "patch": "@@ -343,7 +343,7 @@ impl<'a> LookupContext<'a> {\n         // If the method being called is associated with a trait, then\n         // find all the impls of that trait.  Each of those are\n         // candidates.\n-        let trait_map: &mut resolve::TraitMap = &mut self.fcx.ccx.trait_map;\n+        let trait_map: &resolve::TraitMap = &self.fcx.ccx.trait_map;\n         let opt_applicable_traits = trait_map.find(&self.expr.id);\n         for applicable_traits in opt_applicable_traits.iter() {\n             for trait_did in applicable_traits.iter() {"}, {"sha": "1b89cf67cabba985421654f189417789fe12e541", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/de3d581198eaf71053d19ee5b65cbe012e2e7aeb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3d581198eaf71053d19ee5b65cbe012e2e7aeb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=de3d581198eaf71053d19ee5b65cbe012e2e7aeb", "patch": "@@ -251,7 +251,7 @@ pub struct FnCtxt {\n \n     inh: @Inherited,\n \n-    ccx: @mut CrateCtxt,\n+    ccx: @CrateCtxt,\n }\n \n impl Inherited {\n@@ -272,7 +272,7 @@ impl Inherited {\n }\n \n // Used by check_const and check_enum_variants\n-pub fn blank_fn_ctxt(ccx: @mut CrateCtxt,\n+pub fn blank_fn_ctxt(ccx: @CrateCtxt,\n                      rty: ty::t,\n                      region_bnd: ast::NodeId)\n                      -> @FnCtxt {\n@@ -302,7 +302,7 @@ impl ExprTyProvider for FnCtxt {\n     }\n }\n \n-struct CheckItemTypesVisitor { ccx: @mut CrateCtxt }\n+struct CheckItemTypesVisitor { ccx: @CrateCtxt }\n \n impl Visitor<()> for CheckItemTypesVisitor {\n     fn visit_item(&mut self, i:@ast::item, _:()) {\n@@ -311,12 +311,12 @@ impl Visitor<()> for CheckItemTypesVisitor {\n     }\n }\n \n-pub fn check_item_types(ccx: @mut CrateCtxt, crate: &ast::Crate) {\n+pub fn check_item_types(ccx: @CrateCtxt, crate: &ast::Crate) {\n     let mut visit = CheckItemTypesVisitor { ccx: ccx };\n     visit::walk_crate(&mut visit, crate, ());\n }\n \n-pub fn check_bare_fn(ccx: @mut CrateCtxt,\n+pub fn check_bare_fn(ccx: @CrateCtxt,\n                      decl: &ast::fn_decl,\n                      body: ast::P<ast::Block>,\n                      id: ast::NodeId,\n@@ -407,7 +407,7 @@ impl Visitor<()> for GatherLocalsVisitor {\n \n }\n \n-pub fn check_fn(ccx: @mut CrateCtxt,\n+pub fn check_fn(ccx: @CrateCtxt,\n                 opt_self_info: Option<SelfInfo>,\n                 purity: ast::purity,\n                 fn_sig: &ty::FnSig,\n@@ -556,7 +556,7 @@ pub fn check_no_duplicate_fields(tcx: ty::ctxt,\n     }\n }\n \n-pub fn check_struct(ccx: @mut CrateCtxt, id: ast::NodeId, span: Span) {\n+pub fn check_struct(ccx: @CrateCtxt, id: ast::NodeId, span: Span) {\n     let tcx = ccx.tcx;\n \n     // Check that the class is instantiable\n@@ -567,7 +567,7 @@ pub fn check_struct(ccx: @mut CrateCtxt, id: ast::NodeId, span: Span) {\n     }\n }\n \n-pub fn check_item(ccx: @mut CrateCtxt, it: @ast::item) {\n+pub fn check_item(ccx: @CrateCtxt, it: @ast::item) {\n     debug!(\"check_item(it.id={}, it.ident={})\",\n            it.id,\n            ty::item_path_str(ccx.tcx, local_def(it.id)));\n@@ -670,7 +670,7 @@ pub fn check_item(ccx: @mut CrateCtxt, it: @ast::item) {\n     }\n }\n \n-fn check_method_body(ccx: @mut CrateCtxt,\n+fn check_method_body(ccx: @CrateCtxt,\n                      item_generics: &ty::Generics,\n                      self_bound: Option<@ty::TraitRef>,\n                      method: @ast::method) {\n@@ -722,7 +722,7 @@ fn check_method_body(ccx: @mut CrateCtxt,\n         param_env);\n }\n \n-fn check_impl_methods_against_trait(ccx: @mut CrateCtxt,\n+fn check_impl_methods_against_trait(ccx: @CrateCtxt,\n                                     impl_span: Span,\n                                     impl_generics: &ty::Generics,\n                                     ast_trait_ref: &ast::trait_ref,\n@@ -1388,7 +1388,7 @@ pub fn check_lit(fcx: @FnCtxt, lit: @ast::lit) -> ty::t {\n     }\n }\n \n-pub fn valid_range_bounds(ccx: @mut CrateCtxt,\n+pub fn valid_range_bounds(ccx: @CrateCtxt,\n                           from: @ast::Expr,\n                           to: @ast::Expr)\n                        -> Option<bool> {\n@@ -3443,7 +3443,7 @@ pub fn check_block_with_expected(fcx: @FnCtxt,\n     fcx.ps.set(prev);\n }\n \n-pub fn check_const(ccx: @mut CrateCtxt,\n+pub fn check_const(ccx: @CrateCtxt,\n                    sp: Span,\n                    e: @ast::Expr,\n                    id: ast::NodeId) {\n@@ -3519,15 +3519,15 @@ pub fn check_simd(tcx: ty::ctxt, sp: Span, id: ast::NodeId) {\n     }\n }\n \n-pub fn check_enum_variants(ccx: @mut CrateCtxt,\n+pub fn check_enum_variants(ccx: @CrateCtxt,\n                            sp: Span,\n                            vs: &[ast::P<ast::variant>],\n                            id: ast::NodeId) {\n \n-    fn disr_in_range(ccx: @mut CrateCtxt,\n+    fn disr_in_range(ccx: @CrateCtxt,\n                      ty: attr::IntType,\n                      disr: ty::Disr) -> bool {\n-        fn uint_in_range(ccx: @mut CrateCtxt, ty: ast::uint_ty, disr: ty::Disr) -> bool {\n+        fn uint_in_range(ccx: @CrateCtxt, ty: ast::uint_ty, disr: ty::Disr) -> bool {\n             match ty {\n                 ast::ty_u8 => disr as u8 as Disr == disr,\n                 ast::ty_u16 => disr as u16 as Disr == disr,\n@@ -3536,7 +3536,7 @@ pub fn check_enum_variants(ccx: @mut CrateCtxt,\n                 ast::ty_u => uint_in_range(ccx, ccx.tcx.sess.targ_cfg.uint_type, disr)\n             }\n         }\n-        fn int_in_range(ccx: @mut CrateCtxt, ty: ast::int_ty, disr: ty::Disr) -> bool {\n+        fn int_in_range(ccx: @CrateCtxt, ty: ast::int_ty, disr: ty::Disr) -> bool {\n             match ty {\n                 ast::ty_i8 => disr as i8 as Disr == disr,\n                 ast::ty_i16 => disr as i16 as Disr == disr,\n@@ -3551,7 +3551,7 @@ pub fn check_enum_variants(ccx: @mut CrateCtxt,\n         }\n     }\n \n-    fn do_check(ccx: @mut CrateCtxt,\n+    fn do_check(ccx: @CrateCtxt,\n                 vs: &[ast::P<ast::variant>],\n                 id: ast::NodeId,\n                 hint: attr::ReprAttr)\n@@ -3923,7 +3923,7 @@ pub fn may_break(cx: ty::ctxt, id: ast::NodeId, b: ast::P<ast::Block>) -> bool {\n         }}))\n }\n \n-pub fn check_bounds_are_used(ccx: @mut CrateCtxt,\n+pub fn check_bounds_are_used(ccx: @CrateCtxt,\n                              span: Span,\n                              tps: &OptVec<ast::TyParam>,\n                              ty: ty::t) {\n@@ -3953,8 +3953,8 @@ pub fn check_bounds_are_used(ccx: @mut CrateCtxt,\n     }\n }\n \n-pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n-    fn param(ccx: @mut CrateCtxt, n: uint) -> ty::t {\n+pub fn check_intrinsic_type(ccx: @CrateCtxt, it: @ast::foreign_item) {\n+    fn param(ccx: @CrateCtxt, n: uint) -> ty::t {\n         ty::mk_param(ccx.tcx, n, local_def(0))\n     }\n "}, {"sha": "dc17a082201a29701656d43f11854c3129dd76f3", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de3d581198eaf71053d19ee5b65cbe012e2e7aeb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3d581198eaf71053d19ee5b65cbe012e2e7aeb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=de3d581198eaf71053d19ee5b65cbe012e2e7aeb", "patch": "@@ -728,7 +728,7 @@ fn resolve_expr(fcx: @FnCtxt,\n     visit::walk_expr(&mut fcx, ex, ());\n }\n \n-pub fn resolve_impl(ccx: @mut CrateCtxt,\n+pub fn resolve_impl(ccx: @CrateCtxt,\n                     impl_item: @ast::item,\n                     impl_generics: &ty::Generics,\n                     impl_trait_ref: &ty::TraitRef) {"}, {"sha": "5bca8b4432c18085a261ea0e78057d6cc5af6a09", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de3d581198eaf71053d19ee5b65cbe012e2e7aeb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3d581198eaf71053d19ee5b65cbe012e2e7aeb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=de3d581198eaf71053d19ee5b65cbe012e2e7aeb", "patch": "@@ -142,15 +142,15 @@ pub fn get_base_type_def_id(inference_context: @mut InferCtxt,\n     }\n }\n \n-pub fn CoherenceChecker(crate_context: @mut CrateCtxt) -> CoherenceChecker {\n+pub fn CoherenceChecker(crate_context: @CrateCtxt) -> CoherenceChecker {\n     CoherenceChecker {\n         crate_context: crate_context,\n         inference_context: new_infer_ctxt(crate_context.tcx),\n     }\n }\n \n pub struct CoherenceChecker {\n-    crate_context: @mut CrateCtxt,\n+    crate_context: @CrateCtxt,\n     inference_context: @mut InferCtxt,\n }\n \n@@ -825,7 +825,7 @@ fn subst_receiver_types_in_method_ty(tcx: ty::ctxt,\n     )\n }\n \n-pub fn check_coherence(crate_context: @mut CrateCtxt, crate: &Crate) {\n+pub fn check_coherence(crate_context: @CrateCtxt, crate: &Crate) {\n     let coherence_checker = CoherenceChecker(crate_context);\n     coherence_checker.check_coherence(crate);\n }"}, {"sha": "3dfcf15e0240bb5119ceee077fc37ae58e3579f3", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de3d581198eaf71053d19ee5b65cbe012e2e7aeb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3d581198eaf71053d19ee5b65cbe012e2e7aeb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=de3d581198eaf71053d19ee5b65cbe012e2e7aeb", "patch": "@@ -57,7 +57,7 @@ use syntax::opt_vec::OptVec;\n use syntax::parse::token::special_idents;\n \n struct CollectItemTypesVisitor {\n-    ccx: @mut CrateCtxt\n+    ccx: @CrateCtxt\n }\n \n impl visit::Visitor<()> for CollectItemTypesVisitor {\n@@ -71,7 +71,7 @@ impl visit::Visitor<()> for CollectItemTypesVisitor {\n     }\n }\n \n-pub fn collect_item_types(ccx: @mut CrateCtxt, crate: &ast::Crate) {\n+pub fn collect_item_types(ccx: @CrateCtxt, crate: &ast::Crate) {\n     fn collect_intrinsic_type(ccx: &CrateCtxt,\n                               lang_item: ast::DefId) {\n         let ty::ty_param_bounds_and_ty { ty: ty, .. } ="}, {"sha": "62fb7390fa4e0242150f7ef7c8de3b8f5f5122fc", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de3d581198eaf71053d19ee5b65cbe012e2e7aeb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3d581198eaf71053d19ee5b65cbe012e2e7aeb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=de3d581198eaf71053d19ee5b65cbe012e2e7aeb", "patch": "@@ -456,7 +456,7 @@ pub fn check_crate(tcx: ty::ctxt,\n                    crate: &ast::Crate)\n                 -> (method_map, vtable_map) {\n     let time_passes = tcx.sess.time_passes();\n-    let ccx = @mut CrateCtxt {\n+    let ccx = @CrateCtxt {\n         trait_map: trait_map,\n         method_map: @mut HashMap::new(),\n         vtable_map: @RefCell::new(HashMap::new()),"}]}