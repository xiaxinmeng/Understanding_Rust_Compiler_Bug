{"sha": "6c026997bf1696ee64313135b82dfba3b0857805", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMDI2OTk3YmYxNjk2ZWU2NDMxMzEzNWI4MmRmYmEzYjA4NTc4MDU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-27T01:41:59Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-28T20:07:03Z"}, "message": "For named lifetimes point only at method signature\n\nWhen refering to named lifetime conflict, point only at the method's\nsignature span instead of the entire method.\n\nWhen the expected and found sup and sub traces are the same, avoid\nredundant text.", "tree": {"sha": "621a005d312e4ab12021454a54511f0c0705f1e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/621a005d312e4ab12021454a54511f0c0705f1e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c026997bf1696ee64313135b82dfba3b0857805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c026997bf1696ee64313135b82dfba3b0857805", "html_url": "https://github.com/rust-lang/rust/commit/6c026997bf1696ee64313135b82dfba3b0857805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c026997bf1696ee64313135b82dfba3b0857805/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee065595767a7e024f1933e175dd52936f0f1b10", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee065595767a7e024f1933e175dd52936f0f1b10", "html_url": "https://github.com/rust-lang/rust/commit/ee065595767a7e024f1933e175dd52936f0f1b10"}], "stats": {"total": 194, "additions": 150, "deletions": 44}, "files": [{"sha": "a10bd40af365023a8a1d825432d6178a064979c3", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/6c026997bf1696ee64313135b82dfba3b0857805/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c026997bf1696ee64313135b82dfba3b0857805/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=6c026997bf1696ee64313135b82dfba3b0857805", "patch": "@@ -175,25 +175,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             ty::ReEarlyBound(_) |\n             ty::ReFree(_) => {\n                 let scope = region.free_region_binding_scope(self);\n-                let prefix = match *region {\n-                    ty::ReEarlyBound(ref br) => {\n-                        format!(\"the lifetime {} as defined on\", br.name)\n-                    }\n-                    ty::ReFree(ref fr) => {\n-                        match fr.bound_region {\n-                            ty::BrAnon(idx) => {\n-                                format!(\"the anonymous lifetime #{} defined on\", idx + 1)\n-                            }\n-                            ty::BrFresh(_) => \"an anonymous lifetime defined on\".to_owned(),\n-                            _ => {\n-                                format!(\"the lifetime {} as defined on\",\n-                                        fr.bound_region)\n-                            }\n-                        }\n-                    }\n-                    _ => bug!()\n-                };\n-\n                 let node = self.hir.as_local_node_id(scope)\n                                    .unwrap_or(DUMMY_NODE_ID);\n                 let unknown;\n@@ -218,7 +199,26 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         &unknown\n                     }\n                 };\n-                let (msg, opt_span) = explain_span(self, tag, self.hir.span(node));\n+                let (prefix, span) = match *region {\n+                    ty::ReEarlyBound(ref br) => {\n+                        (format!(\"the lifetime {} as defined on\", br.name),\n+                         self.sess.codemap().def_span(self.hir.span(node)))\n+                    }\n+                    ty::ReFree(ref fr) => {\n+                        match fr.bound_region {\n+                            ty::BrAnon(idx) => {\n+                                (format!(\"the anonymous lifetime #{} defined on\", idx + 1),\n+                                 self.hir.span(node))\n+                            }\n+                            ty::BrFresh(_) => (\"an anonymous lifetime defined on\".to_owned(),\n+                                               self.hir.span(node)),\n+                            _ => (format!(\"the lifetime {} as defined on\", fr.bound_region),\n+                                  self.sess.codemap().def_span(self.hir.span(node))),\n+                        }\n+                    }\n+                    _ => bug!()\n+                };\n+                let (msg, opt_span) = explain_span(self, tag, span);\n                 (format!(\"{} {}\", prefix, msg), opt_span)\n             }\n \n@@ -1075,6 +1075,31 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             sup_region,\n             \"...\");\n \n+        match (&sup_origin, &sub_origin) {\n+            (&infer::Subtype(ref sup_trace), &infer::Subtype(ref sub_trace)) => {\n+                if let (Some((sup_expected, sup_found)),\n+                        Some((sub_expected, sub_found))) = (self.values_str(&sup_trace.values),\n+                                                            self.values_str(&sub_trace.values)) {\n+                    if sub_expected == sup_expected && sub_found == sup_found {\n+                        self.tcx.note_and_explain_region(\n+                            region_scope_tree,\n+                            &mut err,\n+                            \"...but the lifetime must also be valid for \",\n+                            sub_region,\n+                            \"...\",\n+                        );\n+                        err.note(&format!(\"...so that the {}:\\nexpected {}\\n   found {}\",\n+                                          sup_trace.cause.as_requirement_str(),\n+                                          sup_expected.content(),\n+                                          sup_found.content()));\n+                        err.emit();\n+                        return;\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+\n         self.note_region_origin(&mut err, &sup_origin);\n \n         self.tcx.note_and_explain_region(region_scope_tree, &mut err,"}, {"sha": "617de2c5dfe84ecd39713eb6a9aa6a63e99764cd", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6c026997bf1696ee64313135b82dfba3b0857805/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c026997bf1696ee64313135b82dfba3b0857805/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs?ref=6c026997bf1696ee64313135b82dfba3b0857805", "previous_filename": "src/test/compile-fail/regions-bound-missing-bound-in-impl.rs"}, {"sha": "81aec9fd0b0f51a640fb31398b9568c0301ddec5", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6c026997bf1696ee64313135b82dfba3b0857805/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c026997bf1696ee64313135b82dfba3b0857805/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=6c026997bf1696ee64313135b82dfba3b0857805", "patch": "@@ -0,0 +1,52 @@\n+error[E0195]: lifetime parameters or bounds on method `no_bound` do not match the trait declaration\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:28:5\n+   |\n+28 | /     fn no_bound<'b:'a>(self, b: Inv<'b>) {\n+29 | |         //~^ ERROR lifetime parameters or bounds on method `no_bound` do not match\n+30 | |     }\n+   | |_____^ lifetimes do not match trait\n+\n+error[E0195]: lifetime parameters or bounds on method `has_bound` do not match the trait declaration\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:32:5\n+   |\n+32 | /     fn has_bound<'b>(self, b: Inv<'b>) {\n+33 | |         //~^ ERROR lifetime parameters or bounds on method `has_bound` do not match\n+34 | |     }\n+   | |_____^ lifetimes do not match trait\n+\n+error[E0308]: method not compatible with trait\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n+   |\n+36 | /     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+37 | |         //~^ ERROR method not compatible with trait\n+38 | |         //\n+39 | |         // Note: This is a terrible error message. It is caused\n+...  |\n+47 | |         // cases.\n+48 | |     }\n+   | |_____^ lifetime mismatch\n+   |\n+   = note: expected type `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'d>)`\n+              found type `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'d>)`\n+note: the lifetime 'c as defined on the method body at 36:5...\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n+   |\n+36 |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: ...does not necessarily outlive the lifetime 'c as defined on the method body at 36:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:36:5\n+   |\n+36 |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0276]: impl has stricter requirements than trait\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:53:5\n+   |\n+24 |     fn another_bound<'x: 'a>(self, x: Inv<'x>, y: Inv<'t>);\n+   |     ------------------------------------------------------- definition of `another_bound` from trait\n+...\n+53 |     fn another_bound<'x: 't>(self, x: Inv<'x>, y: Inv<'t>) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'x: 't`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "5c612522d9a318ae436994942cc92562d383c89a", "filename": "src/test/ui/closure-expected-type/expect-region-supply-region.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6c026997bf1696ee64313135b82dfba3b0857805/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c026997bf1696ee64313135b82dfba3b0857805/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr?ref=6c026997bf1696ee64313135b82dfba3b0857805", "patch": "@@ -41,14 +41,8 @@ note: the anonymous lifetime #2 defined on the body at 47:29...\n note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 42:1\n   --> $DIR/expect-region-supply-region.rs:42:1\n    |\n-42 | / fn expect_bound_supply_named<'x>() {\n-43 | |     let mut f: Option<&u32> = None;\n-44 | |\n-45 | |     // Here we give a type annotation that `x` should be free. We get\n-...  |\n-54 | |     });\n-55 | | }\n-   | |_^\n+42 | fn expect_bound_supply_named<'x>() {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/expect-region-supply-region.rs:47:33\n@@ -61,14 +55,8 @@ error[E0308]: mismatched types\n note: the lifetime 'x as defined on the function body at 42:1...\n   --> $DIR/expect-region-supply-region.rs:42:1\n    |\n-42 | / fn expect_bound_supply_named<'x>() {\n-43 | |     let mut f: Option<&u32> = None;\n-44 | |\n-45 | |     // Here we give a type annotation that `x` should be free. We get\n-...  |\n-54 | |     });\n-55 | | }\n-   | |_^\n+42 | fn expect_bound_supply_named<'x>() {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 47:29\n   --> $DIR/expect-region-supply-region.rs:47:29\n    |"}, {"sha": "f845762cefd8bd6cadde79eb14f7317df266d897", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c026997bf1696ee64313135b82dfba3b0857805/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c026997bf1696ee64313135b82dfba3b0857805/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs?ref=6c026997bf1696ee64313135b82dfba3b0857805", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::Deref;\n+trait Trait {}\n+\n+struct Struct;\n+\n+impl Deref for Struct {\n+    type Target = Trait;\n+    fn deref(&self) -> &Trait {\n+        unimplemented!();\n+    }\n+}\n+//~^^^^ ERROR cannot infer an appropriate lifetime for lifetime parameter"}, {"sha": "770520f2e8cdd0ce740d11008367c675bf1b1800", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c026997bf1696ee64313135b82dfba3b0857805/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c026997bf1696ee64313135b82dfba3b0857805/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=6c026997bf1696ee64313135b82dfba3b0857805", "patch": "@@ -0,0 +1,24 @@\n+error[E0601]: main function not found\n+\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in generic type due to conflicting requirements\n+  --> $DIR/mismatched_trait_impl-2.rs:18:5\n+   |\n+18 | /     fn deref(&self) -> &Trait {\n+19 | |         unimplemented!();\n+20 | |     }\n+   | |_____^\n+   |\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 18:5...\n+  --> $DIR/mismatched_trait_impl-2.rs:18:5\n+   |\n+18 | /     fn deref(&self) -> &Trait {\n+19 | |         unimplemented!();\n+20 | |     }\n+   | |_____^\n+   = note: ...but the lifetime must also be valid for the static lifetime...\n+   = note: ...so that the method type is compatible with trait:\n+           expected fn(&Struct) -> &Trait + 'static\n+              found fn(&Struct) -> &Trait\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "18aa980d6f3bb8b0ff61d1316e5c011b02847e18", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c026997bf1696ee64313135b82dfba3b0857805/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c026997bf1696ee64313135b82dfba3b0857805/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=6c026997bf1696ee64313135b82dfba3b0857805", "patch": "@@ -13,16 +13,11 @@ note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on th\n 20 | |         x\n 21 | |     }\n    | |_____^\n-   = note: ...so that the method type is compatible with trait:\n-           expected fn(&i32, &'a u32, &u32) -> &'a u32\n-              found fn(&i32, &u32, &u32) -> &u32\n-note: but, the lifetime must be valid for the lifetime 'a as defined on the method body at 19:5...\n+note: ...but the lifetime must also be valid for the lifetime 'a as defined on the method body at 19:5...\n   --> $DIR/mismatched_trait_impl.rs:19:5\n    |\n-19 | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n-20 | |         x\n-21 | |     }\n-   | |_____^\n+19 |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...so that the method type is compatible with trait:\n            expected fn(&i32, &'a u32, &u32) -> &'a u32\n               found fn(&i32, &u32, &u32) -> &u32"}]}