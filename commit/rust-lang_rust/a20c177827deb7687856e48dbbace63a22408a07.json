{"sha": "a20c177827deb7687856e48dbbace63a22408a07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMGMxNzc4MjdkZWI3Njg3ODU2ZTQ4ZGJiYWNlNjNhMjI0MDhhMDc=", "commit": {"author": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-06-11T23:26:53Z"}, "committer": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-06-12T12:06:22Z"}, "message": "add fold::Folder::fold_qpath", "tree": {"sha": "8274b49e230b59beac1fa048e3faa94f1f98af60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8274b49e230b59beac1fa048e3faa94f1f98af60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a20c177827deb7687856e48dbbace63a22408a07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a20c177827deb7687856e48dbbace63a22408a07", "html_url": "https://github.com/rust-lang/rust/commit/a20c177827deb7687856e48dbbace63a22408a07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a20c177827deb7687856e48dbbace63a22408a07/comments", "author": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0c59e2c86c7e19e5060fe1eb0cde253579b64f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c59e2c86c7e19e5060fe1eb0cde253579b64f6", "html_url": "https://github.com/rust-lang/rust/commit/d0c59e2c86c7e19e5060fe1eb0cde253579b64f6"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "1056b3dad173958ff4633c13f91fb8df49eb022a", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a20c177827deb7687856e48dbbace63a22408a07/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20c177827deb7687856e48dbbace63a22408a07/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=a20c177827deb7687856e48dbbace63a22408a07", "patch": "@@ -168,6 +168,10 @@ pub trait Folder : Sized {\n         noop_fold_path(p, self)\n     }\n \n+    fn fold_qpath(&mut self, qs: Option<QSelf>, p: Path) -> (Option<QSelf>, Path) {\n+        noop_fold_qpath(qs, p, self)\n+    }\n+\n     fn fold_path_parameters(&mut self, p: PathParameters) -> PathParameters {\n         noop_fold_path_parameters(p, self)\n     }\n@@ -370,14 +374,8 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n             TyKind::Tup(tys) => TyKind::Tup(tys.move_map(|ty| fld.fold_ty(ty))),\n             TyKind::Paren(ty) => TyKind::Paren(fld.fold_ty(ty)),\n             TyKind::Path(qself, path) => {\n-                let qself = qself.map(|QSelf { ty, path_span, position }| {\n-                    QSelf {\n-                        ty: fld.fold_ty(ty),\n-                        path_span: fld.new_span(path_span),\n-                        position,\n-                    }\n-                });\n-                TyKind::Path(qself, fld.fold_path(path))\n+                let (qself, path) = fld.fold_qpath(qself, path);\n+                TyKind::Path(qself, path)\n             }\n             TyKind::Array(ty, length) => {\n                 TyKind::Array(fld.fold_ty(ty), fld.fold_anon_const(length))\n@@ -442,6 +440,19 @@ pub fn noop_fold_path<T: Folder>(Path { segments, span }: Path, fld: &mut T) ->\n     }\n }\n \n+pub fn noop_fold_qpath<T: Folder>(qself: Option<QSelf>,\n+                                  path: Path,\n+                                  fld: &mut T) -> (Option<QSelf>, Path) {\n+    let qself = qself.map(|QSelf { ty, path_span, position }| {\n+        QSelf {\n+            ty: fld.fold_ty(ty),\n+            path_span: fld.new_span(path_span),\n+            position,\n+        }\n+    });\n+    (qself, fld.fold_path(path))\n+}\n+\n pub fn noop_fold_path_parameters<T: Folder>(path_parameters: PathParameters, fld: &mut T)\n                                             -> PathParameters\n {\n@@ -1097,15 +1108,9 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n                 PatKind::TupleStruct(folder.fold_path(pth),\n                         pats.move_map(|x| folder.fold_pat(x)), ddpos)\n             }\n-            PatKind::Path(opt_qself, pth) => {\n-                let opt_qself = opt_qself.map(|qself| {\n-                    QSelf {\n-                        ty: folder.fold_ty(qself.ty),\n-                        path_span: folder.new_span(qself.path_span),\n-                        position: qself.position,\n-                    }\n-                });\n-                PatKind::Path(opt_qself, folder.fold_path(pth))\n+            PatKind::Path(qself, pth) => {\n+                let (qself, pth) = folder.fold_qpath(qself, pth);\n+                PatKind::Path(qself, pth)\n             }\n             PatKind::Struct(pth, fields, etc) => {\n                 let pth = folder.fold_path(pth);\n@@ -1267,14 +1272,8 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n                                 lim)\n             }\n             ExprKind::Path(qself, path) => {\n-                let qself = qself.map(|QSelf { ty, path_span, position }| {\n-                    QSelf {\n-                        ty: folder.fold_ty(ty),\n-                        path_span: folder.new_span(path_span),\n-                        position,\n-                    }\n-                });\n-                ExprKind::Path(qself, folder.fold_path(path))\n+                let (qself, path) = folder.fold_qpath(qself, path);\n+                ExprKind::Path(qself, path)\n             }\n             ExprKind::Break(opt_label, opt_expr) => {\n                 ExprKind::Break(opt_label.map(|label| folder.fold_label(label)),"}]}