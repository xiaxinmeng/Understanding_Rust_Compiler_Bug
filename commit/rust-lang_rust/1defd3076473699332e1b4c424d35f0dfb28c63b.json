{"sha": "1defd3076473699332e1b4c424d35f0dfb28c63b", "node_id": "C_kwDOAAsO6NoAKDFkZWZkMzA3NjQ3MzY5OTMzMmUxYjRjNDI0ZDM1ZjBkZmIyOGM2M2I", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-06T23:24:51Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-07T00:27:00Z"}, "message": "Remove `PlacedRootMonoItems::roots`.\n\nIt's no longer used.", "tree": {"sha": "7b964817947f7bfbdb640e4d93eb2fa92ceea2bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b964817947f7bfbdb640e4d93eb2fa92ceea2bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1defd3076473699332e1b4c424d35f0dfb28c63b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1defd3076473699332e1b4c424d35f0dfb28c63b", "html_url": "https://github.com/rust-lang/rust/commit/1defd3076473699332e1b4c424d35f0dfb28c63b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1defd3076473699332e1b4c424d35f0dfb28c63b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dbb3475b93a15cbd64e9b726a775ee2b31328a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dbb3475b93a15cbd64e9b726a775ee2b31328a6", "html_url": "https://github.com/rust-lang/rust/commit/8dbb3475b93a15cbd64e9b726a775ee2b31328a6"}], "stats": {"total": 10, "additions": 3, "deletions": 7}, "files": [{"sha": "e3a226fd427fa2ceb89a5c600de8e0c690d7e745", "filename": "compiler/rustc_monomorphize/src/partitioning.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1defd3076473699332e1b4c424d35f0dfb28c63b/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1defd3076473699332e1b4c424d35f0dfb28c63b/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs?ref=1defd3076473699332e1b4c424d35f0dfb28c63b", "patch": "@@ -129,7 +129,6 @@ struct PlacedRootMonoItems<'tcx> {\n     /// The codegen units, sorted by name to make things deterministic.\n     codegen_units: Vec<CodegenUnit<'tcx>>,\n \n-    roots: FxHashSet<MonoItem<'tcx>>,\n     internalization_candidates: FxHashSet<MonoItem<'tcx>>,\n }\n \n@@ -150,7 +149,7 @@ where\n     // In the first step, we place all regular monomorphizations into their\n     // respective 'home' codegen unit. Regular monomorphizations are all\n     // functions and statics defined in the local crate.\n-    let PlacedRootMonoItems { mut codegen_units, roots, internalization_candidates } = {\n+    let PlacedRootMonoItems { mut codegen_units, internalization_candidates } = {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_place_roots\");\n         place_root_mono_items(cx, mono_items)\n     };\n@@ -176,7 +175,7 @@ where\n     // local functions the definition of which is marked with `#[inline]`.\n     let mono_item_placements = {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_place_inline_items\");\n-        place_inlined_mono_items(cx, &mut codegen_units, roots)\n+        place_inlined_mono_items(cx, &mut codegen_units)\n     };\n \n     for cgu in &mut codegen_units {\n@@ -244,7 +243,6 @@ fn place_root_mono_items<'tcx, I>(\n where\n     I: Iterator<Item = MonoItem<'tcx>>,\n {\n-    let mut roots = FxHashSet::default();\n     let mut codegen_units = FxHashMap::default();\n     let is_incremental_build = cx.tcx.sess.opts.incremental.is_some();\n     let mut internalization_candidates = FxHashSet::default();\n@@ -295,7 +293,6 @@ where\n         }\n \n         codegen_unit.items_mut().insert(mono_item, (linkage, visibility));\n-        roots.insert(mono_item);\n     }\n \n     // Always ensure we have at least one CGU; otherwise, if we have a\n@@ -308,7 +305,7 @@ where\n     let mut codegen_units: Vec<_> = codegen_units.into_values().collect();\n     codegen_units.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n \n-    PlacedRootMonoItems { codegen_units, roots, internalization_candidates }\n+    PlacedRootMonoItems { codegen_units, internalization_candidates }\n }\n \n // This function requires the CGUs to be sorted by name on input, and ensures\n@@ -416,7 +413,6 @@ enum MonoItemPlacement {\n fn place_inlined_mono_items<'tcx>(\n     cx: &PartitioningCx<'_, 'tcx>,\n     codegen_units: &mut [CodegenUnit<'tcx>],\n-    _roots: FxHashSet<MonoItem<'tcx>>,\n ) -> FxHashMap<MonoItem<'tcx>, MonoItemPlacement> {\n     for cgu in codegen_units.iter_mut() {\n         // Collect all inlined items that need to be available in this codegen unit."}]}