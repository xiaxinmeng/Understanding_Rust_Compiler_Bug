{"sha": "ba78db310b2ddf9b5f8e6c87a58e8ea8df374e16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNzhkYjMxMGIyZGRmOWI1ZjhlNmM4N2E1OGU4ZWE4ZGYzNzRlMTY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-05-14T19:50:39Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-07-23T15:17:31Z"}, "message": "libsyntax: factor out file path resolving\n\nThis allows the same logic used by `include_X!` macros to be used by\n`#[doc(include)]`.", "tree": {"sha": "a78833c1d85282943777c9f00fff82bfe709d594", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a78833c1d85282943777c9f00fff82bfe709d594"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba78db310b2ddf9b5f8e6c87a58e8ea8df374e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba78db310b2ddf9b5f8e6c87a58e8ea8df374e16", "html_url": "https://github.com/rust-lang/rust/commit/ba78db310b2ddf9b5f8e6c87a58e8ea8df374e16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba78db310b2ddf9b5f8e6c87a58e8ea8df374e16/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ebca72a11869f946b31f900faffb75c2bb2473a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebca72a11869f946b31f900faffb75c2bb2473a", "html_url": "https://github.com/rust-lang/rust/commit/3ebca72a11869f946b31f900faffb75c2bb2473a"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "aad390f3bf60159366b37bfd0864f035ff51572b", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ba78db310b2ddf9b5f8e6c87a58e8ea8df374e16/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba78db310b2ddf9b5f8e6c87a58e8ea8df374e16/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=ba78db310b2ddf9b5f8e6c87a58e8ea8df374e16", "patch": "@@ -6,13 +6,13 @@ use crate::print::pprust;\n use crate::ptr::P;\n use crate::symbol::Symbol;\n use crate::tokenstream;\n+use crate::util::path;\n \n use smallvec::SmallVec;\n-use syntax_pos::{self, Pos, Span, FileName};\n+use syntax_pos::{self, Pos, Span};\n \n use std::fs;\n use std::io::ErrorKind;\n-use std::path::PathBuf;\n use rustc_data_structures::sync::Lrc;\n \n // These macros all relate to the file system; they either return\n@@ -78,9 +78,9 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: &[tokenstrea\n         None => return DummyResult::any(sp),\n     };\n     // The file will be added to the code map by the parser\n-    let path = res_rel_file(cx, sp, file);\n+    let file = path::resolve(file, sp, cx.source_map());\n     let directory_ownership = DirectoryOwnership::Owned { relative: None };\n-    let p = parse::new_sub_parser_from_file(cx.parse_sess(), &path, directory_ownership, None, sp);\n+    let p = parse::new_sub_parser_from_file(cx.parse_sess(), &file, directory_ownership, None, sp);\n \n     struct ExpandResult<'a> {\n         p: parse::parser::Parser<'a>,\n@@ -115,7 +115,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::To\n         Some(f) => f,\n         None => return DummyResult::expr(sp)\n     };\n-    let file = res_rel_file(cx, sp, file);\n+    let file = path::resolve(file, sp, cx.source_map());\n     match fs::read_to_string(&file) {\n         Ok(src) => {\n             let interned_src = Symbol::intern(&src);\n@@ -143,7 +143,7 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::\n         Some(f) => f,\n         None => return DummyResult::expr(sp)\n     };\n-    let file = res_rel_file(cx, sp, file);\n+    let file = path::resolve(file, sp, cx.source_map());\n     match fs::read(&file) {\n         Ok(bytes) => {\n             // Add the contents to the source map if it contains UTF-8.\n@@ -164,24 +164,3 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::\n         }\n     }\n }\n-\n-// resolve a file-system path to an absolute file-system path (if it\n-// isn't already)\n-fn res_rel_file(cx: &mut ExtCtxt<'_>, sp: syntax_pos::Span, arg: String) -> PathBuf {\n-    let arg = PathBuf::from(arg);\n-    // Relative paths are resolved relative to the file in which they are found\n-    // after macro expansion (that is, they are unhygienic).\n-    if !arg.is_absolute() {\n-        let callsite = sp.source_callsite();\n-        let mut path = match cx.source_map().span_to_unmapped_path(callsite) {\n-            FileName::Real(path) => path,\n-            FileName::DocTest(path, _) => path,\n-            other => panic!(\"cannot resolve relative path in non-file source `{}`\", other),\n-        };\n-        path.pop();\n-        path.push(arg);\n-        path\n-    } else {\n-        arg\n-    }\n-}"}, {"sha": "1b2873b1de7bc35de1052bf2838357a3f24f159b", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ba78db310b2ddf9b5f8e6c87a58e8ea8df374e16/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba78db310b2ddf9b5f8e6c87a58e8ea8df374e16/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=ba78db310b2ddf9b5f8e6c87a58e8ea8df374e16", "patch": "@@ -135,6 +135,7 @@ pub mod util {\n     #[cfg(test)]\n     pub mod parser_testing;\n     pub mod map_in_place;\n+    pub mod path;\n }\n \n pub mod json;"}, {"sha": "a3511bac8e7d9e150bf8386beccd949675bcf976", "filename": "src/libsyntax/util/path.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ba78db310b2ddf9b5f8e6c87a58e8ea8df374e16/src%2Flibsyntax%2Futil%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba78db310b2ddf9b5f8e6c87a58e8ea8df374e16/src%2Flibsyntax%2Futil%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fpath.rs?ref=ba78db310b2ddf9b5f8e6c87a58e8ea8df374e16", "patch": "@@ -0,0 +1,28 @@\n+use crate::source_map::SourceMap;\n+use std::path::PathBuf;\n+use syntax_pos::{Span, FileName};\n+\n+/// Resolve a path mentioned inside Rust code.\n+///\n+/// This unifies the logic used for resolving `include_X!`, and `#[doc(include)]` file paths.\n+///\n+/// Returns an absolute path to the file that `path` refers to.\n+pub fn resolve(path: impl Into<PathBuf>, span: Span, map: &SourceMap) -> PathBuf {\n+    let path = path.into();\n+\n+    // Relative paths are resolved relative to the file in which they are found\n+    // after macro expansion (that is, they are unhygienic).\n+    if !path.is_absolute() {\n+        let callsite = span.source_callsite();\n+        let mut result = match map.span_to_unmapped_path(callsite) {\n+            FileName::Real(path) => path,\n+            FileName::DocTest(path, _) => path,\n+            other => panic!(\"cannot resolve relative path in non-file source `{}`\", other),\n+        };\n+        result.pop();\n+        result.push(path);\n+        result\n+    } else {\n+        path\n+    }\n+}"}]}