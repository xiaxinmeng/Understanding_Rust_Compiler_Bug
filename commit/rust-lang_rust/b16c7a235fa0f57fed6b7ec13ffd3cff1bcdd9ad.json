{"sha": "b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNmM3YTIzNWZhMGY1N2ZlZDZiN2VjMTNmZmQzY2ZmMWJjZGQ5YWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-03T23:05:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-03T23:05:07Z"}, "message": "Auto merge of #41735 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 6 pull requests\n\n- Successful merges: #41543, #41600, #41715, #41720, #41721, #41730\n- Failed merges:", "tree": {"sha": "e8fa6a2c0127f43d06a1e4fe7788c3cce852fab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8fa6a2c0127f43d06a1e4fe7788c3cce852fab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad", "html_url": "https://github.com/rust-lang/rust/commit/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d4ed8e0cbe2c5f3763273a5d8f6b15119473ba7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4ed8e0cbe2c5f3763273a5d8f6b15119473ba7", "html_url": "https://github.com/rust-lang/rust/commit/2d4ed8e0cbe2c5f3763273a5d8f6b15119473ba7"}, {"sha": "e20b2823303ddb145ce58286abeb67d4c017ccf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e20b2823303ddb145ce58286abeb67d4c017ccf0", "html_url": "https://github.com/rust-lang/rust/commit/e20b2823303ddb145ce58286abeb67d4c017ccf0"}], "stats": {"total": 151, "additions": 108, "deletions": 43}, "files": [{"sha": "ee5b6f257b555ec4d9f4a551544f6a27ad356aeb", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad", "patch": "@@ -139,6 +139,7 @@ Margaret Meyerhofer <mmeyerho@andrew.cmu.edu> <mmeyerho@andrew>\n Mark Sinclair <mark.edward.x@gmail.com>\n Mark Sinclair <mark.edward.x@gmail.com> =Mark Sinclair <=125axel125@gmail.com>\n Markus Westerlind <marwes91@gmail.com> Markus <marwes91@gmail.com>\n+Martin Hafskjold Thoresen <martinhath@gmail.com>\n Matej Lach <matej.lach@gmail.com> Matej \u013dach <matej.lach@gmail.com>\n Matt Brubeck <mbrubeck@limpet.net> <mbrubeck@cs.hmc.edu>\n Matthew Auld <matthew.auld@intel.com>"}, {"sha": "beb7b435cbadfce97a838e00cf728f6416e374c4", "filename": ".travis.yml", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad", "patch": "@@ -95,7 +95,10 @@ matrix:\n         MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n       osx_image: xcode7\n-      install: *osx_install_sccache\n+      install:\n+        - travis_retry brew update\n+        - travis_retry brew install xz\n+        - *osx_install_sccache\n     - env: >\n         RUST_CHECK_TARGET=dist\n         RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended --enable-sanitizers\"\n@@ -106,7 +109,10 @@ matrix:\n         MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n       osx_image: xcode7\n-      install: *osx_install_sccache\n+      install:\n+        - travis_retry brew update\n+        - travis_retry brew install xz\n+        - *osx_install_sccache\n \n     # \"alternate\" deployments, these are \"nightlies\" but don't have assertions\n     # turned on, they're deployed to a different location primarily for projects\n@@ -123,7 +129,10 @@ matrix:\n         MACOSX_DEPLOYMENT_TARGET=10.7\n       os: osx\n       osx_image: xcode7\n-      install: *osx_install_sccache\n+      install:\n+        - travis_retry brew update\n+        - travis_retry brew install xz\n+        - *osx_install_sccache\n \n env:\n   global:"}, {"sha": "1df79074d3f4d8722f86713de1b0b6efa4b3cbec", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad", "patch": "@@ -767,7 +767,18 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> {\n         // > through this reference must obviously happened before), and an\n         // > \"acquire\" operation before deleting the object.\n         //\n+        // In particular, while the contents of an Arc are usually immutable, it's\n+        // possible to have interior writes to something like a Mutex<T>. Since a\n+        // Mutex is not acquired when it is deleted, we can't rely on its\n+        // synchronization logic to make writes in thread A visible to a destructor\n+        // running in thread B.\n+        //\n+        // Also note that the Acquire fence here could probably be replaced with an\n+        // Acquire load, which could improve performance in highly-contended\n+        // situations. See [2].\n+        //\n         // [1]: (www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html)\n+        // [2]: (https://github.com/rust-lang/rust/pull/41714)\n         atomic::fence(Acquire);\n \n         unsafe {"}, {"sha": "3896fc20a2dde12924ac2c477b6013f0459d2a65", "filename": "src/libstd/process.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad", "patch": "@@ -148,8 +148,9 @@ impl fmt::Debug for Child {\n     }\n }\n \n-/// A handle to a child process's stdin. This struct is used in the [`stdin`]\n-/// field on [`Child`].\n+/// A handle to a child process's stdin.\n+///\n+/// This struct is used in the [`stdin`] field on [`Child`].\n ///\n /// [`Child`]: struct.Child.html\n /// [`stdin`]: struct.Child.html#structfield.stdin\n@@ -190,8 +191,9 @@ impl fmt::Debug for ChildStdin {\n     }\n }\n \n-/// A handle to a child process's stdout. This struct is used in the [`stdout`]\n-/// field on [`Child`].\n+/// A handle to a child process's stdout.\n+///\n+/// This struct is used in the [`stdout`] field on [`Child`].\n ///\n /// [`Child`]: struct.Child.html\n /// [`stdout`]: struct.Child.html#structfield.stdout"}, {"sha": "4e49c485f109f93e59e2178d76342f367fc8694f", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad", "patch": "@@ -715,21 +715,32 @@ struct Inner {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n /// A handle to a thread.\n ///\n+/// You can use it to identify a thread (by name, for example). Most of the\n+/// time, there is no need to directly create a `Thread` struct using the\n+/// constructor, instead you should use a function like `spawn` to create\n+/// new threads, see the docs of [`Builder`] and [`spawn`] for more.\n+///\n /// # Examples\n ///\n /// ```\n-/// use std::thread;\n-///\n-/// let handler = thread::Builder::new()\n-///     .name(\"foo\".into())\n-///     .spawn(|| {\n-///         let thread = thread::current();\n-///         println!(\"thread name: {}\", thread.name().unwrap());\n-///     })\n-///     .unwrap();\n-///\n-/// handler.join().unwrap();\n+/// use std::thread::Builder;\n+///\n+/// for i in 0..5 {\n+///     let thread_name = format!(\"thread_{}\", i);\n+///     Builder::new()\n+///         .name(thread_name) // Now you can identify which thread panicked\n+///                            // thanks to the handle's name\n+///         .spawn(move || {\n+///             if i == 3 {\n+///                  panic!(\"I'm scared!!!\");\n+///             }\n+///         })\n+///         .unwrap();\n+/// }\n /// ```\n+/// [`Builder`]: ../../std/thread/struct.Builder.html\n+/// [`spawn`]: ../../std/thread/fn.spawn.html\n+\n pub struct Thread {\n     inner: Arc<Inner>,\n }"}, {"sha": "55766ba3fed6a70660f53d4949e689d627ce7d80", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad", "patch": "@@ -84,7 +84,10 @@ impl Duration {\n     /// ```\n     /// use std::time::Duration;\n     ///\n-    /// let five_seconds = Duration::from_secs(5);\n+    /// let duration = Duration::from_secs(5);\n+    ///\n+    /// assert_eq!(5, duration.as_secs());\n+    /// assert_eq!(0, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n@@ -99,7 +102,10 @@ impl Duration {\n     /// ```\n     /// use std::time::Duration;\n     ///\n-    /// let five_seconds = Duration::from_millis(5000);\n+    /// let duration = Duration::from_millis(2569);\n+    ///\n+    /// assert_eq!(2, duration.as_secs());\n+    /// assert_eq!(569000000, duration.subsec_nanos());\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n@@ -119,9 +125,24 @@ impl Duration {\n     /// ```\n     /// use std::time::Duration;\n     ///\n-    /// let five_seconds = Duration::new(5, 0);\n-    /// assert_eq!(five_seconds.as_secs(), 5);\n+    /// let duration = Duration::new(5, 730023852);\n+    /// assert_eq!(duration.as_secs(), 5);\n+    /// ```\n+    ///\n+    /// To determine the total number of seconds represented by the `Duration`,\n+    /// use `as_secs` in combination with [`subsec_nanos`]:\n+    ///\n     /// ```\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::new(5, 730023852);\n+    ///\n+    /// assert_eq!(5.730023852,\n+    ///            duration.as_secs() as f64\n+    ///            + duration.subsec_nanos() as f64 * 1e-9);\n+    /// ```\n+    ///\n+    /// [`subsec_nanos`]: #method.subsec_nanos\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     pub fn as_secs(&self) -> u64 { self.secs }"}, {"sha": "4cf7397fb0566e745f0bce4c5b009cfeb5d12c53", "filename": "src/rust-installer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frust-installer?ref=b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad", "patch": "@@ -1 +1 @@\n-Subproject commit 4f994850808a572e2cc8d43f968893c8e942e9bf\n+Subproject commit 4cf7397fb0566e745f0bce4c5b009cfeb5d12c53"}, {"sha": "ba37863b1f62d6af309bfac54385d15b6d9a31a3", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=b16c7a235fa0f57fed6b7ec13ffd3cff1bcdd9ad", "patch": "@@ -116,10 +116,26 @@ struct Target {\n     available: bool,\n     url: Option<String>,\n     hash: Option<String>,\n+    xz_url: Option<String>,\n+    xz_hash: Option<String>,\n     components: Option<Vec<Component>>,\n     extensions: Option<Vec<Component>>,\n }\n \n+impl Target {\n+    fn unavailable() -> Target {\n+        Target {\n+            available: false,\n+            url: None,\n+            hash: None,\n+            xz_url: None,\n+            xz_hash: None,\n+            components: None,\n+            extensions: None,\n+        }\n+    }\n+}\n+\n #[derive(RustcEncodable)]\n struct Component {\n     pkg: String,\n@@ -242,16 +258,12 @@ impl Builder {\n             let digest = match self.digests.remove(&filename) {\n                 Some(digest) => digest,\n                 None => {\n-                    pkg.target.insert(host.to_string(), Target {\n-                        available: false,\n-                        url: None,\n-                        hash: None,\n-                        components: None,\n-                        extensions: None,\n-                    });\n+                    pkg.target.insert(host.to_string(), Target::unavailable());\n                     continue\n                 }\n             };\n+            let xz_filename = filename.replace(\".tar.gz\", \".tar.xz\");\n+            let xz_digest = self.digests.remove(&xz_filename);\n             let mut components = Vec::new();\n             let mut extensions = Vec::new();\n \n@@ -293,8 +305,10 @@ impl Builder {\n \n             pkg.target.insert(host.to_string(), Target {\n                 available: true,\n-                url: Some(self.url(\"rust\", host)),\n+                url: Some(self.url(&filename)),\n                 hash: Some(digest),\n+                xz_url: xz_digest.as_ref().map(|_| self.url(&xz_filename)),\n+                xz_hash: xz_digest,\n                 components: Some(components),\n                 extensions: Some(extensions),\n             });\n@@ -312,21 +326,17 @@ impl Builder {\n             let filename = self.filename(pkgname, name);\n             let digest = match self.digests.remove(&filename) {\n                 Some(digest) => digest,\n-                None => {\n-                    return (name.to_string(), Target {\n-                        available: false,\n-                        url: None,\n-                        hash: None,\n-                        components: None,\n-                        extensions: None,\n-                    })\n-                }\n+                None => return (name.to_string(), Target::unavailable()),\n             };\n+            let xz_filename = filename.replace(\".tar.gz\", \".tar.xz\");\n+            let xz_digest = self.digests.remove(&xz_filename);\n \n             (name.to_string(), Target {\n                 available: true,\n-                url: Some(self.url(pkgname, name)),\n+                url: Some(self.url(&filename)),\n                 hash: Some(digest),\n+                xz_url: xz_digest.as_ref().map(|_| self.url(&xz_filename)),\n+                xz_hash: xz_digest,\n                 components: None,\n                 extensions: None,\n             })\n@@ -338,11 +348,11 @@ impl Builder {\n         });\n     }\n \n-    fn url(&self, component: &str, target: &str) -> String {\n+    fn url(&self, filename: &str) -> String {\n         format!(\"{}/{}/{}\",\n                 self.s3_address,\n                 self.date,\n-                self.filename(component, target))\n+                filename)\n     }\n \n     fn filename(&self, component: &str, target: &str) -> String {"}]}