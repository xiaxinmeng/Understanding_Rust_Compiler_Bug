{"sha": "e5078078375ffeac80770973920446d9cb97302d", "node_id": "C_kwDOAAsO6NoAKGU1MDc4MDc4Mzc1ZmZlYWM4MDc3MDk3MzkyMDQ0NmQ5Y2I5NzMwMmQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-20T13:12:00Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-20T13:12:00Z"}, "message": "internal: Don't eagerly construct `AstIdMap`s", "tree": {"sha": "1eb7c2ecaa8dffe86ec6ad3140d6c23811364ca7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eb7c2ecaa8dffe86ec6ad3140d6c23811364ca7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5078078375ffeac80770973920446d9cb97302d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5078078375ffeac80770973920446d9cb97302d", "html_url": "https://github.com/rust-lang/rust/commit/e5078078375ffeac80770973920446d9cb97302d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5078078375ffeac80770973920446d9cb97302d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84544134f6e2e1f53a9ce3f821dbe7a70f924145", "url": "https://api.github.com/repos/rust-lang/rust/commits/84544134f6e2e1f53a9ce3f821dbe7a70f924145", "html_url": "https://github.com/rust-lang/rust/commit/84544134f6e2e1f53a9ce3f821dbe7a70f924145"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "7e9acd3f86e6b0a913cedf75e31bf98b67c6264c", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5078078375ffeac80770973920446d9cb97302d/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5078078375ffeac80770973920446d9cb97302d/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=e5078078375ffeac80770973920446d9cb97302d", "patch": "@@ -50,7 +50,7 @@ pub struct Expander {\n     cfg_expander: CfgExpander,\n     def_map: Arc<DefMap>,\n     current_file_id: HirFileId,\n-    ast_id_map: Arc<AstIdMap>,\n+    ast_id_map: Option<Arc<AstIdMap>>,\n     module: LocalModuleId,\n     recursion_limit: usize,\n }\n@@ -80,12 +80,11 @@ impl Expander {\n     pub fn new(db: &dyn DefDatabase, current_file_id: HirFileId, module: ModuleId) -> Expander {\n         let cfg_expander = CfgExpander::new(db, current_file_id, module.krate);\n         let def_map = module.def_map(db);\n-        let ast_id_map = db.ast_id_map(current_file_id);\n         Expander {\n             cfg_expander,\n             def_map,\n             current_file_id,\n-            ast_id_map,\n+            ast_id_map: None,\n             module: module.local_id,\n             recursion_limit: 0,\n         }\n@@ -175,7 +174,7 @@ impl Expander {\n         };\n         self.cfg_expander.hygiene = Hygiene::new(db.upcast(), file_id);\n         self.current_file_id = file_id;\n-        self.ast_id_map = db.ast_id_map(file_id);\n+        self.ast_id_map = None;\n \n         ExpandResult { value: Some((mark, node)), err }\n     }\n@@ -213,8 +212,9 @@ impl Expander {\n         self.def_map.resolve_path(db, self.module, path, BuiltinShadowMode::Other).0.take_macros()\n     }\n \n-    fn ast_id<N: AstNode>(&self, item: &N) -> AstId<N> {\n-        let file_local_id = self.ast_id_map.ast_id(item);\n+    fn ast_id<N: AstNode>(&mut self, db: &dyn DefDatabase, item: &N) -> AstId<N> {\n+        let file_local_id =\n+            self.ast_id_map.get_or_insert_with(|| db.ast_id_map(self.current_file_id)).ast_id(item);\n         AstId::new(self.current_file_id, file_local_id)\n     }\n \n@@ -233,7 +233,7 @@ impl Expander {\n #[derive(Debug)]\n pub struct Mark {\n     file_id: HirFileId,\n-    ast_id_map: Arc<AstIdMap>,\n+    ast_id_map: Option<Arc<AstIdMap>>,\n     bomb: DropBomb,\n }\n "}, {"sha": "006376e362cb10c0d363acf8a98d10543bcdff9a", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e5078078375ffeac80770973920446d9cb97302d/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5078078375ffeac80770973920446d9cb97302d/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=e5078078375ffeac80770973920446d9cb97302d", "patch": "@@ -11,6 +11,7 @@ use hir_expand::{\n     ExpandError, HirFileId, InFile,\n };\n use la_arena::Arena;\n+use once_cell::unsync::OnceCell;\n use profile::Count;\n use rustc_hash::FxHashMap;\n use syntax::{\n@@ -41,38 +42,42 @@ use crate::{\n pub struct LowerCtx<'a> {\n     pub db: &'a dyn DefDatabase,\n     hygiene: Hygiene,\n-    file_id: Option<HirFileId>,\n-    source_ast_id_map: Option<Arc<AstIdMap>>,\n+    ast_id_map: Option<(HirFileId, OnceCell<Arc<AstIdMap>>)>,\n }\n \n impl<'a> LowerCtx<'a> {\n     pub fn new(db: &'a dyn DefDatabase, file_id: HirFileId) -> Self {\n         LowerCtx {\n             db,\n             hygiene: Hygiene::new(db.upcast(), file_id),\n-            file_id: Some(file_id),\n-            source_ast_id_map: Some(db.ast_id_map(file_id)),\n+            ast_id_map: Some((file_id, OnceCell::new())),\n         }\n     }\n \n     pub fn with_hygiene(db: &'a dyn DefDatabase, hygiene: &Hygiene) -> Self {\n-        LowerCtx { db, hygiene: hygiene.clone(), file_id: None, source_ast_id_map: None }\n+        LowerCtx { db, hygiene: hygiene.clone(), ast_id_map: None }\n     }\n \n     pub(crate) fn hygiene(&self) -> &Hygiene {\n         &self.hygiene\n     }\n \n     pub(crate) fn file_id(&self) -> HirFileId {\n-        self.file_id.unwrap()\n+        self.ast_id_map.as_ref().unwrap().0\n     }\n \n     pub(crate) fn lower_path(&self, ast: ast::Path) -> Option<Path> {\n         Path::from_src(ast, self)\n     }\n \n-    pub(crate) fn ast_id<N: AstNode>(&self, item: &N) -> Option<FileAstId<N>> {\n-        self.source_ast_id_map.as_ref().map(|ast_id_map| ast_id_map.ast_id(item))\n+    pub(crate) fn ast_id<N: AstNode>(\n+        &self,\n+        db: &dyn DefDatabase,\n+        item: &N,\n+    ) -> Option<FileAstId<N>> {\n+        let (file_id, ast_id_map) = self.ast_id_map.as_ref()?;\n+        let ast_id_map = ast_id_map.get_or_init(|| db.ast_id_map(*file_id));\n+        Some(ast_id_map.ast_id(item))\n     }\n }\n \n@@ -675,7 +680,7 @@ impl ExprCollector<'_> {\n     }\n \n     fn collect_block(&mut self, block: ast::BlockExpr) -> ExprId {\n-        let ast_id = self.expander.ast_id(&block);\n+        let ast_id = self.expander.ast_id(self.db, &block);\n         let block_loc =\n             BlockLoc { ast_id, module: self.expander.def_map.module_id(self.expander.module) };\n         let block_id = self.db.intern_block(block_loc);"}, {"sha": "ca15e7c4100ad37232373d55464568f722bba341", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e5078078375ffeac80770973920446d9cb97302d/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5078078375ffeac80770973920446d9cb97302d/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=e5078078375ffeac80770973920446d9cb97302d", "patch": "@@ -550,14 +550,17 @@ impl<'a> AssocItemCollector<'a> {\n                 AssocItem::MacroCall(call) => {\n                     let call = &item_tree[call];\n                     let ast_id_map = self.db.ast_id_map(self.expander.current_file_id());\n-                    let root = self.db.parse_or_expand(self.expander.current_file_id()).unwrap();\n-                    let call = ast_id_map.get(call.ast_id).to_node(&root);\n-                    let _cx =\n-                        stdx::panic_context::enter(format!(\"collect_items MacroCall: {}\", call));\n-                    let res = self.expander.enter_expand(self.db, call);\n-\n-                    if let Ok(ExpandResult { value: Some((mark, mac)), .. }) = res {\n-                        self.collect_macro_items(mark, mac);\n+                    if let Some(root) = self.db.parse_or_expand(self.expander.current_file_id()) {\n+                        let call = ast_id_map.get(call.ast_id).to_node(&root);\n+                        let _cx = stdx::panic_context::enter(format!(\n+                            \"collect_items MacroCall: {}\",\n+                            call\n+                        ));\n+                        let res = self.expander.enter_expand(self.db, call);\n+\n+                        if let Ok(ExpandResult { value: Some((mark, mac)), .. }) = res {\n+                            self.collect_macro_items(mark, mac);\n+                        }\n                     }\n                 }\n             }"}, {"sha": "dd990b0c784671b7071c9f18440e178ec43b0251", "filename": "crates/hir-def/src/type_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5078078375ffeac80770973920446d9cb97302d/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5078078375ffeac80770973920446d9cb97302d/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftype_ref.rs?ref=e5078078375ffeac80770973920446d9cb97302d", "patch": "@@ -237,7 +237,7 @@ impl TypeRef {\n             }\n             ast::Type::MacroType(mt) => match mt.macro_call() {\n                 Some(mc) => ctx\n-                    .ast_id(&mc)\n+                    .ast_id(ctx.db, &mc)\n                     .map(|mc| TypeRef::Macro(InFile::new(ctx.file_id(), mc)))\n                     .unwrap_or(TypeRef::Error),\n                 None => TypeRef::Error,"}]}