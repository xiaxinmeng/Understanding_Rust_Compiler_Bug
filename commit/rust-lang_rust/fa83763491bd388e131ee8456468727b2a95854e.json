{"sha": "fa83763491bd388e131ee8456468727b2a95854e", "node_id": "C_kwDOAAsO6NoAKGZhODM3NjM0OTFiZDM4OGUxMzFlZTg0NTY0Njg3MjdiMmE5NTg1NGU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-19T22:36:20Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-15T15:36:11Z"}, "message": "always check alignment during CTFE", "tree": {"sha": "425be3023b9d0081c025b8569187a99a31ee8168", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/425be3023b9d0081c025b8569187a99a31ee8168"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa83763491bd388e131ee8456468727b2a95854e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa83763491bd388e131ee8456468727b2a95854e", "html_url": "https://github.com/rust-lang/rust/commit/fa83763491bd388e131ee8456468727b2a95854e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa83763491bd388e131ee8456468727b2a95854e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "397b66e77b279de5006facf87979f9ecff5c7f87", "url": "https://api.github.com/repos/rust-lang/rust/commits/397b66e77b279de5006facf87979f9ecff5c7f87", "html_url": "https://github.com/rust-lang/rust/commit/397b66e77b279de5006facf87979f9ecff5c7f87"}], "stats": {"total": 116, "additions": 75, "deletions": 41}, "files": [{"sha": "4dfa42d15e0352aecfea6f877ddcb0927f92ad96", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa83763491bd388e131ee8456468727b2a95854e/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa83763491bd388e131ee8456468727b2a95854e/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=fa83763491bd388e131ee8456468727b2a95854e", "patch": "@@ -311,7 +311,7 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n         CompileTimeInterpreter::new(\n             tcx.const_eval_limit(),\n             /*can_access_statics:*/ is_static,\n-            /*check_alignment:*/ tcx.sess.opts.unstable_opts.extra_const_ub_checks,\n+            /*check_alignment:*/ true,\n         ),\n     );\n "}, {"sha": "d47e7233a53cb9d15f7f9b2e8020f60e83d31303", "filename": "src/test/ui/const-ptr/forbidden_slices.64bit.stderr", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/fa83763491bd388e131ee8456468727b2a95854e/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa83763491bd388e131ee8456468727b2a95854e/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.64bit.stderr?ref=fa83763491bd388e131ee8456468727b2a95854e", "patch": "@@ -71,16 +71,18 @@ LL | pub static S6: &[bool] = unsafe { from_raw_parts((&D0) as *const _ as _, 4)\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500ALLOC_ID\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 04 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n            }\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:32:1\n+error[E0080]: could not evaluate static initializer\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-LL | pub static S7: &[u16] = unsafe {\n-   | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n+   = note: accessing memory with alignment 1, but alignment 2 is required\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 16, align: 8) {\n-               \u257e\u2500\u2500\u2500\u2500\u2500ALLOC_ID+0x1\u2500\u2500\u2500\u2500\u2500\u257c 04 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-           }\n+note: inside `std::slice::from_raw_parts::<'_, u16>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+note: inside `S7`\n+  --> $DIR/forbidden_slices.rs:35:5\n+   |\n+LL |     from_raw_parts(ptr, 4)\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n@@ -90,7 +92,7 @@ error[E0080]: could not evaluate static initializer\n note: inside `std::slice::from_raw_parts::<'_, u64>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n note: inside `S8`\n-  --> $DIR/forbidden_slices.rs:43:5\n+  --> $DIR/forbidden_slices.rs:42:5\n    |\n LL |     from_raw_parts(ptr, 1)\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n@@ -105,7 +107,7 @@ note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n note: inside `from_ptr_range::<'_, u32>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n note: inside `R0`\n-  --> $DIR/forbidden_slices.rs:46:34\n+  --> $DIR/forbidden_slices.rs:45:34\n    |\n LL | pub static R0: &[u32] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +122,7 @@ note: inside `ptr::const_ptr::<impl *const ()>::sub_ptr`\n note: inside `from_ptr_range::<'_, ()>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n note: inside `R1`\n-  --> $DIR/forbidden_slices.rs:47:33\n+  --> $DIR/forbidden_slices.rs:46:33\n    |\n LL | pub static R1: &[()] = unsafe { from_ptr_range(ptr::null()..ptr::null()) };\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -136,13 +138,13 @@ note: inside `ptr::const_ptr::<impl *const u32>::offset`\n note: inside `ptr::const_ptr::<impl *const u32>::add`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n note: inside `R2`\n-  --> $DIR/forbidden_slices.rs:50:25\n+  --> $DIR/forbidden_slices.rs:49:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(2))\n    |                         ^^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:52:1\n+  --> $DIR/forbidden_slices.rs:51:1\n    |\n LL | pub static R4: &[u8] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered uninitialized bytes\n@@ -153,7 +155,7 @@ LL | pub static R4: &[u8] = unsafe {\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:57:1\n+  --> $DIR/forbidden_slices.rs:56:1\n    |\n LL | pub static R5: &[u8] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n@@ -165,7 +167,7 @@ LL | pub static R5: &[u8] = unsafe {\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:62:1\n+  --> $DIR/forbidden_slices.rs:61:1\n    |\n LL | pub static R6: &[bool] = unsafe {\n    | ^^^^^^^^^^^^^^^^^^^^^^ constructing invalid value at .<deref>[0]: encountered 0x11, but expected a boolean\n@@ -175,16 +177,20 @@ LL | pub static R6: &[bool] = unsafe {\n                \u257e\u2500\u2500\u2500\u2500\u2500\u2500ALLOC_ID\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 04 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n            }\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/forbidden_slices.rs:67:1\n+error[E0080]: could not evaluate static initializer\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n    |\n-LL | pub static R7: &[u16] = unsafe {\n-   | ^^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 2 byte alignment but found 1)\n+   = note: accessing memory with alignment 1, but alignment 2 is required\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 16, align: 8) {\n-               \u257e\u2500\u2500\u2500\u2500ALLOC_ID+0x1\u2500\u2500\u2500\u2500\u2500\u257c 04 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-           }\n+note: inside `std::slice::from_raw_parts::<'_, u16>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+note: inside `from_ptr_range::<'_, u16>`\n+  --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n+note: inside `R7`\n+  --> $DIR/forbidden_slices.rs:68:5\n+   |\n+LL |     from_ptr_range(ptr..ptr.add(4))\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0080]: could not evaluate static initializer\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n@@ -196,7 +202,7 @@ note: inside `ptr::const_ptr::<impl *const u64>::offset`\n note: inside `ptr::const_ptr::<impl *const u64>::add`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n note: inside `R8`\n-  --> $DIR/forbidden_slices.rs:74:25\n+  --> $DIR/forbidden_slices.rs:72:25\n    |\n LL |     from_ptr_range(ptr..ptr.add(1))\n    |                         ^^^^^^^^^^\n@@ -211,7 +217,7 @@ note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n note: inside `from_ptr_range::<'_, u32>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n note: inside `R9`\n-  --> $DIR/forbidden_slices.rs:79:34\n+  --> $DIR/forbidden_slices.rs:77:34\n    |\n LL | pub static R9: &[u32] = unsafe { from_ptr_range(&D0..(&D0 as *const u32).add(1)) };\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -226,7 +232,7 @@ note: inside `ptr::const_ptr::<impl *const u32>::sub_ptr`\n note: inside `from_ptr_range::<'_, u32>`\n   --> $SRC_DIR/core/src/slice/raw.rs:LL:COL\n note: inside `R10`\n-  --> $DIR/forbidden_slices.rs:80:35\n+  --> $DIR/forbidden_slices.rs:78:35\n    |\n LL | pub static R10: &[u32] = unsafe { from_ptr_range(&D0..&D0) };\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "eaf5ada12ff87cb4b1f8f1940cb87e80cf445b39", "filename": "src/test/ui/const-ptr/forbidden_slices.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa83763491bd388e131ee8456468727b2a95854e/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa83763491bd388e131ee8456468727b2a95854e/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-ptr%2Fforbidden_slices.rs?ref=fa83763491bd388e131ee8456468727b2a95854e", "patch": "@@ -30,7 +30,6 @@ pub static S6: &[bool] = unsafe { from_raw_parts((&D0) as *const _ as _, 4) }; /\n \n // Reading padding is not ok\n pub static S7: &[u16] = unsafe {\n-    //~^ ERROR: it is undefined behavior to use this value\n     let ptr = (&D2 as *const Struct as *const u16).byte_add(1);\n \n     from_raw_parts(ptr, 4)\n@@ -65,7 +64,6 @@ pub static R6: &[bool] = unsafe {\n     from_ptr_range(ptr..ptr.add(4))\n };\n pub static R7: &[u16] = unsafe {\n-    //~^ ERROR: it is undefined behavior to use this value\n     let ptr = (&D2 as *const Struct as *const u16).byte_add(1);\n     from_ptr_range(ptr..ptr.add(4))\n };"}, {"sha": "d85f24d48970b64ea39e6cb7b871d2faaa1e4948", "filename": "src/test/ui/consts/copy-intrinsic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa83763491bd388e131ee8456468727b2a95854e/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa83763491bd388e131ee8456468727b2a95854e/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs?ref=fa83763491bd388e131ee8456468727b2a95854e", "patch": "@@ -18,6 +18,7 @@ const COPY_ZERO: () = unsafe {\n     let src = ();\n     let mut dst = ();\n     copy_nonoverlapping(&src as *const _ as *const i32, &mut dst as *mut _ as *mut i32, 0);\n+    //~^ ERROR: evaluation of constant value failed\n };\n \n const COPY_OOB_1: () = unsafe {"}, {"sha": "acc4ada90ea124a8447c0b7fefb7cd3abdb75441", "filename": "src/test/ui/consts/copy-intrinsic.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa83763491bd388e131ee8456468727b2a95854e/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa83763491bd388e131ee8456468727b2a95854e/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr?ref=fa83763491bd388e131ee8456468727b2a95854e", "patch": "@@ -1,27 +1,33 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/copy-intrinsic.rs:27:5\n+  --> $DIR/copy-intrinsic.rs:20:5\n+   |\n+LL |     copy_nonoverlapping(&src as *const _ as *const i32, &mut dst as *mut _ as *mut i32, 0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ accessing memory with alignment 1, but alignment 4 is required\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/copy-intrinsic.rs:28:5\n    |\n LL |     copy_nonoverlapping(0x100 as *const i32, dangle, 0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: alloc5 has size 4, so pointer at offset 40 is out-of-bounds\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/copy-intrinsic.rs:34:5\n+  --> $DIR/copy-intrinsic.rs:35:5\n    |\n LL |     copy_nonoverlapping(dangle, 0x100 as *mut i32, 0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: alloc7 has size 4, so pointer at offset 40 is out-of-bounds\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/copy-intrinsic.rs:41:5\n+  --> $DIR/copy-intrinsic.rs:42:5\n    |\n LL |     copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy`\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/copy-intrinsic.rs:47:5\n+  --> $DIR/copy-intrinsic.rs:48:5\n    |\n LL |     copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy_nonoverlapping`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "3738dfd4a67eb006f8754b63d5be5a61cfa3c902", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.no_flag.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fa83763491bd388e131ee8456468727b2a95854e/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.no_flag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa83763491bd388e131ee8456468727b2a95854e/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.no_flag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.no_flag.stderr?ref=fa83763491bd388e131ee8456468727b2a95854e", "patch": "@@ -0,0 +1,24 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+   |\n+   = note: accessing memory with alignment 1, but alignment 4 is required\n+   |\n+note: inside `std::ptr::read::<u32>`\n+  --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+note: inside `ptr::const_ptr::<impl *const u32>::read`\n+  --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+note: inside `INNER`\n+  --> $DIR/detect-extra-ub.rs:37:9\n+   |\n+LL |         ptr.read();\n+   |         ^^^^^^^^^^\n+\n+note: erroneous constant used\n+  --> $DIR/detect-extra-ub.rs:31:5\n+   |\n+LL |     INNER;\n+   |     ^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "c52adc31a64c8d2a4ece035d328469e62e297789", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa83763491bd388e131ee8456468727b2a95854e/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa83763491bd388e131ee8456468727b2a95854e/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.rs?ref=fa83763491bd388e131ee8456468727b2a95854e", "patch": "@@ -1,5 +1,4 @@\n // revisions: no_flag with_flag\n-// [no_flag] check-pass\n // [with_flag] compile-flags: -Zextra-const-ub-checks\n #![feature(const_ptr_read)]\n "}, {"sha": "c721db459aaa49cf54a76b69f0d9bdce107b29b4", "filename": "src/test/ui/consts/extra-const-ub/detect-extra-ub.with_flag.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa83763491bd388e131ee8456468727b2a95854e/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa83763491bd388e131ee8456468727b2a95854e/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fextra-const-ub%2Fdetect-extra-ub.with_flag.stderr?ref=fa83763491bd388e131ee8456468727b2a95854e", "patch": "@@ -1,11 +1,11 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:9:20\n+  --> $DIR/detect-extra-ub.rs:8:20\n    |\n LL |     let _x: bool = transmute(3u8);\n    |                    ^^^^^^^^^^^^^^ constructing invalid value: encountered 0x03, but expected a boolean\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:15:21\n+  --> $DIR/detect-extra-ub.rs:14:21\n    |\n LL |     let _x: usize = transmute(&3u8);\n    |                     ^^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n@@ -14,7 +14,7 @@ LL |     let _x: usize = transmute(&3u8);\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:21:30\n+  --> $DIR/detect-extra-ub.rs:20:30\n    |\n LL |     let _x: (usize, usize) = transmute(x);\n    |                              ^^^^^^^^^^^^ unable to turn pointer into raw bytes\n@@ -23,7 +23,7 @@ LL |     let _x: (usize, usize) = transmute(x);\n    = help: the absolute address of a pointer is not known at compile-time, so such operations are not supported\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/detect-extra-ub.rs:26:20\n+  --> $DIR/detect-extra-ub.rs:25:20\n    |\n LL |     let _x: &u32 = transmute(&[0u8; 4]);\n    |                    ^^^^^^^^^^^^^^^^^^^^ constructing invalid value: encountered an unaligned reference (required 4 byte alignment but found 1)\n@@ -38,13 +38,13 @@ note: inside `std::ptr::read::<u32>`\n note: inside `ptr::const_ptr::<impl *const u32>::read`\n   --> $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n note: inside `INNER`\n-  --> $DIR/detect-extra-ub.rs:38:9\n+  --> $DIR/detect-extra-ub.rs:37:9\n    |\n LL |         ptr.read();\n    |         ^^^^^^^^^^\n \n note: erroneous constant used\n-  --> $DIR/detect-extra-ub.rs:32:5\n+  --> $DIR/detect-extra-ub.rs:31:5\n    |\n LL |     INNER;\n    |     ^^^^^"}]}