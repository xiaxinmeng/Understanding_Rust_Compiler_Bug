{"sha": "0a9f9e0a0bc4d2aab22c3d40309208b233bef1ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhOWY5ZTBhMGJjNGQyYWFiMjJjM2Q0MDMwOTIwOGIyMzNiZWYxZWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-09T17:47:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-09T17:47:09Z"}, "message": "factor out common code to determine miri binary", "tree": {"sha": "d372971ad36b1648c25bb1bc5d614d12c61021b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d372971ad36b1648c25bb1bc5d614d12c61021b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a9f9e0a0bc4d2aab22c3d40309208b233bef1ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a9f9e0a0bc4d2aab22c3d40309208b233bef1ed", "html_url": "https://github.com/rust-lang/rust/commit/0a9f9e0a0bc4d2aab22c3d40309208b233bef1ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a9f9e0a0bc4d2aab22c3d40309208b233bef1ed/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b7ae049eeb559b372ff16f0b4213ac21f72309e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7ae049eeb559b372ff16f0b4213ac21f72309e", "html_url": "https://github.com/rust-lang/rust/commit/3b7ae049eeb559b372ff16f0b4213ac21f72309e"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "121930bccce6da1b5873c51f8ee0f6eefd4336a6", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0a9f9e0a0bc4d2aab22c3d40309208b233bef1ed/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9f9e0a0bc4d2aab22c3d40309208b233bef1ed/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=0a9f9e0a0bc4d2aab22c3d40309208b233bef1ed", "patch": "@@ -119,26 +119,29 @@ fn list_targets() -> impl Iterator<Item=cargo_metadata::Target> {\n     package.targets.into_iter()\n }\n \n+/// Returns the path to the `miri` binary\n+fn find_miri() -> PathBuf {\n+    let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n+    path.set_file_name(\"miri\");\n+    path\n+}\n+\n /// Make sure that the `miri` and `rustc` binary are from the same sysroot.\n /// This can be violated e.g. when miri is locally built and installed with a different\n /// toolchain than what is used when `cargo miri` is run.\n fn test_sysroot_consistency() {\n     fn get_sysroot(mut cmd: Command) -> PathBuf {\n         let out = cmd.arg(\"--print\").arg(\"sysroot\")\n             .output().expect(\"Failed to run rustc to get sysroot info\");\n-        assert!(out.status.success(), \"Bad statuc code when getting sysroot info\");\n+        assert!(out.status.success(), \"Bad status code when getting sysroot info\");\n         let sysroot = out.stdout.lines().nth(0)\n             .expect(\"didn't get at least one line for the sysroot\").unwrap();\n         PathBuf::from(sysroot).canonicalize()\n             .expect(\"Failed to canonicalize sysroot\")\n     }\n \n     let rustc_sysroot = get_sysroot(Command::new(\"rustc\"));\n-    let miri_sysroot = {\n-        let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n-        path.set_file_name(\"miri\");\n-        get_sysroot(Command::new(path))\n-    };\n+    let miri_sysroot = get_sysroot(Command::new(find_miri()));\n \n     if rustc_sysroot != miri_sysroot {\n         show_error(format!(\n@@ -451,9 +454,7 @@ fn inside_cargo_rustc() {\n     };\n \n     let mut command = if needs_miri {\n-        let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n-        path.set_file_name(\"miri\");\n-        Command::new(path)\n+        Command::new(find_miri())\n     } else {\n         Command::new(\"rustc\")\n     };"}]}