{"sha": "fd53657484d78d0b7c00ce3264d99c051cf07d26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNTM2NTc0ODRkNzhkMGI3YzAwY2UzMjY0ZDk5YzA1MWNmMDdkMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-30T20:17:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-30T20:17:15Z"}, "message": "auto merge of #18339 : chastell/rust/guide_pattern_fixes, r=nikomatsakis\n\nI think it helps to show that the variables introduced in match blocks are indeed independent from the matched variable `x` (especially when `x` is still reachable inside those blocks and might be useful), so this renames them accordingly. Maybe some linter (or language-level warning?) will eventually warn about shadowing `x` in such cases. ;)\r\n\r\nI\u2019m not super happy about the matching-on-range example, as it\u2019s too contrived (`e` and `x` are exactly the same here), but I couldn\u2019t come up with something both simple and non-redundant.", "tree": {"sha": "6f0b9ed71f785bb7defa77ccaa2cea0cc2bdafc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f0b9ed71f785bb7defa77ccaa2cea0cc2bdafc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd53657484d78d0b7c00ce3264d99c051cf07d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd53657484d78d0b7c00ce3264d99c051cf07d26", "html_url": "https://github.com/rust-lang/rust/commit/fd53657484d78d0b7c00ce3264d99c051cf07d26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd53657484d78d0b7c00ce3264d99c051cf07d26/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52c3fe953377d922ecfe29b55861b01e05e9229c", "url": "https://api.github.com/repos/rust-lang/rust/commits/52c3fe953377d922ecfe29b55861b01e05e9229c", "html_url": "https://github.com/rust-lang/rust/commit/52c3fe953377d922ecfe29b55861b01e05e9229c"}, {"sha": "aa1cd6e707734d04df7f16fade00202e30a519d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1cd6e707734d04df7f16fade00202e30a519d2", "html_url": "https://github.com/rust-lang/rust/commit/aa1cd6e707734d04df7f16fade00202e30a519d2"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "f6aa04df1b9e0ad9108f57a4551d95f8f439a1bf", "filename": "src/doc/guide.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd53657484d78d0b7c00ce3264d99c051cf07d26/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/fd53657484d78d0b7c00ce3264d99c051cf07d26/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=fd53657484d78d0b7c00ce3264d99c051cf07d26", "patch": "@@ -3852,7 +3852,7 @@ the value to a name with `@`:\n let x = 1i;\n \n match x {\n-    x @ 1 ... 5 => println!(\"got {}\", x),\n+    e @ 1 ... 5 => println!(\"got a range element {}\", e),\n     _ => println!(\"anything\"),\n }\n ```\n@@ -3885,7 +3885,7 @@ enum OptionalInt {\n let x = Value(5i);\n \n match x {\n-    Value(x) if x > 5 => println!(\"Got an int bigger than five!\"),\n+    Value(i) if i > 5 => println!(\"Got an int bigger than five!\"),\n     Value(..) => println!(\"Got an int!\"),\n     Missing   => println!(\"No such luck.\"),\n }\n@@ -3898,12 +3898,12 @@ with. First, `&`:\n let x = &5i;\n \n match x {\n-    &x => println!(\"Got a value: {}\", x),\n+    &val => println!(\"Got a value: {}\", val),\n }\n ```\n \n-Here, the `x` inside the `match` has type `int`. In other words, the left hand\n-side of the pattern destructures the value. If we have `&5i`, then in `&x`, `x`\n+Here, the `val` inside the `match` has type `int`. In other words, the left hand\n+side of the pattern destructures the value. If we have `&5i`, then in `&val`, `val`\n would be `5i`.\n \n If you want to get a reference, use the `ref` keyword:\n@@ -3912,19 +3912,19 @@ If you want to get a reference, use the `ref` keyword:\n let x = 5i;\n \n match x {\n-    ref x => println!(\"Got a reference to {}\", x),\n+    ref r => println!(\"Got a reference to {}\", r),\n }\n ```\n \n-Here, the `x` inside the `match` has the type `&int`. In other words, the `ref`\n+Here, the `r` inside the `match` has the type `&int`. In other words, the `ref`\n keyword _creates_ a reference, for use in the pattern. If you need a mutable\n reference, `ref mut` will work in the same way:\n \n ```{rust}\n let mut x = 5i;\n \n match x {\n-    ref mut x => println!(\"Got a mutable reference to {}\", x),\n+    ref mut mr => println!(\"Got a mutable reference to {}\", mr),\n }\n ```\n "}]}