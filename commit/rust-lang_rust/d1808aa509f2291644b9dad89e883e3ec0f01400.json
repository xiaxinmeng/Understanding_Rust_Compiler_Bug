{"sha": "d1808aa509f2291644b9dad89e883e3ec0f01400", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxODA4YWE1MDlmMjI5MTY0NGI5ZGFkODllODgzZTNlYzBmMDE0MDA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-15T02:16:31Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-23T03:15:32Z"}, "message": "Remove track_errors from check_match", "tree": {"sha": "a79ec715c4583bea6a52c88e96a35d862f0f44a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a79ec715c4583bea6a52c88e96a35d862f0f44a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1808aa509f2291644b9dad89e883e3ec0f01400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1808aa509f2291644b9dad89e883e3ec0f01400", "html_url": "https://github.com/rust-lang/rust/commit/d1808aa509f2291644b9dad89e883e3ec0f01400", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1808aa509f2291644b9dad89e883e3ec0f01400/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f91bee03f3eea93285330354dda54706028671c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f91bee03f3eea93285330354dda54706028671c", "html_url": "https://github.com/rust-lang/rust/commit/9f91bee03f3eea93285330354dda54706028671c"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "12aae2f385e8a1bf880648407515a1834f97d88d", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1808aa509f2291644b9dad89e883e3ec0f01400/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1808aa509f2291644b9dad89e883e3ec0f01400/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=d1808aa509f2291644b9dad89e883e3ec0f01400", "patch": "@@ -438,7 +438,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // always convert all match-pairs into bindings.\n         self.simplify_candidate(&mut candidate);\n \n-        if !candidate.match_pairs.is_empty() {\n+        if !candidate.match_pairs.is_empty() && self.hir.tcx().sess.err_count() == 0 {\n+            // Only abort compilation if no other errors have been emitted. This used to be a hard\n+            // error that wouldn't be reached because `hair::pattern::check_match::check_match`\n+            // wouldn't have let the compiler continue. In our tests this is only ever hit by\n+            // `ui/consts/const-match-check.rs` with `--cfg eval1`, and that file already generates\n+            // a different error before hand.\n             span_bug!(\n                 candidate.match_pairs[0].pattern.span,\n                 \"match pairs {:?} remaining after simplifying \\"}, {"sha": "39f127c07d7d5829d6af9bced64a7cc43c2c687f", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d1808aa509f2291644b9dad89e883e3ec0f01400/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1808aa509f2291644b9dad89e883e3ec0f01400/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=d1808aa509f2291644b9dad89e883e3ec0f01400", "patch": "@@ -37,15 +37,14 @@ pub(crate) fn check_match<'a, 'tcx>(\n         return Ok(());\n     };\n \n-    tcx.sess.track_errors(|| {\n-        MatchVisitor {\n-            tcx,\n-            tables: tcx.body_tables(body_id),\n-            region_scope_tree: &tcx.region_scope_tree(def_id),\n-            param_env: tcx.param_env(def_id),\n-            identity_substs: InternalSubsts::identity_for_item(tcx, def_id),\n-        }.visit_body(tcx.hir().body(body_id));\n-    })\n+    MatchVisitor {\n+        tcx,\n+        tables: tcx.body_tables(body_id),\n+        region_scope_tree: &tcx.region_scope_tree(def_id),\n+        param_env: tcx.param_env(def_id),\n+        identity_substs: InternalSubsts::identity_for_item(tcx, def_id),\n+    }.visit_body(tcx.hir().body(body_id));\n+    Ok(())\n }\n \n fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> DiagnosticBuilder<'a> {"}]}