{"sha": "3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYzFlYzFmZmRiOWIzNmZkOWRjYzk5ZmU3N2EwMjA5MGZjZDZmM2Y=", "commit": {"author": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-09-04T14:19:59Z"}, "committer": {"name": "Jeremy Stucki", "email": "jeremy@myelin.ch", "date": "2019-09-04T14:19:59Z"}, "message": "Refactor option handling", "tree": {"sha": "ed7fd0dd13852f258d8922fc2ebeaed42de05a29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed7fd0dd13852f258d8922fc2ebeaed42de05a29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENfZy0Nd1FLYaZCRY7vypMUgEJlUFAl1vyA8ACgkQ7vypMUgE\nJlWqgA//Z6i6yTEtQoJEi4mXZ1vCrVWvek6VyMqQ/+O0gbumCathMU98GPQV+aXq\nWjKm1mDOjdO8q1UhWv68XFhDmzUJKsnIWdCXPZILS/tp0sSoS1BXQth4d7KOSPMT\nIAcjwtiATirrUk785GoL0zpHPjGFu8XPaBsho6KIYbqabpURP5pfTdLsjjFKg9om\nnB0h5gkC0OJXEpxQvbxMAY8A0kaKFr/XfKmjZbkFEru/lHlJVQa7FfoBPP+rHfV+\ndTdVkX4qDfLQucr/lvTK/DmLN6hIgjnaPwpObytxZA2AcRjcKvROgGEA/1wXUFaD\n5yaWBbNpHrzYTz0CSsN5v1wJnrbcQT5PFpgpNpb8F5b+AFnGyNRC0rflRkqlamwc\nplGGKX5UNJpYqa1npPn+/m/UOFRvbWDcqNsAbzoAOujYe2deIEA2YksiCGxSKwuy\nKd9cYkOuQcX82Mkgat2lrtJ7DvvwqfnC2yCmUKBIDJ4dAg3HoL2S560MY4aOSxsX\nNz5qFk0zV4GOFgs+qQwuwVsjjLIAVq1nOBZo05oS2nd85TXlFS03VnTgiVtkzSzZ\nd32S+ijvol2nPST3RzhL2evxEeCl3kDc4OXowGsZjv7DTM8ZFPH4NjwXDfQJs30Q\nGeaFEGAld6uCprrtjrQ8E/JGZ6LN+fHw+rQyLUlY5K4+OiO2fSg=\n=z+Of\n-----END PGP SIGNATURE-----", "payload": "tree ed7fd0dd13852f258d8922fc2ebeaed42de05a29\nparent ffe57fad85ffa8561bd5ead77353337d7de23139\nauthor Jeremy Stucki <jeremy@myelin.ch> 1567606799 +0200\ncommitter Jeremy Stucki <jeremy@myelin.ch> 1567606799 +0200\n\nRefactor option handling\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f", "html_url": "https://github.com/rust-lang/rust/commit/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/comments", "author": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jeremystucki", "id": 7629727, "node_id": "MDQ6VXNlcjc2Mjk3Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/7629727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jeremystucki", "html_url": "https://github.com/jeremystucki", "followers_url": "https://api.github.com/users/jeremystucki/followers", "following_url": "https://api.github.com/users/jeremystucki/following{/other_user}", "gists_url": "https://api.github.com/users/jeremystucki/gists{/gist_id}", "starred_url": "https://api.github.com/users/jeremystucki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jeremystucki/subscriptions", "organizations_url": "https://api.github.com/users/jeremystucki/orgs", "repos_url": "https://api.github.com/users/jeremystucki/repos", "events_url": "https://api.github.com/users/jeremystucki/events{/privacy}", "received_events_url": "https://api.github.com/users/jeremystucki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffe57fad85ffa8561bd5ead77353337d7de23139", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe57fad85ffa8561bd5ead77353337d7de23139", "html_url": "https://github.com/rust-lang/rust/commit/ffe57fad85ffa8561bd5ead77353337d7de23139"}], "stats": {"total": 74, "additions": 19, "deletions": 55}, "files": [{"sha": "115bb9ee8c8a1abe35c08b7b066ca44a12dcaf67", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f", "patch": "@@ -44,11 +44,7 @@ fn missing_warning(cx: &EarlyContext<'_>, package: &cargo_metadata::Package, fie\n }\n \n fn is_empty_str(value: &Option<String>) -> bool {\n-    match value {\n-        None => true,\n-        Some(value) if value.is_empty() => true,\n-        _ => false,\n-    }\n+    value.as_ref().map_or(true, String::is_empty)\n }\n \n fn is_empty_vec(value: &[String]) -> bool {"}, {"sha": "cf21d63880f5c341eb1d1c33288c28bd237060a5", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f", "patch": "@@ -59,9 +59,6 @@ impl EarlyLintPass for DbgMacro {\n fn tts_span(tts: TokenStream) -> Option<Span> {\n     let mut cursor = tts.into_trees();\n     let first = cursor.next()?.span();\n-    let span = match cursor.last() {\n-        Some(tree) => first.to(tree.span()),\n-        None => first,\n-    };\n+    let span = cursor.last().map_or(first, |tree| first.to(tree.span()));\n     Some(span)\n }"}, {"sha": "879fb79c0bd3dd43ef08f96cba8c8c8b5c1d7782", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f", "patch": "@@ -98,17 +98,15 @@ impl ExcessivePrecision {\n /// Ex `1_000_000_000.0`\n /// Ex `1_000_000_000.`\n fn dot_zero_exclusion(s: &str) -> bool {\n-    if let Some(after_dec) = s.split('.').nth(1) {\n+    s.split('.').nth(1).map_or(false, |after_dec| {\n         let mut decpart = after_dec.chars().take_while(|c| *c != 'e' || *c != 'E');\n \n         match decpart.next() {\n             Some('0') => decpart.count() == 0,\n             Some(_) => false,\n             None => true,\n         }\n-    } else {\n-        false\n-    }\n+    })\n }\n \n fn max_digits(fty: FloatTy) -> u32 {"}, {"sha": "a609c74c172dda9c7c414c79182a8c4788d98e4f", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f", "patch": "@@ -196,14 +196,8 @@ impl<'a, 'tcx> Functions {\n         let mut code_in_line;\n \n         // Skip the surrounding function decl.\n-        let start_brace_idx = match code_snippet.find('{') {\n-            Some(i) => i + 1,\n-            None => 0,\n-        };\n-        let end_brace_idx = match code_snippet.rfind('}') {\n-            Some(i) => i,\n-            None => code_snippet.len(),\n-        };\n+        let start_brace_idx = code_snippet.find('{').map_or(0, |i| i + 1);\n+        let end_brace_idx = code_snippet.rfind('}').unwrap_or_else(|| code_snippet.len());\n         let function_lines = code_snippet[start_brace_idx..end_brace_idx].lines();\n \n         for mut line in function_lines {\n@@ -223,14 +217,8 @@ impl<'a, 'tcx> Functions {\n                         None => break,\n                     }\n                 } else {\n-                    let multi_idx = match line.find(\"/*\") {\n-                        Some(i) => i,\n-                        None => line.len(),\n-                    };\n-                    let single_idx = match line.find(\"//\") {\n-                        Some(i) => i,\n-                        None => line.len(),\n-                    };\n+                    let multi_idx = line.find(\"/*\").unwrap_or_else(|| line.len());\n+                    let single_idx = line.find(\"//\").unwrap_or_else(|| line.len());\n                     code_in_line |= multi_idx > 0 && single_idx > 0;\n                     // Implies multi_idx is below line.len()\n                     if multi_idx < single_idx {"}, {"sha": "9d58d98dbb1fb728c32323752d7049fb1fabb0fe", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f", "patch": "@@ -2003,10 +2003,7 @@ fn extract_first_expr(block: &Block) -> Option<&Expr> {\n fn is_simple_break_expr(expr: &Expr) -> bool {\n     match expr.node {\n         ExprKind::Break(dest, ref passed_expr) if dest.label.is_none() && passed_expr.is_none() => true,\n-        ExprKind::Block(ref b, _) => match extract_first_expr(b) {\n-            Some(subexpr) => is_simple_break_expr(subexpr),\n-            None => false,\n-        },\n+        ExprKind::Block(ref b, _) => extract_first_expr(b).map_or(false, |subexpr| is_simple_break_expr(subexpr)),\n         _ => false,\n     }\n }"}, {"sha": "5578dd2654e299a3fc14bb55b433c3d117e21fa4", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f", "patch": "@@ -2797,10 +2797,9 @@ fn get_error_type<'a>(cx: &LateContext<'_, '_>, ty: Ty<'a>) -> Option<Ty<'a>> {\n \n /// This checks whether a given type is known to implement Debug.\n fn has_debug_impl<'a, 'b>(ty: Ty<'a>, cx: &LateContext<'b, 'a>) -> bool {\n-    match cx.tcx.get_diagnostic_item(sym::debug_trait) {\n-        Some(debug) => implements_trait(cx, ty, debug, &[]),\n-        None => false,\n-    }\n+    cx.tcx\n+        .get_diagnostic_item(sym::debug_trait)\n+        .map_or(false, |debug| implements_trait(cx, ty, debug, &[]))\n }\n \n enum Convention {"}, {"sha": "465404c5ae07ca6113d5705710fcf569f413f6cb", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f", "patch": "@@ -18,10 +18,8 @@ pub(super) fn lint(cx: &LateContext<'_, '_>, expr: &hir::Expr, args: &[hir::Expr\n     if let hir::ExprKind::Closure(_, _, body_id, ..) = args[1].node {\n         let body = cx.tcx.hir().body(body_id);\n         let arg_id = body.params[0].pat.hir_id;\n-        let mutates_arg = match mutated_variables(&body.value, cx) {\n-            Some(used_mutably) => used_mutably.contains(&arg_id),\n-            None => true,\n-        };\n+        let mutates_arg =\n+            mutated_variables(&body.value, cx).map_or(true, |used_mutably| used_mutably.contains(&arg_id));\n \n         let (mut found_mapping, mut found_filtering) = check_expression(&cx, arg_id, &body.value);\n "}, {"sha": "576446d35a762ce767e319cd28760762fd9ec034", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f", "patch": "@@ -63,10 +63,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n         ExprKind::Struct(_, ref fields, ref base) => {\n             !has_drop(cx, cx.tables.expr_ty(expr))\n                 && fields.iter().all(|field| has_no_effect(cx, &field.expr))\n-                && match *base {\n-                    Some(ref base) => has_no_effect(cx, base),\n-                    None => true,\n-                }\n+                && base.as_ref().map_or(true, |base| has_no_effect(cx, base))\n         },\n         ExprKind::Call(ref callee, ref args) => {\n             if let ExprKind::Path(ref qpath) = callee.node {\n@@ -82,12 +79,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n             }\n         },\n         ExprKind::Block(ref block, _) => {\n-            block.stmts.is_empty()\n-                && if let Some(ref expr) = block.expr {\n-                    has_no_effect(cx, expr)\n-                } else {\n-                    false\n-                }\n+            block.stmts.is_empty() && block.expr.as_ref().map_or(false, |expr| has_no_effect(cx, expr))\n         },\n         _ => false,\n     }"}, {"sha": "faa578c627607b809fd1cd7c545ab91eb3f0ab1c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=3fc1ec1ffdb9b36fd9dcc99fe77a02090fcd6f3f", "patch": "@@ -398,10 +398,9 @@ pub fn method_chain_args<'a>(expr: &'a Expr, methods: &[&str]) -> Option<Vec<&'a\n \n /// Returns `true` if the provided `def_id` is an entrypoint to a program.\n pub fn is_entrypoint_fn(cx: &LateContext<'_, '_>, def_id: DefId) -> bool {\n-    if let Some((entry_fn_def_id, _)) = cx.tcx.entry_fn(LOCAL_CRATE) {\n-        return def_id == entry_fn_def_id;\n-    }\n-    false\n+    cx.tcx\n+        .entry_fn(LOCAL_CRATE)\n+        .map_or(false, |(entry_fn_def_id, _)| def_id == entry_fn_def_id)\n }\n \n /// Gets the name of the item the expression is in, if available."}]}