{"sha": "8ccc063fbc54e5fea3a4811310ff0bb0821d2992", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjY2MwNjNmYmM1NGU1ZmVhM2E0ODExMzEwZmYwYmIwODIxZDI5OTI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-01T00:13:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-01T00:13:32Z"}, "message": "Rollup merge of #77153 - Aaron1011:fix/better-recursive-expand, r=petrochenkov\n\nFix recursive nonterminal expansion during pretty-print/reparse check\n\nMakes progress towards #43081\n\nIn PR #73084, we started recursively expanded nonterminals during the\npretty-print/reparse check, allowing them to be properly compared\nagainst the reparsed tokenstream.\n\nUnfortunately, the recursive logic in that PR only handles the case\nwhere a nonterminal appears inside a `TokenTree::Delimited`. If a\nnonterminal appears directly in the expanded tokens of another\nnonterminal, the inner nonterminal will not be expanded.\n\nThis PR fixes the recursive expansion of nonterminals, ensuring that\nthey are expanded wherever they occur.", "tree": {"sha": "b3703206285c3e0afd6446b40db1a05350615731", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3703206285c3e0afd6446b40db1a05350615731"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ccc063fbc54e5fea3a4811310ff0bb0821d2992", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfdR8sCRBK7hj4Ov3rIwAAdHIIACz4oq/ghDz9okHo9lwugdtF\nNg7nnqb7bTpJwl4miPEmjsCOQrPBP0KT8x0u99QhWZ5LiYm5MWMZDh83M+pbht8a\nVC5WmjMeZEgnCsic4V8KjIWp9nqNSBLzqOnCfJ3Tqh9ua2Xpnr/rKwdCMCQG4x4S\nXE92Fl/b+QWfSKW2OA2s1vCNKN5a1s93GGG0NyaDOgVaKdteBtIV0o49bvbgsZcg\nKMWkwrrFQm2G7KfLix9zB6I6YTJnr0Ak+wJY07+Gh7xPew0jIIP7TTsPn0xvniNO\naD3YxKAAzMl++SUqm0j0nJWoq6ryGOMT3B44yAxIk87uldKHMAtVbSreF8rWzZM=\n=WNos\n-----END PGP SIGNATURE-----\n", "payload": "tree b3703206285c3e0afd6446b40db1a05350615731\nparent 8bd4ed9f95a9c7228ec10988550ec0808b1a4e75\nparent 46d8c4bdb7318a50d9df12a7a0b0bcc8efc1846e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1601511212 +0200\ncommitter GitHub <noreply@github.com> 1601511212 +0200\n\nRollup merge of #77153 - Aaron1011:fix/better-recursive-expand, r=petrochenkov\n\nFix recursive nonterminal expansion during pretty-print/reparse check\n\nMakes progress towards #43081\n\nIn PR #73084, we started recursively expanded nonterminals during the\npretty-print/reparse check, allowing them to be properly compared\nagainst the reparsed tokenstream.\n\nUnfortunately, the recursive logic in that PR only handles the case\nwhere a nonterminal appears inside a `TokenTree::Delimited`. If a\nnonterminal appears directly in the expanded tokens of another\nnonterminal, the inner nonterminal will not be expanded.\n\nThis PR fixes the recursive expansion of nonterminals, ensuring that\nthey are expanded wherever they occur.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ccc063fbc54e5fea3a4811310ff0bb0821d2992", "html_url": "https://github.com/rust-lang/rust/commit/8ccc063fbc54e5fea3a4811310ff0bb0821d2992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ccc063fbc54e5fea3a4811310ff0bb0821d2992/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bd4ed9f95a9c7228ec10988550ec0808b1a4e75", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75", "html_url": "https://github.com/rust-lang/rust/commit/8bd4ed9f95a9c7228ec10988550ec0808b1a4e75"}, {"sha": "46d8c4bdb7318a50d9df12a7a0b0bcc8efc1846e", "url": "https://api.github.com/repos/rust-lang/rust/commits/46d8c4bdb7318a50d9df12a7a0b0bcc8efc1846e", "html_url": "https://github.com/rust-lang/rust/commit/46d8c4bdb7318a50d9df12a7a0b0bcc8efc1846e"}], "stats": {"total": 143, "additions": 120, "deletions": 23}, "files": [{"sha": "b68d36c9a8e6fc3e0875098177d987475405e6b3", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8ccc063fbc54e5fea3a4811310ff0bb0821d2992/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccc063fbc54e5fea3a4811310ff0bb0821d2992/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=8ccc063fbc54e5fea3a4811310ff0bb0821d2992", "patch": "@@ -8,7 +8,7 @@\n \n use rustc_ast as ast;\n use rustc_ast::token::{self, Nonterminal, Token, TokenKind};\n-use rustc_ast::tokenstream::{self, Spacing, TokenStream, TokenTree};\n+use rustc_ast::tokenstream::{self, TokenStream, TokenTree};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Diagnostic, FatalError, Level, PResult};\n@@ -435,31 +435,42 @@ pub fn tokenstream_probably_equal_for_proc_macro(\n         token_trees.into_iter()\n     }\n \n-    let expand_nt = |tree: TokenTree| {\n-        if let TokenTree::Token(Token { kind: TokenKind::Interpolated(nt), span }) = &tree {\n-            // When checking tokenstreams for 'probable equality', we are comparing\n-            // a captured (from parsing) `TokenStream` to a reparsed tokenstream.\n-            // The reparsed Tokenstream will never have `None`-delimited groups,\n-            // since they are only ever inserted as a result of macro expansion.\n-            // Therefore, inserting a `None`-delimtied group here (when we\n-            // convert a nested `Nonterminal` to a tokenstream) would cause\n-            // a mismatch with the reparsed tokenstream.\n-            //\n-            // Note that we currently do not handle the case where the\n-            // reparsed stream has a `Parenthesis`-delimited group\n-            // inserted. This will cause a spurious mismatch:\n-            // issue #75734 tracks resolving this.\n-            nt_to_tokenstream(nt, sess, *span).into_trees()\n-        } else {\n-            TokenStream::new(vec![(tree, Spacing::Alone)]).into_trees()\n-        }\n-    };\n+    fn expand_token(tree: TokenTree, sess: &ParseSess) -> impl Iterator<Item = TokenTree> {\n+        // When checking tokenstreams for 'probable equality', we are comparing\n+        // a captured (from parsing) `TokenStream` to a reparsed tokenstream.\n+        // The reparsed Tokenstream will never have `None`-delimited groups,\n+        // since they are only ever inserted as a result of macro expansion.\n+        // Therefore, inserting a `None`-delimtied group here (when we\n+        // convert a nested `Nonterminal` to a tokenstream) would cause\n+        // a mismatch with the reparsed tokenstream.\n+        //\n+        // Note that we currently do not handle the case where the\n+        // reparsed stream has a `Parenthesis`-delimited group\n+        // inserted. This will cause a spurious mismatch:\n+        // issue #75734 tracks resolving this.\n+\n+        let expanded: SmallVec<[_; 1]> =\n+            if let TokenTree::Token(Token { kind: TokenKind::Interpolated(nt), span }) = &tree {\n+                nt_to_tokenstream(nt, sess, *span)\n+                    .into_trees()\n+                    .flat_map(|t| expand_token(t, sess))\n+                    .collect()\n+            } else {\n+                // Filter before and after breaking tokens,\n+                // since we may want to ignore both glued and unglued tokens.\n+                std::iter::once(tree)\n+                    .filter(semantic_tree)\n+                    .flat_map(break_tokens)\n+                    .filter(semantic_tree)\n+                    .collect()\n+            };\n+        expanded.into_iter()\n+    }\n \n     // Break tokens after we expand any nonterminals, so that we break tokens\n     // that are produced as a result of nonterminal expansion.\n-    let tokens = tokens.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n-    let reparsed_tokens =\n-        reparsed_tokens.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n+    let tokens = tokens.trees().flat_map(|t| expand_token(t, sess));\n+    let reparsed_tokens = reparsed_tokens.trees().flat_map(|t| expand_token(t, sess));\n \n     tokens.eq_by(reparsed_tokens, |t, rt| tokentree_probably_equal_for_proc_macro(&t, &rt, sess))\n }"}, {"sha": "2f5af10a40ac2cc1e0101ab3b9fa661fe0a41fb4", "filename": "src/test/ui/proc-macro/nested-nonterminal-tokens.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8ccc063fbc54e5fea3a4811310ff0bb0821d2992/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccc063fbc54e5fea3a4811310ff0bb0821d2992/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.rs?ref=8ccc063fbc54e5fea3a4811310ff0bb0821d2992", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+// edition:2018\n+// compile-flags: -Z span-debug\n+// aux-build:test-macros.rs\n+\n+// Tests that we properly pass tokens to proc-macro when nested\n+// nonterminals are involved.\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+\n+macro_rules! wrap {\n+    (first, $e:expr) => { wrap!(second, $e + 1) };\n+    (second, $e:expr) => { wrap!(third, $e + 2) };\n+    (third, $e:expr) => {\n+        print_bang!($e + 3);\n+    };\n+}\n+\n+fn main() {\n+    let _ = wrap!(first, 0);\n+}"}, {"sha": "a3d24dd26fe978f19f3dac03d4f96773b613c215", "filename": "src/test/ui/proc-macro/nested-nonterminal-tokens.stdout", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8ccc063fbc54e5fea3a4811310ff0bb0821d2992/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/8ccc063fbc54e5fea3a4811310ff0bb0821d2992/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-nonterminal-tokens.stdout?ref=8ccc063fbc54e5fea3a4811310ff0bb0821d2992", "patch": "@@ -0,0 +1,60 @@\n+PRINT-BANG INPUT (DISPLAY): 0 + 1 + 2 + 3\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Group {\n+                delimiter: None,\n+                stream: TokenStream [\n+                    Group {\n+                        delimiter: None,\n+                        stream: TokenStream [\n+                            Literal {\n+                                kind: Integer,\n+                                symbol: \"0\",\n+                                suffix: None,\n+                                span: $DIR/nested-nonterminal-tokens.rs:25:26: 25:27 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/nested-nonterminal-tokens.rs:17:41: 17:43 (#4),\n+                    },\n+                    Punct {\n+                        ch: '+',\n+                        spacing: Alone,\n+                        span: $DIR/nested-nonterminal-tokens.rs:17:44: 17:45 (#4),\n+                    },\n+                    Literal {\n+                        kind: Integer,\n+                        symbol: \"1\",\n+                        suffix: None,\n+                        span: $DIR/nested-nonterminal-tokens.rs:17:46: 17:47 (#4),\n+                    },\n+                ],\n+                span: $DIR/nested-nonterminal-tokens.rs:18:41: 18:43 (#5),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/nested-nonterminal-tokens.rs:18:44: 18:45 (#5),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"2\",\n+                suffix: None,\n+                span: $DIR/nested-nonterminal-tokens.rs:18:46: 18:47 (#5),\n+            },\n+        ],\n+        span: $DIR/nested-nonterminal-tokens.rs:20:21: 20:23 (#6),\n+    },\n+    Punct {\n+        ch: '+',\n+        spacing: Alone,\n+        span: $DIR/nested-nonterminal-tokens.rs:20:24: 20:25 (#6),\n+    },\n+    Literal {\n+        kind: Integer,\n+        symbol: \"3\",\n+        suffix: None,\n+        span: $DIR/nested-nonterminal-tokens.rs:20:26: 20:27 (#6),\n+    },\n+]"}]}