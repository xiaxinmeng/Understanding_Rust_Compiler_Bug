{"sha": "5ca3a1bed185d6f7ad914dda6c73590f54d2515d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYTNhMWJlZDE4NWQ2ZjdhZDkxNGRkYTZjNzM1OTBmNTRkMjUxNWQ=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-12-27T19:33:22Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-12-29T21:45:58Z"}, "message": "Resolve long compile times when evaluating always valid constants\n\nThis extends the existing logic which skips validating every integer or\nfloating point number type to also skip validating empty structs because\nthey are also trivially valid.\n\nFixes #67539", "tree": {"sha": "cc72272f90734dd2697b95c10c93e702b89d6cd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc72272f90734dd2697b95c10c93e702b89d6cd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ca3a1bed185d6f7ad914dda6c73590f54d2515d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca3a1bed185d6f7ad914dda6c73590f54d2515d", "html_url": "https://github.com/rust-lang/rust/commit/5ca3a1bed185d6f7ad914dda6c73590f54d2515d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ca3a1bed185d6f7ad914dda6c73590f54d2515d/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34", "html_url": "https://github.com/rust-lang/rust/commit/41501a6b03a8f10d8c29dfcb37dbd5ff84b33f34"}], "stats": {"total": 102, "additions": 99, "deletions": 3}, "files": [{"sha": "448a2765fd3e083266a3c33565204d97f354b8ce", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ca3a1bed185d6f7ad914dda6c73590f54d2515d/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca3a1bed185d6f7ad914dda6c73590f54d2515d/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=5ca3a1bed185d6f7ad914dda6c73590f54d2515d", "patch": "@@ -580,10 +580,19 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n             }\n             ty::Array(tys, ..) | ty::Slice(tys)\n                 if {\n-                    // This optimization applies only for integer and floating point types\n-                    // (i.e., types that can hold arbitrary bytes).\n+                    // This optimization applies for types that can hold arbitrary bytes (such as\n+                    // integer and floating point types) or for structs or tuples with no fields.\n+                    // FIXME(wesleywiser) This logic could be extended further to arbitrary structs\n+                    // or tuples made up of integer/floating point types or inhabited ZSTs with no\n+                    // padding.\n                     match tys.kind {\n                         ty::Int(..) | ty::Uint(..) | ty::Float(..) => true,\n+                        ty::Tuple(tys) if tys.len() == 0 => true,\n+                        ty::Adt(adt_def, _)\n+                            if adt_def.is_struct() && adt_def.all_fields().next().is_none() =>\n+                        {\n+                            true\n+                        }\n                         _ => false,\n                     }\n                 } =>\n@@ -609,7 +618,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 // Size is not 0, get a pointer.\n                 let ptr = self.ecx.force_ptr(mplace.ptr)?;\n \n-                // This is the optimization: we just check the entire range at once.\n+                // Optimization: we just check the entire range at once.\n                 // NOTE: Keep this in sync with the handling of integer and float\n                 // types above, in `visit_primitive`.\n                 // In run-time mode, we accept pointers in here.  This is actually more"}, {"sha": "f18e00fd633ea5bfb1eb53cba8f50c3531f731bd", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5ca3a1bed185d6f7ad914dda6c73590f54d2515d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca3a1bed185d6f7ad914dda6c73590f54d2515d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs?ref=5ca3a1bed185d6f7ad914dda6c73590f54d2515d", "patch": "@@ -0,0 +1,24 @@\n+#![feature(const_fn)]\n+#![feature(const_transmute)]\n+\n+const fn foo() -> ! {\n+    unsafe { std::mem::transmute(()) }\n+    //~^ WARN any use of this value will cause an error [const_err]\n+    //~| WARN the type `!` does not permit zero-initialization [invalid_value]\n+}\n+\n+#[derive(Clone, Copy)]\n+enum Empty { }\n+\n+#[warn(const_err)]\n+const FOO: [Empty; 3] = [foo(); 3];\n+\n+#[warn(const_err)]\n+const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n+//~^ ERROR it is undefined behavior to use this value\n+//~| WARN the type `Empty` does not permit zero-initialization\n+\n+fn main() {\n+    FOO;\n+    BAR;\n+}"}, {"sha": "bde7f2536fac12a840fc5563521bef4c6e0fea90", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5ca3a1bed185d6f7ad914dda6c73590f54d2515d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ca3a1bed185d6f7ad914dda6c73590f54d2515d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr?ref=5ca3a1bed185d6f7ad914dda6c73590f54d2515d", "patch": "@@ -0,0 +1,52 @@\n+warning: any use of this value will cause an error\n+  --> $DIR/validate_uninhabited_zsts.rs:5:14\n+   |\n+LL |     unsafe { std::mem::transmute(()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              entering unreachable code\n+   |              inside call to `foo` at $DIR/validate_uninhabited_zsts.rs:14:26\n+...\n+LL | const FOO: [Empty; 3] = [foo(); 3];\n+   | -----------------------------------\n+   |\n+note: lint level defined here\n+  --> $DIR/validate_uninhabited_zsts.rs:13:8\n+   |\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/validate_uninhabited_zsts.rs:17:1\n+   |\n+LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of an uninhabited type\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+warning: the type `!` does not permit zero-initialization\n+  --> $DIR/validate_uninhabited_zsts.rs:5:14\n+   |\n+LL |     unsafe { std::mem::transmute(()) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              this code causes undefined behavior when executed\n+   |              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |\n+   = note: `#[warn(invalid_value)]` on by default\n+   = note: The never type (`!`) has no valid value\n+\n+warning: the type `Empty` does not permit zero-initialization\n+  --> $DIR/validate_uninhabited_zsts.rs:17:35\n+   |\n+LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                   |\n+   |                                   this code causes undefined behavior when executed\n+   |                                   help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n+   |\n+   = note: 0-variant enums have no valid value\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "ab09922d7614ae470fd0f6eca0c6e9606dc23ea3", "filename": "src/test/ui/consts/huge-values.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ca3a1bed185d6f7ad914dda6c73590f54d2515d/src%2Ftest%2Fui%2Fconsts%2Fhuge-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca3a1bed185d6f7ad914dda6c73590f54d2515d/src%2Ftest%2Fui%2Fconsts%2Fhuge-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fhuge-values.rs?ref=5ca3a1bed185d6f7ad914dda6c73590f54d2515d", "patch": "@@ -0,0 +1,11 @@\n+// build-pass\n+// ignore-32bit\n+\n+#[derive(Clone, Copy)]\n+struct Foo;\n+\n+fn main() {\n+    let _ = [(); 4_000_000_000];\n+    let _ = [0u8; 4_000_000_000];\n+    let _ = [Foo; 4_000_000_000];\n+}"}]}