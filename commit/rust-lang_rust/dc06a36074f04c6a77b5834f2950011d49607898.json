{"sha": "dc06a36074f04c6a77b5834f2950011d49607898", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMDZhMzYwNzRmMDRjNmE3N2I1ODM0ZjI5NTAwMTFkNDk2MDc4OTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-06T11:31:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-06T11:31:18Z"}, "message": "Auto merge of #77351 - jyn514:clippy-sysroot, r=Mark-Simulacrum\n\nFix `x.py clippy`\n\nI don't think this ever worked.\n\nFixes https://github.com/rust-lang/rust/issues/77309. `--fix` support is a work in progress, but works for a very small subset of `libtest`.\n\nThis works by using the host `cargo-clippy` driver; it does not use `stage0.txt` at all. To mitigate confusion from this, it gives an error if you don't have `rustc +nightly` as the default rustc in `$PATH`. Additionally, it means that bootstrap can't set `RUSTC`; this makes it no longer possible for clippy to detect the sysroot itself. Instead, bootstrap passes the sysroot to cargo.\n\nr? `@ghost`", "tree": {"sha": "8b371c342eb49e1b48d5c104e6c0ba013952f025", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b371c342eb49e1b48d5c104e6c0ba013952f025"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc06a36074f04c6a77b5834f2950011d49607898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc06a36074f04c6a77b5834f2950011d49607898", "html_url": "https://github.com/rust-lang/rust/commit/dc06a36074f04c6a77b5834f2950011d49607898", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc06a36074f04c6a77b5834f2950011d49607898/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8532e742fc6ec210fab69b8192190bc40c685912", "url": "https://api.github.com/repos/rust-lang/rust/commits/8532e742fc6ec210fab69b8192190bc40c685912", "html_url": "https://github.com/rust-lang/rust/commit/8532e742fc6ec210fab69b8192190bc40c685912"}, {"sha": "8d2fa72fc8064e7800e9d2a6512fa7eb302e8d8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d2fa72fc8064e7800e9d2a6512fa7eb302e8d8d", "html_url": "https://github.com/rust-lang/rust/commit/8d2fa72fc8064e7800e9d2a6512fa7eb302e8d8d"}], "stats": {"total": 95, "additions": 76, "deletions": 19}, "files": [{"sha": "b48508f2c24616ebc4531c572d400d3bf94a14ef", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/dc06a36074f04c6a77b5834f2950011d49607898/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc06a36074f04c6a77b5834f2950011d49607898/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=dc06a36074f04c6a77b5834f2950011d49607898", "patch": "@@ -371,7 +371,7 @@ impl<'a> Builder<'a> {\n                 tool::CargoMiri,\n                 native::Lld\n             ),\n-            Kind::Check | Kind::Clippy | Kind::Fix | Kind::Format => describe!(\n+            Kind::Check | Kind::Clippy { .. } | Kind::Fix | Kind::Format => describe!(\n                 check::Std,\n                 check::Rustc,\n                 check::Rustdoc,\n@@ -539,7 +539,7 @@ impl<'a> Builder<'a> {\n         let (kind, paths) = match build.config.cmd {\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n             Subcommand::Check { ref paths, all_targets: _ } => (Kind::Check, &paths[..]),\n-            Subcommand::Clippy { ref paths } => (Kind::Clippy, &paths[..]),\n+            Subcommand::Clippy { ref paths, .. } => (Kind::Clippy, &paths[..]),\n             Subcommand::Fix { ref paths } => (Kind::Fix, &paths[..]),\n             Subcommand::Doc { ref paths, .. } => (Kind::Doc, &paths[..]),\n             Subcommand::Test { ref paths, .. } => (Kind::Test, &paths[..]),\n@@ -849,7 +849,41 @@ impl<'a> Builder<'a> {\n                 cargo.args(s.split_whitespace());\n             }\n             rustflags.env(\"RUSTFLAGS_BOOTSTRAP\");\n-            rustflags.arg(\"--cfg=bootstrap\");\n+            if cmd == \"clippy\" {\n+                // clippy overwrites sysroot if we pass it to cargo.\n+                // Pass it directly to clippy instead.\n+                // NOTE: this can't be fixed in clippy because we explicitly don't set `RUSTC`,\n+                // so it has no way of knowing the sysroot.\n+                rustflags.arg(\"--sysroot\");\n+                rustflags.arg(\n+                    self.sysroot(compiler)\n+                        .as_os_str()\n+                        .to_str()\n+                        .expect(\"sysroot must be valid UTF-8\"),\n+                );\n+                // Only run clippy on a very limited subset of crates (in particular, not build scripts).\n+                cargo.arg(\"-Zunstable-options\");\n+                // Explicitly does *not* set `--cfg=bootstrap`, since we're using a nightly clippy.\n+                let host_version = Command::new(\"rustc\").arg(\"--version\").output().map_err(|_| ());\n+                let output = host_version.and_then(|output| {\n+                    if output.status.success() {\n+                        Ok(output)\n+                    } else {\n+                        Err(())\n+                    }\n+                }).unwrap_or_else(|_| {\n+                    eprintln!(\n+                        \"error: `x.py clippy` requires a host `rustc` toolchain with the `clippy` component\"\n+                    );\n+                    eprintln!(\"help: try `rustup component add clippy`\");\n+                    std::process::exit(1);\n+                });\n+                if !t!(std::str::from_utf8(&output.stdout)).contains(\"nightly\") {\n+                    rustflags.arg(\"--cfg=bootstrap\");\n+                }\n+            } else {\n+                rustflags.arg(\"--cfg=bootstrap\");\n+            }\n         }\n \n         if self.config.rust_new_symbol_mangling {\n@@ -974,7 +1008,6 @@ impl<'a> Builder<'a> {\n         // src/bootstrap/bin/{rustc.rs,rustdoc.rs}\n         cargo\n             .env(\"RUSTBUILD_NATIVE_DIR\", self.native_dir(target))\n-            .env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"))\n             .env(\"RUSTC_REAL\", self.rustc(compiler))\n             .env(\"RUSTC_STAGE\", stage.to_string())\n             .env(\"RUSTC_SYSROOT\", &sysroot)\n@@ -990,6 +1023,11 @@ impl<'a> Builder<'a> {\n             )\n             .env(\"RUSTC_ERROR_METADATA_DST\", self.extended_error_dir())\n             .env(\"RUSTC_BREAK_ON_ICE\", \"1\");\n+        // Clippy support is a hack and uses the default `cargo-clippy` in path.\n+        // Don't override RUSTC so that the `cargo-clippy` in path will be run.\n+        if cmd != \"clippy\" {\n+            cargo.env(\"RUSTC\", self.out.join(\"bootstrap/debug/rustc\"));\n+        }\n \n         // Dealing with rpath here is a little special, so let's go into some\n         // detail. First off, `-rpath` is a linker option on Unix platforms"}, {"sha": "2e3cfc98c8cf24e6ed3033c0e4aa101467b81c0f", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/dc06a36074f04c6a77b5834f2950011d49607898/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc06a36074f04c6a77b5834f2950011d49607898/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=dc06a36074f04c6a77b5834f2950011d49607898", "patch": "@@ -1,26 +1,41 @@\n //! Implementation of compiling the compiler and standard library, in \"check\"-based modes.\n \n+use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n use crate::compile::{add_to_sysroot, run_cargo, rustc_cargo, rustc_cargo_env, std_cargo};\n use crate::config::TargetSelection;\n use crate::tool::{prepare_tool_cargo, SourceType};\n use crate::INTERNER;\n-use crate::{\n-    builder::{Builder, Kind, RunConfig, ShouldRun, Step},\n-    Subcommand,\n-};\n-use crate::{Compiler, Mode};\n+use crate::{Compiler, Mode, Subcommand};\n use std::path::PathBuf;\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Std {\n     pub target: TargetSelection,\n }\n \n-fn args(kind: Kind) -> Vec<String> {\n-    match kind {\n-        Kind::Clippy => vec![\"--\".to_owned(), \"--cap-lints\".to_owned(), \"warn\".to_owned()],\n-        _ => Vec::new(),\n+/// Returns args for the subcommand itself (not for cargo)\n+fn args(builder: &Builder<'_>) -> Vec<String> {\n+    fn strings<'a>(arr: &'a [&str]) -> impl Iterator<Item = String> + 'a {\n+        arr.iter().copied().map(String::from)\n+    }\n+\n+    if let Subcommand::Clippy { fix, .. } = builder.config.cmd {\n+        let mut args = vec![];\n+        if fix {\n+            #[rustfmt::skip]\n+            args.extend(strings(&[\n+                \"--fix\", \"-Zunstable-options\",\n+                // FIXME: currently, `--fix` gives an error while checking tests for libtest,\n+                // possibly because libtest is not yet built in the sysroot.\n+                // As a workaround, avoid checking tests and benches when passed --fix.\n+                \"--lib\", \"--bins\", \"--examples\",\n+            ]));\n+        }\n+        args.extend(strings(&[\"--\", \"--cap-lints\", \"warn\"]));\n+        args\n+    } else {\n+        vec![]\n     }\n }\n \n@@ -62,7 +77,7 @@ impl Step for Std {\n         run_cargo(\n             builder,\n             cargo,\n-            args(builder.kind),\n+            args(builder),\n             &libstd_stamp(builder, compiler, target),\n             vec![],\n             true,\n@@ -104,7 +119,7 @@ impl Step for Std {\n             run_cargo(\n                 builder,\n                 cargo,\n-                args(builder.kind),\n+                args(builder),\n                 &libstd_test_stamp(builder, compiler, target),\n                 vec![],\n                 true,\n@@ -165,7 +180,7 @@ impl Step for Rustc {\n         run_cargo(\n             builder,\n             cargo,\n-            args(builder.kind),\n+            args(builder),\n             &librustc_stamp(builder, compiler, target),\n             vec![],\n             true,\n@@ -220,7 +235,7 @@ impl Step for CodegenBackend {\n         run_cargo(\n             builder,\n             cargo,\n-            args(builder.kind),\n+            args(builder),\n             &codegen_backend_stamp(builder, compiler, target, backend),\n             vec![],\n             true,\n@@ -278,7 +293,7 @@ macro_rules! tool_check_step {\n                 run_cargo(\n                     builder,\n                     cargo,\n-                    args(builder.kind),\n+                    args(builder),\n                     &stamp(builder, compiler, target),\n                     vec![],\n                     true,"}, {"sha": "dbfcf4df9b4bed92da883cd1b672c8825eb06550", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc06a36074f04c6a77b5834f2950011d49607898/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc06a36074f04c6a77b5834f2950011d49607898/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=dc06a36074f04c6a77b5834f2950011d49607898", "patch": "@@ -55,6 +55,7 @@ pub enum Subcommand {\n         paths: Vec<PathBuf>,\n     },\n     Clippy {\n+        fix: bool,\n         paths: Vec<PathBuf>,\n     },\n     Fix {\n@@ -273,6 +274,9 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             \"bench\" => {\n                 opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n             }\n+            \"clippy\" => {\n+                opts.optflag(\"\", \"fix\", \"automatically apply lint suggestions\");\n+            }\n             \"doc\" => {\n                 opts.optflag(\"\", \"open\", \"open the docs in a browser\");\n             }\n@@ -513,7 +517,7 @@ Arguments:\n             \"check\" | \"c\" => {\n                 Subcommand::Check { paths, all_targets: matches.opt_present(\"all-targets\") }\n             }\n-            \"clippy\" => Subcommand::Clippy { paths },\n+            \"clippy\" => Subcommand::Clippy { paths, fix: matches.opt_present(\"fix\") },\n             \"fix\" => Subcommand::Fix { paths },\n             \"test\" | \"t\" => Subcommand::Test {\n                 paths,"}]}