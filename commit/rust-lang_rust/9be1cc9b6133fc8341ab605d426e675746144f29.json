{"sha": "9be1cc9b6133fc8341ab605d426e675746144f29", "node_id": "C_kwDOAAsO6NoAKDliZTFjYzliNjEzM2ZjODM0MWFiNjA1ZDQyNmU2NzU3NDYxNDRmMjk", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2021-12-16T23:32:31Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2021-12-16T23:34:12Z"}, "message": "more docs improvements", "tree": {"sha": "7332f5c93ae083c877edf87216232ad1d536d965", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7332f5c93ae083c877edf87216232ad1d536d965"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9be1cc9b6133fc8341ab605d426e675746144f29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9be1cc9b6133fc8341ab605d426e675746144f29", "html_url": "https://github.com/rust-lang/rust/commit/9be1cc9b6133fc8341ab605d426e675746144f29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9be1cc9b6133fc8341ab605d426e675746144f29/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "078b112d9452eb24cf6d5dffe8f4479cbe830d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/078b112d9452eb24cf6d5dffe8f4479cbe830d4e", "html_url": "https://github.com/rust-lang/rust/commit/078b112d9452eb24cf6d5dffe8f4479cbe830d4e"}], "stats": {"total": 242, "additions": 207, "deletions": 35}, "files": [{"sha": "07f04aa2b911bd51b56c875863a75e4fed4fe0ce", "filename": "library/std/src/error.rs", "status": "modified", "additions": 207, "deletions": 35, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/9be1cc9b6133fc8341ab605d426e675746144f29/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be1cc9b6133fc8341ab605d426e675746144f29/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=9be1cc9b6133fc8341ab605d426e675746144f29", "patch": "@@ -869,8 +869,10 @@ impl dyn Error + Send + Sync {\n /// Error: SuperError is here!: SuperErrorSideKick is here!\n /// ```\n ///\n+/// ## Output consistency\n+///\n /// Report prints the same output via `Display` and `Debug`, so it works well with\n-/// [`unwrap`]/[`expect`]:\n+/// [`Result::unwrap`]/[`Result::expect`] which print their `Err` variant via `Debug`:\n ///\n /// ```should_panic\n /// #![feature(error_reporter)]\n@@ -912,6 +914,104 @@ impl dyn Error + Send + Sync {\n /// thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: SuperError is here!: SuperErrorSideKick is here!', src/error.rs:34:40\n /// note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n /// ```\n+// /// TODO: Report doesn't yet support return from `main` gracefully, fix in followup (yaahc)\n+// /// ## Return from `main`\n+// ///\n+// /// `Report` also implements `From` for all types that implement [`Error`], this when combined with\n+// /// the `Debug` output means `Report` is an ideal starting place for formatting errors returned\n+// /// from `main`.\n+// ///\n+// /// ```\n+// /// #![feature(error_reporter)]\n+// /// use std::error::Report;\n+// /// # use std::error::Error;\n+// /// # use std::fmt;\n+// /// # #[derive(Debug)]\n+// /// # struct SuperError {\n+// /// #     source: SuperErrorSideKick,\n+// /// # }\n+// /// # impl fmt::Display for SuperError {\n+// /// #     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+// /// #         write!(f, \"SuperError is here!\")\n+// /// #     }\n+// /// # }\n+// /// # impl Error for SuperError {\n+// /// #     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+// /// #         Some(&self.source)\n+// /// #     }\n+// /// # }\n+// /// # #[derive(Debug)]\n+// /// # struct SuperErrorSideKick;\n+// /// # impl fmt::Display for SuperErrorSideKick {\n+// /// #     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+// /// #         write!(f, \"SuperErrorSideKick is here!\")\n+// /// #     }\n+// /// # }\n+// /// # impl Error for SuperErrorSideKick {}\n+// /// # fn get_super_error() -> Result<(), SuperError> {\n+// /// #     Err(SuperError { source: SuperErrorSideKick })\n+// /// # }\n+// ///\n+// /// fn main() -> Result<(), Report> {\n+// ///     get_super_error()?;\n+// /// }\n+// /// ```\n+// ///\n+// /// This example produces the following output:\n+// ///\n+// /// ```console\n+// /// thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: SuperError is here!: SuperErrorSideKick is here!', src/error.rs:34:40\n+// /// note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+// /// ```\n+// ///\n+// /// **Note**: `Report`s constructed via `?` and `From` will be configured to use the single line\n+// /// output format, if you want to make sure your `Report`s are pretty printed and include backtrace\n+// /// you will need to manually convert and enable those flags.\n+// ///\n+// /// ```\n+// /// #![feature(error_reporter)]\n+// /// use std::error::Report;\n+// /// # use std::error::Error;\n+// /// # use std::fmt;\n+// /// # #[derive(Debug)]\n+// /// # struct SuperError {\n+// /// #     source: SuperErrorSideKick,\n+// /// # }\n+// /// # impl fmt::Display for SuperError {\n+// /// #     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+// /// #         write!(f, \"SuperError is here!\")\n+// /// #     }\n+// /// # }\n+// /// # impl Error for SuperError {\n+// /// #     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+// /// #         Some(&self.source)\n+// /// #     }\n+// /// # }\n+// /// # #[derive(Debug)]\n+// /// # struct SuperErrorSideKick;\n+// /// # impl fmt::Display for SuperErrorSideKick {\n+// /// #     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+// /// #         write!(f, \"SuperErrorSideKick is here!\")\n+// /// #     }\n+// /// # }\n+// /// # impl Error for SuperErrorSideKick {}\n+// /// # fn get_super_error() -> Result<(), SuperError> {\n+// /// #     Err(SuperError { source: SuperErrorSideKick })\n+// /// # }\n+// ///\n+// /// fn main() -> Result<(), Report> {\n+// ///     get_super_error()\n+// ///         .map_err(Report::new)\n+// ///         .map_err(|r| r.pretty(true).show_backtrace(true))?;\n+// /// }\n+// /// ```\n+// ///\n+// /// This example produces the following output:\n+// ///\n+// /// ```console\n+// /// thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: SuperError is here!: SuperErrorSideKick is here!', src/error.rs:34:40\n+// /// note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+// /// ```\n #[unstable(feature = \"error_reporter\", issue = \"90172\")]\n pub struct Report<E> {\n     /// The error being reported.\n@@ -977,6 +1077,68 @@ where\n     /// Caused by:\n     ///       SuperErrorSideKick is here!\n     /// ```\n+    ///\n+    /// When there are multiple source errors the causes will be numbered in order of iteration\n+    /// starting from the outermost error.\n+    ///\n+    /// ```rust\n+    /// #![feature(error_reporter)]\n+    /// use std::error::Report;\n+    /// # use std::error::Error;\n+    /// # use std::fmt;\n+    /// # #[derive(Debug)]\n+    /// # struct SuperError {\n+    /// #     source: SuperErrorSideKick,\n+    /// # }\n+    /// # impl fmt::Display for SuperError {\n+    /// #     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    /// #         write!(f, \"SuperError is here!\")\n+    /// #     }\n+    /// # }\n+    /// # impl Error for SuperError {\n+    /// #     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    /// #         Some(&self.source)\n+    /// #     }\n+    /// # }\n+    /// # #[derive(Debug)]\n+    /// # struct SuperErrorSideKick {\n+    /// #     source: SuperErrorSideKickSideKick,\n+    /// # }\n+    /// # impl fmt::Display for SuperErrorSideKick {\n+    /// #     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    /// #         write!(f, \"SuperErrorSideKick is here!\")\n+    /// #     }\n+    /// # }\n+    /// # impl Error for SuperErrorSideKick {\n+    /// #     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    /// #         Some(&self.source)\n+    /// #     }\n+    /// # }\n+    /// # #[derive(Debug)]\n+    /// # struct SuperErrorSideKickSideKick;\n+    /// # impl fmt::Display for SuperErrorSideKickSideKick {\n+    /// #     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    /// #         write!(f, \"SuperErrorSideKickSideKick is here!\")\n+    /// #     }\n+    /// # }\n+    /// # impl Error for SuperErrorSideKickSideKick { }\n+    ///\n+    /// let source = SuperErrorSideKickSideKick;\n+    /// let source = SuperErrorSideKick { source };\n+    /// let error = SuperError { source };\n+    /// let report = Report::new(error).pretty(true);\n+    /// eprintln!(\"Error: {:?}\", report);\n+    /// ```\n+    ///\n+    /// This example produces the following output:\n+    ///\n+    /// ```console\n+    /// Error: SuperError is here!\n+    ///\n+    /// Caused by:\n+    ///    0: SuperErrorSideKick is here!\n+    ///    1: SuperErrorSideKickSideKick is here!\n+    /// ```\n     #[unstable(feature = \"error_reporter\", issue = \"90172\")]\n     pub fn pretty(mut self, pretty: bool) -> Self {\n         self.pretty = pretty;\n@@ -987,38 +1149,40 @@ where\n     ///\n     /// # Examples\n     ///\n+    /// **Note**: Report will search for the first `Backtrace` it can find starting from the\n+    /// outermost error. In this example it will display the backtrace from the second error in the\n+    /// chain, `SuperErrorSideKick`.\n+    ///\n     /// ```rust\n     /// #![feature(error_reporter)]\n     /// #![feature(backtrace)]\n-    /// use std::error::{Error, Report};\n+    /// # use std::error::Error;\n+    /// # use std::fmt;\n+    /// use std::error::Report;\n     /// use std::backtrace::Backtrace;\n-    /// use std::fmt;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct SuperError {\n-    ///     source: SuperErrorSideKick,\n-    /// }\n-    ///\n-    /// impl fmt::Display for SuperError {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"SuperError is here!\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for SuperError {\n-    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n-    ///         Some(&self.source)\n-    ///     }\n-    /// }\n     ///\n+    /// # #[derive(Debug)]\n+    /// # struct SuperError {\n+    /// #     source: SuperErrorSideKick,\n+    /// # }\n+    /// # impl fmt::Display for SuperError {\n+    /// #     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    /// #         write!(f, \"SuperError is here!\")\n+    /// #     }\n+    /// # }\n+    /// # impl Error for SuperError {\n+    /// #     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    /// #         Some(&self.source)\n+    /// #     }\n+    /// # }\n     /// #[derive(Debug)]\n     /// struct SuperErrorSideKick {\n     ///     backtrace: Backtrace,\n     /// }\n     ///\n-    /// impl fmt::Display for SuperErrorSideKick {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"SuperErrorSideKick is here!\")\n+    /// impl SuperErrorSideKick {\n+    ///     fn new() -> SuperErrorSideKick {\n+    ///         SuperErrorSideKick { backtrace: Backtrace::force_capture() }\n     ///     }\n     /// }\n     ///\n@@ -1028,7 +1192,14 @@ where\n     ///     }\n     /// }\n     ///\n-    /// let source = SuperErrorSideKick { backtrace: Backtrace::force_capture() };\n+    /// // The rest of the example is unchanged ...\n+    /// # impl fmt::Display for SuperErrorSideKick {\n+    /// #     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    /// #         write!(f, \"SuperErrorSideKick is here!\")\n+    /// #     }\n+    /// # }\n+    ///\n+    /// let source = SuperErrorSideKick::new();\n     /// let error = SuperError { source };\n     /// let report = Report::new(error).pretty(true).show_backtrace(true);\n     /// eprintln!(\"Error: {:?}\", report);\n@@ -1043,17 +1214,18 @@ where\n     ///       SuperErrorSideKick is here!\n     ///\n     /// Stack backtrace:\n-    ///    0: rust_out::main::_doctest_main_src_error_rs_943_0\n-    ///    1: rust_out::main\n-    ///    2: core::ops::function::FnOnce::call_once\n-    ///    3: std::sys_common::backtrace::__rust_begin_short_backtrace\n-    ///    4: std::rt::lang_start::{{closure}}\n-    ///    5: std::panicking::try\n-    ///    6: std::rt::lang_start_internal\n-    ///    7: std::rt::lang_start\n-    ///    8: main\n-    ///    9: __libc_start_main\n-    ///   10: _start\n+    ///    0: rust_out::main::_doctest_main_src_error_rs_1158_0::SuperErrorSideKick::new\n+    ///    1: rust_out::main::_doctest_main_src_error_rs_1158_0\n+    ///    2: rust_out::main\n+    ///    3: core::ops::function::FnOnce::call_once\n+    ///    4: std::sys_common::backtrace::__rust_begin_short_backtrace\n+    ///    5: std::rt::lang_start::{{closure}}\n+    ///    6: std::panicking::try\n+    ///    7: std::rt::lang_start_internal\n+    ///    8: std::rt::lang_start\n+    ///    9: main\n+    ///   10: __libc_start_main\n+    ///   11: _start\n     /// ```\n     #[unstable(feature = \"error_reporter\", issue = \"90172\")]\n     pub fn show_backtrace(mut self, show_backtrace: bool) -> Self {"}]}