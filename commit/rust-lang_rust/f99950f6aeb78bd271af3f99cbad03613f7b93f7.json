{"sha": "f99950f6aeb78bd271af3f99cbad03613f7b93f7", "node_id": "C_kwDOAAsO6NoAKGY5OTk1MGY2YWViNzhiZDI3MWFmM2Y5OWNiYWQwMzYxM2Y3YjkzZjc", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-10-04T23:24:33Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:18Z"}, "message": "Update test results after rebase", "tree": {"sha": "de373089e1f38d4f12854e1ef31c5b684ea06cbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de373089e1f38d4f12854e1ef31c5b684ea06cbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f99950f6aeb78bd271af3f99cbad03613f7b93f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f99950f6aeb78bd271af3f99cbad03613f7b93f7", "html_url": "https://github.com/rust-lang/rust/commit/f99950f6aeb78bd271af3f99cbad03613f7b93f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f99950f6aeb78bd271af3f99cbad03613f7b93f7/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c56e99cdba2dc969902005fc495c12f13b9eb2e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c56e99cdba2dc969902005fc495c12f13b9eb2e1", "html_url": "https://github.com/rust-lang/rust/commit/c56e99cdba2dc969902005fc495c12f13b9eb2e1"}], "stats": {"total": 77, "additions": 47, "deletions": 30}, "files": [{"sha": "66e2a445fbcdf04175bfee3b1fb754d34f1138fa", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f99950f6aeb78bd271af3f99cbad03613f7b93f7/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f99950f6aeb78bd271af3f99cbad03613f7b93f7/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=f99950f6aeb78bd271af3f99cbad03613f7b93f7", "patch": "@@ -87,8 +87,8 @@ pub trait ValueAnalysis<'tcx> {\n                 // But discriminants are currently not tracked, so we do nothing.\n                 // Related: https://github.com/rust-lang/unsafe-code-guidelines/issues/84\n             }\n-            StatementKind::CopyNonOverlapping(..) => {\n-                // FIXME: What to do here?\n+            StatementKind::Intrinsic(box intrinsic) => {\n+                self.handle_intrinsic(intrinsic, state);\n             }\n             StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {\n                 // It is UB to read from an unitialized or unallocated local.\n@@ -106,6 +106,22 @@ pub trait ValueAnalysis<'tcx> {\n         }\n     }\n \n+    fn handle_intrinsic(\n+        &self,\n+        intrinsic: &NonDivergingIntrinsic<'tcx>,\n+        state: &mut State<Self::Value>,\n+    ) {\n+        self.super_intrinsic(intrinsic, state);\n+    }\n+\n+    fn super_intrinsic(\n+        &self,\n+        _intrinsic: &NonDivergingIntrinsic<'tcx>,\n+        _state: &mut State<Self::Value>,\n+    ) {\n+        todo!();\n+    }\n+\n     fn handle_assign(\n         &self,\n         target: Place<'tcx>,"}, {"sha": "fbc95cea7cd9596121d89ed629794f46cf65bcf5", "filename": "src/test/mir-opt/dataflow-const-prop/checked.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fchecked.main.DataflowConstProp.diff?ref=f99950f6aeb78bd271af3f99cbad03613f7b93f7", "patch": "@@ -53,7 +53,7 @@\n           StorageDead(_5);                 // scope 2 at $DIR/checked.rs:+3:17: +3:18\n           StorageDead(_4);                 // scope 2 at $DIR/checked.rs:+3:17: +3:18\n           StorageLive(_7);                 // scope 3 at $DIR/checked.rs:+5:9: +5:10\n--         _7 = const core::num::<impl i32>::MAX; // scope 3 at $DIR/checked.rs:+5:13: +5:21\n+-         _7 = const _;                    // scope 3 at $DIR/checked.rs:+5:13: +5:21\n +         _7 = const i32::MAX;             // scope 3 at $DIR/checked.rs:+5:13: +5:21\n           StorageLive(_8);                 // scope 4 at $DIR/checked.rs:+6:9: +6:10\n           StorageLive(_9);                 // scope 4 at $DIR/checked.rs:+6:13: +6:14"}, {"sha": "ce1524af7653122b92ef2b7c9c01f1691492739e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.32bit.diff?ref=f99950f6aeb78bd271af3f99cbad03613f7b93f7", "patch": "@@ -25,7 +25,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:25: 6:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "ce1524af7653122b92ef2b7c9c01f1691492739e", "filename": "src/test/mir-opt/dataflow-const-prop/previous/bad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fbad_op_unsafe_oob_for_slices.main.DataflowConstProp.64bit.diff?ref=f99950f6aeb78bd271af3f99cbad03613f7b93f7", "patch": "@@ -25,7 +25,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n           StorageLive(_3);                 // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n-          _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n+          _9 = const _;                    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:+1:25: +1:35\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:6:25: 6:35\n                                            // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "38a5eecb8e8f0c6ca693055190fae73848e0fb06", "filename": "src/test/mir-opt/dataflow-const-prop/previous/const_prop_fails_gracefully.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fconst_prop_fails_gracefully.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fconst_prop_fails_gracefully.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fconst_prop_fails_gracefully.main.DataflowConstProp.diff?ref=f99950f6aeb78bd271af3f99cbad03613f7b93f7", "patch": "@@ -16,7 +16,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:9: +2:10\n           StorageLive(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:30\n           StorageLive(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n-          _3 = const FOO;                  // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n+          _3 = const _;                    // scope 0 at $DIR/const_prop_fails_gracefully.rs:+2:13: +2:16\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:8:13: 8:16\n                                            // + literal: Const { ty: &i32, val: Unevaluated(FOO, [], None) }"}, {"sha": "f13ca4b62e6fb68f88890aa0ed40d31dd772ec4a", "filename": "src/test/mir-opt/dataflow-const-prop/previous/control_flow_simplification.hello.DataflowConstProp.diff", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fcontrol_flow_simplification.hello.DataflowConstProp.diff?ref=f99950f6aeb78bd271af3f99cbad03613f7b93f7", "patch": "@@ -8,7 +8,8 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n-          _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n+-         _1 = const _;                    // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n++         _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n           switchInt(const false) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/control-flow-simplification.rs:+1:8: +1:21\n       }\n   "}, {"sha": "018178ab624e319cc794c3d81c9d88874324b2b0", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.DataflowConstProp.diff?ref=f99950f6aeb78bd271af3f99cbad03613f7b93f7", "patch": "@@ -11,7 +11,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/ref_deref.rs:+1:5: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-          _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n+          _4 = const _;                    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:6:6: 6:10\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "015ec4d078c10cc1d9da5bc035cf4134d127af0f", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref.main.PromoteTemps.diff?ref=f99950f6aeb78bd271af3f99cbad03613f7b93f7", "patch": "@@ -14,7 +14,7 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n -         _3 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:+1:8: +1:9\n -         _2 = &_3;                        // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n-+         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n++         _4 = const _;                    // scope 0 at $DIR/ref_deref.rs:+1:6: +1:10\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref.rs:6:6: 6:10\n +                                          // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "f16d2fcafb8fa79818e881bcb9947e1d2038fb48", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref_project.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.DataflowConstProp.diff?ref=f99950f6aeb78bd271af3f99cbad03613f7b93f7", "patch": "@@ -11,7 +11,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/ref_deref_project.rs:+1:5: +1:17\n           StorageLive(_2);                 // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-          _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n+          _4 = const _;                    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:6:6: 6:17\n                                            // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "cd0616e65baf847974e037b19474cf8f47439f98", "filename": "src/test/mir-opt/dataflow-const-prop/previous/ref_deref_project.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fref_deref_project.main.PromoteTemps.diff?ref=f99950f6aeb78bd271af3f99cbad03613f7b93f7", "patch": "@@ -14,7 +14,7 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n -         _3 = (const 4_i32, const 5_i32); // scope 0 at $DIR/ref_deref_project.rs:+1:8: +1:14\n -         _2 = &(_3.1: i32);               // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n-+         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n++         _4 = const _;                    // scope 0 at $DIR/ref_deref_project.rs:+1:6: +1:17\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref_project.rs:6:6: 6:17\n +                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "e39afae5aa6260b06768e356d9eed2ad5ac3735c", "filename": "src/test/mir-opt/dataflow-const-prop/previous/slice_len.main.DataflowConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.32bit.diff?ref=f99950f6aeb78bd271af3f99cbad03613f7b93f7", "patch": "@@ -18,7 +18,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n           StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:6:6: 6:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "e39afae5aa6260b06768e356d9eed2ad5ac3735c", "filename": "src/test/mir-opt/dataflow-const-prop/previous/slice_len.main.DataflowConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fprevious%2Fslice_len.main.DataflowConstProp.64bit.diff?ref=f99950f6aeb78bd271af3f99cbad03613f7b93f7", "patch": "@@ -18,7 +18,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:30\n           StorageLive(_3);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           StorageLive(_4);                 // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n+          _9 = const _;                    // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:6:6: 6:19\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "1dabb0ae3eea930bc211f2817f03ca7de35487ed", "filename": "src/test/mir-opt/dataflow-const-prop/promoted.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fpromoted.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fpromoted.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fpromoted.main.DataflowConstProp.diff?ref=f99950f6aeb78bd271af3f99cbad03613f7b93f7", "patch": "@@ -14,7 +14,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/promoted.rs:+2:9: +2:10\n           StorageLive(_2);                 // scope 0 at $DIR/promoted.rs:+2:14: +2:17\n-          _4 = const main::promoted[0];    // scope 0 at $DIR/promoted.rs:+2:14: +2:17\n+          _4 = const _;                    // scope 0 at $DIR/promoted.rs:+2:14: +2:17\n                                            // mir::Constant\n                                            // + span: $DIR/promoted.rs:6:14: 6:17\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }"}, {"sha": "c344de76b6a3278932386458646075e50e9f094d", "filename": "src/test/mir-opt/dataflow-const-prop/recursive.main.DataflowConstProp.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frecursive.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frecursive.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frecursive.main.DataflowConstProp.diff?ref=f99950f6aeb78bd271af3f99cbad03613f7b93f7", "patch": "@@ -3,35 +3,35 @@\n   \n   fn main() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/recursive.rs:+0:11: +0:11\n-      let _1: S;                           // in scope 0 at $DIR/recursive.rs:+2:9: +2:10\n-      let mut _3: &S;                      // in scope 0 at $DIR/recursive.rs:+3:20: +3:22\n-      let _4: &S;                          // in scope 0 at $DIR/recursive.rs:+3:20: +3:22\n-      let mut _6: &S;                      // in scope 0 at $DIR/recursive.rs:+4:20: +4:22\n-      let _7: &S;                          // in scope 0 at $DIR/recursive.rs:+4:20: +4:22\n+      let _1: S<'_>;                       // in scope 0 at $DIR/recursive.rs:+2:9: +2:10\n+      let mut _3: &S<'_>;                  // in scope 0 at $DIR/recursive.rs:+3:20: +3:22\n+      let _4: &S<'_>;                      // in scope 0 at $DIR/recursive.rs:+3:20: +3:22\n+      let mut _6: &S<'_>;                  // in scope 0 at $DIR/recursive.rs:+4:20: +4:22\n+      let _7: &S<'_>;                      // in scope 0 at $DIR/recursive.rs:+4:20: +4:22\n       let mut _9: isize;                   // in scope 0 at $DIR/recursive.rs:+6:9: +6:18\n       let mut _11: isize;                  // in scope 0 at $DIR/recursive.rs:+7:13: +7:22\n       let mut _13: isize;                  // in scope 0 at $DIR/recursive.rs:+8:17: +8:28\n       let mut _15: !;                      // in scope 0 at $DIR/recursive.rs:+9:22: +9:43\n       let mut _16: !;                      // in scope 0 at $DIR/recursive.rs:+11:18: +11:39\n       let mut _17: !;                      // in scope 0 at $DIR/recursive.rs:+13:14: +13:35\n-      let mut _18: &S;                     // in scope 0 at $DIR/recursive.rs:+7:20: +7:21\n-      let mut _19: &S;                     // in scope 0 at $DIR/recursive.rs:+7:20: +7:21\n+      let mut _18: &S<'_>;                 // in scope 0 at $DIR/recursive.rs:+7:20: +7:21\n+      let mut _19: &S<'_>;                 // in scope 0 at $DIR/recursive.rs:+7:20: +7:21\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/recursive.rs:+2:9: +2:10\n-          let _2: S;                       // in scope 1 at $DIR/recursive.rs:+3:9: +3:10\n+          let _2: S<'_>;                   // in scope 1 at $DIR/recursive.rs:+3:9: +3:10\n           scope 2 {\n               debug b => _2;               // in scope 2 at $DIR/recursive.rs:+3:9: +3:10\n-              let _5: S;                   // in scope 2 at $DIR/recursive.rs:+4:9: +4:10\n+              let _5: S<'_>;               // in scope 2 at $DIR/recursive.rs:+4:9: +4:10\n               scope 3 {\n                   debug c => _5;           // in scope 3 at $DIR/recursive.rs:+4:9: +4:10\n                   let _8: u32;             // in scope 3 at $DIR/recursive.rs:+5:9: +5:10\n-                  let _10: &S;             // in scope 3 at $DIR/recursive.rs:+6:16: +6:17\n+                  let _10: &S<'_>;         // in scope 3 at $DIR/recursive.rs:+6:16: +6:17\n                   scope 4 {\n                       debug d => _8;       // in scope 4 at $DIR/recursive.rs:+5:9: +5:10\n                   }\n                   scope 5 {\n                       debug b => _10;      // in scope 5 at $DIR/recursive.rs:+6:16: +6:17\n-                      let _12: &&S;        // in scope 5 at $DIR/recursive.rs:+7:20: +7:21\n+                      let _12: &&S<'_>;    // in scope 5 at $DIR/recursive.rs:+7:20: +7:21\n                       scope 6 {\n                           debug a => _12;  // in scope 6 at $DIR/recursive.rs:+7:20: +7:21\n                           let _14: &u32;   // in scope 6 at $DIR/recursive.rs:+8:24: +8:27\n@@ -55,7 +55,7 @@\n           _4 = &_1;                        // scope 1 at $DIR/recursive.rs:+3:20: +3:22\n           _3 = &(*_4);                     // scope 1 at $DIR/recursive.rs:+3:20: +3:22\n           Deinit(_2);                      // scope 1 at $DIR/recursive.rs:+3:13: +3:23\n-          ((_2 as Rec).0: &S) = move _3;   // scope 1 at $DIR/recursive.rs:+3:13: +3:23\n+          ((_2 as Rec).0: &S<'_>) = move _3; // scope 1 at $DIR/recursive.rs:+3:13: +3:23\n           discriminant(_2) = 0;            // scope 1 at $DIR/recursive.rs:+3:13: +3:23\n           StorageDead(_3);                 // scope 1 at $DIR/recursive.rs:+3:22: +3:23\n           StorageDead(_4);                 // scope 1 at $DIR/recursive.rs:+3:23: +3:24\n@@ -65,7 +65,7 @@\n           _7 = &_2;                        // scope 2 at $DIR/recursive.rs:+4:20: +4:22\n           _6 = &(*_7);                     // scope 2 at $DIR/recursive.rs:+4:20: +4:22\n           Deinit(_5);                      // scope 2 at $DIR/recursive.rs:+4:13: +4:23\n-          ((_5 as Rec).0: &S) = move _6;   // scope 2 at $DIR/recursive.rs:+4:13: +4:23\n+          ((_5 as Rec).0: &S<'_>) = move _6; // scope 2 at $DIR/recursive.rs:+4:13: +4:23\n           discriminant(_5) = 0;            // scope 2 at $DIR/recursive.rs:+4:13: +4:23\n           StorageDead(_6);                 // scope 2 at $DIR/recursive.rs:+4:22: +4:23\n           StorageDead(_7);                 // scope 2 at $DIR/recursive.rs:+4:23: +4:24\n@@ -84,7 +84,7 @@\n   \n       bb2: {\n           StorageLive(_10);                // scope 3 at $DIR/recursive.rs:+6:16: +6:17\n-          _10 = ((_5 as Rec).0: &S);       // scope 3 at $DIR/recursive.rs:+6:16: +6:17\n+          _10 = ((_5 as Rec).0: &S<'_>);   // scope 3 at $DIR/recursive.rs:+6:16: +6:17\n           _11 = discriminant((*_10));      // scope 5 at $DIR/recursive.rs:+6:28: +6:29\n           switchInt(move _11) -> [0_isize: bb4, otherwise: bb3]; // scope 5 at $DIR/recursive.rs:+6:22: +6:29\n       }\n@@ -99,7 +99,7 @@\n   \n       bb4: {\n           StorageLive(_12);                // scope 5 at $DIR/recursive.rs:+7:20: +7:21\n-          _12 = &(((*_10) as Rec).0: &S);  // scope 5 at $DIR/recursive.rs:+7:20: +7:21\n+          _12 = &(((*_10) as Rec).0: &S<'_>); // scope 5 at $DIR/recursive.rs:+7:20: +7:21\n           _18 = deref_copy (*_12);         // scope 6 at $DIR/recursive.rs:+7:32: +7:33\n           _13 = discriminant((*_18));      // scope 6 at $DIR/recursive.rs:+7:32: +7:33\n           switchInt(move _13) -> [1_isize: bb6, otherwise: bb5]; // scope 6 at $DIR/recursive.rs:+7:26: +7:33"}, {"sha": "6d55092747a5a4478bae872e08ce028ceb4bb43c", "filename": "src/test/mir-opt/dataflow-const-prop/ref_mut.main.DataflowConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_mut.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f99950f6aeb78bd271af3f99cbad03613f7b93f7/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_mut.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Fref_mut.main.DataflowConstProp.diff?ref=f99950f6aeb78bd271af3f99cbad03613f7b93f7", "patch": "@@ -52,7 +52,7 @@\n           _6 = &mut _5;                    // scope 5 at $DIR/ref_mut.rs:+8:13: +8:19\n           StorageLive(_7);                 // scope 6 at $DIR/ref_mut.rs:+9:10: +9:12\n           StorageLive(_8);                 // scope 6 at $DIR/ref_mut.rs:+9:10: +9:12\n-          _11 = const main::promoted[0];   // scope 6 at $DIR/ref_mut.rs:+9:10: +9:12\n+          _11 = const _;                   // scope 6 at $DIR/ref_mut.rs:+9:10: +9:12\n                                            // mir::Constant\n                                            // + span: $DIR/ref_mut.rs:13:10: 13:12\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }"}]}