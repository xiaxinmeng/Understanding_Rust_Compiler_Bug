{"sha": "80917360d350fb55aebf383e7ff99efea41f63fd", "node_id": "C_kwDOAAsO6NoAKDgwOTE3MzYwZDM1MGZiNTVhZWJmMzgzZTdmZjk5ZWZlYTQxZjYzZmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-08T04:44:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-08T04:44:08Z"}, "message": "Auto merge of #112292 - thomcc:tls-ohno, r=m-ou-se\n\nAvoid unwind across `extern \"C\"` in `thread_local::fast_local`\n\nThis is a minimal fix for #112285, in case we want a simple patch that can be easily to backported if that's desirable.\n\n*(Note: I have another broader cleanup which I've mostly omitted from here to avoid clutter, except for the `Cell` change, which isn't needed to fix UB, but simplifies safety comments).*\n\nThe only tier-1 target that this occurs on in a way that seems likely to cause problems in practice linux-gnu, although I believe some folks care about that platform somewhat \ud83d\ude09. I'm unsure how big of an issue this is. I've seen stuff like this behave quite badly, but there's a number of reasons to think this might actually be \"fine in practice\".\n\nI've hedged my bets and assumed we'll backport this at least to beta but my feeling is that there's not enough evidence this is a problem worth backporting further than that.\n\n### More details\n\nThis issue seems to have existed since `thread_local!`'s `const` init functionality was added. It occurs if you have a `const`-initialized thread local for a type that `needs_drop`, the drop panics, and you're on a target with support for static thread locals. In this case, we will end up defining an `extern \"C\"` function in the user crate rather than in libstd, and because the user crate will not have `#![feature(c_unwind)]` enabled, their panic will not be caught by an auto-inserted abort guard.\n\nIn practice, the actual situation where problems are likely[^ub] is somewhat narrower.\n\nOn most targets with static thread locals, we manage the TLS dtor list by hand (for reentrancy reasons among others). In these cases, while the users code may panic, we're calling it inside our own `extern \"C\"` (or `extern \"system\"`) function, which seems to (at least in practice) catch the panic and convert it to an abort.\n\nHowever, on a few targets, most notably linux-gnu with recent glibc (but also fuchsia and redox), a tls dtor registration mechanism exists which we can actually use directly, [`__cxa_thread_atexit_impl`](https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/thread_local_dtor.rs#L26-L36).\n\nThis is the case that seems most likely to be a cause for concern, as now we're passing a function to the system library and panicking out of it in a case where there are may not be Rust frames above it on the call stack (since it's running thread shutdown), and even if there were, it may not be prepared to handle such unwinding. If that's the case, it'd be bad.\n\nIs it? Dunno. The fact that it's a `__cxa_*` function makes me think they probably have considered that the callback could throw but I have no evidence here and it doesn't seem to be written down anywhere, so it's just a guess. (I would not be surprised if someone comes into this thread to tell me how definitely-bad-news it is).\n\nThat said, as I said, all this is actually UB! If this isn't a \"technically UB but fine in practice\", but all bets are off if this is the kind of thing we are telling LLVM about.\n\n[^ub]: This is UB so take that with a grain of salt -- I'm absolutely making assumptions about how the UB will behave \"in practice\" here, which is almost certainly a mistake.", "tree": {"sha": "886278bbab19881998aaa6e945ffefc7f8050997", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/886278bbab19881998aaa6e945ffefc7f8050997"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80917360d350fb55aebf383e7ff99efea41f63fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80917360d350fb55aebf383e7ff99efea41f63fd", "html_url": "https://github.com/rust-lang/rust/commit/80917360d350fb55aebf383e7ff99efea41f63fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80917360d350fb55aebf383e7ff99efea41f63fd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50f2176721a08c0c5673db924a95c0544316682c", "url": "https://api.github.com/repos/rust-lang/rust/commits/50f2176721a08c0c5673db924a95c0544316682c", "html_url": "https://github.com/rust-lang/rust/commit/50f2176721a08c0c5673db924a95c0544316682c"}, {"sha": "70e1dc99672235ae34b6b3981bb0805f97c20179", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e1dc99672235ae34b6b3981bb0805f97c20179", "html_url": "https://github.com/rust-lang/rust/commit/70e1dc99672235ae34b6b3981bb0805f97c20179"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "bc5da1a189677c9955764e48693bbec8eeccf769", "filename": "library/std/src/sys/common/thread_local/fast_local.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/80917360d350fb55aebf383e7ff99efea41f63fd/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80917360d350fb55aebf383e7ff99efea41f63fd/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs?ref=80917360d350fb55aebf383e7ff99efea41f63fd", "patch": "@@ -33,28 +33,29 @@ pub macro thread_local_inner {\n             // 1 == dtor registered, dtor not run\n             // 2 == dtor registered and is running or has run\n             #[thread_local]\n-            static mut STATE: $crate::primitive::u8 = 0;\n+            static STATE: $crate::cell::Cell<$crate::primitive::u8> = $crate::cell::Cell::new(0);\n \n+            // Safety: Performs `drop_in_place(ptr as *mut $t)`, and requires\n+            // all that comes with it.\n             unsafe extern \"C\" fn destroy(ptr: *mut $crate::primitive::u8) {\n-                let ptr = ptr as *mut $t;\n-\n-                unsafe {\n-                    $crate::debug_assert_eq!(STATE, 1);\n-                    STATE = 2;\n-                    $crate::ptr::drop_in_place(ptr);\n-                }\n+                $crate::thread::local_impl::abort_on_dtor_unwind(|| {\n+                    let old_state = STATE.replace(2);\n+                    $crate::debug_assert_eq!(old_state, 1);\n+                    // Safety: safety requirement is passed on to caller.\n+                    unsafe { $crate::ptr::drop_in_place(ptr.cast::<$t>()); }\n+                });\n             }\n \n             unsafe {\n-                match STATE {\n+                match STATE.get() {\n                     // 0 == we haven't registered a destructor, so do\n                     //   so now.\n                     0 => {\n                         $crate::thread::local_impl::Key::<$t>::register_dtor(\n                             $crate::ptr::addr_of_mut!(VAL) as *mut $crate::primitive::u8,\n                             destroy,\n                         );\n-                        STATE = 1;\n+                        STATE.set(1);\n                         $crate::option::Option::Some(&VAL)\n                     }\n                     // 1 == the destructor is registered and the value\n@@ -148,7 +149,6 @@ impl<T> fmt::Debug for Key<T> {\n         f.debug_struct(\"Key\").finish_non_exhaustive()\n     }\n }\n-\n impl<T> Key<T> {\n     pub const fn new() -> Key<T> {\n         Key { inner: LazyKeyInner::new(), dtor_state: Cell::new(DtorState::Unregistered) }"}, {"sha": "975509bd412b072b0598cbac038d025216116a64", "filename": "library/std/src/sys/common/thread_local/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/80917360d350fb55aebf383e7ff99efea41f63fd/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80917360d350fb55aebf383e7ff99efea41f63fd/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs?ref=80917360d350fb55aebf383e7ff99efea41f63fd", "patch": "@@ -101,3 +101,24 @@ mod lazy {\n         }\n     }\n }\n+\n+/// Run a callback in a scenario which must not unwind (such as a `extern \"C\"\n+/// fn` declared in a user crate). If the callback unwinds anyway, then\n+/// `rtabort` with a message about thread local panicking on drop.\n+#[inline]\n+pub fn abort_on_dtor_unwind(f: impl FnOnce()) {\n+    // Using a guard like this is lower cost.\n+    let guard = DtorUnwindGuard;\n+    f();\n+    core::mem::forget(guard);\n+\n+    struct DtorUnwindGuard;\n+    impl Drop for DtorUnwindGuard {\n+        #[inline]\n+        fn drop(&mut self) {\n+            // This is not terribly descriptive, but it doesn't need to be as we'll\n+            // already have printed a panic message at this point.\n+            rtabort!(\"thread local panicked on drop\");\n+        }\n+    }\n+}"}, {"sha": "d9973185bc45ef7f3f6dd7dc173432463815b027", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80917360d350fb55aebf383e7ff99efea41f63fd/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80917360d350fb55aebf383e7ff99efea41f63fd/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=80917360d350fb55aebf383e7ff99efea41f63fd", "patch": "@@ -206,7 +206,7 @@ cfg_if::cfg_if! {\n         #[doc(hidden)]\n         #[unstable(feature = \"thread_local_internals\", issue = \"none\")]\n         pub mod local_impl {\n-            pub use crate::sys::common::thread_local::{thread_local_inner, Key};\n+            pub use crate::sys::common::thread_local::{thread_local_inner, Key, abort_on_dtor_unwind};\n         }\n     }\n }"}]}