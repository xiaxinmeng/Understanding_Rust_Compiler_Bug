{"sha": "19c17360d96820f581e29790dccfd916eebcabf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YzE3MzYwZDk2ODIwZjU4MWUyOTc5MGRjY2ZkOTE2ZWViY2FiZjI=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "nashenas88@users.noreply.github.com", "date": "2017-11-10T05:07:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-22T08:51:54Z"}, "message": "Check rvalue aggregates during check_stmt in tycheck, add initial, (not passing) test", "tree": {"sha": "a739077c3d43e8d5cc716e5d3cd15c28141b91b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a739077c3d43e8d5cc716e5d3cd15c28141b91b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19c17360d96820f581e29790dccfd916eebcabf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19c17360d96820f581e29790dccfd916eebcabf2", "html_url": "https://github.com/rust-lang/rust/commit/19c17360d96820f581e29790dccfd916eebcabf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19c17360d96820f581e29790dccfd916eebcabf2/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fecccbd2e9760cdc082b5030ebf82911b7e3632", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fecccbd2e9760cdc082b5030ebf82911b7e3632", "html_url": "https://github.com/rust-lang/rust/commit/4fecccbd2e9760cdc082b5030ebf82911b7e3632"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "7a801d887fbb016d641c671a3427e38a7266709e", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/19c17360d96820f581e29790dccfd916eebcabf2/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c17360d96820f581e29790dccfd916eebcabf2/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=19c17360d96820f581e29790dccfd916eebcabf2", "patch": "@@ -549,6 +549,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         terr\n                     );\n                 }\n+                self.check_rvalue(mir, rv, location);\n             }\n             StatementKind::SetDiscriminant {\n                 ref lvalue,\n@@ -1011,6 +1012,91 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn aggregate_field_ty(&mut self, ak: &Box<AggregateKind<'tcx>>, field: usize, location: Location)\n+        -> Result<Ty<'tcx>, FieldAccessError>\n+    {\n+        let tcx = self.tcx();\n+\n+        let (variant, substs) = match **ak {\n+            AggregateKind::Adt(def, variant, substs, _) => { // handle unions?\n+                (&def.variants[variant], substs)\n+            },\n+            AggregateKind::Closure(def_id, substs) => {\n+                return match substs.upvar_tys(def_id, tcx).nth(field) {\n+                    Some(ty) => Ok(ty),\n+                    None => Err(FieldAccessError::OutOfRange {\n+                        field_count: substs.upvar_tys(def_id, tcx).count()\n+                    }),\n+                }\n+            },\n+            AggregateKind::Generator(def_id, substs, _) => {\n+                if let Some(ty) = substs.upvar_tys(def_id, tcx).nth(field) {\n+                    return Ok(ty);\n+                }\n+\n+                return match substs.field_tys(def_id, tcx).nth(field) {\n+                    Some(ty) => Ok(ty),\n+                    None => Err(FieldAccessError::OutOfRange {\n+                        field_count: substs.field_tys(def_id, tcx).count() + 1\n+                    }),\n+                }\n+            },\n+            AggregateKind::Array(ty) => {\n+                return Ok(ty);\n+            },\n+            AggregateKind::Tuple => {\n+                unreachable!(\"This should have been covered in check_rvalues\");\n+            },\n+        };\n+\n+        if let Some(field) = variant.fields.get(field) {\n+            Ok(self.normalize(&field.ty(tcx, substs), location))\n+        } else {\n+            Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })\n+        }\n+    }\n+\n+    #[allow(dead_code)]\n+    fn check_rvalue(&mut self, mir: &Mir<'tcx>, rv: &Rvalue<'tcx>, location: Location) {\n+        let tcx = self.tcx();\n+        match rv {\n+            Rvalue::Aggregate(ref ak, ref ops) => {\n+                match **ak {\n+                    // tuple rvalue field type is always the type of the op. Nothing to check here.\n+                    AggregateKind::Tuple => { },\n+                    _ => {\n+                        for (i, op) in ops.iter().enumerate() {\n+                            let field_ty = if let Ok(field_ty) = self.aggregate_field_ty(ak, i, location) {\n+                                field_ty\n+                            } else {\n+                                // TODO(nashenas88) log span_mirbug terr??\n+                                continue;\n+                            };\n+                            let op_ty = match op {\n+                                Operand::Consume(lv) => lv.ty(mir, tcx).to_ty(tcx),\n+                                Operand::Constant(c) => c.ty,\n+                            };\n+                            if let Err(_terr) = self.sub_types(op_ty, field_ty, location.at_successor_within_block()) {\n+                                // TODO(nashenas88) log span_mirbug terr??\n+                            }\n+                        }\n+                    },\n+                }\n+            },\n+            // FIXME: These other cases have to be implemented in future PRs\n+            Rvalue::Use(..) |\n+            Rvalue::Repeat(..) |\n+            Rvalue::Ref(..) |\n+            Rvalue::Len(..) |\n+            Rvalue::Cast(..) |\n+            Rvalue::BinaryOp(..) |\n+            Rvalue::CheckedBinaryOp(..) |\n+            Rvalue::UnaryOp(..) |\n+            Rvalue::Discriminant(..) |\n+            Rvalue::NullaryOp(..) => { }\n+        }\n+    }\n+\n     fn typeck_mir(&mut self, mir: &Mir<'tcx>) {\n         self.last_span = mir.span;\n         debug!(\"run_on_mir: {:?}\", mir.span);"}, {"sha": "693d7f9821adb4e0b614e5374625200e8de5e27b", "filename": "src/test/compile-fail/aggregate-rvalues-typeck.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/19c17360d96820f581e29790dccfd916eebcabf2/src%2Ftest%2Fcompile-fail%2Faggregate-rvalues-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c17360d96820f581e29790dccfd916eebcabf2/src%2Ftest%2Fcompile-fail%2Faggregate-rvalues-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faggregate-rvalues-typeck.rs?ref=19c17360d96820f581e29790dccfd916eebcabf2", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//compile-flags: -Z emit-end-regions -Z borrowck-mir -Z mir\n+\n+#![allow(unused_assignments)]\n+\n+struct Wrap<'a> { w: &'a mut u32 }\n+\n+fn foo() {\n+    let mut x = 22u64;\n+    let wrapper = Wrap { w: &mut x };\n+    x += 1;  //~ ERROR cannot assign to `x`\n+    *wrapper.w += 1;\n+}\n+\n+fn main() { }\n\\ No newline at end of file"}]}