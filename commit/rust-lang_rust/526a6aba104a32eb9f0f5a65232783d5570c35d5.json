{"sha": "526a6aba104a32eb9f0f5a65232783d5570c35d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNmE2YWJhMTA0YTMyZWI5ZjBmNWE2NTIzMjc4M2Q1NTcwYzM1ZDU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-20T14:02:36Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-20T14:02:36Z"}, "message": "Merge #1174\n\n1174: improve cargo watch r=matklad a=vemoo\n\n- Add start and stop commands\r\n- Cleanup trypescript code to avoid definite assignment assertions (`!` after possibly undefined value)\r\n- Recover `rustc-watch` problem matcher because it's still useful, can be used with any command, for example `cargo test`\n\nCo-authored-by: Bernardo <berublan@gmail.com>", "tree": {"sha": "f8f6687924cb15a2d759dae02205b7f28a5f83fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8f6687924cb15a2d759dae02205b7f28a5f83fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/526a6aba104a32eb9f0f5a65232783d5570c35d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/526a6aba104a32eb9f0f5a65232783d5570c35d5", "html_url": "https://github.com/rust-lang/rust/commit/526a6aba104a32eb9f0f5a65232783d5570c35d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/526a6aba104a32eb9f0f5a65232783d5570c35d5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "0d39b1c3fa03a8032ea96be922fd62710f811aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d39b1c3fa03a8032ea96be922fd62710f811aba", "html_url": "https://github.com/rust-lang/rust/commit/0d39b1c3fa03a8032ea96be922fd62710f811aba"}, {"sha": "4cd0a96c96870d4e9a73b92f401a8fad26f3c02a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cd0a96c96870d4e9a73b92f401a8fad26f3c02a", "html_url": "https://github.com/rust-lang/rust/commit/4cd0a96c96870d4e9a73b92f401a8fad26f3c02a"}], "stats": {"total": 192, "additions": 137, "deletions": 55}, "files": [{"sha": "cffbb4c7f18ba0ce1df6af2dab85a98046527578", "filename": "docs/user/features.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/526a6aba104a32eb9f0f5a65232783d5570c35d5/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/526a6aba104a32eb9f0f5a65232783d5570c35d5/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=526a6aba104a32eb9f0f5a65232783d5570c35d5", "patch": "@@ -76,6 +76,14 @@ Shows internal statistic about memory usage of rust-analyzer\n \n Manually triggers GC\n \n+#### Start Cargo Watch\n+\n+Start `cargo watch` for live error highlighting. Will prompt to install if it's not already installed.\n+\n+#### Stop Cargo Watch\n+\n+Stop `cargo watch`\n+\n ### Code Actions (Assists)\n \n These are triggered in a particular context via light bulb. We use custom code on"}, {"sha": "83ceb19f73fa3cbd13086ca2ad88c46b0bc4fc61", "filename": "editors/code/package.json", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/526a6aba104a32eb9f0f5a65232783d5570c35d5/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/526a6aba104a32eb9f0f5a65232783d5570c35d5/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=526a6aba104a32eb9f0f5a65232783d5570c35d5", "patch": "@@ -119,6 +119,16 @@\n                 \"command\": \"rust-analyzer.reload\",\n                 \"title\": \"Restart server\",\n                 \"category\": \"Rust Analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.startCargoWatch\",\n+                \"title\": \"Start Cargo Watch\",\n+                \"category\": \"Rust Analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.stopCargoWatch\",\n+                \"title\": \"Stop Cargo Watch\",\n+                \"category\": \"Rust Analyzer\"\n             }\n         ],\n         \"keybindings\": [\n@@ -250,6 +260,18 @@\n                     \"${workspaceRoot}\"\n                 ],\n                 \"pattern\": \"$rustc\"\n+            },\n+            {\n+                \"name\": \"rustc-watch\",\n+                \"fileLocation\": [\n+                    \"relative\",\n+                    \"${workspaceRoot}\"\n+                ],\n+                \"background\": {\n+                    \"beginsPattern\": \"^\\\\[Running\\\\b\",\n+                    \"endsPattern\": \"^\\\\[Finished running\\\\b\"\n+                },\n+                \"pattern\": \"$rustc\"\n             }\n         ]\n     }"}, {"sha": "1d939e28cc8a5ac1d89bd0c2241ee71928147474", "filename": "editors/code/src/commands/cargo_watch.ts", "status": "modified", "additions": 58, "deletions": 44, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/526a6aba104a32eb9f0f5a65232783d5570c35d5/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "raw_url": "https://github.com/rust-lang/rust/raw/526a6aba104a32eb9f0f5a65232783d5570c35d5/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts?ref=526a6aba104a32eb9f0f5a65232783d5570c35d5", "patch": "@@ -7,44 +7,55 @@ import { terminate } from '../utils/processes';\n import { LineBuffer } from './line_buffer';\n import { StatusDisplay } from './watch_status';\n \n-export class CargoWatchProvider {\n-    private diagnosticCollection?: vscode.DiagnosticCollection;\n-    private cargoProcess?: child_process.ChildProcess;\n-    private outBuffer: string = '';\n-    private statusDisplay?: StatusDisplay;\n-    private outputChannel?: vscode.OutputChannel;\n-\n-    public activate(subscriptions: vscode.Disposable[]) {\n-        let cargoExists = false;\n-        const cargoTomlFile = path.join(\n-            vscode.workspace.rootPath!,\n-            'Cargo.toml'\n+export function registerCargoWatchProvider(\n+    subscriptions: vscode.Disposable[]\n+): CargoWatchProvider | undefined {\n+    let cargoExists = false;\n+    const cargoTomlFile = path.join(vscode.workspace.rootPath!, 'Cargo.toml');\n+    // Check if the working directory is valid cargo root path\n+    try {\n+        if (fs.existsSync(cargoTomlFile)) {\n+            cargoExists = true;\n+        }\n+    } catch (err) {\n+        cargoExists = false;\n+    }\n+\n+    if (!cargoExists) {\n+        vscode.window.showErrorMessage(\n+            `Couldn\\'t find \\'Cargo.toml\\' in ${cargoTomlFile}`\n         );\n-        // Check if the working directory is valid cargo root path\n-        try {\n-            if (fs.existsSync(cargoTomlFile)) {\n-                cargoExists = true;\n-            }\n-        } catch (err) {\n-            cargoExists = false;\n-        }\n+        return;\n+    }\n \n-        if (!cargoExists) {\n-            vscode.window.showErrorMessage(\n-                `Couldn\\'t find \\'Cargo.toml\\' in ${cargoTomlFile}`\n-            );\n-            return;\n-        }\n+    const provider = new CargoWatchProvider();\n+    subscriptions.push(provider);\n+    return provider;\n+}\n \n-        subscriptions.push(this);\n+export class CargoWatchProvider implements vscode.Disposable {\n+    private readonly diagnosticCollection: vscode.DiagnosticCollection;\n+    private readonly statusDisplay: StatusDisplay;\n+    private readonly outputChannel: vscode.OutputChannel;\n+    private cargoProcess?: child_process.ChildProcess;\n+\n+    constructor() {\n         this.diagnosticCollection = vscode.languages.createDiagnosticCollection(\n             'rustc'\n         );\n-\n-        this.statusDisplay = new StatusDisplay(subscriptions);\n+        this.statusDisplay = new StatusDisplay();\n         this.outputChannel = vscode.window.createOutputChannel(\n             'Cargo Watch Trace'\n         );\n+    }\n+\n+    public start() {\n+        if (this.cargoProcess) {\n+            vscode.window.showInformationMessage(\n+                'Cargo Watch is already running'\n+            );\n+            return;\n+        }\n \n         let args = 'check --message-format json';\n         if (Server.config.cargoWatchOptions.checkArguments.length > 0) {\n@@ -95,25 +106,28 @@ export class CargoWatchProvider {\n         this.logInfo('cargo-watch started.');\n     }\n \n-    public dispose(): void {\n-        if (this.diagnosticCollection) {\n-            this.diagnosticCollection.clear();\n-            this.diagnosticCollection.dispose();\n-        }\n-\n+    public stop() {\n         if (this.cargoProcess) {\n             this.cargoProcess.kill();\n             terminate(this.cargoProcess);\n+            this.cargoProcess = undefined;\n+        } else {\n+            vscode.window.showInformationMessage('Cargo Watch is not running');\n         }\n+    }\n \n-        if (this.outputChannel) {\n-            this.outputChannel.dispose();\n-        }\n+    public dispose(): void {\n+        this.stop();\n+\n+        this.diagnosticCollection.clear();\n+        this.diagnosticCollection.dispose();\n+        this.outputChannel.dispose();\n+        this.statusDisplay.dispose();\n     }\n \n     private logInfo(line: string) {\n         if (Server.config.cargoWatchOptions.trace === 'verbose') {\n-            this.outputChannel!.append(line);\n+            this.outputChannel.append(line);\n         }\n     }\n \n@@ -122,18 +136,18 @@ export class CargoWatchProvider {\n             Server.config.cargoWatchOptions.trace === 'error' ||\n             Server.config.cargoWatchOptions.trace === 'verbose'\n         ) {\n-            this.outputChannel!.append(line);\n+            this.outputChannel.append(line);\n         }\n     }\n \n     private parseLine(line: string) {\n         if (line.startsWith('[Running')) {\n-            this.diagnosticCollection!.clear();\n-            this.statusDisplay!.show();\n+            this.diagnosticCollection.clear();\n+            this.statusDisplay.show();\n         }\n \n         if (line.startsWith('[Finished running')) {\n-            this.statusDisplay!.hide();\n+            this.statusDisplay.hide();\n         }\n \n         function getLevel(s: string): vscode.DiagnosticSeverity {\n@@ -193,7 +207,7 @@ export class CargoWatchProvider {\n \n             // The format of the package_id is \"{name} {version} ({source_id})\",\n             // https://github.com/rust-lang/cargo/blob/37ad03f86e895bb80b474c1c088322634f4725f5/src/cargo/core/package_id.rs#L53\n-            this.statusDisplay!.packageName = msg.package_id.split(' ')[0];\n+            this.statusDisplay.packageName = msg.package_id.split(' ')[0];\n         } else if (data.reason === 'compiler-message') {\n             const msg = data.message as RustDiagnostic;\n "}, {"sha": "26372c1e8b0817b5e76af10a34d34edace5078be", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/526a6aba104a32eb9f0f5a65232783d5570c35d5/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/526a6aba104a32eb9f0f5a65232783d5570c35d5/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=526a6aba104a32eb9f0f5a65232783d5570c35d5", "patch": "@@ -5,7 +5,7 @@ import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import { Server } from '../server';\n-import { CargoWatchProvider } from './cargo_watch';\n+import { CargoWatchProvider, registerCargoWatchProvider } from './cargo_watch';\n \n interface RunnablesParams {\n     textDocument: lc.TextDocumentIdentifier;\n@@ -137,7 +137,7 @@ export async function handleSingle(runnable: Runnable) {\n  */\n export async function interactivelyStartCargoWatch(\n     context: vscode.ExtensionContext\n-) {\n+): Promise<CargoWatchProvider | undefined> {\n     if (Server.config.cargoWatchOptions.enableOnStartup === 'disabled') {\n         return;\n     }\n@@ -153,6 +153,12 @@ export async function interactivelyStartCargoWatch(\n         }\n     }\n \n+    return startCargoWatch(context);\n+}\n+\n+export async function startCargoWatch(\n+    context: vscode.ExtensionContext\n+): Promise<CargoWatchProvider | undefined> {\n     const execPromise = util.promisify(child_process.exec);\n \n     const { stderr } = await execPromise('cargo watch --version').catch(e => e);\n@@ -197,6 +203,9 @@ export async function interactivelyStartCargoWatch(\n         }\n     }\n \n-    const validater = new CargoWatchProvider();\n-    validater.activate(context.subscriptions);\n+    const provider = await registerCargoWatchProvider(context.subscriptions);\n+    if (provider) {\n+        provider.start();\n+    }\n+    return provider;\n }"}, {"sha": "a3b0178f20a6e4f32cf8f1a60e1367bdf1f34a6a", "filename": "editors/code/src/commands/watch_status.ts", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/526a6aba104a32eb9f0f5a65232783d5570c35d5/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/526a6aba104a32eb9f0f5a65232783d5570c35d5/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts?ref=526a6aba104a32eb9f0f5a65232783d5570c35d5", "patch": "@@ -2,19 +2,18 @@ import * as vscode from 'vscode';\n \n const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\u2807', '\u280f'];\n \n-export class StatusDisplay {\n+export class StatusDisplay implements vscode.Disposable {\n     public packageName?: string;\n \n     private i = 0;\n     private statusBarItem: vscode.StatusBarItem;\n     private timer?: NodeJS.Timeout;\n \n-    constructor(subscriptions: vscode.Disposable[]) {\n+    constructor() {\n         this.statusBarItem = vscode.window.createStatusBarItem(\n             vscode.StatusBarAlignment.Left,\n             10\n         );\n-        subscriptions.push(this.statusBarItem);\n         this.statusBarItem.hide();\n     }\n \n@@ -33,7 +32,7 @@ export class StatusDisplay {\n                 }\n             }, 300);\n \n-        this.statusBarItem!.show();\n+        this.statusBarItem.show();\n     }\n \n     public hide() {\n@@ -42,7 +41,16 @@ export class StatusDisplay {\n             this.timer = undefined;\n         }\n \n-        this.statusBarItem!.hide();\n+        this.statusBarItem.hide();\n+    }\n+\n+    public dispose() {\n+        if (this.timer) {\n+            clearInterval(this.timer);\n+            this.timer = undefined;\n+        }\n+\n+        this.statusBarItem.dispose();\n     }\n \n     private frame() {"}, {"sha": "48dd2a614669c2cab35bd09380563270dad1691d", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/526a6aba104a32eb9f0f5a65232783d5570c35d5/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/526a6aba104a32eb9f0f5a65232783d5570c35d5/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=526a6aba104a32eb9f0f5a65232783d5570c35d5", "patch": "@@ -2,7 +2,11 @@ import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import * as commands from './commands';\n-import { interactivelyStartCargoWatch } from './commands/runnables';\n+import { CargoWatchProvider } from './commands/cargo_watch';\n+import {\n+    interactivelyStartCargoWatch,\n+    startCargoWatch\n+} from './commands/runnables';\n import { SyntaxTreeContentProvider } from './commands/syntaxTree';\n import * as events from './events';\n import * as notifications from './notifications';\n@@ -126,7 +130,24 @@ export function activate(context: vscode.ExtensionContext) {\n     vscode.commands.registerCommand('rust-analyzer.reload', reloadCommand);\n \n     // Executing `cargo watch` provides us with inline diagnostics on save\n-    interactivelyStartCargoWatch(context);\n+    let provider: CargoWatchProvider | undefined;\n+    interactivelyStartCargoWatch(context).then(p => {\n+        provider = p;\n+    });\n+    registerCommand('rust-analyzer.startCargoWatch', () => {\n+        if (provider) {\n+            provider.start();\n+        } else {\n+            startCargoWatch(context).then(p => {\n+                provider = p;\n+            });\n+        }\n+    });\n+    registerCommand('rust-analyzer.stopCargoWatch', () => {\n+        if (provider) {\n+            provider.stop();\n+        }\n+    });\n \n     // Start the language server, finally!\n     startServer();"}]}