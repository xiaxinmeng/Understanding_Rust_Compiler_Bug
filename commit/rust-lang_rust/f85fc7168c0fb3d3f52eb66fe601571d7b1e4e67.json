{"sha": "f85fc7168c0fb3d3f52eb66fe601571d7b1e4e67", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NWZjNzE2OGMwZmIzZDNmNTJlYjY2ZmU2MDE1NzFkN2IxZTRlNjc=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-08-05T22:41:16Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-08-05T22:41:16Z"}, "message": "PlaceRef's base is already a reference", "tree": {"sha": "be5c7ed26e60b46ff8fb44e58b7458915bdd406b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be5c7ed26e60b46ff8fb44e58b7458915bdd406b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f85fc7168c0fb3d3f52eb66fe601571d7b1e4e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f85fc7168c0fb3d3f52eb66fe601571d7b1e4e67", "html_url": "https://github.com/rust-lang/rust/commit/f85fc7168c0fb3d3f52eb66fe601571d7b1e4e67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f85fc7168c0fb3d3f52eb66fe601571d7b1e4e67/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6ecdc2f61b96de199be956cad853a7c02bcfb58", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6ecdc2f61b96de199be956cad853a7c02bcfb58", "html_url": "https://github.com/rust-lang/rust/commit/f6ecdc2f61b96de199be956cad853a7c02bcfb58"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "99899aa390c4a05c6cc0932d13b0aaf0c24137f0", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f85fc7168c0fb3d3f52eb66fe601571d7b1e4e67/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f85fc7168c0fb3d3f52eb66fe601571d7b1e4e67/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=f85fc7168c0fb3d3f52eb66fe601571d7b1e4e67", "patch": "@@ -177,7 +177,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 buf.push_str(&self.infcx.tcx.item_name(*def_id).to_string());\n             }\n             PlaceRef {\n-                ref base,\n+                base,\n                 projection: Some(ref proj),\n             } => {\n                 match proj.elem {\n@@ -197,7 +197,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 // FIXME turn this recursion into iteration\n                                 self.append_place_to_string(\n                                     PlaceRef {\n-                                        base: &base,\n+                                        base,\n                                         projection: &proj.base,\n                                     },\n                                     buf,\n@@ -210,7 +210,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                         if self.body.local_decls[*local].is_ref_for_guard() {\n                                             self.append_place_to_string(\n                                                 PlaceRef {\n-                                                    base: &base,\n+                                                    base,\n                                                     projection: &proj.base,\n                                                 },\n                                                 buf,\n@@ -222,7 +222,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                             buf.push_str(&\"*\");\n                                             self.append_place_to_string(\n                                                 PlaceRef {\n-                                                    base: &base,\n+                                                    base,\n                                                     projection: &proj.base,\n                                                 },\n                                                 buf,\n@@ -236,7 +236,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                         buf.push_str(&\"*\");\n                                         self.append_place_to_string(\n                                             PlaceRef {\n-                                                base: &base,\n+                                                base,\n                                                 projection: &proj.base,\n                                             },\n                                             buf,\n@@ -251,7 +251,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     ProjectionElem::Downcast(..) => {\n                         self.append_place_to_string(\n                             PlaceRef {\n-                                base: &base,\n+                                base,\n                                 projection: &proj.base,\n                             },\n                             buf,\n@@ -273,12 +273,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             buf.push_str(&name);\n                         } else {\n                             let field_name = self.describe_field(PlaceRef {\n-                                base: base,\n+                                base,\n                                 projection: &proj.base,\n                             }, field);\n                             self.append_place_to_string(\n                                 PlaceRef {\n-                                    base: &base,\n+                                    base,\n                                     projection: &proj.base,\n                                 },\n                                 buf,\n@@ -293,7 +293,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                         self.append_place_to_string(\n                             PlaceRef {\n-                                base: &base,\n+                                base,\n                                 projection: &proj.base,\n                             },\n                             buf,\n@@ -313,7 +313,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         // to avoid confusing the end-user\n                         self.append_place_to_string(\n                             PlaceRef {\n-                                base: &base,\n+                                base,\n                                 projection: &proj.base,\n                             },\n                             buf,"}]}