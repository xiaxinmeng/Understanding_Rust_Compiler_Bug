{"sha": "3019a341f328f1c5e4a671df2b61171ae925b034", "node_id": "C_kwDOAAsO6NoAKDMwMTlhMzQxZjMyOGYxYzVlNGE2NzFkZjJiNjExNzFhZTkyNWIwMzQ", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-15T15:50:28Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-29T06:55:25Z"}, "message": "Use #[inline] on Windows for thread local access", "tree": {"sha": "abf84368801926868aa945a8360d7c53157c59f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abf84368801926868aa945a8360d7c53157c59f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3019a341f328f1c5e4a671df2b61171ae925b034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3019a341f328f1c5e4a671df2b61171ae925b034", "html_url": "https://github.com/rust-lang/rust/commit/3019a341f328f1c5e4a671df2b61171ae925b034", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3019a341f328f1c5e4a671df2b61171ae925b034/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d89c6a2d44b78d052280d7faecfcb79e6f3d4a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d89c6a2d44b78d052280d7faecfcb79e6f3d4a1", "html_url": "https://github.com/rust-lang/rust/commit/0d89c6a2d44b78d052280d7faecfcb79e6f3d4a1"}], "stats": {"total": 52, "additions": 4, "deletions": 48}, "files": [{"sha": "e229eb16aa139a5d9070b88ae16b509f996afece", "filename": "library/std/src/sys/common/thread_local/fast_local.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3019a341f328f1c5e4a671df2b61171ae925b034/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3019a341f328f1c5e4a671df2b61171ae925b034/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Ffast_local.rs?ref=3019a341f328f1c5e4a671df2b61171ae925b034", "patch": "@@ -10,7 +10,7 @@\n macro_rules! __thread_local_inner {\n     // used to generate the `LocalKey` value for const-initialized thread locals\n     (@key $t:ty, const $init:expr) => {{\n-        #[cfg_attr(not(windows), inline)] // see comments below\n+        #[cfg_attr(not(bootstrap), inline)]\n         #[deny(unsafe_op_in_unsafe_fn)]\n         unsafe fn __getit(\n             _init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n@@ -77,29 +77,7 @@ macro_rules! __thread_local_inner {\n             #[inline]\n             fn __init() -> $t { $init }\n \n-            // When reading this function you might ask \"why is this inlined\n-            // everywhere other than Windows?\", and that's a very reasonable\n-            // question to ask. The short story is that it segfaults rustc if\n-            // this function is inlined. The longer story is that Windows looks\n-            // to not support `extern` references to thread locals across DLL\n-            // boundaries. This appears to at least not be supported in the ABI\n-            // that LLVM implements.\n-            //\n-            // Because of this we never inline on Windows, but we do inline on\n-            // other platforms (where external references to thread locals\n-            // across DLLs are supported). A better fix for this would be to\n-            // inline this function on Windows, but only for \"statically linked\"\n-            // components. For example if two separately compiled rlibs end up\n-            // getting linked into a DLL then it's fine to inline this function\n-            // across that boundary. It's only not fine to inline this function\n-            // across a DLL boundary. Unfortunately rustc doesn't currently\n-            // have this sort of logic available in an attribute, and it's not\n-            // clear that rustc is even equipped to answer this (it's more of a\n-            // Cargo question kinda). This means that, unfortunately, Windows\n-            // gets the pessimistic path for now where it's never inlined.\n-            //\n-            // The issue of \"should enable on Windows sometimes\" is #84933\n-            #[cfg_attr(not(windows), inline)]\n+            #[cfg_attr(not(bootstrap), inline)]\n             unsafe fn __getit(\n                 init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n             ) -> $crate::option::Option<&'static $t> {"}, {"sha": "ce74ad3486e1029226e2ca39b20d2c44c20729e6", "filename": "library/std/src/sys/common/thread_local/os_local.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3019a341f328f1c5e4a671df2b61171ae925b034/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3019a341f328f1c5e4a671df2b61171ae925b034/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs?ref=3019a341f328f1c5e4a671df2b61171ae925b034", "patch": "@@ -10,7 +10,7 @@\n macro_rules! __thread_local_inner {\n     // used to generate the `LocalKey` value for const-initialized thread locals\n     (@key $t:ty, const $init:expr) => {{\n-        #[cfg_attr(not(windows), inline)] // see comments below\n+        #[cfg_attr(not(bootstrap), inline)]\n         #[deny(unsafe_op_in_unsafe_fn)]\n         unsafe fn __getit(\n             _init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n@@ -49,29 +49,7 @@ macro_rules! __thread_local_inner {\n             #[inline]\n             fn __init() -> $t { $init }\n \n-            // When reading this function you might ask \"why is this inlined\n-            // everywhere other than Windows?\", and that's a very reasonable\n-            // question to ask. The short story is that it segfaults rustc if\n-            // this function is inlined. The longer story is that Windows looks\n-            // to not support `extern` references to thread locals across DLL\n-            // boundaries. This appears to at least not be supported in the ABI\n-            // that LLVM implements.\n-            //\n-            // Because of this we never inline on Windows, but we do inline on\n-            // other platforms (where external references to thread locals\n-            // across DLLs are supported). A better fix for this would be to\n-            // inline this function on Windows, but only for \"statically linked\"\n-            // components. For example if two separately compiled rlibs end up\n-            // getting linked into a DLL then it's fine to inline this function\n-            // across that boundary. It's only not fine to inline this function\n-            // across a DLL boundary. Unfortunately rustc doesn't currently\n-            // have this sort of logic available in an attribute, and it's not\n-            // clear that rustc is even equipped to answer this (it's more of a\n-            // Cargo question kinda). This means that, unfortunately, Windows\n-            // gets the pessimistic path for now where it's never inlined.\n-            //\n-            // The issue of \"should enable on Windows sometimes\" is #84933\n-            #[cfg_attr(not(windows), inline)]\n+            #[cfg_attr(not(bootstrap), inline)]\n             unsafe fn __getit(\n                 init: $crate::option::Option<&mut $crate::option::Option<$t>>,\n             ) -> $crate::option::Option<&'static $t> {"}]}