{"sha": "62523024d3c653c62ff98e173e091578ff58f7ef", "node_id": "C_kwDOAAsO6NoAKDYyNTIzMDI0ZDNjNjUzYzYyZmY5OGUxNzNlMDkxNTc4ZmY1OGY3ZWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-06T14:24:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-06T14:24:51Z"}, "message": "Auto merge of #14091 - Veykril:workspace-sysroot, r=Veykril\n\nSupport sysroot library source being defined inside the workspace\n\nWith this you can now specify `cargo.sysrootSrc`. This is required for the rust workspace such that the `library` folder inside the workspace can be used as the sysroot library sources. We now also recognize if these sources are inside the workspace, tagging the as workspace members.\n\nThis does duplicate the sysroot crates still, but I don't think that causes too many problems.", "tree": {"sha": "510269e8cd6203c1afa0b86fa6154f5f1ca818c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/510269e8cd6203c1afa0b86fa6154f5f1ca818c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62523024d3c653c62ff98e173e091578ff58f7ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62523024d3c653c62ff98e173e091578ff58f7ef", "html_url": "https://github.com/rust-lang/rust/commit/62523024d3c653c62ff98e173e091578ff58f7ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62523024d3c653c62ff98e173e091578ff58f7ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9d0bfc799630309bc1370037ae91deaacee53e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9d0bfc799630309bc1370037ae91deaacee53e0", "html_url": "https://github.com/rust-lang/rust/commit/e9d0bfc799630309bc1370037ae91deaacee53e0"}, {"sha": "cb9a5b9549cb5bb7f8f946643555398ae180937b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb9a5b9549cb5bb7f8f946643555398ae180937b", "html_url": "https://github.com/rust-lang/rust/commit/cb9a5b9549cb5bb7f8f946643555398ae180937b"}], "stats": {"total": 77, "additions": 68, "deletions": 9}, "files": [{"sha": "fdc7859eb90fb82b88ea2e8c5989b02e65f4960e", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/62523024d3c653c62ff98e173e091578ff58f7ef/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523024d3c653c62ff98e173e091578ff58f7ef/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=62523024d3c653c62ff98e173e091578ff58f7ef", "patch": "@@ -96,6 +96,7 @@ pub struct CargoConfig {\n     pub target: Option<String>,\n     /// Sysroot loading behavior\n     pub sysroot: Option<RustcSource>,\n+    pub sysroot_src: Option<AbsPathBuf>,\n     /// rustc private crate source\n     pub rustc_source: Option<RustcSource>,\n     /// crates to disable `#[cfg(test)]` on"}, {"sha": "328d2fbcf31f4aa77d934f8d1b80bda25d407d1b", "filename": "crates/project-model/src/sysroot.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/62523024d3c653c62ff98e173e091578ff58f7ef/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523024d3c653c62ff98e173e091578ff58f7ef/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fsysroot.rs?ref=62523024d3c653c62ff98e173e091578ff58f7ef", "patch": "@@ -76,6 +76,7 @@ impl Sysroot {\n     }\n }\n \n+// FIXME: Expose a builder api as loading the sysroot got way too modular and complicated.\n impl Sysroot {\n     /// Attempts to discover the toolchain's sysroot from the given `dir`.\n     pub fn discover(dir: &AbsPath, extra_env: &FxHashMap<String, String>) -> Result<Sysroot> {\n@@ -86,6 +87,16 @@ impl Sysroot {\n         Ok(Sysroot::load(sysroot_dir, sysroot_src_dir))\n     }\n \n+    pub fn discover_with_src_override(\n+        dir: &AbsPath,\n+        extra_env: &FxHashMap<String, String>,\n+        src: AbsPathBuf,\n+    ) -> Result<Sysroot> {\n+        tracing::debug!(\"discovering sysroot for {}\", dir.display());\n+        let sysroot_dir = discover_sysroot_dir(dir, extra_env)?;\n+        Ok(Sysroot::load(sysroot_dir, src))\n+    }\n+\n     pub fn discover_rustc(\n         cargo_toml: &ManifestPath,\n         extra_env: &FxHashMap<String, String>,"}, {"sha": "2a11f1e8eb820508246c3c13db03d082a741aabc", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/62523024d3c653c62ff98e173e091578ff58f7ef/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523024d3c653c62ff98e173e091578ff58f7ef/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=62523024d3c653c62ff98e173e091578ff58f7ef", "patch": "@@ -190,8 +190,8 @@ impl ProjectWorkspace {\n                 })?;\n                 let cargo = CargoWorkspace::new(meta);\n \n-                let sysroot = match &config.sysroot {\n-                    Some(RustcSource::Path(path)) => {\n+                let sysroot = match (&config.sysroot, &config.sysroot_src) {\n+                    (Some(RustcSource::Path(path)), None) => {\n                         match Sysroot::with_sysroot_dir(path.clone()) {\n                             Ok(it) => Some(it),\n                             Err(e) => {\n@@ -200,7 +200,7 @@ impl ProjectWorkspace {\n                             }\n                         }\n                     }\n-                    Some(RustcSource::Discover) => {\n+                    (Some(RustcSource::Discover), None) => {\n                         match Sysroot::discover(cargo_toml.parent(), &config.extra_env) {\n                             Ok(it) => Some(it),\n                             Err(e) => {\n@@ -213,8 +213,29 @@ impl ProjectWorkspace {\n                             }\n                         }\n                     }\n-                    None => None,\n+                    (Some(RustcSource::Path(sysroot)), Some(sysroot_src)) => {\n+                        Some(Sysroot::load(sysroot.clone(), sysroot_src.clone()))\n+                    }\n+                    (Some(RustcSource::Discover), Some(sysroot_src)) => {\n+                        match Sysroot::discover_with_src_override(\n+                            cargo_toml.parent(),\n+                            &config.extra_env,\n+                            sysroot_src.clone(),\n+                        ) {\n+                            Ok(it) => Some(it),\n+                            Err(e) => {\n+                                tracing::error!(\n+                                    %e,\n+                                    \"Failed to find sysroot for Cargo.toml file {}. Is rust-src installed?\",\n+                                    cargo_toml.display()\n+                                );\n+                                None\n+                            }\n+                        }\n+                    }\n+                    (None, _) => None,\n                 };\n+\n                 if let Some(sysroot) = &sysroot {\n                     tracing::info!(src_root = %sysroot.src_root().display(), root = %sysroot.root().display(), \"Using sysroot\");\n                 }\n@@ -440,9 +461,11 @@ impl ProjectWorkspace {\n     /// The return type contains the path and whether or not\n     /// the root is a member of the current workspace\n     pub fn to_roots(&self) -> Vec<PackageRoot> {\n-        let mk_sysroot = |sysroot: Option<&Sysroot>| {\n+        let mk_sysroot = |sysroot: Option<&Sysroot>, project_root: Option<&AbsPath>| {\n             sysroot.map(|sysroot| PackageRoot {\n-                is_local: false,\n+                // mark the sysroot as mutable if it is located inside of the project\n+                is_local: project_root\n+                    .map_or(false, |project_root| sysroot.src_root().starts_with(project_root)),\n                 include: vec![sysroot.src_root().to_path_buf()],\n                 exclude: Vec::new(),\n             })\n@@ -457,7 +480,7 @@ impl ProjectWorkspace {\n                 })\n                 .collect::<FxHashSet<_>>()\n                 .into_iter()\n-                .chain(mk_sysroot(sysroot.as_ref()))\n+                .chain(mk_sysroot(sysroot.as_ref(), Some(project.path())))\n                 .collect::<Vec<_>>(),\n             ProjectWorkspace::Cargo {\n                 cargo,\n@@ -507,7 +530,7 @@ impl ProjectWorkspace {\n                         }\n                         PackageRoot { is_local, include, exclude }\n                     })\n-                    .chain(mk_sysroot(sysroot.as_ref()))\n+                    .chain(mk_sysroot(sysroot.as_ref(), Some(cargo.workspace_root())))\n                     .chain(rustc.iter().flat_map(|rustc| {\n                         rustc.packages().map(move |krate| PackageRoot {\n                             is_local: false,\n@@ -524,7 +547,7 @@ impl ProjectWorkspace {\n                     include: vec![detached_file.clone()],\n                     exclude: Vec::new(),\n                 })\n-                .chain(mk_sysroot(sysroot.as_ref()))\n+                .chain(mk_sysroot(sysroot.as_ref(), None))\n                 .collect(),\n         }\n     }"}, {"sha": "c8075aefbbecaff1afb4a53578a66e40f13d8d2d", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62523024d3c653c62ff98e173e091578ff58f7ef/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62523024d3c653c62ff98e173e091578ff58f7ef/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=62523024d3c653c62ff98e173e091578ff58f7ef", "patch": "@@ -117,6 +117,11 @@ config_data! {\n         ///\n         /// This option does not take effect until rust-analyzer is restarted.\n         cargo_sysroot: Option<String>    = \"\\\"discover\\\"\",\n+        /// Relative path to the sysroot library sources. If left unset, this will default to\n+        /// `{cargo.sysroot}/lib/rustlib/src/rust/library`.\n+        ///\n+        /// This option does not take effect until rust-analyzer is restarted.\n+        cargo_sysrootSrc: Option<String>    = \"null\",\n         /// Compilation target override (target triple).\n         // FIXME(@poliorcetics): move to multiple targets here too, but this will need more work\n         // than `checkOnSave_target`\n@@ -1103,6 +1108,8 @@ impl Config {\n                 RustcSource::Path(self.root_path.join(sysroot))\n             }\n         });\n+        let sysroot_src =\n+            self.data.cargo_sysrootSrc.as_ref().map(|sysroot| self.root_path.join(sysroot));\n \n         CargoConfig {\n             features: match &self.data.cargo_features {\n@@ -1114,6 +1121,7 @@ impl Config {\n             },\n             target: self.data.cargo_target.clone(),\n             sysroot,\n+            sysroot_src,\n             rustc_source,\n             unset_test_crates: UnsetTestCrates::Only(self.data.cargo_unsetTest.clone()),\n             wrap_rustc_in_build_scripts: self.data.cargo_buildScripts_useRustcWrapper,"}, {"sha": "d5fdedfe3af4506a554e13c5aae1a3dea739d5c1", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62523024d3c653c62ff98e173e091578ff58f7ef/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/62523024d3c653c62ff98e173e091578ff58f7ef/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=62523024d3c653c62ff98e173e091578ff58f7ef", "patch": "@@ -97,6 +97,14 @@ Relative path to the sysroot, or \"discover\" to try to automatically find it via\n \n Unsetting this disables sysroot loading.\n \n+This option does not take effect until rust-analyzer is restarted.\n+--\n+[[rust-analyzer.cargo.sysrootSrc]]rust-analyzer.cargo.sysrootSrc (default: `null`)::\n++\n+--\n+Relative path to the sysroot library sources. If left unset, this will default to\n+`{cargo.sysroot}/lib/rustlib/src/rust/library`.\n+\n This option does not take effect until rust-analyzer is restarted.\n --\n [[rust-analyzer.cargo.target]]rust-analyzer.cargo.target (default: `null`)::"}, {"sha": "7160781b6f3eb1b875c104ed314b657970275ddd", "filename": "editors/code/package.json", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62523024d3c653c62ff98e173e091578ff58f7ef/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/62523024d3c653c62ff98e173e091578ff58f7ef/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=62523024d3c653c62ff98e173e091578ff58f7ef", "patch": "@@ -539,6 +539,14 @@\n                         \"string\"\n                     ]\n                 },\n+                \"rust-analyzer.cargo.sysrootSrc\": {\n+                    \"markdownDescription\": \"Relative path to the sysroot library sources. If left unset, this will default to\\n`{cargo.sysroot}/lib/rustlib/src/rust/library`.\\n\\nThis option does not take effect until rust-analyzer is restarted.\",\n+                    \"default\": null,\n+                    \"type\": [\n+                        \"null\",\n+                        \"string\"\n+                    ]\n+                },\n                 \"rust-analyzer.cargo.target\": {\n                     \"markdownDescription\": \"Compilation target override (target triple).\",\n                     \"default\": null,"}]}