{"sha": "bf5d6617fd3f767f55eb4df719ffc72228b6e462", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNWQ2NjE3ZmQzZjc2N2Y1NWViNGRmNzE5ZmZjNzIyMjhiNmU0NjI=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-24T15:16:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-24T15:16:36Z"}, "message": "Rollup merge of #43401 - cuviper:homogeneous, r=Mark-Simulacrum\n\nCorrect the spelling of \"homogeneous\"\n\nNone", "tree": {"sha": "c6e859fc58664afea6b308ab7c6a5274e30c3c13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6e859fc58664afea6b308ab7c6a5274e30c3c13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf5d6617fd3f767f55eb4df719ffc72228b6e462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf5d6617fd3f767f55eb4df719ffc72228b6e462", "html_url": "https://github.com/rust-lang/rust/commit/bf5d6617fd3f767f55eb4df719ffc72228b6e462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf5d6617fd3f767f55eb4df719ffc72228b6e462/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1ba747edc9fa8d2bcd78b37f5423265be69a76b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ba747edc9fa8d2bcd78b37f5423265be69a76b", "html_url": "https://github.com/rust-lang/rust/commit/d1ba747edc9fa8d2bcd78b37f5423265be69a76b"}, {"sha": "5c6ccdc37c88ce77306646703a1ada166e998c40", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c6ccdc37c88ce77306646703a1ada166e998c40", "html_url": "https://github.com/rust-lang/rust/commit/5c6ccdc37c88ce77306646703a1ada166e998c40"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "b52224eb5d7673e614d57c6f3a65b946cd4045c0", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf5d6617fd3f767f55eb4df719ffc72228b6e462/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5d6617fd3f767f55eb4df719ffc72228b6e462/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=bf5d6617fd3f767f55eb4df719ffc72228b6e462", "patch": "@@ -1708,7 +1708,7 @@ not apply to structs.\n representation of enums isn't strictly defined in Rust, and this attribute\n won't work on enums.\n \n-`#[repr(simd)]` will give a struct consisting of a homogenous series of machine\n+`#[repr(simd)]` will give a struct consisting of a homogeneous series of machine\n types (i.e. `u8`, `i32`, etc) a representation that permits vectorization via\n SIMD. This doesn't make much sense for enums since they don't consist of a\n single list of data."}, {"sha": "144b484d7e819ee020c4095e2ff7e81be2c689dd", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf5d6617fd3f767f55eb4df719ffc72228b6e462/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5d6617fd3f767f55eb4df719ffc72228b6e462/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=bf5d6617fd3f767f55eb4df719ffc72228b6e462", "patch": "@@ -238,7 +238,7 @@ impl Uniform {\n \n pub trait LayoutExt<'tcx> {\n     fn is_aggregate(&self) -> bool;\n-    fn homogenous_aggregate<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> Option<Reg>;\n+    fn homogeneous_aggregate<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> Option<Reg>;\n }\n \n impl<'tcx> LayoutExt<'tcx> for TyLayout<'tcx> {\n@@ -258,7 +258,7 @@ impl<'tcx> LayoutExt<'tcx> for TyLayout<'tcx> {\n         }\n     }\n \n-    fn homogenous_aggregate<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> Option<Reg> {\n+    fn homogeneous_aggregate<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> Option<Reg> {\n         match *self.layout {\n             // The primitives for this algorithm.\n             Layout::Scalar { value, .. } |\n@@ -291,7 +291,7 @@ impl<'tcx> LayoutExt<'tcx> for TyLayout<'tcx> {\n \n             Layout::Array { count, .. } => {\n                 if count > 0 {\n-                    self.field(ccx, 0).homogenous_aggregate(ccx)\n+                    self.field(ccx, 0).homogeneous_aggregate(ccx)\n                 } else {\n                     None\n                 }\n@@ -307,8 +307,8 @@ impl<'tcx> LayoutExt<'tcx> for TyLayout<'tcx> {\n                     }\n \n                     let field = self.field(ccx, i);\n-                    match (result, field.homogenous_aggregate(ccx)) {\n-                        // The field itself must be a homogenous aggregate.\n+                    match (result, field.homogeneous_aggregate(ccx)) {\n+                        // The field itself must be a homogeneous aggregate.\n                         (_, None) => return None,\n                         // If this is the first field, record the unit.\n                         (None, Some(unit)) => {\n@@ -344,8 +344,8 @@ impl<'tcx> LayoutExt<'tcx> for TyLayout<'tcx> {\n \n                 for i in 0..self.field_count() {\n                     let field = self.field(ccx, i);\n-                    match (result, field.homogenous_aggregate(ccx)) {\n-                        // The field itself must be a homogenous aggregate.\n+                    match (result, field.homogeneous_aggregate(ccx)) {\n+                        // The field itself must be a homogeneous aggregate.\n                         (_, None) => return None,\n                         // If this is the first field, record the unit.\n                         (None, Some(unit)) => {\n@@ -830,7 +830,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n \n                 let size = arg.layout.size(ccx);\n \n-                if let Some(unit) = arg.layout.homogenous_aggregate(ccx) {\n+                if let Some(unit) = arg.layout.homogeneous_aggregate(ccx) {\n                     // Replace newtypes with their inner-most type.\n                     if unit.size == size {\n                         // Needs a cast as we've unpacked a newtype."}, {"sha": "bf842e6358f87860a5835bbfd11865419e750779", "filename": "src/librustc_trans/cabi_aarch64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf5d6617fd3f767f55eb4df719ffc72228b6e462/src%2Flibrustc_trans%2Fcabi_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5d6617fd3f767f55eb4df719ffc72228b6e462/src%2Flibrustc_trans%2Fcabi_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_aarch64.rs?ref=bf5d6617fd3f767f55eb4df719ffc72228b6e462", "patch": "@@ -11,9 +11,9 @@\n use abi::{FnType, ArgType, LayoutExt, Reg, RegKind, Uniform};\n use context::CrateContext;\n \n-fn is_homogenous_aggregate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n+fn is_homogeneous_aggregate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n                                      -> Option<Uniform> {\n-    arg.layout.homogenous_aggregate(ccx).and_then(|unit| {\n+    arg.layout.homogeneous_aggregate(ccx).and_then(|unit| {\n         let size = arg.layout.size(ccx);\n \n         // Ensure we have at most four uniquely addressable members.\n@@ -43,7 +43,7 @@ fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tc\n         ret.extend_integer_width_to(32);\n         return;\n     }\n-    if let Some(uniform) = is_homogenous_aggregate(ccx, ret) {\n+    if let Some(uniform) = is_homogeneous_aggregate(ccx, ret) {\n         ret.cast_to(ccx, uniform);\n         return;\n     }\n@@ -74,7 +74,7 @@ fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tc\n         arg.extend_integer_width_to(32);\n         return;\n     }\n-    if let Some(uniform) = is_homogenous_aggregate(ccx, arg) {\n+    if let Some(uniform) = is_homogeneous_aggregate(ccx, arg) {\n         arg.cast_to(ccx, uniform);\n         return;\n     }"}, {"sha": "6fcd3ed581d27c85f2914cf200fce0c85eac108f", "filename": "src/librustc_trans/cabi_asmjs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf5d6617fd3f767f55eb4df719ffc72228b6e462/src%2Flibrustc_trans%2Fcabi_asmjs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5d6617fd3f767f55eb4df719ffc72228b6e462/src%2Flibrustc_trans%2Fcabi_asmjs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_asmjs.rs?ref=bf5d6617fd3f767f55eb4df719ffc72228b6e462", "patch": "@@ -18,7 +18,7 @@ use context::CrateContext;\n \n fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tcx>) {\n     if ret.layout.is_aggregate() {\n-        if let Some(unit) = ret.layout.homogenous_aggregate(ccx) {\n+        if let Some(unit) = ret.layout.homogeneous_aggregate(ccx) {\n             let size = ret.layout.size(ccx);\n             if unit.size == size {\n                 ret.cast_to(ccx, Uniform {"}, {"sha": "5c695387236fae4117d7d10562ddfc55ee28ea8e", "filename": "src/librustc_trans/cabi_powerpc64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf5d6617fd3f767f55eb4df719ffc72228b6e462/src%2Flibrustc_trans%2Fcabi_powerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5d6617fd3f767f55eb4df719ffc72228b6e462/src%2Flibrustc_trans%2Fcabi_powerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_powerpc64.rs?ref=bf5d6617fd3f767f55eb4df719ffc72228b6e462", "patch": "@@ -15,9 +15,9 @@\n use abi::{FnType, ArgType, LayoutExt, Reg, RegKind, Uniform};\n use context::CrateContext;\n \n-fn is_homogenous_aggregate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n+fn is_homogeneous_aggregate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n                                      -> Option<Uniform> {\n-    arg.layout.homogenous_aggregate(ccx).and_then(|unit| {\n+    arg.layout.homogeneous_aggregate(ccx).and_then(|unit| {\n         let size = arg.layout.size(ccx);\n \n         // Ensure we have at most eight uniquely addressable members.\n@@ -53,7 +53,7 @@ fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tc\n         ret.make_indirect(ccx);\n     }\n \n-    if let Some(uniform) = is_homogenous_aggregate(ccx, ret) {\n+    if let Some(uniform) = is_homogeneous_aggregate(ccx, ret) {\n         ret.cast_to(ccx, uniform);\n         return;\n     }\n@@ -86,7 +86,7 @@ fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tc\n         return;\n     }\n \n-    if let Some(uniform) = is_homogenous_aggregate(ccx, arg) {\n+    if let Some(uniform) = is_homogeneous_aggregate(ccx, arg) {\n         arg.cast_to(ccx, uniform);\n         return;\n     }"}, {"sha": "8383007550e1e7ef987f2b714bd8866c158a583d", "filename": "src/librustc_trans/cabi_sparc64.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf5d6617fd3f767f55eb4df719ffc72228b6e462/src%2Flibrustc_trans%2Fcabi_sparc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5d6617fd3f767f55eb4df719ffc72228b6e462/src%2Flibrustc_trans%2Fcabi_sparc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_sparc64.rs?ref=bf5d6617fd3f767f55eb4df719ffc72228b6e462", "patch": "@@ -13,9 +13,9 @@\n use abi::{FnType, ArgType, LayoutExt, Reg, RegKind, Uniform};\n use context::CrateContext;\n \n-fn is_homogenous_aggregate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n+fn is_homogeneous_aggregate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tcx>)\n                                      -> Option<Uniform> {\n-    arg.layout.homogenous_aggregate(ccx).and_then(|unit| {\n+    arg.layout.homogeneous_aggregate(ccx).and_then(|unit| {\n         let size = arg.layout.size(ccx);\n \n         // Ensure we have at most eight uniquely addressable members.\n@@ -46,7 +46,7 @@ fn classify_ret_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ret: &mut ArgType<'tc\n         return;\n     }\n \n-    if let Some(uniform) = is_homogenous_aggregate(ccx, ret) {\n+    if let Some(uniform) = is_homogeneous_aggregate(ccx, ret) {\n         ret.cast_to(ccx, uniform);\n         return;\n     }\n@@ -80,7 +80,7 @@ fn classify_arg_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, arg: &mut ArgType<'tc\n         return;\n     }\n \n-    if let Some(uniform) = is_homogenous_aggregate(ccx, arg) {\n+    if let Some(uniform) = is_homogeneous_aggregate(ccx, arg) {\n         arg.cast_to(ccx, uniform);\n         return;\n     }"}, {"sha": "8b024b8c97fa0940cc9ede65456dd3dab0ba74d8", "filename": "src/librustc_trans/cabi_x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf5d6617fd3f767f55eb4df719ffc72228b6e462/src%2Flibrustc_trans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5d6617fd3f767f55eb4df719ffc72228b6e462/src%2Flibrustc_trans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86.rs?ref=bf5d6617fd3f767f55eb4df719ffc72228b6e462", "patch": "@@ -74,7 +74,7 @@ pub fn compute_abi_info<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             if arg.is_ignore() || arg.is_indirect() { continue; }\n \n             // At this point we know this must be a primitive of sorts.\n-            let unit = arg.layout.homogenous_aggregate(ccx).unwrap();\n+            let unit = arg.layout.homogeneous_aggregate(ccx).unwrap();\n             let size = arg.layout.size(ccx);\n             assert_eq!(unit.size, size);\n             if unit.kind == RegKind::Float {"}]}