{"sha": "51551193d831f66a10f3ad515dd954292349842e", "node_id": "C_kwDOAAsO6NoAKDUxNTUxMTkzZDgzMWY2NmExMGYzYWQ1MTVkZDk1NDI5MjM0OTg0MmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-25T23:05:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-25T23:05:23Z"}, "message": "Auto merge of #10401 - samueltardieu:issue-10148, r=Alexendoo\n\nDo not panic when analyzing the malformed origin of a format string\n\nFixes #10148. This will trigger only when generating format strings while accepting weird things in a procedural macro and setting the span to something which is not a string.\n\nchangelog: none", "tree": {"sha": "79eab30c79ea02abe58596ad18d43b309b0149cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79eab30c79ea02abe58596ad18d43b309b0149cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51551193d831f66a10f3ad515dd954292349842e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51551193d831f66a10f3ad515dd954292349842e", "html_url": "https://github.com/rust-lang/rust/commit/51551193d831f66a10f3ad515dd954292349842e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51551193d831f66a10f3ad515dd954292349842e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b528cc90bc35a111125bfd2382bfcdcd345cea69", "url": "https://api.github.com/repos/rust-lang/rust/commits/b528cc90bc35a111125bfd2382bfcdcd345cea69", "html_url": "https://github.com/rust-lang/rust/commit/b528cc90bc35a111125bfd2382bfcdcd345cea69"}, {"sha": "64775f30c22e8e828a8dec13057e927d363701ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/64775f30c22e8e828a8dec13057e927d363701ac", "html_url": "https://github.com/rust-lang/rust/commit/64775f30c22e8e828a8dec13057e927d363701ac"}], "stats": {"total": 51, "additions": 35, "deletions": 16}, "files": [{"sha": "be6133d320241bb05444c843eee8194320a96163", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/51551193d831f66a10f3ad515dd954292349842e/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51551193d831f66a10f3ad515dd954292349842e/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=51551193d831f66a10f3ad515dd954292349842e", "patch": "@@ -391,11 +391,18 @@ impl FormatString {\n         };\n \n         let mut unescaped = String::with_capacity(inner.len());\n+        // Sometimes the original string comes from a macro which accepts a malformed string, such as in a\n+        // #[display(\"\"somestring)] attribute (accepted by the `displaythis` crate). Reconstructing the\n+        // string from the span will not be possible, so we will just return None here.\n+        let mut unparsable = false;\n         unescape_literal(inner, mode, &mut |_, ch| match ch {\n             Ok(ch) => unescaped.push(ch),\n             Err(e) if !e.is_fatal() => (),\n-            Err(e) => panic!(\"{e:?}\"),\n+            Err(_) => unparsable = true,\n         });\n+        if unparsable {\n+            return None;\n+        }\n \n         let mut parts = Vec::new();\n         let _: Option<!> = for_each_expr(pieces, |expr| {"}, {"sha": "cd2f70ee8b0292f09c4c2a3f1354377136c677ac", "filename": "tests/ui/format.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51551193d831f66a10f3ad515dd954292349842e/tests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/51551193d831f66a10f3ad515dd954292349842e/tests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.fixed?ref=51551193d831f66a10f3ad515dd954292349842e", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// aux-build: proc_macro_with_span.rs\n #![warn(clippy::useless_format)]\n #![allow(\n     unused_tuple_struct_fields,\n@@ -9,6 +10,8 @@\n     clippy::uninlined_format_args\n )]\n \n+extern crate proc_macro_with_span;\n+\n struct Foo(pub String);\n \n macro_rules! foo {\n@@ -87,4 +90,7 @@ fn main() {\n     let _ = abc.to_string();\n     let xx = \"xx\";\n     let _ = xx.to_string();\n+\n+    // Issue #10148\n+    println!(proc_macro_with_span::with_span!(\"\"something \"\"));\n }"}, {"sha": "c22345a79d4329bc734c541a6a4d2b025f3d7c62", "filename": "tests/ui/format.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51551193d831f66a10f3ad515dd954292349842e/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51551193d831f66a10f3ad515dd954292349842e/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=51551193d831f66a10f3ad515dd954292349842e", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// aux-build: proc_macro_with_span.rs\n #![warn(clippy::useless_format)]\n #![allow(\n     unused_tuple_struct_fields,\n@@ -9,6 +10,8 @@\n     clippy::uninlined_format_args\n )]\n \n+extern crate proc_macro_with_span;\n+\n struct Foo(pub String);\n \n macro_rules! foo {\n@@ -89,4 +92,7 @@ fn main() {\n     let _ = format!(\"{abc}\");\n     let xx = \"xx\";\n     let _ = format!(\"{xx}\");\n+\n+    // Issue #10148\n+    println!(proc_macro_with_span::with_span!(\"\"something \"\"));\n }"}, {"sha": "a0e5d5c8ad21f21b64b13aa2052e5bdd1fd08b87", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/51551193d831f66a10f3ad515dd954292349842e/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51551193d831f66a10f3ad515dd954292349842e/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=51551193d831f66a10f3ad515dd954292349842e", "patch": "@@ -1,25 +1,25 @@\n error: useless use of `format!`\n-  --> $DIR/format.rs:19:5\n+  --> $DIR/format.rs:22:5\n    |\n LL |     format!(\"foo\");\n    |     ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n    |\n    = note: `-D clippy::useless-format` implied by `-D warnings`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:20:5\n+  --> $DIR/format.rs:23:5\n    |\n LL |     format!(\"{{}}\");\n    |     ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{}\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:21:5\n+  --> $DIR/format.rs:24:5\n    |\n LL |     format!(\"{{}} abc {{}}\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{} abc {}\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:22:5\n+  --> $DIR/format.rs:25:5\n    |\n LL | /     format!(\n LL | |         r##\"foo {{}}\n@@ -34,67 +34,67 @@ LL ~ \" bar\"##.to_string();\n    |\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:27:13\n+  --> $DIR/format.rs:30:13\n    |\n LL |     let _ = format!(\"\");\n    |             ^^^^^^^^^^^ help: consider using `String::new()`: `String::new()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:29:5\n+  --> $DIR/format.rs:32:5\n    |\n LL |     format!(\"{}\", \"foo\");\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:37:5\n+  --> $DIR/format.rs:40:5\n    |\n LL |     format!(\"{}\", arg);\n    |     ^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:67:5\n+  --> $DIR/format.rs:70:5\n    |\n LL |     format!(\"{}\", 42.to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `42.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:69:5\n+  --> $DIR/format.rs:72:5\n    |\n LL |     format!(\"{}\", x.display().to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.display().to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:73:18\n+  --> $DIR/format.rs:76:18\n    |\n LL |     let _ = Some(format!(\"{}\", a + \"bar\"));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `a + \"bar\"`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:77:22\n+  --> $DIR/format.rs:80:22\n    |\n LL |     let _s: String = format!(\"{}\", &*v.join(\"/n\"));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `(&*v.join(\"/n\")).to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:83:13\n+  --> $DIR/format.rs:86:13\n    |\n LL |     let _ = format!(\"{x}\");\n    |             ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:85:13\n+  --> $DIR/format.rs:88:13\n    |\n LL |     let _ = format!(\"{y}\", y = x);\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:89:13\n+  --> $DIR/format.rs:92:13\n    |\n LL |     let _ = format!(\"{abc}\");\n    |             ^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `abc.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:91:13\n+  --> $DIR/format.rs:94:13\n    |\n LL |     let _ = format!(\"{xx}\");\n    |             ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `xx.to_string()`"}]}