{"sha": "afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "node_id": "C_kwDOAAsO6NoAKGFmYWE5ODU0ZmE2ZGY3NGQ3YTFiODVlYmIxZjQ1YmRjZDBkY2MxNTI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-03T16:42:42Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-03T16:42:42Z"}, "message": "Replace `&Vec<_>`s with `&[_]`s", "tree": {"sha": "277216cd98ad12461fcb30eaf59c1b8d242e2d40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/277216cd98ad12461fcb30eaf59c1b8d242e2d40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "html_url": "https://github.com/rust-lang/rust/commit/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e40d5e83dc133d093c22c7ff016b10daa4f40dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40d5e83dc133d093c22c7ff016b10daa4f40dcf", "html_url": "https://github.com/rust-lang/rust/commit/e40d5e83dc133d093c22c7ff016b10daa4f40dcf"}], "stats": {"total": 98, "additions": 53, "deletions": 45}, "files": [{"sha": "eaceecc1667782c049f2aab48a1c1603f36f48a5", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "patch": "@@ -827,7 +827,7 @@ impl Diagnostic {\n         self\n     }\n \n-    pub fn styled_message(&self) -> &Vec<(DiagnosticMessage, Style)> {\n+    pub fn styled_message(&self) -> &[(DiagnosticMessage, Style)] {\n         &self.message\n     }\n \n@@ -888,11 +888,11 @@ impl Diagnostic {\n         &self,\n     ) -> (\n         &Level,\n-        &Vec<(DiagnosticMessage, Style)>,\n+        &[(DiagnosticMessage, Style)],\n         &Option<DiagnosticId>,\n         &MultiSpan,\n         &Result<Vec<CodeSuggestion>, SuggestionsDisabled>,\n-        Option<&Vec<SubDiagnostic>>,\n+        Option<&[SubDiagnostic]>,\n     ) {\n         (\n             &self.level,"}, {"sha": "97deb9d986d4650fb7ad8d7a822773d3c408e6bb", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "patch": "@@ -352,7 +352,7 @@ pub fn same_type_modulo_infer<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n }\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n-    pub fn report_region_errors(&self, errors: &Vec<RegionResolutionError<'tcx>>) {\n+    pub fn report_region_errors(&self, errors: &[RegionResolutionError<'tcx>]) {\n         debug!(\"report_region_errors(): {} errors to start\", errors.len());\n \n         // try to pre-process the errors, which will group some of them"}, {"sha": "c886175c6ea0e2ddf25aad35f42de2fcbe97333a", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "patch": "@@ -16,6 +16,7 @@ use rustc_query_system::ich::StableHashingContext;\n use rustc_span::{Span, DUMMY_SP};\n \n use std::fmt;\n+use std::ops::Deref;\n \n /// Represents a statically-describable scope that can be used to\n /// bound the lifetime/region for values.\n@@ -407,8 +408,8 @@ impl ScopeTree {\n \n     /// Checks whether the given scope contains a `yield`. If so,\n     /// returns `Some(YieldData)`. If not, returns `None`.\n-    pub fn yield_in_scope(&self, scope: Scope) -> Option<&Vec<YieldData>> {\n-        self.yield_in_scope.get(&scope)\n+    pub fn yield_in_scope(&self, scope: Scope) -> Option<&[YieldData]> {\n+        self.yield_in_scope.get(&scope).map(Deref::deref)\n     }\n \n     /// Gives the number of expressions visited in a body."}, {"sha": "db64bcba3b111a11ed5ecbe0e7dbe0c54e96be8b", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "patch": "@@ -310,7 +310,7 @@ pub fn reachable_as_bitset<'tcx>(body: &Body<'tcx>) -> BitSet<BasicBlock> {\n #[derive(Clone)]\n pub struct ReversePostorderIter<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n-    blocks: &'a Vec<BasicBlock>,\n+    blocks: &'a [BasicBlock],\n     idx: usize,\n }\n \n@@ -358,9 +358,9 @@ impl PostorderCache {\n         self.cache = OnceCell::new();\n     }\n \n-    /// Returns the &Vec<BasicBlocks> represents the postorder graph for this MIR.\n+    /// Returns the `&[BasicBlocks]` represents the postorder graph for this MIR.\n     #[inline]\n-    pub(super) fn compute(&self, body: &Body<'_>) -> &Vec<BasicBlock> {\n+    pub(super) fn compute(&self, body: &Body<'_>) -> &[BasicBlock] {\n         self.cache.get_or_init(|| Postorder::new(body, START_BLOCK).map(|(bb, _)| bb).collect())\n     }\n }"}, {"sha": "09fe8415652acb15ac3ecb6363384227f6e76ffa", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "patch": "@@ -1032,6 +1032,13 @@ impl<'tcx, T> Binder<'tcx, T> {\n         Binder(&self.0, self.1)\n     }\n \n+    pub fn as_deref(&self) -> Binder<'tcx, &T::Target>\n+    where\n+        T: Deref,\n+    {\n+        Binder(&self.0, self.1)\n+    }\n+\n     pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>\n     where\n         F: FnOnce(&T) -> U,"}, {"sha": "5d55c4d637b6e9d09aca0218350a25399d42dd4e", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "patch": "@@ -133,7 +133,7 @@ fn convert_to_hir_projections_and_truncate_for_capture<'tcx>(\n ///        ancestor of `foo.x.y`. It's the caller's responsibility to ensure that both projections\n ///        list are being applied to the same root variable.\n fn is_ancestor_or_same_capture(\n-    proj_possible_ancestor: &Vec<HirProjectionKind>,\n+    proj_possible_ancestor: &[HirProjectionKind],\n     proj_capture: &[HirProjectionKind],\n ) -> bool {\n     // We want to make sure `is_ancestor_or_same_capture(\"x.0.0\", \"x.0\")` to return false.\n@@ -187,7 +187,7 @@ fn find_capture_matching_projections<'a, 'tcx>(\n     // If an ancestor is found, `idx` is the index within the list of captured places\n     // for root variable `var_hir_id` and `capture` is the `ty::CapturedPlace` itself.\n     let (idx, capture) = root_variable_min_captures.iter().enumerate().find(|(_, capture)| {\n-        let possible_ancestor_proj_kinds =\n+        let possible_ancestor_proj_kinds: Vec<_> =\n             capture.place.projections.iter().map(|proj| proj.kind).collect();\n         is_ancestor_or_same_capture(&possible_ancestor_proj_kinds, &hir_projections)\n     })?;"}, {"sha": "43a84f69699aadc5fcf50f84d48454df57918ee8", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "patch": "@@ -409,7 +409,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         outer_source_info: SourceInfo,\n         candidate: Candidate<'_, 'tcx>,\n         guard: Option<&Guard<'tcx>>,\n-        fake_borrow_temps: &Vec<(Place<'tcx>, Local)>,\n+        fake_borrow_temps: &[(Place<'tcx>, Local)],\n         scrutinee_span: Span,\n         arm_span: Option<Span>,\n         arm_scope: Option<region::Scope>,\n@@ -1826,7 +1826,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         candidate: Candidate<'pat, 'tcx>,\n         parent_bindings: &[(Vec<Binding<'tcx>>, Vec<Ascription<'tcx>>)],\n         guard: Option<&Guard<'tcx>>,\n-        fake_borrows: &Vec<(Place<'tcx>, Local)>,\n+        fake_borrows: &[(Place<'tcx>, Local)],\n         scrutinee_span: Span,\n         arm_span: Option<Span>,\n         match_scope: Option<region::Scope>,"}, {"sha": "45de0c280352f83341cfc65cb6aaac9540aaa35c", "filename": "compiler/rustc_mir_transform/src/coverage/counters.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fcounters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fcounters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fcounters.rs?ref=afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "patch": "@@ -43,7 +43,7 @@ impl CoverageCounters {\n     pub fn make_bcb_counters(\n         &mut self,\n         basic_coverage_blocks: &mut CoverageGraph,\n-        coverage_spans: &Vec<CoverageSpan>,\n+        coverage_spans: &[CoverageSpan],\n     ) -> Result<Vec<CoverageKind>, Error> {\n         let mut bcb_counters = BcbCounters::new(self, basic_coverage_blocks);\n         bcb_counters.make_bcb_counters(coverage_spans)\n@@ -349,7 +349,7 @@ impl<'a> BcbCounters<'a> {\n         // counters and/or expressions of its incoming edges. This will recursively get or create\n         // counters for those incoming edges first, then call `make_expression()` to sum them up,\n         // with additional intermediate expressions as needed.\n-        let mut predecessors = self.bcb_predecessors(bcb).clone().into_iter();\n+        let mut predecessors = self.bcb_predecessors(bcb).to_owned().into_iter();\n         debug!(\n             \"{}{:?} has multiple incoming edges and will get an expression that sums them up...\",\n             NESTED_INDENT.repeat(debug_indent_level),\n@@ -571,12 +571,12 @@ impl<'a> BcbCounters<'a> {\n     }\n \n     #[inline]\n-    fn bcb_predecessors(&self, bcb: BasicCoverageBlock) -> &Vec<BasicCoverageBlock> {\n+    fn bcb_predecessors(&self, bcb: BasicCoverageBlock) -> &[BasicCoverageBlock] {\n         &self.basic_coverage_blocks.predecessors[bcb]\n     }\n \n     #[inline]\n-    fn bcb_successors(&self, bcb: BasicCoverageBlock) -> &Vec<BasicCoverageBlock> {\n+    fn bcb_successors(&self, bcb: BasicCoverageBlock) -> &[BasicCoverageBlock] {\n         &self.basic_coverage_blocks.successors[bcb]\n     }\n "}, {"sha": "d31ac04274cb8217f7f42b5ad7185cc1c8f60c80", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "patch": "@@ -124,6 +124,7 @@ use rustc_span::Span;\n \n use std::iter;\n use std::lazy::SyncOnceCell;\n+use std::ops::Deref;\n \n pub const NESTED_INDENT: &str = \"    \";\n \n@@ -434,11 +435,11 @@ impl GraphvizData {\n     pub fn get_bcb_coverage_spans_with_counters(\n         &self,\n         bcb: BasicCoverageBlock,\n-    ) -> Option<&Vec<(CoverageSpan, CoverageKind)>> {\n+    ) -> Option<&[(CoverageSpan, CoverageKind)]> {\n         if let Some(bcb_to_coverage_spans_with_counters) =\n             self.some_bcb_to_coverage_spans_with_counters.as_ref()\n         {\n-            bcb_to_coverage_spans_with_counters.get(&bcb)\n+            bcb_to_coverage_spans_with_counters.get(&bcb).map(Deref::deref)\n         } else {\n             None\n         }\n@@ -457,12 +458,9 @@ impl GraphvizData {\n         }\n     }\n \n-    pub fn get_bcb_dependency_counters(\n-        &self,\n-        bcb: BasicCoverageBlock,\n-    ) -> Option<&Vec<CoverageKind>> {\n+    pub fn get_bcb_dependency_counters(&self, bcb: BasicCoverageBlock) -> Option<&[CoverageKind]> {\n         if let Some(bcb_to_dependency_counters) = self.some_bcb_to_dependency_counters.as_ref() {\n-            bcb_to_dependency_counters.get(&bcb)\n+            bcb_to_dependency_counters.get(&bcb).map(Deref::deref)\n         } else {\n             None\n         }\n@@ -571,11 +569,11 @@ impl UsedExpressions {\n     /// associated with a coverage span).\n     pub fn validate(\n         &mut self,\n-        bcb_counters_without_direct_coverage_spans: &Vec<(\n+        bcb_counters_without_direct_coverage_spans: &[(\n             Option<BasicCoverageBlock>,\n             BasicCoverageBlock,\n             CoverageKind,\n-        )>,\n+        )],\n     ) {\n         if self.is_enabled() {\n             let mut not_validated = bcb_counters_without_direct_coverage_spans\n@@ -634,7 +632,7 @@ pub(super) fn dump_coverage_spanview<'tcx>(\n     basic_coverage_blocks: &CoverageGraph,\n     pass_name: &str,\n     body_span: Span,\n-    coverage_spans: &Vec<CoverageSpan>,\n+    coverage_spans: &[CoverageSpan],\n ) {\n     let mir_source = mir_body.source;\n     let def_id = mir_source.def_id();\n@@ -654,7 +652,7 @@ fn span_viewables<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mir_body: &mir::Body<'tcx>,\n     basic_coverage_blocks: &CoverageGraph,\n-    coverage_spans: &Vec<CoverageSpan>,\n+    coverage_spans: &[CoverageSpan],\n ) -> Vec<SpanViewable> {\n     let mut span_viewables = Vec::new();\n     for coverage_span in coverage_spans {\n@@ -676,7 +674,7 @@ pub(super) fn dump_coverage_graphviz<'tcx>(\n     basic_coverage_blocks: &CoverageGraph,\n     debug_counters: &DebugCounters,\n     graphviz_data: &GraphvizData,\n-    intermediate_expressions: &Vec<CoverageKind>,\n+    intermediate_expressions: &[CoverageKind],\n     debug_used_expressions: &UsedExpressions,\n ) {\n     let mir_source = mir_body.source;\n@@ -753,9 +751,9 @@ fn bcb_to_string_sections<'tcx>(\n     mir_body: &mir::Body<'tcx>,\n     debug_counters: &DebugCounters,\n     bcb_data: &BasicCoverageBlockData,\n-    some_coverage_spans_with_counters: Option<&Vec<(CoverageSpan, CoverageKind)>>,\n-    some_dependency_counters: Option<&Vec<CoverageKind>>,\n-    some_intermediate_expressions: Option<&Vec<CoverageKind>>,\n+    some_coverage_spans_with_counters: Option<&[(CoverageSpan, CoverageKind)]>,\n+    some_dependency_counters: Option<&[CoverageKind]>,\n+    some_intermediate_expressions: Option<&[CoverageKind]>,\n ) -> Vec<String> {\n     let len = bcb_data.basic_blocks.len();\n     let mut sections = Vec::new();"}, {"sha": "8c76f2e78817ac66c17da7d5f8ed61ec9232c73f", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "patch": "@@ -631,7 +631,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         span,\n                     },\n                     |this| {\n-                        this.visit_generic_param_vec(&bare_fn.generic_params, false);\n+                        this.visit_generic_param_slice(&bare_fn.generic_params, false);\n                         this.with_lifetime_rib(\n                             LifetimeRibKind::AnonymousPassThrough(ty.id, false),\n                             |this| walk_list!(this, visit_param, &bare_fn.decl.inputs),\n@@ -662,7 +662,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                 span,\n             },\n             |this| {\n-                this.visit_generic_param_vec(&tref.bound_generic_params, false);\n+                this.visit_generic_param_slice(&tref.bound_generic_params, false);\n                 this.smart_resolve_path(\n                     tref.trait_ref.ref_id,\n                     None,\n@@ -833,7 +833,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     }\n \n     fn visit_generics(&mut self, generics: &'ast Generics) {\n-        self.visit_generic_param_vec(\n+        self.visit_generic_param_slice(\n             &generics.params,\n             self.diagnostic_metadata.current_self_item.is_some(),\n         );\n@@ -941,7 +941,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         span,\n                     },\n                     |this| {\n-                        this.visit_generic_param_vec(&bound_generic_params, false);\n+                        this.visit_generic_param_slice(&bound_generic_params, false);\n                         this.visit_ty(bounded_ty);\n                         for bound in bounds {\n                             this.visit_param_bound(bound, BoundKind::Bound)\n@@ -1116,7 +1116,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         }\n     }\n \n-    fn visit_generic_param_vec(&mut self, params: &'ast Vec<GenericParam>, add_self_upper: bool) {\n+    fn visit_generic_param_slice(&mut self, params: &'ast [GenericParam], add_self_upper: bool) {\n         // For type parameter defaults, we have to ban access\n         // to following type parameters, as the InternalSubsts can only\n         // provide previous type parameters as they're built. We\n@@ -1870,7 +1870,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n     fn with_generic_param_rib<'c, F>(\n         &'c mut self,\n-        params: &'c Vec<GenericParam>,\n+        params: &'c [GenericParam],\n         kind: RibKind<'a>,\n         lifetime_kind: LifetimeRibKind,\n         f: F,"}, {"sha": "fd0732f51d5e852fc2c0b2e5340bcac171bb7c65", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "patch": "@@ -146,11 +146,13 @@ impl<'tcx, 'a> GeneratorData<'tcx, 'a> {\n     /// that are live across the yield of this generator\n     fn get_generator_interior_types(\n         &self,\n-    ) -> ty::Binder<'tcx, &Vec<GeneratorInteriorTypeCause<'tcx>>> {\n+    ) -> ty::Binder<'tcx, &[GeneratorInteriorTypeCause<'tcx>]> {\n         match self {\n-            GeneratorData::Local(typeck_result) => typeck_result.generator_interior_types.as_ref(),\n+            GeneratorData::Local(typeck_result) => {\n+                typeck_result.generator_interior_types.as_deref()\n+            }\n             GeneratorData::Foreign(generator_diagnostic_data) => {\n-                generator_diagnostic_data.generator_interior_types.as_ref()\n+                generator_diagnostic_data.generator_interior_types.as_deref()\n             }\n         }\n     }"}, {"sha": "17e0fae98531540587e3befa799b65b2ad8e018b", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "patch": "@@ -773,7 +773,7 @@ pub struct PlaceholderReplacer<'me, 'tcx> {\n     mapped_regions: BTreeMap<ty::PlaceholderRegion, ty::BoundRegion>,\n     mapped_types: BTreeMap<ty::PlaceholderType, ty::BoundTy>,\n     mapped_consts: BTreeMap<ty::PlaceholderConst<'tcx>, ty::BoundVar>,\n-    universe_indices: &'me Vec<Option<ty::UniverseIndex>>,\n+    universe_indices: &'me [Option<ty::UniverseIndex>],\n     current_index: ty::DebruijnIndex,\n }\n \n@@ -783,7 +783,7 @@ impl<'me, 'tcx> PlaceholderReplacer<'me, 'tcx> {\n         mapped_regions: BTreeMap<ty::PlaceholderRegion, ty::BoundRegion>,\n         mapped_types: BTreeMap<ty::PlaceholderType, ty::BoundTy>,\n         mapped_consts: BTreeMap<ty::PlaceholderConst<'tcx>, ty::BoundVar>,\n-        universe_indices: &'me Vec<Option<ty::UniverseIndex>>,\n+        universe_indices: &'me [Option<ty::UniverseIndex>],\n         value: T,\n     ) -> T {\n         let mut replacer = PlaceholderReplacer {"}, {"sha": "e3e0063c4ec6a4240fae211f51db0bb29ffb0d09", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "patch": "@@ -2448,7 +2448,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         span: Span,\n         base_t: Ty<'tcx>,\n-    ) -> Option<(&Vec<ty::FieldDef>, SubstsRef<'tcx>)> {\n+    ) -> Option<(&[ty::FieldDef], SubstsRef<'tcx>)> {\n         debug!(\"get_field_candidates(span: {:?}, base_t: {:?}\", span, base_t);\n \n         for (base_t, _) in self.autoderef(span, base_t) {"}, {"sha": "8074ff368cc8c1939becca371d957388d8c4ec94", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=afaa9854fa6df74d7a1b85ebb1f45bdcd0dcc152", "patch": "@@ -2039,7 +2039,7 @@ fn should_do_rust_2021_incompatible_closure_captures_analysis(\n /// - s2: Comma separated names of the variables being migrated.\n fn migration_suggestion_for_2229(\n     tcx: TyCtxt<'_>,\n-    need_migrations: &Vec<NeededMigration>,\n+    need_migrations: &[NeededMigration],\n ) -> (String, String) {\n     let need_migrations_variables = need_migrations\n         .iter()"}]}