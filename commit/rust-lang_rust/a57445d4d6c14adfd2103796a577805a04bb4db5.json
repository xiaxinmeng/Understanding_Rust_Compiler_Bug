{"sha": "a57445d4d6c14adfd2103796a577805a04bb4db5", "node_id": "C_kwDOAAsO6NoAKGE1NzQ0NWQ0ZDZjMTRhZGZkMjEwMzc5NmE1Nzc4MDVhMDRiYjRkYjU", "commit": {"author": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-17T04:59:31Z"}, "committer": {"name": "Centri3", "email": "114838443+Centri3@users.noreply.github.com", "date": "2023-04-17T04:59:31Z"}, "message": "make cargo test pass, again", "tree": {"sha": "13ed766fdad78b88a21c3713df2f4d2084d53358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13ed766fdad78b88a21c3713df2f4d2084d53358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a57445d4d6c14adfd2103796a577805a04bb4db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a57445d4d6c14adfd2103796a577805a04bb4db5", "html_url": "https://github.com/rust-lang/rust/commit/a57445d4d6c14adfd2103796a577805a04bb4db5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a57445d4d6c14adfd2103796a577805a04bb4db5/comments", "author": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centri3", "id": 114838443, "node_id": "U_kgDOBthLqw", "avatar_url": "https://avatars.githubusercontent.com/u/114838443?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centri3", "html_url": "https://github.com/Centri3", "followers_url": "https://api.github.com/users/Centri3/followers", "following_url": "https://api.github.com/users/Centri3/following{/other_user}", "gists_url": "https://api.github.com/users/Centri3/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centri3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centri3/subscriptions", "organizations_url": "https://api.github.com/users/Centri3/orgs", "repos_url": "https://api.github.com/users/Centri3/repos", "events_url": "https://api.github.com/users/Centri3/events{/privacy}", "received_events_url": "https://api.github.com/users/Centri3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7c3301b5884b33fc87f2e498f28426dfbcb1a84", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c3301b5884b33fc87f2e498f28426dfbcb1a84", "html_url": "https://github.com/rust-lang/rust/commit/a7c3301b5884b33fc87f2e498f28426dfbcb1a84"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "c9689454c63b069b4398fff251746967023c45d6", "filename": "clippy_lints/src/semicolon_block.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a57445d4d6c14adfd2103796a577805a04bb4db5/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57445d4d6c14adfd2103796a577805a04bb4db5/clippy_lints%2Fsrc%2Fsemicolon_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_block.rs?ref=a57445d4d6c14adfd2103796a577805a04bb4db5", "patch": "@@ -72,7 +72,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Why is this bad?\n     ///\n-    /// Some may prefer if the  semicolon is outside if a block is only one\n+    /// Some may prefer if the semicolon is outside if a block is only one\n     /// expression, as this allows rustfmt to make it singleline. In the case that\n     /// it isn't, it should be inside.\n     /// Take a look at both `semicolon_inside_block` and `semicolon_outside_block` for alternatives.\n@@ -125,14 +125,14 @@ impl LateLintPass<'_> for SemicolonBlock {\n                     ..\n                 } = stmt else { return };\n                 semicolon_outside_block(cx, block, expr, span);\n-                semicolon_outside_block_if_singleline_check_outside(cx, block, expr, stmt.span)\n+                semicolon_outside_block_if_singleline_check_outside(cx, block, expr, stmt.span);\n             },\n             StmtKind::Semi(Expr {\n                 kind: ExprKind::Block(block @ Block { expr: Some(tail), .. }, _),\n                 ..\n             }) if !block.span.from_expansion() => {\n                 semicolon_inside_block(cx, block, tail, stmt.span);\n-                semicolon_outside_block_if_singleline_check_inside(cx, block, tail, stmt.span)\n+                semicolon_outside_block_if_singleline_check_inside(cx, block, tail, stmt.span);\n             },\n             _ => (),\n         }\n@@ -197,7 +197,7 @@ fn semicolon_outside_block_if_singleline_check_inside(\n             cx,\n             SEMICOLON_OUTSIDE_BLOCK_IF_SINGLELINE,\n             block.span,\n-            &format!(\"consider moving the `;` inside the block for consistent formatting\"),\n+            \"consider moving the `;` inside the block for consistent formatting\",\n             |diag| {\n                 multispan_sugg_with_applicability(\n                     diag,\n@@ -228,7 +228,7 @@ fn semicolon_outside_block_if_singleline_check_outside(\n             cx,\n             SEMICOLON_OUTSIDE_BLOCK_IF_SINGLELINE,\n             block.span,\n-            &format!(\"consider moving the `;` outside the block for consistent formatting\"),\n+            \"consider moving the `;` outside the block for consistent formatting\",\n             |diag| {\n                 multispan_sugg_with_applicability(\n                     diag,"}]}