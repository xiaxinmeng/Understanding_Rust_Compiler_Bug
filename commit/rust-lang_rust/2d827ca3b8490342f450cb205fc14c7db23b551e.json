{"sha": "2d827ca3b8490342f450cb205fc14c7db23b551e", "node_id": "C_kwDOAAsO6NoAKDJkODI3Y2EzYjg0OTAzNDJmNDUwY2IyMDVmYzE0YzdkYjIzYjU1MWU", "commit": {"author": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2021-10-09T19:15:14Z"}, "committer": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2021-10-09T19:18:01Z"}, "message": "Simplified 3 ifs found by clippy.", "tree": {"sha": "abff19d43bc6cc3db7b65b37332c0c00559bb8fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abff19d43bc6cc3db7b65b37332c0c00559bb8fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d827ca3b8490342f450cb205fc14c7db23b551e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d827ca3b8490342f450cb205fc14c7db23b551e", "html_url": "https://github.com/rust-lang/rust/commit/2d827ca3b8490342f450cb205fc14c7db23b551e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d827ca3b8490342f450cb205fc14c7db23b551e/comments", "author": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2a522f4232c155bca29befc8c2800e906563c2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2a522f4232c155bca29befc8c2800e906563c2a", "html_url": "https://github.com/rust-lang/rust/commit/d2a522f4232c155bca29befc8c2800e906563c2a"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "4470272a9f86672adcf1fbf168723040f89bd8e8", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2d827ca3b8490342f450cb205fc14c7db23b551e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d827ca3b8490342f450cb205fc14c7db23b551e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=2d827ca3b8490342f450cb205fc14c7db23b551e", "patch": "@@ -232,10 +232,8 @@ impl<'test> TestCx<'test> {\n     /// Code executed for each revision in turn (or, if there are no\n     /// revisions, exactly once, with revision == None).\n     fn run_revision(&self) {\n-        if self.props.should_ice {\n-            if self.config.mode != Incremental {\n-                self.fatal(\"cannot use should-ice in a test that is not cfail\");\n-            }\n+        if self.props.should_ice && self.config.mode != Incremental {\n+            self.fatal(\"cannot use should-ice in a test that is not cfail\");\n         }\n         match self.config.mode {\n             RunPassValgrind => self.run_valgrind_test(),\n@@ -3162,11 +3160,10 @@ impl<'test> TestCx<'test> {\n                 if !proc_res.status.success() {\n                     self.fatal_proc_rec(\"test run failed!\", &proc_res);\n                 }\n-            } else {\n-                if proc_res.status.success() {\n-                    self.fatal_proc_rec(\"test run succeeded!\", &proc_res);\n-                }\n+            } else if proc_res.status.success() {\n+                self.fatal_proc_rec(\"test run succeeded!\", &proc_res);\n             }\n+\n             if !self.props.error_patterns.is_empty() {\n                 // \"// error-pattern\" comments\n                 self.check_error_patterns(&proc_res.stderr, &proc_res, pm);\n@@ -3213,10 +3210,11 @@ impl<'test> TestCx<'test> {\n             if !res.status.success() {\n                 self.fatal_proc_rec(\"failed to compile fixed code\", &res);\n             }\n-            if !res.stderr.is_empty() && !self.props.rustfix_only_machine_applicable {\n-                if !json::rustfix_diagnostics_only(&res.stderr).is_empty() {\n-                    self.fatal_proc_rec(\"fixed code is still producing diagnostics\", &res);\n-                }\n+            if !res.stderr.is_empty()\n+                && !self.props.rustfix_only_machine_applicable\n+                && !json::rustfix_diagnostics_only(&res.stderr).is_empty()\n+            {\n+                self.fatal_proc_rec(\"fixed code is still producing diagnostics\", &res);\n             }\n         }\n     }"}]}