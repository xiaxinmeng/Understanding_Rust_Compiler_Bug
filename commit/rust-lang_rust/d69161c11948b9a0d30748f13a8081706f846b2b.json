{"sha": "d69161c11948b9a0d30748f13a8081706f846b2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OTE2MWMxMTk0OGI5YTBkMzA3NDhmMTNhODA4MTcwNmY4NDZiMmI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-07-29T09:57:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-29T09:57:54Z"}, "message": "Rollup merge of #35087 - GuillaumeGomez:fs_docs, r=steveklabnik\n\nFs docs\n\nFixes #29356.\n\nr? @steveklabnik", "tree": {"sha": "20b31f35e12db3137a4a49505270625e8a58e48b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20b31f35e12db3137a4a49505270625e8a58e48b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d69161c11948b9a0d30748f13a8081706f846b2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d69161c11948b9a0d30748f13a8081706f846b2b", "html_url": "https://github.com/rust-lang/rust/commit/d69161c11948b9a0d30748f13a8081706f846b2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d69161c11948b9a0d30748f13a8081706f846b2b/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f06bf9afbf87ef4dca7ac09e438b67f5fa622af", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f06bf9afbf87ef4dca7ac09e438b67f5fa622af", "html_url": "https://github.com/rust-lang/rust/commit/3f06bf9afbf87ef4dca7ac09e438b67f5fa622af"}, {"sha": "123bf1e95d05282dc32d9a2403859dd827d84309", "url": "https://api.github.com/repos/rust-lang/rust/commits/123bf1e95d05282dc32d9a2403859dd827d84309", "html_url": "https://github.com/rust-lang/rust/commit/123bf1e95d05282dc32d9a2403859dd827d84309"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "38fd93501a528520f7b1ea951780f5209b966dba", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d69161c11948b9a0d30748f13a8081706f846b2b/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69161c11948b9a0d30748f13a8081706f846b2b/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=d69161c11948b9a0d30748f13a8081706f846b2b", "patch": "@@ -694,6 +694,23 @@ impl Metadata {\n     ///\n     /// This field may not be available on all platforms, and will return an\n     /// `Err` on platforms where it is not available.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// use std::fs;\n+    ///\n+    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    ///\n+    /// if let Ok(time) = metadata.modified() {\n+    ///     println!(\"{:?}\", time);\n+    /// } else {\n+    ///     println!(\"Not supported on this platform\");\n+    /// }\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"fs_time\", since = \"1.10.0\")]\n     pub fn modified(&self) -> io::Result<SystemTime> {\n         self.0.modified().map(FromInner::from_inner)\n@@ -712,6 +729,23 @@ impl Metadata {\n     ///\n     /// This field may not be available on all platforms, and will return an\n     /// `Err` on platforms where it is not available.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// use std::fs;\n+    ///\n+    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    ///\n+    /// if let Ok(time) = metadata.accessed() {\n+    ///     println!(\"{:?}\", time);\n+    /// } else {\n+    ///     println!(\"Not supported on this platform\");\n+    /// }\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"fs_time\", since = \"1.10.0\")]\n     pub fn accessed(&self) -> io::Result<SystemTime> {\n         self.0.accessed().map(FromInner::from_inner)\n@@ -726,6 +760,23 @@ impl Metadata {\n     ///\n     /// This field may not be available on all platforms, and will return an\n     /// `Err` on platforms where it is not available.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// use std::fs;\n+    ///\n+    /// let metadata = try!(fs::metadata(\"foo.txt\"));\n+    ///\n+    /// if let Ok(time) = metadata.created() {\n+    ///     println!(\"{:?}\", time);\n+    /// } else {\n+    ///     println!(\"Not supported on this platform\");\n+    /// }\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"fs_time\", since = \"1.10.0\")]\n     pub fn created(&self) -> io::Result<SystemTime> {\n         self.0.created().map(FromInner::from_inner)"}, {"sha": "77587918ac94b0e83d9edb6f912d3227c54f719c", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d69161c11948b9a0d30748f13a8081706f846b2b/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69161c11948b9a0d30748f13a8081706f846b2b/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=d69161c11948b9a0d30748f13a8081706f846b2b", "patch": "@@ -25,15 +25,53 @@ use sys::platform::fs::MetadataExt as UnixMetadataExt;\n pub trait PermissionsExt {\n     /// Returns the underlying raw `mode_t` bits that are the standard Unix\n     /// permissions for this file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust,ignore\n+    /// use std::fs::File;\n+    /// use std::os::unix::fs::PermissionsExt;\n+    ///\n+    /// let f = try!(File::create(\"foo.txt\"));\n+    /// let metadata = try!(f.metadata());\n+    /// let permissions = metadata.permissions();\n+    ///\n+    /// println!(\"permissions: {}\", permissions.mode());\n+    /// ```\n     #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n     fn mode(&self) -> u32;\n \n     /// Sets the underlying raw bits for this set of permissions.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust,ignore\n+    /// use std::fs::File;\n+    /// use std::os::unix::fs::PermissionsExt;\n+    ///\n+    /// let f = try!(File::create(\"foo.txt\"));\n+    /// let metadata = try!(f.metadata());\n+    /// let mut permissions = metadata.permissions();\n+    ///\n+    /// permissions.set_mode(0o644); // Read/write for owner and read for others.\n+    /// assert_eq!(permissions.mode(), 0o644);\n+    /// ```\n     #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n     fn set_mode(&mut self, mode: u32);\n \n     /// Creates a new instance of `Permissions` from the given set of Unix\n     /// permission bits.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust,ignore\n+    /// use std::fs::Permissions;\n+    /// use std::os::unix::fs::PermissionsExt;\n+    ///\n+    /// // Read/write for owner and read for others.\n+    /// let permissions = Permissions::from_mode(0o644);\n+    /// assert_eq!(permissions.mode(), 0o644);\n+    /// ```\n     #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n     fn from_mode(mode: u32) -> Self;\n }\n@@ -63,6 +101,18 @@ pub trait OpenOptionsExt {\n     /// If no `mode` is set, the default of `0o666` will be used.\n     /// The operating system masks out bits with the systems `umask`, to produce\n     /// the final permissions.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust,ignore\n+    /// extern crate libc;\n+    /// use std::fs::OpenOptions;\n+    /// use std::os::unix::fs::OpenOptionsExt;\n+    ///\n+    /// let mut options = OpenOptions::new();\n+    /// options.mode(0o644); // Give read/write for owner and read for others.\n+    /// let file = options.open(\"foo.txt\");\n+    /// ```\n     #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n     fn mode(&mut self, mode: u32) -> &mut Self;\n "}]}