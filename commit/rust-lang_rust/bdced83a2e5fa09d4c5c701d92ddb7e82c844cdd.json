{"sha": "bdced83a2e5fa09d4c5c701d92ddb7e82c844cdd", "node_id": "C_kwDOAAsO6NoAKGJkY2VkODNhMmU1ZmEwOWQ0YzVjNzAxZDkyZGRiN2U4MmM4NDRjZGQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-09T18:27:20Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-09T18:55:11Z"}, "message": "Use ObligationCtxt in expected_inputs_for_expected_outputs", "tree": {"sha": "a0239a025b9b890392be2c9f8e79229eed2e4721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0239a025b9b890392be2c9f8e79229eed2e4721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdced83a2e5fa09d4c5c701d92ddb7e82c844cdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdced83a2e5fa09d4c5c701d92ddb7e82c844cdd", "html_url": "https://github.com/rust-lang/rust/commit/bdced83a2e5fa09d4c5c701d92ddb7e82c844cdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdced83a2e5fa09d4c5c701d92ddb7e82c844cdd/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9b259b5e94e4543b96dca236e3a1af5ec496c9", "html_url": "https://github.com/rust-lang/rust/commit/cc9b259b5e94e4543b96dca236e3a1af5ec496c9"}], "stats": {"total": 33, "additions": 7, "deletions": 26}, "files": [{"sha": "c2e1a799846997e4c17be135bbf8b4f12b57b2b6", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bdced83a2e5fa09d4c5c701d92ddb7e82c844cdd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdced83a2e5fa09d4c5c701d92ddb7e82c844cdd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=bdced83a2e5fa09d4c5c701d92ddb7e82c844cdd", "patch": "@@ -18,6 +18,7 @@ use rustc_infer::infer::canonical::{Canonical, OriginalQueryValues, QueryRespons\n use rustc_infer::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc_infer::infer::{InferOk, InferResult};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n+use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n@@ -32,9 +33,7 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n-use rustc_trait_selection::traits::{\n-    self, ObligationCause, ObligationCauseCode, TraitEngine, TraitEngineExt,\n-};\n+use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode, ObligationCtxt};\n \n use std::collections::hash_map::Entry;\n use std::slice;\n@@ -766,34 +765,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let expect_args = self\n             .fudge_inference_if_ok(|| {\n+                let ocx = ObligationCtxt::new(self);\n+\n                 // Attempt to apply a subtyping relationship between the formal\n                 // return type (likely containing type variables if the function\n                 // is polymorphic) and the expected return type.\n                 // No argument expectations are produced if unification fails.\n                 let origin = self.misc(call_span);\n-                let ures = self.at(&origin, self.param_env).sup(ret_ty, formal_ret);\n-\n-                // FIXME(#27336) can't use ? here, Try::from_error doesn't default\n-                // to identity so the resulting type is not constrained.\n-                match ures {\n-                    Ok(ok) => {\n-                        // Process any obligations locally as much as\n-                        // we can.  We don't care if some things turn\n-                        // out unconstrained or ambiguous, as we're\n-                        // just trying to get hints here.\n-                        let errors = self.save_and_restore_in_snapshot_flag(|_| {\n-                            let mut fulfill = <dyn TraitEngine<'_>>::new(self.tcx);\n-                            for obligation in ok.obligations {\n-                                fulfill.register_predicate_obligation(self, obligation);\n-                            }\n-                            fulfill.select_where_possible(self)\n-                        });\n-\n-                        if !errors.is_empty() {\n-                            return Err(());\n-                        }\n-                    }\n-                    Err(_) => return Err(()),\n+                ocx.sup(&origin, self.param_env, ret_ty, formal_ret)?;\n+                if !ocx.select_where_possible().is_empty() {\n+                    return Err(TypeError::Mismatch);\n                 }\n \n                 // Record all the argument types, with the substitutions"}]}