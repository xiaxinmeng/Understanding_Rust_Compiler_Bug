{"sha": "7870b296e45a3758ee3f8577303b24128695694f", "node_id": "C_kwDOAAsO6NoAKDc4NzBiMjk2ZTQ1YTM3NThlZTNmODU3NzMwM2IyNDEyODY5NTY5NGY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-09T11:16:07Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-10T09:26:01Z"}, "message": "Remove a couple of duplicate layout_of and monomorphize calls", "tree": {"sha": "f99a4c283cb3a44c46493d383fb8f6bfe4edb813", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f99a4c283cb3a44c46493d383fb8f6bfe4edb813"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7870b296e45a3758ee3f8577303b24128695694f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7870b296e45a3758ee3f8577303b24128695694f", "html_url": "https://github.com/rust-lang/rust/commit/7870b296e45a3758ee3f8577303b24128695694f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7870b296e45a3758ee3f8577303b24128695694f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdb066547945f0eaa9bec579ace72279866d8c0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb066547945f0eaa9bec579ace72279866d8c0d", "html_url": "https://github.com/rust-lang/rust/commit/bdb066547945f0eaa9bec579ace72279866d8c0d"}], "stats": {"total": 41, "additions": 16, "deletions": 25}, "files": [{"sha": "7b9f3e6761ac912b5f319b9dc6a3341b19f08d2c", "filename": "src/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7870b296e45a3758ee3f8577303b24128695694f/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870b296e45a3758ee3f8577303b24128695694f/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=7870b296e45a3758ee3f8577303b24128695694f", "patch": "@@ -275,10 +275,6 @@ pub(crate) fn codegen_fn_prelude<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, start_\n     self::comments::add_locals_header_comment(fx);\n \n     for (local, arg_kind, ty) in func_params {\n-        let layout = fx.layout_of(ty);\n-\n-        let is_ssa = ssa_analyzed[local] == crate::analyze::SsaKind::Ssa;\n-\n         // While this is normally an optimization to prevent an unnecessary copy when an argument is\n         // not mutated by the current function, this is necessary to support unsized arguments.\n         if let ArgKind::Normal(Some(val)) = arg_kind {\n@@ -300,6 +296,8 @@ pub(crate) fn codegen_fn_prelude<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, start_\n             }\n         }\n \n+        let layout = fx.layout_of(ty);\n+        let is_ssa = ssa_analyzed[local].is_ssa(fx, ty);\n         let place = make_local_place(fx, local, layout, is_ssa);\n         assert_eq!(fx.local_map.push(place), local);\n \n@@ -323,7 +321,7 @@ pub(crate) fn codegen_fn_prelude<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, start_\n         let ty = fx.monomorphize(fx.mir.local_decls[local].ty);\n         let layout = fx.layout_of(ty);\n \n-        let is_ssa = ssa_analyzed[local] == crate::analyze::SsaKind::Ssa;\n+        let is_ssa = ssa_analyzed[local].is_ssa(fx, ty);\n \n         let place = make_local_place(fx, local, layout, is_ssa);\n         assert_eq!(fx.local_map.push(place), local);"}, {"sha": "6d3e8eda276a4e29127a9ac988fa35ba0105cd73", "filename": "src/abi/returning.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7870b296e45a3758ee3f8577303b24128695694f/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870b296e45a3758ee3f8577303b24128695694f/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=7870b296e45a3758ee3f8577303b24128695694f", "patch": "@@ -14,7 +14,8 @@ pub(super) fn codegen_return_param<'tcx>(\n ) -> CPlace<'tcx> {\n     let (ret_place, ret_param): (_, SmallVec<[_; 2]>) = match fx.fn_abi.as_ref().unwrap().ret.mode {\n         PassMode::Ignore | PassMode::Direct(_) | PassMode::Pair(_, _) | PassMode::Cast(..) => {\n-            let is_ssa = ssa_analyzed[RETURN_PLACE] == crate::analyze::SsaKind::Ssa;\n+            let is_ssa =\n+                ssa_analyzed[RETURN_PLACE].is_ssa(fx, fx.fn_abi.as_ref().unwrap().ret.layout.ty);\n             (\n                 super::make_local_place(\n                     fx,"}, {"sha": "54d5c1c2ae9e9169f7c841e0d8bc5fa675d4573c", "filename": "src/analyze.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7870b296e45a3758ee3f8577303b24128695694f/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870b296e45a3758ee3f8577303b24128695694f/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=7870b296e45a3758ee3f8577303b24128695694f", "patch": "@@ -4,34 +4,30 @@ use crate::prelude::*;\n \n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::StatementKind::*;\n+use rustc_middle::ty::Ty;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub(crate) enum SsaKind {\n     NotSsa,\n-    Ssa,\n+    MaybeSsa,\n+}\n+\n+impl SsaKind {\n+    pub(crate) fn is_ssa<'tcx>(self, fx: &FunctionCx<'_, '_, 'tcx>, ty: Ty<'tcx>) -> bool {\n+        self == SsaKind::MaybeSsa && (fx.clif_type(ty).is_some() || fx.clif_pair_type(ty).is_some())\n+    }\n }\n \n pub(crate) fn analyze(fx: &FunctionCx<'_, '_, '_>) -> IndexVec<Local, SsaKind> {\n-    let mut flag_map = fx\n-        .mir\n-        .local_decls\n-        .iter()\n-        .map(|local_decl| {\n-            let ty = fx.monomorphize(local_decl.ty);\n-            if fx.clif_type(ty).is_some() || fx.clif_pair_type(ty).is_some() {\n-                SsaKind::Ssa\n-            } else {\n-                SsaKind::NotSsa\n-            }\n-        })\n-        .collect::<IndexVec<Local, SsaKind>>();\n+    let mut flag_map =\n+        fx.mir.local_decls.iter().map(|_| SsaKind::MaybeSsa).collect::<IndexVec<Local, SsaKind>>();\n \n     for bb in fx.mir.basic_blocks.iter() {\n         for stmt in bb.statements.iter() {\n             match &stmt.kind {\n                 Assign(place_and_rval) => match &place_and_rval.1 {\n                     Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n-                        not_ssa(&mut flag_map, place.local)\n+                        flag_map[place.local] = SsaKind::NotSsa;\n                     }\n                     _ => {}\n                 },\n@@ -42,7 +38,3 @@ pub(crate) fn analyze(fx: &FunctionCx<'_, '_, '_>) -> IndexVec<Local, SsaKind> {\n \n     flag_map\n }\n-\n-fn not_ssa(flag_map: &mut IndexVec<Local, SsaKind>, local: Local) {\n-    flag_map[local] = SsaKind::NotSsa;\n-}"}]}