{"sha": "6cfeb1fa782e18ec48245b4facc1dcf240667b47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZmViMWZhNzgyZTE4ZWM0ODI0NWI0ZmFjYzFkY2YyNDA2NjdiNDc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-10-27T09:47:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-27T09:47:03Z"}, "message": "Merge pull request #2041 from osa1/match_arm_newline\n\n[not ready] Implement match_arm_forces_newline option (#2039)", "tree": {"sha": "49953de0b6826266d3abd80641fdbc232ae4402f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49953de0b6826266d3abd80641fdbc232ae4402f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cfeb1fa782e18ec48245b4facc1dcf240667b47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cfeb1fa782e18ec48245b4facc1dcf240667b47", "html_url": "https://github.com/rust-lang/rust/commit/6cfeb1fa782e18ec48245b4facc1dcf240667b47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cfeb1fa782e18ec48245b4facc1dcf240667b47/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a59654b4191b4ed1c71575e7fdfe0dac5c8b4a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a59654b4191b4ed1c71575e7fdfe0dac5c8b4a3", "html_url": "https://github.com/rust-lang/rust/commit/0a59654b4191b4ed1c71575e7fdfe0dac5c8b4a3"}, {"sha": "48bdecf99d33772488fa216ddd3dfe379d9ce4c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/48bdecf99d33772488fa216ddd3dfe379d9ce4c1", "html_url": "https://github.com/rust-lang/rust/commit/48bdecf99d33772488fa216ddd3dfe379d9ce4c1"}], "stats": {"total": 129, "additions": 123, "deletions": 6}, "files": [{"sha": "bd67caef09fcda5b79cb3da6f3f9c51bbf98d83e", "filename": "Configurations.md", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6cfeb1fa782e18ec48245b4facc1dcf240667b47/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/6cfeb1fa782e18ec48245b4facc1dcf240667b47/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=6cfeb1fa782e18ec48245b4facc1dcf240667b47", "patch": "@@ -1229,6 +1229,48 @@ struct Dolor<T>\n }\n ```\n \n+## `match_arm_forces_newline`\n+\n+Consistently put match arms (block based or not) in a newline.\n+\n+- **Default value**: `false`\n+- **Possible values**: `true`, `false`\n+\n+#### `false` (default):\n+\n+```rust\n+match x {\n+    // a non-empty block\n+    X0 => {\n+        f();\n+    }\n+    // an empty block\n+    X1 => {}\n+    // a non-block\n+    X2 => println!(\"ok\"),\n+}\n+```\n+\n+#### `true`:\n+\n+```rust\n+match x {\n+    // a non-empty block\n+    X0 => {\n+        f();\n+    }\n+    // an empty block\n+    X1 =>\n+        {}\n+    // a non-block\n+    X2 => {\n+        println!(\"ok\")\n+    }\n+}\n+```\n+\n+See also: [`wrap_match_arms`](#wrap_match_arms).\n+\n ## `match_block_trailing_comma`\n \n Put a trailing comma after a block based match arm (non-block arms are not affected)"}, {"sha": "8c200302c5b0894bb017e22c812231752ba782d6", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6cfeb1fa782e18ec48245b4facc1dcf240667b47/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cfeb1fa782e18ec48245b4facc1dcf240667b47/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=6cfeb1fa782e18ec48245b4facc1dcf240667b47", "patch": "@@ -597,6 +597,8 @@ create_config! {\n                                   the same line with the pattern of arms\";\n     match_block_trailing_comma: bool, false,\n         \"Put a trailing comma after a block based match arm (non-block arms are not affected)\";\n+    match_arm_forces_newline: bool, false,\n+        \"Force match arm bodies to be in a new lines\";\n     indent_match_arms: bool, true, \"Indent match arms instead of keeping them at the same \\\n                                     indentation level as the match keyword\";\n     match_pattern_separator_break_point: SeparatorPlace, SeparatorPlace::Back,"}, {"sha": "68bffb3d1da8230a45b9ce30d449e75cce4f279c", "filename": "src/expr.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6cfeb1fa782e18ec48245b4facc1dcf240667b47/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cfeb1fa782e18ec48245b4facc1dcf240667b47/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=6cfeb1fa782e18ec48245b4facc1dcf240667b47", "patch": "@@ -1695,15 +1695,20 @@ fn rewrite_match_body(\n     is_last: bool,\n ) -> Option<String> {\n     let (extend, body) = flatten_arm_body(context, body);\n-\n-    let comma = arm_comma(context.config, body, is_last);\n-    let alt_block_sep = String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n-    let alt_block_sep = alt_block_sep.as_str();\n     let (is_block, is_empty_block) = if let ast::ExprKind::Block(ref block) = body.node {\n         (true, is_empty_block(block, context.codemap))\n     } else {\n         (false, false)\n     };\n+    let extend = if context.config.match_arm_forces_newline() {\n+        is_block\n+    } else {\n+        extend\n+    };\n+\n+    let comma = arm_comma(context.config, body, is_last);\n+    let alt_block_sep = String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n+    let alt_block_sep = alt_block_sep.as_str();\n \n     let combine_orig_body = |body_str: &str| {\n         let block_sep = match context.config.control_brace_style() {\n@@ -1716,7 +1721,11 @@ fn rewrite_match_body(\n \n     let forbid_same_line = has_guard && pats_str.contains('\\n') && !is_empty_block;\n     let next_line_indent = if is_block {\n-        shape.indent\n+        if is_empty_block {\n+            shape.indent.block_indent(context.config)\n+        } else {\n+            shape.indent\n+        }\n     } else {\n         shape.indent.block_indent(context.config)\n     };\n@@ -1772,7 +1781,7 @@ fn rewrite_match_body(\n \n         match rewrite {\n             Some(ref body_str)\n-                if !forbid_same_line\n+                if !forbid_same_line && !context.config.match_arm_forces_newline()\n                     && (is_block\n                         || (!body_str.contains('\\n') && body_str.len() <= body_shape.width)) =>\n             {"}, {"sha": "e9c8d575f1df67532ba4255f17a70773bffde0e5", "filename": "tests/source/configs-match_arm_forces_newline-true.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6cfeb1fa782e18ec48245b4facc1dcf240667b47/tests%2Fsource%2Fconfigs-match_arm_forces_newline-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cfeb1fa782e18ec48245b4facc1dcf240667b47/tests%2Fsource%2Fconfigs-match_arm_forces_newline-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-match_arm_forces_newline-true.rs?ref=6cfeb1fa782e18ec48245b4facc1dcf240667b47", "patch": "@@ -0,0 +1,20 @@\n+// rustfmt-match_arm_forces_newline: true\n+// rustfmt-wrap_match_arms: false\n+\n+// match_arm_forces_newline puts all match arms bodies in a newline and indents\n+// them.\n+\n+fn main() {\n+    match x() {\n+        // a short non-empty block\n+        X0 => { f(); }\n+        // a long non-empty block\n+        X1 => { some.really.long.expression.fooooooooooooooooooooooooooooooooooooooooo().baaaaarrrrrrrrrrrrrrrrrrrrrrrrrr(); }\n+        // an empty block\n+        X2 => {}\n+        // a short non-block\n+        X3 => println!(\"ok\"),\n+        // a long non-block\n+        X4 => foo.bar.baz.test.x.y.z.a.s.d.fasdfasdf.asfads.fasd.fasdfasdf.dfasfdsaf(),\n+    }\n+}"}, {"sha": "5629a56d66462063583f77386a02463c91ac3464", "filename": "tests/target/configs-match_arm_forces_newline-true.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6cfeb1fa782e18ec48245b4facc1dcf240667b47/tests%2Ftarget%2Fconfigs-match_arm_forces_newline-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cfeb1fa782e18ec48245b4facc1dcf240667b47/tests%2Ftarget%2Fconfigs-match_arm_forces_newline-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-match_arm_forces_newline-true.rs?ref=6cfeb1fa782e18ec48245b4facc1dcf240667b47", "patch": "@@ -0,0 +1,44 @@\n+// rustfmt-match_arm_forces_newline: true\n+// rustfmt-wrap_match_arms: false\n+\n+// match_arm_forces_newline puts all match arms bodies in a newline and indents\n+// them.\n+\n+fn main() {\n+    match x() {\n+        // a short non-empty block\n+        X0 => {\n+            f();\n+        }\n+        // a long non-empty block\n+        X1 => {\n+            some.really\n+                .long\n+                .expression\n+                .fooooooooooooooooooooooooooooooooooooooooo()\n+                .baaaaarrrrrrrrrrrrrrrrrrrrrrrrrr();\n+        }\n+        // an empty block\n+        X2 =>\n+            {}\n+        // a short non-block\n+        X3 =>\n+            println!(\"ok\"),\n+        // a long non-block\n+        X4 =>\n+            foo.bar\n+                .baz\n+                .test\n+                .x\n+                .y\n+                .z\n+                .a\n+                .s\n+                .d\n+                .fasdfasdf\n+                .asfads\n+                .fasd\n+                .fasdfasdf\n+                .dfasfdsaf(),\n+    }\n+}"}]}