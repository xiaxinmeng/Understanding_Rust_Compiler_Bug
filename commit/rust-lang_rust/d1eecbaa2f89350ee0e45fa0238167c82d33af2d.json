{"sha": "d1eecbaa2f89350ee0e45fa0238167c82d33af2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZWVjYmFhMmY4OTM1MGVlMGU0NWZhMDIzODE2N2M4MmQzM2FmMmQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-18T18:54:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-18T18:54:18Z"}, "message": "Merge pull request #1965 from montrivo/use_self\n\nlint #1674: replace struct name with `Self` when applicable", "tree": {"sha": "346003fd479d8c4658da4e887fffc43b97c6970d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/346003fd479d8c4658da4e887fffc43b97c6970d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1eecbaa2f89350ee0e45fa0238167c82d33af2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1eecbaa2f89350ee0e45fa0238167c82d33af2d", "html_url": "https://github.com/rust-lang/rust/commit/d1eecbaa2f89350ee0e45fa0238167c82d33af2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1eecbaa2f89350ee0e45fa0238167c82d33af2d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2504faf0ec556584c59acdf1b64c2fd27c1328f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2504faf0ec556584c59acdf1b64c2fd27c1328f", "html_url": "https://github.com/rust-lang/rust/commit/d2504faf0ec556584c59acdf1b64c2fd27c1328f"}, {"sha": "7aebe3a69046d5f78f614ba80f0db3fe0b0b719b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aebe3a69046d5f78f614ba80f0db3fe0b0b719b", "html_url": "https://github.com/rust-lang/rust/commit/7aebe3a69046d5f78f614ba80f0db3fe0b0b719b"}], "stats": {"total": 178, "additions": 178, "deletions": 0}, "files": [{"sha": "a8f1b1664b000560e78f6a987bd40a883b5d9e26", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1eecbaa2f89350ee0e45fa0238167c82d33af2d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1eecbaa2f89350ee0e45fa0238167c82d33af2d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d1eecbaa2f89350ee0e45fa0238167c82d33af2d", "patch": "@@ -148,6 +148,7 @@ pub mod unicode;\n pub mod unsafe_removed_from_name;\n pub mod unused_io_amount;\n pub mod unused_label;\n+pub mod use_self;\n pub mod vec;\n pub mod zero_div_zero;\n // end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n@@ -319,6 +320,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box should_assert_eq::ShouldAssertEq);\n     reg.register_late_lint_pass(box needless_pass_by_value::NeedlessPassByValue);\n     reg.register_early_lint_pass(box literal_digit_grouping::LiteralDigitGrouping);\n+    reg.register_late_lint_pass(box use_self::UseSelf);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,"}, {"sha": "2a94d8fe9cc5104602ff83603c88fc971eff30c9", "filename": "clippy_lints/src/use_self.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d1eecbaa2f89350ee0e45fa0238167c82d33af2d/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1eecbaa2f89350ee0e45fa0238167c82d33af2d/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=d1eecbaa2f89350ee0e45fa0238167c82d33af2d", "patch": "@@ -0,0 +1,91 @@\n+use rustc::lint::{LintArray, LateLintPass, LateContext, LintPass};\n+use rustc::hir::*;\n+use rustc::hir::intravisit::{Visitor, walk_path, NestedVisitorMap};\n+use utils::span_lint_and_then;\n+use syntax::ast::NodeId;\n+use syntax_pos::symbol::keywords::SelfType;\n+\n+/// **What it does:** Checks for unnecessary repetition of structure name when a\n+/// replacement with `Self` is applicable.\n+///\n+/// **Why is this bad?** Unnecessary repetition. Mixed use of `Self` and struct name\n+/// feels inconsistent.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// struct Foo {}\n+/// impl Foo {\n+///     fn new() -> Foo {\n+///         Foo {}\n+///     }\n+/// }\n+/// ```\n+/// could be\n+/// ```\n+/// struct Foo {}\n+/// impl Foo {\n+///     fn new() -> Self {\n+///         Self {}\n+///     }\n+/// }\n+/// ```\n+declare_lint! {\n+    pub USE_SELF,\n+    Allow,\n+    \"Unnecessary structure name repetition whereas `Self` is applicable\"\n+}\n+\n+#[derive(Copy, Clone, Default)]\n+pub struct UseSelf;\n+\n+impl LintPass for UseSelf {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(USE_SELF)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+        if_let_chain!([\n+            let ItemImpl(.., ref item_type, ref refs) = item.node,\n+            let Ty_::TyPath(QPath::Resolved(_, ref item_path)) = item_type.node,\n+        ], {\n+            let visitor = &mut UseSelfVisitor {\n+                item_path: item_path,\n+                cx: cx,\n+            };\n+            for impl_item_ref in refs {\n+                visitor.visit_impl_item(cx.tcx.hir.impl_item(impl_item_ref.id));\n+            }\n+        })\n+    }\n+}\n+\n+struct UseSelfVisitor<'a, 'tcx: 'a> {\n+    item_path: &'a Path,\n+    cx: &'a LateContext<'a, 'tcx>,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n+    fn visit_path(&mut self, path: &'tcx Path, _id: NodeId) {\n+        if self.item_path.def == path.def &&\n+           path.segments\n+            .last()\n+            .expect(\"segments should be composed of at least 1 element\")\n+            .name != SelfType.name() {\n+            span_lint_and_then(self.cx, USE_SELF, path.span, \"unnecessary structure name repetition\", |db| {\n+                db.span_suggestion(path.span,\n+                                   \"use the applicable keyword\",\n+                                   \"Self\".to_owned());\n+            });\n+        }\n+\n+        walk_path(self, path);\n+    }\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.cx.tcx.hir)\n+    }\n+}"}, {"sha": "40cef1a9362af3c9b9a85b181eb5a501ff256117", "filename": "tests/ui/use_self.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d1eecbaa2f89350ee0e45fa0238167c82d33af2d/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1eecbaa2f89350ee0e45fa0238167c82d33af2d/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=d1eecbaa2f89350ee0e45fa0238167c82d33af2d", "patch": "@@ -0,0 +1,45 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![warn(use_self)]\n+#![allow(dead_code)]\n+\n+\n+fn main() {}\n+\n+mod use_self {\n+    struct Foo {}\n+\n+    impl Foo {\n+        fn new() -> Foo {\n+            Foo {}\n+        }\n+        fn test() -> Foo {\n+            Foo::new()\n+        }\n+    }\n+\n+    impl Default for Foo {\n+        fn default() -> Foo {\n+            Foo::new()\n+        }\n+    }\n+}\n+\n+mod better {\n+    struct Foo {}\n+\n+    impl Foo {\n+        fn new() -> Self {\n+            Self {}\n+        }\n+        fn test() -> Self {\n+            Self::new()\n+        }\n+    }\n+\n+    impl Default for Foo {\n+        fn default() -> Self {\n+            Self::new()\n+        }\n+    }\n+}"}, {"sha": "0cbd574b506401e875482f78ab919dd716ed201a", "filename": "tests/ui/use_self.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d1eecbaa2f89350ee0e45fa0238167c82d33af2d/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1eecbaa2f89350ee0e45fa0238167c82d33af2d/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=d1eecbaa2f89350ee0e45fa0238167c82d33af2d", "patch": "@@ -0,0 +1,40 @@\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:13:21\n+   |\n+13 |         fn new() -> Foo {\n+   |                     ^^^ help: use the applicable keyword: `Self`\n+   |\n+   = note: `-D use-self` implied by `-D warnings`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:14:13\n+   |\n+14 |             Foo {}\n+   |             ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:16:22\n+   |\n+16 |         fn test() -> Foo {\n+   |                      ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:17:13\n+   |\n+17 |             Foo::new()\n+   |             ^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:22:25\n+   |\n+22 |         fn default() -> Foo {\n+   |                         ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:23:13\n+   |\n+23 |             Foo::new()\n+   |             ^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 6 previous errors\n+"}]}