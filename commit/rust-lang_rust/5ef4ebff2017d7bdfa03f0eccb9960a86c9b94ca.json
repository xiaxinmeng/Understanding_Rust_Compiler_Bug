{"sha": "5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZjRlYmZmMjAxN2Q3YmRmYTAzZjBlY2NiOTk2MGE4NmM5Yjk0Y2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-21T22:28:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-21T22:28:49Z"}, "message": "Use WorkspaceEdit for ssr", "tree": {"sha": "6458549d833ba628fd86d050cb5dd1238c590fc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6458549d833ba628fd86d050cb5dd1238c590fc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca", "html_url": "https://github.com/rust-lang/rust/commit/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59732df8d40dfadc6dcf5951265416576399712a", "url": "https://api.github.com/repos/rust-lang/rust/commits/59732df8d40dfadc6dcf5951265416576399712a", "html_url": "https://github.com/rust-lang/rust/commit/59732df8d40dfadc6dcf5951265416576399712a"}], "stats": {"total": 52, "additions": 43, "deletions": 9}, "files": [{"sha": "13af75469d6922d4f838a0f3f1fe14fcb18b4b46", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca", "patch": "@@ -94,6 +94,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n         ),\n         experimental: Some(json!({\n             \"joinLines\": true,\n+            \"ssr\": true,\n         })),\n     }\n }"}, {"sha": "0fd60caf4d28cced67f266cdacd13d6a5f8ae036", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca", "patch": "@@ -173,8 +173,8 @@ pub enum Ssr {}\n \n impl Request for Ssr {\n     type Params = SsrParams;\n-    type Result = SourceChange;\n-    const METHOD: &'static str = \"rust-analyzer/ssr\";\n+    type Result = lsp_types::WorkspaceEdit;\n+    const METHOD: &'static str = \"experimental/ssr\";\n }\n \n #[derive(Debug, Deserialize, Serialize)]"}, {"sha": "25e660bd5700423377a598739baa8a974238dfee", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca", "patch": "@@ -986,11 +986,11 @@ pub fn handle_document_highlight(\n pub fn handle_ssr(\n     world: WorldSnapshot,\n     params: lsp_ext::SsrParams,\n-) -> Result<lsp_ext::SourceChange> {\n+) -> Result<lsp_types::WorkspaceEdit> {\n     let _p = profile(\"handle_ssr\");\n     let source_change =\n         world.analysis().structural_search_replace(&params.query, params.parse_only)??;\n-    to_proto::source_change(&world, source_change)\n+    to_proto::workspace_edit(&world, source_change)\n }\n \n pub fn publish_diagnostics(world: &WorldSnapshot, file_id: FileId) -> Result<DiagnosticTask> {"}, {"sha": "7c45aef4c1ab3d28a3a46f28caf3f2e2f99e59eb", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca", "patch": "@@ -84,3 +84,38 @@ fn main() {\n * What is the position of the cursor after `joinLines`?\n   Currently this is left to editor's discretion, but it might be useful to specify on the server via snippets.\n   However, it then becomes unclear how it works with multi cursor.\n+\n+## Structural Search Replace (SSR)\n+\n+**Server Capability:** `{ \"ssr\": boolean }`\n+\n+This request is send from client to server to handle structural search replace -- automated syntax tree based transformation of the source.\n+\n+**Method:** `experimental/ssr`\n+\n+**Request:**\n+\n+```typescript\n+interface SsrParams {\n+    /// Search query.\n+    /// The specific syntax is specified outside of the protocol.\n+    query: string,\n+    /// If true, only check the syntax of the query and don't compute the actual edit.\n+    parseOnly: bool,\n+}\n+```\n+\n+**Response:**\n+\n+```typescript\n+WorkspaceEdit\n+```\n+\n+### Example\n+\n+SSR with query `foo($a:expr, $b:expr) ==>> ($a).foo($b)` will transform, eg `foo(y + 5, z)` into `(y + 5).foo(z)`.\n+\n+### Unresolved Question\n+\n+* Probably needs search without replace mode\n+* Needs a way to limit the scope to certain files."}, {"sha": "5d40a64d28e9067548f5e528a89749484c95fbea", "filename": "editors/code/src/commands/ssr.ts", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fssr.ts?ref=5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca", "patch": "@@ -2,7 +2,6 @@ import * as vscode from 'vscode';\n import * as ra from \"../rust-analyzer-api\";\n \n import { Ctx, Cmd } from '../ctx';\n-import { applySourceChange } from '../source_change';\n \n export function ssr(ctx: Ctx): Cmd {\n     return async () => {\n@@ -22,11 +21,10 @@ export function ssr(ctx: Ctx): Cmd {\n             }\n         };\n         const request = await vscode.window.showInputBox(options);\n-\n         if (!request) return;\n \n-        const change = await client.sendRequest(ra.ssr, { query: request, parseOnly: false });\n+        const edit = await client.sendRequest(ra.ssr, { query: request, parseOnly: false });\n \n-        await applySourceChange(ctx, change);\n+        await vscode.workspace.applyEdit(client.protocol2CodeConverter.asWorkspaceEdit(edit));\n     };\n }"}, {"sha": "73f36432f649b06f4c6dc25597ee9783d85e137a", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=5ef4ebff2017d7bdfa03f0eccb9960a86c9b94ca", "patch": "@@ -112,7 +112,7 @@ export interface SsrParams {\n     query: string;\n     parseOnly: boolean;\n }\n-export const ssr = request<SsrParams, SourceChange>(\"ssr\");\n+export const ssr = new lc.RequestType<SsrParams, lc.WorkspaceEdit, unknown>('experimental/ssr');\n \n \n export const publishDecorations = notification<PublishDecorationsParams>(\"publishDecorations\");"}]}