{"sha": "bd8422643ad381fa603d569d0553723c1aa4cd1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkODQyMjY0M2FkMzgxZmE2MDNkNTY5ZDA1NTM3MjNjMWFhNGNkMWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-10T17:09:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-10T17:09:22Z"}, "message": "to_proto::semantic_tokens", "tree": {"sha": "64b2f5004cbcc7b2233b364fae0694ffc7de9ce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64b2f5004cbcc7b2233b364fae0694ffc7de9ce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd8422643ad381fa603d569d0553723c1aa4cd1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8422643ad381fa603d569d0553723c1aa4cd1e", "html_url": "https://github.com/rust-lang/rust/commit/bd8422643ad381fa603d569d0553723c1aa4cd1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd8422643ad381fa603d569d0553723c1aa4cd1e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1586bab0b97bef411e6187dfc389557edbc5a16e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1586bab0b97bef411e6187dfc389557edbc5a16e", "html_url": "https://github.com/rust-lang/rust/commit/1586bab0b97bef411e6187dfc389557edbc5a16e"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "4f619654fca603f44d1748a7331868ac7b22106c", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bd8422643ad381fa603d569d0553723c1aa4cd1e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8422643ad381fa603d569d0553723c1aa4cd1e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=bd8422643ad381fa603d569d0553723c1aa4cd1e", "patch": "@@ -35,7 +35,6 @@ use crate::{\n     diagnostics::DiagnosticTask,\n     from_json, from_proto,\n     req::{self, InlayHint, InlayHintsParams},\n-    semantic_tokens::SemanticTokensBuilder,\n     to_proto,\n     world::WorldSnapshot,\n     LspError, Result,\n@@ -1147,23 +1146,9 @@ pub fn handle_semantic_tokens(\n     let text = world.analysis().file_text(file_id)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n \n-    let mut builder = SemanticTokensBuilder::default();\n-\n-    for highlight_range in world.analysis().highlight(file_id)?.into_iter() {\n-        let (token_index, modifier_bitset) =\n-            to_proto::token_type_index_modifiers_bitself(highlight_range.highlight);\n-        for mut range in line_index.lines(highlight_range.range) {\n-            if text[range].ends_with('\\n') {\n-                range = TextRange::new(range.start(), range.end() - TextSize::of('\\n'));\n-            }\n-            let range = to_proto::range(&line_index, range);\n-            builder.push(range, token_index, modifier_bitset);\n-        }\n-    }\n-\n-    let tokens = builder.build();\n-\n-    Ok(Some(tokens.into()))\n+    let highlights = world.analysis().highlight(file_id)?;\n+    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n+    Ok(Some(semantic_tokens.into()))\n }\n \n pub fn handle_semantic_tokens_range(\n@@ -1173,18 +1158,10 @@ pub fn handle_semantic_tokens_range(\n     let _p = profile(\"handle_semantic_tokens_range\");\n \n     let frange = from_proto::file_range(&world, params.text_document, params.range)?;\n+    let text = world.analysis().file_text(frange.file_id)?;\n     let line_index = world.analysis().file_line_index(frange.file_id)?;\n \n-    let mut builder = SemanticTokensBuilder::default();\n-\n-    for highlight_range in world.analysis().highlight_range(frange)?.into_iter() {\n-        let (token_type, token_modifiers) =\n-            to_proto::token_type_index_modifiers_bitself(highlight_range.highlight);\n-        let range = to_proto::range(&line_index, highlight_range.range);\n-        builder.push(range, token_type, token_modifiers);\n-    }\n-\n-    let tokens = builder.build();\n-\n-    Ok(Some(tokens.into()))\n+    let highlights = world.analysis().highlight_range(frange)?;\n+    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n+    Ok(Some(semantic_tokens.into()))\n }"}, {"sha": "29b47608ea9a1cb0b6e5bfd3a30cdb4b6e3eef9f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bd8422643ad381fa603d569d0553723c1aa4cd1e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8422643ad381fa603d569d0553723c1aa4cd1e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=bd8422643ad381fa603d569d0553723c1aa4cd1e", "patch": "@@ -3,8 +3,8 @@ use ra_db::{FileId, FileRange};\n use ra_ide::{\n     translate_offset_with_edit, Assist, CompletionItem, CompletionItemKind, Documentation,\n     FileSystemEdit, Fold, FoldKind, FunctionSignature, Highlight, HighlightModifier, HighlightTag,\n-    InlayHint, InlayKind, InsertTextFormat, LineIndex, NavigationTarget, ReferenceAccess, Severity,\n-    SourceChange, SourceFileEdit,\n+    HighlightedRange, InlayHint, InlayKind, InsertTextFormat, LineIndex, NavigationTarget,\n+    ReferenceAccess, Severity, SourceChange, SourceFileEdit,\n };\n use ra_syntax::{SyntaxKind, TextRange, TextSize};\n use ra_text_edit::{Indel, TextEdit};\n@@ -227,8 +227,30 @@ pub(crate) fn inlay_int(line_index: &LineIndex, inlay_hint: InlayHint) -> req::I\n     }\n }\n \n-// TODO: this is wrong\n-pub(crate) fn token_type_index_modifiers_bitself(highlight: Highlight) -> (u32, u32) {\n+pub(crate) fn semantic_tokens(\n+    text: &str,\n+    line_index: &LineIndex,\n+    highlights: Vec<HighlightedRange>,\n+) -> lsp_types::SemanticTokens {\n+    let mut builder = semantic_tokens::SemanticTokensBuilder::default();\n+\n+    for highlight_range in highlights {\n+        let (token_index, modifier_bitset) =\n+            token_type_index_modifiers_bitself(highlight_range.highlight);\n+        for mut text_range in line_index.lines(highlight_range.range) {\n+            if text[text_range].ends_with('\\n') {\n+                text_range =\n+                    TextRange::new(text_range.start(), text_range.end() - TextSize::of('\\n'));\n+            }\n+            let range = range(&line_index, text_range);\n+            builder.push(range, token_index, modifier_bitset);\n+        }\n+    }\n+\n+    builder.build()\n+}\n+\n+fn token_type_index_modifiers_bitself(highlight: Highlight) -> (u32, u32) {\n     let mut mods = semantic_tokens::ModifierSet::default();\n     let type_ = match highlight.tag {\n         HighlightTag::Struct => lsp_types::SemanticTokenType::STRUCT,"}]}