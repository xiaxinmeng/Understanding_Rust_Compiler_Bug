{"sha": "4b9acad7c66c9e9cb8f585ff7446872eec5c33de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiOWFjYWQ3YzY2YzllOWNiOGY1ODVmZjc0NDY4NzJlZWM1YzMzZGU=", "commit": {"author": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-07-27T23:43:05Z"}, "committer": {"name": "Paul Faria", "email": "Nashenas88@gmail.com", "date": "2017-07-27T23:43:05Z"}, "message": "Squash Span into SourceInfo and rename enum and its inner types", "tree": {"sha": "8cbd0e3652779e9905481defaffeaecd65e67375", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cbd0e3652779e9905481defaffeaecd65e67375"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b9acad7c66c9e9cb8f585ff7446872eec5c33de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9acad7c66c9e9cb8f585ff7446872eec5c33de", "html_url": "https://github.com/rust-lang/rust/commit/4b9acad7c66c9e9cb8f585ff7446872eec5c33de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b9acad7c66c9e9cb8f585ff7446872eec5c33de/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "059a9a16d54f7a8e6399810893c9988f409d3025", "url": "https://api.github.com/repos/rust-lang/rust/commits/059a9a16d54f7a8e6399810893c9988f409d3025", "html_url": "https://github.com/rust-lang/rust/commit/059a9a16d54f7a8e6399810893c9988f409d3025"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "fd3a9f8cd2d9aa21d9f303a358d3869932602baf", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4b9acad7c66c9e9cb8f585ff7446872eec5c33de/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9acad7c66c9e9cb8f585ff7446872eec5c33de/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=4b9acad7c66c9e9cb8f585ff7446872eec5c33de", "patch": "@@ -211,7 +211,7 @@ macro_rules! make_mir_visitor {\n \n             fn visit_ty(&mut self,\n                         ty: & $($mutability)* Ty<'tcx>,\n-                        _: PositionalInfo) {\n+                        _: Lookup) {\n                 self.super_ty(ty);\n             }\n \n@@ -269,7 +269,11 @@ macro_rules! make_mir_visitor {\n                     self.visit_visibility_scope_data(scope);\n                 }\n \n-                self.visit_ty(&$($mutability)* mir.return_ty, PositionalInfo::Span(mir.span));\n+                let lookup = Lookup::Src(SourceInfo {\n+                    span: mir.span,\n+                    scope: ARGUMENT_VISIBILITY_SCOPE,\n+                });\n+                self.visit_ty(&$($mutability)* mir.return_ty, lookup);\n \n                 for local_decl in &$($mutability)* mir.local_decls {\n                     self.visit_local_decl(local_decl);\n@@ -388,7 +392,7 @@ macro_rules! make_mir_visitor {\n                                                 ref values,\n                                                 ref targets } => {\n                         self.visit_operand(discr, source_location);\n-                        self.visit_ty(switch_ty, PositionalInfo::Location(source_location));\n+                        self.visit_ty(switch_ty, Lookup::Loc(source_location));\n                         for value in &values[..] {\n                             self.visit_const_int(value, source_location);\n                         }\n@@ -492,7 +496,7 @@ macro_rules! make_mir_visitor {\n                                  ref $($mutability)* operand,\n                                  ref $($mutability)* ty) => {\n                         self.visit_operand(operand, location);\n-                        self.visit_ty(ty, PositionalInfo::Location(location));\n+                        self.visit_ty(ty, Lookup::Loc(location));\n                     }\n \n                     Rvalue::BinaryOp(_bin_op,\n@@ -514,15 +518,15 @@ macro_rules! make_mir_visitor {\n                     }\n \n                     Rvalue::NullaryOp(_op, ref $($mutability)* ty) => {\n-                        self.visit_ty(ty, PositionalInfo::Location(location));\n+                        self.visit_ty(ty, Lookup::Loc(location));\n                     }\n \n                     Rvalue::Aggregate(ref $($mutability)* kind,\n                                       ref $($mutability)* operands) => {\n                         let kind = &$($mutability)* **kind;\n                         match *kind {\n                             AggregateKind::Array(ref $($mutability)* ty) => {\n-                                self.visit_ty(ty, PositionalInfo::Location(location));\n+                                self.visit_ty(ty, Lookup::Loc(location));\n                             }\n                             AggregateKind::Tuple => {\n                             }\n@@ -584,7 +588,7 @@ macro_rules! make_mir_visitor {\n                     ref $($mutability)* ty,\n                 } = *static_;\n                 self.visit_def_id(def_id, location);\n-                self.visit_ty(ty, PositionalInfo::Location(location));\n+                self.visit_ty(ty, Lookup::Loc(location));\n             }\n \n             fn super_projection(&mut self,\n@@ -614,7 +618,7 @@ macro_rules! make_mir_visitor {\n                     ProjectionElem::Subslice { from: _, to: _ } => {\n                     }\n                     ProjectionElem::Field(_field, ref $($mutability)* ty) => {\n-                        self.visit_ty(ty, PositionalInfo::Location(location));\n+                        self.visit_ty(ty, Lookup::Loc(location));\n                     }\n                     ProjectionElem::Index(ref $($mutability)* operand) => {\n                         self.visit_operand(operand, location);\n@@ -638,7 +642,7 @@ macro_rules! make_mir_visitor {\n                     is_user_variable: _,\n                 } = *local_decl;\n \n-                self.visit_ty(ty, PositionalInfo::SourceInfo(*source_info));\n+                self.visit_ty(ty, Lookup::Src(*source_info));\n                 self.visit_source_info(source_info);\n             }\n \n@@ -661,7 +665,7 @@ macro_rules! make_mir_visitor {\n                 } = *constant;\n \n                 self.visit_span(span);\n-                self.visit_ty(ty, PositionalInfo::Location(location));\n+                self.visit_ty(ty, Lookup::Loc(location));\n                 self.visit_literal(literal, location);\n             }\n \n@@ -737,10 +741,9 @@ macro_rules! make_mir_visitor {\n make_mir_visitor!(Visitor,);\n make_mir_visitor!(MutVisitor,mut);\n \n-pub enum PositionalInfo {\n-    Location(Location),\n-    SourceInfo(SourceInfo),\n-    Span(Span),\n+pub enum Lookup {\n+    Loc(Location),\n+    Src(SourceInfo),\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]"}, {"sha": "74101abd5d76d8183bd7d5331a933c512818e663", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b9acad7c66c9e9cb8f585ff7446872eec5c33de/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9acad7c66c9e9cb8f585ff7446872eec5c33de/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=4b9acad7c66c9e9cb8f585ff7446872eec5c33de", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::def_id::DefId;\n use rustc::middle::region::CodeExtent;\n use rustc::mir::*;\n use rustc::mir::transform::MirSource;\n-use rustc::mir::visit::{MutVisitor, PositionalInfo};\n+use rustc::mir::visit::{MutVisitor, Lookup};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::NodeMap;\n@@ -143,7 +143,7 @@ struct GlobalizeMir<'a, 'gcx: 'a> {\n }\n \n impl<'a, 'gcx: 'tcx, 'tcx> MutVisitor<'tcx> for GlobalizeMir<'a, 'gcx> {\n-    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: PositionalInfo) {\n+    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: Lookup) {\n         if let Some(lifted) = self.tcx.lift(ty) {\n             *ty = lifted;\n         } else {"}, {"sha": "da9032685e03bef7de05f8d51f50d29053aee055", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b9acad7c66c9e9cb8f585ff7446872eec5c33de/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9acad7c66c9e9cb8f585ff7446872eec5c33de/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=4b9acad7c66c9e9cb8f585ff7446872eec5c33de", "patch": "@@ -15,7 +15,7 @@\n use rustc::ty::subst::Substs;\n use rustc::ty::{Ty, TyCtxt, ClosureSubsts};\n use rustc::mir::*;\n-use rustc::mir::visit::{MutVisitor, PositionalInfo};\n+use rustc::mir::visit::{MutVisitor, Lookup};\n use rustc::mir::transform::{MirPass, MirSource};\n \n struct EraseRegionsVisitor<'a, 'tcx: 'a> {\n@@ -31,7 +31,7 @@ impl<'a, 'tcx> EraseRegionsVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n-    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: PositionalInfo) {\n+    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: Lookup) {\n         let old_ty = *ty;\n         *ty = self.tcx.erase_regions(&old_ty);\n     }"}]}