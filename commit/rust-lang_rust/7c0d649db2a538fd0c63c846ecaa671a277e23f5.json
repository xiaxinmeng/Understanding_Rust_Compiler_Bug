{"sha": "7c0d649db2a538fd0c63c846ecaa671a277e23f5", "node_id": "C_kwDOAAsO6NoAKDdjMGQ2NDlkYjJhNTM4ZmQwYzYzYzg0NmVjYWE2NzFhMjc3ZTIzZjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T10:34:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-03T10:34:57Z"}, "message": "Auto merge of #8831 - arieluy:type_params, r=dswij\n\nAdd new lint `mismatching_type_param_order`\n\nchangelog: Add new lint [`mismatching_type_param_order`] for checking if type parameters are consistent between type definitions and impl blocks.\n\nfixes #7147", "tree": {"sha": "ba754ab436a21a78ce65c82b1276f956d001798f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba754ab436a21a78ce65c82b1276f956d001798f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c0d649db2a538fd0c63c846ecaa671a277e23f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0d649db2a538fd0c63c846ecaa671a277e23f5", "html_url": "https://github.com/rust-lang/rust/commit/7c0d649db2a538fd0c63c846ecaa671a277e23f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c0d649db2a538fd0c63c846ecaa671a277e23f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1194c6369eda50c55d421bd6641edee1e0ebbfe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1194c6369eda50c55d421bd6641edee1e0ebbfe2", "html_url": "https://github.com/rust-lang/rust/commit/1194c6369eda50c55d421bd6641edee1e0ebbfe2"}, {"sha": "58cd01c2fcda07f97efcd908b50e5256cf084593", "url": "https://api.github.com/repos/rust-lang/rust/commits/58cd01c2fcda07f97efcd908b50e5256cf084593", "html_url": "https://github.com/rust-lang/rust/commit/58cd01c2fcda07f97efcd908b50e5256cf084593"}], "stats": {"total": 264, "additions": 264, "deletions": 0}, "files": [{"sha": "0a44ffdd3d4a7bf35bf8afc640f66a6245b14123", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d649db2a538fd0c63c846ecaa671a277e23f5/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d649db2a538fd0c63c846ecaa671a277e23f5/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=7c0d649db2a538fd0c63c846ecaa671a277e23f5", "patch": "@@ -3560,6 +3560,7 @@ Released 2018-09-13\n [`min_max`]: https://rust-lang.github.io/rust-clippy/master/index.html#min_max\n [`misaligned_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#misaligned_transmute\n [`mismatched_target_os`]: https://rust-lang.github.io/rust-clippy/master/index.html#mismatched_target_os\n+[`mismatching_type_param_order`]: https://rust-lang.github.io/rust-clippy/master/index.html#mismatching_type_param_order\n [`misrefactored_assign_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#misrefactored_assign_op\n [`missing_const_for_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items"}, {"sha": "29bfc660d29fe7ee1e243ea96129acae03d966e9", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d649db2a538fd0c63c846ecaa671a277e23f5/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d649db2a538fd0c63c846ecaa671a277e23f5/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=7c0d649db2a538fd0c63c846ecaa671a277e23f5", "patch": "@@ -380,6 +380,7 @@ store.register_lints(&[\n     misc_early::UNNEEDED_WILDCARD_PATTERN,\n     misc_early::UNSEPARATED_LITERAL_SUFFIX,\n     misc_early::ZERO_PREFIXED_LITERAL,\n+    mismatching_type_param_order::MISMATCHING_TYPE_PARAM_ORDER,\n     missing_const_for_fn::MISSING_CONST_FOR_FN,\n     missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n     missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES,"}, {"sha": "2e47a287d5cf6f2475bf8d89913137ca022861b8", "filename": "clippy_lints/src/lib.register_pedantic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d649db2a538fd0c63c846ecaa671a277e23f5/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d649db2a538fd0c63c846ecaa671a277e23f5/clippy_lints%2Fsrc%2Flib.register_pedantic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_pedantic.rs?ref=7c0d649db2a538fd0c63c846ecaa671a277e23f5", "patch": "@@ -67,6 +67,7 @@ store.register_group(true, \"clippy::pedantic\", Some(\"clippy_pedantic\"), vec![\n     LintId::of(methods::UNNECESSARY_JOIN),\n     LintId::of(misc::FLOAT_CMP),\n     LintId::of(misc::USED_UNDERSCORE_BINDING),\n+    LintId::of(mismatching_type_param_order::MISMATCHING_TYPE_PARAM_ORDER),\n     LintId::of(mut_mut::MUT_MUT),\n     LintId::of(needless_bitwise_bool::NEEDLESS_BITWISE_BOOL),\n     LintId::of(needless_continue::NEEDLESS_CONTINUE),"}, {"sha": "6c3d7594f5c10b0e32e3e96e51f20f95f529a75f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d649db2a538fd0c63c846ecaa671a277e23f5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d649db2a538fd0c63c846ecaa671a277e23f5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7c0d649db2a538fd0c63c846ecaa671a277e23f5", "patch": "@@ -298,6 +298,7 @@ mod methods;\n mod minmax;\n mod misc;\n mod misc_early;\n+mod mismatching_type_param_order;\n mod missing_const_for_fn;\n mod missing_doc;\n mod missing_enforced_import_rename;\n@@ -917,6 +918,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(unused_rounding::UnusedRounding));\n     store.register_early_pass(move || Box::new(almost_complete_letter_range::AlmostCompleteLetterRange::new(msrv)));\n     store.register_late_pass(|| Box::new(swap_ptr_to_ref::SwapPtrToRef));\n+    store.register_late_pass(|| Box::new(mismatching_type_param_order::TypeParamMismatch));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "d466d54a6ba5db92c5af6f2f210644cbb73c9b55", "filename": "clippy_lints/src/mismatching_type_param_order.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d649db2a538fd0c63c846ecaa671a277e23f5/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d649db2a538fd0c63c846ecaa671a277e23f5/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmismatching_type_param_order.rs?ref=7c0d649db2a538fd0c63c846ecaa671a277e23f5", "patch": "@@ -0,0 +1,116 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::{GenericArg, Item, ItemKind, QPath, Ty, TyKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::GenericParamDefKind;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for type parameters which are positioned inconsistently between\n+    /// a type definition and impl block. Specifically, a paramater in an impl\n+    /// block which has the same name as a parameter in the type def, but is in\n+    /// a different place.\n+    ///\n+    /// ### Why is this bad?\n+    /// Type parameters are determined by their position rather than name.\n+    /// Naming type parameters inconsistently may cause you to refer to the\n+    /// wrong type parameter.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct Foo<A, B> {\n+    ///     x: A,\n+    ///     y: B,\n+    /// }\n+    /// // inside the impl, B refers to Foo::A\n+    /// impl<B, A> Foo<B, A> {}\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct Foo<A, B> {\n+    ///     x: A,\n+    ///     y: B,\n+    /// }\n+    /// impl<A, B> Foo<A, B> {}\n+    /// ```\n+    #[clippy::version = \"1.62.0\"]\n+    pub MISMATCHING_TYPE_PARAM_ORDER,\n+    pedantic,\n+    \"type parameter positioned inconsistently between type def and impl block\"\n+}\n+declare_lint_pass!(TypeParamMismatch => [MISMATCHING_TYPE_PARAM_ORDER]);\n+\n+impl<'tcx> LateLintPass<'tcx> for TypeParamMismatch {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        if_chain! {\n+            if !item.span.from_expansion();\n+            if let ItemKind::Impl(imp) = &item.kind;\n+            if let TyKind::Path(QPath::Resolved(_, path)) = &imp.self_ty.kind;\n+            if let Some(segment) = path.segments.iter().next();\n+            if let Some(generic_args) = segment.args;\n+            if !generic_args.args.is_empty();\n+            then {\n+                // get the name and span of the generic parameters in the Impl\n+                let impl_params = generic_args.args.iter()\n+                .filter_map(|p|\n+                    match p {\n+                        GenericArg::Type(Ty {kind: TyKind::Path(QPath::Resolved(_, path)), ..}) =>\n+                            Some((path.segments[0].ident.to_string(), path.span)),\n+                        _ => None,\n+                    }\n+                );\n+\n+                // find the type that the Impl is for\n+                // only lint on struct/enum/union for now\n+                let defid = match path.res {\n+                    Res::Def(DefKind::Struct | DefKind::Enum | DefKind::Union, defid) => defid,\n+                    _ => return,\n+                };\n+\n+                // get the names of the generic parameters in the type\n+                let type_params = &cx.tcx.generics_of(defid).params;\n+                let type_param_names: Vec<_> = type_params.iter()\n+                .filter_map(|p|\n+                    match p.kind {\n+                        GenericParamDefKind::Type {..} => Some(p.name.to_string()),\n+                        _ => None,\n+                    }\n+                ).collect();\n+                // hashmap of name -> index for mismatch_param_name\n+                let type_param_names_hashmap: FxHashMap<&String, usize> =\n+                    type_param_names.iter().enumerate().map(|(i, param)| (param, i)).collect();\n+\n+                let type_name = segment.ident;\n+                for (i, (impl_param_name, impl_param_span)) in impl_params.enumerate() {\n+                    if mismatch_param_name(i, &impl_param_name, &type_param_names_hashmap) {\n+                        let msg = format!(\"`{}` has a similarly named generic type parameter `{}` in its declaration, but in a different order\",\n+                                          type_name, impl_param_name);\n+                        let help = format!(\"try `{}`, or a name that does not conflict with `{}`'s generic params\",\n+                                           type_param_names[i], type_name);\n+                        span_lint_and_help(\n+                            cx,\n+                            MISMATCHING_TYPE_PARAM_ORDER,\n+                            impl_param_span,\n+                            &msg,\n+                            None,\n+                            &help\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+// Checks if impl_param_name is the same as one of type_param_names,\n+// and is in a different position\n+fn mismatch_param_name(i: usize, impl_param_name: &String, type_param_names: &FxHashMap<&String, usize>) -> bool {\n+    if let Some(j) = type_param_names.get(impl_param_name) {\n+        if i != *j {\n+            return true;\n+        }\n+    }\n+    false\n+}"}, {"sha": "8f286c9304ccb4b3859964c2292846bd376f8b76", "filename": "tests/ui/mismatching_type_param_order.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d649db2a538fd0c63c846ecaa671a277e23f5/tests%2Fui%2Fmismatching_type_param_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d649db2a538fd0c63c846ecaa671a277e23f5/tests%2Fui%2Fmismatching_type_param_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatching_type_param_order.rs?ref=7c0d649db2a538fd0c63c846ecaa671a277e23f5", "patch": "@@ -0,0 +1,60 @@\n+#![warn(clippy::mismatching_type_param_order)]\n+#![allow(clippy::blacklisted_name)]\n+\n+fn main() {\n+    struct Foo<A, B> {\n+        x: A,\n+        y: B,\n+    }\n+\n+    // lint on both params\n+    impl<B, A> Foo<B, A> {}\n+\n+    // lint on the 2nd param\n+    impl<C, A> Foo<C, A> {}\n+\n+    // should not lint\n+    impl<A, B> Foo<A, B> {}\n+\n+    struct FooLifetime<'l, 'm, A, B> {\n+        x: &'l A,\n+        y: &'m B,\n+    }\n+\n+    // should not lint on lifetimes\n+    impl<'m, 'l, B, A> FooLifetime<'m, 'l, B, A> {}\n+\n+    struct Bar {\n+        x: i32,\n+    }\n+\n+    // should not lint\n+    impl Bar {}\n+\n+    // also works for enums\n+    enum FooEnum<A, B, C> {\n+        X(A),\n+        Y(B),\n+        Z(C),\n+    }\n+\n+    impl<C, A, B> FooEnum<C, A, B> {}\n+\n+    // also works for unions\n+    union FooUnion<A: Copy, B>\n+    where\n+        B: Copy,\n+    {\n+        x: A,\n+        y: B,\n+    }\n+\n+    impl<B: Copy, A> FooUnion<B, A> where A: Copy {}\n+\n+    impl<A, B> FooUnion<A, B>\n+    where\n+        A: Copy,\n+        B: Copy,\n+    {\n+    }\n+}"}, {"sha": "cb720256c50e5cdd6dd7a60ddeba60bc996bc468", "filename": "tests/ui/mismatching_type_param_order.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7c0d649db2a538fd0c63c846ecaa671a277e23f5/tests%2Fui%2Fmismatching_type_param_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0d649db2a538fd0c63c846ecaa671a277e23f5/tests%2Fui%2Fmismatching_type_param_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatching_type_param_order.stderr?ref=7c0d649db2a538fd0c63c846ecaa671a277e23f5", "patch": "@@ -0,0 +1,83 @@\n+error: `Foo` has a similarly named generic type parameter `B` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:11:20\n+   |\n+LL |     impl<B, A> Foo<B, A> {}\n+   |                    ^\n+   |\n+   = note: `-D clippy::mismatching-type-param-order` implied by `-D warnings`\n+   = help: try `A`, or a name that does not conflict with `Foo`'s generic params\n+\n+error: `Foo` has a similarly named generic type parameter `A` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:11:23\n+   |\n+LL |     impl<B, A> Foo<B, A> {}\n+   |                       ^\n+   |\n+   = help: try `B`, or a name that does not conflict with `Foo`'s generic params\n+\n+error: `Foo` has a similarly named generic type parameter `A` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:14:23\n+   |\n+LL |     impl<C, A> Foo<C, A> {}\n+   |                       ^\n+   |\n+   = help: try `B`, or a name that does not conflict with `Foo`'s generic params\n+\n+error: `FooLifetime` has a similarly named generic type parameter `B` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:25:44\n+   |\n+LL |     impl<'m, 'l, B, A> FooLifetime<'m, 'l, B, A> {}\n+   |                                            ^\n+   |\n+   = help: try `A`, or a name that does not conflict with `FooLifetime`'s generic params\n+\n+error: `FooLifetime` has a similarly named generic type parameter `A` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:25:47\n+   |\n+LL |     impl<'m, 'l, B, A> FooLifetime<'m, 'l, B, A> {}\n+   |                                               ^\n+   |\n+   = help: try `B`, or a name that does not conflict with `FooLifetime`'s generic params\n+\n+error: `FooEnum` has a similarly named generic type parameter `C` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:41:27\n+   |\n+LL |     impl<C, A, B> FooEnum<C, A, B> {}\n+   |                           ^\n+   |\n+   = help: try `A`, or a name that does not conflict with `FooEnum`'s generic params\n+\n+error: `FooEnum` has a similarly named generic type parameter `A` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:41:30\n+   |\n+LL |     impl<C, A, B> FooEnum<C, A, B> {}\n+   |                              ^\n+   |\n+   = help: try `B`, or a name that does not conflict with `FooEnum`'s generic params\n+\n+error: `FooEnum` has a similarly named generic type parameter `B` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:41:33\n+   |\n+LL |     impl<C, A, B> FooEnum<C, A, B> {}\n+   |                                 ^\n+   |\n+   = help: try `C`, or a name that does not conflict with `FooEnum`'s generic params\n+\n+error: `FooUnion` has a similarly named generic type parameter `B` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:52:31\n+   |\n+LL |     impl<B: Copy, A> FooUnion<B, A> where A: Copy {}\n+   |                               ^\n+   |\n+   = help: try `A`, or a name that does not conflict with `FooUnion`'s generic params\n+\n+error: `FooUnion` has a similarly named generic type parameter `A` in its declaration, but in a different order\n+  --> $DIR/mismatching_type_param_order.rs:52:34\n+   |\n+LL |     impl<B: Copy, A> FooUnion<B, A> where A: Copy {}\n+   |                                  ^\n+   |\n+   = help: try `B`, or a name that does not conflict with `FooUnion`'s generic params\n+\n+error: aborting due to 10 previous errors\n+"}]}