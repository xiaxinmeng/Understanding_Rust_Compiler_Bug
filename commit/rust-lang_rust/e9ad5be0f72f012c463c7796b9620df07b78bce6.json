{"sha": "e9ad5be0f72f012c463c7796b9620df07b78bce6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5YWQ1YmUwZjcyZjAxMmM0NjNjNzc5NmI5NjIwZGYwN2I3OGJjZTY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-01T23:40:17Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-03T22:15:45Z"}, "message": "Allow/fix non_fmt_panic in tests.", "tree": {"sha": "7741599ac56d34e01ec3303dd98151b35f5810e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7741599ac56d34e01ec3303dd98151b35f5810e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9ad5be0f72f012c463c7796b9620df07b78bce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ad5be0f72f012c463c7796b9620df07b78bce6", "html_url": "https://github.com/rust-lang/rust/commit/e9ad5be0f72f012c463c7796b9620df07b78bce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9ad5be0f72f012c463c7796b9620df07b78bce6/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34d5ac25c565a772c5974ab3b332644a9eff60f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/34d5ac25c565a772c5974ab3b332644a9eff60f8", "html_url": "https://github.com/rust-lang/rust/commit/34d5ac25c565a772c5974ab3b332644a9eff60f8"}], "stats": {"total": 77, "additions": 42, "deletions": 35}, "files": [{"sha": "1cc0967c8f42e50e6e6c63654a1a7448269cb80d", "filename": "library/term/src/terminfo/parm/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad5be0f72f012c463c7796b9620df07b78bce6/library%2Fterm%2Fsrc%2Fterminfo%2Fparm%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad5be0f72f012c463c7796b9620df07b78bce6/library%2Fterm%2Fsrc%2Fterminfo%2Fparm%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fterm%2Fsrc%2Fterminfo%2Fparm%2Ftests.rs?ref=e9ad5be0f72f012c463c7796b9620df07b78bce6", "patch": "@@ -77,15 +77,15 @@ fn test_comparison_ops() {\n     for &(op, bs) in v.iter() {\n         let s = format!(\"%{{1}}%{{2}}%{}%d\", op);\n         let res = expand(s.as_bytes(), &[], &mut Variables::new());\n-        assert!(res.is_ok(), res.unwrap_err());\n+        assert!(res.is_ok(), \"{}\", res.unwrap_err());\n         assert_eq!(res.unwrap(), vec![b'0' + bs[0]]);\n         let s = format!(\"%{{1}}%{{1}}%{}%d\", op);\n         let res = expand(s.as_bytes(), &[], &mut Variables::new());\n-        assert!(res.is_ok(), res.unwrap_err());\n+        assert!(res.is_ok(), \"{}\", res.unwrap_err());\n         assert_eq!(res.unwrap(), vec![b'0' + bs[1]]);\n         let s = format!(\"%{{2}}%{{1}}%{}%d\", op);\n         let res = expand(s.as_bytes(), &[], &mut Variables::new());\n-        assert!(res.is_ok(), res.unwrap_err());\n+        assert!(res.is_ok(), \"{}\", res.unwrap_err());\n         assert_eq!(res.unwrap(), vec![b'0' + bs[2]]);\n     }\n }\n@@ -95,13 +95,13 @@ fn test_conditionals() {\n     let mut vars = Variables::new();\n     let s = b\"\\\\E[%?%p1%{8}%<%t3%p1%d%e%p1%{16}%<%t9%p1%{8}%-%d%e38;5;%p1%d%;m\";\n     let res = expand(s, &[Number(1)], &mut vars);\n-    assert!(res.is_ok(), res.unwrap_err());\n+    assert!(res.is_ok(), \"{}\", res.unwrap_err());\n     assert_eq!(res.unwrap(), \"\\\\E[31m\".bytes().collect::<Vec<_>>());\n     let res = expand(s, &[Number(8)], &mut vars);\n-    assert!(res.is_ok(), res.unwrap_err());\n+    assert!(res.is_ok(), \"{}\", res.unwrap_err());\n     assert_eq!(res.unwrap(), \"\\\\E[90m\".bytes().collect::<Vec<_>>());\n     let res = expand(s, &[Number(42)], &mut vars);\n-    assert!(res.is_ok(), res.unwrap_err());\n+    assert!(res.is_ok(), \"{}\", res.unwrap_err());\n     assert_eq!(res.unwrap(), \"\\\\E[38;5;42m\".bytes().collect::<Vec<_>>());\n }\n "}, {"sha": "f0586d510dbdb5f7db31a89d4a814e30ec97fe2a", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad5be0f72f012c463c7796b9620df07b78bce6/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad5be0f72f012c463c7796b9620df07b78bce6/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=e9ad5be0f72f012c463c7796b9620df07b78bce6", "patch": "@@ -199,7 +199,7 @@ fn test_should_panic_bad_message() {\n fn test_should_panic_non_string_message_type() {\n     use crate::tests::TrFailedMsg;\n     fn f() {\n-        panic!(1i32);\n+        std::panic::panic_any(1i32);\n     }\n     let expected = \"foobar\";\n     let failed_msg = format!("}, {"sha": "c7ef5ad70a114002fdad17f7e7c47c83d083aaa3", "filename": "src/test/ui-fulldeps/issue-15149.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui-fulldeps%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui-fulldeps%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15149.rs?ref=e9ad5be0f72f012c463c7796b9620df07b78bce6", "patch": "@@ -50,7 +50,7 @@ fn test() {\n                                                       .output().unwrap();\n \n     assert!(child_output.status.success(),\n-            format!(\"child assertion failed\\n child stdout:\\n {}\\n child stderr:\\n {}\",\n-                    str::from_utf8(&child_output.stdout).unwrap(),\n-                    str::from_utf8(&child_output.stderr).unwrap()));\n+            \"child assertion failed\\n child stdout:\\n {}\\n child stderr:\\n {}\",\n+            str::from_utf8(&child_output.stdout).unwrap(),\n+            str::from_utf8(&child_output.stderr).unwrap());\n }"}, {"sha": "8ae8376ae4a6f53df0098ecedc172f1d8b0a9787", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=e9ad5be0f72f012c463c7796b9620df07b78bce6", "patch": "@@ -1,4 +1,5 @@\n #![feature(const_panic)]\n+#![allow(non_fmt_panic)]\n #![crate_type = \"lib\"]\n \n const MSG: &str = \"hello\";"}, {"sha": "74907a0b49518f82e2bd5f2bcbbfb657ef7c5d99", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=e9ad5be0f72f012c463c7796b9620df07b78bce6", "patch": "@@ -1,119 +1,119 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:6:15\n+  --> $DIR/const_panic.rs:7:15\n    |\n LL | const Z: () = std::panic!(\"cheese\");\n    | --------------^^^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:6:15\n+   |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:7:15\n    |\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:10:16\n+  --> $DIR/const_panic.rs:11:16\n    |\n LL | const Z2: () = std::panic!();\n    | ---------------^^^^^^^^^^^^^-\n    |                |\n-   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:10:16\n+   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:11:16\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:14:15\n+  --> $DIR/const_panic.rs:15:15\n    |\n LL | const Y: () = std::unreachable!();\n    | --------------^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:14:15\n+   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:15:15\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:18:15\n+  --> $DIR/const_panic.rs:19:15\n    |\n LL | const X: () = std::unimplemented!();\n    | --------------^^^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:18:15\n+   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:19:15\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:22:15\n+  --> $DIR/const_panic.rs:23:15\n    |\n LL | const W: () = std::panic!(MSG);\n    | --------------^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:22:15\n+   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:23:15\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:26:20\n+  --> $DIR/const_panic.rs:27:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n    | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:26:20\n+   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:27:20\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:30:21\n+  --> $DIR/const_panic.rs:31:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n    | --------------------^^^^^^^^^^^^^^-\n    |                     |\n-   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:30:21\n+   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:31:21\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:34:20\n+  --> $DIR/const_panic.rs:35:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n    | -------------------^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:34:20\n+   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:35:20\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:38:20\n+  --> $DIR/const_panic.rs:39:20\n    |\n LL | const X_CORE: () = core::unimplemented!();\n    | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:38:20\n+   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:39:20\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:42:20\n+  --> $DIR/const_panic.rs:43:20\n    |\n LL | const W_CORE: () = core::panic!(MSG);\n    | -------------------^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:42:20\n+   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:43:20\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>"}, {"sha": "cb6d58a23d9368a79ba13df4fc66b0c59dda0487", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=e9ad5be0f72f012c463c7796b9620df07b78bce6", "patch": "@@ -82,7 +82,7 @@ impl Allocator {\n         self.cur_ops.set(self.cur_ops.get() + 1);\n \n         if self.cur_ops.get() == self.failing_op {\n-            panic!(InjectedFailure);\n+            panic::panic_any(InjectedFailure);\n         }\n     }\n }"}, {"sha": "e28bedb982dd91d48095ec9ee4809a8a2a517446", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=e9ad5be0f72f012c463c7796b9620df07b78bce6", "patch": "@@ -46,7 +46,7 @@ impl Allocator {\n         self.cur_ops.set(self.cur_ops.get() + 1);\n \n         if self.cur_ops.get() == self.failing_op {\n-            panic!(InjectedFailure);\n+            panic::panic_any(InjectedFailure);\n         }\n \n         let mut data = self.data.borrow_mut();\n@@ -67,7 +67,7 @@ impl<'a> Drop for Ptr<'a> {\n         self.1.cur_ops.set(self.1.cur_ops.get() + 1);\n \n         if self.1.cur_ops.get() == self.1.failing_op {\n-            panic!(InjectedFailure);\n+            panic::panic_any(InjectedFailure);\n         }\n     }\n }"}, {"sha": "2846f2a1f835332074f6bed990fc8c83d4124f80", "filename": "src/test/ui/macros/assert-macro-owned.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fmacros%2Fassert-macro-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fmacros%2Fassert-macro-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-macro-owned.rs?ref=e9ad5be0f72f012c463c7796b9620df07b78bce6", "patch": "@@ -2,6 +2,8 @@\n // error-pattern:panicked at 'test-assert-owned'\n // ignore-emscripten no processes\n \n+#![allow(non_fmt_panic)]\n+\n fn main() {\n     assert!(false, \"test-assert-owned\".to_string());\n }"}, {"sha": "22c804abf5cc85deedb2a746d0221986ac2d2043", "filename": "src/test/ui/mir/mir_drop_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs?ref=e9ad5be0f72f012c463c7796b9620df07b78bce6", "patch": "@@ -38,7 +38,7 @@ fn main() {\n     assert_eq!(get(), vec![0, 2, 3, 1]);\n \n     let _ = std::panic::catch_unwind(|| {\n-        (d(4), &d(5), d(6), &d(7), panic!(InjectedFailure));\n+        (d(4), &d(5), d(6), &d(7), panic::panic_any(InjectedFailure));\n     });\n \n     // here, the temporaries (5/7) live until the end of the"}, {"sha": "bfcc12cd186bd5a8d59160baaf0694f45c6e7d66", "filename": "src/test/ui/panics/explicit-panic-msg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fpanics%2Fexplicit-panic-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fpanics%2Fexplicit-panic-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fexplicit-panic-msg.rs?ref=e9ad5be0f72f012c463c7796b9620df07b78bce6", "patch": "@@ -1,5 +1,6 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n+#![allow(non_fmt_panic)]\n \n // run-fail\n // error-pattern:wooooo"}, {"sha": "95ae6ffe8be02e231576436500aaf183aa0adc8d", "filename": "src/test/ui/panics/panic-macro-any-wrapped.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs?ref=e9ad5be0f72f012c463c7796b9620df07b78bce6", "patch": "@@ -2,6 +2,8 @@\n // error-pattern:panicked at 'Box<Any>'\n // ignore-emscripten no processes\n \n+#![allow(non_fmt_panic)]\n+\n fn main() {\n     panic!(Box::new(612_i64));\n }"}, {"sha": "d2a7ba3713a514cf07333795ec15d7fe2bc8e421", "filename": "src/test/ui/panics/panic-macro-any.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs?ref=e9ad5be0f72f012c463c7796b9620df07b78bce6", "patch": "@@ -3,6 +3,7 @@\n // ignore-emscripten no processes\n \n #![feature(box_syntax)]\n+#![allow(non_fmt_panic)]\n \n fn main() {\n     panic!(box 413 as Box<dyn std::any::Any + Send>);"}, {"sha": "3c6ee8fa3155e3ddce3de76c4c958294dae7f49c", "filename": "src/test/ui/panics/while-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fpanics%2Fwhile-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9ad5be0f72f012c463c7796b9620df07b78bce6/src%2Ftest%2Fui%2Fpanics%2Fwhile-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fwhile-panic.rs?ref=e9ad5be0f72f012c463c7796b9620df07b78bce6", "patch": "@@ -5,7 +5,7 @@\n // ignore-emscripten no processes\n \n fn main() {\n-    panic!({\n+    panic!(\"{}\", {\n         while true {\n             panic!(\"giraffe\")\n         }"}]}