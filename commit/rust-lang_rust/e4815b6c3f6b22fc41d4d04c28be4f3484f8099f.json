{"sha": "e4815b6c3f6b22fc41d4d04c28be4f3484f8099f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ODE1YjZjM2Y2YjIyZmM0MWQ0ZDA0YzI4YmU0ZjM0ODRmODA5OWY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T22:47:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:37Z"}, "message": "librustc: De-`@mut` the `users` list in liveness", "tree": {"sha": "945399be039cdcd76669fcb3696471cbbac5d64d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/945399be039cdcd76669fcb3696471cbbac5d64d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4815b6c3f6b22fc41d4d04c28be4f3484f8099f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4815b6c3f6b22fc41d4d04c28be4f3484f8099f", "html_url": "https://github.com/rust-lang/rust/commit/e4815b6c3f6b22fc41d4d04c28be4f3484f8099f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4815b6c3f6b22fc41d4d04c28be4f3484f8099f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff23e1202f782adbd1b9f08dbcfbea5d257770ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff23e1202f782adbd1b9f08dbcfbea5d257770ce", "html_url": "https://github.com/rust-lang/rust/commit/ff23e1202f782adbd1b9f08dbcfbea5d257770ce"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "614a526707542ff40af1a20aefb8fcb762ccf2f6", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e4815b6c3f6b22fc41d4d04c28be4f3484f8099f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4815b6c3f6b22fc41d4d04c28be4f3484f8099f/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=e4815b6c3f6b22fc41d4d04c28be4f3484f8099f", "patch": "@@ -591,7 +591,7 @@ pub struct Liveness {\n     ir: @IrMaps,\n     s: Specials,\n     successors: @RefCell<~[LiveNode]>,\n-    users: @mut ~[Users],\n+    users: @RefCell<~[Users]>,\n     // The list of node IDs for the nested loop scopes\n     // we're in.\n     loop_scope: @RefCell<~[NodeId]>,\n@@ -609,9 +609,9 @@ fn Liveness(ir: @IrMaps, specials: Specials) -> Liveness {\n         s: specials,\n         successors: @RefCell::new(vec::from_elem(ir.num_live_nodes.get(),\n                                                  invalid_node())),\n-        users: @mut vec::from_elem(ir.num_live_nodes.get() *\n-                                   ir.num_vars.get(),\n-                                   invalid_users()),\n+        users: @RefCell::new(vec::from_elem(ir.num_live_nodes.get() *\n+                                            ir.num_vars.get(),\n+                                            invalid_users())),\n         loop_scope: @RefCell::new(~[]),\n         break_ln: @RefCell::new(HashMap::new()),\n         cont_ln: @RefCell::new(HashMap::new()),\n@@ -685,7 +685,8 @@ impl Liveness {\n     pub fn live_on_entry(&self, ln: LiveNode, var: Variable)\n                          -> Option<LiveNodeKind> {\n         assert!(ln.is_valid());\n-        let reader = self.users[self.idx(ln, var)].reader;\n+        let users = self.users.borrow();\n+        let reader = users.get()[self.idx(ln, var)].reader;\n         if reader.is_valid() {Some(self.ir.lnk(reader))} else {None}\n     }\n \n@@ -703,13 +704,15 @@ impl Liveness {\n \n     pub fn used_on_entry(&self, ln: LiveNode, var: Variable) -> bool {\n         assert!(ln.is_valid());\n-        self.users[self.idx(ln, var)].used\n+        let users = self.users.borrow();\n+        users.get()[self.idx(ln, var)].used\n     }\n \n     pub fn assigned_on_entry(&self, ln: LiveNode, var: Variable)\n                              -> Option<LiveNodeKind> {\n         assert!(ln.is_valid());\n-        let writer = self.users[self.idx(ln, var)].writer;\n+        let users = self.users.borrow();\n+        let writer = users.get()[self.idx(ln, var)].writer;\n         if writer.is_valid() {Some(self.ir.lnk(writer))} else {None}\n     }\n \n@@ -788,9 +791,10 @@ impl Liveness {\n                        *ln,\n                        lnks.get()[*ln]);\n             }\n-            self.write_vars(wr, ln, |idx| self.users[idx].reader);\n+            let users = self.users.borrow();\n+            self.write_vars(wr, ln, |idx| users.get()[idx].reader);\n             write!(wr, \"  writes\");\n-            self.write_vars(wr, ln, |idx| self.users[idx].writer);\n+            self.write_vars(wr, ln, |idx| users.get()[idx].writer);\n             let successor = {\n                 let successors = self.successors.borrow();\n                 successors.get()[*ln]\n@@ -823,7 +827,8 @@ impl Liveness {\n         }\n \n         self.indices2(ln, succ_ln, |idx, succ_idx| {\n-            self.users[idx] = self.users[succ_idx]\n+            let mut users = self.users.borrow_mut();\n+            users.get()[idx] = users.get()[succ_idx]\n         });\n         debug!(\"init_from_succ(ln={}, succ={})\",\n                self.ln_str(ln), self.ln_str(succ_ln));\n@@ -838,13 +843,13 @@ impl Liveness {\n \n         let mut changed = false;\n         self.indices2(ln, succ_ln, |idx, succ_idx| {\n-            let users = &mut *self.users;\n-            changed |= copy_if_invalid(users[succ_idx].reader,\n-                                       &mut users[idx].reader);\n-            changed |= copy_if_invalid(users[succ_idx].writer,\n-                                       &mut users[idx].writer);\n-            if users[succ_idx].used && !users[idx].used {\n-                users[idx].used = true;\n+            let mut users = self.users.borrow_mut();\n+            changed |= copy_if_invalid(users.get()[succ_idx].reader,\n+                                       &mut users.get()[idx].reader);\n+            changed |= copy_if_invalid(users.get()[succ_idx].writer,\n+                                       &mut users.get()[idx].writer);\n+            if users.get()[succ_idx].used && !users.get()[idx].used {\n+                users.get()[idx].used = true;\n                 changed = true;\n             }\n         });\n@@ -869,8 +874,9 @@ impl Liveness {\n     // this) so we just clear out all the data.\n     pub fn define(&self, writer: LiveNode, var: Variable) {\n         let idx = self.idx(writer, var);\n-        self.users[idx].reader = invalid_node();\n-        self.users[idx].writer = invalid_node();\n+        let mut users = self.users.borrow_mut();\n+        users.get()[idx].reader = invalid_node();\n+        users.get()[idx].writer = invalid_node();\n \n         debug!(\"{} defines {} (idx={}): {}\", writer.to_str(), var.to_str(),\n                idx, self.ln_str(writer));\n@@ -879,8 +885,8 @@ impl Liveness {\n     // Either read, write, or both depending on the acc bitset\n     pub fn acc(&self, ln: LiveNode, var: Variable, acc: uint) {\n         let idx = self.idx(ln, var);\n-        let users = &mut *self.users;\n-        let user = &mut users[idx];\n+        let mut users = self.users.borrow_mut();\n+        let user = &mut users.get()[idx];\n \n         if (acc & ACC_WRITE) != 0 {\n             user.reader = invalid_node();"}]}