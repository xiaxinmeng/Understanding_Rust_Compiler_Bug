{"sha": "d64f18c490981f33f33e9c24e1ed1316e63f11fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NGYxOGM0OTA5ODFmMzNmMzNlOWMyNGUxZWQxMzE2ZTYzZjExZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-14T10:36:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-14T10:36:46Z"}, "message": "auto merge of #14884 : huonw/rust/getoptsfail, r=alexcrichton", "tree": {"sha": "71afdad0d3676e3c56b94bf39e866dd00d4c3f37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71afdad0d3676e3c56b94bf39e866dd00d4c3f37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d64f18c490981f33f33e9c24e1ed1316e63f11fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d64f18c490981f33f33e9c24e1ed1316e63f11fc", "html_url": "https://github.com/rust-lang/rust/commit/d64f18c490981f33f33e9c24e1ed1316e63f11fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d64f18c490981f33f33e9c24e1ed1316e63f11fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbd29ea96ef77a67496bb44de382140354c23632", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd29ea96ef77a67496bb44de382140354c23632", "html_url": "https://github.com/rust-lang/rust/commit/dbd29ea96ef77a67496bb44de382140354c23632"}, {"sha": "09eb95f24165b2a7eec6a599b0a4bad86ff6892d", "url": "https://api.github.com/repos/rust-lang/rust/commits/09eb95f24165b2a7eec6a599b0a4bad86ff6892d", "html_url": "https://github.com/rust-lang/rust/commit/09eb95f24165b2a7eec6a599b0a4bad86ff6892d"}], "stats": {"total": 71, "additions": 39, "deletions": 32}, "files": [{"sha": "1d7f36d0fe001c21edc3e33e54f94f8aeb601765", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64f18c490981f33f33e9c24e1ed1316e63f11fc/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64f18c490981f33f33e9c24e1ed1316e63f11fc/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=d64f18c490981f33f33e9c24e1ed1316e63f11fc", "patch": "@@ -110,7 +110,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n     let matches =\n         &match getopts::getopts(args_.as_slice(), groups.as_slice()) {\n           Ok(m) => m,\n-          Err(f) => fail!(\"{}\", f.to_err_msg())\n+          Err(f) => fail!(\"{}\", f)\n         };\n \n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {"}, {"sha": "5e02e412245c7d113e9215a12b2db652ebf759e8", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d64f18c490981f33f33e9c24e1ed1316e63f11fc/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64f18c490981f33f33e9c24e1ed1316e63f11fc/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=d64f18c490981f33f33e9c24e1ed1316e63f11fc", "patch": "@@ -61,7 +61,7 @@\n //!     ];\n //!     let matches = match getopts(args.tail(), opts) {\n //!         Ok(m) => { m }\n-//!         Err(f) => { fail!(f.to_err_msg()) }\n+//!         Err(f) => { fail!(f.to_str()) }\n //!     };\n //!     if matches.opt_present(\"h\") {\n //!         print_usage(program.as_slice(), opts);\n@@ -94,12 +94,13 @@\n #[cfg(test, not(stage0))] #[phase(plugin, link)] extern crate log;\n \n use std::cmp::PartialEq;\n+use std::fmt;\n use std::result::{Err, Ok};\n use std::result;\n use std::string::String;\n \n /// Name of an option. Either a string or a single char.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq)]\n pub enum Name {\n     /// A string representing the long name of an option.\n     /// For example: \"help\"\n@@ -110,7 +111,7 @@ pub enum Name {\n }\n \n /// Describes whether an option has an argument.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq)]\n pub enum HasArg {\n     /// The option requires an argument.\n     Yes,\n@@ -121,7 +122,7 @@ pub enum HasArg {\n }\n \n /// Describes how often an option may occur.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq)]\n pub enum Occur {\n     /// The option occurs once.\n     Req,\n@@ -132,7 +133,7 @@ pub enum Occur {\n }\n \n /// A description of a possible option.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq)]\n pub struct Opt {\n     /// Name of the option\n     pub name: Name,\n@@ -141,12 +142,12 @@ pub struct Opt {\n     /// How often it can occur\n     pub occur: Occur,\n     /// Which options it aliases\n-    pub aliases: Vec<Opt> ,\n+    pub aliases: Vec<Opt>,\n }\n \n /// One group of options, e.g., both -h and --help, along with\n /// their shared description and properties.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq)]\n pub struct OptGroup {\n     /// Short Name of the `OptGroup`\n     pub short_name: String,\n@@ -163,28 +164,28 @@ pub struct OptGroup {\n }\n \n /// Describes whether an option is given at all or has a value.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq)]\n enum Optval {\n     Val(String),\n     Given,\n }\n \n /// The result of checking command line arguments. Contains a vector\n /// of matches and a vector of free strings.\n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, PartialEq, Eq)]\n pub struct Matches {\n     /// Options that matched\n-    opts: Vec<Opt> ,\n+    opts: Vec<Opt>,\n     /// Values of the Options that matched\n-    vals: Vec<Vec<Optval> > ,\n+    vals: Vec<Vec<Optval>>,\n     /// Free string fragments\n     pub free: Vec<String>,\n }\n \n /// The type returned when the command line does not conform to the\n-/// expected format. Call the `to_err_msg` method to retrieve the\n-/// error as a string.\n-#[deriving(Clone, PartialEq, Show)]\n+/// expected format. Use the `Show` implementation to output detailed\n+/// information.\n+#[deriving(Clone, PartialEq, Eq)]\n pub enum Fail_ {\n     /// The option requires an argument but none was passed.\n     ArgumentMissing(String),\n@@ -199,7 +200,7 @@ pub enum Fail_ {\n }\n \n /// The type of failure that occurred.\n-#[deriving(PartialEq)]\n+#[deriving(PartialEq, Eq)]\n #[allow(missing_doc)]\n pub enum FailType {\n     ArgumentMissing_,\n@@ -498,22 +499,29 @@ pub fn opt(short_name: &str,\n \n impl Fail_ {\n     /// Convert a `Fail_` enum into an error string.\n+    #[deprecated=\"use `Show` (`{}` format specifier)\"]\n     pub fn to_err_msg(self) -> String {\n-        match self {\n+        self.to_str()\n+    }\n+}\n+\n+impl fmt::Show for Fail_ {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match *self {\n             ArgumentMissing(ref nm) => {\n-                format!(\"Argument to option '{}' missing.\", *nm)\n+                write!(f, \"Argument to option '{}' missing.\", *nm)\n             }\n             UnrecognizedOption(ref nm) => {\n-                format!(\"Unrecognized option: '{}'.\", *nm)\n+                write!(f, \"Unrecognized option: '{}'.\", *nm)\n             }\n             OptionMissing(ref nm) => {\n-                format!(\"Required option '{}' missing.\", *nm)\n+                write!(f, \"Required option '{}' missing.\", *nm)\n             }\n             OptionDuplicated(ref nm) => {\n-                format!(\"Option '{}' given more than once.\", *nm)\n+                write!(f, \"Option '{}' given more than once.\", *nm)\n             }\n             UnexpectedArgument(ref nm) => {\n-                format!(\"Option '{}' does not take an argument.\", *nm)\n+                write!(f, \"Option '{}' does not take an argument.\", *nm)\n             }\n         }\n     }\n@@ -522,8 +530,9 @@ impl Fail_ {\n /// Parse command line arguments according to the provided options.\n ///\n /// On success returns `Ok(Opt)`. Use methods such as `opt_present`\n-/// `opt_str`, etc. to interrogate results.  Returns `Err(Fail_)` on failure.\n-/// Use `to_err_msg` to get an error message.\n+/// `opt_str`, etc. to interrogate results.  Returns `Err(Fail_)` on\n+/// failure: use the `Show` implementation of `Fail_` to display\n+/// information about it.\n pub fn getopts(args: &[String], optgrps: &[OptGroup]) -> Result {\n     let opts: Vec<Opt> = optgrps.iter().map(|x| x.long_to_short()).collect();\n     let n_opts = opts.len();\n@@ -1110,7 +1119,6 @@ mod tests {\n         let rs = getopts(args.as_slice(), opts.as_slice());\n         match rs {\n           Err(f) => {\n-            error!(\"{:?}\", f.clone().to_err_msg());\n             check_fail_type(f, UnexpectedArgument_);\n           }\n           _ => fail!()"}, {"sha": "b8838890bcf24721015c732d330dd518cb380d39", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d64f18c490981f33f33e9c24e1ed1316e63f11fc/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64f18c490981f33f33e9c24e1ed1316e63f11fc/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=d64f18c490981f33f33e9c24e1ed1316e63f11fc", "patch": "@@ -792,7 +792,7 @@ mod test {\n         let matches =\n             &match getopts([\"--test\".to_string()], optgroups().as_slice()) {\n               Ok(m) => m,\n-              Err(f) => fail!(\"test_switch_implies_cfg_test: {}\", f.to_err_msg())\n+              Err(f) => fail!(\"test_switch_implies_cfg_test: {}\", f)\n             };\n         let sessopts = build_session_options(matches);\n         let sess = build_session(sessopts, None);\n@@ -809,8 +809,7 @@ mod test {\n                            optgroups().as_slice()) {\n               Ok(m) => m,\n               Err(f) => {\n-                fail!(\"test_switch_implies_cfg_test_unless_cfg_test: {}\",\n-                       f.to_err_msg());\n+                fail!(\"test_switch_implies_cfg_test_unless_cfg_test: {}\", f)\n               }\n             };\n         let sessopts = build_session_options(matches);"}, {"sha": "ff7f59559caf835b374c5f84d15d9386a28edb37", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64f18c490981f33f33e9c24e1ed1316e63f11fc/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64f18c490981f33f33e9c24e1ed1316e63f11fc/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=d64f18c490981f33f33e9c24e1ed1316e63f11fc", "patch": "@@ -205,7 +205,7 @@ pub fn handle_options(mut args: Vec<String>) -> Option<getopts::Matches> {\n         match getopts::getopts(args.as_slice(), config::optgroups().as_slice()) {\n             Ok(m) => m,\n             Err(f) => {\n-                early_error(f.to_err_msg().as_slice());\n+                early_error(f.to_str().as_slice());\n             }\n         };\n "}, {"sha": "f135e30c4ebcca5563f4f2af9c4806a0e6a87dca", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64f18c490981f33f33e9c24e1ed1316e63f11fc/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64f18c490981f33f33e9c24e1ed1316e63f11fc/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d64f18c490981f33f33e9c24e1ed1316e63f11fc", "patch": "@@ -148,7 +148,7 @@ pub fn main_args(args: &[String]) -> int {\n     let matches = match getopts::getopts(args.tail(), opts().as_slice()) {\n         Ok(m) => m,\n         Err(err) => {\n-            println!(\"{}\", err.to_err_msg());\n+            println!(\"{}\", err);\n             return 1;\n         }\n     };"}, {"sha": "9108a2c94598bf87e38b8a2f532841285b66b680", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64f18c490981f33f33e9c24e1ed1316e63f11fc/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64f18c490981f33f33e9c24e1ed1316e63f11fc/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=d64f18c490981f33f33e9c24e1ed1316e63f11fc", "patch": "@@ -367,7 +367,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n     let matches =\n         match getopts::getopts(args_.as_slice(), optgroups().as_slice()) {\n           Ok(m) => m,\n-          Err(f) => return Some(Err(f.to_err_msg().to_string()))\n+          Err(f) => return Some(Err(f.to_str()))\n         };\n \n     if matches.opt_present(\"h\") { usage(args[0].as_slice()); return None; }"}, {"sha": "98a7b67e0dc7707caec43eb4cec0c42c61903b3a", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d64f18c490981f33f33e9c24e1ed1316e63f11fc/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d64f18c490981f33f33e9c24e1ed1316e63f11fc/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=d64f18c490981f33f33e9c24e1ed1316e63f11fc", "patch": "@@ -20,7 +20,7 @@ pub fn main() {\n     match getopts(args.as_slice(), opts.as_slice()) {\n         Ok(ref m)  =>\n             assert!(!m.opt_present(\"b\")),\n-        Err(ref f) => fail!(\"{:?}\", (*f).clone().to_err_msg())\n+        Err(ref f) => fail!(\"{}\", *f)\n     };\n \n }"}]}