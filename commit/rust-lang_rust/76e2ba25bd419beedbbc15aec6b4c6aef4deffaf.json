{"sha": "76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZTJiYTI1YmQ0MTliZWVkYmJjMTVhZWM2YjRjNmFlZjRkZWZmYWY=", "commit": {"author": {"name": "Michele d'Amico", "email": "michele.damico@gmail.com", "date": "2019-07-17T00:40:33Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-07-17T00:40:33Z"}, "message": "#3665: Implemented (#3689)", "tree": {"sha": "1f568fef8a696140a33628fc725a72d6b6b7d9c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f568fef8a696140a33628fc725a72d6b6b7d9c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "html_url": "https://github.com/rust-lang/rust/commit/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/comments", "author": {"login": "la10736", "id": 3902961, "node_id": "MDQ6VXNlcjM5MDI5NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/3902961?v=4", "gravatar_id": "", "url": "https://api.github.com/users/la10736", "html_url": "https://github.com/la10736", "followers_url": "https://api.github.com/users/la10736/followers", "following_url": "https://api.github.com/users/la10736/following{/other_user}", "gists_url": "https://api.github.com/users/la10736/gists{/gist_id}", "starred_url": "https://api.github.com/users/la10736/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/la10736/subscriptions", "organizations_url": "https://api.github.com/users/la10736/orgs", "repos_url": "https://api.github.com/users/la10736/repos", "events_url": "https://api.github.com/users/la10736/events{/privacy}", "received_events_url": "https://api.github.com/users/la10736/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66c27c9161b2aa70c2902807be12952bd4a0a62b", "url": "https://api.github.com/repos/rust-lang/rust/commits/66c27c9161b2aa70c2902807be12952bd4a0a62b", "html_url": "https://github.com/rust-lang/rust/commit/66c27c9161b2aa70c2902807be12952bd4a0a62b"}], "stats": {"total": 261, "additions": 207, "deletions": 54}, "files": [{"sha": "77c6ed463bf603c00b6ee0e4d863f642ad52e4ea", "filename": "CHANGELOG.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -2,6 +2,11 @@\n \n ## [Unreleased]\n \n+### Added\n+\n+- Add new attribute `rustfmt::skip::attributes` to prevent rustfmt \n+from formatting an attribute #3665\n+\n ## [1.3.3] 2019-07-15\n \n ### Added"}, {"sha": "292fcf644d209f1a6f57a714b1e13b353b76b62a", "filename": "README.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -179,12 +179,16 @@ needs to be specified in `rustfmt.toml`, e.g., with `edition = \"2018\"`.\n ## Tips\n \n * For things you do not want rustfmt to mangle, use `#[rustfmt::skip]`\n-* To prevent rustfmt from formatting a macro,\n-  use `#[rustfmt::skip::macros(target_macro_name)]`\n+* To prevent rustfmt from formatting a macro or an attribute,\n+  use `#[rustfmt::skip::macros(target_macro_name)]` or \n+  `#[rustfmt::skip::attributes(target_attribute_name)]`\n \n   Example:\n \n     ```rust\n+    #![rustfmt::skip::attributes(custom_attribute)]   \n+\n+    #[custom_attribute(formatting , here , should , be , Skipped)]\n     #[rustfmt::skip::macros(html)]\n     fn main() {\n         let macro_result1 = html! { <div>"}, {"sha": "1c9092ea629895a0db009f9bb8a57317ad738dca", "filename": "src/attr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -319,9 +319,13 @@ impl Rewrite for ast::Attribute {\n         if self.is_sugared_doc {\n             rewrite_doc_comment(snippet, shape.comment(context.config), context.config)\n         } else {\n+            let should_skip = self\n+                .ident()\n+                .map(|s| context.skip_context.skip_attribute(&s.name.as_str()))\n+                .unwrap_or(false);\n             let prefix = attr_prefix(self);\n \n-            if contains_comment(snippet) {\n+            if should_skip || contains_comment(snippet) {\n                 return Some(snippet.to_owned());\n             }\n "}, {"sha": "879ddc61b13bf4f5e1a4c4f78562083ea6075691", "filename": "src/formatting.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -17,7 +17,7 @@ use crate::comment::{CharClasses, FullCodeCharKind};\n use crate::config::{Config, FileName, Verbosity};\n use crate::ignore_path::IgnorePathSet;\n use crate::issues::BadIssueSeeker;\n-use crate::utils::{count_newlines, get_skip_macro_names};\n+use crate::utils::count_newlines;\n use crate::visitor::{FmtVisitor, SnippetProvider};\n use crate::{modules, source_file, ErrorKind, FormatReport, Input, Session};\n \n@@ -158,10 +158,7 @@ impl<'a, T: FormatHandler + 'a> FormatContext<'a, T> {\n             &snippet_provider,\n             self.report.clone(),\n         );\n-        visitor\n-            .skip_macro_names\n-            .borrow_mut()\n-            .append(&mut get_skip_macro_names(&self.krate.attrs));\n+        visitor.skip_context.update_with_attrs(&self.krate.attrs);\n \n         // Format inner attributes if available.\n         if !self.krate.attrs.is_empty() && is_root {"}, {"sha": "a672e2cc8aa82ae4e47cbbc9a97a08f88de000fd", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -69,6 +69,7 @@ mod reorder;\n mod rewrite;\n pub(crate) mod rustfmt_diff;\n mod shape;\n+mod skip;\n pub(crate) mod source_file;\n pub(crate) mod source_map;\n mod spanned;"}, {"sha": "0fbc7521ad7c4c90ff0a3afc25051523444b3c57", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -211,9 +211,8 @@ pub(crate) fn rewrite_macro(\n     position: MacroPosition,\n ) -> Option<String> {\n     let should_skip = context\n-        .skip_macro_names\n-        .borrow()\n-        .contains(&context.snippet(mac.node.path.span).to_owned());\n+        .skip_context\n+        .skip_macro(&context.snippet(mac.node.path.span).to_owned());\n     if should_skip {\n         None\n     } else {"}, {"sha": "606aafc9ebd12316fcdadeb1d2a0daabe773e325", "filename": "src/rewrite.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -8,6 +8,7 @@ use syntax::source_map::{SourceMap, Span};\n \n use crate::config::{Config, IndentStyle};\n use crate::shape::Shape;\n+use crate::skip::SkipContext;\n use crate::visitor::SnippetProvider;\n use crate::FormatReport;\n \n@@ -39,7 +40,7 @@ pub(crate) struct RewriteContext<'a> {\n     // Used for `format_snippet`\n     pub(crate) macro_rewrite_failure: RefCell<bool>,\n     pub(crate) report: FormatReport,\n-    pub(crate) skip_macro_names: RefCell<Vec<String>>,\n+    pub(crate) skip_context: SkipContext,\n }\n \n impl<'a> RewriteContext<'a> {"}, {"sha": "6b4e04a7173adbfda7f2372c233df5ab012a1f99", "filename": "src/skip.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fskip.rs?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -0,0 +1,73 @@\n+//! Module that contains skip related stuffs.\n+\n+use syntax::ast;\n+\n+/// Take care of skip name stack. You can update it by attributes slice or\n+/// by other context. Query this context to know if you need skip a block.\n+#[derive(Default, Clone)]\n+pub(crate) struct SkipContext {\n+    macros: Vec<String>,\n+    attributes: Vec<String>,\n+}\n+\n+impl SkipContext {\n+    pub(crate) fn update_with_attrs(&mut self, attrs: &[ast::Attribute]) {\n+        self.macros.append(&mut get_skip_names(\"macros\", attrs));\n+        self.attributes\n+            .append(&mut get_skip_names(\"attributes\", attrs));\n+    }\n+\n+    pub(crate) fn update(&mut self, mut other: SkipContext) {\n+        self.macros.append(&mut other.macros);\n+        self.attributes.append(&mut other.attributes);\n+    }\n+\n+    pub(crate) fn skip_macro(&self, name: &str) -> bool {\n+        self.macros.iter().any(|n| n == name)\n+    }\n+\n+    pub(crate) fn skip_attribute(&self, name: &str) -> bool {\n+        self.attributes.iter().any(|n| n == name)\n+    }\n+}\n+\n+static RUSTFMT: &'static str = \"rustfmt\";\n+static SKIP: &'static str = \"skip\";\n+\n+/// Say if you're playing with `rustfmt`'s skip attribute\n+pub(crate) fn is_skip_attr(segments: &[ast::PathSegment]) -> bool {\n+    if segments.len() < 2 || segments[0].ident.to_string() != RUSTFMT {\n+        return false;\n+    }\n+    match segments.len() {\n+        2 => segments[1].ident.to_string() == SKIP,\n+        3 => {\n+            segments[1].ident.to_string() == SKIP\n+                && [\"macros\", \"attributes\"]\n+                    .iter()\n+                    .any(|&n| n == &segments[2].ident.name.as_str())\n+        }\n+        _ => false,\n+    }\n+}\n+\n+fn get_skip_names(kind: &str, attrs: &[ast::Attribute]) -> Vec<String> {\n+    let mut skip_names = vec![];\n+    let path = format!(\"{}::{}::{}\", RUSTFMT, SKIP, kind);\n+    for attr in attrs {\n+        // syntax::ast::Path is implemented partialEq\n+        // but it is designed for segments.len() == 1\n+        if format!(\"{}\", attr.path) != path {\n+            continue;\n+        }\n+\n+        if let Some(list) = attr.meta_item_list() {\n+            for nested_meta_item in list {\n+                if let Some(name) = nested_meta_item.ident() {\n+                    skip_names.push(name.to_string());\n+                }\n+            }\n+        }\n+    }\n+    skip_names\n+}"}, {"sha": "a7063c76f28ca1e4e8a17de7232e884f0c73e3c6", "filename": "src/test/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -26,6 +26,7 @@ const SKIP_FILE_WHITE_LIST: &[&str] = &[\n     // so we do not want to test this file directly.\n     \"configs/skip_children/foo/mod.rs\",\n     \"issue-3434/no_entry.rs\",\n+    \"issue-3665/sub_mod.rs\",\n     // These files and directory are a part of modules defined inside `cfg_if!`.\n     \"cfg_if/mod.rs\",\n     \"cfg_if/detect\","}, {"sha": "9adc9390111656b50a21e7067ce5dce7b7d181b6", "filename": "src/utils.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -638,26 +638,6 @@ pub(crate) fn unicode_str_width(s: &str) -> usize {\n     s.width()\n }\n \n-pub(crate) fn get_skip_macro_names(attrs: &[ast::Attribute]) -> Vec<String> {\n-    let mut skip_macro_names = vec![];\n-    for attr in attrs {\n-        // syntax::ast::Path is implemented partialEq\n-        // but it is designed for segments.len() == 1\n-        if format!(\"{}\", attr.path) != \"rustfmt::skip::macros\" {\n-            continue;\n-        }\n-\n-        if let Some(list) = attr.meta_item_list() {\n-            for nested_meta_item in list {\n-                if let Some(name) = nested_meta_item.ident() {\n-                    skip_macro_names.push(name.to_string());\n-                }\n-            }\n-        }\n-    }\n-    skip_macro_names\n-}\n-\n #[cfg(test)]\n mod test {\n     use super::*;"}, {"sha": "35291cecfb55ad231ebbab1483fcf579c89334e4", "filename": "src/visitor.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -17,12 +17,13 @@ use crate::items::{\n use crate::macros::{rewrite_macro, rewrite_macro_def, MacroPosition};\n use crate::rewrite::{Rewrite, RewriteContext};\n use crate::shape::{Indent, Shape};\n+use crate::skip::{is_skip_attr, SkipContext};\n use crate::source_map::{LineRangeUtils, SpanUtils};\n use crate::spanned::Spanned;\n use crate::stmt::Stmt;\n use crate::utils::{\n-    self, contains_skip, count_newlines, depr_skip_annotation, get_skip_macro_names,\n-    inner_attributes, mk_sp, ptr_vec_to_ref_vec, rewrite_ident, stmt_expr,\n+    self, contains_skip, count_newlines, depr_skip_annotation, inner_attributes, mk_sp,\n+    ptr_vec_to_ref_vec, rewrite_ident, stmt_expr,\n };\n use crate::{ErrorKind, FormatReport, FormattingError};\n \n@@ -67,7 +68,7 @@ pub(crate) struct FmtVisitor<'a> {\n     pub(crate) skipped_range: Vec<(usize, usize)>,\n     pub(crate) macro_rewrite_failure: bool,\n     pub(crate) report: FormatReport,\n-    pub(crate) skip_macro_names: RefCell<Vec<String>>,\n+    pub(crate) skip_context: SkipContext,\n }\n \n impl<'a> Drop for FmtVisitor<'a> {\n@@ -347,10 +348,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         // the AST lumps them all together.\n         let filtered_attrs;\n         let mut attrs = &item.attrs;\n-        let temp_skip_macro_names = self.skip_macro_names.clone();\n-        self.skip_macro_names\n-            .borrow_mut()\n-            .append(&mut get_skip_macro_names(&attrs));\n+        let skip_context_saved = self.skip_context.clone();\n+        self.skip_context.update_with_attrs(&attrs);\n \n         let should_visit_node_again = match item.node {\n             // For use/extern crate items, skip rewriting attributes but check for a skip attribute.\n@@ -501,7 +500,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 }\n             };\n         }\n-        self.skip_macro_names = temp_skip_macro_names;\n+        self.skip_context = skip_context_saved;\n     }\n \n     pub(crate) fn visit_trait_item(&mut self, ti: &ast::TraitItem) {\n@@ -656,10 +655,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             ctx.snippet_provider,\n             ctx.report.clone(),\n         );\n-        visitor\n-            .skip_macro_names\n-            .borrow_mut()\n-            .append(&mut ctx.skip_macro_names.borrow().clone());\n+        visitor.skip_context.update(ctx.skip_context.clone());\n         visitor.set_parent_context(ctx);\n         visitor\n     }\n@@ -684,7 +680,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             skipped_range: vec![],\n             macro_rewrite_failure: false,\n             report,\n-            skip_macro_names: RefCell::new(vec![]),\n+            skip_context: Default::default(),\n         }\n     }\n \n@@ -741,14 +737,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         if segments[0].ident.to_string() != \"rustfmt\" {\n             return false;\n         }\n-\n-        match segments.len() {\n-            2 => segments[1].ident.to_string() != \"skip\",\n-            3 => {\n-                segments[1].ident.to_string() != \"skip\" || segments[2].ident.to_string() != \"macros\"\n-            }\n-            _ => false,\n-        }\n+        !is_skip_attr(segments)\n     }\n \n     fn walk_mod_items(&mut self, m: &ast::Mod) {\n@@ -881,7 +870,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             snippet_provider: self.snippet_provider,\n             macro_rewrite_failure: RefCell::new(false),\n             report: self.report.clone(),\n-            skip_macro_names: self.skip_macro_names.clone(),\n+            skip_context: self.skip_context.clone(),\n         }\n     }\n }"}, {"sha": "e049fbc5680e31c889e584fe1b12436ded45fc61", "filename": "tests/source/issue-3665/lib.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/tests%2Fsource%2Fissue-3665%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/tests%2Fsource%2Fissue-3665%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3665%2Flib.rs?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -0,0 +1,33 @@\n+#![rustfmt::skip::attributes(skip_mod_attr)]\n+\n+mod sub_mod;\n+\n+#[rustfmt::skip::attributes(other, skip_attr)]\n+fn main() {\n+    #[other(should,\n+skip,\n+        this,                               format)]\n+    struct S {}\n+\n+    #[skip_attr(should, skip,\n+this,                               format,too)]\n+    fn doesnt_mater() {}\n+\n+    #[skip_mod_attr(should, skip,\n+this,                               format,\n+         enerywhere)]\n+    fn more() {}\n+\n+    #[not_skip(not,\n+skip,    me)]\n+    struct B {}\n+}\n+\n+#[other(should, not, skip,\n+this,                               format, here)]\n+fn foo() {}\n+\n+#[skip_mod_attr(should, skip,\n+this,                               format,in,                    master,\n+                    and, sub, module)]\n+fn bar() {}"}, {"sha": "14985259a50f348833f3c8bd4ea4e6744e2ec601", "filename": "tests/source/issue-3665/not_skip_attribute.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/tests%2Fsource%2Fissue-3665%2Fnot_skip_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/tests%2Fsource%2Fissue-3665%2Fnot_skip_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3665%2Fnot_skip_attribute.rs?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -0,0 +1,4 @@\n+#![this::is::not::skip::attribute(ouch)]\n+\n+#[ouch(not,      skip,  me)]\n+fn main() {}"}, {"sha": "75fb24b4a65dd775518bc3c1e4e0c975b06bed90", "filename": "tests/source/issue-3665/sub_mod.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/tests%2Fsource%2Fissue-3665%2Fsub_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/tests%2Fsource%2Fissue-3665%2Fsub_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3665%2Fsub_mod.rs?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -0,0 +1,14 @@\n+#[rustfmt::skip::attributes(more_skip)]\n+#[more_skip(should,\n+      skip,\n+this,                               format)]\n+fn foo() {}\n+\n+#[skip_mod_attr(should, skip,\n+this,                               format,in,                    master,\n+                    and, sub, module)]\n+fn bar() {}\n+\n+#[skip_attr(should,  not,\n+  skip,      this, attribute,    here)]\n+fn baz() {}"}, {"sha": "c313f320368a17f786e04fae2d2e99189a8a6e07", "filename": "tests/target/issue-3665/lib.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/tests%2Ftarget%2Fissue-3665%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/tests%2Ftarget%2Fissue-3665%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3665%2Flib.rs?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -0,0 +1,31 @@\n+#![rustfmt::skip::attributes(skip_mod_attr)]\n+\n+mod sub_mod;\n+\n+#[rustfmt::skip::attributes(other, skip_attr)]\n+fn main() {\n+    #[other(should,\n+skip,\n+        this,                               format)]\n+    struct S {}\n+\n+    #[skip_attr(should, skip,\n+this,                               format,too)]\n+    fn doesnt_mater() {}\n+\n+    #[skip_mod_attr(should, skip,\n+this,                               format,\n+         enerywhere)]\n+    fn more() {}\n+\n+    #[not_skip(not, skip, me)]\n+    struct B {}\n+}\n+\n+#[other(should, not, skip, this, format, here)]\n+fn foo() {}\n+\n+#[skip_mod_attr(should, skip,\n+this,                               format,in,                    master,\n+                    and, sub, module)]\n+fn bar() {}"}, {"sha": "a4e8b94873663dc8c14188858d0cc4470c65b260", "filename": "tests/target/issue-3665/not_skip_attribute.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/tests%2Ftarget%2Fissue-3665%2Fnot_skip_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/tests%2Ftarget%2Fissue-3665%2Fnot_skip_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3665%2Fnot_skip_attribute.rs?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -0,0 +1,4 @@\n+#![this::is::not::skip::attribute(ouch)]\n+\n+#[ouch(not, skip, me)]\n+fn main() {}"}, {"sha": "30a2b0fd9d9603f155cd5cdbc6f476fd41c3d21b", "filename": "tests/target/issue-3665/sub_mod.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/tests%2Ftarget%2Fissue-3665%2Fsub_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e2ba25bd419beedbbc15aec6b4c6aef4deffaf/tests%2Ftarget%2Fissue-3665%2Fsub_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3665%2Fsub_mod.rs?ref=76e2ba25bd419beedbbc15aec6b4c6aef4deffaf", "patch": "@@ -0,0 +1,13 @@\n+#[rustfmt::skip::attributes(more_skip)]\n+#[more_skip(should,\n+      skip,\n+this,                               format)]\n+fn foo() {}\n+\n+#[skip_mod_attr(should, skip,\n+this,                               format,in,                    master,\n+                    and, sub, module)]\n+fn bar() {}\n+\n+#[skip_attr(should, not, skip, this, attribute, here)]\n+fn baz() {}"}]}