{"sha": "4c2be06a7eb8fc93faf00909384912dc9e9fa39b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMmJlMDZhN2ViOGZjOTNmYWYwMDkwOTM4NDkxMmRjOWU5ZmEzOWI=", "commit": {"author": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2018-10-03T21:04:00Z"}, "committer": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2018-10-03T21:04:00Z"}, "message": "Extend comments by single word first\n\nFixes #88", "tree": {"sha": "c31be2f1beb8bbb499f5603090afc6f31677e915", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c31be2f1beb8bbb499f5603090afc6f31677e915"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c2be06a7eb8fc93faf00909384912dc9e9fa39b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2be06a7eb8fc93faf00909384912dc9e9fa39b", "html_url": "https://github.com/rust-lang/rust/commit/4c2be06a7eb8fc93faf00909384912dc9e9fa39b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c2be06a7eb8fc93faf00909384912dc9e9fa39b/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87fcb4ea5874a7307c1d9d1192e923f3ae2c922", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87fcb4ea5874a7307c1d9d1192e923f3ae2c922", "html_url": "https://github.com/rust-lang/rust/commit/c87fcb4ea5874a7307c1d9d1192e923f3ae2c922"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "5946824d823403c721c6778b3dcaf1239b26d000", "filename": "crates/ra_editor/src/extend_selection.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4c2be06a7eb8fc93faf00909384912dc9e9fa39b/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2be06a7eb8fc93faf00909384912dc9e9fa39b/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fextend_selection.rs?ref=4c2be06a7eb8fc93faf00909384912dc9e9fa39b", "patch": "@@ -16,12 +16,18 @@ pub(crate) fn extend(root: SyntaxNodeRef, range: TextRange) -> Option<TextRange>\n         if leaves.clone().all(|it| it.kind() == WHITESPACE) {\n             return Some(extend_ws(root, leaves.next()?, offset));\n         }\n-        let leaf = match leaves {\n+        let leaf_range = match leaves {\n             LeafAtOffset::None => return None,\n-            LeafAtOffset::Single(l) => l,\n-            LeafAtOffset::Between(l, r) => pick_best(l, r),\n+            LeafAtOffset::Single(l) => {\n+                if l.kind() == COMMENT {\n+                    extend_single_word_in_comment(l, range).unwrap_or_else(||l.range())\n+                } else {\n+                    l.range()\n+                }\n+            },\n+            LeafAtOffset::Between(l, r) => pick_best(l, r).range(),\n         };\n-        return Some(leaf.range());\n+        return Some(leaf_range);\n     };\n     let node = find_covering_node(root, range);\n     if node.kind() == COMMENT && range == node.range() {\n@@ -36,6 +42,24 @@ pub(crate) fn extend(root: SyntaxNodeRef, range: TextRange) -> Option<TextRange>\n     }\n }\n \n+fn extend_single_word_in_comment(leaf: SyntaxNodeRef, range: TextRange) -> Option<TextRange> {\n+    let text : &str = leaf.leaf_text().unwrap();\n+    let cursor_position: u32 = (range.start() - leaf.range().start()).into();\n+\n+    let (before, after) = text.split_at(cursor_position as usize);\n+    let start_idx = before.rfind(char::is_whitespace);\n+    let end_idx = after.find(char::is_whitespace);\n+\n+    match (start_idx, end_idx) {\n+        (Some(start), Some(end)) => {\n+            let from : TextUnit = (start as u32 + 1).into();\n+            let to : TextUnit = (cursor_position + (end as u32)).into();\n+            Some(TextRange::from_to(from, to))\n+        },\n+        (_, _) => None\n+    }\n+}\n+\n fn extend_ws(root: SyntaxNodeRef, ws: SyntaxNodeRef, offset: TextUnit) -> TextRange {\n     let ws_text = ws.leaf_text().unwrap();\n     let suffix = TextRange::from_to(offset, ws.range().end()) - ws.range().start();\n@@ -176,4 +200,12 @@ fn main() { foo+<|>bar;}\n             &[\"'a\", \"<'a>\"]\n         );\n     }\n+\n+    #[test]\n+    fn test_extend_selection_select_first_word() {\n+        do_check(\n+            r#\"// foo bar b<|>az quxx\"#,\n+            &[\"baz\", \"// foo bar baz quxx\"]\n+        );\n+    }\n }"}]}