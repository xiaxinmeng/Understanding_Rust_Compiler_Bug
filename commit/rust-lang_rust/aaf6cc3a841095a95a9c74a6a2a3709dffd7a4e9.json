{"sha": "aaf6cc3a841095a95a9c74a6a2a3709dffd7a4e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZjZjYzNhODQxMDk1YTk1YTljNzRhNmEyYTM3MDlkZmZkN2E0ZTk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-28T00:04:57Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-10-01T06:21:18Z"}, "message": "Prevent leakage of fmt! into the compiler\n\nWe're not outright removing fmt! just yet, but this prevents it from leaking\ninto the compiler further (it's still turned on by default for all other code).", "tree": {"sha": "1fe1052595ff999e20411a47b4d23762e9c1ae9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fe1052595ff999e20411a47b4d23762e9c1ae9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaf6cc3a841095a95a9c74a6a2a3709dffd7a4e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf6cc3a841095a95a9c74a6a2a3709dffd7a4e9", "html_url": "https://github.com/rust-lang/rust/commit/aaf6cc3a841095a95a9c74a6a2a3709dffd7a4e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaf6cc3a841095a95a9c74a6a2a3709dffd7a4e9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dbc467fd957a0daf3fd935ccce0fc9ea5d1dcd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dbc467fd957a0daf3fd935ccce0fc9ea5d1dcd8", "html_url": "https://github.com/rust-lang/rust/commit/1dbc467fd957a0daf3fd935ccce0fc9ea5d1dcd8"}], "stats": {"total": 113, "additions": 63, "deletions": 50}, "files": [{"sha": "06adc311f78602ab1e21b3b74bc8a761535f4151", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaf6cc3a841095a95a9c74a6a2a3709dffd7a4e9/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/aaf6cc3a841095a95a9c74a6a2a3709dffd7a4e9/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=aaf6cc3a841095a95a9c74a6a2a3709dffd7a4e9", "patch": "@@ -88,7 +88,7 @@ ifneq ($(wildcard $(NON_BUILD_TARGET_TRIPLES)),)\n CFG_INFO := $(info cfg: non-build target triples $(NON_BUILD_TARGET_TRIPLES))\n endif\n \n-CFG_RUSTC_FLAGS := $(RUSTFLAGS)\n+CFG_RUSTC_FLAGS := $(RUSTFLAGS) --cfg nofmt\n CFG_GCCISH_CFLAGS :=\n CFG_GCCISH_LINK_FLAGS :=\n "}, {"sha": "4824924bc0fad5a30f260f33b67f1a98587d5078", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaf6cc3a841095a95a9c74a6a2a3709dffd7a4e9/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf6cc3a841095a95a9c74a6a2a3709dffd7a4e9/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=aaf6cc3a841095a95a9c74a6a2a3709dffd7a4e9", "patch": "@@ -222,7 +222,7 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n                                 span: None,\n                             } as @SyntaxExpanderTTItemTrait,\n                             None)));\n-    syntax_expanders.insert(intern(&\"fmt\"),\n+    syntax_expanders.insert(intern(&\"oldfmt\"),\n                             builtin_normal_tt_no_ctxt(\n                                 ext::fmt::expand_syntax_ext));\n     syntax_expanders.insert(intern(&\"format_args\"),"}, {"sha": "697df52513d8ff9b0eadf3ec76919db6177276a6", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 61, "deletions": 48, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/aaf6cc3a841095a95a9c74a6a2a3709dffd7a4e9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf6cc3a841095a95a9c74a6a2a3709dffd7a4e9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=aaf6cc3a841095a95a9c74a6a2a3709dffd7a4e9", "patch": "@@ -809,30 +809,49 @@ pub fn std_macros() -> @str {\n \n     macro_rules! ignore (($($x:tt)*) => (()))\n \n-    macro_rules! log(\n-        ($lvl:expr, $arg:expr) => ({\n-            let lvl = $lvl;\n-            if lvl <= __log_level() {\n-                format_args!(|args| {\n-                    ::std::logging::log(lvl, args)\n-                }, \\\"{}\\\", fmt!(\\\"%?\\\", $arg))\n-            }\n-        });\n-        ($lvl:expr, $($arg:expr),+) => ({\n-            let lvl = $lvl;\n-            if lvl <= __log_level() {\n-                format_args!(|args| {\n-                    ::std::logging::log(lvl, args)\n-                }, \\\"{}\\\", fmt!($($arg),+))\n-            }\n-        })\n-    )\n-    macro_rules! error( ($($arg:tt)*) => (log!(1u32, $($arg)*)) )\n-    macro_rules! warn ( ($($arg:tt)*) => (log!(2u32, $($arg)*)) )\n-    macro_rules! info ( ($($arg:tt)*) => (log!(3u32, $($arg)*)) )\n-    macro_rules! debug( ($($arg:tt)*) => (\n-        if cfg!(not(ndebug)) { log!(4u32, $($arg)*) }\n-    ))\n+    #[cfg(not(nofmt))]\n+    mod fmt_extension {\n+        #[macro_escape];\n+\n+        macro_rules! fmt(($($arg:tt)*) => (oldfmt!($($arg)*)))\n+\n+        macro_rules! log(\n+            ($lvl:expr, $arg:expr) => ({\n+                let lvl = $lvl;\n+                if lvl <= __log_level() {\n+                    format_args!(|args| {\n+                        ::std::logging::log(lvl, args)\n+                    }, \\\"{}\\\", fmt!(\\\"%?\\\", $arg))\n+                }\n+            });\n+            ($lvl:expr, $($arg:expr),+) => ({\n+                let lvl = $lvl;\n+                if lvl <= __log_level() {\n+                    format_args!(|args| {\n+                        ::std::logging::log(lvl, args)\n+                    }, \\\"{}\\\", fmt!($($arg),+))\n+                }\n+            })\n+        )\n+        macro_rules! error( ($($arg:tt)*) => (log!(1u32, $($arg)*)) )\n+        macro_rules! warn ( ($($arg:tt)*) => (log!(2u32, $($arg)*)) )\n+        macro_rules! info ( ($($arg:tt)*) => (log!(3u32, $($arg)*)) )\n+        macro_rules! debug( ($($arg:tt)*) => (\n+            if cfg!(not(ndebug)) { log!(4u32, $($arg)*) }\n+        ))\n+\n+        macro_rules! fail(\n+            () => (\n+                fail!(\\\"explicit failure\\\")\n+            );\n+            ($msg:expr) => (\n+                ::std::sys::FailWithCause::fail_with($msg, file!(), line!())\n+            );\n+            ($( $arg:expr ),+) => (\n+                ::std::sys::FailWithCause::fail_with(fmt!( $($arg),+ ), file!(), line!())\n+            )\n+        )\n+    }\n \n     macro_rules! log2(\n         ($lvl:expr, $($arg:tt)+) => ({\n@@ -851,24 +870,15 @@ pub fn std_macros() -> @str {\n         if cfg!(not(ndebug)) { log2!(4u32, $($arg)*) }\n     ))\n \n-    macro_rules! fail(\n-        () => (\n-            fail!(\\\"explicit failure\\\")\n-        );\n-        ($msg:expr) => (\n-            ::std::sys::FailWithCause::fail_with($msg, file!(), line!())\n-        );\n-        ($( $arg:expr ),+) => (\n-            ::std::sys::FailWithCause::fail_with(fmt!( $($arg),+ ), file!(), line!())\n-        )\n-    )\n-\n     macro_rules! fail2(\n         () => (\n-            fail!(\\\"explicit failure\\\")\n+            fail2!(\\\"explicit failure\\\")\n+        );\n+        ($fmt:expr) => (\n+            ::std::sys::FailWithCause::fail_with($fmt, file!(), line!())\n         );\n-        ($($arg:tt)*) => (\n-            ::std::sys::FailWithCause::fail_with(format!($($arg)*), file!(), line!())\n+        ($fmt:expr, $($arg:tt)*) => (\n+            ::std::sys::FailWithCause::fail_with(format!($fmt, $($arg)*), file!(), line!())\n         )\n     )\n \n@@ -894,12 +904,14 @@ pub fn std_macros() -> @str {\n     macro_rules! assert_eq (\n         ($given:expr , $expected:expr) => (\n             {\n-                let given_val = $given;\n-                let expected_val = $expected;\n+                let given_val = &($given);\n+                let expected_val = &($expected);\n                 // check both directions of equality....\n-                if !((given_val == expected_val) && (expected_val == given_val)) {\n-                    fail!(\\\"assertion failed: `(left == right) && (right == \\\n-                    left)` (left: `%?`, right: `%?`)\\\", given_val, expected_val);\n+                if !((*given_val == *expected_val) &&\n+                     (*expected_val == *given_val)) {\n+                    fail2!(\\\"assertion failed: `(left == right) && (right == \\\n+                             left)` (left: `{:?}`, right: `{:?}`)\\\",\n+                           *given_val, *expected_val);\n                 }\n             }\n         )\n@@ -917,8 +929,8 @@ pub fn std_macros() -> @str {\n                     given_val.approx_eq(&expected_val) &&\n                     expected_val.approx_eq(&given_val)\n                 ) {\n-                    fail!(\\\"left: %? does not approximately equal right: %?\\\",\n-                          given_val, expected_val);\n+                    fail2!(\\\"left: {:?} does not approximately equal right: {:?}\\\",\n+                           given_val, expected_val);\n                 }\n             }\n         );\n@@ -934,7 +946,8 @@ pub fn std_macros() -> @str {\n                     given_val.approx_eq_eps(&expected_val, &epsilon_val) &&\n                     expected_val.approx_eq_eps(&given_val, &epsilon_val)\n                 ) {\n-                    fail!(\\\"left: %? does not approximately equal right: %? with epsilon: %?\\\",\n+                    fail2!(\\\"left: {:?} does not approximately equal right: \\\n+                             {:?} with epsilon: {:?}\\\",\n                           given_val, expected_val, epsilon_val);\n                 }\n             }\n@@ -968,7 +981,7 @@ pub fn std_macros() -> @str {\n \n     */\n     macro_rules! unreachable (() => (\n-        fail!(\\\"internal error: entered unreachable code\\\");\n+        fail2!(\\\"internal error: entered unreachable code\\\");\n     ))\n \n     macro_rules! condition ("}]}