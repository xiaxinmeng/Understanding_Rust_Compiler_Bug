{"sha": "7c0124dd357650acb9b7115a408712ea281d8d22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMDEyNGRkMzU3NjUwYWNiOWI3MTE1YTQwODcxMmVhMjgxZDhkMjI=", "commit": {"author": {"name": "Austin Bonander", "email": "austin.bonander@gmail.com", "date": "2018-03-16T06:20:56Z"}, "committer": {"name": "Austin Bonander", "email": "austin.bonander@gmail.com", "date": "2018-04-02T08:56:12Z"}, "message": "Expand attribute macros on statements and expressions.\n\nRetains the `stmt_expr_attributes` feature requirement for attributes on expressions.\n\ncloses #41475\ncc #38356", "tree": {"sha": "496bfd1527c0c074eb6a7b0d9e1b5c0dfe338f5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/496bfd1527c0c074eb6a7b0d9e1b5c0dfe338f5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c0124dd357650acb9b7115a408712ea281d8d22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0124dd357650acb9b7115a408712ea281d8d22", "html_url": "https://github.com/rust-lang/rust/commit/7c0124dd357650acb9b7115a408712ea281d8d22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c0124dd357650acb9b7115a408712ea281d8d22/comments", "author": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "committer": {"login": "abonander", "id": 3198595, "node_id": "MDQ6VXNlcjMxOTg1OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3198595?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonander", "html_url": "https://github.com/abonander", "followers_url": "https://api.github.com/users/abonander/followers", "following_url": "https://api.github.com/users/abonander/following{/other_user}", "gists_url": "https://api.github.com/users/abonander/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonander/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonander/subscriptions", "organizations_url": "https://api.github.com/users/abonander/orgs", "repos_url": "https://api.github.com/users/abonander/repos", "events_url": "https://api.github.com/users/abonander/events{/privacy}", "received_events_url": "https://api.github.com/users/abonander/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "517f24025a04e09936a6d07dc5298ca2b9371329", "url": "https://api.github.com/repos/rust-lang/rust/commits/517f24025a04e09936a6d07dc5298ca2b9371329", "html_url": "https://github.com/rust-lang/rust/commit/517f24025a04e09936a6d07dc5298ca2b9371329"}], "stats": {"total": 367, "additions": 334, "deletions": 33}, "files": [{"sha": "c90b0aecfc04459b53eb666b78eb36570eefb24f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -837,6 +837,13 @@ impl Stmt {\n             _ => false,\n         }\n     }\n+\n+    pub fn is_expr(&self) -> bool {\n+        match self.node {\n+            StmtKind::Expr(_) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n impl fmt::Debug for Stmt {"}, {"sha": "c0855d470c8bf99f260066b7a151433b352ac577", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -149,17 +149,24 @@ impl<'a> StripUnconfigured<'a> {\n     fn visit_expr_attrs(&mut self, attrs: &[ast::Attribute]) {\n         // flag the offending attributes\n         for attr in attrs.iter() {\n-            if !self.features.map(|features| features.stmt_expr_attributes).unwrap_or(true) {\n-                let mut err = feature_err(self.sess,\n-                                          \"stmt_expr_attributes\",\n-                                          attr.span,\n-                                          GateIssue::Language,\n-                                          EXPLAIN_STMT_ATTR_SYNTAX);\n-                if attr.is_sugared_doc {\n-                    err.help(\"`///` is for documentation comments. For a plain comment, use `//`.\");\n-                }\n-                err.emit();\n+            self.maybe_emit_expr_attr_err(attr);\n+        }\n+    }\n+\n+    /// If attributes are not allowed on expressions, emit an error for `attr`\n+    pub fn maybe_emit_expr_attr_err(&self, attr: &ast::Attribute) {\n+        if !self.features.map(|features| features.stmt_expr_attributes).unwrap_or(true) {\n+            let mut err = feature_err(self.sess,\n+                                      \"stmt_expr_attributes\",\n+                                      attr.span,\n+                                      GateIssue::Language,\n+                                      EXPLAIN_STMT_ATTR_SYNTAX);\n+\n+            if attr.is_sugared_doc {\n+                err.help(\"`///` is for documentation comments. For a plain comment, use `//`.\");\n             }\n+\n+            err.emit();\n         }\n     }\n "}, {"sha": "d3157af984e80534d15424ba4fe7a9251dfad015", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -38,6 +38,8 @@ pub enum Annotatable {\n     Item(P<ast::Item>),\n     TraitItem(P<ast::TraitItem>),\n     ImplItem(P<ast::ImplItem>),\n+    Stmt(P<ast::Stmt>),\n+    Expr(P<ast::Expr>),\n }\n \n impl HasAttrs for Annotatable {\n@@ -46,6 +48,8 @@ impl HasAttrs for Annotatable {\n             Annotatable::Item(ref item) => &item.attrs,\n             Annotatable::TraitItem(ref trait_item) => &trait_item.attrs,\n             Annotatable::ImplItem(ref impl_item) => &impl_item.attrs,\n+            Annotatable::Stmt(ref stmt) => stmt.attrs(),\n+            Annotatable::Expr(ref expr) => &expr.attrs,\n         }\n     }\n \n@@ -54,6 +58,8 @@ impl HasAttrs for Annotatable {\n             Annotatable::Item(item) => Annotatable::Item(item.map_attrs(f)),\n             Annotatable::TraitItem(trait_item) => Annotatable::TraitItem(trait_item.map_attrs(f)),\n             Annotatable::ImplItem(impl_item) => Annotatable::ImplItem(impl_item.map_attrs(f)),\n+            Annotatable::Stmt(stmt) => Annotatable::Stmt(stmt.map_attrs(f)),\n+            Annotatable::Expr(expr) => Annotatable::Expr(expr.map_attrs(f)),\n         }\n     }\n }\n@@ -64,6 +70,8 @@ impl Annotatable {\n             Annotatable::Item(ref item) => item.span,\n             Annotatable::TraitItem(ref trait_item) => trait_item.span,\n             Annotatable::ImplItem(ref impl_item) => impl_item.span,\n+            Annotatable::Stmt(ref stmt) => stmt.span,\n+            Annotatable::Expr(ref expr) => expr.span,\n         }\n     }\n "}, {"sha": "864969c40750b5623e8cf51513bbbc98fdb861fe", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 70, "deletions": 19, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -435,6 +435,12 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             Annotatable::ImplItem(item) => {\n                 Annotatable::ImplItem(item.map(|item| cfg.fold_impl_item(item).pop().unwrap()))\n             }\n+            Annotatable::Stmt(stmt) => {\n+                Annotatable::Stmt(stmt.map(|stmt| cfg.fold_stmt(stmt).pop().unwrap()))\n+            }\n+            Annotatable::Expr(expr) => {\n+                Annotatable::Expr(cfg.fold_expr(expr))\n+            }\n         }\n     }\n \n@@ -503,6 +509,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     Annotatable::Item(item) => token::NtItem(item),\n                     Annotatable::TraitItem(item) => token::NtTraitItem(item.into_inner()),\n                     Annotatable::ImplItem(item) => token::NtImplItem(item.into_inner()),\n+                    Annotatable::Stmt(stmt) => token::NtStmt(stmt.into_inner()),\n+                    Annotatable::Expr(expr) => token::NtExpr(expr),\n                 })).into();\n                 let tok_result = mac.expand(self.cx, attr.span, attr.tokens, item_tok);\n                 self.parse_expansion(tok_result, kind, &attr.path, attr.span)\n@@ -751,6 +759,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 Some(expansion)\n             }\n             Err(mut err) => {\n+                err.set_span(span);\n                 err.emit();\n                 self.cx.trace_macros_diag();\n                 kind.dummy(span)\n@@ -796,7 +805,13 @@ impl<'a> Parser<'a> {\n                 Expansion::Stmts(stmts)\n             }\n             ExpansionKind::Expr => Expansion::Expr(self.parse_expr()?),\n-            ExpansionKind::OptExpr => Expansion::OptExpr(Some(self.parse_expr()?)),\n+            ExpansionKind::OptExpr => {\n+                if self.token != token::Eof {\n+                    Expansion::OptExpr(Some(self.parse_expr()?))\n+                } else {\n+                    Expansion::OptExpr(None)\n+                }\n+            },\n             ExpansionKind::Ty => Expansion::Ty(self.parse_ty()?),\n             ExpansionKind::Pat => Expansion::Pat(self.parse_pat()?),\n         })\n@@ -904,6 +919,18 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         let mut expr = self.cfg.configure_expr(expr).into_inner();\n         expr.node = self.cfg.configure_expr_kind(expr.node);\n \n+        let (attr, derives, expr) = self.classify_item(expr);\n+\n+        if attr.is_some() || !derives.is_empty() {\n+            // collect the invoc regardless of whether or not attributes are permitted here\n+            // expansion will eat the attribute so it won't error later\n+            attr.as_ref().map(|a| self.cfg.maybe_emit_expr_attr_err(a));\n+\n+            // ExpansionKind::Expr requires the macro to emit an expression\n+            return self.collect_attr(attr, derives, Annotatable::Expr(P(expr)), ExpansionKind::Expr)\n+                .make_expr();\n+        }\n+\n         if let ast::ExprKind::Mac(mac) = expr.node {\n             self.check_attributes(&expr.attrs);\n             self.collect_bang(mac, expr.span, ExpansionKind::Expr).make_expr()\n@@ -916,6 +943,16 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         let mut expr = configure!(self, expr).into_inner();\n         expr.node = self.cfg.configure_expr_kind(expr.node);\n \n+        let (attr, derives, expr) = self.classify_item(expr);\n+\n+        if attr.is_some() || !derives.is_empty() {\n+            attr.as_ref().map(|a| self.cfg.maybe_emit_expr_attr_err(a));\n+\n+            return self.collect_attr(attr, derives, Annotatable::Expr(P(expr)),\n+                                     ExpansionKind::OptExpr)\n+                .make_opt_expr();\n+        }\n+\n         if let ast::ExprKind::Mac(mac) = expr.node {\n             self.check_attributes(&expr.attrs);\n             self.collect_bang(mac, expr.span, ExpansionKind::OptExpr).make_opt_expr()\n@@ -938,33 +975,47 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n     }\n \n     fn fold_stmt(&mut self, stmt: ast::Stmt) -> SmallVector<ast::Stmt> {\n-        let stmt = match self.cfg.configure_stmt(stmt) {\n+        let mut stmt = match self.cfg.configure_stmt(stmt) {\n             Some(stmt) => stmt,\n             None => return SmallVector::new(),\n         };\n \n-        let (mac, style, attrs) = if let StmtKind::Mac(mac) = stmt.node {\n-            mac.into_inner()\n-        } else {\n-            // The placeholder expander gives ids to statements, so we avoid folding the id here.\n-            let ast::Stmt { id, node, span } = stmt;\n-            return noop_fold_stmt_kind(node, self).into_iter().map(|node| {\n-                ast::Stmt { id: id, node: node, span: span }\n-            }).collect()\n-        };\n+        // we'll expand attributes on expressions separately\n+        if !stmt.is_expr() {\n+            let (attr, derives, stmt_) = self.classify_item(stmt);\n+\n+            if attr.is_some() || !derives.is_empty() {\n+                return self.collect_attr(attr, derives,\n+                                         Annotatable::Stmt(P(stmt_)), ExpansionKind::Stmts)\n+                    .make_stmts();\n+            }\n \n-        self.check_attributes(&attrs);\n-        let mut placeholder = self.collect_bang(mac, stmt.span, ExpansionKind::Stmts).make_stmts();\n+            stmt = stmt_;\n+        }\n \n-        // If this is a macro invocation with a semicolon, then apply that\n-        // semicolon to the final statement produced by expansion.\n-        if style == MacStmtStyle::Semicolon {\n-            if let Some(stmt) = placeholder.pop() {\n-                placeholder.push(stmt.add_trailing_semicolon());\n+        if let StmtKind::Mac(mac) = stmt.node {\n+            let (mac, style, attrs) = mac.into_inner();\n+            self.check_attributes(&attrs);\n+            let mut placeholder = self.collect_bang(mac, stmt.span, ExpansionKind::Stmts)\n+                                        .make_stmts();\n+\n+            // If this is a macro invocation with a semicolon, then apply that\n+            // semicolon to the final statement produced by expansion.\n+            if style == MacStmtStyle::Semicolon {\n+                if let Some(stmt) = placeholder.pop() {\n+                    placeholder.push(stmt.add_trailing_semicolon());\n+                }\n             }\n+\n+            return placeholder;\n         }\n \n-        placeholder\n+        // The placeholder expander gives ids to statements, so we avoid folding the id here.\n+        let ast::Stmt { id, node, span } = stmt;\n+        noop_fold_stmt_kind(node, self).into_iter().map(|node| {\n+            ast::Stmt { id, node, span }\n+        }).collect()\n+\n     }\n \n     fn fold_block(&mut self, block: P<Block>) -> P<Block> {"}, {"sha": "71609af803e09664716fbef37d7c21b02c261ded", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -1250,7 +1250,7 @@ const EXPLAIN_BOX_SYNTAX: &'static str =\n     \"box expression syntax is experimental; you can call `Box::new` instead.\";\n \n pub const EXPLAIN_STMT_ATTR_SYNTAX: &'static str =\n-    \"attributes on non-item statements and expressions are experimental.\";\n+    \"attributes on expressions are experimental.\";\n \n pub const EXPLAIN_ASM: &'static str =\n     \"inline assembly is not stable enough for use and is subject to change\";"}, {"sha": "262198b6b15accff9289931ce11ad6cc72b55ce7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -4601,6 +4601,9 @@ impl<'a> Parser<'a> {\n \n     /// Parse a statement, including the trailing semicolon.\n     pub fn parse_full_stmt(&mut self, macro_legacy_warnings: bool) -> PResult<'a, Option<Stmt>> {\n+        // skip looking for a trailing semicolon when we have an interpolated statement\n+        maybe_whole!(self, NtStmt, |x| Some(x));\n+\n         let mut stmt = match self.parse_stmt_without_recovery(macro_legacy_warnings)? {\n             Some(stmt) => stmt,\n             None => return Ok(None),"}, {"sha": "80557078d5463da4f9c1c87f8edf59c2f359a031", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -54,7 +54,9 @@ impl MultiItemModifier for ProcMacroDerive {\n         let item = match item {\n             Annotatable::Item(item) => item,\n             Annotatable::ImplItem(_) |\n-            Annotatable::TraitItem(_) => {\n+            Annotatable::TraitItem(_) |\n+            Annotatable::Stmt(_) |\n+            Annotatable::Expr(_) => {\n                 ecx.span_err(span, \"proc-macro derives may only be \\\n                                     applied to struct/enum items\");\n                 return Vec::new()"}, {"sha": "77ea3019419387df239a147e4c13757e844058db", "filename": "src/test/compile-fail-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -93,6 +93,8 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n                 }\n             })\n         }\n+        // these are covered in proc_macro/attr-stmt-expr.rs\n+        Annotatable::Stmt(_) | Annotatable::Expr(_) => panic!(\"expected item\")\n     }\n }\n \n@@ -145,6 +147,8 @@ fn expand_duplicate(cx: &mut ExtCtxt,\n             new_it.ident = copy_name;\n             push(Annotatable::TraitItem(P(new_it)));\n         }\n+        // covered in proc_macro/attr-stmt-expr.rs\n+        Annotatable::Stmt(_) | Annotatable::Expr(_) => panic!(\"expected item\")\n     }\n }\n "}, {"sha": "2f65bd16bb54a1953a0422d57e1ee2c5add15a7b", "filename": "src/test/compile-fail-fulldeps/proc-macro/attr-invalid-exprs.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-invalid-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-invalid-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-invalid-exprs.rs?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:attr-stmt-expr.rs\n+// ignore-stage1\n+\n+//! Attributes producing expressions in invalid locations\n+\n+#![feature(proc_macro, stmt_expr_attributes)]\n+\n+extern crate attr_stmt_expr;\n+use attr_stmt_expr::{duplicate, no_output};\n+\n+fn main() {\n+    let _ = #[no_output] \"Hello, world!\";\n+    //~^ ERROR expected expression, found `<eof>`\n+\n+    let _ = #[duplicate] \"Hello, world!\";\n+    //~^ ERROR macro expansion ignores token `,` and any following\n+\n+    let _ = {\n+        #[no_output]\n+        \"Hello, world!\"\n+    };\n+\n+    let _ = {\n+        #[duplicate]\n+        //~^ ERROR macro expansion ignores token `,` and any following\n+        \"Hello, world!\"\n+    };\n+}"}, {"sha": "d29bc00c663c8e2788a4884b47a69e5c761b693a", "filename": "src/test/compile-fail-fulldeps/proc-macro/attr-stmt-expr.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:attr-stmt-expr.rs\n+// ignore-stage1\n+\n+#![feature(proc_macro)]\n+\n+extern crate attr_stmt_expr;\n+use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};\n+\n+fn print_str(string: &'static str) {\n+    // macros are handled a bit differently\n+    #[expect_print_expr]\n+    //~^ ERROR attributes on expressions are experimental\n+    //~| HELP add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n+    println!(\"{}\", string)\n+}\n+\n+fn main() {\n+    #[expect_let]\n+    let string = \"Hello, world!\";\n+\n+    #[expect_print_stmt]\n+    println!(\"{}\", string);\n+\n+    #[expect_expr]\n+    //~^ ERROR attributes on expressions are experimental\n+    //~| HELP add #![feature(stmt_expr_attributes)] to the crate attributes to enable\n+    print_str(\"string\")\n+}"}, {"sha": "8bae1697dcbeceb0c1afb1126a512638977d93d1", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/attr-stmt-expr.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn expect_let(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"let string = \\\"Hello, world!\\\";\");\n+    item\n+}\n+\n+#[proc_macro_attribute]\n+pub fn expect_print_stmt(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"println!(\\\"{}\\\" , string);\");\n+    item\n+}\n+\n+#[proc_macro_attribute]\n+pub fn expect_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"print_str(\\\"string\\\")\");\n+    item\n+}\n+\n+#[proc_macro_attribute]\n+pub fn expect_print_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"println!(\\\"{}\\\" , string)\");\n+    item\n+}\n+\n+#[proc_macro_attribute]\n+pub fn duplicate(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    format!(\"{}, {}\", item, item).parse().unwrap()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn no_output(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert!(!item.to_string().is_empty());\n+    \"\".parse().unwrap()\n+}"}, {"sha": "5ebd32921329de2bf5efb4a25491e103b34e971b", "filename": "src/test/run-pass-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -96,6 +96,8 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n                 }\n             })\n         ],\n+        // these are covered in proc_macro/attr-stmt-expr.rs\n+        Annotatable::Stmt(_) | Annotatable::Expr(_) => panic!(\"expected item\"),\n     }\n }\n \n@@ -140,6 +142,8 @@ fn expand_duplicate(cx: &mut ExtCtxt,\n             new_it.ident = copy_name;\n             push(Annotatable::TraitItem(P(new_it)));\n         }\n+        // these are covered in proc_macro/attr-stmt-expr.rs\n+        Annotatable::Stmt(_) | Annotatable::Expr(_) => panic!(\"expected item\")\n     }\n }\n "}, {"sha": "082dd63992968ae9fa4ca55dfd4c38f4c49e9201", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-stmt-expr.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:attr-stmt-expr.rs\n+// ignore-stage1\n+\n+#![feature(proc_macro, stmt_expr_attributes)]\n+\n+extern crate attr_stmt_expr;\n+use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};\n+\n+fn print_str(string: &'static str) {\n+    // macros are handled a bit differently\n+    #[expect_print_expr]\n+    println!(\"{}\", string)\n+}\n+\n+fn main() {\n+    #[expect_let]\n+    let string = \"Hello, world!\";\n+\n+    #[expect_print_stmt]\n+    println!(\"{}\", string);\n+\n+    #[expect_expr]\n+    print_str(\"string\")\n+}"}, {"sha": "189e6bbd00dba4e7718df7e07c336033730ca062", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/attr-stmt-expr.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn expect_let(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"let string = \\\"Hello, world!\\\";\");\n+    item\n+}\n+\n+#[proc_macro_attribute]\n+pub fn expect_print_stmt(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"println!(\\\"{}\\\" , string);\");\n+    item\n+}\n+\n+#[proc_macro_attribute]\n+pub fn expect_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"print_str(\\\"string\\\")\");\n+    item\n+}\n+\n+#[proc_macro_attribute]\n+pub fn expect_print_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert_eq!(item.to_string(), \"println!(\\\"{}\\\" , string)\");\n+    item\n+}"}, {"sha": "55706938ae8f28c6f8fd44b1e87191b45e61d812", "filename": "src/test/ui/feature-gate-stmt_expr_attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.rs?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n const X: i32 = #[allow(dead_code)] 8;\n-//~^ ERROR attributes on non-item statements and expressions are experimental. (see issue #15701)\n+//~^ ERROR attributes on expressions are experimental. (see issue #15701)\n \n fn main() {}"}, {"sha": "ad5c263403df34e881a6a5e2738eae658f741fd7", "filename": "src/test/ui/feature-gate-stmt_expr_attributes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c0124dd357650acb9b7115a408712ea281d8d22/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-stmt_expr_attributes.stderr?ref=7c0124dd357650acb9b7115a408712ea281d8d22", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: attributes on non-item statements and expressions are experimental. (see issue #15701)\n+error[E0658]: attributes on expressions are experimental. (see issue #15701)\n   --> $DIR/feature-gate-stmt_expr_attributes.rs:11:16\n    |\n LL | const X: i32 = #[allow(dead_code)] 8;"}]}