{"sha": "620769f32276bb7e8c580eae2c91ee535a06d9f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMDc2OWYzMjI3NmJiN2U4YzU4MGVhZTJjOTFlZTUzNWEwNmQ5Zjg=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-03T19:29:49Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T11:16:38Z"}, "message": "Add TyBuilder::adt", "tree": {"sha": "3d4541f18206d9ad538f8255e00d4632058d9af5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d4541f18206d9ad538f8255e00d4632058d9af5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/620769f32276bb7e8c580eae2c91ee535a06d9f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/620769f32276bb7e8c580eae2c91ee535a06d9f8", "html_url": "https://github.com/rust-lang/rust/commit/620769f32276bb7e8c580eae2c91ee535a06d9f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/620769f32276bb7e8c580eae2c91ee535a06d9f8/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6f007d9a8e676c4af5731001b211ca7a52bce16", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f007d9a8e676c4af5731001b211ca7a52bce16", "html_url": "https://github.com/rust-lang/rust/commit/e6f007d9a8e676c4af5731001b211ca7a52bce16"}], "stats": {"total": 149, "additions": 104, "deletions": 45}, "files": [{"sha": "5eb07126ed4afeb0a745e3bd3743f6f46ae46517", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/620769f32276bb7e8c580eae2c91ee535a06d9f8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620769f32276bb7e8c580eae2c91ee535a06d9f8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=620769f32276bb7e8c580eae2c91ee535a06d9f8", "patch": "@@ -539,17 +539,10 @@ impl<'a> InferenceContext<'a> {\n             Expr::Box { expr } => {\n                 let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n                 if let Some(box_) = self.resolve_boxed_box() {\n-                    let mut sb =\n-                        Substitution::build_for_generics(&generics(self.db.upcast(), box_.into()));\n-                    sb = sb.push(inner_ty);\n-                    match self.db.generic_defaults(box_.into()).get(1) {\n-                        Some(alloc_ty) if !alloc_ty.value.is_unknown() && sb.remaining() > 0 => {\n-                            sb = sb.push(alloc_ty.value.clone());\n-                        }\n-                        _ => (),\n-                    }\n-                    sb = sb.fill(repeat_with(|| self.table.new_type_var()));\n-                    Ty::adt_ty(box_, sb.build())\n+                    TyBuilder::adt(self.db, box_)\n+                        .push(inner_ty)\n+                        .fill_with_defaults(self.db, || self.table.new_type_var())\n+                        .build()\n                 } else {\n                     self.err_ty()\n                 }\n@@ -639,31 +632,31 @@ impl<'a> InferenceContext<'a> {\n                 let rhs_ty = rhs.map(|e| self.infer_expr(e, &rhs_expect));\n                 match (range_type, lhs_ty, rhs_ty) {\n                     (RangeOp::Exclusive, None, None) => match self.resolve_range_full() {\n-                        Some(adt) => Ty::adt_ty(adt, Substitution::empty(&Interner)),\n+                        Some(adt) => TyBuilder::adt(self.db, adt).build(),\n                         None => self.err_ty(),\n                     },\n                     (RangeOp::Exclusive, None, Some(ty)) => match self.resolve_range_to() {\n-                        Some(adt) => Ty::adt_ty(adt, Substitution::single(ty)),\n+                        Some(adt) => TyBuilder::adt(self.db, adt).push(ty).build(),\n                         None => self.err_ty(),\n                     },\n                     (RangeOp::Inclusive, None, Some(ty)) => {\n                         match self.resolve_range_to_inclusive() {\n-                            Some(adt) => Ty::adt_ty(adt, Substitution::single(ty)),\n+                            Some(adt) => TyBuilder::adt(self.db, adt).push(ty).build(),\n                             None => self.err_ty(),\n                         }\n                     }\n                     (RangeOp::Exclusive, Some(_), Some(ty)) => match self.resolve_range() {\n-                        Some(adt) => Ty::adt_ty(adt, Substitution::single(ty)),\n+                        Some(adt) => TyBuilder::adt(self.db, adt).push(ty).build(),\n                         None => self.err_ty(),\n                     },\n                     (RangeOp::Inclusive, Some(_), Some(ty)) => {\n                         match self.resolve_range_inclusive() {\n-                            Some(adt) => Ty::adt_ty(adt, Substitution::single(ty)),\n+                            Some(adt) => TyBuilder::adt(self.db, adt).push(ty).build(),\n                             None => self.err_ty(),\n                         }\n                     }\n                     (RangeOp::Exclusive, Some(ty), None) => match self.resolve_range_from() {\n-                        Some(adt) => Ty::adt_ty(adt, Substitution::single(ty)),\n+                        Some(adt) => TyBuilder::adt(self.db, adt).push(ty).build(),\n                         None => self.err_ty(),\n                     },\n                     (RangeOp::Inclusive, _, None) => self.err_ty(),"}, {"sha": "5b70d5e5a2bc634808fa1b953b6d22f7808f7281", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/620769f32276bb7e8c580eae2c91ee535a06d9f8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620769f32276bb7e8c580eae2c91ee535a06d9f8/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=620769f32276bb7e8c580eae2c91ee535a06d9f8", "patch": "@@ -13,9 +13,8 @@ use hir_expand::name::Name;\n \n use super::{BindingMode, Expectation, InferenceContext};\n use crate::{\n-    lower::lower_to_chalk_mutability,\n-    utils::{generics, variant_data},\n-    Interner, Substitution, Ty, TyKind,\n+    lower::lower_to_chalk_mutability, utils::variant_data, Interner, Substitution, Ty, TyBuilder,\n+    TyKind,\n };\n \n impl<'a> InferenceContext<'a> {\n@@ -246,23 +245,12 @@ impl<'a> InferenceContext<'a> {\n                     };\n \n                     let inner_ty = self.infer_pat(*inner, &inner_ty, default_bm);\n-                    let mut sb = Substitution::build_for_generics(&generics(\n-                        self.db.upcast(),\n-                        box_adt.into(),\n-                    ));\n-                    sb = sb.push(inner_ty);\n-                    if sb.remaining() == 1 {\n-                        sb = sb.push(match alloc_ty {\n-                            Some(alloc_ty) if !alloc_ty.is_unknown() => alloc_ty,\n-                            _ => match self.db.generic_defaults(box_adt.into()).get(1) {\n-                                Some(alloc_ty) if !alloc_ty.value.is_unknown() => {\n-                                    alloc_ty.value.clone()\n-                                }\n-                                _ => self.table.new_type_var(),\n-                            },\n-                        });\n+                    let mut b = TyBuilder::adt(self.db, box_adt).push(inner_ty);\n+\n+                    if let Some(alloc_ty) = alloc_ty {\n+                        b = b.push(alloc_ty);\n                     }\n-                    Ty::adt_ty(box_adt, sb.build())\n+                    b.fill_with_defaults(self.db, || self.table.new_type_var()).build()\n                 }\n                 None => self.err_ty(),\n             },"}, {"sha": "afe5424d62e11f2d78d5687f40d120b1e069ea0b", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 82, "deletions": 5, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/620769f32276bb7e8c580eae2c91ee535a06d9f8/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620769f32276bb7e8c580eae2c91ee535a06d9f8/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=620769f32276bb7e8c580eae2c91ee535a06d9f8", "patch": "@@ -812,9 +812,59 @@ impl TypeWalk for CallableSig {\n     }\n }\n \n-struct TyBuilder {}\n+pub struct TyBuilder<D> {\n+    data: D,\n+    vec: SmallVec<[GenericArg; 2]>,\n+    param_count: usize,\n+}\n+\n+impl<D> TyBuilder<D> {\n+    fn new(data: D, param_count: usize) -> TyBuilder<D> {\n+        TyBuilder { data, param_count, vec: SmallVec::with_capacity(param_count) }\n+    }\n+\n+    fn build_internal(self) -> (D, Substitution) {\n+        assert_eq!(self.vec.len(), self.param_count);\n+        // FIXME: would be good to have a way to construct a chalk_ir::Substitution from the interned form\n+        let subst = Substitution(self.vec);\n+        (self.data, subst)\n+    }\n+\n+    pub fn push(mut self, arg: impl CastTo<GenericArg>) -> Self {\n+        self.vec.push(arg.cast(&Interner));\n+        self\n+    }\n+\n+    fn remaining(&self) -> usize {\n+        self.param_count - self.vec.len()\n+    }\n+\n+    pub fn fill_with_bound_vars(self, debruijn: DebruijnIndex, starting_from: usize) -> Self {\n+        self.fill(\n+            (starting_from..)\n+                .map(|idx| TyKind::BoundVar(BoundVar::new(debruijn, idx)).intern(&Interner)),\n+        )\n+    }\n+\n+    pub fn fill_with_unknown(self) -> Self {\n+        self.fill(iter::repeat(TyKind::Unknown.intern(&Interner)))\n+    }\n+\n+    pub fn fill(mut self, filler: impl Iterator<Item = impl CastTo<GenericArg>>) -> Self {\n+        self.vec.extend(filler.take(self.remaining()).casted(&Interner));\n+        assert_eq!(self.remaining(), 0);\n+        self\n+    }\n+\n+    pub fn use_parent_substs(mut self, parent_substs: &Substitution) -> Self {\n+        assert!(self.vec.is_empty());\n+        assert!(parent_substs.len(&Interner) <= self.param_count);\n+        self.vec.extend(parent_substs.iter(&Interner).cloned());\n+        self\n+    }\n+}\n \n-impl TyBuilder {\n+impl TyBuilder<()> {\n     pub fn unit() -> Ty {\n         TyKind::Tuple(0, Substitution::empty(&Interner)).intern(&Interner)\n     }\n@@ -829,11 +879,38 @@ impl TyBuilder {\n     }\n }\n \n-impl Ty {\n-    pub fn adt_ty(adt: hir_def::AdtId, substs: Substitution) -> Ty {\n-        TyKind::Adt(AdtId(adt), substs).intern(&Interner)\n+impl TyBuilder<hir_def::AdtId> {\n+    pub fn adt(db: &dyn HirDatabase, adt: hir_def::AdtId) -> TyBuilder<hir_def::AdtId> {\n+        let generics = generics(db.upcast(), adt.into());\n+        let param_count = generics.len();\n+        TyBuilder::new(adt, param_count)\n     }\n \n+    pub fn fill_with_defaults(\n+        mut self,\n+        db: &dyn HirDatabase,\n+        mut fallback: impl FnMut() -> Ty,\n+    ) -> Self {\n+        let defaults = db.generic_defaults(self.data.into());\n+        for default_ty in defaults.iter().skip(self.vec.len()) {\n+            if default_ty.skip_binders().is_unknown() {\n+                self.vec.push(fallback().cast(&Interner));\n+            } else {\n+                // each default can depend on the previous parameters\n+                let subst_so_far = Substitution(self.vec.clone());\n+                self.vec.push(default_ty.clone().subst(&subst_so_far).cast(&Interner));\n+            }\n+        }\n+        self\n+    }\n+\n+    pub fn build(self) -> Ty {\n+        let (adt, subst) = self.build_internal();\n+        TyKind::Adt(AdtId(adt), subst).intern(&Interner)\n+    }\n+}\n+\n+impl Ty {\n     pub fn builtin(builtin: BuiltinType) -> Self {\n         match builtin {\n             BuiltinType::Char => TyKind::Scalar(Scalar::Char).intern(&Interner),"}, {"sha": "5e2024f0a9f2193b88b1ed05202f5e8c3958510d", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/620769f32276bb7e8c580eae2c91ee535a06d9f8/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620769f32276bb7e8c580eae2c91ee535a06d9f8/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=620769f32276bb7e8c580eae2c91ee535a06d9f8", "patch": "@@ -36,7 +36,7 @@ use crate::{\n     AliasEq, AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, DynTy, FnPointer, FnSig,\n     ImplTraitId, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause, QuantifiedWhereClauses,\n     ReturnTypeImplTrait, ReturnTypeImplTraits, Substitution, TraitEnvironment, TraitRef, Ty,\n-    TyKind, TypeWalk, WhereClause,\n+    TyBuilder, TyKind, TypeWalk, WhereClause,\n };\n \n #[derive(Debug)]\n@@ -1141,9 +1141,10 @@ fn type_for_enum_variant_constructor(db: &dyn HirDatabase, def: EnumVariantId) -\n }\n \n fn type_for_adt(db: &dyn HirDatabase, adt: AdtId) -> Binders<Ty> {\n-    let generics = generics(db.upcast(), adt.into());\n-    let substs = Substitution::bound_vars(&generics, DebruijnIndex::INNERMOST);\n-    Binders::new(substs.len(&Interner), Ty::adt_ty(adt, substs))\n+    let b = TyBuilder::adt(db, adt);\n+    let num_binders = b.remaining();\n+    let ty = b.fill_with_bound_vars(DebruijnIndex::INNERMOST, 0).build();\n+    Binders::new(num_binders, ty)\n }\n \n fn type_for_type_alias(db: &dyn HirDatabase, t: TypeAliasId) -> Binders<Ty> {"}]}