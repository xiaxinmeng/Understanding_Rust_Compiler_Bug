{"sha": "469f620b064d2935c741222927dc955da395532b", "node_id": "C_kwDOAAsO6NoAKDQ2OWY2MjBiMDY0ZDI5MzVjNzQxMjIyOTI3ZGM5NTVkYTM5NTUzMmI", "commit": {"author": {"name": "Mihail Mihov", "email": "mmihov.personal@gmail.com", "date": "2022-11-21T20:58:01Z"}, "committer": {"name": "Mihail Mihov", "email": "mmihov.personal@gmail.com", "date": "2022-11-21T20:58:43Z"}, "message": "Combine `generate_impl` and `generate_trait_impl` into a single file", "tree": {"sha": "d2f382cc9649a0fff73b0abb608ca444f0b15b2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2f382cc9649a0fff73b0abb608ca444f0b15b2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/469f620b064d2935c741222927dc955da395532b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/469f620b064d2935c741222927dc955da395532b", "html_url": "https://github.com/rust-lang/rust/commit/469f620b064d2935c741222927dc955da395532b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/469f620b064d2935c741222927dc955da395532b/comments", "author": null, "committer": null, "parents": [{"sha": "0bd11f817136f372b30a328ccf71c0bb0c68ef21", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd11f817136f372b30a328ccf71c0bb0c68ef21", "html_url": "https://github.com/rust-lang/rust/commit/0bd11f817136f372b30a328ccf71c0bb0c68ef21"}], "stats": {"total": 452, "additions": 222, "deletions": 230}, "files": [{"sha": "690c97e26d8c6ad9206207a781166cb02c35fdac", "filename": "crates/ide-assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 221, "deletions": 2, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/469f620b064d2935c741222927dc955da395532b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f620b064d2935c741222927dc955da395532b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=469f620b064d2935c741222927dc955da395532b", "patch": "@@ -1,6 +1,9 @@\n use syntax::ast::{self, AstNode, HasName};\n \n-use crate::{utils::generate_impl_text, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{\n+    utils::{generate_impl_text, generate_trait_impl_text},\n+    AssistContext, AssistId, AssistKind, Assists,\n+};\n \n // Assist: generate_impl\n //\n@@ -50,6 +53,54 @@ pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext<'_>) -> Optio\n     )\n }\n \n+// Assist: generate_trait_impl\n+//\n+// Adds a new trait impl for a type.\n+//\n+// ```\n+// struct $0Ctx<T: Clone> {\n+//     data: T,\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Ctx<T: Clone> {\n+//     data: T,\n+// }\n+//\n+// impl<T: Clone> $0 for Ctx<T> {\n+//\n+// }\n+// ```\n+pub(crate) fn generate_trait_impl(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    let nominal = ctx.find_node_at_offset::<ast::Adt>()?;\n+    let name = nominal.name()?;\n+    let target = nominal.syntax().text_range();\n+\n+    if let Some(_) = ctx.find_node_at_offset::<ast::RecordFieldList>() {\n+        return None;\n+    }\n+\n+    acc.add(\n+        AssistId(\"generate_trait_impl\", AssistKind::Generate),\n+        format!(\"Generate trait impl for `{name}`\"),\n+        target,\n+        |edit| {\n+            let start_offset = nominal.syntax().text_range().end();\n+            match ctx.config.snippet_cap {\n+                Some(cap) => {\n+                    let snippet = generate_trait_impl_text(&nominal, \"$0\", \"\");\n+                    edit.insert_snippet(cap, start_offset, snippet);\n+                }\n+                None => {\n+                    let text = generate_trait_impl_text(&nominal, \"\", \"\");\n+                    edit.insert(start_offset, text);\n+                }\n+            }\n+        },\n+    )\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_target};\n@@ -211,7 +262,7 @@ mod tests {\n     }\n \n     #[test]\n-    fn add_trait_impl_target() {\n+    fn add_impl_target() {\n         check_assist_target(\n             generate_impl,\n             r#\"\n@@ -223,4 +274,172 @@ mod tests {\n             \"/// Has a lifetime parameter\\nstruct Foo<'a, T: Foo<'a>> {}\",\n         );\n     }\n+\n+    #[test]\n+    fn test_add_trait_impl() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Foo$0 {}\n+            \"#,\n+            r#\"\n+                struct Foo {}\n+\n+                impl $0 for Foo {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_generics() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Foo$0<T: Clone> {}\n+            \"#,\n+            r#\"\n+                struct Foo<T: Clone> {}\n+\n+                impl<T: Clone> $0 for Foo<T> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_generics_and_lifetime_parameters() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Foo<'a, T: Foo<'a>>$0 {}\n+            \"#,\n+            r#\"\n+                struct Foo<'a, T: Foo<'a>> {}\n+\n+                impl<'a, T: Foo<'a>> $0 for Foo<'a, T> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_attributes() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                #[cfg(feature = \"foo\")]\n+                struct Foo<'a, T: Foo$0<'a>> {}\n+            \"#,\n+            r#\"\n+                #[cfg(feature = \"foo\")]\n+                struct Foo<'a, T: Foo<'a>> {}\n+\n+                #[cfg(feature = \"foo\")]\n+                impl<'a, T: Foo<'a>> $0 for Foo<'a, T> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_default_generic() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Defaulted$0<T = i32> {}\n+            \"#,\n+            r#\"\n+                struct Defaulted<T = i32> {}\n+\n+                impl<T> $0 for Defaulted<T> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_constrained_default_generic() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Defaulted$0<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}\n+            \"#,\n+            r#\"\n+                struct Defaulted<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}\n+\n+                impl<'a, 'b: 'a, T: Debug + Clone + 'a + 'b, const S: usize> $0 for Defaulted<'a, 'b, T, S> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_const_defaulted_generic() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                struct Defaulted$0<const N: i32 = 0> {}\n+            \"#,\n+            r#\"\n+                struct Defaulted<const N: i32 = 0> {}\n+\n+                impl<const N: i32> $0 for Defaulted<N> {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_add_trait_impl_with_trait_constraint() {\n+        check_assist(\n+            generate_trait_impl,\n+            r#\"\n+                pub trait Trait {}\n+                struct Struct$0<T>\n+                where\n+                    T: Trait,\n+                {\n+                    inner: T,\n+                }\n+            \"#,\n+            r#\"\n+                pub trait Trait {}\n+                struct Struct<T>\n+                where\n+                    T: Trait,\n+                {\n+                    inner: T,\n+                }\n+\n+                impl<T> $0 for Struct<T>\n+                where\n+                    T: Trait,\n+                {\n+\n+                }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_trait_impl_target() {\n+        check_assist_target(\n+            generate_trait_impl,\n+            r#\"\n+                struct SomeThingIrrelevant;\n+                /// Has a lifetime parameter\n+                struct Foo$0<'a, T: Foo<'a>> {}\n+                struct EvenMoreIrrelevant;\n+            \"#,\n+            \"/// Has a lifetime parameter\\nstruct Foo<'a, T: Foo<'a>> {}\",\n+        );\n+    }\n }"}, {"sha": "7b1ee5b5c31018745402c8a0d28bf85fe29fc471", "filename": "crates/ide-assists/src/handlers/generate_trait_impl.rs", "status": "removed", "additions": 0, "deletions": 226, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/0bd11f817136f372b30a328ccf71c0bb0c68ef21/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd11f817136f372b30a328ccf71c0bb0c68ef21/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_trait_impl.rs?ref=0bd11f817136f372b30a328ccf71c0bb0c68ef21", "patch": "@@ -1,226 +0,0 @@\n-use syntax::ast::{self, AstNode, HasName};\n-\n-use crate::{utils::generate_trait_impl_text, AssistContext, AssistId, AssistKind, Assists};\n-\n-// Assist: generate_trait_impl\n-//\n-// Adds a new trait impl for a type.\n-//\n-// ```\n-// struct $0Ctx<T: Clone> {\n-//     data: T,\n-// }\n-// ```\n-// ->\n-// ```\n-// struct Ctx<T: Clone> {\n-//     data: T,\n-// }\n-//\n-// impl<T: Clone> $0 for Ctx<T> {\n-//\n-// }\n-// ```\n-pub(crate) fn generate_trait_impl(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n-    let nominal = ctx.find_node_at_offset::<ast::Adt>()?;\n-    let name = nominal.name()?;\n-    let target = nominal.syntax().text_range();\n-\n-    if let Some(_) = ctx.find_node_at_offset::<ast::RecordFieldList>() {\n-        return None;\n-    }\n-\n-    acc.add(\n-        AssistId(\"generate_trait_impl\", AssistKind::Generate),\n-        format!(\"Generate trait impl for `{name}`\"),\n-        target,\n-        |edit| {\n-            let start_offset = nominal.syntax().text_range().end();\n-            match ctx.config.snippet_cap {\n-                Some(cap) => {\n-                    let snippet = generate_trait_impl_text(&nominal, \"$0\", \"\");\n-                    edit.insert_snippet(cap, start_offset, snippet);\n-                }\n-                None => {\n-                    let text = generate_trait_impl_text(&nominal, \"\", \"\");\n-                    edit.insert(start_offset, text);\n-                }\n-            }\n-        },\n-    )\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::tests::{check_assist, check_assist_target};\n-\n-    use super::*;\n-\n-    #[test]\n-    fn test_add_trait_impl() {\n-        check_assist(\n-            generate_trait_impl,\n-            r#\"\n-                struct Foo$0 {}\n-            \"#,\n-            r#\"\n-                struct Foo {}\n-\n-                impl $0 for Foo {\n-\n-                }\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_add_trait_impl_with_generics() {\n-        check_assist(\n-            generate_trait_impl,\n-            r#\"\n-                struct Foo$0<T: Clone> {}\n-            \"#,\n-            r#\"\n-                struct Foo<T: Clone> {}\n-\n-                impl<T: Clone> $0 for Foo<T> {\n-\n-                }\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_add_trait_impl_with_generics_and_lifetime_parameters() {\n-        check_assist(\n-            generate_trait_impl,\n-            r#\"\n-                struct Foo<'a, T: Foo<'a>>$0 {}\n-            \"#,\n-            r#\"\n-                struct Foo<'a, T: Foo<'a>> {}\n-\n-                impl<'a, T: Foo<'a>> $0 for Foo<'a, T> {\n-\n-                }\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_add_trait_impl_with_attributes() {\n-        check_assist(\n-            generate_trait_impl,\n-            r#\"\n-                #[cfg(feature = \"foo\")]\n-                struct Foo<'a, T: Foo$0<'a>> {}\n-            \"#,\n-            r#\"\n-                #[cfg(feature = \"foo\")]\n-                struct Foo<'a, T: Foo<'a>> {}\n-\n-                #[cfg(feature = \"foo\")]\n-                impl<'a, T: Foo<'a>> $0 for Foo<'a, T> {\n-\n-                }\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_add_trait_impl_with_default_generic() {\n-        check_assist(\n-            generate_trait_impl,\n-            r#\"\n-                struct Defaulted$0<T = i32> {}\n-            \"#,\n-            r#\"\n-                struct Defaulted<T = i32> {}\n-\n-                impl<T> $0 for Defaulted<T> {\n-\n-                }\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_add_trait_impl_with_constrained_default_generic() {\n-        check_assist(\n-            generate_trait_impl,\n-            r#\"\n-                struct Defaulted$0<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}\n-            \"#,\n-            r#\"\n-                struct Defaulted<'a, 'b: 'a, T: Debug + Clone + 'a + 'b = String, const S: usize> {}\n-\n-                impl<'a, 'b: 'a, T: Debug + Clone + 'a + 'b, const S: usize> $0 for Defaulted<'a, 'b, T, S> {\n-\n-                }\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_add_trait_impl_with_const_defaulted_generic() {\n-        check_assist(\n-            generate_trait_impl,\n-            r#\"\n-                struct Defaulted$0<const N: i32 = 0> {}\n-            \"#,\n-            r#\"\n-                struct Defaulted<const N: i32 = 0> {}\n-\n-                impl<const N: i32> $0 for Defaulted<N> {\n-\n-                }\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_add_trait_impl_with_trait_constraint() {\n-        check_assist(\n-            generate_trait_impl,\n-            r#\"\n-                pub trait Trait {}\n-                struct Struct$0<T>\n-                where\n-                    T: Trait,\n-                {\n-                    inner: T,\n-                }\n-            \"#,\n-            r#\"\n-                pub trait Trait {}\n-                struct Struct<T>\n-                where\n-                    T: Trait,\n-                {\n-                    inner: T,\n-                }\n-\n-                impl<T> $0 for Struct<T>\n-                where\n-                    T: Trait,\n-                {\n-\n-                }\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn add_trait_impl_target() {\n-        check_assist_target(\n-            generate_trait_impl,\n-            r#\"\n-                struct SomeThingIrrelevant;\n-                /// Has a lifetime parameter\n-                struct Foo$0<'a, T: Foo<'a>> {}\n-                struct EvenMoreIrrelevant;\n-            \"#,\n-            \"/// Has a lifetime parameter\\nstruct Foo<'a, T: Foo<'a>> {}\",\n-        );\n-    }\n-}"}, {"sha": "b12f99cc53298e9524c3f5c575a7cf7c031dc174", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/469f620b064d2935c741222927dc955da395532b/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469f620b064d2935c741222927dc955da395532b/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=469f620b064d2935c741222927dc955da395532b", "patch": "@@ -152,7 +152,6 @@ mod handlers {\n     mod generate_function;\n     mod generate_getter;\n     mod generate_impl;\n-    mod generate_trait_impl;\n     mod generate_is_empty_from_len;\n     mod generate_new;\n     mod generate_setter;\n@@ -248,7 +247,7 @@ mod handlers {\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n             generate_impl::generate_impl,\n-            generate_trait_impl::generate_trait_impl,\n+            generate_impl::generate_trait_impl,\n             generate_is_empty_from_len::generate_is_empty_from_len,\n             generate_new::generate_new,\n             inline_call::inline_call,"}]}