{"sha": "3e5203147176bf4e7895c917d694a14d33e13419", "node_id": "C_kwDOAAsO6NoAKDNlNTIwMzE0NzE3NmJmNGU3ODk1YzkxN2Q2OTRhMTRkMzNlMTM0MTk", "commit": {"author": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-07-22T17:14:31Z"}, "committer": {"name": "Sosth\u00e8ne Gu\u00e9don", "email": "sosthene@guedon.gdn", "date": "2022-07-22T17:14:58Z"}, "message": "unwrap_used: Fix help, \"an `None`\" -> \"`None`\"", "tree": {"sha": "5fd89a6361b5fedbe4344d0ad6b6570e3573d232", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fd89a6361b5fedbe4344d0ad6b6570e3573d232"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e5203147176bf4e7895c917d694a14d33e13419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e5203147176bf4e7895c917d694a14d33e13419", "html_url": "https://github.com/rust-lang/rust/commit/3e5203147176bf4e7895c917d694a14d33e13419", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e5203147176bf4e7895c917d694a14d33e13419/comments", "author": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgued", "id": 51865119, "node_id": "MDQ6VXNlcjUxODY1MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/51865119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgued", "html_url": "https://github.com/sgued", "followers_url": "https://api.github.com/users/sgued/followers", "following_url": "https://api.github.com/users/sgued/following{/other_user}", "gists_url": "https://api.github.com/users/sgued/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgued/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgued/subscriptions", "organizations_url": "https://api.github.com/users/sgued/orgs", "repos_url": "https://api.github.com/users/sgued/repos", "events_url": "https://api.github.com/users/sgued/events{/privacy}", "received_events_url": "https://api.github.com/users/sgued/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d", "html_url": "https://github.com/rust-lang/rust/commit/6ee03e2b014fc98e1bbfdbf5c39872b8308cd15d"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "5ef08ca6290bae6adbc15a6887edbd755c040711", "filename": "clippy_lints/src/methods/expect_used.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e5203147176bf4e7895c917d694a14d33e13419/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5203147176bf4e7895c917d694a14d33e13419/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs?ref=3e5203147176bf4e7895c917d694a14d33e13419", "patch": "@@ -12,9 +12,9 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) {\n-        Some((EXPECT_USED, \"an Option\", \"None\"))\n+        Some((EXPECT_USED, \"an Option\", \"None\", \"\"))\n     } else if is_type_diagnostic_item(cx, obj_ty, sym::Result) {\n-        Some((EXPECT_USED, \"a Result\", \"Err\"))\n+        Some((EXPECT_USED, \"a Result\", \"Err\", \"an \"))\n     } else {\n         None\n     };\n@@ -23,14 +23,14 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n         return;\n     }\n \n-    if let Some((lint, kind, none_value)) = mess {\n+    if let Some((lint, kind, none_value, none_prefix)) = mess {\n         span_lint_and_help(\n             cx,\n             lint,\n             expr.span,\n-            &format!(\"used `expect()` on `{}` value\", kind,),\n+            &format!(\"used `expect()` on `{kind}` value\"),\n             None,\n-            &format!(\"if this value is an `{}`, it will panic\", none_value,),\n+            &format!(\"if this value is {none_prefix}`{none_value}`, it will panic\"),\n         );\n     }\n }"}, {"sha": "ce1a52e5480afb81226859153023754301935f84", "filename": "clippy_lints/src/methods/unwrap_used.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e5203147176bf4e7895c917d694a14d33e13419/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5203147176bf4e7895c917d694a14d33e13419/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs?ref=3e5203147176bf4e7895c917d694a14d33e13419", "patch": "@@ -12,9 +12,9 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) {\n-        Some((UNWRAP_USED, \"an Option\", \"None\"))\n+        Some((UNWRAP_USED, \"an Option\", \"None\", \"\"))\n     } else if is_type_diagnostic_item(cx, obj_ty, sym::Result) {\n-        Some((UNWRAP_USED, \"a Result\", \"Err\"))\n+        Some((UNWRAP_USED, \"a Result\", \"Err\", \"an \"))\n     } else {\n         None\n     };\n@@ -23,14 +23,14 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n         return;\n     }\n \n-    if let Some((lint, kind, none_value)) = mess {\n+    if let Some((lint, kind, none_value, none_prefix)) = mess {\n         let help = if is_lint_allowed(cx, EXPECT_USED, expr.hir_id) {\n             format!(\n                 \"if you don't want to handle the `{none_value}` case gracefully, consider \\\n                 using `expect()` to provide a better panic message\"\n             )\n         } else {\n-            format!(\"if this value is an `{none_value}`, it will panic\")\n+            format!(\"if this value is {none_prefix}`{none_value}`, it will panic\")\n         };\n \n         span_lint_and_help("}, {"sha": "c5d95cb8a147f71fbc8c5e335ea4e77f78b94a8b", "filename": "tests/ui-toml/expect_used/expect_used.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e5203147176bf4e7895c917d694a14d33e13419/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e5203147176bf4e7895c917d694a14d33e13419/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr?ref=3e5203147176bf4e7895c917d694a14d33e13419", "patch": "@@ -5,7 +5,7 @@ LL |     let _ = opt.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::expect-used` implied by `-D warnings`\n-   = help: if this value is an `None`, it will panic\n+   = help: if this value is `None`, it will panic\n \n error: used `expect()` on `a Result` value\n   --> $DIR/expect_used.rs:11:13"}, {"sha": "ab28aac45563b1cd7bfd3192ad5b192f86638451", "filename": "tests/ui/expect.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e5203147176bf4e7895c917d694a14d33e13419/tests%2Fui%2Fexpect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e5203147176bf4e7895c917d694a14d33e13419/tests%2Fui%2Fexpect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.stderr?ref=3e5203147176bf4e7895c917d694a14d33e13419", "patch": "@@ -5,7 +5,7 @@ LL |     let _ = opt.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::expect-used` implied by `-D warnings`\n-   = help: if this value is an `None`, it will panic\n+   = help: if this value is `None`, it will panic\n \n error: used `expect()` on `a Result` value\n   --> $DIR/expect.rs:10:13"}, {"sha": "f54bfd617c4ee5589b1c906e4ab066c99fb7981e", "filename": "tests/ui/unwrap_expect_used.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e5203147176bf4e7895c917d694a14d33e13419/tests%2Fui%2Funwrap_expect_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e5203147176bf4e7895c917d694a14d33e13419/tests%2Fui%2Funwrap_expect_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_expect_used.stderr?ref=3e5203147176bf4e7895c917d694a14d33e13419", "patch": "@@ -5,7 +5,7 @@ LL |     Some(3).unwrap();\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unwrap-used` implied by `-D warnings`\n-   = help: if this value is an `None`, it will panic\n+   = help: if this value is `None`, it will panic\n \n error: used `expect()` on `an Option` value\n   --> $DIR/unwrap_expect_used.rs:5:5\n@@ -14,7 +14,7 @@ LL |     Some(3).expect(\"Hello world!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::expect-used` implied by `-D warnings`\n-   = help: if this value is an `None`, it will panic\n+   = help: if this value is `None`, it will panic\n \n error: used `unwrap()` on `a Result` value\n   --> $DIR/unwrap_expect_used.rs:8:5"}]}