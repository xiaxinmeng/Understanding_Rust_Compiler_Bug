{"sha": "31c01415cbb1793ae9492f40bbdd917cfe8d1fa5", "node_id": "C_kwDOAAsO6NoAKDMxYzAxNDE1Y2JiMTc5M2FlOTQ5MmY0MGJiZGQ5MTdjZmU4ZDFmYTU", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-05-17T19:04:18Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-06-06T18:15:55Z"}, "message": "Replace yield_now() with spin loop hint", "tree": {"sha": "dde9c608ce08530fd7d6c797eed14407a9825182", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dde9c608ce08530fd7d6c797eed14407a9825182"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31c01415cbb1793ae9492f40bbdd917cfe8d1fa5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmKeRFsACgkQGBtJ+fOP\nM3TYqwv/SwqtYd3fqYWJKSzoj9Ip8w+6GJGD1errM7XQv8y447A+jBBVk3WU/rwn\nDx3kO0d3jOwLJsw900xHGvhqbhvgfZFk+PQBMkJVXP8Wmlq8duu88Shd/tMt7RIO\niZrcrevVEjJrTBd9VQnugMsRf0ZIf+uLeV0YLO0iRel+YB/KYGkZeJ1dKUnixHtR\nW11peRxpZ6w0bsryrkV+c+RgJQy9D2l6caxmLaDY3PXbgZCRJvZILlHuRe1Sp26Q\nP1Oaf23rN68DWh3LULR2vfjvJdlZwQgletki6+n2z7RKT8a5OwpjOoLL2eQIcliZ\nPScTspnzkL9QyijpuSbuUHMsOsTKXClMOVdSJOwIfrOVi/mcsoOcIbZLouRxGyzq\nRwb7PUa4hke/T7AYeO5inuv6UvAtxF9nJTfPLFzLe+ZvKngk7VIBtoPktzdrsWa/\nA3W9VCfzZqFlJYZAaZCpJOY3rDWL2TME67lX+kCcfSPBp/RhJpSaFz91q7c/gHUr\ncBv7dR3u\n=01Ba\n-----END PGP SIGNATURE-----", "payload": "tree dde9c608ce08530fd7d6c797eed14407a9825182\nparent e2002b4c657b218d3866342078b5fd0ce3118021\nauthor Andy Wang <cbeuw.andy@gmail.com> 1652814258 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1654539355 +0100\n\nReplace yield_now() with spin loop hint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31c01415cbb1793ae9492f40bbdd917cfe8d1fa5", "html_url": "https://github.com/rust-lang/rust/commit/31c01415cbb1793ae9492f40bbdd917cfe8d1fa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31c01415cbb1793ae9492f40bbdd917cfe8d1fa5/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2002b4c657b218d3866342078b5fd0ce3118021", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2002b4c657b218d3866342078b5fd0ce3118021", "html_url": "https://github.com/rust-lang/rust/commit/e2002b4c657b218d3866342078b5fd0ce3118021"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "423d0e0e8ffb153f57895680b86ab191fa05d2fc", "filename": "tests/compile-fail/weak_memory/cpp20_rwc_syncs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31c01415cbb1793ae9492f40bbdd917cfe8d1fa5/tests%2Fcompile-fail%2Fweak_memory%2Fcpp20_rwc_syncs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c01415cbb1793ae9492f40bbdd917cfe8d1fa5/tests%2Fcompile-fail%2Fweak_memory%2Fcpp20_rwc_syncs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fweak_memory%2Fcpp20_rwc_syncs.rs?ref=31c01415cbb1793ae9492f40bbdd917cfe8d1fa5", "patch": "@@ -9,13 +9,13 @@\n // so we have to stick to C++11 emulation from exiting research.\n \n use std::sync::atomic::Ordering::*;\n-use std::thread::{spawn, yield_now};\n+use std::thread::spawn;\n use std::sync::atomic::{fence, AtomicUsize};\n \n-// Spins and yields until until it reads value\n+// Spins until it reads value\n fn reads_value(loc: &AtomicUsize, val: usize) -> usize {\n     while loc.load(Relaxed) != val {\n-        yield_now();\n+        std::hint::spin_loop();\n     }\n     val\n }"}, {"sha": "fa13803830f5924b23fa192eea34e9c7f75b05fe", "filename": "tests/run-pass/weak_memory/consistency.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31c01415cbb1793ae9492f40bbdd917cfe8d1fa5/tests%2Frun-pass%2Fweak_memory%2Fconsistency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31c01415cbb1793ae9492f40bbdd917cfe8d1fa5/tests%2Frun-pass%2Fweak_memory%2Fconsistency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fweak_memory%2Fconsistency.rs?ref=31c01415cbb1793ae9492f40bbdd917cfe8d1fa5", "patch": "@@ -22,7 +22,7 @@\n \n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering::*;\n-use std::thread::{spawn, yield_now};\n+use std::thread::spawn;\n \n #[derive(Copy, Clone)]\n struct EvilSend<T>(pub T);\n@@ -37,10 +37,10 @@ fn static_atomic(val: usize) -> &'static AtomicUsize {\n     ret\n }\n \n-// Spins and yields until until acquires a pre-determined value\n+// Spins until acquires a pre-determined value\n fn acquires_value(loc: &AtomicUsize, val: usize) -> usize {\n     while loc.load(Acquire) != val {\n-        yield_now();\n+        std::hint::spin_loop();\n     }\n     val\n }"}]}