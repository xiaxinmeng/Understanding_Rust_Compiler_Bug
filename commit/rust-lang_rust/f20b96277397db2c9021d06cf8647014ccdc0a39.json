{"sha": "f20b96277397db2c9021d06cf8647014ccdc0a39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMGI5NjI3NzM5N2RiMmM5MDIxZDA2Y2Y4NjQ3MDE0Y2NkYzBhMzk=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-12T23:04:16Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-13T18:33:12Z"}, "message": "unused_unit: lint also in type parameters and where clauses", "tree": {"sha": "11b075cf085ba186e6bbf92ab501cd2944b05465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11b075cf085ba186e6bbf92ab501cd2944b05465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f20b96277397db2c9021d06cf8647014ccdc0a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f20b96277397db2c9021d06cf8647014ccdc0a39", "html_url": "https://github.com/rust-lang/rust/commit/f20b96277397db2c9021d06cf8647014ccdc0a39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f20b96277397db2c9021d06cf8647014ccdc0a39/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b20a9cd474776277a7ad7435fa0ff7b36f829ddf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b20a9cd474776277a7ad7435fa0ff7b36f829ddf", "html_url": "https://github.com/rust-lang/rust/commit/b20a9cd474776277a7ad7435fa0ff7b36f829ddf"}], "stats": {"total": 179, "additions": 138, "deletions": 41}, "files": [{"sha": "35464f629c3646e1e3031eb82844e676c1e92eea", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f20b96277397db2c9021d06cf8647014ccdc0a39/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f20b96277397db2c9021d06cf8647014ccdc0a39/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=f20b96277397db2c9021d06cf8647014ccdc0a39", "patch": "@@ -248,28 +248,7 @@ impl EarlyLintPass for Return {\n             if let ast::TyKind::Tup(ref vals) = ty.kind;\n             if vals.is_empty() && !ty.span.from_expansion() && get_def(span) == get_def(ty.span);\n             then {\n-                let (rspan, appl) = if let Ok(fn_source) =\n-                        cx.sess().source_map()\n-                                 .span_to_snippet(span.with_hi(ty.span.hi())) {\n-                    if let Some(rpos) = fn_source.rfind(\"->\") {\n-                        #[allow(clippy::cast_possible_truncation)]\n-                        (ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n-                            Applicability::MachineApplicable)\n-                    } else {\n-                        (ty.span, Applicability::MaybeIncorrect)\n-                    }\n-                } else {\n-                    (ty.span, Applicability::MaybeIncorrect)\n-                };\n-                span_lint_and_sugg(\n-                    cx,\n-                    UNUSED_UNIT,\n-                    rspan,\n-                    \"unneeded unit return type\",\n-                    \"remove the `-> ()`\",\n-                    String::new(),\n-                    appl,\n-                );\n+                lint_unneeded_unit_return(cx, ty, span);\n             }\n         }\n     }\n@@ -313,6 +292,22 @@ impl EarlyLintPass for Return {\n             _ => (),\n         }\n     }\n+\n+    fn check_poly_trait_ref(&mut self, cx: &EarlyContext<'_>, poly: &ast::PolyTraitRef, _: &ast::TraitBoundModifier) {\n+        let segments = &poly.trait_ref.path.segments;\n+\n+        if_chain! {\n+            if segments.len() == 1;\n+            if [\"Fn\", \"FnMut\", \"FnOnce\"].contains(&&*segments[0].ident.name.as_str());\n+            if let Some(args) = &segments[0].args;\n+            if let ast::GenericArgs::Parenthesized(generic_args) = &**args;\n+            if let ast::FnRetTy::Ty(ty) = &generic_args.output;\n+            if ty.kind.is_unit();\n+            then {\n+                lint_unneeded_unit_return(cx, ty, generic_args.span);\n+            }\n+        }\n+    }\n }\n \n fn attr_is_cfg(attr: &ast::Attribute) -> bool {\n@@ -337,3 +332,28 @@ fn is_unit_expr(expr: &ast::Expr) -> bool {\n         false\n     }\n }\n+\n+fn lint_unneeded_unit_return(cx: &EarlyContext<'_>, ty: &ast::Ty, span: Span) {\n+    let (ret_span, appl) = if let Ok(fn_source) = cx.sess().source_map().span_to_snippet(span.with_hi(ty.span.hi())) {\n+        if let Some(rpos) = fn_source.rfind(\"->\") {\n+            #[allow(clippy::cast_possible_truncation)]\n+            (\n+                ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n+                Applicability::MachineApplicable,\n+            )\n+        } else {\n+            (ty.span, Applicability::MaybeIncorrect)\n+        }\n+    } else {\n+        (ty.span, Applicability::MaybeIncorrect)\n+    };\n+    span_lint_and_sugg(\n+        cx,\n+        UNUSED_UNIT,\n+        ret_span,\n+        \"unneeded unit return type\",\n+        \"remove the `-> ()`\",\n+        String::new(),\n+        appl,\n+    );\n+}"}, {"sha": "07f2791786d7f48711378386377019c698b33af4", "filename": "tests/ui/unused_unit.fixed", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f20b96277397db2c9021d06cf8647014ccdc0a39/tests%2Fui%2Funused_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f20b96277397db2c9021d06cf8647014ccdc0a39/tests%2Fui%2Funused_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.fixed?ref=f20b96277397db2c9021d06cf8647014ccdc0a39", "patch": "@@ -14,11 +14,10 @@\n \n struct Unitter;\n impl Unitter {\n-    // try to disorient the lint with multiple unit returns and newlines\n     #[allow(clippy::no_effect)]\n-    pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) \n-    where G: Fn() -> () {\n-        let _y: &dyn Fn() -> () = &f;\n+    pub fn get_unit<F: Fn() , G>(&self, f: F, _g: G) \n+    where G: Fn()  {\n+        let _y: &dyn Fn()  = &f;\n         (); // this should not lint, as it's not in return type position\n     }\n }\n@@ -30,6 +29,20 @@ impl Into<()> for Unitter {\n     }\n }\n \n+trait Trait {\n+    fn redundant<F: FnOnce() , G, H>(&self, _f: F, _g: G, _h: H)\n+    where\n+        G: FnMut() ,\n+        H: Fn() ;\n+}\n+\n+impl Trait for Unitter {\n+    fn redundant<F: FnOnce() , G, H>(&self, _f: F, _g: G, _h: H)\n+    where\n+        G: FnMut() ,\n+        H: Fn()  {}\n+}\n+\n fn return_unit()  {  }\n \n #[allow(clippy::needless_return)]"}, {"sha": "e2c6afb020f5887dc175b3f8a832fb8293173637", "filename": "tests/ui/unused_unit.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f20b96277397db2c9021d06cf8647014ccdc0a39/tests%2Fui%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f20b96277397db2c9021d06cf8647014ccdc0a39/tests%2Fui%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.rs?ref=f20b96277397db2c9021d06cf8647014ccdc0a39", "patch": "@@ -14,10 +14,8 @@\n \n struct Unitter;\n impl Unitter {\n-    // try to disorient the lint with multiple unit returns and newlines\n     #[allow(clippy::no_effect)]\n-    pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) ->\n-        ()\n+    pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) -> ()\n     where G: Fn() -> () {\n         let _y: &dyn Fn() -> () = &f;\n         (); // this should not lint, as it's not in return type position\n@@ -31,6 +29,20 @@ impl Into<()> for Unitter {\n     }\n }\n \n+trait Trait {\n+    fn redundant<F: FnOnce() -> (), G, H>(&self, _f: F, _g: G, _h: H)\n+    where\n+        G: FnMut() -> (),\n+        H: Fn() -> ();\n+}\n+\n+impl Trait for Unitter {\n+    fn redundant<F: FnOnce() -> (), G, H>(&self, _f: F, _g: G, _h: H)\n+    where\n+        G: FnMut() -> (),\n+        H: Fn() -> () {}\n+}\n+\n fn return_unit() -> () { () }\n \n #[allow(clippy::needless_return)]"}, {"sha": "81e6738e6bf67b8cdec71e21fc20b5027cfe19b4", "filename": "tests/ui/unused_unit.stderr", "status": "modified", "additions": 64, "deletions": 12, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/f20b96277397db2c9021d06cf8647014ccdc0a39/tests%2Fui%2Funused_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f20b96277397db2c9021d06cf8647014ccdc0a39/tests%2Fui%2Funused_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.stderr?ref=f20b96277397db2c9021d06cf8647014ccdc0a39", "patch": "@@ -1,10 +1,8 @@\n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:19:59\n+  --> $DIR/unused_unit.rs:18:29\n    |\n-LL |       pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) ->\n-   |  ___________________________________________________________^\n-LL | |         ()\n-   | |__________^ help: remove the `-> ()`\n+LL |     pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) -> ()\n+   |                             ^^^^^ help: remove the `-> ()`\n    |\n note: the lint level is defined here\n   --> $DIR/unused_unit.rs:12:9\n@@ -13,40 +11,94 @@ LL | #![deny(clippy::unused_unit)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:29:19\n+  --> $DIR/unused_unit.rs:19:19\n+   |\n+LL |     where G: Fn() -> () {\n+   |                   ^^^^^ help: remove the `-> ()`\n+\n+error: unneeded unit return type\n+  --> $DIR/unused_unit.rs:18:59\n+   |\n+LL |     pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) -> ()\n+   |                                                           ^^^^^ help: remove the `-> ()`\n+\n+error: unneeded unit return type\n+  --> $DIR/unused_unit.rs:20:27\n+   |\n+LL |         let _y: &dyn Fn() -> () = &f;\n+   |                           ^^^^^ help: remove the `-> ()`\n+\n+error: unneeded unit return type\n+  --> $DIR/unused_unit.rs:27:19\n    |\n LL |     fn into(self) -> () {\n    |                   ^^^^^ help: remove the `-> ()`\n \n error: unneeded unit expression\n-  --> $DIR/unused_unit.rs:30:9\n+  --> $DIR/unused_unit.rs:28:9\n    |\n LL |         ()\n    |         ^^ help: remove the final `()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:34:18\n+  --> $DIR/unused_unit.rs:33:30\n+   |\n+LL |     fn redundant<F: FnOnce() -> (), G, H>(&self, _f: F, _g: G, _h: H)\n+   |                              ^^^^^ help: remove the `-> ()`\n+\n+error: unneeded unit return type\n+  --> $DIR/unused_unit.rs:35:20\n+   |\n+LL |         G: FnMut() -> (),\n+   |                    ^^^^^ help: remove the `-> ()`\n+\n+error: unneeded unit return type\n+  --> $DIR/unused_unit.rs:36:17\n+   |\n+LL |         H: Fn() -> ();\n+   |                 ^^^^^ help: remove the `-> ()`\n+\n+error: unneeded unit return type\n+  --> $DIR/unused_unit.rs:40:30\n+   |\n+LL |     fn redundant<F: FnOnce() -> (), G, H>(&self, _f: F, _g: G, _h: H)\n+   |                              ^^^^^ help: remove the `-> ()`\n+\n+error: unneeded unit return type\n+  --> $DIR/unused_unit.rs:42:20\n+   |\n+LL |         G: FnMut() -> (),\n+   |                    ^^^^^ help: remove the `-> ()`\n+\n+error: unneeded unit return type\n+  --> $DIR/unused_unit.rs:43:17\n+   |\n+LL |         H: Fn() -> () {}\n+   |                 ^^^^^ help: remove the `-> ()`\n+\n+error: unneeded unit return type\n+  --> $DIR/unused_unit.rs:46:18\n    |\n LL | fn return_unit() -> () { () }\n    |                  ^^^^^ help: remove the `-> ()`\n \n error: unneeded unit expression\n-  --> $DIR/unused_unit.rs:34:26\n+  --> $DIR/unused_unit.rs:46:26\n    |\n LL | fn return_unit() -> () { () }\n    |                          ^^ help: remove the final `()`\n \n error: unneeded `()`\n-  --> $DIR/unused_unit.rs:44:14\n+  --> $DIR/unused_unit.rs:56:14\n    |\n LL |         break();\n    |              ^^ help: remove the `()`\n \n error: unneeded `()`\n-  --> $DIR/unused_unit.rs:46:11\n+  --> $DIR/unused_unit.rs:58:11\n    |\n LL |     return();\n    |           ^^ help: remove the `()`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 16 previous errors\n "}]}