{"sha": "2cc5d727926dd8868ef0f7f62748da9105704402", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYzVkNzI3OTI2ZGQ4ODY4ZWYwZjdmNjI3NDhkYTkxMDU3MDQ0MDI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-19T22:01:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-19T22:01:38Z"}, "message": "Rollup merge of #83254 - jfrimmel:panic_output-stream, r=m-ou-se,joshtriplett\n\nInclude output stream in `panic!()` documentation\n\nFixes #83252.", "tree": {"sha": "76e6f4de5ab0c78fe1bd58f2ca3bbf9fd336fe89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76e6f4de5ab0c78fe1bd58f2ca3bbf9fd336fe89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cc5d727926dd8868ef0f7f62748da9105704402", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVR9CCRBK7hj4Ov3rIwAAdHIIAHyrAMZkYLuPlSCFTXLXH3bE\nvfUAhg2KYDZAxEbvUtmILcN1m6GaLexIiLGA+GqTA24oWe3Itt1wBOJ1qREWj4Nw\naMUMcdt3d1TQyOM2KDnKJA9zTlB+uy2BsuxZs8PiP/8HfA1BMwdK+vfTWS3CMgpR\nM3gUVepOLvWJJzOW2yXpGcOC1qqeJg7TU7HBZbLjRng2AIPtaj4FlMyYhkRjzMy+\nSRBe1ZcfENMb8n6S/gJYJ0hY5o/S8/F3elSgiO+Yzk4dnZMFJWCO4Mj7GLb75iEx\niKDZ00TZ4t2+fS+v+tRmjtP4NgCYp5C5xSHnjECSqNA0mPJkW4WCStrvwmg/dHg=\n=wyEq\n-----END PGP SIGNATURE-----\n", "payload": "tree 76e6f4de5ab0c78fe1bd58f2ca3bbf9fd336fe89\nparent 1a0e32f4bc30318f4e15d200039bdbc2ea659fdb\nparent 19bd0669b45fcc5ce81b8003cafccf318c3cc22e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616191298 +0100\ncommitter GitHub <noreply@github.com> 1616191298 +0100\n\nRollup merge of #83254 - jfrimmel:panic_output-stream, r=m-ou-se,joshtriplett\n\nInclude output stream in `panic!()` documentation\n\nFixes #83252.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cc5d727926dd8868ef0f7f62748da9105704402", "html_url": "https://github.com/rust-lang/rust/commit/2cc5d727926dd8868ef0f7f62748da9105704402", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cc5d727926dd8868ef0f7f62748da9105704402/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a0e32f4bc30318f4e15d200039bdbc2ea659fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a0e32f4bc30318f4e15d200039bdbc2ea659fdb", "html_url": "https://github.com/rust-lang/rust/commit/1a0e32f4bc30318f4e15d200039bdbc2ea659fdb"}, {"sha": "19bd0669b45fcc5ce81b8003cafccf318c3cc22e", "url": "https://api.github.com/repos/rust-lang/rust/commits/19bd0669b45fcc5ce81b8003cafccf318c3cc22e", "html_url": "https://github.com/rust-lang/rust/commit/19bd0669b45fcc5ce81b8003cafccf318c3cc22e"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "5127a16bbfd86ed0f8dc164e1b5ef36e94e05490", "filename": "library/core/src/macros/panic.md", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2cc5d727926dd8868ef0f7f62748da9105704402/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "raw_url": "https://github.com/rust-lang/rust/raw/2cc5d727926dd8868ef0f7f62748da9105704402/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fpanic.md?ref=2cc5d727926dd8868ef0f7f62748da9105704402", "patch": "@@ -9,11 +9,15 @@ tests. `panic!` is closely tied with the `unwrap` method of both\n [`Option`][ounwrap] and [`Result`][runwrap] enums. Both implementations call\n `panic!` when they are set to [`None`] or [`Err`] variants.\n \n-This macro is used to inject panic into a Rust thread, causing the thread to\n-panic entirely. This macro panics with a string and uses the [`format!`] syntax\n-for building the message.\n-\n-Each thread's panic can be reaped as the [`Box`]`<`[`Any`]`>` type,\n+When using `panic!()` you can specify a string payload, that is built using\n+the [`format!`] syntax. That payload is used when injecting the panic into\n+the calling Rust thread, causing the thread to panic entirely.\n+\n+The behavior of the default `std` hook, i.e. the code that runs directly\n+after the panic is invoked, is to print the message payload to\n+`stderr` along with the file/line/column information of the `panic!()`\n+call. You can override the panic hook using [`std::panic::set_hook()`].\n+Inside the hook a panic can be accessed as a `&dyn Any + Send`,\n which contains either a `&str` or `String` for regular `panic!()` invocations.\n To panic with a value of another other type, [`panic_any`] can be used.\n \n@@ -26,6 +30,7 @@ See also the macro [`compile_error!`], for raising errors during compilation.\n \n [ounwrap]: Option::unwrap\n [runwrap]: Result::unwrap\n+[`std::panic::set_hook()`]: ../std/panic/fn.set_hook.html\n [`panic_any`]: ../std/panic/fn.panic_any.html\n [`Box`]: ../std/boxed/struct.Box.html\n [`Any`]: crate::any::Any"}]}