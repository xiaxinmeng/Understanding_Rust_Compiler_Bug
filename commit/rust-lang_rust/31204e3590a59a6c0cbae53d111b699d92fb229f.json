{"sha": "31204e3590a59a6c0cbae53d111b699d92fb229f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMjA0ZTM1OTBhNTlhNmMwY2JhZTUzZDExMWI2OTlkOTJmYjIyOWY=", "commit": {"author": {"name": "Jesse Bakker", "email": "github@jessebakker.com", "date": "2021-01-02T00:55:56Z"}, "committer": {"name": "Jesse Bakker", "email": "github@jessebakker.com", "date": "2021-01-02T15:59:01Z"}, "message": "Add extract-assignment assist", "tree": {"sha": "37c7544efe0b7a870251aa31ae81c18bcf8899e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37c7544efe0b7a870251aa31ae81c18bcf8899e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31204e3590a59a6c0cbae53d111b699d92fb229f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31204e3590a59a6c0cbae53d111b699d92fb229f", "html_url": "https://github.com/rust-lang/rust/commit/31204e3590a59a6c0cbae53d111b699d92fb229f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31204e3590a59a6c0cbae53d111b699d92fb229f/comments", "author": {"login": "Jesse-Bakker", "id": 22473248, "node_id": "MDQ6VXNlcjIyNDczMjQ4", "avatar_url": "https://avatars.githubusercontent.com/u/22473248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jesse-Bakker", "html_url": "https://github.com/Jesse-Bakker", "followers_url": "https://api.github.com/users/Jesse-Bakker/followers", "following_url": "https://api.github.com/users/Jesse-Bakker/following{/other_user}", "gists_url": "https://api.github.com/users/Jesse-Bakker/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jesse-Bakker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jesse-Bakker/subscriptions", "organizations_url": "https://api.github.com/users/Jesse-Bakker/orgs", "repos_url": "https://api.github.com/users/Jesse-Bakker/repos", "events_url": "https://api.github.com/users/Jesse-Bakker/events{/privacy}", "received_events_url": "https://api.github.com/users/Jesse-Bakker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jesse-Bakker", "id": 22473248, "node_id": "MDQ6VXNlcjIyNDczMjQ4", "avatar_url": "https://avatars.githubusercontent.com/u/22473248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jesse-Bakker", "html_url": "https://github.com/Jesse-Bakker", "followers_url": "https://api.github.com/users/Jesse-Bakker/followers", "following_url": "https://api.github.com/users/Jesse-Bakker/following{/other_user}", "gists_url": "https://api.github.com/users/Jesse-Bakker/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jesse-Bakker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jesse-Bakker/subscriptions", "organizations_url": "https://api.github.com/users/Jesse-Bakker/orgs", "repos_url": "https://api.github.com/users/Jesse-Bakker/repos", "events_url": "https://api.github.com/users/Jesse-Bakker/events{/privacy}", "received_events_url": "https://api.github.com/users/Jesse-Bakker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56a7bf7ede12f6bec194265ea4a95911c9e469bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/56a7bf7ede12f6bec194265ea4a95911c9e469bd", "html_url": "https://github.com/rust-lang/rust/commit/56a7bf7ede12f6bec194265ea4a95911c9e469bd"}], "stats": {"total": 269, "additions": 269, "deletions": 0}, "files": [{"sha": "6042977057edbba4f3168b4fcdebbdd4d0ee22ea", "filename": "crates/assists/src/handlers/extract_assignment.rs", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/rust-lang/rust/blob/31204e3590a59a6c0cbae53d111b699d92fb229f/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31204e3590a59a6c0cbae53d111b699d92fb229f/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_assignment.rs?ref=31204e3590a59a6c0cbae53d111b699d92fb229f", "patch": "@@ -0,0 +1,238 @@\n+use hir::AsName;\n+use syntax::{\n+    ast::{self, edit::AstNodeEdit, make},\n+    AstNode,\n+};\n+use test_utils::mark;\n+\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    AssistId, AssistKind,\n+};\n+\n+// Assist: extract_assignment\n+//\n+// Extracts variable assigment to outside an if or match statement.\n+//\n+// ```\n+// fn main() {\n+//     let mut foo = 6;\n+//\n+//     if true {\n+//         <|>foo = 5;\n+//     } else {\n+//         foo = 4;\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     let mut foo = 6;\n+//\n+//     foo = if true {\n+//         5\n+//     } else {\n+//         4\n+//     };\n+// }\n+// ```\n+pub(crate) fn extract_assigment(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let name = ctx.find_node_at_offset::<ast::NameRef>()?.as_name();\n+\n+    let if_statement = ctx.find_node_at_offset::<ast::IfExpr>()?;\n+\n+    let new_stmt = exprify_if(&if_statement, &name)?.indent(if_statement.indent_level());\n+    let expr_stmt = make::expr_stmt(new_stmt);\n+\n+    acc.add(\n+        AssistId(\"extract_assignment\", AssistKind::RefactorExtract),\n+        \"Extract assignment\",\n+        if_statement.syntax().text_range(),\n+        move |edit| {\n+            edit.replace(if_statement.syntax().text_range(), format!(\"{} = {};\", name, expr_stmt));\n+        },\n+    )\n+}\n+\n+fn exprify_if(statement: &ast::IfExpr, name: &hir::Name) -> Option<ast::Expr> {\n+    let then_branch = exprify_block(&statement.then_branch()?, name)?;\n+    let else_branch = match statement.else_branch()? {\n+        ast::ElseBranch::Block(block) => ast::ElseBranch::Block(exprify_block(&block, name)?),\n+        ast::ElseBranch::IfExpr(expr) => {\n+            mark::hit!(test_extract_assigment_chained_if);\n+            ast::ElseBranch::IfExpr(ast::IfExpr::cast(\n+                exprify_if(&expr, name)?.syntax().to_owned(),\n+            )?)\n+        }\n+    };\n+    Some(make::expr_if(statement.condition()?, then_branch, Some(else_branch)))\n+}\n+\n+fn exprify_block(block: &ast::BlockExpr, name: &hir::Name) -> Option<ast::BlockExpr> {\n+    if block.expr().is_some() {\n+        return None;\n+    }\n+\n+    let mut stmts: Vec<_> = block.statements().collect();\n+    let stmt = stmts.pop()?;\n+\n+    if let ast::Stmt::ExprStmt(stmt) = stmt {\n+        if let ast::Expr::BinExpr(expr) = stmt.expr()? {\n+            if expr.op_kind()? == ast::BinOp::Assignment\n+                && &expr.lhs()?.name_ref()?.as_name() == name\n+            {\n+                // The last statement in the block is an assignment to the name we want\n+                return Some(make::block_expr(stmts, Some(expr.rhs()?)));\n+            }\n+        }\n+    }\n+    None\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    #[test]\n+    fn test_extract_assignment() {\n+        check_assist(\n+            extract_assigment,\n+            r#\"\n+fn foo() {\n+    let mut a = 1;\n+\n+    if true {\n+        <|>a = 2;\n+    } else {\n+        a = 3;\n+    }\n+}\"#,\n+            r#\"\n+fn foo() {\n+    let mut a = 1;\n+\n+    a = if true {\n+        2\n+    } else {\n+        3\n+    };\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_assignment_not_last_not_applicable() {\n+        check_assist_not_applicable(\n+            extract_assigment,\n+            r#\"\n+fn foo() {\n+    let mut a = 1;\n+\n+    if true {\n+        <|>a = 2;\n+        b = a;\n+    } else {\n+        a = 3;\n+    }\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_extract_assignment_chained_if() {\n+        mark::check!(test_extract_assigment_chained_if);\n+        check_assist(\n+            extract_assigment,\n+            r#\"\n+fn foo() {\n+    let mut a = 1;\n+\n+    if true {\n+        <|>a = 2;\n+    } else if false {\n+        a = 3;\n+    } else {\n+        a = 4;\n+    }\n+}\"#,\n+            r#\"\n+fn foo() {\n+    let mut a = 1;\n+\n+    a = if true {\n+        2\n+    } else if false {\n+        3\n+    } else {\n+        4\n+    };\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_extract_assigment_retains_stmts() {\n+        check_assist(\n+            extract_assigment,\n+            r#\"\n+fn foo() {\n+    let mut a = 1;\n+\n+    if true {\n+        let b = 2;\n+        <|>a = 2;\n+    } else {\n+        let b = 3;\n+        a = 3;\n+    }\n+}\"#,\n+            r#\"\n+fn foo() {\n+    let mut a = 1;\n+\n+    a = if true {\n+        let b = 2;\n+        2\n+    } else {\n+        let b = 3;\n+        3\n+    };\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn extract_assignment_let_stmt_not_applicable() {\n+        check_assist_not_applicable(\n+            extract_assigment,\n+            r#\"\n+fn foo() {\n+    let mut a = 1;\n+\n+    let b = if true {\n+        <|>a = 2\n+    } else {\n+        a = 3\n+    };\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn extract_assignment_missing_assigment_not_applicable() {\n+        check_assist_not_applicable(\n+            extract_assigment,\n+            r#\"\n+fn foo() {\n+    let mut a = 1;\n+\n+    if true {\n+        <|>a = 2;\n+    } else {}\n+}\"#,\n+        )\n+    }\n+}"}, {"sha": "212464f859d48dddb341f2b96455621784d7d3e2", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31204e3590a59a6c0cbae53d111b699d92fb229f/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31204e3590a59a6c0cbae53d111b699d92fb229f/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=31204e3590a59a6c0cbae53d111b699d92fb229f", "patch": "@@ -116,6 +116,7 @@ mod handlers {\n     mod convert_integer_literal;\n     mod early_return;\n     mod expand_glob_import;\n+    mod extract_assignment;\n     mod extract_module_to_file;\n     mod extract_struct_from_enum_variant;\n     mod extract_variable;\n@@ -167,6 +168,7 @@ mod handlers {\n             convert_integer_literal::convert_integer_literal,\n             early_return::convert_to_guarded_return,\n             expand_glob_import::expand_glob_import,\n+            extract_assignment::extract_assigment,\n             extract_module_to_file::extract_module_to_file,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,\n             extract_variable::extract_variable,"}, {"sha": "b91a816e89892504a1c0181a691f29cb486edf2b", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/31204e3590a59a6c0cbae53d111b699d92fb229f/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31204e3590a59a6c0cbae53d111b699d92fb229f/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=31204e3590a59a6c0cbae53d111b699d92fb229f", "patch": "@@ -237,6 +237,35 @@ fn qux(bar: Bar, baz: Baz) {}\n     )\n }\n \n+#[test]\n+fn doctest_extract_assignment() {\n+    check_doc_test(\n+        \"extract_assignment\",\n+        r#####\"\n+fn main() {\n+    let mut foo = 6;\n+\n+    if true {\n+        <|>foo = 5;\n+    } else {\n+        foo = 4;\n+    }\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    let mut foo = 6;\n+\n+    foo = if true {\n+        5\n+    } else {\n+        4\n+    };\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_extract_module_to_file() {\n     check_doc_test("}]}