{"sha": "237f16db45a9666ae8ed8a5ae8e81a4ca9a78519", "node_id": "C_kwDOAAsO6NoAKDIzN2YxNmRiNDVhOTY2NmFlOGVkOGE1YWU4ZTgxYTRjYTlhNzg1MTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-16T17:59:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-16T17:59:34Z"}, "message": "Rollup merge of #94037 - tmiasko:verbose, r=Mark-Simulacrum\n\nFix inconsistent symbol mangling with -Zverbose\n\nAlways skip arguments that are the defaults of their respective\nparameters, to avoid generating inconsistent symbols for builds\nwith `-Zverbose` flag and without it.", "tree": {"sha": "3a3df03ed760e345d3ca135e39646b9de8755702", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a3df03ed760e345d3ca135e39646b9de8755702"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiDTuGCRBK7hj4Ov3rIwAAIloIAKD8EP9E3AVDXR+GQ0dIPREE\nbMskp1Y7kwRdLmaxGa9URKjZQEnrtHpdMRwtegSKpUCcijH+DOIldzIqKqaP29iz\nXP1tjZTl8t9VccQ0wkewo9H2LcZ/6DCzr0Mj+0Yh984oXzVnsu4/qxbqGPZg1zi7\npWSvSiASJSYIlTCOH69CwtS3gF/z7l23UcpiIBG++bCpE9434qpTnj0HTcxZd958\nbM6rgzpaqim5h+kp9+Saig+pjNlJZOKlUz3XggDz1Dip9IfzggCX+F+M//Mqa75c\nJPlQ2x04XBb3IGLaXXZuirG+9NB9vQ6P8zjipqnM9Nd3XCrFSOUEKkOo7lejCpE=\n=giSo\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a3df03ed760e345d3ca135e39646b9de8755702\nparent 847ac55bec6e7e7d1fc82c89a05b518e99ddd9cb\nparent 3158372dea6e1b28b70c4312cd87b76b3d6bfb44\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645034374 +0100\ncommitter GitHub <noreply@github.com> 1645034374 +0100\n\nRollup merge of #94037 - tmiasko:verbose, r=Mark-Simulacrum\n\nFix inconsistent symbol mangling with -Zverbose\n\nAlways skip arguments that are the defaults of their respective\nparameters, to avoid generating inconsistent symbols for builds\nwith `-Zverbose` flag and without it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519", "html_url": "https://github.com/rust-lang/rust/commit/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "847ac55bec6e7e7d1fc82c89a05b518e99ddd9cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/847ac55bec6e7e7d1fc82c89a05b518e99ddd9cb", "html_url": "https://github.com/rust-lang/rust/commit/847ac55bec6e7e7d1fc82c89a05b518e99ddd9cb"}, {"sha": "3158372dea6e1b28b70c4312cd87b76b3d6bfb44", "url": "https://api.github.com/repos/rust-lang/rust/commits/3158372dea6e1b28b70c4312cd87b76b3d6bfb44", "html_url": "https://github.com/rust-lang/rust/commit/3158372dea6e1b28b70c4312cd87b76b3d6bfb44"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "94cea505c32a058d049f925a5d7fcabbd3a7e413", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=237f16db45a9666ae8ed8a5ae8e81a4ca9a78519", "patch": "@@ -188,11 +188,6 @@ pub trait Printer<'tcx>: Sized {\n             own_params.start = 1;\n         }\n \n-        // If we're in verbose mode, then print default-equal args too\n-        if self.tcx().sess.verbose() {\n-            return &substs[own_params];\n-        }\n-\n         // Don't print args that are the defaults of their respective parameters.\n         own_params.end -= generics\n             .params"}, {"sha": "66cd94d7a1b3730f224fdd13c3c44ca10ebb44ba", "filename": "src/test/ui/associated-types/substs-ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.rs?ref=237f16db45a9666ae8ed8a5ae8e81a4ca9a78519", "patch": "@@ -25,7 +25,7 @@ fn foo<'z>() where &'z (): Sized {\n     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n     //[verbose]~^ ERROR mismatched types\n     //[verbose]~| expected unit type `()`\n-    //[verbose]~| found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>}`\n+    //[verbose]~| found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n     //[normal]~^^^^ ERROR mismatched types\n     //[normal]~| expected unit type `()`\n     //[normal]~| found fn item `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`"}, {"sha": "b831f3b7a76d23aef2deaf317863be67d68ee0c8", "filename": "src/test/ui/associated-types/substs-ppaux.verbose.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr?ref=237f16db45a9666ae8ed8a5ae8e81a4ca9a78519", "patch": "@@ -20,15 +20,15 @@ error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n    |\n LL |     fn bar<'a, T>() where T: 'a {}\n-   |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>} defined here\n+   |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n    |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n    |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n-                found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>}`\n+                found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n help: use parentheses to call this function\n    |\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>();"}, {"sha": "983d6a06afada75c7edffd8500d13cacbf15bc7b", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=237f16db45a9666ae8ed8a5ae8e81a4ca9a78519", "patch": "@@ -6,7 +6,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#2r), std::alloc::Global>,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n                (),\n            ]\n    = note: number of external vids: 3\n@@ -42,7 +42,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: correct_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#2r), std::alloc::Global>,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n                (),\n            ]\n    = note: number of external vids: 3\n@@ -69,7 +69,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: wrong_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#3r), std::alloc::Global>,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n                (),\n            ]\n    = note: number of external vids: 4\n@@ -105,7 +105,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#3r), std::alloc::Global>,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n                (),\n            ]\n    = note: number of external vids: 4"}, {"sha": "88d73e7a729a92f5826d545af0bcf947c986f650", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=237f16db45a9666ae8ed8a5ae8e81a4ca9a78519", "patch": "@@ -6,7 +6,7 @@ LL |     with_signature(x, |y| y)\n    |\n    = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r), std::alloc::Global>,\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r)>,\n                (),\n            ]\n    = note: number of external vids: 3"}, {"sha": "e00c592b6d2761361fbeb5951bf6c33d2deee586", "filename": "src/test/ui/symbol-names/verbose.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519/src%2Ftest%2Fui%2Fsymbol-names%2Fverbose.rs", "raw_url": "https://github.com/rust-lang/rust/raw/237f16db45a9666ae8ed8a5ae8e81a4ca9a78519/src%2Ftest%2Fui%2Fsymbol-names%2Fverbose.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fverbose.rs?ref=237f16db45a9666ae8ed8a5ae8e81a4ca9a78519", "patch": "@@ -0,0 +1,15 @@\n+// Regression test for issue #57596, where -Zverbose flag unintentionally\n+// affected produced symbols making it impossible to link between crates\n+// with a different value of the flag (for symbols involving generic\n+// arguments equal to defaults of their respective parameters).\n+//\n+// build-pass\n+// compile-flags: -Zverbose\n+\n+pub fn error(msg: String) -> Box<dyn std::error::Error> {\n+  msg.into()\n+}\n+\n+fn main() {\n+  error(String::new());\n+}"}]}