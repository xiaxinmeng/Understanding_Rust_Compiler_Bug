{"sha": "6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030", "node_id": "C_kwDOAAsO6NoAKDZhMjMzYjVlMmFiNmE1OWJjMzJmMDUyZDllY2Y4Yjg5YjRiY2YwMzA", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-22T17:01:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-22T17:43:48Z"}, "message": "rustc_metadata: Switch module children decoding to an iterator", "tree": {"sha": "169f416f2a4a7bc868a2800a8c8fd41fbfcaff11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/169f416f2a4a7bc868a2800a8c8fd41fbfcaff11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030", "html_url": "https://github.com/rust-lang/rust/commit/6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3b5791a47eea13cb1d3fec644fc0c6ea9c37c96", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b5791a47eea13cb1d3fec644fc0c6ea9c37c96", "html_url": "https://github.com/rust-lang/rust/commit/f3b5791a47eea13cb1d3fec644fc0c6ea9c37c96"}], "stats": {"total": 119, "additions": 58, "deletions": 61}, "files": [{"sha": "011b81708851a4e0e5486abe02ea5461036325fc", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030", "patch": "@@ -35,11 +35,10 @@ use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{self, BytePos, ExpnId, Pos, Span, SyntaxContext, DUMMY_SP};\n \n use proc_macro::bridge::client::ProcMacro;\n-use std::io;\n use std::iter::TrustedLen;\n-use std::mem;\n use std::num::NonZeroUsize;\n use std::path::Path;\n+use std::{io, iter, mem};\n \n pub(super) use cstore_impl::provide;\n pub use cstore_impl::provide_extern;\n@@ -994,60 +993,61 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     /// including both proper items and reexports.\n     /// Module here is understood in name resolution sense - it can be a `mod` item,\n     /// or a crate root, or an enum, or a trait.\n-    fn for_each_module_child(\n+    fn get_module_children(\n         self,\n         id: DefIndex,\n-        mut callback: impl FnMut(ModChild),\n-        sess: &Session,\n-    ) {\n-        if let Some(data) = &self.root.proc_macro_data {\n-            // If we are loading as a proc macro, we want to return\n-            // the view of this crate as a proc macro crate.\n-            if id == CRATE_DEF_INDEX {\n-                for def_index in data.macros.decode(self) {\n-                    let raw_macro = self.raw_proc_macro(def_index);\n-                    let res = Res::Def(\n-                        DefKind::Macro(macro_kind(raw_macro)),\n-                        self.local_def_id(def_index),\n-                    );\n-                    let ident = self.item_ident(def_index, sess);\n-                    callback(ModChild {\n-                        ident,\n-                        res,\n-                        vis: ty::Visibility::Public,\n-                        span: ident.span,\n-                        macro_rules: false,\n-                    });\n+        sess: &'a Session,\n+    ) -> impl Iterator<Item = ModChild> + 'a {\n+        iter::from_generator(move || {\n+            if let Some(data) = &self.root.proc_macro_data {\n+                // If we are loading as a proc macro, we want to return\n+                // the view of this crate as a proc macro crate.\n+                if id == CRATE_DEF_INDEX {\n+                    for def_index in data.macros.decode(self) {\n+                        let raw_macro = self.raw_proc_macro(def_index);\n+                        let res = Res::Def(\n+                            DefKind::Macro(macro_kind(raw_macro)),\n+                            self.local_def_id(def_index),\n+                        );\n+                        let ident = self.item_ident(def_index, sess);\n+                        yield ModChild {\n+                            ident,\n+                            res,\n+                            vis: ty::Visibility::Public,\n+                            span: ident.span,\n+                            macro_rules: false,\n+                        };\n+                    }\n                 }\n+                return;\n             }\n-            return;\n-        }\n \n-        // Iterate over all children.\n-        if let Some(children) = self.root.tables.children.get(self, id) {\n-            for child_index in children.decode((self, sess)) {\n-                let ident = self.item_ident(child_index, sess);\n-                let kind = self.def_kind(child_index);\n-                let def_id = self.local_def_id(child_index);\n-                let res = Res::Def(kind, def_id);\n-                let vis = self.get_visibility(child_index);\n-                let span = self.get_span(child_index, sess);\n-                let macro_rules = match kind {\n-                    DefKind::Macro(..) => {\n-                        self.root.tables.macro_rules.get(self, child_index).is_some()\n-                    }\n-                    _ => false,\n-                };\n+            // Iterate over all children.\n+            if let Some(children) = self.root.tables.children.get(self, id) {\n+                for child_index in children.decode((self, sess)) {\n+                    let ident = self.item_ident(child_index, sess);\n+                    let kind = self.def_kind(child_index);\n+                    let def_id = self.local_def_id(child_index);\n+                    let res = Res::Def(kind, def_id);\n+                    let vis = self.get_visibility(child_index);\n+                    let span = self.get_span(child_index, sess);\n+                    let macro_rules = match kind {\n+                        DefKind::Macro(..) => {\n+                            self.root.tables.macro_rules.get(self, child_index).is_some()\n+                        }\n+                        _ => false,\n+                    };\n \n-                callback(ModChild { ident, res, vis, span, macro_rules });\n+                    yield ModChild { ident, res, vis, span, macro_rules };\n+                }\n             }\n-        }\n \n-        if let Some(exports) = self.root.tables.module_reexports.get(self, id) {\n-            for exp in exports.decode((self, sess)) {\n-                callback(exp);\n+            if let Some(exports) = self.root.tables.module_reexports.get(self, id) {\n+                for exp in exports.decode((self, sess)) {\n+                    yield exp;\n+                }\n             }\n-        }\n+        })\n     }\n \n     fn is_ctfe_mir_available(self, id: DefIndex) -> bool {"}, {"sha": "33cce0a411e81babf281a72e64061927c0eb1968", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030", "patch": "@@ -21,7 +21,6 @@ use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::{kw, Symbol};\n \n use rustc_data_structures::sync::Lrc;\n-use smallvec::SmallVec;\n use std::any::Any;\n \n use super::{Decodable, DecodeContext, DecodeIterator};\n@@ -298,9 +297,7 @@ provide! { tcx, def_id, other, cdata,\n         r\n     }\n     module_children => {\n-        let mut result = SmallVec::<[_; 8]>::new();\n-        cdata.for_each_module_child(def_id.index, |child| result.push(child), tcx.sess);\n-        tcx.arena.alloc_slice(&result)\n+        tcx.arena.alloc_from_iter(cdata.get_module_children(def_id.index, tcx.sess))\n     }\n     defined_lib_features => { cdata.get_lib_features(tcx) }\n     stability_implications => {\n@@ -503,14 +500,12 @@ impl CStore {\n         self.get_crate_data(def.krate).get_visibility(def.index)\n     }\n \n-    pub fn module_children_untracked(&self, def_id: DefId, sess: &Session) -> Vec<ModChild> {\n-        let mut result = vec![];\n-        self.get_crate_data(def_id.krate).for_each_module_child(\n-            def_id.index,\n-            |child| result.push(child),\n-            sess,\n-        );\n-        result\n+    pub fn module_children_untracked<'a>(\n+        &'a self,\n+        def_id: DefId,\n+        sess: &'a Session,\n+    ) -> impl Iterator<Item = ModChild> + 'a {\n+        self.get_crate_data(def_id.krate).get_module_children(def_id.index, sess)\n     }\n \n     pub fn load_macro_untracked(&self, id: DefId, sess: &Session) -> LoadedMacro {"}, {"sha": "7ac1f6c08819c6b97d6c92edc3e618f30147a1ff", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030", "patch": "@@ -204,7 +204,9 @@ impl<'a> Resolver<'a> {\n     }\n \n     pub(crate) fn build_reduced_graph_external(&mut self, module: Module<'a>) {\n-        for child in self.cstore().module_children_untracked(module.def_id(), self.session) {\n+        for child in\n+            Vec::from_iter(self.cstore().module_children_untracked(module.def_id(), self.session))\n+        {\n             let parent_scope = ParentScope::module(module, self);\n             BuildReducedGraphVisitor { r: self, parent_scope }\n                 .build_reduced_graph_for_external_crate_res(child);"}, {"sha": "ad05d4f1446b42bc323d51f718d300d7dd1ad9c8", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=6a233b5e2ab6a59bc32f052d9ecf8b89b4bcf030", "patch": "@@ -1920,7 +1920,7 @@ impl<'a> Resolver<'a> {\n         if let Some(def_id) = def_id.as_local() {\n             self.reexport_map.get(&def_id).cloned().unwrap_or_default()\n         } else {\n-            self.cstore().module_children_untracked(def_id, self.session)\n+            self.cstore().module_children_untracked(def_id, self.session).collect()\n         }\n     }\n "}]}