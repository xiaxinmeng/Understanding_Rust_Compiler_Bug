{"sha": "db8a9274a9e3feb90c3db5f7046f9b3566867f5a", "node_id": "C_kwDOAAsO6NoAKGRiOGE5Mjc0YTllM2ZlYjkwYzNkYjVmNzA0NmY5YjM1NjY4NjdmNWE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-10T19:17:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-20T10:26:37Z"}, "message": "Introduce BareFnTy::decl_span and fix generics span.", "tree": {"sha": "d99321ac6366f3f399a02e50f51988148f8c04e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d99321ac6366f3f399a02e50f51988148f8c04e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db8a9274a9e3feb90c3db5f7046f9b3566867f5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db8a9274a9e3feb90c3db5f7046f9b3566867f5a", "html_url": "https://github.com/rust-lang/rust/commit/db8a9274a9e3feb90c3db5f7046f9b3566867f5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db8a9274a9e3feb90c3db5f7046f9b3566867f5a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5953c57f27cdb41d86530e7038d7f191e3f1c74e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5953c57f27cdb41d86530e7038d7f191e3f1c74e", "html_url": "https://github.com/rust-lang/rust/commit/5953c57f27cdb41d86530e7038d7f191e3f1c74e"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "0deeb6849a2164f8170c6c8f7ca705de991d6cf0", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db8a9274a9e3feb90c3db5f7046f9b3566867f5a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8a9274a9e3feb90c3db5f7046f9b3566867f5a/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=db8a9274a9e3feb90c3db5f7046f9b3566867f5a", "patch": "@@ -1976,6 +1976,8 @@ pub struct BareFnTy {\n     pub ext: Extern,\n     pub generic_params: Vec<GenericParam>,\n     pub decl: P<FnDecl>,\n+    /// Span of the `fn(...) -> ...` part.\n+    pub decl_span: Span,\n }\n \n /// The various kinds of type recognized by the compiler."}, {"sha": "1a93da8788a1f80e92f3ab8c5d1394279a1f4bb6", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db8a9274a9e3feb90c3db5f7046f9b3566867f5a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8a9274a9e3feb90c3db5f7046f9b3566867f5a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=db8a9274a9e3feb90c3db5f7046f9b3566867f5a", "patch": "@@ -460,10 +460,11 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n             vis.visit_mt(mt);\n         }\n         TyKind::BareFn(bft) => {\n-            let BareFnTy { unsafety, ext: _, generic_params, decl } = bft.deref_mut();\n+            let BareFnTy { unsafety, ext: _, generic_params, decl, decl_span } = bft.deref_mut();\n             visit_unsafety(unsafety, vis);\n             generic_params.flat_map_in_place(|param| vis.flat_map_generic_param(param));\n             vis.visit_fn_decl(decl);\n+            vis.visit_span(decl_span);\n         }\n         TyKind::Tup(tys) => visit_vec(tys, |ty| vis.visit_ty(ty)),\n         TyKind::Paren(ty) => vis.visit_ty(ty),"}, {"sha": "fb3f5eb3f9fe112b75b2b0c2fcc3b105441d5cf7", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db8a9274a9e3feb90c3db5f7046f9b3566867f5a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8a9274a9e3feb90c3db5f7046f9b3566867f5a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=db8a9274a9e3feb90c3db5f7046f9b3566867f5a", "patch": "@@ -518,6 +518,7 @@ impl<'a> Parser<'a> {\n             kind: rustc_ast::VisibilityKind::Inherited,\n             tokens: None,\n         };\n+        let span_start = self.token.span;\n         let ast::FnHeader { ext, unsafety, constness, asyncness } =\n             self.parse_fn_front_matter(&inherited_vis)?;\n         let decl = self.parse_fn_decl(|_| false, AllowPlus::No, recover_return_sign)?;\n@@ -531,7 +532,8 @@ impl<'a> Parser<'a> {\n         if let ast::Async::Yes { span, .. } = asyncness {\n             self.error_fn_ptr_bad_qualifier(whole_span, span, \"async\");\n         }\n-        Ok(TyKind::BareFn(P(BareFnTy { ext, unsafety, generic_params: params, decl })))\n+        let decl_span = span_start.to(self.token.span);\n+        Ok(TyKind::BareFn(P(BareFnTy { ext, unsafety, generic_params: params, decl, decl_span })))\n     }\n \n     /// Emit an error for the given bad function pointer qualifier."}, {"sha": "bf7bdecf1f4dcd4820c97ed23e8f7f3022b705e9", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db8a9274a9e3feb90c3db5f7046f9b3566867f5a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db8a9274a9e3feb90c3db5f7046f9b3566867f5a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=db8a9274a9e3feb90c3db5f7046f9b3566867f5a", "patch": "@@ -594,11 +594,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                 self.diagnostic_metadata.current_trait_object = Some(&bounds[..]);\n             }\n             TyKind::BareFn(ref bare_fn) => {\n-                let span = if bare_fn.generic_params.is_empty() {\n-                    ty.span.shrink_to_lo()\n-                } else {\n-                    ty.span\n-                };\n+                let span = ty.span.shrink_to_lo().to(bare_fn.decl_span.shrink_to_lo());\n                 self.with_generic_param_rib(\n                     &bare_fn.generic_params,\n                     NormalRibKind,\n@@ -627,8 +623,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         self.diagnostic_metadata.current_type_path = prev_ty;\n     }\n     fn visit_poly_trait_ref(&mut self, tref: &'ast PolyTraitRef, _: &'ast TraitBoundModifier) {\n-        let span =\n-            if tref.bound_generic_params.is_empty() { tref.span.shrink_to_lo() } else { tref.span };\n+        let span = tref.span.shrink_to_lo().to(tref.trait_ref.path.span.shrink_to_lo());\n         self.with_generic_param_rib(\n             &tref.bound_generic_params,\n             NormalRibKind,\n@@ -890,11 +885,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                 ..\n             }) = p\n             {\n-                let span = if bound_generic_params.is_empty() {\n-                    predicate_span.shrink_to_lo()\n-                } else {\n-                    *predicate_span\n-                };\n+                let span = predicate_span.shrink_to_lo().to(bounded_ty.span.shrink_to_lo());\n                 this.with_generic_param_rib(\n                     &bound_generic_params,\n                     NormalRibKind,"}]}