{"sha": "d35fa1e98b244773129f18b0e8bcc81fa099ae68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNWZhMWU5OGIyNDQ3NzMxMjlmMThiMGU4YmNjODFmYTA5OWFlNjg=", "commit": {"author": {"name": "Dylan Maccora", "email": "maccora17@gmail.com", "date": "2017-04-07T08:26:36Z"}, "committer": {"name": "Dylan Maccora", "email": "maccora17@gmail.com", "date": "2017-04-07T22:12:50Z"}, "message": "Removing broken examples", "tree": {"sha": "936506a287f4f1ffa2d86c7380c2b1d59817038d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/936506a287f4f1ffa2d86c7380c2b1d59817038d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d35fa1e98b244773129f18b0e8bcc81fa099ae68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d35fa1e98b244773129f18b0e8bcc81fa099ae68", "html_url": "https://github.com/rust-lang/rust/commit/d35fa1e98b244773129f18b0e8bcc81fa099ae68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d35fa1e98b244773129f18b0e8bcc81fa099ae68/comments", "author": {"login": "maccoda", "id": 15388206, "node_id": "MDQ6VXNlcjE1Mzg4MjA2", "avatar_url": "https://avatars.githubusercontent.com/u/15388206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maccoda", "html_url": "https://github.com/maccoda", "followers_url": "https://api.github.com/users/maccoda/followers", "following_url": "https://api.github.com/users/maccoda/following{/other_user}", "gists_url": "https://api.github.com/users/maccoda/gists{/gist_id}", "starred_url": "https://api.github.com/users/maccoda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maccoda/subscriptions", "organizations_url": "https://api.github.com/users/maccoda/orgs", "repos_url": "https://api.github.com/users/maccoda/repos", "events_url": "https://api.github.com/users/maccoda/events{/privacy}", "received_events_url": "https://api.github.com/users/maccoda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "maccoda", "id": 15388206, "node_id": "MDQ6VXNlcjE1Mzg4MjA2", "avatar_url": "https://avatars.githubusercontent.com/u/15388206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maccoda", "html_url": "https://github.com/maccoda", "followers_url": "https://api.github.com/users/maccoda/followers", "following_url": "https://api.github.com/users/maccoda/following{/other_user}", "gists_url": "https://api.github.com/users/maccoda/gists{/gist_id}", "starred_url": "https://api.github.com/users/maccoda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maccoda/subscriptions", "organizations_url": "https://api.github.com/users/maccoda/orgs", "repos_url": "https://api.github.com/users/maccoda/repos", "events_url": "https://api.github.com/users/maccoda/events{/privacy}", "received_events_url": "https://api.github.com/users/maccoda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8474682366592fa9d52cb11723a5fd5cd9421e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8474682366592fa9d52cb11723a5fd5cd9421e", "html_url": "https://github.com/rust-lang/rust/commit/bb8474682366592fa9d52cb11723a5fd5cd9421e"}], "stats": {"total": 27, "additions": 3, "deletions": 24}, "files": [{"sha": "abab4bb0f63b45ced963fc988b19d6cba0fb77d4", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d35fa1e98b244773129f18b0e8bcc81fa099ae68/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35fa1e98b244773129f18b0e8bcc81fa099ae68/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=d35fa1e98b244773129f18b0e8bcc81fa099ae68", "patch": "@@ -86,19 +86,6 @@ use str::FromStr;\n /// `&mut Foo` or `&&mut Foo`)\n ///\n /// # Examples\n-/// An example implementation of the trait is [`Path`].\n-///\n-/// [`Path`]: ../../std/path/struct.Path.html\n-///\n-/// ```\n-/// use std::path::Path;\n-///\n-/// impl AsRef<Path> for str {\n-///     fn as_ref(&self) -> &Path {\n-///         Path::new(self)\n-///     }\n-/// }\n-/// ```\n ///\n /// Both [`String`] and `&str` implement `AsRef<str>`:\n ///\n@@ -156,15 +143,6 @@ pub trait AsRef<T: ?Sized> {\n /// assert_eq!(*boxed_num, 1);\n /// ```\n ///\n-/// `Vec` implements `AsMut` for converting between itself and a primitive array:\n-///\n-/// ```\n-/// impl<T> AsMut<[T]> for Vec<T> {\n-///   fn as_mut(&mut self) -> &mut [T] {\n-///     self\n-///   }\n-/// }\n-/// ```\n ///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsMut<T: ?Sized> {\n@@ -275,11 +253,12 @@ pub trait Into<T>: Sized {\n ///     }\n /// }\n ///\n-/// fn open_and_parse_file(file_name: &str) -> Result<i32, MyError> {\n-///     let file = std::fs::File::open(\"test\")?;\n+/// fn open_and_parse_file(file_name: &str) -> Result<i32, CliError> {\n+///     let mut file = std::fs::File::open(\"test\")?;\n ///     let mut contents = String::new();\n ///     file.read_to_string(&mut contents)?;\n ///     let num: i32 = contents.trim().parse()?;\n+///     Ok(num)\n /// }\n /// ```\n ///"}]}