{"sha": "b53761969fa7954e4de4d6bb890addc23d668608", "node_id": "C_kwDOAAsO6NoAKGI1Mzc2MTk2OWZhNzk1NGU0ZGU0ZDZiYjg5MGFkZGMyM2Q2Njg2MDg", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-08-12T00:54:42Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-08-24T02:33:19Z"}, "message": "Remove `$tcx` metavariable from `rustc_query_append`\n\nIt's not actually necessary and it makes the code harder to read.", "tree": {"sha": "0f24a1525349701f86e864a9b3a58389f9263a64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f24a1525349701f86e864a9b3a58389f9263a64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b53761969fa7954e4de4d6bb890addc23d668608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b53761969fa7954e4de4d6bb890addc23d668608", "html_url": "https://github.com/rust-lang/rust/commit/b53761969fa7954e4de4d6bb890addc23d668608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b53761969fa7954e4de4d6bb890addc23d668608/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87991d5f5d72d6baca490141cb890211ba2f3843", "url": "https://api.github.com/repos/rust-lang/rust/commits/87991d5f5d72d6baca490141cb890211ba2f3843", "html_url": "https://github.com/rust-lang/rust/commit/87991d5f5d72d6baca490141cb890211ba2f3843"}], "stats": {"total": 104, "additions": 49, "deletions": 55}, "files": [{"sha": "32a15413c6fefda6d6d9ff962faae45b82aa2fe7", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b53761969fa7954e4de4d6bb890addc23d668608/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53761969fa7954e4de4d6bb890addc23d668608/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=b53761969fa7954e4de4d6bb890addc23d668608", "patch": "@@ -400,10 +400,8 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n     TokenStream::from(quote! {\n         #[macro_export]\n         macro_rules! rustc_query_append {\n-            ([$($macro:tt)*][$($other:tt)*]) => {\n+            ([$($macro:tt)*]) => {\n                 $($macro)* {\n-                    $($other)*\n-\n                     #query_stream\n                 }\n             }"}, {"sha": "156a9641272f57ecbc2b44f61cf4c1f3285b2ab6", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b53761969fa7954e4de4d6bb890addc23d668608/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53761969fa7954e4de4d6bb890addc23d668608/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=b53761969fa7954e4de4d6bb890addc23d668608", "patch": "@@ -143,7 +143,7 @@ impl DepKind {\n }\n \n macro_rules! define_dep_nodes {\n-    (<$tcx:tt>\n+    (\n     $(\n         [$($attrs:tt)*]\n         $variant:ident $(( $tuple_arg_ty:ty $(,)? ))*\n@@ -179,7 +179,7 @@ macro_rules! define_dep_nodes {\n     );\n }\n \n-rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n+rustc_dep_node_append!([define_dep_nodes!][\n     // We use this for most things when incr. comp. is turned off.\n     [] Null,\n "}, {"sha": "736ab69c81219059987ab1ffaaf736fd50bee441", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b53761969fa7954e4de4d6bb890addc23d668608/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53761969fa7954e4de4d6bb890addc23d668608/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=b53761969fa7954e4de4d6bb890addc23d668608", "patch": "@@ -173,7 +173,7 @@ macro_rules! opt_remap_env_constness {\n }\n \n macro_rules! define_callbacks {\n-    (<$tcx:tt>\n+    (\n      $($(#[$attr:meta])*\n         [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n \n@@ -187,33 +187,33 @@ macro_rules! define_callbacks {\n         pub mod query_keys {\n             use super::*;\n \n-            $(pub type $name<$tcx> = $($K)*;)*\n+            $(pub type $name<'tcx> = $($K)*;)*\n         }\n         #[allow(nonstandard_style, unused_lifetimes)]\n         pub mod query_values {\n             use super::*;\n \n-            $(pub type $name<$tcx> = $V;)*\n+            $(pub type $name<'tcx> = $V;)*\n         }\n         #[allow(nonstandard_style, unused_lifetimes)]\n         pub mod query_storage {\n             use super::*;\n \n-            $(pub type $name<$tcx> = query_storage!([$($modifiers)*][$($K)*, $V]);)*\n+            $(pub type $name<'tcx> = query_storage!([$($modifiers)*][$($K)*, $V]);)*\n         }\n         #[allow(nonstandard_style, unused_lifetimes)]\n         pub mod query_stored {\n             use super::*;\n \n-            $(pub type $name<$tcx> = <query_storage::$name<$tcx> as QueryStorage>::Stored;)*\n+            $(pub type $name<'tcx> = <query_storage::$name<'tcx> as QueryStorage>::Stored;)*\n         }\n \n         #[derive(Default)]\n-        pub struct QueryCaches<$tcx> {\n-            $($(#[$attr])* pub $name: query_storage::$name<$tcx>,)*\n+        pub struct QueryCaches<'tcx> {\n+            $($(#[$attr])* pub $name: query_storage::$name<'tcx>,)*\n         }\n \n-        impl<$tcx> TyCtxtEnsure<$tcx> {\n+        impl<'tcx> TyCtxtEnsure<'tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n@@ -231,20 +231,20 @@ macro_rules! define_callbacks {\n             })*\n         }\n \n-        impl<$tcx> TyCtxt<$tcx> {\n+        impl<'tcx> TyCtxt<'tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n             #[must_use]\n-            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<$tcx>\n+            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<'tcx>\n             {\n                 self.at(DUMMY_SP).$name(key)\n             })*\n         }\n \n-        impl<$tcx> TyCtxtAt<$tcx> {\n+        impl<'tcx> TyCtxtAt<'tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n-            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<$tcx>\n+            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<'tcx>\n             {\n                 let key = key.into_query_param();\n                 opt_remap_env_constness!([$($modifiers)*][key]);\n@@ -311,11 +311,11 @@ macro_rules! define_callbacks {\n             $($(#[$attr])*\n             fn $name(\n                 &'tcx self,\n-                tcx: TyCtxt<$tcx>,\n+                tcx: TyCtxt<'tcx>,\n                 span: Span,\n-                key: query_keys::$name<$tcx>,\n+                key: query_keys::$name<'tcx>,\n                 mode: QueryMode,\n-            ) -> Option<query_stored::$name<$tcx>>;)*\n+            ) -> Option<query_stored::$name<'tcx>>;)*\n         }\n     };\n }\n@@ -332,7 +332,7 @@ macro_rules! define_callbacks {\n // Queries marked with `fatal_cycle` do not need the latter implementation,\n // as they will raise an fatal error on query cycles instead.\n \n-rustc_query_append! { [define_callbacks!][<'tcx>] }\n+rustc_query_append! { [define_callbacks!] }\n \n mod sealed {\n     use super::{DefId, LocalDefId};"}, {"sha": "d8c85ab9faa8021ba340d4db0ce8dbcb3f19f3fb", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b53761969fa7954e4de4d6bb890addc23d668608/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53761969fa7954e4de4d6bb890addc23d668608/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=b53761969fa7954e4de4d6bb890addc23d668608", "patch": "@@ -55,7 +55,7 @@ fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n     }\n }\n \n-rustc_query_append! { [define_queries!][<'tcx>] }\n+rustc_query_append! { [define_queries!] }\n \n impl<'tcx> Queries<'tcx> {\n     // Force codegen in the dyn-trait transformation in this crate."}, {"sha": "cb54edb2952065c3182ac86a5d0dc423d61aad54", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 27, "deletions": 31, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/b53761969fa7954e4de4d6bb890addc23d668608/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53761969fa7954e4de4d6bb890addc23d668608/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=b53761969fa7954e4de4d6bb890addc23d668608", "patch": "@@ -234,11 +234,10 @@ macro_rules! get_provider {\n }\n \n macro_rules! define_queries {\n-    (<$tcx:tt>\n+    (\n      $($(#[$attr:meta])*\n         [$($modifiers:tt)*] fn $name:ident($($K:tt)*) -> $V:ty,)*) => {\n         define_queries_struct! {\n-            tcx: $tcx,\n             input: ($(([$($modifiers)*] [$($attr)*] [$name]))*)\n         }\n \n@@ -247,7 +246,7 @@ macro_rules! define_queries {\n \n             // Create an eponymous constructor for each query.\n             $(#[allow(nonstandard_style)] $(#[$attr])*\n-            pub fn $name<$tcx>(tcx: QueryCtxt<$tcx>, key: query_keys::$name<$tcx>) -> QueryStackFrame {\n+            pub fn $name<'tcx>(tcx: QueryCtxt<'tcx>, key: query_keys::$name<'tcx>) -> QueryStackFrame {\n                 let kind = dep_graph::DepKind::$name;\n                 let name = stringify!($name);\n                 // Disable visible paths printing for performance reasons.\n@@ -295,40 +294,40 @@ macro_rules! define_queries {\n         mod queries {\n             use std::marker::PhantomData;\n \n-            $(pub struct $name<$tcx> {\n-                data: PhantomData<&$tcx ()>\n+            $(pub struct $name<'tcx> {\n+                data: PhantomData<&'tcx ()>\n             })*\n         }\n \n-        $(impl<$tcx> QueryConfig for queries::$name<$tcx> {\n-            type Key = query_keys::$name<$tcx>;\n-            type Value = query_values::$name<$tcx>;\n-            type Stored = query_stored::$name<$tcx>;\n+        $(impl<'tcx> QueryConfig for queries::$name<'tcx> {\n+            type Key = query_keys::$name<'tcx>;\n+            type Value = query_values::$name<'tcx>;\n+            type Stored = query_stored::$name<'tcx>;\n             const NAME: &'static str = stringify!($name);\n         }\n \n-        impl<$tcx> QueryDescription<QueryCtxt<$tcx>> for queries::$name<$tcx> {\n-            rustc_query_description! { $name<$tcx> }\n+        impl<'tcx> QueryDescription<QueryCtxt<'tcx>> for queries::$name<'tcx> {\n+            rustc_query_description! { $name<'tcx> }\n \n-            type Cache = query_storage::$name<$tcx>;\n+            type Cache = query_storage::$name<'tcx>;\n \n             #[inline(always)]\n-            fn query_state<'a>(tcx: QueryCtxt<$tcx>) -> &'a QueryState<Self::Key>\n-                where QueryCtxt<$tcx>: 'a\n+            fn query_state<'a>(tcx: QueryCtxt<'tcx>) -> &'a QueryState<Self::Key>\n+                where QueryCtxt<'tcx>: 'a\n             {\n                 &tcx.queries.$name\n             }\n \n             #[inline(always)]\n-            fn query_cache<'a>(tcx: QueryCtxt<$tcx>) -> &'a Self::Cache\n+            fn query_cache<'a>(tcx: QueryCtxt<'tcx>) -> &'a Self::Cache\n                 where 'tcx:'a\n             {\n                 &tcx.query_caches.$name\n             }\n \n             #[inline]\n             fn make_vtable(tcx: QueryCtxt<'tcx>, key: &Self::Key) ->\n-                QueryVTable<QueryCtxt<$tcx>, Self::Key, Self::Value>\n+                QueryVTable<QueryCtxt<'tcx>, Self::Key, Self::Value>\n             {\n                 let compute = get_provider!([$($modifiers)*][tcx, $name, key]);\n                 let cache_on_disk = Self::cache_on_disk(tcx.tcx, key);\n@@ -465,28 +464,25 @@ macro_rules! define_queries {\n     }\n }\n \n-// FIXME(eddyb) this macro (and others?) use `$tcx` and `'tcx` interchangeably.\n-// We should either not take `$tcx` at all and use `'tcx` everywhere, or use\n-// `$tcx` everywhere (even if that isn't necessary due to lack of hygiene).\n macro_rules! define_queries_struct {\n-    (tcx: $tcx:tt,\n+    (\n      input: ($(([$($modifiers:tt)*] [$($attr:tt)*] [$name:ident]))*)) => {\n-        pub struct Queries<$tcx> {\n+        pub struct Queries<'tcx> {\n             local_providers: Box<Providers>,\n             extern_providers: Box<ExternProviders>,\n \n-            pub on_disk_cache: Option<OnDiskCache<$tcx>>,\n+            pub on_disk_cache: Option<OnDiskCache<'tcx>>,\n \n             jobs: AtomicU64,\n \n-            $($(#[$attr])*  $name: QueryState<query_keys::$name<$tcx>>,)*\n+            $($(#[$attr])*  $name: QueryState<query_keys::$name<'tcx>>,)*\n         }\n \n-        impl<$tcx> Queries<$tcx> {\n+        impl<'tcx> Queries<'tcx> {\n             pub fn new(\n                 local_providers: Providers,\n                 extern_providers: ExternProviders,\n-                on_disk_cache: Option<OnDiskCache<$tcx>>,\n+                on_disk_cache: Option<OnDiskCache<'tcx>>,\n             ) -> Self {\n                 Queries {\n                     local_providers: Box::new(local_providers),\n@@ -498,8 +494,8 @@ macro_rules! define_queries_struct {\n             }\n \n             pub(crate) fn try_collect_active_jobs(\n-                &$tcx self,\n-                tcx: TyCtxt<$tcx>,\n+                &'tcx self,\n+                tcx: TyCtxt<'tcx>,\n             ) -> Option<QueryMap> {\n                 let tcx = QueryCtxt { tcx, queries: self };\n                 let mut jobs = QueryMap::default();\n@@ -532,13 +528,13 @@ macro_rules! define_queries_struct {\n             #[tracing::instrument(level = \"trace\", skip(self, tcx))]\n             fn $name(\n                 &'tcx self,\n-                tcx: TyCtxt<$tcx>,\n+                tcx: TyCtxt<'tcx>,\n                 span: Span,\n-                key: query_keys::$name<$tcx>,\n+                key: query_keys::$name<'tcx>,\n                 mode: QueryMode,\n-            ) -> Option<query_stored::$name<$tcx>> {\n+            ) -> Option<query_stored::$name<'tcx>> {\n                 let qcx = QueryCtxt { tcx, queries: self };\n-                get_query::<queries::$name<$tcx>, _>(qcx, span, key, mode)\n+                get_query::<queries::$name<'tcx>, _>(qcx, span, key, mode)\n             })*\n         }\n     };"}, {"sha": "3458675094713c4ba1b84c696320e3d38899b8b8", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b53761969fa7954e4de4d6bb890addc23d668608/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b53761969fa7954e4de4d6bb890addc23d668608/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=b53761969fa7954e4de4d6bb890addc23d668608", "patch": "@@ -306,7 +306,7 @@ pub fn alloc_self_profile_query_strings(tcx: TyCtxt<'_>) {\n     let mut string_cache = QueryKeyStringCache::new();\n \n     macro_rules! alloc_once {\n-        (<$tcx:tt>\n+        (\n             $($(#[$attr:meta])* [$($modifiers:tt)*] fn $name:ident($K:ty) -> $V:ty,)*\n         ) => {\n             $({\n@@ -320,5 +320,5 @@ pub fn alloc_self_profile_query_strings(tcx: TyCtxt<'_>) {\n         }\n     }\n \n-    rustc_query_append! { [alloc_once!][<'tcx>] }\n+    rustc_query_append! { [alloc_once!] }\n }"}]}