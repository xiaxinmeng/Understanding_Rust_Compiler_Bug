{"sha": "6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NzliYjQ4NWM3ZmIzYWY0NzI3OGQ3ZWVlZmNlMzRlZWViNWVhZjg=", "commit": {"author": {"name": "Blitzerr", "email": "rusty.blitzerr@gmail.com", "date": "2018-11-15T05:14:46Z"}, "committer": {"name": "Blitzerr", "email": "rusty.blitzerr@gmail.com", "date": "2018-11-15T05:18:48Z"}, "message": "capture_disjoint_fields(rust-lang#53488)\nRefactoring out the HirId of the UpvarId in another struct.", "tree": {"sha": "a251c87c5b1c3f2b2c27d0d8aa6d9116b168faa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a251c87c5b1c3f2b2c27d0d8aa6d9116b168faa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "html_url": "https://github.com/rust-lang/rust/commit/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/comments", "author": {"login": "blitzerr", "id": 28721905, "node_id": "MDQ6VXNlcjI4NzIxOTA1", "avatar_url": "https://avatars.githubusercontent.com/u/28721905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blitzerr", "html_url": "https://github.com/blitzerr", "followers_url": "https://api.github.com/users/blitzerr/followers", "following_url": "https://api.github.com/users/blitzerr/following{/other_user}", "gists_url": "https://api.github.com/users/blitzerr/gists{/gist_id}", "starred_url": "https://api.github.com/users/blitzerr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blitzerr/subscriptions", "organizations_url": "https://api.github.com/users/blitzerr/orgs", "repos_url": "https://api.github.com/users/blitzerr/repos", "events_url": "https://api.github.com/users/blitzerr/events{/privacy}", "received_events_url": "https://api.github.com/users/blitzerr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blitzerr", "id": 28721905, "node_id": "MDQ6VXNlcjI4NzIxOTA1", "avatar_url": "https://avatars.githubusercontent.com/u/28721905?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blitzerr", "html_url": "https://github.com/blitzerr", "followers_url": "https://api.github.com/users/blitzerr/followers", "following_url": "https://api.github.com/users/blitzerr/following{/other_user}", "gists_url": "https://api.github.com/users/blitzerr/gists{/gist_id}", "starred_url": "https://api.github.com/users/blitzerr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blitzerr/subscriptions", "organizations_url": "https://api.github.com/users/blitzerr/orgs", "repos_url": "https://api.github.com/users/blitzerr/repos", "events_url": "https://api.github.com/users/blitzerr/events{/privacy}", "received_events_url": "https://api.github.com/users/blitzerr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ca505a30adb1d392d3166a34ec40b0bf584acf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca505a30adb1d392d3166a34ec40b0bf584acf9", "html_url": "https://github.com/rust-lang/rust/commit/1ca505a30adb1d392d3166a34ec40b0bf584acf9"}], "stats": {"total": 71, "additions": 41, "deletions": 30}, "files": [{"sha": "928a6accf2d12abdaedb4883f4a57b7e1b7eb6d4", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "patch": "@@ -216,7 +216,9 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for ty::adjustment::AutoBorrow\n     }\n }\n \n-impl_stable_hash_for!(struct ty::UpvarId { var_id, closure_expr_id });\n+impl_stable_hash_for!(struct ty::UpvarPath { hir_id });\n+\n+impl_stable_hash_for!(struct ty::UpvarId { var_path, closure_expr_id });\n \n impl_stable_hash_for!(enum ty::BorrowKind {\n     ImmBorrow,"}, {"sha": "59a490f4a013d9a6dc6dec97f74fcd682e149f44", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "patch": "@@ -1315,7 +1315,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 format!(\" for lifetime parameter `{}` in coherence check\", name)\n             }\n             infer::UpvarRegion(ref upvar_id, _) => {\n-                let var_node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_id);\n+                let var_node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_path.hir_id);\n                 let var_name = self.tcx.hir.name(var_node_id);\n                 format!(\" for capture of `{}` by closure\", var_name)\n             }"}, {"sha": "a539c321af3f0be79cc570f22a72bd560d171a84", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                               \"...so that reference does not outlive borrowed content\");\n             }\n             infer::ReborrowUpvar(span, ref upvar_id) => {\n-                let var_node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_id);\n+                let var_node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_path.hir_id);\n                 let var_name = self.tcx.hir.name(var_node_id);\n                 err.span_note(span,\n                               &format!(\"...so that closure can access `{}`\", var_name));\n@@ -174,7 +174,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 err\n             }\n             infer::ReborrowUpvar(span, ref upvar_id) => {\n-                let var_node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_id);\n+                let var_node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_path.hir_id);\n                 let var_name = self.tcx.hir.name(var_node_id);\n                 let mut err = struct_span_err!(self.tcx.sess,\n                                                span,"}, {"sha": "5b92bfe6ad3c48629a67600f4e5e45b91e84ff15", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "patch": "@@ -938,7 +938,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 let var_hir_id = self.tcx().hir.node_to_hir_id(freevar.var_id());\n                 let closure_def_id = self.tcx().hir.local_def_id(closure_expr.id);\n                 let upvar_id = ty::UpvarId {\n-                    var_id: var_hir_id,\n+                    var_path: ty::UpvarPath { hir_id: var_hir_id },\n                     closure_expr_id: closure_def_id.to_local(),\n                 };\n                 let upvar_capture = self.mc.tables.upvar_capture(upvar_id);"}, {"sha": "cadf0c42d228fe21575c5cf2dc5a68c8d95fce36", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "patch": "@@ -818,7 +818,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         let closure_expr_def_id = self.tcx.hir.local_def_id(fn_node_id);\n         let var_hir_id = self.tcx.hir.node_to_hir_id(var_id);\n         let upvar_id = ty::UpvarId {\n-            var_id: var_hir_id,\n+            var_path: ty::UpvarPath { hir_id: var_hir_id },\n             closure_expr_id: closure_expr_def_id.to_local(),\n         };\n "}, {"sha": "923d362c2345ff6a4fcdcdd163de411683463da4", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "patch": "@@ -789,7 +789,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n             pat_adjustments.hash_stable(hcx, hasher);\n             hash_stable_hashmap(hcx, hasher, upvar_capture_map, |up_var_id, hcx| {\n                 let ty::UpvarId {\n-                    var_id,\n+                    var_path,\n                     closure_expr_id\n                 } = *up_var_id;\n \n@@ -798,14 +798,14 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for TypeckTables<'gcx> {\n \n                 let var_owner_def_id = DefId {\n                     krate: local_id_root.krate,\n-                    index: var_id.owner,\n+                    index: var_path.hir_id.owner,\n                 };\n                 let closure_def_id = DefId {\n                     krate: local_id_root.krate,\n                     index: closure_expr_id.to_def_id().index,\n                 };\n                 (hcx.def_path_hash(var_owner_def_id),\n-                 var_id.local_id,\n+                 var_path.hir_id.local_id,\n                  hcx.def_path_hash(closure_def_id))\n             });\n "}, {"sha": "d1497c42af78f1c9337ca3f48a5e83fbc99ca44a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "patch": "@@ -731,12 +731,17 @@ impl<T> List<T> {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+pub struct UpvarPath {\n+    pub hir_id: hir::HirId,\n+}\n+\n /// Upvars do not get their own node-id. Instead, we use the pair of\n /// the original var id (that is, the root variable that is referenced\n /// by the upvar) and the id of the closure expression.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub struct UpvarId {\n-    pub var_id: hir::HirId,\n+    pub var_path: UpvarPath,\n     pub closure_expr_id: LocalDefId,\n }\n "}, {"sha": "d53370d242bd94c842e2bdc3557470e4aeb06453", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "patch": "@@ -678,8 +678,8 @@ impl<'tcx> fmt::Debug for ty::ClosureUpvar<'tcx> {\n impl fmt::Debug for ty::UpvarId {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"UpvarId({:?};`{}`;{:?})\",\n-               self.var_id,\n-               ty::tls::with(|tcx| tcx.hir.name(tcx.hir.hir_to_node_id(self.var_id))),\n+               self.var_path.hir_id,\n+               ty::tls::with(|tcx| tcx.hir.name(tcx.hir.hir_to_node_id(self.var_path.hir_id))),\n                self.closure_expr_id)\n     }\n }"}, {"sha": "21fb0cdf90ad12306cfa346806ec747c9f0cc725", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "patch": "@@ -453,8 +453,8 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n                     }\n                     None\n                 }\n-                LpUpvar(ty::UpvarId{ var_id, closure_expr_id: _ }) => {\n-                    self.bccx.used_mut_nodes.borrow_mut().insert(var_id);\n+                LpUpvar(ty::UpvarId{ var_path: ty::UpvarPath { hir_id }, closure_expr_id: _ }) => {\n+                    self.bccx.used_mut_nodes.borrow_mut().insert(hir_id);\n                     None\n                 }\n                 LpExtend(ref base, mc::McInherited, LpDeref(pointer_kind)) |"}, {"sha": "cfd530b7e3d0924bc346687df631c92b8d05f657", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "patch": "@@ -97,7 +97,7 @@ fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &[MoveErr\n             }\n         }\n         if let NoteClosureEnv(upvar_id) = error.move_from.note {\n-            let var_node_id = bccx.tcx.hir.hir_to_node_id(upvar_id.var_id);\n+            let var_node_id = bccx.tcx.hir.hir_to_node_id(upvar_id.var_path.hir_id);\n             err.span_label(bccx.tcx.hir.span(var_node_id),\n                            \"captured outer variable\");\n         }"}, {"sha": "d189460d088484af00d84dd6656a173266f5e39a", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "patch": "@@ -846,7 +846,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     MutabilityViolation => {\n                         let mut db = self.cannot_assign(error_span, &descr, Origin::Ast);\n                         if let mc::NoteClosureEnv(upvar_id) = err.cmt.note {\n-                            let node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_id);\n+                            let node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_path.hir_id);\n                             let sp = self.tcx.hir.span(node_id);\n                             let fn_closure_msg = \"`Fn` closures cannot capture their enclosing \\\n                                                   environment for modifications\";\n@@ -1415,7 +1415,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                       loan_path: &LoanPath<'tcx>,\n                                       out: &mut String) {\n         match loan_path.kind {\n-            LpUpvar(ty::UpvarId { var_id: id, closure_expr_id: _ }) => {\n+            LpUpvar(ty::UpvarId { var_path: ty::UpvarPath { hir_id: id}, closure_expr_id: _ }) => {\n                 out.push_str(&self.tcx.hir.name(self.tcx.hir.hir_to_node_id(id)).as_str());\n             }\n             LpVar(id) => {\n@@ -1533,7 +1533,7 @@ impl<'tcx> fmt::Debug for LoanPath<'tcx> {\n                 write!(f, \"$({})\", ty::tls::with(|tcx| tcx.hir.node_to_string(id)))\n             }\n \n-            LpUpvar(ty::UpvarId{ var_id, closure_expr_id }) => {\n+            LpUpvar(ty::UpvarId{ var_path: ty::UpvarPath {hir_id: var_id}, closure_expr_id }) => {\n                 let s = ty::tls::with(|tcx| {\n                     let var_node_id = tcx.hir.hir_to_node_id(var_id);\n                     tcx.hir.node_to_string(var_node_id)\n@@ -1568,9 +1568,9 @@ impl<'tcx> fmt::Display for LoanPath<'tcx> {\n                 write!(f, \"$({})\", ty::tls::with(|tcx| tcx.hir.node_to_user_string(id)))\n             }\n \n-            LpUpvar(ty::UpvarId{ var_id, closure_expr_id: _ }) => {\n+            LpUpvar(ty::UpvarId{ var_path: ty::UpvarPath { hir_id }, closure_expr_id: _ }) => {\n                 let s = ty::tls::with(|tcx| {\n-                    let var_node_id = tcx.hir.hir_to_node_id(var_id);\n+                    let var_node_id = tcx.hir.hir_to_node_id(hir_id);\n                     tcx.hir.node_to_string(var_node_id)\n                 });\n                 write!(f, \"$({} captured by closure)\", s)"}, {"sha": "94d1874e9c9e8c24bd859ab7ac9a6be35c2d301d", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "patch": "@@ -612,7 +612,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n             let var_hir_id = tcx.hir.node_to_hir_id(var_id);\n             let closure_expr_id = tcx.hir.local_def_id(fn_id);\n             let capture = hir.tables().upvar_capture(ty::UpvarId {\n-                var_id: var_hir_id,\n+                var_path: ty::UpvarPath {hir_id: var_hir_id},\n                 closure_expr_id: LocalDefId::from_def_id(closure_expr_id),\n             });\n             let by_ref = match capture {"}, {"sha": "2e9edf20c5708f3e2dc966fd2d04a10f9d1fa44d", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "patch": "@@ -1061,7 +1061,7 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             // ...but the upvar might be an `&T` or `&mut T` capture, at which\n             // point we need an implicit deref\n             let upvar_id = ty::UpvarId {\n-                var_id: var_hir_id,\n+                var_path: ty::UpvarPath {hir_id: var_hir_id},\n                 closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n             };\n             match cx.tables().upvar_capture(upvar_id) {\n@@ -1178,7 +1178,7 @@ fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                    -> ExprRef<'tcx> {\n     let var_hir_id = cx.tcx.hir.node_to_hir_id(freevar.var_id());\n     let upvar_id = ty::UpvarId {\n-        var_id: var_hir_id,\n+        var_path: ty::UpvarPath { hir_id: var_hir_id },\n         closure_expr_id: cx.tcx.hir.local_def_id(closure_expr.id).to_local(),\n     };\n     let upvar_capture = cx.tables().upvar_capture(upvar_id);"}, {"sha": "312ce402775d226759853d2c424ace38fe65a373", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "patch": "@@ -134,7 +134,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.tcx.with_freevars(closure_node_id, |freevars| {\n             for freevar in freevars {\n                 let upvar_id = ty::UpvarId {\n-                    var_id: self.tcx.hir.node_to_hir_id(freevar.var_id()),\n+                    var_path: ty::UpvarPath {\n+                        hir_id : self.tcx.hir.node_to_hir_id(freevar.var_id()),\n+                    },\n                     closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n                 };\n                 debug!(\"seed upvar_id {:?}\", upvar_id);\n@@ -248,7 +250,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     let var_hir_id = tcx.hir.node_to_hir_id(var_node_id);\n                     let freevar_ty = self.node_ty(var_hir_id);\n                     let upvar_id = ty::UpvarId {\n-                        var_id: var_hir_id,\n+                        var_path: ty::UpvarPath {\n+                            hir_id: var_hir_id,\n+                        },\n                         closure_expr_id: LocalDefId::from_def_id(closure_def_index),\n                     };\n                     let capture = self.tables.borrow().upvar_capture(upvar_id);\n@@ -347,7 +351,7 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n                         upvar_id.closure_expr_id,\n                         ty::ClosureKind::FnOnce,\n                         guarantor.span,\n-                        var_name(tcx, upvar_id.var_id),\n+                        var_name(tcx, upvar_id.var_path.hir_id),\n                     );\n \n                     self.adjust_upvar_captures\n@@ -364,7 +368,7 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n                         upvar_id.closure_expr_id,\n                         ty::ClosureKind::FnOnce,\n                         guarantor.span,\n-                        var_name(tcx, upvar_id.var_id),\n+                        var_name(tcx, upvar_id.var_path.hir_id),\n                     );\n                 }\n                 mc::NoteIndex | mc::NoteNone => {}\n@@ -465,7 +469,7 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n                     upvar_id.closure_expr_id,\n                     ty::ClosureKind::FnMut,\n                     cmt.span,\n-                    var_name(tcx, upvar_id.var_id),\n+                    var_name(tcx, upvar_id.var_path.hir_id),\n                 );\n \n                 true\n@@ -478,7 +482,7 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n                     upvar_id.closure_expr_id,\n                     ty::ClosureKind::FnMut,\n                     cmt.span,\n-                    var_name(tcx, upvar_id.var_id),\n+                    var_name(tcx, upvar_id.var_path.hir_id),\n                 );\n \n                 true"}, {"sha": "4460d5f64ce26283e7d93e99dd29622b8a7fa941", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6779bb485c7fb3af47278d7eeefce34eeeb5eaf8/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=6779bb485c7fb3af47278d7eeefce34eeeb5eaf8", "patch": "@@ -306,7 +306,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                 ty::UpvarCapture::ByValue => ty::UpvarCapture::ByValue,\n                 ty::UpvarCapture::ByRef(ref upvar_borrow) => {\n                     let r = upvar_borrow.region;\n-                    let r = self.resolve(&r, &upvar_id.var_id);\n+                    let r = self.resolve(&r, &upvar_id.var_path.hir_id);\n                     ty::UpvarCapture::ByRef(ty::UpvarBorrow {\n                         kind: upvar_borrow.kind,\n                         region: r,"}]}