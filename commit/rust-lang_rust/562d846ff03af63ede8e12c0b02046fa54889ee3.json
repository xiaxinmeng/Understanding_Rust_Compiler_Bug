{"sha": "562d846ff03af63ede8e12c0b02046fa54889ee3", "node_id": "C_kwDOAAsO6NoAKDU2MmQ4NDZmZjAzYWY2M2VkZThlMTJjMGIwMjA0NmZhNTQ4ODllZTM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-19T12:10:26Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-20T13:42:07Z"}, "message": "Make it easier to debug where a region error was created", "tree": {"sha": "47eaea0db162dd945793124c0965dcf250787f07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47eaea0db162dd945793124c0965dcf250787f07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/562d846ff03af63ede8e12c0b02046fa54889ee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/562d846ff03af63ede8e12c0b02046fa54889ee3", "html_url": "https://github.com/rust-lang/rust/commit/562d846ff03af63ede8e12c0b02046fa54889ee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/562d846ff03af63ede8e12c0b02046fa54889ee3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b5a96ec45886bc42090fe313150e648e488eee1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b5a96ec45886bc42090fe313150e648e488eee1", "html_url": "https://github.com/rust-lang/rust/commit/8b5a96ec45886bc42090fe313150e648e488eee1"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "500ce9038bbb9f79c02245b03fe38bf74db1c2d4", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/562d846ff03af63ede8e12c0b02046fa54889ee3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562d846ff03af63ede8e12c0b02046fa54889ee3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=562d846ff03af63ede8e12c0b02046fa54889ee3", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::ty::Region;\n use rustc_middle::ty::TypeVisitor;\n use rustc_middle::ty::{self, RegionVid, Ty};\n use rustc_span::symbol::{kw, Ident};\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n \n use crate::borrowck_errors;\n use crate::session_diagnostics::{\n@@ -70,7 +70,23 @@ impl<'tcx> ConstraintDescription for ConstraintCategory<'tcx> {\n ///\n /// Usually we expect this to either be empty or contain a small number of items, so we can avoid\n /// allocation most of the time.\n-pub(crate) type RegionErrors<'tcx> = Vec<RegionErrorKind<'tcx>>;\n+#[derive(Default)]\n+pub(crate) struct RegionErrors<'tcx>(Vec<RegionErrorKind<'tcx>>);\n+\n+impl<'tcx> RegionErrors<'tcx> {\n+    #[track_caller]\n+    pub fn push(&mut self, val: impl Into<RegionErrorKind<'tcx>>) {\n+        let val = val.into();\n+        ty::tls::with(|tcx| tcx.sess.delay_span_bug(DUMMY_SP, \"{val:?}\"));\n+        self.0.push(val);\n+    }\n+    pub fn is_empty(&self) -> bool {\n+        self.0.is_empty()\n+    }\n+    pub fn into_iter(self) -> impl Iterator<Item = RegionErrorKind<'tcx>> {\n+        self.0.into_iter()\n+    }\n+}\n \n #[derive(Clone, Debug)]\n pub(crate) enum RegionErrorKind<'tcx> {"}, {"sha": "7ccc3cc2896373e96b84ab8cc71d642a40d64219", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/562d846ff03af63ede8e12c0b02046fa54889ee3/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/562d846ff03af63ede8e12c0b02046fa54889ee3/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=562d846ff03af63ede8e12c0b02046fa54889ee3", "patch": "@@ -562,7 +562,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let mir_def_id = body.source.def_id();\n         self.propagate_constraints(body);\n \n-        let mut errors_buffer = RegionErrors::new();\n+        let mut errors_buffer = RegionErrors::default();\n \n         // If this is a closure, we can propagate unsatisfied\n         // `outlives_requirements` to our creator, so create a vector"}]}