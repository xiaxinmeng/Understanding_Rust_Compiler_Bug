{"sha": "0eabbf84babbf9302285a4cb2ea54a9d67f13945", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYWJiZjg0YmFiYmY5MzAyMjg1YTRjYjJlYTU0YTlkNjdmMTM5NDU=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-07-29T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-07-29T11:30:40Z"}, "message": "Implement `Printer` for `&mut SymbolMangler`\n\nto avoid passing the symbol mangler by value.", "tree": {"sha": "c88a33ae27868a0c6d69a9c3d82e9a566c2488c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c88a33ae27868a0c6d69a9c3d82e9a566c2488c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0eabbf84babbf9302285a4cb2ea54a9d67f13945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0eabbf84babbf9302285a4cb2ea54a9d67f13945", "html_url": "https://github.com/rust-lang/rust/commit/0eabbf84babbf9302285a4cb2ea54a9d67f13945", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0eabbf84babbf9302285a4cb2ea54a9d67f13945/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ce8001a473e049a74f424d765b90f83f5dc76c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce8001a473e049a74f424d765b90f83f5dc76c4", "html_url": "https://github.com/rust-lang/rust/commit/0ce8001a473e049a74f424d765b90f83f5dc76c4"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "c4c1ec8ce4e0a2ca109d6aa669dc4802a9dec415", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0eabbf84babbf9302285a4cb2ea54a9d67f13945/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eabbf84babbf9302285a4cb2ea54a9d67f13945/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=0eabbf84babbf9302285a4cb2ea54a9d67f13945", "patch": "@@ -23,7 +23,7 @@ pub(super) fn mangle(\n     let substs = tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), instance.substs);\n \n     let prefix = \"_R\";\n-    let mut cx = SymbolMangler {\n+    let mut cx = &mut SymbolMangler {\n         tcx,\n         start_offset: prefix.len(),\n         paths: FxHashMap::default(),\n@@ -49,7 +49,7 @@ pub(super) fn mangle(\n     if let Some(instantiating_crate) = instantiating_crate {\n         cx = cx.print_def_path(instantiating_crate.as_def_id(), &[]).unwrap();\n     }\n-    cx.out\n+    std::mem::take(&mut cx.out)\n }\n \n struct BinderLevel {\n@@ -153,13 +153,13 @@ impl SymbolMangler<'tcx> {\n         self.push(ident);\n     }\n \n-    fn path_append_ns(\n-        mut self,\n-        print_prefix: impl FnOnce(Self) -> Result<Self, !>,\n+    fn path_append_ns<'a>(\n+        mut self: &'a mut Self,\n+        print_prefix: impl FnOnce(&'a mut Self) -> Result<&'a mut Self, !>,\n         ns: char,\n         disambiguator: u64,\n         name: &str,\n-    ) -> Result<Self, !> {\n+    ) -> Result<&'a mut Self, !> {\n         self.push(\"N\");\n         self.out.push(ns);\n         self = print_prefix(self)?;\n@@ -168,17 +168,17 @@ impl SymbolMangler<'tcx> {\n         Ok(self)\n     }\n \n-    fn print_backref(mut self, i: usize) -> Result<Self, !> {\n+    fn print_backref(&mut self, i: usize) -> Result<&mut Self, !> {\n         self.push(\"B\");\n         self.push_integer_62((i - self.start_offset) as u64);\n         Ok(self)\n     }\n \n-    fn in_binder<T>(\n-        mut self,\n+    fn in_binder<'a, T>(\n+        mut self: &'a mut Self,\n         value: &ty::Binder<'tcx, T>,\n-        print_value: impl FnOnce(Self, &T) -> Result<Self, !>,\n-    ) -> Result<Self, !>\n+        print_value: impl FnOnce(&'a mut Self, &T) -> Result<&'a mut Self, !>,\n+    ) -> Result<&'a mut Self, !>\n     where\n         T: TypeFoldable<'tcx>,\n     {\n@@ -211,7 +211,7 @@ impl SymbolMangler<'tcx> {\n     }\n }\n \n-impl Printer<'tcx> for SymbolMangler<'tcx> {\n+impl Printer<'tcx> for &mut SymbolMangler<'tcx> {\n     type Error = !;\n \n     type Path = Self;\n@@ -303,7 +303,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         Ok(self)\n     }\n \n-    fn print_region(mut self, region: ty::Region<'_>) -> Result<Self::Region, Self::Error> {\n+    fn print_region(self, region: ty::Region<'_>) -> Result<Self::Region, Self::Error> {\n         let i = match *region {\n             // Erased lifetimes use the index 0, for a\n             // shorter mangling of `L_`.\n@@ -577,7 +577,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         Ok(self)\n     }\n \n-    fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n+    fn path_crate(self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {\n         self.push(\"C\");\n         let stable_crate_id = self.tcx.def_path_hash(cnum.as_def_id()).stable_crate_id();\n         self.push_disambiguator(stable_crate_id.to_u64());"}]}