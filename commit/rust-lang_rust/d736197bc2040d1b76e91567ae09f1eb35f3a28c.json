{"sha": "d736197bc2040d1b76e91567ae09f1eb35f3a28c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MzYxOTdiYzIwNDBkMWI3NmU5MTU2N2FlMDlmMWViMzVmM2EyOGM=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-03T15:09:24Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-25T14:47:35Z"}, "message": "Explain the `Reveal::UserFacing` deduplication trick", "tree": {"sha": "afe156dc6f0def0ae4504f606e67dda97dc8a5db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afe156dc6f0def0ae4504f606e67dda97dc8a5db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d736197bc2040d1b76e91567ae09f1eb35f3a28c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d736197bc2040d1b76e91567ae09f1eb35f3a28c", "html_url": "https://github.com/rust-lang/rust/commit/d736197bc2040d1b76e91567ae09f1eb35f3a28c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d736197bc2040d1b76e91567ae09f1eb35f3a28c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4ee38ede3d6a3418103336cecdb8bd08db8e5ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4ee38ede3d6a3418103336cecdb8bd08db8e5ab", "html_url": "https://github.com/rust-lang/rust/commit/b4ee38ede3d6a3418103336cecdb8bd08db8e5ab"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "f105df304f459b741cee54472dd060c1d194e111", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d736197bc2040d1b76e91567ae09f1eb35f3a28c/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d736197bc2040d1b76e91567ae09f1eb35f3a28c/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=d736197bc2040d1b76e91567ae09f1eb35f3a28c", "patch": "@@ -577,6 +577,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n+    // see comment in const_eval_provider for what we're doing here\n     if key.param_env.reveal == Reveal::All {\n         let mut key = key.clone();\n         key.param_env.reveal = Reveal::UserFacing;\n@@ -596,6 +597,12 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n+    // so we do a small trick here. We check whether we can evaluate the constant in the more\n+    // restrictive `Reveal::UserFacing`, which most likely already was computed. In a large\n+    // percentage of constants that will already have succeeded. Only associated constants of\n+    // generic functions will fail due to not enough monomorphization information being available\n+\n+    // in case we fail in the `UserFacing` variant, we just do the real computation.\n     if key.param_env.reveal == Reveal::All {\n         let mut key = key.clone();\n         key.param_env.reveal = Reveal::UserFacing;"}]}