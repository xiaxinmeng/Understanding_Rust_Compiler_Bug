{"sha": "a50d72158e08e02cfc051b863017bdbd2c45b637", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MGQ3MjE1OGUwOGUwMmNmYzA1MWI4NjMwMTdiZGJkMmM0NWI2Mzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-08T07:04:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-08T07:04:31Z"}, "message": "Auto merge of #86127 - JohnTitor:rollup-0c6mp3j, r=JohnTitor\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #85906 (Use `Iterator::find` instead of open-coding it)\n - #85951 (Update the documentation of `-C force-unwind-tables` for #83482)\n - #85985 (Clarify documentation of slice sorting methods)\n - #85989 (Remove rustfmt tests from top-level .gitattributes)\n - #86074 (Default panic message should print Box<dyn Any>)\n - #86078 (Type page font weight)\n - #86090 (:arrow_up: rust-analyzer)\n - #86095 (Search description codeblock)\n - #86096 (Comment out unused error codes and add description for E0316)\n - #86101 (Correct type signature in doc for Bound::as_mut)\n - #86103 (Remove lifetime hack)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7e70a9f57f6ed1d517bbac8c76e324770ac8d2c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e70a9f57f6ed1d517bbac8c76e324770ac8d2c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a50d72158e08e02cfc051b863017bdbd2c45b637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a50d72158e08e02cfc051b863017bdbd2c45b637", "html_url": "https://github.com/rust-lang/rust/commit/a50d72158e08e02cfc051b863017bdbd2c45b637", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a50d72158e08e02cfc051b863017bdbd2c45b637/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "376ec9487eb6fe10068c49a3a74b1b1ff12c4c79", "url": "https://api.github.com/repos/rust-lang/rust/commits/376ec9487eb6fe10068c49a3a74b1b1ff12c4c79", "html_url": "https://github.com/rust-lang/rust/commit/376ec9487eb6fe10068c49a3a74b1b1ff12c4c79"}, {"sha": "b7fadfddcbc7f7805bb2375bf3f2c61569a3ff71", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7fadfddcbc7f7805bb2375bf3f2c61569a3ff71", "html_url": "https://github.com/rust-lang/rust/commit/b7fadfddcbc7f7805bb2375bf3f2c61569a3ff71"}], "stats": {"total": 148, "additions": 88, "deletions": 60}, "files": [{"sha": "51a670b5fbefdaf7904f1d304ea482b0543bc9a9", "filename": ".gitattributes", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitattributes?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -16,11 +16,3 @@ config.toml.example linguist-language=TOML\n *.ico binary\n *.woff binary\n *.woff2 binary\n-\n-# Needed as part of converting rustfmt to a subtree, can hopefully be removed later.\n-src/tools/rustfmt/tests/source/issue-3494/crlf.rs -text\n-src/tools/rustfmt/tests/source/comment_crlf_newline.rs -text\n-src/tools/rustfmt/tests/source/configs/enum_discrim_align_threshold/40.rs -text\n-src/tools/rustfmt/tests/target/issue-3494/crlf.rs -text\n-src/tools/rustfmt/tests/target/comment_crlf_newline.rs -text\n-src/tools/rustfmt/tests/target/configs/enum_discrim_align_threshold/40.rs -text"}, {"sha": "f10efd832361c252715a628de77127f7f4dae5b7", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -157,6 +157,7 @@ E0308: include_str!(\"./error_codes/E0308.md\"),\n E0309: include_str!(\"./error_codes/E0309.md\"),\n E0310: include_str!(\"./error_codes/E0310.md\"),\n E0312: include_str!(\"./error_codes/E0312.md\"),\n+E0316: include_str!(\"./error_codes/E0316.md\"),\n E0317: include_str!(\"./error_codes/E0317.md\"),\n E0321: include_str!(\"./error_codes/E0321.md\"),\n E0322: include_str!(\"./error_codes/E0322.md\"),\n@@ -553,9 +554,8 @@ E0783: include_str!(\"./error_codes/E0783.md\"),\n     E0311, // thing may not live long enough\n     E0313, // lifetime of borrowed pointer outlives lifetime of captured\n            // variable\n-    E0314, // closure outlives stack frame\n-    E0315, // cannot invoke closure outside of its lifetime\n-    E0316, // nested quantification of lifetimes\n+//  E0314, // closure outlives stack frame\n+//  E0315, // cannot invoke closure outside of its lifetime\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums\n     E0320, // recursive overflow during dropck\n //  E0372, // coherence not object safe\n@@ -584,21 +584,21 @@ E0783: include_str!(\"./error_codes/E0783.md\"),\n //  E0470, removed\n //  E0471, // constant evaluation error (in pattern)\n     E0472, // llvm_asm! is unsupported on this target\n-    E0473, // dereference of reference outside its lifetime\n-    E0474, // captured variable `..` does not outlive the enclosing closure\n-    E0475, // index of slice outside its lifetime\n+//  E0473, // dereference of reference outside its lifetime\n+//  E0474, // captured variable `..` does not outlive the enclosing closure\n+//  E0475, // index of slice outside its lifetime\n     E0476, // lifetime of the source pointer does not outlive lifetime bound...\n-    E0479, // the type `..` (provided as the value of a type parameter) is...\n-    E0480, // lifetime of method receiver does not outlive the method call\n-    E0481, // lifetime of function argument does not outlive the function call\n+//  E0479, // the type `..` (provided as the value of a type parameter) is...\n+//  E0480, // lifetime of method receiver does not outlive the method call\n+//  E0481, // lifetime of function argument does not outlive the function call\n     E0482, // lifetime of return value does not outlive the function call\n-    E0483, // lifetime of operand does not outlive the operation\n-    E0484, // reference is not valid at the time of borrow\n-    E0485, // automatically reference is not valid at the time of borrow\n-    E0486, // type of expression contains references that are not valid during..\n-    E0487, // unsafe use of destructor: destructor might be called while...\n-    E0488, // lifetime of variable does not enclose its declaration\n-    E0489, // type/lifetime parameter not in scope here\n+//  E0483, // lifetime of operand does not outlive the operation\n+//  E0484, // reference is not valid at the time of borrow\n+//  E0485, // automatically reference is not valid at the time of borrow\n+//  E0486, // type of expression contains references that are not valid during..\n+//  E0487, // unsafe use of destructor: destructor might be called while...\n+//  E0488, // lifetime of variable does not enclose its declaration\n+//  E0489, // type/lifetime parameter not in scope here\n     E0490, // a value of type `..` is borrowed for too long\n     E0498,  // malformed plugin attribute\n     E0514, // metadata version mismatch"}, {"sha": "4368c321737b2b0ea0349ad05824334741deaefb", "filename": "compiler/rustc_error_codes/src/error_codes/E0316.md", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0316.md", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0316.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0316.md?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -0,0 +1,32 @@\n+A `where` clause contains a nested quantification over lifetimes.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0316\n+trait Tr<'a, 'b> {}\n+\n+fn foo<T>(t: T)\n+where\n+    for<'a> &'a T: for<'b> Tr<'a, 'b>, // error: nested quantification\n+{\n+}\n+```\n+\n+Rust syntax allows lifetime quantifications in two places within\n+`where` clauses: Quantifying over the trait bound only (as in\n+`Ty: for<'l> Trait<'l>`) and quantifying over the whole clause\n+(as in `for<'l> &'l Ty: Trait<'l>`). Using both in the same clause\n+leads to a nested lifetime quantification, which is not supported.\n+\n+The following example compiles, because the clause with the nested\n+quantification has been rewritten to use only one `for<>`:\n+\n+```\n+trait Tr<'a, 'b> {}\n+\n+fn foo<T>(t: T)\n+where\n+    for<'a, 'b> &'a T: Tr<'a, 'b>, // ok\n+{\n+}\n+```"}, {"sha": "a3a87a48768dcde44bfa80ff9e1dc482229a38bb", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -679,16 +679,11 @@ pub fn transparent_newtype_field<'a, 'tcx>(\n     variant: &'a ty::VariantDef,\n ) -> Option<&'a ty::FieldDef> {\n     let param_env = tcx.param_env(variant.def_id);\n-    for field in &variant.fields {\n+    variant.fields.iter().find(|field| {\n         let field_ty = tcx.type_of(field.did);\n         let is_zst = tcx.layout_of(param_env.and(field_ty)).map_or(false, |layout| layout.is_zst());\n-\n-        if !is_zst {\n-            return Some(field);\n-        }\n-    }\n-\n-    None\n+        !is_zst\n+    })\n }\n \n /// Is type known to be non-null?"}, {"sha": "ca7cdc4caf5053d1841358129e3c4cae446601e0", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -1841,14 +1841,6 @@ fn object_lifetime_defaults_for_item(\n }\n \n impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n-    // FIXME(#37666) this works around a limitation in the region inferencer\n-    fn hack<F>(&mut self, f: F)\n-    where\n-        F: for<'b> FnOnce(&mut LifetimeContext<'b, 'tcx>),\n-    {\n-        f(self)\n-    }\n-\n     fn with<F>(&mut self, wrap_scope: Scope<'_>, f: F)\n     where\n         F: for<'b> FnOnce(ScopeRef<'_>, &mut LifetimeContext<'b, 'tcx>),\n@@ -2252,7 +2244,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         };\n         self.with(scope, move |old_scope, this| {\n             this.check_lifetime_params(old_scope, &generics.params);\n-            this.hack(walk); // FIXME(#37666) workaround in place of `walk(this)`\n+            walk(this);\n         });\n     }\n "}, {"sha": "bb948376bc7c7715d005f05a7add1f6dd26e7732", "filename": "library/core/src/ops/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/library%2Fcore%2Fsrc%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Frange.rs?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -686,7 +686,7 @@ impl<T> Bound<T> {\n         }\n     }\n \n-    /// Converts from `&mut Bound<T>` to `Bound<&T>`.\n+    /// Converts from `&mut Bound<T>` to `Bound<&mut T>`.\n     #[inline]\n     #[unstable(feature = \"bound_as_ref\", issue = \"80996\")]\n     pub fn as_mut(&mut self) -> Bound<&mut T> {"}, {"sha": "0e5c5ee726e54f4ca07d734a330cd95653287a6d", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -2100,9 +2100,11 @@ impl<T> [T] {\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n-    /// one of the matches could be returned. If the value is not found then\n-    /// [`Result::Err`] is returned, containing the index where a matching\n-    /// element could be inserted while maintaining sorted order.\n+    /// one of the matches could be returned. The index is chosen\n+    /// deterministically, but is subject to change in future versions of Rust.\n+    /// If the value is not found then [`Result::Err`] is returned, containing\n+    /// the index where a matching element could be inserted while maintaining\n+    /// sorted order.\n     ///\n     /// See also [`binary_search_by`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n@@ -2153,9 +2155,11 @@ impl<T> [T] {\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n-    /// one of the matches could be returned. If the value is not found then\n-    /// [`Result::Err`] is returned, containing the index where a matching\n-    /// element could be inserted while maintaining sorted order.\n+    /// one of the matches could be returned. The index is chosen\n+    /// deterministically, but is subject to change in future versions of Rust.\n+    /// If the value is not found then [`Result::Err`] is returned, containing\n+    /// the index where a matching element could be inserted while maintaining\n+    /// sorted order.\n     ///\n     /// See also [`binary_search`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n@@ -2224,9 +2228,11 @@ impl<T> [T] {\n     ///\n     /// If the value is found then [`Result::Ok`] is returned, containing the\n     /// index of the matching element. If there are multiple matches, then any\n-    /// one of the matches could be returned. If the value is not found then\n-    /// [`Result::Err`] is returned, containing the index where a matching\n-    /// element could be inserted while maintaining sorted order.\n+    /// one of the matches could be returned. The index is chosen\n+    /// deterministically, but is subject to change in future versions of Rust.\n+    /// If the value is not found then [`Result::Err`] is returned, containing\n+    /// the index where a matching element could be inserted while maintaining\n+    /// sorted order.\n     ///\n     /// See also [`binary_search`], [`binary_search_by`], and [`partition_point`].\n     ///"}, {"sha": "e591e073e7bbb57b95831769bd4008cdbdde4678", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -193,7 +193,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n         Some(s) => *s,\n         None => match info.payload().downcast_ref::<String>() {\n             Some(s) => &s[..],\n-            None => \"Box<Any>\",\n+            None => \"Box<dyn Any>\",\n         },\n     };\n     let thread = thread_info::current_thread();"}, {"sha": "05384117ac17567ffae5a9737e2d47fedb63de5f", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -149,8 +149,7 @@ values:\n \n * `y`, `yes`, `on`, or no value: Unwind tables are forced to be generated.\n * `n`, `no`, or `off`: Unwind tables are not forced to be generated. If unwind\n-  tables are required by the target or `-C panic=unwind`, an error will be\n-  emitted.\n+  tables are required by the target an error will be emitted.\n \n The default if not specified depends on the target.\n "}, {"sha": "d8684641a3045346302e487926108bfa09edec66", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -138,7 +138,7 @@ h2, h3, h4 {\n \tborder-bottom: 1px solid;\n }\n .impl, .method,\n-.type, .associatedconstant,\n+.type:not(.container-rustdoc), .associatedconstant,\n .associatedtype {\n \tflex-basis: 100%;\n \tfont-weight: 600;"}, {"sha": "35be246b5bf2e52b40a501750c4ba70922a7f2aa", "filename": "src/librustdoc/html/static/search.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsearch.js?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -1024,7 +1024,7 @@ window.initSearch = function(rawSearchIndex) {\n                 var description = document.createElement(\"div\");\n                 description.className = \"desc\";\n                 var spanDesc = document.createElement(\"span\");\n-                spanDesc.innerText = item.desc + \"\\u00A0\";\n+                spanDesc.insertAdjacentHTML(\"beforeend\", item.desc);\n \n                 description.appendChild(spanDesc);\n                 wrapper.appendChild(description);"}, {"sha": "a50d03cf4891248c607b3a906426b08a3195e525", "filename": "src/test/rustdoc-gui/search-result-description.goml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Ftest%2Frustdoc-gui%2Fsearch-result-description.goml", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Ftest%2Frustdoc-gui%2Fsearch-result-description.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-description.goml?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -0,0 +1,5 @@\n+// This test is to ensure that the codeblocks are correctly rendered in the search results.\n+goto: file://|DOC_PATH|/test_docs/index.html?search=some_more_function\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert: (\".search-results .desc code\", \"format!\")"}, {"sha": "7703677154ef9c6b7d5ab92b64d04cdd41c76aaa", "filename": "src/test/rustdoc-gui/sidebar.goml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar.goml?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -11,7 +11,8 @@ assert: (\".sidebar-elems > .items > ul > li:nth-child(2)\", \"Structs\")\n assert: (\".sidebar-elems > .items > ul > li:nth-child(3)\", \"Enums\")\n assert: (\".sidebar-elems > .items > ul > li:nth-child(4)\", \"Traits\")\n assert: (\".sidebar-elems > .items > ul > li:nth-child(5)\", \"Functions\")\n-assert: (\".sidebar-elems > .items > ul > li:nth-child(6)\", \"Keywords\")\n+assert: (\".sidebar-elems > .items > ul > li:nth-child(6)\", \"Type Definitions\")\n+assert: (\".sidebar-elems > .items > ul > li:nth-child(7)\", \"Keywords\")\n assert: (\"#structs + table td > a\", \"Foo\")\n click: \"#structs + table td > a\"\n "}, {"sha": "5141b6d1920eaeaee6c25c1946fd5b34b741a850", "filename": "src/test/rustdoc-gui/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib.rs?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -96,3 +96,6 @@ pub enum AnEnum {\n \n #[doc(keyword = \"CookieMonster\")]\n pub mod keyword {}\n+\n+/// Just some type alias.\n+pub type SomeType = u32;"}, {"sha": "8b6518e7f317afe0d42e276a965fd6e64573b8df", "filename": "src/test/rustdoc-gui/type-weight.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Ftest%2Frustdoc-gui%2Ftype-weight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Ftest%2Frustdoc-gui%2Ftype-weight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftype-weight.rs?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -0,0 +1,2 @@\n+goto: file://|DOC_PATH|/test_docs/type.SomeType.html\n+assert-all: (\".top-block .docblock p\", {\"font-weight\": \"400\"})"}, {"sha": "100ac10c76717937d0b91bf46369ae583d1a32e4", "filename": "src/test/ui/panics/panic-macro-any-wrapped.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -1,5 +1,5 @@\n // run-fail\n-// error-pattern:panicked at 'Box<Any>'\n+// error-pattern:panicked at 'Box<dyn Any>'\n // ignore-emscripten no processes\n \n #![allow(non_fmt_panic)]"}, {"sha": "a5ba30220e89a2296e6fc47770297751c21057e7", "filename": "src/test/ui/panics/panic-macro-any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -1,5 +1,5 @@\n // run-fail\n-// error-pattern:panicked at 'Box<Any>'\n+// error-pattern:panicked at 'Box<dyn Any>'\n // ignore-emscripten no processes\n \n #![feature(box_syntax)]"}, {"sha": "d06afc1e42376e4f9d274ae5f07b95a000f0d198", "filename": "src/test/ui/where-clauses/where-for-self.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a50d72158e08e02cfc051b863017bdbd2c45b637/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fwhere-for-self.stderr?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -6,3 +6,4 @@ LL |     where for<'a> &'a T: for<'b> Bar<'b>\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0316`."}, {"sha": "13da28cc2bc1b59f7af817eca36927a71edb023c", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=a50d72158e08e02cfc051b863017bdbd2c45b637", "patch": "@@ -1 +1 @@\n-Subproject commit f4383981249d3f2964f2c667f3349f8ff15b77c4\n+Subproject commit 13da28cc2bc1b59f7af817eca36927a71edb023c"}]}