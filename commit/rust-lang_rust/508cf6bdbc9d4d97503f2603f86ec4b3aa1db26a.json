{"sha": "508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a", "node_id": "C_kwDOAAsO6NoAKDUwOGNmNmJkYmM5ZDRkOTc1MDNmMjYwM2Y4NmVjNGIzYWExZGIyNmE", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-05T23:57:58Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-19T14:32:16Z"}, "message": "Move `MutMutexLock` into `Methods` lint pass", "tree": {"sha": "1c13a387057a8a67f89f027a1342253996dc98bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c13a387057a8a67f89f027a1342253996dc98bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a", "html_url": "https://github.com/rust-lang/rust/commit/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f0ed0a0b1fa7928464b95e0cfd0883699cb9c33", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f0ed0a0b1fa7928464b95e0cfd0883699cb9c33", "html_url": "https://github.com/rust-lang/rust/commit/2f0ed0a0b1fa7928464b95e0cfd0883699cb9c33"}], "stats": {"total": 149, "additions": 74, "deletions": 75}, "files": [{"sha": "1151cd42e59f951400ad7a45dfa3e2fadbcfe150", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a", "patch": "@@ -182,6 +182,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n     LintId::of(methods::MAP_FLATTEN),\n     LintId::of(methods::MAP_IDENTITY),\n+    LintId::of(methods::MUT_MUTEX_LOCK),\n     LintId::of(methods::NEEDLESS_OPTION_AS_DEREF),\n     LintId::of(methods::NEEDLESS_OPTION_TAKE),\n     LintId::of(methods::NEEDLESS_SPLITN),\n@@ -226,7 +227,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(misc_early::ZERO_PREFIXED_LITERAL),\n     LintId::of(mixed_read_write_in_expression::DIVERGING_SUB_EXPRESSION),\n     LintId::of(mut_key::MUTABLE_KEY_TYPE),\n-    LintId::of(mut_mutex_lock::MUT_MUTEX_LOCK),\n     LintId::of(mut_reference::UNNECESSARY_MUT_PASSED),\n     LintId::of(needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n     LintId::of(needless_bool::BOOL_COMPARISON),"}, {"sha": "2ae93b49737795da05cc92fef74035ca1d62d7cf", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a", "patch": "@@ -329,6 +329,7 @@ store.register_lints(&[\n     methods::MAP_FLATTEN,\n     methods::MAP_IDENTITY,\n     methods::MAP_UNWRAP_OR,\n+    methods::MUT_MUTEX_LOCK,\n     methods::NAIVE_BYTECOUNT,\n     methods::NEEDLESS_OPTION_AS_DEREF,\n     methods::NEEDLESS_OPTION_TAKE,\n@@ -389,7 +390,6 @@ store.register_lints(&[\n     module_style::SELF_NAMED_MODULE_FILES,\n     mut_key::MUTABLE_KEY_TYPE,\n     mut_mut::MUT_MUT,\n-    mut_mutex_lock::MUT_MUTEX_LOCK,\n     mut_reference::UNNECESSARY_MUT_PASSED,\n     mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n     mutex_atomic::MUTEX_ATOMIC,"}, {"sha": "d34aadd1d3773d327010f2d659ba9da64ef5a2da", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a", "patch": "@@ -70,6 +70,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),\n     LintId::of(methods::MAP_CLONE),\n     LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n+    LintId::of(methods::MUT_MUTEX_LOCK),\n     LintId::of(methods::NEW_RET_NO_SELF),\n     LintId::of(methods::OBFUSCATED_IF_ELSE),\n     LintId::of(methods::OK_EXPECT),\n@@ -89,7 +90,6 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(misc_early::DUPLICATE_UNDERSCORE_ARGUMENT),\n     LintId::of(misc_early::MIXED_CASE_HEX_LITERALS),\n     LintId::of(misc_early::REDUNDANT_PATTERN),\n-    LintId::of(mut_mutex_lock::MUT_MUTEX_LOCK),\n     LintId::of(mut_reference::UNNECESSARY_MUT_PASSED),\n     LintId::of(needless_late_init::NEEDLESS_LATE_INIT),\n     LintId::of(needless_parens_on_range_literals::NEEDLESS_PARENS_ON_RANGE_LITERALS),"}, {"sha": "9f6ea1266d511c55567d7358206d5f138a341a82", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a", "patch": "@@ -291,7 +291,6 @@ mod mixed_read_write_in_expression;\n mod module_style;\n mod mut_key;\n mod mut_mut;\n-mod mut_mutex_lock;\n mod mut_reference;\n mod mutable_debug_assertion;\n mod mutex_atomic;\n@@ -815,7 +814,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(if_let_mutex::IfLetMutex));\n     store.register_late_pass(|| Box::new(if_not_else::IfNotElse));\n     store.register_late_pass(|| Box::new(equatable_if_let::PatternEquality));\n-    store.register_late_pass(|| Box::new(mut_mutex_lock::MutMutexLock));\n     store.register_late_pass(|| Box::new(manual_async_fn::ManualAsyncFn));\n     store.register_late_pass(|| Box::new(vec_resize_to_zero::VecResizeToZero));\n     store.register_late_pass(|| Box::new(panic_in_result_fn::PanicInResultFn));"}, {"sha": "6ad32ae09d7b4fd592e38e1012e2abce178c98c6", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a", "patch": "@@ -51,6 +51,7 @@ mod map_err_ignore;\n mod map_flatten;\n mod map_identity;\n mod map_unwrap_or;\n+mod mut_mutex_lock;\n mod needless_option_as_deref;\n mod needless_option_take;\n mod no_effect_replace;\n@@ -2642,6 +2643,42 @@ declare_clippy_lint! {\n     \"`map_err` should not ignore the original error\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `&mut Mutex::lock` calls\n+    ///\n+    /// ### Why is this bad?\n+    /// `Mutex::lock` is less efficient than\n+    /// calling `Mutex::get_mut`. In addition you also have a statically\n+    /// guarantee that the mutex isn't locked, instead of just a runtime\n+    /// guarantee.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// use std::sync::{Arc, Mutex};\n+    ///\n+    /// let mut value_rc = Arc::new(Mutex::new(42_u8));\n+    /// let value_mutex = Arc::get_mut(&mut value_rc).unwrap();\n+    ///\n+    /// let mut value = value_mutex.lock().unwrap();\n+    /// *value += 1;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::sync::{Arc, Mutex};\n+    ///\n+    /// let mut value_rc = Arc::new(Mutex::new(42_u8));\n+    /// let value_mutex = Arc::get_mut(&mut value_rc).unwrap();\n+    ///\n+    /// let value = value_mutex.get_mut().unwrap();\n+    /// *value += 1;\n+    /// ```\n+    #[clippy::version = \"1.49.0\"]\n+    pub MUT_MUTEX_LOCK,\n+    style,\n+    \"`&mut Mutex::lock` does unnecessary locking\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -2753,6 +2790,7 @@ impl_lint_pass!(Methods => [\n     MANUAL_OK_OR,\n     MAP_CLONE,\n     MAP_ERR_IGNORE,\n+    MUT_MUTEX_LOCK,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -3081,6 +3119,9 @@ impl Methods {\n                         }\n                     }\n                 },\n+                (\"lock\", []) => {\n+                    mut_mutex_lock::check(cx, expr, recv, span);\n+                },\n                 (name @ (\"map\" | \"map_err\"), [m_arg]) => {\n                     if name == \"map\" {\n                         map_clone::check(cx, expr, recv, m_arg, self.msrv);"}, {"sha": "bd8458a222e2922e1d68c3d26e9b37fc0f084d20", "filename": "clippy_lints/src/methods/mut_mutex_lock.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a/clippy_lints%2Fsrc%2Fmethods%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a/clippy_lints%2Fsrc%2Fmethods%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmut_mutex_lock.rs?ref=508cf6bdbc9d4d97503f2603f86ec4b3aa1db26a", "patch": "@@ -0,0 +1,30 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, Mutability};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::{sym, Span};\n+\n+use super::MUT_MUTEX_LOCK;\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, ex: &'tcx Expr<'tcx>, recv: &'tcx Expr<'tcx>, name_span: Span) {\n+    if_chain! {\n+        if let ty::Ref(_, _, Mutability::Mut) = cx.typeck_results().expr_ty(recv).kind();\n+        if let Some(method_id) = cx.typeck_results().type_dependent_def_id(ex.hir_id);\n+        if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n+        if is_type_diagnostic_item(cx, cx.tcx.type_of(impl_id), sym::Mutex);\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                MUT_MUTEX_LOCK,\n+                name_span,\n+                \"calling `&mut Mutex::lock` unnecessarily locks an exclusive (mutable) reference\",\n+                \"change this to\",\n+                \"get_mut\".to_owned(),\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+    }\n+}"}, {"sha": "b7f981faa2d42c6491d8745fc9b76168bd4a2fe6", "filename": "clippy_lints/src/mut_mutex_lock.rs", "status": "removed", "additions": 0, "deletions": 70, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2f0ed0a0b1fa7928464b95e0cfd0883699cb9c33/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f0ed0a0b1fa7928464b95e0cfd0883699cb9c33/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs?ref=2f0ed0a0b1fa7928464b95e0cfd0883699cb9c33", "patch": "@@ -1,70 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, Mutability};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for `&mut Mutex::lock` calls\n-    ///\n-    /// ### Why is this bad?\n-    /// `Mutex::lock` is less efficient than\n-    /// calling `Mutex::get_mut`. In addition you also have a statically\n-    /// guarantee that the mutex isn't locked, instead of just a runtime\n-    /// guarantee.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// use std::sync::{Arc, Mutex};\n-    ///\n-    /// let mut value_rc = Arc::new(Mutex::new(42_u8));\n-    /// let value_mutex = Arc::get_mut(&mut value_rc).unwrap();\n-    ///\n-    /// let mut value = value_mutex.lock().unwrap();\n-    /// *value += 1;\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// use std::sync::{Arc, Mutex};\n-    ///\n-    /// let mut value_rc = Arc::new(Mutex::new(42_u8));\n-    /// let value_mutex = Arc::get_mut(&mut value_rc).unwrap();\n-    ///\n-    /// let value = value_mutex.get_mut().unwrap();\n-    /// *value += 1;\n-    /// ```\n-    #[clippy::version = \"1.49.0\"]\n-    pub MUT_MUTEX_LOCK,\n-    style,\n-    \"`&mut Mutex::lock` does unnecessary locking\"\n-}\n-\n-declare_lint_pass!(MutMutexLock => [MUT_MUTEX_LOCK]);\n-\n-impl<'tcx> LateLintPass<'tcx> for MutMutexLock {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, ex: &'tcx Expr<'tcx>) {\n-        if_chain! {\n-            if let ExprKind::MethodCall(path, [self_arg, ..], _) = &ex.kind;\n-            if path.ident.name == sym!(lock);\n-            let ty = cx.typeck_results().expr_ty(self_arg);\n-            if let ty::Ref(_, inner_ty, Mutability::Mut) = ty.kind();\n-            if is_type_diagnostic_item(cx, *inner_ty, sym::Mutex);\n-            then {\n-                span_lint_and_sugg(\n-                    cx,\n-                    MUT_MUTEX_LOCK,\n-                    path.ident.span,\n-                    \"calling `&mut Mutex::lock` unnecessarily locks an exclusive (mutable) reference\",\n-                    \"change this to\",\n-                    \"get_mut\".to_owned(),\n-                    Applicability::MaybeIncorrect,\n-                );\n-            }\n-        }\n-    }\n-}"}]}