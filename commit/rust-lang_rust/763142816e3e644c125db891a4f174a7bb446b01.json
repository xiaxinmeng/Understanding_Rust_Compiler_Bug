{"sha": "763142816e3e644c125db891a4f174a7bb446b01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MzE0MjgxNmUzZTY0NGMxMjVkYjg5MWE0ZjE3NGE3YmI0NDZiMDE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-25T20:32:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-25T20:32:13Z"}, "message": "repair the build---also, make try/commit work over both ty/region vars", "tree": {"sha": "41a49294e459fb3e052ef95a1b543f5b18014520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41a49294e459fb3e052ef95a1b543f5b18014520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/763142816e3e644c125db891a4f174a7bb446b01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/763142816e3e644c125db891a4f174a7bb446b01", "html_url": "https://github.com/rust-lang/rust/commit/763142816e3e644c125db891a4f174a7bb446b01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/763142816e3e644c125db891a4f174a7bb446b01/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8462c6c83170dea3e835cfbe459406492c1413a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8462c6c83170dea3e835cfbe459406492c1413a6", "html_url": "https://github.com/rust-lang/rust/commit/8462c6c83170dea3e835cfbe459406492c1413a6"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "19048867cf8e2d244c1b2d9532a39375536d9efd", "filename": "src/rustc/middle/infer.rs", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/763142816e3e644c125db891a4f174a7bb446b01/src%2Frustc%2Fmiddle%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/763142816e3e644c125db891a4f174a7bb446b01/src%2Frustc%2Fmiddle%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Finfer.rs?ref=763142816e3e644c125db891a4f174a7bb446b01", "patch": "@@ -47,14 +47,14 @@ fn new_infer_ctxt(tcx: ty::ctxt) -> infer_ctxt {\n \n fn mk_subty(cx: infer_ctxt, a: ty::t, b: ty::t) -> ures {\n     #debug[\">> mk_subty(%s <: %s)\", cx.ty_to_str(a), cx.ty_to_str(b)];\n-    cx.commit(cx.vb) {||\n+    cx.commit {||\n         cx.tys(a, b)\n     }\n }\n \n fn mk_eqty(cx: infer_ctxt, a: ty::t, b: ty::t) -> ures {\n     #debug[\"> mk_eqty(%s <: %s)\", cx.ty_to_str(a), cx.ty_to_str(b)];\n-    cx.commit(cx.vb) {||\n+    cx.commit {||\n         mk_subty(cx, a, b).then {||\n             mk_subty(cx, b, a)\n         }\n@@ -64,7 +64,7 @@ fn mk_eqty(cx: infer_ctxt, a: ty::t, b: ty::t) -> ures {\n fn compare_tys(tcx: ty::ctxt, a: ty::t, b: ty::t) -> ures {\n     let infcx = new_infer_ctxt(tcx);\n     #debug[\"> compare_tys(%s == %s)\", infcx.ty_to_str(a), infcx.ty_to_str(b)];\n-    infcx.commit(infcx.vb) {||\n+    infcx.commit {||\n         mk_subty(infcx, a, b).then {||\n             mk_subty(infcx, b, a)\n         }\n@@ -158,30 +158,47 @@ impl unify_methods for infer_ctxt {\n         }\n     }\n \n-    fn commit<T:copy,E:copy,U:copy>(vb: vals_and_bindings<U>,\n-                                    f: fn() -> result<T,E>) -> result<T,E> {\n+    fn commit<T:copy,E:copy>(f: fn() -> result<T,E>) -> result<T,E> {\n+\n+        assert self.vb.bindings.len() == 0u;\n+        assert self.rb.bindings.len() == 0u;\n+\n+        let r = self.try(f);\n+\n+        // TODO---could use a vec::clear() that ran destructors but kept\n+        // the vec at its currently allocated length\n+        self.vb.bindings = [];\n+        self.rb.bindings = [];\n \n-        assert vb.bindings.len() == 0u;\n-        let r = self.try(vb, f);\n-        vec::clear(vb.bindings);\n         ret r;\n     }\n \n-    fn try<T:copy,E:copy,U:copy>(vb: vals_and_bindings<U>,\n-                                 f: fn() -> result<T,E>) -> result<T,E> {\n+    fn try<T:copy,E:copy>(f: fn() -> result<T,E>) -> result<T,E> {\n \n-        let l = vb.bindings.len();\n-        #debug[\"try(l=%u)\", l];\n+        fn rollback_to<T:copy>(vb: vals_and_bindings<T>, len: uint) {\n+            while vb.bindings.len() != len {\n+                let (vid, old_v) = vec::pop(vb.bindings);\n+                vb.vals.insert(vid, old_v);\n+            }\n+        }\n+\n+        let vbl = self.vb.bindings.len();\n+        let rbl = self.rb.bindings.len();\n+        #debug[\"try(vbl=%u, rbl=%u)\", vbl, rbl];\n         let r = f();\n         alt r {\n           result::ok(_) { #debug[\"try--ok\"]; }\n-          result::err(_) { #debug[\"try--rollback\"]; }\n+          result::err(_) {\n+            #debug[\"try--rollback\"];\n+            rollback_to(self.vb, vbl);\n+            rollback_to(self.rb, rbl);\n+          }\n         }\n         ret r;\n     }\n \n     fn get<T:copy>(vb: vals_and_bindings<T>, vid: uint)\n-            -> {root: uint, bounds:bounds<T>} {\n+        -> {root: uint, bounds:bounds<T>} {\n \n         alt vb.vals.find(vid) {\n           none {\n@@ -228,7 +245,7 @@ impl unify_methods for infer_ctxt {\n             ok({lb: b, ub: b})\n           }\n           (some(t_a), some(t_b)) {\n-            let r1 = self.try(self.vb) {||\n+            let r1 = self.try {||\n                 self.tys(t_a, t_b).then {||\n                     ok({lb: a, ub: b})\n                 }\n@@ -294,8 +311,8 @@ impl unify_methods for infer_ctxt {\n         let {root: b_id, bounds: b_bounds} = self.get(self.vb, b_id);\n \n         #debug[\"vars(<T%u>=%s <: <T%u>=%s)\",\n-               a_id, self.bounds_to_str(a_bounds),\n-               b_id, self.bounds_to_str(b_bounds)];\n+               a_id, self.ty_bounds_to_str(a_bounds),\n+               b_id, self.ty_bounds_to_str(b_bounds)];\n \n         if a_id == b_id { ret self.uok(); }\n "}]}