{"sha": "e95b10ba4ac4564ed25f7eef143e3182c33b3902", "node_id": "C_kwDOAAsO6NoAKGU5NWIxMGJhNGFjNDU2NGVkMjVmN2VlZjE0M2UzMTgyYzMzYjM5MDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-13T20:59:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-13T20:59:29Z"}, "message": "Auto merge of #94916 - matthiaskrgr:rollup-s6zedfl, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #93292 (Implement `BITS` constant for non-zero integers)\n - #94777 (Update armv7-unknown-linux-uclibceabi platform support page.)\n - #94816 (Add `Atomic*::get_mut_slice`)\n - #94844 (Reduce rustbuild bloat caused by serde_derive)\n - #94907 (Omit stdarch test crates from the rust-src component)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "15d3fac2d0464ef9f8f6f9963eb9e13bebddc502", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d3fac2d0464ef9f8f6f9963eb9e13bebddc502"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e95b10ba4ac4564ed25f7eef143e3182c33b3902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e95b10ba4ac4564ed25f7eef143e3182c33b3902", "html_url": "https://github.com/rust-lang/rust/commit/e95b10ba4ac4564ed25f7eef143e3182c33b3902", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e95b10ba4ac4564ed25f7eef143e3182c33b3902/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21b0325c68421b00c6c91055ac330bd5ffe1ea6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/21b0325c68421b00c6c91055ac330bd5ffe1ea6b", "html_url": "https://github.com/rust-lang/rust/commit/21b0325c68421b00c6c91055ac330bd5ffe1ea6b"}, {"sha": "c7030d3eb36ffe024e795eb9e6eeba0ebcbb1cd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7030d3eb36ffe024e795eb9e6eeba0ebcbb1cd4", "html_url": "https://github.com/rust-lang/rust/commit/c7030d3eb36ffe024e795eb9e6eeba0ebcbb1cd4"}], "stats": {"total": 573, "additions": 397, "deletions": 176}, "files": [{"sha": "c36529314784ea2ff915e2342013521f42f0b854", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e95b10ba4ac4564ed25f7eef143e3182c33b3902/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95b10ba4ac4564ed25f7eef143e3182c33b3902/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=e95b10ba4ac4564ed25f7eef143e3182c33b3902", "patch": "@@ -465,7 +465,7 @@ macro_rules! nonzero_unsigned_operations {\n                               without modifying the original\"]\n                 #[inline]\n                 pub const fn log2(self) -> u32 {\n-                    <$Int>::BITS - 1 - self.leading_zeros()\n+                    Self::BITS - 1 - self.leading_zeros()\n                 }\n \n                 /// Returns the base 10 logarithm of the number, rounded down.\n@@ -1090,3 +1090,41 @@ nonzero_min_max_signed! {\n     NonZeroI128(i128);\n     NonZeroIsize(isize);\n }\n+\n+macro_rules! nonzero_bits {\n+    ( $( $Ty: ident($Int: ty); )+ ) => {\n+        $(\n+            impl $Ty {\n+                /// The size of this non-zero integer type in bits.\n+                ///\n+                #[doc = concat!(\"This value is equal to [`\", stringify!($Int), \"::BITS`].\")]\n+                ///\n+                /// # Examples\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_bits)]\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                ///\n+                #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::BITS, \", stringify!($Int), \"::BITS);\")]\n+                /// ```\n+                #[unstable(feature = \"nonzero_bits\", issue = \"94881\")]\n+                pub const BITS: u32 = <$Int>::BITS;\n+            }\n+        )+\n+    }\n+}\n+\n+nonzero_bits! {\n+    NonZeroU8(u8);\n+    NonZeroI8(i8);\n+    NonZeroU16(u16);\n+    NonZeroI16(i16);\n+    NonZeroU32(u32);\n+    NonZeroI32(i32);\n+    NonZeroU64(u64);\n+    NonZeroI64(i64);\n+    NonZeroU128(u128);\n+    NonZeroI128(i128);\n+    NonZeroUsize(usize);\n+    NonZeroIsize(isize);\n+}"}, {"sha": "a9edec80540dd1d375292c398c45bd9dd0d2605e", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/e95b10ba4ac4564ed25f7eef143e3182c33b3902/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95b10ba4ac4564ed25f7eef143e3182c33b3902/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=e95b10ba4ac4564ed25f7eef143e3182c33b3902", "patch": "@@ -340,6 +340,40 @@ impl AtomicBool {\n         unsafe { &mut *(v as *mut bool as *mut Self) }\n     }\n \n+    /// Get non-atomic access to a `&mut [AtomicBool]` slice.\n+    ///\n+    /// This is safe because the mutable reference guarantees that no other threads are\n+    /// concurrently accessing the atomic data.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_mut, inline_const, scoped_threads)]\n+    /// use std::sync::atomic::{AtomicBool, Ordering};\n+    ///\n+    /// let mut some_bools = [const { AtomicBool::new(false) }; 10];\n+    ///\n+    /// let view: &mut [bool] = AtomicBool::get_mut_slice(&mut some_bools);\n+    /// assert_eq!(view, [false; 10]);\n+    /// view[..5].copy_from_slice(&[true; 5]);\n+    ///\n+    /// std::thread::scope(|s| {\n+    ///     for t in &some_bools[..5] {\n+    ///         s.spawn(move || assert_eq!(t.load(Ordering::Relaxed), true));\n+    ///     }\n+    ///\n+    ///     for f in &some_bools[5..] {\n+    ///         s.spawn(move || assert_eq!(f.load(Ordering::Relaxed), false));\n+    ///     }\n+    /// });\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+    pub fn get_mut_slice(this: &mut [Self]) -> &mut [bool] {\n+        // SAFETY: the mutable reference guarantees unique ownership.\n+        unsafe { &mut *(this as *mut [Self] as *mut [bool]) }\n+    }\n+\n     /// Get atomic access to a `&mut [bool]` slice.\n     ///\n     /// # Examples\n@@ -971,6 +1005,46 @@ impl<T> AtomicPtr<T> {\n         unsafe { &mut *(v as *mut *mut T as *mut Self) }\n     }\n \n+    /// Get non-atomic access to a `&mut [AtomicPtr]` slice.\n+    ///\n+    /// This is safe because the mutable reference guarantees that no other threads are\n+    /// concurrently accessing the atomic data.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_mut, inline_const, scoped_threads)]\n+    /// use std::ptr::null_mut;\n+    /// use std::sync::atomic::{AtomicPtr, Ordering};\n+    ///\n+    /// let mut some_ptrs = [const { AtomicPtr::new(null_mut::<String>()) }; 10];\n+    ///\n+    /// let view: &mut [*mut String] = AtomicPtr::get_mut_slice(&mut some_ptrs);\n+    /// assert_eq!(view, [null_mut::<String>(); 10]);\n+    /// view\n+    ///     .iter_mut()\n+    ///     .enumerate()\n+    ///     .for_each(|(i, ptr)| *ptr = Box::into_raw(Box::new(format!(\"iteration#{i}\"))));\n+    ///\n+    /// std::thread::scope(|s| {\n+    ///     for ptr in &some_ptrs {\n+    ///         s.spawn(move || {\n+    ///             let ptr = ptr.load(Ordering::Relaxed);\n+    ///             assert!(!ptr.is_null());\n+    ///\n+    ///             let name = unsafe { Box::from_raw(ptr) };\n+    ///             println!(\"Hello, {name}!\");\n+    ///         });\n+    ///     }\n+    /// });\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+    pub fn get_mut_slice(this: &mut [Self]) -> &mut [*mut T] {\n+        // SAFETY: the mutable reference guarantees unique ownership.\n+        unsafe { &mut *(this as *mut [Self] as *mut [*mut T]) }\n+    }\n+\n     /// Get atomic access to a slice of pointers.\n     ///\n     /// # Examples\n@@ -1521,6 +1595,42 @@ macro_rules! atomic_int {\n                 unsafe { &mut *(v as *mut $int_type as *mut Self) }\n             }\n \n+            #[doc = concat!(\"Get non-atomic access to a `&mut [\", stringify!($atomic_type), \"]` slice\")]\n+            ///\n+            /// This is safe because the mutable reference guarantees that no other threads are\n+            /// concurrently accessing the atomic data.\n+            ///\n+            /// # Examples\n+            ///\n+            /// ```\n+            /// #![feature(atomic_from_mut, inline_const, scoped_threads)]\n+            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n+            ///\n+            #[doc = concat!(\"let mut some_ints = [const { \", stringify!($atomic_type), \"::new(0) }; 10];\")]\n+            ///\n+            #[doc = concat!(\"let view: &mut [\", stringify!($int_type), \"] = \", stringify!($atomic_type), \"::get_mut_slice(&mut some_ints);\")]\n+            /// assert_eq!(view, [0; 10]);\n+            /// view\n+            ///     .iter_mut()\n+            ///     .enumerate()\n+            ///     .for_each(|(idx, int)| *int = idx as _);\n+            ///\n+            /// std::thread::scope(|s| {\n+            ///     some_ints\n+            ///         .iter()\n+            ///         .enumerate()\n+            ///         .for_each(|(idx, int)| {\n+            ///             s.spawn(move || assert_eq!(int.load(Ordering::Relaxed), idx as _));\n+            ///         })\n+            /// });\n+            /// ```\n+            #[inline]\n+            #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+            pub fn get_mut_slice(this: &mut [Self]) -> &mut [$int_type] {\n+                // SAFETY: the mutable reference guarantees unique ownership.\n+                unsafe { &mut *(this as *mut [Self] as *mut [$int_type]) }\n+            }\n+\n             #[doc = concat!(\"Get atomic access to a `&mut [\", stringify!($int_type), \"]` slice.\")]\n             ///\n             /// # Examples"}, {"sha": "e744810295defad144d1053ed45c251074a6f0f6", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 222, "deletions": 164, "changes": 386, "blob_url": "https://github.com/rust-lang/rust/blob/e95b10ba4ac4564ed25f7eef143e3182c33b3902/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95b10ba4ac4564ed25f7eef143e3182c33b3902/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=e95b10ba4ac4564ed25f7eef143e3182c33b3902", "patch": "@@ -17,7 +17,7 @@ use crate::channel::GitInfo;\n pub use crate::flags::Subcommand;\n use crate::flags::{Color, Flags};\n use crate::util::{exe, t};\n-use serde::Deserialize;\n+use serde::{Deserialize, Deserializer};\n \n macro_rules! check_ci_llvm {\n     ($name:expr) => {\n@@ -362,13 +362,13 @@ impl Merge for TomlConfig {\n \n // We are using a decl macro instead of a derive proc macro here to reduce the compile time of\n // rustbuild.\n-macro_rules! derive_merge {\n+macro_rules! define_config {\n     ($(#[$attr:meta])* struct $name:ident {\n-        $($field:ident: $field_ty:ty,)*\n+        $($field:ident: Option<$field_ty:ty> = $field_key:literal,)*\n     }) => {\n         $(#[$attr])*\n         struct $name {\n-            $($field: $field_ty,)*\n+            $($field: Option<$field_ty>,)*\n         }\n \n         impl Merge for $name {\n@@ -380,115 +380,173 @@ macro_rules! derive_merge {\n                 )*\n             }\n         }\n+\n+        // The following is a trimmed version of what serde_derive generates. All parts not relevant\n+        // for toml deserialization have been removed. This reduces the binary size and improves\n+        // compile time of rustbuild.\n+        impl<'de> Deserialize<'de> for $name {\n+            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n+            where\n+                D: Deserializer<'de>,\n+            {\n+                struct Field;\n+                impl<'de> serde::de::Visitor<'de> for Field {\n+                    type Value = $name;\n+                    fn expecting(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+                        f.write_str(concat!(\"struct \", stringify!($name)))\n+                    }\n+\n+                    #[inline]\n+                    fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>\n+                    where\n+                        A: serde::de::MapAccess<'de>,\n+                    {\n+                        $(let mut $field: Option<$field_ty> = None;)*\n+                        while let Some(key) =\n+                            match serde::de::MapAccess::next_key::<String>(&mut map) {\n+                                Ok(val) => val,\n+                                Err(err) => {\n+                                    return Err(err);\n+                                }\n+                            }\n+                        {\n+                            match &*key {\n+                                $($field_key => {\n+                                    if $field.is_some() {\n+                                        return Err(<A::Error as serde::de::Error>::duplicate_field(\n+                                            $field_key,\n+                                        ));\n+                                    }\n+                                    $field = match serde::de::MapAccess::next_value::<$field_ty>(\n+                                        &mut map,\n+                                    ) {\n+                                        Ok(val) => Some(val),\n+                                        Err(err) => {\n+                                            return Err(err);\n+                                        }\n+                                    };\n+                                })*\n+                                key => {\n+                                    return Err(serde::de::Error::unknown_field(key, FIELDS));\n+                                }\n+                            }\n+                        }\n+                        Ok($name { $($field),* })\n+                    }\n+                }\n+                const FIELDS: &'static [&'static str] = &[\n+                    $($field_key,)*\n+                ];\n+                Deserializer::deserialize_struct(\n+                    deserializer,\n+                    stringify!($name),\n+                    FIELDS,\n+                    Field,\n+                )\n+            }\n+        }\n     }\n }\n \n-derive_merge! {\n+define_config! {\n     /// TOML representation of various global build decisions.\n-    #[derive(Deserialize, Default)]\n-    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n+    #[derive(Default)]\n     struct Build {\n-        build: Option<String>,\n-        host: Option<Vec<String>>,\n-        target: Option<Vec<String>>,\n-        build_dir: Option<String>,\n-        cargo: Option<String>,\n-        rustc: Option<String>,\n-        rustfmt: Option<PathBuf>,\n-        docs: Option<bool>,\n-        compiler_docs: Option<bool>,\n-        docs_minification: Option<bool>,\n-        submodules: Option<bool>,\n-        fast_submodules: Option<bool>,\n-        gdb: Option<String>,\n-        nodejs: Option<String>,\n-        npm: Option<String>,\n-        python: Option<String>,\n-        locked_deps: Option<bool>,\n-        vendor: Option<bool>,\n-        full_bootstrap: Option<bool>,\n-        extended: Option<bool>,\n-        tools: Option<HashSet<String>>,\n-        verbose: Option<usize>,\n-        sanitizers: Option<bool>,\n-        profiler: Option<bool>,\n-        cargo_native_static: Option<bool>,\n-        low_priority: Option<bool>,\n-        configure_args: Option<Vec<String>>,\n-        local_rebuild: Option<bool>,\n-        print_step_timings: Option<bool>,\n-        print_step_rusage: Option<bool>,\n-        check_stage: Option<u32>,\n-        doc_stage: Option<u32>,\n-        build_stage: Option<u32>,\n-        test_stage: Option<u32>,\n-        install_stage: Option<u32>,\n-        dist_stage: Option<u32>,\n-        bench_stage: Option<u32>,\n-        patch_binaries_for_nix: Option<bool>,\n+        build: Option<String> = \"build\",\n+        host: Option<Vec<String>> = \"host\",\n+        target: Option<Vec<String>> = \"target\",\n+        build_dir: Option<String> = \"build-dir\",\n+        cargo: Option<String> = \"cargo\",\n+        rustc: Option<String> = \"rustc\",\n+        rustfmt: Option<PathBuf> = \"rustfmt\",\n+        docs: Option<bool> = \"docs\",\n+        compiler_docs: Option<bool> = \"compiler-docs\",\n+        docs_minification: Option<bool> = \"docs-minification\",\n+        submodules: Option<bool> = \"submodules\",\n+        fast_submodules: Option<bool> = \"fast-submodules\",\n+        gdb: Option<String> = \"gdb\",\n+        nodejs: Option<String> = \"nodejs\",\n+        npm: Option<String> = \"npm\",\n+        python: Option<String> = \"python\",\n+        locked_deps: Option<bool> = \"locked-deps\",\n+        vendor: Option<bool> = \"vendor\",\n+        full_bootstrap: Option<bool> = \"full-bootstrap\",\n+        extended: Option<bool> = \"extended\",\n+        tools: Option<HashSet<String>> = \"tools\",\n+        verbose: Option<usize> = \"verbose\",\n+        sanitizers: Option<bool> = \"sanitizers\",\n+        profiler: Option<bool> = \"profiler\",\n+        cargo_native_static: Option<bool> = \"cargo-native-static\",\n+        low_priority: Option<bool> = \"low-priority\",\n+        configure_args: Option<Vec<String>> = \"configure-args\",\n+        local_rebuild: Option<bool> = \"local-rebuild\",\n+        print_step_timings: Option<bool> = \"print-step-timings\",\n+        print_step_rusage: Option<bool> = \"print-step-rusage\",\n+        check_stage: Option<u32> = \"check-stage\",\n+        doc_stage: Option<u32> = \"doc-stage\",\n+        build_stage: Option<u32> = \"build-stage\",\n+        test_stage: Option<u32> = \"test-stage\",\n+        install_stage: Option<u32> = \"install-stage\",\n+        dist_stage: Option<u32> = \"dist-stage\",\n+        bench_stage: Option<u32> = \"bench-stage\",\n+        patch_binaries_for_nix: Option<bool> = \"patch-binaries-for-nix\",\n     }\n }\n \n-derive_merge! {\n+define_config! {\n     /// TOML representation of various global install decisions.\n-    #[derive(Deserialize)]\n-    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n     struct Install {\n-        prefix: Option<String>,\n-        sysconfdir: Option<String>,\n-        docdir: Option<String>,\n-        bindir: Option<String>,\n-        libdir: Option<String>,\n-        mandir: Option<String>,\n-        datadir: Option<String>,\n+        prefix: Option<String> = \"prefix\",\n+        sysconfdir: Option<String> = \"sysconfdir\",\n+        docdir: Option<String> = \"docdir\",\n+        bindir: Option<String> = \"bindir\",\n+        libdir: Option<String> = \"libdir\",\n+        mandir: Option<String> = \"mandir\",\n+        datadir: Option<String> = \"datadir\",\n     }\n }\n \n-derive_merge! {\n+define_config! {\n     /// TOML representation of how the LLVM build is configured.\n-    #[derive(Deserialize)]\n-    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n     struct Llvm {\n-        skip_rebuild: Option<bool>,\n-        optimize: Option<bool>,\n-        thin_lto: Option<bool>,\n-        release_debuginfo: Option<bool>,\n-        assertions: Option<bool>,\n-        tests: Option<bool>,\n-        plugins: Option<bool>,\n-        ccache: Option<StringOrBool>,\n-        version_check: Option<bool>,\n-        static_libstdcpp: Option<bool>,\n-        ninja: Option<bool>,\n-        targets: Option<String>,\n-        experimental_targets: Option<String>,\n-        link_jobs: Option<u32>,\n-        link_shared: Option<bool>,\n-        version_suffix: Option<String>,\n-        clang_cl: Option<String>,\n-        cflags: Option<String>,\n-        cxxflags: Option<String>,\n-        ldflags: Option<String>,\n-        use_libcxx: Option<bool>,\n-        use_linker: Option<String>,\n-        allow_old_toolchain: Option<bool>,\n-        polly: Option<bool>,\n-        clang: Option<bool>,\n-        download_ci_llvm: Option<StringOrBool>,\n-        build_config: Option<HashMap<String, String>>,\n+        skip_rebuild: Option<bool> = \"skip-rebuild\",\n+        optimize: Option<bool> = \"optimize\",\n+        thin_lto: Option<bool> = \"thin-lto\",\n+        release_debuginfo: Option<bool> = \"release-debuginfo\",\n+        assertions: Option<bool> = \"assertions\",\n+        tests: Option<bool> = \"tests\",\n+        plugins: Option<bool> = \"plugins\",\n+        ccache: Option<StringOrBool> = \"ccache\",\n+        version_check: Option<bool> = \"version-check\",\n+        static_libstdcpp: Option<bool> = \"static-libstdcpp\",\n+        ninja: Option<bool> = \"ninja\",\n+        targets: Option<String> = \"targets\",\n+        experimental_targets: Option<String> = \"experimental-targets\",\n+        link_jobs: Option<u32> = \"link-jobs\",\n+        link_shared: Option<bool> = \"link-shared\",\n+        version_suffix: Option<String> = \"version-suffix\",\n+        clang_cl: Option<String> = \"clang-cl\",\n+        cflags: Option<String> = \"cflags\",\n+        cxxflags: Option<String> = \"cxxflags\",\n+        ldflags: Option<String> = \"ldflags\",\n+        use_libcxx: Option<bool> = \"use-libcxx\",\n+        use_linker: Option<String> = \"use-linker\",\n+        allow_old_toolchain: Option<bool> = \"allow-old-toolchain\",\n+        polly: Option<bool> = \"polly\",\n+        clang: Option<bool> = \"clang\",\n+        download_ci_llvm: Option<StringOrBool> = \"download-ci-llvm\",\n+        build_config: Option<HashMap<String, String>> = \"build-config\",\n     }\n }\n \n-derive_merge! {\n-    #[derive(Deserialize)]\n-    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n+define_config! {\n     struct Dist {\n-        sign_folder: Option<String>,\n-        gpg_password_file: Option<String>,\n-        upload_addr: Option<String>,\n-        src_tarball: Option<bool>,\n-        missing_tools: Option<bool>,\n-        compression_formats: Option<Vec<String>>,\n+        sign_folder: Option<String> = \"sign-folder\",\n+        gpg_password_file: Option<String> = \"gpg-password-file\",\n+        upload_addr: Option<String> = \"upload-addr\",\n+        src_tarball: Option<bool> = \"src-tarball\",\n+        missing_tools: Option<bool> = \"missing-tools\",\n+        compression_formats: Option<Vec<String>> = \"compression-formats\",\n     }\n }\n \n@@ -505,83 +563,79 @@ impl Default for StringOrBool {\n     }\n }\n \n-derive_merge! {\n+define_config! {\n     /// TOML representation of how the Rust build is configured.\n-    #[derive(Deserialize)]\n-    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n     struct Rust {\n-        optimize: Option<bool>,\n-        debug: Option<bool>,\n-        codegen_units: Option<u32>,\n-        codegen_units_std: Option<u32>,\n-        debug_assertions: Option<bool>,\n-        debug_assertions_std: Option<bool>,\n-        overflow_checks: Option<bool>,\n-        overflow_checks_std: Option<bool>,\n-        debug_logging: Option<bool>,\n-        debuginfo_level: Option<u32>,\n-        debuginfo_level_rustc: Option<u32>,\n-        debuginfo_level_std: Option<u32>,\n-        debuginfo_level_tools: Option<u32>,\n-        debuginfo_level_tests: Option<u32>,\n-        run_dsymutil: Option<bool>,\n-        backtrace: Option<bool>,\n-        incremental: Option<bool>,\n-        parallel_compiler: Option<bool>,\n-        default_linker: Option<String>,\n-        channel: Option<String>,\n-        description: Option<String>,\n-        musl_root: Option<String>,\n-        rpath: Option<bool>,\n-        verbose_tests: Option<bool>,\n-        optimize_tests: Option<bool>,\n-        codegen_tests: Option<bool>,\n-        ignore_git: Option<bool>,\n-        dist_src: Option<bool>,\n-        save_toolstates: Option<String>,\n-        codegen_backends: Option<Vec<String>>,\n-        lld: Option<bool>,\n-        use_lld: Option<bool>,\n-        llvm_tools: Option<bool>,\n-        deny_warnings: Option<bool>,\n-        backtrace_on_ice: Option<bool>,\n-        verify_llvm_ir: Option<bool>,\n-        thin_lto_import_instr_limit: Option<u32>,\n-        remap_debuginfo: Option<bool>,\n-        jemalloc: Option<bool>,\n-        test_compare_mode: Option<bool>,\n-        llvm_libunwind: Option<String>,\n-        control_flow_guard: Option<bool>,\n-        new_symbol_mangling: Option<bool>,\n-        profile_generate: Option<String>,\n-        profile_use: Option<String>,\n+        optimize: Option<bool> = \"optimize\",\n+        debug: Option<bool> = \"debug\",\n+        codegen_units: Option<u32> = \"codegen-units\",\n+        codegen_units_std: Option<u32> = \"codegen-units-std\",\n+        debug_assertions: Option<bool> = \"debug-assertions\",\n+        debug_assertions_std: Option<bool> = \"debug-assertions-std\",\n+        overflow_checks: Option<bool> = \"overflow-checks\",\n+        overflow_checks_std: Option<bool> = \"overflow-checks-std\",\n+        debug_logging: Option<bool> = \"debug-logging\",\n+        debuginfo_level: Option<u32> = \"debuginfo-level\",\n+        debuginfo_level_rustc: Option<u32> = \"debuginfo-level-rustc\",\n+        debuginfo_level_std: Option<u32> = \"debuginfo-level-std\",\n+        debuginfo_level_tools: Option<u32> = \"debuginfo-level-tools\",\n+        debuginfo_level_tests: Option<u32> = \"debuginfo-level-tests\",\n+        run_dsymutil: Option<bool> = \"run-dsymutil\",\n+        backtrace: Option<bool> = \"backtrace\",\n+        incremental: Option<bool> = \"incremental\",\n+        parallel_compiler: Option<bool> = \"parallel-compiler\",\n+        default_linker: Option<String> = \"default-linker\",\n+        channel: Option<String> = \"channel\",\n+        description: Option<String> = \"description\",\n+        musl_root: Option<String> = \"musl-root\",\n+        rpath: Option<bool> = \"rpath\",\n+        verbose_tests: Option<bool> = \"verbose-tests\",\n+        optimize_tests: Option<bool> = \"optimize-tests\",\n+        codegen_tests: Option<bool> = \"codegen-tests\",\n+        ignore_git: Option<bool> = \"ignore-git\",\n+        dist_src: Option<bool> = \"dist-src\",\n+        save_toolstates: Option<String> = \"save-toolstates\",\n+        codegen_backends: Option<Vec<String>> = \"codegen-backends\",\n+        lld: Option<bool> = \"lld\",\n+        use_lld: Option<bool> = \"use-lld\",\n+        llvm_tools: Option<bool> = \"llvm-tools\",\n+        deny_warnings: Option<bool> = \"deny-warnings\",\n+        backtrace_on_ice: Option<bool> = \"backtrace-on-ice\",\n+        verify_llvm_ir: Option<bool> = \"verify-llvm-ir\",\n+        thin_lto_import_instr_limit: Option<u32> = \"thin-lto-import-instr-limit\",\n+        remap_debuginfo: Option<bool> = \"remap-debuginfo\",\n+        jemalloc: Option<bool> = \"jemalloc\",\n+        test_compare_mode: Option<bool> = \"test-compare-mode\",\n+        llvm_libunwind: Option<String> = \"llvm-libunwind\",\n+        control_flow_guard: Option<bool> = \"control-flow-guard\",\n+        new_symbol_mangling: Option<bool> = \"new-symbol-mangling\",\n+        profile_generate: Option<String> = \"profile-generate\",\n+        profile_use: Option<String> = \"profile-use\",\n         // ignored; this is set from an env var set by bootstrap.py\n-        download_rustc: Option<StringOrBool>,\n+        download_rustc: Option<StringOrBool> = \"download-rustc\",\n     }\n }\n \n-derive_merge! {\n+define_config! {\n     /// TOML representation of how each build target is configured.\n-    #[derive(Deserialize)]\n-    #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n     struct TomlTarget {\n-        cc: Option<String>,\n-        cxx: Option<String>,\n-        ar: Option<String>,\n-        ranlib: Option<String>,\n-        default_linker: Option<PathBuf>,\n-        linker: Option<String>,\n-        llvm_config: Option<String>,\n-        llvm_filecheck: Option<String>,\n-        android_ndk: Option<String>,\n-        sanitizers: Option<bool>,\n-        profiler: Option<bool>,\n-        crt_static: Option<bool>,\n-        musl_root: Option<String>,\n-        musl_libdir: Option<String>,\n-        wasi_root: Option<String>,\n-        qemu_rootfs: Option<String>,\n-        no_std: Option<bool>,\n+        cc: Option<String> = \"cc\",\n+        cxx: Option<String> = \"cxx\",\n+        ar: Option<String> = \"ar\",\n+        ranlib: Option<String> = \"ranlib\",\n+        default_linker: Option<PathBuf> = \"default-linker\",\n+        linker: Option<String> = \"linker\",\n+        llvm_config: Option<String> = \"llvm-config\",\n+        llvm_filecheck: Option<String> = \"llvm-filecheck\",\n+        android_ndk: Option<String> = \"android-ndk\",\n+        sanitizers: Option<bool> = \"sanitizers\",\n+        profiler: Option<bool> = \"profiler\",\n+        crt_static: Option<bool> = \"crt-static\",\n+        musl_root: Option<String> = \"musl-root\",\n+        musl_libdir: Option<String> = \"musl-libdir\",\n+        wasi_root: Option<String> = \"wasi-root\",\n+        qemu_rootfs: Option<String> = \"qemu-rootfs\",\n+        no_std: Option<bool> = \"no-std\",\n     }\n }\n \n@@ -649,7 +703,11 @@ impl Config {\n \n             let contents =\n                 t!(fs::read_to_string(file), format!(\"config file {} not found\", file.display()));\n-            match toml::from_str(&contents) {\n+            // Deserialize to Value and then TomlConfig to prevent the Deserialize impl of\n+            // TomlConfig and sub types to be monomorphized 5x by toml.\n+            match toml::from_str(&contents)\n+                .and_then(|table: toml::Value| TomlConfig::deserialize(table))\n+            {\n                 Ok(table) => table,\n                 Err(err) => {\n                     println!(\"failed to parse TOML configuration '{}': {}\", file.display(), err);"}, {"sha": "76054122d00b1ba315fe57bcf94d87c9c9677619", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e95b10ba4ac4564ed25f7eef143e3182c33b3902/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e95b10ba4ac4564ed25f7eef143e3182c33b3902/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=e95b10ba4ac4564ed25f7eef143e3182c33b3902", "patch": "@@ -821,6 +821,11 @@ impl Step for Src {\n                 // not needed and contains symlinks which rustup currently\n                 // chokes on when unpacking.\n                 \"library/backtrace/crates\",\n+                // these are 30MB combined and aren't necessary for building\n+                // the standard library.\n+                \"library/stdarch/crates/Cargo.toml\",\n+                \"library/stdarch/crates/stdarch-verify\",\n+                \"library/stdarch/crates/intrinsic-test\",\n             ],\n             &dst_src,\n         );"}, {"sha": "71afca527d1f69abd9475b64264091ebf28bb5d9", "filename": "src/doc/rustc/src/platform-support/armv7-unknown-linux-uclibceabi.md", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e95b10ba4ac4564ed25f7eef143e3182c33b3902/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md", "raw_url": "https://github.com/rust-lang/rust/raw/e95b10ba4ac4564ed25f7eef143e3182c33b3902/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Farmv7-unknown-linux-uclibceabi.md?ref=e95b10ba4ac4564ed25f7eef143e3182c33b3902", "patch": "@@ -36,8 +36,8 @@ target = [\"armv7-unknown-linux-uclibceabi\"]\n cc = \"/path/to/arm-unknown-linux-uclibcgnueabi-gcc\"\n cxx = \"/path/to/arm-unknown-linux-uclibcgnueabi-g++\"\n ar = \"path/to/arm-unknown-linux-uclibcgnueabi-ar\"\n-ranlib = \"path/to/arm-unknown-linux-uclibcgnueabi-\"\n-linker = \"/path/to/arm-unknown-linux-uclibcgnueabi-\"\n+ranlib = \"path/to/arm-unknown-linux-uclibcgnueabi-ranlib\"\n+linker = \"/path/to/arm-unknown-linux-uclibcgnueabi-gcc\"\n ```\n \n ## Building Rust programs\n@@ -75,27 +75,37 @@ To cross compile, you'll need to:\n     ```\n * Build with:\n     ```text\n-    CC=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-gcc \\\n-    CXX=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-g++ \\\n-    AR=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-ar \\\n+    CC_armv7_unknown_linux_uclibceabi=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-gcc \\\n+    CXX_armv7_unknown_linux_uclibceabi=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-g++ \\\n+    AR_armv7_unknown_linux_uclibceabi=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-ar \\\n+    CFLAGS_armv7_unknown_linux_uclibceabi=\"-march=armv7-a -mtune=cortex-a9\" \\\n+    CXXFLAGS_armv7_unknown_linux_uclibceabi=\"-march=armv7-a -mtune=cortex-a9\" \\\n     CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABI_LINKER=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-gcc \\\n     CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABI_RUSTFLAGS='-Clink-arg=-s -Clink-arg=-Wl,--dynamic-linker=/mmc/lib/ld-uClibc.so.1 -Clink-arg=-Wl,-rpath,/mmc/lib' \\\n-    cargo +stage2 build --target armv7-unknown-linux-uclibceabi --release\n+    cargo +stage2 \\\n+    build \\\n+    --target armv7-unknown-linux-uclibceabi \\\n+    --release\n     ```\n * Copy the binary to your target device and run.\n \n-We specify `CC`, `CXX`, and `AR` because somtimes a project or a subproject requires the use of your `'C'` cross toolchain. Since Tomatoware has a modified sysroot we also pass via RUSTFLAGS the location of the dynamic-linker and rpath.\n+We specify `CC`, `CXX`, `AR`, `CFLAGS`, and `CXXFLAGS` environment variables because somtimes a project or a subproject requires the use of your `'C'` cross toolchain. Since Tomatoware has a modified sysroot we also pass via RUSTFLAGS the location of the dynamic-linker and rpath.\n \n ### Test with QEMU\n \n To test a cross-compiled binary on your build system follow the instructions for `Cross Compilation`, install `qemu-arm-static`, and run with the following.\n ```text\n-CC=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-gcc \\\n-CXX=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-g++ \\\n-AR=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-ar \\\n+CC_armv7_unknown_linux_uclibceabi=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-gcc \\\n+CXX_armv7_unknown_linux_uclibceabi=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-g++ \\\n+AR_armv7_unknown_linux_uclibceabi=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-ar \\\n+CFLAGS_armv7_unknown_linux_uclibceabi=\"-march=armv7-a -mtune=cortex-a9\" \\\n+CXXFLAGS_armv7_unknown_linux_uclibceabi=\"-march=armv7-a -mtune=cortex-a9\" \\\n CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABI_LINKER=/opt/tomatoware/arm-soft-mmc/bin/arm-linux-gcc \\\n CARGO_TARGET_ARMV7_UNKNOWN_LINUX_UCLIBCEABI_RUNNER=\"qemu-arm-static -L /opt/tomatoware/arm-soft-mmc/arm-tomatoware-linux-uclibcgnueabi/sysroot/\" \\\n-cargo +stage2 run --target armv7-unknown-linux-uclibceabi --release\n+cargo +stage2 \\\n+run \\\n+--target armv7-unknown-linux-uclibceabi \\\n+--release\n ```\n ### Run in a chroot\n "}]}