{"sha": "363c202581e505b79bd6627d40f2fc133e9a41d4", "node_id": "C_kwDOAAsO6NoAKDM2M2MyMDI1ODFlNTA1Yjc5YmQ2NjI3ZDQwZjJmYzEzM2U5YTQxZDQ", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-14T18:46:07Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-14T18:46:07Z"}, "message": "Stop turning transmutes into discriminants in mir-opt\n\nPartially reverts 109612, as after 109993 these aren't actually equivalent any more, and I'm no longer confident this was ever an improvement in the first place.", "tree": {"sha": "524b7b82bdcdcdab7232c2b4b7a16540987d09e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/524b7b82bdcdcdab7232c2b4b7a16540987d09e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/363c202581e505b79bd6627d40f2fc133e9a41d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/363c202581e505b79bd6627d40f2fc133e9a41d4", "html_url": "https://github.com/rust-lang/rust/commit/363c202581e505b79bd6627d40f2fc133e9a41d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/363c202581e505b79bd6627d40f2fc133e9a41d4/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e8116cfe5b1affcfcc22ffb6bb0152573488114", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8116cfe5b1affcfcc22ffb6bb0152573488114", "html_url": "https://github.com/rust-lang/rust/commit/8e8116cfe5b1affcfcc22ffb6bb0152573488114"}], "stats": {"total": 201, "additions": 49, "deletions": 152}, "files": [{"sha": "e4dc617620e12f8ab5c20f5c6c3fafe276b2b6a8", "filename": "compiler/rustc_mir_transform/src/instsimplify.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/363c202581e505b79bd6627d40f2fc133e9a41d4/compiler%2Frustc_mir_transform%2Fsrc%2Finstsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363c202581e505b79bd6627d40f2fc133e9a41d4/compiler%2Frustc_mir_transform%2Fsrc%2Finstsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstsimplify.rs?ref=363c202581e505b79bd6627d40f2fc133e9a41d4", "patch": "@@ -5,7 +5,6 @@ use crate::MirPass;\n use rustc_hir::Mutability;\n use rustc_middle::mir::*;\n use rustc_middle::ty::layout::ValidityRequirement;\n-use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, ParamEnv, SubstsRef, Ty, TyCtxt};\n use rustc_span::symbol::Symbol;\n use rustc_target::abi::FieldIdx;\n@@ -163,18 +162,6 @@ impl<'tcx> InstSimplifyContext<'tcx, '_> {\n                     return;\n                 }\n \n-                // Transmuting a fieldless enum to its repr is a discriminant read\n-                if let ty::Adt(adt_def, ..) = operand_ty.kind()\n-                    && adt_def.is_enum()\n-                    && adt_def.is_payloadfree()\n-                    && let Some(place) = operand.place()\n-                    && let Some(repr_int) = adt_def.repr().int\n-                    && repr_int.to_ty(self.tcx) == *cast_ty\n-                {\n-                    *rvalue = Rvalue::Discriminant(place);\n-                    return;\n-                }\n-\n                 // Transmuting a transparent struct/union to a field's type is a projection\n                 if let ty::Adt(adt_def, substs) = operand_ty.kind()\n                     && adt_def.repr().transparent()"}, {"sha": "15117ea890e386c0edab57afd69b04dc37925b64", "filename": "tests/mir-opt/combine_transmutes.adt_transmutes.InstSimplify.diff", "status": "modified", "additions": 49, "deletions": 117, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/363c202581e505b79bd6627d40f2fc133e9a41d4/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/363c202581e505b79bd6627d40f2fc133e9a41d4/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstSimplify.diff?ref=363c202581e505b79bd6627d40f2fc133e9a41d4", "patch": "@@ -4,59 +4,29 @@\n   fn adt_transmutes() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/combine_transmutes.rs:+0:32: +0:32\n       let _1: u8;                          // in scope 0 at $DIR/combine_transmutes.rs:+1:9: +1:11\n-      let mut _2: EnumNoRepr;              // in scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:41\n-      let mut _4: EnumNoRepr;              // in scope 0 at $DIR/combine_transmutes.rs:+2:28: +2:41\n-      let mut _6: EnumReprIsize;           // in scope 0 at $DIR/combine_transmutes.rs:+3:31: +3:47\n-      let mut _8: EnumReprIsize;           // in scope 0 at $DIR/combine_transmutes.rs:+4:31: +4:47\n-      let mut _10: std::cmp::Ordering;     // in scope 0 at $DIR/combine_transmutes.rs:+5:28: +5:52\n-      let mut _12: std::cmp::Ordering;     // in scope 0 at $DIR/combine_transmutes.rs:+6:28: +6:52\n-      let mut _14: std::option::Option<std::num::NonZeroU8>; // in scope 0 at $DIR/combine_transmutes.rs:+7:28: +7:58\n-      let mut _16: std::num::Wrapping<i16>; // in scope 0 at $DIR/combine_transmutes.rs:+8:29: +8:54\n-      let mut _18: std::num::Wrapping<i16>; // in scope 0 at $DIR/combine_transmutes.rs:+9:29: +9:54\n-      let mut _20: Union32;                // in scope 0 at $DIR/combine_transmutes.rs:+10:29: +10:47\n-      let mut _22: Union32;                // in scope 0 at $DIR/combine_transmutes.rs:+11:29: +11:47\n-      let mut _24: std::mem::MaybeUninit<std::string::String>; // in scope 0 at $DIR/combine_transmutes.rs:+12:46: +12:77\n+      let mut _2: std::option::Option<std::num::NonZeroU8>; // in scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:58\n+      let mut _4: std::num::Wrapping<i16>; // in scope 0 at $DIR/combine_transmutes.rs:+2:29: +2:54\n+      let mut _6: std::num::Wrapping<i16>; // in scope 0 at $DIR/combine_transmutes.rs:+3:29: +3:54\n+      let mut _8: Union32;                 // in scope 0 at $DIR/combine_transmutes.rs:+4:29: +4:47\n+      let mut _10: Union32;                // in scope 0 at $DIR/combine_transmutes.rs:+5:29: +5:47\n+      let mut _12: std::mem::MaybeUninit<std::string::String>; // in scope 0 at $DIR/combine_transmutes.rs:+6:46: +6:77\n       scope 1 {\n           debug _a => _1;                  // in scope 1 at $DIR/combine_transmutes.rs:+1:9: +1:11\n-          let _3: i8;                      // in scope 1 at $DIR/combine_transmutes.rs:+2:9: +2:11\n+          let _3: i16;                     // in scope 1 at $DIR/combine_transmutes.rs:+2:9: +2:11\n           scope 2 {\n               debug _a => _3;              // in scope 2 at $DIR/combine_transmutes.rs:+2:9: +2:11\n-              let _5: usize;               // in scope 2 at $DIR/combine_transmutes.rs:+3:9: +3:11\n+              let _5: u16;                 // in scope 2 at $DIR/combine_transmutes.rs:+3:9: +3:11\n               scope 3 {\n                   debug _a => _5;          // in scope 3 at $DIR/combine_transmutes.rs:+3:9: +3:11\n-                  let _7: isize;           // in scope 3 at $DIR/combine_transmutes.rs:+4:9: +4:11\n+                  let _7: u32;             // in scope 3 at $DIR/combine_transmutes.rs:+4:9: +4:11\n                   scope 4 {\n                       debug _a => _7;      // in scope 4 at $DIR/combine_transmutes.rs:+4:9: +4:11\n-                      let _9: u8;          // in scope 4 at $DIR/combine_transmutes.rs:+5:9: +5:11\n+                      let _9: i32;         // in scope 4 at $DIR/combine_transmutes.rs:+5:9: +5:11\n                       scope 5 {\n                           debug _a => _9;  // in scope 5 at $DIR/combine_transmutes.rs:+5:9: +5:11\n-                          let _11: i8;     // in scope 5 at $DIR/combine_transmutes.rs:+6:9: +6:11\n+                          let _11: std::mem::ManuallyDrop<std::string::String>; // in scope 5 at $DIR/combine_transmutes.rs:+6:9: +6:11\n                           scope 6 {\n                               debug _a => _11; // in scope 6 at $DIR/combine_transmutes.rs:+6:9: +6:11\n-                              let _13: u8; // in scope 6 at $DIR/combine_transmutes.rs:+7:9: +7:11\n-                              scope 7 {\n-                                  debug _a => _13; // in scope 7 at $DIR/combine_transmutes.rs:+7:9: +7:11\n-                                  let _15: i16; // in scope 7 at $DIR/combine_transmutes.rs:+8:9: +8:11\n-                                  scope 8 {\n-                                      debug _a => _15; // in scope 8 at $DIR/combine_transmutes.rs:+8:9: +8:11\n-                                      let _17: u16; // in scope 8 at $DIR/combine_transmutes.rs:+9:9: +9:11\n-                                      scope 9 {\n-                                          debug _a => _17; // in scope 9 at $DIR/combine_transmutes.rs:+9:9: +9:11\n-                                          let _19: u32; // in scope 9 at $DIR/combine_transmutes.rs:+10:9: +10:11\n-                                          scope 10 {\n-                                              debug _a => _19; // in scope 10 at $DIR/combine_transmutes.rs:+10:9: +10:11\n-                                              let _21: i32; // in scope 10 at $DIR/combine_transmutes.rs:+11:9: +11:11\n-                                              scope 11 {\n-                                                  debug _a => _21; // in scope 11 at $DIR/combine_transmutes.rs:+11:9: +11:11\n-                                                  let _23: std::mem::ManuallyDrop<std::string::String>; // in scope 11 at $DIR/combine_transmutes.rs:+12:9: +12:11\n-                                                  scope 12 {\n-                                                      debug _a => _23; // in scope 12 at $DIR/combine_transmutes.rs:+12:9: +12:11\n-                                                  }\n-                                              }\n-                                          }\n-                                      }\n-                                  }\n-                              }\n                           }\n                       }\n                   }\n@@ -66,93 +36,55 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/combine_transmutes.rs:+1:9: +1:11\n-          StorageLive(_2);                 // scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:41\n-          _2 = EnumNoRepr::A;              // scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:41\n-          _1 = move _2 as u8 (Transmute);  // scope 0 at $DIR/combine_transmutes.rs:+1:18: +1:42\n-          StorageDead(_2);                 // scope 0 at $DIR/combine_transmutes.rs:+1:41: +1:42\n+          StorageLive(_2);                 // scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:58\n+          _2 = Option::<NonZeroU8>::Some(const _); // scope 0 at $DIR/combine_transmutes.rs:+1:28: +1:58\n+                                           // mir::Constant\n+                                           // + span: $DIR/combine_transmutes.rs:35:33: 35:57\n+                                           // + literal: Const { ty: NonZeroU8, val: Unevaluated(NonZeroU8::MAX, [], None) }\n+          _1 = move _2 as u8 (Transmute);  // scope 0 at $DIR/combine_transmutes.rs:+1:18: +1:59\n+          StorageDead(_2);                 // scope 0 at $DIR/combine_transmutes.rs:+1:58: +1:59\n           StorageLive(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+2:9: +2:11\n-          StorageLive(_4);                 // scope 1 at $DIR/combine_transmutes.rs:+2:28: +2:41\n-          _4 = EnumNoRepr::B;              // scope 1 at $DIR/combine_transmutes.rs:+2:28: +2:41\n-          _3 = move _4 as i8 (Transmute);  // scope 1 at $DIR/combine_transmutes.rs:+2:18: +2:42\n-          StorageDead(_4);                 // scope 1 at $DIR/combine_transmutes.rs:+2:41: +2:42\n+          StorageLive(_4);                 // scope 1 at $DIR/combine_transmutes.rs:+2:29: +2:54\n+          _4 = Wrapping::<i16>(const 0_i16); // scope 1 at $DIR/combine_transmutes.rs:+2:29: +2:54\n+-         _3 = move _4 as i16 (Transmute); // scope 1 at $DIR/combine_transmutes.rs:+2:19: +2:55\n++         _3 = move (_4.0: i16);           // scope 1 at $DIR/combine_transmutes.rs:+2:19: +2:55\n+          StorageDead(_4);                 // scope 1 at $DIR/combine_transmutes.rs:+2:54: +2:55\n           StorageLive(_5);                 // scope 2 at $DIR/combine_transmutes.rs:+3:9: +3:11\n-          StorageLive(_6);                 // scope 2 at $DIR/combine_transmutes.rs:+3:31: +3:47\n-          _6 = EnumReprIsize::A;           // scope 2 at $DIR/combine_transmutes.rs:+3:31: +3:47\n-          _5 = move _6 as usize (Transmute); // scope 2 at $DIR/combine_transmutes.rs:+3:21: +3:48\n-          StorageDead(_6);                 // scope 2 at $DIR/combine_transmutes.rs:+3:47: +3:48\n+          StorageLive(_6);                 // scope 2 at $DIR/combine_transmutes.rs:+3:29: +3:54\n+          _6 = Wrapping::<i16>(const 0_i16); // scope 2 at $DIR/combine_transmutes.rs:+3:29: +3:54\n+          _5 = move _6 as u16 (Transmute); // scope 2 at $DIR/combine_transmutes.rs:+3:19: +3:55\n+          StorageDead(_6);                 // scope 2 at $DIR/combine_transmutes.rs:+3:54: +3:55\n           StorageLive(_7);                 // scope 3 at $DIR/combine_transmutes.rs:+4:9: +4:11\n-          StorageLive(_8);                 // scope 3 at $DIR/combine_transmutes.rs:+4:31: +4:47\n-          _8 = EnumReprIsize::B;           // scope 3 at $DIR/combine_transmutes.rs:+4:31: +4:47\n--         _7 = move _8 as isize (Transmute); // scope 3 at $DIR/combine_transmutes.rs:+4:21: +4:48\n-+         _7 = discriminant(_8);           // scope 3 at $DIR/combine_transmutes.rs:+4:21: +4:48\n+          StorageLive(_8);                 // scope 3 at $DIR/combine_transmutes.rs:+4:29: +4:47\n+          _8 = Union32 { u32: const 0_i32 }; // scope 3 at $DIR/combine_transmutes.rs:+4:29: +4:47\n+          _7 = move _8 as u32 (Transmute); // scope 3 at $DIR/combine_transmutes.rs:+4:19: +4:48\n           StorageDead(_8);                 // scope 3 at $DIR/combine_transmutes.rs:+4:47: +4:48\n           StorageLive(_9);                 // scope 4 at $DIR/combine_transmutes.rs:+5:9: +5:11\n-          StorageLive(_10);                // scope 4 at $DIR/combine_transmutes.rs:+5:28: +5:52\n-          _10 = Less;                      // scope 4 at $DIR/combine_transmutes.rs:+5:28: +5:52\n-          _9 = move _10 as u8 (Transmute); // scope 4 at $DIR/combine_transmutes.rs:+5:18: +5:53\n-          StorageDead(_10);                // scope 4 at $DIR/combine_transmutes.rs:+5:52: +5:53\n+          StorageLive(_10);                // scope 4 at $DIR/combine_transmutes.rs:+5:29: +5:47\n+          _10 = Union32 { u32: const 0_u32 }; // scope 4 at $DIR/combine_transmutes.rs:+5:29: +5:47\n+          _9 = move _10 as i32 (Transmute); // scope 4 at $DIR/combine_transmutes.rs:+5:19: +5:48\n+          StorageDead(_10);                // scope 4 at $DIR/combine_transmutes.rs:+5:47: +5:48\n           StorageLive(_11);                // scope 5 at $DIR/combine_transmutes.rs:+6:9: +6:11\n-          StorageLive(_12);                // scope 5 at $DIR/combine_transmutes.rs:+6:28: +6:52\n-          _12 = Less;                      // scope 5 at $DIR/combine_transmutes.rs:+6:28: +6:52\n--         _11 = move _12 as i8 (Transmute); // scope 5 at $DIR/combine_transmutes.rs:+6:18: +6:53\n-+         _11 = discriminant(_12);         // scope 5 at $DIR/combine_transmutes.rs:+6:18: +6:53\n-          StorageDead(_12);                // scope 5 at $DIR/combine_transmutes.rs:+6:52: +6:53\n-          StorageLive(_13);                // scope 6 at $DIR/combine_transmutes.rs:+7:9: +7:11\n-          StorageLive(_14);                // scope 6 at $DIR/combine_transmutes.rs:+7:28: +7:58\n-          _14 = Option::<NonZeroU8>::Some(const _); // scope 6 at $DIR/combine_transmutes.rs:+7:28: +7:58\n-                                           // mir::Constant\n-                                           // + span: $DIR/combine_transmutes.rs:41:33: 41:57\n-                                           // + literal: Const { ty: NonZeroU8, val: Unevaluated(NonZeroU8::MAX, [], None) }\n-          _13 = move _14 as u8 (Transmute); // scope 6 at $DIR/combine_transmutes.rs:+7:18: +7:59\n-          StorageDead(_14);                // scope 6 at $DIR/combine_transmutes.rs:+7:58: +7:59\n-          StorageLive(_15);                // scope 7 at $DIR/combine_transmutes.rs:+8:9: +8:11\n-          StorageLive(_16);                // scope 7 at $DIR/combine_transmutes.rs:+8:29: +8:54\n-          _16 = Wrapping::<i16>(const 0_i16); // scope 7 at $DIR/combine_transmutes.rs:+8:29: +8:54\n--         _15 = move _16 as i16 (Transmute); // scope 7 at $DIR/combine_transmutes.rs:+8:19: +8:55\n-+         _15 = move (_16.0: i16);         // scope 7 at $DIR/combine_transmutes.rs:+8:19: +8:55\n-          StorageDead(_16);                // scope 7 at $DIR/combine_transmutes.rs:+8:54: +8:55\n-          StorageLive(_17);                // scope 8 at $DIR/combine_transmutes.rs:+9:9: +9:11\n-          StorageLive(_18);                // scope 8 at $DIR/combine_transmutes.rs:+9:29: +9:54\n-          _18 = Wrapping::<i16>(const 0_i16); // scope 8 at $DIR/combine_transmutes.rs:+9:29: +9:54\n-          _17 = move _18 as u16 (Transmute); // scope 8 at $DIR/combine_transmutes.rs:+9:19: +9:55\n-          StorageDead(_18);                // scope 8 at $DIR/combine_transmutes.rs:+9:54: +9:55\n-          StorageLive(_19);                // scope 9 at $DIR/combine_transmutes.rs:+10:9: +10:11\n-          StorageLive(_20);                // scope 9 at $DIR/combine_transmutes.rs:+10:29: +10:47\n-          _20 = Union32 { u32: const 0_i32 }; // scope 9 at $DIR/combine_transmutes.rs:+10:29: +10:47\n-          _19 = move _20 as u32 (Transmute); // scope 9 at $DIR/combine_transmutes.rs:+10:19: +10:48\n-          StorageDead(_20);                // scope 9 at $DIR/combine_transmutes.rs:+10:47: +10:48\n-          StorageLive(_21);                // scope 10 at $DIR/combine_transmutes.rs:+11:9: +11:11\n-          StorageLive(_22);                // scope 10 at $DIR/combine_transmutes.rs:+11:29: +11:47\n-          _22 = Union32 { u32: const 0_u32 }; // scope 10 at $DIR/combine_transmutes.rs:+11:29: +11:47\n-          _21 = move _22 as i32 (Transmute); // scope 10 at $DIR/combine_transmutes.rs:+11:19: +11:48\n-          StorageDead(_22);                // scope 10 at $DIR/combine_transmutes.rs:+11:47: +11:48\n-          StorageLive(_23);                // scope 11 at $DIR/combine_transmutes.rs:+12:9: +12:11\n-          StorageLive(_24);                // scope 11 at $DIR/combine_transmutes.rs:+12:46: +12:77\n-          _24 = MaybeUninit::<String>::uninit() -> [return: bb1, unwind unreachable]; // scope 11 at $DIR/combine_transmutes.rs:+12:46: +12:77\n+          StorageLive(_12);                // scope 5 at $DIR/combine_transmutes.rs:+6:46: +6:77\n+          _12 = MaybeUninit::<String>::uninit() -> [return: bb1, unwind unreachable]; // scope 5 at $DIR/combine_transmutes.rs:+6:46: +6:77\n                                            // mir::Constant\n-                                           // + span: $DIR/combine_transmutes.rs:46:46: 46:75\n-                                           // + user_ty: UserType(23)\n+                                           // + span: $DIR/combine_transmutes.rs:40:46: 40:75\n+                                           // + user_ty: UserType(11)\n                                            // + literal: Const { ty: fn() -> MaybeUninit<String> {MaybeUninit::<String>::uninit}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n--         _23 = move _24 as std::mem::ManuallyDrop<std::string::String> (Transmute); // scope 11 at $DIR/combine_transmutes.rs:+12:36: +12:78\n-+         _23 = move (_24.1: std::mem::ManuallyDrop<std::string::String>); // scope 11 at $DIR/combine_transmutes.rs:+12:36: +12:78\n-          StorageDead(_24);                // scope 11 at $DIR/combine_transmutes.rs:+12:77: +12:78\n-          _0 = const ();                   // scope 0 at $DIR/combine_transmutes.rs:+0:32: +13:2\n-          StorageDead(_23);                // scope 11 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_21);                // scope 10 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_19);                // scope 9 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_17);                // scope 8 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_15);                // scope 7 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_13);                // scope 6 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_11);                // scope 5 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_9);                 // scope 4 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_7);                 // scope 3 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_5);                 // scope 2 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          StorageDead(_1);                 // scope 0 at $DIR/combine_transmutes.rs:+13:1: +13:2\n-          return;                          // scope 0 at $DIR/combine_transmutes.rs:+13:2: +13:2\n+-         _11 = move _12 as std::mem::ManuallyDrop<std::string::String> (Transmute); // scope 5 at $DIR/combine_transmutes.rs:+6:36: +6:78\n++         _11 = move (_12.1: std::mem::ManuallyDrop<std::string::String>); // scope 5 at $DIR/combine_transmutes.rs:+6:36: +6:78\n+          StorageDead(_12);                // scope 5 at $DIR/combine_transmutes.rs:+6:77: +6:78\n+          _0 = const ();                   // scope 0 at $DIR/combine_transmutes.rs:+0:32: +7:2\n+          StorageDead(_11);                // scope 5 at $DIR/combine_transmutes.rs:+7:1: +7:2\n+          StorageDead(_9);                 // scope 4 at $DIR/combine_transmutes.rs:+7:1: +7:2\n+          StorageDead(_7);                 // scope 3 at $DIR/combine_transmutes.rs:+7:1: +7:2\n+          StorageDead(_5);                 // scope 2 at $DIR/combine_transmutes.rs:+7:1: +7:2\n+          StorageDead(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/combine_transmutes.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/combine_transmutes.rs:+7:2: +7:2\n       }\n   }\n   "}, {"sha": "403f9356ce210fbafcf39bc5560e6756a79d5c30", "filename": "tests/mir-opt/combine_transmutes.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/363c202581e505b79bd6627d40f2fc133e9a41d4/tests%2Fmir-opt%2Fcombine_transmutes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363c202581e505b79bd6627d40f2fc133e9a41d4/tests%2Fmir-opt%2Fcombine_transmutes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.rs?ref=363c202581e505b79bd6627d40f2fc133e9a41d4", "patch": "@@ -32,12 +32,6 @@ pub unsafe fn integer_transmutes() {\n \n // EMIT_MIR combine_transmutes.adt_transmutes.InstSimplify.diff\n pub unsafe fn adt_transmutes() {\n-    let _a: u8 = transmute(EnumNoRepr::A);\n-    let _a: i8 = transmute(EnumNoRepr::B);\n-    let _a: usize = transmute(EnumReprIsize::A);\n-    let _a: isize = transmute(EnumReprIsize::B);\n-    let _a: u8 = transmute(std::cmp::Ordering::Less);\n-    let _a: i8 = transmute(std::cmp::Ordering::Less);\n     let _a: u8 = transmute(Some(std::num::NonZeroU8::MAX));\n     let _a: i16 = transmute(std::num::Wrapping(0_i16));\n     let _a: u16 = transmute(std::num::Wrapping(0_i16));\n@@ -46,20 +40,4 @@ pub unsafe fn adt_transmutes() {\n     let _a: ManuallyDrop<String> = transmute(MaybeUninit::<String>::uninit());\n }\n \n-#[inline(always)]\n-#[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n-const unsafe fn mir_transmute<T, U>(x: T) -> U {\n-    mir!{\n-        {\n-            RET = CastTransmute(x);\n-            Return()\n-        }\n-    }\n-}\n-\n-pub enum EnumNoRepr { A, B, C }\n-\n-#[repr(isize)]\n-pub enum EnumReprIsize { A, B, C }\n-\n pub union Union32 { u32: u32, i32: i32 }"}]}