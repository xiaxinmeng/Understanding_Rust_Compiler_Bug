{"sha": "554633534c550d20715e5e1576702b1f035586ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NDYzMzUzNGM1NTBkMjA3MTVlNWUxNTc2NzAyYjFmMDM1NTg2YWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-20T05:45:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-20T05:45:08Z"}, "message": "Auto merge of #76696 - Aaron1011:tokenstream-avoid-clone, r=petrochenkov\n\nAvoid cloning the contents of a `TokenStream` in a few places", "tree": {"sha": "87ab856fd114d59d45f9466a784691c3e9cb19b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ab856fd114d59d45f9466a784691c3e9cb19b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/554633534c550d20715e5e1576702b1f035586ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/554633534c550d20715e5e1576702b1f035586ad", "html_url": "https://github.com/rust-lang/rust/commit/554633534c550d20715e5e1576702b1f035586ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/554633534c550d20715e5e1576702b1f035586ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9b52100d5b2284a8d801d722a2941f56decdeac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b52100d5b2284a8d801d722a2941f56decdeac", "html_url": "https://github.com/rust-lang/rust/commit/c9b52100d5b2284a8d801d722a2941f56decdeac"}, {"sha": "f6aec82d4d7c9a75698808c28454d601aceac06f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6aec82d4d7c9a75698808c28454d601aceac06f", "html_url": "https://github.com/rust-lang/rust/commit/f6aec82d4d7c9a75698808c28454d601aceac06f"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "3363c7223cc482c824c5bb6da7fd8cf82d5e8858", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/554633534c550d20715e5e1576702b1f035586ad/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/554633534c550d20715e5e1576702b1f035586ad/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=554633534c550d20715e5e1576702b1f035586ad", "patch": "@@ -125,7 +125,7 @@ where\n /// instead of a representation of the abstract syntax tree.\n /// Today's `TokenTree`s can still contain AST via `token::Interpolated` for back-compat.\n #[derive(Clone, Debug, Default, Encodable, Decodable)]\n-pub struct TokenStream(pub Lrc<Vec<TreeAndSpacing>>);\n+pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);\n \n pub type TreeAndSpacing = (TokenTree, Spacing);\n \n@@ -286,12 +286,12 @@ impl TokenStream {\n         t1.next().is_none() && t2.next().is_none()\n     }\n \n-    pub fn map_enumerated<F: FnMut(usize, TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {\n+    pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {\n         TokenStream(Lrc::new(\n             self.0\n                 .iter()\n                 .enumerate()\n-                .map(|(i, (tree, is_joint))| (f(i, tree.clone()), *is_joint))\n+                .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))\n                 .collect(),\n         ))\n     }\n@@ -394,8 +394,8 @@ impl Cursor {\n         self.index = index;\n     }\n \n-    pub fn look_ahead(&self, n: usize) -> Option<TokenTree> {\n-        self.stream.0[self.index..].get(n).map(|(tree, _)| tree.clone())\n+    pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {\n+        self.stream.0[self.index..].get(n).map(|(tree, _)| tree)\n     }\n }\n "}, {"sha": "791d2686cb5eb198cc845604b668fc626ecd2ca5", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/554633534c550d20715e5e1576702b1f035586ad/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/554633534c550d20715e5e1576702b1f035586ad/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=554633534c550d20715e5e1576702b1f035586ad", "patch": "@@ -288,7 +288,8 @@ fn generic_extension<'cx>(\n                 // Replace all the tokens for the corresponding positions in the macro, to maintain\n                 // proper positions in error reporting, while maintaining the macro_backtrace.\n                 if rhs_spans.len() == tts.len() {\n-                    tts = tts.map_enumerated(|i, mut tt| {\n+                    tts = tts.map_enumerated(|i, tt| {\n+                        let mut tt = tt.clone();\n                         let mut sp = rhs_spans[i];\n                         sp = sp.with_ctxt(tt.span().ctxt());\n                         tt.set_span(sp);"}, {"sha": "1860f1238c4b5ab3206bf087edca2626f5d139b4", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/554633534c550d20715e5e1576702b1f035586ad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/554633534c550d20715e5e1576702b1f035586ad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=554633534c550d20715e5e1576702b1f035586ad", "patch": "@@ -833,15 +833,15 @@ impl<'a> Parser<'a> {\n         }\n \n         let frame = &self.token_cursor.frame;\n-        looker(&match frame.tree_cursor.look_ahead(dist - 1) {\n+        match frame.tree_cursor.look_ahead(dist - 1) {\n             Some(tree) => match tree {\n-                TokenTree::Token(token) => token,\n+                TokenTree::Token(token) => looker(token),\n                 TokenTree::Delimited(dspan, delim, _) => {\n-                    Token::new(token::OpenDelim(delim), dspan.open)\n+                    looker(&Token::new(token::OpenDelim(*delim), dspan.open))\n                 }\n             },\n-            None => Token::new(token::CloseDelim(frame.delim), frame.span.close),\n-        })\n+            None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),\n+        }\n     }\n \n     /// Returns whether any of the given keywords are `dist` tokens ahead of the current one."}]}