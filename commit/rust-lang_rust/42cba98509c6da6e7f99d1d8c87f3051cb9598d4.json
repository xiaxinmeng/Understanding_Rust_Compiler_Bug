{"sha": "42cba98509c6da6e7f99d1d8c87f3051cb9598d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyY2JhOTg1MDljNmRhNmU3Zjk5ZDFkOGM4N2YzMDUxY2I5NTk4ZDQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-14T00:58:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-18T23:59:37Z"}, "message": "core: Convert some multiline statements to single-line", "tree": {"sha": "a76348f3d79de71304213cf539a3217ad75617a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a76348f3d79de71304213cf539a3217ad75617a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42cba98509c6da6e7f99d1d8c87f3051cb9598d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42cba98509c6da6e7f99d1d8c87f3051cb9598d4", "html_url": "https://github.com/rust-lang/rust/commit/42cba98509c6da6e7f99d1d8c87f3051cb9598d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42cba98509c6da6e7f99d1d8c87f3051cb9598d4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54bb7226e16090b471d791af5615016d01000504", "url": "https://api.github.com/repos/rust-lang/rust/commits/54bb7226e16090b471d791af5615016d01000504", "html_url": "https://github.com/rust-lang/rust/commit/54bb7226e16090b471d791af5615016d01000504"}], "stats": {"total": 202, "additions": 67, "deletions": 135}, "files": [{"sha": "55ea2eb3f50976946a75765f254cda1a502e69b5", "filename": "src/libcore/rt/context.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/42cba98509c6da6e7f99d1d8c87f3051cb9598d4/src%2Flibcore%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cba98509c6da6e7f99d1d8c87f3051cb9598d4/src%2Flibcore%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fcontext.rs?ref=42cba98509c6da6e7f99d1d8c87f3051cb9598d4", "patch": "@@ -54,8 +54,7 @@ pub impl Context {\n         // which we will then modify to call the given function when restored\n         let mut regs = new_regs();\n         unsafe {\n-            swap_registers(transmute_mut_region(&mut *regs),\n-                           transmute_region(&*regs))\n+            swap_registers(transmute_mut_region(&mut *regs), transmute_region(&*regs))\n         };\n \n         initialize_call_frame(&mut *regs, fp, argp, sp);\n@@ -107,8 +106,7 @@ fn new_regs() -> ~Registers {\n }\n \n #[cfg(target_arch = \"x86\")]\n-fn initialize_call_frame(regs: &mut Registers,\n-                         fptr: *c_void, arg: *c_void, sp: *mut uint) {\n+fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp: *mut uint) {\n \n     let sp = align_down(sp);\n     let sp = mut_offset(sp, -4);\n@@ -131,8 +129,7 @@ type Registers = [uint * 22];\n fn new_regs() -> ~Registers { ~[0, .. 22] }\n \n #[cfg(target_arch = \"x86_64\")]\n-fn initialize_call_frame(regs: &mut Registers,\n-                         fptr: *c_void, arg: *c_void, sp: *mut uint) {\n+fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp: *mut uint) {\n \n     // Redefinitions from regs.h\n     const RUSTRT_ARG0: uint = 3;\n@@ -166,8 +163,7 @@ type Registers = [uint * 32];\n fn new_regs() -> ~Registers { ~[0, .. 32] }\n \n #[cfg(target_arch = \"arm\")]\n-fn initialize_call_frame(regs: &mut Registers,\n-                         fptr: *c_void, arg: *c_void, sp: *mut uint) {\n+fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp: *mut uint) {\n     let sp = mut_offset(sp, -1);\n \n     // The final return address. 0 indicates the bottom of the stack\n@@ -185,8 +181,7 @@ type Registers = [uint * 32];\n fn new_regs() -> ~Registers { ~[0, .. 32] }\n \n #[cfg(target_arch = \"mips\")]\n-fn initialize_call_frame(regs: &mut Registers,\n-                         fptr: *c_void, arg: *c_void, sp: *mut uint) {\n+fn initialize_call_frame(regs: &mut Registers, fptr: *c_void, arg: *c_void, sp: *mut uint) {\n     let sp = mut_offset(sp, -1);\n \n     // The final return address. 0 indicates the bottom of the stack"}, {"sha": "74867dd7f12248f8ca6e8cab0c0ec295d087dd5f", "filename": "src/libcore/rt/sched.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/42cba98509c6da6e7f99d1d8c87f3051cb9598d4/src%2Flibcore%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cba98509c6da6e7f99d1d8c87f3051cb9598d4/src%2Flibcore%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched.rs?ref=42cba98509c6da6e7f99d1d8c87f3051cb9598d4", "patch": "@@ -183,8 +183,7 @@ pub impl Scheduler {\n \n         let blocked_task = self.current_task.swap_unwrap();\n         let f_fake_region = unsafe {\n-            transmute::<&fn(&mut Scheduler, ~Task),\n-                        &fn(&mut Scheduler, ~Task)>(f)\n+            transmute::<&fn(&mut Scheduler, ~Task), &fn(&mut Scheduler, ~Task)>(f)\n         };\n         let f_opaque = HackAroundBorrowCk::from_fn(f_fake_region);\n         self.enqueue_cleanup_job(GiveTask(blocked_task, f_opaque));\n@@ -233,8 +232,7 @@ pub impl Scheduler {\n         Context::swap(task_context, scheduler_context);\n     }\n \n-    priv fn swap_in_task_from_running_task(&mut self,\n-                                           running_task: &mut Task) {\n+    priv fn swap_in_task_from_running_task(&mut self, running_task: &mut Task) {\n         let running_task_context = &mut running_task.saved_context;\n         let next_context = &self.current_task.get_ref().saved_context;\n         Context::swap(running_task_context, next_context);\n@@ -344,8 +342,7 @@ impl ThreadLocalScheduler {\n     fn put_scheduler(&mut self, scheduler: ~Scheduler) {\n         unsafe {\n             let key = match self { &ThreadLocalScheduler(key) => key };\n-            let value: *mut c_void =\n-                transmute::<~Scheduler, *mut c_void>(scheduler);\n+            let value: *mut c_void = transmute::<~Scheduler, *mut c_void>(scheduler);\n             tls::set(key, value);\n         }\n     }\n@@ -357,8 +354,9 @@ impl ThreadLocalScheduler {\n             fail_unless!(value.is_not_null());\n             {\n                 let value_ptr = &mut value;\n-                let sched: &mut ~Scheduler =\n-                    transmute::<&mut *mut c_void, &mut ~Scheduler>(value_ptr);\n+                let sched: &mut ~Scheduler = {\n+                    transmute::<&mut *mut c_void, &mut ~Scheduler>(value_ptr)\n+                };\n                 let sched: &mut Scheduler = &mut **sched;\n                 return sched;\n             }"}, {"sha": "3bbd54b306f845fd00cfec4b587539929097804c", "filename": "src/libcore/rt/uv.rs", "status": "modified", "additions": 20, "deletions": 42, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/42cba98509c6da6e7f99d1d8c87f3051cb9598d4/src%2Flibcore%2Frt%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cba98509c6da6e7f99d1d8c87f3051cb9598d4/src%2Flibcore%2Frt%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv.rs?ref=42cba98509c6da6e7f99d1d8c87f3051cb9598d4", "patch": "@@ -157,10 +157,8 @@ pub impl IdleWatcher {\n         };\n \n         extern fn idle_cb(handle: *uvll::uv_idle_t, status: c_int) {\n-            let idle_watcher: IdleWatcher =\n-                NativeHandle::from_native_handle(handle);\n-            let cb: &IdleCallback =\n-                borrow_callback_from_watcher(&idle_watcher);\n+            let idle_watcher: IdleWatcher = NativeHandle::from_native_handle(handle);\n+            let cb: &IdleCallback = borrow_callback_from_watcher(&idle_watcher);\n             let status = status_to_maybe_uv_error(handle, status);\n             (*cb)(idle_watcher, status);\n         }\n@@ -175,9 +173,7 @@ pub impl IdleWatcher {\n \n         extern fn close_cb(handle: *uvll::uv_idle_t) {\n             let mut idle_watcher = NativeHandle::from_native_handle(handle);\n-            drop_watcher_callback::<uvll::uv_idle_t,\n-                                    IdleWatcher,\n-                                    IdleCallback>(&mut idle_watcher);\n+            drop_watcher_callback::<uvll::uv_idle_t, IdleWatcher, IdleCallback>(&mut idle_watcher);\n             unsafe { uvll::idle_delete(handle) };\n         }\n     }\n@@ -220,21 +216,17 @@ pub impl StreamWatcher {\n         let handle = self.native_handle();\n         unsafe { uvll::read_start(handle, alloc_cb, read_cb); }\n \n-        extern fn alloc_cb(stream: *uvll::uv_stream_t,\n-                           suggested_size: size_t) -> Buf {\n-            let mut stream_watcher: StreamWatcher =\n-                NativeHandle::from_native_handle(stream);\n+        extern fn alloc_cb(stream: *uvll::uv_stream_t, suggested_size: size_t) -> Buf {\n+            let mut stream_watcher: StreamWatcher = NativeHandle::from_native_handle(stream);\n             let data = get_watcher_data(&mut stream_watcher);\n             let alloc_cb = data.alloc_cb.get_ref();\n             return (*alloc_cb)(suggested_size as uint);\n         }\n \n-        extern fn read_cb(stream: *uvll::uv_stream_t,\n-                          nread: ssize_t, ++buf: Buf) {\n+        extern fn read_cb(stream: *uvll::uv_stream_t, nread: ssize_t, ++buf: Buf) {\n             rtdebug!(\"buf addr: %x\", buf.base as uint);\n             rtdebug!(\"buf len: %d\", buf.len as int);\n-            let mut stream_watcher: StreamWatcher =\n-                NativeHandle::from_native_handle(stream);\n+            let mut stream_watcher: StreamWatcher = NativeHandle::from_native_handle(stream);\n             let data = get_watcher_data(&mut stream_watcher);\n             let cb = data.read_cb.get_ref();\n             let status = status_to_maybe_uv_error(stream, nread as c_int);\n@@ -270,14 +262,11 @@ pub impl StreamWatcher {\n         let _v = vec_from_uv_buf(buf);\n \n         extern fn write_cb(req: *uvll::uv_write_t, status: c_int) {\n-            let write_request: WriteRequest =\n-                NativeHandle::from_native_handle(req);\n+            let write_request: WriteRequest = NativeHandle::from_native_handle(req);\n             let mut stream_watcher = write_request.stream();\n             write_request.delete();\n-            let cb = get_watcher_data(&mut stream_watcher)\n-                .write_cb.swap_unwrap();\n-            let status = status_to_maybe_uv_error(\n-                stream_watcher.native_handle(), status);\n+            let cb = get_watcher_data(&mut stream_watcher).write_cb.swap_unwrap();\n+            let status = status_to_maybe_uv_error(stream_watcher.native_handle(), status);\n             cb(stream_watcher, status);\n         }\n     }\n@@ -301,8 +290,7 @@ pub impl StreamWatcher {\n         unsafe { uvll::close(self.native_handle(), close_cb); }\n \n         extern fn close_cb(handle: *uvll::uv_stream_t) {\n-            let mut stream_watcher: StreamWatcher =\n-                NativeHandle::from_native_handle(handle);\n+            let mut stream_watcher: StreamWatcher = NativeHandle::from_native_handle(handle);\n             {\n                 let mut data = get_watcher_data(&mut stream_watcher);\n                 data.close_cb.swap_unwrap()();\n@@ -382,16 +370,14 @@ pub impl TcpWatcher {\n \n             extern fn connect_cb(req: *uvll::uv_connect_t, status: c_int) {\n                 rtdebug!(\"connect_t: %x\", req as uint);\n-                let connect_request: ConnectRequest =\n-                    NativeHandle::from_native_handle(req);\n+                let connect_request: ConnectRequest = NativeHandle::from_native_handle(req);\n                 let mut stream_watcher = connect_request.stream();\n                 connect_request.delete();\n                 let cb: ConnectionCallback = {\n                     let data = get_watcher_data(&mut stream_watcher);\n                     data.connect_cb.swap_unwrap()\n                 };\n-                let status = status_to_maybe_uv_error(\n-                    stream_watcher.native_handle(), status);\n+                let status = status_to_maybe_uv_error(stream_watcher.native_handle(), status);\n                 cb(stream_watcher, status);\n             }\n         }\n@@ -412,19 +398,15 @@ pub impl TcpWatcher {\n \n         extern fn connection_cb(handle: *uvll::uv_stream_t, status: c_int) {\n             rtdebug!(\"connection_cb\");\n-            let mut stream_watcher: StreamWatcher =\n-                NativeHandle::from_native_handle(handle);\n-            let cb = get_watcher_data(&mut stream_watcher)\n-                .connect_cb.swap_unwrap();\n-            let status = status_to_maybe_uv_error(\n-                stream_watcher.native_handle(), status);\n+            let mut stream_watcher: StreamWatcher = NativeHandle::from_native_handle(handle);\n+            let cb = get_watcher_data(&mut stream_watcher).connect_cb.swap_unwrap();\n+            let status = status_to_maybe_uv_error(stream_watcher.native_handle(), status);\n             cb(stream_watcher, status);\n         }\n     }\n \n     fn as_stream(&self) -> StreamWatcher {\n-        NativeHandle::from_native_handle(\n-            self.native_handle() as *uvll::uv_stream_t)\n+        NativeHandle::from_native_handle(self.native_handle() as *uvll::uv_stream_t)\n     }\n }\n \n@@ -460,9 +442,7 @@ impl ConnectRequest {\n \n     fn stream(&self) -> StreamWatcher {\n         unsafe {\n-            let stream_handle =\n-                uvll::get_stream_handle_from_connect_req(\n-                    self.native_handle());\n+            let stream_handle = uvll::get_stream_handle_from_connect_req(self.native_handle());\n             NativeHandle::from_native_handle(stream_handle)\n         }\n     }\n@@ -499,8 +479,7 @@ impl WriteRequest {\n \n     fn stream(&self) -> StreamWatcher {\n         unsafe {\n-            let stream_handle =\n-                uvll::get_stream_handle_from_write_req(self.native_handle());\n+            let stream_handle = uvll::get_stream_handle_from_write_req(self.native_handle());\n             NativeHandle::from_native_handle(stream_handle)\n         }\n     }\n@@ -609,8 +588,7 @@ fn drop_watcher_callback<H, W: Watcher + NativeHandle<*H>, CB: Callback>(\n             // Take ownership of the callback and drop it\n             let _cb = transmute::<*c_void, ~CB>(handle_data);\n             // Make sure the pointer is zeroed\n-            uvll::set_data_for_uv_handle(\n-                watcher.native_handle(), null::<()>());\n+            uvll::set_data_for_uv_handle(watcher.native_handle(), null::<()>());\n         }\n     }\n }"}, {"sha": "53156ccc73d1fdb354b33405c84d0138fe7e157b", "filename": "src/libcore/rt/uvio.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42cba98509c6da6e7f99d1d8c87f3051cb9598d4/src%2Flibcore%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cba98509c6da6e7f99d1d8c87f3051cb9598d4/src%2Flibcore%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvio.rs?ref=42cba98509c6da6e7f99d1d8c87f3051cb9598d4", "patch": "@@ -189,12 +189,9 @@ impl TcpListener for UvTcpListener {\n                 do server_tcp_watcher.listen |server_stream_watcher, status| {\n                     let maybe_stream = if status.is_none() {\n                         let mut server_stream_watcher = server_stream_watcher;\n-                        let mut loop_ =\n-                            loop_from_watcher(&server_stream_watcher);\n-                        let mut client_tcp_watcher =\n-                            TcpWatcher::new(&mut loop_);\n-                        let mut client_tcp_watcher =\n-                            client_tcp_watcher.as_stream();\n+                        let mut loop_ = loop_from_watcher(&server_stream_watcher);\n+                        let mut client_tcp_watcher = TcpWatcher::new(&mut loop_);\n+                        let mut client_tcp_watcher = client_tcp_watcher.as_stream();\n                         // XXX: Need's to be surfaced in interface\n                         server_stream_watcher.accept(client_tcp_watcher);\n                         Some(~UvStream::new(client_tcp_watcher))\n@@ -425,8 +422,7 @@ fn test_read_and_block() {\n                         // Yield to the other task in hopes that it\n                         // will trigger a read callback while we are\n                         // not ready for it\n-                        do scheduler.block_running_task_and_then\n-                            |scheduler, task| {\n+                        do scheduler.block_running_task_and_then |scheduler, task| {\n                             scheduler.task_queue.push_back(task);\n                         }\n                     }"}, {"sha": "3606c9f4dd6511ca74c534e1e723a68d210ee914", "filename": "src/libcore/rt/uvll.rs", "status": "modified", "additions": 32, "deletions": 67, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/42cba98509c6da6e7f99d1d8c87f3051cb9598d4/src%2Flibcore%2Frt%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42cba98509c6da6e7f99d1d8c87f3051cb9598d4/src%2Flibcore%2Frt%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvll.rs?ref=42cba98509c6da6e7f99d1d8c87f3051cb9598d4", "patch": "@@ -162,8 +162,7 @@ pub unsafe fn idle_delete(handle: *uv_idle_t) {\n     rust_uv_idle_delete(handle)\n }\n \n-pub unsafe fn idle_init(loop_handle: *uv_loop_t,\n-                        handle: *uv_idle_t) -> c_int {\n+pub unsafe fn idle_init(loop_handle: *uv_loop_t, handle: *uv_idle_t) -> c_int {\n     rust_uv_idle_init(loop_handle, handle)\n }\n \n@@ -183,8 +182,7 @@ pub unsafe fn tcp_init(loop_handle: *c_void, handle: *uv_tcp_t) -> c_int {\n pub unsafe fn tcp_connect(connect_ptr: *uv_connect_t,\n                           tcp_handle_ptr: *uv_tcp_t,\n                           addr_ptr: *sockaddr_in,\n-                          after_connect_cb: *u8)\n--> libc::c_int {\n+                          after_connect_cb: *u8) -> c_int {\n     return rust_uv_tcp_connect(connect_ptr, tcp_handle_ptr,\n                                        after_connect_cb, addr_ptr);\n }\n@@ -197,50 +195,37 @@ pub unsafe fn tcp_connect6(connect_ptr: *uv_connect_t,\n                                         after_connect_cb, addr_ptr);\n }\n // FIXME ref #2064\n-pub unsafe fn tcp_bind(tcp_server_ptr: *uv_tcp_t,\n-                       addr_ptr: *sockaddr_in) -> c_int {\n-    return rust_uv_tcp_bind(tcp_server_ptr,\n-                                 addr_ptr);\n+pub unsafe fn tcp_bind(tcp_server_ptr: *uv_tcp_t, addr_ptr: *sockaddr_in) -> c_int {\n+    return rust_uv_tcp_bind(tcp_server_ptr, addr_ptr);\n }\n // FIXME ref #2064\n-pub unsafe fn tcp_bind6(tcp_server_ptr: *uv_tcp_t,\n-                        addr_ptr: *sockaddr_in6) -> c_int {\n-    return rust_uv_tcp_bind6(tcp_server_ptr,\n-                                 addr_ptr);\n+pub unsafe fn tcp_bind6(tcp_server_ptr: *uv_tcp_t, addr_ptr: *sockaddr_in6) -> c_int {\n+    return rust_uv_tcp_bind6(tcp_server_ptr, addr_ptr);\n }\n \n-pub unsafe fn tcp_getpeername(tcp_handle_ptr: *uv_tcp_t,\n-                              name: *sockaddr_in) -> c_int {\n+pub unsafe fn tcp_getpeername(tcp_handle_ptr: *uv_tcp_t, name: *sockaddr_in) -> c_int {\n     return rust_uv_tcp_getpeername(tcp_handle_ptr, name);\n }\n \n-pub unsafe fn tcp_getpeername6(tcp_handle_ptr: *uv_tcp_t,\n-                               name: *sockaddr_in6) ->c_int {\n+pub unsafe fn tcp_getpeername6(tcp_handle_ptr: *uv_tcp_t, name: *sockaddr_in6) ->c_int {\n     return rust_uv_tcp_getpeername6(tcp_handle_ptr, name);\n }\n \n-pub unsafe fn listen<T>(stream: *T, backlog: c_int,\n-                        cb: *u8) -> c_int {\n+pub unsafe fn listen<T>(stream: *T, backlog: c_int, cb: *u8) -> c_int {\n     return rust_uv_listen(stream as *c_void, backlog, cb);\n }\n \n pub unsafe fn accept(server: *c_void, client: *c_void) -> c_int {\n-    return rust_uv_accept(server as *c_void,\n-                               client as *c_void);\n+    return rust_uv_accept(server as *c_void, client as *c_void);\n }\n \n-pub unsafe fn write<T>(req: *uv_write_t, stream: *T,\n-         buf_in: *~[uv_buf_t], cb: *u8) -> c_int {\n+pub unsafe fn write<T>(req: *uv_write_t, stream: *T, buf_in: *~[uv_buf_t], cb: *u8) -> c_int {\n     let buf_ptr = vec::raw::to_ptr(*buf_in);\n     let buf_cnt = vec::len(*buf_in) as i32;\n-    return rust_uv_write(req as *c_void,\n-                              stream as *c_void,\n-                              buf_ptr, buf_cnt, cb);\n+    return rust_uv_write(req as *c_void, stream as *c_void, buf_ptr, buf_cnt, cb);\n }\n-pub unsafe fn read_start(stream: *uv_stream_t, on_alloc: *u8,\n-                     on_read: *u8) -> c_int {\n-    return rust_uv_read_start(stream as *c_void,\n-                                   on_alloc, on_read);\n+pub unsafe fn read_start(stream: *uv_stream_t, on_alloc: *u8, on_read: *u8) -> c_int {\n+    return rust_uv_read_start(stream as *c_void, on_alloc, on_read);\n }\n \n pub unsafe fn read_stop(stream: *uv_stream_t) -> c_int {\n@@ -258,12 +243,8 @@ pub unsafe fn err_name(err: *uv_err_t) -> *c_char {\n     return rust_uv_err_name(err);\n }\n \n-pub unsafe fn async_init(loop_handle: *c_void,\n-                         async_handle: *uv_async_t,\n-                         cb: *u8) -> c_int {\n-    return rust_uv_async_init(loop_handle,\n-                                      async_handle,\n-                                      cb);\n+pub unsafe fn async_init(loop_handle: *c_void, async_handle: *uv_async_t, cb: *u8) -> c_int {\n+    return rust_uv_async_init(loop_handle, async_handle, cb);\n }\n \n pub unsafe fn async_send(async_handle: *uv_async_t) {\n@@ -276,31 +257,25 @@ pub unsafe fn buf_init(input: *u8, len: uint) -> uv_buf_t {\n     return out_buf;\n }\n \n-pub unsafe fn timer_init(loop_ptr: *c_void,\n-                         timer_ptr: *uv_timer_t) -> c_int {\n+pub unsafe fn timer_init(loop_ptr: *c_void, timer_ptr: *uv_timer_t) -> c_int {\n     return rust_uv_timer_init(loop_ptr, timer_ptr);\n }\n pub unsafe fn timer_start(timer_ptr: *uv_timer_t, cb: *u8, timeout: uint,\n                           repeat: uint) -> c_int {\n-    return rust_uv_timer_start(timer_ptr, cb, timeout as c_uint,\n-                                       repeat as c_uint);\n+    return rust_uv_timer_start(timer_ptr, cb, timeout as c_uint, repeat as c_uint);\n }\n pub unsafe fn timer_stop(timer_ptr: *uv_timer_t) -> c_int {\n     return rust_uv_timer_stop(timer_ptr);\n }\n \n-pub unsafe fn malloc_ip4_addr(ip: &str, port: int)\n--> *sockaddr_in {\n+pub unsafe fn malloc_ip4_addr(ip: &str, port: int) -> *sockaddr_in {\n     do str::as_c_str(ip) |ip_buf| {\n-        rust_uv_ip4_addrp(ip_buf as *u8,\n-                                  port as libc::c_int)\n+        rust_uv_ip4_addrp(ip_buf as *u8, port as libc::c_int)\n     }\n }\n-pub unsafe fn malloc_ip6_addr(ip: &str, port: int)\n--> *sockaddr_in6 {\n+pub unsafe fn malloc_ip6_addr(ip: &str, port: int) -> *sockaddr_in6 {\n     do str::as_c_str(ip) |ip_buf| {\n-        rust_uv_ip6_addrp(ip_buf as *u8,\n-                                  port as libc::c_int)\n+        rust_uv_ip6_addrp(ip_buf as *u8, port as libc::c_int)\n     }\n }\n \n@@ -316,39 +291,29 @@ pub unsafe fn free_ip6_addr(addr: *sockaddr_in6) {\n pub unsafe fn get_loop_for_uv_handle<T>(handle: *T) -> *c_void {\n     return rust_uv_get_loop_for_uv_handle(handle as *c_void);\n }\n-pub unsafe fn get_stream_handle_from_connect_req(connect: *uv_connect_t)\n-    -> *uv_stream_t {\n-    return rust_uv_get_stream_handle_from_connect_req(\n-        connect);\n+pub unsafe fn get_stream_handle_from_connect_req(connect: *uv_connect_t) -> *uv_stream_t {\n+    return rust_uv_get_stream_handle_from_connect_req(connect);\n }\n-pub unsafe fn get_stream_handle_from_write_req(\n-    write_req: *uv_write_t)\n-    -> *uv_stream_t {\n-    return rust_uv_get_stream_handle_from_write_req(\n-        write_req);\n+pub unsafe fn get_stream_handle_from_write_req(write_req: *uv_write_t) -> *uv_stream_t {\n+    return rust_uv_get_stream_handle_from_write_req(write_req);\n }\n pub unsafe fn get_data_for_uv_loop(loop_ptr: *c_void) -> *c_void {\n     rust_uv_get_data_for_uv_loop(loop_ptr)\n }\n-pub unsafe fn set_data_for_uv_loop(loop_ptr: *c_void,\n-                                   data: *c_void) {\n+pub unsafe fn set_data_for_uv_loop(loop_ptr: *c_void, data: *c_void) {\n     rust_uv_set_data_for_uv_loop(loop_ptr, data);\n }\n pub unsafe fn get_data_for_uv_handle<T>(handle: *T) -> *c_void {\n     return rust_uv_get_data_for_uv_handle(handle as *c_void);\n }\n-pub unsafe fn set_data_for_uv_handle<T, U>(handle: *T,\n-                    data: *U) {\n-    rust_uv_set_data_for_uv_handle(handle as *c_void,\n-                                           data as *c_void);\n+pub unsafe fn set_data_for_uv_handle<T, U>(handle: *T, data: *U) {\n+    rust_uv_set_data_for_uv_handle(handle as *c_void, data as *c_void);\n }\n pub unsafe fn get_data_for_req<T>(req: *T) -> *c_void {\n     return rust_uv_get_data_for_req(req as *c_void);\n }\n-pub unsafe fn set_data_for_req<T, U>(req: *T,\n-                                     data: *U) {\n-    rust_uv_set_data_for_req(req as *c_void,\n-                                     data as *c_void);\n+pub unsafe fn set_data_for_req<T, U>(req: *T, data: *U) {\n+    rust_uv_set_data_for_req(req as *c_void, data as *c_void);\n }\n pub unsafe fn get_base_from_buf(buf: uv_buf_t) -> *u8 {\n     return rust_uv_get_base_from_buf(buf);\n@@ -372,7 +337,7 @@ pub unsafe fn get_last_err_info(uv_loop: *c_void) -> ~str {\n                     err_name, err_msg);\n }\n \n-pub unsafe fn get_last_err_data(uv_loop: *libc::c_void) -> uv_err_data {\n+pub unsafe fn get_last_err_data(uv_loop: *c_void) -> uv_err_data {\n     let err = last_error(uv_loop);\n     let err_ptr = ptr::addr_of(&err);\n     let err_name = str::raw::from_c_str(err_name(err_ptr));"}]}