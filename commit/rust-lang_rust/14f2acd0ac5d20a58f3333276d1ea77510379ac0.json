{"sha": "14f2acd0ac5d20a58f3333276d1ea77510379ac0", "node_id": "C_kwDOAAsO6NoAKDE0ZjJhY2QwYWM1ZDIwYTU4ZjMzMzMyNzZkMWVhNzc1MTAzNzlhYzA", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-08T15:02:09Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-09T11:08:07Z"}, "message": "`resolve_instance`: remove `BoundVarsCollector`", "tree": {"sha": "6dd4f15bb5736a9551915b4310982e38b8602b84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dd4f15bb5736a9551915b4310982e38b8602b84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14f2acd0ac5d20a58f3333276d1ea77510379ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14f2acd0ac5d20a58f3333276d1ea77510379ac0", "html_url": "https://github.com/rust-lang/rust/commit/14f2acd0ac5d20a58f3333276d1ea77510379ac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14f2acd0ac5d20a58f3333276d1ea77510379ac0/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a09adf99fff9b009ff517b9cf5bfce363130e16", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a09adf99fff9b009ff517b9cf5bfce363130e16", "html_url": "https://github.com/rust-lang/rust/commit/4a09adf99fff9b009ff517b9cf5bfce363130e16"}], "stats": {"total": 111, "additions": 3, "deletions": 108}, "files": [{"sha": "392aa6a88186ea4acce3e21a3d8bf2ca01b0f0ef", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 3, "deletions": 108, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/14f2acd0ac5d20a58f3333276d1ea77510379ac0/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f2acd0ac5d20a58f3333276d1ea77510379ac0/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=14f2acd0ac5d20a58f3333276d1ea77510379ac0", "patch": "@@ -4,112 +4,12 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::traits::CodegenObligationError;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{\n-    self, Binder, Instance, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self, Instance, TyCtxt, TypeVisitable,\n };\n use rustc_span::{sym, DUMMY_SP};\n use rustc_trait_selection::traits;\n use traits::{translate_substs, Reveal};\n \n-use rustc_data_structures::sso::SsoHashSet;\n-use std::collections::btree_map::Entry;\n-use std::collections::BTreeMap;\n-use std::ops::ControlFlow;\n-\n-// FIXME(#86795): `BoundVarsCollector` here should **NOT** be used\n-// outside of `resolve_associated_item`. It's just to address #64494,\n-// #83765, and #85848 which are creating bound types/regions that lose\n-// their `Binder` *unintentionally*.\n-// It's ideal to remove `BoundVarsCollector` and just use\n-// `ty::Binder::*` methods but we use this stopgap until we figure out\n-// the \"real\" fix.\n-struct BoundVarsCollector<'tcx> {\n-    binder_index: ty::DebruijnIndex,\n-    vars: BTreeMap<u32, ty::BoundVariableKind>,\n-    // We may encounter the same variable at different levels of binding, so\n-    // this can't just be `Ty`\n-    visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,\n-}\n-\n-impl<'tcx> BoundVarsCollector<'tcx> {\n-    fn new() -> Self {\n-        BoundVarsCollector {\n-            binder_index: ty::INNERMOST,\n-            vars: BTreeMap::new(),\n-            visited: SsoHashSet::default(),\n-        }\n-    }\n-\n-    fn into_vars(self, tcx: TyCtxt<'tcx>) -> &'tcx ty::List<ty::BoundVariableKind> {\n-        let max = self.vars.iter().map(|(k, _)| *k).max().unwrap_or(0);\n-        for i in 0..max {\n-            if let None = self.vars.get(&i) {\n-                panic!(\"Unknown variable: {:?}\", i);\n-            }\n-        }\n-\n-        tcx.mk_bound_variable_kinds(self.vars.into_iter().map(|(_, v)| v))\n-    }\n-}\n-\n-impl<'tcx> TypeVisitor<'tcx> for BoundVarsCollector<'tcx> {\n-    type BreakTy = ();\n-\n-    fn visit_binder<T: TypeVisitable<'tcx>>(\n-        &mut self,\n-        t: &Binder<'tcx, T>,\n-    ) -> ControlFlow<Self::BreakTy> {\n-        self.binder_index.shift_in(1);\n-        let result = t.super_visit_with(self);\n-        self.binder_index.shift_out(1);\n-        result\n-    }\n-\n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if t.outer_exclusive_binder() < self.binder_index\n-            || !self.visited.insert((self.binder_index, t))\n-        {\n-            return ControlFlow::CONTINUE;\n-        }\n-        match *t.kind() {\n-            ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n-                match self.vars.entry(bound_ty.var.as_u32()) {\n-                    Entry::Vacant(entry) => {\n-                        entry.insert(ty::BoundVariableKind::Ty(bound_ty.kind));\n-                    }\n-                    Entry::Occupied(entry) => match entry.get() {\n-                        ty::BoundVariableKind::Ty(_) => {}\n-                        _ => bug!(\"Conflicting bound vars\"),\n-                    },\n-                }\n-            }\n-\n-            _ => (),\n-        };\n-\n-        t.super_visit_with(self)\n-    }\n-\n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        match *r {\n-            ty::ReLateBound(index, br) if index == self.binder_index => {\n-                match self.vars.entry(br.var.as_u32()) {\n-                    Entry::Vacant(entry) => {\n-                        entry.insert(ty::BoundVariableKind::Region(br.kind));\n-                    }\n-                    Entry::Occupied(entry) => match entry.get() {\n-                        ty::BoundVariableKind::Region(_) => {}\n-                        _ => bug!(\"Conflicting bound vars\"),\n-                    },\n-                }\n-            }\n-\n-            _ => (),\n-        };\n-\n-        r.super_visit_with(self)\n-    }\n-}\n-\n fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n@@ -201,19 +101,14 @@ fn resolve_associated_item<'tcx>(\n \n     let trait_ref = ty::TraitRef::from_method(tcx, trait_id, rcvr_substs);\n \n-    // See FIXME on `BoundVarsCollector`.\n-    let mut bound_vars_collector = BoundVarsCollector::new();\n-    trait_ref.visit_with(&mut bound_vars_collector);\n-    let trait_binder = ty::Binder::bind_with_vars(trait_ref, bound_vars_collector.into_vars(tcx));\n-    let vtbl = match tcx.codegen_fulfill_obligation((param_env, trait_binder)) {\n+    let vtbl = match tcx.codegen_fulfill_obligation((param_env, ty::Binder::dummy(trait_ref))) {\n         Ok(vtbl) => vtbl,\n         Err(CodegenObligationError::Ambiguity) => {\n             let reported = tcx.sess.delay_span_bug(\n                 tcx.def_span(trait_item_id),\n                 &format!(\n-                    \"encountered ambiguity selecting `{:?}` during codegen, presuming due to \\\n+                    \"encountered ambiguity selecting `{trait_ref:?}` during codegen, presuming due to \\\n                      overflow or prior type error\",\n-                    trait_binder\n                 ),\n             );\n             return Err(reported);"}]}