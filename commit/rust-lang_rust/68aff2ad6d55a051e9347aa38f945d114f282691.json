{"sha": "68aff2ad6d55a051e9347aa38f945d114f282691", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YWZmMmFkNmQ1NWEwNTFlOTM0N2FhMzhmOTQ1ZDExNGYyODI2OTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-11-14T21:52:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-17T02:00:57Z"}, "message": "rt: More work on morestack", "tree": {"sha": "8ebf0d163fd9016b4b1164de3ebc4acd64e97137", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ebf0d163fd9016b4b1164de3ebc4acd64e97137"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68aff2ad6d55a051e9347aa38f945d114f282691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68aff2ad6d55a051e9347aa38f945d114f282691", "html_url": "https://github.com/rust-lang/rust/commit/68aff2ad6d55a051e9347aa38f945d114f282691", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68aff2ad6d55a051e9347aa38f945d114f282691/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "819955844387a666b31039a030379287106dc488", "url": "https://api.github.com/repos/rust-lang/rust/commits/819955844387a666b31039a030379287106dc488", "html_url": "https://github.com/rust-lang/rust/commit/819955844387a666b31039a030379287106dc488"}], "stats": {"total": 174, "additions": 144, "deletions": 30}, "files": [{"sha": "1d6634557d08b815a5544c4c9c0982bc4076bba0", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68aff2ad6d55a051e9347aa38f945d114f282691/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/68aff2ad6d55a051e9347aa38f945d114f282691/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=68aff2ad6d55a051e9347aa38f945d114f282691", "patch": "@@ -67,7 +67,8 @@ RUNTIME_CS_$(1) := \\\n \n RUNTIME_S_$(1) := rt/arch/$$(HOST_$(1))/_context.S \\\n                   rt/arch/$$(HOST_$(1))/ccall.S \\\n-                  rt/arch/$$(HOST_$(1))/morestack.S\n+                  rt/arch/$$(HOST_$(1))/morestack.S \\\n+                  rt/arch/$$(HOST_$(1))/record_sp.S\n \n RUNTIME_HDR_$(1) := rt/globals.h \\\n                rt/rust.h \\"}, {"sha": "ec356ea91c699cc5cd68bfa4ad64f6e348df85d0", "filename": "src/rt/arch/i386/morestack.S", "status": "modified", "additions": 98, "deletions": 21, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/68aff2ad6d55a051e9347aa38f945d114f282691/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/68aff2ad6d55a051e9347aa38f945d114f282691/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fmorestack.S?ref=68aff2ad6d55a051e9347aa38f945d114f282691", "patch": "@@ -2,40 +2,117 @@\n \n // __morestack\n //\n-// LLVM generates a call to this to allocate more stack space in a functiono\n+// LLVM generates a call to this to allocate more stack space in a function\n // prolog when we run out.\n \n #if defined(__APPLE__) || defined(_WIN32)\n-#define RUST_NEW_STACK      _rust_new_stack\n-#define RUST_DEL_STACK      _rust_del_stack\n-#define MORESTACK           ___morestack\n+#define RUST_NEW_STACK          _rust_new_stack\n+#define RUST_DEL_STACK          _rust_del_stack\n+#define RUST_GET_PREV_STACK     _rust_get_prev_stack\n+#define RUST_GET_TASK           _rust_get_task\n+#define UPCALL_ALLOC_C_STACK    _upcall_alloc_c_stack\n+#define UPCALL_CALL_C_STACK     _upcall_call_c_stack\n+#define MORESTACK               ___morestack\n #else\n-#define RUST_NEW_STACK      rust_new_stack\n-#define RUST_DEL_STACK      rust_del_stack\n-#define MORESTACK           __morestack\n+#define RUST_NEW_STACK          rust_new_stack\n+#define RUST_DEL_STACK          rust_del_stack\n+#define RUST_GET_PREV_STACK     rust_get_prev_stack\n+#define RUST_GET_TASK           rust_get_task\n+#define UPCALL_ALLOC_C_STACK    upcall_alloc_c_stack\n+#define UPCALL_CALL_C_STACK     upcall_call_c_stack\n+#define MORESTACK               __morestack\n #endif\n \n+#ifdef __APPLE__\n+#define ALIGNMENT               4\n+#else\n+#define ALIGNMENT               8\n+#endif\n+\n+#define RETURN_OFFSET   7\n+\n .globl RUST_NEW_STACK\n .globl RUST_DEL_STACK\n-\n+.globl RUST_GET_PREV_STACK\n+.globl RUST_GET_TASK\n+.globl UPCALL_ALLOC_C_STACK\n+.globl UPCALL_CALL_C_STACK\n .globl MORESTACK\n \n MORESTACK:\n-    pushl 8(%esp)           //              argsz > ra stksz argsz x x ra args\n-    leal 28(%esp),%eax      //                argsz ra stksz argsz x x ra args\n-    pushl %eax              //         argp > argsz ra stksz argsz x x ra args\n-    pushl 12(%esp)          //   stksz > argp argsz ra stksz argsz x x ra args\n-    calll RUST_NEW_STACK\n-    addl $12,%esp           //                      ra stksz argsz x x ra args\n-\n-    movl (%esp),%edx        // Grab the return pointer.\n-    incl %edx               // Skip past the `ret`.\n-    movl %eax,%esp          // Switch to the new stack.\n+\n+    // Sanity check to make sure that there is a currently-running task.\n+    subl $12,%esp\n+    calll RUST_GET_TASK\n+    testl %eax,%eax\n+    jz L$bail\n+\n+    subl $12,%esp\n+    pushl $12\n+    calll UPCALL_ALLOC_C_STACK\n+    movl %eax,%edx\n+\n+                            // C stack              | esp+12\n+                            // ---------------------+-------------------------\n+    movl 20(%esp),%eax      //                      | ra stksz argsz x ra args\n+    movl %eax,8(%edx)       //              argsz > | ra stksz argsz x ra args\n+    leal 32(%esp),%eax      //                argsz | ra stksz argsz x ra args\n+    movl %eax,4(%edx)       //         argp > argsz | ra stksz argsz x ra args\n+    movl 16(%esp),%eax      //           argp argsz | ra stksz argsz x ra args\n+    movl %eax,(%edx)        //   stksz > argp argsz | ra stksz argsz x ra args\n+\n+    calll L$pic_ref_pt_0\n+L$pic_ref_pt_0:\n+    popl %eax\n+\n+    movl rust_new_stack_sym-L$pic_ref_pt_0(%eax),%eax\n+    movl %eax,(%esp)\n+    movl %edx,4(%esp)\n+    calll UPCALL_CALL_C_STACK\n+\n+    movl 16(%esp),%edx          // Grab the return pointer.\n+    addl $RETURN_OFFSET,%edx    // Skip past the `add esp,4` and the `ret`.\n+\n+    movl %eax,%esp          // Switch stacks.\n+    subl $12,%esp           // Align the stack.\n     calll *%edx             // Re-enter the function that called us.\n \n     // Now the function that called us has returned, so we need to delete the\n     // old stack space.\n-    calll RUST_DEL_STACK\n-    movl %eax,%esp\n-    retl $8                 //                      ra stksz argsz x x ra args\n+\n+    calll RUST_GET_PREV_STACK\n+    movl %eax,%esp          // Switch back to the old stack.\n+\n+    movl $0,(%esp)\n+    calll UPCALL_ALLOC_C_STACK\n+\n+    calll L$pic_ref_pt_1\n+L$pic_ref_pt_1:\n+    popl %edx\n+\n+    movl rust_del_stack_sym-L$pic_ref_pt_1(%edx),%edx\n+    movl %edx,(%esp)\n+    movl %eax,4(%esp)\n+    calll UPCALL_CALL_C_STACK\n+\n+    addl $16,%esp\n+    retl $16 + ALIGNMENT    //                      ra stksz argsz x ra args\n+\n+L$bail:\n+    movl 12(%esp),%edx\n+    addl $RETURN_OFFSET,%edx\n+    addl $12+16,%esp\n+    jmpl *%edx\n+\n+#ifdef __APPLE__\n+\n+\t.section\t__IMPORT,__pointers,non_lazy_symbol_pointers\n+rust_new_stack_sym:\n+    .indirect_symbol RUST_NEW_STACK\n+    .long 0\n+rust_del_stack_sym:\n+    .indirect_symbol RUST_DEL_STACK\n+    .long 0\n+\n+#endif\n "}, {"sha": "0049537bd33fed1610d755f4ae2beeff9f52138b", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68aff2ad6d55a051e9347aa38f945d114f282691/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/68aff2ad6d55a051e9347aa38f945d114f282691/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=68aff2ad6d55a051e9347aa38f945d114f282691", "patch": "@@ -1,4 +1,5 @@\n #include \"rust_internal.h\"\n+#include <cstdio>\n \n struct\n command_line_args : public kernel_owned<command_line_args>\n@@ -75,6 +76,8 @@ int check_claims = 0;\n \n extern \"C\" CDECL int\n rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n+    fprintf(stderr, \"rust_start, argc=%d argv=%p\\n\", argc, argv);\n+\n     rust_env *env = load_env();\n \n     update_log_settings(crate_map, env->logspec);"}, {"sha": "b17565dda465d3706caf5b2a279e17bb6c71e210", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68aff2ad6d55a051e9347aa38f945d114f282691/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/68aff2ad6d55a051e9347aa38f945d114f282691/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=68aff2ad6d55a051e9347aa38f945d114f282691", "patch": "@@ -1,6 +1,7 @@\n \n #include <stdarg.h>\n #include <cassert>\n+#include <pthread.h>\n #include \"rust_internal.h\"\n #include \"globals.h\"\n \n@@ -12,6 +13,9 @@ DWORD rust_scheduler::task_key;\n \n bool rust_scheduler::tls_initialized = false;\n \n+// Defined in arch/*/record_sp.S.\n+extern \"C\" void rust_record_sp(uintptr_t sp);\n+\n rust_scheduler::rust_scheduler(rust_kernel *kernel,\n                                rust_srv *srv,\n                                int id) :\n@@ -285,6 +289,8 @@ rust_scheduler::start_main_loop() {\n              scheduled_task->state->name);\n \n         place_task_in_tls(scheduled_task);\n+        rust_record_sp(scheduled_task->stk->limit);\n+        //pthread_setspecific(89, (void *)scheduled_task->stk->limit);\n \n         interrupt_flag = 0;\n \n@@ -374,6 +380,8 @@ rust_scheduler::place_task_in_tls(rust_task *task) {\n \n rust_task *\n rust_scheduler::get_task() {\n+    if (!tls_initialized)\n+        return NULL;\n     rust_task *task = reinterpret_cast<rust_task *>\n         (pthread_getspecific(task_key));\n     assert(task && \"Couldn't get the task from TLS!\");\n@@ -395,6 +403,8 @@ rust_scheduler::place_task_in_tls(rust_task *task) {\n \n rust_task *\n rust_scheduler::get_task() {\n+    if (!tls_initialized)\n+        return NULL;\n     rust_task *task = reinterpret_cast<rust_task *>(TlsGetValue(task_key));\n     assert(task && \"Couldn't get the task from TLS!\");\n     return task;"}, {"sha": "ae893c93fa084f66c5c0c996590b300530addadf", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/68aff2ad6d55a051e9347aa38f945d114f282691/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/68aff2ad6d55a051e9347aa38f945d114f282691/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=68aff2ad6d55a051e9347aa38f945d114f282691", "patch": "@@ -8,11 +8,14 @@\n #ifndef __WIN32__\n #include <execinfo.h>\n #endif\n+#include <iostream>\n #include <cassert>\n #include <cstring>\n \n #include \"globals.h\"\n \n+#define RED_ZONE_SIZE   128\n+\n // Stack size\n size_t g_custom_min_stack_size = 0;\n \n@@ -34,16 +37,16 @@ new_stk(rust_scheduler *sched, rust_task *task, size_t minsz)\n     size_t min_stk_bytes = get_min_stk_size(sched->min_stack_size);\n     if (minsz < min_stk_bytes)\n         minsz = min_stk_bytes;\n-    size_t sz = sizeof(stk_seg) + minsz;\n+    size_t sz = sizeof(stk_seg) + minsz + RED_ZONE_SIZE;\n     stk_seg *stk = (stk_seg *)task->malloc(sz, \"stack\");\n     LOGPTR(task->sched, \"new stk\", (uintptr_t)stk);\n     memset(stk, 0, sizeof(stk_seg));\n     stk->next = task->stk;\n-    stk->limit = (uintptr_t) &stk->data[minsz];\n+    stk->limit = (uintptr_t) &stk->data[minsz + RED_ZONE_SIZE];\n     LOGPTR(task->sched, \"stk limit\", stk->limit);\n     stk->valgrind_id =\n         VALGRIND_STACK_REGISTER(&stk->data[0],\n-                                &stk->data[minsz]);\n+                                &stk->data[minsz + RED_ZONE_SIZE]);\n     task->stk = stk;\n     return stk;\n }\n@@ -63,18 +66,32 @@ del_stk(rust_task *task, stk_seg *stk)\n // Entry points for `__morestack` (see arch/*/morestack.S).\n extern \"C\" void *\n rust_new_stack(size_t stk_sz, void *args_addr, size_t args_sz) {\n+    std::cerr << \"*** New stack!\\n\";\n+\n     rust_task *task = rust_scheduler::get_task();\n+    if (!task)\n+        return NULL;\n+\n     stk_seg *stk_seg = new_stk(task->sched, task, stk_sz);\n     memcpy(stk_seg->data, args_addr, args_sz);\n     return stk_seg->data;\n }\n \n-extern \"C\" void *\n+extern \"C\" void\n rust_del_stack() {\n     rust_task *task = rust_scheduler::get_task();\n-    stk_seg *next_seg = task->stk->next;\n     del_stk(task, task->stk);\n-    return next_seg->data;\n+}\n+\n+extern \"C\" void *\n+rust_get_prev_stack() {\n+    rust_task *task = rust_scheduler::get_task();\n+    return task->stk->next;\n+}\n+\n+extern \"C\" rust_task *\n+rust_get_task() {\n+    return rust_scheduler::get_task();\n }\n \n "}, {"sha": "bd051d01195eefd747301a5e9f6e5ead7287327e", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68aff2ad6d55a051e9347aa38f945d114f282691/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/68aff2ad6d55a051e9347aa38f945d114f282691/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=68aff2ad6d55a051e9347aa38f945d114f282691", "patch": "@@ -1,3 +1,4 @@\n+__morestack\n align_of\n chan_id_send\n check_claims\n@@ -28,20 +29,25 @@ rand_free\n rand_new\n rand_next\n refcount\n+rust_del_stack\n rust_file_is_dir\n+rust_getcwd\n+rust_get_prev_stack\n rust_get_stdin\n rust_get_stdout\n rust_get_stderr\n rust_str_push\n rust_list_files\n rust_port_detach\n rust_port_size\n+rust_new_stack\n rust_process_wait\n rust_ptr_eq\n rust_run_program\n rust_start\n rust_getcwd\n rust_task_sleep\n+rust_get_task\n set_min_stack\n sched_threads\n size_of\n@@ -63,10 +69,10 @@ upcall_dynastack_mark\n upcall_fail\n upcall_free\n upcall_get_type_desc\n-upcall_vec_grow\n-upcall_vec_push\n upcall_log_type\n upcall_malloc\n upcall_rust_personality\n upcall_shared_malloc\n upcall_shared_free\n+upcall_vec_grow\n+upcall_vec_push"}]}