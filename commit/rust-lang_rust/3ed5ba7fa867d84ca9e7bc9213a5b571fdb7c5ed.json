{"sha": "3ed5ba7fa867d84ca9e7bc9213a5b571fdb7c5ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZDViYTdmYTg2N2Q4NGNhOWU3YmM5MjEzYTViNTcxZmRiN2M1ZWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T11:48:08Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:29Z"}, "message": "extract parse_labeled_expr", "tree": {"sha": "740f9bcba5a7a1dbc20a9ba278bab534b20bf1d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/740f9bcba5a7a1dbc20a9ba278bab534b20bf1d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ed5ba7fa867d84ca9e7bc9213a5b571fdb7c5ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ed5ba7fa867d84ca9e7bc9213a5b571fdb7c5ed", "html_url": "https://github.com/rust-lang/rust/commit/3ed5ba7fa867d84ca9e7bc9213a5b571fdb7c5ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ed5ba7fa867d84ca9e7bc9213a5b571fdb7c5ed/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f0f86b6cae9a3ce8007eff5a655ae63899047dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f0f86b6cae9a3ce8007eff5a655ae63899047dc", "html_url": "https://github.com/rust-lang/rust/commit/5f0f86b6cae9a3ce8007eff5a655ae63899047dc"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "923e5d378c56cb61fb228242e22abdbb3ccd9124", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3ed5ba7fa867d84ca9e7bc9213a5b571fdb7c5ed/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ed5ba7fa867d84ca9e7bc9213a5b571fdb7c5ed/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=3ed5ba7fa867d84ca9e7bc9213a5b571fdb7c5ed", "patch": "@@ -867,35 +867,13 @@ impl<'a> Parser<'a> {\n                     return self.parse_if_expr(attrs);\n                 }\n                 if self.eat_keyword(kw::For) {\n-                    let lo = self.prev_span;\n-                    return self.parse_for_expr(None, lo, attrs);\n+                    return self.parse_for_expr(None, self.prev_span, attrs);\n                 }\n                 if self.eat_keyword(kw::While) {\n-                    let lo = self.prev_span;\n-                    return self.parse_while_expr(None, lo, attrs);\n+                    return self.parse_while_expr(None, self.prev_span, attrs);\n                 }\n                 if let Some(label) = self.eat_label() {\n-                    let lo = label.ident.span;\n-                    self.expect(&token::Colon)?;\n-                    if self.eat_keyword(kw::While) {\n-                        return self.parse_while_expr(Some(label), lo, attrs)\n-                    }\n-                    if self.eat_keyword(kw::For) {\n-                        return self.parse_for_expr(Some(label), lo, attrs)\n-                    }\n-                    if self.eat_keyword(kw::Loop) {\n-                        return self.parse_loop_expr(Some(label), lo, attrs)\n-                    }\n-                    if self.token == token::OpenDelim(token::Brace) {\n-                        return self.parse_block_expr(Some(label),\n-                                                     lo,\n-                                                     BlockCheckMode::Default,\n-                                                     attrs);\n-                    }\n-                    let msg = \"expected `while`, `for`, `loop` or `{` after a label\";\n-                    let mut err = self.fatal(msg);\n-                    err.span_label(self.token.span, msg);\n-                    return Err(err);\n+                    return self.parse_labeled_expr(label, attrs);\n                 }\n                 if self.eat_keyword(kw::Loop) {\n                     let lo = self.prev_span;\n@@ -1097,6 +1075,32 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n+    fn parse_labeled_expr(\n+        &mut self,\n+        label: Label,\n+        attrs: ThinVec<Attribute>,\n+    ) -> PResult<'a, P<Expr>> {\n+        let lo = label.ident.span;\n+        self.expect(&token::Colon)?;\n+        if self.eat_keyword(kw::While) {\n+            return self.parse_while_expr(Some(label), lo, attrs)\n+        }\n+        if self.eat_keyword(kw::For) {\n+            return self.parse_for_expr(Some(label), lo, attrs)\n+        }\n+        if self.eat_keyword(kw::Loop) {\n+            return self.parse_loop_expr(Some(label), lo, attrs)\n+        }\n+        if self.token == token::OpenDelim(token::Brace) {\n+            return self.parse_block_expr(Some(label), lo, BlockCheckMode::Default, attrs);\n+        }\n+\n+        let msg = \"expected `while`, `for`, `loop` or `{` after a label\";\n+        let mut err = self.fatal(msg);\n+        err.span_label(self.token.span, msg);\n+        return Err(err);\n+    }\n+\n     /// Returns a string literal if the next token is a string literal.\n     /// In case of error returns `Some(lit)` if the next token is a literal with a wrong kind,\n     /// and returns `None` if the next token is not literal at all."}]}