{"sha": "412f4d1fc7ec8858ee4c91abd78097ac48cb15ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMmY0ZDFmYzdlYzg4NThlZTRjOTFhYmQ3ODA5N2FjNDhjYjE1ZWY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-13T22:09:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-13T22:09:25Z"}, "message": "rollup merge of #17927 : alexcrichton/more-const", "tree": {"sha": "c65d36082a01074505f69b45278aedb7102b6476", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c65d36082a01074505f69b45278aedb7102b6476"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef", "html_url": "https://github.com/rust-lang/rust/commit/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9f241bc5d3edb5c18d5b64933823daeb6bb257c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9f241bc5d3edb5c18d5b64933823daeb6bb257c", "html_url": "https://github.com/rust-lang/rust/commit/e9f241bc5d3edb5c18d5b64933823daeb6bb257c"}, {"sha": "c56c9fcf08603ab88ec36a7e0757d29129339097", "url": "https://api.github.com/repos/rust-lang/rust/commits/c56c9fcf08603ab88ec36a7e0757d29129339097", "html_url": "https://github.com/rust-lang/rust/commit/c56c9fcf08603ab88ec36a7e0757d29129339097"}], "stats": {"total": 75, "additions": 34, "deletions": 41}, "files": [{"sha": "3f725b86420cd21160d52fab31f8bb9120f31390", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=412f4d1fc7ec8858ee4c91abd78097ac48cb15ef", "patch": "@@ -32,7 +32,7 @@ use syntax::ptr::P;\n use syntax::visit::{mod, Visitor, FnKind};\n use util::ppaux::ty_to_string;\n \n-pub const DUMMY_WILD_PAT: Pat = Pat {\n+pub const DUMMY_WILD_PAT: &'static Pat = &Pat {\n     id: DUMMY_NODE_ID,\n     node: PatWild(PatWildSingle),\n     span: DUMMY_SP\n@@ -309,12 +309,11 @@ fn raw_pat<'a>(p: &'a Pat) -> &'a Pat {\n }\n \n fn check_exhaustive(cx: &MatchCheckCtxt, sp: Span, matrix: &Matrix) {\n-    match is_useful(cx, matrix, &[&DUMMY_WILD_PAT], ConstructWitness) {\n+    match is_useful(cx, matrix, &[DUMMY_WILD_PAT], ConstructWitness) {\n         UsefulWithWitness(pats) => {\n-            let dummy = DUMMY_WILD_PAT.clone();\n             let witness = match pats.as_slice() {\n                 [ref witness] => &**witness,\n-                [] => &dummy,\n+                [] => DUMMY_WILD_PAT,\n                 _ => unreachable!()\n             };\n             span_err!(cx.tcx.sess, sp, E0004,\n@@ -568,9 +567,8 @@ fn is_useful(cx: &MatchCheckCtxt,\n                             let arity = constructor_arity(cx, &c, left_ty);\n                             let mut result = {\n                                 let pat_slice = pats.as_slice();\n-                                let dummy = DUMMY_WILD_PAT.clone();\n                                 let subpats = Vec::from_fn(arity, |i| {\n-                                    pat_slice.get(i).map_or(&dummy, |p| &**p)\n+                                    pat_slice.get(i).map_or(DUMMY_WILD_PAT, |p| &**p)\n                                 });\n                                 vec![construct_witness(cx, &c, subpats, left_ty)]\n                             };\n@@ -592,9 +590,8 @@ fn is_useful(cx: &MatchCheckCtxt,\n                 }).collect();\n                 match is_useful(cx, &matrix, v.tail(), witness) {\n                     UsefulWithWitness(pats) => {\n-                        let dummy = DUMMY_WILD_PAT.clone();\n                         let arity = constructor_arity(cx, &constructor, left_ty);\n-                        let wild_pats = Vec::from_elem(arity, &dummy);\n+                        let wild_pats = Vec::from_elem(arity, DUMMY_WILD_PAT);\n                         let enum_pat = construct_witness(cx, &constructor, wild_pats, left_ty);\n                         let mut new_pats = vec![enum_pat];\n                         new_pats.extend(pats.into_iter());\n@@ -615,11 +612,10 @@ fn is_useful_specialized(cx: &MatchCheckCtxt, &Matrix(ref m): &Matrix,\n                          v: &[&Pat], ctor: Constructor, lty: ty::t,\n                          witness: WitnessPreference) -> Usefulness {\n     let arity = constructor_arity(cx, &ctor, lty);\n-    let dummy = DUMMY_WILD_PAT.clone();\n     let matrix = Matrix(m.iter().filter_map(|r| {\n-        specialize(cx, r.as_slice(), &dummy, &ctor, 0u, arity)\n+        specialize(cx, r.as_slice(), &ctor, 0u, arity)\n     }).collect());\n-    match specialize(cx, v, &dummy, &ctor, 0u, arity) {\n+    match specialize(cx, v, &ctor, 0u, arity) {\n         Some(v) => is_useful(cx, &matrix, v.as_slice(), witness),\n         None => NotUseful\n     }\n@@ -741,15 +737,15 @@ fn range_covered_by_constructor(ctor: &Constructor,\n /// different patterns.\n /// Structure patterns with a partial wild pattern (Foo { a: 42, .. }) have their missing\n /// fields filled with wild patterns.\n-pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat], dummy: &'a Pat,\n+pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat],\n                       constructor: &Constructor, col: uint, arity: uint) -> Option<Vec<&'a Pat>> {\n     let &Pat {\n         id: pat_id, node: ref node, span: pat_span\n     } = raw_pat(r[col]);\n     let head: Option<Vec<&Pat>> = match node {\n \n         &PatWild(_) =>\n-            Some(Vec::from_elem(arity, dummy)),\n+            Some(Vec::from_elem(arity, DUMMY_WILD_PAT)),\n \n         &PatIdent(_, _, _) => {\n             let opt_def = cx.tcx.def_map.borrow().find_copy(&pat_id);\n@@ -762,7 +758,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat], dummy: &'a Pat,\n                 } else {\n                     None\n                 },\n-                _ => Some(Vec::from_elem(arity, dummy))\n+                _ => Some(Vec::from_elem(arity, DUMMY_WILD_PAT))\n             }\n         }\n \n@@ -776,7 +772,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat], dummy: &'a Pat,\n                 DefVariant(..) | DefStruct(..) => {\n                     Some(match args {\n                         &Some(ref args) => args.iter().map(|p| &**p).collect(),\n-                        &None => Vec::from_elem(arity, dummy)\n+                        &None => Vec::from_elem(arity, DUMMY_WILD_PAT)\n                     })\n                 }\n                 _ => None\n@@ -812,7 +808,7 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat], dummy: &'a Pat,\n                 let args = struct_fields.iter().map(|sf| {\n                     match pattern_fields.iter().find(|f| f.ident.name == sf.name) {\n                         Some(ref f) => &*f.pat,\n-                        _ => dummy\n+                        _ => DUMMY_WILD_PAT\n                     }\n                 }).collect();\n                 args\n@@ -855,13 +851,13 @@ pub fn specialize<'a>(cx: &MatchCheckCtxt, r: &[&'a Pat], dummy: &'a Pat,\n                 // Fixed-length vectors.\n                 Single => {\n                     let mut pats: Vec<&Pat> = before.iter().map(|p| &**p).collect();\n-                    pats.grow_fn(arity - before.len() - after.len(), |_| dummy);\n+                    pats.grow_fn(arity - before.len() - after.len(), |_| DUMMY_WILD_PAT);\n                     pats.extend(after.iter().map(|p| &**p));\n                     Some(pats)\n                 },\n                 Slice(length) if before.len() + after.len() <= length && slice.is_some() => {\n                     let mut pats: Vec<&Pat> = before.iter().map(|p| &**p).collect();\n-                    pats.grow_fn(arity - before.len() - after.len(), |_| dummy);\n+                    pats.grow_fn(arity - before.len() - after.len(), |_| DUMMY_WILD_PAT);\n                     pats.extend(after.iter().map(|p| &**p));\n                     Some(pats)\n                 },\n@@ -931,7 +927,7 @@ fn check_fn(cx: &mut MatchCheckCtxt,\n \n fn is_refutable<A>(cx: &MatchCheckCtxt, pat: &Pat, refutable: |&Pat| -> A) -> Option<A> {\n     let pats = Matrix(vec!(vec!(pat)));\n-    match is_useful(cx, &pats, [&DUMMY_WILD_PAT], ConstructWitness) {\n+    match is_useful(cx, &pats, [DUMMY_WILD_PAT], ConstructWitness) {\n         UsefulWithWitness(pats) => {\n             assert_eq!(pats.len(), 1);\n             Some(refutable(&*pats[0]))"}, {"sha": "61b013d795ea029b40fe39dff68099e1fb8aa32c", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=412f4d1fc7ec8858ee4c91abd78097ac48cb15ef", "patch": "@@ -441,6 +441,7 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n     fn should_warn_about_item(&mut self, item: &ast::Item) -> bool {\n         let should_warn = match item.node {\n             ast::ItemStatic(..)\n+            | ast::ItemConst(..)\n             | ast::ItemFn(..)\n             | ast::ItemEnum(..)\n             | ast::ItemStruct(..) => true,"}, {"sha": "3a1058c009f6c6075b3b8444620b43633192ecbe", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=412f4d1fc7ec8858ee4c91abd78097ac48cb15ef", "patch": "@@ -352,19 +352,6 @@ struct Match<'a, 'p: 'a, 'blk: 'a, 'tcx: 'blk> {\n     pats: Vec<&'p ast::Pat>,\n     data: &'a ArmData<'p, 'blk, 'tcx>,\n     bound_ptrs: Vec<(Ident, ValueRef)>,\n-\n-    // This is a pointer to an instance of check_match::DUMMY_WILD_PAT. The\n-    // check_match code requires that we pass this in (with the same lifetime as\n-    // the patterns passed in). Unfortunately this is required to be propagated\n-    // into this structure in order to get the lifetimes to work.\n-    //\n-    // Lots of the `check_match` code will deal with &DUMMY_WILD_PAT when\n-    // returning references, which used to have the `'static` lifetime before\n-    // const was added to the language. The DUMMY_WILD_PAT does not implement\n-    // Sync, however, so it must be a const, which longer has a static lifetime,\n-    // hence we're passing it in here. This certainly isn't crucial, and if it\n-    // can be removed, please do!\n-    dummy: &'p ast::Pat,\n }\n \n impl<'a, 'p, 'blk, 'tcx> Repr for Match<'a, 'p, 'blk, 'tcx> {\n@@ -417,7 +404,6 @@ fn expand_nested_bindings<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         *pats.get_mut(col) = pat;\n         Match {\n             pats: pats,\n-            dummy: br.dummy,\n             data: &*br.data,\n             bound_ptrs: bound_ptrs\n         }\n@@ -465,7 +451,6 @@ fn enter_match<'a, 'b, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             }\n             Match {\n                 pats: pats,\n-                dummy: br.dummy,\n                 data: br.data,\n                 bound_ptrs: bound_ptrs\n             }\n@@ -560,8 +545,7 @@ fn enter_opt<'a, 'p, 'blk, 'tcx>(\n \n     let mcx = check_match::MatchCheckCtxt { tcx: bcx.tcx() };\n     enter_match(bcx, dm, m, col, val, |pats|\n-        check_match::specialize(&mcx, pats.as_slice(), m[0].dummy, &ctor, col,\n-                                variant_size)\n+        check_match::specialize(&mcx, pats.as_slice(), &ctor, col, variant_size)\n     )\n }\n \n@@ -1051,7 +1035,7 @@ fn compile_submatch_continue<'a, 'p, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     match adt_vals {\n         Some(field_vals) => {\n             let pats = enter_match(bcx, dm, m, col, val, |pats|\n-                check_match::specialize(&mcx, pats, m[0].dummy,\n+                check_match::specialize(&mcx, pats,\n                                         &check_match::Single, col,\n                                         field_vals.len())\n             );\n@@ -1375,7 +1359,6 @@ fn trans_match_inner<'blk, 'tcx>(scope_cx: Block<'blk, 'tcx>,\n         bindings_map: create_bindings_map(bcx, &**arm.pats.get(0), discr_expr, &*arm.body)\n     }).collect();\n \n-    let dummy = check_match::DUMMY_WILD_PAT.clone();\n     let mut static_inliner = StaticInliner::new(scope_cx.tcx());\n     let arm_pats: Vec<Vec<P<ast::Pat>>> = arm_datas.iter().map(|arm_data| {\n         arm_data.arm.pats.iter().map(|p| static_inliner.fold_pat((*p).clone())).collect()\n@@ -1384,7 +1367,6 @@ fn trans_match_inner<'blk, 'tcx>(scope_cx: Block<'blk, 'tcx>,\n     for (arm_data, pats) in arm_datas.iter().zip(arm_pats.iter()) {\n         matches.extend(pats.iter().map(|p| Match {\n             pats: vec![&**p],\n-            dummy: &dummy,\n             data: arm_data,\n             bound_ptrs: Vec::new(),\n         }));"}, {"sha": "c1aa588eecc49f94d1746fdc2cdfbb52d63ad679", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=412f4d1fc7ec8858ee4c91abd78097ac48cb15ef", "patch": "@@ -1333,14 +1333,16 @@ impl Item_ {\n     pub fn descriptive_variant(&self) -> &str {\n         match *self {\n             ItemStatic(..) => \"static item\",\n+            ItemConst(..) => \"constant item\",\n             ItemFn(..) => \"function\",\n             ItemMod(..) => \"module\",\n             ItemForeignMod(..) => \"foreign module\",\n             ItemTy(..) => \"type alias\",\n             ItemEnum(..) => \"enum\",\n             ItemStruct(..) => \"struct\",\n             ItemTrait(..) => \"trait\",\n-            _ => \"item\"\n+            ItemMac(..) |\n+            ItemImpl(..) => \"item\"\n         }\n     }\n }"}, {"sha": "0cfee6daf3f1921499dacc78001725a3e8e9abb8", "filename": "src/test/compile-fail/issue-17718-const-naming.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-naming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-naming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-const-naming.rs?ref=412f4d1fc7ec8858ee4c91abd78097ac48cb15ef", "patch": "@@ -12,5 +12,6 @@\n \n const foo: int = 3;\n //~^ ERROR: should have an uppercase name such as\n+//~^^ ERROR: constant item is never used\n \n fn main() {}"}, {"sha": "96d40c52657fe2f20aaeaa379c01c50c8c1dc86e", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/412f4d1fc7ec8858ee4c91abd78097ac48cb15ef/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=412f4d1fc7ec8858ee4c91abd78097ac48cb15ef", "patch": "@@ -35,6 +35,13 @@ pub static used_static2: int = used_static;\n const USED_STATIC: int = 0;\n const STATIC_USED_IN_ENUM_DISCRIMINANT: int = 10;\n \n+pub const pub_const: int = 0;\n+const priv_const: int = 0; //~ ERROR: constant item is never used\n+const used_const: int = 0;\n+pub const used_const2: int = used_const;\n+const USED_CONST: int = 1;\n+const CONST_USED_IN_ENUM_DISCRIMINANT: int = 11;\n+\n pub type typ = *const UsedStruct4;\n pub struct PubStruct;\n struct PrivStruct; //~ ERROR: struct is never used\n@@ -61,7 +68,10 @@ pub struct PubStruct2 {\n \n pub enum pub_enum { foo1, bar1 }\n pub enum pub_enum2 { a(*const StructUsedInEnum) }\n-pub enum pub_enum3 { Foo = STATIC_USED_IN_ENUM_DISCRIMINANT }\n+pub enum pub_enum3 {\n+    Foo = STATIC_USED_IN_ENUM_DISCRIMINANT,\n+    Bar = CONST_USED_IN_ENUM_DISCRIMINANT,\n+}\n \n enum priv_enum { foo2, bar2 } //~ ERROR: enum is never used\n enum used_enum {\n@@ -82,6 +92,7 @@ pub fn pub_fn() {\n     let i = 1i;\n     match i {\n         USED_STATIC => (),\n+        USED_CONST => (),\n         _ => ()\n     }\n     f::<StructUsedInGeneric>();"}]}