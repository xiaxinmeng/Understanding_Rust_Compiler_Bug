{"sha": "4d4eb10230a58071c6c83f3009c74040b700fbb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNGViMTAyMzBhNTgwNzFjNmM4M2YzMDA5Yzc0MDQwYjcwMGZiYjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-02T23:36:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-02T23:36:09Z"}, "message": "auto merge of #16186 : steveklabnik/rust/guide_cargo_new, r=alexcrichton\n\nTwo commits here: one to add `cargo new` to the guide, and a second to mention the lockfile that Cargo now generates.", "tree": {"sha": "2e4b796d76b1f3a71a7630edba0d4177ae557ed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e4b796d76b1f3a71a7630edba0d4177ae557ed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d4eb10230a58071c6c83f3009c74040b700fbb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4eb10230a58071c6c83f3009c74040b700fbb7", "html_url": "https://github.com/rust-lang/rust/commit/4d4eb10230a58071c6c83f3009c74040b700fbb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d4eb10230a58071c6c83f3009c74040b700fbb7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "756b7b23c43cff52b1e2a89fae341c0a7389ee09", "url": "https://api.github.com/repos/rust-lang/rust/commits/756b7b23c43cff52b1e2a89fae341c0a7389ee09", "html_url": "https://github.com/rust-lang/rust/commit/756b7b23c43cff52b1e2a89fae341c0a7389ee09"}, {"sha": "2b9c5d2f74de052598c62edb20049182112fe9fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b9c5d2f74de052598c62edb20049182112fe9fa", "html_url": "https://github.com/rust-lang/rust/commit/2b9c5d2f74de052598c62edb20049182112fe9fa"}], "stats": {"total": 83, "additions": 30, "deletions": 53}, "files": [{"sha": "a7a6ab545b6e2009244d95fb2caf6e32070fc612", "filename": "src/doc/guide.md", "status": "modified", "additions": 30, "deletions": 53, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/4d4eb10230a58071c6c83f3009c74040b700fbb7/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/4d4eb10230a58071c6c83f3009c74040b700fbb7/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=4d4eb10230a58071c6c83f3009c74040b700fbb7", "patch": "@@ -316,7 +316,7 @@ Put this inside:\n \n name = \"hello_world\"\n version = \"0.1.0\"\n-authors = [ \"someone@example.com\" ]\n+authors = [ \"Your name <you@example.com>\" ]\n \n [[bin]]\n \n@@ -354,6 +354,18 @@ file, we would need to call `rustc` twice, and pass it a bunch of options to\n tell it to build everything together. With Cargo, as our project grows, we can\n just `cargo build` and it'll work the right way.\n \n+You'll also notice that Cargo has created a new file: `Cargo.lock`.\n+\n+```{ignore,notrust}\n+[root]\n+name = \"hello_world\"\n+version = \"0.0.1\"\n+```\n+\n+This file is used by Cargo to keep track of dependencies in your application.\n+Right now, we don't have any, so it's a bit sparse. You won't ever need\n+to touch this file yourself, just let Cargo handle it.\n+\n That's it! We've successfully built `hello_world` with Cargo. Even though our\n program is simple, it's using much of the real tooling that you'll use for the\n rest of your Rust career.\n@@ -1594,41 +1606,45 @@ taken to the screen. Sound good?\n \n ## Set up\n \n-Let's set up a new project. Go to your projects directory, and make a new\n-directory for the project, as well as a `src` directory for our code:\n+Let's set up a new project. Go to your projects directory. Remember how we\n+had to create our directory structure and a `Cargo.toml` for `hello_world`? Cargo\n+has a command that does that for us. Let's give it a shot:\n \n ```{bash}\n $ cd ~/projects\n-$ mkdir guessing_game\n+$ cargo new guessing_game --bin\n $ cd guessing_game\n-$ mkdir src\n ```\n \n-Great. Next, let's make a `Cargo.toml` file so Cargo knows how to build our\n-project:\n+We pass the name of our project to `cargo new`, and then the `--bin` flag,\n+since we're making a binary, rather than a library.\n+\n+Check out the generated `Cargo.toml`:\n \n ```{ignore}\n [package]\n \n name = \"guessing_game\"\n version = \"0.1.0\"\n-authors = [ \"someone@example.com\" ]\n+authors = [\"Your Name <you@example.com>\"]\n \n [[bin]]\n \n name = \"guessing_game\"\n ```\n \n-Finally, we need our source file. Let's just make it hello world for now, so we\n-can check that our setup works. In `src/guessing_game.rs`:\n+Cargo gets this information from your environment. If it's not correct, go ahead\n+and fix that.\n+\n+Finally, Cargo generated a hello, world for us. Check out `src/main.rs`:\n \n ```{rust}\n fn main() {\n     println!(\"Hello world!\");\n }\n ```\n \n-Let's make sure that worked:\n+Let's try compiling what Cargo gave us:\n \n ```{bash}\n $ cargo build\n@@ -1883,7 +1899,6 @@ fn cmp(a: int, b: int) -> Ordering {\n If we try to compile, we'll get some errors:\n \n ```{notrust,ignore}\n-$ cargo build\n $ cargo build\n    Compiling guessing_game v0.1.0 (file:/home/you/projects/guessing_game)\n src/guessing_game.rs:20:15: 20:20 error: mismatched types: expected `int` but found `collections::string::String` (expected int but found struct collections::string::String)\n@@ -2486,27 +2501,7 @@ Enough talk, let's build something! Let's make a new project called `modules`.\n \n ```{bash,ignore}\n $ cd ~/projects\n-$ mkdir modules\n-$ cd modules\n-$ mkdir src\n-```\n-\n-We need to make our two 'hello world' files. In `src/main.rs`:\n-\n-```{rust}\n-fn main() {\n-    println!(\"Hello, world!\");\n-}\n-```\n-\n-And in `Cargo.toml`:\n-\n-```{notrust,ignore}\n-[package]\n-\n-name = \"modules\"\n-version = \"0.1.0\"\n-authors = [ \"someone@example.com\" ]\n+$ cargo new modules --bin\n ```\n \n Let's double check our work by compiling:\n@@ -2924,34 +2919,16 @@ now: make a new project:\n \n ```{bash,ignore}\n $ cd ~/projects\n-$ mkdir testing\n+$ cargo new testing --bin\n $ cd testing\n-$ mkdir test\n-```\n-\n-In `src/main.rs`:\n-\n-```{rust}\n-fn main() {\n-    println!(\"Hello, world!\");\n-}\n-```\n-\n-And in `Cargo.toml`:\n-\n-```{notrust,ignore}\n-[package]\n-\n-name = \"testing\"\n-version = \"0.1.0\"\n-authors = [ \"someone@example.com\" ]\n ```\n \n And try it out:\n \n ```{notrust,ignore}\n $ cargo run\n    Compiling testing v0.1.0 (file:/home/you/projects/testing)\n+     Running `target/testing`\n Hello, world!\n $\n ```"}]}