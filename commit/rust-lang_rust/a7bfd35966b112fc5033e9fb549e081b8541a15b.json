{"sha": "a7bfd35966b112fc5033e9fb549e081b8541a15b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YmZkMzU5NjZiMTEyZmM1MDMzZTlmYjU0OWUwODFiODU0MWExNWI=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-07-09T20:03:48Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-07-09T20:03:48Z"}, "message": "Enhance well-formedness checks for `#[repr(...)]` attributes", "tree": {"sha": "dca130c23a586b57764debc0d34d2625edb68be5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dca130c23a586b57764debc0d34d2625edb68be5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7bfd35966b112fc5033e9fb549e081b8541a15b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7bfd35966b112fc5033e9fb549e081b8541a15b", "html_url": "https://github.com/rust-lang/rust/commit/a7bfd35966b112fc5033e9fb549e081b8541a15b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7bfd35966b112fc5033e9fb549e081b8541a15b/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e916b7cb7708e470be8d0134bdf39479051a5c44", "url": "https://api.github.com/repos/rust-lang/rust/commits/e916b7cb7708e470be8d0134bdf39479051a5c44", "html_url": "https://github.com/rust-lang/rust/commit/e916b7cb7708e470be8d0134bdf39479051a5c44"}], "stats": {"total": 244, "additions": 234, "deletions": 10}, "files": [{"sha": "b7b053cd5ddb7a910f24f795abb0ddac2ecb1044", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 96, "deletions": 8, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/a7bfd35966b112fc5033e9fb549e081b8541a15b/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bfd35966b112fc5033e9fb549e081b8541a15b/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=a7bfd35966b112fc5033e9fb549e081b8541a15b", "patch": "@@ -870,6 +870,23 @@ pub fn find_repr_attrs(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n                         sym::simd => Some(ReprSimd),\n                         sym::transparent => Some(ReprTransparent),\n                         sym::no_niche => Some(ReprNoNiche),\n+                        sym::align => {\n+                            let mut err = struct_span_err!(\n+                                diagnostic,\n+                                item.span(),\n+                                E0589,\n+                                \"invalid `repr(align)` attribute: `align` needs an argument\"\n+                            );\n+                            err.span_suggestion(\n+                                item.span(),\n+                                \"supply an argument here\",\n+                                \"align(...)\".to_string(),\n+                                Applicability::HasPlaceholders,\n+                            );\n+                            err.emit();\n+                            recognised = true;\n+                            None\n+                        }\n                         name => int_type_of_word(name).map(ReprInt),\n                     };\n \n@@ -891,53 +908,124 @@ pub fn find_repr_attrs(sess: &Session, attr: &Attribute) -> Vec<ReprAttr> {\n                             Ok(literal) => acc.push(ReprPacked(literal)),\n                             Err(message) => literal_error = Some(message),\n                         };\n+                    } else if matches!(name, sym::C | sym::simd | sym::transparent | sym::no_niche)\n+                        || int_type_of_word(name).is_some()\n+                    {\n+                        recognised = true;\n+                        struct_span_err!(\n+                                diagnostic,\n+                                item.span(),\n+                                E0552,\n+                                \"invalid representation hint: `{}` does not take a parenthesized argument list\",\n+                                name.to_ident_string(),\n+                            ).emit();\n                     }\n                     if let Some(literal_error) = literal_error {\n                         struct_span_err!(\n                             diagnostic,\n                             item.span(),\n                             E0589,\n-                            \"invalid `repr(align)` attribute: {}\",\n+                            \"invalid `repr({})` attribute: {}\",\n+                            name.to_ident_string(),\n                             literal_error\n                         )\n                         .emit();\n                     }\n                 } else if let Some(meta_item) = item.meta_item() {\n-                    if meta_item.has_name(sym::align) {\n-                        if let MetaItemKind::NameValue(ref value) = meta_item.kind {\n+                    if let MetaItemKind::NameValue(ref value) = meta_item.kind {\n+                        if meta_item.has_name(sym::align) || meta_item.has_name(sym::packed) {\n+                            let name = meta_item.name_or_empty().to_ident_string();\n                             recognised = true;\n                             let mut err = struct_span_err!(\n                                 diagnostic,\n                                 item.span(),\n                                 E0693,\n-                                \"incorrect `repr(align)` attribute format\"\n+                                \"incorrect `repr({})` attribute format\",\n+                                name,\n                             );\n                             match value.kind {\n                                 ast::LitKind::Int(int, ast::LitIntType::Unsuffixed) => {\n                                     err.span_suggestion(\n                                         item.span(),\n                                         \"use parentheses instead\",\n-                                        format!(\"align({})\", int),\n+                                        format!(\"{}({})\", name, int),\n                                         Applicability::MachineApplicable,\n                                     );\n                                 }\n                                 ast::LitKind::Str(s, _) => {\n                                     err.span_suggestion(\n                                         item.span(),\n                                         \"use parentheses instead\",\n-                                        format!(\"align({})\", s),\n+                                        format!(\"{}({})\", name, s),\n                                         Applicability::MachineApplicable,\n                                     );\n                                 }\n                                 _ => {}\n                             }\n                             err.emit();\n+                        } else {\n+                            if matches!(\n+                                meta_item.name_or_empty(),\n+                                sym::C | sym::simd | sym::transparent | sym::no_niche\n+                            ) || int_type_of_word(meta_item.name_or_empty()).is_some()\n+                            {\n+                                recognised = true;\n+                                struct_span_err!(\n+                                    diagnostic,\n+                                    meta_item.span,\n+                                    E0552,\n+                                    \"invalid representation hint: `{}` does not take a value\",\n+                                    meta_item.name_or_empty().to_ident_string(),\n+                                )\n+                                .emit();\n+                            }\n+                        }\n+                    } else if let MetaItemKind::List(_) = meta_item.kind {\n+                        if meta_item.has_name(sym::align) {\n+                            recognised = true;\n+                            struct_span_err!(\n+                                diagnostic,\n+                                meta_item.span,\n+                                E0693,\n+                                \"incorrect `repr(align)` attribute format: \\\n+                                 `align` takes exactly one argument in parentheses\"\n+                            )\n+                            .emit();\n+                        } else if meta_item.has_name(sym::packed) {\n+                            recognised = true;\n+                            struct_span_err!(\n+                                diagnostic,\n+                                meta_item.span,\n+                                E0552,\n+                                \"incorrect `repr(packed)` attribute format: \\\n+                                 `packed` takes exactly one parenthesized argument, \\\n+                                 or no parentheses at all\"\n+                            )\n+                            .emit();\n+                        } else if matches!(\n+                            meta_item.name_or_empty(),\n+                            sym::C | sym::simd | sym::transparent | sym::no_niche\n+                        ) || int_type_of_word(meta_item.name_or_empty()).is_some()\n+                        {\n+                            recognised = true;\n+                            struct_span_err!(\n+                                diagnostic,\n+                                meta_item.span,\n+                                E0552,\n+                                \"invalid representation hint: `{}` does not take a parenthesized argument list\",\n+                                meta_item.name_or_empty().to_ident_string(),\n+                            ).emit();\n                         }\n                     }\n                 }\n                 if !recognised {\n-                    // Not a word we recognize\n-                    diagnostic.delay_span_bug(item.span(), \"unrecognized representation hint\");\n+                    // Not a word we recognize. This will be caught and reported by\n+                    // the `check_mod_attrs` pass, but this pass doesn't always run\n+                    // (e.g. if we only pretty-print the source), so we have to gate\n+                    // the `delay_span_bug` call as follows:\n+                    if sess.opts.pretty.map_or(true, |pp| pp.needs_analysis()) {\n+                        diagnostic.delay_span_bug(item.span(), \"unrecognized representation hint\");\n+                    }\n                 }\n             }\n         }"}, {"sha": "97bf225f0cc733b9803844bc583f8ea6134aaeb1", "filename": "src/test/ui/attributes/nonterminal-expansion.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7bfd35966b112fc5033e9fb549e081b8541a15b/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bfd35966b112fc5033e9fb549e081b8541a15b/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.rs?ref=a7bfd35966b112fc5033e9fb549e081b8541a15b", "patch": "@@ -2,7 +2,9 @@\n \n macro_rules! pass_nonterminal {\n     ($n:expr) => {\n-        #[repr(align($n))] //~ ERROR expected unsuffixed literal or identifier, found `n!()`\n+        #[repr(align($n))]\n+        //~^ ERROR expected unsuffixed literal or identifier, found `n!()`\n+        //~| ERROR incorrect `repr(align)` attribute format\n         struct S;\n     };\n }"}, {"sha": "9bf36f3c58e8120401905cd8cbce8131aefd22a2", "filename": "src/test/ui/attributes/nonterminal-expansion.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7bfd35966b112fc5033e9fb549e081b8541a15b/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7bfd35966b112fc5033e9fb549e081b8541a15b/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.stderr?ref=a7bfd35966b112fc5033e9fb549e081b8541a15b", "patch": "@@ -9,5 +9,17 @@ LL | pass_nonterminal!(n!());\n    |\n    = note: this error originates in the macro `pass_nonterminal` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error[E0693]: incorrect `repr(align)` attribute format: `align` takes exactly one argument in parentheses\n+  --> $DIR/nonterminal-expansion.rs:5:16\n+   |\n+LL |         #[repr(align($n))]\n+   |                ^^^^^^^^^\n+...\n+LL | pass_nonterminal!(n!());\n+   | ------------------------ in this macro invocation\n+   |\n+   = note: this error originates in the macro `pass_nonterminal` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0693`."}, {"sha": "70583eb9bd3320b242db508d864a0a6c711610a4", "filename": "src/test/ui/repr/issue-83921-ice.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a7bfd35966b112fc5033e9fb549e081b8541a15b/src%2Ftest%2Fui%2Frepr%2Fissue-83921-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bfd35966b112fc5033e9fb549e081b8541a15b/src%2Ftest%2Fui%2Frepr%2Fissue-83921-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83921-ice.rs?ref=a7bfd35966b112fc5033e9fb549e081b8541a15b", "patch": "@@ -0,0 +1,34 @@\n+// Regression test for various ICEs inspired by\n+// https://github.com/rust-lang/rust/issues/83921#issuecomment-814640734\n+\n+// compile-flags: -Zdeduplicate-diagnostics=yes\n+\n+#[repr(packed())]\n+//~^ ERROR: incorrect `repr(packed)` attribute format\n+struct S1;\n+\n+#[repr(align)]\n+//~^ ERROR: invalid `repr(align)` attribute\n+struct S2;\n+\n+#[repr(align(2, 4))]\n+//~^ ERROR: incorrect `repr(align)` attribute format\n+struct S3;\n+\n+#[repr(align())]\n+//~^ ERROR: incorrect `repr(align)` attribute format\n+struct S4;\n+\n+#[repr(i8())]\n+//~^ ERROR: invalid representation hint\n+enum E1 { A, B }\n+\n+#[repr(u32(42))]\n+//~^ ERROR: invalid representation hint\n+enum E2 { A, B }\n+\n+#[repr(i64 = 2)]\n+//~^ ERROR: invalid representation hint\n+enum E3 { A, B }\n+\n+fn main() {}"}, {"sha": "32c450410eacebb58a2677b4658db63978cd7c48", "filename": "src/test/ui/repr/issue-83921-ice.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a7bfd35966b112fc5033e9fb549e081b8541a15b/src%2Ftest%2Fui%2Frepr%2Fissue-83921-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7bfd35966b112fc5033e9fb549e081b8541a15b/src%2Ftest%2Fui%2Frepr%2Fissue-83921-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83921-ice.stderr?ref=a7bfd35966b112fc5033e9fb549e081b8541a15b", "patch": "@@ -0,0 +1,46 @@\n+error[E0552]: incorrect `repr(packed)` attribute format: `packed` takes exactly one parenthesized argument, or no parentheses at all\n+  --> $DIR/issue-83921-ice.rs:6:8\n+   |\n+LL | #[repr(packed())]\n+   |        ^^^^^^^^\n+\n+error[E0589]: invalid `repr(align)` attribute: `align` needs an argument\n+  --> $DIR/issue-83921-ice.rs:10:8\n+   |\n+LL | #[repr(align)]\n+   |        ^^^^^ help: supply an argument here: `align(...)`\n+\n+error[E0693]: incorrect `repr(align)` attribute format: `align` takes exactly one argument in parentheses\n+  --> $DIR/issue-83921-ice.rs:14:8\n+   |\n+LL | #[repr(align(2, 4))]\n+   |        ^^^^^^^^^^^\n+\n+error[E0693]: incorrect `repr(align)` attribute format: `align` takes exactly one argument in parentheses\n+  --> $DIR/issue-83921-ice.rs:18:8\n+   |\n+LL | #[repr(align())]\n+   |        ^^^^^^^\n+\n+error[E0552]: invalid representation hint: `i8` does not take a parenthesized argument list\n+  --> $DIR/issue-83921-ice.rs:22:8\n+   |\n+LL | #[repr(i8())]\n+   |        ^^^^\n+\n+error[E0552]: invalid representation hint: `u32` does not take a parenthesized argument list\n+  --> $DIR/issue-83921-ice.rs:26:8\n+   |\n+LL | #[repr(u32(42))]\n+   |        ^^^^^^^\n+\n+error[E0552]: invalid representation hint: `i64` does not take a value\n+  --> $DIR/issue-83921-ice.rs:30:8\n+   |\n+LL | #[repr(i64 = 2)]\n+   |        ^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0552, E0589, E0693.\n+For more information about an error, try `rustc --explain E0552`."}, {"sha": "6b7e831ed2f7a47c54e83713ddfbb2194e094d21", "filename": "src/test/ui/repr/issue-83921-pretty.normal.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7bfd35966b112fc5033e9fb549e081b8541a15b/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7bfd35966b112fc5033e9fb549e081b8541a15b/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.normal.stderr?ref=a7bfd35966b112fc5033e9fb549e081b8541a15b", "patch": "@@ -0,0 +1,9 @@\n+error[E0565]: meta item in `repr` must be an identifier\n+  --> $DIR/issue-83921-pretty.rs:10:8\n+   |\n+LL | #[repr(\"C\")]\n+   |        ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0565`."}, {"sha": "dad3641f0f5af87b125456ded6023cceaf40434e", "filename": "src/test/ui/repr/issue-83921-pretty.pretty.stdout", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a7bfd35966b112fc5033e9fb549e081b8541a15b/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.pretty.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a7bfd35966b112fc5033e9fb549e081b8541a15b/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.pretty.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.pretty.stdout?ref=a7bfd35966b112fc5033e9fb549e081b8541a15b", "patch": "@@ -0,0 +1,19 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+// Regression test for #83921. A `delay_span_bug()` call was issued, but the\n+// error was never reported because the pass responsible for detecting and\n+// reporting the error does not run in certain modes of pretty-printing.\n+\n+// Make sure the error is reported if we do not just pretty-print:\n+// revisions: pretty normal\n+// [pretty]compile-flags: -Zunpretty=everybody_loops\n+// [pretty]check-pass\n+#[repr(\"C\")]\n+struct A {\n+}\n+\n+fn main() { loop { } }"}, {"sha": "d5d36470f11acf62ffab868ecc4904df556fde62", "filename": "src/test/ui/repr/issue-83921-pretty.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a7bfd35966b112fc5033e9fb549e081b8541a15b/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7bfd35966b112fc5033e9fb549e081b8541a15b/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr%2Fissue-83921-pretty.rs?ref=a7bfd35966b112fc5033e9fb549e081b8541a15b", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #83921. A `delay_span_bug()` call was issued, but the\n+// error was never reported because the pass responsible for detecting and\n+// reporting the error does not run in certain modes of pretty-printing.\n+\n+// Make sure the error is reported if we do not just pretty-print:\n+// revisions: pretty normal\n+// [pretty]compile-flags: -Zunpretty=everybody_loops\n+// [pretty]check-pass\n+\n+#[repr(\"C\")]\n+//[normal]~^ ERROR: meta item in `repr` must be an identifier [E0565]\n+struct A {}\n+\n+fn main() {}"}]}