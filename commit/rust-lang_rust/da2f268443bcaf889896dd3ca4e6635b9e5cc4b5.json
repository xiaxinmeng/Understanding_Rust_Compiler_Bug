{"sha": "da2f268443bcaf889896dd3ca4e6635b9e5cc4b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMmYyNjg0NDNiY2FmODg5ODk2ZGQzY2E0ZTY2MzViOWU1Y2M0YjU=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-09-01T00:32:14Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-09-01T00:32:14Z"}, "message": "Review comments", "tree": {"sha": "71ee514c7791f508c2b3ea1316bbba7842fe8609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71ee514c7791f508c2b3ea1316bbba7842fe8609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da2f268443bcaf889896dd3ca4e6635b9e5cc4b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da2f268443bcaf889896dd3ca4e6635b9e5cc4b5", "html_url": "https://github.com/rust-lang/rust/commit/da2f268443bcaf889896dd3ca4e6635b9e5cc4b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da2f268443bcaf889896dd3ca4e6635b9e5cc4b5/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ba7f46058db2baa7e03cbca5570a4a4c1ac832b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b", "html_url": "https://github.com/rust-lang/rust/commit/3ba7f46058db2baa7e03cbca5570a4a4c1ac832b"}], "stats": {"total": 85, "additions": 43, "deletions": 42}, "files": [{"sha": "f907b76b679c485b949fb3ceaecb723ae733a964", "filename": "src/shims/panic.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da2f268443bcaf889896dd3ca4e6635b9e5cc4b5/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da2f268443bcaf889896dd3ca4e6635b9e5cc4b5/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=da2f268443bcaf889896dd3ca4e6635b9e5cc4b5", "patch": "@@ -48,7 +48,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Get the raw pointer stored in arg[0] (the panic payload).\n         let &[payload] = check_arg_count(args)?;\n         let payload = this.read_scalar(payload)?.check_init()?;\n-        this.set_panic_payload(payload);\n+        let thread = this.active_thread_mut();\n+        assert!(\n+            thread.panic_payload.is_none(),\n+            \"the panic runtime should avoid double-panics\"\n+        );\n+        thread.panic_payload = Some(payload);\n \n         // Jump to the unwind block to begin unwinding.\n         this.unwind_to_block(unwind);\n@@ -130,7 +135,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             // The Thread's `panic_payload` holds what was passed to `miri_start_panic`.\n             // This is exactly the second argument we need to pass to `catch_fn`.\n-            let payload = this.take_panic_payload();\n+            let payload = this.active_thread_mut().panic_payload.take().unwrap();\n \n             // Push the `catch_fn` stackframe.\n             let f_instance = this.memory.get_fn(catch_unwind.catch_fn)?.as_instance()?;"}, {"sha": "a542d0895b251d90a519ce8fe6496608dc1cf4e0", "filename": "src/thread.rs", "status": "modified", "additions": 7, "deletions": 29, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/da2f268443bcaf889896dd3ca4e6635b9e5cc4b5/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da2f268443bcaf889896dd3ca4e6635b9e5cc4b5/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=da2f268443bcaf889896dd3ca4e6635b9e5cc4b5", "patch": "@@ -119,8 +119,7 @@ pub struct Thread<'mir, 'tcx> {\n     /// The temporary used for storing the argument of\n     /// the call to `miri_start_panic` (the panic payload) when unwinding.\n     /// This is pointer-sized, and matches the `Payload` type in `src/libpanic_unwind/miri.rs`.\n-    panic_payload: Option<Scalar<Tag>>,\n-\n+    pub(crate) panic_payload: Option<Scalar<Tag>>,\n }\n \n impl<'mir, 'tcx> Thread<'mir, 'tcx> {\n@@ -519,21 +518,6 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n             throw_machine_stop!(TerminationInfo::Deadlock);\n         }\n     }\n-\n-    /// Store the panic payload when beginning unwinding.\n-    fn set_panic_payload(&mut self, payload: Scalar<Tag>) {\n-        let thread = self.active_thread_mut();\n-        assert!(\n-            thread.panic_payload.is_none(),\n-            \"the panic runtime should avoid double-panics\"\n-        );\n-        thread.panic_payload = Some(payload);\n-    }\n-\n-    /// Retrieve the panic payload, for use in `catch_unwind`.\n-    fn take_panic_payload(&mut self) -> Scalar<Tag> {\n-        self.active_thread_mut().panic_payload.take().unwrap()\n-    }\n }\n \n // Public interface to thread management.\n@@ -593,6 +577,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.machine.threads.get_active_thread_id()\n     }\n \n+    #[inline]\n+    fn active_thread_mut(&mut self) -> &mut Thread<'mir, 'tcx> {\n+        let this = self.eval_context_mut();\n+        this.machine.threads.active_thread_mut()\n+    }\n+\n     #[inline]\n     fn get_total_thread_count(&self) -> usize {\n         let this = self.eval_context_ref();\n@@ -711,16 +701,4 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         Ok(())\n     }\n-\n-    /// Store the panic payload when beginning unwinding.\n-    fn set_panic_payload(&mut self, payload: Scalar<Tag>) {\n-        let this = self.eval_context_mut();\n-        this.machine.threads.set_panic_payload(payload);\n-    }\n-\n-    /// Retrieve the panic payload, for use in `catch_unwind`.\n-    fn take_panic_payload(&mut self) -> Scalar<Tag> {\n-        let this = self.eval_context_mut();\n-        this.machine.threads.take_panic_payload()\n-    }\n }"}, {"sha": "0ff5788e204d1c64020cdb425a1fea17a3b7c451", "filename": "tests/run-pass/panic/concurrent-panic.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/da2f268443bcaf889896dd3ca4e6635b9e5cc4b5/tests%2Frun-pass%2Fpanic%2Fconcurrent-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da2f268443bcaf889896dd3ca4e6635b9e5cc4b5/tests%2Frun-pass%2Fpanic%2Fconcurrent-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fconcurrent-panic.rs?ref=da2f268443bcaf889896dd3ca4e6635b9e5cc4b5", "patch": "@@ -1,4 +1,8 @@\n // ignore-windows: Concurrency on Windows is not supported yet.\n+\n+//! Cause a panic in one thread while another thread is unwinding. This checks\n+//! that separate threads have their own panicking state.\n+\n use std::sync::{Arc, Condvar, Mutex};\n use std::thread::{spawn, JoinHandle};\n \n@@ -12,11 +16,12 @@ impl BlockOnDrop {\n \n impl Drop for BlockOnDrop {\n     fn drop(&mut self) {\n+        eprintln!(\"Thread 2 blocking on thread 1\");\n         let _ = self.0.take().unwrap().join();\n+        eprintln!(\"Thread 1 has exited\");\n     }\n }\n \n-/// Cause a panic in one thread while another thread is unwinding.\n fn main() {\n     let t1_started_pair = Arc::new((Mutex::new(false), Condvar::new()));\n     let t2_started_pair = Arc::new((Mutex::new(false), Condvar::new()));\n@@ -28,6 +33,7 @@ fn main() {\n         let t1_started_pair = t1_started_pair.clone();\n         let t1_continue_mutex = t1_continue_mutex.clone();\n         spawn(move || {\n+            eprintln!(\"Thread 1 starting, will block on mutex\");\n             let (mutex, condvar) = &*t1_started_pair;\n             *mutex.lock().unwrap() = true;\n             condvar.notify_one();\n@@ -36,6 +42,16 @@ fn main() {\n             panic!(\"panic in thread 1\");\n         })\n     };\n+\n+    // Wait for thread 1 to signal it has started.\n+    let (t1_started_mutex, t1_started_condvar) = &*t1_started_pair;\n+    let mut t1_started_guard = t1_started_mutex.lock().unwrap();\n+    while !*t1_started_guard {\n+        t1_started_guard = t1_started_condvar.wait(t1_started_guard).unwrap();\n+    }\n+    eprintln!(\"Thread 1 reported it has started\");\n+    // Thread 1 should now be blocked waiting on t1_continue_mutex.\n+\n     let t2 = {\n         let t2_started_pair = t2_started_pair.clone();\n         let block_on_drop = BlockOnDrop::new(t1);\n@@ -50,24 +66,18 @@ fn main() {\n         })\n     };\n \n-    // Wait for thread 1 to signal it has started.\n-    let (t1_started_mutex, t1_started_condvar) = &*t1_started_pair;\n-    let mut t1_started_guard = t1_started_mutex.lock().unwrap();\n-    while !*t1_started_guard {\n-        t1_started_guard = t1_started_condvar.wait(t1_started_guard).unwrap();\n-    }\n-    // Thread 1 should now be blocked waiting on t1_continue_mutex.\n-\n     // Wait for thread 2 to signal it has started.\n     let (t2_started_mutex, t2_started_condvar) = &*t2_started_pair;\n     let mut t2_started_guard = t2_started_mutex.lock().unwrap();\n     while !*t2_started_guard {\n         t2_started_guard = t2_started_condvar.wait(t2_started_guard).unwrap();\n     }\n+    eprintln!(\"Thread 2 reported it has started\");\n     // Thread 2 should now have already panicked and be in the middle of\n     // unwinding. It should now be blocked on joining thread 1.\n \n     // Unlock t1_continue_mutex, and allow thread 1 to proceed.\n+    eprintln!(\"Unlocking mutex\");\n     drop(t1_continue_guard);\n     // Thread 1 will panic the next time it is scheduled. This will test the\n     // behavior of interest to this test, whether Miri properly handles\n@@ -77,4 +87,5 @@ fn main() {\n     // already be blocked on joining thread 1, so thread 1 will be scheduled\n     // to run next, as it is the only ready thread.\n     assert!(t2.join().is_err());\n+    eprintln!(\"Thread 2 has exited\");\n }"}, {"sha": "d538efdb0e88f61c22cbe835d05ce0c26494767a", "filename": "tests/run-pass/panic/concurrent-panic.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da2f268443bcaf889896dd3ca4e6635b9e5cc4b5/tests%2Frun-pass%2Fpanic%2Fconcurrent-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da2f268443bcaf889896dd3ca4e6635b9e5cc4b5/tests%2Frun-pass%2Fpanic%2Fconcurrent-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fconcurrent-panic.stderr?ref=da2f268443bcaf889896dd3ca4e6635b9e5cc4b5", "patch": "@@ -1,4 +1,11 @@\n warning: thread support is experimental. For example, Miri does not detect data races yet.\n \n-thread '<unnamed>' panicked at 'panic in thread 2', $DIR/concurrent-panic.rs:49:13\n-thread '<unnamed>' panicked at 'panic in thread 1', $DIR/concurrent-panic.rs:36:13\n+Thread 1 starting, will block on mutex\n+Thread 1 reported it has started\n+thread '<unnamed>' panicked at 'panic in thread 2', $DIR/concurrent-panic.rs:65:13\n+Thread 2 blocking on thread 1\n+Thread 2 reported it has started\n+Unlocking mutex\n+thread '<unnamed>' panicked at 'panic in thread 1', $DIR/concurrent-panic.rs:42:13\n+Thread 1 has exited\n+Thread 2 has exited"}]}