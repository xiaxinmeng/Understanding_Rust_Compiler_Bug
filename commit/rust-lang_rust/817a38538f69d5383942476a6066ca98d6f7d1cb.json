{"sha": "817a38538f69d5383942476a6066ca98d6f7d1cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxN2EzODUzOGY2OWQ1MzgzOTQyNDc2YTYwNjZjYTk4ZDZmN2QxY2I=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-01T17:28:07Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-01T17:28:07Z"}, "message": "Merge #1223\n\n1223: Move guard to arm body assist r=matklad a=unrealhoang\n\nThis is my attempt at #1206 \n\nCo-authored-by: Unreal Hoang <unrealhoang@gmail.com>", "tree": {"sha": "a0ede4dddc09d68e47ab68512798cfcafafc7b13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0ede4dddc09d68e47ab68512798cfcafafc7b13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/817a38538f69d5383942476a6066ca98d6f7d1cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/817a38538f69d5383942476a6066ca98d6f7d1cb", "html_url": "https://github.com/rust-lang/rust/commit/817a38538f69d5383942476a6066ca98d6f7d1cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/817a38538f69d5383942476a6066ca98d6f7d1cb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "71c13528cdcad9930ded24054daf6bb1678835e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/71c13528cdcad9930ded24054daf6bb1678835e7", "html_url": "https://github.com/rust-lang/rust/commit/71c13528cdcad9930ded24054daf6bb1678835e7"}, {"sha": "d1c21b85cf7c8ca55bf0f83f2359d9018e321705", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c21b85cf7c8ca55bf0f83f2359d9018e321705", "html_url": "https://github.com/rust-lang/rust/commit/d1c21b85cf7c8ca55bf0f83f2359d9018e321705"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "a2998ae598d9de0e8a23e7562112b1ebec42a5b4", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/817a38538f69d5383942476a6066ca98d6f7d1cb/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a38538f69d5383942476a6066ca98d6f7d1cb/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=817a38538f69d5383942476a6066ca98d6f7d1cb", "patch": "@@ -101,6 +101,7 @@ mod split_import;\n mod remove_dbg;\n pub mod auto_import;\n mod add_missing_impl_members;\n+mod move_guard_to_arm_body;\n \n fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assist>] {\n     &[\n@@ -120,6 +121,7 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n         add_missing_impl_members::add_missing_impl_members,\n         add_missing_impl_members::add_missing_default_members,\n         inline_local_variable::inline_local_varialbe,\n+        move_guard_to_arm_body::move_guard_to_arm_body,\n     ]\n }\n "}, {"sha": "a8ca19f5ddf7f343eef41ee959e45eaa67f0eaf0", "filename": "crates/ra_assists/src/move_guard_to_arm_body.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/817a38538f69d5383942476a6066ca98d6f7d1cb/crates%2Fra_assists%2Fsrc%2Fmove_guard_to_arm_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817a38538f69d5383942476a6066ca98d6f7d1cb/crates%2Fra_assists%2Fsrc%2Fmove_guard_to_arm_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmove_guard_to_arm_body.rs?ref=817a38538f69d5383942476a6066ca98d6f7d1cb", "patch": "@@ -0,0 +1,115 @@\n+use hir::db::HirDatabase;\n+use ra_syntax::{\n+    TextUnit,\n+    SyntaxElement,\n+    ast::{MatchArm, AstNode, AstToken},\n+    ast,\n+};\n+\n+use crate::{AssistCtx, Assist, AssistId};\n+\n+pub(crate) fn move_guard_to_arm_body(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let match_arm = ctx.node_at_offset::<MatchArm>()?;\n+    let guard = match_arm.guard()?;\n+    let space_before_guard = guard.syntax().prev_sibling_or_token();\n+\n+    let guard_conditions = guard.expr()?;\n+    let arm_expr = match_arm.expr()?;\n+    let buf = format!(\"if {} {{ {} }}\", guard_conditions.syntax().text(), arm_expr.syntax().text());\n+\n+    ctx.add_action(AssistId(\"move_guard_to_arm_body\"), \"move guard to arm body\", |edit| {\n+        edit.target(guard.syntax().range());\n+        let offseting_amount = match space_before_guard {\n+            Some(SyntaxElement::Token(tok)) => {\n+                if let Some(_) = ast::Whitespace::cast(tok) {\n+                    let ele = space_before_guard.unwrap().range();\n+                    edit.delete(ele);\n+                    ele.len()\n+                } else {\n+                    TextUnit::from(0)\n+                }\n+            }\n+            _ => TextUnit::from(0),\n+        };\n+\n+        edit.delete(guard.syntax().range());\n+        edit.replace_node_and_indent(arm_expr.syntax(), buf);\n+        edit.set_cursor(arm_expr.syntax().range().start() + TextUnit::from(3) - offseting_amount);\n+    });\n+    ctx.build()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::helpers::{ check_assist, check_assist_target };\n+\n+    #[test]\n+    fn move_guard_to_arm_body_target() {\n+        check_assist_target(\n+            move_guard_to_arm_body,\n+            r#\"\n+            fn f() {\n+                let t = 'a';\n+                let chars = \"abcd\";\n+                match t {\n+                    '\\r' <|>if chars.clone().next() == Some('\\n') => false,\n+                    _ => true\n+                }\n+            }\n+            \"#,\n+            r#\"if chars.clone().next() == Some('\\n')\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn move_guard_to_arm_body_works() {\n+        check_assist(\n+            move_guard_to_arm_body,\n+            r#\"\n+            fn f() {\n+                let t = 'a';\n+                let chars = \"abcd\";\n+                match t {\n+                    '\\r' <|>if chars.clone().next() == Some('\\n') => false,\n+                    _ => true\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn f() {\n+                let t = 'a';\n+                let chars = \"abcd\";\n+                match t {\n+                    '\\r' => if chars.clone().next() == Some('\\n') { <|>false },\n+                    _ => true\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn move_guard_to_arm_body_works_complex_match() {\n+        check_assist(\n+            move_guard_to_arm_body,\n+            r#\"\n+            fn f() {\n+                match x {\n+                    <|>y @ 4 | y @ 5    if y > 5 => true,\n+                    _ => false\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn f() {\n+                match x {\n+                    y @ 4 | y @ 5 => if y > 5 { <|>true },\n+                    _ => false\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "a714574fbac8c1f6771c1ee1c82a19372dd6a1b4", "filename": "docs/user/features.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/817a38538f69d5383942476a6066ca98d6f7d1cb/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/817a38538f69d5383942476a6066ca98d6f7d1cb/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=817a38538f69d5383942476a6066ca98d6f7d1cb", "patch": "@@ -388,6 +388,24 @@ fn foo() {\n }\n ```\n \n+- Move guard expression to match arm body\n+```rust\n+//before:\n+fn f() {\n+    match x {\n+        <|>y @ 4 | y @ 5    if y > 5 => true,\n+        _ => false\n+    }\n+}\n+//after:\n+fn f() {\n+    match x {\n+        y @ 4 | y @ 5 => if y > 5 { <|>true },\n+        _ => false\n+    }\n+}\n+```\n+\n ### Magic Completions\n \n In addition to usual reference completion, rust-analyzer provides some \u2728magic\u2728"}]}