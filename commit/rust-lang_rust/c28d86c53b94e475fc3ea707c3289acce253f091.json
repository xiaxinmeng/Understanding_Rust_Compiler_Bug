{"sha": "c28d86c53b94e475fc3ea707c3289acce253f091", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyOGQ4NmM1M2I5NGU0NzVmYzNlYTcwN2MzMjg5YWNjZTI1M2YwOTE=", "commit": {"author": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-01-29T02:16:52Z"}, "committer": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-02-15T16:51:08Z"}, "message": "name async generators something more human friendly in type error diagnostics", "tree": {"sha": "0cb0a4524738cb403077fc85ec6b0ccf264236b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cb0a4524738cb403077fc85ec6b0ccf264236b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c28d86c53b94e475fc3ea707c3289acce253f091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c28d86c53b94e475fc3ea707c3289acce253f091", "html_url": "https://github.com/rust-lang/rust/commit/c28d86c53b94e475fc3ea707c3289acce253f091", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c28d86c53b94e475fc3ea707c3289acce253f091/comments", "author": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b05fd2a15de7c9e50110e9ed4c01f114be215739", "url": "https://api.github.com/repos/rust-lang/rust/commits/b05fd2a15de7c9e50110e9ed4c01f114be215739", "html_url": "https://github.com/rust-lang/rust/commit/b05fd2a15de7c9e50110e9ed4c01f114be215739"}], "stats": {"total": 120, "additions": 103, "deletions": 17}, "files": [{"sha": "e5829b1c4f71344fc7b44453f7d6608663655eef", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c28d86c53b94e475fc3ea707c3289acce253f091/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28d86c53b94e475fc3ea707c3289acce253f091/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c28d86c53b94e475fc3ea707c3289acce253f091", "patch": "@@ -1274,7 +1274,7 @@ impl Body<'hir> {\n }\n \n /// The type of source expression that caused this generator to be created.\n-#[derive(Clone, PartialEq, Eq, HashStable_Generic, Encodable, Decodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, Hash, HashStable_Generic, Encodable, Decodable, Debug, Copy)]\n pub enum GeneratorKind {\n     /// An explicit `async` block or the body of an async function.\n     Async(AsyncGeneratorKind),\n@@ -1292,12 +1292,21 @@ impl fmt::Display for GeneratorKind {\n     }\n }\n \n+impl GeneratorKind {\n+    pub fn descr(&self) -> &'static str {\n+        match self {\n+            GeneratorKind::Async(ask) => ask.descr(),\n+            GeneratorKind::Gen => \"generator\",\n+        }\n+    }\n+}\n+\n /// In the case of a generator created as part of an async construct,\n /// which kind of async construct caused it to be created?\n ///\n /// This helps error messages but is also used to drive coercions in\n /// type-checking (see #60424).\n-#[derive(Clone, PartialEq, Eq, HashStable_Generic, Encodable, Decodable, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, Hash, HashStable_Generic, Encodable, Decodable, Debug, Copy)]\n pub enum AsyncGeneratorKind {\n     /// An explicit `async` block written by the user.\n     Block,\n@@ -1319,6 +1328,16 @@ impl fmt::Display for AsyncGeneratorKind {\n     }\n }\n \n+impl AsyncGeneratorKind {\n+    pub fn descr(&self) -> &'static str {\n+        match self {\n+            AsyncGeneratorKind::Block => \"`async` block\",\n+            AsyncGeneratorKind::Closure => \"`async` closure body\",\n+            AsyncGeneratorKind::Fn => \"`async fn` body\",\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub enum BodyOwnerKind {\n     /// Functions and methods."}, {"sha": "893fe343fdd19aa8470027f46ee374aa7e884ed7", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c28d86c53b94e475fc3ea707c3289acce253f091/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28d86c53b94e475fc3ea707c3289acce253f091/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c28d86c53b94e475fc3ea707c3289acce253f091", "patch": "@@ -1509,7 +1509,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for OpaqueTypesVisitor<'tcx> {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                if let Some((kind, def_id)) = TyCategory::from_ty(t) {\n+                if let Some((kind, def_id)) = TyCategory::from_ty(self.tcx, t) {\n                     let span = self.tcx.def_span(def_id);\n                     // Avoid cluttering the output when the \"found\" and error span overlap:\n                     //\n@@ -1582,11 +1582,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n         if let Some((expected, found)) = expected_found {\n             let expected_label = match exp_found {\n-                Mismatch::Variable(ef) => ef.expected.prefix_string(),\n+                Mismatch::Variable(ef) => ef.expected.prefix_string(self.tcx),\n                 Mismatch::Fixed(s) => s.into(),\n             };\n             let found_label = match exp_found {\n-                Mismatch::Variable(ef) => ef.found.prefix_string(),\n+                Mismatch::Variable(ef) => ef.found.prefix_string(self.tcx),\n                 Mismatch::Fixed(s) => s.into(),\n             };\n             let exp_found = match exp_found {\n@@ -2436,7 +2436,7 @@ impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n pub enum TyCategory {\n     Closure,\n     Opaque,\n-    Generator,\n+    Generator(hir::GeneratorKind),\n     Foreign,\n }\n \n@@ -2445,16 +2445,18 @@ impl TyCategory {\n         match self {\n             Self::Closure => \"closure\",\n             Self::Opaque => \"opaque type\",\n-            Self::Generator => \"generator\",\n+            Self::Generator(gk) => gk.descr(),\n             Self::Foreign => \"foreign type\",\n         }\n     }\n \n-    pub fn from_ty(ty: Ty<'_>) -> Option<(Self, DefId)> {\n+    pub fn from_ty(tcx: TyCtxt<'_>, ty: Ty<'_>) -> Option<(Self, DefId)> {\n         match *ty.kind() {\n             ty::Closure(def_id, _) => Some((Self::Closure, def_id)),\n             ty::Opaque(def_id, _) => Some((Self::Opaque, def_id)),\n-            ty::Generator(def_id, ..) => Some((Self::Generator, def_id)),\n+            ty::Generator(def_id, ..) => {\n+                Some((Self::Generator(tcx.generator_kind(def_id).unwrap()), def_id))\n+            }\n             ty::Foreign(def_id) => Some((Self::Foreign, def_id)),\n             _ => None,\n         }"}, {"sha": "e7de11fffdea0297b772ba6d38e80dc0a4e41126", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c28d86c53b94e475fc3ea707c3289acce253f091/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28d86c53b94e475fc3ea707c3289acce253f091/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=c28d86c53b94e475fc3ea707c3289acce253f091", "patch": "@@ -383,7 +383,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 InferenceDiagnosticsData {\n                     name: s,\n                     span: None,\n-                    kind: UnderspecifiedArgKind::Type { prefix: ty.prefix_string() },\n+                    kind: UnderspecifiedArgKind::Type { prefix: ty.prefix_string(self.tcx) },\n                     parent: None,\n                 }\n             }"}, {"sha": "5625264911aacb233fa5de382b2a61080725e99d", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c28d86c53b94e475fc3ea707c3289acce253f091/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28d86c53b94e475fc3ea707c3289acce253f091/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=c28d86c53b94e475fc3ea707c3289acce253f091", "patch": "@@ -264,7 +264,7 @@ impl<'tcx> ty::TyS<'tcx> {\n                 }\n             }\n             ty::Closure(..) => \"closure\".into(),\n-            ty::Generator(..) => \"generator\".into(),\n+            ty::Generator(def_id, ..) => tcx.generator_kind(def_id).unwrap().descr().into(),\n             ty::GeneratorWitness(..) => \"generator witness\".into(),\n             ty::Tuple(..) => \"tuple\".into(),\n             ty::Infer(ty::TyVar(_)) => \"inferred type\".into(),\n@@ -282,7 +282,7 @@ impl<'tcx> ty::TyS<'tcx> {\n         }\n     }\n \n-    pub fn prefix_string(&self) -> Cow<'static, str> {\n+    pub fn prefix_string(&self, tcx: TyCtxt<'_>) -> Cow<'static, str> {\n         match *self.kind() {\n             ty::Infer(_)\n             | ty::Error(_)\n@@ -308,7 +308,7 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(..) => \"trait object\".into(),\n             ty::Closure(..) => \"closure\".into(),\n-            ty::Generator(..) => \"generator\".into(),\n+            ty::Generator(def_id, ..) => tcx.generator_kind(def_id).unwrap().descr().into(),\n             ty::GeneratorWitness(..) => \"generator witness\".into(),\n             ty::Tuple(..) => \"tuple\".into(),\n             ty::Placeholder(..) => \"higher-ranked type\".into(),"}, {"sha": "7b00a828a974f82912004be9ddc070a75a646590", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c28d86c53b94e475fc3ea707c3289acce253f091/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28d86c53b94e475fc3ea707c3289acce253f091/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c28d86c53b94e475fc3ea707c3289acce253f091", "patch": "@@ -1366,8 +1366,8 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     Some(t) => Some(t),\n                     None => {\n                         let ty = parent_trait_ref.skip_binder().self_ty();\n-                        let span =\n-                            TyCategory::from_ty(ty).map(|(_, def_id)| self.tcx.def_span(def_id));\n+                        let span = TyCategory::from_ty(self.tcx, ty)\n+                            .map(|(_, def_id)| self.tcx.def_span(def_id));\n                         Some((ty.to_string(), span))\n                     }\n                 }"}, {"sha": "09a15df97a2d1551da126555a2cdd257890ac105", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c28d86c53b94e475fc3ea707c3289acce253f091/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28d86c53b94e475fc3ea707c3289acce253f091/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c28d86c53b94e475fc3ea707c3289acce253f091", "patch": "@@ -390,7 +390,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             \"no {} named `{}` found for {} `{}` in the current scope\",\n                             item_kind,\n                             item_name,\n-                            actual.prefix_string(),\n+                            actual.prefix_string(self.tcx),\n                             ty_str,\n                         );\n                         if let Mode::MethodCall = mode {\n@@ -728,7 +728,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .map(|(_, path)| path)\n                             .collect::<Vec<_>>()\n                             .join(\"\\n\");\n-                        let actual_prefix = actual.prefix_string();\n+                        let actual_prefix = actual.prefix_string(self.tcx);\n                         err.set_primary_message(&format!(\n                             \"the {item_kind} `{item_name}` exists for {actual_prefix} `{ty_str}`, but its trait bounds were not satisfied\"\n                         ));"}, {"sha": "5008120166711006120736ef2cfb112304cc09d7", "filename": "src/test/ui/async-await/generator-desc.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c28d86c53b94e475fc3ea707c3289acce253f091/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28d86c53b94e475fc3ea707c3289acce253f091/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.rs?ref=c28d86c53b94e475fc3ea707c3289acce253f091", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+#![feature(async_closure)]\n+use std::future::Future;\n+\n+async fn one() {}\n+async fn two() {}\n+\n+fn fun<F: Future<Output = ()>>(f1: F, f2: F) {}\n+fn main() {\n+    fun(async {}, async {});\n+    //~^ ERROR mismatched types\n+    fun(one(), two());\n+    //~^ ERROR mismatched types\n+    fun((async || {})(), (async || {})());\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "b85926c7a03c0012d030cc097b4d33dec85e414a", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c28d86c53b94e475fc3ea707c3289acce253f091/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c28d86c53b94e475fc3ea707c3289acce253f091/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=c28d86c53b94e475fc3ea707c3289acce253f091", "patch": "@@ -0,0 +1,49 @@\n+error[E0308]: mismatched types\n+  --> $DIR/generator-desc.rs:10:25\n+   |\n+LL |     fun(async {}, async {});\n+   |               --        ^^ expected `async` block, found a different `async` block\n+   |               |\n+   |               the expected `async` block\n+   |\n+   = note: expected `async` block `[static generator@$DIR/generator-desc.rs:10:15: 10:17]`\n+              found `async` block `[static generator@$DIR/generator-desc.rs:10:25: 10:27]`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/generator-desc.rs:12:16\n+   |\n+LL | async fn one() {}\n+   |                - the `Output` of this `async fn`'s expected opaque type\n+LL | async fn two() {}\n+   |                - the `Output` of this `async fn`'s found opaque type\n+...\n+LL |     fun(one(), two());\n+   |                ^^^^^ expected opaque type, found a different opaque type\n+   |\n+   = note: expected opaque type `impl Future` (opaque type at <$DIR/generator-desc.rs:5:16>)\n+              found opaque type `impl Future` (opaque type at <$DIR/generator-desc.rs:6:16>)\n+   = help: consider `await`ing on both `Future`s\n+   = note: distinct uses of `impl Trait` result in different opaque types\n+\n+error[E0308]: mismatched types\n+  --> $DIR/generator-desc.rs:14:26\n+   |\n+LL |     fun((async || {})(), (async || {})());\n+   |                   --     ^^^^^^^^^^^^^^^ expected `async` closure body, found a different `async` closure body\n+   |                   |\n+   |                   the expected `async` closure body\n+   | \n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           -------------------------------\n+   |                                           |\n+   |                                           the expected opaque type\n+   |                                           the found opaque type\n+   |\n+   = note: expected opaque type `impl Future` (`async` closure body)\n+              found opaque type `impl Future` (`async` closure body)\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}