{"sha": "c615b11aa7a4e41a7b11c9bfb3a4fe101c4f973f", "node_id": "C_kwDOAAsO6NoAKGM2MTViMTFhYTdhNGU0MWE3YjExYzliZmIzYTRmZTEwMWM0Zjk3M2Y", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-10T02:30:24Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-10T04:06:33Z"}, "message": "Remove unnecessary reborrows", "tree": {"sha": "06846bd76de21fdbca2809b18e97cba2122c3f4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06846bd76de21fdbca2809b18e97cba2122c3f4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c615b11aa7a4e41a7b11c9bfb3a4fe101c4f973f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c615b11aa7a4e41a7b11c9bfb3a4fe101c4f973f", "html_url": "https://github.com/rust-lang/rust/commit/c615b11aa7a4e41a7b11c9bfb3a4fe101c4f973f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c615b11aa7a4e41a7b11c9bfb3a4fe101c4f973f/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf6a73c1a4a363a1239f2db32b89ff3d2affb6c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf6a73c1a4a363a1239f2db32b89ff3d2affb6c2", "html_url": "https://github.com/rust-lang/rust/commit/cf6a73c1a4a363a1239f2db32b89ff3d2affb6c2"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "4e1fd4f1136bcebdcfefa782a3b3dfd2000e91b9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c615b11aa7a4e41a7b11c9bfb3a4fe101c4f973f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c615b11aa7a4e41a7b11c9bfb3a4fe101c4f973f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c615b11aa7a4e41a7b11c9bfb3a4fe101c4f973f", "patch": "@@ -109,7 +109,10 @@ impl Clean<GenericBound> for hir::GenericBound<'_> {\n                 };\n \n                 GenericBound::TraitBound(\n-                    PolyTrait { trait_: (trait_ref, &*bindings).clean(cx), generic_params: vec![] },\n+                    PolyTrait {\n+                        trait_: (trait_ref, &bindings[..]).clean(cx),\n+                        generic_params: vec![],\n+                    },\n                     hir::TraitBoundModifier::None,\n                 )\n             }\n@@ -764,7 +767,7 @@ impl<'a> Clean<Function> for (&'a hir::FnSig<'a>, &'a hir::Generics<'a>, hir::Bo\n         let (generics, decl) = enter_impl_trait(cx, |cx| {\n             let generics = self.1.clean(cx);\n             let args = (self.0.decl.inputs, self.2).clean(cx);\n-            let decl = clean_fn_decl_with_args(cx, &*self.0.decl, args);\n+            let decl = clean_fn_decl_with_args(cx, self.0.decl, args);\n             (generics, decl)\n         });\n         Function { decl, generics, header: self.0.header }"}]}