{"sha": "90da9fc9b302de46097065f0d6428ad33c292217", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZGE5ZmM5YjMwMmRlNDYwOTcwNjVmMGQ2NDI4YWQzM2MyOTIyMTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-18T20:48:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-18T20:48:18Z"}, "message": "minor: use minicore", "tree": {"sha": "8cac1ee23ff3232ccc30eb174da908cecf34df8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cac1ee23ff3232ccc30eb174da908cecf34df8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90da9fc9b302de46097065f0d6428ad33c292217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90da9fc9b302de46097065f0d6428ad33c292217", "html_url": "https://github.com/rust-lang/rust/commit/90da9fc9b302de46097065f0d6428ad33c292217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90da9fc9b302de46097065f0d6428ad33c292217/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9623f3165f87124de836e81e238118e557bb9e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9623f3165f87124de836e81e238118e557bb9e9", "html_url": "https://github.com/rust-lang/rust/commit/a9623f3165f87124de836e81e238118e557bb9e9"}], "stats": {"total": 112, "additions": 43, "deletions": 69}, "files": [{"sha": "839ceac03e0eeb0e7e079730261e8cd9419261bb", "filename": "crates/ide_diagnostics/src/handlers/replace_filter_map_next_with_find_map.rs", "status": "modified", "additions": 19, "deletions": 67, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/90da9fc9b302de46097065f0d6428ad33c292217/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90da9fc9b302de46097065f0d6428ad33c292217/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Freplace_filter_map_next_with_find_map.rs?ref=90da9fc9b302de46097065f0d6428ad33c292217", "patch": "@@ -55,44 +55,16 @@ fn fixes(\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::check_fix;\n-\n-    // Register the required standard library types to make the tests work\n-    #[track_caller]\n-    fn check_diagnostics(ra_fixture: &str) {\n-        let prefix = r#\"\n-//- /main.rs crate:main deps:core\n-use core::iter::Iterator;\n-use core::option::Option::{self, Some, None};\n-\"#;\n-        let suffix = r#\"\n-//- /core/lib.rs crate:core\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n-pub mod iter {\n-    pub trait Iterator {\n-        type Item;\n-        fn filter_map<B, F>(self, f: F) -> FilterMap where F: FnMut(Self::Item) -> Option<B> { FilterMap }\n-        fn next(&mut self) -> Option<Self::Item>;\n-    }\n-    pub struct FilterMap {}\n-    impl Iterator for FilterMap {\n-        type Item = i32;\n-        fn next(&mut self) -> i32 { 7 }\n-    }\n-}\n-\"#;\n-        crate::tests::check_diagnostics(&format!(\"{}{}{}\", prefix, ra_fixture, suffix))\n-    }\n+    use crate::tests::{check_diagnostics, check_fix};\n \n     #[test]\n     fn replace_filter_map_next_with_find_map2() {\n         check_diagnostics(\n             r#\"\n-    fn foo() {\n-        let m = [1, 2, 3].iter().filter_map(|x| Some(92)).next();\n-    }         //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \ud83d\udca1 weak: replace filter_map(..).next() with find_map(..)\n+//- minicore: iterators\n+fn foo() {\n+    let m = core::iter::repeat(()).filter_map(|()| Some(92)).next();\n+}         //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \ud83d\udca1 weak: replace filter_map(..).next() with find_map(..)\n \"#,\n         );\n     }\n@@ -101,11 +73,11 @@ pub mod iter {\n     fn replace_filter_map_next_with_find_map_no_diagnostic_without_next() {\n         check_diagnostics(\n             r#\"\n+//- minicore: iterators\n fn foo() {\n-    let m = [1, 2, 3]\n-        .iter()\n-        .filter_map(|x| Some(92))\n-        .len();\n+    let m = core::iter::repeat(())\n+        .filter_map(|()| Some(92))\n+        .count();\n }\n \"#,\n         );\n@@ -115,12 +87,12 @@ fn foo() {\n     fn replace_filter_map_next_with_find_map_no_diagnostic_with_intervening_methods() {\n         check_diagnostics(\n             r#\"\n+//- minicore: iterators\n fn foo() {\n-    let m = [1, 2, 3]\n-        .iter()\n-        .filter_map(|x| Some(92))\n+    let m = core::iter::repeat(())\n+        .filter_map(|()| Some(92))\n         .map(|x| x + 2)\n-        .len();\n+        .next();\n }\n \"#,\n         );\n@@ -130,10 +102,10 @@ fn foo() {\n     fn replace_filter_map_next_with_find_map_no_diagnostic_if_not_in_chain() {\n         check_diagnostics(\n             r#\"\n+//- minicore: iterators\n fn foo() {\n-    let m = [1, 2, 3]\n-        .iter()\n-        .filter_map(|x| Some(92));\n+    let m = core::iter::repeat(())\n+        .filter_map(|()| Some(92));\n     let n = m.next();\n }\n \"#,\n@@ -144,34 +116,14 @@ fn foo() {\n     fn replace_with_wind_map() {\n         check_fix(\n             r#\"\n-//- /main.rs crate:main deps:core\n-use core::iter::Iterator;\n-use core::option::Option::{self, Some, None};\n+//- minicore: iterators\n fn foo() {\n-    let m = [1, 2, 3].iter().$0filter_map(|x| Some(92)).next();\n-}\n-//- /core/lib.rs crate:core\n-pub mod option {\n-    pub enum Option<T> { Some(T), None }\n-}\n-pub mod iter {\n-    pub trait Iterator {\n-        type Item;\n-        fn filter_map<B, F>(self, f: F) -> FilterMap where F: FnMut(Self::Item) -> Option<B> { FilterMap }\n-        fn next(&mut self) -> Option<Self::Item>;\n-    }\n-    pub struct FilterMap {}\n-    impl Iterator for FilterMap {\n-        type Item = i32;\n-        fn next(&mut self) -> i32 { 7 }\n-    }\n+    let m = core::iter::repeat(()).$0filter_map(|()| Some(92)).next();\n }\n \"#,\n             r#\"\n-use core::iter::Iterator;\n-use core::option::Option::{self, Some, None};\n fn foo() {\n-    let m = [1, 2, 3].iter().find_map(|x| Some(92));\n+    let m = core::iter::repeat(()).find_map(|()| Some(92));\n }\n \"#,\n         )"}, {"sha": "ce6ad8541bd2031423cff7e38ef2ff9dd8bf8444", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/90da9fc9b302de46097065f0d6428ad33c292217/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90da9fc9b302de46097065f0d6428ad33c292217/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=90da9fc9b302de46097065f0d6428ad33c292217", "patch": "@@ -22,7 +22,7 @@\n //!     option:\n //!     result:\n //!     iterator: option\n-//!     iterators: iterator\n+//!     iterators: iterator, fn\n //!     default: sized\n //!     clone: sized\n //!     copy: clone\n@@ -390,7 +390,6 @@ pub mod iter {\n             iter: I,\n             n: usize,\n         }\n-\n         impl<I> Iterator for Take<I>\n         where\n             I: Iterator,\n@@ -401,6 +400,22 @@ pub mod iter {\n                 loop {}\n             }\n         }\n+\n+        pub struct FilterMap<I, F> {\n+            iter: I,\n+            f: F,\n+        }\n+        impl<B, I: Iterator, F> Iterator for FilterMap<I, F>\n+        where\n+            F: FnMut(I::Item) -> Option<B>,\n+        {\n+            type Item = B;\n+\n+            #[inline]\n+            fn next(&mut self) -> Option<B> {\n+                loop {}\n+            }\n+        }\n     }\n     pub use self::adapters::Take;\n \n@@ -448,6 +463,13 @@ pub mod iter {\n                 fn take(self, n: usize) -> crate::iter::Take<Self> {\n                     loop {}\n                 }\n+                fn filter_map<B, F>(self, f: F) -> crate::iter::FilterMap<Self, F>\n+                where\n+                    Self: Sized,\n+                    F: FnMut(Self::Item) -> Option<B>,\n+                {\n+                    loop {}\n+                }\n                 // endregion:iterators\n             }\n             impl<I: Iterator + ?Sized> Iterator for &mut I {"}]}