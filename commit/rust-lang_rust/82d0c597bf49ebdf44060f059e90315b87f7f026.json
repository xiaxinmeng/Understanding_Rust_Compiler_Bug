{"sha": "82d0c597bf49ebdf44060f059e90315b87f7f026", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZDBjNTk3YmY0OWViZGY0NDA2MGYwNTllOTAzMTViODdmN2YwMjY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-01-11T19:27:59Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-01-11T19:27:59Z"}, "message": "Revert \"Auto merge of #76896 - spastorino:codegen-inline-fns2, r=davidtwco,wesleywiser\"\n\nThis reverts commit ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09, reversing\nchanges made to 937f629535f38c655267f1ed21ce6830f592f5df.", "tree": {"sha": "567cd2fd3d6465a3bbc4fb3bfdf53c07fe52bf9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/567cd2fd3d6465a3bbc4fb3bfdf53c07fe52bf9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82d0c597bf49ebdf44060f059e90315b87f7f026", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl/8psIACgkQgTGiTgx5\n769+UxAAnv6GXw0J2ZDoUOGgTYHOZOVvM3phDRmzXeeUXjkjSEj9lDHG23ENTSB3\ne7mIEuF3UZM83/qZTZHMKW+w3x7xXtvcw4wF/4SBW3IIbY8jRD/rDc0JJvndVt3h\nXb6SPt9DnoORrVqm9FmQg3iL7H38X6DrJqtIld5wGv8aHw8jN1gHmaOrq82jwipY\nC9BhX8MOprnVft4kApD82KuVAUylB71XLc4F96tV+5qQqQNKP05T+sSoWMAfRjPT\nViR4ENWF+OtTgl2dNNw8F1P44aH0xPyJrE27GrVGQZDR6W8nqa5H7QwPjbzKWjHi\nMSIXhQHjDJF33KNpkMUGuOC82TIQM4+SeASwcCl1iRXqwqkWrjpZTdziU6h/o7dM\n7jKxA3HnAijNJST3Y0S02iwhrcZadCuyFzw4M1GxJAhqR+Iu9Wyar5xSq+ga34on\n2utkISDSuQL4FRe0nckQuTR8/nZPd1GUxkIJ97QytLUMDySRoiYXdJ9x1M/LrHYK\nRJKbv2xeq9xaA1agLSTdUoLBIt61+qnB4t/VfQISNTZq8/jWeXpzm0n9GIfmXcgq\nlREPIHa6b7afOwo3+rrBE8nGcBI1GjNMINQ/Jz5NX7l2Mq8rDxifrwznLwXmk9Ap\nQrAXMYIALoSYtL9NSGeKA3T4DYktO6212YBH0wN9i1eXtAb0Ga4=\n=Yyp3\n-----END PGP SIGNATURE-----", "payload": "tree 567cd2fd3d6465a3bbc4fb3bfdf53c07fe52bf9a\nparent 6526e5c772f2da07db745c94ca6bb0a591a39ba4\nauthor Santiago Pastorino <spastorino@gmail.com> 1610393279 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1610393279 -0300\n\nRevert \"Auto merge of #76896 - spastorino:codegen-inline-fns2, r=davidtwco,wesleywiser\"\n\nThis reverts commit ddf2cc7f8eb34f1a63b491d6a52e3e8208393c09, reversing\nchanges made to 937f629535f38c655267f1ed21ce6830f592f5df.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82d0c597bf49ebdf44060f059e90315b87f7f026", "html_url": "https://github.com/rust-lang/rust/commit/82d0c597bf49ebdf44060f059e90315b87f7f026", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82d0c597bf49ebdf44060f059e90315b87f7f026/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6526e5c772f2da07db745c94ca6bb0a591a39ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6526e5c772f2da07db745c94ca6bb0a591a39ba4", "html_url": "https://github.com/rust-lang/rust/commit/6526e5c772f2da07db745c94ca6bb0a591a39ba4"}], "stats": {"total": 65, "additions": 26, "deletions": 39}, "files": [{"sha": "f810f6a56a5207cc4d8fac2e957f48288a437397", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/82d0c597bf49ebdf44060f059e90315b87f7f026/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82d0c597bf49ebdf44060f059e90315b87f7f026/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=82d0c597bf49ebdf44060f059e90315b87f7f026", "patch": "@@ -1,6 +1,7 @@\n use crate::dep_graph::{dep_constructor, DepNode, WorkProduct, WorkProductId};\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n+use rustc_attr::InlineAttr;\n use rustc_data_structures::base_n;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n@@ -78,6 +79,14 @@ impl<'tcx> MonoItem<'tcx> {\n     }\n \n     pub fn instantiation_mode(&self, tcx: TyCtxt<'tcx>) -> InstantiationMode {\n+        let generate_cgu_internal_copies = tcx\n+            .sess\n+            .opts\n+            .debugging_opts\n+            .inline_in_all_cgus\n+            .unwrap_or_else(|| tcx.sess.opts.optimize != OptLevel::No)\n+            && !tcx.sess.link_dead_code();\n+\n         match *self {\n             MonoItem::Fn(ref instance) => {\n                 let entry_def_id = tcx.entry_fn(LOCAL_CRATE).map(|(id, _)| id);\n@@ -90,26 +99,21 @@ impl<'tcx> MonoItem<'tcx> {\n                     return InstantiationMode::GloballyShared { may_conflict: false };\n                 }\n \n-                let generate_cgu_internal_copies = tcx\n-                    .sess\n-                    .opts\n-                    .debugging_opts\n-                    .inline_in_all_cgus\n-                    .unwrap_or_else(|| tcx.sess.opts.optimize != OptLevel::No)\n-                    && !tcx.sess.link_dead_code();\n-\n                 // At this point we don't have explicit linkage and we're an\n-                // inlined function. If we should generate local copies for each CGU,\n-                // then return `LocalCopy`, otherwise we'll just generate one copy\n-                // and share it with all CGUs in this crate.\n+                // inlined function. If we're inlining into all CGUs then we'll\n+                // be creating a local copy per CGU.\n                 if generate_cgu_internal_copies {\n-                    InstantiationMode::LocalCopy\n-                } else {\n-                    // Finally, if we've reached this point, then we should optimize for\n-                    // compilation speed. In that regard, we will ignore any `#[inline]`\n-                    // annotations on the function and simply codegen it as usual. This could\n-                    // conflict with upstream crates as it could be an exported symbol.\n-                    InstantiationMode::GloballyShared { may_conflict: true }\n+                    return InstantiationMode::LocalCopy;\n+                }\n+\n+                // Finally, if this is `#[inline(always)]` we're sure to respect\n+                // that with an inline copy per CGU, but otherwise we'll be\n+                // creating one copy of this `#[inline]` function which may\n+                // conflict with upstream crates as it could be an exported\n+                // symbol.\n+                match tcx.codegen_fn_attrs(instance.def_id()).inline {\n+                    InlineAttr::Always => InstantiationMode::LocalCopy,\n+                    _ => InstantiationMode::GloballyShared { may_conflict: true },\n                 }\n             }\n             MonoItem::Static(..) | MonoItem::GlobalAsm(..) => {"}, {"sha": "8124141418bc3cfbe53396a658f9e5077fbccc84", "filename": "src/test/incremental/hygiene/load_cached_hygiene.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/82d0c597bf49ebdf44060f059e90315b87f7f026/src%2Ftest%2Fincremental%2Fhygiene%2Fload_cached_hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82d0c597bf49ebdf44060f059e90315b87f7f026/src%2Ftest%2Fincremental%2Fhygiene%2Fload_cached_hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhygiene%2Fload_cached_hygiene.rs?ref=82d0c597bf49ebdf44060f059e90315b87f7f026", "patch": "@@ -1,5 +1,5 @@\n // revisions:rpass1 rpass2\n-// compile-flags: -Z query-dep-graph -O\n+// compile-flags: -Z query-dep-graph\n // aux-build:cached_hygiene.rs\n \n // This tests the folllowing scenario\n@@ -19,12 +19,7 @@\n // the metadata. Specifically, we were not resetting `orig_id`\n // for an `EpxnData` generate in the current crate, which would cause\n // us to serialize the `ExpnId` pointing to a garbage location in\n-// the metadata.o\n-\n-// NOTE: We're explicitly passing the `-O` optimization flag because if optimizations are not\n-// enabled, then rustc will ignore the `#[inline(always)]` attribute which means we do not load\n-// the optimized mir for the unmodified function to be loaded and so the CGU containing that\n-// function will be reused.\n+// the metadata.\n \n #![feature(rustc_attrs)]\n "}, {"sha": "b01f02444eae8dfa516799efc3e30177dee12b19", "filename": "src/test/incremental/remapped_paths_cc/main.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/82d0c597bf49ebdf44060f059e90315b87f7f026/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82d0c597bf49ebdf44060f059e90315b87f7f026/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs?ref=82d0c597bf49ebdf44060f059e90315b87f7f026", "patch": "@@ -1,18 +1,11 @@\n // revisions:rpass1 rpass2 rpass3\n-// compile-flags: -Z query-dep-graph -g -O\n+// compile-flags: -Z query-dep-graph -g\n // aux-build:extern_crate.rs\n \n // ignore-asmjs wasm2js does not support source maps yet\n-\n // This test case makes sure that we detect if paths emitted into debuginfo\n // are changed, even when the change happens in an external crate.\n \n-// NOTE: We're explicitly passing the `-O` optimization flag because if no optimizations are\n-// requested, rustc will ignore the `#[inline]` attribute. This is a performance optimization for\n-// non-optimized builds which causes us to generate fewer copies of inlined functions when\n-// runtime performance doesn't matter. Without this flag, the function will go into a different\n-// CGU which can be reused by this crate.\n-\n #![feature(rustc_attrs)]\n \n #![rustc_partition_reused(module=\"main\", cfg=\"rpass2\")]"}, {"sha": "0cab955f6442bb70d3acb8063ed645666a9ba414", "filename": "src/test/run-make-fulldeps/inline-always-many-cgu/Makefile", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/82d0c597bf49ebdf44060f059e90315b87f7f026/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/82d0c597bf49ebdf44060f059e90315b87f7f026/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finline-always-many-cgu%2FMakefile?ref=82d0c597bf49ebdf44060f059e90315b87f7f026", "patch": "@@ -1,12 +1,7 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) foo.rs --emit llvm-ir -C codegen-units=2 -C opt-level=0\n-\tif ![cat $(TMPDIR)/*.ll | $(CGREP) -e '\\bcall\\b']; then \\\n-\t\techo \"not found call instruction when one was expected\"; \\\n-\t\texit 1; \\\n-\tfi\n-\t$(RUSTC) foo.rs --emit llvm-ir -C codegen-units=2 -C opt-level=1\n+\t$(RUSTC) foo.rs --emit llvm-ir -C codegen-units=2\n \tif cat $(TMPDIR)/*.ll | $(CGREP) -e '\\bcall\\b'; then \\\n \t\techo \"found call instruction when one wasn't expected\"; \\\n \t\texit 1; \\"}]}