{"sha": "0b300a7bfae0fa9031e8c593cc6101c117c47a74", "node_id": "C_kwDOAAsO6NoAKDBiMzAwYTdiZmFlMGZhOTAzMWU4YzU5M2NjNjEwMWMxMTdjNDdhNzQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-27T18:40:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-27T18:40:27Z"}, "message": "Rollup merge of #109084 - dekrain:fix-panic-arg0-expansion, r=petrochenkov\n\nrustc driver: Remove argument 0 before at-expansion to prevent ICE\n\nUnder Unix-based operating systems, when I execute rustc by setting argv0 to ``@/dev/null`,` it will expand command-line arguments from this file, leading to an empty arglist, which then triggers an ICE by trying to remove first argument.\n\nThe panic message is this:\n```\nthread 'main' panicked at 'range start index 1 out of range for slice of length 0', compiler/rustc_driver/src/lib.rs:972:17\n```\n\nMy fix is to remove the first argument before expanding arguments.\n\n<details>\n<summary>Full backtrace</summary>\n\n```sh\n% (exec -a `@/dev/null` `rustup which rustc`)\nthread 'main' panicked at 'range start index 1 out of range for slice of length 0', compiler/rustc_driver/src/lib.rs:972:17\nstack backtrace:\n   0:     0x7fcec776659a - std::backtrace_rs::backtrace::libunwind::trace::h595f06c70adcc478\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\n   1:     0x7fcec776659a - std::backtrace_rs::backtrace::trace_unsynchronized::h177a0149c76cdde9\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x7fcec776659a - std::sys_common::backtrace::_print_fmt::hc0701fd2c3530c58\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/sys_common/backtrace.rs:65:5\n   3:     0x7fcec776659a - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hd4cd115d8750fd6c\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x7fcec77c839e - core::fmt::write::h93e2f5923c7eca08\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/core/src/fmt/mod.rs:1213:17\n   5:     0x7fcec7756be5 - std::io::Write::write_fmt::h8162dbb45f0b9e62\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/io/mod.rs:1682:15\n   6:     0x7fcec7766365 - std::sys_common::backtrace::_print::h1835ef8a8f9066da\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/sys_common/backtrace.rs:47:5\n   7:     0x7fcec7766365 - std::sys_common::backtrace::print::hcb5e6388b9235f41\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/sys_common/backtrace.rs:34:9\n   8:     0x7fcec776912f - std::panicking::default_hook::{{closure}}::h9c084969ccf9a722\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:267:22\n   9:     0x7fcec7768e6b - std::panicking::default_hook::h68fa2ba3c3c6c12f\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:286:9\n  10:     0x7fcecaab56e4 - <rustc_driver[f4ad927b3c57833d]::DEFAULT_HOOK::{closure#0}::{closure#0} as core[d16e85342ea223d9]::ops::function::FnOnce<(&core[d16e85342ea223d9]::panic::panic_info::PanicInfo,)>>::call_once::{shim:vtable#0}\n  11:     0x7fcec776996a - <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call::h4e6ced11e07d8b24\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/alloc/src/boxed.rs:2002:9\n  12:     0x7fcec776996a - std::panicking::rust_panic_with_hook::h8d5c434518ef298c\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:692:13\n  13:     0x7fcec77696e9 - std::panicking::begin_panic_handler::{{closure}}::hf33414f5dabf6faf\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:579:13\n  14:     0x7fcec7766a4c - std::sys_common::backtrace::__rust_end_short_backtrace::hc50389427413bb75\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/sys_common/backtrace.rs:137:18\n  15:     0x7fcec77693f2 - rust_begin_unwind\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:575:5\n  16:     0x7fcec77c4d43 - core::panicking::panic_fmt::h2de7a7938f816de8\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/core/src/panicking.rs:64:14\n  17:     0x7fcec77cb492 - core::slice::index::slice_start_index_len_fail_rt::h0c87d85ce11d10f6\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/core/src/slice/index.rs:53:5\n  18:     0x7fcec77cb416 - core::slice::index::slice_start_index_len_fail::h504609f2a6b168d1\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/core/src/slice/index.rs:41:9\n  19:     0x7fceca0eca1f - rustc_driver[f4ad927b3c57833d]::handle_options\n  20:     0x7fceca0e037f - <rustc_driver[f4ad927b3c57833d]::RunCompiler>::run\n  21:     0x7fceca0dfd0d - <core[d16e85342ea223d9]::panic::unwind_safe::AssertUnwindSafe<rustc_driver[f4ad927b3c57833d]::main::{closure#0}> as core[d16e85342ea223d9]::ops::function::FnOnce<()>>::call_once\n  22:     0x7fceca17ce89 - rustc_driver[f4ad927b3c57833d]::main\n  23:     0x564f5f008a87 - rustc_main[f164605d1302e295]::main\n  24:     0x564f5f008973 - std[3da461b304582a2c]::sys_common::backtrace::__rust_begin_short_backtrace::<fn(), ()>\n  25:     0x564f5f008969 - <std[3da461b304582a2c]::rt::lang_start<()>::{closure#0} as core[d16e85342ea223d9]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\n  26:     0x7fcec774795c - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::h699977d052768608\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/core/src/ops/function.rs:287:13\n  27:     0x7fcec774795c - std::panicking::try::do_call::h4e121e623c70f903\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:483:40\n  28:     0x7fcec774795c - std::panicking::try::hf9d919e062bc178a\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:447:19\n  29:     0x7fcec774795c - std::panic::catch_unwind::h7a7b12272684cb97\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panic.rs:140:14\n  30:     0x7fcec774795c - std::rt::lang_start_internal::{{closure}}::hd96b0eb4844b8762\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/rt.rs:148:48\n  31:     0x7fcec774795c - std::panicking::try::do_call::h1af1f88f4f92a22c\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:483:40\n  32:     0x7fcec774795c - std::panicking::try::hf20d7abea7f0f097\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:447:19\n  33:     0x7fcec774795c - std::panic::catch_unwind::hb0e084c3a9c042e4\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panic.rs:140:14\n  34:     0x7fcec774795c - std::rt::lang_start_internal::hca9d5c7277f5b67c\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/rt.rs:148:20\n  35:     0x564f5f008ab7 - main\n  36:     0x7fcec74a1790 - <unknown>\n  37:     0x7fcec74a184a - __libc_start_main\n  38:     0x564f5f00899e - <unknown>\n  39:                0x0 - <unknown>\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.68.0 (2c8cc3432 2023-03-06) running on x86_64-unknown-linux-gnu\n\nquery stack during panic:\nend of query stack\n```\n</details>\n\nI also checked if I can trigger a similar problem by passing empty argument list to `execve`, but at least under Linux, it seems to always insert an empty first argument if there are none.", "tree": {"sha": "f987c3bac2b1e10a5a106eea7a18b2b4bf516d43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f987c3bac2b1e10a5a106eea7a18b2b4bf516d43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b300a7bfae0fa9031e8c593cc6101c117c47a74", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkck6bCRBK7hj4Ov3rIwAA5VwIAE6k9XeI2UqqlqQwbPRVziQ8\nvpaAfa7iRJyEDr+CwM+NeWCriKiF+wipDDPmyCqq0XEBkFGNcGKUSae7APdbuBBj\nTyI4q/jc0rqvqAlVt2FLiQ+X4kLAY45jOvzQyjfrEnCxZ1fvM06rA5E+z4cSjVJV\n8O7MAn4TlDdqjAwAV1mEjem+4OnQl+uBouGzXI62MbsGOgLR8Ju0e7QpnlJCaSJJ\nTq6OfVYmtVnuacVlOg4VzF42nouS3gFw2RisV6eTn7tTDpRwIeHB/XND146B+Rmy\ntulFaEmt+QRQFBwSr66VPqELfJwUDLU1v271X3Ho7syc7wOyyTgCFdxr7XbZQRw=\n=Ht+v\n-----END PGP SIGNATURE-----\n", "payload": "tree f987c3bac2b1e10a5a106eea7a18b2b4bf516d43\nparent 1d06bb96129abf007f22c464ddf8808ace178c18\nparent 6240d4518930bdf20b44109e55d047eec3221c9a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685212827 +0200\ncommitter GitHub <noreply@github.com> 1685212827 +0200\n\nRollup merge of #109084 - dekrain:fix-panic-arg0-expansion, r=petrochenkov\n\nrustc driver: Remove argument 0 before at-expansion to prevent ICE\n\nUnder Unix-based operating systems, when I execute rustc by setting argv0 to ``@/dev/null`,` it will expand command-line arguments from this file, leading to an empty arglist, which then triggers an ICE by trying to remove first argument.\n\nThe panic message is this:\n```\nthread 'main' panicked at 'range start index 1 out of range for slice of length 0', compiler/rustc_driver/src/lib.rs:972:17\n```\n\nMy fix is to remove the first argument before expanding arguments.\n\n<details>\n<summary>Full backtrace</summary>\n\n```sh\n% (exec -a `@/dev/null` `rustup which rustc`)\nthread 'main' panicked at 'range start index 1 out of range for slice of length 0', compiler/rustc_driver/src/lib.rs:972:17\nstack backtrace:\n   0:     0x7fcec776659a - std::backtrace_rs::backtrace::libunwind::trace::h595f06c70adcc478\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\n   1:     0x7fcec776659a - std::backtrace_rs::backtrace::trace_unsynchronized::h177a0149c76cdde9\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2:     0x7fcec776659a - std::sys_common::backtrace::_print_fmt::hc0701fd2c3530c58\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/sys_common/backtrace.rs:65:5\n   3:     0x7fcec776659a - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hd4cd115d8750fd6c\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/sys_common/backtrace.rs:44:22\n   4:     0x7fcec77c839e - core::fmt::write::h93e2f5923c7eca08\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/core/src/fmt/mod.rs:1213:17\n   5:     0x7fcec7756be5 - std::io::Write::write_fmt::h8162dbb45f0b9e62\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/io/mod.rs:1682:15\n   6:     0x7fcec7766365 - std::sys_common::backtrace::_print::h1835ef8a8f9066da\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/sys_common/backtrace.rs:47:5\n   7:     0x7fcec7766365 - std::sys_common::backtrace::print::hcb5e6388b9235f41\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/sys_common/backtrace.rs:34:9\n   8:     0x7fcec776912f - std::panicking::default_hook::{{closure}}::h9c084969ccf9a722\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:267:22\n   9:     0x7fcec7768e6b - std::panicking::default_hook::h68fa2ba3c3c6c12f\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:286:9\n  10:     0x7fcecaab56e4 - <rustc_driver[f4ad927b3c57833d]::DEFAULT_HOOK::{closure#0}::{closure#0} as core[d16e85342ea223d9]::ops::function::FnOnce<(&core[d16e85342ea223d9]::panic::panic_info::PanicInfo,)>>::call_once::{shim:vtable#0}\n  11:     0x7fcec776996a - <alloc::boxed::Box<F,A> as core::ops::function::Fn<Args>>::call::h4e6ced11e07d8b24\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/alloc/src/boxed.rs:2002:9\n  12:     0x7fcec776996a - std::panicking::rust_panic_with_hook::h8d5c434518ef298c\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:692:13\n  13:     0x7fcec77696e9 - std::panicking::begin_panic_handler::{{closure}}::hf33414f5dabf6faf\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:579:13\n  14:     0x7fcec7766a4c - std::sys_common::backtrace::__rust_end_short_backtrace::hc50389427413bb75\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/sys_common/backtrace.rs:137:18\n  15:     0x7fcec77693f2 - rust_begin_unwind\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:575:5\n  16:     0x7fcec77c4d43 - core::panicking::panic_fmt::h2de7a7938f816de8\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/core/src/panicking.rs:64:14\n  17:     0x7fcec77cb492 - core::slice::index::slice_start_index_len_fail_rt::h0c87d85ce11d10f6\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/core/src/slice/index.rs:53:5\n  18:     0x7fcec77cb416 - core::slice::index::slice_start_index_len_fail::h504609f2a6b168d1\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/core/src/slice/index.rs:41:9\n  19:     0x7fceca0eca1f - rustc_driver[f4ad927b3c57833d]::handle_options\n  20:     0x7fceca0e037f - <rustc_driver[f4ad927b3c57833d]::RunCompiler>::run\n  21:     0x7fceca0dfd0d - <core[d16e85342ea223d9]::panic::unwind_safe::AssertUnwindSafe<rustc_driver[f4ad927b3c57833d]::main::{closure#0}> as core[d16e85342ea223d9]::ops::function::FnOnce<()>>::call_once\n  22:     0x7fceca17ce89 - rustc_driver[f4ad927b3c57833d]::main\n  23:     0x564f5f008a87 - rustc_main[f164605d1302e295]::main\n  24:     0x564f5f008973 - std[3da461b304582a2c]::sys_common::backtrace::__rust_begin_short_backtrace::<fn(), ()>\n  25:     0x564f5f008969 - <std[3da461b304582a2c]::rt::lang_start<()>::{closure#0} as core[d16e85342ea223d9]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}\n  26:     0x7fcec774795c - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::h699977d052768608\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/core/src/ops/function.rs:287:13\n  27:     0x7fcec774795c - std::panicking::try::do_call::h4e121e623c70f903\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:483:40\n  28:     0x7fcec774795c - std::panicking::try::hf9d919e062bc178a\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:447:19\n  29:     0x7fcec774795c - std::panic::catch_unwind::h7a7b12272684cb97\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panic.rs:140:14\n  30:     0x7fcec774795c - std::rt::lang_start_internal::{{closure}}::hd96b0eb4844b8762\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/rt.rs:148:48\n  31:     0x7fcec774795c - std::panicking::try::do_call::h1af1f88f4f92a22c\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:483:40\n  32:     0x7fcec774795c - std::panicking::try::hf20d7abea7f0f097\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panicking.rs:447:19\n  33:     0x7fcec774795c - std::panic::catch_unwind::hb0e084c3a9c042e4\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/panic.rs:140:14\n  34:     0x7fcec774795c - std::rt::lang_start_internal::hca9d5c7277f5b67c\n                               at /rustc/2c8cc343237b8f7d5a3c3703e3a87f2eb2c54a74/library/std/src/rt.rs:148:20\n  35:     0x564f5f008ab7 - main\n  36:     0x7fcec74a1790 - <unknown>\n  37:     0x7fcec74a184a - __libc_start_main\n  38:     0x564f5f00899e - <unknown>\n  39:                0x0 - <unknown>\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md\n\nnote: rustc 1.68.0 (2c8cc3432 2023-03-06) running on x86_64-unknown-linux-gnu\n\nquery stack during panic:\nend of query stack\n```\n</details>\n\nI also checked if I can trigger a similar problem by passing empty argument list to `execve`, but at least under Linux, it seems to always insert an empty first argument if there are none.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b300a7bfae0fa9031e8c593cc6101c117c47a74", "html_url": "https://github.com/rust-lang/rust/commit/0b300a7bfae0fa9031e8c593cc6101c117c47a74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b300a7bfae0fa9031e8c593cc6101c117c47a74/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d06bb96129abf007f22c464ddf8808ace178c18", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d06bb96129abf007f22c464ddf8808ace178c18", "html_url": "https://github.com/rust-lang/rust/commit/1d06bb96129abf007f22c464ddf8808ace178c18"}, {"sha": "6240d4518930bdf20b44109e55d047eec3221c9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6240d4518930bdf20b44109e55d047eec3221c9a", "html_url": "https://github.com/rust-lang/rust/commit/6240d4518930bdf20b44109e55d047eec3221c9a"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "eb92ccc17b20ff84cdcd715b3b95b5ea78b4528d", "filename": "compiler/rustc_driver_impl/src/args.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b300a7bfae0fa9031e8c593cc6101c117c47a74/compiler%2Frustc_driver_impl%2Fsrc%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b300a7bfae0fa9031e8c593cc6101c117c47a74/compiler%2Frustc_driver_impl%2Fsrc%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Fargs.rs?ref=0b300a7bfae0fa9031e8c593cc6101c117c47a74", "patch": "@@ -18,6 +18,9 @@ fn arg_expand(arg: String) -> Result<Vec<String>, Error> {\n     }\n }\n \n+/// **Note:** This function doesn't interpret argument 0 in any special way.\n+/// If this function is intended to be used with command line arguments,\n+/// `argv[0]` must be removed prior to calling it manually.\n pub fn arg_expand_all(at_args: &[String]) -> Vec<String> {\n     let mut args = Vec::new();\n     for arg in at_args {"}, {"sha": "0b5d737091e4c20444a5916e024ea8a8607a7cb2", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0b300a7bfae0fa9031e8c593cc6101c117c47a74/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b300a7bfae0fa9031e8c593cc6101c117c47a74/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=0b300a7bfae0fa9031e8c593cc6101c117c47a74", "patch": "@@ -250,6 +250,16 @@ fn run_compiler(\n         Box<dyn FnOnce(&config::Options) -> Box<dyn CodegenBackend> + Send>,\n     >,\n ) -> interface::Result<()> {\n+    // Throw away the first argument, the name of the binary.\n+    // In case of at_args being empty, as might be the case by\n+    // passing empty argument array to execve under some platforms,\n+    // just use an empty slice.\n+    //\n+    // This situation was possible before due to arg_expand_all being\n+    // called before removing the argument, enabling a crash by calling\n+    // the compiler with @empty_file as argv[0] and no more arguments.\n+    let at_args = at_args.get(1..).unwrap_or_default();\n+\n     let args = args::arg_expand_all(at_args);\n \n     let Some(matches) = handle_options(&args) else { return Ok(()) };\n@@ -1074,9 +1084,6 @@ fn print_flag_list<T>(\n /// So with all that in mind, the comments below have some more detail about the\n /// contortions done here to get things to work out correctly.\n pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n-    // Throw away the first argument, the name of the binary\n-    let args = &args[1..];\n-\n     if args.is_empty() {\n         // user did not write `-v` nor `-Z unstable-options`, so do not\n         // include that extra information."}, {"sha": "9f08609a6d1a6bce27d9d0854be12724cc89110d", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b300a7bfae0fa9031e8c593cc6101c117c47a74/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b300a7bfae0fa9031e8c593cc6101c117c47a74/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=0b300a7bfae0fa9031e8c593cc6101c117c47a74", "patch": "@@ -314,7 +314,6 @@ impl Options {\n         matches: &getopts::Matches,\n         args: Vec<String>,\n     ) -> Result<(Options, RenderOptions), i32> {\n-        let args = &args[1..];\n         // Check for unstable options.\n         nightly_options::check_nightly_options(matches, &opts());\n "}, {"sha": "12c622e026f1efabb599d9b758d0d70c6a0172a0", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b300a7bfae0fa9031e8c593cc6101c117c47a74/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b300a7bfae0fa9031e8c593cc6101c117c47a74/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=0b300a7bfae0fa9031e8c593cc6101c117c47a74", "patch": "@@ -712,13 +712,23 @@ fn run_renderer<'tcx, T: formats::FormatRenderer<'tcx>>(\n }\n \n fn main_args(at_args: &[String]) -> MainResult {\n+    // Throw away the first argument, the name of the binary.\n+    // In case of at_args being empty, as might be the case by\n+    // passing empty argument array to execve under some platforms,\n+    // just use an empty slice.\n+    //\n+    // This situation was possible before due to arg_expand_all being\n+    // called before removing the argument, enabling a crash by calling\n+    // the compiler with @empty_file as argv[0] and no more arguments.\n+    let at_args = at_args.get(1..).unwrap_or_default();\n+\n     let args = rustc_driver::args::arg_expand_all(at_args);\n \n     let mut options = getopts::Options::new();\n     for option in opts() {\n         (option.apply)(&mut options);\n     }\n-    let matches = match options.parse(&args[1..]) {\n+    let matches = match options.parse(&args) {\n         Ok(m) => m,\n         Err(err) => {\n             early_error(ErrorOutputType::default(), err.to_string());"}]}