{"sha": "01bdcd001443d7639fc0127e31c61e5ff4e98464", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYmRjZDAwMTQ0M2Q3NjM5ZmMwMTI3ZTMxYzYxZTVmZjRlOTg0NjQ=", "commit": {"author": {"name": "Pavel Sountsov", "email": "siege@google.com", "date": "2015-09-19T17:44:28Z"}, "committer": {"name": "SiegeLord", "email": "slabode@aim.com", "date": "2015-09-19T17:44:28Z"}, "message": "Remove unnecessary config parameter from format_missing_with_indent.", "tree": {"sha": "aa22ad53618ae4d5630a14734a32b527c1e7899d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa22ad53618ae4d5630a14734a32b527c1e7899d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01bdcd001443d7639fc0127e31c61e5ff4e98464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01bdcd001443d7639fc0127e31c61e5ff4e98464", "html_url": "https://github.com/rust-lang/rust/commit/01bdcd001443d7639fc0127e31c61e5ff4e98464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01bdcd001443d7639fc0127e31c61e5ff4e98464/comments", "author": {"login": "SiegeLordEx", "id": 43966695, "node_id": "MDQ6VXNlcjQzOTY2Njk1", "avatar_url": "https://avatars.githubusercontent.com/u/43966695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLordEx", "html_url": "https://github.com/SiegeLordEx", "followers_url": "https://api.github.com/users/SiegeLordEx/followers", "following_url": "https://api.github.com/users/SiegeLordEx/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLordEx/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLordEx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLordEx/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLordEx/orgs", "repos_url": "https://api.github.com/users/SiegeLordEx/repos", "events_url": "https://api.github.com/users/SiegeLordEx/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLordEx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SiegeLord", "id": 480550, "node_id": "MDQ6VXNlcjQ4MDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/480550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLord", "html_url": "https://github.com/SiegeLord", "followers_url": "https://api.github.com/users/SiegeLord/followers", "following_url": "https://api.github.com/users/SiegeLord/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLord/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLord/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLord/orgs", "repos_url": "https://api.github.com/users/SiegeLord/repos", "events_url": "https://api.github.com/users/SiegeLord/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLord/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05c8c2893584dcb8717314055833ea52a1e51657", "url": "https://api.github.com/repos/rust-lang/rust/commits/05c8c2893584dcb8717314055833ea52a1e51657", "html_url": "https://github.com/rust-lang/rust/commit/05c8c2893584dcb8717314055833ea52a1e51657"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "a61925798d322e63304b6ce935a3ae8d65dab4ac", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/01bdcd001443d7639fc0127e31c61e5ff4e98464/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bdcd001443d7639fc0127e31c61e5ff4e98464/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=01bdcd001443d7639fc0127e31c61e5ff4e98464", "patch": "@@ -26,7 +26,7 @@ use syntax::parse::token;\n \n impl<'a> FmtVisitor<'a> {\n     pub fn visit_let(&mut self, local: &ast::Local, span: Span) {\n-        self.format_missing_with_indent(span.lo, self.config);\n+        self.format_missing_with_indent(span.lo);\n \n         // String that is placed within the assignment pattern and expression.\n         let infix = {\n@@ -497,8 +497,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n         self.block_indent = self.block_indent.block_unindent(self.config);\n \n-        self.format_missing_with_indent(span.lo + BytePos(enum_snippet.rfind('}').unwrap() as u32),\n-                                        self.config);\n+        self.format_missing_with_indent(span.lo + BytePos(enum_snippet.rfind('}').unwrap() as u32));\n         self.buffer.push_str(\"}\");\n     }\n \n@@ -508,7 +507,7 @@ impl<'a> FmtVisitor<'a> {\n             return;\n         }\n \n-        self.format_missing_with_indent(field.span.lo, self.config);\n+        self.format_missing_with_indent(field.span.lo);\n \n         let result = match field.node.kind {\n             ast::VariantKind::TupleVariantKind(ref types) => {"}, {"sha": "db9599c170640fe53af91208e398c08cec0e616a", "filename": "src/missed_spans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01bdcd001443d7639fc0127e31c61e5ff4e98464/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bdcd001443d7639fc0127e31c61e5ff4e98464/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=01bdcd001443d7639fc0127e31c61e5ff4e98464", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use config::Config;\n use visitor::FmtVisitor;\n \n use syntax::codemap::{self, BytePos};\n@@ -20,7 +19,8 @@ impl<'a> FmtVisitor<'a> {\n         self.format_missing_inner(end, |this, last_snippet, _| this.buffer.push_str(last_snippet))\n     }\n \n-    pub fn format_missing_with_indent(&mut self, end: BytePos, config: &Config) {\n+    pub fn format_missing_with_indent(&mut self, end: BytePos) {\n+        let config = self.config;\n         self.format_missing_inner(end,\n                                   |this, last_snippet, snippet| {\n                                       this.buffer.push_str(last_snippet.trim_right());"}, {"sha": "762eda2013a2acc021a32779d215447e717faacc", "filename": "src/visitor.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/01bdcd001443d7639fc0127e31c61e5ff4e98464/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01bdcd001443d7639fc0127e31c61e5ff4e98464/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=01bdcd001443d7639fc0127e31c61e5ff4e98464", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 }\n             }\n             ast::Stmt_::StmtExpr(ref ex, _) | ast::Stmt_::StmtSemi(ref ex, _) => {\n-                self.format_missing_with_indent(stmt.span.lo, self.config);\n+                self.format_missing_with_indent(stmt.span.lo);\n                 let suffix = if let ast::Stmt_::StmtExpr(..) = stmt.node {\n                     \"\"\n                 } else {\n@@ -78,7 +78,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 }\n             }\n             ast::Stmt_::StmtMac(ref _mac, _macro_style) => {\n-                self.format_missing_with_indent(stmt.span.lo, self.config);\n+                self.format_missing_with_indent(stmt.span.lo);\n                 visit::walk_stmt(self, stmt);\n             }\n         }\n@@ -108,15 +108,15 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n \n         match b.expr {\n             Some(ref e) => {\n-                self.format_missing_with_indent(e.span.lo, self.config);\n+                self.format_missing_with_indent(e.span.lo);\n                 self.visit_expr(e);\n             }\n             None => {}\n         }\n \n         self.block_indent = self.block_indent.block_unindent(self.config);\n         // TODO: we should compress any newlines here to just one\n-        self.format_missing_with_indent(b.span.hi - brace_compensation, self.config);\n+        self.format_missing_with_indent(b.span.hi - brace_compensation);\n         self.buffer.push_str(\"}\");\n         self.last_pos = b.span.hi;\n     }\n@@ -165,7 +165,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n         };\n \n         if let Some(fn_str) = rewrite {\n-            self.format_missing_with_indent(s.lo, self.config);\n+            self.format_missing_with_indent(s.lo);\n             self.buffer.push_str(&fn_str);\n         } else {\n             self.format_missing(b.span.lo);\n@@ -200,26 +200,26 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 self.block_indent = self.block_indent.block_unindent(self.config);\n             }\n             ast::Item_::ItemExternCrate(_) => {\n-                self.format_missing_with_indent(item.span.lo, self.config);\n+                self.format_missing_with_indent(item.span.lo);\n                 let new_str = self.snippet(item.span);\n                 self.buffer.push_str(&new_str);\n                 self.last_pos = item.span.hi;\n             }\n             ast::Item_::ItemStruct(ref def, ref generics) => {\n-                self.format_missing_with_indent(item.span.lo, self.config);\n+                self.format_missing_with_indent(item.span.lo);\n                 self.visit_struct(item.ident, item.vis, def, generics, item.span);\n             }\n             ast::Item_::ItemEnum(ref def, ref generics) => {\n-                self.format_missing_with_indent(item.span.lo, self.config);\n+                self.format_missing_with_indent(item.span.lo);\n                 self.visit_enum(item.ident, item.vis, def, generics, item.span);\n                 self.last_pos = item.span.hi;\n             }\n             ast::Item_::ItemMod(ref module) => {\n-                self.format_missing_with_indent(item.span.lo, self.config);\n+                self.format_missing_with_indent(item.span.lo);\n                 self.format_mod(module, item.span, item.ident);\n             }\n             ast::Item_::ItemMac(..) => {\n-                self.format_missing_with_indent(item.span.lo, self.config);\n+                self.format_missing_with_indent(item.span.lo);\n                 // TODO: we cannot format these yet, because of a bad span.\n                 // See rust lang issue #28424.\n                 // visit::walk_item(self, item);\n@@ -236,7 +236,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n         }\n \n         if let ast::TraitItem_::MethodTraitItem(ref sig, None) = ti.node {\n-            self.format_missing_with_indent(ti.span.lo, self.config);\n+            self.format_missing_with_indent(ti.span.lo);\n \n             let indent = self.block_indent;\n             let new_fn = self.rewrite_required_fn(indent, ti.ident, sig, ti.span);\n@@ -300,7 +300,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         let first = &attrs[0];\n-        self.format_missing_with_indent(first.span.lo, self.config);\n+        self.format_missing_with_indent(first.span.lo);\n \n         if utils::contains_skip(attrs) {\n             true\n@@ -366,12 +366,12 @@ impl<'a> FmtVisitor<'a> {\n             }\n             Some(ref s) => {\n                 let s = format!(\"{}use {};\", vis, s);\n-                self.format_missing_with_indent(span.lo, self.config);\n+                self.format_missing_with_indent(span.lo);\n                 self.buffer.push_str(&s);\n                 self.last_pos = span.hi;\n             }\n             None => {\n-                self.format_missing_with_indent(span.lo, self.config);\n+                self.format_missing_with_indent(span.lo);\n                 self.format_missing(span.hi);\n             }\n         }"}]}