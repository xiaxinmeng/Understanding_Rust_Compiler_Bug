{"sha": "0d1910c6fb5539330b2464778a1db823aae35aa0", "node_id": "C_kwDOAAsO6NoAKDBkMTkxMGM2ZmI1NTM5MzMwYjI0NjQ3NzhhMWRiODIzYWFlMzVhYTA", "commit": {"author": {"name": "Brandon", "email": "brandondong604@hotmail.com", "date": "2021-12-05T04:59:26Z"}, "committer": {"name": "Brandon", "email": "brandondong604@hotmail.com", "date": "2021-12-05T05:41:56Z"}, "message": "Handle multiple cargo check quick fix spans", "tree": {"sha": "a05a4da3f4e0c8a931a1a532d88a8836f3d86391", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a05a4da3f4e0c8a931a1a532d88a8836f3d86391"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d1910c6fb5539330b2464778a1db823aae35aa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d1910c6fb5539330b2464778a1db823aae35aa0", "html_url": "https://github.com/rust-lang/rust/commit/0d1910c6fb5539330b2464778a1db823aae35aa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d1910c6fb5539330b2464778a1db823aae35aa0/comments", "author": {"login": "brandondong", "id": 13722457, "node_id": "MDQ6VXNlcjEzNzIyNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/13722457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandondong", "html_url": "https://github.com/brandondong", "followers_url": "https://api.github.com/users/brandondong/followers", "following_url": "https://api.github.com/users/brandondong/following{/other_user}", "gists_url": "https://api.github.com/users/brandondong/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandondong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandondong/subscriptions", "organizations_url": "https://api.github.com/users/brandondong/orgs", "repos_url": "https://api.github.com/users/brandondong/repos", "events_url": "https://api.github.com/users/brandondong/events{/privacy}", "received_events_url": "https://api.github.com/users/brandondong/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brandondong", "id": 13722457, "node_id": "MDQ6VXNlcjEzNzIyNDU3", "avatar_url": "https://avatars.githubusercontent.com/u/13722457?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brandondong", "html_url": "https://github.com/brandondong", "followers_url": "https://api.github.com/users/brandondong/followers", "following_url": "https://api.github.com/users/brandondong/following{/other_user}", "gists_url": "https://api.github.com/users/brandondong/gists{/gist_id}", "starred_url": "https://api.github.com/users/brandondong/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brandondong/subscriptions", "organizations_url": "https://api.github.com/users/brandondong/orgs", "repos_url": "https://api.github.com/users/brandondong/repos", "events_url": "https://api.github.com/users/brandondong/events{/privacy}", "received_events_url": "https://api.github.com/users/brandondong/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de05c3d406fb91dea736769c91cbc35f24abf761", "url": "https://api.github.com/repos/rust-lang/rust/commits/de05c3d406fb91dea736769c91cbc35f24abf761", "html_url": "https://github.com/rust-lang/rust/commit/de05c3d406fb91dea736769c91cbc35f24abf761"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "56b3afce98a33a3fc04b6301363f8ec6c2c1ea73", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0d1910c6fb5539330b2464778a1db823aae35aa0/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1910c6fb5539330b2464778a1db823aae35aa0/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=0d1910c6fb5539330b2464778a1db823aae35aa0", "patch": "@@ -29,7 +29,8 @@ pub(crate) struct DiagnosticCollection {\n \n #[derive(Debug, Clone)]\n pub(crate) struct Fix {\n-    pub(crate) range: lsp_types::Range,\n+    // Fixes may be triggerable from multiple ranges.\n+    pub(crate) ranges: Vec<lsp_types::Range>,\n     pub(crate) action: lsp_ext::CodeAction,\n }\n \n@@ -43,7 +44,7 @@ impl DiagnosticCollection {\n         &mut self,\n         file_id: FileId,\n         diagnostic: lsp_types::Diagnostic,\n-        fix: Option<lsp_ext::CodeAction>,\n+        fix: Option<Fix>,\n     ) {\n         let diagnostics = self.check.entry(file_id).or_default();\n         for existing_diagnostic in diagnostics.iter() {\n@@ -53,10 +54,7 @@ impl DiagnosticCollection {\n         }\n \n         let check_fixes = Arc::make_mut(&mut self.check_fixes);\n-        check_fixes\n-            .entry(file_id)\n-            .or_default()\n-            .extend(fix.into_iter().map(|action| Fix { range: diagnostic.range, action }));\n+        check_fixes.entry(file_id).or_default().extend(fix);\n         diagnostics.push(diagnostic);\n         self.changes.insert(file_id);\n     }"}, {"sha": "51dbc1939bf33fd8e9b7c3691ca694f60c05bed5", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0d1910c6fb5539330b2464778a1db823aae35aa0/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1910c6fb5539330b2464778a1db823aae35aa0/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=0d1910c6fb5539330b2464778a1db823aae35aa0", "patch": "@@ -9,7 +9,7 @@ use vfs::{AbsPath, AbsPathBuf};\n \n use crate::{lsp_ext, to_proto::url_from_abs_path};\n \n-use super::DiagnosticsMapConfig;\n+use super::{DiagnosticsMapConfig, Fix};\n \n /// Determines the LSP severity from a diagnostic\n fn diagnostic_severity(\n@@ -114,7 +114,7 @@ fn resolve_path(\n \n struct SubDiagnostic {\n     related: lsp_types::DiagnosticRelatedInformation,\n-    suggested_fix: Option<lsp_ext::CodeAction>,\n+    suggested_fix: Option<Fix>,\n }\n \n enum MappedRustChildDiagnostic {\n@@ -171,18 +171,24 @@ fn map_rust_child_diagnostic(\n                 location: location(config, workspace_root, spans[0]),\n                 message: message.clone(),\n             },\n-            suggested_fix: Some(lsp_ext::CodeAction {\n-                title: message,\n-                group: None,\n-                kind: Some(lsp_types::CodeActionKind::QUICKFIX),\n-                edit: Some(lsp_ext::SnippetWorkspaceEdit {\n-                    // FIXME: there's no good reason to use edit_map here....\n-                    changes: Some(edit_map),\n-                    document_changes: None,\n-                    change_annotations: None,\n-                }),\n-                is_preferred: Some(true),\n-                data: None,\n+            suggested_fix: Some(Fix {\n+                ranges: spans\n+                    .iter()\n+                    .map(|&span| location(config, workspace_root, span).range)\n+                    .collect(),\n+                action: lsp_ext::CodeAction {\n+                    title: message,\n+                    group: None,\n+                    kind: Some(lsp_types::CodeActionKind::QUICKFIX),\n+                    edit: Some(lsp_ext::SnippetWorkspaceEdit {\n+                        // FIXME: there's no good reason to use edit_map here....\n+                        changes: Some(edit_map),\n+                        document_changes: None,\n+                        change_annotations: None,\n+                    }),\n+                    is_preferred: Some(true),\n+                    data: None,\n+                },\n             }),\n         })\n     }\n@@ -192,7 +198,7 @@ fn map_rust_child_diagnostic(\n pub(crate) struct MappedRustDiagnostic {\n     pub(crate) url: lsp_types::Url,\n     pub(crate) diagnostic: lsp_types::Diagnostic,\n-    pub(crate) fix: Option<lsp_ext::CodeAction>,\n+    pub(crate) fix: Option<Fix>,\n }\n \n /// Converts a Rust root diagnostic to LSP form"}, {"sha": "6bc2afc6fecdd34b9a73a6fda537003ada3c491f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0d1910c6fb5539330b2464778a1db823aae35aa0/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d1910c6fb5539330b2464778a1db823aae35aa0/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=0d1910c6fb5539330b2464778a1db823aae35aa0", "patch": "@@ -1019,8 +1019,13 @@ pub(crate) fn handle_code_action(\n     for fix in snap.check_fixes.get(&frange.file_id).into_iter().flatten() {\n         // FIXME: this mapping is awkward and shouldn't exist. Refactor\n         // `snap.check_fixes` to not convert to LSP prematurely.\n-        let fix_range = from_proto::text_range(&line_index, fix.range);\n-        if fix_range.intersect(frange.range).is_some() {\n+        let intersect_fix_range = fix\n+            .ranges\n+            .iter()\n+            .copied()\n+            .map(|range| from_proto::text_range(&line_index, range))\n+            .any(|fix_range| fix_range.intersect(frange.range).is_some());\n+        if intersect_fix_range {\n             res.push(fix.action.clone());\n         }\n     }"}]}