{"sha": "a7d411425c10261bd1535d0e98cbe2e7181b9553", "node_id": "C_kwDOAAsO6NoAKGE3ZDQxMTQyNWMxMDI2MWJkMTUzNWQwZTk4Y2JlMmU3MTgxYjk1NTM", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-12-27T15:59:56Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-12-27T15:59:56Z"}, "message": "mbe: handle multi-character separator", "tree": {"sha": "9efed61e03a351354b3ddc228f342dde7798c9e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9efed61e03a351354b3ddc228f342dde7798c9e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7d411425c10261bd1535d0e98cbe2e7181b9553", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmOrFqwACgkQ4laYqTBY\nYXEPnhAAodN04iD7sBBG8V9Ih2IChvJrvJjGY+dMrRPGQUGE4wb/qX3vB88Xdosk\ns8SWk0N7YkuMUsL5CSViLW9QzrlfrdKMkJ/rtRKKeUCfsMqWZo4gkdHYZI8p+5GU\nvf22sOzVMKq9VCg5s6qq/Md/Dh4h2MET37u9ZKbwQ1iCrJjTSNtlbROe13o7GiiL\n4brdD+WszJUVyHAVaXcHmBfpdBbPnFlQd4iyVnem6YVbX3PFrhSHxQXDxEagm39e\n+xB/0GAOgPouQxqzii2vTG3GW+F9BEAuJ+V8Sont3N3CVhtybC2SFnDZAN2Ybfok\n/RZKpMVLrqfEMg1Nd1egdHzMCoZd4I7u+ON8isKxAB+PFM+JXFm2P/5qYMxfVVgC\nYwRzoYwb58ZPh/AD02/vcD9oRnQdUxTE3nQkezzMtny+DNms/NQ8P+hS6qumLmoB\n5B6jBHKo11Sno8E7Ubj9tivo/By0jbbt+9KFlhfk+R7UWhlL/v8xtK4ok/xmATL3\npe7G9zI34VBmAvJpquvwlT6Wy/sRn/yQV7qLz/xQ6Hvzoi4aMsW1wwN5BCtUIBKJ\nLZ30Afbqff6xcY92LULYd8esBmt78ftP4cMfbEVvWgAkGjYZX98eW1kma+adAVhr\nU7T/M7P4ViYTH03d0+jv6RHJZ0/DfglgBIxHBgM/XBDQRV3tNpA=\n=nsXI\n-----END PGP SIGNATURE-----", "payload": "tree 9efed61e03a351354b3ddc228f342dde7798c9e1\nparent 767351fb87688b45eaf1024cff6edf59afcfb8ef\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1672156796 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1672156796 +0900\n\nmbe: handle multi-character separator\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d411425c10261bd1535d0e98cbe2e7181b9553", "html_url": "https://github.com/rust-lang/rust/commit/a7d411425c10261bd1535d0e98cbe2e7181b9553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7d411425c10261bd1535d0e98cbe2e7181b9553/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "767351fb87688b45eaf1024cff6edf59afcfb8ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/767351fb87688b45eaf1024cff6edf59afcfb8ef", "html_url": "https://github.com/rust-lang/rust/commit/767351fb87688b45eaf1024cff6edf59afcfb8ef"}], "stats": {"total": 58, "additions": 26, "deletions": 32}, "files": [{"sha": "88eae136f7329654857a25f94f2a72798de7e84e", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a7d411425c10261bd1535d0e98cbe2e7181b9553/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d411425c10261bd1535d0e98cbe2e7181b9553/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=a7d411425c10261bd1535d0e98cbe2e7181b9553", "patch": "@@ -321,8 +321,8 @@ struct MatchState<'t> {\n     /// The KleeneOp of this sequence if we are in a repetition.\n     sep_kind: Option<RepeatKind>,\n \n-    /// Number of tokens of separator parsed\n-    sep_parsed: Option<usize>,\n+    /// Whether we already matched separator token.\n+    sep_matched: bool,\n \n     /// Matched meta variables bindings\n     bindings: BindingsIdx,\n@@ -387,7 +387,7 @@ fn match_loop_inner<'t>(\n             None => {\n                 // We are at or past the end of the matcher of `item`.\n                 if let Some(up) = &item.up {\n-                    if item.sep_parsed.is_none() {\n+                    if !item.sep_matched {\n                         // Get the `up` matcher\n                         let mut new_pos = (**up).clone();\n                         new_pos.bindings = bindings_builder.copy(&new_pos.bindings);\n@@ -401,22 +401,25 @@ fn match_loop_inner<'t>(\n                     }\n \n                     // Check if we need a separator.\n-                    // We check the separator one by one\n-                    let sep_idx = item.sep_parsed.unwrap_or(0);\n-                    let sep_len = item.sep.as_ref().map_or(0, Separator::tt_count);\n-                    if item.sep.is_some() && sep_idx != sep_len {\n+                    if item.sep.is_some() && !item.sep_matched {\n                         let sep = item.sep.as_ref().unwrap();\n-                        if src.clone().expect_separator(sep, sep_idx) {\n+                        let mut fork = src.clone();\n+                        if fork.expect_separator(sep) {\n+                            // HACK: here we use `meta_result` to pass `TtIter` back to caller because\n+                            // it might have been advanced multiple times. `ValueResult` is\n+                            // insignificant.\n+                            item.meta_result = Some((fork, ValueResult::ok(None)));\n                             item.dot.next();\n-                            item.sep_parsed = Some(sep_idx + 1);\n+                            // item.sep_parsed = Some(sep_len);\n+                            item.sep_matched = true;\n                             try_push!(next_items, item);\n                         }\n                     }\n                     // We don't need a separator. Move the \"dot\" back to the beginning of the matcher\n                     // and try to match again UNLESS we are only allowed to have _one_ repetition.\n                     else if item.sep_kind != Some(RepeatKind::ZeroOrOne) {\n                         item.dot = item.dot.reset();\n-                        item.sep_parsed = None;\n+                        item.sep_matched = false;\n                         bindings_builder.push_default(&mut item.bindings);\n                         cur_items.push(item);\n                     }\n@@ -451,7 +454,7 @@ fn match_loop_inner<'t>(\n                     up: Some(Box::new(item)),\n                     sep: separator.clone(),\n                     sep_kind: Some(*kind),\n-                    sep_parsed: None,\n+                    sep_matched: false,\n                     bindings: bindings_builder.alloc(),\n                     meta_result: None,\n                     is_error: false,\n@@ -592,7 +595,7 @@ fn match_loop(pattern: &MetaTemplate, src: &tt::Subtree) -> Match {\n         up: None,\n         sep: None,\n         sep_kind: None,\n-        sep_parsed: None,\n+        sep_matched: false,\n         bindings: bindings_builder.alloc(),\n         is_error: false,\n         meta_result: None,\n@@ -864,26 +867,29 @@ impl<'a> Iterator for OpDelimitedIter<'a> {\n }\n \n impl<'a> TtIter<'a> {\n-    fn expect_separator(&mut self, separator: &Separator, idx: usize) -> bool {\n+    fn expect_separator(&mut self, separator: &Separator) -> bool {\n         let mut fork = self.clone();\n         let ok = match separator {\n-            Separator::Ident(lhs) if idx == 0 => match fork.expect_ident_or_underscore() {\n+            Separator::Ident(lhs) => match fork.expect_ident_or_underscore() {\n                 Ok(rhs) => rhs.text == lhs.text,\n                 Err(_) => false,\n             },\n-            Separator::Literal(lhs) if idx == 0 => match fork.expect_literal() {\n+            Separator::Literal(lhs) => match fork.expect_literal() {\n                 Ok(rhs) => match rhs {\n                     tt::Leaf::Literal(rhs) => rhs.text == lhs.text,\n                     tt::Leaf::Ident(rhs) => rhs.text == lhs.text,\n                     tt::Leaf::Punct(_) => false,\n                 },\n                 Err(_) => false,\n             },\n-            Separator::Puncts(lhss) if idx < lhss.len() => match fork.expect_single_punct() {\n-                Ok(rhs) => rhs.char == lhss[idx].char,\n+            Separator::Puncts(lhs) => match fork.expect_glued_punct() {\n+                Ok(rhs) => {\n+                    let lhs = lhs.iter().map(|it| it.char);\n+                    let rhs = rhs.iter().map(|it| it.char);\n+                    lhs.eq(rhs)\n+                }\n                 Err(_) => false,\n             },\n-            _ => false,\n         };\n         if ok {\n             *self = fork;"}, {"sha": "3d9a61dbc866e5235b40d3d3ea4f81522ee54776", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7d411425c10261bd1535d0e98cbe2e7181b9553/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d411425c10261bd1535d0e98cbe2e7181b9553/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=a7d411425c10261bd1535d0e98cbe2e7181b9553", "patch": "@@ -110,16 +110,6 @@ impl PartialEq for Separator {\n     }\n }\n \n-impl Separator {\n-    pub(crate) fn tt_count(&self) -> usize {\n-        match self {\n-            Separator::Literal(_) => 1,\n-            Separator::Ident(_) => 1,\n-            Separator::Puncts(it) => it.len(),\n-        }\n-    }\n-}\n-\n #[derive(Clone, Copy)]\n enum Mode {\n     Pattern,"}, {"sha": "bee7b5de6ac31c6908e7ebed878492d987357aab", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7d411425c10261bd1535d0e98cbe2e7181b9553/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d411425c10261bd1535d0e98cbe2e7181b9553/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=a7d411425c10261bd1535d0e98cbe2e7181b9553", "patch": "@@ -112,10 +112,9 @@ impl<'a> TtIter<'a> {\n \n         match (first.char, second.char, third.map(|it| it.char)) {\n             ('.', '.', Some('.' | '=')) | ('<', '<', Some('=')) | ('>', '>', Some('=')) => {\n-                let puncts = smallvec![first, second.clone(), third.unwrap().clone()];\n                 let _ = self.next().unwrap();\n                 let _ = self.next().unwrap();\n-                Ok(puncts)\n+                Ok(smallvec![first, second.clone(), third.unwrap().clone()])\n             }\n             ('-' | '!' | '*' | '/' | '&' | '%' | '^' | '+' | '<' | '=' | '>' | '|', '=', _)\n             | ('-' | '=' | '>', '>', _)\n@@ -125,9 +124,8 @@ impl<'a> TtIter<'a> {\n             | ('&', '&', _)\n             | ('<', '<', _)\n             | ('|', '|', _) => {\n-                let puncts = smallvec![first, second.clone()];\n                 let _ = self.next().unwrap();\n-                Ok(puncts)\n+                Ok(smallvec![first, second.clone()])\n             }\n             _ => Ok(smallvec![first]),\n         }"}]}