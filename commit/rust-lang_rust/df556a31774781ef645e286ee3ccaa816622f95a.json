{"sha": "df556a31774781ef645e286ee3ccaa816622f95a", "node_id": "C_kwDOAAsO6NoAKGRmNTU2YTMxNzc0NzgxZWY2NDVlMjg2ZWUzY2NhYTgxNjYyMmY5NWE", "commit": {"author": {"name": "Patrik K\u00e5rlin", "email": "patrik.karlin@gmail.com", "date": "2023-03-20T13:14:06Z"}, "committer": {"name": "Patrik K\u00e5rlin", "email": "patrik.karlin@gmail.com", "date": "2023-03-30T12:55:03Z"}, "message": "rustdoc: add error messages to the test", "tree": {"sha": "50d6c3b506292f5275ee74fbb8779f4b02fee91a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50d6c3b506292f5275ee74fbb8779f4b02fee91a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df556a31774781ef645e286ee3ccaa816622f95a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgh2d+T/QMoKuxUQmn1LuLfU+BwZ\nEuSNYGnaFxqueP1i8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQBE7wxok8jUs+nlpv//t2BaLnbU4LGKv5Y7y0AqAY0MBMUJVy4wj+VVewsoW0ZHjeq\n7cg9qoAkJF92yYZ4Kc4wM=\n-----END SSH SIGNATURE-----", "payload": "tree 50d6c3b506292f5275ee74fbb8779f4b02fee91a\nparent 4d571a9ccf239ae4d5e354786ede05fda2745f73\nauthor Patrik K\u00e5rlin <patrik.karlin@gmail.com> 1679318046 +0100\ncommitter Patrik K\u00e5rlin <patrik.karlin@gmail.com> 1680180903 +0200\n\nrustdoc: add error messages to the test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df556a31774781ef645e286ee3ccaa816622f95a", "html_url": "https://github.com/rust-lang/rust/commit/df556a31774781ef645e286ee3ccaa816622f95a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df556a31774781ef645e286ee3ccaa816622f95a/comments", "author": {"login": "megakorre", "id": 208460, "node_id": "MDQ6VXNlcjIwODQ2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/208460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/megakorre", "html_url": "https://github.com/megakorre", "followers_url": "https://api.github.com/users/megakorre/followers", "following_url": "https://api.github.com/users/megakorre/following{/other_user}", "gists_url": "https://api.github.com/users/megakorre/gists{/gist_id}", "starred_url": "https://api.github.com/users/megakorre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/megakorre/subscriptions", "organizations_url": "https://api.github.com/users/megakorre/orgs", "repos_url": "https://api.github.com/users/megakorre/repos", "events_url": "https://api.github.com/users/megakorre/events{/privacy}", "received_events_url": "https://api.github.com/users/megakorre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "megakorre", "id": 208460, "node_id": "MDQ6VXNlcjIwODQ2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/208460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/megakorre", "html_url": "https://github.com/megakorre", "followers_url": "https://api.github.com/users/megakorre/followers", "following_url": "https://api.github.com/users/megakorre/following{/other_user}", "gists_url": "https://api.github.com/users/megakorre/gists{/gist_id}", "starred_url": "https://api.github.com/users/megakorre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/megakorre/subscriptions", "organizations_url": "https://api.github.com/users/megakorre/orgs", "repos_url": "https://api.github.com/users/megakorre/repos", "events_url": "https://api.github.com/users/megakorre/events{/privacy}", "received_events_url": "https://api.github.com/users/megakorre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d571a9ccf239ae4d5e354786ede05fda2745f73", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d571a9ccf239ae4d5e354786ede05fda2745f73", "html_url": "https://github.com/rust-lang/rust/commit/4d571a9ccf239ae4d5e354786ede05fda2745f73"}], "stats": {"total": 134, "additions": 74, "deletions": 60}, "files": [{"sha": "dd79f0fac82a174e176220ede4578a4100816544", "filename": "tests/rustdoc-ui/issue-105742.rs", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/df556a31774781ef645e286ee3ccaa816622f95a/tests%2Frustdoc-ui%2Fissue-105742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df556a31774781ef645e286ee3ccaa816622f95a/tests%2Frustdoc-ui%2Fissue-105742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-105742.rs?ref=df556a31774781ef645e286ee3ccaa816622f95a", "patch": "@@ -2,36 +2,49 @@\n use std::ops::Index;\n \n pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n-    //~^ERROR\n-    //~|ERROR\n-    //~|ERROR\n+    //~^ expected 1 lifetime argument\n+    //~| expected 1 generic argument\n+    //~| the trait `SVec` cannot be made into an object\n+    //~| `SVec` cannot be made into an object\n+    //~| missing generics for associated type `SVec::Item` \n+    //~| missing generics for associated type `SVec::Item`\n     let _ = s;\n }\n \n pub trait SVec: Index<\n     <Self as SVec>::Item,\n-    //~^ERROR\n-    //~|ERROR\n-    //~|ERROR\n-    //~|ERROR\n+    //~^ expected 1 lifetime argument\n+    //~| expected 1 generic argument \n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n     Output = <Index<<Self as SVec>::Item,\n-    //~^ERROR\n-    //~|ERROR\n-    //~|ERROR\n-    //~|ERROR\n+    //~^ expected 1 lifetime argument\n+    //~| expected 1 generic argument\n+    //~| missing generics for associated type `SVec::Item` \n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n     Output = <Self as SVec>::Item> as SVec>::Item,\n-    //~^ERROR\n-    //~|ERROR\n-    //~|ERROR\n-    //~|ERROR\n-    //~|ERROR\n-    //~|ERROR\n-    //~|ERROR\n-    //~|ERROR\n+    //~^ expected 1 lifetime argument\n+    //~| expected 1 generic argument\n+    //~| expected 1 lifetime argument \n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| expected 1 generic argument\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| missing generics for associated type `SVec::Item`\n > {\n     type Item<'a, T>;\n \n     fn len(&self) -> <Self as SVec>::Item;\n-    //~^ERROR\n-    //~|ERROR\n+    //~^ expected 1 lifetime argument\n+    //~| missing generics for associated type `SVec::Item`\n+    //~| expected 1 generic argument\n+    //~| missing generics for associated type `SVec::Item`\n }"}, {"sha": "cd53762ef9b2de78e1c70b9a60683f7c44e45116", "filename": "tests/rustdoc-ui/issue-105742.stderr", "status": "modified", "additions": 40, "deletions": 39, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/df556a31774781ef645e286ee3ccaa816622f95a/tests%2Frustdoc-ui%2Fissue-105742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df556a31774781ef645e286ee3ccaa816622f95a/tests%2Frustdoc-ui%2Fissue-105742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-105742.stderr?ref=df556a31774781ef645e286ee3ccaa816622f95a", "patch": "@@ -1,11 +1,11 @@\n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:12:21\n+  --> $DIR/issue-105742.rs:15:21\n    |\n LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -15,13 +15,13 @@ LL |     <Self as SVec>::Item<'a>,\n    |                         ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:12:21\n+  --> $DIR/issue-105742.rs:15:21\n    |\n LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -31,13 +31,13 @@ LL |     <Self as SVec>::Item<T>,\n    |                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:17:37\n+  --> $DIR/issue-105742.rs:22:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -47,13 +47,13 @@ LL |     Output = <Index<<Self as SVec>::Item<'a>,\n    |                                         ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:17:37\n+  --> $DIR/issue-105742.rs:22:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -63,13 +63,13 @@ LL |     Output = <Index<<Self as SVec>::Item<T>,\n    |                                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:30\n+  --> $DIR/issue-105742.rs:29:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -79,13 +79,13 @@ LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n    |                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:30\n+  --> $DIR/issue-105742.rs:29:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -95,13 +95,13 @@ LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n    |                                  +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:46\n+  --> $DIR/issue-105742.rs:29:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -111,13 +111,13 @@ LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n    |                                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:46\n+  --> $DIR/issue-105742.rs:29:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -133,7 +133,7 @@ LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n    |                                        ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -149,7 +149,7 @@ LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n    |                                        ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -159,13 +159,13 @@ LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item<T> = T, Output = T>) {\n    |                                            +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:12:21\n+  --> $DIR/issue-105742.rs:15:21\n    |\n LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -175,13 +175,13 @@ LL |     <Self as SVec>::Item<'a>,\n    |                         ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:12:21\n+  --> $DIR/issue-105742.rs:15:21\n    |\n LL |     <Self as SVec>::Item,\n    |                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -191,13 +191,13 @@ LL |     <Self as SVec>::Item<T>,\n    |                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:17:37\n+  --> $DIR/issue-105742.rs:22:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -207,13 +207,13 @@ LL |     Output = <Index<<Self as SVec>::Item<'a>,\n    |                                         ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:17:37\n+  --> $DIR/issue-105742.rs:22:37\n    |\n LL |     Output = <Index<<Self as SVec>::Item,\n    |                                     ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -223,13 +223,13 @@ LL |     Output = <Index<<Self as SVec>::Item<T>,\n    |                                         +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:30\n+  --> $DIR/issue-105742.rs:29:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -239,13 +239,13 @@ LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n    |                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:30\n+  --> $DIR/issue-105742.rs:29:30\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -255,13 +255,13 @@ LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n    |                                  +++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:46\n+  --> $DIR/issue-105742.rs:29:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -271,13 +271,13 @@ LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n    |                                                  ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:22:46\n+  --> $DIR/issue-105742.rs:29:46\n    |\n LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n    |                                              ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -293,7 +293,7 @@ LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SVec` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/issue-105742.rs:11:17\n+  --> $DIR/issue-105742.rs:14:17\n    |\n LL |    pub trait SVec: Index<\n    |  ____________----__^\n@@ -307,6 +307,7 @@ LL | |/     Output = <Index<<Self as SVec>::Item,\n LL | ||\n LL | ||\n LL | ||\n+...  ||\n LL | ||\n LL | ||     Output = <Self as SVec>::Item> as SVec>::Item,\n    | ||_________________________________________________^ ...because it uses `Self` as a type parameter\n@@ -316,13 +317,13 @@ LL | |  > {\n    | |__^ ...because it uses `Self` as a type parameter\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:34:38\n+  --> $DIR/issue-105742.rs:45:38\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item;\n    |                                      ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -332,13 +333,13 @@ LL |     fn len(&self) -> <Self as SVec>::Item<'_>;\n    |                                          ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:34:38\n+  --> $DIR/issue-105742.rs:45:38\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item;\n    |                                      ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:32:10\n+  --> $DIR/issue-105742.rs:43:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -"}]}