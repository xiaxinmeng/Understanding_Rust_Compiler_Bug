{"sha": "b4b80b6395b6c52d774be04a8ea8ae70b6ac995c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YjgwYjYzOTViNmM1MmQ3NzRiZTA0YThlYThhZTcwYjZhYzk5NWM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-03-29T08:35:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-29T08:35:02Z"}, "message": "Merge pull request #3472 from devinalvaro/add-print-current-config\n\nAdd option to print current config to stdout", "tree": {"sha": "35a5bdf9bbe912fc945491174582879d96058fb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35a5bdf9bbe912fc945491174582879d96058fb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4b80b6395b6c52d774be04a8ea8ae70b6ac995c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcndi2CRBK7hj4Ov3rIwAAdHIIAIOCYmZ919MqGvSl9C/3Cpkm\nysaquv7izsmJvBzuCuWQ5MqzKhJsmN5qAk6qsDFxfHEO3NIc67M6yjJ4vEgGyhjE\ng9B1OrqHDRKRFpVH9NqhhrVihkE+zo9dd6KTNdRMYT8b5EElpXD7W5fthgi2hTE/\nYGO0qnlGSF4k0ia05h+5Lqdv5geMJPHV9IcNWmDAU5IVB70tbm54JaWRLtSBp8nX\nYAbipW8LYOV5IsIqxWEWRZVR7Wt/deaunMwjl0hyBLRp0YjlErQR9KLSMdwyKEkL\nDbOHuZFTYee3mjbZcDZCWAyD6khv4BcwsHX+yTsOnqAhHWAf5MpzccEeD9nSUyM=\n=OPSa\n-----END PGP SIGNATURE-----\n", "payload": "tree 35a5bdf9bbe912fc945491174582879d96058fb9\nparent 09940a70d0a9fabfb4985426aa7d66ca1875c65e\nparent b473e652570b294237cae795fb2b673366f1a86d\nauthor Seiichi Uchida <seuchida@gmail.com> 1553848502 +0900\ncommitter GitHub <noreply@github.com> 1553848502 +0900\n\nMerge pull request #3472 from devinalvaro/add-print-current-config\n\nAdd option to print current config to stdout"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4b80b6395b6c52d774be04a8ea8ae70b6ac995c", "html_url": "https://github.com/rust-lang/rust/commit/b4b80b6395b6c52d774be04a8ea8ae70b6ac995c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4b80b6395b6c52d774be04a8ea8ae70b6ac995c/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09940a70d0a9fabfb4985426aa7d66ca1875c65e", "url": "https://api.github.com/repos/rust-lang/rust/commits/09940a70d0a9fabfb4985426aa7d66ca1875c65e", "html_url": "https://github.com/rust-lang/rust/commit/09940a70d0a9fabfb4985426aa7d66ca1875c65e"}, {"sha": "b473e652570b294237cae795fb2b673366f1a86d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b473e652570b294237cae795fb2b673366f1a86d", "html_url": "https://github.com/rust-lang/rust/commit/b473e652570b294237cae795fb2b673366f1a86d"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "551b422e06cb3f5770aa5e60eeb4f9f45e55ea07", "filename": "src/bin/main.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b4b80b6395b6c52d774be04a8ea8ae70b6ac995c/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b80b6395b6c52d774be04a8ea8ae70b6ac995c/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=b4b80b6395b6c52d774be04a8ea8ae70b6ac995c", "patch": "@@ -55,6 +55,10 @@ enum Operation {\n     ConfigOutputDefault {\n         path: Option<String>,\n     },\n+    /// Output current config (as if formatting to a file) to stdout\n+    ConfigOutputCurrent {\n+        path: Option<String>,\n+    },\n     /// No file specified, read from stdin\n     Stdin {\n         input: String,\n@@ -103,8 +107,9 @@ fn make_opts() -> Options {\n         \"\",\n         \"print-config\",\n         \"Dumps a default or minimal config to PATH. A minimal config is the \\\n-         subset of the current config file used for formatting the current program.\",\n-        \"[minimal|default] PATH\",\n+         subset of the current config file used for formatting the current program. \\\n+         `current` writes to stdout current config as if formatting the file at PATH.\",\n+        \"[default|minimal|current] PATH\",\n     );\n \n     if is_nightly {\n@@ -182,6 +187,21 @@ fn execute(opts: &Options) -> Result<i32, failure::Error> {\n             }\n             Ok(0)\n         }\n+        Operation::ConfigOutputCurrent { path } => {\n+            let path = match path {\n+                Some(path) => path,\n+                None => return Err(format_err!(\"PATH required for `--print-config current`\")),\n+            };\n+\n+            let file = PathBuf::from(path);\n+            let file = file.canonicalize().unwrap_or(file);\n+\n+            let (config, _) = load_config(Some(file.parent().unwrap()), Some(options.clone()))?;\n+            let toml = config.all_options().to_toml().map_err(err_msg)?;\n+            io::stdout().write_all(toml.as_bytes())?;\n+\n+            Ok(0)\n+        }\n         Operation::Stdin { input } => format_string(input, options),\n         Operation::Format {\n             files,\n@@ -379,6 +399,8 @@ fn determine_operation(matches: &Matches) -> Result<Operation, ErrorKind> {\n         let path = matches.free.get(0).cloned();\n         if kind == \"default\" {\n             return Ok(Operation::ConfigOutputDefault { path });\n+        } else if kind == \"current\" {\n+            return Ok(Operation::ConfigOutputCurrent { path });\n         } else if kind == \"minimal\" {\n             minimal_config_path = path;\n             if minimal_config_path.is_none() {"}]}