{"sha": "8b0ea2288590b7e0cf7f276467ed1851208902fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMGVhMjI4ODU5MGI3ZTBjZjdmMjc2NDY3ZWQxODUxMjA4OTAyZmU=", "commit": {"author": {"name": "Peter F\u00fcrstenau", "email": "fuerstenau@mathematik.tu-darmstadt.de", "date": "2018-12-18T10:25:13Z"}, "committer": {"name": "Peter F\u00fcrstenau", "email": "fuerstenau@mathematik.tu-darmstadt.de", "date": "2018-12-18T12:57:38Z"}, "message": "Deduplicate some code?", "tree": {"sha": "60d5b140179e5c60549245a12298a796d33188bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60d5b140179e5c60549245a12298a796d33188bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b0ea2288590b7e0cf7f276467ed1851208902fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0ea2288590b7e0cf7f276467ed1851208902fe", "html_url": "https://github.com/rust-lang/rust/commit/8b0ea2288590b7e0cf7f276467ed1851208902fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b0ea2288590b7e0cf7f276467ed1851208902fe/comments", "author": {"login": "fuerstenau", "id": 44474815, "node_id": "MDQ6VXNlcjQ0NDc0ODE1", "avatar_url": "https://avatars.githubusercontent.com/u/44474815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fuerstenau", "html_url": "https://github.com/fuerstenau", "followers_url": "https://api.github.com/users/fuerstenau/followers", "following_url": "https://api.github.com/users/fuerstenau/following{/other_user}", "gists_url": "https://api.github.com/users/fuerstenau/gists{/gist_id}", "starred_url": "https://api.github.com/users/fuerstenau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fuerstenau/subscriptions", "organizations_url": "https://api.github.com/users/fuerstenau/orgs", "repos_url": "https://api.github.com/users/fuerstenau/repos", "events_url": "https://api.github.com/users/fuerstenau/events{/privacy}", "received_events_url": "https://api.github.com/users/fuerstenau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fuerstenau", "id": 44474815, "node_id": "MDQ6VXNlcjQ0NDc0ODE1", "avatar_url": "https://avatars.githubusercontent.com/u/44474815?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fuerstenau", "html_url": "https://github.com/fuerstenau", "followers_url": "https://api.github.com/users/fuerstenau/followers", "following_url": "https://api.github.com/users/fuerstenau/following{/other_user}", "gists_url": "https://api.github.com/users/fuerstenau/gists{/gist_id}", "starred_url": "https://api.github.com/users/fuerstenau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fuerstenau/subscriptions", "organizations_url": "https://api.github.com/users/fuerstenau/orgs", "repos_url": "https://api.github.com/users/fuerstenau/repos", "events_url": "https://api.github.com/users/fuerstenau/events{/privacy}", "received_events_url": "https://api.github.com/users/fuerstenau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "176778fe92d2fb763b98e2eefa49f31e3260662f", "url": "https://api.github.com/repos/rust-lang/rust/commits/176778fe92d2fb763b98e2eefa49f31e3260662f", "html_url": "https://github.com/rust-lang/rust/commit/176778fe92d2fb763b98e2eefa49f31e3260662f"}], "stats": {"total": 29, "additions": 8, "deletions": 21}, "files": [{"sha": "95f7921910554ba1d49059b26dbb39f376562af1", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8b0ea2288590b7e0cf7f276467ed1851208902fe/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b0ea2288590b7e0cf7f276467ed1851208902fe/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=8b0ea2288590b7e0cf7f276467ed1851208902fe", "patch": "@@ -72,44 +72,31 @@ impl Pass {\n             if Self::is_option(cx, subject);\n \n             then {\n+                let receiver_str = &Sugg::hir(cx, subject, \"..\");\n+                let mut replacement_str = String::new();\n                 if let Some(else_) = else_ {\n                     if_chain! {\n                         if let ExprKind::Block(block, None) = &else_.node;\n                         if block.stmts.len() == 0;\n                         if let Some(block_expr) = &block.expr;\n                         if SpanlessEq::new(cx).ignore_fn().eq_expr(subject, block_expr);\n                         then {\n-                            span_lint_and_then(\n-                                cx,\n-                                QUESTION_MARK,\n-                                expr.span,\n-                                \"this block may be rewritten with the `?` operator\",\n-                                |db| {\n-                                    db.span_suggestion_with_applicability(\n-                                        expr.span,\n-                                        \"replace_it_with\",\n-                                        format!(\"Some({}?)\", Sugg::hir(cx, subject, \"..\")),\n-                                        Applicability::MaybeIncorrect, // snippet\n-                                    );\n-                                }\n-                            )\n+                            replacement_str = format!(\"Some({}?)\", receiver_str);\n                         }\n                     }\n-                    return;\n+                } else {\n+                        replacement_str = format!(\"{}?;\", receiver_str);\n                 }\n-\n                 span_lint_and_then(\n                     cx,\n                     QUESTION_MARK,\n                     expr.span,\n                     \"this block may be rewritten with the `?` operator\",\n                     |db| {\n-                        let receiver_str = &Sugg::hir(cx, subject, \"..\");\n-\n                         db.span_suggestion_with_applicability(\n                             expr.span,\n                             \"replace_it_with\",\n-                            format!(\"{}?;\", receiver_str),\n+                            replacement_str,\n                             Applicability::MaybeIncorrect, // snippet\n                         );\n                     }\n@@ -132,15 +119,15 @@ impl Pass {\n                 }\n \n                 false\n-            },\n+            }\n             ExprKind::Ret(Some(ref expr)) => Self::expression_returns_none(cx, expr),\n             ExprKind::Path(ref qp) => {\n                 if let Def::VariantCtor(def_id, _) = cx.tables.qpath_def(qp, expression.hir_id) {\n                     return match_def_path(cx.tcx, def_id, &OPTION_NONE);\n                 }\n \n                 false\n-            },\n+            }\n             _ => false,\n         }\n     }"}]}