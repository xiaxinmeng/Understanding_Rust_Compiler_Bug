{"sha": "95cfbe43d2d5663e2af1877d7a1a93801d23f532", "node_id": "C_kwDOAAsO6NoAKDk1Y2ZiZTQzZDJkNTY2M2UyYWYxODc3ZDdhMWE5MzgwMWQyM2Y1MzI", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-09-21T08:04:21Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2021-09-21T08:06:00Z"}, "message": "2229: Early exit when we see an insigificant drop", "tree": {"sha": "18a9fcedf6e3d29606b851dd4c299d7a6b31c604", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18a9fcedf6e3d29606b851dd4c299d7a6b31c604"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95cfbe43d2d5663e2af1877d7a1a93801d23f532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95cfbe43d2d5663e2af1877d7a1a93801d23f532", "html_url": "https://github.com/rust-lang/rust/commit/95cfbe43d2d5663e2af1877d7a1a93801d23f532", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95cfbe43d2d5663e2af1877d7a1a93801d23f532/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7958d35ca2c898a223efe402481e0ecb854310a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7958d35ca2c898a223efe402481e0ecb854310a", "html_url": "https://github.com/rust-lang/rust/commit/e7958d35ca2c898a223efe402481e0ecb854310a"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "cbbe8f7fffbbf7ee791a56595acd4702f5b9fdf7", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/95cfbe43d2d5663e2af1877d7a1a93801d23f532/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95cfbe43d2d5663e2af1877d7a1a93801d23f532/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=95cfbe43d2d5663e2af1877d7a1a93801d23f532", "patch": "@@ -171,22 +171,40 @@ where\n     }\n }\n \n+enum DtorType {\n+    /// Type has a `Drop` but it is considered insignificant.\n+    /// Check the query `adt_significant_drop_tys` for understanding\n+    /// \"significant\" / \"insignificant\".\n+    Insignificant,\n+\n+    /// Type has a `Drop` implentation.\n+    Significant,\n+}\n+\n // This is a helper function for `adt_drop_tys` and `adt_significant_drop_tys`.\n // Depending on the implentation of `adt_has_dtor`, it is used to check if the\n // ADT has a destructor or if the ADT only has a significant destructor. For\n // understanding significant destructor look at `adt_significant_drop_tys`.\n fn adt_drop_tys_helper(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n-    adt_has_dtor: impl Fn(&ty::AdtDef) -> bool,\n+    adt_has_dtor: impl Fn(&ty::AdtDef) -> Option<DtorType>,\n ) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n     let adt_components = move |adt_def: &ty::AdtDef| {\n         if adt_def.is_manually_drop() {\n             debug!(\"adt_drop_tys: `{:?}` is manually drop\", adt_def);\n             return Ok(Vec::new().into_iter());\n-        } else if adt_has_dtor(adt_def) {\n-            debug!(\"adt_drop_tys: `{:?}` implements `Drop`\", adt_def);\n-            return Err(AlwaysRequiresDrop);\n+        } else if let Some(dtor_info) = adt_has_dtor(adt_def) {\n+            match dtor_info {\n+                DtorType::Significant => {\n+                    debug!(\"adt_drop_tys: `{:?}` implements `Drop`\", adt_def);\n+                    return Err(AlwaysRequiresDrop);\n+                }\n+                DtorType::Insignificant => {\n+                    debug!(\"adt_drop_tys: `{:?}` drop is insignificant\", adt_def);\n+                    return Ok(Vec::new().into_iter());\n+                }\n+            }\n         } else if adt_def.is_union() {\n             debug!(\"adt_drop_tys: `{:?}` is a union\", adt_def);\n             return Ok(Vec::new().into_iter());\n@@ -204,7 +222,10 @@ fn adt_drop_tys_helper(\n }\n \n fn adt_drop_tys(tcx: TyCtxt<'_>, def_id: DefId) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n-    let adt_has_dtor = |adt_def: &ty::AdtDef| adt_def.destructor(tcx).is_some();\n+    // This is for the \"needs_drop\" query, that considers all `Drop` impls, therefore all dtors are\n+    // significant.\n+    let adt_has_dtor =\n+        |adt_def: &ty::AdtDef| adt_def.destructor(tcx).map(|_| DtorType::Significant);\n     adt_drop_tys_helper(tcx, def_id, adt_has_dtor)\n }\n \n@@ -213,10 +234,13 @@ fn adt_significant_drop_tys(\n     def_id: DefId,\n ) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n     let adt_has_dtor = |adt_def: &ty::AdtDef| {\n-        adt_def\n-            .destructor(tcx)\n-            .map(|dtor| !tcx.has_attr(dtor.did, sym::rustc_insignificant_dtor))\n-            .unwrap_or(false)\n+        adt_def.destructor(tcx).map(|dtor| {\n+            if tcx.has_attr(dtor.did, sym::rustc_insignificant_dtor) {\n+                DtorType::Insignificant\n+            } else {\n+                DtorType::Significant\n+            }\n+        })\n     };\n     adt_drop_tys_helper(tcx, def_id, adt_has_dtor)\n }"}]}