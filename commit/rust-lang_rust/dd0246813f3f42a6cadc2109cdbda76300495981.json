{"sha": "dd0246813f3f42a6cadc2109cdbda76300495981", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMDI0NjgxM2YzZjQyYTZjYWRjMjEwOWNkYmRhNzYzMDA0OTU5ODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-09T08:39:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-09T08:39:56Z"}, "message": "Auto merge of #7326 - 1c3t3a:1c3t3a-issue-7324, r=flip1995\n\nFix false positive on `semicolon_if_nothing_returned`\n\nCurrently the [`semicolon_if_nothing_returned`](https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned) lint fires in unwanted situations where a block only spans one line. An example of this was given in #7324. This code:\n\n```rust\nuse std::mem::MaybeUninit;\nuse std::ptr;\n\nfn main() {\n    let mut s = MaybeUninit::<String>::uninit();\n    let _d = || unsafe { ptr::drop_in_place(s.as_mut_ptr()) };\n}\n```\n\nyields the following clippy error:\n```\nerror: consider adding a `;` to the last statement for consistent formatting\n --> src/main.rs:6:26\n  |\n6 |     let _d = || unsafe { ptr::drop_in_place(s.as_mut_ptr()) };\n  |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `ptr::drop_in_place(s.as_mut_ptr());`\n  |\n  = note: `-D clippy::semicolon-if-nothing-returned` implied by `-D clippy::pedantic`\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\n```\n\nI updated the lint to check if the statement is inside an `unsafe` block, a closure or a normal block and if the block only spans one line, in that case the lint is not emitted.\n\nThis closes #7324.\n\nchangelog: enhanced semicolon if nothing returned according to  #7324.", "tree": {"sha": "453f713bffc8c1c6c63fca271ca0658cf0a4e4e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/453f713bffc8c1c6c63fca271ca0658cf0a4e4e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd0246813f3f42a6cadc2109cdbda76300495981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd0246813f3f42a6cadc2109cdbda76300495981", "html_url": "https://github.com/rust-lang/rust/commit/dd0246813f3f42a6cadc2109cdbda76300495981", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd0246813f3f42a6cadc2109cdbda76300495981/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da0538eaca6be7f89d1734bd4a89fb3af97b0049", "url": "https://api.github.com/repos/rust-lang/rust/commits/da0538eaca6be7f89d1734bd4a89fb3af97b0049", "html_url": "https://github.com/rust-lang/rust/commit/da0538eaca6be7f89d1734bd4a89fb3af97b0049"}, {"sha": "5ec80f32c75eae1fd27389ce0556ec4011144498", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ec80f32c75eae1fd27389ce0556ec4011144498", "html_url": "https://github.com/rust-lang/rust/commit/5ec80f32c75eae1fd27389ce0556ec4011144498"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "da3e30af35ca4ffd7e2a8de07ef16ce6e028e04c", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd0246813f3f42a6cadc2109cdbda76300495981/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd0246813f3f42a6cadc2109cdbda76300495981/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=dd0246813f3f42a6cadc2109cdbda76300495981", "patch": "@@ -1,3 +1,4 @@\n+use crate::rustc_lint::LintContext;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_macro_callsite;\n use clippy_utils::{in_macro, sugg};\n@@ -45,6 +46,7 @@ impl LateLintPass<'_> for SemicolonIfNothingReturned {\n             if t_expr.is_unit();\n             if let snippet = snippet_with_macro_callsite(cx, expr.span, \"}\");\n             if !snippet.ends_with('}');\n+            if cx.sess().source_map().is_multiline(block.span);\n             then {\n                 // filter out the desugared `for` loop\n                 if let ExprKind::DropTemps(..) = &expr.kind {"}, {"sha": "79ba7402f1f49285a79b0de83952e5f46c272333", "filename": "tests/ui/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dd0246813f3f42a6cadc2109cdbda76300495981/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd0246813f3f42a6cadc2109cdbda76300495981/tests%2Fui%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.rs?ref=dd0246813f3f42a6cadc2109cdbda76300495981", "patch": "@@ -17,6 +17,24 @@ fn basic101(x: i32) {\n     y = x + 1\n }\n \n+#[rustfmt::skip]\n+fn closure_error() {\n+    let _d = || {\n+        hello()\n+    };\n+}\n+\n+#[rustfmt::skip]\n+fn unsafe_checks_error() {\n+    use std::mem::MaybeUninit;\n+    use std::ptr;\n+\n+    let mut s = MaybeUninit::<String>::uninit();\n+    let _d = || unsafe { \n+        ptr::drop_in_place(s.as_mut_ptr()) \n+    };\n+}\n+\n // this is fine\n fn print_sum(a: i32, b: i32) {\n     println!(\"{}\", a + b);\n@@ -53,3 +71,29 @@ fn loop_test(x: i32) {\n         println!(\"{}\", ext);\n     }\n }\n+\n+fn closure() {\n+    let _d = || hello();\n+}\n+\n+#[rustfmt::skip]\n+fn closure_block() {\n+    let _d = || { hello() };\n+}\n+\n+unsafe fn some_unsafe_op() {}\n+unsafe fn some_other_unsafe_fn() {}\n+\n+fn do_something() {\n+    unsafe { some_unsafe_op() };\n+\n+    unsafe { some_other_unsafe_fn() };\n+}\n+\n+fn unsafe_checks() {\n+    use std::mem::MaybeUninit;\n+    use std::ptr;\n+\n+    let mut s = MaybeUninit::<String>::uninit();\n+    let _d = || unsafe { ptr::drop_in_place(s.as_mut_ptr()) };\n+}"}, {"sha": "e88ebe2ad35f0bcacf64ed5f8ee3bc57e1227ae7", "filename": "tests/ui/semicolon_if_nothing_returned.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd0246813f3f42a6cadc2109cdbda76300495981/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd0246813f3f42a6cadc2109cdbda76300495981/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsemicolon_if_nothing_returned.stderr?ref=dd0246813f3f42a6cadc2109cdbda76300495981", "patch": "@@ -18,5 +18,17 @@ error: consider adding a `;` to the last statement for consistent formatting\n LL |     y = x + 1\n    |     ^^^^^^^^^ help: add a `;` here: `y = x + 1;`\n \n-error: aborting due to 3 previous errors\n+error: consider adding a `;` to the last statement for consistent formatting\n+  --> $DIR/semicolon_if_nothing_returned.rs:23:9\n+   |\n+LL |         hello()\n+   |         ^^^^^^^ help: add a `;` here: `hello();`\n+\n+error: consider adding a `;` to the last statement for consistent formatting\n+  --> $DIR/semicolon_if_nothing_returned.rs:34:9\n+   |\n+LL |         ptr::drop_in_place(s.as_mut_ptr()) \n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `ptr::drop_in_place(s.as_mut_ptr());`\n+\n+error: aborting due to 5 previous errors\n "}]}