{"sha": "9750fb7fca8dfc16752c79f1e0b5f4a2d73c4563", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NTBmYjdmY2E4ZGZjMTY3NTJjNzlmMWUwYjVmNGEyZDczYzQ1NjM=", "commit": {"author": {"name": "Stuart Dootson", "email": "stuart.dootson@gmail.com", "date": "2016-07-18T21:05:01Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-07-18T21:05:01Z"}, "message": "Canonicalize file paths within the map of file line ranges (#1098)\n\n* Canonicalize file paths within the map of file line ranges\r\n\r\n* Forgot to run the tests - and of course, the formatting of the canonicalization change was off, but it's fixed now!\r\n\r\n* Move imports to the top of the file, as per @nrc.\r\n\r\n* Change `canonicalize_path_string` to return `Option<String>`, `None` indicating an error rather than an empty string\r\n\r\n* `format!` is better than string concatenation...\r\n\r\n* Change `canonicalize_path_string` to return `Result` rather than `Option`", "tree": {"sha": "abb79aa3c34d9f890dcd5d61e7e333b8248e7e7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abb79aa3c34d9f890dcd5d61e7e333b8248e7e7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9750fb7fca8dfc16752c79f1e0b5f4a2d73c4563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9750fb7fca8dfc16752c79f1e0b5f4a2d73c4563", "html_url": "https://github.com/rust-lang/rust/commit/9750fb7fca8dfc16752c79f1e0b5f4a2d73c4563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9750fb7fca8dfc16752c79f1e0b5f4a2d73c4563/comments", "author": {"login": "studoot", "id": 799344, "node_id": "MDQ6VXNlcjc5OTM0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/799344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/studoot", "html_url": "https://github.com/studoot", "followers_url": "https://api.github.com/users/studoot/followers", "following_url": "https://api.github.com/users/studoot/following{/other_user}", "gists_url": "https://api.github.com/users/studoot/gists{/gist_id}", "starred_url": "https://api.github.com/users/studoot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/studoot/subscriptions", "organizations_url": "https://api.github.com/users/studoot/orgs", "repos_url": "https://api.github.com/users/studoot/repos", "events_url": "https://api.github.com/users/studoot/events{/privacy}", "received_events_url": "https://api.github.com/users/studoot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25f973224cf6080b54d6489ee3e5186ca735e242", "url": "https://api.github.com/repos/rust-lang/rust/commits/25f973224cf6080b54d6489ee3e5186ca735e242", "html_url": "https://github.com/rust-lang/rust/commit/25f973224cf6080b54d6489ee3e5186ca735e242"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "61b43375dda53345bc2b7d20d7b99f664db47f0d", "filename": "src/file_lines.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9750fb7fca8dfc16752c79f1e0b5f4a2d73c4563/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9750fb7fca8dfc16752c79f1e0b5f4a2d73c4563/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=9750fb7fca8dfc16752c79f1e0b5f4a2d73c4563", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n //! This module contains types and functions to support formatting specific line ranges.\n-use std::{cmp, iter, str};\n+use std::{cmp, iter, path, str};\n \n use itertools::Itertools;\n use multimap::MultiMap;\n@@ -119,9 +119,10 @@ impl FileLines {\n             Some(ref map) => map,\n         };\n \n-        match map.get_vec(range.file_name()) {\n-            None => false,\n-            Some(ranges) => ranges.iter().any(|r| r.contains(Range::from(range))),\n+        match canonicalize_path_string(range.file_name())\n+            .and_then(|canonical| map.get_vec(&canonical).ok_or(())) {\n+            Ok(ranges) => ranges.iter().any(|r| r.contains(Range::from(range))),\n+            Err(_) => false,\n         }\n     }\n \n@@ -151,13 +152,20 @@ impl<'a> iter::Iterator for Files<'a> {\n     }\n }\n \n+fn canonicalize_path_string(s: &str) -> Result<String, ()> {\n+    match path::PathBuf::from(s).canonicalize() {\n+        Ok(canonicalized) => canonicalized.to_str().map(|s| s.to_string()).ok_or(()),\n+        _ => Err(()),\n+    }\n+}\n+\n // This impl is needed for `Config::override_value` to work for use in tests.\n impl str::FromStr for FileLines {\n     type Err = String;\n \n     fn from_str(s: &str) -> Result<FileLines, String> {\n         let v: Vec<JsonSpan> = try!(json::decode(s).map_err(|e| e.to_string()));\n-        let m = v.into_iter().map(JsonSpan::into_tuple).collect();\n+        let m = try!(v.into_iter().map(JsonSpan::into_tuple).collect());\n         Ok(FileLines::from_multimap(m))\n     }\n }\n@@ -171,9 +179,11 @@ struct JsonSpan {\n \n impl JsonSpan {\n     // To allow `collect()`ing into a `MultiMap`.\n-    fn into_tuple(self) -> (String, Range) {\n+    fn into_tuple(self) -> Result<(String, Range), String> {\n         let (lo, hi) = self.range;\n-        (self.file, Range::new(lo, hi))\n+        let canonical = try!(canonicalize_path_string(&self.file)\n+            .map_err(|_| format!(\"Can't canonicalize {}\", &self.file)));\n+        Ok((canonical, Range::new(lo, hi)))\n     }\n }\n "}]}