{"sha": "6f02f176c87ef2d9f22b27800ae56289c6423db4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMDJmMTc2Yzg3ZWYyZDlmMjJiMjc4MDBhZTU2Mjg5YzY0MjNkYjQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T15:43:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T15:43:29Z"}, "message": "simplify", "tree": {"sha": "88f056407bdffc6c34ee522eb12fb096b4fe5c3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88f056407bdffc6c34ee522eb12fb096b4fe5c3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f02f176c87ef2d9f22b27800ae56289c6423db4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f02f176c87ef2d9f22b27800ae56289c6423db4", "html_url": "https://github.com/rust-lang/rust/commit/6f02f176c87ef2d9f22b27800ae56289c6423db4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f02f176c87ef2d9f22b27800ae56289c6423db4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db794abe666f9f895ef0577d49eb4db12479ad46", "url": "https://api.github.com/repos/rust-lang/rust/commits/db794abe666f9f895ef0577d49eb4db12479ad46", "html_url": "https://github.com/rust-lang/rust/commit/db794abe666f9f895ef0577d49eb4db12479ad46"}], "stats": {"total": 80, "additions": 37, "deletions": 43}, "files": [{"sha": "edb87be112e6241aeab4692e46cb2bcacbf90c62", "filename": "crates/ra_analysis/src/call_info.rs", "status": "modified", "additions": 37, "deletions": 43, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/6f02f176c87ef2d9f22b27800ae56289c6423db4/crates%2Fra_analysis%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f02f176c87ef2d9f22b27800ae56289c6423db4/crates%2Fra_analysis%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcall_info.rs?ref=6f02f176c87ef2d9f22b27800ae56289c6423db4", "patch": "@@ -21,53 +21,47 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Cancelable\n \n     // Resolve the function's NameRef (NOTE: this isn't entirely accurate).\n     let file_symbols = db.index_resolve(name_ref)?;\n-    for symbol in file_symbols {\n-        if symbol.ptr.kind() == FN_DEF {\n-            let fn_file = db.source_file(symbol.file_id);\n-            let fn_def = symbol.ptr.resolve(&fn_file);\n-            let fn_def = ast::FnDef::cast(&fn_def).unwrap();\n-            if let Some(mut call_info) = CallInfo::new(fn_def) {\n-                // If we have a calling expression let's find which argument we are on\n-                let num_params = call_info.parameters.len();\n-                let has_self = fn_def.param_list().and_then(|l| l.self_param()).is_some();\n-\n-                if num_params == 1 {\n-                    if !has_self {\n-                        call_info.active_parameter = Some(0);\n-                    }\n-                } else if num_params > 1 {\n-                    // Count how many parameters into the call we are.\n-                    // TODO: This is best effort for now and should be fixed at some point.\n-                    // It may be better to see where we are in the arg_list and then check\n-                    // where offset is in that list (or beyond).\n-                    // Revisit this after we get documentation comments in.\n-                    if let Some(ref arg_list) = calling_node.arg_list() {\n-                        let start = arg_list.syntax().range().start();\n-\n-                        let range_search = TextRange::from_to(start, position.offset);\n-                        let mut commas: usize = arg_list\n-                            .syntax()\n-                            .text()\n-                            .slice(range_search)\n-                            .to_string()\n-                            .matches(',')\n-                            .count();\n-\n-                        // If we have a method call eat the first param since it's just self.\n-                        if has_self {\n-                            commas += 1;\n-                        }\n-\n-                        call_info.active_parameter = Some(commas);\n-                    }\n-                }\n-\n-                return Ok(Some(call_info));\n+    let symbol = ctry!(file_symbols.into_iter().find(|it| it.ptr.kind() == FN_DEF));\n+    let fn_file = db.source_file(symbol.file_id);\n+    let fn_def = symbol.ptr.resolve(&fn_file);\n+    let fn_def = ast::FnDef::cast(&fn_def).unwrap();\n+    let mut call_info = ctry!(CallInfo::new(fn_def));\n+    // If we have a calling expression let's find which argument we are on\n+    let num_params = call_info.parameters.len();\n+    let has_self = fn_def.param_list().and_then(|l| l.self_param()).is_some();\n+\n+    if num_params == 1 {\n+        if !has_self {\n+            call_info.active_parameter = Some(0);\n+        }\n+    } else if num_params > 1 {\n+        // Count how many parameters into the call we are.\n+        // TODO: This is best effort for now and should be fixed at some point.\n+        // It may be better to see where we are in the arg_list and then check\n+        // where offset is in that list (or beyond).\n+        // Revisit this after we get documentation comments in.\n+        if let Some(ref arg_list) = calling_node.arg_list() {\n+            let start = arg_list.syntax().range().start();\n+\n+            let range_search = TextRange::from_to(start, position.offset);\n+            let mut commas: usize = arg_list\n+                .syntax()\n+                .text()\n+                .slice(range_search)\n+                .to_string()\n+                .matches(',')\n+                .count();\n+\n+            // If we have a method call eat the first param since it's just self.\n+            if has_self {\n+                commas += 1;\n             }\n+\n+            call_info.active_parameter = Some(commas);\n         }\n     }\n \n-    Ok(None)\n+    Ok(Some(call_info))\n }\n \n enum FnCallNode<'a> {"}]}