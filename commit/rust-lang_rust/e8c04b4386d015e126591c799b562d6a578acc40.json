{"sha": "e8c04b4386d015e126591c799b562d6a578acc40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YzA0YjQzODZkMDE1ZTEyNjU5MWM3OTliNTYyZDZhNTc4YWNjNDA=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-16T13:06:26Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-18T12:30:11Z"}, "message": "Remove impl_trait_in_bindings feature flag", "tree": {"sha": "e0c58fe9034ee6ab3a76918c85338117e7034d80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0c58fe9034ee6ab3a76918c85338117e7034d80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8c04b4386d015e126591c799b562d6a578acc40", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmD0HtMACgkQgTGiTgx5\n7697mw/+ONQZSxWqidkpZwRMm3CDVyzZUgl60Ha/EbbQwYRiSBIZskZ0HhbNWCJf\nJDQSrwg3g45+SwQ/vjChaYFE/0wRwyFLrN7wejENbUHT1q0+HCOFniSFofvY3eUx\nYOSSvU7Y1Nt8o4wEATztJDskoC5naR3jefia0iaacFi51+0nGQNcxWMmvIfbAEx+\nuMniHxjHPo+GEMf4ZLLEnWi6EKZQ8ZQ+5WysW3VFXiet/0CjZUoSiZh9Whr0Avjp\nRQlMkfr+zokk3QFhW+oCPkZUVTvEBj8pXBFK+lSqbcILGTuYmH+mrAB3P2u1+1xj\nNoiPw7z4GXgt3gqRIjlpIUrt/0f7Lfg+Q7u/9kistta+lcuueamsPmgnTFF65KIn\nDM8dD2eOQJV8XQHQuvYDB1ZPy5lgTwiJUBWhWnnakr5fLZTb1adfRm5UEw3dSqMN\n6pBCqDLSgW+GjFIf5//Rq8kBA3xSIlwQZSPtH02eFmMGyVsg13dGkF+tS3n/VKQl\nohI99fXN4ZUp/m/oC8QGkcT+Ig4n2CNhp+EXxW8XLnM9Ub4n3+6tzDZ10Xp/s2tw\nw8RTjbi7By5lduhxry3mrOY/ldNFxiz/I1xVFtADQp0EP4/F3PCTSGj+DgRBhv2Q\nNl2q0OIi2BVo/VrHpuawy/CaodmaLmtV8OCXrkOZEvHT+mat6NI=\n=kDwn\n-----END PGP SIGNATURE-----", "payload": "tree e0c58fe9034ee6ab3a76918c85338117e7034d80\nparent 75585b408fa3563188c3bffa8bb13ad1b1334414\nauthor Santiago Pastorino <spastorino@gmail.com> 1626440786 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1626611411 -0300\n\nRemove impl_trait_in_bindings feature flag\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c04b4386d015e126591c799b562d6a578acc40", "html_url": "https://github.com/rust-lang/rust/commit/e8c04b4386d015e126591c799b562d6a578acc40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8c04b4386d015e126591c799b562d6a578acc40/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75585b408fa3563188c3bffa8bb13ad1b1334414", "url": "https://api.github.com/repos/rust-lang/rust/commits/75585b408fa3563188c3bffa8bb13ad1b1334414", "html_url": "https://github.com/rust-lang/rust/commit/75585b408fa3563188c3bffa8bb13ad1b1334414"}], "stats": {"total": 1121, "additions": 384, "deletions": 737}, "files": [{"sha": "9718739f813c3a025068882aa8ea707ebed7099d", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1460,20 +1460,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             }),\n                         ))\n                     }\n-                    ImplTraitContext::Disallowed(pos) => {\n+                    ImplTraitContext::Disallowed(_) => {\n                         let mut err = struct_span_err!(\n                             self.sess,\n                             t.span,\n                             E0562,\n                             \"`impl Trait` not allowed outside of {}\",\n                             \"function and inherent method return types\",\n                         );\n-                        if pos == ImplTraitPosition::Binding && self.sess.is_nightly_build() {\n-                            err.help(\n-                                \"add `#![feature(impl_trait_in_bindings)]` to the crate \\\n-                                   attributes to enable\",\n-                            );\n-                        }\n                         err.emit();\n                         hir::TyKind::Err\n                     }"}, {"sha": "a3e40daf6bf6dccaaf22787394abd7b157a5f6e5", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -455,9 +455,6 @@ declare_features! (\n     /// Allows non-builtin attributes in inner attribute position.\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n \n-    /// Allows `impl Trait` in bindings (`let`, `const`, `static`).\n-    (incomplete, impl_trait_in_bindings, \"1.30.0\", Some(63065), None),\n-\n     /// Allows using `reason` in lint attributes and the `#[expect(lint)]` lint check.\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n "}, {"sha": "d4a7ede89019176c3f655b510e6cf39f36d10da5", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -148,6 +148,10 @@ declare_features! (\n     (removed, const_raw_ptr_to_usize_cast, \"1.55.0\", Some(51910), None,\n      Some(\"at compile-time, pointers do not have an integer value, so these casts cannot be properly supported\")),\n \n+    /// Allows `impl Trait` in bindings (`let`, `const`, `static`).\n+    (removed, impl_trait_in_bindings, \"1.55.0\", Some(63065), None,\n+     Some(\"removed due to being incomplete and unstable\")),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features\n     // -------------------------------------------------------------------------"}, {"sha": "b5db3331d044781bca42a36d6956cd2d9ed2d39e", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -221,9 +221,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n         fcx.resume_yield_tys = Some((resume_ty, yield_ty));\n     }\n \n-    let outer_def_id = tcx.closure_base_def_id(hir.local_def_id(fn_id).to_def_id()).expect_local();\n-    let outer_hir_id = hir.local_def_id_to_hir_id(outer_def_id);\n-    GatherLocalsVisitor::new(&fcx, outer_hir_id).visit_body(body);\n+    GatherLocalsVisitor::new(&fcx).visit_body(body);\n \n     // C-variadic fns also have a `VaList` input that's not listed in `fn_sig`\n     // (as it's created inside the body itself, not passed in from outside)."}, {"sha": "4ebfd7fd21200aad744e75699ed87959f78439e7", "filename": "compiler/rustc_typeck/src/check/gather_locals.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -4,21 +4,20 @@ use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::PatKind;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::ty::Ty;\n-use rustc_span::{sym, Span};\n+use rustc_span::Span;\n use rustc_trait_selection::traits;\n \n pub(super) struct GatherLocalsVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n-    parent_id: hir::HirId,\n     // parameters are special cases of patterns, but we want to handle them as\n     // *distinct* cases. so track when we are hitting a pattern *within* an fn\n     // parameter.\n     outermost_fn_param_pat: Option<Span>,\n }\n \n impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n-    pub(super) fn new(fcx: &'a FnCtxt<'a, 'tcx>, parent_id: hir::HirId) -> Self {\n-        Self { fcx, parent_id, outermost_fn_param_pat: None }\n+    pub(super) fn new(fcx: &'a FnCtxt<'a, 'tcx>) -> Self {\n+        Self { fcx, outermost_fn_param_pat: None }\n     }\n \n     fn assign(&mut self, span: Span, nid: hir::HirId, ty_opt: Option<LocalTy<'tcx>>) -> Ty<'tcx> {\n@@ -57,26 +56,15 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n             Some(ref ty) => {\n                 let o_ty = self.fcx.to_ty(&ty);\n \n-                let revealed_ty = self.fcx.instantiate_opaque_types_from_value(\n-                    self.parent_id,\n-                    o_ty,\n-                    ty.span,\n-                    Some(sym::impl_trait_in_bindings),\n-                );\n-\n-                let c_ty =\n-                    self.fcx.inh.infcx.canonicalize_user_type_annotation(UserType::Ty(revealed_ty));\n-                debug!(\n-                    \"visit_local: ty.hir_id={:?} o_ty={:?} revealed_ty={:?} c_ty={:?}\",\n-                    ty.hir_id, o_ty, revealed_ty, c_ty\n-                );\n+                let c_ty = self.fcx.inh.infcx.canonicalize_user_type_annotation(UserType::Ty(o_ty));\n+                debug!(\"visit_local: ty.hir_id={:?} o_ty={:?} c_ty={:?}\", ty.hir_id, o_ty, c_ty);\n                 self.fcx\n                     .typeck_results\n                     .borrow_mut()\n                     .user_provided_types_mut()\n                     .insert(ty.hir_id, c_ty);\n \n-                Some(LocalTy { decl_ty: o_ty, revealed_ty })\n+                Some(LocalTy { decl_ty: o_ty, revealed_ty: o_ty })\n             }\n             None => None,\n         };"}, {"sha": "d30b057e26fe369b403258cd34610e97fc4d8680", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -118,9 +118,9 @@ use rustc_middle::ty::{self, Ty, TyCtxt, UserType};\n use rustc_session::config;\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n+use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{self, BytePos, MultiSpan, Span};\n-use rustc_span::{source_map::DUMMY_SP, sym};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n@@ -441,19 +441,12 @@ fn typeck_with_fallback<'tcx>(\n             let expected_type = fcx.normalize_associated_types_in(body.value.span, expected_type);\n             fcx.require_type_is_sized(expected_type, body.value.span, traits::ConstSized);\n \n-            let revealed_ty = fcx.instantiate_opaque_types_from_value(\n-                id,\n-                expected_type,\n-                body.value.span,\n-                Some(sym::impl_trait_in_bindings),\n-            );\n-\n             // Gather locals in statics (because of block expressions).\n-            GatherLocalsVisitor::new(&fcx, id).visit_body(body);\n+            GatherLocalsVisitor::new(&fcx).visit_body(body);\n \n-            fcx.check_expr_coercable_to_type(&body.value, revealed_ty, None);\n+            fcx.check_expr_coercable_to_type(&body.value, expected_type, None);\n \n-            fcx.write_ty(id, revealed_ty);\n+            fcx.write_ty(id, expected_type);\n \n             fcx\n         };"}, {"sha": "5c6aa912c1b24ec3ff7c7e95887aadf6f2d4c860", "filename": "src/doc/unstable-book/src/language-features/impl-trait-in-bindings.md", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/75585b408fa3563188c3bffa8bb13ad1b1334414/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fimpl-trait-in-bindings.md", "raw_url": "https://github.com/rust-lang/rust/raw/75585b408fa3563188c3bffa8bb13ad1b1334414/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fimpl-trait-in-bindings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fimpl-trait-in-bindings.md?ref=75585b408fa3563188c3bffa8bb13ad1b1334414", "patch": "@@ -1,28 +0,0 @@\n-# `impl_trait_in_bindings`\n-\n-The tracking issue for this feature is: [#63065]\n-\n-[#63065]: https://github.com/rust-lang/rust/issues/63065\n-\n-------------------------\n-\n-The `impl_trait_in_bindings` feature gate lets you use `impl Trait` syntax in\n-`let`, `static`, and `const` bindings.\n-\n-A simple example is:\n-\n-```rust\n-#![feature(impl_trait_in_bindings)]\n-\n-use std::fmt::Debug;\n-\n-fn main() {\n-    let a: impl Debug + Clone = 42;\n-    let b = a.clone();\n-    println!(\"{:?}\", b); // prints `42`\n-}\n-```\n-\n-Note however that because the types of `a` and `b` are opaque in the above\n-example, calling inherent methods or methods outside of the specified traits\n-(e.g., `a.abs()` or `b.abs()`) is not allowed, and yields an error."}, {"sha": "bffa5150fe1ce80bde0a549cdf3fe230c03319f4", "filename": "src/test/ui/associated-type-bounds/duplicate.full_tait.stderr", "status": "modified", "additions": 61, "deletions": 69, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.full_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -7,494 +7,486 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/duplicate.rs:6:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:11:36\n+  --> $DIR/duplicate.rs:10:36\n    |\n LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:13:36\n+  --> $DIR/duplicate.rs:12:36\n    |\n LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:15:39\n+  --> $DIR/duplicate.rs:14:39\n    |\n LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:17:45\n+  --> $DIR/duplicate.rs:16:45\n    |\n LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:19:45\n+  --> $DIR/duplicate.rs:18:45\n    |\n LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:21:48\n+  --> $DIR/duplicate.rs:20:48\n    |\n LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:24:34\n+  --> $DIR/duplicate.rs:23:34\n    |\n LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:26:34\n+  --> $DIR/duplicate.rs:25:34\n    |\n LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:28:37\n+  --> $DIR/duplicate.rs:27:37\n    |\n LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:30:43\n+  --> $DIR/duplicate.rs:29:43\n    |\n LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:32:43\n+  --> $DIR/duplicate.rs:31:43\n    |\n LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:34:46\n+  --> $DIR/duplicate.rs:33:46\n    |\n LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:37:35\n+  --> $DIR/duplicate.rs:36:35\n    |\n LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:39:35\n+  --> $DIR/duplicate.rs:38:35\n    |\n LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:41:38\n+  --> $DIR/duplicate.rs:40:38\n    |\n LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:43:44\n+  --> $DIR/duplicate.rs:42:44\n    |\n LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:45:44\n+  --> $DIR/duplicate.rs:44:44\n    |\n LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:47:47\n+  --> $DIR/duplicate.rs:46:47\n    |\n LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:50:32\n+  --> $DIR/duplicate.rs:49:32\n    |\n LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:52:32\n+  --> $DIR/duplicate.rs:51:32\n    |\n LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:54:35\n+  --> $DIR/duplicate.rs:53:35\n    |\n LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:56:43\n+  --> $DIR/duplicate.rs:55:43\n    |\n LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:58:43\n+  --> $DIR/duplicate.rs:57:43\n    |\n LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:60:46\n+  --> $DIR/duplicate.rs:59:46\n    |\n LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:66:40\n+  --> $DIR/duplicate.rs:65:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:68:40\n+  --> $DIR/duplicate.rs:67:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:70:43\n+  --> $DIR/duplicate.rs:69:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:73:35\n+  --> $DIR/duplicate.rs:72:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:75:35\n+  --> $DIR/duplicate.rs:74:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:77:38\n+  --> $DIR/duplicate.rs:76:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:79:44\n+  --> $DIR/duplicate.rs:78:44\n    |\n LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:81:44\n+  --> $DIR/duplicate.rs:80:44\n    |\n LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:83:47\n+  --> $DIR/duplicate.rs:82:47\n    |\n LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:86:36\n+  --> $DIR/duplicate.rs:85:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:88:36\n+  --> $DIR/duplicate.rs:87:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:90:39\n+  --> $DIR/duplicate.rs:89:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:92:40\n+  --> $DIR/duplicate.rs:91:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:94:40\n+  --> $DIR/duplicate.rs:93:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:96:43\n+  --> $DIR/duplicate.rs:95:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:99:36\n+  --> $DIR/duplicate.rs:98:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:101:36\n+  --> $DIR/duplicate.rs:100:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:103:39\n+  --> $DIR/duplicate.rs:102:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:105:34\n+  --> $DIR/duplicate.rs:104:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:107:34\n+  --> $DIR/duplicate.rs:106:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:109:37\n+  --> $DIR/duplicate.rs:108:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:111:45\n+  --> $DIR/duplicate.rs:110:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:113:45\n+  --> $DIR/duplicate.rs:112:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:115:48\n+  --> $DIR/duplicate.rs:114:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:117:46\n+  --> $DIR/duplicate.rs:116:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:117:46\n+  --> $DIR/duplicate.rs:116:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:120:46\n+  --> $DIR/duplicate.rs:119:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:120:46\n+  --> $DIR/duplicate.rs:119:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:123:49\n+  --> $DIR/duplicate.rs:122:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:123:49\n+  --> $DIR/duplicate.rs:122:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:133:40\n+  --> $DIR/duplicate.rs:132:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:135:44\n+  --> $DIR/duplicate.rs:134:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:137:43\n+  --> $DIR/duplicate.rs:136:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:126:43\n+  --> $DIR/duplicate.rs:125:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:128:43\n+  --> $DIR/duplicate.rs:127:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:130:46\n+  --> $DIR/duplicate.rs:129:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error: aborting due to 60 previous errors; 2 warnings emitted\n+error: aborting due to 60 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "06bfac588de0060374fc515e9a26b7860c3d0938", "filename": "src/test/ui/associated-type-bounds/duplicate.min_tait.stderr", "status": "modified", "additions": 61, "deletions": 70, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.min_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,492 +1,483 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/duplicate.rs:6:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:11:36\n+  --> $DIR/duplicate.rs:10:36\n    |\n LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:13:36\n+  --> $DIR/duplicate.rs:12:36\n    |\n LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:15:39\n+  --> $DIR/duplicate.rs:14:39\n    |\n LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:17:45\n+  --> $DIR/duplicate.rs:16:45\n    |\n LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:19:45\n+  --> $DIR/duplicate.rs:18:45\n    |\n LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:21:48\n+  --> $DIR/duplicate.rs:20:48\n    |\n LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:24:34\n+  --> $DIR/duplicate.rs:23:34\n    |\n LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:26:34\n+  --> $DIR/duplicate.rs:25:34\n    |\n LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:28:37\n+  --> $DIR/duplicate.rs:27:37\n    |\n LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:30:43\n+  --> $DIR/duplicate.rs:29:43\n    |\n LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:32:43\n+  --> $DIR/duplicate.rs:31:43\n    |\n LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:34:46\n+  --> $DIR/duplicate.rs:33:46\n    |\n LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:37:35\n+  --> $DIR/duplicate.rs:36:35\n    |\n LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:39:35\n+  --> $DIR/duplicate.rs:38:35\n    |\n LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:41:38\n+  --> $DIR/duplicate.rs:40:38\n    |\n LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:43:44\n+  --> $DIR/duplicate.rs:42:44\n    |\n LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:45:44\n+  --> $DIR/duplicate.rs:44:44\n    |\n LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:47:47\n+  --> $DIR/duplicate.rs:46:47\n    |\n LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:50:32\n+  --> $DIR/duplicate.rs:49:32\n    |\n LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:52:32\n+  --> $DIR/duplicate.rs:51:32\n    |\n LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:54:35\n+  --> $DIR/duplicate.rs:53:35\n    |\n LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:56:43\n+  --> $DIR/duplicate.rs:55:43\n    |\n LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:58:43\n+  --> $DIR/duplicate.rs:57:43\n    |\n LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:60:46\n+  --> $DIR/duplicate.rs:59:46\n    |\n LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:66:40\n+  --> $DIR/duplicate.rs:65:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:68:40\n+  --> $DIR/duplicate.rs:67:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:70:43\n+  --> $DIR/duplicate.rs:69:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:73:35\n+  --> $DIR/duplicate.rs:72:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:75:35\n+  --> $DIR/duplicate.rs:74:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:77:38\n+  --> $DIR/duplicate.rs:76:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:79:44\n+  --> $DIR/duplicate.rs:78:44\n    |\n LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:81:44\n+  --> $DIR/duplicate.rs:80:44\n    |\n LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:83:47\n+  --> $DIR/duplicate.rs:82:47\n    |\n LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:86:36\n+  --> $DIR/duplicate.rs:85:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:88:36\n+  --> $DIR/duplicate.rs:87:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:90:39\n+  --> $DIR/duplicate.rs:89:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:92:40\n+  --> $DIR/duplicate.rs:91:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:94:40\n+  --> $DIR/duplicate.rs:93:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:96:43\n+  --> $DIR/duplicate.rs:95:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:99:36\n+  --> $DIR/duplicate.rs:98:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:101:36\n+  --> $DIR/duplicate.rs:100:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:103:39\n+  --> $DIR/duplicate.rs:102:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:105:34\n+  --> $DIR/duplicate.rs:104:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:107:34\n+  --> $DIR/duplicate.rs:106:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:109:37\n+  --> $DIR/duplicate.rs:108:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:111:45\n+  --> $DIR/duplicate.rs:110:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:113:45\n+  --> $DIR/duplicate.rs:112:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:115:48\n+  --> $DIR/duplicate.rs:114:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:117:46\n+  --> $DIR/duplicate.rs:116:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:117:46\n+  --> $DIR/duplicate.rs:116:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:120:46\n+  --> $DIR/duplicate.rs:119:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:120:46\n+  --> $DIR/duplicate.rs:119:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:123:49\n+  --> $DIR/duplicate.rs:122:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:123:49\n+  --> $DIR/duplicate.rs:122:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:133:40\n+  --> $DIR/duplicate.rs:132:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:135:44\n+  --> $DIR/duplicate.rs:134:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:137:43\n+  --> $DIR/duplicate.rs:136:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:126:43\n+  --> $DIR/duplicate.rs:125:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:128:43\n+  --> $DIR/duplicate.rs:127:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from trait `Iterator`) is already specified\n-  --> $DIR/duplicate.rs:130:46\n+  --> $DIR/duplicate.rs:129:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n-error: aborting due to 60 previous errors; 1 warning emitted\n+error: aborting due to 60 previous errors\n \n For more information about this error, try `rustc --explain E0719`."}, {"sha": "0d7804ef1a7d5feb499b3f52cb99a04138588ccc", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -3,7 +3,6 @@\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-#![feature(impl_trait_in_bindings)] //~ WARN the feature `impl_trait_in_bindings` is incomplete\n #![feature(untagged_unions)]\n \n use std::iter;"}, {"sha": "b7869e22b4a14c585a0596f60f0104284743cbb9", "filename": "src/test/ui/associated-type-bounds/dyn-lcsit.rs", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/75585b408fa3563188c3bffa8bb13ad1b1334414/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75585b408fa3563188c3bffa8bb13ad1b1334414/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.rs?ref=75585b408fa3563188c3bffa8bb13ad1b1334414", "patch": "@@ -1,69 +0,0 @@\n-// run-pass\n-\n-#![feature(associated_type_bounds)]\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARNING `impl_trait_in_bindings` is incomplete\n-#![allow(non_upper_case_globals)]\n-\n-use std::ops::Add;\n-\n-trait Tr1 { type As1; fn mk(&self) -> Self::As1; }\n-trait Tr2<'a> { fn tr2(self) -> &'a Self; }\n-\n-fn assert_copy<T: Copy>(x: T) { let _x = x; let _x = x; }\n-fn assert_static<T: 'static>(_: T) {}\n-fn assert_forall_tr2<T: for<'a> Tr2<'a>>(_: T) {}\n-\n-#[derive(Copy, Clone)]\n-struct S1;\n-#[derive(Copy, Clone)]\n-struct S2;\n-impl Tr1 for S1 { type As1 = S2; fn mk(&self) -> Self::As1 { S2 } }\n-\n-const cdef_et1: &dyn Tr1<As1: Copy> = &S1;\n-const sdef_et1: &dyn Tr1<As1: Copy> = &S1;\n-pub fn use_et1() { assert_copy(cdef_et1.mk()); assert_copy(sdef_et1.mk()); }\n-\n-const cdef_et2: &(dyn Tr1<As1: 'static> + Sync) = &S1;\n-static sdef_et2: &(dyn Tr1<As1: 'static> + Sync) = &S1;\n-pub fn use_et2() { assert_static(cdef_et2.mk()); assert_static(sdef_et2.mk()); }\n-\n-const cdef_et3: &dyn Tr1<As1: Clone + Iterator<Item: Add<u8, Output: Into<u8>>>> = {\n-    struct A;\n-    impl Tr1 for A {\n-        type As1 = core::ops::Range<u8>;\n-        fn mk(&self) -> Self::As1 { 0..10 }\n-    }\n-    &A\n-};\n-pub fn use_et3() {\n-    let _0 = cdef_et3.mk().clone();\n-    let mut s = 0u8;\n-    for _1 in _0 {\n-        let _2 = _1 + 1u8;\n-        s += _2.into();\n-    }\n-    assert_eq!(s, (0..10).map(|x| x + 1).sum());\n-}\n-\n-const cdef_et4: &(dyn Tr1<As1: for<'a> Tr2<'a>> + Sync) = {\n-    #[derive(Copy, Clone)]\n-    struct A;\n-    impl Tr1 for A {\n-        type As1 = A;\n-        fn mk(&self) -> A { A }\n-    }\n-    impl<'a> Tr2<'a> for A {\n-        fn tr2(self) -> &'a Self { &A }\n-    }\n-    &A\n-};\n-static sdef_et4: &(dyn Tr1<As1: for<'a> Tr2<'a>> + Sync) = cdef_et4;\n-pub fn use_et4() { assert_forall_tr2(cdef_et4.mk()); assert_forall_tr2(sdef_et4.mk()); }\n-\n-fn main() {\n-    let _ = use_et1();\n-    let _ = use_et2();\n-    let _ = use_et3();\n-    let _ = use_et4();\n-}"}, {"sha": "3637f9558be7bd2d5483e218f6fe517e31458000", "filename": "src/test/ui/associated-type-bounds/dyn-lcsit.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75585b408fa3563188c3bffa8bb13ad1b1334414/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75585b408fa3563188c3bffa8bb13ad1b1334414/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.stderr?ref=75585b408fa3563188c3bffa8bb13ad1b1334414", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/dyn-lcsit.rs:4:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "d8553815b75de11cbd209aa915e947983cfd9426", "filename": "src/test/ui/entry-point/imported_main_const_fn_item_type_forbidden.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,12 +1,14 @@\n #![feature(imported_main)]\n-#![feature(min_type_alias_impl_trait, impl_trait_in_bindings)]\n+#![feature(min_type_alias_impl_trait)]\n #![allow(incomplete_features)]\n //~^^^ ERROR `main` function not found in crate\n pub mod foo {\n     type MainFn = impl Fn();\n+    //~^ ERROR could not find defining uses\n \n     fn bar() {}\n     pub const BAR: MainFn = bar;\n+    //~^ ERROR mismatched types [E0308]\n }\n \n use foo::BAR as main;"}, {"sha": "c4c0afc5687c1aa99bf4e6ee112a91836846401d", "filename": "src/test/ui/entry-point/imported_main_const_fn_item_type_forbidden.stderr", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fentry-point%2Fimported_main_const_fn_item_type_forbidden.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -2,7 +2,7 @@ error[E0601]: `main` function not found in crate `imported_main_const_fn_item_ty\n   --> $DIR/imported_main_const_fn_item_type_forbidden.rs:1:1\n    |\n LL | / #![feature(imported_main)]\n-LL | | #![feature(min_type_alias_impl_trait, impl_trait_in_bindings)]\n+LL | | #![feature(min_type_alias_impl_trait)]\n LL | | #![allow(incomplete_features)]\n LL | |\n ...  |\n@@ -12,6 +12,25 @@ LL | | use foo::BAR as main;\n    |       |\n    |       non-function item at `crate::main` is found\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/imported_main_const_fn_item_type_forbidden.rs:10:29\n+   |\n+LL |     type MainFn = impl Fn();\n+   |                   --------- the expected opaque type\n+...\n+LL |     pub const BAR: MainFn = bar;\n+   |                             ^^^ expected opaque type, found fn item\n+   |\n+   = note: expected opaque type `impl Fn<()>`\n+                  found fn item `fn() {bar}`\n+\n+error: could not find defining uses\n+  --> $DIR/imported_main_const_fn_item_type_forbidden.rs:6:19\n+   |\n+LL |     type MainFn = impl Fn();\n+   |                   ^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0601`.\n+Some errors have detailed explanations: E0308, E0601.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "6a048ee8797d236ecd7323fad585e6f64767828a", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -120,24 +120,18 @@ error[E0562]: `impl Trait` not allowed outside of function and inherent method r\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/feature-gate-associated_type_bounds.rs:64:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |               ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/feature-gate-associated_type_bounds.rs:71:12\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |            ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `<<Self as _Tr3>::A as Iterator>::Item: Copy` is not satisfied\n   --> $DIR/feature-gate-associated_type_bounds.rs:15:28"}, {"sha": "4fb1cd2aae1d311c7bd1b9b7d846a0ca153f1db2", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -31,7 +31,7 @@ type Foo4 = impl Debug;\n \n fn define4() {\n     let y: Foo4 = 42;\n-    //~^ ERROR not permitted here\n+    //~^ ERROR mismatched types [E0308]\n }\n \n fn main() {}"}, {"sha": "10409d5fc4badabbe492f53fbf79ef4454fc730a", "filename": "src/test/ui/feature-gates/feature-gate-type_alias_impl_trait.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-type_alias_impl_trait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -45,14 +45,19 @@ LL |     define3(42)\n    = note: expected opaque type `impl Debug`\n                      found type `{integer}`\n \n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/feature-gate-type_alias_impl_trait.rs:33:12\n+error[E0308]: mismatched types\n+  --> $DIR/feature-gate-type_alias_impl_trait.rs:33:19\n    |\n+LL | type Foo4 = impl Debug;\n+   |             ---------- the expected opaque type\n+...\n LL |     let y: Foo4 = 42;\n-   |            ^^^^\n+   |            ----   ^^ expected opaque type, found integer\n+   |            |\n+   |            expected due to this\n    |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+   = note: expected opaque type `impl Debug`\n+                     found type `{integer}`\n \n error: could not find defining uses\n   --> $DIR/feature-gate-type_alias_impl_trait.rs:5:12"}, {"sha": "bf647d089833a69dd7da2e15ca3beda47261afc3", "filename": "src/test/ui/generator/layout-error.full_tait.stderr", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.full_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,26 +1,18 @@\n error[E0425]: cannot find value `Foo` in this scope\n-  --> $DIR/layout-error.rs:25:17\n+  --> $DIR/layout-error.rs:24:17\n    |\n LL |         let a = Foo;\n    |                 ^^^ not found in this scope\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/layout-error.rs:8:32\n    |\n-LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/layout-error.rs:8:56\n-   |\n-LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n-   |                                                        ^^^^^^^^^^^^^^^^^^^^^\n-   |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "ed31c260cbc0f95a04698f6eff880c3935206994", "filename": "src/test/ui/generator/layout-error.min_tait.stderr", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.min_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,40 +1,19 @@\n error[E0425]: cannot find value `Foo` in this scope\n-  --> $DIR/layout-error.rs:25:17\n+  --> $DIR/layout-error.rs:24:17\n    |\n LL |         let a = Foo;\n    |                 ^^^ not found in this scope\n \n error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/layout-error.rs:31:27\n+  --> $DIR/layout-error.rs:30:27\n    |\n LL |     Task::spawn(&POOL, || cb());\n    |                           ^\n    |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/layout-error.rs:30:28\n-   |\n-LL |     static POOL: Task<F> = Task::new();\n-   |                            ^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/layout-error.rs:31:24\n-   |\n-LL |     Task::spawn(&POOL, || cb());\n-   |                        ^^^^^^^ expected `[type error]`, got `impl Future`\n-   |\n-note: previous use here\n-  --> $DIR/layout-error.rs:30:5\n-   |\n-LL |     static POOL: Task<F> = Task::new();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0425, E0658.\n For more information about an error, try `rustc --explain E0425`."}, {"sha": "a5efc3899dd4d8538ab889764e1890ef1a1241c3", "filename": "src/test/ui/generator/layout-error.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Flayout-error.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -5,9 +5,8 @@\n \n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n use std::future::Future;\n \n pub struct Task<F: Future>(F);\n@@ -27,7 +26,6 @@ fn main() {\n \n     type F = impl Future;\n     // Check that statics are inhabited computes they layout.\n-    static POOL: Task<F> = Task::new(); //[min_tait]~ ERROR not permitted here\n+    static POOL: Task<F> = Task::new();\n     Task::spawn(&POOL, || cb()); //[min_tait]~ ERROR type alias impl trait is not permitted here\n-    //[min_tait]~^ ERROR concrete type differs from previous\n }"}, {"sha": "1e609e8388277042708681aac897eecfa3fd5cd1", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.full_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,25 +1,17 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/metadata-sufficient-for-layout.rs:10:32\n    |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/metadata-sufficient-for-layout.rs:10:55\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/metadata-sufficient-for-layout.rs:29:1\n+  --> $DIR/metadata-sufficient-for-layout.rs:28:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "52d42fd59a003a1fa8c807241cdc131ce705a043", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.min_tait.stderr", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.min_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,24 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/metadata-sufficient-for-layout.rs:22:23\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/metadata-sufficient-for-layout.rs:28:1\n    |\n-LL | static A: Option<F> = None;\n-   |                       ^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/metadata-sufficient-for-layout.rs:25:1\n-   |\n-LL | fn f() -> F { metadata_sufficient_for_layout::g() }\n-   | ^^^^^^^^^^^ expected `[type error]`, got `impl Generator`\n-   |\n-note: previous use here\n-  --> $DIR/metadata-sufficient-for-layout.rs:22:1\n-   |\n-LL | static A: Option<F> = None;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn main() {}\n+   | ^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "c01354569f07d408a6aca5cb0fd9024b2df33475", "filename": "src/test/ui/generator/metadata-sufficient-for-layout.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fmetadata-sufficient-for-layout.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -7,9 +7,8 @@\n \n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait, rustc_attrs)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n #![feature(generator_trait)]\n \n extern crate metadata_sufficient_for_layout;\n@@ -20,10 +19,10 @@ type F = impl Generator<(), Yield = (), Return = ()>;\n \n // Static queries the layout of the generator.\n static A: Option<F> = None;\n-//[min_tait]~^ ERROR not permitted here\n \n-fn f() -> F { metadata_sufficient_for_layout::g() }\n-//[min_tait]~^ ERROR concrete type differs\n+fn f() -> F {\n+    metadata_sufficient_for_layout::g()\n+}\n \n #[rustc_error]\n-fn main() {} //[full_tait]~ ERROR\n+fn main() {} //~ ERROR"}, {"sha": "8ec06e534d14336bd569ab85a615539a542475b3", "filename": "src/test/ui/impl-trait/bound-normalization-fail.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,15 +1,14 @@\n // edition:2018\n \n-#![feature(impl_trait_in_bindings)]\n-//~^ WARNING the feature `impl_trait_in_bindings` is incomplete\n-\n // See issue 60414\n \n // Reduction to `impl Trait`\n \n struct Foo<T>(T);\n \n-trait FooLike { type Output; }\n+trait FooLike {\n+    type Output;\n+}\n \n impl<T> FooLike for Foo<T> {\n     type Output = T;\n@@ -23,7 +22,7 @@ mod impl_trait {\n     }\n \n     /// `T::Assoc` can't be normalized any further here.\n-    fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n+    fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n         //~^ ERROR: type mismatch\n         Foo(())\n     }\n@@ -39,9 +38,9 @@ mod lifetimes {\n     }\n \n     /// Missing bound constraining `Assoc`, `T::Assoc` can't be normalized further.\n-    fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n-    //~^ ERROR: type mismatch\n-    //~^^ ERROR `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+    fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n+        //~^ ERROR: type mismatch\n+        //~^^ ERROR `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n         Foo(())\n     }\n }"}, {"sha": "611543a19260b05863eb6a5fb51a12422a45d3a4", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,45 +1,36 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bound-normalization-fail.rs:3:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:26:32\n+  --> $DIR/bound-normalization-fail.rs:25:32\n    |\n-LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n+LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n    |\n    = note: expected associated type `<T as impl_trait::Trait>::Assoc`\n                          found type `()`\n help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc` to `()`\n    |\n-LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output=T::Assoc> {\n+LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n    |                         ^^^^^^^^^^^^\n \n error[E0760]: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/bound-normalization-fail.rs:42:41\n+  --> $DIR/bound-normalization-fail.rs:41:41\n    |\n-LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:42:41\n+  --> $DIR/bound-normalization-fail.rs:41:41\n    |\n-LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n+LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found `()`\n    |\n    = note: expected associated type `<T as lifetimes::Trait<'static>>::Assoc`\n                          found type `()`\n help: consider constraining the associated type `<T as lifetimes::Trait<'static>>::Assoc` to `()`\n    |\n-LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output=T::Assoc> {\n+LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n    |                                 ^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0271, E0760.\n For more information about an error, try `rustc --explain E0271`."}, {"sha": "ef3cb7401128e3a4c303afdaf84759458745daa0", "filename": "src/test/ui/impl-trait/bound-normalization-pass.default.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75585b408fa3563188c3bffa8bb13ad1b1334414/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75585b408fa3563188c3bffa8bb13ad1b1334414/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.default.stderr?ref=75585b408fa3563188c3bffa8bb13ad1b1334414", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bound-normalization-pass.rs:8:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "4218bc5206596b84d0e9b4f5c988fe5e8079dab0", "filename": "src/test/ui/impl-trait/bound-normalization-pass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -5,8 +5,6 @@\n //-^ To make this the regression test for #75962.\n \n #![feature(min_type_alias_impl_trait)]\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARNING the feature `impl_trait_in_bindings` is incomplete\n \n // See issue 60414\n "}, {"sha": "ef3cb7401128e3a4c303afdaf84759458745daa0", "filename": "src/test/ui/impl-trait/bound-normalization-pass.sa.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75585b408fa3563188c3bffa8bb13ad1b1334414/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.sa.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75585b408fa3563188c3bffa8bb13ad1b1334414/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.sa.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.sa.stderr?ref=75585b408fa3563188c3bffa8bb13ad1b1334414", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bound-normalization-pass.rs:8:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: 1 warning emitted\n-"}, {"sha": "1f4e3f78afa45e23d368ccd218d967cb9aa86b71", "filename": "src/test/ui/impl-trait/issues/issue-70877.full_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.full_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n-  --> $DIR/issue-70877.rs:11:12\n+  --> $DIR/issue-70877.rs:10:12\n    |\n LL | type FooRet = impl std::fmt::Debug;\n    |               -------------------- the found opaque type"}, {"sha": "1f4e3f78afa45e23d368ccd218d967cb9aa86b71", "filename": "src/test/ui/impl-trait/issues/issue-70877.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.min_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<Bar as Iterator>::Item == Box<(dyn for<'r> Fn(&'r (dyn ToString + 'r)) -> Option<String> + 'static)>`\n-  --> $DIR/issue-70877.rs:11:12\n+  --> $DIR/issue-70877.rs:10:12\n    |\n LL | type FooRet = impl std::fmt::Debug;\n    |               -------------------- the found opaque type"}, {"sha": "29aa705ef9d4df21dba80e04e00137f90d19f638", "filename": "src/test/ui/impl-trait/issues/issue-70877.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70877.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,7 +1,6 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n-#![feature(impl_trait_in_bindings)]\n #![allow(incomplete_features)]\n \n type FooArg<'a> = &'a dyn ToString;"}, {"sha": "728644f7579917960b8b85791bd759baafcb9730", "filename": "src/test/ui/impl-trait/issues/issue-78722.full_tait.stderr", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.full_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -7,33 +7,26 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-78722.rs:7:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-error[E0658]: `async` blocks are not allowed in constants\n-  --> $DIR/issue-78722.rs:17:20\n+error[E0308]: mismatched types\n+  --> $DIR/issue-78722.rs:15:20\n    |\n+LL | type F = impl core::future::Future<Output = u8>;\n+   |          -------------------------------------- the expected opaque type\n+...\n LL |         let f: F = async { 1 };\n-   |                    ^^^^^^^^^^^\n+   |                -   ^^^^^^^^^^^ expected opaque type, found a different opaque type\n+   |                |\n+   |                expected due to this\n+   | \n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n-   = note: see issue #85368 <https://github.com/rust-lang/rust/issues/85368> for more information\n-   = help: add `#![feature(const_async_blocks)]` to the crate attributes to enable\n-\n-error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/issue-78722.rs:17:13\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n    |\n-LL |         let f: F = async { 1 };\n-   |             ^ constants cannot evaluate destructors\n-...\n-LL |     }],\n-   |     - value is dropped here\n+   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:8:10>)\n+              found opaque type `impl Future` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n+   = note: distinct uses of `impl Trait` result in different opaque types\n \n-error: aborting due to 2 previous errors; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n \n-Some errors have detailed explanations: E0493, E0658.\n-For more information about an error, try `rustc --explain E0493`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "221b23ae3d2adf08de38f81dad208f370fc77277", "filename": "src/test/ui/impl-trait/issues/issue-78722.min_tait.stderr", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.min_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,31 +1,23 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-78722.rs:7:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-error[E0658]: `async` blocks are not allowed in constants\n-  --> $DIR/issue-78722.rs:17:20\n+error[E0308]: mismatched types\n+  --> $DIR/issue-78722.rs:15:20\n    |\n+LL | type F = impl core::future::Future<Output = u8>;\n+   |          -------------------------------------- the expected opaque type\n+...\n LL |         let f: F = async { 1 };\n-   |                    ^^^^^^^^^^^\n+   |                -   ^^^^^^^^^^^ expected opaque type, found a different opaque type\n+   |                |\n+   |                expected due to this\n+   | \n+  ::: $SRC_DIR/core/src/future/mod.rs:LL:COL\n    |\n-   = note: see issue #85368 <https://github.com/rust-lang/rust/issues/85368> for more information\n-   = help: add `#![feature(const_async_blocks)]` to the crate attributes to enable\n-\n-error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/issue-78722.rs:17:13\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the found opaque type\n    |\n-LL |         let f: F = async { 1 };\n-   |             ^ constants cannot evaluate destructors\n-...\n-LL |     }],\n-   |     - value is dropped here\n+   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:8:10>)\n+              found opaque type `impl Future` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n+   = note: distinct uses of `impl Trait` result in different opaque types\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0493, E0658.\n-For more information about an error, try `rustc --explain E0493`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "480b55eed21e2046c1c9e0b14b4f43cac489b38c", "filename": "src/test/ui/impl-trait/issues/issue-78722.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -4,8 +4,6 @@\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n \n type F = impl core::future::Future<Output = u8>;\n \n@@ -15,8 +13,7 @@ struct Bug {\n             async {}\n         }\n         let f: F = async { 1 };\n-        //~^ ERROR `async` blocks are not allowed in constants\n-        //~| ERROR destructors cannot be evaluated at compile-time\n+        //~^ ERROR mismatched types [E0308]\n         1\n     }],\n }"}, {"sha": "32389048148c838f5d25cce3faef814de48d9424", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -282,8 +282,6 @@ error[E0562]: `impl Trait` not allowed outside of function and inherent method r\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n-   |\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:248:46"}, {"sha": "543d15fadc6be78762074d7186b385c7aee5db45", "filename": "src/test/ui/mir/issue-75053.full_tait.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.full_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -7,15 +7,11 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-75053.rs:52:15\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-75053.rs:49:1\n    |\n-LL |     let _pos: Phantom1<DummyT<()>> = Scope::new().my_index();\n-   |               ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "d75996bf0b3ae3615b4c9bdab12390bdcd4ba889", "filename": "src/test/ui/mir/issue-75053.in_bindings.stderr", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fmir%2Fissue-75053.in_bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fmir%2Fissue-75053.in_bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.in_bindings.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,24 +1,11 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+error[E0557]: feature has been removed\n   --> $DIR/issue-75053.rs:7:34\n    |\n LL | #![cfg_attr(in_bindings, feature(impl_trait_in_bindings))]\n-   |                                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^ feature has been removed\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = note: removed due to being incomplete and unstable\n \n-error[E0282]: type annotations needed\n-  --> $DIR/issue-75053.rs:52:38\n-   |\n-LL |     type O;\n-   |     ------- `<Self as MyIndex<T>>::O` defined here\n-...\n-LL |     let _pos: Phantom1<DummyT<()>> = Scope::new().my_index();\n-   |                                      ^^^^^^^^^^-------------\n-   |                                      |\n-   |                                      this method call resolves to `<Self as MyIndex<T>>::O`\n-   |                                      cannot infer type for type parameter `T`\n-\n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0282`.\n+For more information about this error, try `rustc --explain E0557`."}, {"sha": "c533275c99a79554657bdf219d9e567b90c8fc79", "filename": "src/test/ui/mir/issue-75053.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fmir%2Fissue-75053.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fmir%2Fissue-75053.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.min_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,12 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-75053.rs:52:15\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-75053.rs:49:1\n    |\n-LL |     let _pos: Phantom1<DummyT<()>> = Scope::new().my_index();\n-   |               ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "b71f84dd9c24ef730bd79afb21a5324ab194e4e7", "filename": "src/test/ui/mir/issue-75053.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-75053.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,11 +1,9 @@\n // compile-flags: -Z mir-opt-level=3\n \n-// revisions: min_tait full_tait in_bindings\n+// revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait, rustc_attrs)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-#![cfg_attr(in_bindings, feature(impl_trait_in_bindings))]\n-//[in_bindings]~^ WARN incomplete\n \n use std::marker::PhantomData;\n \n@@ -49,7 +47,6 @@ impl<T: MyFrom<Phantom2<DummyT<U>>>, U> MyIndex<Phantom1<T>> for Scope<U> {\n \n #[rustc_error]\n fn main() {\n+    //~^ ERROR\n     let _pos: Phantom1<DummyT<()>> = Scope::new().my_index();\n-    //[min_tait,full_tait]~^ ERROR not permitted here\n-    //[in_bindings]~^^ ERROR type annotations needed\n }"}, {"sha": "a8dd6a93d3dbfd5a34887e76d4bf96c1c0fd8715", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.full_tait.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.full_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,18 +1,10 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-53096.rs:4:32\n    |\n-LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53096.rs:4:56\n-   |\n-LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n-   |                                                        ^^^^^^^^^^^^^^^^^^^^^\n-   |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n error: fatal error triggered by #[rustc_error]\n@@ -21,5 +13,5 @@ error: fatal error triggered by #[rustc_error]\n LL | fn main() {}\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "4210d0c1cb17a460b703bea2e368bb75849e999b", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.min_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,12 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-53096.rs:10:19\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-53096.rs:14:1\n    |\n-LL | const BAZR: Foo = bar();\n-   |                   ^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+LL | fn main() {}\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "7bb0066b7ef4209ad9202b29490d8c0e66c63391", "filename": "src/test/ui/type-alias-impl-trait/issue-53096.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53096.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,14 +1,14 @@\n #![feature(const_impl_trait, const_fn_fn_ptr_basics, rustc_attrs)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n \n type Foo = impl Fn() -> usize;\n-const fn bar() -> Foo { || 0usize }\n+const fn bar() -> Foo {\n+    || 0usize\n+}\n const BAZR: Foo = bar();\n-//[min_tait]~^ ERROR not permitted here\n \n #[rustc_error]\n-fn main() {} //[full_tait]~ ERROR\n+fn main() {} //~ ERROR"}, {"sha": "b23fed5dadfe77e1eabe97dcdd05deed81d22ba6", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.full_tait.stderr", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.full_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,25 +1,17 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-53678-generator-and-const-fn.rs:4:32\n    |\n-LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n+   |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n-warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:4:56\n-   |\n-LL | #![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n-   |                                                        ^^^^^^^^^^^^^^^^^^^^^\n-   |\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:23:1\n+  --> $DIR/issue-53678-generator-and-const-fn.rs:22:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "fabba2183531f9c81d5fd1ecfd3d04782b886e98", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.min_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,12 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-53678-generator-and-const-fn.rs:20:36\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-53678-generator-and-const-fn.rs:22:1\n    |\n-LL | const FOO: GenOnce<usize, usize> = const_generator(10, 100);\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+LL | fn main() {}\n+   | ^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "a8215c41826f8f0d4c89a35c503e1b3b0b7ef1b5", "filename": "src/test/ui/type-alias-impl-trait/issue-53678-generator-and-const-fn.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53678-generator-and-const-fn.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,9 +1,8 @@\n #![feature(const_impl_trait, generators, generator_trait, rustc_attrs)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(impl_trait_in_bindings, type_alias_impl_trait))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n \n use std::ops::Generator;\n \n@@ -17,7 +16,7 @@ const fn const_generator<Y, R>(yielding: Y, returning: R) -> GenOnce<Y, R> {\n     }\n }\n \n-const FOO: GenOnce<usize, usize> = const_generator(10, 100); //[min_tait]~ ERROR not permitted here\n+const FOO: GenOnce<usize, usize> = const_generator(10, 100);\n \n #[rustc_error]\n-fn main() {} //[full_tait]~ ERROR\n+fn main() {} //~ ERROR"}, {"sha": "4906ea9c2e261a6c0d58560992398052c880c7b0", "filename": "src/test/ui/type-alias-impl-trait/issue-60371.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60371.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -8,13 +8,13 @@ LL |     type Item = impl Bug;\n    = help: add `#![feature(min_type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-60371.rs:14:37\n+  --> $DIR/issue-60371.rs:14:40\n    |\n LL |     const FUN: fn() -> Self::Item = || ();\n-   |                                     ^^^^^\n+   |                                        ^\n    |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+   = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `(): Bug` is not satisfied\n   --> $DIR/issue-60371.rs:10:17"}, {"sha": "9d3f366ad810a34b431a2c0d56c22e64ed461d1f", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.full_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,25 +1,17 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-60407.rs:3:32\n    |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-60407.rs:3:55\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-60407.rs:12:1\n+  --> $DIR/issue-60407.rs:11:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "1a3ceafa3e29405bf287ff3c19184db6ad45e115", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.min_tait.stderr", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.min_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,24 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/issue-60407.rs:9:39\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/issue-60407.rs:11:1\n    |\n-LL | static mut TEST: Option<Debuggable> = None;\n-   |                                       ^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n-\n-error: concrete type differs from previous defining opaque type use\n-  --> $DIR/issue-60407.rs:16:1\n-   |\n-LL | fn foo() -> Debuggable {\n-   | ^^^^^^^^^^^^^^^^^^^^^^ expected `[type error]`, got `u32`\n-   |\n-note: previous use here\n-  --> $DIR/issue-60407.rs:9:1\n-   |\n-LL | static mut TEST: Option<Debuggable> = None;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn main() {\n+   | ^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "3c6b873b4ca5a23d255f67f2c0124023678b3ae0", "filename": "src/test/ui/type-alias-impl-trait/issue-60407.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60407.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,18 +1,18 @@\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait, rustc_attrs)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n \n type Debuggable = impl core::fmt::Debug;\n \n-static mut TEST: Option<Debuggable> = None; //[min_tait]~ ERROR not permitted here\n+static mut TEST: Option<Debuggable> = None;\n \n #[rustc_error]\n-fn main() { //[full_tait]~ ERROR\n+fn main() {\n+    //~^ ERROR\n     unsafe { TEST = Some(foo()) }\n }\n \n-fn foo() -> Debuggable { //[min_tait]~ ERROR concrete type differs\n+fn foo() -> Debuggable {\n     0u32\n }"}, {"sha": "ee26789d204f1309e6417d43167eddd432b66d98", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.full_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,25 +1,17 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:5:32\n    |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:5:55\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error: fatal error triggered by #[rustc_error]\n-  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:19:1\n+  --> $DIR/issue-65679-inst-opaque-ty-from-val-twice.rs:18:1\n    |\n LL | fn main() {\n    | ^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "d37be640e0b04a6844a3ed1a824f7689e518a3d3", "filename": "src/test/ui/type-alias-impl-trait/issue-65679-inst-opaque-ty-from-val-twice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65679-inst-opaque-ty-from-val-twice.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -2,9 +2,8 @@\n \n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait, rustc_attrs)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n \n type T = impl Sized;\n // The concrete type referred by impl-trait-type-alias(`T`) is guaranteed\n@@ -16,7 +15,8 @@ type T = impl Sized;\n fn take(_: fn() -> T) {}\n \n #[rustc_error]\n-fn main() { //[full_tait]~ ERROR fatal error triggered by #[rustc_error]\n+fn main() {\n+    //[full_tait]~^ ERROR fatal error triggered by #[rustc_error]\n     take(|| {});\n     //[min_tait]~^ ERROR not permitted here\n     take(|| {});"}, {"sha": "faddecb21766446bb7bd398efc2aec7a9ae8a4e7", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.full_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,25 +1,17 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/no_inferrable_concrete_type.rs:6:32\n    |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/no_inferrable_concrete_type.rs:6:55\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error: could not find defining uses\n-  --> $DIR/no_inferrable_concrete_type.rs:10:12\n+  --> $DIR/no_inferrable_concrete_type.rs:9:12\n    |\n LL | type Foo = impl Copy;\n    |            ^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "3194bd7610712d77379be1be3f246e591f743677", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.min_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,18 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/no_inferrable_concrete_type.rs:16:12\n-   |\n-LL |     let _: Foo = std::mem::transmute(0u8);\n-   |            ^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n-\n error: could not find defining uses\n-  --> $DIR/no_inferrable_concrete_type.rs:10:12\n+  --> $DIR/no_inferrable_concrete_type.rs:9:12\n    |\n LL | type Foo = impl Copy;\n    |            ^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "409eec7250fd0464bf0475966bb41db7718cff76", "filename": "src/test/ui/type-alias-impl-trait/no_inferrable_concrete_type.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_inferrable_concrete_type.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -3,15 +3,16 @@\n \n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n \n type Foo = impl Copy; //~ could not find defining uses\n \n // make compiler happy about using 'Foo'\n-fn bar(x: Foo) -> Foo { x }\n+fn bar(x: Foo) -> Foo {\n+    x\n+}\n \n fn main() {\n-    let _: Foo = std::mem::transmute(0u8); //[min_tait]~ ERROR not permitted here\n+    let _: Foo = std::mem::transmute(0u8);\n }"}, {"sha": "d5a4fa52dfb7b81fd6ab5498ab20201c884e64bd", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.full_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,25 +1,17 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/structural-match-no-leak.rs:4:32\n    |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/structural-match-no-leak.rs:4:55\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match-no-leak.rs:19:9\n+  --> $DIR/structural-match-no-leak.rs:18:9\n    |\n LL |         LEAK_FREE => (),\n    |         ^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "b7caf8ed2986896cab867d5b85b1332a90dc2317", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.min_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,12 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/structural-match-no-leak.rs:15:24\n+error: `impl Send` cannot be used in patterns\n+  --> $DIR/structural-match-no-leak.rs:18:9\n    |\n-LL | const LEAK_FREE: Bar = leak_free();\n-   |                        ^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+LL |         LEAK_FREE => (),\n+   |         ^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "e2b10e7355fbb820a339b0805ff9c88d87e929e3", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,9 +1,8 @@\n #![feature(const_impl_trait)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n \n type Bar = impl Send;\n \n@@ -12,12 +11,12 @@ type Bar = impl Send;\n const fn leak_free() -> Bar {\n     7i32\n }\n-const LEAK_FREE: Bar = leak_free(); //[min_tait]~ ERROR not permitted here\n+const LEAK_FREE: Bar = leak_free();\n \n fn leak_free_test() {\n     match todo!() {\n         LEAK_FREE => (),\n-        //[full_tait]~^ `impl Send` cannot be used in patterns\n+        //~^ `impl Send` cannot be used in patterns\n         _ => (),\n     }\n }"}, {"sha": "d394c99df80293c1f9df69d145479ddb0445892d", "filename": "src/test/ui/type-alias-impl-trait/structural-match.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.full_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,25 +1,17 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/structural-match.rs:4:32\n    |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/structural-match.rs:4:55\n-   |\n-LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-\n error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match.rs:20:9\n+  --> $DIR/structural-match.rs:19:9\n    |\n LL |         VALUE => (),\n    |         ^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "f63b1fb23df7e67003203de2aa1a56ff22d5f8c0", "filename": "src/test/ui/type-alias-impl-trait/structural-match.min_tait.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.min_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,12 +1,8 @@\n-error[E0658]: type alias impl trait is not permitted here\n-  --> $DIR/structural-match.rs:16:20\n+error: `impl Send` cannot be used in patterns\n+  --> $DIR/structural-match.rs:19:9\n    |\n-LL | const VALUE: Foo = value();\n-   |                    ^^^^^^^\n-   |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n-   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n+LL |         VALUE => (),\n+   |         ^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "aed9334b3cc86825b00004ca5d1bf0fcaa1ed8ae", "filename": "src/test/ui/type-alias-impl-trait/structural-match.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,9 +1,8 @@\n #![feature(const_impl_trait)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n-#![cfg_attr(full_tait, feature(type_alias_impl_trait, impl_trait_in_bindings))]\n+#![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-//[full_tait]~| WARN incomplete\n \n type Foo = impl Send;\n \n@@ -13,12 +12,12 @@ struct A;\n const fn value() -> Foo {\n     A\n }\n-const VALUE: Foo = value(); //[min_tait]~ ERROR not permitted here\n+const VALUE: Foo = value();\n \n fn test() {\n     match todo!() {\n         VALUE => (),\n-        //[full_tait]~^ `impl Send` cannot be used in patterns\n+        //~^ `impl Send` cannot be used in patterns\n         _ => (),\n     }\n }"}, {"sha": "6f817757cc4b3c3d798167cc2d4b5bb6d7de647a", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-const.full_tait.stderr", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.full_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,19 +1,30 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-impl-trait-const.rs:5:32\n+  --> $DIR/type-alias-impl-trait-const.rs:3:32\n    |\n LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-impl-trait-const.rs:11:12\n+error[E0308]: mismatched types\n+  --> $DIR/type-alias-impl-trait-const.rs:13:19\n    |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n+LL | pub type Foo = impl Debug;\n+   |                ---------- the expected opaque type\n+...\n+LL | const _FOO: Foo = 5;\n+   |                   ^ expected opaque type, found integer\n    |\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = note: expected opaque type `impl Debug`\n+                     found type `{integer}`\n \n-warning: 2 warnings emitted\n+error: could not find defining uses\n+  --> $DIR/type-alias-impl-trait-const.rs:10:16\n+   |\n+LL | pub type Foo = impl Debug;\n+   |                ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ce98318333b01687b81b9a35ec187501aa95d572", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-const.min_tait.stderr", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.min_tait.stderr?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,11 +1,21 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/type-alias-impl-trait-const.rs:11:12\n+error[E0308]: mismatched types\n+  --> $DIR/type-alias-impl-trait-const.rs:13:19\n    |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n+LL | pub type Foo = impl Debug;\n+   |                ---------- the expected opaque type\n+...\n+LL | const _FOO: Foo = 5;\n+   |                   ^ expected opaque type, found integer\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n-   = note: see issue #63065 <https://github.com/rust-lang/rust/issues/63065> for more information\n+   = note: expected opaque type `impl Debug`\n+                     found type `{integer}`\n \n-warning: 1 warning emitted\n+error: could not find defining uses\n+  --> $DIR/type-alias-impl-trait-const.rs:10:16\n+   |\n+LL | pub type Foo = impl Debug;\n+   |                ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "751512c5dfc03b58561a6b33b3c9ffee5b7e827e", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-const.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c04b4386d015e126591c799b562d6a578acc40/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-const.rs?ref=e8c04b4386d015e126591c799b562d6a578acc40", "patch": "@@ -1,23 +1,16 @@\n-// check-pass\n-\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n //[full_tait]~^ WARN incomplete\n-// Currently, the `type_alias_impl_trait` feature implicitly\n-// depends on `impl_trait_in_bindings` in order to work properly.\n-// Specifically, this line requires `impl_trait_in_bindings` to be enabled:\n-// https://github.com/rust-lang/rust/blob/481068a707679257e2a738b40987246e0420e787/compiler/rustc_typeck/check/mod.rs#L856\n-#![feature(impl_trait_in_bindings)]\n-//~^ WARN the feature `impl_trait_in_bindings` is incomplete\n \n // Ensures that `const` items can constrain an opaque `impl Trait`.\n \n use std::fmt::Debug;\n \n pub type Foo = impl Debug;\n+//~^ ERROR could not find defining uses\n \n const _FOO: Foo = 5;\n+//~^ ERROR mismatched types [E0308]\n \n-fn main() {\n-}\n+fn main() {}"}]}