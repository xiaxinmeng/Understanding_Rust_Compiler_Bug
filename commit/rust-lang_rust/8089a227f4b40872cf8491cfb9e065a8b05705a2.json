{"sha": "8089a227f4b40872cf8491cfb9e065a8b05705a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwODlhMjI3ZjRiNDA4NzJjZjg0OTFjZmI5ZTA2NWE4YjA1NzA1YTI=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-05-03T15:40:04Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-05-03T15:40:04Z"}, "message": "Tests added", "tree": {"sha": "69e401e8d5816302ba79658b5a6928e317527970", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69e401e8d5816302ba79658b5a6928e317527970"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8089a227f4b40872cf8491cfb9e065a8b05705a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8089a227f4b40872cf8491cfb9e065a8b05705a2", "html_url": "https://github.com/rust-lang/rust/commit/8089a227f4b40872cf8491cfb9e065a8b05705a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8089a227f4b40872cf8491cfb9e065a8b05705a2/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1d600a1ecbf2032ef09d56559111da4382135df", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d600a1ecbf2032ef09d56559111da4382135df", "html_url": "https://github.com/rust-lang/rust/commit/b1d600a1ecbf2032ef09d56559111da4382135df"}], "stats": {"total": 244, "additions": 242, "deletions": 2}, "files": [{"sha": "97ad66d35897e7c42233111d178c59953ea8bd64", "filename": "crates/ide/src/ssr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8089a227f4b40872cf8491cfb9e065a8b05705a2/crates%2Fide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8089a227f4b40872cf8491cfb9e065a8b05705a2/crates%2Fide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fssr.rs?ref=8089a227f4b40872cf8491cfb9e065a8b05705a2", "patch": "@@ -89,7 +89,6 @@ mod tests {\n         assert_eq!(0, assists.len());\n     }\n \n-    // TODO kb add partial resolve test\n     #[test]\n     fn resolve_edits_true() {\n         let assists = get_assists("}, {"sha": "9c2847998471bc33a059f8a7d77b40475dfbb724", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 242, "deletions": 1, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/8089a227f4b40872cf8491cfb9e065a8b05705a2/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8089a227f4b40872cf8491cfb9e065a8b05705a2/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=8089a227f4b40872cf8491cfb9e065a8b05705a2", "patch": "@@ -14,7 +14,7 @@ use test_utils::{assert_eq_text, extract_offset};\n \n use crate::{\n     handlers::Handler, Assist, AssistConfig, AssistContext, AssistKind, AssistResolveStrategy,\n-    Assists,\n+    Assists, SingleResolve,\n };\n \n pub(crate) const TEST_CONFIG: AssistConfig = AssistConfig {\n@@ -277,3 +277,244 @@ pub fn test_some_range(a: int) -> bool {\n         expect![[r#\"\"#]].assert_eq(&expected);\n     }\n }\n+\n+#[test]\n+fn various_resolve_strategies() {\n+    let (db, frange) = RootDatabase::with_range(\n+        r#\"\n+pub fn test_some_range(a: int) -> bool {\n+    if let 2..6 = $05$0 {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\"#,\n+    );\n+\n+    let mut cfg = TEST_CONFIG;\n+    cfg.allowed = Some(vec![AssistKind::RefactorExtract]);\n+\n+    {\n+        let assists = Assist::get(&db, &cfg, AssistResolveStrategy::None, frange);\n+        assert_eq!(2, assists.len());\n+        let mut assists = assists.into_iter();\n+\n+        let extract_into_variable_assist = assists.next().unwrap();\n+        expect![[r#\"\n+            Assist {\n+                id: AssistId(\n+                    \"extract_variable\",\n+                    RefactorExtract,\n+                ),\n+                label: \"Extract into variable\",\n+                group: None,\n+                target: 59..60,\n+                source_change: None,\n+            }\n+        \"#]]\n+        .assert_debug_eq(&extract_into_variable_assist);\n+\n+        let extract_into_function_assist = assists.next().unwrap();\n+        expect![[r#\"\n+            Assist {\n+                id: AssistId(\n+                    \"extract_function\",\n+                    RefactorExtract,\n+                ),\n+                label: \"Extract into function\",\n+                group: None,\n+                target: 59..60,\n+                source_change: None,\n+            }\n+        \"#]]\n+        .assert_debug_eq(&extract_into_function_assist);\n+    }\n+\n+    {\n+        let assists = Assist::get(\n+            &db,\n+            &cfg,\n+            AssistResolveStrategy::Single(SingleResolve {\n+                assist_id: \"SOMETHING_MISMATCHING\".to_string(),\n+                assist_kind: AssistKind::RefactorExtract,\n+            }),\n+            frange,\n+        );\n+        assert_eq!(2, assists.len());\n+        let mut assists = assists.into_iter();\n+\n+        let extract_into_variable_assist = assists.next().unwrap();\n+        expect![[r#\"\n+            Assist {\n+                id: AssistId(\n+                    \"extract_variable\",\n+                    RefactorExtract,\n+                ),\n+                label: \"Extract into variable\",\n+                group: None,\n+                target: 59..60,\n+                source_change: None,\n+            }\n+        \"#]]\n+        .assert_debug_eq(&extract_into_variable_assist);\n+\n+        let extract_into_function_assist = assists.next().unwrap();\n+        expect![[r#\"\n+            Assist {\n+                id: AssistId(\n+                    \"extract_function\",\n+                    RefactorExtract,\n+                ),\n+                label: \"Extract into function\",\n+                group: None,\n+                target: 59..60,\n+                source_change: None,\n+            }\n+        \"#]]\n+        .assert_debug_eq(&extract_into_function_assist);\n+    }\n+\n+    {\n+        let assists = Assist::get(\n+            &db,\n+            &cfg,\n+            AssistResolveStrategy::Single(SingleResolve {\n+                assist_id: \"extract_variable\".to_string(),\n+                assist_kind: AssistKind::RefactorExtract,\n+            }),\n+            frange,\n+        );\n+        assert_eq!(2, assists.len());\n+        let mut assists = assists.into_iter();\n+\n+        let extract_into_variable_assist = assists.next().unwrap();\n+        expect![[r#\"\n+            Assist {\n+                id: AssistId(\n+                    \"extract_variable\",\n+                    RefactorExtract,\n+                ),\n+                label: \"Extract into variable\",\n+                group: None,\n+                target: 59..60,\n+                source_change: Some(\n+                    SourceChange {\n+                        source_file_edits: {\n+                            FileId(\n+                                0,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"let $0var_name = 5;\\n    \",\n+                                        delete: 45..45,\n+                                    },\n+                                    Indel {\n+                                        insert: \"var_name\",\n+                                        delete: 59..60,\n+                                    },\n+                                ],\n+                            },\n+                        },\n+                        file_system_edits: [],\n+                        is_snippet: true,\n+                    },\n+                ),\n+            }\n+        \"#]]\n+        .assert_debug_eq(&extract_into_variable_assist);\n+\n+        let extract_into_function_assist = assists.next().unwrap();\n+        expect![[r#\"\n+            Assist {\n+                id: AssistId(\n+                    \"extract_function\",\n+                    RefactorExtract,\n+                ),\n+                label: \"Extract into function\",\n+                group: None,\n+                target: 59..60,\n+                source_change: None,\n+            }\n+        \"#]]\n+        .assert_debug_eq(&extract_into_function_assist);\n+    }\n+\n+    {\n+        let assists = Assist::get(&db, &cfg, AssistResolveStrategy::All, frange);\n+        assert_eq!(2, assists.len());\n+        let mut assists = assists.into_iter();\n+\n+        let extract_into_variable_assist = assists.next().unwrap();\n+        expect![[r#\"\n+            Assist {\n+                id: AssistId(\n+                    \"extract_variable\",\n+                    RefactorExtract,\n+                ),\n+                label: \"Extract into variable\",\n+                group: None,\n+                target: 59..60,\n+                source_change: Some(\n+                    SourceChange {\n+                        source_file_edits: {\n+                            FileId(\n+                                0,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"let $0var_name = 5;\\n    \",\n+                                        delete: 45..45,\n+                                    },\n+                                    Indel {\n+                                        insert: \"var_name\",\n+                                        delete: 59..60,\n+                                    },\n+                                ],\n+                            },\n+                        },\n+                        file_system_edits: [],\n+                        is_snippet: true,\n+                    },\n+                ),\n+            }\n+        \"#]]\n+        .assert_debug_eq(&extract_into_variable_assist);\n+\n+        let extract_into_function_assist = assists.next().unwrap();\n+        expect![[r#\"\n+            Assist {\n+                id: AssistId(\n+                    \"extract_function\",\n+                    RefactorExtract,\n+                ),\n+                label: \"Extract into function\",\n+                group: None,\n+                target: 59..60,\n+                source_change: Some(\n+                    SourceChange {\n+                        source_file_edits: {\n+                            FileId(\n+                                0,\n+                            ): TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \"fun_name()\",\n+                                        delete: 59..60,\n+                                    },\n+                                    Indel {\n+                                        insert: \"\\n\\nfn $0fun_name() -> i32 {\\n    5\\n}\",\n+                                        delete: 110..110,\n+                                    },\n+                                ],\n+                            },\n+                        },\n+                        file_system_edits: [],\n+                        is_snippet: true,\n+                    },\n+                ),\n+            }\n+        \"#]]\n+        .assert_debug_eq(&extract_into_function_assist);\n+    }\n+}"}]}