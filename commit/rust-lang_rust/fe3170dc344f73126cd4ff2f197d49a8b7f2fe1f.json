{"sha": "fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMzE3MGRjMzQ0ZjczMTI2Y2Q0ZmYyZjE5N2Q0OWE4YjdmMmZlMWY=", "commit": {"author": {"name": "Aleksei Sidorov", "email": "gorthauer87@yandex.ru", "date": "2020-09-02T22:32:18Z"}, "committer": {"name": "Aleksei Sidorov", "email": "gorthauer87@yandex.ru", "date": "2020-09-03T11:47:07Z"}, "message": "Initial implementation of the #5085 issue", "tree": {"sha": "579359e7cc3ee6c132da02f43bc9d83d46a5dbef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/579359e7cc3ee6c132da02f43bc9d83d46a5dbef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f", "html_url": "https://github.com/rust-lang/rust/commit/fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f/comments", "author": {"login": "alekseysidorov", "id": 83360, "node_id": "MDQ6VXNlcjgzMzYw", "avatar_url": "https://avatars.githubusercontent.com/u/83360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alekseysidorov", "html_url": "https://github.com/alekseysidorov", "followers_url": "https://api.github.com/users/alekseysidorov/followers", "following_url": "https://api.github.com/users/alekseysidorov/following{/other_user}", "gists_url": "https://api.github.com/users/alekseysidorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/alekseysidorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alekseysidorov/subscriptions", "organizations_url": "https://api.github.com/users/alekseysidorov/orgs", "repos_url": "https://api.github.com/users/alekseysidorov/repos", "events_url": "https://api.github.com/users/alekseysidorov/events{/privacy}", "received_events_url": "https://api.github.com/users/alekseysidorov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alekseysidorov", "id": 83360, "node_id": "MDQ6VXNlcjgzMzYw", "avatar_url": "https://avatars.githubusercontent.com/u/83360?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alekseysidorov", "html_url": "https://github.com/alekseysidorov", "followers_url": "https://api.github.com/users/alekseysidorov/followers", "following_url": "https://api.github.com/users/alekseysidorov/following{/other_user}", "gists_url": "https://api.github.com/users/alekseysidorov/gists{/gist_id}", "starred_url": "https://api.github.com/users/alekseysidorov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alekseysidorov/subscriptions", "organizations_url": "https://api.github.com/users/alekseysidorov/orgs", "repos_url": "https://api.github.com/users/alekseysidorov/repos", "events_url": "https://api.github.com/users/alekseysidorov/events{/privacy}", "received_events_url": "https://api.github.com/users/alekseysidorov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74e7422b69d35c55ff6fde77258047f0292d36e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/74e7422b69d35c55ff6fde77258047f0292d36e0", "html_url": "https://github.com/rust-lang/rust/commit/74e7422b69d35c55ff6fde77258047f0292d36e0"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "8af2d16dd8b5f47ebf819ac2834446a4d865ab24", "filename": "crates/assists/src/handlers/replace_impl_trait_with_generic.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_impl_trait_with_generic.rs?ref=fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f", "patch": "@@ -0,0 +1,62 @@\n+use syntax::ast::{self, edit::AstNodeEdit, make, AstNode, GenericParamsOwner};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: replace_impl_trait_with_generic\n+//\n+// Replaces `impl Trait` function argument with the named generic.\n+pub(crate) fn replace_impl_trait_with_generic(\n+    acc: &mut Assists,\n+    ctx: &AssistContext,\n+) -> Option<()> {\n+    let type_impl_trait = ctx.find_node_at_offset::<ast::ImplTraitType>()?;\n+    let type_param = type_impl_trait.syntax().parent().and_then(ast::Param::cast)?;\n+    let type_fn = type_param.syntax().ancestors().nth(2).and_then(ast::Fn::cast)?;\n+\n+    let generic_param_list =\n+        type_fn.generic_param_list().unwrap_or_else(|| make::generic_param_list(None));\n+\n+    let impl_trait_ty = type_impl_trait\n+        .syntax()\n+        .descendants()\n+        .last()\n+        .and_then(ast::NameRef::cast)?\n+        .text()\n+        .to_string();\n+\n+    let target = type_fn.syntax().text_range();\n+    acc.add(\n+        AssistId(\"replace_impl_trait_with_generic\", AssistKind::RefactorRewrite),\n+        \"Replace impl trait with generic\",\n+        target,\n+        |edit| {\n+            let generic_letter = impl_trait_ty[..1].to_string();\n+            edit.replace_ast::<ast::Type>(type_impl_trait.into(), make::ty(&generic_letter));\n+\n+            let new_params = generic_param_list\n+                .append_param(make::generic_param(generic_letter, Some(impl_trait_ty)));\n+            let new_type_fn = type_fn.replace_descendant(generic_param_list, new_params);\n+            edit.replace_ast(type_fn.clone(), new_type_fn);\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::tests::check_assist;\n+\n+    #[test]\n+    fn replace_with_generic_params() {\n+        check_assist(\n+            replace_impl_trait_with_generic,\n+            r#\"\n+            fn foo<G>(bar: <|>impl Bar) {}\n+            \"#,\n+            r#\"\n+            fn foo<G, B: Bar>(bar: B) {}\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "cbac53e71112e28582dae079ce7c58ef046ee750", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f", "patch": "@@ -155,6 +155,7 @@ mod handlers {\n     mod remove_unused_param;\n     mod reorder_fields;\n     mod replace_if_let_with_match;\n+    mod replace_impl_trait_with_generic;\n     mod replace_let_with_if_let;\n     mod replace_qualified_name_with_use;\n     mod replace_unwrap_with_match;\n@@ -202,6 +203,7 @@ mod handlers {\n             remove_unused_param::remove_unused_param,\n             reorder_fields::reorder_fields,\n             replace_if_let_with_match::replace_if_let_with_match,\n+            replace_impl_trait_with_generic::replace_impl_trait_with_generic,\n             replace_let_with_if_let::replace_let_with_if_let,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n             replace_unwrap_with_match::replace_unwrap_with_match,"}, {"sha": "1ccb4de6af8e23f6c4be4aecb57614961d85897e", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f", "patch": "@@ -459,6 +459,72 @@ impl ast::MatchArmList {\n     }\n }\n \n+impl ast::GenericParamList {\n+    #[must_use]\n+    pub fn append_params(&self, params: impl IntoIterator<Item = ast::GenericParam>) -> Self {\n+        let mut res = self.clone();\n+        params.into_iter().for_each(|it| res = res.append_param(it));\n+        res\n+    }\n+\n+    #[must_use]\n+    pub fn append_param(&self, item: ast::GenericParam) -> Self {\n+        let is_multiline = self.syntax().text().contains_char('\\n');\n+        let ws;\n+        let space = if is_multiline {\n+            ws = tokens::WsBuilder::new(&format!(\n+                \"\\n{}    \",\n+                leading_indent(self.syntax()).unwrap_or_default()\n+            ));\n+            ws.ws()\n+        } else {\n+            tokens::single_space()\n+        };\n+\n+        let mut to_insert: ArrayVec<[SyntaxElement; 4]> = ArrayVec::new();\n+        to_insert.push(space.into());\n+        to_insert.push(item.syntax().clone().into());\n+        to_insert.push(make::token(T![,]).into());\n+\n+        macro_rules! after_l_angle {\n+            () => {{\n+                let anchor = match self.l_angle_token() {\n+                    Some(it) => it.into(),\n+                    None => return self.clone(),\n+                };\n+                InsertPosition::After(anchor)\n+            }};\n+        }\n+\n+        macro_rules! after_field {\n+            ($anchor:expr) => {\n+                if let Some(comma) = $anchor\n+                    .syntax()\n+                    .siblings_with_tokens(Direction::Next)\n+                    .find(|it| it.kind() == T![,])\n+                {\n+                    InsertPosition::After(comma)\n+                } else {\n+                    to_insert.insert(0, make::token(T![,]).into());\n+                    InsertPosition::After($anchor.syntax().clone().into())\n+                }\n+            };\n+        };\n+\n+        if !is_multiline {\n+            // don't insert comma before angle\n+            to_insert.pop();\n+        }\n+\n+        let position = match self.generic_params().last() {\n+            Some(it) => after_field!(it),\n+            None => after_l_angle!(),\n+        };\n+\n+        self.insert_children(position, to_insert)\n+    }\n+}\n+\n #[must_use]\n pub fn remove_attrs_and_docs<N: ast::AttrsOwner>(node: &N) -> N {\n     N::cast(remove_attrs_and_docs_inner(node.syntax().clone())).unwrap()"}, {"sha": "7329e3039c5c46afce6ebff57ab320e6b62da575", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=fe3170dc344f73126cd4ff2f197d49a8b7f2fe1f", "patch": "@@ -294,6 +294,21 @@ pub fn param_list(pats: impl IntoIterator<Item = ast::Param>) -> ast::ParamList\n     ast_from_text(&format!(\"fn f({}) {{ }}\", args))\n }\n \n+pub fn generic_param(name: String, ty: Option<String>) -> ast::GenericParam {\n+    let bound = match ty {\n+        Some(it) => format!(\": {}\", it),\n+        None => String::new(),\n+    };\n+    ast_from_text(&format!(\"fn f<{}{}>() {{ }}\", name, bound))\n+}\n+\n+pub fn generic_param_list(\n+    pats: impl IntoIterator<Item = ast::GenericParam>,\n+) -> ast::GenericParamList {\n+    let args = pats.into_iter().join(\", \");\n+    ast_from_text(&format!(\"fn f<{}>() {{ }}\", args))\n+}\n+\n pub fn visibility_pub_crate() -> ast::Visibility {\n     ast_from_text(\"pub(crate) struct S\")\n }"}]}