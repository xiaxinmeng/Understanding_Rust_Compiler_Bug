{"sha": "762bdbfce72e2c3b3f81f457f77cd12736ba8a7f", "node_id": "C_kwDOAAsO6NoAKDc2MmJkYmZjZTcyZTJjM2IzZjgxZjQ1N2Y3N2NkMTI3MzZiYThhN2Y", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2021-12-25T03:57:31Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-01-22T04:12:02Z"}, "message": "Change signature of point_at_arg_instead_of_call_if_possible", "tree": {"sha": "5705cbe99544a513c80aaf1dfb3d5c8c05b1e99c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5705cbe99544a513c80aaf1dfb3d5c8c05b1e99c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/762bdbfce72e2c3b3f81f457f77cd12736ba8a7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/762bdbfce72e2c3b3f81f457f77cd12736ba8a7f", "html_url": "https://github.com/rust-lang/rust/commit/762bdbfce72e2c3b3f81f457f77cd12736ba8a7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/762bdbfce72e2c3b3f81f457f77cd12736ba8a7f/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecf72996eda4f8af19b0ca7235c6f62e0245a313", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf72996eda4f8af19b0ca7235c6f62e0245a313", "html_url": "https://github.com/rust-lang/rust/commit/ecf72996eda4f8af19b0ca7235c6f62e0245a313"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "820a4054cb494caa1e04b7a832bc08c5e07c5fa5", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/762bdbfce72e2c3b3f81f457f77cd12736ba8a7f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/762bdbfce72e2c3b3f81f457f77cd12736ba8a7f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=762bdbfce72e2c3b3f81f457f77cd12736ba8a7f", "patch": "@@ -315,13 +315,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         assert_eq!(expected_input_tys.len(), formal_input_tys.len());\n \n+        let provided_arg_count: usize = provided_args.len();\n+\n         // Keep track of the fully coerced argument types\n-        let mut final_arg_types: Vec<(usize, Ty<'_>, Ty<'_>)> = vec![];\n+        let mut final_arg_types: Vec<Option<(Ty<'_>, Ty<'_>)>> = vec![None; provided_arg_count];\n \n         // We introduce a helper function to demand that a given argument satisfy a given input\n         // This is more complicated than just checking type equality, as arguments could be coerced\n         // This version writes those types back so further type checking uses the narrowed types\n-        let demand_compatible = |idx, final_arg_types: &mut Vec<(usize, Ty<'tcx>, Ty<'tcx>)>| {\n+        let demand_compatible = |idx, final_arg_types: &mut Vec<Option<(Ty<'tcx>, Ty<'tcx>)>>| {\n             let formal_input_ty: Ty<'tcx> = formal_input_tys[idx];\n             let expected_input_ty: Ty<'tcx> = expected_input_tys[idx];\n             let provided_arg = &provided_args[idx];\n@@ -340,7 +342,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let coerced_ty = expectation.only_has_type(self).unwrap_or(formal_input_ty);\n \n             // Keep track of these for below\n-            final_arg_types.push((idx, checked_ty, coerced_ty));\n+            final_arg_types[idx] = Some((checked_ty, coerced_ty));\n \n             // Cause selection errors caused by resolving a single argument to point at the\n             // argument and not the call. This is otherwise redundant with the `demand_coerce`\n@@ -975,7 +977,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn point_at_arg_instead_of_call_if_possible(\n         &self,\n         errors: &mut Vec<traits::FulfillmentError<'tcx>>,\n-        final_arg_types: &[(usize, Ty<'tcx>, Ty<'tcx>)],\n+        final_arg_types: &[Option<(Ty<'tcx>, Ty<'tcx>)>],\n         expr: &'tcx hir::Expr<'tcx>,\n         call_sp: Span,\n         args: &'tcx [hir::Expr<'tcx>],\n@@ -1030,8 +1032,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // `FulfillmentError`.\n             let mut referenced_in = final_arg_types\n                 .iter()\n-                .map(|&(i, checked_ty, _)| (i, checked_ty))\n-                .chain(final_arg_types.iter().map(|&(i, _, coerced_ty)| (i, coerced_ty)))\n+                .enumerate()\n+                .filter_map(|(i, arg)| match arg {\n+                    Some((checked_ty, coerce_ty)) => Some([(i, *checked_ty), (i, *coerce_ty)]),\n+                    _ => None,\n+                })\n+                .flatten()\n                 .flat_map(|(i, ty)| {\n                     let ty = self.resolve_vars_if_possible(ty);\n                     // We walk the argument type because the argument's type could have"}]}