{"sha": "6b784bacbfb3135bd34cd994023ac1e841ad9ceb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNzg0YmFjYmZiMzEzNWJkMzRjZDk5NDAyM2FjMWU4NDFhZDljZWI=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-12T02:43:16Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-12T20:32:40Z"}, "message": "creader: Clean up macro/plugin API\n\nStep towards #22198.", "tree": {"sha": "be7623d7180f40789f22262b48ba1787fa5bdfb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be7623d7180f40789f22262b48ba1787fa5bdfb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b784bacbfb3135bd34cd994023ac1e841ad9ceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b784bacbfb3135bd34cd994023ac1e841ad9ceb", "html_url": "https://github.com/rust-lang/rust/commit/6b784bacbfb3135bd34cd994023ac1e841ad9ceb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b784bacbfb3135bd34cd994023ac1e841ad9ceb/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cca1cf613b8e535ab274d6ce5aecadf4708990bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cca1cf613b8e535ab274d6ce5aecadf4708990bf", "html_url": "https://github.com/rust-lang/rust/commit/cca1cf613b8e535ab274d6ce5aecadf4708990bf"}], "stats": {"total": 118, "additions": 43, "deletions": 75}, "files": [{"sha": "0871c36d892c6cb30ed6135e9fb763e760db58fb", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 29, "deletions": 47, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/6b784bacbfb3135bd34cd994023ac1e841ad9ceb/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b784bacbfb3135bd34cd994023ac1e841ad9ceb/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=6b784bacbfb3135bd34cd994023ac1e841ad9ceb", "patch": "@@ -121,12 +121,10 @@ fn register_native_lib(sess: &Session,\n     sess.cstore.add_used_library(name, kind);\n }\n \n-pub struct PluginMetadata<'a> {\n-    sess: &'a Session,\n+// Extra info about a crate loaded for plugins or exported macros.\n+struct ExtensionCrate {\n     metadata: PMDSource,\n     dylib: Option<Path>,\n-    info: CrateInfo,\n-    vi_span: Span,\n     target_only: bool,\n }\n \n@@ -451,21 +449,7 @@ impl<'a> CrateReader<'a> {\n         }).collect()\n     }\n \n-    pub fn read_plugin_metadata<'b>(&'b mut self,\n-                                    krate: CrateOrString<'b>) -> PluginMetadata<'b> {\n-        let (info, span) = match krate {\n-            CrateOrString::Krate(c) => {\n-                (self.extract_crate_info(c).unwrap(), c.span)\n-            }\n-            CrateOrString::Str(sp, s) => {\n-                (CrateInfo {\n-                     name: s.to_string(),\n-                     ident: s.to_string(),\n-                     id: ast::DUMMY_NODE_ID,\n-                     should_link: false,\n-                 }, sp)\n-            }\n-        };\n+    fn read_extension_crate(&mut self, span: Span, info: &CrateInfo) -> ExtensionCrate {\n         let target_triple = &self.sess.opts.target_triple[];\n         let is_cross = target_triple != config::host_triple();\n         let mut should_link = info.should_link && !is_cross;\n@@ -517,30 +501,21 @@ impl<'a> CrateReader<'a> {\n             PMDSource::Owned(library.metadata)\n         };\n \n-        PluginMetadata {\n-            sess: self.sess,\n+        ExtensionCrate {\n             metadata: metadata,\n             dylib: dylib.map(|p| p.0),\n-            info: info,\n-            vi_span: span,\n             target_only: target_only,\n         }\n     }\n-}\n \n-#[derive(Copy)]\n-pub enum CrateOrString<'a> {\n-    Krate(&'a ast::Item),\n-    Str(Span, &'a str)\n-}\n+    /// Read exported macros.\n+    pub fn read_exported_macros(&mut self, krate: &ast::Item) -> Vec<ast::MacroDef> {\n+        let ci = self.extract_crate_info(krate).unwrap();\n+        let ekrate = self.read_extension_crate(krate.span, &ci);\n \n-impl<'a> PluginMetadata<'a> {\n-    /// Read exported macros\n-    pub fn exported_macros(&self) -> Vec<ast::MacroDef> {\n-        let imported_from = Some(token::intern(&self.info.ident[]).ident());\n-        let source_name = format!(\"<{} macros>\", &self.info.ident[]);\n+        let source_name = format!(\"<{} macros>\", krate.ident);\n         let mut macros = vec![];\n-        decoder::each_exported_macro(self.metadata.as_slice(),\n+        decoder::each_exported_macro(ekrate.metadata.as_slice(),\n                                      &*self.sess.cstore.intr,\n             |name, attrs, body| {\n                 // NB: Don't use parse::parse_tts_from_source_str because it parses with\n@@ -558,7 +533,7 @@ impl<'a> PluginMetadata<'a> {\n                     attrs: attrs,\n                     id: ast::DUMMY_NODE_ID,\n                     span: span,\n-                    imported_from: imported_from,\n+                    imported_from: Some(krate.ident),\n                     // overridden in plugin/load.rs\n                     export: false,\n                     use_locally: false,\n@@ -572,28 +547,35 @@ impl<'a> PluginMetadata<'a> {\n     }\n \n     /// Look for a plugin registrar. Returns library path and symbol name.\n-    pub fn plugin_registrar(&self) -> Option<(Path, String)> {\n-        if self.target_only {\n+    pub fn find_plugin_registrar(&mut self, span: Span, name: &str) -> Option<(Path, String)> {\n+        let ekrate = self.read_extension_crate(span, &CrateInfo {\n+             name: name.to_string(),\n+             ident: name.to_string(),\n+             id: ast::DUMMY_NODE_ID,\n+             should_link: false,\n+        });\n+\n+        if ekrate.target_only {\n             // Need to abort before syntax expansion.\n-            let message = format!(\"plugin crate `{}` is not available for triple `{}` \\\n+            let message = format!(\"plugin `{}` is not available for triple `{}` \\\n                                    (only found {})\",\n-                                  self.info.ident,\n+                                  name,\n                                   config::host_triple(),\n                                   self.sess.opts.target_triple);\n-            self.sess.span_err(self.vi_span, &message[]);\n+            self.sess.span_err(span, &message[]);\n             self.sess.abort_if_errors();\n         }\n \n-        let registrar = decoder::get_plugin_registrar_fn(self.metadata.as_slice())\n-            .map(|id| decoder::get_symbol(self.metadata.as_slice(), id));\n+        let registrar = decoder::get_plugin_registrar_fn(ekrate.metadata.as_slice())\n+            .map(|id| decoder::get_symbol(ekrate.metadata.as_slice(), id));\n \n-        match (self.dylib.as_ref(), registrar) {\n+        match (ekrate.dylib.as_ref(), registrar) {\n             (Some(dylib), Some(reg)) => Some((dylib.clone(), reg)),\n             (None, Some(_)) => {\n-                let message = format!(\"plugin crate `{}` only found in rlib format, \\\n+                let message = format!(\"plugin `{}` only found in rlib format, \\\n                                        but must be available in dylib format\",\n-                                       self.info.ident);\n-                self.sess.span_err(self.vi_span, &message[]);\n+                                       name);\n+                self.sess.span_err(span, &message[]);\n                 // No need to abort because the loading code will just ignore this\n                 // empty dylib.\n                 None"}, {"sha": "860bfaf4ce27232eb90998d115c55d72997f76ff", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6b784bacbfb3135bd34cd994023ac1e841ad9ceb/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b784bacbfb3135bd34cd994023ac1e841ad9ceb/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=6b784bacbfb3135bd34cd994023ac1e841ad9ceb", "patch": "@@ -11,7 +11,7 @@\n //! Used by `rustc` when loading a plugin, or a crate with exported macros.\n \n use session::Session;\n-use metadata::creader::{CrateOrString, CrateReader};\n+use metadata::creader::CrateReader;\n use plugin::registry::Registry;\n \n use std::mem;\n@@ -102,14 +102,13 @@ pub fn load_plugins(sess: &Session, krate: &ast::Crate,\n             }\n \n             let args = plugin.meta_item_list().map(ToOwned::to_owned).unwrap_or_default();\n-            loader.load_plugin(CrateOrString::Str(plugin.span, &*plugin.name()),\n-                               args);\n+            loader.load_plugin(plugin.span, &*plugin.name(), args);\n         }\n     }\n \n     if let Some(plugins) = addl_plugins {\n         for plugin in plugins {\n-            loader.load_plugin(CrateOrString::Str(COMMAND_LINE_SP, &plugin), vec![]);\n+            loader.load_plugin(COMMAND_LINE_SP, &plugin, vec![]);\n         }\n     }\n \n@@ -211,10 +210,10 @@ impl<'a> PluginLoader<'a> {\n             return;\n         }\n \n-        let pmd = self.reader.read_plugin_metadata(CrateOrString::Krate(vi));\n-\n+        let macros = self.reader.read_exported_macros(vi);\n         let mut seen = HashSet::new();\n-        for mut def in pmd.exported_macros() {\n+\n+        for mut def in macros {\n             let name = token::get_ident(def.ident);\n             seen.insert(name.clone());\n \n@@ -241,16 +240,11 @@ impl<'a> PluginLoader<'a> {\n         }\n     }\n \n-    pub fn load_plugin<'b>(&mut self,\n-                           c: CrateOrString<'b>,\n-                           args: Vec<P<ast::MetaItem>>) {\n-        let registrar = {\n-            let pmd = self.reader.read_plugin_metadata(c);\n-            pmd.plugin_registrar()\n-        };\n+    pub fn load_plugin(&mut self, span: Span, name: &str, args: Vec<P<ast::MetaItem>>) {\n+        let registrar = self.reader.find_plugin_registrar(span, name);\n \n         if let Some((lib, symbol)) = registrar {\n-            let fun = self.dylink_registrar(c, lib, symbol);\n+            let fun = self.dylink_registrar(span, lib, symbol);\n             self.plugins.registrars.push(PluginRegistrar {\n                 fun: fun,\n                 args: args,\n@@ -259,8 +253,8 @@ impl<'a> PluginLoader<'a> {\n     }\n \n     // Dynamically link a registrar function into the compiler process.\n-    fn dylink_registrar<'b>(&mut self,\n-                        c: CrateOrString<'b>,\n+    fn dylink_registrar(&mut self,\n+                        span: Span,\n                         path: Path,\n                         symbol: String) -> PluginRegistrarFun {\n         // Make sure the path contains a / or the linker will search for it.\n@@ -272,11 +266,7 @@ impl<'a> PluginLoader<'a> {\n             // inside this crate, so continue would spew \"macro undefined\"\n             // errors\n             Err(err) => {\n-                if let CrateOrString::Krate(cr) = c {\n-                    self.sess.span_fatal(cr.span, &err[])\n-                } else {\n-                    self.sess.fatal(&err[])\n-                }\n+                self.sess.span_fatal(span, &err[])\n             }\n         };\n \n@@ -288,11 +278,7 @@ impl<'a> PluginLoader<'a> {\n                     }\n                     // again fatal if we can't register macros\n                     Err(err) => {\n-                        if let CrateOrString::Krate(cr) = c {\n-                            self.sess.span_fatal(cr.span, &err[])\n-                        } else {\n-                            self.sess.fatal(&err[])\n-                        }\n+                        self.sess.span_fatal(span, &err[])\n                     }\n                 };\n "}, {"sha": "7a362994b8db6fe6948a3cd8bfef77b0e324118b", "filename": "src/test/compile-fail-fulldeps/macro-crate-rlib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b784bacbfb3135bd34cd994023ac1e841ad9ceb/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-rlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b784bacbfb3135bd34cd994023ac1e841ad9ceb/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-rlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fmacro-crate-rlib.rs?ref=6b784bacbfb3135bd34cd994023ac1e841ad9ceb", "patch": "@@ -16,6 +16,6 @@\n \n #![feature(plugin)]\n #![plugin(rlib_crate_test)]\n-//~^ ERROR: plugin crate `rlib_crate_test` only found in rlib format, but must be available in dylib format\n+//~^ ERROR: plugin `rlib_crate_test` only found in rlib format, but must be available in dylib format\n \n fn main() {}"}]}