{"sha": "3873402805288fb032050ba15606f393736a993d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NzM0MDI4MDUyODhmYjAzMjA1MGJhMTU2MDZmMzkzNzM2YTk5M2Q=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-06-28T06:23:37Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-07-26T07:43:05Z"}, "message": "Clarify UnsafeCell docs; fix #34496", "tree": {"sha": "52e56e3c08cd1a2a0fbb263b2f0ad40e33cc685f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52e56e3c08cd1a2a0fbb263b2f0ad40e33cc685f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3873402805288fb032050ba15606f393736a993d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXlxSJAAoJEDu/TT4u95+Y2hEP/3AgI8NEL6u/Eat3y/xEhaP7\nc4aVxy5sQzC7DoGIs/Gs4XP0RFWFx8oX+8hST1iXMHTbh1IzVZd8rOe4lGG3o5Zr\nMFPyNECzJXV4lk333fuVbSYIGsx5Zm4zgLnldLuQJalnajnt3cCmeZ8G2r12dw6r\nvxIk2ZCnDremnBUdzWXV7lMTBo9+ukRdX/G/eMukpd6xuYOdjXSBdbSZop+yRVQP\n0sY5aIGwpz9VbmBlvh2Ta9lkxDj6ll12y8Vn+kl3gaREeKLelcQSp5uc2ormPSMa\nbcwKnBd7Dno8mN/2dvHibTxFr1Y5aW0R0uKXfki31gvATAaHssYFWjBoLWgwqNHz\ndyVN3TbFVJDTvWgyi2C0In8V/ylHRevaqEzI8TjTaZBNgfv6EkVTZtwkbL5JJjBE\nyMvTDT0WP5HNNAo3P9l/eoFZG8ewldC24CsKf0RqF5CPG908+dCKhclQbOxNhKvT\nSj5Z2RG1pCkKRD/OoeVfzILj1eqLJo7k0iUfrxN0Vge0t57GHQidMlYP8rxtJUDE\nZRwSD/smsgoyg9/sSYJodcXpHzvEDM7QSUutYHElQv6X3E/md3erP9GrsO7ZNJ2K\nKjUAXmtns+s9Vk26j6S30OPhuKhAkUF16d4DemtcLX5Zdxw+EnBgGYO8XNZ5yyl9\nNjdcCmsCedbAjtdrcXXI\n=ajK3\n-----END PGP SIGNATURE-----", "payload": "tree 52e56e3c08cd1a2a0fbb263b2f0ad40e33cc685f\nparent 9316ae515e2f8f3f497fb4f1559910c1eef2433d\nauthor Manish Goregaokar <manishsmail@gmail.com> 1467095017 +0530\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1469518985 +0530\n\nClarify UnsafeCell docs; fix #34496\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3873402805288fb032050ba15606f393736a993d", "html_url": "https://github.com/rust-lang/rust/commit/3873402805288fb032050ba15606f393736a993d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3873402805288fb032050ba15606f393736a993d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9316ae515e2f8f3f497fb4f1559910c1eef2433d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9316ae515e2f8f3f497fb4f1559910c1eef2433d", "html_url": "https://github.com/rust-lang/rust/commit/9316ae515e2f8f3f497fb4f1559910c1eef2433d"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "06af200e47839b9c5a5d5ed6aa6c249264a71fb5", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3873402805288fb032050ba15606f393736a993d/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3873402805288fb032050ba15606f393736a993d/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=3873402805288fb032050ba15606f393736a993d", "patch": "@@ -847,6 +847,20 @@ impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefM\n /// The `UnsafeCell<T>` type is the only legal way to obtain aliasable data that is considered\n /// mutable. In general, transmuting an `&T` type into an `&mut T` is considered undefined behavior.\n ///\n+/// The compiler makes optimizations based on the knowledge that `&T` is not mutably aliased or\n+/// mutated, and that `&mut T` is unique. When building abstractions like `Cell`, `RefCell`,\n+/// `Mutex`, etc, you need to turn these optimizations off. `UnsafeCell` is the only legal way\n+/// to do this. When `UnsafeCell<T>` is immutably aliased, it is still safe to obtain a mutable\n+/// reference to its interior and/or to mutate it. However, it is up to the abstraction designer\n+/// to ensure that no two mutable references obtained this way are active at the same time, and\n+/// that there are no active mutable references or mutations when an immutable reference is obtained\n+/// from the cell. This is often done via runtime checks.\n+///\n+/// Note that while mutating or mutably aliasing the contents of an `& UnsafeCell<T>` is\n+/// okay (provided you enforce the invariants some other way); it is still undefined behavior\n+/// to have multiple `&mut UnsafeCell<T>` aliases.\n+///\n+///\n /// Types like `Cell<T>` and `RefCell<T>` use this type to wrap their internal data.\n ///\n /// # Examples\n@@ -916,6 +930,11 @@ impl<T> UnsafeCell<T> {\n impl<T: ?Sized> UnsafeCell<T> {\n     /// Gets a mutable pointer to the wrapped value.\n     ///\n+    /// This can be cast to a pointer of any kind.\n+    /// Ensure that the access is unique when casting to\n+    /// `&mut T`, and ensure that there are no mutations or mutable\n+    /// aliases going on when casting to `&T`\n+    ///\n     /// # Examples\n     ///\n     /// ```"}]}