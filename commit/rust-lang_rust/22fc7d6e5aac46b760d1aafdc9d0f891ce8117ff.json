{"sha": "22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZmM3ZDZlNWFhYzQ2Yjc2MGQxYWFmZGM5ZDBmODkxY2U4MTE3ZmY=", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-07-26T02:12:34Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-08-13T21:07:56Z"}, "message": "Point to where clause for GATs", "tree": {"sha": "39df87062109f9ecc2293994e091d9e51dc3f69c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39df87062109f9ecc2293994e091d9e51dc3f69c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff", "html_url": "https://github.com/rust-lang/rust/commit/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc3c69e5419292e92663a5f1e39203478925661", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc3c69e5419292e92663a5f1e39203478925661", "html_url": "https://github.com/rust-lang/rust/commit/2fc3c69e5419292e92663a5f1e39203478925661"}], "stats": {"total": 208, "additions": 200, "deletions": 8}, "files": [{"sha": "50048534aaee5e75727342b74af0c1e0837f667a", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 94, "deletions": 4, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff", "patch": "@@ -2259,9 +2259,99 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             };\n \n-        let mut err = match *sub {\n-            ty::ReEarlyBound(ty::EarlyBoundRegion { name, .. })\n-            | ty::ReFree(ty::FreeRegion { bound_region: ty::BrNamed(_, name), .. }) => {\n+        #[derive(Debug)]\n+        enum SubOrigin<'hir> {\n+            GAT(&'hir hir::Generics<'hir>),\n+            Impl(&'hir hir::Generics<'hir>),\n+            Trait(&'hir hir::Generics<'hir>),\n+            Fn(&'hir hir::Generics<'hir>),\n+            Unknown,\n+        }\n+        let sub_origin = 'origin: {\n+            match *sub {\n+                ty::ReEarlyBound(ty::EarlyBoundRegion { def_id, .. }) => {\n+                    let node = self.tcx.hir().get_if_local(def_id).unwrap();\n+                    match node {\n+                        Node::GenericParam(param) => {\n+                            for h in self.tcx.hir().parent_iter(param.hir_id) {\n+                                break 'origin match h.1 {\n+                                    Node::ImplItem(hir::ImplItem {\n+                                        kind: hir::ImplItemKind::TyAlias(..),\n+                                        generics,\n+                                        ..\n+                                    }) => SubOrigin::GAT(generics),\n+                                    Node::ImplItem(hir::ImplItem {\n+                                        kind: hir::ImplItemKind::Fn(..),\n+                                        generics,\n+                                        ..\n+                                    }) => SubOrigin::Fn(generics),\n+                                    Node::TraitItem(hir::TraitItem {\n+                                        kind: hir::TraitItemKind::Type(..),\n+                                        generics,\n+                                        ..\n+                                    }) => SubOrigin::GAT(generics),\n+                                    Node::TraitItem(hir::TraitItem {\n+                                        kind: hir::TraitItemKind::Fn(..),\n+                                        generics,\n+                                        ..\n+                                    }) => SubOrigin::Fn(generics),\n+                                    Node::Item(hir::Item {\n+                                        kind: hir::ItemKind::Trait(_, _, generics, _, _),\n+                                        ..\n+                                    }) => SubOrigin::Trait(generics),\n+                                    Node::Item(hir::Item {\n+                                        kind: hir::ItemKind::Impl(hir::Impl { generics, .. }),\n+                                        ..\n+                                    }) => SubOrigin::Impl(generics),\n+                                    Node::Item(hir::Item {\n+                                        kind: hir::ItemKind::Fn(_, generics, _),\n+                                        ..\n+                                    }) => SubOrigin::Fn(generics),\n+                                    _ => continue,\n+                                };\n+                            }\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+                _ => {}\n+            }\n+            SubOrigin::Unknown\n+        };\n+        debug!(?sub_origin);\n+\n+        let mut err = match (*sub, sub_origin) {\n+            // In the case of GATs, we have to be careful. If we a type parameter `T` on an impl,\n+            // but a lifetime `'a` on an associated type, then we might need to suggest adding\n+            // `where T: 'a`. Importantly, this is on the GAT span, not on the `T` declaration.\n+            (ty::ReEarlyBound(ty::EarlyBoundRegion { name: _, .. }), SubOrigin::GAT(generics)) => {\n+                // Does the required lifetime have a nice name we can print?\n+                let mut err = struct_span_err!(\n+                    self.tcx.sess,\n+                    span,\n+                    E0309,\n+                    \"{} may not live long enough\",\n+                    labeled_user_string\n+                );\n+                let pred = format!(\"{}: {}\", bound_kind, sub);\n+                let suggestion = format!(\n+                    \"{} {}\",\n+                    if !generics.where_clause.predicates.is_empty() { \",\" } else { \" where\" },\n+                    pred,\n+                );\n+                err.span_suggestion(\n+                    generics.where_clause.tail_span_for_suggestion(),\n+                    \"consider adding a where clause\".into(),\n+                    suggestion,\n+                    Applicability::MaybeIncorrect,\n+                );\n+                err\n+            }\n+            (\n+                ty::ReEarlyBound(ty::EarlyBoundRegion { name, .. })\n+                | ty::ReFree(ty::FreeRegion { bound_region: ty::BrNamed(_, name), .. }),\n+                _,\n+            ) => {\n                 // Does the required lifetime have a nice name we can print?\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,\n@@ -2278,7 +2368,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 err\n             }\n \n-            ty::ReStatic => {\n+            (ty::ReStatic, _) => {\n                 // Does the required lifetime have a nice name we can print?\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,"}, {"sha": "ba7155f63e4b42afb8da54d08dae713e445a31fb", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff", "patch": "@@ -22,6 +22,7 @@\n #![feature(in_band_lifetimes)]\n #![feature(control_flow_enum)]\n #![feature(min_specialization)]\n+#![feature(label_break_value)]\n #![recursion_limit = \"512\"] // For rustdoc\n \n #[macro_use]"}, {"sha": "9e247de16320391ca45bd3d777212b836acf52c8", "filename": "src/test/ui/generic-associated-types/issue-84931.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-84931.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-84931.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-84931.rs?ref=22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff", "patch": "@@ -0,0 +1,22 @@\n+#![feature(generic_associated_types)]\n+// check-fail\n+\n+trait StreamingIter {\n+    type Item<'a> where Self: 'a;\n+    fn next<'a>(&'a mut self) -> Option<Self::Item::<'a>>;\n+}\n+\n+struct StreamingSliceIter<'a, T> {\n+    idx: usize,\n+    data: &'a mut [T],\n+}\n+\n+impl<'b, T: 'b> StreamingIter for StreamingSliceIter<'b, T> {\n+    type Item<'a> = &'a mut T;\n+    //~^ the parameter type\n+    fn next(&mut self) -> Option<&mut T> {\n+        loop {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "47decb70ae74c64b77a82d7dec2710f800a97fda", "filename": "src/test/ui/generic-associated-types/issue-84931.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-84931.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-84931.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-84931.stderr?ref=22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff", "patch": "@@ -0,0 +1,11 @@\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-84931.rs:15:21\n+   |\n+LL |     type Item<'a> = &'a mut T;\n+   |                  -  ^^^^^^^^^ ...so that the reference type `&'a mut T` does not outlive the data it points at\n+   |                  |\n+   |                  help: consider adding a where clause: `where T: 'a`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "d6978794e1e957304cda22c17a6f820f59cbf609", "filename": "src/test/ui/generic-associated-types/issue-86483.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr?ref=22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff", "patch": "@@ -37,11 +37,10 @@ LL |     for<'a> T: 'a,\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/issue-86483.rs:9:32\n    |\n-LL | pub trait IceIce<T>\n-   |                  - help: consider adding an explicit lifetime bound...: `T: 'v`\n-...\n LL |     type Ice<'v>: IntoIterator<Item = &'v T>;\n-   |                                ^^^^^^^^^^^^ ...so that the reference type `&'v T` does not outlive the data it points at\n+   |                                ^^^^^^^^^^^^ - help: consider adding a where clause: `where T: 'v`\n+   |                                |\n+   |                                ...so that the reference type `&'v T` does not outlive the data it points at\n \n error: aborting due to 3 previous errors\n "}, {"sha": "57d478a9ef1e3c8085a621c2ac2475d66a35b8d3", "filename": "src/test/ui/generic-associated-types/issue-86787.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.rs?ref=22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff", "patch": "@@ -0,0 +1,40 @@\n+#![feature(generic_associated_types)]\n+// check-fail\n+\n+enum Either<L, R> {\n+    Left(L),\n+    Right(R),\n+}\n+\n+pub trait HasChildrenOf {\n+    type T;\n+    type TRef<'a>;\n+\n+    fn ref_children<'a>(&'a self) -> Vec<Self::TRef<'a>>;\n+    fn take_children(self) -> Vec<Self::T>;\n+}\n+\n+impl<Left, Right> HasChildrenOf for Either<Left, Right>\n+where\n+    Left: HasChildrenOf,\n+    Right: HasChildrenOf,\n+{\n+    type T = Either<Left::T, Right::T>;\n+    type TRef<'a>\n+    //~^ the associated type\n+    //~^^ the associated type\n+    where\n+    <Left as HasChildrenOf>::T: 'a,\n+    <Right as HasChildrenOf>::T: 'a\n+    = Either<&'a Left::T, &'a Right::T>;\n+\n+    fn ref_children<'a>(&'a self) -> Vec<Self::TRef<'a>> {\n+        todo!()\n+    }\n+\n+    fn take_children(self) -> Vec<Self::T> {\n+        todo!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "04cd84b08011c4c0aa56640767816d355081c25b", "filename": "src/test/ui/generic-associated-types/issue-86787.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.stderr?ref=22fc7d6e5aac46b760d1aafdc9d0f891ce8117ff", "patch": "@@ -0,0 +1,29 @@\n+error[E0309]: the associated type `<Left as HasChildrenOf>::T` may not live long enough\n+  --> $DIR/issue-86787.rs:23:5\n+   |\n+LL | /     type TRef<'a>\n+LL | |\n+LL | |\n+LL | |     where\n+LL | |     <Left as HasChildrenOf>::T: 'a,\n+LL | |     <Right as HasChildrenOf>::T: 'a\n+   | |                                    - help: consider adding a where clause: `, <Left as HasChildrenOf>::T: 'a`\n+LL | |     = Either<&'a Left::T, &'a Right::T>;\n+   | |________________________________________^ ...so that the type `<Left as HasChildrenOf>::T` will meet its required lifetime bounds\n+\n+error[E0309]: the associated type `<Right as HasChildrenOf>::T` may not live long enough\n+  --> $DIR/issue-86787.rs:23:5\n+   |\n+LL | /     type TRef<'a>\n+LL | |\n+LL | |\n+LL | |     where\n+LL | |     <Left as HasChildrenOf>::T: 'a,\n+LL | |     <Right as HasChildrenOf>::T: 'a\n+   | |                                    - help: consider adding a where clause: `, <Right as HasChildrenOf>::T: 'a`\n+LL | |     = Either<&'a Left::T, &'a Right::T>;\n+   | |________________________________________^ ...so that the type `<Right as HasChildrenOf>::T` will meet its required lifetime bounds\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0309`."}]}