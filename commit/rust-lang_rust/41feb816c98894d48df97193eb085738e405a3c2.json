{"sha": "41feb816c98894d48df97193eb085738e405a3c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZmViODE2Yzk4ODk0ZDQ4ZGY5NzE5M2ViMDg1NzM4ZTQwNWEzYzI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-07T21:32:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-07T21:32:08Z"}, "message": "Merge #5255\n\n5255: Replace ad hocery with science r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0bfb9d622da4eb9b5bb2748f47b3de7ec24ad8f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bfb9d622da4eb9b5bb2748f47b3de7ec24ad8f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41feb816c98894d48df97193eb085738e405a3c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfBOnYCRBK7hj4Ov3rIwAAdHIIAAJqJNulDWBz+0ZoLMeqzSlc\n61xqP1CMWW0Q7orQ4US0VXCGPaX+IXBRZSbOMZr+aHSdVUDS/aG+/IH2oL1TB4sJ\ndz3LiRFZjqwEzB00cdzWsE0BFChvjUx+epMMEjQFdcPN1gNNdhe9NbGWsxDgmT9Z\n+UUKjJhiqlQtmaEssaFiqNgGHQef44jx5NkSd8qazMImvGL7nGnbyEgGkHj+C+xi\nvn10BrnrD0r3a1rMdjqbFuWjmKvZWNN0r5EnzRU8CedOz2TBlJ5ZndP3d87owTff\nKZlvb6jT7bZwEXj7zw8LiXE+Zvf/2sV6Ib+INXUg6z1Ks0fEOqnM9tieZkjbAOM=\n=ZDh3\n-----END PGP SIGNATURE-----\n", "payload": "tree 0bfb9d622da4eb9b5bb2748f47b3de7ec24ad8f9\nparent 56ade20380a028026eeb71af2a8a81e37ede7efb\nparent 69b79e3a73f9a1b820cf6d5ebc9968d8b08d4e68\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594157528 +0000\ncommitter GitHub <noreply@github.com> 1594157528 +0000\n\nMerge #5255\n\n5255: Replace ad hocery with science r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41feb816c98894d48df97193eb085738e405a3c2", "html_url": "https://github.com/rust-lang/rust/commit/41feb816c98894d48df97193eb085738e405a3c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41feb816c98894d48df97193eb085738e405a3c2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56ade20380a028026eeb71af2a8a81e37ede7efb", "url": "https://api.github.com/repos/rust-lang/rust/commits/56ade20380a028026eeb71af2a8a81e37ede7efb", "html_url": "https://github.com/rust-lang/rust/commit/56ade20380a028026eeb71af2a8a81e37ede7efb"}, {"sha": "69b79e3a73f9a1b820cf6d5ebc9968d8b08d4e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/69b79e3a73f9a1b820cf6d5ebc9968d8b08d4e68", "html_url": "https://github.com/rust-lang/rust/commit/69b79e3a73f9a1b820cf6d5ebc9968d8b08d4e68"}], "stats": {"total": 139, "additions": 82, "deletions": 57}, "files": [{"sha": "385e7a7bc8b749f3d83557722ad6ba32a3489e31", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41feb816c98894d48df97193eb085738e405a3c2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/41feb816c98894d48df97193eb085738e405a3c2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=41feb816c98894d48df97193eb085738e405a3c2", "patch": "@@ -1920,6 +1920,7 @@ dependencies = [\n name = \"vfs\"\n version = \"0.1.0\"\n dependencies = [\n+ \"fst\",\n  \"paths\",\n  \"rustc-hash\",\n ]"}, {"sha": "fc1673ede2bdb602acd5b1f4e3051a23077c969e", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41feb816c98894d48df97193eb085738e405a3c2/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41feb816c98894d48df97193eb085738e405a3c2/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=41feb816c98894d48df97193eb085738e405a3c2", "patch": "@@ -126,7 +126,6 @@ core\n alloc\n collections\n libc\n-panic_unwind\n proc_macro\n rustc_unicode\n std_unicode"}, {"sha": "b985c4c10400d92b1473e324a448e8bace508af2", "filename": "crates/vfs/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/41feb816c98894d48df97193eb085738e405a3c2/crates%2Fvfs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/41feb816c98894d48df97193eb085738e405a3c2/crates%2Fvfs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2FCargo.toml?ref=41feb816c98894d48df97193eb085738e405a3c2", "patch": "@@ -6,5 +6,6 @@ edition = \"2018\"\n \n [dependencies]\n rustc-hash = \"1.0\"\n+fst = \"0.4\"\n \n paths = { path = \"../paths\" }"}, {"sha": "37c479306effe6eca3372d7ca053d68462981c90", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 49, "deletions": 56, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/41feb816c98894d48df97193eb085738e405a3c2/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41feb816c98894d48df97193eb085738e405a3c2/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=41feb816c98894d48df97193eb085738e405a3c2", "patch": "@@ -2,8 +2,9 @@\n //!\n //! Files which do not belong to any explicitly configured `FileSet` belong to\n //! the default `FileSet`.\n-use std::{fmt, mem};\n+use std::fmt;\n \n+use fst::{IntoStreamer, Streamer};\n use rustc_hash::FxHashMap;\n \n use crate::{FileId, Vfs, VfsPath};\n@@ -40,15 +41,10 @@ impl fmt::Debug for FileSet {\n     }\n }\n \n-// Invariant: if k1 is a prefix of k2, then they are in different buckets (k2\n-// is closer to 0th bucket).\n-// FIXME: replace with an actual trie some day.\n-type BadTrie<K, V> = Vec<Vec<(K, V)>>;\n-\n #[derive(Debug)]\n pub struct FileSetConfig {\n     n_file_sets: usize,\n-    trie: BadTrie<VfsPath, usize>,\n+    map: fst::Map<Vec<u8>>,\n }\n \n impl Default for FileSetConfig {\n@@ -62,18 +58,27 @@ impl FileSetConfig {\n         FileSetConfigBuilder::default()\n     }\n     pub fn partition(&self, vfs: &Vfs) -> Vec<FileSet> {\n+        let mut scratch_space = Vec::new();\n         let mut res = vec![FileSet::default(); self.len()];\n         for (file_id, path) in vfs.iter() {\n-            let root = self.classify(&path);\n+            let root = self.classify(&path, &mut scratch_space);\n             res[root].insert(file_id, path)\n         }\n         res\n     }\n     fn len(&self) -> usize {\n         self.n_file_sets\n     }\n-    fn classify(&self, path: &VfsPath) -> usize {\n-        find_ancestor(&self.trie, path, is_prefix).copied().unwrap_or(self.len() - 1)\n+    fn classify(&self, path: &VfsPath, scratch_space: &mut Vec<u8>) -> usize {\n+        scratch_space.clear();\n+        path.encode(scratch_space);\n+        let automaton = PrefixOf::new(scratch_space.as_slice());\n+        let mut longest_prefix = self.len() - 1;\n+        let mut stream = self.map.search(automaton).into_stream();\n+        while let Some((_, v)) = stream.next() {\n+            longest_prefix = v as usize;\n+        }\n+        longest_prefix\n     }\n }\n \n@@ -96,63 +101,51 @@ impl FileSetConfigBuilder {\n     }\n     pub fn build(self) -> FileSetConfig {\n         let n_file_sets = self.roots.len() + 1;\n-\n-        let mut trie = BadTrie::new();\n-\n-        for (i, paths) in self.roots.into_iter().enumerate() {\n-            for p in paths {\n-                insert(&mut trie, p, i, is_prefix);\n+        let map = {\n+            let mut entries = Vec::new();\n+            for (i, paths) in self.roots.into_iter().enumerate() {\n+                for p in paths {\n+                    let mut buf = Vec::new();\n+                    p.encode(&mut buf);\n+                    entries.push((buf, i as u64));\n+                }\n             }\n-        }\n-        trie.iter_mut().for_each(|it| it.sort());\n-        FileSetConfig { n_file_sets, trie }\n+            entries.sort();\n+            entries.dedup_by(|(a, _), (b, _)| a == b);\n+            fst::Map::from_iter(entries).unwrap()\n+        };\n+        FileSetConfig { n_file_sets, map }\n     }\n }\n \n-fn is_prefix(short: &VfsPath, long: &VfsPath) -> bool {\n-    long.starts_with(short)\n+struct PrefixOf<'a> {\n+    prefix_of: &'a [u8],\n }\n \n-fn insert<K: Ord, V, P: Fn(&K, &K) -> bool>(\n-    trie: &mut BadTrie<K, V>,\n-    mut key: K,\n-    mut value: V,\n-    is_prefix: P,\n-) {\n-    'outer: for level in 0.. {\n-        if trie.len() == level {\n-            trie.push(Vec::new())\n-        }\n-        for (k, v) in trie[level].iter_mut() {\n-            if is_prefix(&key, k) {\n-                continue 'outer;\n-            }\n-            if is_prefix(k, &key) {\n-                mem::swap(k, &mut key);\n-                mem::swap(v, &mut value);\n-                continue 'outer;\n-            }\n-        }\n-        trie[level].push((key, value));\n-        return;\n+impl<'a> PrefixOf<'a> {\n+    fn new(prefix_of: &'a [u8]) -> Self {\n+        Self { prefix_of }\n     }\n }\n \n-fn find_ancestor<'t, K: Ord, V, P: Fn(&K, &K) -> bool>(\n-    trie: &'t BadTrie<K, V>,\n-    key: &K,\n-    is_prefix: P,\n-) -> Option<&'t V> {\n-    for bucket in trie {\n-        let idx = match bucket.binary_search_by(|(k, _)| k.cmp(key)) {\n-            Ok(it) => it,\n-            Err(it) => it.saturating_sub(1),\n-        };\n-        if !bucket.is_empty() && is_prefix(&bucket[idx].0, key) {\n-            return Some(&bucket[idx].1);\n+impl fst::Automaton for PrefixOf<'_> {\n+    type State = usize;\n+    fn start(&self) -> usize {\n+        0\n+    }\n+    fn is_match(&self, &state: &usize) -> bool {\n+        state != !0\n+    }\n+    fn can_match(&self, &state: &usize) -> bool {\n+        state != !0\n+    }\n+    fn accept(&self, &state: &usize, byte: u8) -> usize {\n+        if self.prefix_of.get(state) == Some(&byte) {\n+            state + 1\n+        } else {\n+            !0\n         }\n     }\n-    None\n }\n \n #[test]"}, {"sha": "04a42264e8e615dc92e55c3caad440f7ac7eaf69", "filename": "crates/vfs/src/vfs_path.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/41feb816c98894d48df97193eb085738e405a3c2/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41feb816c98894d48df97193eb085738e405a3c2/crates%2Fvfs%2Fsrc%2Fvfs_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fvfs_path.rs?ref=41feb816c98894d48df97193eb085738e405a3c2", "patch": "@@ -48,6 +48,37 @@ impl VfsPath {\n             (VfsPathRepr::VirtualPath(_), _) => false,\n         }\n     }\n+\n+    // Don't make this `pub`\n+    pub(crate) fn encode(&self, buf: &mut Vec<u8>) {\n+        let tag = match &self.0 {\n+            VfsPathRepr::PathBuf(_) => 0,\n+            VfsPathRepr::VirtualPath(_) => 1,\n+        };\n+        buf.push(tag);\n+        match &self.0 {\n+            VfsPathRepr::PathBuf(it) => {\n+                let path: &std::ffi::OsStr = it.as_os_str();\n+                #[cfg(windows)]\n+                {\n+                    use std::os::windows::ffi::OsStrExt;\n+                    for wchar in path.encode_wide() {\n+                        buf.extend(wchar.to_le_bytes().iter().copied());\n+                    }\n+                }\n+                #[cfg(unix)]\n+                {\n+                    use std::os::unix::ffi::OsStrExt;\n+                    buf.extend(path.as_bytes());\n+                }\n+                #[cfg(not(any(windows, unix)))]\n+                {\n+                    buf.extend(path.to_string_lossy().as_bytes());\n+                }\n+            }\n+            VfsPathRepr::VirtualPath(VirtualPath(s)) => buf.extend(s.as_bytes()),\n+        }\n+    }\n }\n \n #[derive(Clone, Ord, PartialOrd, Eq, PartialEq, Hash)]"}]}