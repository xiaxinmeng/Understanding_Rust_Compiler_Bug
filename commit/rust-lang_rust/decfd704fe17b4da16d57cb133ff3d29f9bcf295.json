{"sha": "decfd704fe17b4da16d57cb133ff3d29f9bcf295", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlY2ZkNzA0ZmUxN2I0ZGExNmQ1N2NiMTMzZmYzZDI5ZjliY2YyOTU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-19T16:53:31Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-26T08:22:46Z"}, "message": "Generalise try_get_cached.", "tree": {"sha": "270106feceb68cfcf2ead32a2388ea8eff60ae70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/270106feceb68cfcf2ead32a2388ea8eff60ae70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/decfd704fe17b4da16d57cb133ff3d29f9bcf295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/decfd704fe17b4da16d57cb133ff3d29f9bcf295", "html_url": "https://github.com/rust-lang/rust/commit/decfd704fe17b4da16d57cb133ff3d29f9bcf295", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/decfd704fe17b4da16d57cb133ff3d29f9bcf295/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42f0db59873ab47d5c8a00620e94bea63dea35a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/42f0db59873ab47d5c8a00620e94bea63dea35a0", "html_url": "https://github.com/rust-lang/rust/commit/42f0db59873ab47d5c8a00620e94bea63dea35a0"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "dbbfc4af825ce2a7d9ad6d6201b65396689136dc", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/decfd704fe17b4da16d57cb133ff3d29f9bcf295/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decfd704fe17b4da16d57cb133ff3d29f9bcf295/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=decfd704fe17b4da16d57cb133ff3d29f9bcf295", "patch": "@@ -247,7 +247,8 @@ where\n                 return TryGetJob::Cycle(Q::handle_cycle_error(tcx, cycle));\n             }\n \n-            let cached = tcx.try_get_cached(\n+            let cached = try_get_cached(\n+                tcx,\n                 Q::query_state(tcx),\n                 (*key).clone(),\n                 |value, index| (value.clone(), index),\n@@ -500,32 +501,34 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         eprintln!(\"end of query stack\");\n     }\n+}\n \n     /// Checks if the query is already computed and in the cache.\n     /// It returns the shard index and a lock guard to the shard,\n     /// which will be used if the query is not in the cache and we need\n     /// to compute it.\n     #[inline(always)]\n-    fn try_get_cached<C, R, OnHit, OnMiss>(\n-        self,\n-        state: &'tcx QueryState<TyCtxt<'tcx>, C>,\n+    fn try_get_cached<CTX, C, R, OnHit, OnMiss>(\n+        tcx: CTX,\n+        state: &QueryState<CTX, C>,\n         key: C::Key,\n         // `on_hit` can be called while holding a lock to the query cache\n         on_hit: OnHit,\n         on_miss: OnMiss,\n     ) -> R\n     where\n-        C: QueryCache<TyCtxt<'tcx>>,\n+        C: QueryCache<CTX>,\n+        CTX: QueryContext,\n         OnHit: FnOnce(&C::Value, DepNodeIndex) -> R,\n-        OnMiss: FnOnce(C::Key, QueryLookup<'_, TyCtxt<'tcx>, C::Key, C::Sharded>) -> R,\n+        OnMiss: FnOnce(C::Key, QueryLookup<'_, CTX, C::Key, C::Sharded>) -> R,\n     {\n         state.cache.lookup(\n             state,\n-            QueryStateShard::<TyCtxt<'tcx>, C::Key, C::Sharded>::get_cache,\n+            QueryStateShard::<CTX, C::Key, C::Sharded>::get_cache,\n             key,\n             |value, index| {\n-                if unlikely!(self.prof.enabled()) {\n-                    self.prof.query_cache_hit(index.into());\n+                if unlikely!(tcx.profiler().enabled()) {\n+                    tcx.profiler().query_cache_hit(index.into());\n                 }\n                 #[cfg(debug_assertions)]\n                 {\n@@ -537,6 +540,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         )\n     }\n \n+impl<'tcx> TyCtxt<'tcx> {\n     #[inline(never)]\n     pub(super) fn get_query<Q: QueryDescription<TyCtxt<'tcx>> + 'tcx>(\n         self,\n@@ -545,7 +549,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> Q::Value {\n         debug!(\"ty::query::get_query<{}>(key={:?}, span={:?})\", Q::NAME, key, span);\n \n-        self.try_get_cached(\n+        try_get_cached(\n+            self,\n             Q::query_state(self),\n             key,\n             |value, index| {\n@@ -819,7 +824,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         // We may be concurrently trying both execute and force a query.\n         // Ensure that only one of them runs the query.\n \n-        self.try_get_cached(\n+        try_get_cached(\n+            self,\n             Q::query_state(self),\n             key,\n             |_, _| {"}]}