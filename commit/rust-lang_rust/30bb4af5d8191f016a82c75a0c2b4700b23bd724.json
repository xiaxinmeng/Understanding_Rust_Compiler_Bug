{"sha": "30bb4af5d8191f016a82c75a0c2b4700b23bd724", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYmI0YWY1ZDgxOTFmMDE2YTgyYzc1YTBjMmI0NzAwYjIzYmQ3MjQ=", "commit": {"author": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-09T17:10:30Z"}, "committer": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-22T22:37:03Z"}, "message": "add top-level documentation to the std pin module", "tree": {"sha": "ed9abea5606aa0f1f8ed0c3f5738b958311c5b2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed9abea5606aa0f1f8ed0c3f5738b958311c5b2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30bb4af5d8191f016a82c75a0c2b4700b23bd724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30bb4af5d8191f016a82c75a0c2b4700b23bd724", "html_url": "https://github.com/rust-lang/rust/commit/30bb4af5d8191f016a82c75a0c2b4700b23bd724", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30bb4af5d8191f016a82c75a0c2b4700b23bd724/comments", "author": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "971d7ed24966e64c8ec8352ada433b672c25012f", "url": "https://api.github.com/repos/rust-lang/rust/commits/971d7ed24966e64c8ec8352ada433b672c25012f", "html_url": "https://github.com/rust-lang/rust/commit/971d7ed24966e64c8ec8352ada433b672c25012f"}], "stats": {"total": 89, "additions": 88, "deletions": 1}, "files": [{"sha": "1b6ccae456ad83edd4020894af85d9bfa8748e77", "filename": "src/liballoc/pin.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb4af5d8191f016a82c75a0c2b4700b23bd724/src%2Fliballoc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb4af5d8191f016a82c75a0c2b4700b23bd724/src%2Fliballoc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fpin.rs?ref=30bb4af5d8191f016a82c75a0c2b4700b23bd724", "patch": "@@ -9,6 +9,10 @@\n // except according to those terms.\n \n //! Types which pin data to its location in memory\n+//!\n+//! see the [standard library module] for more information\n+//!\n+//! [standard library module]: ../../std/pin/index.html\n \n #![unstable(feature = \"pin\", issue = \"49150\")]\n "}, {"sha": "74fb02d2e11622767d08e3496c762bf809c8d499", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30bb4af5d8191f016a82c75a0c2b4700b23bd724/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb4af5d8191f016a82c75a0c2b4700b23bd724/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=30bb4af5d8191f016a82c75a0c2b4700b23bd724", "patch": "@@ -9,6 +9,10 @@\n // except according to those terms.\n \n //! Types which pin data to its location in memory\n+//!\n+//! see the [standard library module] for more information\n+//!\n+//! [standard library module]: ../../std/pin/index.html\n \n #![unstable(feature = \"pin\", issue = \"49150\")]\n "}, {"sha": "0b78414e4bf0bde71c98d50080b2b7670d3808d4", "filename": "src/libstd/pin.rs", "status": "modified", "additions": 80, "deletions": 1, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/30bb4af5d8191f016a82c75a0c2b4700b23bd724/src%2Flibstd%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30bb4af5d8191f016a82c75a0c2b4700b23bd724/src%2Flibstd%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpin.rs?ref=30bb4af5d8191f016a82c75a0c2b4700b23bd724", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -9,6 +9,85 @@\n // except according to those terms.\n \n //! Types which pin data to its location in memory\n+//!\n+//! It is sometimes useful to have objects that are guaranteed to not move,\n+//! in the sense that their placement in memory in consistent, and can thus be relied upon.\n+//!\n+//! A prime example of such a scenario would be building self-referencial structs,\n+//! since moving an object with pointers to itself will invalidate them,\n+//! which could cause undefined behavior.\n+//!\n+//! In order to prevent objects from moving, they must be *pinned*,\n+//! by wrapping the data in special pointer types, such as [`PinMut`] and [`PinBox`].\n+//! These restrict access to the underlying data to only be immutable by implementing [`Deref`],\n+//! unless the type implements the [`Unpin`] trait,\n+//! which indicates that it doesn't need these restrictions and can be safely mutated,\n+//! by implementing [`DerefMut`].\n+//!\n+//! This is done because, while modifying an object can be done in-place,\n+//! it might also relocate a buffer when its at full capacity,\n+//! or it might replace one object with another without logically \"moving\" them with [`swap`].\n+//!\n+//! [`PinMut`]: struct.PinMut.html\n+//! [`PinBox`]: struct.PinBox.html\n+//! [`Unpin`]: ../marker/trait.Unpin.html\n+//! [`DerefMut`]: ../ops/trait.DerefMut.html\n+//! [`Deref`]: ../ops/trait.Deref.html\n+//! [`swap`]: ../mem/fn.swap.html\n+//!\n+//! # Examples\n+//!\n+//! ```rust\n+//! #![feature(pin)]\n+//!\n+//! use std::pin::PinBox;\n+//! use std::marker::Pinned;\n+//! use std::ptr::NonNull;\n+//!\n+//! // This is a self referencial struct since the slice field points to the data field.\n+//! // We cannot inform the compiler about that with a normal reference,\n+//! // since this pattern cannot be described with the usual borrowing rules.\n+//! // Instead we use a raw pointer, though one which is known to not be null,\n+//! // since we know it's pointing at the string.\n+//! struct Unmovable {\n+//!     data: String,\n+//!     slice: NonNull<String>,\n+//!     _pin: Pinned,\n+//! }\n+//!\n+//! impl Unmovable {\n+//!     // To ensure the data doesn't move when the function returns,\n+//!     // we place it in the heap where it will stay for the lifetime of the object,\n+//!     // and the only way to access it would be through a pointer to it.\n+//!     fn new(data: String) -> PinBox<Self> {\n+//!         let res = Unmovable {\n+//!             data,\n+//!             // we only create the pointer once the data is in place\n+//!             // otherwise it will have already moved before we even started\n+//!             slice: NonNull::dangling(),\n+//!             _pin: Pinned,\n+//!         };\n+//!         let mut boxed = PinBox::new(res);\n+//!\n+//!         let slice = NonNull::from(&boxed.data);\n+//!         // we know this is safe because modifying a field doesn't move the whole struct\n+//!         unsafe { PinBox::get_mut(&mut boxed).slice = slice };\n+//!         boxed\n+//!     }\n+//! }\n+//!\n+//! let unmoved = Unmovable::new(\"hello\".to_string());\n+//! // The pointer should point to the correct location,\n+//! // so long as the struct hasn't moved.\n+//! // Meanwhile, we are free to move the pointer around.\n+//! let mut still_unmoved = unmoved;\n+//! assert_eq!(still_unmoved.slice, NonNull::from(&still_unmoved.data));\n+//!\n+//! // Now the only way to access to data (safely) is immutably,\n+//! // so this will fail to compile:\n+//! // still_unmoved.data.push_str(\" world\");\n+//!\n+//! ```\n \n #![unstable(feature = \"pin\", issue = \"49150\")]\n "}]}