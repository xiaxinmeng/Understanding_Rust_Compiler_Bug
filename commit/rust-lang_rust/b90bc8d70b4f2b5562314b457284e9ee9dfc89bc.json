{"sha": "b90bc8d70b4f2b5562314b457284e9ee9dfc89bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MGJjOGQ3MGI0ZjJiNTU2MjMxNGI0NTcyODRlOWVlOWRmYzg5YmM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-31T21:51:19Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-31T21:51:19Z"}, "message": "fix rustdoc generic param order", "tree": {"sha": "ec0ad97fd7493d006822a5bd999a191f53e8267b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec0ad97fd7493d006822a5bd999a191f53e8267b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b90bc8d70b4f2b5562314b457284e9ee9dfc89bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b90bc8d70b4f2b5562314b457284e9ee9dfc89bc", "html_url": "https://github.com/rust-lang/rust/commit/b90bc8d70b4f2b5562314b457284e9ee9dfc89bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b90bc8d70b4f2b5562314b457284e9ee9dfc89bc/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1799d31847294d6e3816c17679247a5c206e809a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1799d31847294d6e3816c17679247a5c206e809a", "html_url": "https://github.com/rust-lang/rust/commit/1799d31847294d6e3816c17679247a5c206e809a"}], "stats": {"total": 45, "additions": 15, "deletions": 30}, "files": [{"sha": "9c44d27447db8614445e2073acb3a640db25f426", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b90bc8d70b4f2b5562314b457284e9ee9dfc89bc/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90bc8d70b4f2b5562314b457284e9ee9dfc89bc/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=b90bc8d70b4f2b5562314b457284e9ee9dfc89bc", "patch": "@@ -480,6 +480,11 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 .clean(self.cx)\n                 .params;\n \n+        debug!(\n+            \"param_env_to_generics({:?}): generic_params={:?}\",\n+            param_env_def_id, generic_params\n+        );\n+\n         let mut has_sized = FxHashSet::default();\n         let mut ty_to_bounds: FxHashMap<_, FxHashSet<_>> = Default::default();\n         let mut lifetime_to_bounds: FxHashMap<_, FxHashSet<_>> = Default::default();"}, {"sha": "5b048372624a4a9ff399d552cac939cc5350804f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b90bc8d70b4f2b5562314b457284e9ee9dfc89bc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90bc8d70b4f2b5562314b457284e9ee9dfc89bc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b90bc8d70b4f2b5562314b457284e9ee9dfc89bc", "patch": "@@ -716,11 +716,11 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n         // Bounds in the type_params and lifetimes fields are repeated in the\n         // predicates field (see rustc_typeck::collect::ty_generics), so remove\n         // them.\n-        let stripped_typarams = gens\n+        let stripped_params = gens\n             .params\n             .iter()\n             .filter_map(|param| match param.kind {\n-                ty::GenericParamDefKind::Lifetime => None,\n+                ty::GenericParamDefKind::Lifetime => Some(param.clean(cx)),\n                 ty::GenericParamDefKind::Type { synthetic, .. } => {\n                     if param.name == kw::SelfUpper {\n                         assert_eq!(param.index, 0);\n@@ -732,7 +732,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n                     }\n                     Some(param.clean(cx))\n                 }\n-                ty::GenericParamDefKind::Const { .. } => None,\n+                ty::GenericParamDefKind::Const { .. } => Some(param.clean(cx)),\n             })\n             .collect::<Vec<GenericParamDef>>();\n \n@@ -844,8 +844,10 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n \n         // Run through the type parameters again and insert a ?Sized\n         // unbound for any we didn't find to be Sized.\n-        for tp in &stripped_typarams {\n-            if !sized_params.contains(&tp.name) {\n+        for tp in &stripped_params {\n+            if matches!(tp.kind, types::GenericParamDefKind::Type { .. })\n+                && !sized_params.contains(&tp.name)\n+            {\n                 where_predicates.push(WP::BoundPredicate {\n                     ty: Type::Generic(tp.name.clone()),\n                     bounds: vec![GenericBound::maybe_sized(cx)],\n@@ -858,16 +860,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n         // and instead see `where T: Foo + Bar + Sized + 'a`\n \n         Generics {\n-            params: gens\n-                .params\n-                .iter()\n-                .flat_map(|param| match param.kind {\n-                    ty::GenericParamDefKind::Lifetime => Some(param.clean(cx)),\n-                    ty::GenericParamDefKind::Type { .. } => None,\n-                    ty::GenericParamDefKind::Const { .. } => Some(param.clean(cx)),\n-                })\n-                .chain(simplify::ty_params(stripped_typarams).into_iter())\n-                .collect(),\n+            params: stripped_params,\n             where_predicates: simplify::where_clauses(cx, where_predicates),\n         }\n     }"}, {"sha": "990189f6ea04dd54da709737eaa198fdab113635", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b90bc8d70b4f2b5562314b457284e9ee9dfc89bc/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90bc8d70b4f2b5562314b457284e9ee9dfc89bc/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=b90bc8d70b4f2b5562314b457284e9ee9dfc89bc", "patch": "@@ -12,7 +12,6 @@\n //! bounds by special casing scenarios such as these. Fun!\n \n use std::collections::BTreeMap;\n-use std::mem;\n \n use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n@@ -118,18 +117,6 @@ pub fn merge_bounds(\n     })\n }\n \n-pub fn ty_params(mut params: Vec<clean::GenericParamDef>) -> Vec<clean::GenericParamDef> {\n-    for param in &mut params {\n-        match param.kind {\n-            clean::GenericParamDefKind::Type { ref mut bounds, .. } => {\n-                *bounds = mem::take(bounds);\n-            }\n-            _ => panic!(\"expected only type parameters\"),\n-        }\n-    }\n-    params\n-}\n-\n fn trait_is_same_or_supertrait(cx: &DocContext<'_>, child: DefId, trait_: DefId) -> bool {\n     if child == trait_ {\n         return true;"}, {"sha": "03f5bb2ca4374784065e047691780d914f9b4720", "filename": "src/test/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b90bc8d70b4f2b5562314b457284e9ee9dfc89bc/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b90bc8d70b4f2b5562314b457284e9ee9dfc89bc/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=b90bc8d70b4f2b5562314b457284e9ee9dfc89bc", "patch": "@@ -11,8 +11,8 @@ pub enum Order {\n }\n \n // @has foo/struct.VSet.html '//pre[@class=\"rust struct\"]' 'pub struct VSet<T, const ORDER: Order>'\n-// @has foo/struct.VSet.html '//h3[@id=\"impl-Send\"]/code' 'impl<const ORDER: Order, T> Send for VSet<T, ORDER>'\n-// @has foo/struct.VSet.html '//h3[@id=\"impl-Sync\"]/code' 'impl<const ORDER: Order, T> Sync for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//h3[@id=\"impl-Send\"]/code' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//h3[@id=\"impl-Sync\"]/code' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n pub struct VSet<T, const ORDER: Order> {\n     inner: Vec<T>,\n }"}]}