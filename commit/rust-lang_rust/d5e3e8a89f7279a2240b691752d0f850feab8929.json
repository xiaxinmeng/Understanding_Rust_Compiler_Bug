{"sha": "d5e3e8a89f7279a2240b691752d0f850feab8929", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZTNlOGE4OWY3Mjc5YTIyNDBiNjkxNzUyZDBmODUwZmVhYjg5Mjk=", "commit": {"author": {"name": "Alex Burka", "email": "web@alexburka.com", "date": "2018-11-02T03:26:31Z"}, "committer": {"name": "Alex Burka", "email": "web@alexburka.com", "date": "2018-11-02T03:26:31Z"}, "message": "remove unused result in resolve", "tree": {"sha": "346618e7436c5eefbcff2fdcb518cd29fef31bc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/346618e7436c5eefbcff2fdcb518cd29fef31bc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5e3e8a89f7279a2240b691752d0f850feab8929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e3e8a89f7279a2240b691752d0f850feab8929", "html_url": "https://github.com/rust-lang/rust/commit/d5e3e8a89f7279a2240b691752d0f850feab8929", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5e3e8a89f7279a2240b691752d0f850feab8929/comments", "author": null, "committer": null, "parents": [{"sha": "9dd2c890662c83428ab17262281c51c6eb84e315", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dd2c890662c83428ab17262281c51c6eb84e315", "html_url": "https://github.com/rust-lang/rust/commit/9dd2c890662c83428ab17262281c51c6eb84e315"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "a3694cd73ad53e7411f57e9aff07e2d4b20b737e", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5e3e8a89f7279a2240b691752d0f850feab8929/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5e3e8a89f7279a2240b691752d0f850feab8929/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d5e3e8a89f7279a2240b691752d0f850feab8929", "patch": "@@ -36,7 +36,6 @@ use syntax_pos::{MultiSpan, Span};\n \n use std::cell::{Cell, RefCell};\n use std::collections::BTreeMap;\n-use std::fmt::Write;\n use std::{mem, ptr};\n \n /// Contains data for specific types of import directives.\n@@ -780,17 +779,14 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n \n             let msg = format!(\"`{}` import is ambiguous\", name);\n             let mut err = self.session.struct_span_err(span, &msg);\n-            let mut suggestion_choices = String::new();\n+            let mut suggestion_choices = vec![];\n             if external_crate.is_some() {\n-                write!(suggestion_choices, \"`::{}`\", name);\n+                suggestion_choices.push(format!(\"`::{}`\", name));\n                 err.span_label(span,\n                     format!(\"can refer to external crate `::{}`\", name));\n             }\n             if let Some(result) = results.module_scope {\n-                if !suggestion_choices.is_empty() {\n-                    suggestion_choices.push_str(\" or \");\n-                }\n-                write!(suggestion_choices, \"`self::{}`\", name);\n+                suggestion_choices.push(format!(\"`self::{}`\", name));\n                 if uniform_paths_feature {\n                     err.span_label(result.span,\n                         format!(\"can refer to `self::{}`\", name));\n@@ -803,7 +799,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 err.span_label(result.span,\n                     format!(\"shadowed by block-scoped `{}`\", name));\n             }\n-            err.help(&format!(\"write {} explicitly instead\", suggestion_choices));\n+            err.help(&format!(\"write {} explicitly instead\", suggestion_choices.join(\" or \")));\n             if uniform_paths_feature {\n                 err.note(\"relative `use` paths enabled by `#![feature(uniform_paths)]`\");\n             } else {"}]}