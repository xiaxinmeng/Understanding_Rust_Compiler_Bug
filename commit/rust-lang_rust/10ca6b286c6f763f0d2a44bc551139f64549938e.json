{"sha": "10ca6b286c6f763f0d2a44bc551139f64549938e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwY2E2YjI4NmM2Zjc2M2YwZDJhNDRiYzU1MTEzOWY2NDU0OTkzOGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-12T14:50:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-12T14:50:37Z"}, "message": "Merge #9231\n\n9231: minor: optimize r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "fcf4b661c6f656229e1e598ae3798705780ead39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcf4b661c6f656229e1e598ae3798705780ead39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10ca6b286c6f763f0d2a44bc551139f64549938e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgxMm9CRBK7hj4Ov3rIwAA1sIIAE3ab0CCkkf9Kv5Ft/fVgQ/v\nfcPVCqC47324skIoTwdE4XAnfXstALx/pN64VHW/+Yneos7eGmSoxFhu6vG619yf\nb1EfVj+pG5LV37xzSYNBzhIllgROZYMzsTFmVqnb6DGTdWnWL194uoi5TAwktpnM\ns+pU+OBVg4qY1+JkmUaVbwaIu5W+lDJZLeVJZ7erMs3lpWXXPWrp3HwGk3Zxs/tS\nGxNIPXbSe33fXqi9NkpX5cztXOgIq+AbHcnTJ/K8S8ihFk8OuPxIVMeS+enVmSvl\nQSwJyMGd8AtHsgl8z43S6GBdRukwQ+VWS0p6lW0fGORwQhnF7yHEPrSJkY8DA0c=\n=Y7Zm\n-----END PGP SIGNATURE-----\n", "payload": "tree fcf4b661c6f656229e1e598ae3798705780ead39\nparent f9e67d692d915b326bd20a4c487039ade377029b\nparent 6f0141a14026827edfe4ef046013001acd22d94d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623509437 +0000\ncommitter GitHub <noreply@github.com> 1623509437 +0000\n\nMerge #9231\n\n9231: minor: optimize r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10ca6b286c6f763f0d2a44bc551139f64549938e", "html_url": "https://github.com/rust-lang/rust/commit/10ca6b286c6f763f0d2a44bc551139f64549938e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10ca6b286c6f763f0d2a44bc551139f64549938e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9e67d692d915b326bd20a4c487039ade377029b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e67d692d915b326bd20a4c487039ade377029b", "html_url": "https://github.com/rust-lang/rust/commit/f9e67d692d915b326bd20a4c487039ade377029b"}, {"sha": "6f0141a14026827edfe4ef046013001acd22d94d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f0141a14026827edfe4ef046013001acd22d94d", "html_url": "https://github.com/rust-lang/rust/commit/6f0141a14026827edfe4ef046013001acd22d94d"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "0ffc91548196eae6d8b9b23c1822666e58973d9a", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10ca6b286c6f763f0d2a44bc551139f64549938e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/10ca6b286c6f763f0d2a44bc551139f64549938e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=10ca6b286c6f763f0d2a44bc551139f64549938e", "patch": "@@ -482,6 +482,7 @@ dependencies = [\n  \"hir_ty\",\n  \"itertools\",\n  \"log\",\n+ \"once_cell\",\n  \"profile\",\n  \"rustc-hash\",\n  \"smallvec\","}, {"sha": "7c148fd403287c2447f806ddf174391ef3880f92", "filename": "crates/hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10ca6b286c6f763f0d2a44bc551139f64549938e/crates%2Fhir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/10ca6b286c6f763f0d2a44bc551139f64549938e/crates%2Fhir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2FCargo.toml?ref=10ca6b286c6f763f0d2a44bc551139f64549938e", "patch": "@@ -16,6 +16,7 @@ either = \"1.5.3\"\n arrayvec = \"0.7\"\n itertools = \"0.10.0\"\n smallvec = \"1.4.0\"\n+once_cell = \"1\"\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }"}, {"sha": "8804e63c52fc6c98e564693d4101e93a61c406bb", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/10ca6b286c6f763f0d2a44bc551139f64549938e/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ca6b286c6f763f0d2a44bc551139f64549938e/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=10ca6b286c6f763f0d2a44bc551139f64549938e", "patch": "@@ -73,6 +73,7 @@ use hir_ty::{\n };\n use itertools::Itertools;\n use nameres::diagnostics::DefDiagnosticKind;\n+use once_cell::unsync::Lazy;\n use rustc_hash::FxHashSet;\n use stdx::{format_to, impl_from};\n use syntax::{\n@@ -1044,7 +1045,7 @@ impl Function {\n         }\n \n         let infer = db.infer(self.id.into());\n-        let (_, source_map) = db.body_with_source_map(self.id.into());\n+        let source_map = Lazy::new(|| db.body_with_source_map(self.id.into()).1);\n         for d in &infer.diagnostics {\n             match d {\n                 hir_ty::InferenceDiagnostic::NoSuchField { expr } => {\n@@ -1061,13 +1062,13 @@ impl Function {\n         }\n \n         for expr in hir_ty::diagnostics::missing_unsafe(db, self.id.into()) {\n-            match source_map.as_ref().expr_syntax(expr) {\n+            match source_map.expr_syntax(expr) {\n                 Ok(in_file) => {\n                     sink.push(MissingUnsafe { file: in_file.file_id, expr: in_file.value })\n                 }\n                 Err(SyntheticSyntax) => {\n                     // FIXME: The `expr` was desugared, report or assert that\n-                    // this dosen't happen.\n+                    // this doesn't happen.\n                 }\n             }\n         }"}, {"sha": "777f347b8b0fb801395a1d0e734a435511f1f998", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10ca6b286c6f763f0d2a44bc551139f64549938e/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ca6b286c6f763f0d2a44bc551139f64549938e/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=10ca6b286c6f763f0d2a44bc551139f64549938e", "patch": "@@ -13,7 +13,6 @@ use crate::{db::HirDatabase, InferenceResult, Interner, TyExt, TyKind};\n pub fn missing_unsafe(db: &dyn HirDatabase, def: DefWithBodyId) -> Vec<ExprId> {\n     let infer = db.infer(def);\n \n-    // let unsafe_expressions = ;\n     let is_unsafe = match def {\n         DefWithBodyId::FunctionId(it) => db.function_data(it).is_unsafe(),\n         DefWithBodyId::StaticId(_) | DefWithBodyId::ConstId(_) => false,\n@@ -29,12 +28,12 @@ pub fn missing_unsafe(db: &dyn HirDatabase, def: DefWithBodyId) -> Vec<ExprId> {\n         .collect()\n }\n \n-pub(crate) struct UnsafeExpr {\n+struct UnsafeExpr {\n     pub(crate) expr: ExprId,\n     pub(crate) inside_unsafe_block: bool,\n }\n \n-pub(crate) fn unsafe_expressions(\n+fn unsafe_expressions(\n     db: &dyn HirDatabase,\n     infer: &InferenceResult,\n     def: DefWithBodyId,"}]}