{"sha": "e8e6d9bd86c9cf685666718ca99e016275e1751b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZTZkOWJkODZjOWNmNjg1NjY2NzE4Y2E5OWUwMTYyNzVlMTc1MWI=", "commit": {"author": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-08-23T12:24:34Z"}, "committer": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-08-23T12:24:34Z"}, "message": "Rename to WrappingRange", "tree": {"sha": "e1980c954d4e2966fd869a24a070dfc0532bfcbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1980c954d4e2966fd869a24a070dfc0532bfcbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8e6d9bd86c9cf685666718ca99e016275e1751b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8e6d9bd86c9cf685666718ca99e016275e1751b", "html_url": "https://github.com/rust-lang/rust/commit/e8e6d9bd86c9cf685666718ca99e016275e1751b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8e6d9bd86c9cf685666718ca99e016275e1751b/comments", "author": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70433955f4531f2742ddeb986e6ac19a8fd4792f", "url": "https://api.github.com/repos/rust-lang/rust/commits/70433955f4531f2742ddeb986e6ac19a8fd4792f", "html_url": "https://github.com/rust-lang/rust/commit/70433955f4531f2742ddeb986e6ac19a8fd4792f"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "ec92bd686d2dfb845a530c96f164598db36842f3", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e8e6d9bd86c9cf685666718ca99e016275e1751b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8e6d9bd86c9cf685666718ca99e016275e1751b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=e8e6d9bd86c9cf685666718ca99e016275e1751b", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::{bug, span_bug};\n use rustc_target::abi::{\n-    AddressSpace, Align, AllocationRange, HasDataLayout, LayoutOf, Primitive, Scalar, Size,\n+    AddressSpace, Align, HasDataLayout, LayoutOf, Primitive, Scalar, Size, WrappingRange,\n };\n use tracing::debug;\n \n@@ -61,10 +61,7 @@ pub fn const_alloc_to_llvm(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) -> &'ll\n                 Pointer::new(alloc_id, Size::from_bytes(ptr_offset)),\n                 &cx.tcx,\n             ),\n-            &Scalar {\n-                value: Primitive::Pointer,\n-                valid_range: AllocationRange { start: 0, end: !0 },\n-            },\n+            &Scalar { value: Primitive::Pointer, valid_range: WrappingRange { start: 0, end: !0 } },\n             cx.type_i8p_ext(address_space),\n         ));\n         next_offset = offset + pointer_size;"}, {"sha": "6b628cb041b5706243c8aa6e22e56730f1f01f46", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e8e6d9bd86c9cf685666718ca99e016275e1751b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8e6d9bd86c9cf685666718ca99e016275e1751b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=e8e6d9bd86c9cf685666718ca99e016275e1751b", "patch": "@@ -499,7 +499,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         let scalar_unit = |value: Primitive| {\n             let bits = value.size(dl).bits();\n             assert!(bits <= 128);\n-            Scalar { value, valid_range: AllocationRange { start: 0, end: (!0 >> (128 - bits)) } }\n+            Scalar { value, valid_range: WrappingRange { start: 0, end: (!0 >> (128 - bits)) } }\n         };\n         let scalar = |value: Primitive| tcx.intern_layout(Layout::scalar(self, scalar_unit(value)));\n \n@@ -512,13 +512,13 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             // Basic scalars.\n             ty::Bool => tcx.intern_layout(Layout::scalar(\n                 self,\n-                Scalar { value: Int(I8, false), valid_range: AllocationRange { start: 0, end: 1 } },\n+                Scalar { value: Int(I8, false), valid_range: WrappingRange { start: 0, end: 1 } },\n             )),\n             ty::Char => tcx.intern_layout(Layout::scalar(\n                 self,\n                 Scalar {\n                     value: Int(I32, false),\n-                    valid_range: AllocationRange { start: 0, end: 0x10FFFF },\n+                    valid_range: WrappingRange { start: 0, end: 0x10FFFF },\n                 },\n             )),\n             ty::Int(ity) => scalar(Int(Integer::from_int_ty(dl, ity), true)),\n@@ -529,7 +529,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             }),\n             ty::FnPtr(_) => {\n                 let mut ptr = scalar_unit(Pointer);\n-                ptr.valid_range = AllocationRange { start: 1, end: ptr.valid_range.end };\n+                ptr.valid_range = WrappingRange { start: 1, end: ptr.valid_range.end };\n                 tcx.intern_layout(Layout::scalar(self, ptr))\n             }\n \n@@ -548,7 +548,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 let mut data_ptr = scalar_unit(Pointer);\n                 if !ty.is_unsafe_ptr() {\n                     data_ptr.valid_range =\n-                        AllocationRange { start: 1, end: data_ptr.valid_range.end };\n+                        WrappingRange { start: 1, end: data_ptr.valid_range.end };\n                 }\n \n                 let pointee = tcx.normalize_erasing_regions(param_env, pointee);\n@@ -565,7 +565,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     ty::Dynamic(..) => {\n                         let mut vtable = scalar_unit(Pointer);\n                         vtable.valid_range =\n-                            AllocationRange { start: 1, end: vtable.valid_range.end };\n+                            WrappingRange { start: 1, end: vtable.valid_range.end };\n                         vtable\n                     }\n                     _ => return Err(LayoutError::Unknown(unsized_part)),\n@@ -1261,7 +1261,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 let tag_mask = !0u128 >> (128 - ity.size().bits());\n                 let tag = Scalar {\n                     value: Int(ity, signed),\n-                    valid_range: AllocationRange {\n+                    valid_range: WrappingRange {\n                         start: (min as u128 & tag_mask),\n                         end: (max as u128 & tag_mask),\n                     },\n@@ -1545,7 +1545,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         let discr_int_ty = discr_int.to_ty(tcx, false);\n         let tag = Scalar {\n             value: Primitive::Int(discr_int, false),\n-            valid_range: AllocationRange { start: 0, end: max_discr },\n+            valid_range: WrappingRange { start: 0, end: max_discr },\n         };\n         let tag_layout = self.tcx.intern_layout(Layout::scalar(self, tag.clone()));\n         let tag_layout = TyAndLayout { ty: discr_int_ty, layout: tag_layout };"}, {"sha": "3ff149d6a7a25c0d7275627af091a97ad77b5d14", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8e6d9bd86c9cf685666718ca99e016275e1751b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8e6d9bd86c9cf685666718ca99e016275e1751b/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=e8e6d9bd86c9cf685666718ca99e016275e1751b", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_target::abi::{\n-    Abi, AllocationRange, LayoutOf, Scalar as ScalarAbi, Size, VariantIdx, Variants,\n+    Abi, LayoutOf, Scalar as ScalarAbi, Size, VariantIdx, Variants, WrappingRange,\n };\n \n use std::hash::Hash;\n@@ -184,8 +184,8 @@ fn write_path(out: &mut String, path: &[PathElem]) {\n \n // Formats such that a sentence like \"expected something {}\" to mean\n // \"expected something <in the given range>\" makes sense.\n-fn wrapping_range_format(r: AllocationRange, max_hi: u128) -> String {\n-    let AllocationRange { start: lo, end: hi } = r;\n+fn wrapping_range_format(r: WrappingRange, max_hi: u128) -> String {\n+    let WrappingRange { start: lo, end: hi } = r;\n     assert!(hi <= max_hi);\n     if lo > hi {\n         format!(\"less or equal to {}, or greater or equal to {}\", hi, lo)\n@@ -624,7 +624,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n     ) -> InterpResult<'tcx> {\n         let value = self.read_scalar(op)?;\n         let valid_range = scalar_layout.valid_range.clone();\n-        let AllocationRange { start: lo, end: hi } = valid_range;\n+        let WrappingRange { start: lo, end: hi } = valid_range;\n         // Determine the allowed range\n         // `max_hi` is as big as the size fits\n         let max_hi = u128::MAX >> (128 - op.layout.size.bits());"}, {"sha": "d29b731e4f1291f06d3f6ea2e159169c2dec3cee", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8e6d9bd86c9cf685666718ca99e016275e1751b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8e6d9bd86c9cf685666718ca99e016275e1751b/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=e8e6d9bd86c9cf685666718ca99e016275e1751b", "patch": "@@ -690,12 +690,12 @@ impl Primitive {\n /// semantics.\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n #[derive(HashStable_Generic)]\n-pub struct AllocationRange {\n+pub struct WrappingRange {\n     pub start: u128,\n     pub end: u128,\n }\n \n-impl AllocationRange {\n+impl WrappingRange {\n     /// Returns `true` if `v` is contained in the range.\n     #[inline]\n     pub fn contains(&self, v: u128) -> bool {\n@@ -723,13 +723,13 @@ pub struct Scalar {\n     // FIXME(eddyb) always use the shortest range, e.g., by finding\n     // the largest space between two consecutive valid values and\n     // taking everything else as the (shortest) valid range.\n-    pub valid_range: AllocationRange,\n+    pub valid_range: WrappingRange,\n }\n \n impl Scalar {\n     pub fn is_bool(&self) -> bool {\n         matches!(self.value, Int(I8, false))\n-            && matches!(self.valid_range, AllocationRange { start: 0, end: 1 })\n+            && matches!(self.valid_range, WrappingRange { start: 0, end: 1 })\n     }\n \n     /// Returns the valid range as a `x..y` range.\n@@ -1022,7 +1022,7 @@ impl Niche {\n             return None;\n         }\n \n-        Some((start, Scalar { value, valid_range: AllocationRange { start: v.start, end } }))\n+        Some((start, Scalar { value, valid_range: WrappingRange { start: v.start, end } }))\n     }\n }\n "}]}