{"sha": "67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d", "node_id": "C_kwDOAAsO6NoAKDY3YmNiZGUzYzUwYmRmNTBhNDhlYjBlNmE2NjRjYzhkMDIyNzZkOWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-17T19:07:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-17T19:07:01Z"}, "message": "Rollup merge of #90498 - joshtriplett:target-tier-policy-draft-updates, r=Mark-Simulacrum\n\nClarifications in the target tier policy\n\nWe've added several targets since the introduction of the target tier policy. Based on experiences of those adding such targets, and discussions around such additions, clarify the target tier policy to make it easier to follow and work with.\n\nNone of these changes substantively change the requirements on targets. (In some cases the changes do direct target submitters to follow specific process requirements for the addition of a target, such as how to respond to requirements, where to put target-specific documentation, or what should appear in that documentation. Those changes are procedural in nature and document the procedures we already direct people to follow.)\n\n- Clarify how to quote and respond to the target tier policy requirements. Several times, people have seemed unclear on how to respond to some of the policy requirements, particularly those that just state things the target developers must *not* do (e.g. not posting to PRs that break the target). Add a note that such requirements just need acknowledgement, nothing more.\n- Clarify dependency requirements in the face of cross-compilation. I previously phrased this confusingly in terms of \"host tools\", since that is the case where an exception applies (allowing proprietary target libraries commonly used by binaries for the target). Rephrase it to apply equally to cross-compilation. This doesn't change the net effect of the requirements, since other requirements already cover the dependencies of the Rust toolchain.\n- Clarify documentation about running binaries. The requirement for target documentation talks about \"running tests\", but tier 3 targets often don't support running the full testsuite, and in practice the documentation for how to run an individual binary may be more useful. Change \"running tests\" to \"running binaries, or running tests\".\n- Explain where to place target-specific documentation (a subdirectory of platform-support, with a link from the platform-support entry for the target).\n- Add a template for target-specific documentation.", "tree": {"sha": "391a0716f683a152a0596a22bd00d64c3250d872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/391a0716f683a152a0596a22bd00d64c3250d872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh5b5WCRBK7hj4Ov3rIwAAi7IIACIKfROeHlETtTrMzMIwyVhI\nf1s+3rvQblqKwGN94BV7uP+j1WtTk5ilsmGv+I2WPm9ERUOdsHxB8o18EraT8QY1\nPQnvEygZgM296SBrXwd4eoyx2N0Wg2QdAc7HzmsfBEg/9PB55YVHctKX4Kg2mj99\nV5lGejm79r4HM7kTS03DdglzrZ5YhhIvSEROqr/fnVfG/3Z8PWXuwSKEgeZ7871K\nK2Z4q6IK7ZMKrnqLC+dWCuwFBGjiXm6lRXUQ7C4zGrHVymc+fFb4VB+4lq61BHs3\nuBbnLHfGjXRBDHm8IfzVvN2QoUhShRiRuCA6eWvhNMO7Nx6hV3vW88Caog7Q+bY=\n=jFwl\n-----END PGP SIGNATURE-----\n", "payload": "tree 391a0716f683a152a0596a22bd00d64c3250d872\nparent ee5d8d37baaf5b5a81a98396952839c73ae41c68\nparent f863e4cc301c7ab7c97b86ad142474989789badc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642446421 +0100\ncommitter GitHub <noreply@github.com> 1642446421 +0100\n\nRollup merge of #90498 - joshtriplett:target-tier-policy-draft-updates, r=Mark-Simulacrum\n\nClarifications in the target tier policy\n\nWe've added several targets since the introduction of the target tier policy. Based on experiences of those adding such targets, and discussions around such additions, clarify the target tier policy to make it easier to follow and work with.\n\nNone of these changes substantively change the requirements on targets. (In some cases the changes do direct target submitters to follow specific process requirements for the addition of a target, such as how to respond to requirements, where to put target-specific documentation, or what should appear in that documentation. Those changes are procedural in nature and document the procedures we already direct people to follow.)\n\n- Clarify how to quote and respond to the target tier policy requirements. Several times, people have seemed unclear on how to respond to some of the policy requirements, particularly those that just state things the target developers must *not* do (e.g. not posting to PRs that break the target). Add a note that such requirements just need acknowledgement, nothing more.\n- Clarify dependency requirements in the face of cross-compilation. I previously phrased this confusingly in terms of \"host tools\", since that is the case where an exception applies (allowing proprietary target libraries commonly used by binaries for the target). Rephrase it to apply equally to cross-compilation. This doesn't change the net effect of the requirements, since other requirements already cover the dependencies of the Rust toolchain.\n- Clarify documentation about running binaries. The requirement for target documentation talks about \"running tests\", but tier 3 targets often don't support running the full testsuite, and in practice the documentation for how to run an individual binary may be more useful. Change \"running tests\" to \"running binaries, or running tests\".\n- Explain where to place target-specific documentation (a subdirectory of platform-support, with a link from the platform-support entry for the target).\n- Add a template for target-specific documentation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d", "html_url": "https://github.com/rust-lang/rust/commit/67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee5d8d37baaf5b5a81a98396952839c73ae41c68", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee5d8d37baaf5b5a81a98396952839c73ae41c68", "html_url": "https://github.com/rust-lang/rust/commit/ee5d8d37baaf5b5a81a98396952839c73ae41c68"}, {"sha": "f863e4cc301c7ab7c97b86ad142474989789badc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f863e4cc301c7ab7c97b86ad142474989789badc", "html_url": "https://github.com/rust-lang/rust/commit/f863e4cc301c7ab7c97b86ad142474989789badc"}], "stats": {"total": 96, "additions": 80, "deletions": 16}, "files": [{"sha": "53f7108aca36777e6dfdd5df9c072f7228bc4745", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d", "patch": "@@ -13,6 +13,7 @@\n - [JSON Output](json.md)\n - [Tests](tests/index.md)\n - [Platform Support](platform-support.md)\n+    - [Template for target-specific documentation](platform-support/TEMPLATE.md)\n     - [aarch64-apple-ios-sim](platform-support/aarch64-apple-ios-sim.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n     - [x86_64-unknown-none](platform-support/x86_64-unknown-none.md)"}, {"sha": "e64783fcf194abe4d401d78d6eb5529c88d79305", "filename": "src/doc/rustc/src/platform-support/TEMPLATE.md", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2FTEMPLATE.md", "raw_url": "https://github.com/rust-lang/rust/raw/67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2FTEMPLATE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2FTEMPLATE.md?ref=67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d", "patch": "@@ -0,0 +1,52 @@\n+# `target-name-here`\n+\n+**Tier: 3**\n+\n+One-sentence description of the target (e.g. CPU, OS)\n+\n+## Target maintainers\n+\n+- Some Person, `email@example.org`, https://github.com/...\n+\n+## Requirements\n+\n+Does the target support host tools, or only cross-compilation? Does the target\n+support std, or alloc (either with a default allocator, or if the user supplies\n+an allocator)?\n+\n+Document the expectations of binaries built for the target. Do they assume\n+specific minimum features beyond the baseline of the CPU/environment/etc? What\n+version of the OS or environment do they expect?\n+\n+Are there notable `#[target_feature(...)]` or `-C target-feature=` values that\n+programs may wish to use?\n+\n+What calling convention does `extern \"C\"` use on the target?\n+\n+What format do binaries use by default? ELF, PE, something else?\n+\n+## Building the target\n+\n+If Rust doesn't build the target by default, how can users build it? Can users\n+just add it to the `target` list in `config.toml`?\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for\n+this target, you will either need to build Rust with the target enabled (see\n+\"Building the target\" above), or build your own copy of `core` by using\n+`build-std` or similar.\n+\n+## Testing\n+\n+Does the target support running binaries, or do binaries have varying\n+expectations that prevent having a standard way to run them? If users can run\n+binaries, can they do so in some common emulator, or do they need native\n+hardware? Does the target support running the Rust testsuite?\n+\n+## Cross-compilation toolchains and C code\n+\n+Does the target support C code? If so, what toolchain target should users use\n+to build compatible C code? (This may match the target triple, or it may be a\n+toolchain for a different target triple, potentially with specific options or\n+caveats.)"}, {"sha": "53d0470fa8135c491b119abeaa858c96405e7953", "filename": "src/doc/rustc/src/target-tier-policy.md", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d/src%2Fdoc%2Frustc%2Fsrc%2Ftarget-tier-policy.md", "raw_url": "https://github.com/rust-lang/rust/raw/67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d/src%2Fdoc%2Frustc%2Fsrc%2Ftarget-tier-policy.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftarget-tier-policy.md?ref=67bcbde3c50bdf50a48eb0e6a664cc8d02276d9d", "patch": "@@ -62,13 +62,22 @@ not preclude an existing target's maintainers using issues (on the Rust\n repository or otherwise) to track requirements that have not yet been met, as\n appropriate; however, before officially proposing the introduction or promotion\n of a target, it should meet all of the necessary requirements. A target\n-proposal is encouraged to quote the corresponding requirements verbatim as part\n-of explaining how the target meets those requirements.\n+proposal must quote the corresponding requirements verbatim and respond to them\n+as part of explaining how the target meets those requirements. (For the\n+requirements that simply state that the target or the target developers must\n+not do something, it suffices to acknowledge the requirement.)\n \n For a list of all supported targets and their corresponding tiers (\"tier 3\",\n \"tier 2\", \"tier 2 with host tools\", \"tier 1\", or \"tier 1 with host tools\"), see\n [platform support](platform-support.md).\n \n+Several parts of this policy require providing target-specific documentation.\n+Such documentation should typically appear in a subdirectory of the\n+platform-support section of this rustc manual, with a link from the target's\n+entry in [platform support](platform-support.md). Use\n+[TEMPLATE.md](platform-support/TEMPLATE.md) as a base, and see other\n+documentation in that directory for examples.\n+\n Note that a target must have already received approval for the next lower tier,\n and spent a reasonable amount of time at that tier, before making a proposal\n for promotion to the next higher tier; this is true even if a target meets the\n@@ -139,17 +148,19 @@ approved by the appropriate team for that shared code before acceptance.\n     or binary. In other words, the introduction of the target must not cause a\n     user installing or running a version of Rust or the Rust tools to be\n     subject to any new license requirements.\n-  - If the target supports building host tools (such as `rustc` or `cargo`),\n-    those host tools must not depend on proprietary (non-FOSS) libraries, other\n-    than ordinary runtime libraries supplied by the platform and commonly used\n-    by other binaries built for the target. For instance, `rustc` built for the\n-    target may depend on a common proprietary C runtime library or console\n-    output library, but must not depend on a proprietary code generation\n-    library or code optimization library. Rust's license permits such\n-    combinations, but the Rust project has no interest in maintaining such\n-    combinations within the scope of Rust itself, even at tier 3.\n-  - Targets should not require proprietary (non-FOSS) components to link a\n-    functional binary or library.\n+  - Compiling, linking, and emitting functional binaries, libraries, or other\n+    code for the target (whether hosted on the target itself or cross-compiling\n+    from another target) must not depend on proprietary (non-FOSS) libraries.\n+    Host tools built for the target itself may depend on the ordinary runtime\n+    libraries supplied by the platform and commonly used by other applications\n+    built for the target, but those libraries must not be required for code\n+    generation for the target; cross-compilation to the target must not require\n+    such libraries at all. For instance, `rustc` built for the target may\n+    depend on a common proprietary C runtime library or console output library,\n+    but must not depend on a proprietary code generation library or code\n+    optimization library. Rust's license permits such combinations, but the\n+    Rust project has no interest in maintaining such combinations within the\n+    scope of Rust itself, even at tier 3.\n   - \"onerous\" here is an intentionally subjective term. At a minimum, \"onerous\"\n     legal/licensing terms include but are *not* limited to: non-disclosure\n     requirements, non-compete requirements, contributor license agreements\n@@ -184,9 +195,9 @@ approved by the appropriate team for that shared code before acceptance.\n   target not implementing those portions.\n - The target must provide documentation for the Rust community explaining how\n   to build for the target, using cross-compilation if possible. If the target\n-  supports running tests (even if they do not pass), the documentation must\n-  explain how to run tests for the target, using emulation if possible or\n-  dedicated hardware if necessary.\n+  supports running binaries, or running tests (even if they do not pass), the\n+  documentation must explain how to run such binaries or tests for the target,\n+  using emulation if possible or dedicated hardware if necessary.\n - Tier 3 targets must not impose burden on the authors of pull requests, or\n   other developers in the community, to maintain the target. In particular,\n   do not post comments (automated or manual) on a PR that derail or suggest a"}]}