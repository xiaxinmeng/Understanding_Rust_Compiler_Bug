{"sha": "4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOWQxOTA0MjNmNjdhMDAwNTNmNGI1Yzk4NjlmMGNjYmRmY2M2ODk=", "commit": {"author": {"name": "Alexis", "email": "a.beingessner@gmail.com", "date": "2015-02-18T15:04:30Z"}, "committer": {"name": "Alexis", "email": "a.beingessner@gmail.com", "date": "2015-02-18T19:01:47Z"}, "message": "make Extend use IntoIterator\n\nThis breaks all implementors of Extend, as they must now accept IntoIterator instead of Iterator. The fix for this is generally trivial (change the bound, and maybe call into_iter() on the argument to get the old argument).\n\nUsers of Extend should be unaffected because Iterators are IntoIterator.\n\n[breaking-change]", "tree": {"sha": "60afef47fda69fcaac8378825244a6cb0c41663a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60afef47fda69fcaac8378825244a6cb0c41663a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "html_url": "https://github.com/rust-lang/rust/commit/4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fa9de16df87ab844452821acff1b6c74e948327", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa9de16df87ab844452821acff1b6c74e948327", "html_url": "https://github.com/rust-lang/rust/commit/5fa9de16df87ab844452821acff1b6c74e948327"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "2f994e94ccc3ef7f6fb93b407f396040a150e8dc", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -677,7 +677,8 @@ impl<'a, T> IntoIterator for &'a BinaryHeap<T> where T: Ord {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Extend<T> for BinaryHeap<T> {\n-    fn extend<Iter: Iterator<Item=T>>(&mut self, iter: Iter) {\n+    fn extend<I: IntoIterator<Item=T>>(&mut self, iterable: I) {\n+        let iter = iterable.into_iter();\n         let (lower, _) = iter.size_hint();\n \n         self.reserve(lower);"}, {"sha": "c1d79d8204384b9f4c830cad20369a7944bab5c0", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -934,7 +934,8 @@ impl FromIterator<bool> for BitVec {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Extend<bool> for BitVec {\n     #[inline]\n-    fn extend<I: Iterator<Item=bool>>(&mut self, iterator: I) {\n+    fn extend<I: IntoIterator<Item=bool>>(&mut self, iterable: I) {\n+        let iterator = iterable.into_iter();\n         let (min, _) = iterator.size_hint();\n         self.reserve(min);\n         for element in iterator {\n@@ -1143,8 +1144,8 @@ impl FromIterator<usize> for BitSet {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Extend<usize> for BitSet {\n     #[inline]\n-    fn extend<I: Iterator<Item=usize>>(&mut self, iterator: I) {\n-        for i in iterator {\n+    fn extend<I: IntoIterator<Item=usize>>(&mut self, iter: I) {\n+        for i in iter {\n             self.insert(i);\n         }\n     }"}, {"sha": "9273d50db856b03dbb809e275cdb5b1bb2e33856", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -836,7 +836,7 @@ impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Ord, V> Extend<(K, V)> for BTreeMap<K, V> {\n     #[inline]\n-    fn extend<T: Iterator<Item=(K, V)>>(&mut self, iter: T) {\n+    fn extend<T: IntoIterator<Item=(K, V)>>(&mut self, iter: T) {\n         for (k, v) in iter {\n             self.insert(k, v);\n         }"}, {"sha": "d2241a674649910d0de76f26dde4a3fa8300e209", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -503,7 +503,7 @@ impl<'a, T> IntoIterator for &'a BTreeSet<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Extend<T> for BTreeSet<T> {\n     #[inline]\n-    fn extend<Iter: Iterator<Item=T>>(&mut self, iter: Iter) {\n+    fn extend<Iter: IntoIterator<Item=T>>(&mut self, iter: Iter) {\n         for elem in iter {\n             self.insert(elem);\n         }"}, {"sha": "3f8c0121fafb59fe6dfe9e098082ad7f5face1a9", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -268,8 +268,8 @@ impl<'a, E> IntoIterator for &'a EnumSet<E> where E: CLike {\n }\n \n impl<E:CLike> Extend<E> for EnumSet<E> {\n-    fn extend<I: Iterator<Item=E>>(&mut self, iterator: I) {\n-        for element in iterator {\n+    fn extend<I: IntoIterator<Item=E>>(&mut self, iter: I) {\n+        for element in iter {\n             self.insert(element);\n         }\n     }"}, {"sha": "0ec1371c73cbf2ea317e42a85210733ce4c3dca3", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -872,8 +872,8 @@ impl<'a, T> IntoIterator for &'a mut LinkedList<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> Extend<A> for LinkedList<A> {\n-    fn extend<T: Iterator<Item=A>>(&mut self, iterator: T) {\n-        for elt in iterator { self.push_back(elt); }\n+    fn extend<T: IntoIterator<Item=A>>(&mut self, iter: T) {\n+        for elt in iter { self.push_back(elt); }\n     }\n }\n "}, {"sha": "dc1158ecaf85e3b4b4a82dfa6120428850eecd63", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -21,7 +21,7 @@ use core::default::Default;\n use core::error::Error;\n use core::fmt;\n use core::hash;\n-use core::iter::FromIterator;\n+use core::iter::{IntoIterator, FromIterator};\n use core::mem;\n use core::ops::{self, Deref, Add, Index};\n use core::ptr;\n@@ -728,7 +728,8 @@ impl<'a> FromIterator<&'a str> for String {\n #[unstable(feature = \"collections\",\n            reason = \"waiting on Extend stabilization\")]\n impl Extend<char> for String {\n-    fn extend<I:Iterator<Item=char>>(&mut self, iterator: I) {\n+    fn extend<I: IntoIterator<Item=char>>(&mut self, iterable: I) {\n+        let iterator = iterable.into_iter();\n         let (lower_bound, _) = iterator.size_hint();\n         self.reserve(lower_bound);\n         for ch in iterator {\n@@ -740,7 +741,8 @@ impl Extend<char> for String {\n #[unstable(feature = \"collections\",\n            reason = \"waiting on Extend stabilization\")]\n impl<'a> Extend<&'a str> for String {\n-    fn extend<I: Iterator<Item=&'a str>>(&mut self, iterator: I) {\n+    fn extend<I: IntoIterator<Item=&'a str>>(&mut self, iterable: I) {\n+        let iterator = iterable.into_iter();\n         // A guess that at least one byte per iterator element will be needed.\n         let (lower_bound, _) = iterator.size_hint();\n         self.reserve(lower_bound);"}, {"sha": "e4b090e4dd7acf68214f2dfd9822d94079aec472", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -1480,7 +1480,8 @@ impl<'a, T> IntoIterator for &'a mut Vec<T> {\n #[unstable(feature = \"collections\", reason = \"waiting on Extend stability\")]\n impl<T> Extend<T> for Vec<T> {\n     #[inline]\n-    fn extend<I: Iterator<Item=T>>(&mut self, iterator: I) {\n+    fn extend<I: IntoIterator<Item=T>>(&mut self, iterable: I) {\n+        let iterator = iterable.into_iter();\n         let (lower, _) = iterator.size_hint();\n         self.reserve(lower);\n         for element in iterator {"}, {"sha": "cc01e800f60736bbb3ab4e3e0ccbb62eef529c71", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -1741,8 +1741,8 @@ impl<'a, T> IntoIterator for &'a mut VecDeque<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> Extend<A> for VecDeque<A> {\n-    fn extend<T: Iterator<Item=A>>(&mut self, iterator: T) {\n-        for elt in iterator {\n+    fn extend<T: IntoIterator<Item=A>>(&mut self, iter: T) {\n+        for elt in iter {\n             self.push_back(elt);\n         }\n     }"}, {"sha": "7085111d6a87bc26ce21de2c3616b3594d663b32", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -700,7 +700,7 @@ impl<'a, T> IntoIterator for &'a mut VecMap<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<V> Extend<(usize, V)> for VecMap<V> {\n-    fn extend<Iter: Iterator<Item=(usize, V)>>(&mut self, iter: Iter) {\n+    fn extend<I: IntoIterator<Item=(usize, V)>>(&mut self, iter: I) {\n         for (k, v) in iter {\n             self.insert(k, v);\n         }"}, {"sha": "2e9977cd3eb1d2e79d3c33217401b4f50e5100cf", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -147,7 +147,7 @@ impl<I: Iterator> IntoIterator for I {\n pub trait Extend<A> {\n     /// Extend a container with the elements yielded by an arbitrary iterator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn extend<T: Iterator<Item=A>>(&mut self, iterator: T);\n+    fn extend<T: IntoIterator<Item=A>>(&mut self, iterable: T);\n }\n \n /// An extension trait providing numerous methods applicable to all iterators."}, {"sha": "61b531054a07b3e2c0e47aa1b8c5444c6eab8a10", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -1570,7 +1570,7 @@ impl<K, V, S, H> Extend<(K, V)> for HashMap<K, V, S>\n           S: HashState<Hasher=H>,\n           H: hash::Hasher<Output=u64>\n {\n-    fn extend<T: Iterator<Item=(K, V)>>(&mut self, iter: T) {\n+    fn extend<T: IntoIterator<Item=(K, V)>>(&mut self, iter: T) {\n         for (k, v) in iter {\n             self.insert(k, v);\n         }"}, {"sha": "f5e57b78d2a63f5591c6b0af7bed4fd8b5cece25", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -636,7 +636,7 @@ impl<T, S, H> Extend<T> for HashSet<T, S>\n           S: HashState<Hasher=H>,\n           H: hash::Hasher<Output=u64>\n {\n-    fn extend<I: Iterator<Item=T>>(&mut self, iter: I) {\n+    fn extend<I: IntoIterator<Item=T>>(&mut self, iter: I) {\n         for k in iter {\n             self.insert(k);\n         }"}, {"sha": "f25cc83b93e1648aa96cba50e88b108eee2eebc1", "filename": "src/libstd/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -110,7 +110,7 @@ use core::prelude::*;\n use ascii::*;\n use borrow::BorrowFrom;\n use cmp;\n-use iter;\n+use iter::{self, IntoIterator};\n use mem;\n use ops::{self, Deref};\n use string::CowString;\n@@ -961,7 +961,7 @@ impl<'a, P: ?Sized + 'a> iter::FromIterator<&'a P> for PathBuf where P: AsPath {\n }\n \n impl<'a, P: ?Sized + 'a> iter::Extend<&'a P> for PathBuf where P: AsPath {\n-    fn extend<I: Iterator<Item = &'a P>>(&mut self, iter: I) {\n+    fn extend<I: IntoIterator<Item = &'a P>>(&mut self, iter: I) {\n         for p in iter {\n             self.push(p)\n         }"}, {"sha": "e7cb67c6287edd6661fd3c56c3a2d0355b9a348d", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -32,7 +32,7 @@ use borrow::Cow;\n use cmp;\n use fmt;\n use hash::{Hash, Writer, Hasher};\n-use iter::FromIterator;\n+use iter::{FromIterator, IntoIterator};\n use mem;\n use num::Int;\n use ops;\n@@ -368,7 +368,8 @@ impl FromIterator<CodePoint> for Wtf8Buf {\n /// This replaces surrogate code point pairs with supplementary code points,\n /// like concatenating ill-formed UTF-16 strings effectively would.\n impl Extend<CodePoint> for Wtf8Buf {\n-    fn extend<T: Iterator<Item=CodePoint>>(&mut self, iterator: T) {\n+    fn extend<T: IntoIterator<Item=CodePoint>>(&mut self, iterable: T) {\n+        let iterator = iterable.into_iter();\n         let (low, _high) = iterator.size_hint();\n         // Lower bound of one byte per code point (ASCII only)\n         self.bytes.reserve(low);"}, {"sha": "6a1fb4008ade027848d86f57f0ce9c544326d125", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a9d190423f67a00053f4b5c9869f0ccbdfcc689/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=4a9d190423f67a00053f4b5c9869f0ccbdfcc689", "patch": "@@ -11,7 +11,7 @@\n use self::SmallVectorRepr::*;\n use self::IntoIterRepr::*;\n \n-use std::iter::FromIterator;\n+use std::iter::{IntoIterator, FromIterator};\n use std::mem;\n use std::slice;\n use std::vec;\n@@ -38,7 +38,7 @@ impl<T> FromIterator<T> for SmallVector<T> {\n }\n \n impl<T> Extend<T> for SmallVector<T> {\n-    fn extend<I: Iterator<Item=T>>(&mut self, iter: I) {\n+    fn extend<I: IntoIterator<Item=T>>(&mut self, iter: I) {\n         for val in iter {\n             self.push(val);\n         }"}]}