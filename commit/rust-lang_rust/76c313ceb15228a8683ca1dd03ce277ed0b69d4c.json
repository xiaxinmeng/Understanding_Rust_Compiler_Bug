{"sha": "76c313ceb15228a8683ca1dd03ce277ed0b69d4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YzMxM2NlYjE1MjI4YTg2ODNjYTFkZDAzY2UyNzdlZDBiNjlkNGM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-13T12:31:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-13T21:05:48Z"}, "message": "Lift $dst outside the closure in write!\n\nIf you were writing to something along the lines of `self.foo` then with the new\nclosure rules it meant that you were borrowing `self` for the entirety of the\nclosure, meaning that you couldn't format other fields of `self` at the same\ntime as writing to a buffer contained in `self`.\n\nBy lifting the borrow outside of the closure the borrow checker can better\nunderstand that you're only borrowing one of the fields at a time. This had to\nuse type ascription as well in order to preserve trait object coercions.", "tree": {"sha": "2b51b38d1de8c7de497050b7111ad938c16db439", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b51b38d1de8c7de497050b7111ad938c16db439"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76c313ceb15228a8683ca1dd03ce277ed0b69d4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76c313ceb15228a8683ca1dd03ce277ed0b69d4c", "html_url": "https://github.com/rust-lang/rust/commit/76c313ceb15228a8683ca1dd03ce277ed0b69d4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76c313ceb15228a8683ca1dd03ce277ed0b69d4c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60bc76fb78d226078a901efd94f61463c0d93b9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/60bc76fb78d226078a901efd94f61463c0d93b9a", "html_url": "https://github.com/rust-lang/rust/commit/60bc76fb78d226078a901efd94f61463c0d93b9a"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "14ae7c9900c4693651ee87cefe8bba317d259e8d", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76c313ceb15228a8683ca1dd03ce277ed0b69d4c/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c313ceb15228a8683ca1dd03ce277ed0b69d4c/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=76c313ceb15228a8683ca1dd03ce277ed0b69d4c", "patch": "@@ -145,16 +145,18 @@ macro_rules! format(\n \n #[macro_export]\n macro_rules! write(\n-    ($dst:expr, $($arg:tt)*) => (\n-        format_args!(|args| { ::std::fmt::write($dst, args) }, $($arg)*)\n-    )\n+    ($dst:expr, $($arg:tt)*) => ({\n+        let dst: &mut ::std::io::Writer = $dst;\n+        format_args!(|args| { ::std::fmt::write(dst, args) }, $($arg)*)\n+    })\n )\n \n #[macro_export]\n macro_rules! writeln(\n-    ($dst:expr, $($arg:tt)*) => (\n-        format_args!(|args| { ::std::fmt::writeln($dst, args) }, $($arg)*)\n-    )\n+    ($dst:expr, $($arg:tt)*) => ({\n+        let dst: &mut ::std::io::Writer = $dst;\n+        format_args!(|args| { ::std::fmt::writeln(dst, args) }, $($arg)*)\n+    })\n )\n \n #[macro_export]"}, {"sha": "55bac0a0e078ced1c1e64f225761d2159d009d1b", "filename": "src/test/run-pass/colorful-write-macros.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/76c313ceb15228a8683ca1dd03ce277ed0b69d4c/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c313ceb15228a8683ca1dd03ce277ed0b69d4c/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcolorful-write-macros.rs?ref=76c313ceb15228a8683ca1dd03ce277ed0b69d4c", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(unused_must_use, dead_code)];\n+\n+use std::io::MemWriter;\n+\n+struct Foo<'a> {\n+    writer: &'a mut Writer,\n+    other: &'a str,\n+}\n+\n+fn borrowing_writer_from_struct_and_formatting_struct_field(foo: Foo) {\n+    write!(foo.writer, \"{}\", foo.other);\n+}\n+\n+pub fn main() {\n+    let mut w = MemWriter::new();\n+    write!(&mut w as &mut Writer, \"\");\n+    write!(&mut w, \"\"); // should coerce\n+}"}]}