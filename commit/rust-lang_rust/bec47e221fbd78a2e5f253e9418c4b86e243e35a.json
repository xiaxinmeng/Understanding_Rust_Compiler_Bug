{"sha": "bec47e221fbd78a2e5f253e9418c4b86e243e35a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYzQ3ZTIyMWZiZDc4YTJlNWYyNTNlOTQxOGM0Yjg2ZTI0M2UzNWE=", "commit": {"author": {"name": "Sergey Parilin", "email": "parilinsa@gmail.com", "date": "2019-10-14T15:39:40Z"}, "committer": {"name": "Sergey Parilin", "email": "parilinsa@gmail.com", "date": "2019-10-14T15:39:40Z"}, "message": "#1435 postfix completion for integer literals", "tree": {"sha": "f6669763a3a3fe2a6240f9bdb4f5837f9866d6ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6669763a3a3fe2a6240f9bdb4f5837f9866d6ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bec47e221fbd78a2e5f253e9418c4b86e243e35a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bec47e221fbd78a2e5f253e9418c4b86e243e35a", "html_url": "https://github.com/rust-lang/rust/commit/bec47e221fbd78a2e5f253e9418c4b86e243e35a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bec47e221fbd78a2e5f253e9418c4b86e243e35a/comments", "author": {"login": "pasa", "id": 980923, "node_id": "MDQ6VXNlcjk4MDkyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/980923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pasa", "html_url": "https://github.com/pasa", "followers_url": "https://api.github.com/users/pasa/followers", "following_url": "https://api.github.com/users/pasa/following{/other_user}", "gists_url": "https://api.github.com/users/pasa/gists{/gist_id}", "starred_url": "https://api.github.com/users/pasa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pasa/subscriptions", "organizations_url": "https://api.github.com/users/pasa/orgs", "repos_url": "https://api.github.com/users/pasa/repos", "events_url": "https://api.github.com/users/pasa/events{/privacy}", "received_events_url": "https://api.github.com/users/pasa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pasa", "id": 980923, "node_id": "MDQ6VXNlcjk4MDkyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/980923?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pasa", "html_url": "https://github.com/pasa", "followers_url": "https://api.github.com/users/pasa/followers", "following_url": "https://api.github.com/users/pasa/following{/other_user}", "gists_url": "https://api.github.com/users/pasa/gists{/gist_id}", "starred_url": "https://api.github.com/users/pasa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pasa/subscriptions", "organizations_url": "https://api.github.com/users/pasa/orgs", "repos_url": "https://api.github.com/users/pasa/repos", "events_url": "https://api.github.com/users/pasa/events{/privacy}", "received_events_url": "https://api.github.com/users/pasa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77f2dd96a122e59a8d8df8afb53a741df9b1af76", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f2dd96a122e59a8d8df8afb53a741df9b1af76", "html_url": "https://github.com/rust-lang/rust/commit/77f2dd96a122e59a8d8df8afb53a741df9b1af76"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "555cecb73a587c67ca572f987e5d94a730d3790c", "filename": "crates/ra_ide_api/src/completion/complete_postfix.rs", "status": "modified", "additions": 65, "deletions": 2, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/bec47e221fbd78a2e5f253e9418c4b86e243e35a/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec47e221fbd78a2e5f253e9418c4b86e243e35a/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=bec47e221fbd78a2e5f253e9418c4b86e243e35a", "patch": "@@ -8,7 +8,7 @@ use crate::{\n     CompletionItem,\n };\n use hir::{Ty, TypeCtor};\n-use ra_syntax::{ast::AstNode, TextRange};\n+use ra_syntax::{ast::AstNode, TextRange, TextUnit};\n use ra_text_edit::TextEditBuilder;\n \n fn postfix_snippet(ctx: &CompletionContext, label: &str, detail: &str, snippet: &str) -> Builder {\n@@ -42,7 +42,13 @@ fn is_bool_or_unknown(ty: Option<Ty>) -> bool {\n \n pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n     if let Some(dot_receiver) = &ctx.dot_receiver {\n-        let receiver_text = dot_receiver.syntax().text().to_string();\n+        let receiver_text = if ctx.dot_receiver_is_ambiguous_float_literal {\n+            let text = dot_receiver.syntax().text();\n+            let without_dot = ..text.len() - TextUnit::of_char('.');\n+            text.slice(without_dot).to_string()\n+        } else {\n+            dot_receiver.syntax().text().to_string()\n+        };\n         let receiver_ty = ctx.analyzer.type_of(ctx.db, &dot_receiver);\n         if is_bool_or_unknown(receiver_ty) {\n             postfix_snippet(ctx, \"if\", \"if expr {}\", &format!(\"if {} {{$0}}\", receiver_text))\n@@ -206,6 +212,63 @@ mod tests {\n         insert: \"&mut bar\",\n         detail: \"&mut expr\",\n     },\n+]\"###\n+        );\n+    }\n+\n+    #[test]\n+    fn postfix_completion_works_for_ambiguous_float_literal() {\n+        assert_debug_snapshot!(\n+            do_postfix_completion(\n+                r#\"\n+                fn main() {\n+                    42.<|>\n+                }\n+                \"#,\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"box\",\n+        source_range: [52; 52),\n+        delete: [49; 52),\n+        insert: \"Box::new(42)\",\n+        detail: \"Box::new(expr)\",\n+    },\n+    CompletionItem {\n+        label: \"dbg\",\n+        source_range: [52; 52),\n+        delete: [49; 52),\n+        insert: \"dbg!(42)\",\n+        detail: \"dbg!(expr)\",\n+    },\n+    CompletionItem {\n+        label: \"match\",\n+        source_range: [52; 52),\n+        delete: [49; 52),\n+        insert: \"match 42 {\\n    ${1:_} => {$0\\\\},\\n}\",\n+        detail: \"match expr {}\",\n+    },\n+    CompletionItem {\n+        label: \"not\",\n+        source_range: [52; 52),\n+        delete: [49; 52),\n+        insert: \"!42\",\n+        detail: \"!expr\",\n+    },\n+    CompletionItem {\n+        label: \"ref\",\n+        source_range: [52; 52),\n+        delete: [49; 52),\n+        insert: \"&42\",\n+        detail: \"&expr\",\n+    },\n+    CompletionItem {\n+        label: \"refm\",\n+        source_range: [52; 52),\n+        delete: [49; 52),\n+        insert: \"&mut 42\",\n+        detail: \"&mut expr\",\n+    },\n ]\"###\n         );\n     }"}, {"sha": "64cbc0f98234eb71486d97e1331b27c65266a144", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bec47e221fbd78a2e5f253e9418c4b86e243e35a/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec47e221fbd78a2e5f253e9418c4b86e243e35a/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=bec47e221fbd78a2e5f253e9418c4b86e243e35a", "patch": "@@ -38,6 +38,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) is_new_item: bool,\n     /// The receiver if this is a field or method access, i.e. writing something.<|>\n     pub(super) dot_receiver: Option<ast::Expr>,\n+    pub(super) dot_receiver_is_ambiguous_float_literal: bool,\n     /// If this is a call (method or function) in particular, i.e. the () are already there.\n     pub(super) is_call: bool,\n     pub(super) is_path_type: bool,\n@@ -80,6 +81,7 @@ impl<'a> CompletionContext<'a> {\n             is_call: false,\n             is_path_type: false,\n             has_type_args: false,\n+            dot_receiver_is_ambiguous_float_literal: false,\n         };\n         ctx.fill(&original_parse, position.offset);\n         Some(ctx)\n@@ -235,6 +237,16 @@ impl<'a> CompletionContext<'a> {\n                 .expr()\n                 .map(|e| e.syntax().text_range())\n                 .and_then(|r| find_node_with_range(original_file.syntax(), r));\n+            self.dot_receiver_is_ambiguous_float_literal = if let Some(ast::Expr::Literal(l)) =\n+                &self.dot_receiver\n+            {\n+                match l.kind() {\n+                    ast::LiteralKind::FloatNumber { suffix: _ } => l.token().text().ends_with('.'),\n+                    _ => false,\n+                }\n+            } else {\n+                false\n+            }\n         }\n         if let Some(method_call_expr) = ast::MethodCallExpr::cast(parent) {\n             // As above"}]}