{"sha": "1ce3a84a8fc6960a50c8f4376d12955026101228", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZTNhODRhOGZjNjk2MGE1MGM4ZjQzNzZkMTI5NTUwMjYxMDEyMjg=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-22T12:16:23Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-22T12:16:23Z"}, "message": "Make type_needs_drop accurate, get rid of type_has_pointers\n\nCloses #1209", "tree": {"sha": "5b6baec4891defa30da79b8deca5b62449da8d39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b6baec4891defa30da79b8deca5b62449da8d39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ce3a84a8fc6960a50c8f4376d12955026101228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce3a84a8fc6960a50c8f4376d12955026101228", "html_url": "https://github.com/rust-lang/rust/commit/1ce3a84a8fc6960a50c8f4376d12955026101228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ce3a84a8fc6960a50c8f4376d12955026101228/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "532642f425a4e3c05d848299aec2b95e66e7909c", "url": "https://api.github.com/repos/rust-lang/rust/commits/532642f425a4e3c05d848299aec2b95e66e7909c", "html_url": "https://github.com/rust-lang/rust/commit/532642f425a4e3c05d848299aec2b95e66e7909c"}], "stats": {"total": 71, "additions": 24, "deletions": 47}, "files": [{"sha": "1a867f28b7b165363a76a99f269ba60f6735ee81", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ce3a84a8fc6960a50c8f4376d12955026101228/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce3a84a8fc6960a50c8f4376d12955026101228/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1ce3a84a8fc6960a50c8f4376d12955026101228", "patch": "@@ -1423,8 +1423,8 @@ fn make_drop_glue(bcx: @block_ctxt, v0: ValueRef, t: ty::t) {\n             decr_refcnt_maybe_free(bcx, Load(bcx, box_cell), t)\n           }\n           _ {\n-            if ty::type_has_pointers(ccx.tcx, t) &&\n-                   ty::type_is_structural(ccx.tcx, t) {\n+            if ty::type_needs_drop(ccx.tcx, t) &&\n+               ty::type_is_structural(ccx.tcx, t) {\n                 iter_structural_ty(bcx, v0, t, drop_ty)\n             } else { bcx }\n           }\n@@ -1916,7 +1916,7 @@ fn call_cmp_glue(cx: @block_ctxt, lhs: ValueRef, rhs: ValueRef, t: ty::t,\n }\n \n fn take_ty(cx: @block_ctxt, v: ValueRef, t: ty::t) -> @block_ctxt {\n-    if ty::type_has_pointers(bcx_tcx(cx), t) {\n+    if ty::type_needs_drop(bcx_tcx(cx), t) {\n         ret call_tydesc_glue(cx, v, t, abi::tydesc_field_take_glue);\n     }\n     ret cx;\n@@ -1935,9 +1935,6 @@ fn drop_ty_immediate(bcx: @block_ctxt, v: ValueRef, t: ty::t) -> @block_ctxt {\n         ret free_ty(bcx, v, t);\n       }\n       ty::ty_box(_) { ret decr_refcnt_maybe_free(bcx, v, t); }\n-      // FIXME A ty_ptr pointing at something that needs drop glue is somehow\n-      // marked as needing drop glue. This is probably a mistake.\n-      ty::ty_ptr(_) { ret bcx; }\n     }\n }\n \n@@ -1954,7 +1951,7 @@ fn take_ty_immediate(bcx: @block_ctxt, v: ValueRef, t: ty::t) -> result {\n }\n \n fn free_ty(cx: @block_ctxt, v: ValueRef, t: ty::t) -> @block_ctxt {\n-    if ty::type_has_pointers(bcx_tcx(cx), t) {\n+    if ty::type_needs_drop(bcx_tcx(cx), t) {\n         ret call_tydesc_glue(cx, v, t, abi::tydesc_field_free_glue);\n     }\n     ret cx;"}, {"sha": "be472ff54ebd3b521ac3f3e415a0e7560c955127", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 20, "deletions": 40, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1ce3a84a8fc6960a50c8f4376d12955026101228/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce3a84a8fc6960a50c8f4376d12955026101228/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=1ce3a84a8fc6960a50c8f4376d12955026101228", "patch": "@@ -144,7 +144,6 @@ export type_kind;\n export type_err;\n export type_err_to_str;\n export type_has_dynamic_size;\n-export type_has_pointers;\n export type_needs_drop;\n export type_is_bool;\n export type_is_bot;\n@@ -213,7 +212,7 @@ type ctxt =\n       tcache: type_cache,\n       rcache: creader_cache,\n       short_names_cache: hashmap<t, @str>,\n-      has_pointer_cache: hashmap<t, bool>,\n+      needs_drop_cache: hashmap<t, bool>,\n       kind_cache: hashmap<t, ast::kind>,\n       ast_ty_to_ty_cache: hashmap<@ast::ty, option::t<t>>};\n \n@@ -400,7 +399,7 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map,\n           tcache: tcache,\n           rcache: mk_rcache(),\n           short_names_cache: map::mk_hashmap(ty::hash_ty, ty::eq_ty),\n-          has_pointer_cache: map::mk_hashmap(ty::hash_ty, ty::eq_ty),\n+          needs_drop_cache: map::mk_hashmap(ty::hash_ty, ty::eq_ty),\n           kind_cache: map::mk_hashmap(ty::hash_ty, ty::eq_ty),\n           ast_ty_to_ty_cache:\n               map::mk_hashmap(ast_util::hash_ty, ast_util::eq_ty)};\n@@ -925,63 +924,44 @@ fn type_is_immediate(cx: ctxt, ty: t) -> bool {\n         type_is_unique(cx, ty) || type_is_native(cx, ty);\n }\n \n-fn type_has_pointers(cx: ctxt, ty: t) -> bool {\n-    alt cx.has_pointer_cache.find(ty) {\n+fn type_needs_drop(cx: ctxt, ty: t) -> bool {\n+    alt cx.needs_drop_cache.find(ty) {\n       some(result) { ret result; }\n       none. {/* fall through */ }\n     }\n \n-    let result = false;\n-    alt struct(cx, ty) {\n+    let accum = false;\n+    let result = alt struct(cx, ty) {\n       // scalar types\n-      ty_nil. {/* no-op */ }\n-      ty_bot. {/* no-op */ }\n-      ty_bool. {/* no-op */ }\n-      ty_int. {/* no-op */ }\n-      ty_float. {/* no-op */ }\n-      ty_uint. {/* no-op */ }\n-      ty_machine(_) {/* no-op */ }\n-      ty_char. {/* no-op */ }\n-      ty_type. {/* no-op */ }\n-      ty_native(_) {/* no-op */ }\n+      ty_nil. | ty_bot. | ty_bool. | ty_int. | ty_float. | ty_uint. |\n+      ty_machine(_) | ty_char. | ty_type. | ty_native(_) | ty_ptr(_) { false }\n       ty_rec(flds) {\n-        for f: field in flds {\n-            if type_has_pointers(cx, f.mt.ty) { result = true; break; }\n-        }\n+        for f in flds { if type_needs_drop(cx, f.mt.ty) { accum = true; } }\n+        accum\n       }\n       ty_tup(elts) {\n-        for m in elts { if type_has_pointers(cx, m) { result = true; } }\n+        for m in elts { if type_needs_drop(cx, m) { accum = true; } }\n+        accum\n       }\n       ty_tag(did, tps) {\n         let variants = tag_variants(cx, did);\n-        for variant: variant_info in variants {\n-            for aty: t in variant.args {\n+        for variant in variants {\n+            for aty in variant.args {\n                 // Perform any type parameter substitutions.\n                 let arg_ty = substitute_type_params(cx, tps, aty);\n-                if type_has_pointers(cx, arg_ty) { result = true; break; }\n+                if type_needs_drop(cx, arg_ty) { accum = true; }\n             }\n-            if result { break; }\n+            if accum { break; }\n         }\n+        accum\n       }\n-      ty_res(did, inner, tps) {\n-        result =\n-            type_has_pointers(cx, substitute_type_params(cx, tps, inner));\n-      }\n-      _ { result = true; }\n-    }\n+      _ { true }\n+    };\n \n-    cx.has_pointer_cache.insert(ty, result);\n+    cx.needs_drop_cache.insert(ty, result);\n     ret result;\n }\n \n-fn type_needs_drop(cx: ctxt, ty: t) -> bool {\n-    ret alt struct(cx, ty) {\n-          ty_res(_, _, _) { true }\n-          ty_param(_, _) { true }\n-          _ { type_has_pointers(cx, ty) }\n-        };\n-}\n-\n fn kind_lteq(a: kind, b: kind) -> bool {\n     alt a {\n       kind_noncopyable. { true }"}]}