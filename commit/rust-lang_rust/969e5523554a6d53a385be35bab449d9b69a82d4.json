{"sha": "969e5523554a6d53a385be35bab449d9b69a82d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2OWU1NTIzNTU0YTZkNTNhMzg1YmUzNWJhYjQ0OWQ5YjY5YTgyZDQ=", "commit": {"author": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2021-01-22T20:00:55Z"}, "committer": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2021-01-23T16:11:51Z"}, "message": "Simplify and fix tests", "tree": {"sha": "9c952046ae2a30d596941ea4d0de98db809b1c5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c952046ae2a30d596941ea4d0de98db809b1c5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/969e5523554a6d53a385be35bab449d9b69a82d4", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAmAMSscACgkQztOS3gxI\nPQBAfQ//QKGpvGMO1zDlGZzA+Rd5yhgVXGHfInG763O3KR3yuLlPb52xw4pkxLLA\nSRp+TKtqOD6tKL3IPthVVJagtPLGI+6lbc43CEyeLJJF91N69TmBfz4ziSFUMzQh\ngiYUfodOeGYsHpQzDjKvqQ3uTKNsO1WwbYhkXd8H54TZJsN+XBX35xKLx1UKcZPn\nyLmmOYwCFRqjXpxKPTmeeg7nl+S3a56LwkQ27mkMh++ZRyiyL92krzQbIvhPI9l+\nQp5vCxNwZ/c6lvKZiURrfzwufya+5U+4eMDmeg6x+eKGNobLA/fW0Pj77Q0xcyOS\njEGaB5EN3AEJVoH1EHApz1syyZInY8QYBXSo+vRULPdj9UbSuZns5KTRlXW3Oys6\nPeEoUKOOVLRl5GSZwEOHZWDG9mPcoOVG18tL2olSMaqFoe1N4xrmD6obqlL4Le9B\nce4zBAVdfV66rOHY5CwdynD3JQA3KJrfFztHemN02HgBlFITfkj+PGDf0L0+LV3q\nO9RABrVFkkwq9rOgGoY755yMRa2RNt3tmhSdRNNz+C4nPP+IJe7HVsnHc/kJ24EH\nV682uPorVUI65XxduAPysAI50OzlHAhODXSB/fmIGyonf1cgoGpECBqyMMKMc9HI\n4eE8swP69ukQXztA0jUit0CRe7V1pZ8uqooDbDtifz97BLT9J9g=\n=fF3r\n-----END PGP SIGNATURE-----", "payload": "tree 9c952046ae2a30d596941ea4d0de98db809b1c5b\nparent 16deaec7f95b7478c9d9538f45ef79a0e4535b0f\nauthor oxalica <oxalicc@pm.me> 1611345655 +0800\ncommitter oxalica <oxalicc@pm.me> 1611418311 +0800\n\nSimplify and fix tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/969e5523554a6d53a385be35bab449d9b69a82d4", "html_url": "https://github.com/rust-lang/rust/commit/969e5523554a6d53a385be35bab449d9b69a82d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/969e5523554a6d53a385be35bab449d9b69a82d4/comments", "author": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16deaec7f95b7478c9d9538f45ef79a0e4535b0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/16deaec7f95b7478c9d9538f45ef79a0e4535b0f", "html_url": "https://github.com/rust-lang/rust/commit/16deaec7f95b7478c9d9538f45ef79a0e4535b0f"}], "stats": {"total": 91, "additions": 40, "deletions": 51}, "files": [{"sha": "2e56e06b4d0b15080b4f6ac4c194396ec7c667a7", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 40, "deletions": 51, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/969e5523554a6d53a385be35bab449d9b69a82d4/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/969e5523554a6d53a385be35bab449d9b69a82d4/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=969e5523554a6d53a385be35bab449d9b69a82d4", "patch": "@@ -288,75 +288,64 @@ fn test_retain() {\n }\n \n #[test]\n-fn test_retain_pred_panic() {\n-    use std::sync::atomic::{AtomicU64, Ordering};\n-\n-    struct Wrap<'a>(&'a AtomicU64, u64, bool);\n-\n-    impl Drop for Wrap<'_> {\n-        fn drop(&mut self) {\n-            self.0.fetch_or(self.1, Ordering::SeqCst);\n-        }\n-    }\n-\n-    let dropped = AtomicU64::new(0);\n+fn test_retain_pred_panic_with_hole() {\n+    let v = (0..5).map(Rc::new).collect::<Vec<_>>();\n+    catch_unwind(AssertUnwindSafe(|| {\n+        let mut v = v.clone();\n+        v.retain(|r| match **r {\n+            0 => true,\n+            1 => false,\n+            2 => true,\n+            _ => panic!(),\n+        });\n+    }))\n+    .unwrap_err();\n+    // Everything is dropped when predicate panicked.\n+    assert!(v.iter().all(|r| Rc::strong_count(r) == 1));\n+}\n \n-    let ret = std::panic::catch_unwind(|| {\n-        let mut v = vec![\n-            Wrap(&dropped, 1, false),\n-            Wrap(&dropped, 2, false),\n-            Wrap(&dropped, 4, false),\n-            Wrap(&dropped, 8, false),\n-            Wrap(&dropped, 16, false),\n-        ];\n-        v.retain(|w| match w.1 {\n-            1 => true,\n-            2 => false,\n-            4 => true,\n+#[test]\n+fn test_retain_pred_panic_no_hole() {\n+    let v = (0..5).map(Rc::new).collect::<Vec<_>>();\n+    catch_unwind(AssertUnwindSafe(|| {\n+        let mut v = v.clone();\n+        v.retain(|r| match **r {\n+            0 | 1 | 2 => true,\n             _ => panic!(),\n         });\n-    });\n-    assert!(ret.is_err());\n+    }))\n+    .unwrap_err();\n     // Everything is dropped when predicate panicked.\n-    assert_eq!(dropped.load(Ordering::SeqCst), 1 | 2 | 4 | 8 | 16);\n+    assert!(v.iter().all(|r| Rc::strong_count(r) == 1));\n }\n \n #[test]\n fn test_retain_drop_panic() {\n-    use std::sync::atomic::{AtomicU64, Ordering};\n-\n-    struct Wrap<'a>(&'a AtomicU64, u64);\n+    struct Wrap(Rc<i32>);\n \n-    impl Drop for Wrap<'_> {\n+    impl Drop for Wrap {\n         fn drop(&mut self) {\n-            if self.1 == 8 {\n+            if *self.0 == 3 {\n                 panic!();\n             }\n-            self.0.fetch_or(self.1, Ordering::SeqCst);\n         }\n     }\n \n-    let dropped = AtomicU64::new(0);\n-\n-    let ret = std::panic::catch_unwind(|| {\n-        let mut v = vec![\n-            Wrap(&dropped, 1),\n-            Wrap(&dropped, 2),\n-            Wrap(&dropped, 4),\n-            Wrap(&dropped, 8),\n-            Wrap(&dropped, 16),\n-        ];\n-        v.retain(|w| match w.1 {\n-            1 => true,\n-            2 => false,\n-            4 => true,\n-            8 => false,\n+    let v = (0..5).map(|x| Rc::new(x)).collect::<Vec<_>>();\n+    catch_unwind(AssertUnwindSafe(|| {\n+        let mut v = v.iter().map(|r| Wrap(r.clone())).collect::<Vec<_>>();\n+        v.retain(|w| match *w.0 {\n+            0 => true,\n+            1 => false,\n+            2 => true,\n+            3 => false, // Drop panic.\n             _ => true,\n         });\n-    });\n-    assert!(ret.is_err());\n+    }))\n+    .unwrap_err();\n     // Other elements are dropped when `drop` of one element panicked.\n-    assert_eq!(dropped.load(Ordering::SeqCst), 1 | 2 | 4 | 16);\n+    // The panicked wrapper also has its Rc dropped.\n+    assert!(v.iter().all(|r| Rc::strong_count(r) == 1));\n }\n \n #[test]"}]}