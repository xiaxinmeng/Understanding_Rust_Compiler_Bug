{"sha": "0cb2b6055979c28a7326c7a80c4cf3d51bfad487", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYjJiNjA1NTk3OWMyOGE3MzI2YzdhODBjNGNmM2Q1MWJmYWQ0ODc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:26:58Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:56:28Z"}, "message": "Don't print debug messages in release mode", "tree": {"sha": "289e2dfd0696785e87575804fffdb1db59a431dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289e2dfd0696785e87575804fffdb1db59a431dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cb2b6055979c28a7326c7a80c4cf3d51bfad487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb2b6055979c28a7326c7a80c4cf3d51bfad487", "html_url": "https://github.com/rust-lang/rust/commit/0cb2b6055979c28a7326c7a80c4cf3d51bfad487", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cb2b6055979c28a7326c7a80c4cf3d51bfad487/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b47c89de0ec4377e2cf8d0c48cb9d1952440ca65", "url": "https://api.github.com/repos/rust-lang/rust/commits/b47c89de0ec4377e2cf8d0c48cb9d1952440ca65", "html_url": "https://github.com/rust-lang/rust/commit/b47c89de0ec4377e2cf8d0c48cb9d1952440ca65"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "34f68526136869514835821087d508b5a0d42a59", "filename": "src/optimize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb2b6055979c28a7326c7a80c4cf3d51bfad487/src%2Foptimize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb2b6055979c28a7326c7a80c4cf3d51bfad487/src%2Foptimize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fmod.rs?ref=0cb2b6055979c28a7326c7a80c4cf3d51bfad487", "patch": "@@ -8,7 +8,7 @@ pub fn optimize_function<'tcx>(\n     ctx: &mut Context,\n     clif_comments: &mut crate::pretty_clif::CommentWriter,\n ) {\n-    self::stack2reg::optimize_function(ctx, clif_comments, format!(\"{:?}\", instance));\n+    self::stack2reg::optimize_function(ctx, clif_comments, instance);\n     #[cfg(debug_assertions)]\n     crate::pretty_clif::write_clif_file(tcx, \"stack2reg\", instance, &ctx.func, &*clif_comments, None);\n     crate::base::verify_func(tcx, &*clif_comments, &ctx.func);"}, {"sha": "210a8c5ec1684178c42bfe5e7f532672d2824dde", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0cb2b6055979c28a7326c7a80c4cf3d51bfad487/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb2b6055979c28a7326c7a80c4cf3d51bfad487/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=0cb2b6055979c28a7326c7a80c4cf3d51bfad487", "patch": "@@ -143,10 +143,10 @@ impl<'a> OptimizeContext<'a> {\n     }\n }\n \n-pub(super) fn optimize_function(\n+pub(super) fn optimize_function<T: std::fmt::Debug>(\n     ctx: &mut Context,\n     clif_comments: &mut crate::pretty_clif::CommentWriter,\n-    name: String, // FIXME remove\n+    name: T,\n ) {\n     combine_stack_addr_with_load_store(&mut ctx.func);\n \n@@ -156,7 +156,9 @@ pub(super) fn optimize_function(\n \n     remove_unused_stack_addr_and_stack_load(&mut opt_ctx);\n \n-    println!(\"stack slot usage: {:?}\", opt_ctx.stack_slot_usage_map);\n+    #[cfg(debug_assertions)] {\n+        println!(\"stack slot usage: {:?}\", opt_ctx.stack_slot_usage_map);\n+    }\n \n     for (stack_slot, users) in opt_ctx.stack_slot_usage_map.iter_mut() {\n         if users.stack_addr.is_empty().not() {\n@@ -171,6 +173,7 @@ pub(super) fn optimize_function(\n \n             let potential_stores = users.potential_stores_for_load(&opt_ctx.ctx, load);\n \n+            #[cfg(debug_assertions)]\n             for &store in &potential_stores {\n                 println!(\n                     \"Potential store -> load forwarding {} -> {} ({:?}, {:?})\",\n@@ -182,11 +185,19 @@ pub(super) fn optimize_function(\n             }\n \n             match *potential_stores {\n-                [] => println!(\"[{}] [BUG?] Reading uninitialized memory\", name),\n+                [] => {\n+                    #[cfg(debug_assertions)] {\n+                        println!(\"[{:?}] [BUG?] Reading uninitialized memory\", name);\n+                    }\n+                }\n                 [store] if spatial_overlap(&opt_ctx.ctx.func, store, load) == SpatialOverlap::Full && temporal_order(&opt_ctx.ctx, store, load) == TemporalOrder::DefinitivelyBefore => {\n                     // Only one store could have been the origin of the value.\n                     let stored_value = opt_ctx.ctx.func.dfg.inst_args(store)[0];\n-                    println!(\"Store to load forward {} -> {}\", store, load);\n+\n+                    #[cfg(debug_assertions)] {\n+                        println!(\"Store to load forward {} -> {}\", store, load);\n+                    }\n+\n                     users.change_load_to_alias(&mut opt_ctx.ctx.func, load, stored_value);\n                 }\n                 _ => {} // FIXME implement this\n@@ -196,6 +207,7 @@ pub(super) fn optimize_function(\n         for store in users.stack_store.clone().into_iter() {\n             let potential_loads = users.potential_loads_of_store(&opt_ctx.ctx, store);\n \n+            #[cfg(debug_assertions)]\n             for &load in &potential_loads {\n                 println!(\n                     \"Potential load from store {} <- {} ({:?}, {:?})\",\n@@ -209,7 +221,10 @@ pub(super) fn optimize_function(\n             if potential_loads.is_empty() {\n                 // Never loaded; can safely remove all stores and the stack slot.\n                 // FIXME also remove stores when there is always a next store before a load.\n-                println!(\"[{}] Remove dead stack store {} of {}\", name, opt_ctx.ctx.func.dfg.display_inst(store, None), stack_slot.0);\n+\n+                #[cfg(debug_assertions)] {\n+                    println!(\"[{:?}] Remove dead stack store {} of {}\", name, opt_ctx.ctx.func.dfg.display_inst(store, None), stack_slot.0);\n+                }\n                 users.remove_dead_store(&mut opt_ctx.ctx.func, store);\n             }\n         }\n@@ -219,7 +234,9 @@ pub(super) fn optimize_function(\n         }\n     }\n \n-    println!();\n+    #[cfg(debug_assertions)] {\n+        println!();\n+    }\n }\n \n fn combine_stack_addr_with_load_store(func: &mut Function) {\n@@ -275,6 +292,7 @@ fn remove_unused_stack_addr_and_stack_load(opt_ctx: &mut OptimizeContext) {\n         }\n     }\n \n+    #[cfg(debug_assertions)]\n     for inst in stack_addr_load_insts_users.keys() {\n         let mut is_recorded_stack_addr_or_stack_load = false;\n         for stack_slot_users in opt_ctx.stack_slot_usage_map.values() {"}]}