{"sha": "c60f9bf4c6d6ddd341c673b228b6aa1add3da62b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MGY5YmY0YzZkNmRkZDM0MWM2NzNiMjI4YjZhYTFhZGQzZGE2MmI=", "commit": {"author": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-11-04T22:59:11Z"}, "committer": {"name": "Seivan Heidari", "email": "seivan.heidari@icloud.com", "date": "2019-11-04T22:59:11Z"}, "message": "* Adding scope mapping configuration manifest in `package.json`\n* Loading configurable scope mappings from settings.\n* Updating Readme with `rust-analyzer.scopeMappings`.\n`rust-analyzer.scopeMappings` -- a scheme backed JSON object to tweak Rust Analyzer scopes to TextMate scopes.\n   ```jsonc\n    {\n        //Will autocomplete keys to available RA scopes.\n        \"keyword.unsafe\": [\"keyword\", \"keyword.control\"],\n        //Values are string | TextMateScope | [string | TextMateScope]\n        \"comments\": \"comment.block\"\n    }\n   ```", "tree": {"sha": "e411904c533ac37745397719bbfe983aeb21b372", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e411904c533ac37745397719bbfe983aeb21b372"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b", "html_url": "https://github.com/rust-lang/rust/commit/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b/comments", "author": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "seivan", "id": 55424, "node_id": "MDQ6VXNlcjU1NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/55424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/seivan", "html_url": "https://github.com/seivan", "followers_url": "https://api.github.com/users/seivan/followers", "following_url": "https://api.github.com/users/seivan/following{/other_user}", "gists_url": "https://api.github.com/users/seivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/seivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/seivan/subscriptions", "organizations_url": "https://api.github.com/users/seivan/orgs", "repos_url": "https://api.github.com/users/seivan/repos", "events_url": "https://api.github.com/users/seivan/events{/privacy}", "received_events_url": "https://api.github.com/users/seivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dad9bc6caad71e6aebb92ad9883c08d30431e9b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/dad9bc6caad71e6aebb92ad9883c08d30431e9b1", "html_url": "https://github.com/rust-lang/rust/commit/dad9bc6caad71e6aebb92ad9883c08d30431e9b1"}], "stats": {"total": 219, "additions": 151, "deletions": 68}, "files": [{"sha": "42742c0e6fb37eff40c67e1f83ba93034d171a2d", "filename": "docs/user/README.md", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b/docs%2Fuser%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b/docs%2Fuser%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2FREADME.md?ref=c60f9bf4c6d6ddd341c673b228b6aa1add3da62b", "patch": "@@ -82,7 +82,16 @@ host.\n \n ### Settings\n \n-* `rust-analyzer.highlightingOn`: enables experimental syntax highlighting\n+* `rust-analyzer.highlightingOn`: enables experimental syntax highlighting.\n+* `rust-analyzer.scopeMappings` -- a scheme backed JSON object to tweak Rust Analyzer scopes to TextMate scopes.\n+   ```jsonc\n+    {\n+        //Will autocomplete keys to available RA scopes. \n+        \"keyword.unsafe\": [\"keyword\", \"keyword.control\"],\n+        //Values are string | TextMateScope | [string | TextMateScope]\n+        \"comments\": \"comment.block\"\n+    }\n+   ```\n * `rust-analyzer.enableEnhancedTyping`: by default, rust-analyzer intercepts\n   `Enter` key to make it easier to continue comments. Note that it may conflict with VIM emulation plugin.\n * `rust-analyzer.raLspServerPath`: path to `ra_lsp_server` executable\n@@ -101,7 +110,7 @@ host.\n * `rust-analyzer.trace.cargo-watch`: enables cargo-watch logging\n * `RUST_SRC_PATH`: environment variable that overwrites the sysroot\n * `rust-analyzer.featureFlags` -- a JSON object to tweak fine-grained behavior:\n-   ```js\n+   ```jsonc\n    {\n        // Show diagnostics produced by rust-analyzer itself.\n        \"lsp.diagnostics\": true,"}, {"sha": "35f2f1e62c6082e309dded8db6f125188a5acc55", "filename": "editors/code/package.json", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=c60f9bf4c6d6ddd341c673b228b6aa1add3da62b", "patch": "@@ -167,6 +167,68 @@\n                     \"default\": false,\n                     \"description\": \"Highlight Rust code (overrides built-in syntax highlighting)\"\n                 },\n+                \"rust-analyzer.scopeMappings\": {\n+                    \"type\": \"object\",\n+                    \"definitions\": {},\n+                    \"properties\": {\n+                        \"comment\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"string\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"keyword\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"keyword.control\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"keyword.unsafe\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"function\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"parameter\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"constant\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"type\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"builtin\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"text\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"attribute\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"literal\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"macro\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"variable\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"variable.mut\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"field\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"module\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        }\n+                    },\n+                    \"additionalProperties\": false,\n+                    \"description\": \"Mapping Rust Analyzer scopes to TextMateRule scopes list.\"\n+                },\n                 \"rust-analyzer.rainbowHighlightingOn\": {\n                     \"type\": \"boolean\",\n                     \"default\": false,\n@@ -488,4 +550,4 @@\n             }\n         ]\n     }\n-}\n+}\n\\ No newline at end of file"}, {"sha": "234a390acffa0a893511ba9ef999c8dbe5a0e18a", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=c60f9bf4c6d6ddd341c673b228b6aa1add3da62b", "patch": "@@ -48,11 +48,13 @@ export class Config {\n         const config = vscode.workspace.getConfiguration('rust-analyzer');\n         \n         Server.highlighter.removeHighlights();\n-        scopes.load()\n-        scopesMapper.load()\n-        if (config.has('highlightingOn')) {\n \n+        if (config.has('highlightingOn')) {\n             this.highlightingOn = config.get('highlightingOn') as boolean;\n+            if (this.highlightingOn) {\n+                scopes.load();\n+                scopesMapper.load();    \n+            }\n         }\n \n         if (config.has('rainbowHighlightingOn')) {\n@@ -61,9 +63,6 @@ export class Config {\n             ) as boolean;\n         }\n \n-        if (!this.highlightingOn && Server) {\n-            Server.highlighter.removeHighlights();\n-        }\n \n         if (config.has('enableEnhancedTyping')) {\n             this.enableEnhancedTyping = config.get("}, {"sha": "1c67e5dc3878ebd6bf74bb1b64f5f704298ab23f", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=c60f9bf4c6d6ddd341c673b228b6aa1add3da62b", "patch": "@@ -1,7 +1,7 @@\n import seedrandom = require('seedrandom');\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n-import * as scopes from './scopes'\n+import * as scopes from './scopes';\n import * as scopesMapper from './scopes_mapper';\n \n import { Server } from './server';\n@@ -25,35 +25,35 @@ function fancify(seed: string, shade: 'light' | 'dark') {\n     return `hsl(${h},${s}%,${l}%)`;\n }\n \n+\n function createDecorationFromTextmate(themeStyle: scopes.TextMateRuleSettings): vscode.TextEditorDecorationType {\n-    const options: vscode.DecorationRenderOptions = {}\n-    options.rangeBehavior = vscode.DecorationRangeBehavior.OpenOpen\n+    const options: vscode.DecorationRenderOptions = {};\n+    options.rangeBehavior = vscode.DecorationRangeBehavior.OpenOpen;\n     if (themeStyle.foreground) {\n-        options.color = themeStyle.foreground\n+        options.color = themeStyle.foreground;\n     }\n     if (themeStyle.background) {\n-        options.backgroundColor = themeStyle.background\n+        options.backgroundColor = themeStyle.background;\n     }\n     if (themeStyle.fontStyle) {\n-        const parts: string[] = themeStyle.fontStyle.split(' ')\n+        const parts: string[] = themeStyle.fontStyle.split(' ');\n         parts.forEach((part) => {\n             switch (part) {\n                 case 'italic':\n-                    options.fontStyle = 'italic'\n-                    break\n+                    options.fontStyle = 'italic';\n+                    break;\n                 case 'bold':\n-                    options.fontWeight = 'bold'\n-\n-                    break\n+                    options.fontWeight = 'bold';\n+                    break;\n                 case 'underline':\n-                    options.textDecoration = 'underline'\n-                    break\n+                    options.textDecoration = 'underline';\n+                    break;\n                 default:\n-                    break\n+                    break;\n             }\n         })\n     }\n-    return vscode.window.createTextEditorDecorationType(options)\n+    return vscode.window.createTextEditorDecorationType(options);\n }\n \n export class Highlighter {\n@@ -66,7 +66,7 @@ export class Highlighter {\n             textDecoration?: string\n         ): [string, vscode.TextEditorDecorationType] => {\n \n-            const rule = scopesMapper.toRule(tag, scopes.find)\n+            const rule = scopesMapper.toRule(tag, scopes.find);\n \n             if (rule) {\n                 const decor = createDecorationFromTextmate(rule);"}, {"sha": "a6138fad05c6478e3b5de45eda6831a93e8e64a4", "filename": "editors/code/src/scopes.ts", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b/editors%2Fcode%2Fsrc%2Fscopes.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b/editors%2Fcode%2Fsrc%2Fscopes.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fscopes.ts?ref=c60f9bf4c6d6ddd341c673b228b6aa1add3da62b", "patch": "@@ -1,41 +1,41 @@\n-import * as fs from 'fs'\n-import * as path from 'path'\n-import * as vscode from 'vscode'\n+import * as fs from 'fs';\n+import * as path from 'path';\n+import * as vscode from 'vscode';\n \n \n \n export interface TextMateRule {\n-    scope: string | string[]\n-    settings: TextMateRuleSettings\n+    scope: string | string[];\n+    settings: TextMateRuleSettings;\n }\n \n export interface TextMateRuleSettings {\n-    foreground: string | undefined\n-    background: string | undefined\n-    fontStyle: string | undefined\n+    foreground: string | undefined;\n+    background: string | undefined;\n+    fontStyle: string | undefined;\n }\n \n // Current theme colors\n-const rules = new Map<string, TextMateRuleSettings>()\n+const rules = new Map<string, TextMateRuleSettings>();\n \n export function find(scope: string): TextMateRuleSettings | undefined {\n-    return rules.get(scope)\n+    return rules.get(scope);\n }\n \n // Load all textmate scopes in the currently active theme\n export function load() {\n     // Remove any previous theme\n-    rules.clear()\n+    rules.clear();\n     // Find out current color theme\n-    const themeName = vscode.workspace.getConfiguration('workbench').get('colorTheme')\n+    const themeName = vscode.workspace.getConfiguration('workbench').get('colorTheme');\n \n     if (typeof themeName !== 'string') {\n         // console.warn('workbench.colorTheme is', themeName)\n-        return\n+        return;\n     }\n     // Try to load colors from that theme\n     try {\n-        loadThemeNamed(themeName)\n+        loadThemeNamed(themeName);\n     } catch (e) {\n         // console.warn('failed to load theme', themeName, e)\n     }\n@@ -44,7 +44,7 @@ export function load() {\n function filterThemeExtensions(extension: vscode.Extension<any>): boolean {\n     return extension.extensionKind === vscode.ExtensionKind.UI &&\n         extension.packageJSON.contributes &&\n-        extension.packageJSON.contributes.themes\n+        extension.packageJSON.contributes.themes;\n }\n \n \n@@ -59,17 +59,17 @@ function loadThemeNamed(themeName: string) {\n                 .filter((element: any) => (element.id || element.label) === themeName)\n                 .map((element: any) => path.join(extension.extensionPath, element.path))\n                 .concat(list)\n-        }, Array<string>())\n+        }, Array<string>());\n \n \n-    themePaths.forEach(loadThemeFile)\n+    themePaths.forEach(loadThemeFile);\n \n     const tokenColorCustomizations: [any] = [vscode.workspace.getConfiguration('editor').get('tokenColorCustomizations')]\n \n     tokenColorCustomizations\n         .filter(custom => custom && custom.textMateRules)\n         .map(custom => custom.textMateRules)\n-        .forEach(loadColors)\n+        .forEach(loadColors);\n \n }\n \n@@ -79,56 +79,56 @@ function loadThemeFile(themePath: string) {\n         .filter(isFile)\n         .map(readFileText)\n         .map(parseJSON)\n-        .filter(theme => theme)\n+        .filter(theme => theme);\n \n     themeContent\n         .filter(theme => theme.tokenColors)\n         .map(theme => theme.tokenColors)\n-        .forEach(loadColors)\n+        .forEach(loadColors);\n \n     themeContent\n         .filter(theme => theme.include)\n         .map(theme => path.join(path.dirname(themePath), theme.include))\n-        .forEach(loadThemeFile)\n+        .forEach(loadThemeFile);\n }\n \n function mergeRuleSettings(defaultSetting: TextMateRuleSettings | undefined, override: TextMateRuleSettings): TextMateRuleSettings {\n-    if (defaultSetting === undefined) { return override }\n-    const mergedRule = defaultSetting\n+    if (defaultSetting === undefined) { return override; }\n+    const mergedRule = defaultSetting;\n \n-    mergedRule.background = override.background || defaultSetting.background\n-    mergedRule.foreground = override.foreground || defaultSetting.foreground\n-    mergedRule.fontStyle = override.fontStyle || defaultSetting.foreground\n+    mergedRule.background = override.background || defaultSetting.background;\n+    mergedRule.foreground = override.foreground || defaultSetting.foreground;\n+    mergedRule.fontStyle = override.fontStyle || defaultSetting.foreground;\n \n     return mergedRule\n }\n \n function updateRules(scope: string, updatedSettings: TextMateRuleSettings): void {\n     [rules.get(scope)]\n         .map(settings => mergeRuleSettings(settings, updatedSettings))\n-        .forEach(settings => rules.set(scope, settings))\n+        .forEach(settings => rules.set(scope, settings));\n }\n \n function loadColors(textMateRules: TextMateRule[]): void {\n     textMateRules.forEach(rule => {\n         if (typeof rule.scope === 'string') {\n-            updateRules(rule.scope, rule.settings)\n+            updateRules(rule.scope, rule.settings);\n         }\n         else if (rule.scope instanceof Array) {\n-            rule.scope.forEach(scope => updateRules(scope, rule.settings))\n+            rule.scope.forEach(scope => updateRules(scope, rule.settings));\n         }\n     })\n }\n \n function isFile(filePath: string): boolean {\n-    return [filePath].map(fs.statSync).every(stat => stat.isFile())\n+    return [filePath].map(fs.statSync).every(stat => stat.isFile());\n }\n \n function readFileText(filePath: string): string {\n-    return fs.readFileSync(filePath, 'utf8')\n+    return fs.readFileSync(filePath, 'utf8');\n }\n \n // Might need to replace with JSONC if a theme contains comments. \n function parseJSON(content: string): any {\n-    return JSON.parse(content)\n+    return JSON.parse(content);\n }\n\\ No newline at end of file"}, {"sha": "7056a8e24bcd35d54464d1c126eccd6bc14a884e", "filename": "editors/code/src/scopes_mapper.ts", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c60f9bf4c6d6ddd341c673b228b6aa1add3da62b/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts?ref=c60f9bf4c6d6ddd341c673b228b6aa1add3da62b", "patch": "@@ -1,10 +1,9 @@\n-import * as vscode from 'vscode'\n-import { TextMateRuleSettings } from './scopes'\n+import * as vscode from 'vscode';\n+import { TextMateRuleSettings } from './scopes';\n \n \n \n-\n-let mappings = new Map<string, string[]>()\n+let mappings = new Map<string, string[]>();\n \n \n const defaultMapping = new Map<string, string[]>([\n@@ -27,25 +26,39 @@ const defaultMapping = new Map<string, string[]>([\n     ['field', ['variable.object.property', 'meta.field.declaration', 'meta.definition.property', 'variable.other',]],\n     ['module', ['entity.name.section', 'entity.other']]\n ]\n-)\n+);\n \n // Temporary exported for debugging for now. \n export function find(scope: string): string[] {\n-    return mappings.get(scope) || []\n+    return mappings.get(scope) || [];\n }\n \n export function toRule(scope: string, intoRule: (scope: string) => TextMateRuleSettings | undefined): TextMateRuleSettings | undefined {\n-    return find(scope).map(intoRule).filter(rule => rule !== undefined)[0]\n+    return find(scope).map(intoRule).filter(rule => rule !== undefined)[0];\n+}\n+\n+\n+function isString(value: any): value is string {\n+    return typeof value === 'string';\n+}\n+\n+function isArrayOfString(value: any): value is string[] {\n+    return Array.isArray(value) && value.every(item => isString(item));\n }\n \n \n export function load() {\n-    const configuration = vscode.workspace\n+    const rawConfig: { [key: string]: any } = vscode.workspace\n         .getConfiguration('rust-analyzer')\n-        .get('scopeMappings') as Map<string, string[]> | undefined\n-        || new Map()\n+        .get('scopeMappings')\n+        || {};\n \n-    mappings = new Map([...Array.from(defaultMapping.entries()), ...Array.from(configuration.entries())])\n+    mappings = Object\n+        .entries(rawConfig)\n+        .filter(([_, value]) => isString(value) || isArrayOfString(value))\n+        .reduce((list, [key, value]: [string, string | string[]]) => {\n+            return list.set(key, isString(value) ? [value] : value);\n \n+        }, defaultMapping);\n \n }\n\\ No newline at end of file"}]}