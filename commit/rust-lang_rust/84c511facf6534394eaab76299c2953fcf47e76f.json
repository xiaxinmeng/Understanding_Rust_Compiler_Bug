{"sha": "84c511facf6534394eaab76299c2953fcf47e76f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0YzUxMWZhY2Y2NTM0Mzk0ZWFhYjc2Mjk5YzI5NTNmY2Y0N2U3NmY=", "commit": {"author": {"name": "lyj", "email": "lyj@everton", "date": "2021-06-02T05:31:23Z"}, "committer": {"name": "lyj", "email": "lyj@everton", "date": "2021-06-03T08:25:27Z"}, "message": "rc_mutex", "tree": {"sha": "f27a63fbd417bc82db94919d67071de9158d5114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f27a63fbd417bc82db94919d67071de9158d5114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84c511facf6534394eaab76299c2953fcf47e76f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84c511facf6534394eaab76299c2953fcf47e76f", "html_url": "https://github.com/rust-lang/rust/commit/84c511facf6534394eaab76299c2953fcf47e76f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84c511facf6534394eaab76299c2953fcf47e76f/comments", "author": null, "committer": null, "parents": [{"sha": "5f746a1c2ae130ef84704c941b962075af6693ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f746a1c2ae130ef84704c941b962075af6693ac", "html_url": "https://github.com/rust-lang/rust/commit/5f746a1c2ae130ef84704c941b962075af6693ac"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "acf00825b7a83fc85b1fe1388bd1c3c8263a940e", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/84c511facf6534394eaab76299c2953fcf47e76f/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c511facf6534394eaab76299c2953fcf47e76f/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=84c511facf6534394eaab76299c2953fcf47e76f", "patch": "@@ -7,6 +7,7 @@ mod redundant_allocation;\n mod type_complexity;\n mod utils;\n mod vec_box;\n+mod rc_mutex;\n \n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n@@ -250,12 +251,19 @@ declare_clippy_lint! {\n     \"usage of very complex types that might be better factored into `type` definitions\"\n }\n \n+declare_clippy_lint! {\n+    /// TODO\n+    pub RC_MUTEX,\n+    restriction,\n+    \"usage of Mutex inside Rc\"\n+}\n+\n pub struct Types {\n     vec_box_size_threshold: u64,\n     type_complexity_threshold: u64,\n }\n \n-impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION, RC_BUFFER, TYPE_COMPLEXITY]);\n+impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION, RC_BUFFER, TYPE_COMPLEXITY,RC_MUTEX]);\n \n impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {\n@@ -375,6 +383,7 @@ impl Types {\n                     triggered |= vec_box::check(cx, hir_ty, qpath, def_id, self.vec_box_size_threshold);\n                     triggered |= option_option::check(cx, hir_ty, qpath, def_id);\n                     triggered |= linked_list::check(cx, hir_ty, def_id);\n+                    triggered |= rc_mutex::check(cx, hir_ty, qpath, def_id);\n \n                     if triggered {\n                         return;"}, {"sha": "b53b55fd01cad700ac73fbcbb6ed030103b073e1", "filename": "clippy_lints/src/types/rc_mutex.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/84c511facf6534394eaab76299c2953fcf47e76f/clippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84c511facf6534394eaab76299c2953fcf47e76f/clippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs?ref=84c511facf6534394eaab76299c2953fcf47e76f", "patch": "@@ -0,0 +1,39 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::{ get_qpath_generic_tys,is_ty_param_diagnostic_item};\n+use clippy_utils::source::snippet_with_applicability;\n+use rustc_errors::Applicability;\n+use rustc_hir::{self as hir, def_id::DefId, QPath};\n+use rustc_lint::LateContext;\n+use rustc_span::symbol::sym;\n+// use rustc_middle::ty::Adt;\n+\n+use super::RC_MUTEX;\n+\n+pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {\n+    if cx.tcx.is_diagnostic_item(sym::Rc, def_id) {\n+        if let Some(ty) = is_ty_param_diagnostic_item(cx, qpath, sym!(mutex_type)) {\n+            let mut applicability = Applicability::MachineApplicable;\n+\n+            let inner_span = match get_qpath_generic_tys(qpath).skip(1).next() {\n+                Some(ty) => ty.span,\n+                None => return false,\n+            };\n+\n+            span_lint_and_sugg(\n+                cx,\n+                RC_MUTEX,\n+                hir_ty.span,\n+                \"you seem to be trying to use `Rc<Mutex<T>>`. Consider using `Rc<RefCell<T>>`\",\n+                \"try\",\n+                format!(\n+                    \"Rc<RefCell<{}>>\",\n+                    snippet_with_applicability(cx, inner_span, \"..\", &mut applicability)\n+                ),\n+                applicability,\n+            );\n+            return true;\n+        }\n+    }\n+\n+    false\n+}"}]}