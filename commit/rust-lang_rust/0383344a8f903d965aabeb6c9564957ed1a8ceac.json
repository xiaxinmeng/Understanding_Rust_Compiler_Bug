{"sha": "0383344a8f903d965aabeb6c9564957ed1a8ceac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzODMzNDRhOGY5MDNkOTY1YWFiZWI2Yzk1NjQ5NTdlZDFhOGNlYWM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-07T22:14:44Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-08T01:09:28Z"}, "message": "Detect duplicate glob imports arising from glob cycles", "tree": {"sha": "5a610ca6d3fc1c2f2fe7b1086b667b6f196103b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a610ca6d3fc1c2f2fe7b1086b667b6f196103b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0383344a8f903d965aabeb6c9564957ed1a8ceac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0383344a8f903d965aabeb6c9564957ed1a8ceac", "html_url": "https://github.com/rust-lang/rust/commit/0383344a8f903d965aabeb6c9564957ed1a8ceac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0383344a8f903d965aabeb6c9564957ed1a8ceac/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "470ca1c3ff33cd046f71a5453f8f520da4cd387e", "url": "https://api.github.com/repos/rust-lang/rust/commits/470ca1c3ff33cd046f71a5453f8f520da4cd387e", "html_url": "https://github.com/rust-lang/rust/commit/470ca1c3ff33cd046f71a5453f8f520da4cd387e"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "2f2c5b77dd0baec292702a1517e1b00c2af7ace0", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0383344a8f903d965aabeb6c9564957ed1a8ceac/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0383344a8f903d965aabeb6c9564957ed1a8ceac/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=0383344a8f903d965aabeb6c9564957ed1a8ceac", "patch": "@@ -275,7 +275,6 @@ impl<'a> ::ModuleS<'a> {\n     // Define the name or return the existing binding if there is a collision.\n     pub fn try_define_child(&self, name: Name, ns: Namespace, binding: NameBinding<'a>)\n                             -> Result<(), &'a NameBinding<'a>> {\n-        if self.resolutions.borrow_state() != ::std::cell::BorrowState::Unused { return Ok(()); }\n         self.update_resolution(name, ns, |resolution| {\n             resolution.try_define(self.arenas.alloc_name_binding(binding))\n         })\n@@ -318,15 +317,20 @@ impl<'a> ::ModuleS<'a> {\n     fn update_resolution<T, F>(&self, name: Name, ns: Namespace, update: F) -> T\n         where F: FnOnce(&mut NameResolution<'a>) -> T\n     {\n-        let mut resolution = &mut *self.resolution(name, ns).borrow_mut();\n-        let was_known = resolution.binding().is_some();\n+        let (new_binding, t) = {\n+            let mut resolution = &mut *self.resolution(name, ns).borrow_mut();\n+            let was_known = resolution.binding().is_some();\n \n-        let t = update(resolution);\n-        if !was_known {\n-            if let Some(binding) = resolution.binding() {\n-                self.define_in_glob_importers(name, ns, binding);\n+            let t = update(resolution);\n+\n+            if was_known { return t; }\n+            match resolution.binding() {\n+                Some(binding) => (binding, t),\n+                None => return t,\n             }\n-        }\n+        };\n+\n+        self.define_in_glob_importers(name, ns, new_binding);\n         t\n     }\n \n@@ -646,11 +650,12 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         // Add to target_module's glob_importers\n         target_module.glob_importers.borrow_mut().push((module_, directive));\n \n-        for (&(name, ns), resolution) in target_module.resolutions.borrow().iter() {\n-            if let Some(binding) = resolution.borrow().binding() {\n-                if binding.defined_with(DefModifiers::IMPORTABLE | DefModifiers::PUBLIC) {\n-                    let _ = module_.try_define_child(name, ns, directive.import(binding, None));\n-                }\n+        let bindings = target_module.resolutions.borrow().iter().filter_map(|(name, resolution)| {\n+            resolution.borrow().binding().map(|binding| (*name, binding))\n+        }).collect::<Vec<_>>();\n+        for ((name, ns), binding) in bindings {\n+            if binding.defined_with(DefModifiers::IMPORTABLE | DefModifiers::PUBLIC) {\n+                let _ = module_.try_define_child(name, ns, directive.import(binding, None));\n             }\n         }\n "}]}