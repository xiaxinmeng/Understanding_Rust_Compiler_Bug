{"sha": "a9a77671f2405e0cb65160c17268beec5114e259", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YTc3NjcxZjI0MDVlMGNiNjUxNjBjMTcyNjhiZWVjNTExNGUyNTk=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T13:32:34Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T13:32:34Z"}, "message": "Move item specific completion tests", "tree": {"sha": "24b2c740f849b17ccab5d1bfa2575c9fea840897", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24b2c740f849b17ccab5d1bfa2575c9fea840897"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9a77671f2405e0cb65160c17268beec5114e259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a77671f2405e0cb65160c17268beec5114e259", "html_url": "https://github.com/rust-lang/rust/commit/a9a77671f2405e0cb65160c17268beec5114e259", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9a77671f2405e0cb65160c17268beec5114e259/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9df848c58079a710869dcde2692466cc4b0ac78e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9df848c58079a710869dcde2692466cc4b0ac78e", "html_url": "https://github.com/rust-lang/rust/commit/9df848c58079a710869dcde2692466cc4b0ac78e"}], "stats": {"total": 182, "additions": 111, "deletions": 71}, "files": [{"sha": "c5cd3c2f7e9c507109d0bce41ddb6761434021ba", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a9a77671f2405e0cb65160c17268beec5114e259/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a77671f2405e0cb65160c17268beec5114e259/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=a9a77671f2405e0cb65160c17268beec5114e259", "patch": "@@ -387,22 +387,6 @@ fn quux() -> i32 {\n         );\n     }\n \n-    #[test]\n-    fn test_where_keyword() {\n-        check(\n-            r\"trait A $0\",\n-            expect![[r#\"\n-                kw where\n-            \"#]],\n-        );\n-        check(\n-            r\"impl A $0\",\n-            expect![[r#\"\n-                kw where\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn no_keyword_completion_in_comments() {\n         cov_mark::check!(no_keyword_completion_in_comments);\n@@ -479,22 +463,6 @@ fn foo() {\n         )\n     }\n \n-    #[test]\n-    fn before_field() {\n-        check(\n-            r#\"\n-struct Foo {\n-    $0\n-    pub f: i32,\n-}\n-\"#,\n-            expect![[r#\"\n-                kw pub(crate)\n-                kw pub\n-            \"#]],\n-        )\n-    }\n-\n     #[test]\n     fn skip_struct_initializer() {\n         cov_mark::check!(no_keyword_completion_in_record_lit);"}, {"sha": "1c864c0e708b60bbd8968b68bbbab7a91df76b0e", "filename": "crates/ide_completion/src/completions/mod_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9a77671f2405e0cb65160c17268beec5114e259/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a77671f2405e0cb65160c17268beec5114e259/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=a9a77671f2405e0cb65160c17268beec5114e259", "patch": "@@ -141,11 +141,11 @@ fn module_chain_to_containing_module_file(\n \n #[cfg(test)]\n mod tests {\n-    use crate::{tests::filtered_completion_list, CompletionKind};\n+    use crate::tests::completion_list;\n     use expect_test::{expect, Expect};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = filtered_completion_list(ra_fixture, CompletionKind::Magic);\n+        let actual = completion_list(ra_fixture);\n         expect.assert_eq(&actual);\n     }\n "}, {"sha": "88f4d940d0a04a6f9c2316fca3c0c4d90c3fe810", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a9a77671f2405e0cb65160c17268beec5114e259/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a77671f2405e0cb65160c17268beec5114e259/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=a9a77671f2405e0cb65160c17268beec5114e259", "patch": "@@ -555,26 +555,6 @@ fn f() {m::$0}\n         );\n     }\n \n-    #[test]\n-    fn completes_in_assoc_item_list() {\n-        check(\n-            r#\"\n-#[macro_export]\n-macro_rules! foo { () => {} }\n-mod bar {}\n-\n-struct MyStruct {}\n-impl MyStruct {\n-    crate::$0\n-}\n-\"#,\n-            expect![[r##\"\n-                md bar\n-                ma foo!(\u2026) #[macro_export] macro_rules! foo\n-            \"##]],\n-        );\n-    }\n-\n     #[test]\n     fn completes_reexported_items_under_correct_name() {\n         check("}, {"sha": "1864bfbccbda96ebd9b3f2ccd0952cbcd3f925d8", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a9a77671f2405e0cb65160c17268beec5114e259/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a77671f2405e0cb65160c17268beec5114e259/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=a9a77671f2405e0cb65160c17268beec5114e259", "patch": "@@ -712,23 +712,6 @@ fn f() {}\n         )\n     }\n \n-    #[test]\n-    fn completes_target_type_or_trait_in_impl_block() {\n-        check(\n-            r#\"\n-trait MyTrait {}\n-struct MyStruct {}\n-\n-impl My$0\n-\"#,\n-            expect![[r#\"\n-                sp Self\n-                tt MyTrait\n-                st MyStruct\n-            \"#]],\n-        )\n-    }\n-\n     #[test]\n     fn completes_types_and_const_in_arg_list() {\n         check("}, {"sha": "1ea6017ce44193b5005aa20dfc23b66fbc36cf78", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9a77671f2405e0cb65160c17268beec5114e259/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a77671f2405e0cb65160c17268beec5114e259/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=a9a77671f2405e0cb65160c17268beec5114e259", "patch": "@@ -6,6 +6,7 @@\n \n mod item_list;\n mod use_tree;\n+mod items;\n \n use hir::{PrefixKind, Semantics};\n use ide_db::{"}, {"sha": "dd4ba3864e985ccaf9d9814d9f5e4da7648ed540", "filename": "crates/ide_completion/src/tests/items.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/a9a77671f2405e0cb65160c17268beec5114e259/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a77671f2405e0cb65160c17268beec5114e259/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs?ref=a9a77671f2405e0cb65160c17268beec5114e259", "patch": "@@ -0,0 +1,108 @@\n+//! Completions tests for item specifics overall.\n+//!\n+//! Except for use items which are tested in [super::use_tree] and mod declarations with are tested\n+//! in [crate::completions::mod_].\n+use expect_test::{expect, Expect};\n+\n+use crate::tests::completion_list;\n+\n+fn check(ra_fixture: &str, expect: Expect) {\n+    let base = r#\"#[rustc_builtin_macro]\n+pub macro Clone {}\n+enum Enum { Variant }\n+struct Struct {}\n+#[macro_export]\n+macro_rules! foo {}\n+mod bar {}\n+const CONST: () = ();\n+trait Trait {}\n+\"#;\n+    let actual = completion_list(&format!(\"{}{}\", base, ra_fixture));\n+    expect.assert_eq(&actual)\n+}\n+\n+#[test]\n+fn target_type_or_trait_in_impl_block() {\n+    // FIXME: should not complete `Self`\n+    check(\n+        r#\"\n+impl My$0\n+\"#,\n+        expect![[r##\"\n+            sp Self\n+            tt Trait\n+            en Enum\n+            st Struct\n+            md bar\n+            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+            bt u32\n+            bt bool\n+            bt u8\n+            bt isize\n+            bt u16\n+            bt u64\n+            bt u128\n+            bt f32\n+            bt i128\n+            bt i16\n+            bt str\n+            bt i64\n+            bt char\n+            bt f64\n+            bt i32\n+            bt i8\n+            bt usize\n+        \"##]],\n+    )\n+}\n+\n+#[test]\n+fn after_trait_name_in_trait_def() {\n+    // FIXME: should only complete `where`\n+    check(\n+        r\"trait A $0\",\n+        expect![[r##\"\n+            kw where\n+            sn tmod (Test module)\n+            sn tfn (Test function)\n+            sn macro_rules\n+            md bar\n+            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n+            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n+        \"##]],\n+    );\n+}\n+\n+#[test]\n+fn after_trait_or_target_name_in_impl() {\n+    // FIXME: should only complete `for` and `where`\n+    check(\n+        r\"impl A $0\",\n+        expect![[r##\"\n+            kw where\n+            sn tmod (Test module)\n+            sn tfn (Test function)\n+            sn macro_rules\n+            md bar\n+            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n+            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n+        \"##]],\n+    );\n+}\n+\n+#[test]\n+fn before_record_field() {\n+    check(\n+        r#\"\n+struct Foo {\n+    $0\n+    pub f: i32,\n+}\n+\"#,\n+        expect![[r#\"\n+            kw pub(crate)\n+            kw pub\n+        \"#]],\n+    )\n+}"}]}