{"sha": "9205f3d8e33fab70c89d0e283442c4b4d8b63b35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMDVmM2Q4ZTMzZmFiNzBjODlkMGUyODM0NDJjNGI0ZDhiNjNiMzU=", "commit": {"author": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-02-14T07:15:27Z"}, "committer": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-02-14T07:15:27Z"}, "message": "macro-commas test cleanup", "tree": {"sha": "b2303dcb11442d6d09221046cd2d3f4f119253d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2303dcb11442d6d09221046cd2d3f4f119253d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9205f3d8e33fab70c89d0e283442c4b4d8b63b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9205f3d8e33fab70c89d0e283442c4b4d8b63b35", "html_url": "https://github.com/rust-lang/rust/commit/9205f3d8e33fab70c89d0e283442c4b4d8b63b35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9205f3d8e33fab70c89d0e283442c4b4d8b63b35/comments", "author": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7c6dc6c0600eaee4d149c63dd3cf1faa00a098f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c6dc6c0600eaee4d149c63dd3cf1faa00a098f", "html_url": "https://github.com/rust-lang/rust/commit/b7c6dc6c0600eaee4d149c63dd3cf1faa00a098f"}], "stats": {"total": 24, "additions": 5, "deletions": 19}, "files": [{"sha": "2a434009e134faf612afaf554300062ba76ef935", "filename": "src/test/run-pass/macro-comma-behavior.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9205f3d8e33fab70c89d0e283442c4b4d8b63b35/src%2Ftest%2Frun-pass%2Fmacro-comma-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9205f3d8e33fab70c89d0e283442c4b4d8b63b35/src%2Ftest%2Frun-pass%2Fmacro-comma-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-comma-behavior.rs?ref=9205f3d8e33fab70c89d0e283442c4b4d8b63b35", "patch": "@@ -44,12 +44,12 @@ fn debug_assert_1arg() {\n // make sure we don't accidentally forward to `write!(\"text\")`\n #[cfg(std)]\n #[test]\n-fn writeln_2arg() {\n+fn writeln_1arg() {\n     use fmt::Write;\n \n     let mut s = String::new();\n-    writeln!(&mut s, \"hi\",).unwrap();\n-    assert_eq!(&s, \"hi\\n\");\n+    writeln!(&mut s,).unwrap();\n+    assert_eq!(&s, \"\\n\");\n }\n \n // A number of format_args-like macros have special-case treatment"}, {"sha": "7d3f16728b27940bb9ea37f3bab540d67d9a90e5", "filename": "src/test/run-pass/macro-comma-support.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9205f3d8e33fab70c89d0e283442c4b4d8b63b35/src%2Ftest%2Frun-pass%2Fmacro-comma-support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9205f3d8e33fab70c89d0e283442c4b4d8b63b35/src%2Ftest%2Frun-pass%2Fmacro-comma-support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-comma-support.rs?ref=9205f3d8e33fab70c89d0e283442c4b4d8b63b35", "patch": "@@ -8,15 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// This is a comprehensive test of invocations with and without\n+// This is meant to be a comprehensive test of invocations with/without\n // trailing commas (or other, similar optionally-trailing separators).\n // Every macro is accounted for, even those not tested in this file.\n // (There will be a note indicating why).\n-//\n-// The expectation is for this to be updated as new macros are added,\n-// or as functionality is added to existing macros.\n-//\n-// (FIXME: (please discuss in PR) is the above expectation reasonable?)\n \n // std and core are both tested because they may contain separate\n // implementations for some macro_rules! macros as an implementation\n@@ -245,16 +240,7 @@ fn println() {\n     println!(\"hello {}\", \"world\",);\n }\n \n-// FIXME: select! (please discuss in PR)\n-//\n-// Test cases for select! are obnoxiously large, see here:\n-//\n-//     https://github.com/ExpHP/rust-macro-comma-test/blob/0062e75e01ab/src/main.rs#L190-L250\n-//\n-// and due to other usability issues described there, it is unclear to me that it is\n-// going anywhere in its current state. This is a job far too big for a macro_rules! macro,\n-// and for as long as it exists in this form it will have many many problems far worse than\n-// just lack of trailing comma support.\n+// select! is too troublesome and unlikely to be stabilized\n \n // stringify! is N/A\n "}]}