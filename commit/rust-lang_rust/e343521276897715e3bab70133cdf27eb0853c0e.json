{"sha": "e343521276897715e3bab70133cdf27eb0853c0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNDM1MjEyNzY4OTc3MTVlM2JhYjcwMTMzY2RmMjdlYjA4NTNjMGU=", "commit": {"author": {"name": "David Wood", "email": "devel@dtwood.uk", "date": "2017-12-23T01:06:17Z"}, "committer": {"name": "David Wood", "email": "devel@dtwood.uk", "date": "2017-12-23T01:06:17Z"}, "message": "Add assert_eq! to special-cased macros\n\nAllows for this form of assert_eq! macros:\n```rust\nassert_eq!(\n    left.id, right.id,\n    \"IDs are not equal: {:?} {:?}\",\n    left, right\n);\n```\n\nAlso allows for assert! macros to have the format arguments split across\nmultiple lines even if the assert condition is not simple:\n```rust\nassert!(\n    result >= 42,\n    \"The result must be at least 42: {:?}\",\n    result, result.code, context\n);\n```", "tree": {"sha": "8d2617f78d62dfdea6c2cee8ecce21986ed02542", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d2617f78d62dfdea6c2cee8ecce21986ed02542"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e343521276897715e3bab70133cdf27eb0853c0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e343521276897715e3bab70133cdf27eb0853c0e", "html_url": "https://github.com/rust-lang/rust/commit/e343521276897715e3bab70133cdf27eb0853c0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e343521276897715e3bab70133cdf27eb0853c0e/comments", "author": {"login": "dtwood", "id": 1207240, "node_id": "MDQ6VXNlcjEyMDcyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1207240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtwood", "html_url": "https://github.com/dtwood", "followers_url": "https://api.github.com/users/dtwood/followers", "following_url": "https://api.github.com/users/dtwood/following{/other_user}", "gists_url": "https://api.github.com/users/dtwood/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtwood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtwood/subscriptions", "organizations_url": "https://api.github.com/users/dtwood/orgs", "repos_url": "https://api.github.com/users/dtwood/repos", "events_url": "https://api.github.com/users/dtwood/events{/privacy}", "received_events_url": "https://api.github.com/users/dtwood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtwood", "id": 1207240, "node_id": "MDQ6VXNlcjEyMDcyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1207240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtwood", "html_url": "https://github.com/dtwood", "followers_url": "https://api.github.com/users/dtwood/followers", "following_url": "https://api.github.com/users/dtwood/following{/other_user}", "gists_url": "https://api.github.com/users/dtwood/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtwood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtwood/subscriptions", "organizations_url": "https://api.github.com/users/dtwood/orgs", "repos_url": "https://api.github.com/users/dtwood/repos", "events_url": "https://api.github.com/users/dtwood/events{/privacy}", "received_events_url": "https://api.github.com/users/dtwood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5725f4197470b4e916837042535dc3cb06b119fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5725f4197470b4e916837042535dc3cb06b119fa", "html_url": "https://github.com/rust-lang/rust/commit/5725f4197470b4e916837042535dc3cb06b119fa"}], "stats": {"total": 226, "additions": 147, "deletions": 79}, "files": [{"sha": "5a8d43a072ff6b9c76f15785f7503812d6e33f1b", "filename": "src/codemap.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e343521276897715e3bab70133cdf27eb0853c0e/src%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e343521276897715e3bab70133cdf27eb0853c0e/src%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodemap.rs?ref=e343521276897715e3bab70133cdf27eb0853c0e", "patch": "@@ -86,11 +86,9 @@ impl LineRangeUtils for CodeMap {\n         let hi = self.lookup_char_pos(span.hi());\n \n         assert_eq!(\n-            lo.file.name,\n-            hi.file.name,\n+            lo.file.name, hi.file.name,\n             \"span crossed file boundary: lo: {:?}, hi: {:?}\",\n-            lo,\n-            hi\n+            lo, hi\n         );\n \n         LineRange {"}, {"sha": "43e153bbe64f3edc39ec6de419d51751a670e5a3", "filename": "src/expr.rs", "status": "modified", "additions": 60, "deletions": 42, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/e343521276897715e3bab70133cdf27eb0853c0e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e343521276897715e3bab70133cdf27eb0853c0e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=e343521276897715e3bab70133cdf27eb0853c0e", "patch": "@@ -1811,25 +1811,34 @@ fn rewrite_string_lit(context: &RewriteContext, span: Span, shape: Shape) -> Opt\n     )\n }\n \n-const FORMAT_LIKE_WHITELIST: &[&str] = &[\n+const SPECIAL_MACRO_WHITELIST: &[(&str, usize)] = &[\n+    // format! like macros\n     // From the Rust Standard Library.\n-    \"eprint!\",\n-    \"eprintln!\",\n-    \"format!\",\n-    \"format_args!\",\n-    \"print!\",\n-    \"println!\",\n-    \"panic!\",\n-    \"unreachable!\",\n+    (\"eprint!\", 0),\n+    (\"eprintln!\", 0),\n+    (\"format!\", 0),\n+    (\"format_args!\", 0),\n+    (\"print!\", 0),\n+    (\"println!\", 0),\n+    (\"panic!\", 0),\n+    (\"unreachable!\", 0),\n     // From the `log` crate.\n-    \"debug!\",\n-    \"error!\",\n-    \"info!\",\n-    \"warn!\",\n+    (\"debug!\", 0),\n+    (\"error!\", 0),\n+    (\"info!\", 0),\n+    (\"warn!\", 0),\n+    // write! like macros\n+    (\"assert!\", 1),\n+    (\"debug_assert!\", 1),\n+    (\"write!\", 1),\n+    (\"writeln!\", 1),\n+    // assert_eq! like macros\n+    (\"assert_eq!\", 2),\n+    (\"assert_ne!\", 2),\n+    (\"debug_assert_eq!\", 2),\n+    (\"debug_assert_ne!\", 2),\n ];\n \n-const WRITE_LIKE_WHITELIST: &[&str] = &[\"assert!\", \"write!\", \"writeln!\"];\n-\n pub fn rewrite_call(\n     context: &RewriteContext,\n     callee: &str,\n@@ -2066,25 +2075,31 @@ where\n             } else {\n                 tactic = default_tactic();\n \n-                // For special-case macros, we may want to use different tactics.\n-                let maybe_args_offset = maybe_get_args_offset(callee_str, args);\n-\n-                if tactic == DefinitiveListTactic::Vertical && maybe_args_offset.is_some() {\n-                    let args_offset = maybe_args_offset.unwrap();\n-                    let args_tactic = definitive_tactic(\n-                        &item_vec[args_offset..],\n-                        ListTactic::HorizontalVertical,\n-                        Separator::Comma,\n-                        nested_shape.width,\n-                    );\n-\n-                    // Every argument is simple and fits on a single line.\n-                    if args_tactic == DefinitiveListTactic::Horizontal {\n-                        tactic = if args_offset == 1 {\n-                            DefinitiveListTactic::FormatCall\n-                        } else {\n-                            DefinitiveListTactic::WriteCall\n-                        };\n+                if tactic == DefinitiveListTactic::Vertical {\n+                    if let Some((all_simple_before, all_simple_after, num_args_before)) =\n+                        maybe_get_args_offset(callee_str, args)\n+                    {\n+                        let one_line_before = all_simple_before\n+                            && definitive_tactic(\n+                                &item_vec[..num_args_before - 1],\n+                                ListTactic::HorizontalVertical,\n+                                Separator::Comma,\n+                                nested_shape.width,\n+                            ) == DefinitiveListTactic::Horizontal;\n+\n+                        let one_line_after = all_simple_after\n+                            && definitive_tactic(\n+                                &item_vec[num_args_before + 1..],\n+                                ListTactic::HorizontalVertical,\n+                                Separator::Comma,\n+                                nested_shape.width,\n+                            ) == DefinitiveListTactic::Horizontal;\n+\n+                        tactic = DefinitiveListTactic::SpecialMacro(\n+                            one_line_before,\n+                            one_line_after,\n+                            num_args_before,\n+                        );\n                     }\n                 }\n             }\n@@ -2120,15 +2135,18 @@ fn is_every_args_simple<T: ToExpr>(lists: &[&T]) -> bool {\n }\n \n /// In case special-case style is required, returns an offset from which we start horizontal layout.\n-fn maybe_get_args_offset<T: ToExpr>(callee_str: &str, args: &[&T]) -> Option<usize> {\n-    if FORMAT_LIKE_WHITELIST.iter().any(|s| *s == callee_str) && args.len() >= 1\n-        && is_every_args_simple(args)\n-    {\n-        Some(1)\n-    } else if WRITE_LIKE_WHITELIST.iter().any(|s| *s == callee_str) && args.len() >= 2\n-        && is_every_args_simple(args)\n+fn maybe_get_args_offset<T: ToExpr>(callee_str: &str, args: &[&T]) -> Option<(bool, bool, usize)> {\n+    if let Some(&(_, num_args_before)) = SPECIAL_MACRO_WHITELIST\n+        .iter()\n+        .find(|&&(s, _)| s == callee_str)\n     {\n-        Some(2)\n+        let all_simple_before = num_args_before >= 1 && args.len() >= num_args_before\n+            && is_every_args_simple(&args[..num_args_before]);\n+\n+        let all_simple_after =\n+            args.len() >= num_args_before + 1 && is_every_args_simple(&args[num_args_before + 1..]);\n+\n+        Some((all_simple_before, all_simple_after, num_args_before))\n     } else {\n         None\n     }"}, {"sha": "e167c638a53e17c8fad8deb32d8ba75a080da117", "filename": "src/lists.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e343521276897715e3bab70133cdf27eb0853c0e/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e343521276897715e3bab70133cdf27eb0853c0e/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=e343521276897715e3bab70133cdf27eb0853c0e", "patch": "@@ -160,10 +160,8 @@ pub enum DefinitiveListTactic {\n     Vertical,\n     Horizontal,\n     Mixed,\n-    // Special case tactic for `format!()` variants.\n-    FormatCall,\n-    // Special case tactic for `write!()` varianta.\n-    WriteCall,\n+    // Special case tactic for `format!()`, `write!()` style macros.\n+    SpecialMacro(bool, bool, usize),\n }\n \n impl DefinitiveListTactic {\n@@ -271,7 +269,7 @@ where\n     I: IntoIterator<Item = T> + Clone,\n     T: AsRef<ListItem>,\n {\n-    let mut tactic = formatting.tactic;\n+    let tactic = formatting.tactic;\n     let sep_len = formatting.separator.len();\n \n     // Now that we know how we will layout, we can decide for sure if there\n@@ -313,26 +311,33 @@ where\n             DefinitiveListTactic::Horizontal if !first => {\n                 result.push(' ');\n             }\n-            DefinitiveListTactic::FormatCall if !first => {\n-                result.push('\\n');\n-                result.push_str(indent_str);\n-                tactic = DefinitiveListTactic::Horizontal;\n-            }\n-            DefinitiveListTactic::WriteCall => {\n-                let second = i == 1;\n-                let third = i == 2;\n-\n-                if first {\n+            DefinitiveListTactic::SpecialMacro(\n+                one_line_before,\n+                one_line_after,\n+                num_args_before,\n+            ) => {\n+                if i == 0 {\n                     // Nothing\n-                } else if second {\n+                } else if i < num_args_before {\n+                    if one_line_before {\n+                        result.push(' ');\n+                    } else {\n+                        result.push('\\n');\n+                        result.push_str(indent_str);\n+                    }\n+                } else if i == num_args_before {\n                     result.push('\\n');\n                     result.push_str(indent_str);\n-                } else if third {\n+                } else if i == num_args_before + 1 {\n                     result.push('\\n');\n                     result.push_str(indent_str);\n-                    tactic = DefinitiveListTactic::Horizontal;\n-                } else {\n-                    unreachable!();\n+                } else if i > num_args_before + 1 {\n+                    if one_line_after {\n+                        result.push(' ');\n+                    } else {\n+                        result.push('\\n');\n+                        result.push_str(indent_str);\n+                    }\n                 }\n             }\n             DefinitiveListTactic::Vertical if !first => {"}, {"sha": "8d02eb67fcbd9e8d190737ef7acf00b089db3974", "filename": "tests/source/macros.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e343521276897715e3bab70133cdf27eb0853c0e/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e343521276897715e3bab70133cdf27eb0853c0e/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=e343521276897715e3bab70133cdf27eb0853c0e", "patch": "@@ -266,16 +266,21 @@ fn special_case_macros() {\n     warn!(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n     warn!(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26);\n \n-    assert!(result, \"Ahoy there, {}!\", target);\n-    assert!(result, \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\", result, input, expected);\n-    assert!(result, \"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26);\n+    assert!(result == 42, \"Ahoy there, {}!\", target);\n+    assert!(result == 42, \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\", result, input, expected);\n+    assert!(result == 42, \"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26);\n+\n+    assert_eq!(left, right, \"Ahoy there, {}!\", target);\n+    assert_eq!(left, right, \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\", result, input, expected);\n+    assert_eq!(left + 42, right, \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\", result, input, expected);\n+    assert_eq!(left, right, \"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26);\n \n     write!(&mut s, \"Ahoy there, {}!\", target);\n-    write!(&mut s, \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\", result, input, expected);\n+    write!(&mut s, \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\", result, input, expected);\n     write!(&mut s, \"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26);\n \n     writeln!(&mut s, \"Ahoy there, {}!\", target);\n-    writeln!(&mut s, \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\", result, input, expected);\n+    writeln!(&mut s, \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\", result, input, expected);\n     writeln!(&mut s, \"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26);\n }\n "}, {"sha": "98f19d896e020d3dca1eda9b1da15160da6f7db3", "filename": "tests/system.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e343521276897715e3bab70133cdf27eb0853c0e/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e343521276897715e3bab70133cdf27eb0853c0e/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=e343521276897715e3bab70133cdf27eb0853c0e", "patch": "@@ -137,8 +137,7 @@ fn self_tests() {\n     }\n \n     assert_eq!(\n-        warnings,\n-        0,\n+        warnings, 0,\n         \"Rustfmt's code generated {} warnings\",\n         warnings\n     );"}, {"sha": "3a9d200bde774eaf57935ff7844e727a1d8c05c4", "filename": "tests/target/macros.rs", "status": "modified", "additions": 49, "deletions": 6, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e343521276897715e3bab70133cdf27eb0853c0e/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e343521276897715e3bab70133cdf27eb0853c0e/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=e343521276897715e3bab70133cdf27eb0853c0e", "patch": "@@ -691,14 +691,57 @@ fn special_case_macros() {\n         26\n     );\n \n-    assert!(result, \"Ahoy there, {}!\", target);\n+    assert!(result == 42, \"Ahoy there, {}!\", target);\n     assert!(\n-        result,\n-        \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\",\n+        result == 42,\n+        \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\",\n         result, input, expected\n     );\n     assert!(\n-        result,\n+        result == 42,\n+        \"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\",\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        10,\n+        11,\n+        12,\n+        13,\n+        14,\n+        15,\n+        16,\n+        17,\n+        18,\n+        19,\n+        20,\n+        21,\n+        22,\n+        23,\n+        24,\n+        25,\n+        26\n+    );\n+\n+    assert_eq!(left, right, \"Ahoy there, {}!\", target);\n+    assert_eq!(\n+        left, right,\n+        \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\",\n+        result, input, expected\n+    );\n+    assert_eq!(\n+        left + 42,\n+        right,\n+        \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\",\n+        result, input, expected\n+    );\n+    assert_eq!(\n+        left, right,\n         \"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\",\n         1,\n         2,\n@@ -731,7 +774,7 @@ fn special_case_macros() {\n     write!(&mut s, \"Ahoy there, {}!\", target);\n     write!(\n         &mut s,\n-        \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\",\n+        \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\",\n         result, input, expected\n     );\n     write!(\n@@ -768,7 +811,7 @@ fn special_case_macros() {\n     writeln!(&mut s, \"Ahoy there, {}!\", target);\n     writeln!(\n         &mut s,\n-        \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\",\n+        \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\",\n         result, input, expected\n     );\n     writeln!("}]}