{"sha": "fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a", "node_id": "C_kwDOAAsO6NoAKGZlODZkY2YwY2M3MmZmNTI2ZWIyYmU0NTc1N2NkYzBlN2E5OTBlNmE", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-15T06:34:23Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-18T20:33:42Z"}, "message": "Delete pretty printer tracing", "tree": {"sha": "745db3615b9bd975929420d3a060f218e621dbdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/745db3615b9bd975929420d3a060f218e621dbdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHnJCYACgkQ+boUO5X/\nbYJE4w//d7V8PZQ4EgpCaQXvqmUopiv73fLzRc1NEVTluOGloVroLDAL7dvNY70i\nRVwU7QGPP7dKPnPfHAc1tTm9yMUkLhh+Uf97wlZasoDQPyOC6kdS3v9BboOdb7HC\nhTat6Fo60VqtX+DVQk8FnXmhYuPxuACuST0rHNiZVDEydHpPSJZCeQPnobJFO9KM\npI+n0vEzfQhyjfBe0Xwq8KMCbBCkkydgx15vWotGomdIRyGgRxBHi9ygyKDVuenz\niTKp3ej6T/Fxx3nupdmk8yScNeTOSkmV/7+8C2+GqEurwHc2dEGw1oEqOCFIesOW\nax3UFuQLhrXKqNxWSmrD/Ihr0UnRaKsLiZ12pS21Ab2iLp2XS3aKSHcUKAVjQH4Q\nNLS6gtnH14tEUQcOfGMRhNJu5fPCY6SAdkC+YzJSS93usHIJpFRW1blxV8I3ugh5\nGoV7G2twKLh7zIsfjBnr6n2ExZt++5DZiYYyJdeGblT0absvdhvWSB/aOOhgBUJ6\n/XXhbPgIOVkKTvG3Gx1Mzvbfkg2Sq+iyh5mv1spoRO3ZLE3WT9/cr2kExv5/FY2Q\nEpP82wBF00b3Y2FJxaIbhEsqSdaKE5DIaMsHgU1HB/qZoop3Tx8SNFpRdygas6jf\nbP7vNuVBGhIDe/RUANCmQyxVZKlqOo5YYrOWP9N2ZoEDeJQYdss=\n=j7OM\n-----END PGP SIGNATURE-----", "payload": "tree 745db3615b9bd975929420d3a060f218e621dbdf\nparent 9ad5d82f822b3cb67637f11be2e65c5662b66ec0\nauthor David Tolnay <dtolnay@gmail.com> 1642228463 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1642538022 -0800\n\nDelete pretty printer tracing\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a", "html_url": "https://github.com/rust-lang/rust/commit/fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad5d82f822b3cb67637f11be2e65c5662b66ec0", "html_url": "https://github.com/rust-lang/rust/commit/9ad5d82f822b3cb67637f11be2e65c5662b66ec0"}], "stats": {"total": 54, "additions": 0, "deletions": 54}, "files": [{"sha": "4c02b21dd71e9d9cfd06e388923ddb6aaa55111d", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a", "patch": "@@ -3433,7 +3433,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc_ast\",\n  \"rustc_span\",\n- \"tracing\",\n ]\n \n [[package]]"}, {"sha": "5ad8714e9fec999dd71591a64daa47c2652ddae1", "filename": "compiler/rustc_ast_pretty/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a/compiler%2Frustc_ast_pretty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a/compiler%2Frustc_ast_pretty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2FCargo.toml?ref=fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a", "patch": "@@ -7,6 +7,5 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n-tracing = \"0.1\"\n rustc_span = { path = \"../rustc_span\" }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "25437f8b53a94e4250a933433ad23077382eef3a", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=fe86dcf0cc72ff526eb2be45757cdc0e7a990e6a", "patch": "@@ -138,7 +138,6 @@ use ring::RingBuffer;\n use std::borrow::Cow;\n use std::collections::VecDeque;\n use std::fmt;\n-use tracing::debug;\n \n /// How to break. Described in more detail in the module docs.\n #[derive(Clone, Copy, PartialEq)]\n@@ -193,22 +192,6 @@ impl fmt::Display for Token {\n     }\n }\n \n-fn buf_str(buf: &RingBuffer<BufEntry>, left: usize, right: usize, lim: usize) -> String {\n-    let mut i = left;\n-    let mut l = lim;\n-    let mut s = String::from(\"[\");\n-    while i != right && l != 0 {\n-        l -= 1;\n-        if i != left {\n-            s.push_str(\", \");\n-        }\n-        s.push_str(&format!(\"{}={}\", buf[i].size, &buf[i].token));\n-        i += 1;\n-    }\n-    s.push(']');\n-    s\n-}\n-\n #[derive(Copy, Clone)]\n enum PrintStackBreak {\n     Fits,\n@@ -267,7 +250,6 @@ impl Default for BufEntry {\n impl Printer {\n     pub fn new() -> Self {\n         let linewidth = 78;\n-        debug!(\"Printer::new {}\", linewidth);\n         let mut buf = RingBuffer::new();\n         buf.advance_right();\n         Printer {\n@@ -310,16 +292,13 @@ impl Printer {\n         } else {\n             self.advance_right();\n         }\n-        debug!(\"pp Begin({})/buffer Vec<{},{}>\", b.offset, self.left, self.right);\n         self.scan_push(BufEntry { token: Token::Begin(b), size: -self.right_total });\n     }\n \n     fn scan_end(&mut self) {\n         if self.scan_stack.is_empty() {\n-            debug!(\"pp End/print Vec<{},{}>\", self.left, self.right);\n             self.print_end();\n         } else {\n-            debug!(\"pp End/buffer Vec<{},{}>\", self.left, self.right);\n             self.advance_right();\n             self.scan_push(BufEntry { token: Token::End, size: -1 });\n         }\n@@ -334,18 +313,15 @@ impl Printer {\n         } else {\n             self.advance_right();\n         }\n-        debug!(\"pp Break({})/buffer Vec<{},{}>\", b.offset, self.left, self.right);\n         self.check_stack(0);\n         self.scan_push(BufEntry { token: Token::Break(b), size: -self.right_total });\n         self.right_total += b.blank_space;\n     }\n \n     fn scan_string(&mut self, s: Cow<'static, str>) {\n         if self.scan_stack.is_empty() {\n-            debug!(\"pp String('{}')/print Vec<{},{}>\", s, self.left, self.right);\n             self.print_string(s);\n         } else {\n-            debug!(\"pp String('{}')/buffer Vec<{},{}>\", s, self.left, self.right);\n             self.advance_right();\n             let len = s.len() as isize;\n             self.buf[self.right] = BufEntry { token: Token::String(s), size: len };\n@@ -355,18 +331,8 @@ impl Printer {\n     }\n \n     fn check_stream(&mut self) {\n-        debug!(\n-            \"check_stream Vec<{}, {}> with left_total={}, right_total={}\",\n-            self.left, self.right, self.left_total, self.right_total\n-        );\n         if self.right_total - self.left_total > self.space {\n-            debug!(\n-                \"scan window is {}, longer than space on line ({})\",\n-                self.right_total - self.left_total,\n-                self.space\n-            );\n             if Some(&self.left) == self.scan_stack.back() {\n-                debug!(\"setting {} to infinity and popping\", self.left);\n                 let scanned = self.scan_pop_bottom();\n                 self.buf[scanned].size = SIZE_INFINITY;\n             }\n@@ -378,7 +344,6 @@ impl Printer {\n     }\n \n     fn scan_push(&mut self, entry: BufEntry) {\n-        debug!(\"scan_push {}\", self.right);\n         self.buf[self.right] = entry;\n         self.scan_stack.push_front(self.right);\n     }\n@@ -401,11 +366,6 @@ impl Printer {\n     }\n \n     fn advance_left(&mut self) {\n-        debug!(\n-            \"advance_left Vec<{},{}>, sizeof({})={}\",\n-            self.left, self.right, self.left, self.buf[self.left].size\n-        );\n-\n         let mut left_size = self.buf[self.left].size;\n \n         while left_size >= 0 {\n@@ -465,14 +425,12 @@ impl Printer {\n     }\n \n     fn print_newline(&mut self, amount: isize) {\n-        debug!(\"NEWLINE {}\", amount);\n         self.out.push('\\n');\n         self.pending_indentation = 0;\n         self.indent(amount);\n     }\n \n     fn indent(&mut self, amount: isize) {\n-        debug!(\"INDENT {}\", amount);\n         self.pending_indentation += amount;\n     }\n \n@@ -485,40 +443,33 @@ impl Printer {\n     fn print_begin(&mut self, b: BeginToken, l: isize) {\n         if l > self.space {\n             let col = self.margin - self.space + b.offset;\n-            debug!(\"print Begin -> push broken block at col {}\", col);\n             self.print_stack\n                 .push(PrintStackElem { offset: col, pbreak: PrintStackBreak::Broken(b.breaks) });\n         } else {\n-            debug!(\"print Begin -> push fitting block\");\n             self.print_stack.push(PrintStackElem { offset: 0, pbreak: PrintStackBreak::Fits });\n         }\n     }\n \n     fn print_end(&mut self) {\n-        debug!(\"print End -> pop End\");\n         self.print_stack.pop().unwrap();\n     }\n \n     fn print_break(&mut self, b: BreakToken, l: isize) {\n         let top = self.get_top();\n         match top.pbreak {\n             PrintStackBreak::Fits => {\n-                debug!(\"print Break({}) in fitting block\", b.blank_space);\n                 self.space -= b.blank_space;\n                 self.indent(b.blank_space);\n             }\n             PrintStackBreak::Broken(Breaks::Consistent) => {\n-                debug!(\"print Break({}+{}) in consistent block\", top.offset, b.offset);\n                 self.print_newline(top.offset + b.offset);\n                 self.space = self.margin - (top.offset + b.offset);\n             }\n             PrintStackBreak::Broken(Breaks::Inconsistent) => {\n                 if l > self.space {\n-                    debug!(\"print Break({}+{}) w/ newline in inconsistent\", top.offset, b.offset);\n                     self.print_newline(top.offset + b.offset);\n                     self.space = self.margin - (top.offset + b.offset);\n                 } else {\n-                    debug!(\"print Break({}) w/o newline in inconsistent\", b.blank_space);\n                     self.indent(b.blank_space);\n                     self.space -= b.blank_space;\n                 }\n@@ -528,7 +479,6 @@ impl Printer {\n \n     fn print_string(&mut self, s: Cow<'static, str>) {\n         let len = s.len() as isize;\n-        debug!(\"print String({})\", s);\n         // assert!(len <= space);\n         self.space -= len;\n \n@@ -545,8 +495,6 @@ impl Printer {\n     }\n \n     fn print(&mut self, token: Token, l: isize) {\n-        debug!(\"print {} {} (remaining line space={})\", token, l, self.space);\n-        debug!(\"{}\", buf_str(&self.buf, self.left, self.right, 6));\n         match token {\n             Token::Begin(b) => self.print_begin(b, l),\n             Token::End => self.print_end(),"}]}