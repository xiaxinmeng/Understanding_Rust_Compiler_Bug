{"sha": "7267749f6b4b810f32dc503fe91fd0c03d097c91", "node_id": "C_kwDOAAsO6NoAKDcyNjc3NDlmNmI0YjgxMGYzMmRjNTAzZmU5MWZkMGMwM2QwOTdjOTE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-02T11:05:21Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-02T11:19:43Z"}, "message": "Cleanup `Completions` api a bit", "tree": {"sha": "e3549c177e3a727796d5420eb5febc5e6e8ad57d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3549c177e3a727796d5420eb5febc5e6e8ad57d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7267749f6b4b810f32dc503fe91fd0c03d097c91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7267749f6b4b810f32dc503fe91fd0c03d097c91", "html_url": "https://github.com/rust-lang/rust/commit/7267749f6b4b810f32dc503fe91fd0c03d097c91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7267749f6b4b810f32dc503fe91fd0c03d097c91/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70650897d889f2f37fb1be7e837300c87481d958", "url": "https://api.github.com/repos/rust-lang/rust/commits/70650897d889f2f37fb1be7e837300c87481d958", "html_url": "https://github.com/rust-lang/rust/commit/70650897d889f2f37fb1be7e837300c87481d958"}], "stats": {"total": 147, "additions": 70, "deletions": 77}, "files": [{"sha": "92074b3e10d6647da6f48b21fde83a90e3394336", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=7267749f6b4b810f32dc503fe91fd0c03d097c91", "patch": "@@ -18,7 +18,7 @@ pub(crate) mod format_string;\n \n use std::iter;\n \n-use hir::known;\n+use hir::{known, ScopeDef};\n use ide_db::SymbolKind;\n \n use crate::{\n@@ -28,7 +28,6 @@ use crate::{\n         const_::render_const,\n         enum_variant::render_variant,\n         function::{render_fn, render_method},\n-        macro_::render_macro,\n         pattern::{render_struct_pat, render_variant_pat},\n         render_field, render_resolution, render_tuple_field,\n         struct_literal::render_struct_literal,\n@@ -38,6 +37,22 @@ use crate::{\n     CompletionContext, CompletionItem, CompletionItemKind,\n };\n \n+fn module_or_attr(def: ScopeDef) -> Option<ScopeDef> {\n+    match def {\n+        ScopeDef::MacroDef(mac) if mac.is_attr() => Some(def),\n+        ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => Some(def),\n+        _ => None,\n+    }\n+}\n+\n+fn module_or_fn_macro(def: ScopeDef) -> Option<ScopeDef> {\n+    match def {\n+        ScopeDef::MacroDef(mac) if mac.is_fn_like() => Some(def),\n+        ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => Some(def),\n+        _ => None,\n+    }\n+}\n+\n /// Represents an in-progress set of completions being built.\n #[derive(Debug, Default)]\n pub struct Completions {\n@@ -95,19 +110,6 @@ impl Completions {\n         self.add(render_resolution(RenderContext::new(ctx, false), local_name, resolution));\n     }\n \n-    pub(crate) fn add_macro(\n-        &mut self,\n-        ctx: &CompletionContext,\n-        name: Option<hir::Name>,\n-        macro_: hir::MacroDef,\n-    ) {\n-        let name = match name {\n-            Some(it) => it,\n-            None => return,\n-        };\n-        self.add(render_macro(RenderContext::new(ctx, false), None, name, macro_));\n-    }\n-\n     pub(crate) fn add_function(\n         &mut self,\n         ctx: &CompletionContext,\n@@ -227,9 +229,13 @@ impl Completions {\n         self.add(item);\n     }\n \n-    pub(crate) fn add_static_lifetime(&mut self, ctx: &CompletionContext) {\n-        let item = CompletionItem::new(SymbolKind::LifetimeParam, ctx.source_range(), \"'static\");\n-        self.add(item.build());\n+    pub(crate) fn add_lifetime(&mut self, ctx: &CompletionContext, name: hir::Name) {\n+        CompletionItem::new(SymbolKind::LifetimeParam, ctx.source_range(), name.to_smol_str())\n+            .add_to(self)\n+    }\n+\n+    pub(crate) fn add_label(&mut self, ctx: &CompletionContext, name: hir::Name) {\n+        CompletionItem::new(SymbolKind::Label, ctx.source_range(), name.to_smol_str()).add_to(self)\n     }\n \n     pub(crate) fn add_variant_pat("}, {"sha": "878d72ea0fb9b72840687050233f164b6eb92e3a", "filename": "crates/ide_completion/src/completions/lifetime.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=7267749f6b4b810f32dc503fe91fd0c03d097c91", "patch": "@@ -7,7 +7,7 @@\n //! there is no value in lifting these out into the outline module test since they will either not\n //! show up for normal completions, or they won't show completions other than lifetimes depending\n //! on the fixture input.\n-use hir::ScopeDef;\n+use hir::{known, ScopeDef};\n use syntax::ast;\n \n use crate::{\n@@ -35,12 +35,12 @@ pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext)\n     ctx.scope.process_all_names(&mut |name, res| {\n         if let ScopeDef::GenericParam(hir::GenericParam::LifetimeParam(_)) = res {\n             if param_lifetime != Some(&*name.to_smol_str()) {\n-                acc.add_resolution(ctx, name, res);\n+                acc.add_lifetime(ctx, name);\n             }\n         }\n     });\n     if param_lifetime.is_none() {\n-        acc.add_static_lifetime(ctx);\n+        acc.add_lifetime(ctx, known::STATIC_LIFETIME);\n     }\n }\n \n@@ -51,7 +51,7 @@ pub(crate) fn complete_label(acc: &mut Completions, ctx: &CompletionContext) {\n     }\n     ctx.scope.process_all_names(&mut |name, res| {\n         if let ScopeDef::Label(_) = res {\n-            acc.add_resolution(ctx, name, res);\n+            acc.add_label(ctx, name);\n         }\n     });\n }"}, {"sha": "7699c530c63454a189b89ecc5fca0f6f190e6087", "filename": "crates/ide_completion/src/completions/mod_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=7267749f6b4b810f32dc503fe91fd0c03d097c91", "patch": "@@ -13,7 +13,7 @@ use crate::{patterns::ImmediateLocation, CompletionItem};\n \n use crate::{context::CompletionContext, Completions};\n \n-/// Complete mod declaration, i.e. `mod $0 ;`\n+/// Complete mod declaration, i.e. `mod $0;`\n pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let mod_under_caret = match &ctx.completion_location {\n         Some(ImmediateLocation::ModDeclaration(mod_under_caret)) => mod_under_caret,"}, {"sha": "cd1022b2e357cda7b60d010bb79b4c92972ff321", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=7267749f6b4b810f32dc503fe91fd0c03d097c91", "patch": "@@ -7,6 +7,7 @@ use rustc_hash::FxHashSet;\n use syntax::{ast, AstNode};\n \n use crate::{\n+    completions::{module_or_attr, module_or_fn_macro},\n     context::{PathCompletionContext, PathKind},\n     patterns::ImmediateLocation,\n     CompletionContext, Completions,\n@@ -57,12 +58,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         Some(ImmediateLocation::ItemList | ImmediateLocation::Trait | ImmediateLocation::Impl) => {\n             if let hir::PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n                 for (name, def) in module.scope(ctx.db, context_module) {\n-                    if let ScopeDef::MacroDef(macro_def) = def {\n-                        if macro_def.is_fn_like() {\n-                            acc.add_macro(ctx, Some(name.clone()), macro_def);\n-                        }\n-                    }\n-                    if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = def {\n+                    if let Some(def) = module_or_fn_macro(def) {\n                         acc.add_resolution(ctx, name, def);\n                     }\n                 }\n@@ -73,16 +69,18 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n     }\n \n     match kind {\n+        // Complete next child module that comes after the qualified module which is still our parent\n         Some(PathKind::Vis { .. }) => {\n             if let hir::PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n                 if let Some(current_module) = ctx.module {\n-                    if let Some(next) = current_module\n+                    let next_towards_current = current_module\n                         .path_to_root(ctx.db)\n                         .into_iter()\n                         .take_while(|&it| it != module)\n-                        .next()\n-                    {\n+                        .next();\n+                    if let Some(next) = next_towards_current {\n                         if let Some(name) = next.name(ctx.db) {\n+                            cov_mark::hit!(visibility_qualified);\n                             acc.add_resolution(ctx, name, ScopeDef::ModuleDef(next.into()));\n                         }\n                     }\n@@ -93,12 +91,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         Some(PathKind::Attr) => {\n             if let hir::PathResolution::Def(hir::ModuleDef::Module(module)) = resolution {\n                 for (name, def) in module.scope(ctx.db, context_module) {\n-                    let add_resolution = match def {\n-                        ScopeDef::MacroDef(mac) => mac.is_attr(),\n-                        ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => true,\n-                        _ => false,\n-                    };\n-                    if add_resolution {\n+                    if let Some(def) = module_or_attr(def) {\n                         acc.add_resolution(ctx, name, def);\n                     }\n                 }\n@@ -263,7 +256,6 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 );\n             }\n         }\n-        hir::PathResolution::Macro(mac) => acc.add_macro(ctx, None, mac),\n         _ => {}\n     }\n }"}, {"sha": "13b47356197c69ed665cfb30dd23e979966f05a4", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=7267749f6b4b810f32dc503fe91fd0c03d097c91", "patch": "@@ -3,7 +3,8 @@ use ide_db::SymbolKind;\n use syntax::{ast::Expr, T};\n \n use crate::{\n-    patterns::ImmediateLocation, CompletionContext, CompletionItem, CompletionItemKind, Completions,\n+    patterns::ImmediateLocation, CompletionContext, CompletionItem, CompletionItemKind,\n+    CompletionRelevance, Completions,\n };\n \n pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n@@ -25,7 +26,10 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n                     CompletionItem::new(SymbolKind::Field, ctx.source_range(), completion_text);\n                 let completion_text =\n                     completion_text.strip_prefix(ctx.token.text()).unwrap_or(completion_text);\n-                item.insert_text(completion_text);\n+                item.insert_text(completion_text).set_relevance(CompletionRelevance {\n+                    exact_postfix_snippet_match: true,\n+                    ..Default::default()\n+                });\n                 item.add_to(acc);\n             }\n             if ctx.previous_token_is(T![.]) {"}, {"sha": "7a42cfbd42e7c4a2ad307455f2aa1af1a1910824", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=7267749f6b4b810f32dc503fe91fd0c03d097c91", "patch": "@@ -42,7 +42,7 @@ use text_edit::TextEdit;\n \n use crate::{CompletionContext, CompletionItem, CompletionItemKind, Completions};\n \n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n enum ImplCompletionKind {\n     All,\n     Fn,\n@@ -53,23 +53,22 @@ enum ImplCompletionKind {\n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n     if let Some((kind, trigger, impl_def)) = completion_match(ctx.token.clone()) {\n         if let Some(hir_impl) = ctx.sema.to_def(&impl_def) {\n-            get_missing_assoc_items(&ctx.sema, &impl_def).into_iter().for_each(|item| match item {\n-                hir::AssocItem::Function(fn_item)\n-                    if kind == ImplCompletionKind::All || kind == ImplCompletionKind::Fn =>\n-                {\n-                    add_function_impl(&trigger, acc, ctx, fn_item, hir_impl)\n+            get_missing_assoc_items(&ctx.sema, &impl_def).into_iter().for_each(|item| {\n+                match (item, kind) {\n+                    (\n+                        hir::AssocItem::Function(fn_item),\n+                        ImplCompletionKind::All | ImplCompletionKind::Fn,\n+                    ) => add_function_impl(&trigger, acc, ctx, fn_item, hir_impl),\n+                    (\n+                        hir::AssocItem::TypeAlias(type_item),\n+                        ImplCompletionKind::All | ImplCompletionKind::TypeAlias,\n+                    ) => add_type_alias_impl(&trigger, acc, ctx, type_item),\n+                    (\n+                        hir::AssocItem::Const(const_item),\n+                        ImplCompletionKind::All | ImplCompletionKind::Const,\n+                    ) => add_const_impl(&trigger, acc, ctx, const_item, hir_impl),\n+                    _ => {}\n                 }\n-                hir::AssocItem::TypeAlias(type_item)\n-                    if kind == ImplCompletionKind::All || kind == ImplCompletionKind::TypeAlias =>\n-                {\n-                    add_type_alias_impl(&trigger, acc, ctx, type_item)\n-                }\n-                hir::AssocItem::Const(const_item)\n-                    if kind == ImplCompletionKind::All || kind == ImplCompletionKind::Const =>\n-                {\n-                    add_const_impl(&trigger, acc, ctx, const_item, hir_impl)\n-                }\n-                _ => {}\n             });\n         }\n     }\n@@ -194,7 +193,7 @@ fn get_transformed_assoc_item(\n \n     transform.apply(assoc_item.syntax());\n     if let ast::AssocItem::Fn(func) = &assoc_item {\n-        func.remove_attrs_and_docs()\n+        func.remove_attrs_and_docs();\n     }\n     Some(assoc_item)\n }"}, {"sha": "7e06b074ce2113f477e6ff7debb20deedd3fadb7", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=7267749f6b4b810f32dc503fe91fd0c03d097c91", "patch": "@@ -4,6 +4,7 @@ use hir::ScopeDef;\n use syntax::{ast, AstNode};\n \n use crate::{\n+    completions::{module_or_attr, module_or_fn_macro},\n     context::{PathCompletionContext, PathKind},\n     patterns::ImmediateLocation,\n     CompletionContext, Completions,\n@@ -36,14 +37,9 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     match kind {\n         Some(PathKind::Vis { .. }) => return,\n         Some(PathKind::Attr) => {\n-            ctx.process_all_names(&mut |name, res| {\n-                let add_resolution = match res {\n-                    ScopeDef::MacroDef(mac) => mac.is_attr(),\n-                    ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) => true,\n-                    _ => false,\n-                };\n-                if add_resolution {\n-                    acc.add_resolution(ctx, name, res);\n+            ctx.process_all_names(&mut |name, def| {\n+                if let Some(def) = module_or_attr(def) {\n+                    acc.add_resolution(ctx, name, def);\n                 }\n             });\n             return;\n@@ -54,14 +50,9 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     match &ctx.completion_location {\n         Some(ImmediateLocation::ItemList | ImmediateLocation::Trait | ImmediateLocation::Impl) => {\n             // only show macros in {Assoc}ItemList\n-            ctx.process_all_names(&mut |name, res| {\n-                if let hir::ScopeDef::MacroDef(mac) = res {\n-                    if mac.is_fn_like() {\n-                        acc.add_macro(ctx, Some(name.clone()), mac);\n-                    }\n-                }\n-                if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n-                    acc.add_resolution(ctx, name, res);\n+            ctx.process_all_names(&mut |name, def| {\n+                if let Some(def) = module_or_fn_macro(def) {\n+                    acc.add_resolution(ctx, name, def);\n                 }\n             });\n             return;"}, {"sha": "ab55d9cc04a663feeb665bac9c3fa525c4674f51", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=7267749f6b4b810f32dc503fe91fd0c03d097c91", "patch": "@@ -34,7 +34,7 @@ pub(crate) enum PatternRefutability {\n     Refutable,\n     Irrefutable,\n }\n-pub enum Visible {\n+pub(crate) enum Visible {\n     Yes,\n     Editable,\n     No,\n@@ -108,7 +108,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) token: SyntaxToken,\n     /// The crate of the current file.\n     pub(super) krate: Option<hir::Crate>,\n-    /// The crate of the `scope`.\n+    /// The module of the `scope`.\n     pub(super) module: Option<hir::Module>,\n     pub(super) expected_name: Option<NameOrNameRef>,\n     pub(super) expected_type: Option<Type>,"}, {"sha": "2fd16235dc6a7ea57593243a3088b1ec3dcbb8f8", "filename": "crates/ide_completion/src/tests/visibility.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7267749f6b4b810f32dc503fe91fd0c03d097c91/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fvisibility.rs?ref=7267749f6b4b810f32dc503fe91fd0c03d097c91", "patch": "@@ -40,6 +40,7 @@ pub(in $0)\n \n #[test]\n fn qualified() {\n+    cov_mark::check!(visibility_qualified);\n     check(\n         r#\"\n mod foo {"}]}