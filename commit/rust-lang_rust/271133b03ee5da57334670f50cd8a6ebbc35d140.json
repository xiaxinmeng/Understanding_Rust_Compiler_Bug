{"sha": "271133b03ee5da57334670f50cd8a6ebbc35d140", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MTEzM2IwM2VlNWRhNTczMzQ2NzBmNTBjZDhhNmViYmMzNWQxNDA=", "commit": {"author": {"name": "Inokentiy Babushkin", "email": "twk@twki.de", "date": "2017-06-12T13:37:26Z"}, "committer": {"name": "Inokentiy Babushkin", "email": "twk@twki.de", "date": "2017-06-12T13:37:26Z"}, "message": "External spans: address review.\n\n* The lazy loading mechanism has been moved to a more appropriate place.\n* Return values from the functions invoked there are properly used.\n* Documentation has gotten some minor improvements.\n* Possibly some larger restructuring will need to take place still.", "tree": {"sha": "4401cf452b68d5962427a0e1fb4057a590231e27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4401cf452b68d5962427a0e1fb4057a590231e27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/271133b03ee5da57334670f50cd8a6ebbc35d140", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXezFNCHL3+3lgSPSfvyOxSJN6OwFAlk+maUACgkQfvyOxSJN\n6OwXBRAAgyihX87NJjcV/wq60jfrT0jUv2SNlpM12AeRF/o3LYBL7zvaXeBr621c\neDisTAeDbICjz425w3SwLkrYWxKUSqnWCiriY0hGwwxYKvtYsqXLSFNg8z/ZlWEC\ns1QJdQrldhCafy0CKpVyRmQPlwwk4TROTt0A1xX1fynMVmIPrqs1N3YcCac19C6N\niKDSnexFOrC31bwevqS0GRKk8KPGpVXfgbE5ruMTgkzferMeQc5xf601mNMNlQbG\nECG5Nv/0FYWbuoFAc8kNOlZH5vLz2GXo87TDq5tbJDQokn02W+E7v4zjmtN2Tr8T\nMMmepDht+Ytki56L1nrDjqQVMvGm7EpNnwKvsDN3HC2tQdTfyfeQvKO3iNAW00iu\nF1C6eSaIo7BrPWz6zJ2jQkH3MA3gnqjsuvi4u5NKq1wR3XYMwYW99BRKEFW6WIVD\njWOfXf02VO50C5qOv7mArtes3rQiq4lx/O8xomeaUJAMLCEDO0A61dVGSX8Ylluy\nS46r8AJaBLgkeMouQiYI1AzBV1+TVqLx773SLYH+wcUwva682esLWysTQB26OzzK\nKWUnmznwbG0TRsbmhsyYNoAGrDgH37S9AmOZCSSK9AH0xFwh5kyKyskFgB7n6axN\n2/MJ2Ru7SWjMvmNJYxfAiN7Ga5Kuovrcr8toK1qRGNKQDxyDe+E=\n=8fiG\n-----END PGP SIGNATURE-----", "payload": "tree 4401cf452b68d5962427a0e1fb4057a590231e27\nparent afe841587df0d20b344b576641d0a32d32b87f54\nauthor Inokentiy Babushkin <twk@twki.de> 1497274646 +0200\ncommitter Inokentiy Babushkin <twk@twki.de> 1497274646 +0200\n\nExternal spans: address review.\n\n* The lazy loading mechanism has been moved to a more appropriate place.\n* Return values from the functions invoked there are properly used.\n* Documentation has gotten some minor improvements.\n* Possibly some larger restructuring will need to take place still.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/271133b03ee5da57334670f50cd8a6ebbc35d140", "html_url": "https://github.com/rust-lang/rust/commit/271133b03ee5da57334670f50cd8a6ebbc35d140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/271133b03ee5da57334670f50cd8a6ebbc35d140/comments", "author": {"login": "ibabushkin", "id": 10811417, "node_id": "MDQ6VXNlcjEwODExNDE3", "avatar_url": "https://avatars.githubusercontent.com/u/10811417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibabushkin", "html_url": "https://github.com/ibabushkin", "followers_url": "https://api.github.com/users/ibabushkin/followers", "following_url": "https://api.github.com/users/ibabushkin/following{/other_user}", "gists_url": "https://api.github.com/users/ibabushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibabushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibabushkin/subscriptions", "organizations_url": "https://api.github.com/users/ibabushkin/orgs", "repos_url": "https://api.github.com/users/ibabushkin/repos", "events_url": "https://api.github.com/users/ibabushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ibabushkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibabushkin", "id": 10811417, "node_id": "MDQ6VXNlcjEwODExNDE3", "avatar_url": "https://avatars.githubusercontent.com/u/10811417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibabushkin", "html_url": "https://github.com/ibabushkin", "followers_url": "https://api.github.com/users/ibabushkin/followers", "following_url": "https://api.github.com/users/ibabushkin/following{/other_user}", "gists_url": "https://api.github.com/users/ibabushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibabushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibabushkin/subscriptions", "organizations_url": "https://api.github.com/users/ibabushkin/orgs", "repos_url": "https://api.github.com/users/ibabushkin/repos", "events_url": "https://api.github.com/users/ibabushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ibabushkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afe841587df0d20b344b576641d0a32d32b87f54", "url": "https://api.github.com/repos/rust-lang/rust/commits/afe841587df0d20b344b576641d0a32d32b87f54", "html_url": "https://github.com/rust-lang/rust/commit/afe841587df0d20b344b576641d0a32d32b87f54"}], "stats": {"total": 64, "additions": 28, "deletions": 36}, "files": [{"sha": "b4b14328b3db70c6104214bb64adccc9d95480c8", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/271133b03ee5da57334670f50cd8a6ebbc35d140/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271133b03ee5da57334670f50cd8a6ebbc35d140/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=271133b03ee5da57334670f50cd8a6ebbc35d140", "patch": "@@ -177,8 +177,6 @@ impl EmitterWriter {\n                     continue;\n                 }\n \n-                cm.load_source_for_filemap(cm.span_to_filename(span_label.span));\n-\n                 let lo = cm.lookup_char_pos(span_label.span.lo);\n                 let mut hi = cm.lookup_char_pos(span_label.span.hi);\n \n@@ -891,10 +889,10 @@ impl EmitterWriter {\n         let mut annotated_files = self.preprocess_annotations(msp);\n \n         // Make sure our primary file comes first\n-        let primary_lo = if let (Some(ref cm), Some(ref primary_span)) =\n+        let (primary_lo, cm) = if let (Some(cm), Some(ref primary_span)) =\n             (self.cm.as_ref(), msp.primary_span().as_ref()) {\n             if primary_span != &&DUMMY_SP {\n-                cm.lookup_char_pos(primary_span.lo)\n+                (cm.lookup_char_pos(primary_span.lo), cm)\n             } else {\n                 emit_to_destination(&buffer.render(), level, &mut self.dst)?;\n                 return Ok(());\n@@ -912,8 +910,7 @@ impl EmitterWriter {\n         // Print out the annotate source lines that correspond with the error\n         for annotated_file in annotated_files {\n             // we can't annotate anything if the source is unavailable.\n-            if annotated_file.file.src.is_none()\n-                    && annotated_file.file.external_src.borrow().is_absent() {\n+            if !cm.ensure_filemap_source_present(annotated_file.file.clone()) {\n                 continue;\n             }\n "}, {"sha": "975b720276e82b8d58c80becad14bc8e396bd147", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/271133b03ee5da57334670f50cd8a6ebbc35d140/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271133b03ee5da57334670f50cd8a6ebbc35d140/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=271133b03ee5da57334670f50cd8a6ebbc35d140", "patch": "@@ -50,7 +50,7 @@ pub mod registry;\n pub mod styled_buffer;\n mod lock;\n \n-use syntax_pos::{BytePos, Loc, FileLinesResult, FileName, MultiSpan, Span, NO_EXPANSION};\n+use syntax_pos::{BytePos, Loc, FileLinesResult, FileMap, FileName, MultiSpan, Span, NO_EXPANSION};\n \n #[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum RenderSpan {\n@@ -104,7 +104,7 @@ pub trait CodeMapper {\n     fn span_to_filename(&self, sp: Span) -> FileName;\n     fn merge_spans(&self, sp_lhs: Span, sp_rhs: Span) -> Option<Span>;\n     fn call_span_if_macro(&self, sp: Span) -> Span;\n-    fn load_source_for_filemap(&self, file: FileName) -> bool;\n+    fn ensure_filemap_source_present(&self, file_map: Rc<FileMap>) -> bool;\n }\n \n impl CodeSuggestion {"}, {"sha": "5b10139cd1968c5ed2800df96d9ecbc69e3e77aa", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/271133b03ee5da57334670f50cd8a6ebbc35d140/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271133b03ee5da57334670f50cd8a6ebbc35d140/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=271133b03ee5da57334670f50cd8a6ebbc35d140", "patch": "@@ -559,19 +559,9 @@ impl CodeMapper for CodeMap {\n         }\n         sp\n     }\n-    fn load_source_for_filemap(&self, filename: FileName) -> bool {\n-        let file_map = if let Some(fm) = self.get_filemap(&filename) {\n-            fm\n-        } else {\n-            return false;\n-        };\n-\n-        if *file_map.external_src.borrow() == ExternalSource::AbsentOk {\n-            let src = self.file_loader.read_file(Path::new(&filename)).ok();\n-            return file_map.add_external_src(src);\n-        }\n-\n-        false\n+    fn ensure_filemap_source_present(&self, file_map: Rc<FileMap>) -> bool {\n+        let src = self.file_loader.read_file(Path::new(&file_map.name)).ok();\n+        return file_map.add_external_src(src)\n     }\n }\n "}, {"sha": "94656b3aea79e0f5f24e77b94619f2e5fbe47ed6", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/271133b03ee5da57334670f50cd8a6ebbc35d140/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/271133b03ee5da57334670f50cd8a6ebbc35d140/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=271133b03ee5da57334670f50cd8a6ebbc35d140", "patch": "@@ -604,28 +604,33 @@ impl FileMap {\n         lines.push(pos);\n     }\n \n-    /// add externally loaded source.\n-    /// if the hash of the input doesn't match or no input is supplied via None,\n+    /// Add externally loaded source.\n+    /// If the hash of the input doesn't match or no input is supplied via None,\n     /// it is interpreted as an error and the corresponding enum variant is set.\n+    /// The return value signifies whether some kind of source is present.\n     pub fn add_external_src(&self, src: Option<String>) -> bool {\n-        let mut external_src = self.external_src.borrow_mut();\n-        if let Some(src) = src {\n-            let mut hasher: StableHasher<u128> = StableHasher::new();\n-            hasher.write(src.as_bytes());\n-\n-            if hasher.finish() == self.src_hash {\n-                *external_src = ExternalSource::Present(src);\n-                return true;\n+        if *self.external_src.borrow() == ExternalSource::AbsentOk {\n+            let mut external_src = self.external_src.borrow_mut();\n+            if let Some(src) = src {\n+                let mut hasher: StableHasher<u128> = StableHasher::new();\n+                hasher.write(src.as_bytes());\n+\n+                if hasher.finish() == self.src_hash {\n+                    *external_src = ExternalSource::Present(src);\n+                    return true;\n+                }\n+            } else {\n+                *external_src = ExternalSource::AbsentErr;\n             }\n+\n+            false\n         } else {\n-            *external_src = ExternalSource::AbsentErr;\n+            self.src.is_some() || self.external_src.borrow().get_source().is_some()\n         }\n-\n-        false\n     }\n \n-    /// get a line from the list of pre-computed line-beginnings.\n-    /// line-number here is 0-based.\n+    /// Get a line from the list of pre-computed line-beginnings.\n+    /// The line number here is 0-based.\n     pub fn get_line(&self, line_number: usize) -> Option<Cow<str>> {\n         fn get_until_newline(src: &str, begin: usize) -> &str {\n             // We can't use `lines.get(line_number+1)` because we might"}]}