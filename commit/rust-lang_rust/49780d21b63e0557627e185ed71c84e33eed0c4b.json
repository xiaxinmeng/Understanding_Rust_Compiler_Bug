{"sha": "49780d21b63e0557627e185ed71c84e33eed0c4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NzgwZDIxYjYzZTA1NTc2MjdlMTg1ZWQ3MWM4NGUzM2VlZDBjNGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-01T03:53:23Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-01T03:53:23Z"}, "message": "syntax: merge things back into `parse_visibility`.", "tree": {"sha": "2eae9e7f6c31ce1e45b8641e29091532aaf8c97d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eae9e7f6c31ce1e45b8641e29091532aaf8c97d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49780d21b63e0557627e185ed71c84e33eed0c4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49780d21b63e0557627e185ed71c84e33eed0c4b", "html_url": "https://github.com/rust-lang/rust/commit/49780d21b63e0557627e185ed71c84e33eed0c4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49780d21b63e0557627e185ed71c84e33eed0c4b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30647d1a851336582fcc45f9460aab46371f98af", "url": "https://api.github.com/repos/rust-lang/rust/commits/30647d1a851336582fcc45f9460aab46371f98af", "html_url": "https://github.com/rust-lang/rust/commit/30647d1a851336582fcc45f9460aab46371f98af"}], "stats": {"total": 62, "additions": 25, "deletions": 37}, "files": [{"sha": "0369e0a9e153ca4378eccf0e7d7e6c9866612144", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 37, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/49780d21b63e0557627e185ed71c84e33eed0c4b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49780d21b63e0557627e185ed71c84e33eed0c4b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=49780d21b63e0557627e185ed71c84e33eed0c4b", "patch": "@@ -1423,13 +1423,35 @@ impl<'a> Parser<'a> {\n             if self.is_keyword_ahead(1, &[kw::Crate])\n                 && self.look_ahead(2, |t| t != &token::ModSep) // account for `pub(crate::foo)`\n             {\n-                return self.parse_vis_pub_crate(lo);\n+                // Parse `pub(crate)`.\n+                self.bump(); // `(`\n+                self.bump(); // `crate`\n+                self.expect(&token::CloseDelim(token::Paren))?; // `)`\n+                let vis = VisibilityKind::Crate(CrateSugar::PubCrate);\n+                return Ok(respan(lo.to(self.prev_span), vis));\n             } else if self.is_keyword_ahead(1, &[kw::In]) {\n-                return self.parse_vis_pub_in(lo);\n+                // Parse `pub(in path)`.\n+                self.bump(); // `(`\n+                self.bump(); // `in`\n+                let path = self.parse_path(PathStyle::Mod)?; // `path`\n+                self.expect(&token::CloseDelim(token::Paren))?; // `)`\n+                let vis = VisibilityKind::Restricted {\n+                    path: P(path),\n+                    id: ast::DUMMY_NODE_ID,\n+                };\n+                return Ok(respan(lo.to(self.prev_span), vis));\n             } else if self.look_ahead(2, |t| t == &token::CloseDelim(token::Paren))\n                 && self.is_keyword_ahead(1, &[kw::Super, kw::SelfLower])\n             {\n-                return self.parse_vis_self_super(lo);\n+                // Parse `pub(self)` or `pub(super)`.\n+                self.bump(); // `(`\n+                let path = self.parse_path(PathStyle::Mod)?; // `super`/`self`\n+                self.expect(&token::CloseDelim(token::Paren))?; // `)`\n+                let vis = VisibilityKind::Restricted {\n+                    path: P(path),\n+                    id: ast::DUMMY_NODE_ID,\n+                };\n+                return Ok(respan(lo.to(self.prev_span), vis));\n             } else if !can_take_tuple { // Provide this diagnostic if this is not a tuple struct.\n                 self.recover_incorrect_vis_restriction()?;\n                 // Emit diagnostic, but continue with public visibility.\n@@ -1439,40 +1461,6 @@ impl<'a> Parser<'a> {\n         Ok(respan(lo, VisibilityKind::Public))\n     }\n \n-    /// Parse `pub(crate)`.\n-    fn parse_vis_pub_crate(&mut self, lo: Span) -> PResult<'a, Visibility> {\n-        self.bump(); // `(`\n-        self.bump(); // `crate`\n-        self.expect(&token::CloseDelim(token::Paren))?; // `)`\n-        Ok(respan(\n-            lo.to(self.prev_span),\n-            VisibilityKind::Crate(CrateSugar::PubCrate),\n-        ))\n-    }\n-\n-    /// Parse `pub(in path)`.\n-    fn parse_vis_pub_in(&mut self, lo: Span) -> PResult<'a, Visibility> {\n-        self.bump(); // `(`\n-        self.bump(); // `in`\n-        let path = self.parse_path(PathStyle::Mod)?; // `path`\n-        self.expect(&token::CloseDelim(token::Paren))?; // `)`\n-        Ok(respan(lo.to(self.prev_span), VisibilityKind::Restricted {\n-            path: P(path),\n-            id: ast::DUMMY_NODE_ID,\n-        }))\n-    }\n-\n-    /// Parse `pub(self)` or `pub(super)`.\n-    fn parse_vis_self_super(&mut self, lo: Span) -> PResult<'a, Visibility> {\n-        self.bump(); // `(`\n-        let path = self.parse_path(PathStyle::Mod)?; // `super`/`self`\n-        self.expect(&token::CloseDelim(token::Paren))?; // `)`\n-        Ok(respan(lo.to(self.prev_span), VisibilityKind::Restricted {\n-            path: P(path),\n-            id: ast::DUMMY_NODE_ID,\n-        }))\n-    }\n-\n     /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`\n     fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {\n         self.bump(); // `(`"}]}