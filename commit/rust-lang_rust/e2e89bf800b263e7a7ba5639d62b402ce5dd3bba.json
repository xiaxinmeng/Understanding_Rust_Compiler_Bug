{"sha": "e2e89bf800b263e7a7ba5639d62b402ce5dd3bba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZTg5YmY4MDBiMjYzZTdhN2JhNTYzOWQ2MmI0MDJjZTVkZDNiYmE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-01T23:36:37Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-02T05:50:58Z"}, "message": "extended pattern matching", "tree": {"sha": "154bd5e11aef372b472723dfefc0117429fc53d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/154bd5e11aef372b472723dfefc0117429fc53d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2e89bf800b263e7a7ba5639d62b402ce5dd3bba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e89bf800b263e7a7ba5639d62b402ce5dd3bba", "html_url": "https://github.com/rust-lang/rust/commit/e2e89bf800b263e7a7ba5639d62b402ce5dd3bba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2e89bf800b263e7a7ba5639d62b402ce5dd3bba/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08fb953e1a9ac43720db6cf1d75bd19f5aa3cff5", "url": "https://api.github.com/repos/rust-lang/rust/commits/08fb953e1a9ac43720db6cf1d75bd19f5aa3cff5", "html_url": "https://github.com/rust-lang/rust/commit/08fb953e1a9ac43720db6cf1d75bd19f5aa3cff5"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "2276fb1da5d421316cb3a734765ece9b9c0200ab", "filename": "src/shadow.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e2e89bf800b263e7a7ba5639d62b402ce5dd3bba/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e89bf800b263e7a7ba5639d62b402ce5dd3bba/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=e2e89bf800b263e7a7ba5639d62b402ce5dd3bba", "patch": "@@ -60,7 +60,7 @@ fn check_decl(cx: &Context, decl: &Decl, bindings: &mut Vec<Name>) {\n     if let DeclLocal(ref local) = decl.node {\n         let Local{ ref pat, ref ty, ref init, id: _, span } = **local;\n         if let &Some(ref t) = ty { check_ty(cx, t, bindings) }\n-        if let &Some(ref o) = init { \n+        if let &Some(ref o) = init {\n             check_expr(cx, o, bindings);\n             check_pat(cx, pat, &Some(o), span, bindings);\n         } else {\n@@ -92,10 +92,9 @@ fn check_pat(cx: &Context, pat: &Pat, init: &Option<&Expr>, span: Span,\n             if let Some(ref p) = *inner { check_pat(cx, p, init, span, bindings); }\n         },\n         //PatEnum(Path, Option<Vec<P<Pat>>>),\n-        PatStruct(_, ref pfields, _) => \n-            if let Some(ref init_struct) = *init { // TODO follow\n-                if let ExprStruct(_, ref efields, ref _base) = init_struct.node {\n-                    // TODO: follow base\n+        PatStruct(_, ref pfields, _) =>\n+            if let Some(ref init_struct) = *init {\n+                if let ExprStruct(_, ref efields, _) = init_struct.node {\n                     for field in pfields {\n                         let ident = field.node.ident;\n                         let efield = efields.iter()\n@@ -105,7 +104,7 @@ fn check_pat(cx: &Context, pat: &Pat, init: &Option<&Expr>, span: Span,\n                     }\n                 } else {\n                     for field in pfields {\n-                        check_pat(cx, &field.node.pat, &None, span, bindings);\n+                        check_pat(cx, &field.node.pat, init, span, bindings);\n                     }\n                 }\n             } else {\n@@ -114,14 +113,14 @@ fn check_pat(cx: &Context, pat: &Pat, init: &Option<&Expr>, span: Span,\n                 }\n             },\n         PatTup(ref inner) =>\n-            if let Some(ref init_tup) = *init { //TODO: follow\n+            if let Some(ref init_tup) = *init {\n                 if let ExprTup(ref tup) = init_tup.node {\n-                    for (i, p) in inner.iter().enumerate() { \n+                    for (i, p) in inner.iter().enumerate() {\n                         check_pat(cx, p, &Some(&tup[i]), p.span, bindings);\n                     }\n                 } else {\n                     for p in inner {\n-                        check_pat(cx, p, &None, span, bindings);\n+                        check_pat(cx, p, init, span, bindings);\n                     }\n                 }\n             } else {"}]}