{"sha": "83de67cfec4a1e68c8b63ec8153777c51a19addc", "node_id": "C_kwDOAAsO6NoAKDgzZGU2N2NmZWM0YTFlNjhjOGI2M2VjODE1Mzc3N2M1MWExOWFkZGM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-01T05:23:57Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T16:51:30Z"}, "message": "Move `IdentityOp` into `Operators` lint pass", "tree": {"sha": "6292d6bc386d972d01033c7b723f5ebd2073aa94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6292d6bc386d972d01033c7b723f5ebd2073aa94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83de67cfec4a1e68c8b63ec8153777c51a19addc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83de67cfec4a1e68c8b63ec8153777c51a19addc", "html_url": "https://github.com/rust-lang/rust/commit/83de67cfec4a1e68c8b63ec8153777c51a19addc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83de67cfec4a1e68c8b63ec8153777c51a19addc/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56f50d36e7462a612446e6d78bacf586f614cab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/56f50d36e7462a612446e6d78bacf586f614cab5", "html_url": "https://github.com/rust-lang/rust/commit/56f50d36e7462a612446e6d78bacf586f614cab5"}], "stats": {"total": 117, "additions": 58, "deletions": 59}, "files": [{"sha": "fb08d7d112d2f7dfa0616437fe3c73ebeb10d3aa", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83de67cfec4a1e68c8b63ec8153777c51a19addc/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83de67cfec4a1e68c8b63ec8153777c51a19addc/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=83de67cfec4a1e68c8b63ec8153777c51a19addc", "patch": "@@ -83,7 +83,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(functions::RESULT_UNIT_ERR),\n     LintId::of(functions::TOO_MANY_ARGUMENTS),\n     LintId::of(get_first::GET_FIRST),\n-    LintId::of(identity_op::IDENTITY_OP),\n     LintId::of(if_let_mutex::IF_LET_MUTEX),\n     LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n     LintId::of(infinite_iter::INFINITE_ITER),\n@@ -257,6 +256,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(operators::EQ_OP),\n     LintId::of(operators::ERASING_OP),\n     LintId::of(operators::FLOAT_EQUALITY_WITHOUT_ABS),\n+    LintId::of(operators::IDENTITY_OP),\n     LintId::of(operators::INEFFECTIVE_BIT_MASK),\n     LintId::of(operators::MISREFACTORED_ASSIGN_OP),\n     LintId::of(operators::OP_REF),"}, {"sha": "ed5446f58441149b8806138cc7176de7fb0653ae", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83de67cfec4a1e68c8b63ec8153777c51a19addc/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83de67cfec4a1e68c8b63ec8153777c51a19addc/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=83de67cfec4a1e68c8b63ec8153777c51a19addc", "patch": "@@ -14,7 +14,6 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(explicit_write::EXPLICIT_WRITE),\n     LintId::of(format::USELESS_FORMAT),\n     LintId::of(functions::TOO_MANY_ARGUMENTS),\n-    LintId::of(identity_op::IDENTITY_OP),\n     LintId::of(int_plus_one::INT_PLUS_ONE),\n     LintId::of(lifetimes::EXTRA_UNUSED_LIFETIMES),\n     LintId::of(lifetimes::NEEDLESS_LIFETIMES),\n@@ -71,6 +70,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(no_effect::UNNECESSARY_OPERATION),\n     LintId::of(operators::DOUBLE_COMPARISONS),\n     LintId::of(operators::DURATION_SUBSEC),\n+    LintId::of(operators::IDENTITY_OP),\n     LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n     LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n     LintId::of(precedence::PRECEDENCE),"}, {"sha": "946e8c76f173d16da41e065fdea66c39d863b5c1", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83de67cfec4a1e68c8b63ec8153777c51a19addc/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83de67cfec4a1e68c8b63ec8153777c51a19addc/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=83de67cfec4a1e68c8b63ec8153777c51a19addc", "patch": "@@ -176,7 +176,6 @@ store.register_lints(&[\n     functions::TOO_MANY_LINES,\n     future_not_send::FUTURE_NOT_SEND,\n     get_first::GET_FIRST,\n-    identity_op::IDENTITY_OP,\n     if_let_mutex::IF_LET_MUTEX,\n     if_not_else::IF_NOT_ELSE,\n     if_then_some_else_none::IF_THEN_SOME_ELSE_NONE,\n@@ -432,6 +431,7 @@ store.register_lints(&[\n     operators::ERASING_OP,\n     operators::FLOAT_ARITHMETIC,\n     operators::FLOAT_EQUALITY_WITHOUT_ABS,\n+    operators::IDENTITY_OP,\n     operators::INEFFECTIVE_BIT_MASK,\n     operators::INTEGER_ARITHMETIC,\n     operators::MISREFACTORED_ASSIGN_OP,"}, {"sha": "327a1150952ec4766c927bab4170c2f1502e55f2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/83de67cfec4a1e68c8b63ec8153777c51a19addc/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83de67cfec4a1e68c8b63ec8153777c51a19addc/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=83de67cfec4a1e68c8b63ec8153777c51a19addc", "patch": "@@ -239,7 +239,6 @@ mod from_str_radix_10;\n mod functions;\n mod future_not_send;\n mod get_first;\n-mod identity_op;\n mod if_let_mutex;\n mod if_not_else;\n mod if_then_some_else_none;\n@@ -582,7 +581,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(needless_for_each::NeedlessForEach));\n     store.register_late_pass(|| Box::new(misc::MiscLints));\n     store.register_late_pass(|| Box::new(eta_reduction::EtaReduction));\n-    store.register_late_pass(|| Box::new(identity_op::IdentityOp));\n     store.register_late_pass(|| Box::new(mut_mut::MutMut));\n     store.register_late_pass(|| Box::new(mut_reference::UnnecessaryMutPassed));\n     store.register_late_pass(|| Box::new(len_zero::LenZero));"}, {"sha": "b48d6c4e2e2af96318e38bdcb81ce5b2f3a548e9", "filename": "clippy_lints/src/operators/identity_op.rs", "status": "renamed", "additions": 33, "deletions": 54, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/83de67cfec4a1e68c8b63ec8153777c51a19addc/clippy_lints%2Fsrc%2Foperators%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83de67cfec4a1e68c8b63ec8153777c51a19addc/clippy_lints%2Fsrc%2Foperators%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fidentity_op.rs?ref=83de67cfec4a1e68c8b63ec8153777c51a19addc", "patch": "@@ -3,61 +3,40 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{clip, unsext};\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOp, BinOpKind, Expr, ExprKind, Node};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_hir::{BinOpKind, Expr, ExprKind, Node};\n+use rustc_lint::LateContext;\n use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for identity operations, e.g., `x + 0`.\n-    ///\n-    /// ### Why is this bad?\n-    /// This code can be removed without changing the\n-    /// meaning. So it just obscures what's going on. Delete it mercilessly.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # let x = 1;\n-    /// x / 1 + 0 * 1 - 0 | 0;\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub IDENTITY_OP,\n-    complexity,\n-    \"using identity operations, e.g., `x + 0` or `y / 1`\"\n-}\n-\n-declare_lint_pass!(IdentityOp => [IDENTITY_OP]);\n+use super::IDENTITY_OP;\n \n-impl<'tcx> LateLintPass<'tcx> for IdentityOp {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if expr.span.from_expansion() {\n-            return;\n-        }\n-        if let ExprKind::Binary(cmp, left, right) = &expr.kind {\n-            if !is_allowed(cx, *cmp, left, right) {\n-                match cmp.node {\n-                    BinOpKind::Add | BinOpKind::BitOr | BinOpKind::BitXor => {\n-                        check(cx, left, 0, expr.span, right.span, needs_parenthesis(cx, expr, right));\n-                        check(cx, right, 0, expr.span, left.span, Parens::Unneeded);\n-                    },\n-                    BinOpKind::Shl | BinOpKind::Shr | BinOpKind::Sub => {\n-                        check(cx, right, 0, expr.span, left.span, Parens::Unneeded);\n-                    },\n-                    BinOpKind::Mul => {\n-                        check(cx, left, 1, expr.span, right.span, needs_parenthesis(cx, expr, right));\n-                        check(cx, right, 1, expr.span, left.span, Parens::Unneeded);\n-                    },\n-                    BinOpKind::Div => check(cx, right, 1, expr.span, left.span, Parens::Unneeded),\n-                    BinOpKind::BitAnd => {\n-                        check(cx, left, -1, expr.span, right.span, needs_parenthesis(cx, expr, right));\n-                        check(cx, right, -1, expr.span, left.span, Parens::Unneeded);\n-                    },\n-                    BinOpKind::Rem => check_remainder(cx, left, right, expr.span, left.span),\n-                    _ => (),\n-                }\n-            }\n+pub(crate) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    op: BinOpKind,\n+    left: &'tcx Expr<'_>,\n+    right: &'tcx Expr<'_>,\n+) {\n+    if !is_allowed(cx, op, left, right) {\n+        match op {\n+            BinOpKind::Add | BinOpKind::BitOr | BinOpKind::BitXor => {\n+                check_op(cx, left, 0, expr.span, right.span, needs_parenthesis(cx, expr, right));\n+                check_op(cx, right, 0, expr.span, left.span, Parens::Unneeded);\n+            },\n+            BinOpKind::Shl | BinOpKind::Shr | BinOpKind::Sub => {\n+                check_op(cx, right, 0, expr.span, left.span, Parens::Unneeded);\n+            },\n+            BinOpKind::Mul => {\n+                check_op(cx, left, 1, expr.span, right.span, needs_parenthesis(cx, expr, right));\n+                check_op(cx, right, 1, expr.span, left.span, Parens::Unneeded);\n+            },\n+            BinOpKind::Div => check_op(cx, right, 1, expr.span, left.span, Parens::Unneeded),\n+            BinOpKind::BitAnd => {\n+                check_op(cx, left, -1, expr.span, right.span, needs_parenthesis(cx, expr, right));\n+                check_op(cx, right, -1, expr.span, left.span, Parens::Unneeded);\n+            },\n+            BinOpKind::Rem => check_remainder(cx, left, right, expr.span, left.span),\n+            _ => (),\n         }\n     }\n }\n@@ -108,12 +87,12 @@ fn needs_parenthesis(cx: &LateContext<'_>, binary: &Expr<'_>, right: &Expr<'_>)\n     Parens::Needed\n }\n \n-fn is_allowed(cx: &LateContext<'_>, cmp: BinOp, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n+fn is_allowed(cx: &LateContext<'_>, cmp: BinOpKind, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n     // This lint applies to integers\n     !cx.typeck_results().expr_ty(left).peel_refs().is_integral()\n         || !cx.typeck_results().expr_ty(right).peel_refs().is_integral()\n         // `1 << 0` is a common pattern in bit manipulation code\n-        || (cmp.node == BinOpKind::Shl\n+        || (cmp == BinOpKind::Shl\n             && constant_simple(cx, cx.typeck_results(), right) == Some(Constant::Int(0))\n             && constant_simple(cx, cx.typeck_results(), left) == Some(Constant::Int(1)))\n }\n@@ -130,7 +109,7 @@ fn check_remainder(cx: &LateContext<'_>, left: &Expr<'_>, right: &Expr<'_>, span\n     }\n }\n \n-fn check(cx: &LateContext<'_>, e: &Expr<'_>, m: i8, span: Span, arg: Span, parens: Parens) {\n+fn check_op(cx: &LateContext<'_>, e: &Expr<'_>, m: i8, span: Span, arg: Span, parens: Parens) {\n     if let Some(Constant::Int(v)) = constant_simple(cx, cx.typeck_results(), e).map(Constant::peel_refs) {\n         let check = match *cx.typeck_results().expr_ty(e).peel_refs().kind() {\n             ty::Int(ity) => unsext(cx.tcx, -1_i128, ity),", "previous_filename": "clippy_lints/src/identity_op.rs"}, {"sha": "91550e0e678b9d5168875cabf74539fae32f5984", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/83de67cfec4a1e68c8b63ec8153777c51a19addc/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83de67cfec4a1e68c8b63ec8153777c51a19addc/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=83de67cfec4a1e68c8b63ec8153777c51a19addc", "patch": "@@ -10,6 +10,7 @@ mod duration_subsec;\n mod eq_op;\n mod erasing_op;\n mod float_equality_without_abs;\n+mod identity_op;\n mod misrefactored_assign_op;\n mod numeric_arithmetic;\n mod op_ref;\n@@ -417,6 +418,25 @@ declare_clippy_lint! {\n     \"float equality check without `.abs()`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for identity operations, e.g., `x + 0`.\n+    ///\n+    /// ### Why is this bad?\n+    /// This code can be removed without changing the\n+    /// meaning. So it just obscures what's going on. Delete it mercilessly.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # let x = 1;\n+    /// x / 1 + 0 * 1 - 0 | 0;\n+    /// ```\n+    #[clippy::version = \"pre 1.29.0\"]\n+    pub IDENTITY_OP,\n+    complexity,\n+    \"using identity operations, e.g., `x + 0` or `y / 1`\"\n+}\n+\n pub struct Operators {\n     arithmetic_context: numeric_arithmetic::Context,\n     verbose_bit_mask_threshold: u64,\n@@ -436,6 +456,7 @@ impl_lint_pass!(Operators => [\n     OP_REF,\n     ERASING_OP,\n     FLOAT_EQUALITY_WITHOUT_ABS,\n+    IDENTITY_OP,\n ]);\n impl Operators {\n     pub fn new(verbose_bit_mask_threshold: u64) -> Self {\n@@ -457,6 +478,7 @@ impl<'tcx> LateLintPass<'tcx> for Operators {\n                         op_ref::check(cx, e, op.node, lhs, rhs);\n                     }\n                     erasing_op::check(cx, e, op.node, lhs, rhs);\n+                    identity_op::check(cx, e, op.node, lhs, rhs);\n                 }\n                 self.arithmetic_context.check_binary(cx, e, op.node, lhs, rhs);\n                 bit_mask::check(cx, e, op.node, lhs, rhs);"}]}