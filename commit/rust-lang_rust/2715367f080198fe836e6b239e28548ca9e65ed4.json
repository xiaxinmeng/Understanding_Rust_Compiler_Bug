{"sha": "2715367f080198fe836e6b239e28548ca9e65ed4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MTUzNjdmMDgwMTk4ZmU4MzZlNmIyMzllMjg1NDhjYTllNjVlZDQ=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-11-25T01:33:35Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-12-30T14:17:28Z"}, "message": "intrinsics : uabs and iabs", "tree": {"sha": "29051232c5b9c91118890df0aff00e7d59e48482", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29051232c5b9c91118890df0aff00e7d59e48482"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2715367f080198fe836e6b239e28548ca9e65ed4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2715367f080198fe836e6b239e28548ca9e65ed4", "html_url": "https://github.com/rust-lang/rust/commit/2715367f080198fe836e6b239e28548ca9e65ed4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2715367f080198fe836e6b239e28548ca9e65ed4/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc14a108ae25fb135ea47fd683de87d1da5fc49e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc14a108ae25fb135ea47fd683de87d1da5fc49e", "html_url": "https://github.com/rust-lang/rust/commit/dc14a108ae25fb135ea47fd683de87d1da5fc49e"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "3452370013ade7aeb3a0d059968ee582760ae289", "filename": "src/libcompiler_builtins/lib.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2715367f080198fe836e6b239e28548ca9e65ed4/src%2Flibcompiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2715367f080198fe836e6b239e28548ca9e65ed4/src%2Flibcompiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Flib.rs?ref=2715367f080198fe836e6b239e28548ca9e65ed4", "patch": "@@ -292,12 +292,12 @@ pub mod reimpls {\n \n     #[export_name=\"__modti3\"]\n     pub extern fn i128_mod(a: i128_, b: i128_) -> i128_ {\n-        let b = b.abs();\n+        let b = b.uabs();\n         let sa = a.signum();\n-        let a = a.abs();\n+        let a = a.uabs();\n         unsafe {\n             let mut r = ::core::mem::zeroed();\n-            u128_div_mod(a as u128_, b as u128_, &mut r);\n+            u128_div_mod(a, b, &mut r);\n             if sa == -1 { -(r as i128_) } else { r as i128_ }\n         }\n     }\n@@ -306,13 +306,13 @@ pub mod reimpls {\n     pub extern fn i128_div(a: i128_, b: i128_) -> i128_ {\n         let sa = a.signum();\n         let sb = b.signum();\n-        let a = a.abs();\n-        let b = b.abs();\n+        let a = a.uabs();\n+        let b = b.uabs();\n         let sr = sa * sb; // sign of quotient\n         if sr == -1 {\n-            -(u128_div_mod(a as u128_, b as u128_, ptr::null_mut()) as i128_)\n+            -(u128_div_mod(a, b, ptr::null_mut()) as i128_)\n         } else {\n-            u128_div_mod(a as u128_, b as u128_, ptr::null_mut()) as i128_\n+            u128_div_mod(a, b, ptr::null_mut()) as i128_\n         }\n     }\n \n@@ -340,9 +340,9 @@ pub mod reimpls {\n             }\n \n             let sa = a.signum();\n-            let abs_a = a.abs();\n+            let abs_a = a.iabs();\n             let sb = b.signum();\n-            let abs_b = b.abs();\n+            let abs_b = b.iabs();\n             if abs_a < 2 || abs_b < 2 {\n                 return result;\n             }\n@@ -473,6 +473,19 @@ pub mod reimpls {\n         mul!(a, b, i128_, i64)\n     }\n \n+    trait AbsExt: Sized {\n+        fn uabs(self) -> u128_ {\n+            self.iabs() as u128_\n+        }\n+        fn iabs(self) -> i128_;\n+    }\n+\n+    impl AbsExt for i128_ {\n+        fn iabs(self) -> i128_ {\n+            ((self ^ self).wrapping_sub(self))\n+        }\n+    }\n+\n     trait FloatStuff: Sized {\n         type ToBytes;\n \n@@ -579,19 +592,19 @@ pub mod reimpls {\n     #[export_name=\"__floattidf\"]\n     pub extern fn i128_as_f64(a: i128_) -> f64 {\n         match a.signum() {\n-            1 => u128_as_f64(a.abs() as u128_),\n+            1 => u128_as_f64(a.uabs()),\n             0 => 0.0,\n-            -1 => -u128_as_f64(a.abs() as u128_),\n+            -1 => -u128_as_f64(a.uabs()),\n             _ => unimplemented()\n         }\n     }\n \n     #[export_name=\"__floattisf\"]\n     pub extern fn i128_as_f32(a: i128_) -> f32 {\n         match a.signum() {\n-            1 => u128_as_f32(a.abs() as u128_),\n+            1 => u128_as_f32(a.uabs()),\n             0 => 0.0,\n-            -1 => -u128_as_f32(a.abs() as u128_),\n+            -1 => -u128_as_f32(a.uabs()),\n             _ => unimplemented()\n         }\n     }"}]}