{"sha": "c3c03098d8fc1679762810fa2d18926baca47148", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYzAzMDk4ZDhmYzE2Nzk3NjI4MTBmYTJkMTg5MjZiYWNhNDcxNDg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T01:01:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-28T01:01:51Z"}, "message": "Rollup merge of #62996 - petrochenkov:outest, r=Mark-Simulacrum\n\ntidy: Add a check for inline unit tests\n\nAs described in https://github.com/rust-lang/rust/issues/61097.\n\nThere's a large whitelist right now, because in many crates the tests are not outlined yet.\n~This PR only outlines tests in one crate (`rustc_lexer`) as an example.~\n\nr? @Mark-Simulacrum", "tree": {"sha": "2a9fd54455265a248eaa582c8d781a5b005de5f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a9fd54455265a248eaa582c8d781a5b005de5f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3c03098d8fc1679762810fa2d18926baca47148", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdPPQACRBK7hj4Ov3rIwAAdHIIAEHPJQFrrl1OAmg+Wckv1PaR\n2Lcm6doACQ/Qdbm7Tp2UvYl7qqWyJUrppkXzWqGj+6avH4lQ+0Lj1ikqyepdsnIX\nZtarWq4bX6Fs2HYScdrCR3GyUCrGFrSyPmW3Vn1WT+fdj4lVNrqDp+/si3zDaEQO\nFunyULI0RaawcAKfK+O9p6xi7n5M7sYlLrYzVsAQnn8nIUKKV9b3ADi99yoaqj2r\n8v5cchzZWdeaf9UWjlIPuMHJEN8U5aa2uC/z1yoj7O7SiPwrN0+di01dPSrdgvIy\nZn5PMF7GrNUnCf//yLUeB710bb7mimDjeV2wgto0x2JQL44HCH39kPSnDIfiQi4=\n=HcSw\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a9fd54455265a248eaa582c8d781a5b005de5f2\nparent fb6fdd4682235be20b8839d2ed39fac7e082d74e\nparent aecaa03cf607d92d5ef5346400dd5302de8e5303\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564275711 +0200\ncommitter GitHub <noreply@github.com> 1564275711 +0200\n\nRollup merge of #62996 - petrochenkov:outest, r=Mark-Simulacrum\n\ntidy: Add a check for inline unit tests\n\nAs described in https://github.com/rust-lang/rust/issues/61097.\n\nThere's a large whitelist right now, because in many crates the tests are not outlined yet.\n~This PR only outlines tests in one crate (`rustc_lexer`) as an example.~\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c03098d8fc1679762810fa2d18926baca47148", "html_url": "https://github.com/rust-lang/rust/commit/c3c03098d8fc1679762810fa2d18926baca47148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3c03098d8fc1679762810fa2d18926baca47148/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb6fdd4682235be20b8839d2ed39fac7e082d74e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb6fdd4682235be20b8839d2ed39fac7e082d74e", "html_url": "https://github.com/rust-lang/rust/commit/fb6fdd4682235be20b8839d2ed39fac7e082d74e"}, {"sha": "aecaa03cf607d92d5ef5346400dd5302de8e5303", "url": "https://api.github.com/repos/rust-lang/rust/commits/aecaa03cf607d92d5ef5346400dd5302de8e5303", "html_url": "https://github.com/rust-lang/rust/commit/aecaa03cf607d92d5ef5346400dd5302de8e5303"}], "stats": {"total": 127, "additions": 97, "deletions": 30}, "files": [{"sha": "3d40bdced63e069705107bff7bf51c0db5b76868", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3c03098d8fc1679762810fa2d18926baca47148/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c03098d8fc1679762810fa2d18926baca47148/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=c3c03098d8fc1679762810fa2d18926baca47148", "patch": "@@ -38,8 +38,8 @@ pub mod pal;\n pub mod deps;\n pub mod extdeps;\n pub mod ui_tests;\n+pub mod unit_tests;\n pub mod unstable_book;\n-pub mod libcoretest;\n \n fn filter_dirs(path: &Path) -> bool {\n     let skip = ["}, {"sha": "579a20e1142bea7d9d1959516a606ddcd328c54e", "filename": "src/tools/tidy/src/libcoretest.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fb6fdd4682235be20b8839d2ed39fac7e082d74e/src%2Ftools%2Ftidy%2Fsrc%2Flibcoretest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6fdd4682235be20b8839d2ed39fac7e082d74e/src%2Ftools%2Ftidy%2Fsrc%2Flibcoretest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flibcoretest.rs?ref=fb6fdd4682235be20b8839d2ed39fac7e082d74e", "patch": "@@ -1,28 +0,0 @@\n-//! Tidy check to ensure `#[test]` is not used directly inside `libcore`.\n-//!\n-//! `#![no_core]` libraries cannot be tested directly due to duplicating lang\n-//! item. All tests must be written externally in `libcore/tests`.\n-\n-use std::path::Path;\n-\n-pub fn check(path: &Path, bad: &mut bool) {\n-    let libcore_path = path.join(\"libcore\");\n-    super::walk(\n-        &libcore_path,\n-        &mut |subpath| t!(subpath.strip_prefix(&libcore_path)).starts_with(\"tests\"),\n-        &mut |entry, contents| {\n-            let subpath = entry.path();\n-            if let Some(\"rs\") = subpath.extension().and_then(|e| e.to_str()) {\n-                let contents = contents.trim();\n-                if !contents.starts_with(\"//\") && contents.contains(\"#[test]\") {\n-                    tidy_error!(\n-                        bad,\n-                        \"`{}` contains `#[test]`; libcore tests must be placed inside \\\n-                        `src/libcore/tests/`\",\n-                        subpath.display()\n-                    );\n-                }\n-            }\n-        },\n-    );\n-}"}, {"sha": "19f02f0a96e1da029667269280fc38189c0c6645", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3c03098d8fc1679762810fa2d18926baca47148/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c03098d8fc1679762810fa2d18926baca47148/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=c3c03098d8fc1679762810fa2d18926baca47148", "patch": "@@ -27,7 +27,7 @@ fn main() {\n     let collected = features::check(&path, &mut bad, verbose);\n     pal::check(&path, &mut bad);\n     unstable_book::check(&path, collected, &mut bad);\n-    libcoretest::check(&path, &mut bad);\n+    unit_tests::check(&path, &mut bad);\n     if !args.iter().any(|s| *s == \"--no-vendor\") {\n         deps::check(&path, &mut bad);\n     }"}, {"sha": "b789e5cfd48d5c1e5c4d0255028db6cc96740707", "filename": "src/tools/tidy/src/unit_tests.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/c3c03098d8fc1679762810fa2d18926baca47148/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3c03098d8fc1679762810fa2d18926baca47148/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs?ref=c3c03098d8fc1679762810fa2d18926baca47148", "patch": "@@ -0,0 +1,95 @@\n+//! Tidy check to ensure `#[test]` and `#[bench]` are not used directly inside\n+//! `libcore` or `liballoc`.\n+//!\n+//! `#![no_std]` libraries cannot be tested directly due to duplicating lang\n+//! items. All tests and benchmarks must be written externally in `libcore/{tests,benches}`\n+//! or `liballoc/{tests,benches}`.\n+//!\n+//! Outside of libcore and liballoc tests and benchmarks should be outlined into separate files\n+//! named `tests.rs` or `benches.rs`, or directories named `tests` or `benches` unconfigured\n+//! during normal build.\n+\n+use std::path::Path;\n+\n+pub fn check(root_path: &Path, bad: &mut bool) {\n+    let libcore = &root_path.join(\"libcore\");\n+    let liballoc = &root_path.join(\"liballoc\");\n+    let libcore_tests = &root_path.join(\"libcore/tests\");\n+    let liballoc_tests = &root_path.join(\"liballoc/tests\");\n+    let libcore_benches = &root_path.join(\"libcore/benches\");\n+    let liballoc_benches = &root_path.join(\"liballoc/benches\");\n+    let is_core_or_alloc = |path: &Path| {\n+        let is_core = path.starts_with(libcore) &&\n+                      !(path.starts_with(libcore_tests) || path.starts_with(libcore_benches));\n+        let is_alloc = path.starts_with(liballoc) &&\n+                       !(path.starts_with(liballoc_tests) || path.starts_with(liballoc_benches));\n+        is_core || is_alloc\n+    };\n+    let fixme = [\n+        \"liballoc\",\n+        \"libpanic_unwind/dwarf\",\n+        \"librustc\",\n+        \"librustc_data_structures\",\n+        \"librustc_incremental/persist\",\n+        \"librustc_lexer/src\",\n+        \"librustc_target/spec\",\n+        \"librustdoc\",\n+        \"libserialize\",\n+        \"libstd\",\n+        \"libsyntax\",\n+        \"libsyntax_pos\",\n+        \"libterm/terminfo\",\n+        \"libtest\",\n+        \"tools/compiletest/src\",\n+        \"tools/tidy/src\",\n+    ];\n+\n+    let mut skip = |path: &Path| {\n+        let file_name = path.file_name().unwrap_or_default();\n+        if path.is_dir() {\n+            super::filter_dirs(path) ||\n+            path.ends_with(\"src/test\") ||\n+            path.ends_with(\"src/doc\") ||\n+            (file_name == \"tests\" || file_name == \"benches\") && !is_core_or_alloc(path) ||\n+            fixme.iter().any(|p| path.ends_with(p))\n+        } else {\n+            let extension = path.extension().unwrap_or_default();\n+            extension != \"rs\" ||\n+            (file_name == \"tests.rs\" || file_name == \"benches.rs\") && !is_core_or_alloc(path)\n+        }\n+    };\n+\n+    super::walk(\n+        root_path,\n+        &mut skip,\n+        &mut |entry, contents| {\n+            let path = entry.path();\n+            let is_libcore = path.starts_with(libcore);\n+            let is_liballoc = path.starts_with(liballoc);\n+            for (i, line) in contents.lines().enumerate() {\n+                let line = line.trim();\n+                let is_test = || line.contains(\"#[test]\") && !line.contains(\"`#[test]\");\n+                let is_bench = || line.contains(\"#[bench]\") && !line.contains(\"`#[bench]\");\n+                if !line.starts_with(\"//\") && (is_test() || is_bench()) {\n+                    let explanation = if is_libcore {\n+                        \"libcore unit tests and benchmarks must be placed into \\\n+                         `libcore/tests` or `libcore/benches`\"\n+                    } else if is_liballoc {\n+                        \"liballoc unit tests and benchmarks must be placed into \\\n+                         `liballoc/tests` or `liballoc/benches`\"\n+                    } else {\n+                        \"unit tests and benchmarks must be placed into \\\n+                         separate files or directories named \\\n+                         `tests.rs`, `benches.rs`, `tests` or `benches`\"\n+                    };\n+                    let name = if is_test() { \"test\" } else { \"bench\" };\n+                    tidy_error!(\n+                        bad, \"`{}:{}` contains `#[{}]`; {}\",\n+                        path.display(), i + 1, name, explanation,\n+                    );\n+                    return;\n+                }\n+            }\n+        },\n+    );\n+}"}]}