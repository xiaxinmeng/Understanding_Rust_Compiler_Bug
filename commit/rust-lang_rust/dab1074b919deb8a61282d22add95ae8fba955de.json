{"sha": "dab1074b919deb8a61282d22add95ae8fba955de", "node_id": "C_kwDOAAsO6NoAKGRhYjEwNzRiOTE5ZGViOGE2MTI4MmQyMmFkZDk1YWU4ZmJhOTU1ZGU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-27T11:58:34Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-16T11:37:50Z"}, "message": "Only generate `OpaqueCast` for opaque types", "tree": {"sha": "d4140cdded32d6674771f16dd25385dacc712c3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4140cdded32d6674771f16dd25385dacc712c3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dab1074b919deb8a61282d22add95ae8fba955de", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dab1074b919deb8a61282d22add95ae8fba955de", "html_url": "https://github.com/rust-lang/rust/commit/dab1074b919deb8a61282d22add95ae8fba955de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dab1074b919deb8a61282d22add95ae8fba955de/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40e2de8c41b17b4813142b669ec083b5ef530dd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/40e2de8c41b17b4813142b669ec083b5ef530dd6", "html_url": "https://github.com/rust-lang/rust/commit/40e2de8c41b17b4813142b669ec083b5ef530dd6"}], "stats": {"total": 70, "additions": 47, "deletions": 23}, "files": [{"sha": "4d9e9b7c4738d117f42f21fe6f13887dc7f9fbee", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dab1074b919deb8a61282d22add95ae8fba955de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab1074b919deb8a61282d22add95ae8fba955de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=dab1074b919deb8a61282d22add95ae8fba955de", "patch": "@@ -293,6 +293,10 @@ impl<'tcx> PlaceBuilder<'tcx> {\n         self.base\n     }\n \n+    pub(crate) fn projection(&self) -> &[PlaceElem<'tcx>] {\n+        &self.projection\n+    }\n+\n     pub(crate) fn field(self, f: Field, ty: Ty<'tcx>) -> Self {\n         self.project(PlaceElem::Field(f, ty))\n     }"}, {"sha": "34a310539f0a80cd1a0427e12b4e7efd179a450e", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dab1074b919deb8a61282d22add95ae8fba955de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab1074b919deb8a61282d22add95ae8fba955de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=dab1074b919deb8a61282d22add95ae8fba955de", "patch": "@@ -244,7 +244,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             .map(|arm| {\n                 let arm = &self.thir[arm];\n                 let arm_has_guard = arm.guard.is_some();\n-                let arm_candidate = Candidate::new(scrutinee.clone(), &arm.pattern, arm_has_guard);\n+                let arm_candidate =\n+                    Candidate::new(scrutinee.clone(), &arm.pattern, arm_has_guard, self);\n                 (arm, arm_candidate)\n             })\n             .collect()\n@@ -578,7 +579,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         initializer: PlaceBuilder<'tcx>,\n         set_match_place: bool,\n     ) -> BlockAnd<()> {\n-        let mut candidate = Candidate::new(initializer.clone(), &irrefutable_pat, false);\n+        let mut candidate = Candidate::new(initializer.clone(), &irrefutable_pat, false, self);\n         let fake_borrow_temps = self.lower_match_tree(\n             block,\n             irrefutable_pat.span,\n@@ -859,11 +860,16 @@ struct Candidate<'pat, 'tcx> {\n }\n \n impl<'tcx, 'pat> Candidate<'pat, 'tcx> {\n-    fn new(place: PlaceBuilder<'tcx>, pattern: &'pat Pat<'tcx>, has_guard: bool) -> Self {\n+    fn new(\n+        place: PlaceBuilder<'tcx>,\n+        pattern: &'pat Pat<'tcx>,\n+        has_guard: bool,\n+        cx: &Builder<'_, 'tcx>,\n+    ) -> Self {\n         Candidate {\n             span: pattern.span,\n             has_guard,\n-            match_pairs: smallvec![MatchPair::new(place, pattern)],\n+            match_pairs: smallvec![MatchPair::new(place, pattern, cx)],\n             bindings: Vec::new(),\n             ascriptions: Vec::new(),\n             subcandidates: Vec::new(),\n@@ -1383,7 +1389,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         debug!(\"candidate={:#?}\\npats={:#?}\", candidate, pats);\n         let mut or_candidates: Vec<_> = pats\n             .iter()\n-            .map(|pat| Candidate::new(place.clone(), pat, candidate.has_guard))\n+            .map(|pat| Candidate::new(place.clone(), pat, candidate.has_guard, self))\n             .collect();\n         let mut or_candidate_refs: Vec<_> = or_candidates.iter_mut().collect();\n         let otherwise = if candidate.otherwise_block.is_some() {\n@@ -1779,8 +1785,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let expr_span = expr.span;\n         let expr_place_builder = unpack!(block = self.lower_scrutinee(block, expr, expr_span));\n         let wildcard = Pat::wildcard_from_ty(pat.ty);\n-        let mut guard_candidate = Candidate::new(expr_place_builder.clone(), &pat, false);\n-        let mut otherwise_candidate = Candidate::new(expr_place_builder.clone(), &wildcard, false);\n+        let mut guard_candidate = Candidate::new(expr_place_builder.clone(), &pat, false, self);\n+        let mut otherwise_candidate =\n+            Candidate::new(expr_place_builder.clone(), &wildcard, false, self);\n         let fake_borrow_temps = self.lower_match_tree(\n             block,\n             pat.span,\n@@ -2276,8 +2283,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let (matching, failure) = self.in_if_then_scope(*let_else_scope, |this| {\n             let scrutinee = unpack!(block = this.lower_scrutinee(block, init, initializer_span));\n             let pat = Pat { ty: init.ty, span: else_block_span, kind: PatKind::Wild };\n-            let mut wildcard = Candidate::new(scrutinee.clone(), &pat, false);\n-            let mut candidate = Candidate::new(scrutinee.clone(), pattern, false);\n+            let mut wildcard = Candidate::new(scrutinee.clone(), &pat, false, this);\n+            let mut candidate = Candidate::new(scrutinee.clone(), pattern, false, this);\n             let fake_borrow_temps = this.lower_match_tree(\n                 block,\n                 initializer_span,"}, {"sha": "828f32db3618e5eeabc04d126b2057ccff6088c0", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dab1074b919deb8a61282d22add95ae8fba955de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab1074b919deb8a61282d22add95ae8fba955de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=dab1074b919deb8a61282d22add95ae8fba955de", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     ) -> Vec<Candidate<'pat, 'tcx>> {\n         pats.iter()\n             .map(|box pat| {\n-                let mut candidate = Candidate::new(place.clone(), pat, candidate.has_guard);\n+                let mut candidate = Candidate::new(place.clone(), pat, candidate.has_guard, self);\n                 self.simplify_candidate(&mut candidate);\n                 candidate\n             })\n@@ -164,7 +164,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     });\n                 }\n \n-                candidate.match_pairs.push(MatchPair::new(match_pair.place, subpattern));\n+                candidate.match_pairs.push(MatchPair::new(match_pair.place, subpattern, self));\n \n                 Ok(())\n             }\n@@ -194,7 +194,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 if let Some(subpattern) = subpattern.as_ref() {\n                     // this is the `x @ P` case; have to keep matching against `P` now\n-                    candidate.match_pairs.push(MatchPair::new(match_pair.place, subpattern));\n+                    candidate.match_pairs.push(MatchPair::new(match_pair.place, subpattern, self));\n                 }\n \n                 Ok(())\n@@ -305,7 +305,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             PatKind::Deref { ref subpattern } => {\n                 let place_builder = match_pair.place.deref();\n-                candidate.match_pairs.push(MatchPair::new(place_builder, subpattern));\n+                candidate.match_pairs.push(MatchPair::new(place_builder, subpattern, self));\n                 Ok(())\n             }\n "}, {"sha": "9f9987edbfd1cdb1ab80f2791cebc685c4a95416", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab1074b919deb8a61282d22add95ae8fba955de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab1074b919deb8a61282d22add95ae8fba955de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=dab1074b919deb8a61282d22add95ae8fba955de", "patch": "@@ -729,7 +729,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // e.g., `(x as Variant).0`\n             let place = downcast_place.clone().field(subpattern.field, subpattern.pattern.ty);\n             // e.g., `(x as Variant).0 @ P1`\n-            MatchPair::new(place, &subpattern.pattern)\n+            MatchPair::new(place, &subpattern.pattern, self)\n         });\n \n         candidate.match_pairs.extend(consequent_match_pairs);"}, {"sha": "d77d296f206536ca9e70ce1126e0d552de2afc21", "filename": "compiler/rustc_mir_build/src/build/matches/util.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dab1074b919deb8a61282d22add95ae8fba955de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab1074b919deb8a61282d22add95ae8fba955de/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs?ref=dab1074b919deb8a61282d22add95ae8fba955de", "patch": "@@ -1,9 +1,11 @@\n+use crate::build::expr::as_place::PlaceBase;\n use crate::build::expr::as_place::PlaceBuilder;\n use crate::build::matches::MatchPair;\n use crate::build::Builder;\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n use rustc_middle::ty;\n+use rustc_middle::ty::TypeVisitable;\n use smallvec::SmallVec;\n use std::convert::TryInto;\n \n@@ -17,7 +19,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             .iter()\n             .map(|fieldpat| {\n                 let place = place.clone().field(fieldpat.field, fieldpat.pattern.ty);\n-                MatchPair::new(place, &fieldpat.pattern)\n+                MatchPair::new(place, &fieldpat.pattern, self)\n             })\n             .collect()\n     }\n@@ -45,7 +47,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let elem =\n                 ProjectionElem::ConstantIndex { offset: idx as u64, min_length, from_end: false };\n             let place = place.clone().project(elem);\n-            MatchPair::new(place, subpattern)\n+            MatchPair::new(place, subpattern, self)\n         }));\n \n         if let Some(subslice_pat) = opt_slice {\n@@ -55,7 +57,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 to: if exact_size { min_length - suffix_len } else { suffix_len },\n                 from_end: !exact_size,\n             });\n-            match_pairs.push(MatchPair::new(subslice, subslice_pat));\n+            match_pairs.push(MatchPair::new(subslice, subslice_pat, self));\n         }\n \n         match_pairs.extend(suffix.iter().rev().enumerate().map(|(idx, subpattern)| {\n@@ -66,7 +68,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 from_end: !exact_size,\n             };\n             let place = place.clone().project(elem);\n-            MatchPair::new(place, subpattern)\n+            MatchPair::new(place, subpattern, self)\n         }));\n     }\n \n@@ -95,14 +97,25 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n impl<'pat, 'tcx> MatchPair<'pat, 'tcx> {\n     pub(in crate::build) fn new(\n-        mut place: PlaceBuilder<'tcx>,\n+        place: PlaceBuilder<'tcx>,\n         pattern: &'pat Pat<'tcx>,\n+        cx: &Builder<'_, 'tcx>,\n     ) -> MatchPair<'pat, 'tcx> {\n         // Force the place type to the pattern's type.\n         // FIXME(oli-obk): can we use this to simplify slice/array pattern hacks?\n-        // FIXME(oli-obk): only add this projection if `place` actually had an opaque\n-        // type before the projection.\n-        place = place.project(ProjectionElem::OpaqueCast(pattern.ty));\n+        let mut place = match place.try_upvars_resolved(cx) {\n+            Ok(val) | Err(val) => val,\n+        };\n+        let may_need_cast = match place.base() {\n+            PlaceBase::Local(local) => {\n+                let ty = Place::ty_from(local, place.projection(), &cx.local_decls, cx.tcx).ty;\n+                ty != pattern.ty && ty.has_opaque_types()\n+            }\n+            _ => true,\n+        };\n+        if may_need_cast {\n+            place = place.project(ProjectionElem::OpaqueCast(pattern.ty));\n+        }\n         MatchPair { place, pattern }\n     }\n }"}, {"sha": "702ca2eaf5c4da689fca4ce23be6ffe14ad1eb52", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab1074b919deb8a61282d22add95ae8fba955de/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab1074b919deb8a61282d22add95ae8fba955de/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=dab1074b919deb8a61282d22add95ae8fba955de", "patch": "@@ -893,7 +893,7 @@ where\n             }\n             ty::Slice(ety) => self.open_drop_for_array(*ety, None),\n \n-            _ => bug!(\"open drop from non-ADT `{:?}`\", ty),\n+            _ => span_bug!(self.source_info.span, \"open drop from non-ADT `{:?}`\", ty),\n         }\n     }\n "}]}