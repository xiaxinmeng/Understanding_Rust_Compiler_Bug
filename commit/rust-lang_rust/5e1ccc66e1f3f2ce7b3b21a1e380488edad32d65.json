{"sha": "5e1ccc66e1f3f2ce7b3b21a1e380488edad32d65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMWNjYzY2ZTFmM2YyY2U3YjNiMjFhMWUzODA0ODhlZGFkMzJkNjU=", "commit": {"author": {"name": "Vijay Korapaty", "email": "rust@korapaty.com", "date": "2013-09-24T17:25:45Z"}, "committer": {"name": "Vijay Korapaty", "email": "rust@korapaty.com", "date": "2013-10-17T03:03:01Z"}, "message": "Added comments to public functions in num.rs.\n\nCopied existing comments from other files, and added comments to\nfunctions that did not have existing comments available.", "tree": {"sha": "c47ae06eea046f8396af2ff1189fd0279db4a632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c47ae06eea046f8396af2ff1189fd0279db4a632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e1ccc66e1f3f2ce7b3b21a1e380488edad32d65", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e1ccc66e1f3f2ce7b3b21a1e380488edad32d65", "html_url": "https://github.com/rust-lang/rust/commit/5e1ccc66e1f3f2ce7b3b21a1e380488edad32d65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e1ccc66e1f3f2ce7b3b21a1e380488edad32d65/comments", "author": null, "committer": null, "parents": [{"sha": "c92f2168d49ee330992b9e23cd3dabf695e0d248", "url": "https://api.github.com/repos/rust-lang/rust/commits/c92f2168d49ee330992b9e23cd3dabf695e0d248", "html_url": "https://github.com/rust-lang/rust/commit/c92f2168d49ee330992b9e23cd3dabf695e0d248"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "14deae6c1b58aded22ebe03e3b93e0f4520de368", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/5e1ccc66e1f3f2ce7b3b21a1e380488edad32d65/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e1ccc66e1f3f2ce7b3b21a1e380488edad32d65/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=5e1ccc66e1f3f2ce7b3b21a1e380488edad32d65", "patch": "@@ -42,21 +42,26 @@ pub trait Orderable: Ord {\n     fn clamp(&self, mn: &Self, mx: &Self) -> Self;\n }\n \n+/// Return the smaller number.\n #[inline(always)] pub fn min<T: Orderable>(x: T, y: T) -> T { x.min(&y) }\n+/// Return the larger number.\n #[inline(always)] pub fn max<T: Orderable>(x: T, y: T) -> T { x.max(&y) }\n+/// Returns the number constrained within the range `mn <= self <= mx`.\n #[inline(always)] pub fn clamp<T: Orderable>(value: T, mn: T, mx: T) -> T { value.clamp(&mn, &mx) }\n \n pub trait Zero {\n     fn zero() -> Self;      // FIXME (#5527): This should be an associated constant\n     fn is_zero(&self) -> bool;\n }\n \n+/// Returns `0` of appropriate type.\n #[inline(always)] pub fn zero<T: Zero>() -> T { Zero::zero() }\n \n pub trait One {\n     fn one() -> Self;       // FIXME (#5527): This should be an associated constant\n }\n \n+/// Returns `1` of appropriate type.\n #[inline(always)] pub fn one<T: One>() -> T { One::one() }\n \n pub trait Signed: Num\n@@ -69,8 +74,26 @@ pub trait Signed: Num\n     fn is_negative(&self) -> bool;\n }\n \n+/// Computes the absolute value.\n+///\n+/// For float, f32, and f64, `NaN` will be returned if the number is `NaN`\n #[inline(always)] pub fn abs<T: Signed>(value: T) -> T { value.abs() }\n+/// The positive difference of two numbers.\n+///\n+/// Returns `zero` if the number is less than or equal to `other`,\n+/// otherwise the difference between `self` and `other` is returned.\n #[inline(always)] pub fn abs_sub<T: Signed>(x: T, y: T) -> T { x.abs_sub(&y) }\n+/// Returns the sign of the number.\n+///\n+/// For float, f32, f64:\n+/// - `1.0` if the number is positive, `+0.0` or `infinity`\n+/// - `-1.0` if the number is negative, `-0.0` or `neg_infinity`\n+/// - `NaN` if the number is `NaN`\n+///\n+/// For int:\n+/// - `0` if the number is zero\n+/// - `1` if the number is positive\n+/// - `-1` if the number is negative\n #[inline(always)] pub fn signum<T: Signed>(value: T) -> T { value.signum() }\n \n pub trait Unsigned: Num {}\n@@ -106,7 +129,11 @@ pub trait Integer: Num\n     fn is_odd(&self) -> bool;\n }\n \n+/// Calculates the Greatest Common Divisor (GCD) of the number and `other`.\n+///\n+/// The result is always positive.\n #[inline(always)] pub fn gcd<T: Integer>(x: T, y: T) -> T { x.gcd(&y) }\n+/// Calculates the Lowest Common Multiple (LCM) of the number and `other`.\n #[inline(always)] pub fn lcm<T: Integer>(x: T, y: T) -> T { x.lcm(&y) }\n \n pub trait Round {\n@@ -132,10 +159,23 @@ pub trait Algebraic {\n     fn hypot(&self, other: &Self) -> Self;\n }\n \n+/// Raise a number to a power.\n+///\n+/// # Example\n+///\n+/// ```rust\n+/// let sixteen: float = num::pow(2.0, 4.0);\n+/// assert_eq!(sixteen, 16.0);\n+/// ```\n #[inline(always)] pub fn pow<T: Algebraic>(value: T, n: T) -> T { value.pow(&n) }\n+/// Take the squre root of a number.\n #[inline(always)] pub fn sqrt<T: Algebraic>(value: T) -> T { value.sqrt() }\n+/// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n #[inline(always)] pub fn rsqrt<T: Algebraic>(value: T) -> T { value.rsqrt() }\n+/// Take the cubic root of a number.\n #[inline(always)] pub fn cbrt<T: Algebraic>(value: T) -> T { value.cbrt() }\n+/// Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and\n+/// `y`.\n #[inline(always)] pub fn hypot<T: Algebraic>(x: T, y: T) -> T { x.hypot(&y) }\n \n pub trait Trigonometric {\n@@ -151,15 +191,23 @@ pub trait Trigonometric {\n     fn sin_cos(&self) -> (Self, Self);\n }\n \n+/// Sine function.\n #[inline(always)] pub fn sin<T: Trigonometric>(value: T) -> T { value.sin() }\n+/// Cosine function.\n #[inline(always)] pub fn cos<T: Trigonometric>(value: T) -> T { value.cos() }\n+/// Tangent function.\n #[inline(always)] pub fn tan<T: Trigonometric>(value: T) -> T { value.tan() }\n \n+/// Compute the arcsine of the number.\n #[inline(always)] pub fn asin<T: Trigonometric>(value: T) -> T { value.asin() }\n+/// Compute the arccosine of the number.\n #[inline(always)] pub fn acos<T: Trigonometric>(value: T) -> T { value.acos() }\n+/// Compute the arctangent of the number.\n #[inline(always)] pub fn atan<T: Trigonometric>(value: T) -> T { value.atan() }\n \n+/// Compute the arctangent with 2 arguments.\n #[inline(always)] pub fn atan2<T: Trigonometric>(x: T, y: T) -> T { x.atan2(&y) }\n+/// Simultaneously computes the sine and cosine of the number.\n #[inline(always)] pub fn sin_cos<T: Trigonometric>(value: T) -> (T, T) { value.sin_cos() }\n \n pub trait Exponential {\n@@ -172,12 +220,18 @@ pub trait Exponential {\n     fn log10(&self) -> Self;\n }\n \n+/// Returns `e^(value)`, (the exponential function).\n #[inline(always)] pub fn exp<T: Exponential>(value: T) -> T { value.exp() }\n+/// Returns 2 raised to the power of the number, `2^(value)`.\n #[inline(always)] pub fn exp2<T: Exponential>(value: T) -> T { value.exp2() }\n \n+/// Returns the natural logarithm of the number.\n #[inline(always)] pub fn ln<T: Exponential>(value: T) -> T { value.ln() }\n+/// Returns the logarithm of the number with respect to an arbitrary base.\n #[inline(always)] pub fn log<T: Exponential>(value: T, base: T) -> T { value.log(&base) }\n+/// Returns the base 2 logarithm of the number.\n #[inline(always)] pub fn log2<T: Exponential>(value: T) -> T { value.log2() }\n+/// Returns the base 10 logarithm of the number.\n #[inline(always)] pub fn log10<T: Exponential>(value: T) -> T { value.log10() }\n \n pub trait Hyperbolic: Exponential {\n@@ -190,12 +244,18 @@ pub trait Hyperbolic: Exponential {\n     fn atanh(&self) -> Self;\n }\n \n+/// Hyperbolic cosine function.\n #[inline(always)] pub fn sinh<T: Hyperbolic>(value: T) -> T { value.sinh() }\n+/// Hyperbolic sine function.\n #[inline(always)] pub fn cosh<T: Hyperbolic>(value: T) -> T { value.cosh() }\n+/// Hyperbolic tangent function.\n #[inline(always)] pub fn tanh<T: Hyperbolic>(value: T) -> T { value.tanh() }\n \n+/// Inverse hyperbolic sine function.\n #[inline(always)] pub fn asinh<T: Hyperbolic>(value: T) -> T { value.asinh() }\n+/// Inverse hyperbolic cosine function.\n #[inline(always)] pub fn acosh<T: Hyperbolic>(value: T) -> T { value.acosh() }\n+/// Inverse hyperbolic tangent function.\n #[inline(always)] pub fn atanh<T: Hyperbolic>(value: T) -> T { value.atanh() }\n \n /// Defines constants and methods common to real numbers\n@@ -345,8 +405,16 @@ pub trait Float: Real\n     fn next_after(&self, other: Self) -> Self;\n }\n \n+/// Returns the exponential of the number, minus `1`, `exp(n) - 1`, in a way\n+/// that is accurate even if the number is close to zero.\n #[inline(always)] pub fn exp_m1<T: Float>(value: T) -> T { value.exp_m1() }\n+/// Returns the natural logarithm of the number plus `1`, `ln(n + 1)`, more\n+/// accurately than if the operations were performed separately.\n #[inline(always)] pub fn ln_1p<T: Float>(value: T) -> T { value.ln_1p() }\n+/// Fused multiply-add. Computes `(a * b) + c` with only one rounding error.\n+///\n+/// This produces a more accurate result with better performance (on some\n+/// architectures) than a separate multiplication operation followed by an add.\n #[inline(always)] pub fn mul_add<T: Float>(a: T, b: T, c: T) -> T { a.mul_add(b, c) }\n \n /// A generic trait for converting a value to a number.\n@@ -788,7 +856,7 @@ impl_from_primitive!(u64, n.to_u64())\n impl_from_primitive!(f32, n.to_f32())\n impl_from_primitive!(f64, n.to_f64())\n \n-/// Cast from one machine scalar to another\n+/// Cast from one machine scalar to another.\n ///\n /// # Example\n ///\n@@ -841,7 +909,7 @@ pub trait FromStrRadix {\n     fn from_str_radix(str: &str, radix: uint) -> Option<Self>;\n }\n \n-/// A utility function that just calls FromStrRadix::from_str_radix\n+/// A utility function that just calls FromStrRadix::from_str_radix.\n pub fn from_str_radix<T: FromStrRadix>(str: &str, radix: uint) -> Option<T> {\n     FromStrRadix::from_str_radix(str, radix)\n }"}]}