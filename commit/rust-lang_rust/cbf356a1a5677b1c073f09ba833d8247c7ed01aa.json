{"sha": "cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZjM1NmExYTU2NzdiMWMwNzNmMDliYTgzM2Q4MjQ3YzdlZDAxYWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-22T20:30:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-22T20:30:06Z"}, "message": "Auto merge of #73594 - Aaron1011:revert/move-fn-self-msg, r=Manishearth\n\nRevert PR #72389 - \"Explain move errors that occur due to method calls involving `self\"\n\nr? @petrochenkov", "tree": {"sha": "b66c7db1c354c3ab645f13bdbdd9e9f360f1ba92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b66c7db1c354c3ab645f13bdbdd9e9f360f1ba92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "html_url": "https://github.com/rust-lang/rust/commit/cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bb3dbfc6c6d8992d08431f320ba296a0c2f7498", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb3dbfc6c6d8992d08431f320ba296a0c2f7498", "html_url": "https://github.com/rust-lang/rust/commit/6bb3dbfc6c6d8992d08431f320ba296a0c2f7498"}, {"sha": "e2ab98df085d4f2703f0a4beab4c6432c353f7fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ab98df085d4f2703f0a4beab4c6432c353f7fa", "html_url": "https://github.com/rust-lang/rust/commit/e2ab98df085d4f2703f0a4beab4c6432c353f7fa"}], "stats": {"total": 845, "additions": 108, "deletions": 737}, "files": [{"sha": "9b406d4a1f61c83da062b183816797bd6fcdceeb", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -3532,7 +3532,6 @@ dependencies = [\n  \"serde_json\",\n  \"smallvec 0.6.10\",\n  \"smallvec 1.4.0\",\n- \"syn 0.15.35\",\n  \"syn 1.0.11\",\n  \"url 2.1.0\",\n  \"winapi 0.3.8\","}, {"sha": "bb35203c82604f6dd62ec893bc07376cae4806a7", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -554,10 +554,7 @@ impl Step for Clippy {\n \n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-        // FIXME: Disable clippy tests for now, they're failing on master\n-        // (generally this would mean a toolstate failure but we don't have\n-        // toolstate for clippy anymore).\n-        // builder.run(&mut cargo.into());\n+        builder.run(&mut cargo.into());\n     }\n }\n "}, {"sha": "b7894eb145b0a2cf5c2ec1e816a46d61ecb49482", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n-use rustc_span::source_map::{respan, DesugaringKind, ForLoopLoc, Span, Spanned};\n+use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_target::asm;\n use std::collections::hash_map::Entry;\n@@ -25,7 +25,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     pub(super) fn lower_expr_mut(&mut self, e: &Expr) -> hir::Expr<'hir> {\n-        let mut span = e.span;\n         ensure_sufficient_stack(|| {\n             let kind = match e.kind {\n                 ExprKind::Box(ref inner) => hir::ExprKind::Box(self.lower_expr(inner)),\n@@ -54,7 +53,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::ExprKind::MethodCall(hir_seg, seg.ident.span, args, span)\n                 }\n                 ExprKind::Binary(binop, ref lhs, ref rhs) => {\n-                    span = self.mark_span_with_reason(DesugaringKind::Operator, e.span, None);\n                     let binop = self.lower_binop(binop);\n                     let lhs = self.lower_expr(lhs);\n                     let rhs = self.lower_expr(rhs);\n@@ -224,7 +222,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             hir::Expr {\n                 hir_id: self.lower_node_id(e.id),\n                 kind,\n-                span,\n+                span: e.span,\n                 attrs: e.attrs.iter().map(|a| self.lower_attr(a)).collect::<Vec<_>>().into(),\n             }\n         })\n@@ -239,7 +237,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_binop(&mut self, b: BinOp) -> hir::BinOp {\n-        let span = self.mark_span_with_reason(DesugaringKind::Operator, b.span, None);\n         Spanned {\n             node: match b.node {\n                 BinOpKind::Add => hir::BinOpKind::Add,\n@@ -261,7 +258,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 BinOpKind::Ge => hir::BinOpKind::Ge,\n                 BinOpKind::Gt => hir::BinOpKind::Gt,\n             },\n-            span,\n+            span: b.span,\n         }\n     }\n \n@@ -1363,14 +1360,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         body: &Block,\n         opt_label: Option<Label>,\n     ) -> hir::Expr<'hir> {\n-        let orig_head_span = head.span;\n         // expand <head>\n         let mut head = self.lower_expr_mut(head);\n-        let desugared_span = self.mark_span_with_reason(\n-            DesugaringKind::ForLoop(ForLoopLoc::Head),\n-            orig_head_span,\n-            None,\n-        );\n+        let desugared_span = self.mark_span_with_reason(DesugaringKind::ForLoop, head.span, None);\n         head.span = desugared_span;\n \n         let iter = Ident::with_dummy_span(sym::iter);\n@@ -1465,16 +1457,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // `mut iter => { ... }`\n         let iter_arm = self.arm(iter_pat, loop_expr);\n \n-        let into_iter_span = self.mark_span_with_reason(\n-            DesugaringKind::ForLoop(ForLoopLoc::IntoIter),\n-            orig_head_span,\n-            None,\n-        );\n-\n         // `match ::std::iter::IntoIterator::into_iter(<head>) { ... }`\n         let into_iter_expr = {\n             let into_iter_path = &[sym::iter, sym::IntoIterator, sym::into_iter];\n-            self.expr_call_std_path(into_iter_span, into_iter_path, arena_vec![self; head])\n+            self.expr_call_std_path(desugared_span, into_iter_path, arena_vec![self; head])\n         };\n \n         let match_expr = self.arena.alloc(self.expr_match("}, {"sha": "04d941fb8a7c49d2cf6017b3fe878ce200e4c652", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -468,7 +468,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             let msg = if let Some(simple_ident) = pattern.simple_ident() {\n                 match pattern.span.desugaring_kind() {\n                     None => format!(\"consider giving `{}` {}\", simple_ident, suffix),\n-                    Some(DesugaringKind::ForLoop(_)) => {\n+                    Some(DesugaringKind::ForLoop) => {\n                         \"the element type for this iterator is not specified\".to_string()\n                     }\n                     _ => format!(\"this needs {}\", suffix),"}, {"sha": "25e57aa77acd0d0c5de1066cb887409cc9cbceb5", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -1339,13 +1339,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         }\n     }\n \n-    fn get_fn_param_names(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {\n+    fn get_fn_param_names(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Symbol] {\n         let param_names = match self.kind(id) {\n             EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,\n             EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,\n             _ => Lazy::empty(),\n         };\n-        tcx.arena.alloc_from_iter(param_names.decode((self, tcx)))\n+        tcx.arena.alloc_from_iter(param_names.decode(self))\n     }\n \n     fn exported_symbols("}, {"sha": "cdc8b5e90a64277a30af98ef785278e759ab6844", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -30,7 +30,7 @@ use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n use rustc_serialize::{opaque, Encodable, Encoder, SpecializedEncoder, UseSpecializedEncodable};\n use rustc_session::config::CrateType;\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, ExternalSource, FileName, SourceFile, Span};\n use rustc_target::abi::VariantIdx;\n use std::hash::Hash;\n@@ -1004,12 +1004,18 @@ impl EncodeContext<'tcx> {\n         }\n     }\n \n-    fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Ident]> {\n-        self.tcx.dep_graph.with_ignore(|| self.lazy(self.tcx.hir().body_param_names(body_id)))\n+    fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Symbol]> {\n+        self.tcx.dep_graph.with_ignore(|| {\n+            let body = self.tcx.hir().body(body_id);\n+            self.lazy(body.params.iter().map(|arg| match arg.pat.kind {\n+                hir::PatKind::Binding(_, _, ident, _) => ident.name,\n+                _ => kw::Invalid,\n+            }))\n+        })\n     }\n \n-    fn encode_fn_param_names(&mut self, param_names: &[Ident]) -> Lazy<[Ident]> {\n-        self.lazy(param_names.iter())\n+    fn encode_fn_param_names(&mut self, param_names: &[Ident]) -> Lazy<[Symbol]> {\n+        self.lazy(param_names.iter().map(|ident| ident.name))\n     }\n \n     fn encode_optimized_mir(&mut self, def_id: LocalDefId) {"}, {"sha": "0edea63f922d6ad362486aa42208ce9d2b275a36", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -19,7 +19,7 @@ use rustc_serialize::opaque::Encoder;\n use rustc_session::config::SymbolManglingVersion;\n use rustc_session::CrateDisambiguator;\n use rustc_span::edition::Edition;\n-use rustc_span::symbol::{Ident, Symbol};\n+use rustc_span::symbol::Symbol;\n use rustc_span::{self, Span};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n@@ -327,7 +327,7 @@ struct ModData {\n struct FnData {\n     asyncness: hir::IsAsync,\n     constness: hir::Constness,\n-    param_names: Lazy<[Ident]>,\n+    param_names: Lazy<[Symbol]>,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]"}, {"sha": "d1cfc4867a2fe0f5c57007177e17cbc8b21ccb7f", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::*;\n use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::{kw, Ident, Symbol};\n+use rustc_span::symbol::{kw, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n@@ -374,13 +374,6 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n-    pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {\n-        self.body(id).params.iter().map(|arg| match arg.pat.kind {\n-            PatKind::Binding(_, _, ident, _) => ident,\n-            _ => Ident::new(kw::Invalid, rustc_span::DUMMY_SP),\n-        })\n-    }\n-\n     /// Returns the `BodyOwnerKind` of this `LocalDefId`.\n     ///\n     /// Panics if `LocalDefId` does not have an associated body."}, {"sha": "1e3676496ce3934313afbb8b29dfd61797af3838", "filename": "src/librustc_middle/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_middle%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_middle%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmod.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -12,7 +12,10 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n-use rustc_hir::*;\n+use rustc_hir::Body;\n+use rustc_hir::HirId;\n+use rustc_hir::ItemLocalId;\n+use rustc_hir::Node;\n use rustc_index::vec::IndexVec;\n \n pub struct Owner<'tcx> {\n@@ -76,20 +79,5 @@ pub fn provide(providers: &mut Providers<'_>) {\n     };\n     providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature;\n     providers.hir_owner_nodes = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_deref();\n-    providers.fn_arg_names = |tcx, id| {\n-        let hir = tcx.hir();\n-        let hir_id = hir.as_local_hir_id(id.expect_local());\n-        if let Some(body_id) = hir.maybe_body_owned_by(hir_id) {\n-            tcx.arena.alloc_from_iter(hir.body_param_names(body_id))\n-        } else if let Node::TraitItem(&TraitItem {\n-            kind: TraitItemKind::Fn(_, TraitFn::Required(idents)),\n-            ..\n-        }) = hir.get(hir_id)\n-        {\n-            tcx.arena.alloc_slice(idents)\n-        } else {\n-            span_bug!(hir.span(hir_id), \"fn_arg_names: unexpected item {:?}\", id);\n-        }\n-    };\n     map::provide(providers);\n }"}, {"sha": "27239b4ad2e780c265e9d5633ac38c51e20ed49d", "filename": "src/librustc_middle/lint.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_middle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_middle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flint.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -339,9 +339,7 @@ pub fn struct_lint_level<'s, 'd>(\n pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n     let expn_data = span.ctxt().outer_expn_data();\n     match expn_data.kind {\n-        ExpnKind::Root\n-        | ExpnKind::Desugaring(DesugaringKind::ForLoop(_))\n-        | ExpnKind::Desugaring(DesugaringKind::Operator) => false,\n+        ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop) => false,\n         ExpnKind::AstPass(_) | ExpnKind::Desugaring(_) => true, // well, it's \"external\"\n         ExpnKind::Macro(MacroKind::Bang, _) => {\n             // Dummy span for the `def_site` means it's an external macro."}, {"sha": "9fd45ddf6e60ea0cbbe950bf6be70d1897c8a633", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -723,7 +723,7 @@ rustc_queries! {\n     }\n \n     Other {\n-        query fn_arg_names(def_id: DefId) -> &'tcx [rustc_span::symbol::Ident] {\n+        query fn_arg_names(def_id: DefId) -> &'tcx [Symbol] {\n             desc { |tcx| \"looking up function parameter names for `{}`\", tcx.def_path_str(def_id) }\n         }\n         /// Gets the rendered value of the specified constant or associated constant."}, {"sha": "eb07c7e65f5c98707357de740d06292814224e83", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 7, "deletions": 65, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -24,8 +24,7 @@ use crate::borrow_check::{\n };\n \n use super::{\n-    explain_borrow::BorrowExplanation, FnSelfUseKind, IncludingDowncast, RegionName,\n-    RegionNameSource, UseSpans,\n+    explain_borrow::BorrowExplanation, IncludingDowncast, RegionName, RegionNameSource, UseSpans,\n };\n \n #[derive(Debug)]\n@@ -151,70 +150,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         format!(\"value moved{} here, in previous iteration of loop\", move_msg),\n                     );\n                 } else {\n-                    if let UseSpans::FnSelfUse { var_span, fn_call_span, fn_span, kind } =\n-                        move_spans\n-                    {\n-                        let place_name = self\n-                            .describe_place(moved_place.as_ref())\n-                            .map(|n| format!(\"`{}`\", n))\n-                            .unwrap_or_else(|| \"value\".to_owned());\n-                        match kind {\n-                            FnSelfUseKind::FnOnceCall => {\n-                                err.span_label(\n-                                    fn_call_span,\n-                                    &format!(\"{} moved due to this call\", place_name),\n-                                );\n-                                err.span_note(\n-                                    var_span,\n-                                    \"this value implements `FnOnce`, which causes it to be moved when called\",\n-                                );\n-                            }\n-                            FnSelfUseKind::Operator { self_arg } => {\n-                                err.span_label(\n-                                    fn_call_span,\n-                                    &format!(\"{} moved due to usage in operator\", place_name),\n-                                );\n-                                if self.fn_self_span_reported.insert(fn_span) {\n-                                    err.span_note(\n-                                        self_arg.span,\n-                                        \"calling this operator moves the left-hand side\",\n-                                    );\n-                                }\n-                            }\n-                            FnSelfUseKind::Normal { self_arg, implicit_into_iter } => {\n-                                if implicit_into_iter {\n-                                    err.span_label(\n-                                        fn_call_span,\n-                                        &format!(\n-                                            \"{} moved due to this implicit call to `.into_iter()`\",\n-                                            place_name\n-                                        ),\n-                                    );\n-                                } else {\n-                                    err.span_label(\n-                                        fn_call_span,\n-                                        &format!(\"{} moved due to this method call\", place_name),\n-                                    );\n-                                }\n-                                // Avoid pointing to the same function in multiple different\n-                                // error messages\n-                                if self.fn_self_span_reported.insert(self_arg.span) {\n-                                    err.span_note(\n-                                        self_arg.span,\n-                                        &format!(\"this function consumes the receiver `self` by taking ownership of it, which moves {}\", place_name)\n-                                    );\n-                                }\n-                            }\n-                        }\n-                    } else {\n-                        err.span_label(move_span, format!(\"value moved{} here\", move_msg));\n-                        move_spans.var_span_label(\n-                            &mut err,\n-                            format!(\"variable moved due to use{}\", move_spans.describe()),\n-                        );\n-                    }\n+                    err.span_label(move_span, format!(\"value moved{} here\", move_msg));\n+                    move_spans.var_span_label(\n+                        &mut err,\n+                        format!(\"variable moved due to use{}\", move_spans.describe()),\n+                    );\n                 }\n-                if let Some(DesugaringKind::ForLoop(_)) = move_span.desugaring_kind() {\n+                if Some(DesugaringKind::ForLoop) == move_span.desugaring_kind() {\n                     let sess = self.infcx.tcx.sess;\n                     if let Ok(snippet) = sess.source_map().span_to_snippet(move_span) {\n                         err.span_suggestion("}, {"sha": "5253acbba7f1c0feb30370f68b9e804bedd53ed4", "filename": "src/librustc_mir/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -509,7 +509,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // Used in a closure.\n                 (LaterUseKind::ClosureCapture, var_span)\n             }\n-            UseSpans::OtherUse(span) | UseSpans::FnSelfUse { var_span: span, .. } => {\n+            UseSpans::OtherUse(span) => {\n                 let block = &self.body.basic_blocks()[location.block];\n \n                 let kind = if let Some(&Statement {"}, {"sha": "ca8e54ea286491d2112bd266a71ab21a1917db80", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 20, "deletions": 130, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -11,11 +11,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::print::Print;\n use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt};\n-use rustc_span::{\n-    hygiene::{DesugaringKind, ForLoopLoc},\n-    symbol::sym,\n-    Span,\n-};\n+use rustc_span::{symbol::sym, Span};\n use rustc_target::abi::VariantIdx;\n \n use super::borrow_set::BorrowData;\n@@ -37,7 +33,6 @@ crate use mutability_errors::AccessKind;\n crate use outlives_suggestion::OutlivesSuggestionBuilder;\n crate use region_errors::{ErrorConstraintInfo, RegionErrorKind, RegionErrors};\n crate use region_name::{RegionName, RegionNameSource};\n-use rustc_span::symbol::Ident;\n \n pub(super) struct IncludingDowncast(pub(super) bool);\n \n@@ -534,58 +529,33 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     }\n }\n \n-/// The span(s) associated to a use of a place.\n+// The span(s) associated to a use of a place.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub(super) enum UseSpans {\n-    /// The access is caused by capturing a variable for a closure.\n+    // The access is caused by capturing a variable for a closure.\n     ClosureUse {\n-        /// This is true if the captured variable was from a generator.\n+        // This is true if the captured variable was from a generator.\n         generator_kind: Option<GeneratorKind>,\n-        /// The span of the args of the closure, including the `move` keyword if\n-        /// it's present.\n+        // The span of the args of the closure, including the `move` keyword if\n+        // it's present.\n         args_span: Span,\n-        /// The span of the first use of the captured variable inside the closure.\n-        var_span: Span,\n-    },\n-    /// The access is caused by using a variable as the receiver of a method\n-    /// that takes 'self'\n-    FnSelfUse {\n-        /// The span of the variable being moved\n+        // The span of the first use of the captured variable inside the closure.\n         var_span: Span,\n-        /// The span of the method call on the variable\n-        fn_call_span: Span,\n-        /// The definition span of the method being called\n-        fn_span: Span,\n-        kind: FnSelfUseKind,\n     },\n     // This access has a single span associated to it: common case.\n     OtherUse(Span),\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-pub(super) enum FnSelfUseKind {\n-    /// A normal method call of the form `receiver.foo(a, b, c)`\n-    Normal { self_arg: Ident, implicit_into_iter: bool },\n-    /// A call to `FnOnce::call_once`, desugared from `my_closure(a, b, c)`\n-    FnOnceCall,\n-    /// A call to an operator trait, desuraged from operator syntax (e.g. `a << b`)\n-    Operator { self_arg: Ident },\n-}\n-\n impl UseSpans {\n     pub(super) fn args_or_use(self) -> Span {\n         match self {\n-            UseSpans::ClosureUse { args_span: span, .. }\n-            | UseSpans::FnSelfUse { var_span: span, .. }\n-            | UseSpans::OtherUse(span) => span,\n+            UseSpans::ClosureUse { args_span: span, .. } | UseSpans::OtherUse(span) => span,\n         }\n     }\n \n     pub(super) fn var_or_use(self) -> Span {\n         match self {\n-            UseSpans::ClosureUse { var_span: span, .. }\n-            | UseSpans::FnSelfUse { var_span: span, .. }\n-            | UseSpans::OtherUse(span) => span,\n+            UseSpans::ClosureUse { var_span: span, .. } | UseSpans::OtherUse(span) => span,\n         }\n     }\n \n@@ -654,7 +624,6 @@ impl UseSpans {\n     {\n         match self {\n             closure @ UseSpans::ClosureUse { .. } => closure,\n-            fn_self @ UseSpans::FnSelfUse { .. } => fn_self,\n             UseSpans::OtherUse(_) => if_other(),\n         }\n     }\n@@ -758,100 +727,21 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         debug!(\"move_spans: moved_place={:?} location={:?} stmt={:?}\", moved_place, location, stmt);\n         if let StatementKind::Assign(box (_, Rvalue::Aggregate(ref kind, ref places))) = stmt.kind {\n-            match kind {\n+            let def_id = match kind {\n                 box AggregateKind::Closure(def_id, _)\n-                | box AggregateKind::Generator(def_id, _, _) => {\n-                    debug!(\"move_spans: def_id={:?} places={:?}\", def_id, places);\n-                    if let Some((args_span, generator_kind, var_span)) =\n-                        self.closure_span(*def_id, moved_place, places)\n-                    {\n-                        return ClosureUse { generator_kind, args_span, var_span };\n-                    }\n-                }\n-                _ => {}\n-            }\n-        }\n-\n-        let normal_ret = OtherUse(stmt.source_info.span);\n-\n-        // We are trying to find MIR of the form:\n-        // ```\n-        // _temp = _moved_val;\n-        // ...\n-        // FnSelfCall(_temp, ...)\n-        // ```\n-        //\n-        // where `_moved_val` is the place we generated the move error for,\n-        // `_temp` is some other local, and `FnSelfCall` is a function\n-        // that has a `self` parameter.\n-\n-        let target_temp = match stmt.kind {\n-            StatementKind::Assign(box (temp, _)) if temp.as_local().is_some() => {\n-                temp.as_local().unwrap()\n-            }\n-            _ => return normal_ret,\n-        };\n-\n-        debug!(\"move_spans: target_temp = {:?}\", target_temp);\n-\n-        if let Some(Terminator { kind: TerminatorKind::Call { func, args, fn_span, .. }, .. }) =\n-            &self.body[location.block].terminator\n-        {\n-            let mut method_did = None;\n-            if let Operand::Constant(box Constant { literal: ty::Const { ty, .. }, .. }) = func {\n-                if let ty::FnDef(def_id, _) = ty.kind {\n-                    debug!(\"move_spans: fn = {:?}\", def_id);\n-                    if let Some(ty::AssocItem { fn_has_self_parameter, .. }) =\n-                        self.infcx.tcx.opt_associated_item(def_id)\n-                    {\n-                        if *fn_has_self_parameter {\n-                            method_did = Some(def_id);\n-                        }\n-                    }\n-                }\n-            }\n+                | box AggregateKind::Generator(def_id, _, _) => def_id,\n+                _ => return OtherUse(stmt.source_info.span),\n+            };\n \n-            let tcx = self.infcx.tcx;\n-            let method_did = if let Some(did) = method_did { did } else { return normal_ret };\n-\n-            if let [Operand::Move(self_place), ..] = **args {\n-                if self_place.as_local() == Some(target_temp) {\n-                    let is_fn_once = tcx.parent(method_did) == tcx.lang_items().fn_once_trait();\n-                    let fn_call_span = *fn_span;\n-\n-                    let self_arg = tcx.fn_arg_names(method_did)[0];\n-\n-                    let kind = if is_fn_once {\n-                        FnSelfUseKind::FnOnceCall\n-                    } else if fn_call_span.is_desugaring(DesugaringKind::Operator) {\n-                        FnSelfUseKind::Operator { self_arg }\n-                    } else {\n-                        debug!(\n-                            \"move_spans: method_did={:?}, fn_call_span={:?}\",\n-                            method_did, fn_call_span\n-                        );\n-                        let implicit_into_iter = matches!(\n-                            fn_call_span.desugaring_kind(),\n-                            Some(DesugaringKind::ForLoop(ForLoopLoc::IntoIter))\n-                        );\n-                        FnSelfUseKind::Normal { self_arg, implicit_into_iter }\n-                    };\n-\n-                    return FnSelfUse {\n-                        var_span: stmt.source_info.span,\n-                        fn_call_span,\n-                        fn_span: self\n-                            .infcx\n-                            .tcx\n-                            .sess\n-                            .source_map()\n-                            .guess_head_span(self.infcx.tcx.def_span(method_did)),\n-                        kind,\n-                    };\n-                }\n+            debug!(\"move_spans: def_id={:?} places={:?}\", def_id, places);\n+            if let Some((args_span, generator_kind, var_span)) =\n+                self.closure_span(*def_id, moved_place, places)\n+            {\n+                return ClosureUse { generator_kind, args_span, var_span };\n             }\n         }\n-        return normal_ret;\n+\n+        OtherUse(stmt.source_info.span)\n     }\n \n     /// Finds the span of arguments of a closure (within `maybe_closure_span`)"}, {"sha": "b49e4187fb81070124337a95064b142081274184", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -408,7 +408,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     format!(\"{}.as_ref()\", snippet),\n                     Applicability::MaybeIncorrect,\n                 );\n-            } else if matches!(span.desugaring_kind(), Some(DesugaringKind::ForLoop(_)))\n+            } else if span.is_desugaring(DesugaringKind::ForLoop)\n                 && self.infcx.tcx.is_diagnostic_item(Symbol::intern(\"vec_type\"), def_id)\n             {\n                 // FIXME: suggest for anything that implements `IntoIterator`."}, {"sha": "4d4b6fb9386db306c018cbc87e544ff000447a2e", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -365,7 +365,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                     opt_assignment_rhs_span.and_then(|span| span.desugaring_kind());\n                                 match opt_desugaring_kind {\n                                     // on for loops, RHS points to the iterator part\n-                                    Some(DesugaringKind::ForLoop(_)) => Some((\n+                                    Some(DesugaringKind::ForLoop) => Some((\n                                         false,\n                                         opt_assignment_rhs_span.unwrap(),\n                                         format!("}, {"sha": "03b663eb75056b4cd27580d7925805b02b6deafb", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -278,7 +278,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n                 move_data: &move_data,\n                 location_table: &LocationTable::new(promoted_body),\n                 movable_generator,\n-                fn_self_span_reported: Default::default(),\n                 locals_are_invalidated_at_exit,\n                 access_place_error_reported: Default::default(),\n                 reservation_error_reported: Default::default(),\n@@ -312,7 +311,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n         location_table,\n         movable_generator,\n         locals_are_invalidated_at_exit,\n-        fn_self_span_reported: Default::default(),\n         access_place_error_reported: Default::default(),\n         reservation_error_reported: Default::default(),\n         reservation_warnings: Default::default(),\n@@ -489,10 +487,6 @@ crate struct MirBorrowckCtxt<'cx, 'tcx> {\n     // but it is currently inconvenient to track down the `BorrowIndex`\n     // at the time we detect and report a reservation error.\n     reservation_error_reported: FxHashSet<Place<'tcx>>,\n-    /// This fields keeps track of the `Span`s that we have\n-    /// used to report extra information for `FnSelfUse`, to avoid\n-    /// unnecessarily verbose errors.\n-    fn_self_span_reported: FxHashSet<Span>,\n     /// Migration warnings to be reported for #56254. We delay reporting these\n     /// so that we can suppress the warning if there's a corresponding error\n     /// for the activation of the borrow."}, {"sha": "2806d1c8949fea4fa7b27c20d941f09dd8d05b0c", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -505,7 +505,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             // This is basically `force_bits`.\n             let r_bits = r_bits.and_then(|r| r.to_bits_or_ptr(right_size, &self.tcx).ok());\n             if r_bits.map_or(false, |b| b >= left_size_bits as u128) {\n-                debug!(\"check_binary_op: reporting assert for {:?}\", source_info);\n                 self.report_assert_as_lint(\n                     lint::builtin::ARITHMETIC_OVERFLOW,\n                     source_info,"}, {"sha": "c0fb84e741f4a9f56111f003678ad26512b7580a", "filename": "src/librustc_span/hygiene.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_span%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_span%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fhygiene.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -822,15 +822,7 @@ pub enum DesugaringKind {\n     OpaqueTy,\n     Async,\n     Await,\n-    ForLoop(ForLoopLoc),\n-    Operator,\n-}\n-\n-/// A location in the desugaring of a `for` loop\n-#[derive(Clone, Copy, PartialEq, Debug, RustcEncodable, RustcDecodable, HashStable_Generic)]\n-pub enum ForLoopLoc {\n-    Head,\n-    IntoIter,\n+    ForLoop,\n }\n \n impl DesugaringKind {\n@@ -843,8 +835,7 @@ impl DesugaringKind {\n             DesugaringKind::QuestionMark => \"operator `?`\",\n             DesugaringKind::TryBlock => \"`try` block\",\n             DesugaringKind::OpaqueTy => \"`impl Trait`\",\n-            DesugaringKind::ForLoop(_) => \"`for` loop\",\n-            DesugaringKind::Operator => \"operator\",\n+            DesugaringKind::ForLoop => \"`for` loop\",\n         }\n     }\n }"}, {"sha": "96240066834678c3e5c43854dcc246286ed37299", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -31,9 +31,7 @@ pub mod edition;\n use edition::Edition;\n pub mod hygiene;\n use hygiene::Transparency;\n-pub use hygiene::{\n-    DesugaringKind, ExpnData, ExpnId, ExpnKind, ForLoopLoc, MacroKind, SyntaxContext,\n-};\n+pub use hygiene::{DesugaringKind, ExpnData, ExpnId, ExpnKind, MacroKind, SyntaxContext};\n pub mod def_id;\n use def_id::{CrateNum, DefId, LOCAL_CRATE};\n mod span_encoding;"}, {"sha": "acdc03e3726388e89fd8428ce3c161df1d54207e", "filename": "src/test/ui/binop/binop-consume-args.stderr", "status": "modified", "additions": 10, "deletions": 60, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -4,15 +4,10 @@ error[E0382]: use of moved value: `lhs`\n LL | fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                 --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs + rhs;\n-   |     --------- `lhs` moved due to usage in operator\n+   |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-note: calling this operator moves the left-hand side\n-  --> $SRC_DIR/libcore/ops/arith.rs:LL:COL\n-   |\n-LL |     fn add(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn add<A: Add<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -40,15 +35,10 @@ error[E0382]: use of moved value: `lhs`\n LL | fn sub<A: Sub<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                 --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs - rhs;\n-   |     --------- `lhs` moved due to usage in operator\n+   |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-note: calling this operator moves the left-hand side\n-  --> $SRC_DIR/libcore/ops/arith.rs:LL:COL\n-   |\n-LL |     fn sub(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn sub<A: Sub<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -76,15 +66,10 @@ error[E0382]: use of moved value: `lhs`\n LL | fn mul<A: Mul<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                 --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs * rhs;\n-   |     --------- `lhs` moved due to usage in operator\n+   |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-note: calling this operator moves the left-hand side\n-  --> $SRC_DIR/libcore/ops/arith.rs:LL:COL\n-   |\n-LL |     fn mul(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn mul<A: Mul<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -112,15 +97,10 @@ error[E0382]: use of moved value: `lhs`\n LL | fn div<A: Div<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                 --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs / rhs;\n-   |     --------- `lhs` moved due to usage in operator\n+   |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-note: calling this operator moves the left-hand side\n-  --> $SRC_DIR/libcore/ops/arith.rs:LL:COL\n-   |\n-LL |     fn div(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn div<A: Div<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -148,15 +128,10 @@ error[E0382]: use of moved value: `lhs`\n LL | fn rem<A: Rem<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                 --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs % rhs;\n-   |     --------- `lhs` moved due to usage in operator\n+   |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-note: calling this operator moves the left-hand side\n-  --> $SRC_DIR/libcore/ops/arith.rs:LL:COL\n-   |\n-LL |     fn rem(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn rem<A: Rem<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -184,15 +159,10 @@ error[E0382]: use of moved value: `lhs`\n LL | fn bitand<A: BitAnd<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs & rhs;\n-   |     --------- `lhs` moved due to usage in operator\n+   |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-note: calling this operator moves the left-hand side\n-  --> $SRC_DIR/libcore/ops/bit.rs:LL:COL\n-   |\n-LL |     fn bitand(self, rhs: Rhs) -> Self::Output;\n-   |               ^^^^\n help: consider further restricting this bound\n    |\n LL | fn bitand<A: BitAnd<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -220,15 +190,10 @@ error[E0382]: use of moved value: `lhs`\n LL | fn bitor<A: BitOr<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                     --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs | rhs;\n-   |     --------- `lhs` moved due to usage in operator\n+   |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-note: calling this operator moves the left-hand side\n-  --> $SRC_DIR/libcore/ops/bit.rs:LL:COL\n-   |\n-LL |     fn bitor(self, rhs: Rhs) -> Self::Output;\n-   |              ^^^^\n help: consider further restricting this bound\n    |\n LL | fn bitor<A: BitOr<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -256,15 +221,10 @@ error[E0382]: use of moved value: `lhs`\n LL | fn bitxor<A: BitXor<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                       --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs ^ rhs;\n-   |     --------- `lhs` moved due to usage in operator\n+   |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-note: calling this operator moves the left-hand side\n-  --> $SRC_DIR/libcore/ops/bit.rs:LL:COL\n-   |\n-LL |     fn bitxor(self, rhs: Rhs) -> Self::Output;\n-   |               ^^^^\n help: consider further restricting this bound\n    |\n LL | fn bitxor<A: BitXor<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -292,15 +252,10 @@ error[E0382]: use of moved value: `lhs`\n LL | fn shl<A: Shl<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                 --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs << rhs;\n-   |     ---------- `lhs` moved due to usage in operator\n+   |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-note: calling this operator moves the left-hand side\n-  --> $SRC_DIR/libcore/ops/bit.rs:LL:COL\n-   |\n-LL |     fn shl(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn shl<A: Shl<B, Output=()> + Copy, B>(lhs: A, rhs: B) {\n@@ -328,15 +283,10 @@ error[E0382]: use of moved value: `lhs`\n LL | fn shr<A: Shr<B, Output=()>, B>(lhs: A, rhs: B) {\n    |                                 --- move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n LL |     lhs >> rhs;\n-   |     ---------- `lhs` moved due to usage in operator\n+   |     --- value moved here\n LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n-note: calling this operator moves the left-hand side\n-  --> $SRC_DIR/libcore/ops/bit.rs:LL:COL\n-   |\n-LL |     fn shr(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn shr<A: Shr<B, Output=()> + Copy, B>(lhs: A, rhs: B) {"}, {"sha": "6d5ac9cab30c05f29c12890ded4ab7522e8919eb", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -1,21 +1,14 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/binop-move-semantics.rs:8:5\n    |\n-LL |   fn double_move<T: Add<Output=()>>(x: T) {\n-   |                                     - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n-LL | /     x\n-LL | |     +\n-LL | |     x;\n-   | |     ^\n-   | |     |\n-   | |_____value used here after move\n-   |       `x` moved due to usage in operator\n-   |\n-note: calling this operator moves the left-hand side\n-  --> $SRC_DIR/libcore/ops/arith.rs:LL:COL\n+LL | fn double_move<T: Add<Output=()>>(x: T) {\n+   |                                   - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n+LL |     x\n+   |     - value moved here\n+LL |     +\n+LL |     x;\n+   |     ^ value used here after move\n    |\n-LL |     fn add(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn double_move<T: Add<Output=()> + Copy>(x: T) {"}, {"sha": "a51cda548efd760747c34e55db4c103179cad188", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -22,15 +22,10 @@ error[E0382]: use of moved value: `f`\n LL | fn c<F:FnOnce(isize, isize) -> isize>(f: F) {\n    |                                       - move occurs because `f` has type `F`, which does not implement the `Copy` trait\n LL |     f(1, 2);\n-   |     ------- `f` moved due to this call\n+   |     - value moved here\n LL |     f(1, 2);\n    |     ^ value used here after move\n    |\n-note: this value implements `FnOnce`, which causes it to be moved when called\n-  --> $DIR/borrowck-unboxed-closures.rs:11:5\n-   |\n-LL |     f(1, 2);\n-   |     ^\n help: consider further restricting this bound\n    |\n LL | fn c<F:FnOnce(isize, isize) -> isize + Copy>(f: F) {"}, {"sha": "69d98654048cbe22079781970b9f6766e6718e79", "filename": "src/test/ui/closure_context/issue-42065.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -2,7 +2,7 @@ error[E0382]: use of moved value: `debug_dump_dict`\n   --> $DIR/issue-42065.rs:11:5\n    |\n LL |     debug_dump_dict();\n-   |     ----------------- `debug_dump_dict` moved due to this call\n+   |     --------------- value moved here\n LL |     debug_dump_dict();\n    |     ^^^^^^^^^^^^^^^ value used here after move\n    |\n@@ -11,11 +11,6 @@ note: closure cannot be invoked more than once because it moves the variable `di\n    |\n LL |         for (key, value) in dict {\n    |                             ^^^^\n-note: this value implements `FnOnce`, which causes it to be moved when called\n-  --> $DIR/issue-42065.rs:10:5\n-   |\n-LL |     debug_dump_dict();\n-   |     ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "97816a76004d09cdc9c6d79549b0118826dd7bb4", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -4,16 +4,10 @@ error[E0382]: borrow of moved value: `some_vec`\n LL |     let some_vec = vec![\"hi\"];\n    |         -------- move occurs because `some_vec` has type `std::vec::Vec<&str>`, which does not implement the `Copy` trait\n LL |     some_vec.into_iter();\n-   |              ----------- `some_vec` moved due to this method call\n+   |     -------- value moved here\n LL |     {\n LL |         println!(\"{:?}\", some_vec);\n    |                          ^^^^^^^^ value borrowed here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `some_vec`\n-  --> $SRC_DIR/libcore/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "65fc49c0b27a6b44a8bb1c765c23b3aca130e1dd", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -6,15 +6,14 @@\n \n static CMP: () = {\n     let x = &0 as *const _;\n-    let _v = x == x; //~ NOTE in this\n+    let _v = x == x;\n     //~^ ERROR could not evaluate static initializer\n     //~| NOTE pointer arithmetic or comparison\n-    //~| NOTE in this\n };\n \n static INT_PTR_ARITH: () = unsafe {\n     let x: usize = std::mem::transmute(&0);\n-    let _v = x + 0; //~ NOTE in this\n+    let _v = x + 0;\n     //~^ ERROR could not evaluate static initializer\n     //~| NOTE pointer-to-integer cast\n };"}, {"sha": "805ba9c6b0307f724a1d31e746a3e780a7c27054", "filename": "src/test/ui/consts/miri_unleashed/ptr_arith.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fptr_arith.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -5,7 +5,7 @@ LL |     let _v = x == x;\n    |              ^^^^^^ \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n \n error[E0080]: could not evaluate static initializer\n-  --> $DIR/ptr_arith.rs:17:14\n+  --> $DIR/ptr_arith.rs:16:14\n    |\n LL |     let _v = x + 0;\n    |              ^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n@@ -18,7 +18,7 @@ help: skipping check for `const_compare_raw_pointers` feature\n LL |     let _v = x == x;\n    |              ^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/ptr_arith.rs:16:20\n+  --> $DIR/ptr_arith.rs:15:20\n    |\n LL |     let x: usize = std::mem::transmute(&0);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "acd852103cae3d0b5219b7f1c50c5a60cd31778a", "filename": "src/test/ui/hygiene/unpretty-debug.stdout", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -18,12 +18,8 @@ fn y /* 0#0 */() { }\n Expansions:\n 0: parent: ExpnId(0), call_site_ctxt: #0, kind: Root\n 1: parent: ExpnId(0), call_site_ctxt: #0, kind: Macro(Bang, \"foo\")\n-2: parent: ExpnId(0), call_site_ctxt: #1, kind: Desugaring(Operator)\n-3: parent: ExpnId(0), call_site_ctxt: #1, kind: Desugaring(Operator)\n \n SyntaxContexts:\n #0: parent: #0, outer_mark: (ExpnId(0), Opaque)\n #1: parent: #0, outer_mark: (ExpnId(1), SemiTransparent)\n-#2: parent: #1, outer_mark: (ExpnId(2), Transparent)\n-#3: parent: #1, outer_mark: (ExpnId(3), Transparent)\n */"}, {"sha": "2283b1275d018132d9222e21857a6b2fee13c5c3", "filename": "src/test/ui/issues/issue-12127.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fissues%2Fissue-12127.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fissues%2Fissue-12127.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12127.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -2,15 +2,10 @@ error[E0382]: use of moved value: `f`\n   --> $DIR/issue-12127.rs:11:9\n    |\n LL |         f();\n-   |         --- `f` moved due to this call\n+   |         - value moved here\n LL |         f();\n    |         ^ value used here after move\n    |\n-note: this value implements `FnOnce`, which causes it to be moved when called\n-  --> $DIR/issue-12127.rs:10:9\n-   |\n-LL |         f();\n-   |         ^\n    = note: move occurs because `f` has type `[closure@$DIR/issue-12127.rs:8:24: 8:41 x:std::boxed::Box<isize>]`, which does not implement the `Copy` trait\n \n error: aborting due to previous error"}, {"sha": "ccaa6334856b45f55487e44c1301abdd1d7b83a9", "filename": "src/test/ui/issues/issue-33941.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fissues%2Fissue-33941.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fissues%2Fissue-33941.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -3,5 +3,4 @@ use std::collections::HashMap;\n fn main() {\n     for _ in HashMap::new().iter().cloned() {} //~ ERROR type mismatch\n     //~^ ERROR type mismatch\n-    //~| ERROR type mismatch\n }"}, {"sha": "734ae78f362dbc2dd94c50f542e0c9d90096300d", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -17,16 +17,6 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n            found reference `&_`\n    = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::iter::Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n \n-error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as std::iter::Iterator>::Item == &_`\n-  --> $DIR/issue-33941.rs:4:14\n-   |\n-LL |     for _ in HashMap::new().iter().cloned() {}\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n-   |\n-   = note:  expected tuple `(&_, &_)`\n-           found reference `&_`\n-   = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::iter::Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0271`."}, {"sha": "6cfed20f43a042fd2a036507e13ddf31336408e9", "filename": "src/test/ui/issues/issue-34721.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34721.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -5,19 +5,14 @@ LL |     pub fn baz<T: Foo>(x: T) -> T {\n    |                        - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n LL |         if 0 == 1 {\n LL |             bar::bar(x.zero())\n-   |                        ------ `x` moved due to this method call\n+   |                      - value moved here\n LL |         } else {\n LL |             x.zero()\n-   |               ------ `x` moved due to this method call\n+   |             - value moved here\n LL |         };\n LL |         x.zero()\n    |         ^ value used here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `x`\n-  --> $DIR/issue-34721.rs:4:13\n-   |\n-LL |     fn zero(self) -> Self;\n-   |             ^^^^\n help: consider further restricting this bound\n    |\n LL |     pub fn baz<T: Foo + Copy>(x: T) -> T {"}, {"sha": "8523a6f6548a6f17d807bbd5a817c6f34da76a3b", "filename": "src/test/ui/issues/issue-61108.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -6,17 +6,11 @@ LL |     let mut bad_letters = vec!['e', 't', 'o', 'i'];\n LL |     for l in bad_letters {\n    |              -----------\n    |              |\n-   |              `bad_letters` moved due to this implicit call to `.into_iter()`\n+   |              value moved here\n    |              help: consider borrowing to avoid moving into the for loop: `&bad_letters`\n ...\n LL |     bad_letters.push('s');\n    |     ^^^^^^^^^^^ value borrowed here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `bad_letters`\n-  --> $SRC_DIR/libcore/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3c685dc8d089a145dc8ce0bd95ba2941905eab0a", "filename": "src/test/ui/issues/issue-64559.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -6,18 +6,12 @@ LL |     let orig = vec![true];\n LL |     for _val in orig {}\n    |                 ----\n    |                 |\n-   |                 `orig` moved due to this implicit call to `.into_iter()`\n+   |                 value moved here\n    |                 help: consider borrowing to avoid moving into the for loop: `&orig`\n LL |     let _closure = || orig;\n    |                    ^^ ---- use occurs due to use in closure\n    |                    |\n    |                    value used here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `orig`\n-  --> $SRC_DIR/libcore/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6107f53fa19606b20fcfa967a3401fb4cf2310f1", "filename": "src/test/ui/moves/move-fn-self-receiver.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/6bb3dbfc6c6d8992d08431f320ba296a0c2f7498/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb3dbfc6c6d8992d08431f320ba296a0c2f7498/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.rs?ref=6bb3dbfc6c6d8992d08431f320ba296a0c2f7498", "patch": "@@ -1,74 +0,0 @@\n-use std::pin::Pin;\n-use std::rc::Rc;\n-use std::ops::Add;\n-\n-struct Foo;\n-\n-impl Add for Foo {\n-    type Output = ();\n-    fn add(self, _rhs: Self) -> () {}\n-}\n-\n-impl Foo {\n-    fn use_self(self) {}\n-    fn use_box_self(self: Box<Self>) {}\n-    fn use_pin_box_self(self: Pin<Box<Self>>) {}\n-    fn use_rc_self(self: Rc<Self>) {}\n-    fn use_mut_self(&mut self) -> &mut Self { self }\n-}\n-\n-struct Container(Vec<bool>);\n-\n-impl Container {\n-    fn custom_into_iter(self) -> impl Iterator<Item = bool> {\n-        self.0.into_iter()\n-    }\n-}\n-\n-fn move_out(val: Container) {\n-    val.0.into_iter().next();\n-    val.0; //~ ERROR use of moved\n-\n-    let foo = Foo;\n-    foo.use_self();\n-    foo; //~ ERROR use of moved\n-\n-    let second_foo = Foo;\n-    second_foo.use_self();\n-    second_foo; //~ ERROR use of moved\n-\n-    let boxed_foo = Box::new(Foo);\n-    boxed_foo.use_box_self();\n-    boxed_foo; //~ ERROR use of moved\n-\n-    let pin_box_foo = Box::pin(Foo);\n-    pin_box_foo.use_pin_box_self();\n-    pin_box_foo; //~ ERROR use of moved\n-\n-    let mut mut_foo = Foo;\n-    let ret = mut_foo.use_mut_self();\n-    mut_foo; //~ ERROR cannot move out\n-    ret;\n-\n-    let rc_foo = Rc::new(Foo);\n-    rc_foo.use_rc_self();\n-    rc_foo; //~ ERROR use of moved\n-\n-    let foo_add = Foo;\n-    foo_add + Foo;\n-    foo_add; //~ ERROR use of moved\n-\n-    let implicit_into_iter = vec![true];\n-    for _val in implicit_into_iter {}\n-    implicit_into_iter; //~ ERROR use of moved\n-\n-    let explicit_into_iter = vec![true];\n-    for _val in explicit_into_iter.into_iter() {}\n-    explicit_into_iter; //~ ERROR use of moved\n-\n-    let container = Container(vec![]);\n-    for _val in container.custom_into_iter() {}\n-    container; //~ ERROR use of moved\n-}\n-\n-fn main() {}"}, {"sha": "4333e8a23e866f408cbcbfab35992f4dd7bea440", "filename": "src/test/ui/moves/move-fn-self-receiver.stderr", "status": "removed", "additions": 0, "deletions": 158, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/6bb3dbfc6c6d8992d08431f320ba296a0c2f7498/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bb3dbfc6c6d8992d08431f320ba296a0c2f7498/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr?ref=6bb3dbfc6c6d8992d08431f320ba296a0c2f7498", "patch": "@@ -1,158 +0,0 @@\n-error[E0382]: use of moved value: `val.0`\n-  --> $DIR/move-fn-self-receiver.rs:30:5\n-   |\n-LL |     val.0.into_iter().next();\n-   |           ----------- `val.0` moved due to this method call\n-LL |     val.0;\n-   |     ^^^^^ value used here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `val.0`\n-  --> $SRC_DIR/libcore/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n-   = note: move occurs because `val.0` has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n-\n-error[E0382]: use of moved value: `foo`\n-  --> $DIR/move-fn-self-receiver.rs:34:5\n-   |\n-LL |     let foo = Foo;\n-   |         --- move occurs because `foo` has type `Foo`, which does not implement the `Copy` trait\n-LL |     foo.use_self();\n-   |         ---------- `foo` moved due to this method call\n-LL |     foo;\n-   |     ^^^ value used here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `foo`\n-  --> $DIR/move-fn-self-receiver.rs:13:17\n-   |\n-LL |     fn use_self(self) {}\n-   |                 ^^^^\n-\n-error[E0382]: use of moved value: `second_foo`\n-  --> $DIR/move-fn-self-receiver.rs:38:5\n-   |\n-LL |     let second_foo = Foo;\n-   |         ---------- move occurs because `second_foo` has type `Foo`, which does not implement the `Copy` trait\n-LL |     second_foo.use_self();\n-   |                ---------- `second_foo` moved due to this method call\n-LL |     second_foo;\n-   |     ^^^^^^^^^^ value used here after move\n-\n-error[E0382]: use of moved value: `boxed_foo`\n-  --> $DIR/move-fn-self-receiver.rs:42:5\n-   |\n-LL |     let boxed_foo = Box::new(Foo);\n-   |         --------- move occurs because `boxed_foo` has type `std::boxed::Box<Foo>`, which does not implement the `Copy` trait\n-LL |     boxed_foo.use_box_self();\n-   |               -------------- `boxed_foo` moved due to this method call\n-LL |     boxed_foo;\n-   |     ^^^^^^^^^ value used here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `boxed_foo`\n-  --> $DIR/move-fn-self-receiver.rs:14:21\n-   |\n-LL |     fn use_box_self(self: Box<Self>) {}\n-   |                     ^^^^\n-\n-error[E0382]: use of moved value: `pin_box_foo`\n-  --> $DIR/move-fn-self-receiver.rs:46:5\n-   |\n-LL |     let pin_box_foo = Box::pin(Foo);\n-   |         ----------- move occurs because `pin_box_foo` has type `std::pin::Pin<std::boxed::Box<Foo>>`, which does not implement the `Copy` trait\n-LL |     pin_box_foo.use_pin_box_self();\n-   |                 ------------------ `pin_box_foo` moved due to this method call\n-LL |     pin_box_foo;\n-   |     ^^^^^^^^^^^ value used here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `pin_box_foo`\n-  --> $DIR/move-fn-self-receiver.rs:15:25\n-   |\n-LL |     fn use_pin_box_self(self: Pin<Box<Self>>) {}\n-   |                         ^^^^\n-\n-error[E0505]: cannot move out of `mut_foo` because it is borrowed\n-  --> $DIR/move-fn-self-receiver.rs:50:5\n-   |\n-LL |     let ret = mut_foo.use_mut_self();\n-   |               ------- borrow of `mut_foo` occurs here\n-LL |     mut_foo;\n-   |     ^^^^^^^ move out of `mut_foo` occurs here\n-LL |     ret;\n-   |     --- borrow later used here\n-\n-error[E0382]: use of moved value: `rc_foo`\n-  --> $DIR/move-fn-self-receiver.rs:55:5\n-   |\n-LL |     let rc_foo = Rc::new(Foo);\n-   |         ------ move occurs because `rc_foo` has type `std::rc::Rc<Foo>`, which does not implement the `Copy` trait\n-LL |     rc_foo.use_rc_self();\n-   |            ------------- `rc_foo` moved due to this method call\n-LL |     rc_foo;\n-   |     ^^^^^^ value used here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `rc_foo`\n-  --> $DIR/move-fn-self-receiver.rs:16:20\n-   |\n-LL |     fn use_rc_self(self: Rc<Self>) {}\n-   |                    ^^^^\n-\n-error[E0382]: use of moved value: `foo_add`\n-  --> $DIR/move-fn-self-receiver.rs:59:5\n-   |\n-LL |     let foo_add = Foo;\n-   |         ------- move occurs because `foo_add` has type `Foo`, which does not implement the `Copy` trait\n-LL |     foo_add + Foo;\n-   |     ------------- `foo_add` moved due to usage in operator\n-LL |     foo_add;\n-   |     ^^^^^^^ value used here after move\n-   |\n-note: calling this operator moves the left-hand side\n-  --> $SRC_DIR/libcore/ops/arith.rs:LL:COL\n-   |\n-LL |     fn add(self, rhs: Rhs) -> Self::Output;\n-   |            ^^^^\n-\n-error[E0382]: use of moved value: `implicit_into_iter`\n-  --> $DIR/move-fn-self-receiver.rs:63:5\n-   |\n-LL |     let implicit_into_iter = vec![true];\n-   |         ------------------ move occurs because `implicit_into_iter` has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n-LL |     for _val in implicit_into_iter {}\n-   |                 ------------------\n-   |                 |\n-   |                 `implicit_into_iter` moved due to this implicit call to `.into_iter()`\n-   |                 help: consider borrowing to avoid moving into the for loop: `&implicit_into_iter`\n-LL |     implicit_into_iter;\n-   |     ^^^^^^^^^^^^^^^^^^ value used here after move\n-\n-error[E0382]: use of moved value: `explicit_into_iter`\n-  --> $DIR/move-fn-self-receiver.rs:67:5\n-   |\n-LL |     let explicit_into_iter = vec![true];\n-   |         ------------------ move occurs because `explicit_into_iter` has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n-LL |     for _val in explicit_into_iter.into_iter() {}\n-   |                                    ----------- `explicit_into_iter` moved due to this method call\n-LL |     explicit_into_iter;\n-   |     ^^^^^^^^^^^^^^^^^^ value used here after move\n-\n-error[E0382]: use of moved value: `container`\n-  --> $DIR/move-fn-self-receiver.rs:71:5\n-   |\n-LL |     let container = Container(vec![]);\n-   |         --------- move occurs because `container` has type `Container`, which does not implement the `Copy` trait\n-LL |     for _val in container.custom_into_iter() {}\n-   |                           ------------------ `container` moved due to this method call\n-LL |     container;\n-   |     ^^^^^^^^^ value used here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `container`\n-  --> $DIR/move-fn-self-receiver.rs:23:25\n-   |\n-LL |     fn custom_into_iter(self) -> impl Iterator<Item = bool> {\n-   |                         ^^^^\n-\n-error: aborting due to 11 previous errors\n-\n-Some errors have detailed explanations: E0382, E0505.\n-For more information about an error, try `rustc --explain E0382`."}, {"sha": "71a3c4506eaf2d8af9fca549a70612c3085d3d7d", "filename": "src/test/ui/moves/moves-based-on-type-access-to-field.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -4,15 +4,9 @@ error[E0382]: borrow of moved value: `x`\n LL |     let x = vec![\"hi\".to_string()];\n    |         - move occurs because `x` has type `std::vec::Vec<std::string::String>`, which does not implement the `Copy` trait\n LL |     consume(x.into_iter().next().unwrap());\n-   |               ----------- `x` moved due to this method call\n+   |             - value moved here\n LL |     touch(&x[0]);\n    |            ^ value borrowed here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `x`\n-  --> $SRC_DIR/libcore/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "67fae606c4e43fec6925347e9df81a073a54420b", "filename": "src/test/ui/moves/moves-based-on-type-exprs.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -104,31 +104,19 @@ error[E0382]: borrow of moved value: `x`\n LL |     let x = vec![\"hi\".to_string()];\n    |         - move occurs because `x` has type `std::vec::Vec<std::string::String>`, which does not implement the `Copy` trait\n LL |     let _y = x.into_iter().next().unwrap();\n-   |                ----------- `x` moved due to this method call\n+   |              - value moved here\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `x`\n-  --> $SRC_DIR/libcore/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:83:11\n    |\n LL |     let x = vec![\"hi\".to_string()];\n    |         - move occurs because `x` has type `std::vec::Vec<std::string::String>`, which does not implement the `Copy` trait\n LL |     let _y = [x.into_iter().next().unwrap(); 1];\n-   |                 ----------- `x` moved due to this method call\n+   |               - value moved here\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `x`\n-  --> $SRC_DIR/libcore/iter/traits/collect.rs:LL:COL\n-   |\n-LL |     fn into_iter(self) -> Self::IntoIter;\n-   |                  ^^^^\n \n error: aborting due to 11 previous errors\n "}, {"sha": "7133a32431a67ded968b5a7c6023298f3dcec7a4", "filename": "src/test/ui/once-cant-call-twice-on-heap.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fonce-cant-call-twice-on-heap.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -4,15 +4,10 @@ error[E0382]: use of moved value: `blk`\n LL | fn foo<F:FnOnce()>(blk: F) {\n    |                    --- move occurs because `blk` has type `F`, which does not implement the `Copy` trait\n LL |     blk();\n-   |     ----- `blk` moved due to this call\n+   |     --- value moved here\n LL |     blk();\n    |     ^^^ value used here after move\n    |\n-note: this value implements `FnOnce`, which causes it to be moved when called\n-  --> $DIR/once-cant-call-twice-on-heap.rs:8:5\n-   |\n-LL |     blk();\n-   |     ^^^\n help: consider further restricting this bound\n    |\n LL | fn foo<F:FnOnce() + Copy>(blk: F) {"}, {"sha": "0b9aa61a765faed0334e0f415cab4e9632af0662", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnonce-call-twice.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-call-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-call-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-call-twice.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -2,7 +2,7 @@ error[E0382]: use of moved value: `tick`\n   --> $DIR/unboxed-closures-infer-fnonce-call-twice.rs:10:5\n    |\n LL |     tick();\n-   |     ------ `tick` moved due to this call\n+   |     ---- value moved here\n LL |     tick();\n    |     ^^^^ value used here after move\n    |\n@@ -11,11 +11,6 @@ note: closure cannot be invoked more than once because it moves the variable `co\n    |\n LL |     let tick = || mem::drop(counter);\n    |                             ^^^^^^^\n-note: this value implements `FnOnce`, which causes it to be moved when called\n-  --> $DIR/unboxed-closures-infer-fnonce-call-twice.rs:9:5\n-   |\n-LL |     tick();\n-   |     ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "20773d561f9f268b199c5a75e745edc571dad855", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnonce-move-call-twice.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-move-call-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-move-call-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-move-call-twice.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -2,7 +2,7 @@ error[E0382]: use of moved value: `tick`\n   --> $DIR/unboxed-closures-infer-fnonce-move-call-twice.rs:10:5\n    |\n LL |     tick();\n-   |     ------ `tick` moved due to this call\n+   |     ---- value moved here\n LL |     tick();\n    |     ^^^^ value used here after move\n    |\n@@ -11,11 +11,6 @@ note: closure cannot be invoked more than once because it moves the variable `co\n    |\n LL |     let tick = move || mem::drop(counter);\n    |                                  ^^^^^^^\n-note: this value implements `FnOnce`, which causes it to be moved when called\n-  --> $DIR/unboxed-closures-infer-fnonce-move-call-twice.rs:9:5\n-   |\n-LL |     tick();\n-   |     ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e0499cfe95ce9cbad9aa77c511b14943d270ba53", "filename": "src/test/ui/unop-move-semantics.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -4,16 +4,11 @@ error[E0382]: borrow of moved value: `x`\n LL | fn move_then_borrow<T: Not<Output=T> + Clone>(x: T) {\n    |                                               - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n LL |     !x;\n-   |     -- `x` moved due to this method call\n+   |      - value moved here\n LL | \n LL |     x.clone();\n    |     ^ value borrowed here after move\n    |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `x`\n-  --> $SRC_DIR/libcore/ops/bit.rs:LL:COL\n-   |\n-LL |     fn not(self) -> Self::Output;\n-   |            ^^^^\n help: consider further restricting this bound\n    |\n LL | fn move_then_borrow<T: Not<Output=T> + Clone + Copy>(x: T) {"}, {"sha": "110edab69be871d08c4d5c676123c6650666ca44", "filename": "src/test/ui/unsized-locals/borrow-after-move.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -37,16 +37,10 @@ error[E0382]: borrow of moved value: `y`\n LL |         let y = *x;\n    |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n LL |         y.foo();\n-   |           ----- `y` moved due to this method call\n+   |         - value moved here\n ...\n LL |         println!(\"{}\", &y);\n    |                        ^^ value borrowed here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `y`\n-  --> $DIR/borrow-after-move.rs:4:12\n-   |\n-LL |     fn foo(self) -> String;\n-   |            ^^^^\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/borrow-after-move.rs:39:24"}, {"sha": "5b936fb64474f3ccd8af16f71cf262da7d05dafc", "filename": "src/test/ui/unsized-locals/double-move.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -34,15 +34,9 @@ error[E0382]: use of moved value: `y`\n LL |         let y = *x;\n    |             - move occurs because `y` has type `str`, which does not implement the `Copy` trait\n LL |         y.foo();\n-   |           ----- `y` moved due to this method call\n+   |         - value moved here\n LL |         y.foo();\n    |         ^ value used here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `y`\n-  --> $DIR/double-move.rs:4:12\n-   |\n-LL |     fn foo(self) -> String;\n-   |            ^^^^\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/double-move.rs:45:9"}, {"sha": "9bf1175430c8408e3c4b36e04212ba17cac10a09", "filename": "src/test/ui/use/use-after-move-self-based-on-type.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self-based-on-type.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -4,15 +4,9 @@ error[E0382]: use of moved value: `self`\n LL |     pub fn foo(self) -> isize {\n    |                ---- move occurs because `self` has type `S`, which does not implement the `Copy` trait\n LL |         self.bar();\n-   |              ----- `self` moved due to this method call\n+   |         ---- value moved here\n LL |         return self.x;\n    |                ^^^^^^ value used here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `self`\n-  --> $DIR/use-after-move-self-based-on-type.rs:15:16\n-   |\n-LL |     pub fn bar(self) {}\n-   |                ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "3be0a65550b7fc6b8ae27722e0139bf39538ca03", "filename": "src/test/ui/use/use-after-move-self.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-self.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -4,15 +4,9 @@ error[E0382]: use of moved value: `self`\n LL |     pub fn foo(self) -> isize {\n    |                ---- move occurs because `self` has type `S`, which does not implement the `Copy` trait\n LL |         self.bar();\n-   |              ----- `self` moved due to this method call\n+   |         ---- value moved here\n LL |         return *self.x;\n    |                ^^^^^^^ value used here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `self`\n-  --> $DIR/use-after-move-self.rs:13:16\n-   |\n-LL |     pub fn bar(self) {}\n-   |                ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "eeb594a21f38c484031243aa38a733118cc2c37b", "filename": "src/test/ui/walk-struct-literal-with.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -4,15 +4,9 @@ error[E0382]: borrow of moved value: `start`\n LL |     let start = Mine{test:\"Foo\".to_string(), other_val:0};\n    |         ----- move occurs because `start` has type `Mine`, which does not implement the `Copy` trait\n LL |     let end = Mine{other_val:1, ..start.make_string_bar()};\n-   |                                         ----------------- `start` moved due to this method call\n+   |                                   ----- value moved here\n LL |     println!(\"{}\", start.test);\n    |                    ^^^^^^^^^^ value borrowed here after move\n-   |\n-note: this function consumes the receiver `self` by taking ownership of it, which moves `start`\n-  --> $DIR/walk-struct-literal-with.rs:7:28\n-   |\n-LL |     fn make_string_bar(mut self) -> Mine{\n-   |                            ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "368fa6a98c5d6fd7c11614a7a86846a21360c368", "filename": "src/tools/clippy/tests/compile-test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fcompile-test.rs?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -49,7 +49,9 @@ fn third_party_crates() -> String {\n         if let Some(name) = path.file_name().and_then(OsStr::to_str) {\n             for dep in CRATES {\n                 if name.starts_with(&format!(\"lib{}-\", dep)) && name.ends_with(\".rlib\") {\n-                    crates.entry(dep).or_insert(path);\n+                    if let Some(old) = crates.insert(dep, path.clone()) {\n+                        panic!(\"Found multiple rlibs for crate `{}`: `{:?}` and `{:?}\", dep, old, path);\n+                    }\n                     break;\n                 }\n             }"}, {"sha": "351e2d4481c0fafc2c98e08f476afa2cd6caef9b", "filename": "src/tools/rustc-workspace-hack/Cargo.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cbf356a1a5677b1c073f09ba833d8247c7ed01aa/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustc-workspace-hack%2FCargo.toml?ref=cbf356a1a5677b1c073f09ba833d8247c7ed01aa", "patch": "@@ -69,8 +69,7 @@ serde = { version = \"1.0.82\", features = ['derive'] }\n serde_json = { version = \"1.0.31\", features = [\"raw_value\"] }\n smallvec-0_6 = { package = \"smallvec\", version = \"0.6\", features = ['union', 'may_dangle'] }\n smallvec = { version = \"1.0\", features = ['union', 'may_dangle'] }\n-syn = { version = \"0.15\", features = ['full', 'extra-traits'] }\n-syn-1 = { package = \"syn\", version = \"1\", features = ['fold', 'full', 'extra-traits', 'visit'] }\n+syn = { version = \"1\", features = ['fold', 'full', 'extra-traits', 'visit'] }\n url = { version = \"2.0\", features = ['serde'] }\n \n [target.'cfg(not(windows))'.dependencies]"}]}