{"sha": "4f7437647f6fd55171c61f35466b9266c35c4cfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNzQzNzY0N2Y2ZmQ1NTE3MWM2MWYzNTQ2NmI5MjY2YzM1YzRjZmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:08:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:08:10Z"}, "message": "rollup merge of #23466: woehr/master\n\nThis fixes a bug in LLVM IR generation for in-line assembly where Rust would always use the host clobbers instead of target clobbers.\n\nI also took this opportunity to clean/simplify the ```trans_inline_asm``` function.\n\nThis is my first Rust pull request; please let me know if I'm missing anything.", "tree": {"sha": "672676af32ad26fd2e30c3b216a4f09fbdf751c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/672676af32ad26fd2e30c3b216a4f09fbdf751c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f7437647f6fd55171c61f35466b9266c35c4cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7437647f6fd55171c61f35466b9266c35c4cfa", "html_url": "https://github.com/rust-lang/rust/commit/4f7437647f6fd55171c61f35466b9266c35c4cfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f7437647f6fd55171c61f35466b9266c35c4cfa/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3fbc149b311a462bcfe9f65f9720adb0f901de4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3fbc149b311a462bcfe9f65f9720adb0f901de4", "html_url": "https://github.com/rust-lang/rust/commit/d3fbc149b311a462bcfe9f65f9720adb0f901de4"}, {"sha": "b92fee9a871bbf260201d41b90b40931d995e5c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b92fee9a871bbf260201d41b90b40931d995e5c1", "html_url": "https://github.com/rust-lang/rust/commit/b92fee9a871bbf260201d41b90b40931d995e5c1"}], "stats": {"total": 72, "additions": 25, "deletions": 47}, "files": [{"sha": "33817bb952e98967eb428e326b3654d173505839", "filename": "src/librustc_trans/trans/asm.rs", "status": "modified", "additions": 25, "deletions": 47, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4f7437647f6fd55171c61f35466b9266c35c4cfa/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f7437647f6fd55171c61f35466b9266c35c4cfa/src%2Flibrustc_trans%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fasm.rs?ref=4f7437647f6fd55171c61f35466b9266c35c4cfa", "patch": "@@ -76,43 +76,33 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n     // no failure occurred preparing operands, no need to cleanup\n     fcx.pop_custom_cleanup_scope(temp_scope);\n \n-    let mut constraints = constraints.iter()\n-                                     .map(|s| s.to_string())\n-                                     .chain(ext_constraints.into_iter())\n-                                     .collect::<Vec<String>>()\n-                                     .connect(\",\");\n-\n-    let mut clobbers = ia.clobbers.iter()\n-                                  .map(|s| format!(\"~{{{}}}\", &s))\n-                                  .collect::<Vec<String>>()\n-                                  .connect(\",\");\n-    let more_clobbers = get_clobbers();\n-    if !more_clobbers.is_empty() {\n-        if !clobbers.is_empty() {\n-            clobbers.push(',');\n-        }\n-        clobbers.push_str(&more_clobbers[..]);\n-    }\n-\n-    // Add the clobbers to our constraints list\n-    if clobbers.len() != 0 && constraints.len() != 0 {\n-        constraints.push(',');\n-        constraints.push_str(&clobbers[..]);\n-    } else {\n-        constraints.push_str(&clobbers[..]);\n-    }\n+    let clobbers = ia.clobbers.iter()\n+                              .map(|s| format!(\"~{{{}}}\", &s));\n+\n+    // Default per-arch clobbers\n+    // Basically what clang does\n+    let arch_clobbers = match bcx.sess().target.target.arch.as_slice() {\n+        \"x86\" | \"x86_64\" => vec!(\"~{dirflag}\", \"~{fpsr}\", \"~{flags}\"),\n+        _                => Vec::new()\n+    };\n \n-    debug!(\"Asm Constraints: {}\", &constraints[..]);\n+    let all_constraints= constraints.iter()\n+                                    .map(|s| s.to_string())\n+                                    .chain(ext_constraints.into_iter())\n+                                    .chain(clobbers)\n+                                    .chain(arch_clobbers.iter()\n+                                               .map(|s| s.to_string()))\n+                                    .collect::<Vec<String>>()\n+                                    .connect(\",\");\n \n-    let num_outputs = outputs.len();\n+    debug!(\"Asm Constraints: {}\", &all_constraints[..]);\n \n     // Depending on how many outputs we have, the return type is different\n-    let output_type = if num_outputs == 0 {\n-        Type::void(bcx.ccx())\n-    } else if num_outputs == 1 {\n-        output_types[0]\n-    } else {\n-        Type::struct_(bcx.ccx(), &output_types[..], false)\n+    let num_outputs = outputs.len();\n+    let output_type = match num_outputs {\n+        0 => Type::void(bcx.ccx()),\n+        1 => output_types[0],\n+        _ => Type::struct_(bcx.ccx(), &output_types[..], false)\n     };\n \n     let dialect = match ia.dialect {\n@@ -121,10 +111,10 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n     };\n \n     let asm = CString::new(ia.asm.as_bytes()).unwrap();\n-    let constraints = CString::new(constraints).unwrap();\n+    let constraint_cstr = CString::new(all_constraints).unwrap();\n     let r = InlineAsmCall(bcx,\n                           asm.as_ptr(),\n-                          constraints.as_ptr(),\n+                          constraint_cstr.as_ptr(),\n                           &inputs,\n                           output_type,\n                           ia.volatile,\n@@ -158,15 +148,3 @@ pub fn trans_inline_asm<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, ia: &ast::InlineAsm)\n \n }\n \n-// Default per-arch clobbers\n-// Basically what clang does\n-\n-#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n-fn get_clobbers() -> String {\n-    \"\".to_string()\n-}\n-\n-#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-fn get_clobbers() -> String {\n-    \"~{dirflag},~{fpsr},~{flags}\".to_string()\n-}"}]}