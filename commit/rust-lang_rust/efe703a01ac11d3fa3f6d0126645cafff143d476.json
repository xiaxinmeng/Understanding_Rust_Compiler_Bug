{"sha": "efe703a01ac11d3fa3f6d0126645cafff143d476", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZTcwM2EwMWFjMTFkM2ZhM2Y2ZDAxMjY2NDVjYWZmZjE0M2Q0NzY=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-11-03T12:26:00Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-11-03T12:55:17Z"}, "message": "[self-profiling] Include the estimated size of each cgu in the profile\n\nThis is helpful when looking for CGUs where the size estimate isn't a\ngood indicator of compilation time.\n\nI verified that moving the profiling timer call doesn't affect the\nresults.", "tree": {"sha": "495194afd9632300ffed43e82ebc6bd5c53f1bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/495194afd9632300ffed43e82ebc6bd5c53f1bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efe703a01ac11d3fa3f6d0126645cafff143d476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efe703a01ac11d3fa3f6d0126645cafff143d476", "html_url": "https://github.com/rust-lang/rust/commit/efe703a01ac11d3fa3f6d0126645cafff143d476", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efe703a01ac11d3fa3f6d0126645cafff143d476/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "338f939a8d77061896cd0a1ca87a2c6d1f4ec359", "url": "https://api.github.com/repos/rust-lang/rust/commits/338f939a8d77061896cd0a1ca87a2c6d1f4ec359", "html_url": "https://github.com/rust-lang/rust/commit/338f939a8d77061896cd0a1ca87a2c6d1f4ec359"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "7d01f6a54995a85a9f15fb247ba99f5344d00c6e", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efe703a01ac11d3fa3f6d0126645cafff143d476/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efe703a01ac11d3fa3f6d0126645cafff143d476/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=efe703a01ac11d3fa3f6d0126645cafff143d476", "patch": "@@ -97,21 +97,23 @@ pub fn compile_codegen_unit(\n     tcx: TyCtxt<'tcx>,\n     cgu_name: Symbol,\n ) -> (ModuleCodegen<ModuleLlvm>, u64) {\n-    let prof_timer = tcx.prof.generic_activity_with_arg(\"codegen_module\", cgu_name.to_string());\n     let start_time = Instant::now();\n \n     let dep_node = tcx.codegen_unit(cgu_name).codegen_dep_node(tcx);\n     let (module, _) =\n         tcx.dep_graph.with_task(dep_node, tcx, cgu_name, module_codegen, dep_graph::hash_result);\n     let time_to_codegen = start_time.elapsed();\n-    drop(prof_timer);\n \n     // We assume that the cost to run LLVM on a CGU is proportional to\n     // the time we needed for codegenning it.\n     let cost = time_to_codegen.as_nanos() as u64;\n \n     fn module_codegen(tcx: TyCtxt<'_>, cgu_name: Symbol) -> ModuleCodegen<ModuleLlvm> {\n         let cgu = tcx.codegen_unit(cgu_name);\n+        let _prof_timer = tcx.prof.generic_activity_with_args(\n+            \"codegen_module\",\n+            &[cgu_name.to_string(), cgu.size_estimate().to_string()],\n+        );\n         // Instantiate monomorphizations without filling out definitions yet...\n         let llvm_module = ModuleLlvm::new(tcx, &cgu_name.as_str());\n         {"}, {"sha": "5d13b7f27c70453097e8b242dc376e4589a4394a", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/efe703a01ac11d3fa3f6d0126645cafff143d476/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efe703a01ac11d3fa3f6d0126645cafff143d476/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=efe703a01ac11d3fa3f6d0126645cafff143d476", "patch": "@@ -272,6 +272,28 @@ impl SelfProfilerRef {\n         })\n     }\n \n+    #[inline(always)]\n+    pub fn generic_activity_with_args(\n+        &self,\n+        event_label: &'static str,\n+        event_args: &[String],\n+    ) -> TimingGuard<'_> {\n+        self.exec(EventFilter::GENERIC_ACTIVITIES, |profiler| {\n+            let builder = EventIdBuilder::new(&profiler.profiler);\n+            let event_label = profiler.get_or_alloc_cached_string(event_label);\n+            let event_id = if profiler.event_filter_mask.contains(EventFilter::FUNCTION_ARGS) {\n+                let event_args: Vec<_> = event_args\n+                    .iter()\n+                    .map(|s| profiler.get_or_alloc_cached_string(&s[..]))\n+                    .collect();\n+                builder.from_label_and_args(event_label, &event_args)\n+            } else {\n+                builder.from_label(event_label)\n+            };\n+            TimingGuard::start(profiler, profiler.generic_activity_event_kind, event_id)\n+        })\n+    }\n+\n     /// Start profiling a query provider. Profiling continues until the\n     /// TimingGuard returned from this call is dropped.\n     #[inline(always)]"}]}