{"sha": "da74a77622b29c056fa5a18f6e6033d9579a0e90", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNzRhNzc2MjJiMjljMDU2ZmE1YTE4ZjZlNjAzM2Q5NTc5YTBlOTA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-08T12:13:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-08T12:13:18Z"}, "message": "Rollup merge of #82047 - the8472:fast-rename, r=davidtwco\n\nbypass auto_da_alloc for metadata files\n\nThis saves about 0.7% when rerunning the UI test suite. I.e. when the metadata files exist and will be overwritten. No improvements expected for a clean build. So it might show up in incr-patched perf results.\n```\nregular rename:\n\nBenchmark #1: touch src/tools/compiletest/src/main.rs ; RUSTC_WRAPPER=\"\" schedtool -B -e ./x.py test src/test/ui\n  Time (mean \u00b1 \u03c3):     47.305 s \u00b1  0.170 s    [User: 1631.540 s, System: 412.648 s]\n  Range (min \u2026 max):   47.125 s \u2026 47.856 s    20 runs\n\nnon-durable rename:\n\nBenchmark #1: touch src/tools/compiletest/src/main.rs ; RUSTC_WRAPPER=\"\" schedtool -B -e ./x.py test src/test/ui\n  Time (mean \u00b1 \u03c3):     46.930 s \u00b1  0.064 s    [User: 1634.344 s, System: 396.038 s]\n  Range (min \u2026 max):   46.759 s \u2026 47.043 s    20 runs\n```\n\nThere are more places that trigger auto_da_alloc behavior by overwriting existing files with O_TRUNC, but those are much harder to locate because `O_TRUNC` is set on `open()` but the writeback is triggered on `close()`. The latter is the part which shows up in profiles.", "tree": {"sha": "fe0f4554add4289d953078631bf8d6909facc44a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe0f4554add4289d953078631bf8d6909facc44a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da74a77622b29c056fa5a18f6e6033d9579a0e90", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgRhTeCRBK7hj4Ov3rIwAAdHIIAIDiXue+Hgtd4tgd05q0eAAJ\n1aimoXT0yu7QO7xHNjAO+pQIvim3Ki6/ekkgSZT4wt3VUB6S2VWJZt5uls2aecUe\n3Qd2QTPdrZjPkr9iyu5So/hoQGgY/FgHXhF/o9pPrmM20Odq3JVaKpHuJzexI9OQ\nyzNQRUkVCHl6LiYNL3P2VpFqIJCKXh3MRtg1TR0syMIrHze6TcTuOQlvkEN8SBah\n/Fx2deLIPhMN1v9cSyMojpeereIO82/DQJqS96Hbd7/YTURfrHBCVmt+A28n0Uhw\nA8aTcxoCEX0leQnXKdvAf8KLjksn91gsqYMVN97b7/mY+42sYkSeODVeQncin8s=\n=zoiG\n-----END PGP SIGNATURE-----\n", "payload": "tree fe0f4554add4289d953078631bf8d6909facc44a\nparent 27885a94c6a6c98a0d49af3962f1218adcd6efd2\nparent 6a679ffc8125419123e416fbeb14a4e118e9f366\nauthor Dylan DPC <dylan.dpc@gmail.com> 1615205598 +0100\ncommitter GitHub <noreply@github.com> 1615205598 +0100\n\nRollup merge of #82047 - the8472:fast-rename, r=davidtwco\n\nbypass auto_da_alloc for metadata files\n\nThis saves about 0.7% when rerunning the UI test suite. I.e. when the metadata files exist and will be overwritten. No improvements expected for a clean build. So it might show up in incr-patched perf results.\n```\nregular rename:\n\nBenchmark #1: touch src/tools/compiletest/src/main.rs ; RUSTC_WRAPPER=\"\" schedtool -B -e ./x.py test src/test/ui\n  Time (mean \u00b1 \u03c3):     47.305 s \u00b1  0.170 s    [User: 1631.540 s, System: 412.648 s]\n  Range (min \u2026 max):   47.125 s \u2026 47.856 s    20 runs\n\nnon-durable rename:\n\nBenchmark #1: touch src/tools/compiletest/src/main.rs ; RUSTC_WRAPPER=\"\" schedtool -B -e ./x.py test src/test/ui\n  Time (mean \u00b1 \u03c3):     46.930 s \u00b1  0.064 s    [User: 1634.344 s, System: 396.038 s]\n  Range (min \u2026 max):   46.759 s \u2026 47.043 s    20 runs\n```\n\nThere are more places that trigger auto_da_alloc behavior by overwriting existing files with O_TRUNC, but those are much harder to locate because `O_TRUNC` is set on `open()` but the writeback is triggered on `close()`. The latter is the part which shows up in profiles.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da74a77622b29c056fa5a18f6e6033d9579a0e90", "html_url": "https://github.com/rust-lang/rust/commit/da74a77622b29c056fa5a18f6e6033d9579a0e90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da74a77622b29c056fa5a18f6e6033d9579a0e90/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27885a94c6a6c98a0d49af3962f1218adcd6efd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/27885a94c6a6c98a0d49af3962f1218adcd6efd2", "html_url": "https://github.com/rust-lang/rust/commit/27885a94c6a6c98a0d49af3962f1218adcd6efd2"}, {"sha": "6a679ffc8125419123e416fbeb14a4e118e9f366", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a679ffc8125419123e416fbeb14a4e118e9f366", "html_url": "https://github.com/rust-lang/rust/commit/6a679ffc8125419123e416fbeb14a4e118e9f366"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "fb6ef7d6b258c998bfd784a4170eaffd4fc3891c", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da74a77622b29c056fa5a18f6e6033d9579a0e90/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da74a77622b29c056fa5a18f6e6033d9579a0e90/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=da74a77622b29c056fa5a18f6e6033d9579a0e90", "patch": "@@ -988,7 +988,7 @@ fn encode_and_write_metadata(\n             .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)));\n         let metadata_tmpdir = MaybeTempDir::new(metadata_tmpdir, tcx.sess.opts.cg.save_temps);\n         let metadata_filename = emit_metadata(tcx.sess, &metadata, &metadata_tmpdir);\n-        if let Err(e) = fs::rename(&metadata_filename, &out_filename) {\n+        if let Err(e) = util::non_durable_rename(&metadata_filename, &out_filename) {\n             tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n         }\n         if tcx.sess.opts.json_artifact_notifications {"}, {"sha": "0a30eda1ec4069404467ab5d38de93dd7e8318a7", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/da74a77622b29c056fa5a18f6e6033d9579a0e90/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da74a77622b29c056fa5a18f6e6033d9579a0e90/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=da74a77622b29c056fa5a18f6e6033d9579a0e90", "patch": "@@ -694,6 +694,24 @@ pub fn build_output_filenames(\n     }\n }\n \n+#[cfg(not(target_os = \"linux\"))]\n+pub fn non_durable_rename(src: &Path, dst: &Path) -> std::io::Result<()> {\n+    std::fs::rename(src, dst)\n+}\n+\n+/// This function attempts to bypass the auto_da_alloc heuristic implemented by some filesystems\n+/// such as btrfs and ext4. When renaming over a file that already exists then they will \"helpfully\"\n+/// write back the source file before committing the rename in case a developer forgot some of\n+/// the fsyncs in the open/write/fsync(file)/rename/fsync(dir) dance for atomic file updates.\n+///\n+/// To avoid triggering this heuristic we delete the destination first, if it exists.\n+/// The cost of an extra syscall is much lower than getting descheduled for the sync IO.\n+#[cfg(target_os = \"linux\")]\n+pub fn non_durable_rename(src: &Path, dst: &Path) -> std::io::Result<()> {\n+    let _ = std::fs::remove_file(dst);\n+    std::fs::rename(src, dst)\n+}\n+\n // Note: Also used by librustdoc, see PR #43348. Consider moving this struct elsewhere.\n //\n // FIXME: Currently the `everybody_loops` transformation is not applied to:"}]}