{"sha": "48ce20653a470f2d4734fb0ee4a89905da23b15c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4Y2UyMDY1M2E0NzBmMmQ0NzM0ZmIwZWU0YTg5OTA1ZGEyM2IxNWM=", "commit": {"author": {"name": "Alex Burka", "email": "durka42+github@gmail.com", "date": "2016-06-13T19:05:22Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-07-27T17:58:51Z"}, "message": "generics-agnostic description", "tree": {"sha": "4d006b6532bb80224b97e3254e1f839c58ed62e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d006b6532bb80224b97e3254e1f839c58ed62e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48ce20653a470f2d4734fb0ee4a89905da23b15c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48ce20653a470f2d4734fb0ee4a89905da23b15c", "html_url": "https://github.com/rust-lang/rust/commit/48ce20653a470f2d4734fb0ee4a89905da23b15c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48ce20653a470f2d4734fb0ee4a89905da23b15c/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "032ea41e99b39f6af2aa26c0ba049d0d215d8ebb", "url": "https://api.github.com/repos/rust-lang/rust/commits/032ea41e99b39f6af2aa26c0ba049d0d215d8ebb", "html_url": "https://github.com/rust-lang/rust/commit/032ea41e99b39f6af2aa26c0ba049d0d215d8ebb"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "590c23e89299eba72e4d3c57005d155019c41d7f", "filename": "src/doc/book/ffi.md", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/48ce20653a470f2d4734fb0ee4a89905da23b15c/src%2Fdoc%2Fbook%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/48ce20653a470f2d4734fb0ee4a89905da23b15c/src%2Fdoc%2Fbook%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fffi.md?ref=48ce20653a470f2d4734fb0ee4a89905da23b15c", "patch": "@@ -578,19 +578,17 @@ interfacing with C, pointers that might be `null` are often used, which would se\n require some messy `transmute`s and/or unsafe code to handle conversions to/from Rust types.\n However, the language provides a workaround.\n \n-As a special case, an `enum` that contains exactly two variants, one of\n-which contains no data and the other containing a single field, is eligible\n-for the \"nullable pointer optimization\". When such an enum is instantiated\n-with one of the non-nullable types listed above, it is represented as a single pointer,\n-and the non-data variant is represented as the null pointer. This is called an\n-\"optimization\", but unlike other optimizations it is guaranteed to apply to\n+As a special case, an `enum` is eligible for the \"nullable pointer optimization\" if it\n+contains exactly two variants, one of which contains no data and the other contains\n+a single field of one of the non-nullable types listed above. This means it is represented\n+as a single pointer, and the non-data variant is represented as the null pointer. This is\n+called an \"optimization\", but unlike other optimizations it is guaranteed to apply to\n eligible types.\n \n The most common type that takes advantage of the nullable pointer optimization is `Option<T>`,\n where `None` corresponds to `null`. So `Option<extern \"C\" fn(c_int) -> c_int>` is a correct way\n to represent a nullable function pointer using the C ABI (corresponding to the C type\n-`int (*)(int)`). (However, generics are not required to get the optimization. A simple\n-`enum NullableIntRef { Int(Box<i32>), NotInt }` is also represented as a single pointer.)\n+`int (*)(int)`).\n \n Here is an example:\n "}]}