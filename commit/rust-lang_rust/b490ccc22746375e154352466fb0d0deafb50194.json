{"sha": "b490ccc22746375e154352466fb0d0deafb50194", "node_id": "C_kwDOAAsO6NoAKGI0OTBjY2MyMjc0NjM3NWUxNTQzNTI0NjZmYjBkMGRlYWZiNTAxOTQ", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2021-11-23T07:09:48Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2021-11-23T10:10:49Z"}, "message": "kernel_copy: avoid panic on unexpected OS error\n\nAccording to documentation, the listed errnos should only occur\nif the `copy_file_range` call cannot be made at all, so the\nassert be correct.  However, since in practice file system\ndrivers (incl. FUSE etc.) can return any errno they want, we\nshould not panic here.\n\nFixes #91152", "tree": {"sha": "a2b480e10cbe4bd6909d8560fabb291481117a43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2b480e10cbe4bd6909d8560fabb291481117a43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b490ccc22746375e154352466fb0d0deafb50194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b490ccc22746375e154352466fb0d0deafb50194", "html_url": "https://github.com/rust-lang/rust/commit/b490ccc22746375e154352466fb0d0deafb50194", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b490ccc22746375e154352466fb0d0deafb50194/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e055d92e0d527b273d12584bd842f6527e7652c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e055d92e0d527b273d12584bd842f6527e7652c", "html_url": "https://github.com/rust-lang/rust/commit/2e055d92e0d527b273d12584bd842f6527e7652c"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "f3155fbc0620f1ad8dbd634fb24d3be328d4cbb1", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b490ccc22746375e154352466fb0d0deafb50194/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b490ccc22746375e154352466fb0d0deafb50194/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=b490ccc22746375e154352466fb0d0deafb50194", "patch": "@@ -576,20 +576,22 @@ pub(super) fn copy_regular_files(reader: RawFd, writer: RawFd, max_len: u64) ->\n                 return match err.raw_os_error() {\n                     // when file offset + max_length > u64::MAX\n                     Some(EOVERFLOW) => CopyResult::Fallback(written),\n-                    Some(ENOSYS | EXDEV | EINVAL | EPERM | EOPNOTSUPP | EBADF) => {\n+                    Some(ENOSYS | EXDEV | EINVAL | EPERM | EOPNOTSUPP | EBADF) if written == 0 => {\n                         // Try fallback io::copy if either:\n                         // - Kernel version is < 4.5 (ENOSYS\u00b9)\n                         // - Files are mounted on different fs (EXDEV)\n                         // - copy_file_range is broken in various ways on RHEL/CentOS 7 (EOPNOTSUPP)\n                         // - copy_file_range file is immutable or syscall is blocked by seccomp\u00b9 (EPERM)\n                         // - copy_file_range cannot be used with pipes or device nodes (EINVAL)\n                         // - the writer fd was opened with O_APPEND (EBADF\u00b2)\n+                        // and no bytes were written successfully yet.  (All these errnos should\n+                        // not be returned if something was already written, but they happen in\n+                        // the wild, see #91152.)\n                         //\n                         // \u00b9 these cases should be detected by the initial probe but we handle them here\n                         //   anyway in case syscall interception changes during runtime\n                         // \u00b2 actually invalid file descriptors would cause this too, but in that case\n                         //   the fallback code path is expected to encounter the same error again\n-                        assert_eq!(written, 0);\n                         CopyResult::Fallback(0)\n                     }\n                     _ => CopyResult::Error(err, written),"}]}