{"sha": "d34e1ff89e067a57921091fbdffe8c13fa38341c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNGUxZmY4OWUwNjdhNTc5MjEwOTFmYmRmZmU4YzEzZmEzODM0MWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-12T02:02:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-12T02:03:00Z"}, "message": "rustc: Add a binding to LLVM's object file reader. Until it's sent upstream, add an explicit \"support\" library for our LLVM extensions.", "tree": {"sha": "7c3ab414d5295bd77ef48737b2c9c6771997fe0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c3ab414d5295bd77ef48737b2c9c6771997fe0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d34e1ff89e067a57921091fbdffe8c13fa38341c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d34e1ff89e067a57921091fbdffe8c13fa38341c", "html_url": "https://github.com/rust-lang/rust/commit/d34e1ff89e067a57921091fbdffe8c13fa38341c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d34e1ff89e067a57921091fbdffe8c13fa38341c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8fbb53d643eada0264aae902adc7f6f453c53b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8fbb53d643eada0264aae902adc7f6f453c53b0", "html_url": "https://github.com/rust-lang/rust/commit/a8fbb53d643eada0264aae902adc7f6f453c53b0"}], "stats": {"total": 167, "additions": 164, "deletions": 3}, "files": [{"sha": "dc6a78a52d4fb52e44f6250c31ca04e534604714", "filename": "src/Makefile", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d34e1ff89e067a57921091fbdffe8c13fa38341c/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d34e1ff89e067a57921091fbdffe8c13fa38341c/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=d34e1ff89e067a57921091fbdffe8c13fa38341c", "patch": "@@ -34,6 +34,7 @@ DSYMUTIL := true\n \n ifeq ($(CFG_OSTYPE), FreeBSD)\n   CFG_RUNTIME := librustrt.so\n+  CFG_SUPPORT := librustsupport.so\n   CFG_STDLIB := libstd.so\n   CFG_GCC_CFLAGS += -fPIC -march=i686 -I/usr/local/include\n   CFG_GCC_LINK_FLAGS += -shared -fPIC -lpthread -lrt\n@@ -47,6 +48,7 @@ endif\n \n ifeq ($(CFG_OSTYPE), Linux)\n   CFG_RUNTIME := librustrt.so\n+  CFG_SUPPORT := librustsupport.so\n   CFG_STDLIB := libstd.so\n   CFG_GCC_CFLAGS += -fPIC -march=i686\n   CFG_GCC_LINK_FLAGS += -shared -fPIC -ldl -lpthread -lrt\n@@ -60,6 +62,7 @@ endif\n \n ifeq ($(CFG_OSTYPE), Darwin)\n   CFG_RUNTIME := librustrt.dylib\n+  CFG_SUPPORT := librustsupport.dylib\n   CFG_STDLIB := libstd.dylib\n   CFG_UNIXY := 1\n   CFG_GCC_LINK_FLAGS += -dynamiclib -lpthread\n@@ -85,6 +88,7 @@ ifdef CFG_WINDOWSY\n     CFG_NATIVE := 1\n   endif\n   CFG_RUNTIME := rustrt.dll\n+  CFG_SUPPORT := rustsupport.dll\n   CFG_STDLIB := std.dll\n   CFG_EXE_SUFFIX := .exe\n   CFG_BOOT := ./rustboot.exe\n@@ -107,6 +111,7 @@ ifdef CFG_UNIXY\n     CFG_GCC_CROSS := i586-mingw32msvc-\n     CFG_BOOT_FLAGS += -t win32-x86-pe\n     CFG_RUNTIME := rustrt.dll\n+    CFG_SUPPORT := rustsupport.dll\n     CFG_STDLIB := std.dll\n     CFG_RUSTC := ./rustc.exe\n     ifdef CFG_VALGRIND\n@@ -179,7 +184,7 @@ endif\n ifneq ($(CFG_LLVM_CONFIG),)\n   CFG_LLVM_VERSION := $(shell $(CFG_LLVM_CONFIG) --version)\n   $(info cfg: found llvm-config at $(CFG_LLVM_CONFIG))\n-  CFG_LLVM_ALLOWED_VERSIONS := 2.8svn 2.8 2.9svn\n+  CFG_LLVM_ALLOWED_VERSIONS := 2.8svn 2.8 2.9svn 3.0svn\n   ifneq ($(findstring $(CFG_LLVM_VERSION),$(CFG_LLVM_ALLOWED_VERSIONS)),)\n     $(info cfg: using LLVM version $(CFG_LLVM_VERSION))\n   else\n@@ -193,6 +198,10 @@ ifdef CFG_LLVM_CONFIG\n   LLC := \"$(shell $(CFG_LLVM_CONFIG) --bindir)/llc\"\n   CFG_LLC_CFLAGS := -march=x86\n   LLVM-DIS := \"$(shell $(CFG_LLVM_CONFIG) --bindir)/llvm-dis\"\n+  CFG_LLVM_INCDIR := $(shell $(CFG_LLVM_CONFIG) --includedir)\n+  CFG_LLVM_CXXFLAGS := $(shell $(CFG_LLVM_CONFIG) --cxxflags)\n+  CFG_LLVM_LDFLAGS := $(shell $(CFG_LLVM_CONFIG) --ldflags)\n+  CFG_LLVM_LIBS := $(shell $(CFG_LLVM_CONFIG) --libs)\n endif\n \n MKFILES := Makefile\n@@ -301,6 +310,14 @@ RUNTIME_HDR := rt/globals.h \\\n RUNTIME_INCS := -Irt/isaac -Irt/uthash\n RUNTIME_OBJS := $(RUNTIME_CS:.cpp=.o)\n \n+SUPPORT_CS := support/Object.cpp\n+\n+SUPPORT_HDR := support/include/llvm-c/Object.h\n+\n+SUPPORT_INCS := -iquote $(CFG_LLVM_INCDIR)\n+SUPPORT_OBJS := $(SUPPORT_CS:.cpp=.o)\n+SUPPORT_LIBS := $(CFG_LLVM_LDFLAGS) $(CFG_LLVM_LIBS)\n+\n STDLIB_CRATE := lib/std.rc\n STDLIB_INPUTS := $(wildcard lib/*.rc lib/*.rs lib/*/*.rs)\n COMPILER_CRATE := comp/rustc.rc\n@@ -321,14 +338,24 @@ $(CFG_RUNTIME): $(RUNTIME_OBJS) $(MKFILES) $(RUNTIME_HDR)\n \t@$(call CFG_ECHO, compile: $<)\n \t$(CFG_QUIET)$(call CFG_LINK_C, $@) $(RUNTIME_OBJS)\n \n+$(CFG_SUPPORT): $(SUPPORT_OBJS) $(MKFILES) $(SUPPORT_HDR)\n+\t@$(call CFG_ECHO, compile: $<)\n+\t$(CFG_QUIET)$(call CFG_LINK_C, $@ $(CFG_LLVM_LDFLAGS) $(CFG_LLVM_LIBS)) \\\n+\t\t$(SUPPORT_OBJS)\n+\n $(CFG_STDLIB): $(STDLIB_CRATE) $(CFG_BOOT) $(MKFILES)\n \t@$(call CFG_ECHO, compile: $<)\n \t$(BOOT) -shared -o $@ $(STDLIB_CRATE)\n \n-%.o: %.cpp $(MKFILES)\n+rt/%.o: rt/%.cpp $(MKFILES)\n \t@$(call CFG_ECHO, compile: $<)\n \t$(CFG_QUIET)$(call CFG_COMPILE_C, $@, $(RUNTIME_INCS)) $<\n \n+support/%.o: support/%.cpp $(MKFILES)\n+\t@$(call CFG_ECHO, compile: $<)\n+\t$(CFG_QUIET)$(call CFG_COMPILE_C, $@, $(CFG_LLVM_CXXFLAGS) \\\n+\t\t$(SUPPORT_INCS)) $<\n+\n ifdef CFG_NATIVE\n $(CFG_BOOT): $(BOOT_CMXS) $(MKFILES)\n \t@$(call CFG_ECHO, compile: $<)\n@@ -359,7 +386,8 @@ endif\n # Main compiler targets and rules\n ######################################################################\n \n-$(CFG_RUSTC): $(COMPILER_INPUTS) $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB)\n+$(CFG_RUSTC): $(COMPILER_INPUTS) $(CFG_BOOT) $(CFG_RUNTIME) $(CFG_STDLIB) \\\n+\t\t$(CFG_SUPPORT)\n \t@$(call CFG_ECHO, compile: $<)\n \t$(BOOT) -minimal -o $@ $<\n \t$(CFG_QUIET)chmod 0755 $@"}, {"sha": "f390870fb330556e0a0b3671c06ce4b519a01544", "filename": "src/support/Object.cpp", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d34e1ff89e067a57921091fbdffe8c13fa38341c/src%2Fsupport%2FObject.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d34e1ff89e067a57921091fbdffe8c13fa38341c/src%2Fsupport%2FObject.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsupport%2FObject.cpp?ref=d34e1ff89e067a57921091fbdffe8c13fa38341c", "patch": "@@ -0,0 +1,55 @@\n+//===- Object.cpp - C bindings to the object file library--------*- C++ -*-===//\n+//\n+//                     The LLVM Compiler Infrastructure\n+//\n+// This file is distributed under the University of Illinois Open Source\n+// License. See LICENSE.TXT for details.\n+//\n+//===----------------------------------------------------------------------===//\n+//\n+// This file defines the C bindings to the file-format-independent object\n+// library.\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#include \"llvm/Object/ObjectFile.h\"\n+#include \"llvm-c/Object.h\"\n+\n+using namespace llvm;\n+using namespace object;\n+\n+LLVMObjectFileRef LLVMCreateObjectFile(const char *ObjectPath) {\n+  StringRef SR(ObjectPath);\n+  return wrap(ObjectFile::createObjectFile(SR));\n+}\n+\n+void LLVMDisposeObjectFile(LLVMObjectFileRef ObjectFile) {\n+  delete unwrap(ObjectFile);\n+}\n+\n+LLVMSectionIteratorRef LLVMGetSections(LLVMObjectFileRef ObjectFile) {\n+  ObjectFile::section_iterator SI = unwrap(ObjectFile)->begin_sections();\n+  return wrap(new ObjectFile::section_iterator(SI));\n+}\n+\n+void LLVMDisposeSectionIterator(LLVMSectionIteratorRef SI) {\n+  delete unwrap(SI);\n+}\n+\n+void LLVMMoveToNextSection(LLVMSectionIteratorRef SI) {\n+  ObjectFile::section_iterator UnwrappedSI = *unwrap(SI);\n+  ++UnwrappedSI;\n+}\n+\n+const char *LLVMGetSectionName(LLVMSectionIteratorRef SI) {\n+  return (*unwrap(SI))->getName().data();\n+}\n+\n+uint64_t LLVMGetSectionSize(LLVMSectionIteratorRef SI) {\n+  return (*unwrap(SI))->getSize();\n+}\n+\n+const char *LLVMGetSectionContents(LLVMSectionIteratorRef SI) {\n+  return (*unwrap(SI))->getContents().data();\n+}\n+"}, {"sha": "31495f22c0a5044d3db2c95b567cafd4542c53c8", "filename": "src/support/README", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d34e1ff89e067a57921091fbdffe8c13fa38341c/src%2Fsupport%2FREADME", "raw_url": "https://github.com/rust-lang/rust/raw/d34e1ff89e067a57921091fbdffe8c13fa38341c/src%2Fsupport%2FREADME", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsupport%2FREADME?ref=d34e1ff89e067a57921091fbdffe8c13fa38341c", "patch": "@@ -0,0 +1,3 @@\n+This directory currently contains some LLVM support code. This will generally\n+be sent upstream to LLVM in time; for now it lives here.\n+"}, {"sha": "a65a2352aa0a17aa47e9336107f1d9bb4a6b6ebd", "filename": "src/support/include/llvm-c/Object.h", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/d34e1ff89e067a57921091fbdffe8c13fa38341c/src%2Fsupport%2Finclude%2Fllvm-c%2FObject.h", "raw_url": "https://github.com/rust-lang/rust/raw/d34e1ff89e067a57921091fbdffe8c13fa38341c/src%2Fsupport%2Finclude%2Fllvm-c%2FObject.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsupport%2Finclude%2Fllvm-c%2FObject.h?ref=d34e1ff89e067a57921091fbdffe8c13fa38341c", "patch": "@@ -0,0 +1,75 @@\n+/*===-- llvm-c/Object.h - Object Lib C Iface --------------------*- C++ -*-===*/\n+/*                                                                            */\n+/*                     The LLVM Compiler Infrastructure                       */\n+/*                                                                            */\n+/* This file is distributed under the University of Illinois Open Source      */\n+/* License. See LICENSE.TXT for details.                                      */\n+/*                                                                            */\n+/*===----------------------------------------------------------------------===*/\n+/*                                                                            */\n+/* This header declares the C interface to libLLVMObject.a, which             */\n+/* implements object file reading and writing.                                */\n+/*                                                                            */\n+/* Many exotic languages can interoperate with C code but have a harder time  */\n+/* with C++ due to name mangling. So in addition to C, this interface enables */\n+/* tools written in such languages.                                           */\n+/*                                                                            */\n+/*===----------------------------------------------------------------------===*/\n+\n+#ifndef LLVM_C_OBJECT_H\n+#define LLVM_C_OBJECT_H\n+\n+#include \"llvm-c/Core.h\"\n+#include \"llvm/Config/llvm-config.h\"\n+\n+#ifdef __cplusplus\n+#include \"llvm/Object/ObjectFile.h\"\n+\n+extern \"C\" {\n+#endif\n+\n+\n+typedef struct LLVMOpaqueObjectFile *LLVMObjectFileRef;\n+\n+typedef struct LLVMOpaqueSectionIterator *LLVMSectionIteratorRef;\n+\n+LLVMObjectFileRef LLVMCreateObjectFile(const char *ObjectPath);\n+void LLVMDisposeObjectFile(LLVMObjectFileRef ObjectFile);\n+\n+LLVMSectionIteratorRef LLVMGetSections(LLVMObjectFileRef ObjectFile);\n+void LLVMDisposeSectionIterator(LLVMSectionIteratorRef SI);\n+void LLVMMoveToNextSection(LLVMSectionIteratorRef SI);\n+const char *LLVMGetSectionName(LLVMSectionIteratorRef SI);\n+uint64_t LLVMGetSectionSize(LLVMSectionIteratorRef SI);\n+const char *LLVMGetSectionContents(LLVMSectionIteratorRef SI);\n+\n+\n+#ifdef __cplusplus\n+}\n+\n+namespace llvm {\n+  namespace object {\n+    inline ObjectFile *unwrap(LLVMObjectFileRef OF) {\n+      return reinterpret_cast<ObjectFile*>(OF);\n+    }\n+\n+    inline LLVMObjectFileRef wrap(const ObjectFile *OF) {\n+      return reinterpret_cast<LLVMObjectFileRef>(const_cast<ObjectFile*>(OF));\n+    }\n+\n+    inline ObjectFile::section_iterator *unwrap(LLVMSectionIteratorRef SI) {\n+      return reinterpret_cast<ObjectFile::section_iterator*>(SI);\n+    }\n+\n+    inline LLVMSectionIteratorRef\n+    wrap(const ObjectFile::section_iterator *SI) {\n+      return reinterpret_cast<LLVMSectionIteratorRef>\n+        (const_cast<ObjectFile::section_iterator*>(SI));\n+    }\n+  }\n+}\n+\n+#endif /* defined(__cplusplus) */\n+\n+#endif\n+"}]}