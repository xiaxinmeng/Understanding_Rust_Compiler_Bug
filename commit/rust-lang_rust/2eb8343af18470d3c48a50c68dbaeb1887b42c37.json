{"sha": "2eb8343af18470d3c48a50c68dbaeb1887b42c37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYjgzNDNhZjE4NDcwZDNjNDhhNTBjNjhkYmFlYjE4ODdiNDJjMzc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-30T00:27:37Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-30T00:27:37Z"}, "message": "Correct unused field warning on struct match container patterns", "tree": {"sha": "6f97cfbaa41fd0d2cfdcde2b0545ea913cd291e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f97cfbaa41fd0d2cfdcde2b0545ea913cd291e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eb8343af18470d3c48a50c68dbaeb1887b42c37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb8343af18470d3c48a50c68dbaeb1887b42c37", "html_url": "https://github.com/rust-lang/rust/commit/2eb8343af18470d3c48a50c68dbaeb1887b42c37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eb8343af18470d3c48a50c68dbaeb1887b42c37/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e8fe9042c86c53d90ce17cc0754505bf014d0ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8fe9042c86c53d90ce17cc0754505bf014d0ed", "html_url": "https://github.com/rust-lang/rust/commit/8e8fe9042c86c53d90ce17cc0754505bf014d0ed"}], "stats": {"total": 90, "additions": 77, "deletions": 13}, "files": [{"sha": "d1a46f5f155637f02624592f1e9d127436a87425", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2eb8343af18470d3c48a50c68dbaeb1887b42c37/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb8343af18470d3c48a50c68dbaeb1887b42c37/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=2eb8343af18470d3c48a50c68dbaeb1887b42c37", "patch": "@@ -111,6 +111,7 @@ use ty::{self, TyCtxt};\n use lint;\n use util::nodemap::{NodeMap, NodeSet};\n \n+use std::collections::VecDeque;\n use std::{fmt, usize};\n use std::io::prelude::*;\n use std::io;\n@@ -420,21 +421,35 @@ fn visit_arm<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, arm: &'tcx hir::Arm) {\n         // phased out in favor of `HirId`s; however, we need to match the signature of\n         // `each_binding`, which uses `NodeIds`.\n         let mut shorthand_field_ids = NodeSet();\n-        loop {\n+        let mut pats = VecDeque::new();\n+        pats.push_back(pat);\n+        while let Some(pat) = pats.pop_front() {\n+            use hir::PatKind::*;\n             match pat.node {\n-                hir::PatKind::Struct(_, ref fields, _) => {\n+                Binding(_, _, _, ref inner_pat) => {\n+                    pats.extend(inner_pat.iter());\n+                }\n+                Struct(_, ref fields, _) => {\n                     for field in fields {\n                         if field.node.is_shorthand {\n                             shorthand_field_ids.insert(field.node.pat.id);\n                         }\n                     }\n-                    break;\n                 }\n-                hir::PatKind::Ref(ref inner_pat, _) |\n-                hir::PatKind::Box(ref inner_pat) => {\n-                    pat = inner_pat;\n+                Ref(ref inner_pat, _) |\n+                Box(ref inner_pat) => {\n+                    pats.push_back(inner_pat);\n+                }\n+                TupleStruct(_, ref inner_pats, _) |\n+                Tuple(ref inner_pats, _) => {\n+                    pats.extend(inner_pats.iter());\n+                }\n+                Slice(ref pre_pats, ref inner_pat, ref post_pats) => {\n+                    pats.extend(pre_pats.iter());\n+                    pats.extend(inner_pat.iter());\n+                    pats.extend(post_pats.iter());\n                 }\n-                _ => break\n+                _ => {}\n             }\n         }\n "}, {"sha": "6994a377a06d7c01373dca5bc51034f61bbec92d", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2eb8343af18470d3c48a50c68dbaeb1887b42c37/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb8343af18470d3c48a50c68dbaeb1887b42c37/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.rs?ref=2eb8343af18470d3c48a50c68dbaeb1887b42c37", "patch": "@@ -20,10 +20,13 @@ struct SoulHistory {\n     endless_and_singing: bool\n }\n \n+#[derive(Clone, Copy)]\n enum Large {\n     Suit { case: () }\n }\n \n+struct Tuple(Large, ());\n+\n fn main() {\n     let i_think_continually = 2;\n     let who_from_the_womb_remembered = SoulHistory {\n@@ -42,11 +45,33 @@ fn main() {\n         case: ()\n     };\n \n+    // Plain struct\n+    match bag {\n+        Large::Suit { case } => {}\n+    };\n+\n+    // Referenced struct\n     match &bag {\n         &Large::Suit { case } => {}\n     };\n \n+    // Boxed struct\n     match box bag {\n         box Large::Suit { case } => {}\n     };\n+\n+    // Tuple with struct\n+    match (bag,) {\n+        (Large::Suit { case },) => {}\n+    };\n+\n+    // Slice with struct\n+    match [bag] {\n+        [Large::Suit { case }] => {}\n+    };\n+\n+    // Tuple struct with struct\n+    match Tuple(bag, ()) {\n+        Tuple(Large::Suit { case }, ()) => {}\n+    };\n }"}, {"sha": "7bfe2c9162ed17d9a30936a164989645d8bea17f", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.stderr", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2eb8343af18470d3c48a50c68dbaeb1887b42c37/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2eb8343af18470d3c48a50c68dbaeb1887b42c37/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr?ref=2eb8343af18470d3c48a50c68dbaeb1887b42c37", "patch": "@@ -1,5 +1,5 @@\n warning: unused variable: `i_think_continually`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:28:9\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:31:9\n    |\n LL |     let i_think_continually = 2;\n    |         ^^^^^^^^^^^^^^^^^^^ help: consider using `_i_think_continually` instead\n@@ -12,21 +12,21 @@ LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    = note: #[warn(unused_variables)] implied by #[warn(unused)]\n \n warning: unused variable: `corridors_of_light`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:35:26\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:38:26\n    |\n LL |     if let SoulHistory { corridors_of_light,\n    |                          ^^^^^^^^^^^^^^^^^^ help: try ignoring the field: `corridors_of_light: _`\n \n warning: variable `hours_are_suns` is assigned to, but never used\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:36:26\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:39:26\n    |\n LL |                          mut hours_are_suns,\n    |                          ^^^^^^^^^^^^^^^^^^\n    |\n    = note: consider using `_hours_are_suns` instead\n \n warning: value assigned to `hours_are_suns` is never read\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:38:9\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:41:9\n    |\n LL |         hours_are_suns = false;\n    |         ^^^^^^^^^^^^^^\n@@ -39,14 +39,38 @@ LL | #![warn(unused)] // UI tests pass `-A unused` (#43896)\n    = note: #[warn(unused_assignments)] implied by #[warn(unused)]\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:46:24\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:50:23\n+   |\n+LL |         Large::Suit { case } => {}\n+   |                       ^^^^ help: try ignoring the field: `case: _`\n+\n+warning: unused variable: `case`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:55:24\n    |\n LL |         &Large::Suit { case } => {}\n    |                        ^^^^ help: try ignoring the field: `case: _`\n \n warning: unused variable: `case`\n-  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:50:27\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:60:27\n    |\n LL |         box Large::Suit { case } => {}\n    |                           ^^^^ help: try ignoring the field: `case: _`\n \n+warning: unused variable: `case`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:65:24\n+   |\n+LL |         (Large::Suit { case },) => {}\n+   |                        ^^^^ help: try ignoring the field: `case: _`\n+\n+warning: unused variable: `case`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:70:24\n+   |\n+LL |         [Large::Suit { case }] => {}\n+   |                        ^^^^ help: try ignoring the field: `case: _`\n+\n+warning: unused variable: `case`\n+  --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:75:29\n+   |\n+LL |         Tuple(Large::Suit { case }, ()) => {}\n+   |                             ^^^^ help: try ignoring the field: `case: _`\n+"}]}