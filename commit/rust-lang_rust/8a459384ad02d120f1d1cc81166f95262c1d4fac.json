{"sha": "8a459384ad02d120f1d1cc81166f95262c1d4fac", "node_id": "C_kwDOAAsO6NoAKDhhNDU5Mzg0YWQwMmQxMjBmMWQxY2M4MTE2NmY5NTI2MmMxZDRmYWM", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-12-06T20:56:02Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2022-12-07T17:08:43Z"}, "message": "Revert crate_types change, add new bin_crate field", "tree": {"sha": "e78703abe7f69ae8ff9b36e66c5b47645da19847", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e78703abe7f69ae8ff9b36e66c5b47645da19847"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a459384ad02d120f1d1cc81166f95262c1d4fac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a459384ad02d120f1d1cc81166f95262c1d4fac", "html_url": "https://github.com/rust-lang/rust/commit/8a459384ad02d120f1d1cc81166f95262c1d4fac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a459384ad02d120f1d1cc81166f95262c1d4fac/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0709e534df2a85486f981bfbebd153bb25e3703d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0709e534df2a85486f981bfbebd153bb25e3703d", "html_url": "https://github.com/rust-lang/rust/commit/0709e534df2a85486f981bfbebd153bb25e3703d"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "56b40d8c66baffa627ab03e1a9b83788b73d276d", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a459384ad02d120f1d1cc81166f95262c1d4fac/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a459384ad02d120f1d1cc81166f95262c1d4fac/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=8a459384ad02d120f1d1cc81166f95262c1d4fac", "patch": "@@ -69,8 +69,10 @@ pub(crate) struct Options {\n     pub(crate) input: PathBuf,\n     /// The name of the crate being documented.\n     pub(crate) crate_name: Option<String>,\n-    /// The types of the crate being documented.\n-    pub(crate) crate_types: Vec<CrateType>,\n+    /// Whether or not this is a bin crate\n+    pub(crate) bin_crate: bool,\n+    /// Whether or not this is a proc-macro crate\n+    pub(crate) proc_macro_crate: bool,\n     /// How to format errors and warnings.\n     pub(crate) error_format: ErrorOutputType,\n     /// Width of output buffer to truncate errors appropriately.\n@@ -176,7 +178,8 @@ impl fmt::Debug for Options {\n         f.debug_struct(\"Options\")\n             .field(\"input\", &self.input)\n             .field(\"crate_name\", &self.crate_name)\n-            .field(\"crate_types\", &self.crate_types)\n+            .field(\"bin_crate\", &self.bin_crate)\n+            .field(\"proc_macro_crate\", &self.proc_macro_crate)\n             .field(\"error_format\", &self.error_format)\n             .field(\"libs\", &self.libs)\n             .field(\"externs\", &FmtExterns(&self.externs))\n@@ -667,6 +670,8 @@ impl Options {\n             None => OutputFormat::default(),\n         };\n         let crate_name = matches.opt_str(\"crate-name\");\n+        let bin_crate = crate_types.contains(&CrateType::Executable);\n+        let proc_macro_crate = crate_types.contains(&CrateType::ProcMacro);\n         let playground_url = matches.opt_str(\"playground-url\");\n         let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n         let module_sorting = if matches.opt_present(\"sort-modules-by-appearance\") {\n@@ -717,7 +722,8 @@ impl Options {\n             rustc_feature::UnstableFeatures::from_environment(crate_name.as_deref());\n         let options = Options {\n             input,\n-            crate_types,\n+            bin_crate,\n+            proc_macro_crate,\n             error_format,\n             diagnostic_width,\n             libs,"}, {"sha": "da0df596c41e34f7ca88e07b1e7b0811b75ed22d", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a459384ad02d120f1d1cc81166f95262c1d4fac/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a459384ad02d120f1d1cc81166f95262c1d4fac/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=8a459384ad02d120f1d1cc81166f95262c1d4fac", "patch": "@@ -203,7 +203,7 @@ pub(crate) fn create_config(\n     RustdocOptions {\n         input,\n         crate_name,\n-        crate_types,\n+        proc_macro_crate,\n         error_format,\n         diagnostic_width,\n         libs,\n@@ -247,7 +247,8 @@ pub(crate) fn create_config(\n         Some((lint.name_lower(), lint::Allow))\n     });\n \n-    let crate_types = if crate_types.is_empty() { vec![CrateType::Rlib] } else { crate_types };\n+    let crate_types =\n+        if proc_macro_crate { vec![CrateType::ProcMacro] } else { vec![CrateType::Rlib] };\n     let test = scrape_examples_options.map(|opts| opts.scrape_tests).unwrap_or(false);\n     // plays with error output here!\n     let sessopts = config::Options {"}, {"sha": "81d9c46447a379d0f570026412597fc0656e001c", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a459384ad02d120f1d1cc81166f95262c1d4fac/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a459384ad02d120f1d1cc81166f95262c1d4fac/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=8a459384ad02d120f1d1cc81166f95262c1d4fac", "patch": "@@ -68,11 +68,8 @@ pub(crate) fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n \n     debug!(?lint_opts);\n \n-    let crate_types = if options.crate_types.is_empty() {\n-        vec![CrateType::Rlib]\n-    } else {\n-        options.crate_types.clone()\n-    };\n+    let crate_types =\n+        if options.proc_macro_crate { vec![CrateType::ProcMacro] } else { vec![CrateType::Rlib] };\n \n     let sessopts = config::Options {\n         maybe_sysroot: options.maybe_sysroot.clone(),"}, {"sha": "3f84eb0b4c6550444a73cb28342f9fb6fe090fc9", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a459384ad02d120f1d1cc81166f95262c1d4fac/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a459384ad02d120f1d1cc81166f95262c1d4fac/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=8a459384ad02d120f1d1cc81166f95262c1d4fac", "patch": "@@ -774,7 +774,7 @@ fn main_args(at_args: &[String]) -> MainResult {\n     let output_format = options.output_format;\n     let externs = options.externs.clone();\n     let scrape_examples_options = options.scrape_examples_options.clone();\n-    let crate_types = options.crate_types.clone();\n+    let bin_crate = options.bin_crate;\n \n     let config = core::create_config(options);\n \n@@ -839,7 +839,7 @@ fn main_args(at_args: &[String]) -> MainResult {\n                         cache,\n                         tcx,\n                         options,\n-                        crate_types,\n+                        bin_crate,\n                     );\n                 }\n "}, {"sha": "f2ee99cd9d4943e1e1a576d1c26a52d1f8881541", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a459384ad02d120f1d1cc81166f95262c1d4fac/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a459384ad02d120f1d1cc81166f95262c1d4fac/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=8a459384ad02d120f1d1cc81166f95262c1d4fac", "patch": "@@ -20,7 +20,7 @@ use rustc_serialize::{\n     opaque::{FileEncoder, MemDecoder},\n     Decodable, Encodable,\n };\n-use rustc_session::{config::CrateType, getopts};\n+use rustc_session::getopts;\n use rustc_span::{\n     def_id::{CrateNum, DefPathHash, LOCAL_CRATE},\n     edition::Edition,\n@@ -123,7 +123,7 @@ struct FindCalls<'a, 'tcx> {\n     cx: Context<'tcx>,\n     target_crates: Vec<CrateNum>,\n     calls: &'a mut AllCallLocations,\n-    crate_types: Vec<CrateType>,\n+    bin_crate: bool,\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for FindCalls<'a, 'tcx>\n@@ -247,7 +247,7 @@ where\n                 let mk_call_data = || {\n                     let display_name = file_path.display().to_string();\n                     let edition = call_span.edition();\n-                    let is_bin = self.crate_types.contains(&CrateType::Executable);\n+                    let is_bin = self.bin_crate;\n \n                     CallData { locations: Vec::new(), url, display_name, edition, is_bin }\n                 };\n@@ -278,7 +278,7 @@ pub(crate) fn run(\n     cache: formats::cache::Cache,\n     tcx: TyCtxt<'_>,\n     options: ScrapeExamplesOptions,\n-    crate_types: Vec<CrateType>,\n+    bin_crate: bool,\n ) -> interface::Result<()> {\n     let inner = move || -> Result<(), String> {\n         // Generates source files for examples\n@@ -306,7 +306,7 @@ pub(crate) fn run(\n         // Run call-finder on all items\n         let mut calls = FxHashMap::default();\n         let mut finder =\n-            FindCalls { calls: &mut calls, tcx, map: tcx.hir(), cx, target_crates, crate_types };\n+            FindCalls { calls: &mut calls, tcx, map: tcx.hir(), cx, target_crates, bin_crate };\n         tcx.hir().visit_all_item_likes_in_crate(&mut finder);\n \n         // The visitor might have found a type error, which we need to"}]}