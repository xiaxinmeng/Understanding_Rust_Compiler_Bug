{"sha": "de5c6f111cd276bc4097da92883cad8c14e3f437", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNWM2ZjExMWNkMjc2YmM0MDk3ZGE5Mjg4M2NhZDhjMTRlM2Y0Mzc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-08-26T18:22:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-08-26T18:22:00Z"}, "message": "Add a \"param handler\" to demand_fn for use in automatic type parameter instantiation", "tree": {"sha": "38156e7e61c7c70cb3d1d85f9261121d1d904d18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38156e7e61c7c70cb3d1d85f9261121d1d904d18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de5c6f111cd276bc4097da92883cad8c14e3f437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de5c6f111cd276bc4097da92883cad8c14e3f437", "html_url": "https://github.com/rust-lang/rust/commit/de5c6f111cd276bc4097da92883cad8c14e3f437", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de5c6f111cd276bc4097da92883cad8c14e3f437/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff9ecc11287083c761d6ab58b4a2e81da232195b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff9ecc11287083c761d6ab58b4a2e81da232195b", "html_url": "https://github.com/rust-lang/rust/commit/ff9ecc11287083c761d6ab58b4a2e81da232195b"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "9e223dab864bfe58ac0ac20491d385100ba63f2b", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/de5c6f111cd276bc4097da92883cad8c14e3f437/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/de5c6f111cd276bc4097da92883cad8c14e3f437/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=de5c6f111cd276bc4097da92883cad8c14e3f437", "patch": "@@ -153,7 +153,11 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n         Ast.TY_rec ty_rec -> ty_rec\n       | ty -> type_error \"record\" ty\n   in\n-  let demand_fn (arg_tys:Ast.ty option array) (actual:Ast.ty) : Ast.ty =\n+  let demand_fn\n+      ?param_handler:(param_handler=demand)\n+      (arg_tys:Ast.ty option array)\n+      (actual:Ast.ty)\n+      : Ast.ty =\n     let expected = lazy begin\n       Format.fprintf Format.str_formatter \"fn(\";\n       let print_arg_ty i arg_ty_opt =\n@@ -173,7 +177,10 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n             type_error (Lazy.force expected) ty;\n           let in_slot_tys = Array.map get_slot_ty in_slots in\n           let maybe_demand a_opt b =\n-            match a_opt with None -> () | Some a -> demand a b\n+            match a_opt, b with\n+                None, _ -> ()\n+              | Some a, Ast.TY_param _ -> param_handler a b\n+              | Some a, _ -> demand a b\n           in\n           Common.arr_iter2 maybe_demand arg_tys in_slot_tys;\n           get_slot_ty (ty_sig.Ast.sig_output_slot)\n@@ -497,26 +504,25 @@ let check_stmt (cx:Semant.ctxt) : (fn_ctx -> Ast.stmt -> unit) =\n       | TYPAT_fn arg_tys, LTYPE_mono actual ->\n           ignore (demand_fn (Array.map (fun ty -> Some ty) arg_tys) actual);\n           yield_ty actual\n+      | TYPAT_fn _, LTYPE_poly (_, _) ->\n+          (* FIXME: auto-instantiate *)\n+          Common.unimpl\n+            None\n+            \"instantiation of polymorphic function types; please supply type \\\n+            parameters explicitly, sorry\"\n       | TYPAT_wild, (LTYPE_poly _ as lty) ->\n           Common.err\n             None\n             \"not enough context to automatically instantiate the polymorphic \\\n               type '%a'; supply type parameters explicitly\"\n             sprintf_ltype lty\n       | TYPAT_ty expected, (LTYPE_poly _ as lty) ->\n-          (* FIXME: auto-instantiate *)\n-          Common.unimpl\n+          Common.err\n             None\n-            \"sorry, automatic polymorphic instantiation of %a to %a isn't \\\n-            supported yet; please supply type parameters explicitly\"\n+            \"not enough context to automatically instantiate '%a' to '%a'; \\\n+            please supply type parameters explicitly\"\n             sprintf_ltype lty\n             Ast.sprintf_ty expected\n-      | TYPAT_fn _, (LTYPE_poly _) ->\n-          (* FIXME: auto-instantiate *)\n-          Common.unimpl\n-            None\n-            \"sorry, automatic polymorphic instantiation of function types \\\n-            isn't supported yet; please supply type parameters explicitly\"\n       | _, LTYPE_module _ ->\n           Common.err None \"can't refer to a module as a first-class value\"\n "}]}