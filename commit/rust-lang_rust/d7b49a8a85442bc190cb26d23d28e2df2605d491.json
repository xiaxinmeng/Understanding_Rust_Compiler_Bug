{"sha": "d7b49a8a85442bc190cb26d23d28e2df2605d491", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YjQ5YThhODU0NDJiYzE5MGNiMjZkMjNkMjhlMmRmMjYwNWQ0OTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-06T06:17:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-06T06:17:48Z"}, "message": "Rollup merge of #63295 - RalfJung:align_offset, r=dtolnay\n\nimprove align_offset docs\n\nCc @shepmaster", "tree": {"sha": "a0859bbe8b061d07ee149f6829d36e811ef9166b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0859bbe8b061d07ee149f6829d36e811ef9166b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7b49a8a85442bc190cb26d23d28e2df2605d491", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdSRuNCRBK7hj4Ov3rIwAAdHIIAIXAQGjltTRMy+FWBCKZbbDC\n2POti+qFOHnjMD01TGD+r7TJ15dZrgVEILygfRHcofmarBotiRviFbvWgg3hLZP6\nmFqnWaYvcF+zaqbmcYU7jAc5qmzvi3e/eGL8l2+buVX35a0k3NqlZxguv7hfsG7Z\nhop2cxzccBgp4gSQWqkWBFbuKJY2mkPYyDqcy/pzcZEGH1+Hy8E9Luie99wqXjIJ\nZD1MRxyDQF/eBOUdROqx+5OLqakR9T1k9m7Jr8NeJEeCOWl79L7FbMzJ6UGv8TZH\ndaFCWF5+kMAjshj2g5tBV8KnB5cWzbU/rMtMO9jz64xlNg7Hf6wHBrs1A7pPn0g=\n=Nb9w\n-----END PGP SIGNATURE-----\n", "payload": "tree a0859bbe8b061d07ee149f6829d36e811ef9166b\nparent 000d646424304ca066297b4f65222c093592d555\nparent 1f018636e35018bbd3f83de8da68ec50669cd646\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565072268 +0200\ncommitter GitHub <noreply@github.com> 1565072268 +0200\n\nRollup merge of #63295 - RalfJung:align_offset, r=dtolnay\n\nimprove align_offset docs\n\nCc @shepmaster\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b49a8a85442bc190cb26d23d28e2df2605d491", "html_url": "https://github.com/rust-lang/rust/commit/d7b49a8a85442bc190cb26d23d28e2df2605d491", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7b49a8a85442bc190cb26d23d28e2df2605d491/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "000d646424304ca066297b4f65222c093592d555", "url": "https://api.github.com/repos/rust-lang/rust/commits/000d646424304ca066297b4f65222c093592d555", "html_url": "https://github.com/rust-lang/rust/commit/000d646424304ca066297b4f65222c093592d555"}, {"sha": "1f018636e35018bbd3f83de8da68ec50669cd646", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f018636e35018bbd3f83de8da68ec50669cd646", "html_url": "https://github.com/rust-lang/rust/commit/1f018636e35018bbd3f83de8da68ec50669cd646"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "fa55bbf9c16507ecd4c1f5399fd6ec9d4f497efb", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7b49a8a85442bc190cb26d23d28e2df2605d491/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b49a8a85442bc190cb26d23d28e2df2605d491/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=d7b49a8a85442bc190cb26d23d28e2df2605d491", "patch": "@@ -1606,10 +1606,12 @@ impl<T: ?Sized> *const T {\n     /// `align`.\n     ///\n     /// If it is not possible to align the pointer, the implementation returns\n-    /// `usize::max_value()`.\n+    /// `usize::max_value()`. It is permissible for the implementation to *always*\n+    /// return `usize::max_value()`. Only your algorithm's performance can depend\n+    /// on getting a usable offset here, not its correctness.\n     ///\n     /// The offset is expressed in number of `T` elements, and not bytes. The value returned can be\n-    /// used with the `add` method.\n+    /// used with the `wrapping_add` method.\n     ///\n     /// There are no guarantees whatsoever that offsetting the pointer will not overflow or go\n     /// beyond the allocation that the pointer points into. It is up to the caller to ensure that\n@@ -2407,10 +2409,12 @@ impl<T: ?Sized> *mut T {\n     /// `align`.\n     ///\n     /// If it is not possible to align the pointer, the implementation returns\n-    /// `usize::max_value()`.\n+    /// `usize::max_value()`. It is permissible for the implementation to *always*\n+    /// return `usize::max_value()`. Only your algorithm's performance can depend\n+    /// on getting a usable offset here, not its correctness.\n     ///\n     /// The offset is expressed in number of `T` elements, and not bytes. The value returned can be\n-    /// used with the `add` method.\n+    /// used with the `wrapping_add` method.\n     ///\n     /// There are no guarantees whatsoever that offsetting the pointer will not overflow or go\n     /// beyond the allocation that the pointer points into. It is up to the caller to ensure that"}]}