{"sha": "c879f43186a30bd5ab6886600bd6fac8aff035b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NzlmNDMxODZhMzBiZDVhYjY4ODY2MDBiZDZmYWM4YWZmMDM1YjI=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-27T15:52:37Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-27T15:52:37Z"}, "message": "Enable hover support for NamedFieldDefs\n\nAdditionally add type ascription for const and statics as well.", "tree": {"sha": "bb381c4561b48243b1147974e43170c30d4266b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb381c4561b48243b1147974e43170c30d4266b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c879f43186a30bd5ab6886600bd6fac8aff035b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c879f43186a30bd5ab6886600bd6fac8aff035b2", "html_url": "https://github.com/rust-lang/rust/commit/c879f43186a30bd5ab6886600bd6fac8aff035b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c879f43186a30bd5ab6886600bd6fac8aff035b2/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb4521be1cbf10712804bb1e2dadbdfbf942437a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb4521be1cbf10712804bb1e2dadbdfbf942437a", "html_url": "https://github.com/rust-lang/rust/commit/bb4521be1cbf10712804bb1e2dadbdfbf942437a"}], "stats": {"total": 82, "additions": 79, "deletions": 3}, "files": [{"sha": "47913d7532432b5eb8c72e07248008cdaec03844", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/c879f43186a30bd5ab6886600bd6fac8aff035b2/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c879f43186a30bd5ab6886600bd6fac8aff035b2/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=c879f43186a30bd5ab6886600bd6fac8aff035b2", "patch": "@@ -1,6 +1,6 @@\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    AstNode, SyntaxNode, TreeArc, ast::{self, NameOwner, VisibilityOwner},\n+    AstNode, SyntaxNode, TreeArc, ast::{self, NameOwner, VisibilityOwner, TypeAscriptionOwner},\n     algo::{find_covering_node, find_node_at_offset, find_leaf_at_offset, visit::{visitor, Visitor}},\n };\n \n@@ -179,6 +179,7 @@ impl NavigationTarget {\n             .visit(doc_comments::<ast::TypeAliasDef>)\n             .visit(doc_comments::<ast::ConstDef>)\n             .visit(doc_comments::<ast::StaticDef>)\n+            .visit(doc_comments::<ast::NamedFieldDef>)\n             .accept(&node)?\n     }\n \n@@ -189,6 +190,20 @@ impl NavigationTarget {\n         // TODO: After type inference is done, add type information to improve the output\n         let node = self.node(db)?;\n \n+        fn visit_ascribed_node<T>(node: &T, prefix: &str) -> Option<String>\n+        where\n+            T: NameOwner + VisibilityOwner + TypeAscriptionOwner,\n+        {\n+            let mut string = visit_node(node, prefix)?;\n+\n+            if let Some(type_ref) = node.ascribed_type() {\n+                string.push_str(\": \");\n+                type_ref.syntax().text().push_to(&mut string);\n+            }\n+\n+            Some(string)\n+        }\n+\n         fn visit_node<T>(node: &T, label: &str) -> Option<String>\n         where\n             T: NameOwner + VisibilityOwner,\n@@ -207,8 +222,9 @@ impl NavigationTarget {\n             .visit(|node: &ast::TraitDef| visit_node(node, \"trait \"))\n             .visit(|node: &ast::Module| visit_node(node, \"mod \"))\n             .visit(|node: &ast::TypeAliasDef| visit_node(node, \"type \"))\n-            .visit(|node: &ast::ConstDef| visit_node(node, \"const \"))\n-            .visit(|node: &ast::StaticDef| visit_node(node, \"static \"))\n+            .visit(|node: &ast::ConstDef| visit_ascribed_node(node, \"const \"))\n+            .visit(|node: &ast::StaticDef| visit_ascribed_node(node, \"static \"))\n+            .visit(|node: &ast::NamedFieldDef| visit_ascribed_node(node, \"\"))\n             .accept(&node)?\n     }\n }\n@@ -320,6 +336,66 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn hover_shows_struct_field_info() {\n+        // Hovering over the field when instantiating\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            struct Foo {\n+                field_a: u32,\n+            }\n+\n+            fn main() {\n+                let foo = Foo {\n+                    field_a<|>: 0,\n+                };\n+            }\n+        \"#,\n+            &[\"field_a: u32\"],\n+        );\n+\n+        // Hovering over the field in the definition\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            struct Foo {\n+                field_a<|>: u32,\n+            }\n+\n+            fn main() {\n+                let foo = Foo {\n+                    field_a: 0,\n+                };\n+            }\n+        \"#,\n+            &[\"field_a: u32\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn hover_const_static() {\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            fn main() {\n+                const foo<|>: u32 = 0;\n+            }\n+        \"#,\n+            &[\"const foo: u32\"],\n+        );\n+\n+        check_hover_result(\n+            r#\"\n+            //- /main.rs\n+            fn main() {\n+                static foo<|>: u32 = 0;\n+            }\n+        \"#,\n+            &[\"static foo: u32\"],\n+        );\n+    }\n+\n     #[test]\n     fn hover_some() {\n         let (analysis, position) = single_file_with_position("}]}