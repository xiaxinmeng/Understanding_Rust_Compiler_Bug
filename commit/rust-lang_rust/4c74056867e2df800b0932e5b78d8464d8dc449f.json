{"sha": "4c74056867e2df800b0932e5b78d8464d8dc449f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNzQwNTY4NjdlMmRmODAwYjA5MzJlNWI3OGQ4NDY0ZDhkYzQ0OWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-06T20:39:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-06T20:39:10Z"}, "message": "Rollup merge of #61554 - spastorino:change_visit_api, r=oli-obk\n\nChange visit api\n\nr? @oli-obk\n\nIn the [first commit](https://github.com/rust-lang/rust/commit/37386d366a816bc2e63749c7b6045108a6167135) of this PR, I'm changing `visit_place` to be the function that traverses the `Place` and have only that responsibility. Then there are two other functions `visit_place_base` and `visit_projection` which are the ones in charge of visiting the base and the projection. Visitor implementors can implement any of those.\n\nIn the [second commit](https://github.com/rust-lang/rust/commit/e786f631b815d171051279e0d6cfe055c75bec2e) we can already see some things that confuses me, which I think this division will make more clear. The old code, first checked if the place was a base, did something with it and then called `super_place` [here](https://github.com/rust-lang/rust/commit/e786f631b815d171051279e0d6cfe055c75bec2e#diff-d583e4efe1a72516e274158e53223633L678). `super_place` checks again if it's a base [here](https://github.com/rust-lang/rust/blob/master/src/librustc/mir/visit.rs#L679-L684) and in case is a local, visits the local and stuff like that. That's not very obvious on the code, and if I'm not wrong it's not needed. In this PR or we have [this](https://github.com/rust-lang/rust/commit/e786f631b815d171051279e0d6cfe055c75bec2e#diff-d583e4efe1a72516e274158e53223633R673) as I did or we can just do `- => self.super_place_base(...)` and that will be obvious that I'm letting the default implementation process the base.", "tree": {"sha": "c7a75e1d5b3262acf2288dd6ab4212bd560ca764", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7a75e1d5b3262acf2288dd6ab4212bd560ca764"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c74056867e2df800b0932e5b78d8464d8dc449f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc+XnuCRBK7hj4Ov3rIwAAdHIIAGnTLrNTeELK/kp8B3wA1OyI\n0MkCed629sxaiEXBGAYtNpUwnfvDbsQnCkTkVj/yUBetmk/vtY+HHomKBPi88fhF\n10OgG3QksVqebwB/oWYB1A/yaLgJpwR1aoLJzUIBxZkIqxjPeD3Nmvi/3KAB/Tw4\nXzul2ejslmwcvtYnoVM9ZaurjPc9vzL5o1oDSV/zJ7iOMw271NeF60TdSuewH/oj\nDpFEDqKgPIuxLAb4a9n5d6oqGwzKmjT6cEYWGhVeJFmSi1hYgT4QbWbY+bzVbBUR\nH1Pt3vYg/3m03nEtXdEqJUWqHy31mYz5hiY1oE62kpsB8phcjeKvtVX610b9IUU=\n=J2Z0\n-----END PGP SIGNATURE-----\n", "payload": "tree c7a75e1d5b3262acf2288dd6ab4212bd560ca764\nparent 654854fdb56ca204bab6b399bf59a8d753e2c13c\nparent 67197e264af052c77b755031833a55dd586b974b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559853550 +0200\ncommitter GitHub <noreply@github.com> 1559853550 +0200\n\nRollup merge of #61554 - spastorino:change_visit_api, r=oli-obk\n\nChange visit api\n\nr? @oli-obk\n\nIn the [first commit](https://github.com/rust-lang/rust/commit/37386d366a816bc2e63749c7b6045108a6167135) of this PR, I'm changing `visit_place` to be the function that traverses the `Place` and have only that responsibility. Then there are two other functions `visit_place_base` and `visit_projection` which are the ones in charge of visiting the base and the projection. Visitor implementors can implement any of those.\n\nIn the [second commit](https://github.com/rust-lang/rust/commit/e786f631b815d171051279e0d6cfe055c75bec2e) we can already see some things that confuses me, which I think this division will make more clear. The old code, first checked if the place was a base, did something with it and then called `super_place` [here](https://github.com/rust-lang/rust/commit/e786f631b815d171051279e0d6cfe055c75bec2e#diff-d583e4efe1a72516e274158e53223633L678). `super_place` checks again if it's a base [here](https://github.com/rust-lang/rust/blob/master/src/librustc/mir/visit.rs#L679-L684) and in case is a local, visits the local and stuff like that. That's not very obvious on the code, and if I'm not wrong it's not needed. In this PR or we have [this](https://github.com/rust-lang/rust/commit/e786f631b815d171051279e0d6cfe055c75bec2e#diff-d583e4efe1a72516e274158e53223633R673) as I did or we can just do `- => self.super_place_base(...)` and that will be obvious that I'm letting the default implementation process the base.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c74056867e2df800b0932e5b78d8464d8dc449f", "html_url": "https://github.com/rust-lang/rust/commit/4c74056867e2df800b0932e5b78d8464d8dc449f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c74056867e2df800b0932e5b78d8464d8dc449f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "654854fdb56ca204bab6b399bf59a8d753e2c13c", "url": "https://api.github.com/repos/rust-lang/rust/commits/654854fdb56ca204bab6b399bf59a8d753e2c13c", "html_url": "https://github.com/rust-lang/rust/commit/654854fdb56ca204bab6b399bf59a8d753e2c13c"}, {"sha": "67197e264af052c77b755031833a55dd586b974b", "url": "https://api.github.com/repos/rust-lang/rust/commits/67197e264af052c77b755031833a55dd586b974b", "html_url": "https://github.com/rust-lang/rust/commit/67197e264af052c77b755031833a55dd586b974b"}], "stats": {"total": 83, "additions": 44, "deletions": 39}, "files": [{"sha": "2f19f591830f9d9233894f4468ece66a1222c7d1", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4c74056867e2df800b0932e5b78d8464d8dc449f/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c74056867e2df800b0932e5b78d8464d8dc449f/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=4c74056867e2df800b0932e5b78d8464d8dc449f", "patch": "@@ -151,17 +151,17 @@ macro_rules! make_mir_visitor {\n                 self.super_place(place, context, location);\n             }\n \n-            fn visit_projection(&mut self,\n-                                place: & $($mutability)? Projection<'tcx>,\n+            fn visit_place_base(&mut self,\n+                                place_base: & $($mutability)? PlaceBase<'tcx>,\n                                 context: PlaceContext,\n                                 location: Location) {\n-                self.super_projection(place, context, location);\n+                self.super_place_base(place_base, context, location);\n             }\n \n-            fn visit_projection_elem(&mut self,\n-                                     place: & $($mutability)? PlaceElem<'tcx>,\n-                                     location: Location) {\n-                self.super_projection_elem(place, location);\n+            fn visit_projection(&mut self,\n+                                place: & $($mutability)? Projection<'tcx>,\n+                                location: Location) {\n+                self.super_projection(place, location);\n             }\n \n             fn visit_constant(&mut self,\n@@ -676,36 +676,40 @@ macro_rules! make_mir_visitor {\n                             context: PlaceContext,\n                             location: Location) {\n                 match place {\n-                    Place::Base(PlaceBase::Local(local)) => {\n-                        self.visit_local(local, context, location);\n-                    }\n-                    Place::Base(PlaceBase::Static(box Static { kind: _, ty })) => {\n-                        self.visit_ty(& $($mutability)? *ty, TyContext::Location(location));\n+                    Place::Base(place_base) => {\n+                        self.visit_place_base(place_base, context, location);\n                     }\n                     Place::Projection(proj) => {\n-                        self.visit_projection(proj, context, location);\n+                        let context = if context.is_mutating_use() {\n+                            PlaceContext::MutatingUse(MutatingUseContext::Projection)\n+                        } else {\n+                            PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n+                        };\n+\n+                        self.visit_place(& $($mutability)? proj.base, context, location);\n+                        self.visit_projection(proj, location);\n                     }\n                 }\n             }\n \n-            fn super_projection(&mut self,\n-                                proj: & $($mutability)? Projection<'tcx>,\n+            fn super_place_base(&mut self,\n+                                place_base: & $($mutability)? PlaceBase<'tcx>,\n                                 context: PlaceContext,\n                                 location: Location) {\n-                let Projection { base, elem } = proj;\n-                let context = if context.is_mutating_use() {\n-                    PlaceContext::MutatingUse(MutatingUseContext::Projection)\n-                } else {\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n-                };\n-                self.visit_place(base, context, location);\n-                self.visit_projection_elem(elem, location);\n+                match place_base {\n+                    PlaceBase::Local(local) => {\n+                        self.visit_local(local, context, location);\n+                    }\n+                    PlaceBase::Static(box Static { kind: _, ty }) => {\n+                        self.visit_ty(& $($mutability)? *ty, TyContext::Location(location));\n+                    }\n+                }\n             }\n \n-            fn super_projection_elem(&mut self,\n-                                     proj: & $($mutability)? PlaceElem<'tcx>,\n-                                     location: Location) {\n-                match proj {\n+            fn super_projection(&mut self,\n+                                proj: & $($mutability)? Projection<'tcx>,\n+                                location: Location) {\n+                match & $($mutability)? proj.elem {\n                     ProjectionElem::Deref => {\n                     }\n                     ProjectionElem::Subslice { from: _, to: _ } => {"}, {"sha": "91b4af9655a43be0dbc34654844ea37209d2960d", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4c74056867e2df800b0932e5b78d8464d8dc449f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c74056867e2df800b0932e5b78d8464d8dc449f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=4c74056867e2df800b0932e5b78d8464d8dc449f", "patch": "@@ -185,7 +185,7 @@ use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind, Instance};\n use rustc::ty::print::obsolete::DefPathBasedNames;\n use rustc::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc::session::config::EntryFnType;\n-use rustc::mir::{self, Location, Place, PlaceBase, Promoted, Static, StaticKind};\n+use rustc::mir::{self, Location, PlaceBase, Promoted, Static, StaticKind};\n use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::mono::{MonoItem, InstantiationMode};\n use rustc::mir::interpret::{Scalar, GlobalId, GlobalAlloc, ErrorHandled};\n@@ -655,14 +655,12 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         self.super_terminator_kind(kind, location);\n     }\n \n-    fn visit_place(&mut self,\n-                    place: &mir::Place<'tcx>,\n-                    context: mir::visit::PlaceContext,\n-                    location: Location) {\n-        match place {\n-            Place::Base(\n-                PlaceBase::Static(box Static{ kind:StaticKind::Static(def_id), .. })\n-            ) => {\n+    fn visit_place_base(&mut self,\n+                        place_base: &mir::PlaceBase<'tcx>,\n+                        _context: mir::visit::PlaceContext,\n+                        location: Location) {\n+        match place_base {\n+            PlaceBase::Static(box Static { kind: StaticKind::Static(def_id), .. }) => {\n                 debug!(\"visiting static {:?} @ {:?}\", def_id, location);\n \n                 let tcx = self.tcx;\n@@ -671,10 +669,13 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     self.output.push(MonoItem::Static(*def_id));\n                 }\n             }\n-            _ => {}\n+            PlaceBase::Static(box Static { kind: StaticKind::Promoted(_), .. }) => {\n+                // FIXME: should we handle promoteds here instead of eagerly in collect_neighbours?\n+            }\n+            PlaceBase::Local(_) => {\n+                // Locals have no relevance for collector\n+            }\n         }\n-\n-        self.super_place(place, context, location);\n     }\n }\n "}]}