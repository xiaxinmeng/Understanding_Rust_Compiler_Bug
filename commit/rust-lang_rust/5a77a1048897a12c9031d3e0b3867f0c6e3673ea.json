{"sha": "5a77a1048897a12c9031d3e0b3867f0c6e3673ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNzdhMTA0ODg5N2ExMmM5MDMxZDNlMGIzODY3ZjBjNmUzNjczZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-16T01:30:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-16T01:30:45Z"}, "message": "auto merge of #5400 : thestinger/rust/misc, r=brson", "tree": {"sha": "330cc2117f716c6d815ea0f57498b9ae5eef0965", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/330cc2117f716c6d815ea0f57498b9ae5eef0965"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a77a1048897a12c9031d3e0b3867f0c6e3673ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a77a1048897a12c9031d3e0b3867f0c6e3673ea", "html_url": "https://github.com/rust-lang/rust/commit/5a77a1048897a12c9031d3e0b3867f0c6e3673ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a77a1048897a12c9031d3e0b3867f0c6e3673ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ad9e5c0c29c0ef4ea62f31679de3f072abb454f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad9e5c0c29c0ef4ea62f31679de3f072abb454f", "html_url": "https://github.com/rust-lang/rust/commit/4ad9e5c0c29c0ef4ea62f31679de3f072abb454f"}, {"sha": "2b6614f2e610e1bfdd45c236dd071a72673980c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b6614f2e610e1bfdd45c236dd071a72673980c8", "html_url": "https://github.com/rust-lang/rust/commit/2b6614f2e610e1bfdd45c236dd071a72673980c8"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "15131093acb062971a47d39b4cd665463a33942b", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5a77a1048897a12c9031d3e0b3867f0c6e3673ea/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a77a1048897a12c9031d3e0b3867f0c6e3673ea/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=5a77a1048897a12c9031d3e0b3867f0c6e3673ea", "patch": "@@ -22,40 +22,61 @@ pub struct Deque<T> {\n }\n \n impl<T> Container for Deque<T> {\n+    /// Return the number of elements in the deque\n     pure fn len(&self) -> uint { self.nelts }\n+\n+    /// Return true if the deque contains no elements\n     pure fn is_empty(&self) -> bool { self.len() == 0 }\n }\n \n impl<T> Mutable for Deque<T> {\n+    /// Clear the deque, removing all values.\n     fn clear(&mut self) {\n-        for vec::each_mut(self.elts) |x| { *x = None }\n+        for self.elts.each_mut |x| { *x = None }\n         self.nelts = 0;\n         self.lo = 0;\n         self.hi = 0;\n     }\n }\n \n pub impl<T> Deque<T> {\n+    /// Create an empty Deque\n     static pure fn new() -> Deque<T> {\n         Deque{nelts: 0, lo: 0, hi: 0,\n               elts: vec::from_fn(initial_capacity, |_| None)}\n     }\n \n+    /// Return a reference to the first element in the deque\n+    ///\n+    /// Fails if the deque is empty\n     fn peek_front(&self) -> &self/T { get(self.elts, self.lo) }\n+\n+    /// Return a reference to the last element in the deque\n+    ///\n+    /// Fails if the deque is empty\n     fn peek_back(&self) -> &self/T { get(self.elts, self.hi - 1u) }\n \n+    /// Retrieve an element in the deque by index\n+    ///\n+    /// Fails if there is no element with the given index\n     fn get(&self, i: int) -> &self/T {\n         let idx = (self.lo + (i as uint)) % self.elts.len();\n         get(self.elts, idx)\n     }\n \n+    /// Remove and return the first element in the deque\n+    ///\n+    /// Fails if the deque is empty\n     fn pop_front(&mut self) -> T {\n         let mut result = self.elts[self.lo].swap_unwrap();\n         self.lo = (self.lo + 1u) % self.elts.len();\n         self.nelts -= 1u;\n         result\n     }\n \n+    /// Remove and return the last element in the deque\n+    ///\n+    /// Fails if the deque is empty\n     fn pop_back(&mut self) -> T {\n         if self.hi == 0u {\n             self.hi = self.elts.len() - 1u;\n@@ -66,6 +87,7 @@ pub impl<T> Deque<T> {\n         result\n     }\n \n+    /// Prepend an element to the deque\n     fn add_front(&mut self, t: T) {\n         let oldlo = self.lo;\n         if self.lo == 0u {\n@@ -80,6 +102,7 @@ pub impl<T> Deque<T> {\n         self.nelts += 1u;\n     }\n \n+    /// Append an element to the deque\n     fn add_back(&mut self, t: T) {\n         if self.lo == self.hi && self.nelts != 0u {\n             self.elts = grow(self.nelts, self.lo, self.elts);"}, {"sha": "8e204014975b50f3fb26fc32343e0bdc761d5a1b", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5a77a1048897a12c9031d3e0b3867f0c6e3673ea/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a77a1048897a12c9031d3e0b3867f0c6e3673ea/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=5a77a1048897a12c9031d3e0b3867f0c6e3673ea", "patch": "@@ -636,14 +636,13 @@ fn remove<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>,\n     fn heir_swap<K: TotalOrd, V>(node: &mut ~TreeNode<K, V>,\n                             child: &mut Option<~TreeNode<K, V>>) {\n         // *could* be done without recursion, but it won't borrow check\n-        do child.mutate |mut child| {\n-            if child.right.is_some() {\n-                heir_swap(node, &mut child.right);\n+        for child.each_mut |x| {\n+            if x.right.is_some() {\n+                heir_swap(node, &mut x.right);\n             } else {\n-                node.key <-> child.key;\n-                node.value <-> child.value;\n+                node.key <-> x.key;\n+                node.value <-> x.value;\n             }\n-            child\n         }\n     }\n \n@@ -689,7 +688,7 @@ fn remove<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>,\n                 save.level -= 1;\n \n                 if right_level > save.level {\n-                    do save.right.mutate |mut x| { x.level = save.level; x }\n+                    for save.right.each_mut |x| { x.level = save.level }\n                 }\n \n                 skew(save);\n@@ -988,8 +987,6 @@ mod test_treemap {\n         let m = m;\n         let mut a = m.iter();\n \n-        // FIXME: #4492 (ICE): iter.get() == Some((&x1, &y1))\n-\n         fail_unless!(map_next(&mut a).unwrap() == (&x1, &y1));\n         fail_unless!(map_next(&mut a).unwrap() == (&x2, &y2));\n         fail_unless!(map_next(&mut a).unwrap() == (&x3, &y3));"}]}