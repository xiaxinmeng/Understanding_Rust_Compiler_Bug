{"sha": "b0d1f5030160ebec37717a6742912d3156b47d0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZDFmNTAzMDE2MGViZWMzNzcxN2E2NzQyOTEyZDMxNTZiNDdkMGU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-17T13:22:37Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-17T13:22:37Z"}, "message": "Sync from rust b17d9c1332693fc386f5374f0d63aae0ce5abab5", "tree": {"sha": "a6bd1d3b349ff781628d58179e47dd11e437d8a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6bd1d3b349ff781628d58179e47dd11e437d8a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0d1f5030160ebec37717a6742912d3156b47d0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d1f5030160ebec37717a6742912d3156b47d0e", "html_url": "https://github.com/rust-lang/rust/commit/b0d1f5030160ebec37717a6742912d3156b47d0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0d1f5030160ebec37717a6742912d3156b47d0e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "432285fbc69ab0396f8226beb9fe2ef1496f73da", "url": "https://api.github.com/repos/rust-lang/rust/commits/432285fbc69ab0396f8226beb9fe2ef1496f73da", "html_url": "https://github.com/rust-lang/rust/commit/432285fbc69ab0396f8226beb9fe2ef1496f73da"}, {"sha": "9be7ca00f1ca2425e97da90d65575ac48aa7803c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be7ca00f1ca2425e97da90d65575ac48aa7803c", "html_url": "https://github.com/rust-lang/rust/commit/9be7ca00f1ca2425e97da90d65575ac48aa7803c"}], "stats": {"total": 77, "additions": 41, "deletions": 36}, "files": [{"sha": "100c3b43160bbbb3384390e4741f537db05c0e61", "filename": "src/compiler_builtins.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0d1f5030160ebec37717a6742912d3156b47d0e/src%2Fcompiler_builtins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d1f5030160ebec37717a6742912d3156b47d0e/src%2Fcompiler_builtins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler_builtins.rs?ref=b0d1f5030160ebec37717a6742912d3156b47d0e", "patch": "@@ -7,7 +7,7 @@ macro builtin_functions($register:ident; $(fn $name:ident($($arg_name:ident: $ar\n \n     #[cfg(feature = \"jit\")]\n     pub(crate) fn $register(builder: &mut cranelift_jit::JITBuilder) {\n-        for &(name, val) in &[$((stringify!($name), $name as *const u8)),*] {\n+        for (name, val) in [$((stringify!($name), $name as *const u8)),*] {\n             builder.symbol(name, val);\n         }\n     }"}, {"sha": "aed25a480ebd50b25b64cacd7c971ea6ac49b4a8", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b0d1f5030160ebec37717a6742912d3156b47d0e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d1f5030160ebec37717a6742912d3156b47d0e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b0d1f5030160ebec37717a6742912d3156b47d0e", "patch": "@@ -15,6 +15,7 @@ extern crate rustc_hir;\n extern crate rustc_incremental;\n extern crate rustc_index;\n extern crate rustc_interface;\n+extern crate rustc_metadata;\n extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;"}, {"sha": "db24bf65eb5a2e015620822b67b81592feeff024", "filename": "src/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0d1f5030160ebec37717a6742912d3156b47d0e/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d1f5030160ebec37717a6742912d3156b47d0e/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=b0d1f5030160ebec37717a6742912d3156b47d0e", "patch": "@@ -10,7 +10,7 @@ pub(crate) fn write_metadata<O: WriteMetadata>(tcx: TyCtxt<'_>, object: &mut O)\n     use std::io::Write;\n \n     let metadata = tcx.encode_metadata();\n-    let mut compressed = tcx.metadata_encoding_version();\n+    let mut compressed = rustc_metadata::METADATA_HEADER.to_vec();\n     FrameEncoder::new(&mut compressed).write_all(&metadata.raw_data).unwrap();\n \n     object.add_rustc_section("}, {"sha": "4d1ee47b41e170c910d0f91d80d34c6c12717ad4", "filename": "src/vtable.rs", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b0d1f5030160ebec37717a6742912d3156b47d0e/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d1f5030160ebec37717a6742912d3156b47d0e/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=b0d1f5030160ebec37717a6742912d3156b47d0e", "patch": "@@ -4,10 +4,7 @@\n // FIXME dedup this logic between miri, cg_llvm and cg_clif\n \n use crate::prelude::*;\n-\n-const DROP_FN_INDEX: usize = 0;\n-const SIZE_INDEX: usize = 1;\n-const ALIGN_INDEX: usize = 2;\n+use ty::VtblEntry;\n \n fn vtable_memflags() -> MemFlags {\n     let mut flags = MemFlags::trusted(); // A vtable access is always aligned and will never trap.\n@@ -21,7 +18,7 @@ pub(crate) fn drop_fn_of_obj(fx: &mut FunctionCx<'_, '_, '_>, vtable: Value) ->\n         pointer_ty(fx.tcx),\n         vtable_memflags(),\n         vtable,\n-        (DROP_FN_INDEX * usize_size) as i32,\n+        (ty::COMMON_VTABLE_ENTRIES_DROPINPLACE * usize_size) as i32,\n     )\n }\n \n@@ -31,7 +28,7 @@ pub(crate) fn size_of_obj(fx: &mut FunctionCx<'_, '_, '_>, vtable: Value) -> Val\n         pointer_ty(fx.tcx),\n         vtable_memflags(),\n         vtable,\n-        (SIZE_INDEX * usize_size) as i32,\n+        (ty::COMMON_VTABLE_ENTRIES_SIZE * usize_size) as i32,\n     )\n }\n \n@@ -41,7 +38,7 @@ pub(crate) fn min_align_of_obj(fx: &mut FunctionCx<'_, '_, '_>, vtable: Value) -\n         pointer_ty(fx.tcx),\n         vtable_memflags(),\n         vtable,\n-        (ALIGN_INDEX * usize_size) as i32,\n+        (ty::COMMON_VTABLE_ENTRIES_SIZE * usize_size) as i32,\n     )\n }\n \n@@ -62,7 +59,7 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n         pointer_ty(fx.tcx),\n         vtable_memflags(),\n         vtable,\n-        ((idx + 3) * usize_size as usize) as i32,\n+        (idx * usize_size as usize) as i32,\n     );\n     (ptr, func_ref)\n }\n@@ -98,42 +95,49 @@ fn build_vtable<'tcx>(\n         Instance::resolve_drop_in_place(tcx, layout.ty).polymorphize(fx.tcx),\n     );\n \n-    let mut components: Vec<_> = vec![Some(drop_in_place_fn), None, None];\n-\n-    let methods_root;\n-    let methods = if let Some(trait_ref) = trait_ref {\n-        methods_root = tcx.vtable_methods(trait_ref.with_self_ty(tcx, layout.ty));\n-        methods_root.iter()\n+    let vtable_entries = if let Some(trait_ref) = trait_ref {\n+        tcx.vtable_entries(trait_ref.with_self_ty(tcx, layout.ty))\n     } else {\n-        (&[]).iter()\n+        ty::COMMON_VTABLE_ENTRIES\n     };\n-    let methods = methods.cloned().map(|opt_mth| {\n-        opt_mth.map(|(def_id, substs)| {\n-            import_function(\n-                tcx,\n-                fx.module,\n-                Instance::resolve_for_vtable(tcx, ParamEnv::reveal_all(), def_id, substs)\n-                    .unwrap()\n-                    .polymorphize(fx.tcx),\n-            )\n-        })\n-    });\n-    components.extend(methods);\n \n     let mut data_ctx = DataContext::new();\n     let mut data = ::std::iter::repeat(0u8)\n-        .take(components.len() * usize_size)\n+        .take(vtable_entries.len() * usize_size)\n         .collect::<Vec<u8>>()\n         .into_boxed_slice();\n \n-    write_usize(fx.tcx, &mut data, SIZE_INDEX, layout.size.bytes());\n-    write_usize(fx.tcx, &mut data, ALIGN_INDEX, layout.align.abi.bytes());\n+    for (idx, entry) in vtable_entries.iter().enumerate() {\n+        match entry {\n+            VtblEntry::MetadataSize => {\n+                write_usize(fx.tcx, &mut data, idx, layout.size.bytes());\n+            }\n+            VtblEntry::MetadataAlign => {\n+                write_usize(fx.tcx, &mut data, idx, layout.align.abi.bytes());\n+            }\n+            VtblEntry::MetadataDropInPlace | VtblEntry::Vacant | VtblEntry::Method(_, _) => {}\n+        }\n+    }\n     data_ctx.define(data);\n \n-    for (i, component) in components.into_iter().enumerate() {\n-        if let Some(func_id) = component {\n-            let func_ref = fx.module.declare_func_in_data(func_id, &mut data_ctx);\n-            data_ctx.write_function_addr((i * usize_size) as u32, func_ref);\n+    for (idx, entry) in vtable_entries.iter().enumerate() {\n+        match entry {\n+            VtblEntry::MetadataDropInPlace => {\n+                let func_ref = fx.module.declare_func_in_data(drop_in_place_fn, &mut data_ctx);\n+                data_ctx.write_function_addr((idx * usize_size) as u32, func_ref);\n+            }\n+            VtblEntry::Method(def_id, substs) => {\n+                let func_id = import_function(\n+                    tcx,\n+                    fx.module,\n+                    Instance::resolve_for_vtable(tcx, ParamEnv::reveal_all(), *def_id, substs)\n+                        .unwrap()\n+                        .polymorphize(fx.tcx),\n+                );\n+                let func_ref = fx.module.declare_func_in_data(func_id, &mut data_ctx);\n+                data_ctx.write_function_addr((idx * usize_size) as u32, func_ref);\n+            }\n+            VtblEntry::MetadataSize | VtblEntry::MetadataAlign | VtblEntry::Vacant => {}\n         }\n     }\n "}]}