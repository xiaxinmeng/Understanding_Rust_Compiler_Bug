{"sha": "979b5b32bce12c1efb88d4b58874606eef0a4c6a", "node_id": "C_kwDOAAsO6NoAKDk3OWI1YjMyYmNlMTJjMWVmYjg4ZDRiNTg4NzQ2MDZlZWYwYTRjNmE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-21T16:56:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-21T16:56:37Z"}, "message": "Merge #11455\n\n11455: Handle proc-macro functions as the proc-macro they resolve to r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11212\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "c5f3d1aac6833a5cdd1b142d1063765420617181", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5f3d1aac6833a5cdd1b142d1063765420617181"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/979b5b32bce12c1efb88d4b58874606eef0a4c6a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiE8RFCRBK7hj4Ov3rIwAAjiAIAIkPFbnbFS+IGvXQ1+M6n0x5\n2Rb39YqJnogu/YzjRkMXxiGmPTlFNQeSYjftGASzrxr1RPwYiYWwt/jGPSAgsR9q\nHRSD7qneUD+F+dC1iPWu+Cej4ErM+JjIPkV47flZlq2nrFlBOsbaJdjvhVOtaErH\ngfHzy97Vswua3kP1qCoPj179IWhmurmIMPrdWwigqQK/cb/P4oJ70EWbqlWg8Cfk\nYZyD1tI5b43b27NLyd46hZucYmFf6dMHS7NuK5XmTbgLcVW/A12cRQAe1+GmBjCs\nwZ4fclbmzI1LCZRHjclKvFiFg73ap7jJmiqmA9Juxff2OrGX/vX80ZCf/JarXQ4=\n=tExU\n-----END PGP SIGNATURE-----\n", "payload": "tree c5f3d1aac6833a5cdd1b142d1063765420617181\nparent 24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f\nparent 0d3cd90d0883625e894d7635858fb15c16d826d2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645462597 +0000\ncommitter GitHub <noreply@github.com> 1645462597 +0000\n\nMerge #11455\n\n11455: Handle proc-macro functions as the proc-macro they resolve to r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11212\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/979b5b32bce12c1efb88d4b58874606eef0a4c6a", "html_url": "https://github.com/rust-lang/rust/commit/979b5b32bce12c1efb88d4b58874606eef0a4c6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/979b5b32bce12c1efb88d4b58874606eef0a4c6a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f", "html_url": "https://github.com/rust-lang/rust/commit/24255e5b3dbabe7eaec1a42668d50d96d6b1aa0f"}, {"sha": "0d3cd90d0883625e894d7635858fb15c16d826d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d3cd90d0883625e894d7635858fb15c16d826d2", "html_url": "https://github.com/rust-lang/rust/commit/0d3cd90d0883625e894d7635858fb15c16d826d2"}], "stats": {"total": 98, "additions": 89, "deletions": 9}, "files": [{"sha": "f047971a11680e3bd14bc4397b751e813cc8cdd1", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/979b5b32bce12c1efb88d4b58874606eef0a4c6a/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979b5b32bce12c1efb88d4b58874606eef0a4c6a/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=979b5b32bce12c1efb88d4b58874606eef0a4c6a", "patch": "@@ -1376,6 +1376,23 @@ impl Function {\n         db.function_data(self.id).has_body()\n     }\n \n+    pub fn as_proc_macro(self, db: &dyn HirDatabase) -> Option<MacroDef> {\n+        let function_data = db.function_data(self.id);\n+        let attrs = &function_data.attrs;\n+        if !(attrs.is_proc_macro()\n+            || attrs.is_proc_macro_attribute()\n+            || attrs.is_proc_macro_derive())\n+        {\n+            return None;\n+        }\n+        let loc = self.id.lookup(db.upcast());\n+        let krate = loc.krate(db);\n+        let def_map = db.crate_def_map(krate.into());\n+        let name = &function_data.name;\n+        let mut exported_proc_macros = def_map.exported_proc_macros();\n+        exported_proc_macros.find(|(_, mac_name)| mac_name == name).map(|(id, _)| MacroDef { id })\n+    }\n+\n     /// A textual representation of the HIR of this function for debugging purposes.\n     pub fn debug_hir(self, db: &dyn HirDatabase) -> String {\n         let body = db.body(self.id.into());"}, {"sha": "3ff2d7b915ed291af77f7815475c422a6fe22546", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/979b5b32bce12c1efb88d4b58874606eef0a4c6a/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979b5b32bce12c1efb88d4b58874606eef0a4c6a/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=979b5b32bce12c1efb88d4b58874606eef0a4c6a", "patch": "@@ -236,7 +236,9 @@ impl Attrs {\n     pub fn by_key(&self, key: &'static str) -> AttrQuery<'_> {\n         AttrQuery { attrs: self, key }\n     }\n+}\n \n+impl Attrs {\n     pub fn cfg(&self) -> Option<CfgExpr> {\n         let mut cfgs = self.by_key(\"cfg\").tt_values().map(CfgExpr::parse).collect::<Vec<_>>();\n         match cfgs.len() {\n@@ -298,6 +300,18 @@ impl Attrs {\n                 matches!(&*tt.token_trees, [tt::TokenTree::Leaf(tt::Leaf::Ident(ident))] if ident.text == \"hidden\")\n         })\n     }\n+\n+    pub fn is_proc_macro(&self) -> bool {\n+        self.by_key(\"proc_macro\").exists()\n+    }\n+\n+    pub fn is_proc_macro_attribute(&self) -> bool {\n+        self.by_key(\"proc_macro_attribute\").exists()\n+    }\n+\n+    pub fn is_proc_macro_derive(&self) -> bool {\n+        self.by_key(\"proc_macro_derive\").exists()\n+    }\n }\n \n impl AttrsWithOwner {"}, {"sha": "920df7cec205697492d039c6ecc952f6400b6051", "filename": "crates/hir_def/src/nameres/proc_macro.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/979b5b32bce12c1efb88d4b58874606eef0a4c6a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979b5b32bce12c1efb88d4b58874606eef0a4c6a/crates%2Fhir_def%2Fsrc%2Fnameres%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fproc_macro.rs?ref=979b5b32bce12c1efb88d4b58874606eef0a4c6a", "patch": "@@ -31,12 +31,12 @@ impl ProcMacroKind {\n impl Attrs {\n     #[rustfmt::skip]\n     pub(super) fn parse_proc_macro_decl(&self, func_name: &Name) -> Option<ProcMacroDef> {\n-        if self.by_key(\"proc_macro\").exists() {\n+        if self.is_proc_macro() {\n             Some(ProcMacroDef { name: func_name.clone(), kind: ProcMacroKind::FnLike })\n-        } else if self.by_key(\"proc_macro_attribute\").exists() {\n+        } else if self.is_proc_macro_attribute() {\n             Some(ProcMacroDef { name: func_name.clone(), kind: ProcMacroKind::Attr })\n         } else if self.by_key(\"proc_macro_derive\").exists() {\n-            let derive = self.by_key(\"proc_macro_derive\").tt_values().next().unwrap();\n+            let derive = self.by_key(\"proc_macro_derive\").tt_values().next()?;\n \n             match &*derive.token_trees {\n                 // `#[proc_macro_derive(Trait)]`"}, {"sha": "91c311fe94e65c25bd3c0de3de1951b15f1dfd09", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/979b5b32bce12c1efb88d4b58874606eef0a4c6a/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979b5b32bce12c1efb88d4b58874606eef0a4c6a/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=979b5b32bce12c1efb88d4b58874606eef0a4c6a", "patch": "@@ -57,8 +57,6 @@ pub(crate) fn find_all_refs(\n     let syntax = sema.parse(position.file_id).syntax().clone();\n     let make_searcher = |literal_search: bool| {\n         move |def: Definition| {\n-            let mut usages =\n-                def.usages(sema).set_scope(search_scope.clone()).include_self_refs().all();\n             let declaration = match def {\n                 Definition::Module(module) => {\n                     Some(NavigationTarget::from_module_to_decl(sema.db, module))\n@@ -72,6 +70,8 @@ pub(crate) fn find_all_refs(\n                     nav,\n                 }\n             });\n+            let mut usages =\n+                def.usages(sema).set_scope(search_scope.clone()).include_self_refs().all();\n             if literal_search {\n                 retain_adt_literal_usages(&mut usages, def, sema);\n             }\n@@ -1535,4 +1535,47 @@ trait Trait {\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn attr() {\n+        check(\n+            r#\"\n+//- proc_macros: identity\n+\n+#[proc_macros::$0identity]\n+fn func() {}\n+\"#,\n+            expect![[r#\"\n+                identity Attribute FileId(1) 1..107 32..40\n+\n+                FileId(0) 16..24\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+#[proc_macro_attribute]\n+fn func$0() {}\n+\"#,\n+            expect![[r#\"\n+                func Attribute FileId(0) 0..36 27..31\n+\n+                (no references)\n+            \"#]],\n+        );\n+    }\n+\n+    // FIXME\n+    #[test]\n+    fn derive() {\n+        check(\n+            r#\"\n+//- proc_macros: derive_identity\n+//- minicore: derive\n+\n+#[derive(proc_macros::DeriveIdentity$0)]\n+struct Foo;\n+\"#,\n+            expect![[r#\"\"#]],\n+        )\n+    }\n }"}, {"sha": "5a4cfe6e941fcda904ca1fc2ec3ada6192004dd7", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/979b5b32bce12c1efb88d4b58874606eef0a4c6a/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979b5b32bce12c1efb88d4b58874606eef0a4c6a/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=979b5b32bce12c1efb88d4b58874606eef0a4c6a", "patch": "@@ -225,7 +225,12 @@ impl NameClass {\n                     Definition::Macro(sema.to_def(&ast::Macro::MacroDef(it))?)\n                 }\n                 ast::Item::Const(it) => Definition::Const(sema.to_def(&it)?),\n-                ast::Item::Fn(it) => Definition::Function(sema.to_def(&it)?),\n+                ast::Item::Fn(it) => {\n+                    let def = sema.to_def(&it)?;\n+                    def.as_proc_macro(sema.db)\n+                        .map(Definition::Macro)\n+                        .unwrap_or(Definition::Function(def))\n+                }\n                 ast::Item::Module(it) => Definition::Module(sema.to_def(&it)?),\n                 ast::Item::Static(it) => Definition::Static(sema.to_def(&it)?),\n                 ast::Item::Trait(it) => Definition::Trait(sema.to_def(&it)?),"}, {"sha": "c355016c5dfd054dac27f949f37eeb4a6882bab6", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/979b5b32bce12c1efb88d4b58874606eef0a4c6a/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979b5b32bce12c1efb88d4b58874606eef0a4c6a/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=979b5b32bce12c1efb88d4b58874606eef0a4c6a", "patch": "@@ -82,6 +82,9 @@ pub fn pick_best_token(\n ) -> Option<SyntaxToken> {\n     tokens.max_by_key(move |t| f(t.kind()))\n }\n+pub fn pick_token<T: AstToken>(mut tokens: TokenAtOffset<SyntaxToken>) -> Option<T> {\n+    tokens.find_map(T::cast)\n+}\n \n /// Converts the mod path struct into its ast representation.\n pub fn mod_path_to_ast(path: &hir::ModPath) -> ast::Path {"}, {"sha": "b45fbe698c99daa717eb77d59c13e8cc8ca06fae", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/979b5b32bce12c1efb88d4b58874606eef0a4c6a/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/979b5b32bce12c1efb88d4b58874606eef0a4c6a/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=979b5b32bce12c1efb88d4b58874606eef0a4c6a", "patch": "@@ -275,9 +275,7 @@ pub(crate) fn handle_on_type_formatting(\n     let char_typed = params.ch.chars().next().unwrap_or('\\0');\n \n     let text = snap.analysis.file_text(position.file_id)?;\n-    if !text[usize::from(position.offset)..].starts_with(char_typed) {\n-        // Add `always!` here once VS Code bug is fixed:\n-        //   https://github.com/rust-analyzer/rust-analyzer/issues/10002\n+    if stdx::never!(!text[usize::from(position.offset)..].starts_with(char_typed)) {\n         return Ok(None);\n     }\n "}]}