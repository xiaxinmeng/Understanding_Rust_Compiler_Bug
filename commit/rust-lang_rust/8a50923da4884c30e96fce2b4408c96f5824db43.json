{"sha": "8a50923da4884c30e96fce2b4408c96f5824db43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNTA5MjNkYTQ4ODRjMzBlOTZmY2UyYjQ0MDhjOTZmNTgyNGRiNDM=", "commit": {"author": {"name": "Horaci Macias", "email": "hmacias@avaya.com", "date": "2021-04-05T11:27:39Z"}, "committer": {"name": "Horaci Macias", "email": "hmacias@avaya.com", "date": "2021-04-06T09:09:52Z"}, "message": "consider mutability on useless_vec suggestions\nhttps://github.com/rust-lang/rust-clippy/issues/7035", "tree": {"sha": "870cc62ad8d491dd9e46bf0f3d8b098ceb377f19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/870cc62ad8d491dd9e46bf0f3d8b098ceb377f19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a50923da4884c30e96fce2b4408c96f5824db43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a50923da4884c30e96fce2b4408c96f5824db43", "html_url": "https://github.com/rust-lang/rust/commit/8a50923da4884c30e96fce2b4408c96f5824db43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a50923da4884c30e96fce2b4408c96f5824db43/comments", "author": {"login": "hmacias-avaya", "id": 135130171, "node_id": "U_kgDOCA3sOw", "avatar_url": "https://avatars.githubusercontent.com/u/135130171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hmacias-avaya", "html_url": "https://github.com/hmacias-avaya", "followers_url": "https://api.github.com/users/hmacias-avaya/followers", "following_url": "https://api.github.com/users/hmacias-avaya/following{/other_user}", "gists_url": "https://api.github.com/users/hmacias-avaya/gists{/gist_id}", "starred_url": "https://api.github.com/users/hmacias-avaya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hmacias-avaya/subscriptions", "organizations_url": "https://api.github.com/users/hmacias-avaya/orgs", "repos_url": "https://api.github.com/users/hmacias-avaya/repos", "events_url": "https://api.github.com/users/hmacias-avaya/events{/privacy}", "received_events_url": "https://api.github.com/users/hmacias-avaya/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hmacias-avaya", "id": 135130171, "node_id": "U_kgDOCA3sOw", "avatar_url": "https://avatars.githubusercontent.com/u/135130171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hmacias-avaya", "html_url": "https://github.com/hmacias-avaya", "followers_url": "https://api.github.com/users/hmacias-avaya/followers", "following_url": "https://api.github.com/users/hmacias-avaya/following{/other_user}", "gists_url": "https://api.github.com/users/hmacias-avaya/gists{/gist_id}", "starred_url": "https://api.github.com/users/hmacias-avaya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hmacias-avaya/subscriptions", "organizations_url": "https://api.github.com/users/hmacias-avaya/orgs", "repos_url": "https://api.github.com/users/hmacias-avaya/repos", "events_url": "https://api.github.com/users/hmacias-avaya/events{/privacy}", "received_events_url": "https://api.github.com/users/hmacias-avaya/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86fb0e82660aafb033414fde46a768fd92f29556", "url": "https://api.github.com/repos/rust-lang/rust/commits/86fb0e82660aafb033414fde46a768fd92f29556", "html_url": "https://github.com/rust-lang/rust/commit/86fb0e82660aafb033414fde46a768fd92f29556"}], "stats": {"total": 130, "additions": 111, "deletions": 19}, "files": [{"sha": "bc2eb88114e0a42fffbf25178a82e5705a7b098a", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8a50923da4884c30e96fce2b4408c96f5824db43/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a50923da4884c30e96fce2b4408c96f5824db43/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=8a50923da4884c30e96fce2b4408c96f5824db43", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_copy;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{BorrowKind, Expr, ExprKind};\n+use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -49,10 +49,10 @@ impl<'tcx> LateLintPass<'tcx> for UselessVec {\n         if_chain! {\n             if let ty::Ref(_, ty, _) = cx.typeck_results().expr_ty_adjusted(expr).kind();\n             if let ty::Slice(..) = ty.kind();\n-            if let ExprKind::AddrOf(BorrowKind::Ref, _, ref addressee) = expr.kind;\n+            if let ExprKind::AddrOf(BorrowKind::Ref, mutability, ref addressee) = expr.kind;\n             if let Some(vec_args) = higher::vec_macro(cx, addressee);\n             then {\n-                self.check_vec_macro(cx, &vec_args, expr.span);\n+                self.check_vec_macro(cx, &vec_args, mutability, expr.span);\n             }\n         }\n \n@@ -70,14 +70,20 @@ impl<'tcx> LateLintPass<'tcx> for UselessVec {\n                     .ctxt()\n                     .outer_expn_data()\n                     .call_site;\n-                self.check_vec_macro(cx, &vec_args, span);\n+                self.check_vec_macro(cx, &vec_args, Mutability::Not, span);\n             }\n         }\n     }\n }\n \n impl UselessVec {\n-    fn check_vec_macro<'tcx>(self, cx: &LateContext<'tcx>, vec_args: &higher::VecArgs<'tcx>, span: Span) {\n+    fn check_vec_macro<'tcx>(\n+        self,\n+        cx: &LateContext<'tcx>,\n+        vec_args: &higher::VecArgs<'tcx>,\n+        mutability: Mutability,\n+        span: Span,\n+    ) {\n         let mut applicability = Applicability::MachineApplicable;\n         let snippet = match *vec_args {\n             higher::VecArgs::Repeat(elem, len) => {\n@@ -87,11 +93,22 @@ impl UselessVec {\n                         return;\n                     }\n \n-                    format!(\n-                        \"&[{}; {}]\",\n-                        snippet_with_applicability(cx, elem.span, \"elem\", &mut applicability),\n-                        snippet_with_applicability(cx, len.span, \"len\", &mut applicability)\n-                    )\n+                    match mutability {\n+                        Mutability::Mut => {\n+                            format!(\n+                                \"&mut [{}; {}]\",\n+                                snippet_with_applicability(cx, elem.span, \"elem\", &mut applicability),\n+                                snippet_with_applicability(cx, len.span, \"len\", &mut applicability)\n+                            )\n+                        },\n+                        Mutability::Not => {\n+                            format!(\n+                                \"&[{}; {}]\",\n+                                snippet_with_applicability(cx, elem.span, \"elem\", &mut applicability),\n+                                snippet_with_applicability(cx, len.span, \"len\", &mut applicability)\n+                            )\n+                        },\n+                    }\n                 } else {\n                     return;\n                 }\n@@ -104,9 +121,22 @@ impl UselessVec {\n                     }\n                     let span = args[0].span.to(last.span);\n \n-                    format!(\"&[{}]\", snippet_with_applicability(cx, span, \"..\", &mut applicability))\n+                    match mutability {\n+                        Mutability::Mut => {\n+                            format!(\n+                                \"&mut [{}]\",\n+                                snippet_with_applicability(cx, span, \"..\", &mut applicability)\n+                            )\n+                        },\n+                        Mutability::Not => {\n+                            format!(\"&[{}]\", snippet_with_applicability(cx, span, \"..\", &mut applicability))\n+                        },\n+                    }\n                 } else {\n-                    \"&[]\".into()\n+                    match mutability {\n+                        Mutability::Mut => \"&mut []\".into(),\n+                        Mutability::Not => \"&[]\".into(),\n+                    }\n                 }\n             },\n         };"}, {"sha": "da35f2e5c1bbe34dff67105e692626a722c99368", "filename": "tests/ui/vec.fixed", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a50923da4884c30e96fce2b4408c96f5824db43/tests%2Fui%2Fvec.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8a50923da4884c30e96fce2b4408c96f5824db43/tests%2Fui%2Fvec.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.fixed?ref=8a50923da4884c30e96fce2b4408c96f5824db43", "patch": "@@ -6,9 +6,14 @@\n struct NonCopy;\n \n fn on_slice(_: &[u8]) {}\n+\n+fn on_mut_slice(_: &mut [u8]) {}\n+\n #[allow(clippy::ptr_arg)]\n fn on_vec(_: &Vec<u8>) {}\n \n+fn on_mut_vec(_: &mut Vec<u8>) {}\n+\n struct Line {\n     length: usize,\n }\n@@ -22,28 +27,38 @@ impl Line {\n fn main() {\n     on_slice(&[]);\n     on_slice(&[]);\n+    on_mut_slice(&mut []);\n \n     on_slice(&[1, 2]);\n     on_slice(&[1, 2]);\n+    on_mut_slice(&mut [1, 2]);\n \n     on_slice(&[1, 2]);\n     on_slice(&[1, 2]);\n+    on_mut_slice(&mut [1, 2]);\n     #[rustfmt::skip]\n     on_slice(&[1, 2]);\n     on_slice(&[1, 2]);\n+    on_mut_slice(&mut [1, 2]);\n \n     on_slice(&[1; 2]);\n     on_slice(&[1; 2]);\n+    on_mut_slice(&mut [1; 2]);\n \n     on_vec(&vec![]);\n     on_vec(&vec![1, 2]);\n     on_vec(&vec![1; 2]);\n+    on_mut_vec(&mut vec![]);\n+    on_mut_vec(&mut vec![1, 2]);\n+    on_mut_vec(&mut vec![1; 2]);\n \n     // Now with non-constant expressions\n     let line = Line { length: 2 };\n \n     on_slice(&vec![2; line.length]);\n     on_slice(&vec![2; line.length()]);\n+    on_mut_slice(&mut vec![2; line.length]);\n+    on_mut_slice(&mut vec![2; line.length()]);\n \n     for a in &[1, 2, 3] {\n         println!(\"{:?}\", a);\n@@ -54,6 +69,7 @@ fn main() {\n     }\n \n     on_vec(&vec![1; 201]); // Ok, size of `vec` higher than `too_large_for_stack`\n+    on_mut_vec(&mut vec![1; 201]); // Ok, size of `vec` higher than `too_large_for_stack`\n \n     // Ok\n     for a in vec![1; 201] {"}, {"sha": "e9ed83e5c5aef2e3a4613bbbb1d9337a81852b04", "filename": "tests/ui/vec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a50923da4884c30e96fce2b4408c96f5824db43/tests%2Fui%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a50923da4884c30e96fce2b4408c96f5824db43/tests%2Fui%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.rs?ref=8a50923da4884c30e96fce2b4408c96f5824db43", "patch": "@@ -6,9 +6,14 @@\n struct NonCopy;\n \n fn on_slice(_: &[u8]) {}\n+\n+fn on_mut_slice(_: &mut [u8]) {}\n+\n #[allow(clippy::ptr_arg)]\n fn on_vec(_: &Vec<u8>) {}\n \n+fn on_mut_vec(_: &mut Vec<u8>) {}\n+\n struct Line {\n     length: usize,\n }\n@@ -22,28 +27,38 @@ impl Line {\n fn main() {\n     on_slice(&vec![]);\n     on_slice(&[]);\n+    on_mut_slice(&mut vec![]);\n \n     on_slice(&vec![1, 2]);\n     on_slice(&[1, 2]);\n+    on_mut_slice(&mut vec![1, 2]);\n \n     on_slice(&vec![1, 2]);\n     on_slice(&[1, 2]);\n+    on_mut_slice(&mut vec![1, 2]);\n     #[rustfmt::skip]\n     on_slice(&vec!(1, 2));\n     on_slice(&[1, 2]);\n+    on_mut_slice(&mut vec![1, 2]);\n \n     on_slice(&vec![1; 2]);\n     on_slice(&[1; 2]);\n+    on_mut_slice(&mut vec![1; 2]);\n \n     on_vec(&vec![]);\n     on_vec(&vec![1, 2]);\n     on_vec(&vec![1; 2]);\n+    on_mut_vec(&mut vec![]);\n+    on_mut_vec(&mut vec![1, 2]);\n+    on_mut_vec(&mut vec![1; 2]);\n \n     // Now with non-constant expressions\n     let line = Line { length: 2 };\n \n     on_slice(&vec![2; line.length]);\n     on_slice(&vec![2; line.length()]);\n+    on_mut_slice(&mut vec![2; line.length]);\n+    on_mut_slice(&mut vec![2; line.length()]);\n \n     for a in vec![1, 2, 3] {\n         println!(\"{:?}\", a);\n@@ -54,6 +69,7 @@ fn main() {\n     }\n \n     on_vec(&vec![1; 201]); // Ok, size of `vec` higher than `too_large_for_stack`\n+    on_mut_vec(&mut vec![1; 201]); // Ok, size of `vec` higher than `too_large_for_stack`\n \n     // Ok\n     for a in vec![1; 201] {"}, {"sha": "7d1de05a5c8364acabcd4405894ac9a78b6f5e2e", "filename": "tests/ui/vec.stderr", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8a50923da4884c30e96fce2b4408c96f5824db43/tests%2Fui%2Fvec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a50923da4884c30e96fce2b4408c96f5824db43/tests%2Fui%2Fvec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.stderr?ref=8a50923da4884c30e96fce2b4408c96f5824db43", "patch": "@@ -1,40 +1,70 @@\n error: useless use of `vec!`\n-  --> $DIR/vec.rs:23:14\n+  --> $DIR/vec.rs:28:14\n    |\n LL |     on_slice(&vec![]);\n    |              ^^^^^^^ help: you can use a slice directly: `&[]`\n    |\n    = note: `-D clippy::useless-vec` implied by `-D warnings`\n \n error: useless use of `vec!`\n-  --> $DIR/vec.rs:26:14\n+  --> $DIR/vec.rs:30:18\n+   |\n+LL |     on_mut_slice(&mut vec![]);\n+   |                  ^^^^^^^^^^^ help: you can use a slice directly: `&mut []`\n+\n+error: useless use of `vec!`\n+  --> $DIR/vec.rs:32:14\n    |\n LL |     on_slice(&vec![1, 2]);\n    |              ^^^^^^^^^^^ help: you can use a slice directly: `&[1, 2]`\n \n error: useless use of `vec!`\n-  --> $DIR/vec.rs:29:14\n+  --> $DIR/vec.rs:34:18\n+   |\n+LL |     on_mut_slice(&mut vec![1, 2]);\n+   |                  ^^^^^^^^^^^^^^^ help: you can use a slice directly: `&mut [1, 2]`\n+\n+error: useless use of `vec!`\n+  --> $DIR/vec.rs:36:14\n    |\n LL |     on_slice(&vec![1, 2]);\n    |              ^^^^^^^^^^^ help: you can use a slice directly: `&[1, 2]`\n \n error: useless use of `vec!`\n-  --> $DIR/vec.rs:32:14\n+  --> $DIR/vec.rs:38:18\n+   |\n+LL |     on_mut_slice(&mut vec![1, 2]);\n+   |                  ^^^^^^^^^^^^^^^ help: you can use a slice directly: `&mut [1, 2]`\n+\n+error: useless use of `vec!`\n+  --> $DIR/vec.rs:40:14\n    |\n LL |     on_slice(&vec!(1, 2));\n    |              ^^^^^^^^^^^ help: you can use a slice directly: `&[1, 2]`\n \n error: useless use of `vec!`\n-  --> $DIR/vec.rs:35:14\n+  --> $DIR/vec.rs:42:18\n+   |\n+LL |     on_mut_slice(&mut vec![1, 2]);\n+   |                  ^^^^^^^^^^^^^^^ help: you can use a slice directly: `&mut [1, 2]`\n+\n+error: useless use of `vec!`\n+  --> $DIR/vec.rs:44:14\n    |\n LL |     on_slice(&vec![1; 2]);\n    |              ^^^^^^^^^^^ help: you can use a slice directly: `&[1; 2]`\n \n error: useless use of `vec!`\n-  --> $DIR/vec.rs:48:14\n+  --> $DIR/vec.rs:46:18\n+   |\n+LL |     on_mut_slice(&mut vec![1; 2]);\n+   |                  ^^^^^^^^^^^^^^^ help: you can use a slice directly: `&mut [1; 2]`\n+\n+error: useless use of `vec!`\n+  --> $DIR/vec.rs:63:14\n    |\n LL |     for a in vec![1, 2, 3] {\n    |              ^^^^^^^^^^^^^ help: you can use a slice directly: `&[1, 2, 3]`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 11 previous errors\n "}]}