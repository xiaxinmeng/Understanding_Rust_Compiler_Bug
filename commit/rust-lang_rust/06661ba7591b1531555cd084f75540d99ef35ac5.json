{"sha": "06661ba7591b1531555cd084f75540d99ef35ac5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NjYxYmE3NTkxYjE1MzE1NTVjZDA4NGY3NTU0MGQ5OWVmMzVhYzU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-06-24T16:47:33Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-06-28T15:30:49Z"}, "message": "Update to new bootstrap compiler", "tree": {"sha": "34f973a21aab174c82621ccc33d53525e917970c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34f973a21aab174c82621ccc33d53525e917970c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06661ba7591b1531555cd084f75540d99ef35ac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06661ba7591b1531555cd084f75540d99ef35ac5", "html_url": "https://github.com/rust-lang/rust/commit/06661ba7591b1531555cd084f75540d99ef35ac5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06661ba7591b1531555cd084f75540d99ef35ac5/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17ea490310ba7c836c93fe1b7002555b3bea5eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/17ea490310ba7c836c93fe1b7002555b3bea5eb1", "html_url": "https://github.com/rust-lang/rust/commit/17ea490310ba7c836c93fe1b7002555b3bea5eb1"}], "stats": {"total": 405, "additions": 11, "deletions": 394}, "files": [{"sha": "3207aee6d2a97a3e21d06a7ecb6b4cd9621f90c7", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -10,7 +10,6 @@\n )]\n #![feature(box_syntax)]\n #![feature(box_patterns)]\n-#![cfg_attr(bootstrap, feature(const_fn_unsize))]\n #![feature(const_fn_transmute)]\n #![feature(crate_visibility_modifier)]\n #![feature(iter_zip)]"}, {"sha": "fc890f2385303458e1ee5aa0a8bdd1fa023626c4", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -8,7 +8,6 @@\n #![feature(bool_to_option)]\n #![feature(const_cstr_unchecked)]\n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]"}, {"sha": "ca2386dfae202e911f2cbeef6cbbff4e4e8d9f77", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -5,7 +5,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(crate_visibility_modifier)]\n #![feature(backtrace)]\n-#![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(format_args_capture)]\n #![feature(iter_zip)]\n #![feature(nll)]"}, {"sha": "42575273839a9760daca044dbb611125e1a6b3d2", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -3,7 +3,6 @@\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/hir.html\n \n #![feature(crate_visibility_modifier)]\n-#![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(in_band_lifetimes)]\n #![feature(once_cell)]\n #![feature(min_specialization)]"}, {"sha": "e8bd4bcb01f29e6d3deafdc19112c06817c9b489", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -136,8 +136,7 @@\n #![feature(maybe_uninit_extra, maybe_uninit_slice, maybe_uninit_uninit_array)]\n #![feature(alloc_layout_extra)]\n #![feature(trusted_random_access)]\n-#![cfg_attr(bootstrap, feature(try_trait))]\n-#![cfg_attr(not(bootstrap), feature(try_trait_v2))]\n+#![feature(try_trait_v2)]\n #![feature(min_type_alias_impl_trait)]\n #![feature(associated_type_bounds)]\n #![feature(slice_group_by)]"}, {"sha": "91fa1a9ad351c07d7a57a50f2f166850bd1f0138", "filename": "library/core/src/iter/adapters/peekable.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fpeekable.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -130,7 +130,6 @@ where\n     }\n \n     #[inline]\n-    #[cfg(not(bootstrap))]\n     fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R\n     where\n         Self: Sized,\n@@ -150,28 +149,6 @@ where\n         }\n     }\n \n-    #[inline]\n-    #[cfg(bootstrap)]\n-    fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R\n-    where\n-        Self: Sized,\n-        F: FnMut(B, Self::Item) -> R,\n-        R: Try<Output = B>,\n-    {\n-        let _use_the_import: ControlFlow<()>;\n-        match self.peeked.take() {\n-            Some(None) => try { init },\n-            Some(Some(v)) => match self.iter.try_rfold(init, &mut f).into_result() {\n-                Ok(acc) => f(acc, v),\n-                Err(e) => {\n-                    self.peeked = Some(Some(v));\n-                    R::from_error(e)\n-                }\n-            },\n-            None => self.iter.try_rfold(init, f),\n-        }\n-    }\n-\n     #[inline]\n     fn rfold<Acc, Fold>(self, init: Acc, mut fold: Fold) -> Acc\n     where"}, {"sha": "0032e8c3e47e0b61a2df2b8f443b09e981d289eb", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -2439,7 +2439,6 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"try_find\", reason = \"new API\", issue = \"63178\")]\n-    #[cfg(not(bootstrap))]\n     fn try_find<F, R, E>(&mut self, f: F) -> Result<Option<Self::Item>, E>\n     where\n         Self: Sized,\n@@ -2466,32 +2465,6 @@ pub trait Iterator {\n         self.try_fold((), check(f)).break_value().transpose()\n     }\n \n-    /// We're bootstrapping.\n-    #[inline]\n-    #[unstable(feature = \"try_find\", reason = \"new API\", issue = \"63178\")]\n-    #[cfg(bootstrap)]\n-    fn try_find<F, R>(&mut self, f: F) -> Result<Option<Self::Item>, R::Error>\n-    where\n-        Self: Sized,\n-        F: FnMut(&Self::Item) -> R,\n-        R: Try<Output = bool>,\n-    {\n-        #[inline]\n-        fn check<F, T, R>(mut f: F) -> impl FnMut((), T) -> ControlFlow<Result<T, R::Error>>\n-        where\n-            F: FnMut(&T) -> R,\n-            R: Try<Output = bool>,\n-        {\n-            move |(), x| match f(&x).into_result() {\n-                Ok(false) => ControlFlow::CONTINUE,\n-                Ok(true) => ControlFlow::Break(Ok(x)),\n-                Err(x) => ControlFlow::Break(Err(x)),\n-            }\n-        }\n-\n-        self.try_fold((), check(f)).break_value().transpose()\n-    }\n-\n     /// Searches for an element in an iterator, returning its index.\n     ///\n     /// `position()` takes a closure that returns `true` or `false`. It applies"}, {"sha": "7fa8202e5d60aef0d11afec2b75d57a968ab65e2", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -87,7 +87,6 @@\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_fn_fn_ptr_basics)]\n #![feature(const_fn_trait_bound)]\n-#![cfg_attr(bootstrap, feature(const_fn))]\n #![feature(const_option)]\n #![feature(const_precise_live_drops)]\n #![feature(const_ptr_offset)]\n@@ -112,7 +111,6 @@\n #![feature(doc_cfg)]\n #![feature(doc_notable_trait)]\n #![feature(duration_consts_2)]\n-#![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(extern_types)]\n #![feature(fundamental)]\n #![feature(intra_doc_pointers)]\n@@ -165,7 +163,6 @@\n #![feature(slice_ptr_get)]\n #![feature(no_niche)] // rust-lang/rust#68303\n #![feature(no_coverage)] // rust-lang/rust#84605\n-#![cfg_attr(bootstrap, feature(target_feature_11))]\n #![deny(unsafe_op_in_unsafe_fn)]\n #![deny(or_patterns_back_compat)]\n "}, {"sha": "271565693d66e09c78de20211a40f80993982299", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -31,7 +31,7 @@ use crate::hash::Hasher;\n /// [ub]: ../../reference/behavior-considered-undefined.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"send_trait\")]\n-#[cfg_attr(not(bootstrap), lang = \"send\")]\n+#[lang = \"send\"]\n #[rustc_on_unimplemented(\n     message = \"`{Self}` cannot be sent between threads safely\",\n     label = \"`{Self}` cannot be sent between threads safely\""}, {"sha": "c2270c864dfae26b5fe20333a66e8eee22238cf5", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -51,39 +51,17 @@ use crate::{convert, ops};\n pub enum ControlFlow<B, C = ()> {\n     /// Move on to the next phase of the operation as normal.\n     #[stable(feature = \"control_flow_enum_type\", since = \"1.55.0\")]\n-    #[cfg_attr(not(bootstrap), lang = \"Continue\")]\n+    #[lang = \"Continue\"]\n     Continue(C),\n     /// Exit the operation without running subsequent phases.\n     #[stable(feature = \"control_flow_enum_type\", since = \"1.55.0\")]\n-    #[cfg_attr(not(bootstrap), lang = \"Break\")]\n+    #[lang = \"Break\"]\n     Break(B),\n     // Yes, the order of the variants doesn't match the type parameters.\n     // They're in this order so that `ControlFlow<A, B>` <-> `Result<B, A>`\n     // is a no-op conversion in the `Try` implementation.\n }\n \n-#[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n-#[cfg(bootstrap)]\n-impl<B, C> ops::TryV1 for ControlFlow<B, C> {\n-    type Output = C;\n-    type Error = B;\n-    #[inline]\n-    fn into_result(self) -> Result<Self::Output, Self::Error> {\n-        match self {\n-            ControlFlow::Continue(y) => Ok(y),\n-            ControlFlow::Break(x) => Err(x),\n-        }\n-    }\n-    #[inline]\n-    fn from_error(v: Self::Error) -> Self {\n-        ControlFlow::Break(v)\n-    }\n-    #[inline]\n-    fn from_ok(v: Self::Output) -> Self {\n-        ControlFlow::Continue(v)\n-    }\n-}\n-\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n impl<B, C> ops::TryV2 for ControlFlow<B, C> {\n     type Output = C;\n@@ -184,31 +162,9 @@ impl<B, C> ControlFlow<B, C> {\n     }\n }\n \n-#[cfg(bootstrap)]\n-impl<R: ops::TryV1> ControlFlow<R, R::Output> {\n-    /// Create a `ControlFlow` from any type implementing `Try`.\n-    #[inline]\n-    pub(crate) fn from_try(r: R) -> Self {\n-        match R::into_result(r) {\n-            Ok(v) => ControlFlow::Continue(v),\n-            Err(v) => ControlFlow::Break(R::from_error(v)),\n-        }\n-    }\n-\n-    /// Convert a `ControlFlow` into any type implementing `Try`;\n-    #[inline]\n-    pub(crate) fn into_try(self) -> R {\n-        match self {\n-            ControlFlow::Continue(v) => R::from_ok(v),\n-            ControlFlow::Break(v) => v,\n-        }\n-    }\n-}\n-\n /// These are used only as part of implementing the iterator adapters.\n /// They have mediocre names and non-obvious semantics, so aren't\n /// currently on a path to potential stabilization.\n-#[cfg(not(bootstrap))]\n impl<R: ops::TryV2> ControlFlow<R, R::Output> {\n     /// Create a `ControlFlow` from any type implementing `Try`.\n     #[inline]"}, {"sha": "85e04740d96a4836001e6e427de2d3213ed9db9d", "filename": "library/core/src/ops/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fmod.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -147,8 +147,6 @@ mod function;\n mod generator;\n mod index;\n mod range;\n-#[cfg(bootstrap)]\n-mod r#try;\n mod try_trait;\n mod unsize;\n \n@@ -183,19 +181,10 @@ pub use self::range::{Range, RangeFrom, RangeFull, RangeTo};\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub use self::range::{Bound, RangeBounds, RangeInclusive, RangeToInclusive};\n \n-#[unstable(feature = \"try_trait\", issue = \"42327\")]\n-#[cfg(bootstrap)]\n-pub use self::r#try::Try;\n-\n-#[unstable(feature = \"try_trait_transition\", reason = \"for bootstrap\", issue = \"none\")]\n-#[cfg(bootstrap)]\n-pub(crate) use self::r#try::Try as TryV1;\n-\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n pub use self::try_trait::FromResidual;\n \n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n-#[cfg(not(bootstrap))]\n pub use self::try_trait::Try;\n \n #[unstable(feature = \"try_trait_transition\", reason = \"for bootstrap\", issue = \"none\")]"}, {"sha": "9d659e78d3ccee9e4ff961bfad5d5f555c303e0a", "filename": "library/core/src/ops/try.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/17ea490310ba7c836c93fe1b7002555b3bea5eb1/library%2Fcore%2Fsrc%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ea490310ba7c836c93fe1b7002555b3bea5eb1/library%2Fcore%2Fsrc%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry.rs?ref=17ea490310ba7c836c93fe1b7002555b3bea5eb1", "patch": "@@ -1,61 +0,0 @@\n-/// A trait for customizing the behavior of the `?` operator.\n-///\n-/// A type implementing `Try` is one that has a canonical way to view it\n-/// in terms of a success/failure dichotomy. This trait allows both\n-/// extracting those success or failure values from an existing instance and\n-/// creating a new instance from a success or failure value.\n-#[unstable(feature = \"try_trait\", issue = \"42327\")]\n-#[rustc_on_unimplemented(\n-    on(\n-        all(\n-            any(from_method = \"from_error\", from_method = \"from_ok\"),\n-            from_desugaring = \"QuestionMark\"\n-        ),\n-        message = \"the `?` operator can only be used in {ItemContext} \\\n-                    that returns `Result` or `Option` \\\n-                    (or another type that implements `{Try}`)\",\n-        label = \"cannot use the `?` operator in {ItemContext} that returns `{Self}`\",\n-        enclosing_scope = \"this function should return `Result` or `Option` to accept `?`\"\n-    ),\n-    on(\n-        all(from_method = \"into_result\", from_desugaring = \"QuestionMark\"),\n-        message = \"the `?` operator can only be applied to values \\\n-                    that implement `{Try}`\",\n-        label = \"the `?` operator cannot be applied to type `{Self}`\"\n-    )\n-)]\n-#[doc(alias = \"?\")]\n-#[cfg_attr(bootstrap, lang = \"try\")]\n-pub trait Try {\n-    /// The type of this value when viewed as successful.\n-    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-    type Output; // This no longer follows its RFC, but is only used in bootstrap.\n-    /// The type of this value when viewed as failed.\n-    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-    type Error;\n-\n-    /// Applies the \"?\" operator. A return of `Ok(t)` means that the\n-    /// execution should continue normally, and the result of `?` is the\n-    /// value `t`. A return of `Err(e)` means that execution should branch\n-    /// to the innermost enclosing `catch`, or return from the function.\n-    ///\n-    /// If an `Err(e)` result is returned, the value `e` will be \"wrapped\"\n-    /// in the return type of the enclosing scope (which must itself implement\n-    /// `Try`). Specifically, the value `X::from_error(From::from(e))`\n-    /// is returned, where `X` is the return type of the enclosing function.\n-    #[cfg_attr(bootstrap, lang = \"into_result\")]\n-    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-    fn into_result(self) -> Result<Self::Output, Self::Error>;\n-\n-    /// Wrap an error value to construct the composite result. For example,\n-    /// `Result::Err(x)` and `Result::from_error(x)` are equivalent.\n-    #[cfg_attr(bootstrap, lang = \"from_error\")]\n-    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-    fn from_error(v: Self::Error) -> Self;\n-\n-    /// Wrap an OK value to construct the composite result. For example,\n-    /// `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.\n-    #[cfg_attr(bootstrap, lang = \"from_ok\")]\n-    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-    fn from_ok(v: Self::Output) -> Self;\n-}"}, {"sha": "bd46fb6f2cfce5c1eb6872db0371eef9e223abfd", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -128,7 +128,7 @@ use crate::ops::ControlFlow;\n     )\n )]\n #[doc(alias = \"?\")]\n-#[cfg_attr(not(bootstrap), lang = \"Try\")]\n+#[lang = \"Try\"]\n pub trait Try: FromResidual {\n     /// The type of the value produced by `?` when *not* short-circuiting.\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n@@ -186,7 +186,7 @@ pub trait Try: FromResidual {\n     /// let r = std::iter::empty().try_fold(4, |_, ()| -> Option<_> { unreachable!() });\n     /// assert_eq!(r, Some(4));\n     /// ```\n-    #[cfg_attr(not(bootstrap), lang = \"from_output\")]\n+    #[lang = \"from_output\"]\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n     fn from_output(output: Self::Output) -> Self;\n \n@@ -213,7 +213,7 @@ pub trait Try: FromResidual {\n     ///     ControlFlow::Break(ControlFlow::Break(3)),\n     /// );\n     /// ```\n-    #[cfg_attr(not(bootstrap), lang = \"branch\")]\n+    #[lang = \"branch\"]\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n     fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n }\n@@ -334,7 +334,7 @@ pub trait FromResidual<R = <Self as Try>::Residual> {\n     ///     ControlFlow::Break(5),\n     /// );\n     /// ```\n-    #[cfg_attr(not(bootstrap), lang = \"from_residual\")]\n+    #[lang = \"from_residual\"]\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n     fn from_residual(residual: R) -> Self;\n }"}, {"sha": "13de1cb309211f363799b3824422895545ac2f63", "filename": "library/core/src/option.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -1636,38 +1636,6 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     }\n }\n \n-/// The error type that results from applying the try operator (`?`) to a `None` value. If you wish\n-/// to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can\n-/// implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that\n-/// returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.\n-#[rustc_diagnostic_item = \"none_error\"]\n-#[unstable(feature = \"try_trait\", issue = \"42327\")]\n-#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n-#[cfg(bootstrap)]\n-pub struct NoneError;\n-\n-#[unstable(feature = \"try_trait\", issue = \"42327\")]\n-#[cfg(bootstrap)]\n-impl<T> ops::TryV1 for Option<T> {\n-    type Output = T;\n-    type Error = NoneError;\n-\n-    #[inline]\n-    fn into_result(self) -> Result<T, NoneError> {\n-        self.ok_or(NoneError)\n-    }\n-\n-    #[inline]\n-    fn from_ok(v: T) -> Self {\n-        Some(v)\n-    }\n-\n-    #[inline]\n-    fn from_error(_: NoneError) -> Self {\n-        None\n-    }\n-}\n-\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n impl<T> ops::TryV2 for Option<T> {\n     type Output = T;"}, {"sha": "325efe721e30cb2275a3dbc5b07ea1ba02d43f36", "filename": "library/core/src/result.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -1626,28 +1626,6 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n     }\n }\n \n-#[unstable(feature = \"try_trait\", issue = \"42327\")]\n-#[cfg(bootstrap)]\n-impl<T, E> ops::TryV1 for Result<T, E> {\n-    type Output = T;\n-    type Error = E;\n-\n-    #[inline]\n-    fn into_result(self) -> Self {\n-        self\n-    }\n-\n-    #[inline]\n-    fn from_ok(v: T) -> Self {\n-        Ok(v)\n-    }\n-\n-    #[inline]\n-    fn from_error(v: E) -> Self {\n-        Err(v)\n-    }\n-}\n-\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n impl<T, E> ops::TryV2 for Result<T, E> {\n     type Output = T;"}, {"sha": "ce5a8a86a3025b735c67f833de61e6eb7ac37132", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -128,32 +128,6 @@ impl<T> From<T> for Poll<T> {\n     }\n }\n \n-#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-#[cfg(bootstrap)]\n-impl<T, E> ops::TryV1 for Poll<Result<T, E>> {\n-    type Output = Poll<T>;\n-    type Error = E;\n-\n-    #[inline]\n-    fn into_result(self) -> Result<Self::Output, Self::Error> {\n-        match self {\n-            Poll::Ready(Ok(x)) => Ok(Poll::Ready(x)),\n-            Poll::Ready(Err(e)) => Err(e),\n-            Poll::Pending => Ok(Poll::Pending),\n-        }\n-    }\n-\n-    #[inline]\n-    fn from_error(e: Self::Error) -> Self {\n-        Poll::Ready(Err(e))\n-    }\n-\n-    #[inline]\n-    fn from_ok(x: Self::Output) -> Self {\n-        x.map(Ok)\n-    }\n-}\n-\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n impl<T, E> ops::TryV2 for Poll<Result<T, E>> {\n     type Output = Poll<T>;\n@@ -184,33 +158,6 @@ impl<T, E, F: From<E>> ops::FromResidual<Result<convert::Infallible, E>> for Pol\n     }\n }\n \n-#[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-#[cfg(bootstrap)]\n-impl<T, E> ops::TryV1 for Poll<Option<Result<T, E>>> {\n-    type Output = Poll<Option<T>>;\n-    type Error = E;\n-\n-    #[inline]\n-    fn into_result(self) -> Result<Self::Output, Self::Error> {\n-        match self {\n-            Poll::Ready(Some(Ok(x))) => Ok(Poll::Ready(Some(x))),\n-            Poll::Ready(Some(Err(e))) => Err(e),\n-            Poll::Ready(None) => Ok(Poll::Ready(None)),\n-            Poll::Pending => Ok(Poll::Pending),\n-        }\n-    }\n-\n-    #[inline]\n-    fn from_error(e: Self::Error) -> Self {\n-        Poll::Ready(Some(Err(e)))\n-    }\n-\n-    #[inline]\n-    fn from_ok(x: Self::Output) -> Self {\n-        x.map(|x| x.map(Ok))\n-    }\n-}\n-\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n impl<T, E> ops::TryV2 for Poll<Option<Result<T, E>>> {\n     type Output = Poll<Option<T>>;"}, {"sha": "612f083a5c17820e2ab5e0df1e494db8816cbc5c", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -391,7 +391,6 @@ fn result_opt_conversions() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))] // Needs the V2 trait\n fn result_try_trait_v2_branch() {\n     use core::num::NonZeroU32;\n     use core::ops::{ControlFlow::*, Try};"}, {"sha": "25f6b3c0182e29de8e8d1f55170420370e4872d2", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -268,7 +268,6 @@\n #![feature(exact_size_is_empty)]\n #![feature(exhaustive_patterns)]\n #![feature(extend_one)]\n-#![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(float_interpolation)]\n #![feature(fn_traits)]\n #![feature(format_args_nl)]"}, {"sha": "ee069eefd4541e8f0fc78c81ce84efe05d0534fe", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -133,7 +133,7 @@ pub fn panic_any<M: 'static + Any + Send>(msg: M) -> ! {\n /// [`AssertUnwindSafe`] wrapper struct can be used to force this trait to be\n /// implemented for any closed over variables passed to `catch_unwind`.\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-#[cfg_attr(all(not(bootstrap), not(test)), lang = \"unwind_safe\")]\n+#[cfg_attr(not(test), lang = \"unwind_safe\")]\n #[rustc_on_unimplemented(\n     message = \"the type `{Self}` may not be safely transferred across an unwind boundary\",\n     label = \"`{Self}` may not be safely transferred across an unwind boundary\"\n@@ -149,7 +149,7 @@ pub auto trait UnwindSafe {}\n /// This is a \"helper marker trait\" used to provide impl blocks for the\n /// [`UnwindSafe`] trait, for more information see that documentation.\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-#[cfg_attr(all(not(bootstrap), not(test)), lang = \"ref_unwind_safe\")]\n+#[cfg_attr(not(test), lang = \"ref_unwind_safe\")]\n #[rustc_on_unimplemented(\n     message = \"the type `{Self}` may contain interior mutability and a reference may not be safely \\\n                transferrable across a catch_unwind boundary\","}, {"sha": "794f72770047646780b7478956dd2e74979f8c4c", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -61,9 +61,7 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 ignore: true,\n                 should_panic: ShouldPanic::No,\n                 allow_fail: false,\n-                #[cfg(not(bootstrap))]\n                 compile_fail: false,\n-                #[cfg(not(bootstrap))]\n                 no_run: false,\n                 test_type: TestType::Unknown,\n             },\n@@ -75,9 +73,7 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 ignore: false,\n                 should_panic: ShouldPanic::No,\n                 allow_fail: false,\n-                #[cfg(not(bootstrap))]\n                 compile_fail: false,\n-                #[cfg(not(bootstrap))]\n                 no_run: false,\n                 test_type: TestType::Unknown,\n             },\n@@ -97,9 +93,7 @@ pub fn do_not_run_ignored_tests() {\n             ignore: true,\n             should_panic: ShouldPanic::No,\n             allow_fail: false,\n-            #[cfg(not(bootstrap))]\n             compile_fail: false,\n-            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -120,9 +114,7 @@ pub fn ignored_tests_result_in_ignored() {\n             ignore: true,\n             should_panic: ShouldPanic::No,\n             allow_fail: false,\n-            #[cfg(not(bootstrap))]\n             compile_fail: false,\n-            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -147,9 +139,7 @@ fn test_should_panic() {\n             ignore: false,\n             should_panic: ShouldPanic::Yes,\n             allow_fail: false,\n-            #[cfg(not(bootstrap))]\n             compile_fail: false,\n-            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -174,9 +164,7 @@ fn test_should_panic_good_message() {\n             ignore: false,\n             should_panic: ShouldPanic::YesWithMessage(\"error message\"),\n             allow_fail: false,\n-            #[cfg(not(bootstrap))]\n             compile_fail: false,\n-            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -206,9 +194,7 @@ fn test_should_panic_bad_message() {\n             ignore: false,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             allow_fail: false,\n-            #[cfg(not(bootstrap))]\n             compile_fail: false,\n-            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -242,9 +228,7 @@ fn test_should_panic_non_string_message_type() {\n             ignore: false,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             allow_fail: false,\n-            #[cfg(not(bootstrap))]\n             compile_fail: false,\n-            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -270,9 +254,7 @@ fn test_should_panic_but_succeeds() {\n                 ignore: false,\n                 should_panic,\n                 allow_fail: false,\n-                #[cfg(not(bootstrap))]\n                 compile_fail: false,\n-                #[cfg(not(bootstrap))]\n                 no_run: false,\n                 test_type: TestType::Unknown,\n             },\n@@ -306,9 +288,7 @@ fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n             ignore: false,\n             should_panic: ShouldPanic::No,\n             allow_fail: false,\n-            #[cfg(not(bootstrap))]\n             compile_fail: false,\n-            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -343,9 +323,7 @@ fn time_test_failure_template(test_type: TestType) -> TestResult {\n             ignore: false,\n             should_panic: ShouldPanic::No,\n             allow_fail: false,\n-            #[cfg(not(bootstrap))]\n             compile_fail: false,\n-            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type,\n         },\n@@ -384,9 +362,7 @@ fn typed_test_desc(test_type: TestType) -> TestDesc {\n         ignore: false,\n         should_panic: ShouldPanic::No,\n         allow_fail: false,\n-        #[cfg(not(bootstrap))]\n         compile_fail: false,\n-        #[cfg(not(bootstrap))]\n         no_run: false,\n         test_type,\n     }\n@@ -499,9 +475,7 @@ pub fn exclude_should_panic_option() {\n             ignore: false,\n             should_panic: ShouldPanic::Yes,\n             allow_fail: false,\n-            #[cfg(not(bootstrap))]\n             compile_fail: false,\n-            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -525,9 +499,7 @@ pub fn exact_filter_match() {\n                     ignore: false,\n                     should_panic: ShouldPanic::No,\n                     allow_fail: false,\n-                    #[cfg(not(bootstrap))]\n                     compile_fail: false,\n-                    #[cfg(not(bootstrap))]\n                     no_run: false,\n                     test_type: TestType::Unknown,\n                 },\n@@ -621,9 +593,7 @@ pub fn sort_tests() {\n                     ignore: false,\n                     should_panic: ShouldPanic::No,\n                     allow_fail: false,\n-                    #[cfg(not(bootstrap))]\n                     compile_fail: false,\n-                    #[cfg(not(bootstrap))]\n                     no_run: false,\n                     test_type: TestType::Unknown,\n                 },\n@@ -702,9 +672,7 @@ pub fn test_bench_no_iter() {\n         ignore: false,\n         should_panic: ShouldPanic::No,\n         allow_fail: false,\n-        #[cfg(not(bootstrap))]\n         compile_fail: false,\n-        #[cfg(not(bootstrap))]\n         no_run: false,\n         test_type: TestType::Unknown,\n     };\n@@ -726,9 +694,7 @@ pub fn test_bench_iter() {\n         ignore: false,\n         should_panic: ShouldPanic::No,\n         allow_fail: false,\n-        #[cfg(not(bootstrap))]\n         compile_fail: false,\n-        #[cfg(not(bootstrap))]\n         no_run: false,\n         test_type: TestType::Unknown,\n     };\n@@ -744,9 +710,7 @@ fn should_sort_failures_before_printing_them() {\n         ignore: false,\n         should_panic: ShouldPanic::No,\n         allow_fail: false,\n-        #[cfg(not(bootstrap))]\n         compile_fail: false,\n-        #[cfg(not(bootstrap))]\n         no_run: false,\n         test_type: TestType::Unknown,\n     };\n@@ -756,9 +720,7 @@ fn should_sort_failures_before_printing_them() {\n         ignore: false,\n         should_panic: ShouldPanic::No,\n         allow_fail: false,\n-        #[cfg(not(bootstrap))]\n         compile_fail: false,\n-        #[cfg(not(bootstrap))]\n         no_run: false,\n         test_type: TestType::Unknown,\n     };"}, {"sha": "3512a57e8e4ae59254e5c5b6fed3c7303bf925ed", "filename": "library/test/src/types.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -124,9 +124,7 @@ pub struct TestDesc {\n     pub ignore: bool,\n     pub should_panic: options::ShouldPanic,\n     pub allow_fail: bool,\n-    #[cfg(not(bootstrap))]\n     pub compile_fail: bool,\n-    #[cfg(not(bootstrap))]\n     pub no_run: bool,\n     pub test_type: TestType,\n }\n@@ -147,7 +145,6 @@ impl TestDesc {\n \n     /// Returns None for ignored test or that that are just run, otherwise give a description of the type of test.\n     /// Descriptions include \"should panic\", \"compile fail\" and \"compile\".\n-    #[cfg(not(bootstrap))]\n     pub fn test_mode(&self) -> Option<&'static str> {\n         if self.ignore {\n             return None;\n@@ -169,11 +166,6 @@ impl TestDesc {\n         }\n         None\n     }\n-\n-    #[cfg(bootstrap)]\n-    pub fn test_mode(&self) -> Option<&'static str> {\n-        None\n-    }\n }\n \n #[derive(Debug)]"}, {"sha": "022640067bd11ed286ecabea3abecb4348fc41f7", "filename": "src/doc/unstable-book/src/library-features/try-trait.md", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/17ea490310ba7c836c93fe1b7002555b3bea5eb1/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ftry-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/17ea490310ba7c836c93fe1b7002555b3bea5eb1/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ftry-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ftry-trait.md?ref=17ea490310ba7c836c93fe1b7002555b3bea5eb1", "patch": "@@ -1,50 +0,0 @@\n-# `try_trait`\n-\n-The tracking issue for this feature is: [#42327]\n-\n-[#42327]: https://github.com/rust-lang/rust/issues/42327\n-\n-------------------------\n-\n-This introduces a new trait `Try` for extending the `?` operator to types\n-other than `Result` (a part of [RFC 1859]).  The trait provides the canonical\n-way to _view_ a type in terms of a success/failure dichotomy.  This will\n-allow `?` to supplant the `try_opt!` macro on `Option` and the `try_ready!`\n-macro on `Poll`, among other things.\n-\n-[RFC 1859]: https://github.com/rust-lang/rfcs/pull/1859\n-\n-Here's an example implementation of the trait:\n-\n-```rust,ignore (cannot-reimpl-Try)\n-/// A distinct type to represent the `None` value of an `Option`.\n-///\n-/// This enables using the `?` operator on `Option`; it's rarely useful alone.\n-#[derive(Debug)]\n-#[unstable(feature = \"try_trait\", issue = \"42327\")]\n-pub struct None { _priv: () }\n-\n-#[unstable(feature = \"try_trait\", issue = \"42327\")]\n-impl<T> ops::Try for Option<T>  {\n-    type Ok = T;\n-    type Error = None;\n-\n-    fn into_result(self) -> Result<T, None> {\n-        self.ok_or(None { _priv: () })\n-    }\n-\n-    fn from_ok(v: T) -> Self {\n-        Some(v)\n-    }\n-\n-    fn from_error(_: None) -> Self {\n-        None\n-    }\n-}\n-```\n-\n-Note the `Error` associated type here is a new marker.  The `?` operator\n-allows interconversion between different `Try` implementers only when\n-the error type can be converted `Into` the error type of the enclosing\n-function (or catch block).  Having a distinct error type (as opposed to\n-just `()`, or similar) restricts this to where it's semantically meaningful."}, {"sha": "7aa54241450f724d87ca0be6fb1ce7c76daad944", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -942,9 +942,7 @@ impl Tester for Collector {\n                 // compiler failures are test failures\n                 should_panic: testing::ShouldPanic::No,\n                 allow_fail: config.allow_fail,\n-                #[cfg(not(bootstrap))]\n                 compile_fail: config.compile_fail,\n-                #[cfg(not(bootstrap))]\n                 no_run,\n                 test_type: testing::TestType::DocTest,\n             },"}, {"sha": "e9d0b73e94db036e6327299ce89ea364021bb2ed", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -12,7 +12,7 @@\n # stable release's version number. `date` is the date where the release we're\n # bootstrapping off was released.\n \n-date: 2021-05-23\n+date: 2021-06-23\n rustc: beta\n \n # We use a nightly rustfmt to format the source because it solves some"}, {"sha": "68e28795347e91f8515dbd1fd7871678b2a389dd", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06661ba7591b1531555cd084f75540d99ef35ac5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06661ba7591b1531555cd084f75540d99ef35ac5/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=06661ba7591b1531555cd084f75540d99ef35ac5", "patch": "@@ -903,9 +903,7 @@ pub fn make_test_description<R: Read>(\n         ignore,\n         should_panic,\n         allow_fail: false,\n-        #[cfg(not(bootstrap))]\n         compile_fail: false,\n-        #[cfg(not(bootstrap))]\n         no_run: false,\n         test_type: test::TestType::Unknown,\n     }"}]}