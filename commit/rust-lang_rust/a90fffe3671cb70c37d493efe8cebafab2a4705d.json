{"sha": "a90fffe3671cb70c37d493efe8cebafab2a4705d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MGZmZmUzNjcxY2I3MGMzN2Q0OTNlZmU4Y2ViYWZhYjJhNDcwNWQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-14T04:25:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-06-14T04:25:18Z"}, "message": "Revert \"Revert \"Have JIT execution take ownership of the LLVMContextRef\"\"\n\nThis reverts commit 19adece68b00bd1873499cca6f1537750608d769.", "tree": {"sha": "5bb2e0792bfc5292452ffd0f6d9e929d14cffbb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bb2e0792bfc5292452ffd0f6d9e929d14cffbb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a90fffe3671cb70c37d493efe8cebafab2a4705d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a90fffe3671cb70c37d493efe8cebafab2a4705d", "html_url": "https://github.com/rust-lang/rust/commit/a90fffe3671cb70c37d493efe8cebafab2a4705d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a90fffe3671cb70c37d493efe8cebafab2a4705d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61", "html_url": "https://github.com/rust-lang/rust/commit/1a3edecbf21eef7f39bbf3a7bf38fb72fdc6af61"}], "stats": {"total": 148, "additions": 88, "deletions": 60}, "files": [{"sha": "f37ef83e7708744bccfa38c450621b083939ebcf", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 42, "deletions": 20, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=a90fffe3671cb70c37d493efe8cebafab2a4705d", "patch": "@@ -102,7 +102,7 @@ pub mod jit {\n     use back::link::llvm_err;\n     use driver::session::Session;\n     use lib::llvm::llvm;\n-    use lib::llvm::{ModuleRef, PassManagerRef};\n+    use lib::llvm::{ModuleRef, PassManagerRef, ContextRef};\n     use metadata::cstore;\n \n     use core::cast;\n@@ -125,6 +125,7 @@ pub mod jit {\n \n     pub fn exec(sess: Session,\n                 pm: PassManagerRef,\n+                c: ContextRef,\n                 m: ModuleRef,\n                 opt: c_int,\n                 stacks: bool) {\n@@ -153,26 +154,43 @@ pub mod jit {\n                     });\n             }\n \n-            // The execute function will return a void pointer\n-            // to the _rust_main function. We can do closure\n-            // magic here to turn it straight into a callable rust\n-            // closure. It will also cleanup the memory manager\n-            // for us.\n-\n-            let entry = llvm::LLVMRustExecuteJIT(manager,\n-                                                 pm, m, opt, stacks);\n-\n-            if ptr::is_null(entry) {\n-                llvm_err(sess, ~\"Could not JIT\");\n-            } else {\n-                let closure = Closure {\n-                    code: entry,\n-                    env: ptr::null()\n-                };\n-                let func: &fn() = cast::transmute(closure);\n+            // We custom-build a JIT execution engine via some rust wrappers\n+            // first. This wrappers takes ownership of the module passed in.\n+            let ee = llvm::LLVMRustBuildJIT(manager, pm, m, opt, stacks);\n+            if ee.is_null() {\n+                llvm::LLVMContextDispose(c);\n+                llvm_err(sess, ~\"Could not create the JIT\");\n+            }\n \n-                func();\n+            // Next, we need to get a handle on the _rust_main function by\n+            // looking up it's corresponding ValueRef and then requesting that\n+            // the execution engine compiles the function.\n+            let fun = do str::as_c_str(\"_rust_main\") |entry| {\n+                llvm::LLVMGetNamedFunction(m, entry)\n+            };\n+            if fun.is_null() {\n+                llvm::LLVMDisposeExecutionEngine(ee);\n+                llvm::LLVMContextDispose(c);\n+                llvm_err(sess, ~\"Could not find _rust_main in the JIT\");\n             }\n+\n+            // Finally, once we have the pointer to the code, we can do some\n+            // closure magic here to turn it straight into a callable rust\n+            // closure\n+            let code = llvm::LLVMGetPointerToGlobal(ee, fun);\n+            assert!(!code.is_null());\n+            let closure = Closure {\n+                code: code,\n+                env: ptr::null()\n+            };\n+            let func: &fn() = cast::transmute(closure);\n+            func();\n+\n+            // Sadly, there currently is no interface to re-use this execution\n+            // engine, so it's disposed of here along with the context to\n+            // prevent leaks.\n+            llvm::LLVMDisposeExecutionEngine(ee);\n+            llvm::LLVMContextDispose(c);\n         }\n     }\n }\n@@ -189,6 +207,7 @@ pub mod write {\n     use driver::session;\n     use lib::llvm::llvm;\n     use lib::llvm::{ModuleRef, mk_pass_manager, mk_target_data};\n+    use lib::llvm::{ContextRef};\n     use lib;\n \n     use back::passes;\n@@ -207,6 +226,7 @@ pub mod write {\n     }\n \n     pub fn run_passes(sess: Session,\n+                      llcx: ContextRef,\n                       llmod: ModuleRef,\n                       output_type: output_type,\n                       output: &Path) {\n@@ -281,7 +301,7 @@ pub mod write {\n                     // JIT execution takes ownership of the module,\n                     // so don't dispose and return.\n \n-                    jit::exec(sess, pm.llpm, llmod, CodeGenOptLevel, true);\n+                    jit::exec(sess, pm.llpm, llcx, llmod, CodeGenOptLevel, true);\n \n                     if sess.time_llvm_passes() {\n                         llvm::LLVMRustPrintPassTimings();\n@@ -349,6 +369,7 @@ pub mod write {\n                 // Clean up and return\n \n                 llvm::LLVMDisposeModule(llmod);\n+                llvm::LLVMContextDispose(llcx);\n                 if sess.time_llvm_passes() {\n                     llvm::LLVMRustPrintPassTimings();\n                 }\n@@ -367,6 +388,7 @@ pub mod write {\n             }\n \n             llvm::LLVMDisposeModule(llmod);\n+            llvm::LLVMContextDispose(llcx);\n             if sess.time_llvm_passes() { llvm::LLVMRustPrintPassTimings(); }\n         }\n     }"}, {"sha": "0447481596aef547af629af167c39064c40218a2", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=a90fffe3671cb70c37d493efe8cebafab2a4705d", "patch": "@@ -216,7 +216,7 @@ pub fn compile_rest(sess: Session,\n \n     let mut crate = crate_opt.unwrap();\n \n-    let (llmod, link_meta) = {\n+    let (llcx, llmod, link_meta) = {\n     crate = time(time_passes, ~\"intrinsic injection\", ||\n                  front::intrinsic_inject::inject_intrinsic(sess, crate));\n \n@@ -339,14 +339,14 @@ pub fn compile_rest(sess: Session,\n         let obj_filename = outputs.obj_filename.with_filetype(\"s\");\n \n         time(time_passes, ~\"LLVM passes\", ||\n-            link::write::run_passes(sess, llmod, output_type,\n-                            &obj_filename));\n+            link::write::run_passes(sess, llcx, llmod, output_type,\n+                                    &obj_filename));\n \n         link::write::run_ndk(sess, &obj_filename, &outputs.obj_filename);\n     } else {\n         time(time_passes, ~\"LLVM passes\", ||\n-            link::write::run_passes(sess, llmod, sess.opts.output_type,\n-                                &outputs.obj_filename));\n+            link::write::run_passes(sess, llcx, llmod, sess.opts.output_type,\n+                                    &outputs.obj_filename));\n     }\n \n     let stop_after_codegen ="}, {"sha": "b18c9e9b4c217d8244f08da3e01a663e03b26f64", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=a90fffe3671cb70c37d493efe8cebafab2a4705d", "patch": "@@ -205,6 +205,8 @@ pub enum BasicBlock_opaque {}\n pub type BasicBlockRef = *BasicBlock_opaque;\n pub enum Builder_opaque {}\n pub type BuilderRef = *Builder_opaque;\n+pub enum ExecutionEngine_opaque {}\n+pub type ExecutionEngineRef = *ExecutionEngine_opaque;\n pub enum MemoryBuffer_opaque {}\n pub type MemoryBufferRef = *MemoryBuffer_opaque;\n pub enum PassManager_opaque {}\n@@ -223,7 +225,7 @@ pub enum Pass_opaque {}\n pub type PassRef = *Pass_opaque;\n \n pub mod llvm {\n-    use super::{AtomicBinOp, AtomicOrdering, BasicBlockRef};\n+    use super::{AtomicBinOp, AtomicOrdering, BasicBlockRef, ExecutionEngineRef};\n     use super::{Bool, BuilderRef, ContextRef, MemoryBufferRef, ModuleRef};\n     use super::{ObjectFileRef, Opcode, PassManagerRef, PassManagerBuilderRef};\n     use super::{SectionIteratorRef, TargetDataRef, TypeKind, TypeRef, UseRef};\n@@ -363,6 +365,10 @@ pub mod llvm {\n         pub unsafe fn LLVMGetPointerAddressSpace(PointerTy: TypeRef)\n                                               -> c_uint;\n         #[fast_ffi]\n+        pub unsafe fn LLVMGetPointerToGlobal(EE: ExecutionEngineRef,\n+                                             V: ValueRef)\n+                                              -> *();\n+        #[fast_ffi]\n         pub unsafe fn LLVMGetVectorSize(VectorTy: TypeRef) -> c_uint;\n \n         /* Operations on other types */\n@@ -1003,6 +1009,8 @@ pub mod llvm {\n                                                 Name: *c_char);\n         #[fast_ffi]\n         pub unsafe fn LLVMDisposeBuilder(Builder: BuilderRef);\n+        #[fast_ffi]\n+        pub unsafe fn LLVMDisposeExecutionEngine(EE: ExecutionEngineRef);\n \n         /* Metadata */\n         #[fast_ffi]\n@@ -1819,11 +1827,11 @@ pub mod llvm {\n \n         /** Execute the JIT engine. */\n         #[fast_ffi]\n-        pub unsafe fn LLVMRustExecuteJIT(MM: *(),\n+        pub unsafe fn LLVMRustBuildJIT(MM: *(),\n                               PM: PassManagerRef,\n                               M: ModuleRef,\n                               OptLevel: c_int,\n-                              EnableSegmentedStacks: bool) -> *();\n+                              EnableSegmentedStacks: bool) -> ExecutionEngineRef;\n \n         /** Parses the bitcode in the given memory buffer. */\n         #[fast_ffi]"}, {"sha": "f2cf35f9fc75d1d5a3a1c07a979a525fb550b3f5", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=a90fffe3671cb70c37d493efe8cebafab2a4705d", "patch": "@@ -3018,7 +3018,7 @@ pub fn trans_crate(sess: session::Session,\n                    tcx: ty::ctxt,\n                    output: &Path,\n                    emap2: resolve::ExportMap2,\n-                   maps: astencode::Maps) -> (ModuleRef, LinkMeta) {\n+                   maps: astencode::Maps) -> (ContextRef, ModuleRef, LinkMeta) {\n \n     let symbol_hasher = @mut hash::default_state();\n     let link_meta = link::build_link_meta(sess, crate, output, symbol_hasher);\n@@ -3040,9 +3040,11 @@ pub fn trans_crate(sess: session::Session,\n     let llmod_id = link_meta.name.to_owned() + \".rc\";\n \n     unsafe {\n-        if !llvm::LLVMRustStartMultithreading() {\n-            sess.bug(\"couldn't enable multi-threaded LLVM\");\n-        }\n+        // FIXME(#6511): get LLVM building with --enable-threads so this\n+        //               function can be called\n+        // if !llvm::LLVMRustStartMultithreading() {\n+        //     sess.bug(\"couldn't enable multi-threaded LLVM\");\n+        // }\n         let llcx = llvm::LLVMContextCreate();\n         set_task_llcx(llcx);\n         let llmod = str::as_c_str(llmod_id, |buf| {\n@@ -3178,7 +3180,8 @@ pub fn trans_crate(sess: session::Session,\n                 io::println(fmt!(\"%-7u %s\", v, k));\n             }\n         }\n-        return (llmod, link_meta);\n+        unset_task_llcx();\n+        return (llcx, llmod, link_meta);\n     }\n }\n \n@@ -3189,8 +3192,10 @@ pub fn task_llcx() -> ContextRef {\n     *opt.expect(\"task-local LLVMContextRef wasn't ever set!\")\n }\n \n-fn set_task_llcx(c: ContextRef) {\n-    unsafe {\n-        local_data::local_data_set(task_local_llcx_key, @c);\n-    }\n+unsafe fn set_task_llcx(c: ContextRef) {\n+    local_data::local_data_set(task_local_llcx_key, @c);\n+}\n+\n+unsafe fn unset_task_llcx() {\n+    local_data::local_data_pop(task_local_llcx_key);\n }"}, {"sha": "90a5a350b7fa4b2b9af68edf50731d70f8ea4c28", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=a90fffe3671cb70c37d493efe8cebafab2a4705d", "patch": "@@ -648,9 +648,5 @@ mod tests {\n             fn f() {}\n             f()\n         \");\n-\n-        debug!(\"regression test for #5803\");\n-        run_cmds([\"spawn( || println(\\\"Please don't segfault\\\") );\",\n-                  \"do spawn { println(\\\"Please?\\\"); }\"]);\n     }\n }"}, {"sha": "30e01b53ab7e82d4c173734cbd0123808980ac55", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=a90fffe3671cb70c37d493efe8cebafab2a4705d", "patch": "@@ -329,12 +329,12 @@ LLVMRustLoadCrate(void* mem, const char* crate) {\n   return true;\n }\n \n-extern \"C\" void*\n-LLVMRustExecuteJIT(void* mem,\n-                   LLVMPassManagerRef PMR,\n-                   LLVMModuleRef M,\n-                   CodeGenOpt::Level OptLevel,\n-                   bool EnableSegmentedStacks) {\n+extern \"C\" LLVMExecutionEngineRef\n+LLVMRustBuildJIT(void* mem,\n+                 LLVMPassManagerRef PMR,\n+                 LLVMModuleRef M,\n+                 CodeGenOpt::Level OptLevel,\n+                 bool EnableSegmentedStacks) {\n \n   InitializeNativeTarget();\n   InitializeNativeTargetAsmPrinter();\n@@ -371,21 +371,15 @@ LLVMRustExecuteJIT(void* mem,\n \n   if(!EE || Err != \"\") {\n     LLVMRustError = Err.c_str();\n-    return 0;\n+    // The EngineBuilder only takes ownership of these two structures if the\n+    // create() call is successful, but here it wasn't successful.\n+    LLVMDisposeModule(M);\n+    delete MM;\n+    return NULL;\n   }\n \n   MM->invalidateInstructionCache();\n-  Function* func = EE->FindFunctionNamed(\"_rust_main\");\n-\n-  if(!func || Err != \"\") {\n-    LLVMRustError = Err.c_str();\n-    return 0;\n-  }\n-\n-  void* entry = EE->getPointerToFunction(func);\n-  assert(entry);\n-\n-  return entry;\n+  return wrap(EE);\n }\n \n extern \"C\" bool"}, {"sha": "f5397165781995237b06337944d4a45128db3a36", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=a90fffe3671cb70c37d493efe8cebafab2a4705d", "patch": "@@ -6,13 +6,14 @@ LLVMRustConstSmallInt\n LLVMRustConstInt\n LLVMRustLoadCrate\n LLVMRustPrepareJIT\n-LLVMRustExecuteJIT\n+LLVMRustBuildJIT\n LLVMRustParseBitcode\n LLVMRustParseAssemblyFile\n LLVMRustPrintPassTimings\n LLVMRustStartMultithreading\n LLVMCreateObjectFile\n LLVMDisposeObjectFile\n+LLVMDisposeExecutionEngine\n LLVMGetSections\n LLVMDisposeSectionIterator\n LLVMIsSectionIteratorAtEnd\n@@ -356,6 +357,7 @@ LLVMGetParamParent\n LLVMGetParamTypes\n LLVMGetParams\n LLVMGetPointerAddressSpace\n+LLVMGetPointerToGlobal\n LLVMGetPreviousBasicBlock\n LLVMGetPreviousFunction\n LLVMGetPreviousGlobal"}, {"sha": "394146eea206083a028c4a8e91090cf0836298aa", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/a90fffe3671cb70c37d493efe8cebafab2a4705d/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=a90fffe3671cb70c37d493efe8cebafab2a4705d", "patch": "@@ -45,6 +45,7 @@\n #include \"llvm/Transforms/Vectorize.h\"\n #include \"llvm-c/Core.h\"\n #include \"llvm-c/BitReader.h\"\n+#include \"llvm-c/ExecutionEngine.h\"\n #include \"llvm-c/Object.h\"\n \n // Used by RustMCJITMemoryManager::getPointerToNamedFunction()"}]}