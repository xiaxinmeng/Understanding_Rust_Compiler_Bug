{"sha": "a9c3109a6a79430729154498019b37591da5989a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YzMxMDlhNmE3OTQzMDcyOTE1NDQ5ODAxOWIzNzU5MWRhNTk4OWE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-08-30T22:45:11Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-08-30T22:45:11Z"}, "message": "Allow ExprLit expression macros to be used in patterns.", "tree": {"sha": "0c6132b9bb52f32843074b33f89ba9f6e89cdcb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c6132b9bb52f32843074b33f89ba9f6e89cdcb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9c3109a6a79430729154498019b37591da5989a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9c3109a6a79430729154498019b37591da5989a", "html_url": "https://github.com/rust-lang/rust/commit/a9c3109a6a79430729154498019b37591da5989a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9c3109a6a79430729154498019b37591da5989a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2973665935161bb2b2eca3f41c33a4fd2fe82c4", "html_url": "https://github.com/rust-lang/rust/commit/f2973665935161bb2b2eca3f41c33a4fd2fe82c4"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "d59b20dfc4c68f4781914136229f7359269e2f69", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9c3109a6a79430729154498019b37591da5989a/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9c3109a6a79430729154498019b37591da5989a/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=a9c3109a6a79430729154498019b37591da5989a", "patch": "@@ -154,6 +154,16 @@ impl MacResult for MacExpr {\n     fn make_expr(&self) -> Option<Gc<ast::Expr>> {\n         Some(self.e)\n     }\n+    fn make_pat(&self) -> Option<Gc<ast::Pat>> {\n+        match self.e.node {\n+            ast::ExprLit(_) => Some(box(GC) ast::Pat {\n+                id: ast::DUMMY_NODE_ID,\n+                node: ast::PatLit(self.e),\n+                span: self.e.span\n+            }),\n+            _ => None\n+        }\n+    }\n }\n /// A convenience type for macros that return a single pattern.\n pub struct MacPat {"}, {"sha": "21c247cc69e44c4a966b8fa2c59f8cc2be910414", "filename": "src/test/run-pass/concat.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9c3109a6a79430729154498019b37591da5989a/src%2Ftest%2Frun-pass%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9c3109a6a79430729154498019b37591da5989a/src%2Ftest%2Frun-pass%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconcat.rs?ref=a9c3109a6a79430729154498019b37591da5989a", "patch": "@@ -18,4 +18,9 @@ pub fn main() {\n         concat!(1, 2i, 3u, 4f32, 4.0, 'a', true, ()),\n         \"12344.0atrue\"\n     );\n+\n+    assert!(match \"12344.0atrue\" {\n+        concat!(1, 2i, 3u, 4f32, 4.0, 'a', true, ()) => true,\n+        _ => false\n+    })\n }"}, {"sha": "89add2af440728f9d218e482fd01caddfd080b71", "filename": "src/test/run-pass/syntax-extension-source-utils.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9c3109a6a79430729154498019b37591da5989a/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9c3109a6a79430729154498019b37591da5989a/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs?ref=a9c3109a6a79430729154498019b37591da5989a", "patch": "@@ -43,4 +43,9 @@ pub fn main() {\n         [1] == (42 as u8)); // '*'\n     // The Windows tests are wrapped in an extra module for some reason\n     assert!((m1::m2::where_am_i().as_slice().ends_with(\"m1::m2\")));\n+\n+    assert!(match (47, \"( 2 * 3 ) + 5\") {\n+        (line!(), stringify!((2*3) + 5)) => true,\n+        _ => false\n+    })\n }"}]}