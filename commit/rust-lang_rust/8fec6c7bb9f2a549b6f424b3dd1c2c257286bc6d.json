{"sha": "8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZWM2YzdiYjlmMmE1NDliNmY0MjRiM2RkMWMyYzI1NzI4NmJjNmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-06T10:25:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-06T10:25:18Z"}, "message": "Auto merge of #80714 - jakevossen5:master, r=lcnr\n\nfixed const_generics error help\n\nCloses https://github.com/rust-lang/rust/issues/80702", "tree": {"sha": "310884ba9d1832eaad09b9b711d83dd77038d75e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/310884ba9d1832eaad09b9b711d83dd77038d75e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "html_url": "https://github.com/rust-lang/rust/commit/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9530fdc3f4355ff790ad33255682493fcda33bbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9530fdc3f4355ff790ad33255682493fcda33bbb", "html_url": "https://github.com/rust-lang/rust/commit/9530fdc3f4355ff790ad33255682493fcda33bbb"}, {"sha": "65f7dba622f082e1ea246866a1c85248e171e25f", "url": "https://api.github.com/repos/rust-lang/rust/commits/65f7dba622f082e1ea246866a1c85248e171e25f", "html_url": "https://github.com/rust-lang/rust/commit/65f7dba622f082e1ea246866a1c85248e171e25f"}], "stats": {"total": 110, "additions": 55, "deletions": 55}, "files": [{"sha": "d81d83f60bd13ff64580bc394958826c920b3a97", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -330,7 +330,7 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                             ),\n                         )\n                         .note(\"the only supported types are integers, `bool` and `char`\")\n-                        .help(\"more complex types are supported with `#[feature(const_generics)]`\")\n+                        .help(\"more complex types are supported with `#![feature(const_generics)]`\")\n                         .emit()\n                 }\n             };"}, {"sha": "8f6e56826fa1c613ac75af73a883297a43ab3a51", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -23,7 +23,7 @@ LL | struct B<const CFG: Config> {\n    |                     ^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a9349ce43c94e7f2456f348c17c346f7e85206ed", "filename": "src/test/ui/const-generics/const-param-before-other-params.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -17,7 +17,7 @@ LL | fn bar<const X: (), 'a>(_: &'a ()) {\n    |                 ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `()` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-before-other-params.rs:10:17\n@@ -26,7 +26,7 @@ LL | fn foo<const X: (), T>(_: &T) {}\n    |                 ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "48d33a785aead0e12ce56e04081b063fbbcab319", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.min.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -35,7 +35,7 @@ LL | struct A<const N: &u8>;\n    |                   ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:15:15\n@@ -44,7 +44,7 @@ LL | impl<const N: &u8> A<N> {\n    |               ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:23:15\n@@ -53,7 +53,7 @@ LL | impl<const N: &u8> B for A<N> {}\n    |               ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:27:17\n@@ -62,7 +62,7 @@ LL | fn bar<const N: &u8>() {}\n    |                 ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:18:21\n@@ -71,7 +71,7 @@ LL |     fn foo<const M: &u8>(&self) {}\n    |                     ^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to 10 previous errors\n "}, {"sha": "9804363f39a948c3c420d738c395044d7f735bb2", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -17,7 +17,7 @@ LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n    |                                               ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `[u8; _]` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-type-depends-on-const-param.rs:15:35\n@@ -26,7 +26,7 @@ LL | pub struct SelfDependent<const N: [u8; N]>;\n    |                                   ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "93874fb1f5fefe6bd88e50ca9f817285a3b8a5cf", "filename": "src/test/ui/const-generics/different_byref.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | struct Const<const V: [usize; 1]> {}\n    |                       ^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "80eac994d55c947e5490a3a7e31836b316f3fd32", "filename": "src/test/ui/const-generics/forbid-non-structural_match-types.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fforbid-non-structural_match-types.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | struct B<const X: A>; // ok\n    |                   ^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `C` is forbidden as the type of a const generic parameter\n   --> $DIR/forbid-non-structural_match-types.rs:14:19\n@@ -14,7 +14,7 @@ LL | struct D<const X: C>;\n    |                   ^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error[E0741]: `C` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n   --> $DIR/forbid-non-structural_match-types.rs:14:19"}, {"sha": "8701d54f5c963d19918abab2f4b800a279cb6740", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -14,7 +14,7 @@ LL | trait Trait<const S: &'static str> {}\n    |                      ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e96b9e70352649575bf056c3ee504d489ed69f16", "filename": "src/test/ui/const-generics/issue-66596-impl-trait-for-str-const-arg.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-66596-impl-trait-for-str-const-arg.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | trait Trait<const NAME: &'static str> {\n    |                         ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "5c9387d4012db66702c092c2eb0cf8ef6607f1de", "filename": "src/test/ui/const-generics/issues/issue-62579-no-match.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62579-no-match.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<const T: NoMatch>() -> bool {\n    |                 ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "e4a71fe061869e7ab45016b3a9b05b3a042e345a", "filename": "src/test/ui/const-generics/issues/issue-62878.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -11,7 +11,7 @@ LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                 ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2fb38addb2d812f6324d79b067da3f0c0433ded4", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | fn test<const T: &'static dyn A>() {\n    |                  ^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n   --> $DIR/issue-63322-forbid-dyn.rs:9:18"}, {"sha": "4782b1d98eba343168adbc2055d3779b0ff7588e", "filename": "src/test/ui/const-generics/issues/issue-68615-adt.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-adt.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | struct Const<const V: [usize; 0]> {}\n    |                       ^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "d0c190b91b040e043121ed0fa0620335b46ac1e1", "filename": "src/test/ui/const-generics/issues/issue-68615-array.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68615-array.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo<const V: [usize; 0] > {}\n    |                     ^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "1c6e08adffdffaf748b65ddead0e9450af64ea9d", "filename": "src/test/ui/const-generics/issues/issue-71169.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -11,7 +11,7 @@ LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n    |                                      ^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c8f2e0dadc1a7cb2f9d9fdb6bd7f95668bcec8d4", "filename": "src/test/ui/const-generics/issues/issue-73491.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | fn hoge<const IN: [u32; LEN]>() {}\n    |                   ^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "a7f0ecf0a2692f2ebc2c2e369877cd6d0fd7851e", "filename": "src/test/ui/const-generics/issues/issue-74101.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | fn test<const N: [u8; 1 + 2]>() {}\n    |                  ^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `[u8; _]` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74101.rs:9:21\n@@ -14,7 +14,7 @@ LL | struct Foo<const N: [u8; 1 + 2]>;\n    |                     ^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "62ad43974f4d8978c1dd4e02a374388bcc7c2d61", "filename": "src/test/ui/const-generics/issues/issue-74255.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74255.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL |     fn ice_struct_fn<const I: IceEnum>() {}\n    |                               ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "4e640ff857eae71b7ae9c2314b3a777297da1ed1", "filename": "src/test/ui/const-generics/issues/issue-74950.min.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74950.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:17:23\n@@ -14,7 +14,7 @@ LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:17:23\n@@ -23,7 +23,7 @@ LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:17:23\n@@ -32,7 +32,7 @@ LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `Inner` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-74950.rs:17:23\n@@ -41,7 +41,7 @@ LL | struct Outer<const I: Inner>;\n    |                       ^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "3c1c3ea97b540231901213dbfed75e9ffc757e86", "filename": "src/test/ui/const-generics/issues/issue-75047.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-75047.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo<const N: [u8; Bar::<u32>::value()]>;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "a658a7b3956896a408a46b69df6d55da2171e4c8", "filename": "src/test/ui/const-generics/min_const_generics/complex-types.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-types.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | struct Foo<const N: [u8; 0]>;\n    |                     ^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `()` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:6:21\n@@ -14,7 +14,7 @@ LL | struct Bar<const N: ()>;\n    |                     ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `No` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:11:21\n@@ -23,7 +23,7 @@ LL | struct Fez<const N: No>;\n    |                     ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:14:21\n@@ -32,7 +32,7 @@ LL | struct Faz<const N: &'static u8>;\n    |                     ^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `!` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:17:21\n@@ -41,7 +41,7 @@ LL | struct Fiz<const N: !>;\n    |                     ^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `()` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:20:19\n@@ -50,7 +50,7 @@ LL | enum Goo<const N: ()> { A, B }\n    |                   ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `()` is forbidden as the type of a const generic parameter\n   --> $DIR/complex-types.rs:23:20\n@@ -59,7 +59,7 @@ LL | union Boo<const N: ()> { a: () }\n    |                    ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "647ef5400cb29bb7f403bbaba848699619965c06", "filename": "src/test/ui/const-generics/min_const_generics/static-reference-array-const-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fstatic-reference-array-const-param.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | fn a<const X: &'static [u32]>() {}\n    |               ^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "d612e0c35a10fe593001d8508552c9e4e1e16253", "filename": "src/test/ui/const-generics/min_const_generics/transmute-const-param-static-reference.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | struct Const<const P: &'static ()>;\n    |                       ^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to previous error\n "}, {"sha": "6defd393ba068da794e3c6ceeebd8602b29ae0c4", "filename": "src/test/ui/const-generics/nested-type.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -12,7 +12,7 @@ LL | | }]>;\n    | |__^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/nested-type.rs:15:5"}, {"sha": "166a35ee4556efcdef2f8fe3e40fcdfebb17fc8e", "filename": "src/test/ui/const-generics/slice-const-param-mismatch.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param-mismatch.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | struct ConstString<const T: &'static str>;\n    |                             ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `&'static [u8]` is forbidden as the type of a const generic parameter\n   --> $DIR/slice-const-param-mismatch.rs:9:28\n@@ -14,7 +14,7 @@ LL | struct ConstBytes<const T: &'static [u8]>;\n    |                            ^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ed39a0c56b48da41f32184cf2f6363495ee09152", "filename": "src/test/ui/const-generics/slice-const-param.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fslice-const-param.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | pub fn function_with_str<const STRING: &'static str>() -> &'static str {\n    |                                        ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `&'static [u8]` is forbidden as the type of a const generic parameter\n   --> $DIR/slice-const-param.rs:12:41\n@@ -14,7 +14,7 @@ LL | pub fn function_with_bytes<const BYTES: &'static [u8]>() -> &'static [u8] {\n    |                                         ^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "86e6159fdb577e3c23606d08f504916468735d91", "filename": "src/test/ui/const-generics/std/const-generics-range.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | struct _Range<const R: std::ops::Range<usize>>;\n    |                        ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `RangeFrom<usize>` is forbidden as the type of a const generic parameter\n   --> $DIR/const-generics-range.rs:12:28\n@@ -14,7 +14,7 @@ LL | struct _RangeFrom<const R: std::ops::RangeFrom<usize>>;\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `RangeFull` is forbidden as the type of a const generic parameter\n   --> $DIR/const-generics-range.rs:17:28\n@@ -23,7 +23,7 @@ LL | struct _RangeFull<const R: std::ops::RangeFull>;\n    |                            ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `RangeInclusive<usize>` is forbidden as the type of a const generic parameter\n   --> $DIR/const-generics-range.rs:23:33\n@@ -32,7 +32,7 @@ LL | struct _RangeInclusive<const R: std::ops::RangeInclusive<usize>>;\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `RangeTo<usize>` is forbidden as the type of a const generic parameter\n   --> $DIR/const-generics-range.rs:28:26\n@@ -41,7 +41,7 @@ LL | struct _RangeTo<const R: std::ops::RangeTo<usize>>;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `RangeToInclusive<usize>` is forbidden as the type of a const generic parameter\n   --> $DIR/const-generics-range.rs:33:35\n@@ -50,7 +50,7 @@ LL | struct _RangeToInclusive<const R: std::ops::RangeToInclusive<usize>>;\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "f3516d1de96bfc08c783ad6cb7c1fe0bef7c7ff0", "filename": "src/test/ui/const-generics/type-dependent/issue-71348.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71348.min.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | trait Get<'a, const N: &'static str> {\n    |                        ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: `&'static str` is forbidden as the type of a const generic parameter\n   --> $DIR/issue-71348.rs:18:25\n@@ -14,7 +14,7 @@ LL |     fn ask<'a, const N: &'static str>(&'a self) -> &'a <Self as Get<N>>::Ta\n    |                         ^^^^^^^^^^^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ed19109b38b41a901b50a869ff3d42b1fab6a941", "filename": "src/test/ui/feature-gates/feature-gate-const_generics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_generics.stderr?ref=8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<const X: ()>() {}\n    |                 ^^\n    |\n    = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#[feature(const_generics)]`\n+   = help: more complex types are supported with `#![feature(const_generics)]`\n \n error: aborting due to previous error\n "}]}