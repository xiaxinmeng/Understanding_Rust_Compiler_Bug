{"sha": "7174231ae66aa3e938cbe0b84e23e79d867fec20", "node_id": "C_kwDOAAsO6NoAKDcxNzQyMzFhZTY2YWEzZTkzOGNiZTBiODRlMjNlNzlkODY3ZmVjMjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T23:27:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T23:27:33Z"}, "message": "Auto merge of #102737 - RalfJung:poll_fn_pin, r=Mark-Simulacrum\n\npoll_fn and Unpin: fix pinning\n\nSee [IRLO](https://internals.rust-lang.org/t/surprising-soundness-trouble-around-pollfn/17484) for details: currently `poll_fn` is very subtle to use, since it does not pin the closure, so creating a `Pin::get_unchcked(&mut capture)` inside the closure is unsound. This leads to actual miscompilations with `futures::join!`.\n\nIMO the proper fix is to pin the closure when the future is pinned, which is achieved by changing the `Unpin` implementation. This is a breaking change though. 1.64.0 was *just* released, so maybe this is still okay?\n\nThe alternative would be to add some strong comments to the docs saying that closure captures are *not pinned* and doing `Pin::get_unchecked` on them is unsound.", "tree": {"sha": "7460d6911aa4b59612ba0ca595d395fb0407eab1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7460d6911aa4b59612ba0ca595d395fb0407eab1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7174231ae66aa3e938cbe0b84e23e79d867fec20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7174231ae66aa3e938cbe0b84e23e79d867fec20", "html_url": "https://github.com/rust-lang/rust/commit/7174231ae66aa3e938cbe0b84e23e79d867fec20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7174231ae66aa3e938cbe0b84e23e79d867fec20/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9565dfeb4e6225177bbe78f18cd48a7982f34401", "url": "https://api.github.com/repos/rust-lang/rust/commits/9565dfeb4e6225177bbe78f18cd48a7982f34401", "html_url": "https://github.com/rust-lang/rust/commit/9565dfeb4e6225177bbe78f18cd48a7982f34401"}, {"sha": "17d78c4ef922f81e752feb077d66fbce80630c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/17d78c4ef922f81e752feb077d66fbce80630c6c", "html_url": "https://github.com/rust-lang/rust/commit/17d78c4ef922f81e752feb077d66fbce80630c6c"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "90cb797391a0839d7ad1fad357abbb477b8e05fa", "filename": "library/core/src/future/poll_fn.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7174231ae66aa3e938cbe0b84e23e79d867fec20/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7174231ae66aa3e938cbe0b84e23e79d867fec20/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs?ref=7174231ae66aa3e938cbe0b84e23e79d867fec20", "patch": "@@ -5,7 +5,9 @@ use crate::task::{Context, Poll};\n \n /// Creates a future that wraps a function returning [`Poll`].\n ///\n-/// Polling the future delegates to the wrapped function.\n+/// Polling the future delegates to the wrapped function. If the returned future is pinned, then the\n+/// captured environment of the wrapped function is also pinned in-place, so as long as the closure\n+/// does not move out of its captures it can soundly create pinned references to them.\n ///\n /// # Examples\n ///\n@@ -41,7 +43,7 @@ pub struct PollFn<F> {\n }\n \n #[stable(feature = \"future_poll_fn\", since = \"1.64.0\")]\n-impl<F> Unpin for PollFn<F> {}\n+impl<F: Unpin> Unpin for PollFn<F> {}\n \n #[stable(feature = \"future_poll_fn\", since = \"1.64.0\")]\n impl<F> fmt::Debug for PollFn<F> {\n@@ -57,7 +59,8 @@ where\n {\n     type Output = T;\n \n-    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<T> {\n-        (&mut self.f)(cx)\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<T> {\n+        // SAFETY: We are not moving out of the pinned field.\n+        (unsafe { &mut self.get_unchecked_mut().f })(cx)\n     }\n }"}]}