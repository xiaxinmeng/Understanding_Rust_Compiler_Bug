{"sha": "66a12f504f149bfa487f2353df003482802a18b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YTEyZjUwNGYxNDliZmE0ODdmMjM1M2RmMDAzNDgyODAyYTE4YjQ=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2015-12-28T04:31:11Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2015-12-30T15:23:49Z"}, "message": "Custom help message for people trying to make macro public\n\nThe current help message is too much about \"normal\" macros to be used\nas general message. Keep it for normal macros, and add custom help and\nerror messages for macro definitions.", "tree": {"sha": "ba3b057300620a7413a75fcf4a94c27e69395136", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba3b057300620a7413a75fcf4a94c27e69395136"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66a12f504f149bfa487f2353df003482802a18b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66a12f504f149bfa487f2353df003482802a18b4", "html_url": "https://github.com/rust-lang/rust/commit/66a12f504f149bfa487f2353df003482802a18b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66a12f504f149bfa487f2353df003482802a18b4/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "176ee349a704a1aee9dfb79c27c5da20db7942a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/176ee349a704a1aee9dfb79c27c5da20db7942a5", "html_url": "https://github.com/rust-lang/rust/commit/176ee349a704a1aee9dfb79c27c5da20db7942a5"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "d5947ba7ad9bd488bc496f6c6ba0d978a149e03e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/66a12f504f149bfa487f2353df003482802a18b4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a12f504f149bfa487f2353df003482802a18b4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=66a12f504f149bfa487f2353df003482802a18b4", "patch": "@@ -67,7 +67,7 @@ use parse::classify;\n use parse::common::{SeqSep, seq_sep_none, seq_sep_trailing_allowed};\n use parse::lexer::{Reader, TokenAndSpan};\n use parse::obsolete::{ParserObsoleteMethods, ObsoleteSyntax};\n-use parse::token::{self, MatchNt, SubstNt, SpecialVarNt, InternedString};\n+use parse::token::{self, intern, MatchNt, SubstNt, SpecialVarNt, InternedString};\n use parse::token::{keywords, special_idents, SpecialMacroVar};\n use parse::{new_sub_parser_from_file, ParseSess};\n use util::parser::{AssocOp, Fixity};\n@@ -4612,10 +4612,20 @@ impl<'a> Parser<'a> {\n     fn complain_if_pub_macro(&mut self, visa: Visibility, span: Span) {\n         match visa {\n             Public => {\n-                self.diagnostic().struct_span_err(span, \"can't qualify macro invocation with `pub`\")\n-                                 .fileline_help(span, \"try adjusting the macro to put `pub` inside \\\n-                                                       the invocation\")\n-                                 .emit();\n+                let is_macro_rules :bool = match self.token {\n+                    token::Ident(sid, _) => sid.name == intern(\"macro_rules\"),\n+                    _ => false,\n+                };\n+                if is_macro_rules {\n+                    self.diagnostic().struct_span_err(span, \"can't qualify macro_rules invocation with `pub`\")\n+                                     .fileline_help(span, \"did you mean #[macro_export]?\")\n+                                     .emit();\n+                } else {\n+                    self.diagnostic().struct_span_err(span, \"can't qualify macro invocation with `pub`\")\n+                                     .fileline_help(span, \"try adjusting the macro to put `pub` \\\n+                                                           inside the invocation\")\n+                                     .emit();\n+                }\n             }\n             Inherited => (),\n         }"}, {"sha": "93b992f2f8af22d15d82a0b3968cf4173a387ddc", "filename": "src/test/compile-fail/pub-macro-rules.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/66a12f504f149bfa487f2353df003482802a18b4/src%2Ftest%2Fcompile-fail%2Fpub-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66a12f504f149bfa487f2353df003482802a18b4/src%2Ftest%2Fcompile-fail%2Fpub-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpub-macro-rules.rs?ref=66a12f504f149bfa487f2353df003482802a18b4", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_use] mod bleh {\n+    pub macro_rules! foo { //~ ERROR can't qualify macro_rules invocation with `pub`\n+    //~^ HELP did you mean #[macro_export]?\n+        ($n:ident) => (\n+            fn $n () -> i32 {\n+                1\n+            }\n+        )\n+    }\n+\n+}\n+\n+foo!(meh);\n+\n+fn main() {\n+    println!(\"{}\", meh());\n+}"}]}