{"sha": "1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmODU1M2Q2NmZmOGFhMjVlNTRiYzVhNWJlODU1MGNkZmUxZWU0NzY=", "commit": {"author": {"name": "rchaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-03-16T14:13:10Z"}, "committer": {"name": "rchaser53", "email": "tayoshizawa29@gmail.com", "date": "2019-03-20T15:18:51Z"}, "message": "add new attribute rustfmt::skip::macros\n\nadd test for function not having attribute", "tree": {"sha": "b75128d29ffd17debba3407c5e5c4b221ba2ac5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b75128d29ffd17debba3407c5e5c4b221ba2ac5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476", "html_url": "https://github.com/rust-lang/rust/commit/1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476/comments", "author": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rchaser53", "id": 9676954, "node_id": "MDQ6VXNlcjk2NzY5NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9676954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rchaser53", "html_url": "https://github.com/rchaser53", "followers_url": "https://api.github.com/users/rchaser53/followers", "following_url": "https://api.github.com/users/rchaser53/following{/other_user}", "gists_url": "https://api.github.com/users/rchaser53/gists{/gist_id}", "starred_url": "https://api.github.com/users/rchaser53/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rchaser53/subscriptions", "organizations_url": "https://api.github.com/users/rchaser53/orgs", "repos_url": "https://api.github.com/users/rchaser53/repos", "events_url": "https://api.github.com/users/rchaser53/events{/privacy}", "received_events_url": "https://api.github.com/users/rchaser53/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "393d7217ae990e05e036df4785ae5143da6aff2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/393d7217ae990e05e036df4785ae5143da6aff2e", "html_url": "https://github.com/rust-lang/rust/commit/393d7217ae990e05e036df4785ae5143da6aff2e"}], "stats": {"total": 116, "additions": 103, "deletions": 13}, "files": [{"sha": "1f8d08704ba8d6df8806dd2c553cca16635cada0", "filename": "src/expr.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476", "patch": "@@ -190,13 +190,20 @@ pub fn format_expr(\n             rewrite_chain(expr, context, shape)\n         }\n         ast::ExprKind::Mac(ref mac) => {\n-            rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n-                wrap_str(\n-                    context.snippet(expr.span).to_owned(),\n-                    context.config.max_width(),\n-                    shape,\n-                )\n-            })\n+            let should_skip = context\n+                .skip_macro_names\n+                .contains(&context.snippet(mac.node.path.span).to_owned());\n+            if should_skip {\n+                None\n+            } else {\n+                rewrite_macro(mac, None, context, shape, MacroPosition::Expression).or_else(|| {\n+                    wrap_str(\n+                        context.snippet(expr.span).to_owned(),\n+                        context.config.max_width(),\n+                        shape,\n+                    )\n+                })\n+            }\n         }\n         ast::ExprKind::Ret(None) => Some(\"return\".to_owned()),\n         ast::ExprKind::Ret(Some(ref expr)) => {\n@@ -1920,6 +1927,7 @@ pub fn rewrite_assign_rhs_with<S: Into<String>, R: Rewrite>(\n         offset: shape.offset + last_line_width + 1,\n         ..shape\n     });\n+    // dbg!(\n     let rhs = choose_rhs(\n         context,\n         ex,"}, {"sha": "01ba5410896e2d3f958503e95d8ef35a935cd35b", "filename": "src/rewrite.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476", "patch": "@@ -39,6 +39,7 @@ pub struct RewriteContext<'a> {\n     // Used for `format_snippet`\n     pub(crate) macro_rewrite_failure: RefCell<bool>,\n     pub(crate) report: FormatReport,\n+    pub skip_macro_names: Vec<String>,\n }\n \n impl<'a> RewriteContext<'a> {"}, {"sha": "ada69d860d8555c8ba444ab6f1b7f85d0b7d45e5", "filename": "src/visitor.rs", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476", "patch": "@@ -1,7 +1,8 @@\n use std::cell::RefCell;\n \n-use syntax::parse::ParseSess;\n+use syntax::parse::{token, ParseSess};\n use syntax::source_map::{self, BytePos, Pos, SourceMap, Span};\n+use syntax::tokenstream::TokenTree;\n use syntax::{ast, visit};\n \n use crate::attr::*;\n@@ -66,6 +67,7 @@ pub struct FmtVisitor<'a> {\n     pub skipped_range: Vec<(usize, usize)>,\n     pub macro_rewrite_failure: bool,\n     pub(crate) report: FormatReport,\n+    pub skip_macro_names: Vec<String>,\n }\n \n impl<'a> Drop for FmtVisitor<'a> {\n@@ -331,6 +333,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 }\n             }\n         }\n+        self.get_skip_macros(&attrs);\n \n         match item.node {\n             ast::ItemKind::Use(ref tree) => self.format_import(item, tree),\n@@ -437,7 +440,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 );\n                 self.push_rewrite(item.span, rewrite);\n             }\n-        }\n+        };\n+        self.skip_macro_names.clear();\n     }\n \n     pub fn visit_trait_item(&mut self, ti: &ast::TraitItem) {\n@@ -616,6 +620,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             skipped_range: vec![],\n             macro_rewrite_failure: false,\n             report,\n+            skip_macro_names: vec![],\n         }\n     }\n \n@@ -640,10 +645,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                         ErrorKind::DeprecatedAttr,\n                     )],\n                 );\n-            } else if attr.path.segments[0].ident.to_string() == \"rustfmt\"\n-                && (attr.path.segments.len() == 1\n-                    || attr.path.segments[1].ident.to_string() != \"skip\")\n-            {\n+            } else if self.is_rustfmt_macro_error(&attr.path.segments) {\n                 let file_name = self.source_map.span_to_filename(attr.span).into();\n                 self.report.append(\n                     file_name,\n@@ -671,6 +673,20 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         false\n     }\n \n+    fn is_rustfmt_macro_error(&self, segments: &Vec<syntax::ast::PathSegment>) -> bool {\n+        if segments[0].ident.to_string() != \"rustfmt\" {\n+            return false;\n+        }\n+\n+        match segments.len() {\n+            2 => segments[1].ident.to_string() != \"skip\",\n+            3 => {\n+                segments[1].ident.to_string() != \"skip\" || segments[2].ident.to_string() != \"macros\"\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     fn walk_mod_items(&mut self, m: &ast::Mod) {\n         self.visit_items_with_reordering(&ptr_vec_to_ref_vec(&m.items));\n     }\n@@ -817,6 +833,25 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             snippet_provider: self.snippet_provider,\n             macro_rewrite_failure: RefCell::new(false),\n             report: self.report.clone(),\n+            skip_macro_names: self.skip_macro_names.clone(),\n+        }\n+    }\n+\n+    pub fn get_skip_macros(&mut self, attrs: &[ast::Attribute]) {\n+        for attr in attrs {\n+            for token in attr.tokens.trees() {\n+                if let TokenTree::Delimited(_, _, stream) = token {\n+                    for inner_token in stream.trees() {\n+                        if let TokenTree::Token(span, token) = inner_token {\n+                            if let token::Token::Ident(_, _) = token {\n+                                // FIXME ident.span.lo() and ident.span.hi() are 0\n+                                let macro_name = self.get_context().snippet(span).to_owned();\n+                                self.skip_macro_names.push(macro_name);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "5d753ef0c4d3b609ccd12a68933f7363296d94a5", "filename": "tests/source/issue-3434.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476/tests%2Fsource%2Fissue-3434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476/tests%2Fsource%2Fissue-3434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3434.rs?ref=1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476", "patch": "@@ -0,0 +1,22 @@\n+#[rustfmt::skip::macros(html, skip_macro)]\n+fn main() {\n+    let macro_result1 = html! { <div>\n+Hello</div>\n+    }.to_string();\n+\n+    let macro_result2 = not_skip_macro! { <div>\n+Hello</div>\n+    }.to_string();\n+\n+    skip_macro! {\n+this is a skip_macro here\n+};\n+\n+  foo();\n+}\n+\n+fn foo() {\n+    let macro_result1 = html! { <div>\n+Hello</div>\n+    }.to_string();\n+}"}, {"sha": "44171bb83fb33364fc465e19711004e75c20551b", "filename": "tests/target/issue-3434.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476/tests%2Ftarget%2Fissue-3434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476/tests%2Ftarget%2Fissue-3434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3434.rs?ref=1f8553d66ff8aa25e54bc5a5be8550cdfe1ee476", "patch": "@@ -0,0 +1,24 @@\n+#[rustfmt::skip::macros(html, skip_macro)]\n+fn main() {\n+    let macro_result1 = html! { <div>\n+Hello</div>\n+    }.to_string();\n+\n+    let macro_result2 = not_skip_macro! { <div>\n+    Hello</div>\n+        }\n+    .to_string();\n+\n+    skip_macro! {\n+this is a skip_macro here\n+};\n+\n+    foo();\n+}\n+\n+fn foo() {\n+    let macro_result1 = html! { <div>\n+    Hello</div>\n+        }\n+    .to_string();\n+}"}]}