{"sha": "5b3145574e828659cb9c6d671a4b19ac3989b0b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMzE0NTU3NGU4Mjg2NTljYjljNmQ2NzFhNGIxOWFjMzk4OWIwYjQ=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-30T00:52:12Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-30T02:20:33Z"}, "message": "Priority levels", "tree": {"sha": "bf3d9f6d913a34b1895e9cd309597ad239975d4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf3d9f6d913a34b1895e9cd309597ad239975d4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b3145574e828659cb9c6d671a4b19ac3989b0b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3145574e828659cb9c6d671a4b19ac3989b0b4", "html_url": "https://github.com/rust-lang/rust/commit/5b3145574e828659cb9c6d671a4b19ac3989b0b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b3145574e828659cb9c6d671a4b19ac3989b0b4/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a23297f5c05d956f33ad0b515cc4daf99a2be4f1", "html_url": "https://github.com/rust-lang/rust/commit/a23297f5c05d956f33ad0b515cc4daf99a2be4f1"}], "stats": {"total": 84, "additions": 74, "deletions": 10}, "files": [{"sha": "c08f4b0ea51b8712593a491ddd1fa27c4cd275b9", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5b3145574e828659cb9c6d671a4b19ac3989b0b4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3145574e828659cb9c6d671a4b19ac3989b0b4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=5b3145574e828659cb9c6d671a4b19ac3989b0b4", "patch": "@@ -3,6 +3,7 @@\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::mir;\n use rustc_session::config::nightly_options;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n@@ -17,6 +18,15 @@ pub enum Status {\n     Forbidden,\n }\n \n+#[derive(Clone, Copy)]\n+pub enum DiagnosticImportance {\n+    /// An operation that must be removed for const-checking to pass.\n+    Primary,\n+\n+    /// An operation that causes const-checking to fail, but is usually a side-effect of a `Primary` operation elsewhere.\n+    Secondary,\n+}\n+\n /// An operation that is not *always* allowed in a const context.\n pub trait NonConstOp: std::fmt::Debug {\n     const STOPS_CONST_CHECKING: bool = false;\n@@ -26,6 +36,10 @@ pub trait NonConstOp: std::fmt::Debug {\n         Status::Forbidden\n     }\n \n+    fn importance(&self) -> DiagnosticImportance {\n+        DiagnosticImportance::Primary\n+    }\n+\n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         let mut err = struct_span_err!(\n             ccx.tcx.sess,\n@@ -318,6 +332,11 @@ impl NonConstOp for MutDeref {\n         Status::Unstable(sym::const_mut_refs)\n     }\n \n+    fn importance(&self) -> DiagnosticImportance {\n+        // Usually a side-effect of a `MutBorrow` somewhere.\n+        DiagnosticImportance::Secondary\n+    }\n+\n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n@@ -513,12 +532,21 @@ pub mod ty {\n     use super::*;\n \n     #[derive(Debug)]\n-    pub struct MutRef;\n+    pub struct MutRef(pub mir::LocalKind);\n     impl NonConstOp for MutRef {\n         fn status_in_item(&self, _ccx: &ConstCx<'_, '_>) -> Status {\n             Status::Unstable(sym::const_mut_refs)\n         }\n \n+        fn importance(&self) -> DiagnosticImportance {\n+            match self.0 {\n+                mir::LocalKind::Var | mir::LocalKind::Temp => DiagnosticImportance::Secondary,\n+                mir::LocalKind::ReturnPointer | mir::LocalKind::Arg => {\n+                    DiagnosticImportance::Primary\n+                }\n+            }\n+        }\n+\n         fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n@@ -530,10 +558,19 @@ pub mod ty {\n     }\n \n     #[derive(Debug)]\n-    pub struct FnPtr;\n+    pub struct FnPtr(pub mir::LocalKind);\n     impl NonConstOp for FnPtr {\n         const STOPS_CONST_CHECKING: bool = true;\n \n+        fn importance(&self) -> DiagnosticImportance {\n+            match self.0 {\n+                mir::LocalKind::Var | mir::LocalKind::Temp => DiagnosticImportance::Secondary,\n+                mir::LocalKind::ReturnPointer | mir::LocalKind::Arg => {\n+                    DiagnosticImportance::Primary\n+                }\n+            }\n+        }\n+\n         fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n             if ccx.const_kind() != hir::ConstContext::ConstFn {\n                 Status::Allowed"}, {"sha": "e0dd7970883211911039839cb51848429da668ff", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5b3145574e828659cb9c6d671a4b19ac3989b0b4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3145574e828659cb9c6d671a4b19ac3989b0b4/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=5b3145574e828659cb9c6d671a4b19ac3989b0b4", "patch": "@@ -1,6 +1,6 @@\n //! The `Visitor` responsible for actually checking a `mir::Body` for invalid operations.\n \n-use rustc_errors::{struct_span_err, Applicability};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::{self as hir, HirId, LangItem};\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -15,6 +15,7 @@ use rustc_span::{sym, Span, Symbol};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::{self, TraitEngine};\n \n+use std::mem;\n use std::ops::Deref;\n \n use super::ops::{self, NonConstOp, Status};\n@@ -181,6 +182,9 @@ pub struct Validator<'mir, 'tcx> {\n     span: Span,\n \n     const_checking_stopped: bool,\n+\n+    error_emitted: bool,\n+    secondary_errors: Vec<Diagnostic>,\n }\n \n impl Deref for Validator<'mir, 'tcx> {\n@@ -198,6 +202,8 @@ impl Validator<'mir, 'tcx> {\n             ccx,\n             qualifs: Default::default(),\n             const_checking_stopped: false,\n+            error_emitted: false,\n+            secondary_errors: Vec::new(),\n         }\n     }\n \n@@ -230,20 +236,20 @@ impl Validator<'mir, 'tcx> {\n \n             self.check_item_predicates();\n \n-            for local in &body.local_decls {\n+            for (idx, local) in body.local_decls.iter_enumerated() {\n                 if local.internal {\n                     continue;\n                 }\n \n                 self.span = local.source_info.span;\n-                self.check_local_or_return_ty(local.ty);\n+                self.check_local_or_return_ty(local.ty, idx);\n             }\n \n             // impl trait is gone in MIR, so check the return type of a const fn by its signature\n             // instead of the type of the return place.\n             self.span = body.local_decls[RETURN_PLACE].source_info.span;\n             let return_ty = tcx.fn_sig(def_id).output();\n-            self.check_local_or_return_ty(return_ty.skip_binder());\n+            self.check_local_or_return_ty(return_ty.skip_binder(), RETURN_PLACE);\n         }\n \n         self.visit_body(&body);\n@@ -257,6 +263,17 @@ impl Validator<'mir, 'tcx> {\n             let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n             check_return_ty_is_sync(tcx, &body, hir_id);\n         }\n+\n+        // If we got through const-checking without emitting any \"primary\" errors, emit any\n+        // \"secondary\" errors if they occurred.\n+        let secondary_errors = mem::take(&mut self.secondary_errors);\n+        if !self.error_emitted {\n+            for error in secondary_errors {\n+                self.tcx.sess.diagnostic().emit_diagnostic(&error);\n+            }\n+        } else {\n+            assert!(self.tcx.sess.has_errors());\n+        }\n     }\n \n     pub fn qualifs_in_return_place(&mut self) -> ConstQualifs {\n@@ -301,7 +318,15 @@ impl Validator<'mir, 'tcx> {\n \n         let mut err = op.build_error(self.ccx, span);\n         assert!(err.is_error());\n-        err.emit();\n+\n+        match op.importance() {\n+            ops::DiagnosticImportance::Primary => {\n+                self.error_emitted = true;\n+                err.emit();\n+            }\n+\n+            ops::DiagnosticImportance::Secondary => err.buffer(&mut self.secondary_errors),\n+        }\n \n         if O::STOPS_CONST_CHECKING {\n             self.const_checking_stopped = true;\n@@ -316,7 +341,9 @@ impl Validator<'mir, 'tcx> {\n         self.check_op_spanned(ops::StaticAccess, span)\n     }\n \n-    fn check_local_or_return_ty(&mut self, ty: Ty<'tcx>) {\n+    fn check_local_or_return_ty(&mut self, ty: Ty<'tcx>, local: Local) {\n+        let kind = self.body.local_kind(local);\n+\n         for ty in ty.walk() {\n             let ty = match ty.unpack() {\n                 GenericArgKind::Type(ty) => ty,\n@@ -327,9 +354,9 @@ impl Validator<'mir, 'tcx> {\n             };\n \n             match *ty.kind() {\n-                ty::Ref(_, _, hir::Mutability::Mut) => self.check_op(ops::ty::MutRef),\n+                ty::Ref(_, _, hir::Mutability::Mut) => self.check_op(ops::ty::MutRef(kind)),\n                 ty::Opaque(..) => self.check_op(ops::ty::ImplTrait),\n-                ty::FnPtr(..) => self.check_op(ops::ty::FnPtr),\n+                ty::FnPtr(..) => self.check_op(ops::ty::FnPtr(kind)),\n \n                 ty::Dynamic(preds, _) => {\n                     for pred in preds.iter() {"}]}