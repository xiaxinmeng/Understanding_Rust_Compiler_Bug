{"sha": "538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOGNkZWY2NGJhMDA4N2ZmMWQxYzI2ZDdmZTFlYWUwOTljNGQ3ZTU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-28T21:54:41Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-29T20:30:26Z"}, "message": "Use `&` to do deref coercion for `ReadOnlyBodyAndCache`", "tree": {"sha": "8de9b1283a1f1ed5148a428102f6e8bca788f5ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8de9b1283a1f1ed5148a428102f6e8bca788f5ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "html_url": "https://github.com/rust-lang/rust/commit/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b641e9e3588f78cbef1631b64c20c6ad06734624", "url": "https://api.github.com/repos/rust-lang/rust/commits/b641e9e3588f78cbef1631b64c20c6ad06734624", "html_url": "https://github.com/rust-lang/rust/commit/b641e9e3588f78cbef1631b64c20c6ad06734624"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "5cbeea82512a3dbef0e834691ee68977bb03366f", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -20,7 +20,7 @@ pub fn non_ssa_locals<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     let mir = fx.mir;\n     let mut analyzer = LocalAnalyzer::new(fx);\n \n-    analyzer.visit_body(*mir);\n+    analyzer.visit_body(&mir);\n \n     for (local, decl) in mir.local_decls.iter_enumerated() {\n         let ty = fx.monomorphize(&decl.ty);"}, {"sha": "919d3f2ab321c8c532fbd5f2036d6c68be96c8fd", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -107,7 +107,7 @@ impl LocalsStateAtExit {\n             LocalsStateAtExit::AllAreInvalidated\n         } else {\n             let mut has_storage_dead = HasStorageDead(BitSet::new_empty(body.local_decls.len()));\n-            has_storage_dead.visit_body(*body);\n+            has_storage_dead.visit_body(&body);\n             let mut has_storage_dead_or_moved = has_storage_dead.0;\n             for move_out in &move_data.moves {\n                 if let Some(index) = move_data.base_local(move_out.path) {"}, {"sha": "e343fba329bacb75b528ee2be9b1776053e91d9c", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -1561,7 +1561,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n         let mut visitor = FakeReadCauseFinder { place, cause: None };\n-        visitor.visit_body(*self.body);\n+        visitor.visit_body(&self.body);\n         match visitor.cause {\n             Some(FakeReadCause::ForMatchGuard) => Some(\"match guard\"),\n             Some(FakeReadCause::ForIndex) => Some(\"indexing expression\"),"}, {"sha": "653578cc1562861109e80131f2611f7a3609936e", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -37,7 +37,7 @@ pub(super) fn generate_invalidates<'tcx>(\n             body: &body,\n             dominators,\n         };\n-        ig.visit_body(*body);\n+        ig.visit_body(&body);\n     }\n }\n "}, {"sha": "b6c3ae0fb876c69d2bc0686670f845f835b801d4", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -299,8 +299,8 @@ fn do_mir_borrowck<'a, 'tcx>(\n     }\n \n     dataflow::visit_results(\n-        &*body,\n-        traversal::reverse_postorder(&*body).map(|(bb, _)| bb),\n+        &body,\n+        traversal::reverse_postorder(&body).map(|(bb, _)| bb),\n         &results,\n         &mut mbcx,\n     );"}, {"sha": "9a4eeb8ffc4983f21e644f116df8bdaa2aacc4f4", "filename": "src/librustc_mir/borrow_check/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -81,7 +81,7 @@ impl LocalUseMap {\n         live_locals.iter().for_each(|&local| locals_with_use_data[local] = true);\n \n         LocalUseMapBuild { local_use_map: &mut local_use_map, elements, locals_with_use_data }\n-            .visit_body(*body);\n+            .visit_body(&body);\n \n         local_use_map\n     }"}, {"sha": "9bb1bbeaf00375d9f94366895e0376de404d8467", "filename": "src/librustc_mir/borrow_check/type_check/liveness/polonius.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -101,7 +101,7 @@ pub(super) fn populate_access_facts(\n             location_table,\n             move_data,\n         };\n-        extractor.visit_body(*body);\n+        extractor.visit_body(&body);\n \n         facts.var_dropped_at.extend(\n             dropped_at.iter().map(|&(local, location)| (local, location_table.mid_index(location))),"}, {"sha": "b8dd1010b4c8f2fd58d270872da62533242f7ca2", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -210,7 +210,7 @@ fn type_check_internal<'a, 'tcx, R>(\n     );\n     let errors_reported = {\n         let mut verifier = TypeVerifier::new(&mut checker, *body, promoted);\n-        verifier.visit_body(*body);\n+        verifier.visit_body(&body);\n         verifier.errors_reported\n     };\n \n@@ -563,7 +563,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         swap_constraints(self);\n \n-        self.visit_body(*promoted_body);\n+        self.visit_body(&promoted_body);\n \n         if !self.errors_reported {\n             // if verifier failed, don't do further checks to avoid ICEs"}, {"sha": "7fbf8842860cf0042b14a32806933a8e34384415", "filename": "src/librustc_mir/borrow_check/used_muts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fused_muts.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -32,7 +32,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 never_initialized_mut_locals: &mut never_initialized_mut_locals,\n                 mbcx: self,\n             };\n-            visitor.visit_body(*visitor.mbcx.body);\n+            visitor.visit_body(&visitor.mbcx.body);\n         }\n \n         // Take the union of the existed `used_mut` set with those variables we've found were"}, {"sha": "b0ef539d96b847f454981c04e832fc48487c9467", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -307,7 +307,7 @@ pub fn const_eval_raw_provider<'tcx>(\n     );\n \n     let res = ecx.load_mir(cid.instance.def, cid.promoted);\n-    res.and_then(|body| eval_body_using_ecx(&mut ecx, cid, *body))\n+    res.and_then(|body| eval_body_using_ecx(&mut ecx, cid, &body))\n         .and_then(|place| {\n             Ok(RawConst { alloc_id: place.ptr.assert_ptr().alloc_id, ty: place.layout.ty })\n         })"}, {"sha": "1d18279938b2521e914749b05a550d10ec9d091a", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -83,7 +83,7 @@ impl<'mir, 'tcx> MaybeRequiresStorage<'mir, 'tcx> {\n     ) -> Self {\n         MaybeRequiresStorage {\n             body,\n-            borrowed_locals: RefCell::new(ResultsRefCursor::new(*body, borrowed_locals)),\n+            borrowed_locals: RefCell::new(ResultsRefCursor::new(&body, borrowed_locals)),\n         }\n     }\n }\n@@ -250,7 +250,7 @@ impl<'mir, 'tcx> MaybeRequiresStorage<'mir, 'tcx> {\n     /// Kill locals that are fully moved and have not been borrowed.\n     fn check_for_move(&self, trans: &mut impl GenKill<Local>, loc: Location) {\n         let mut visitor = MoveVisitor { trans, borrowed_locals: &self.borrowed_locals };\n-        visitor.visit_location(*self.body, loc);\n+        visitor.visit_location(&self.body, loc);\n     }\n }\n "}, {"sha": "e42cff0269923bcbf6113644a90886e55f902605", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -1162,7 +1162,7 @@ fn collect_neighbours<'tcx>(\n     debug!(\"collect_neighbours: {:?}\", instance.def_id());\n     let body = tcx.instance_mir(instance.def);\n \n-    MirNeighborCollector { tcx, body: &body, output, instance }.visit_body(*body);\n+    MirNeighborCollector { tcx, body: &body, output, instance }.visit_body(&body);\n }\n \n fn def_id_to_string(tcx: TyCtxt<'_>, def_id: DefId) -> String {"}, {"sha": "99c3437bf69f83ce68a32e99f2348e354190e390", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -183,7 +183,7 @@ impl Validator<'a, 'mir, 'tcx> {\n             self.check_op_spanned(ops::Loop, body.span);\n         }\n \n-        self.visit_body(*body);\n+        self.visit_body(&body);\n \n         // Ensure that the end result is `Sync` in a non-thread local `static`.\n         let should_check_for_sync ="}, {"sha": "546361d62f4657df96675a320436fc2a01549c0e", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -507,7 +507,7 @@ fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult\n     // mir_built ensures that body has a computed cache, so we don't (and can't) attempt to\n     // recompute it here.\n     let body = body.unwrap_read_only();\n-    checker.visit_body(*body);\n+    checker.visit_body(&body);\n \n     check_unused_unsafe(tcx, def_id, &checker.used_unsafe, &mut checker.inherited_blocks);\n     UnsafetyCheckResult {"}, {"sha": "e17d1cf63d5ab4b3d0bd7cd8963a4b70827a2bb2", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -778,7 +778,7 @@ impl CanConstProp {\n                 trace!(\"local {:?} can't be const propagated because it's not a temporary\", local);\n             }\n         }\n-        cpv.visit_body(*body);\n+        cpv.visit_body(&body);\n         cpv.can_const_prop\n     }\n }"}, {"sha": "030df37827f98e321b130a9a3ba0301dd764c1e3", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -469,7 +469,7 @@ fn locals_live_across_suspend_points(\n     // Find the MIR locals which do not use StorageLive/StorageDead statements.\n     // The storage of these locals are always live.\n     let mut ignored = StorageIgnored(BitSet::new_filled(body.local_decls.len()));\n-    ignored.visit_body(*body);\n+    ignored.visit_body(&body);\n \n     // Calculate the MIR locals which have been previously\n     // borrowed (even if they are still active)."}, {"sha": "bb556f40387d4c890ffa420cb86cbf75fa2dc960", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -26,7 +26,7 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n         let optimizations = {\n             let read_only_cache = read_only!(body);\n             let mut optimization_finder = OptimizationFinder::new(body, tcx);\n-            optimization_finder.visit_body(*read_only_cache);\n+            optimization_finder.visit_body(&read_only_cache);\n             optimization_finder.optimizations\n         };\n "}, {"sha": "55ea1e40e0865f69edbf5e4667a4e7c5c20b9009", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -309,7 +309,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n         let locals = {\n             let read_only_cache = read_only!(body);\n             let mut marker = DeclMarker { locals: BitSet::new_empty(body.local_decls.len()), body };\n-            marker.visit_body(*read_only_cache);\n+            marker.visit_body(&read_only_cache);\n             // Return pointer and arguments are always live\n             marker.locals.insert(RETURN_PLACE);\n             for arg in body.args_iter() {"}, {"sha": "059cea86a4dfe013b9b0dbed077ff37a2528bdde", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=538cdef64ba0087ff1d1c26d7fe1eae099c4d7e5", "patch": "@@ -38,7 +38,7 @@ impl DefUseAnalysis {\n             var_debug_info_index: 0,\n             in_var_debug_info: false,\n         };\n-        finder.visit_body(*body);\n+        finder.visit_body(&body);\n         self.info = finder.info\n     }\n "}]}