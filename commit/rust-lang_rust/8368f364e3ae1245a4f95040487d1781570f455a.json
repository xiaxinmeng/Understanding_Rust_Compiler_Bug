{"sha": "8368f364e3ae1245a4f95040487d1781570f455a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNjhmMzY0ZTNhZTEyNDVhNGY5NTA0MDQ4N2QxNzgxNTcwZjQ1NWE=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-06-08T15:48:31Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-06-19T01:19:50Z"}, "message": "Add MTRef and a lock_mut function to MTLock", "tree": {"sha": "dc9aa394083f16188812e98fddf2e1b630d5a5ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc9aa394083f16188812e98fddf2e1b630d5a5ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8368f364e3ae1245a4f95040487d1781570f455a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8368f364e3ae1245a4f95040487d1781570f455a", "html_url": "https://github.com/rust-lang/rust/commit/8368f364e3ae1245a4f95040487d1781570f455a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8368f364e3ae1245a4f95040487d1781570f455a/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d86eb784d65781849189b6ffb0d23404b6d1241e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d86eb784d65781849189b6ffb0d23404b6d1241e", "html_url": "https://github.com/rust-lang/rust/commit/d86eb784d65781849189b6ffb0d23404b6d1241e"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "b82fe3ec60c3b6fcc09bb7c72129072dfcafc413", "filename": "src/librustc_data_structures/sync.rs", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8368f364e3ae1245a4f95040487d1781570f455a/src%2Flibrustc_data_structures%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8368f364e3ae1245a4f95040487d1781570f455a/src%2Flibrustc_data_structures%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsync.rs?ref=8368f364e3ae1245a4f95040487d1781570f455a", "patch": "@@ -26,6 +26,8 @@\n //!\n //! `MTLock` is a mutex which disappears if cfg!(parallel_queries) is false.\n //!\n+//! `MTRef` is a immutable refernce if cfg!(parallel_queries), and an mutable reference otherwise.\n+//!\n //! `rustc_erase_owner!` erases a OwningRef owner into Erased or Erased + Send + Sync\n //! depending on the value of cfg!(parallel_queries).\n \n@@ -126,6 +128,8 @@ cfg_if! {\n             }\n         }\n \n+        pub type MTRef<'a, T> = &'a mut T;\n+\n         #[derive(Debug)]\n         pub struct MTLock<T>(T);\n \n@@ -151,13 +155,8 @@ cfg_if! {\n             }\n \n             #[inline(always)]\n-            pub fn borrow(&self) -> &T {\n-                &self.0\n-            }\n-\n-            #[inline(always)]\n-            pub fn borrow_mut(&self) -> &T {\n-                &self.0\n+            pub fn lock_mut(&mut self) -> &mut T {\n+                &mut self.0\n             }\n         }\n \n@@ -221,7 +220,37 @@ cfg_if! {\n         pub use std::sync::Arc as Lrc;\n         pub use std::sync::Weak as Weak;\n \n-        pub use self::Lock as MTLock;\n+        pub type MTRef<'a, T> = &'a T;\n+\n+        #[derive(Debug)]\n+        pub struct MTLock<T>(Lock<T>);\n+\n+        impl<T> MTLock<T> {\n+            #[inline(always)]\n+            pub fn new(inner: T) -> Self {\n+                MTLock(Lock::new(inner))\n+            }\n+\n+            #[inline(always)]\n+            pub fn into_inner(self) -> T {\n+                self.0.into_inner()\n+            }\n+\n+            #[inline(always)]\n+            pub fn get_mut(&mut self) -> &mut T {\n+                self.0.get_mut()\n+            }\n+\n+            #[inline(always)]\n+            pub fn lock(&self) -> LockGuard<T> {\n+                self.0.lock()\n+            }\n+\n+            #[inline(always)]\n+            pub fn lock_mut(&self) -> LockGuard<T> {\n+                self.lock()\n+            }\n+        }\n \n         use parking_lot::Mutex as InnerLock;\n         use parking_lot::RwLock as InnerRwLock;"}]}