{"sha": "9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMjJmZGMxMjFhYmZkODYwZTJiN2M3NTNhYTI1NGYyYmYyOWExYTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-03T20:55:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-03T20:55:02Z"}, "message": "Rollup merge of #69860 - faern:use-assoc-int-consts, r=dtolnay\n\nUse associated numeric consts in documentation\n\nNow when the associated constants on int/float types are stabilized and the recommended way of accessing said constants (#68952). We can start using it in this repository, and recommend it via documentation example code.\n\nThis PR is the reincarnation of #67913 minus the actual adding + stabilization of said constants. (EDIT: Now it's only changing the documentation. So users will see the new consts, but we don't yet update the internal code)\n\nBecause of how fast bit rot happens to PRs that touch this many files, it does not try to replace 100% of the old usage of the constants in the entire repo, but a good chunk of them.", "tree": {"sha": "31dbf4ff88f7c4d9a709ee1643761f9294c1ee88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31dbf4ff88f7c4d9a709ee1643761f9294c1ee88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeh6KmCRBK7hj4Ov3rIwAAdHIIAAFjZRkMT2yPnGngIS5ZPD29\nPyHY0XYbEfnP3taLr92Znig5Uuga/l+h9wxb8MqEHx/BCV9BQyJi7WiY8q8qHY1D\ny3DZI0V9g91jKl9fYXjw62NCvjjYzcdCWqssnxIyHaPYTxrxFkrNKES6pE2E8UZM\nYefA5qMczQeZnvDiDSWgDV+icA7xEVNzNDE5/x3xzLh65mU0pFL2CKZyUfDvp9of\naI8soI5pTYKEy3BY/VI5A2zGgsuzF88uZpytNHoTJizRkAHCldzvHl76GLqdXPob\nyaPgGqkCajV0cNaGnysQWyn5s283adZ4gjLKbJnQZWRHddXSZ4c8/98pRnwVtc8=\n=3bf4\n-----END PGP SIGNATURE-----\n", "payload": "tree 31dbf4ff88f7c4d9a709ee1643761f9294c1ee88\nparent f6fe99c798cb65280a9a56f442b371adcb7b8aa2\nparent c8312659403397c9fe4fcb2fd006268a7031d7a8\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585947302 +0200\ncommitter GitHub <noreply@github.com> 1585947302 +0200\n\nRollup merge of #69860 - faern:use-assoc-int-consts, r=dtolnay\n\nUse associated numeric consts in documentation\n\nNow when the associated constants on int/float types are stabilized and the recommended way of accessing said constants (#68952). We can start using it in this repository, and recommend it via documentation example code.\n\nThis PR is the reincarnation of #67913 minus the actual adding + stabilization of said constants. (EDIT: Now it's only changing the documentation. So users will see the new consts, but we don't yet update the internal code)\n\nBecause of how fast bit rot happens to PRs that touch this many files, it does not try to replace 100% of the old usage of the constants in the entire repo, but a good chunk of them.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "html_url": "https://github.com/rust-lang/rust/commit/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6fe99c798cb65280a9a56f442b371adcb7b8aa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6fe99c798cb65280a9a56f442b371adcb7b8aa2", "html_url": "https://github.com/rust-lang/rust/commit/f6fe99c798cb65280a9a56f442b371adcb7b8aa2"}, {"sha": "c8312659403397c9fe4fcb2fd006268a7031d7a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8312659403397c9fe4fcb2fd006268a7031d7a8", "html_url": "https://github.com/rust-lang/rust/commit/c8312659403397c9fe4fcb2fd006268a7031d7a8"}], "stats": {"total": 70, "additions": 34, "deletions": 36}, "files": [{"sha": "2ce5bc8ed2f9db71a570c49fb114f0781308ad86", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -432,7 +432,7 @@ impl<T> [T] {\n     ///\n     /// ```should_panic\n     /// // this will panic at runtime\n-    /// b\"0123456789abcdef\".repeat(usize::max_value());\n+    /// b\"0123456789abcdef\".repeat(usize::MAX);\n     /// ```\n     #[stable(feature = \"repeat_generic_slice\", since = \"1.40.0\")]\n     pub fn repeat(&self, n: usize) -> Vec<T>"}, {"sha": "70860c09a2c31d0b031b753253265b667e391311", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -499,7 +499,7 @@ impl str {\n     ///\n     /// ```should_panic\n     /// // this will panic at runtime\n-    /// \"0123456789abcdef\".repeat(usize::max_value());\n+    /// \"0123456789abcdef\".repeat(usize::MAX);\n     /// ```\n     #[stable(feature = \"repeat_str\", since = \"1.16.0\")]\n     pub fn repeat(&self, n: usize) -> String {"}, {"sha": "8c542136a7fa6523a804a2a97f82ae6d2ee9b00e", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -817,7 +817,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     /// When comparison is impossible:\n     ///\n     /// ```\n-    /// let result = std::f64::NAN.partial_cmp(&1.0);\n+    /// let result = f64::NAN.partial_cmp(&1.0);\n     /// assert_eq!(result, None);\n     /// ```\n     #[must_use]"}, {"sha": "95411b525d0db3934f1dd40d703be0c505455f83", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -852,7 +852,7 @@ pub trait LowerHex {\n ///     }\n /// }\n ///\n-/// let l = Length(i32::max_value());\n+/// let l = Length(i32::MAX);\n ///\n /// assert_eq!(format!(\"l as hex is: {:X}\", l), \"l as hex is: 7FFFFFFF\");\n ///"}, {"sha": "d406b3ce6ef6e88c0c1e54155e88b1eb57f7dded", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -43,7 +43,7 @@ use crate::intrinsics;\n ///\n /// assert_eq!(div_1(7, 0), 7);\n /// assert_eq!(div_1(9, 1), 4);\n-/// assert_eq!(div_1(11, std::u32::MAX), 0);\n+/// assert_eq!(div_1(11, u32::MAX), 0);\n /// ```\n #[inline]\n #[stable(feature = \"unreachable\", since = \"1.27.0\")]"}, {"sha": "4a11fb393899f26acccfe05b13f9d23f33c0394e", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -1739,19 +1739,19 @@ extern \"rust-intrinsic\" {\n     pub fn mul_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n \n     /// Performs an exact division, resulting in undefined behavior where\n-    /// `x % y != 0` or `y == 0` or `x == T::min_value() && y == -1`\n+    /// `x % y != 0` or `y == 0` or `x == T::MIN && y == -1`\n     pub fn exact_div<T: Copy>(x: T, y: T) -> T;\n \n     /// Performs an unchecked division, resulting in undefined behavior\n-    /// where y = 0 or x = `T::min_value()` and y = -1\n+    /// where y = 0 or x = `T::MIN` and y = -1\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `checked_div` method. For example,\n     /// [`std::u32::checked_div`](../../std/primitive.u32.html#method.checked_div)\n     #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_div<T: Copy>(x: T, y: T) -> T;\n     /// Returns the remainder of an unchecked division, resulting in\n-    /// undefined behavior where y = 0 or x = `T::min_value()` and y = -1\n+    /// undefined behavior where y = 0 or x = `T::MIN` and y = -1\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `checked_rem` method. For example,\n@@ -1777,17 +1777,17 @@ extern \"rust-intrinsic\" {\n     pub fn unchecked_shr<T: Copy>(x: T, y: T) -> T;\n \n     /// Returns the result of an unchecked addition, resulting in\n-    /// undefined behavior when `x + y > T::max_value()` or `x + y < T::min_value()`.\n+    /// undefined behavior when `x + y > T::MAX` or `x + y < T::MIN`.\n     #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_add<T: Copy>(x: T, y: T) -> T;\n \n     /// Returns the result of an unchecked subtraction, resulting in\n-    /// undefined behavior when `x - y > T::max_value()` or `x - y < T::min_value()`.\n+    /// undefined behavior when `x - y > T::MAX` or `x - y < T::MIN`.\n     #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_sub<T: Copy>(x: T, y: T) -> T;\n \n     /// Returns the result of an unchecked multiplication, resulting in\n-    /// undefined behavior when `x * y > T::max_value()` or `x * y < T::min_value()`.\n+    /// undefined behavior when `x * y > T::MAX` or `x * y < T::MIN`.\n     #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_mul<T: Copy>(x: T, y: T) -> T;\n "}, {"sha": "c8829817e190cbdd00e516c68fcd6a53461bec94", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -198,7 +198,7 @@ pub trait Iterator {\n     /// // and the maximum possible lower bound\n     /// let iter = 0..;\n     ///\n-    /// assert_eq!((usize::max_value(), None), iter.size_hint());\n+    /// assert_eq!((usize::MAX, None), iter.size_hint());\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2920,7 +2920,7 @@ pub trait Iterator {\n     /// assert_eq!([1.].iter().partial_cmp([1., 2.].iter()), Some(Ordering::Less));\n     /// assert_eq!([1., 2.].iter().partial_cmp([1.].iter()), Some(Ordering::Greater));\n     ///\n-    /// assert_eq!([std::f64::NAN].iter().partial_cmp([1.].iter()), None);\n+    /// assert_eq!([f64::NAN].iter().partial_cmp([1.].iter()), None);\n     /// ```\n     #[stable(feature = \"iter_order\", since = \"1.5.0\")]\n     fn partial_cmp<I>(self, other: I) -> Option<Ordering>\n@@ -3170,7 +3170,7 @@ pub trait Iterator {\n     /// assert!(![1, 3, 2, 4].iter().is_sorted());\n     /// assert!([0].iter().is_sorted());\n     /// assert!(std::iter::empty::<i32>().is_sorted());\n-    /// assert!(![0.0, 1.0, std::f32::NAN].iter().is_sorted());\n+    /// assert!(![0.0, 1.0, f32::NAN].iter().is_sorted());\n     /// ```\n     #[inline]\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n@@ -3197,7 +3197,7 @@ pub trait Iterator {\n     /// assert!(![1, 3, 2, 4].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n     /// assert!([0].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n     /// assert!(std::iter::empty::<i32>().is_sorted_by(|a, b| a.partial_cmp(b)));\n-    /// assert!(![0.0, 1.0, std::f32::NAN].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n+    /// assert!(![0.0, 1.0, f32::NAN].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n     /// ```\n     ///\n     /// [`is_sorted`]: trait.Iterator.html#method.is_sorted"}, {"sha": "4ab82add32b533825feca583522dcb6f0fd7c2b4", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -470,7 +470,7 @@ impl f32 {\n     ///\n     /// let value = -128.9_f32;\n     /// let rounded = unsafe { value.to_int_unchecked::<i8>() };\n-    /// assert_eq!(rounded, std::i8::MIN);\n+    /// assert_eq!(rounded, i8::MIN);\n     /// ```\n     ///\n     /// # Safety"}, {"sha": "20818a9b750f4c8d3c2678d4f82b96933256d6bb", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -484,7 +484,7 @@ impl f64 {\n     ///\n     /// let value = -128.9_f32;\n     /// let rounded = unsafe { value.to_int_unchecked::<i8>() };\n-    /// assert_eq!(rounded, std::i8::MIN);\n+    /// assert_eq!(rounded, i8::MIN);\n     /// ```\n     ///\n     /// # Safety"}, {"sha": "7ba4004d8609c0ad5d7d743845240e30e98db765", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -174,7 +174,7 @@ NonZeroI8 NonZeroI16 NonZeroI32 NonZeroI64 NonZeroI128 NonZeroIsize }\n /// let zero = Wrapping(0u32);\n /// let one = Wrapping(1u32);\n ///\n-/// assert_eq!(std::u32::MAX, (zero - one).0);\n+/// assert_eq!(u32::MAX, (zero - one).0);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Default, Hash)]"}, {"sha": "946a765e18f3ba5bdf043ee0261ee32e21104cf2", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -139,10 +139,9 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// ```\n     /// #![feature(range_is_empty)]\n     ///\n-    /// use std::f32::NAN;\n     /// assert!(!(3.0..5.0).is_empty());\n-    /// assert!( (3.0..NAN).is_empty());\n-    /// assert!( (NAN..5.0).is_empty());\n+    /// assert!( (3.0..f32::NAN).is_empty());\n+    /// assert!( (f32::NAN..5.0).is_empty());\n     /// ```\n     #[unstable(feature = \"range_is_empty\", reason = \"recently added\", issue = \"48111\")]\n     pub fn is_empty(&self) -> bool {\n@@ -496,10 +495,9 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// ```\n     /// #![feature(range_is_empty)]\n     ///\n-    /// use std::f32::NAN;\n     /// assert!(!(3.0..=5.0).is_empty());\n-    /// assert!( (3.0..=NAN).is_empty());\n-    /// assert!( (NAN..=5.0).is_empty());\n+    /// assert!( (3.0..=f32::NAN).is_empty());\n+    /// assert!( (f32::NAN..=5.0).is_empty());\n     /// ```\n     ///\n     /// This method returns `true` after iteration has finished:"}, {"sha": "52e224d2a026f218b0f86d2c734b6c1f159468ce", "filename": "src/libcore/ptr/const_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fconst_ptr.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -659,8 +659,8 @@ impl<T: ?Sized> *const T {\n     /// `align`.\n     ///\n     /// If it is not possible to align the pointer, the implementation returns\n-    /// `usize::max_value()`. It is permissible for the implementation to *always*\n-    /// return `usize::max_value()`. Only your algorithm's performance can depend\n+    /// `usize::MAX`. It is permissible for the implementation to *always*\n+    /// return `usize::MAX`. Only your algorithm's performance can depend\n     /// on getting a usable offset here, not its correctness.\n     ///\n     /// The offset is expressed in number of `T` elements, and not bytes. The value returned can be"}, {"sha": "9f85d781d698a5b7b88414b29eda74a1e10736ee", "filename": "src/libcore/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmut_ptr.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -847,8 +847,8 @@ impl<T: ?Sized> *mut T {\n     /// `align`.\n     ///\n     /// If it is not possible to align the pointer, the implementation returns\n-    /// `usize::max_value()`. It is permissible for the implementation to *always*\n-    /// return `usize::max_value()`. Only your algorithm's performance can depend\n+    /// `usize::MAX`. It is permissible for the implementation to *always*\n+    /// return `usize::MAX`. Only your algorithm's performance can depend\n     /// on getting a usable offset here, not its correctness.\n     ///\n     /// The offset is expressed in number of `T` elements, and not bytes. The value returned can be"}, {"sha": "9be52e2dfb06b25cf4e3d41dfaab6e691b22873b", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -2588,7 +2588,7 @@ impl<T> [T] {\n     /// assert!(![1, 3, 2, 4].is_sorted());\n     /// assert!([0].is_sorted());\n     /// assert!(empty.is_sorted());\n-    /// assert!(![0.0, 1.0, std::f32::NAN].is_sorted());\n+    /// assert!(![0.0, 1.0, f32::NAN].is_sorted());\n     /// ```\n     #[inline]\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]"}, {"sha": "924a64847a794fa568ecba9f0e556c5faa361cbb", "filename": "src/libcore/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -389,7 +389,7 @@ impl Duration {\n     /// use std::time::Duration;\n     ///\n     /// assert_eq!(Duration::new(0, 0).checked_add(Duration::new(0, 1)), Some(Duration::new(0, 1)));\n-    /// assert_eq!(Duration::new(1, 0).checked_add(Duration::new(std::u64::MAX, 0)), None);\n+    /// assert_eq!(Duration::new(1, 0).checked_add(Duration::new(u64::MAX, 0)), None);\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n     #[inline]\n@@ -460,7 +460,7 @@ impl Duration {\n     /// use std::time::Duration;\n     ///\n     /// assert_eq!(Duration::new(0, 500_000_001).checked_mul(2), Some(Duration::new(1, 2)));\n-    /// assert_eq!(Duration::new(std::u64::MAX - 1, 0).checked_mul(2), None);\n+    /// assert_eq!(Duration::new(u64::MAX - 1, 0).checked_mul(2), None);\n     /// ```\n     #[stable(feature = \"duration_checked_ops\", since = \"1.16.0\")]\n     #[inline]"}, {"sha": "4c25363a6575fb22b366295e23b8b1b984940b19", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -577,7 +577,7 @@ pub struct Scalar {\n     pub value: Primitive,\n \n     /// Inclusive wrap-around range of valid values, that is, if\n-    /// start > end, it represents `start..=max_value()`,\n+    /// start > end, it represents `start..=MAX`,\n     /// followed by `0..=end`.\n     ///\n     /// That is, for an i8 primitive, a range of `254..=2` means following"}, {"sha": "ac8f305ae9127cd54e6546308210442ba5ca681c", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -284,7 +284,7 @@ impl f32 {\n     /// assert_eq!(a.rem_euclid(-b), 3.0);\n     /// assert_eq!((-a).rem_euclid(-b), 1.0);\n     /// // limitation due to round-off error\n-    /// assert!((-std::f32::EPSILON).rem_euclid(3.0) != 0.0);\n+    /// assert!((-f32::EPSILON).rem_euclid(3.0) != 0.0);\n     /// ```\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n@@ -962,7 +962,7 @@ impl f32 {\n     /// assert!((-3.0f32).clamp(-2.0, 1.0) == -2.0);\n     /// assert!((0.0f32).clamp(-2.0, 1.0) == 0.0);\n     /// assert!((2.0f32).clamp(-2.0, 1.0) == 1.0);\n-    /// assert!((std::f32::NAN).clamp(-2.0, 1.0).is_nan());\n+    /// assert!((f32::NAN).clamp(-2.0, 1.0).is_nan());\n     /// ```\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[unstable(feature = \"clamp\", issue = \"44095\")]"}, {"sha": "798738e50a75484e18aaaa6ee6916c11b3064584", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b22fdc121abfd860e2b7c753aa254f2bf29a1a8/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=9b22fdc121abfd860e2b7c753aa254f2bf29a1a8", "patch": "@@ -280,7 +280,7 @@ impl f64 {\n     /// assert_eq!(a.rem_euclid(-b), 3.0);\n     /// assert_eq!((-a).rem_euclid(-b), 1.0);\n     /// // limitation due to round-off error\n-    /// assert!((-std::f64::EPSILON).rem_euclid(3.0) != 0.0);\n+    /// assert!((-f64::EPSILON).rem_euclid(3.0) != 0.0);\n     /// ```\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[inline]\n@@ -928,7 +928,7 @@ impl f64 {\n     /// assert!((-3.0f64).clamp(-2.0, 1.0) == -2.0);\n     /// assert!((0.0f64).clamp(-2.0, 1.0) == 0.0);\n     /// assert!((2.0f64).clamp(-2.0, 1.0) == 1.0);\n-    /// assert!((std::f64::NAN).clamp(-2.0, 1.0).is_nan());\n+    /// assert!((f64::NAN).clamp(-2.0, 1.0).is_nan());\n     /// ```\n     #[must_use = \"method returns a new number and does not mutate the original value\"]\n     #[unstable(feature = \"clamp\", issue = \"44095\")]"}]}