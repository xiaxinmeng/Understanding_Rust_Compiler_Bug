{"sha": "7d90547532012f31ad6fb1cda664bc47c558c6e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkOTA1NDc1MzIwMTJmMzFhZDZmYjFjZGE2NjRiYzQ3YzU1OGM2ZTQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-12-03T00:14:35Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-18T07:20:06Z"}, "message": "Define queries using a proc macro", "tree": {"sha": "c04eb7945ffdee8b33f352f700a8d86cc01a0e91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c04eb7945ffdee8b33f352f700a8d86cc01a0e91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d90547532012f31ad6fb1cda664bc47c558c6e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d90547532012f31ad6fb1cda664bc47c558c6e4", "html_url": "https://github.com/rust-lang/rust/commit/7d90547532012f31ad6fb1cda664bc47c558c6e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d90547532012f31ad6fb1cda664bc47c558c6e4/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03dafa7da38decbe74fcd8a23d7ec835e637c8e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/03dafa7da38decbe74fcd8a23d7ec835e637c8e4", "html_url": "https://github.com/rust-lang/rust/commit/03dafa7da38decbe74fcd8a23d7ec835e637c8e4"}], "stats": {"total": 701, "additions": 563, "deletions": 138}, "files": [{"sha": "b88ce643ea499ce0c01f1a40259c0564b458111c", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -423,7 +423,7 @@ impl DefId {\n     }\n }\n \n-define_dep_nodes!( <'tcx>\n+rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // We use this for most things when incr. comp. is turned off.\n     [] Null,\n \n@@ -492,7 +492,6 @@ define_dep_nodes!( <'tcx>\n     // table in the tcx (or elsewhere) maps to one of these\n     // nodes.\n     [] AssociatedItems(DefId),\n-    [] TypeOfItem(DefId),\n     [] GenericsOfItem(DefId),\n     [] PredicatesOfItem(DefId),\n     [] ExplicitPredicatesOfItem(DefId),\n@@ -570,7 +569,6 @@ define_dep_nodes!( <'tcx>\n     [] FnArgNames(DefId),\n     [] RenderedConst(DefId),\n     [] DylibDepFormats(CrateNum),\n-    [] IsPanicRuntime(CrateNum),\n     [] IsCompilerBuiltins(CrateNum),\n     [] HasGlobalAllocator(CrateNum),\n     [] HasPanicHandler(CrateNum),\n@@ -588,7 +586,6 @@ define_dep_nodes!( <'tcx>\n     [] CheckTraitItemWellFormed(DefId),\n     [] CheckImplItemWellFormed(DefId),\n     [] ReachableNonGenerics(CrateNum),\n-    [] NativeLibraries(CrateNum),\n     [] EntryFn(CrateNum),\n     [] PluginRegistrarFn(CrateNum),\n     [] ProcMacroDeclsStatic(CrateNum),\n@@ -679,7 +676,23 @@ define_dep_nodes!( <'tcx>\n \n     [] UpstreamMonomorphizations(CrateNum),\n     [] UpstreamMonomorphizationsFor(DefId),\n-);\n+]);\n+\n+pub trait RecoverKey<'tcx>: Sized {\n+    fn recover(tcx: TyCtxt<'_, 'tcx, 'tcx>, dep_node: &DepNode) -> Option<Self>;\n+}\n+\n+impl RecoverKey<'tcx> for CrateNum {\n+    fn recover(tcx: TyCtxt<'_, 'tcx, 'tcx>, dep_node: &DepNode) -> Option<Self> {\n+        dep_node.extract_def_id(tcx).map(|id| id.krate)\n+    }\n+}\n+\n+impl RecoverKey<'tcx> for DefId {\n+    fn recover(tcx: TyCtxt<'_, 'tcx, 'tcx>, dep_node: &DepNode) -> Option<Self> {\n+        dep_node.extract_def_id(tcx)\n+    }\n+}\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {\n     const CAN_RECONSTRUCT_QUERY_KEY: bool;"}, {"sha": "1535e6d349cf128f173e50e9239cfaa9599bb045", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -9,7 +9,7 @@ mod serialized;\n pub mod cgu_reuse_tracker;\n \n pub use self::dep_tracking_map::{DepTrackingMap, DepTrackingMapConfig};\n-pub use self::dep_node::{DepNode, DepKind, DepConstructor, WorkProductId, label_strs};\n+pub use self::dep_node::{DepNode, DepKind, DepConstructor, WorkProductId, RecoverKey, label_strs};\n pub use self::graph::{DepGraph, WorkProduct, DepNodeIndex, DepNodeColor, TaskDeps, hash_result};\n pub use self::graph::WorkProductFileKind;\n pub use self::prev::PreviousDepGraph;"}, {"sha": "4b2fda3b02f9d140db5ffef84d2935c2cf8fae35", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -60,6 +60,8 @@\n #![feature(test)]\n #![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]\n+#![feature(proc_macro_hygiene)]\n+#![feature(log_syntax)]\n \n #![recursion_limit=\"512\"]\n \n@@ -69,6 +71,7 @@ extern crate getopts;\n #[macro_use] extern crate scoped_tls;\n #[cfg(windows)]\n extern crate libc;\n+#[macro_use] extern crate rustc_macros;\n #[macro_use] extern crate rustc_data_structures;\n \n #[macro_use] extern crate log;\n@@ -96,6 +99,9 @@ mod macros;\n // registered before they are used.\n pub mod diagnostics;\n \n+#[macro_use]\n+pub mod query;\n+\n pub mod cfg;\n pub mod dep_graph;\n pub mod hir;"}, {"sha": "709d34a156ccc7e64afcd03fb1c0ab9853670107", "filename": "src/librustc/query/mod.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -0,0 +1,37 @@\n+use crate::ty::query::QueryDescription;\n+use crate::ty::query::queries;\n+use crate::ty::TyCtxt;\n+use crate::hir::def_id::CrateNum;\n+use crate::dep_graph::SerializedDepNodeIndex;\n+use std::borrow::Cow;\n+\n+// Each of these queries corresponds to a function pointer field in the\n+// `Providers` struct for requesting a value of that type, and a method\n+// on `tcx: TyCtxt` (and `tcx.at(span)`) for doing that request in a way\n+// which memoizes and does dep-graph tracking, wrapping around the actual\n+// `Providers` that the driver creates (using several `rustc_*` crates).\n+//\n+// The result type of each query must implement `Clone`, and additionally\n+// `ty::query::values::Value`, which produces an appropriate placeholder\n+// (error) value if the query resulted in a query cycle.\n+// Queries marked with `fatal_cycle` do not need the latter implementation,\n+// as they will raise an fatal error on query cycles instead.\n+rustc_queries! {\n+    Other {\n+        /// Records the type of every item.\n+        query type_of(key: DefId) -> Ty<'tcx> {\n+            cache { key.is_local() }\n+        }\n+\n+        query native_libraries(_: CrateNum) -> Lrc<Vec<NativeLibrary>> {\n+            desc { \"looking up the native libraries of a linked crate\" }\n+        }\n+    }\n+\n+    Codegen {\n+        query is_panic_runtime(_: CrateNum) -> bool {\n+            fatal_cycle\n+            desc { \"checking if the crate is_panic_runtime\" }\n+        }\n+    }\n+}"}, {"sha": "6e964fc540ee037bde8a89fcbf3fa80dab313b71", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -34,7 +34,7 @@ pub trait QueryConfig<'tcx> {\n     type Value: Clone;\n }\n \n-pub(super) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n+pub(crate) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n     fn query(key: Self::Key) -> Query<'tcx>;\n \n     // Don't use this method to access query results, instead use the methods on TyCtxt\n@@ -53,7 +53,7 @@ pub(super) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n     fn handle_cycle_error(tcx: TyCtxt<'_, 'tcx, '_>, error: CycleError<'tcx>) -> Self::Value;\n }\n \n-pub(super) trait QueryDescription<'tcx>: QueryAccessors<'tcx> {\n+pub(crate) trait QueryDescription<'tcx>: QueryAccessors<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, key: Self::Key) -> Cow<'static, str>;\n \n     #[inline]\n@@ -587,12 +587,6 @@ impl<'tcx> QueryDescription<'tcx> for queries::dylib_dependency_formats<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::is_panic_runtime<'tcx> {\n-    fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n-        \"checking if the crate is_panic_runtime\".into()\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::is_compiler_builtins<'tcx> {\n     fn describe(_: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n         \"checking if the crate is_compiler_builtins\".into()\n@@ -671,12 +665,6 @@ impl<'tcx> QueryDescription<'tcx> for queries::reachable_non_generics<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::native_libraries<'tcx> {\n-    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n-        \"looking up the native libraries of a linked crate\".into()\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::foreign_modules<'tcx> {\n     fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n         \"looking up the foreign modules of a linked crate\".into()\n@@ -1027,7 +1015,6 @@ impl_disk_cacheable_query!(borrowck, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(mir_const_qualif, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(check_match, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(def_symbol_name, |_, _| true);\n-impl_disk_cacheable_query!(type_of, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(predicates_of, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(used_trait_imports, |_, def_id| def_id.is_local());\n impl_disk_cacheable_query!(codegen_fn_attrs, |_, _| true);"}, {"sha": "bccc69af2350a56c07c58875ef9b0056152fcd5e", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -80,13 +80,14 @@ mod values;\n use self::values::Value;\n \n mod config;\n+pub(crate) use self::config::QueryDescription;\n pub use self::config::QueryConfig;\n-use self::config::{QueryAccessors, QueryDescription};\n+use self::config::QueryAccessors;\n \n mod on_disk_cache;\n pub use self::on_disk_cache::OnDiskCache;\n \n-// Each of these quries corresponds to a function pointer field in the\n+// Each of these queries corresponds to a function pointer field in the\n // `Providers` struct for requesting a value of that type, and a method\n // on `tcx: TyCtxt` (and `tcx.at(span)`) for doing that request in a way\n // which memoizes and does dep-graph tracking, wrapping around the actual\n@@ -97,14 +98,12 @@ pub use self::on_disk_cache::OnDiskCache;\n // (error) value if the query resulted in a query cycle.\n // Queries marked with `fatal_cycle` do not need the latter implementation,\n // as they will raise an fatal error on query cycles instead.\n-define_queries! { <'tcx>\n+\n+rustc_query_append! { [define_queries!][ <'tcx>\n     Other {\n         /// Run analysis passes on the crate\n         [] fn analysis: Analysis(CrateNum) -> Result<(), ErrorReported>,\n \n-        /// Records the type of every item.\n-        [] fn type_of: TypeOfItem(DefId) -> Ty<'tcx>,\n-\n         /// Maps from the `DefId` of an item (trait/struct/enum/fn) to its\n         /// associated generics.\n         [] fn generics_of: GenericsOfItem(DefId) -> &'tcx ty::Generics,\n@@ -446,7 +445,6 @@ define_queries! { <'tcx>\n     },\n \n     Codegen {\n-        [fatal_cycle] fn is_panic_runtime: IsPanicRuntime(CrateNum) -> bool,\n         [fatal_cycle] fn is_compiler_builtins: IsCompilerBuiltins(CrateNum) -> bool,\n         [fatal_cycle] fn has_global_allocator: HasGlobalAllocator(CrateNum) -> bool,\n         [fatal_cycle] fn has_panic_handler: HasPanicHandler(CrateNum) -> bool,\n@@ -504,8 +502,6 @@ define_queries! { <'tcx>\n     },\n \n     Other {\n-        [] fn native_libraries: NativeLibraries(CrateNum) -> Lrc<Vec<NativeLibrary>>,\n-\n         [] fn foreign_modules: ForeignModules(CrateNum) -> Lrc<Vec<ForeignModule>>,\n \n         /// Identifies the entry-point (e.g., the `main` function) for a given\n@@ -752,7 +748,7 @@ define_queries! { <'tcx>\n         [] fn wasm_import_module_map: WasmImportModuleMap(CrateNum)\n             -> Lrc<FxHashMap<DefId, String>>,\n     },\n-}\n+]}\n \n //////////////////////////////////////////////////////////////////////\n // These functions are little shims used to find the dep-node for a"}, {"sha": "e78d98cd4f1e124168ee991f02be9672237dae3e", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -1131,10 +1131,12 @@ macro_rules! define_provider_struct {\n /// then `force_from_dep_node()` should not fail for it. Otherwise, you can just\n /// add it to the \"We don't have enough information to reconstruct...\" group in\n /// the match below.\n-pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n-                                           dep_node: &DepNode)\n-                                           -> bool {\n+pub fn force_from_dep_node<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    dep_node: &DepNode\n+) -> bool {\n     use crate::hir::def_id::LOCAL_CRATE;\n+    use crate::dep_graph::RecoverKey;\n \n     // We must avoid ever having to call force_from_dep_node() for a\n     // DepNode::CodegenUnit:\n@@ -1171,17 +1173,26 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         () => { (def_id!()).krate }\n     };\n \n-    macro_rules! force {\n-        ($query:ident, $key:expr) => {\n+    macro_rules! force_ex {\n+        ($tcx:expr, $query:ident, $key:expr) => {\n             {\n-                tcx.force_query::<crate::ty::query::queries::$query<'_>>($key, DUMMY_SP, *dep_node);\n+                $tcx.force_query::<crate::ty::query::queries::$query<'_>>(\n+                    $key,\n+                    DUMMY_SP,\n+                    *dep_node\n+                );\n             }\n         }\n     };\n \n+    macro_rules! force {\n+        ($query:ident, $key:expr) => { force_ex!(tcx, $query, $key) }\n+    };\n+\n     // FIXME(#45015): We should try move this boilerplate code into a macro\n     //                somehow.\n-    match dep_node.kind {\n+\n+    rustc_dep_node_force!([dep_node, tcx]\n         // These are inputs that are expected to be pre-allocated and that\n         // should therefore always be red or green already\n         DepKind::AllLocalTraitImpls |\n@@ -1274,7 +1285,6 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::MirKeys => { force!(mir_keys, LOCAL_CRATE); }\n         DepKind::CrateVariances => { force!(crate_variances, LOCAL_CRATE); }\n         DepKind::AssociatedItems => { force!(associated_item, def_id!()); }\n-        DepKind::TypeOfItem => { force!(type_of, def_id!()); }\n         DepKind::GenericsOfItem => { force!(generics_of, def_id!()); }\n         DepKind::PredicatesOfItem => { force!(predicates_of, def_id!()); }\n         DepKind::PredicatesDefinedOnItem => { force!(predicates_defined_on, def_id!()); }\n@@ -1332,7 +1342,6 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::FnArgNames => { force!(fn_arg_names, def_id!()); }\n         DepKind::RenderedConst => { force!(rendered_const, def_id!()); }\n         DepKind::DylibDepFormats => { force!(dylib_dependency_formats, krate!()); }\n-        DepKind::IsPanicRuntime => { force!(is_panic_runtime, krate!()); }\n         DepKind::IsCompilerBuiltins => { force!(is_compiler_builtins, krate!()); }\n         DepKind::HasGlobalAllocator => { force!(has_global_allocator, krate!()); }\n         DepKind::HasPanicHandler => { force!(has_panic_handler, krate!()); }\n@@ -1349,7 +1358,6 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::CheckTraitItemWellFormed => { force!(check_trait_item_well_formed, def_id!()); }\n         DepKind::CheckImplItemWellFormed => { force!(check_impl_item_well_formed, def_id!()); }\n         DepKind::ReachableNonGenerics => { force!(reachable_non_generics, krate!()); }\n-        DepKind::NativeLibraries => { force!(native_libraries, krate!()); }\n         DepKind::EntryFn => { force!(entry_fn, krate!()); }\n         DepKind::PluginRegistrarFn => { force!(plugin_registrar_fn, krate!()); }\n         DepKind::ProcMacroDeclsStatic => { force!(proc_macro_decls_static, krate!()); }\n@@ -1432,7 +1440,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::BackendOptimizationLevel => {\n             force!(backend_optimization_level, krate!());\n         }\n-    }\n+    );\n \n     true\n }\n@@ -1493,7 +1501,7 @@ impl_load_from_cache!(\n     SymbolName => def_symbol_name,\n     ConstIsRvaluePromotableToStatic => const_is_rvalue_promotable_to_static,\n     CheckMatch => check_match,\n-    TypeOfItem => type_of,\n+    TypeOf => type_of,\n     GenericsOfItem => generics_of,\n     PredicatesOfItem => predicates_of,\n     UsedTraitImports => used_trait_imports,"}, {"sha": "c7a9f1afd0ac695762a9be17956c85972769adae", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -36,7 +36,7 @@ const CFG: &str = \"cfg\";\n \n /// For typedef, constants, and statics\n const BASE_CONST: &[&str] = &[\n-    label_strs::TypeOfItem,\n+    label_strs::TypeOf,\n ];\n \n /// DepNodes for functions + methods\n@@ -45,7 +45,7 @@ const BASE_FN: &[&str] = &[\n     label_strs::FnSignature,\n     label_strs::GenericsOfItem,\n     label_strs::PredicatesOfItem,\n-    label_strs::TypeOfItem,\n+    label_strs::TypeOf,\n \n     // And a big part of compilation (that we eventually want to cache) is type inference\n     // information:\n@@ -80,7 +80,7 @@ const BASE_MIR: &[&str] = &[\n const BASE_STRUCT: &[&str] = &[\n     label_strs::GenericsOfItem,\n     label_strs::PredicatesOfItem,\n-    label_strs::TypeOfItem,\n+    label_strs::TypeOf,\n ];\n \n /// Trait definition `DepNode`s.\n@@ -179,7 +179,7 @@ const LABELS_TRAIT: &[&[&str]] = &[\n // Fields are kind of separate from their containers, as they can change independently from\n // them. We should at least check\n //\n-//     TypeOfItem for these.\n+//     TypeOf for these.\n \n type Labels = FxHashSet<String>;\n "}, {"sha": "78520b6dce690730eef3f72e582caa7aef786951", "filename": "src/librustc_macros/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Flib.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -1,8 +1,19 @@\n #![feature(proc_macro_hygiene)]\n #![deny(rust_2018_idioms)]\n \n+extern crate proc_macro;\n+\n use synstructure::decl_derive;\n \n+use proc_macro::TokenStream;\n+\n mod hash_stable;\n+mod query;\n+mod tt;\n+\n+#[proc_macro]\n+pub fn rustc_queries(input: TokenStream) -> TokenStream {\n+    query::rustc_queries(input)\n+}\n \n decl_derive!([HashStable, attributes(stable_hasher)] => hash_stable::hash_stable_derive);"}, {"sha": "aeb830ff9b9dc097f83b270de034c5f6dc36444a", "filename": "src/librustc_macros/src/query.rs", "status": "added", "additions": 302, "deletions": 0, "changes": 302, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -0,0 +1,302 @@\n+use proc_macro::TokenStream;\n+use proc_macro2::Span;\n+use syn::{\n+    Token, Ident, Type, Attribute, ReturnType, Expr,\n+    braced, parenthesized, parse_macro_input,\n+};\n+use syn::parse::{Result, Parse, ParseStream};\n+use syn::punctuated::Punctuated;\n+use quote::quote;\n+use crate::tt::TS;\n+\n+struct IdentOrWild(Ident);\n+\n+impl Parse for IdentOrWild {\n+    fn parse(input: ParseStream<'_>) -> Result<Self> {\n+        Ok(if input.peek(Token![_]) {\n+            input.parse::<Token![_]>()?;\n+            IdentOrWild(Ident::new(\"_\", Span::call_site()))\n+        } else {\n+            IdentOrWild(input.parse()?)\n+        })\n+    }\n+}\n+\n+enum QueryAttribute {\n+    Desc(Option<Ident>, Punctuated<Expr, Token![,]>),\n+    Cache(Option<Ident>, Expr),\n+    FatalCycle,\n+}\n+\n+impl Parse for QueryAttribute {\n+    fn parse(input: ParseStream<'_>) -> Result<Self> {\n+        let attr: Ident = input.parse()?;\n+        if attr == \"desc\" {\n+            let attr_content;\n+            braced!(attr_content in input);\n+            let tcx = if attr_content.peek(Token![|]) {\n+                attr_content.parse::<Token![|]>()?;\n+                let tcx = attr_content.parse()?;\n+                attr_content.parse::<Token![|]>()?;\n+                Some(tcx)\n+            } else {\n+                None\n+            };\n+            let desc = attr_content.parse_terminated(Expr::parse)?;\n+            if !attr_content.is_empty() {\n+                panic!(\"unexpected tokens in block\");\n+            };\n+            Ok(QueryAttribute::Desc(tcx, desc))\n+        } else if attr == \"cache\" {\n+            let attr_content;\n+            braced!(attr_content in input);\n+            let tcx = if attr_content.peek(Token![|]) {\n+                attr_content.parse::<Token![|]>()?;\n+                let tcx = attr_content.parse()?;\n+                attr_content.parse::<Token![|]>()?;\n+                Some(tcx)\n+            } else {\n+                None\n+            };\n+            let expr = attr_content.parse()?;\n+            if !attr_content.is_empty() {\n+                panic!(\"unexpected tokens in block\");\n+            };\n+            Ok(QueryAttribute::Cache(tcx, expr))\n+        } else if attr == \"fatal_cycle\" {\n+            Ok(QueryAttribute::FatalCycle)\n+        } else {\n+            panic!(\"unknown query modifier {}\", attr)\n+        }\n+    }\n+}\n+\n+struct Query {\n+    attrs: List<QueryAttribute>,\n+    name: Ident,\n+    key: IdentOrWild,\n+    arg: Type,\n+    result: ReturnType,\n+}\n+\n+fn check_attributes(attrs: Vec<Attribute>) {\n+    for attr in attrs {\n+        let path = attr.path;\n+        let path = quote! { #path };\n+        let path = TS(&path);\n+\n+        if path != TS(&quote! { doc }) {\n+            panic!(\"attribute `{}` not supported on queries\", path.0)\n+        }\n+    }\n+}\n+\n+impl Parse for Query {\n+    fn parse(input: ParseStream<'_>) -> Result<Self> {\n+        check_attributes(input.call(Attribute::parse_outer)?);\n+\n+        let query: Ident = input.parse()?;\n+        if query != \"query\" {\n+            panic!(\"expected `query`\");\n+        }\n+        let name: Ident = input.parse()?;\n+        let arg_content;\n+        parenthesized!(arg_content in input);\n+        let key = arg_content.parse()?;\n+        arg_content.parse::<Token![:]>()?;\n+        let arg = arg_content.parse()?;\n+        if !arg_content.is_empty() {\n+            panic!(\"expected only one query argument\");\n+        };\n+        let result = input.parse()?;\n+\n+        let content;\n+        braced!(content in input);\n+        let attrs = content.parse()?;\n+\n+        Ok(Query {\n+            attrs,\n+            name,\n+            key,\n+            arg,\n+            result,\n+        })\n+    }\n+}\n+\n+struct List<T>(Vec<T>);\n+\n+impl<T: Parse> Parse for List<T> {\n+    fn parse(input: ParseStream<'_>) -> Result<Self> {\n+        let mut list = Vec::new();\n+        while !input.is_empty() {\n+            list.push(input.parse()?);\n+        }\n+        Ok(List(list))\n+    }\n+}\n+\n+struct Group {\n+    name: Ident,\n+    queries: List<Query>,\n+}\n+\n+impl Parse for Group {\n+    fn parse(input: ParseStream<'_>) -> Result<Self> {\n+        let name: Ident = input.parse()?;\n+        let content;\n+        braced!(content in input);\n+        Ok(Group {\n+            name,\n+            queries: content.parse()?,\n+        })\n+    }\n+}\n+\n+fn camel_case(string: &str) -> String {\n+    let mut pos = vec![0];\n+    for (i, c) in string.chars().enumerate() {\n+        if c == '_' {\n+            pos.push(i + 1);\n+        }\n+    }\n+    string.chars().enumerate().filter(|c| c.1 != '_').flat_map(|(i, c)| {\n+        if pos.contains(&i) {\n+            c.to_uppercase().collect::<Vec<char>>()\n+        } else {\n+            vec![c]\n+        }\n+    }).collect()\n+}\n+\n+pub fn rustc_queries(input: TokenStream) -> TokenStream {\n+    let groups = parse_macro_input!(input as List<Group>);\n+\n+    let mut query_stream = quote! {};\n+    let mut query_description_stream = quote! {};\n+    let mut dep_node_def_stream = quote! {};\n+    let mut dep_node_force_stream = quote! {};\n+\n+    for group in groups.0 {\n+        let mut group_stream = quote! {};\n+        for query in &group.queries.0 {\n+            let name = &query.name;\n+            let dep_node_name = Ident::new(\n+                &camel_case(&name.to_string()),\n+                name.span());\n+            let arg = &query.arg;\n+            let key = &query.key.0;\n+            let result_full = &query.result;\n+            let result = match query.result {\n+                ReturnType::Default => quote! { -> () },\n+                _ => quote! { #result_full },\n+            };\n+\n+            // Find out if we should cache the query on disk\n+            let cache = query.attrs.0.iter().find_map(|attr| match attr {\n+                QueryAttribute::Cache(tcx, expr) => Some((tcx, expr)),\n+                _ => None,\n+            }).map(|(tcx, expr)| {\n+                let tcx = tcx.as_ref().map(|t| quote! { #t }).unwrap_or(quote! { _ });\n+                quote! {\n+                    #[inline]\n+                    fn cache_on_disk(#tcx: TyCtxt<'_, 'tcx, 'tcx>, #key: Self::Key) -> bool {\n+                        #expr\n+                    }\n+\n+                    #[inline]\n+                    fn try_load_from_disk(\n+                        tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+                        id: SerializedDepNodeIndex\n+                    ) -> Option<Self::Value> {\n+                        tcx.queries.on_disk_cache.try_load_query_result(tcx, id)\n+                    }\n+                }\n+            });\n+\n+            let fatal_cycle = query.attrs.0.iter().find_map(|attr| match attr {\n+                QueryAttribute::FatalCycle => Some(()),\n+                _ => None,\n+            }).map(|_| quote! { fatal_cycle }).unwrap_or(quote! {});\n+\n+            group_stream.extend(quote! {\n+                [#fatal_cycle] fn #name: #dep_node_name(#arg) #result,\n+            });\n+\n+            let desc = query.attrs.0.iter().find_map(|attr| match attr {\n+                QueryAttribute::Desc(tcx, desc) => Some((tcx, desc)),\n+                _ => None,\n+            }).map(|(tcx, desc)| {\n+                let tcx = tcx.as_ref().map(|t| quote! { #t }).unwrap_or(quote! { _ });\n+                quote! {\n+                    fn describe(\n+                        #tcx: TyCtxt<'_, '_, '_>,\n+                        #key: #arg,\n+                    ) -> Cow<'static, str> {\n+                        format!(#desc).into()\n+                    }\n+                }\n+            });\n+\n+            if desc.is_some() || cache.is_some() {\n+                let cache = cache.unwrap_or(quote! {});\n+                let desc = desc.unwrap_or(quote! {});\n+\n+                query_description_stream.extend(quote! {\n+                    impl<'tcx> QueryDescription<'tcx> for queries::#name<'tcx> {\n+                        #desc\n+                        #cache\n+                    }\n+                });\n+            }\n+\n+            dep_node_def_stream.extend(quote! {\n+                [] #dep_node_name(#arg),\n+            });\n+            dep_node_force_stream.extend(quote! {\n+                DepKind::#dep_node_name => {\n+                    if let Some(key) = RecoverKey::recover($tcx, $dep_node) {\n+                        force_ex!($tcx, #name, key);\n+                    } else {\n+                        return false;\n+                    }\n+                }\n+            });\n+        }\n+        let name = &group.name;\n+        query_stream.extend(quote! {\n+            #name { #group_stream },\n+        });\n+    }\n+    TokenStream::from(quote! {\n+        macro_rules! rustc_query_append {\n+            ([$($macro:tt)*][$($other:tt)*]) => {\n+                $($macro)* {\n+                    $($other)*\n+\n+                    #query_stream\n+\n+                }\n+            }\n+        }\n+        macro_rules! rustc_dep_node_append {\n+            ([$($macro:tt)*][$($other:tt)*]) => {\n+                $($macro)*(\n+                    $($other)*\n+\n+                    #dep_node_def_stream\n+                );\n+            }\n+        }\n+        macro_rules! rustc_dep_node_force {\n+            ([$dep_node:expr, $tcx:expr] $($other:tt)*) => {\n+                match $dep_node.kind {\n+                    $($other)*\n+\n+                    #dep_node_force_stream\n+                }\n+            }\n+        }\n+        #query_description_stream\n+    })\n+}"}, {"sha": "66180ec8ad373ae62ae38fc4d7a2ffb785deb430", "filename": "src/librustc_macros/src/tt.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc_macros%2Fsrc%2Ftt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Flibrustc_macros%2Fsrc%2Ftt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Ftt.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -0,0 +1,65 @@\n+use proc_macro2::{Delimiter, TokenStream, TokenTree};\n+\n+pub struct TT<'a>(pub &'a TokenTree);\n+\n+impl<'a> PartialEq for TT<'a> {\n+    fn eq(&self, other: &Self) -> bool {\n+        use proc_macro2::Spacing;\n+\n+        match (self.0, other.0) {\n+            (&TokenTree::Group(ref g1), &TokenTree::Group(ref g2)) => {\n+                match (g1.delimiter(), g2.delimiter()) {\n+                    (Delimiter::Parenthesis, Delimiter::Parenthesis)\n+                    | (Delimiter::Brace, Delimiter::Brace)\n+                    | (Delimiter::Bracket, Delimiter::Bracket)\n+                    | (Delimiter::None, Delimiter::None) => {}\n+                    _ => return false,\n+                }\n+\n+                let s1 = g1.stream().clone().into_iter();\n+                let mut s2 = g2.stream().clone().into_iter();\n+\n+                for item1 in s1 {\n+                    let item2 = match s2.next() {\n+                        Some(item) => item,\n+                        None => return false,\n+                    };\n+                    if TT(&item1) != TT(&item2) {\n+                        return false;\n+                    }\n+                }\n+                s2.next().is_none()\n+            }\n+            (&TokenTree::Punct(ref o1), &TokenTree::Punct(ref o2)) => {\n+                o1.as_char() == o2.as_char()\n+                    && match (o1.spacing(), o2.spacing()) {\n+                        (Spacing::Alone, Spacing::Alone) | (Spacing::Joint, Spacing::Joint) => true,\n+                        _ => false,\n+                    }\n+            }\n+            (&TokenTree::Literal(ref l1), &TokenTree::Literal(ref l2)) => {\n+                l1.to_string() == l2.to_string()\n+            }\n+            (&TokenTree::Ident(ref s1), &TokenTree::Ident(ref s2)) => s1 == s2,\n+            _ => false,\n+        }\n+    }\n+}\n+\n+pub struct TS<'a>(pub &'a TokenStream);\n+\n+impl<'a> PartialEq for TS<'a> {\n+    fn eq(&self, other: &Self) -> bool {\n+        let left = self.0.clone().into_iter().collect::<Vec<_>>();\n+        let right = other.0.clone().into_iter().collect::<Vec<_>>();\n+        if left.len() != right.len() {\n+            return false;\n+        }\n+        for (a, b) in left.into_iter().zip(right) {\n+            if TT(&a) != TT(&b) {\n+                return false;\n+            }\n+        }\n+        true\n+    }\n+}"}, {"sha": "03c21712d2d0b2cbd086ac64b0f3093a53568339", "filename": "src/test/incremental/hashes/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -29,7 +29,7 @@ pub const CONST_VISIBILITY: u8 = 0;\n const CONST_CHANGE_TYPE_1: i32 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_TYPE_1: u32 = 0;\n \n@@ -39,7 +39,7 @@ const CONST_CHANGE_TYPE_1: u32 = 0;\n const CONST_CHANGE_TYPE_2: Option<u32> = None;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_TYPE_2: Option<u64> = None;\n \n@@ -99,11 +99,11 @@ mod const_change_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     const CONST_CHANGE_TYPE_INDIRECTLY_1: Type = Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     const CONST_CHANGE_TYPE_INDIRECTLY_2: Option<Type> = None;\n }"}, {"sha": "62f6e1f571b6d5231092826451705d58df0f5046", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -42,7 +42,7 @@ enum EnumChangeNameCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameCStyleVariant {\n     Variant1,\n@@ -59,7 +59,7 @@ enum EnumChangeNameTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameTupleStyleVariant {\n     Variant1,\n@@ -76,7 +76,7 @@ enum EnumChangeNameStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeNameStructStyleVariant {\n     Variant1,\n@@ -109,7 +109,7 @@ enum EnumChangeValueCStyleVariant1 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeValueCStyleVariant1 {\n     Variant1,\n@@ -125,7 +125,7 @@ enum EnumAddCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddCStyleVariant {\n     Variant1,\n@@ -142,7 +142,7 @@ enum EnumRemoveCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumRemoveCStyleVariant {\n     Variant1,\n@@ -157,7 +157,7 @@ enum EnumAddTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddTupleStyleVariant {\n     Variant1,\n@@ -174,7 +174,7 @@ enum EnumRemoveTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumRemoveTupleStyleVariant {\n     Variant1,\n@@ -189,7 +189,7 @@ enum EnumAddStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddStructStyleVariant {\n     Variant1,\n@@ -206,7 +206,7 @@ enum EnumRemoveStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumRemoveStructStyleVariant {\n     Variant1,\n@@ -257,7 +257,7 @@ enum EnumChangeFieldNameStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldNameStructStyleVariant {\n     Variant1 { a: u32, c: u32 },\n@@ -289,7 +289,7 @@ enum EnumChangeFieldOrderStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldOrderStructStyleVariant {\n     Variant1 { b: f32, a: u32 },\n@@ -304,7 +304,7 @@ enum EnumAddFieldTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddFieldTupleStyleVariant {\n     Variant1(u32, u32, u32),\n@@ -319,7 +319,7 @@ enum EnumAddFieldStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddFieldStructStyleVariant {\n     Variant1 { a: u32, b: u32, c: u32 },\n@@ -353,7 +353,7 @@ enum EnumAddReprC {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[repr(C)]\n enum EnumAddReprC {\n@@ -435,7 +435,7 @@ enum EnumAddLifetimeParameterBound<'a, 'b> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem,TypeOfItem\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeParameterBound<'a, 'b: 'a> {\n     Variant1(&'a u32),\n@@ -450,7 +450,7 @@ enum EnumAddLifetimeBoundToParameter<'a, T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"TypeOfItem\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeBoundToParameter<'a, T: 'a> {\n     Variant1(T),\n@@ -482,7 +482,7 @@ enum EnumAddLifetimeParameterBoundWhere<'a, 'b> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem,TypeOfItem\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeParameterBoundWhere<'a, 'b> where 'b: 'a {\n     Variant1(&'a u32),\n@@ -499,7 +499,7 @@ enum EnumAddLifetimeBoundToParameterWhere<'a, T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(cfg=\"cfail2\", except=\"TypeOfItem\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n enum EnumAddLifetimeBoundToParameterWhere<'a, T> where T: 'a {\n     Variant1(T),"}, {"sha": "6d7bbf2b7dad9abdfd8dd1229c6dad73db11b26f", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -117,7 +117,7 @@ pub fn type_parameter() {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, GenericsOfItem, TypeOfItem, PredicatesOfItem\")]\n+              except = \"Hir, HirBody, GenericsOfItem, TypeOf, PredicatesOfItem\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn type_parameter<T>() {}\n \n@@ -162,7 +162,7 @@ pub fn lifetime_bound<'a, T>() {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, GenericsOfItem, TypeOfItem, PredicatesOfItem\")]\n+              except = \"Hir, HirBody, GenericsOfItem, TypeOf, PredicatesOfItem\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn lifetime_bound<'a, T: 'a>() {}\n \n@@ -196,7 +196,7 @@ pub fn second_lifetime_bound<'a, 'b, T: 'a>() {}\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg = \"cfail2\",\n-              except = \"Hir, HirBody, GenericsOfItem, TypeOfItem, PredicatesOfItem\")]\n+              except = \"Hir, HirBody, GenericsOfItem, TypeOf, PredicatesOfItem\")]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn second_lifetime_bound<'a, 'b, T: 'a + 'b>() {}\n "}, {"sha": "a66c6f6eee5d4b4230c800a2431c87ee538f0456", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -97,7 +97,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(cfg=\"cfail2\", except=\"TypeOfItem,PredicatesOfItem\")]\n+    #[rustc_dirty(cfg=\"cfail2\", except=\"TypeOf,PredicatesOfItem\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_selfness(&self) { }\n }\n@@ -334,7 +334,7 @@ impl Foo {\n     // appear dirty, that might be the cause. -nmatsakis\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOfItem\",\n+        except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOf\",\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_type_parameter_to_method<T>(&self) { }\n@@ -354,7 +354,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOfItem,TypeckTables\"\n+        except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOf,TypeckTables\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_lifetime_param_of_method<'a, 'b: 'a>(&self) { }\n@@ -382,7 +382,7 @@ impl Foo {\n     // body will be affected. So if you start to see `TypeckTables`\n     // appear dirty, that might be the cause. -nmatsakis\n     #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,\\\n-                                        TypeOfItem\")]\n+                                        TypeOf\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_type_param_of_method<'a, T: 'a>(&self) { }\n }\n@@ -447,7 +447,7 @@ impl Bar<u32> {\n impl<T> Bar<T> {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"GenericsOfItem,FnSignature,TypeckTables,TypeOfItem,MirOptimized,MirBuilt\"\n+        except=\"GenericsOfItem,FnSignature,TypeckTables,TypeOf,MirOptimized,MirBuilt\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_type_parameter_to_impl(&self) { }"}, {"sha": "aa78389faf48eb40f29d2a82fe996930d54eef3e", "filename": "src/test/incremental/hashes/statics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -74,7 +74,7 @@ static STATIC_THREAD_LOCAL: u8 = 0;\n static STATIC_CHANGE_TYPE_1: i16 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_TYPE_1: u64 = 0;\n \n@@ -84,7 +84,7 @@ static STATIC_CHANGE_TYPE_1: u64 = 0;\n static STATIC_CHANGE_TYPE_2: Option<i8> = None;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_TYPE_2: Option<u16> = None;\n \n@@ -144,11 +144,11 @@ mod static_change_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_1: Type = Type;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOf\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_2: Option<Type> = None;\n }"}, {"sha": "b948ae8228e24cbad16ca9a64214489f14444ffd", "filename": "src/test/incremental/hashes/struct_defs.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -26,12 +26,12 @@ pub struct LayoutPacked;\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n #[repr(packed)]\n@@ -43,12 +43,12 @@ struct LayoutC;\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n #[repr(C)]\n@@ -63,12 +63,12 @@ struct TupleStructFieldType(i32);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n // Note that changing the type of a field does not change the type of the struct or enum, but\n@@ -86,12 +86,12 @@ struct TupleStructAddField(i32);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n struct TupleStructAddField(\n@@ -108,12 +108,12 @@ struct TupleStructFieldVisibility(char);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n struct TupleStructFieldVisibility(pub char);\n@@ -127,12 +127,12 @@ struct RecordStructFieldType { x: f32 }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n // Note that changing the type of a field does not change the type of the struct or enum, but\n@@ -150,12 +150,12 @@ struct RecordStructFieldName { x: f32 }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n struct RecordStructFieldName { y: f32 }\n@@ -169,12 +169,12 @@ struct RecordStructAddField { x: f32 }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n struct RecordStructAddField {\n@@ -190,12 +190,12 @@ struct RecordStructFieldVisibility { x: f32 }\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n struct RecordStructFieldVisibility {\n@@ -211,12 +211,12 @@ struct AddLifetimeParameter<'a>(&'a f32, &'a f64);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n struct AddLifetimeParameter<'a, 'b>(&'a f32, &'b f64);\n@@ -230,12 +230,12 @@ struct AddLifetimeParameterBound<'a, 'b>(&'a f32, &'b f64);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n struct AddLifetimeParameterBound<'a, 'b: 'a>(\n@@ -249,12 +249,12 @@ struct AddLifetimeParameterBoundWhereClause<'a, 'b>(&'a f32, &'b f64);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n struct AddLifetimeParameterBoundWhereClause<'a, 'b>(\n@@ -271,12 +271,12 @@ struct AddTypeParameter<T1>(T1, T1);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_dirty(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_dirty(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n struct AddTypeParameter<T1, T2>(\n@@ -295,12 +295,12 @@ struct AddTypeParameterBound<T>(T);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n struct AddTypeParameterBound<T: Send>(\n@@ -314,12 +314,12 @@ struct AddTypeParameterBoundWhereClause<T>(T);\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n struct AddTypeParameterBoundWhereClause<T>(\n@@ -334,12 +334,12 @@ struct AddTypeParameterBoundWhereClause<T>(\n // Note: there is no #[cfg(...)], so this is ALWAYS compiled\n #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n pub struct EmptyStruct;\n@@ -353,12 +353,12 @@ struct Visibility;\n #[cfg(not(cfail1))]\n #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+#[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n pub struct Visibility;\n@@ -375,12 +375,12 @@ mod tuple_struct_change_field_type_indirectly {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n     struct TupleStruct(\n@@ -398,12 +398,12 @@ mod record_struct_change_field_type_indirectly {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n     struct RecordStruct {\n@@ -426,12 +426,12 @@ mod change_trait_bound_indirectly {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n     struct Struct<T: Trait>(T);\n@@ -446,12 +446,12 @@ mod change_trait_bound_indirectly_in_where_clause {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail2\")]\n     #[rustc_dirty(label=\"PredicatesOfItem\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-    #[rustc_clean(label=\"TypeOfItem\", cfg=\"cfail3\")]\n+    #[rustc_clean(label=\"TypeOf\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"GenericsOfItem\", cfg=\"cfail3\")]\n     #[rustc_clean(label=\"PredicatesOfItem\", cfg=\"cfail3\")]\n     struct Struct<T>(T) where T : Trait;"}, {"sha": "d077255343f0667ecaff42d2542e9e68855656c0", "filename": "src/test/ui/dep-graph/dep-graph-struct-signature.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -24,7 +24,7 @@ struct WontChange {\n mod signatures {\n     use WillChange;\n \n-    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n+    #[rustc_then_this_would_need(TypeOf)] //~ ERROR no path\n     #[rustc_then_this_would_need(AssociatedItems)] //~ ERROR no path\n     #[rustc_then_this_would_need(TraitDefOfItem)] //~ ERROR no path\n     trait Bar {\n@@ -42,36 +42,36 @@ mod signatures {\n         WillChange { x: x, y: y }\n     }\n \n-    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeOf)] //~ ERROR OK\n     impl WillChange {\n         #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n         #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n         fn new(x: u32, y: u32) -> WillChange { loop { } }\n     }\n \n-    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeOf)] //~ ERROR OK\n     impl WillChange {\n         #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n         #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n         fn method(&self, x: u32) { }\n     }\n \n     struct WillChanges {\n-        #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n+        #[rustc_then_this_would_need(TypeOf)] //~ ERROR OK\n         x: WillChange,\n-        #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n+        #[rustc_then_this_would_need(TypeOf)] //~ ERROR OK\n         y: WillChange\n     }\n \n     // The fields change, not the type itself.\n-    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n+    #[rustc_then_this_would_need(TypeOf)] //~ ERROR no path\n     fn indirect(x: WillChanges) { }\n }\n \n mod invalid_signatures {\n     use WontChange;\n \n-    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n+    #[rustc_then_this_would_need(TypeOf)] //~ ERROR no path\n     trait A {\n         #[rustc_then_this_would_need(FnSignature)] //~ ERROR no path\n         fn do_something_else_twice(x: WontChange);"}, {"sha": "9ddc53a3d2131a1539a1e0dbe15791b50500831e", "filename": "src/test/ui/dep-graph/dep-graph-type-alias.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d90547532012f31ad6fb1cda664bc47c558c6e4/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.rs?ref=7d90547532012f31ad6fb1cda664bc47c558c6e4", "patch": "@@ -14,38 +14,38 @@ type TypeAlias = u32;\n \n // The type alias directly affects the type of the field,\n // not the enclosing struct:\n-#[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n+#[rustc_then_this_would_need(TypeOf)] //~ ERROR no path\n struct Struct {\n-    #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n+    #[rustc_then_this_would_need(TypeOf)] //~ ERROR OK\n     x: TypeAlias,\n     y: u32\n }\n \n-#[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n+#[rustc_then_this_would_need(TypeOf)] //~ ERROR no path\n enum Enum {\n     Variant1 {\n-        #[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n+        #[rustc_then_this_would_need(TypeOf)] //~ ERROR OK\n         t: TypeAlias\n     },\n     Variant2(i32)\n }\n \n-#[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n+#[rustc_then_this_would_need(TypeOf)] //~ ERROR no path\n trait Trait {\n     #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n     fn method(&self, _: TypeAlias);\n }\n \n struct SomeType;\n \n-#[rustc_then_this_would_need(TypeOfItem)] //~ ERROR no path\n+#[rustc_then_this_would_need(TypeOf)] //~ ERROR no path\n impl SomeType {\n     #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK\n     #[rustc_then_this_would_need(TypeckTables)] //~ ERROR OK\n     fn method(&self, _: TypeAlias) {}\n }\n \n-#[rustc_then_this_would_need(TypeOfItem)] //~ ERROR OK\n+#[rustc_then_this_would_need(TypeOf)] //~ ERROR OK\n type TypeAlias2 = TypeAlias;\n \n #[rustc_then_this_would_need(FnSignature)] //~ ERROR OK"}]}