{"sha": "6414f03644931085f1859a0707273b11e26a5d18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MTRmMDM2NDQ5MzEwODVmMTg1OWEwNzA3MjczYjExZTI2YTVkMTg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-08T12:27:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-09T10:35:51Z"}, "message": "Don't omit overflow checks for *_with_overflow intrinsics when compiling without debug assertions", "tree": {"sha": "2aa179773b870e2d6581fdd2163a033fa54b0ba4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aa179773b870e2d6581fdd2163a033fa54b0ba4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6414f03644931085f1859a0707273b11e26a5d18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6414f03644931085f1859a0707273b11e26a5d18", "html_url": "https://github.com/rust-lang/rust/commit/6414f03644931085f1859a0707273b11e26a5d18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6414f03644931085f1859a0707273b11e26a5d18/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19a3bfec3bc159eb9b25c44c889474a61d419d8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/19a3bfec3bc159eb9b25c44c889474a61d419d8f", "html_url": "https://github.com/rust-lang/rust/commit/19a3bfec3bc159eb9b25c44c889474a61d419d8f"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "1f372192f31d2ccad023b3801505bfa6be7ab33d", "filename": "src/base.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6414f03644931085f1859a0707273b11e26a5d18/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6414f03644931085f1859a0707273b11e26a5d18/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=6414f03644931085f1859a0707273b11e26a5d18", "patch": "@@ -334,15 +334,20 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                     let lhs = trans_operand(fx, lhs);\n                     let rhs = trans_operand(fx, rhs);\n \n-                    let res = match ty.sty {\n-                        ty::Uint(_) => {\n-                            trans_checked_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, false)\n-                        }\n-                        ty::Int(_) => {\n-                            trans_checked_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, true)\n-                        }\n+                    let signed = match ty.sty {\n+                        ty::Uint(_) => false,\n+                        ty::Int(_) => true,\n                         _ => unimplemented!(\"checked binop {:?} for {:?}\", bin_op, ty),\n                     };\n+\n+                    let res = if !fx.tcx.sess.overflow_checks() {\n+                        let val = trans_int_binop(fx, *bin_op, lhs, rhs, lhs.layout().ty, signed).load_scalar(fx);\n+                        let is_overflow = fx.bcx.ins().iconst(types::I8, 0);\n+                        CValue::by_val_pair(val, is_overflow, lval.layout())\n+                    } else {\n+                        trans_checked_int_binop(fx, *bin_op, lhs, rhs, lval.layout().ty, signed)\n+                    };\n+\n                     lval.write_cvalue(fx, res);\n                 }\n                 Rvalue::UnaryOp(un_op, operand) => {\n@@ -843,12 +848,6 @@ pub fn trans_checked_int_binop<'a, 'tcx: 'a>(\n     out_ty: Ty<'tcx>,\n     signed: bool,\n ) -> CValue<'tcx> {\n-    if !fx.tcx.sess.overflow_checks() {\n-        let val = trans_int_binop(fx, bin_op, in_lhs, in_rhs, in_lhs.layout().ty, signed).load_scalar(fx);\n-        let is_overflow = fx.bcx.ins().iconst(types::I8, 0);\n-        return CValue::by_val_pair(val, is_overflow, fx.layout_of(out_ty));\n-    }\n-\n     if bin_op != BinOp::Shl && bin_op != BinOp::Shr {\n         assert_eq!(\n             in_lhs.layout().ty,"}]}