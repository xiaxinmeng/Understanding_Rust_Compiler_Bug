{"sha": "18311a6c47899853071cf90e37782d398dffaeed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MzExYTZjNDc4OTk4NTMwNzFjZjkwZTM3NzgyZDM5OGRmZmFlZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-28T00:28:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-28T00:28:03Z"}, "message": "Auto merge of #54683 - zackmdavis:critique_of_pure_lints, r=petrochenkov\n\nlint reasons (RFC 2883, part 1)\n\nThis implements the `reason =` functionality described in [the RFC](https://github.com/rust-lang/rfcs/blob/master/text/2383-lint-reasons.md) under a `lint_reasons` feature gate.\n\n![lint_reasons_pt_1](https://user-images.githubusercontent.com/1076988/46252097-eed51000-c418-11e8-8212-939d3f02f95d.png)", "tree": {"sha": "a597177d7eed26e95aee8887ab4376cb6172b1da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a597177d7eed26e95aee8887ab4376cb6172b1da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18311a6c47899853071cf90e37782d398dffaeed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18311a6c47899853071cf90e37782d398dffaeed", "html_url": "https://github.com/rust-lang/rust/commit/18311a6c47899853071cf90e37782d398dffaeed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18311a6c47899853071cf90e37782d398dffaeed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae6efc37d70ab7d353e6ab9ce229d59a65ed643", "html_url": "https://github.com/rust-lang/rust/commit/cae6efc37d70ab7d353e6ab9ce229d59a65ed643"}, {"sha": "f66ea66acd1c5e24e16fafe28021af1b723d6824", "url": "https://api.github.com/repos/rust-lang/rust/commits/f66ea66acd1c5e24e16fafe28021af1b723d6824", "html_url": "https://github.com/rust-lang/rust/commit/f66ea66acd1c5e24e16fafe28021af1b723d6824"}], "stats": {"total": 324, "additions": 304, "deletions": 20}, "files": [{"sha": "732b32cc35d68fb92ea3e9018cc4d9d7c79c5589", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 82, "deletions": 17, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/18311a6c47899853071cf90e37782d398dffaeed/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18311a6c47899853071cf90e37782d398dffaeed/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=18311a6c47899853071cf90e37782d398dffaeed", "patch": "@@ -21,6 +21,7 @@ use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n use session::Session;\n use syntax::ast;\n use syntax::attr;\n+use syntax::feature_gate;\n use syntax::source_map::MultiSpan;\n use syntax::symbol::Symbol;\n use util::nodemap::FxHashMap;\n@@ -199,8 +200,7 @@ impl<'a> LintLevelsBuilder<'a> {\n         let store = self.sess.lint_store.borrow();\n         let sess = self.sess;\n         let bad_attr = |span| {\n-            span_err!(sess, span, E0452,\n-                      \"malformed lint attribute\");\n+            struct_span_err!(sess, span, E0452, \"malformed lint attribute\")\n         };\n         for attr in attrs {\n             let level = match Level::from_str(&attr.name().as_str()) {\n@@ -211,19 +211,76 @@ impl<'a> LintLevelsBuilder<'a> {\n             let meta = unwrap_or!(attr.meta(), continue);\n             attr::mark_used(attr);\n \n-            let metas = if let Some(metas) = meta.meta_item_list() {\n+            let mut metas = if let Some(metas) = meta.meta_item_list() {\n                 metas\n             } else {\n-                bad_attr(meta.span);\n-                continue\n+                let mut err = bad_attr(meta.span);\n+                err.emit();\n+                continue;\n             };\n \n+            if metas.is_empty() {\n+                // FIXME (#55112): issue unused-attributes lint for `#[level()]`\n+                continue;\n+            }\n+\n+            // Before processing the lint names, look for a reason (RFC 2383)\n+            // at the end.\n+            let mut reason = None;\n+            let tail_li = &metas[metas.len()-1];\n+            if let Some(item) = tail_li.meta_item() {\n+                match item.node {\n+                    ast::MetaItemKind::Word => {}  // actual lint names handled later\n+                    ast::MetaItemKind::NameValue(ref name_value) => {\n+                        let gate_reasons = !self.sess.features_untracked().lint_reasons;\n+                        if item.ident == \"reason\" {\n+                            // found reason, reslice meta list to exclude it\n+                            metas = &metas[0..metas.len()-1];\n+                            // FIXME (#55112): issue unused-attributes lint if we thereby\n+                            // don't have any lint names (`#[level(reason = \"foo\")]`)\n+                            if let ast::LitKind::Str(rationale, _) = name_value.node {\n+                                if gate_reasons {\n+                                    feature_gate::emit_feature_err(\n+                                        &self.sess.parse_sess,\n+                                        \"lint_reasons\",\n+                                        item.span,\n+                                        feature_gate::GateIssue::Language,\n+                                        \"lint reasons are experimental\"\n+                                    );\n+                                } else {\n+                                    reason = Some(rationale);\n+                                }\n+                            } else {\n+                                let mut err = bad_attr(name_value.span);\n+                                err.help(\"reason must be a string literal\");\n+                                err.emit();\n+                            }\n+                        } else {\n+                            let mut err = bad_attr(item.span);\n+                            err.emit();\n+                        }\n+                    },\n+                    ast::MetaItemKind::List(_) => {\n+                        let mut err = bad_attr(item.span);\n+                        err.emit();\n+                    }\n+                }\n+            }\n+\n             for li in metas {\n                 let word = match li.word() {\n                     Some(word) => word,\n                     None => {\n-                        bad_attr(li.span);\n-                        continue\n+                        let mut err = bad_attr(li.span);\n+                        if let Some(item) = li.meta_item() {\n+                            if let ast::MetaItemKind::NameValue(_) = item.node {\n+                                if item.ident == \"reason\" {\n+                                    err.help(\"reason in lint attribute must come last\");\n+                                }\n+                            }\n+                        }\n+                        err.emit();\n+                        continue;\n                     }\n                 };\n                 let tool_name = if let Some(lint_tool) = word.is_scoped() {\n@@ -245,7 +302,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                 let name = word.name();\n                 match store.check_lint_name(&name.as_str(), tool_name) {\n                     CheckLintNameResult::Ok(ids) => {\n-                        let src = LintSource::Node(name, li.span);\n+                        let src = LintSource::Node(name, li.span, reason);\n                         for id in ids {\n                             specs.insert(*id, (level, src));\n                         }\n@@ -255,7 +312,9 @@ impl<'a> LintLevelsBuilder<'a> {\n                         match result {\n                             Ok(ids) => {\n                                 let complete_name = &format!(\"{}::{}\", tool_name.unwrap(), name);\n-                                let src = LintSource::Node(Symbol::intern(complete_name), li.span);\n+                                let src = LintSource::Node(\n+                                    Symbol::intern(complete_name), li.span, reason\n+                                );\n                                 for id in ids {\n                                     specs.insert(*id, (level, src));\n                                 }\n@@ -286,7 +345,9 @@ impl<'a> LintLevelsBuilder<'a> {\n                                     Applicability::MachineApplicable,\n                                 ).emit();\n \n-                                let src = LintSource::Node(Symbol::intern(&new_lint_name), li.span);\n+                                let src = LintSource::Node(\n+                                    Symbol::intern(&new_lint_name), li.span, reason\n+                                );\n                                 for id in ids {\n                                     specs.insert(*id, (level, src));\n                                 }\n@@ -368,11 +429,11 @@ impl<'a> LintLevelsBuilder<'a> {\n             };\n             let forbidden_lint_name = match forbid_src {\n                 LintSource::Default => id.to_string(),\n-                LintSource::Node(name, _) => name.to_string(),\n+                LintSource::Node(name, _, _) => name.to_string(),\n                 LintSource::CommandLine(name) => name.to_string(),\n             };\n             let (lint_attr_name, lint_attr_span) = match *src {\n-                LintSource::Node(name, span) => (name, span),\n+                LintSource::Node(name, span, _) => (name, span),\n                 _ => continue,\n             };\n             let mut diag_builder = struct_span_err!(self.sess,\n@@ -384,15 +445,19 @@ impl<'a> LintLevelsBuilder<'a> {\n                                                     forbidden_lint_name);\n             diag_builder.span_label(lint_attr_span, \"overruled by previous forbid\");\n             match forbid_src {\n-                LintSource::Default => &mut diag_builder,\n-                LintSource::Node(_, forbid_source_span) => {\n+                LintSource::Default => {},\n+                LintSource::Node(_, forbid_source_span, reason) => {\n                     diag_builder.span_label(forbid_source_span,\n-                                            \"`forbid` level set here\")\n+                                            \"`forbid` level set here\");\n+                    if let Some(rationale) = reason {\n+                        diag_builder.note(&rationale.as_str());\n+                    }\n                 },\n                 LintSource::CommandLine(_) => {\n-                    diag_builder.note(\"`forbid` lint level was set on command line\")\n+                    diag_builder.note(\"`forbid` lint level was set on command line\");\n                 }\n-            }.emit();\n+            }\n+            diag_builder.emit();\n             // don't set a separate error for every lint in the group\n             break\n         }"}, {"sha": "afd78008109828eb6814461a8bd96b246722641b", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/18311a6c47899853071cf90e37782d398dffaeed/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18311a6c47899853071cf90e37782d398dffaeed/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=18311a6c47899853071cf90e37782d398dffaeed", "patch": "@@ -470,15 +470,15 @@ pub enum LintSource {\n     Default,\n \n     /// Lint level was set by an attribute.\n-    Node(ast::Name, Span),\n+    Node(ast::Name, Span, Option<Symbol> /* RFC 2383 reason */),\n \n     /// Lint level was set by a command-line flag.\n     CommandLine(Symbol),\n }\n \n impl_stable_hash_for!(enum self::LintSource {\n     Default,\n-    Node(name, span),\n+    Node(name, span, reason),\n     CommandLine(text)\n });\n \n@@ -578,7 +578,10 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n                              hyphen_case_flag_val));\n             }\n         }\n-        LintSource::Node(lint_attr_name, src) => {\n+        LintSource::Node(lint_attr_name, src, reason) => {\n+            if let Some(rationale) = reason {\n+                err.note(&rationale.as_str());\n+            }\n             sess.diag_span_note_once(&mut err, DiagnosticMessageId::from(lint),\n                                      src, \"lint level defined here\");\n             if lint_attr_name.as_str() != name {"}, {"sha": "da0ec33030e06ace43192685dd84c34670fa6e3a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18311a6c47899853071cf90e37782d398dffaeed/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18311a6c47899853071cf90e37782d398dffaeed/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=18311a6c47899853071cf90e37782d398dffaeed", "patch": "@@ -504,6 +504,9 @@ declare_features! (\n \n     // `extern crate foo as bar;` puts `bar` into extern prelude.\n     (active, extern_crate_item_prelude, \"1.31.0\", Some(54658), None),\n+\n+    // `reason = ` in lint attributes and `expect` lint attribute\n+    (active, lint_reasons, \"1.31.0\", Some(54503), None),\n );\n \n declare_features! ("}, {"sha": "1a7b9c990fa642bc58b9382aaba509eee130bed4", "filename": "src/test/ui/feature-gates/feature-gate-lint-reasons.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.rs?ref=18311a6c47899853071cf90e37782d398dffaeed", "patch": "@@ -0,0 +1,4 @@\n+#![warn(nonstandard_style, reason = \"the standard should be respected\")]\n+//~^ ERROR lint reasons are experimental\n+\n+fn main() {}"}, {"sha": "6a36d9fd5a8e56b9f488a1f7b8ecd765120c4516", "filename": "src/test/ui/feature-gates/feature-gate-lint-reasons.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-lint-reasons.stderr?ref=18311a6c47899853071cf90e37782d398dffaeed", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: lint reasons are experimental (see issue #54503)\n+  --> $DIR/feature-gate-lint-reasons.rs:1:28\n+   |\n+LL | #![warn(nonstandard_style, reason = \"the standard should be respected\")]\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(lint_reasons)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1f0a9538d88b1984be3a2b21baf5e22ad43ec663", "filename": "src/test/ui/lint/empty-lint-attributes.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Flint%2Fempty-lint-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Flint%2Fempty-lint-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fempty-lint-attributes.rs?ref=18311a6c47899853071cf90e37782d398dffaeed", "patch": "@@ -0,0 +1,17 @@\n+#![feature(lint_reasons)]\n+\n+// run-pass\n+\n+// Empty (and reason-only) lint attributes are legal\u2014although we may want to\n+// lint them in the future (Issue #55112).\n+\n+#![allow()]\n+#![warn(reason = \"observationalism\")]\n+\n+#[forbid()]\n+fn devoir() {}\n+\n+#[deny(reason = \"ultion\")]\n+fn waldgrave() {}\n+\n+fn main() {}"}, {"sha": "e42b329338b5a2c71d47759b0e7051dd0ef1209d", "filename": "src/test/ui/lint/reasons-erroneous.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.rs?ref=18311a6c47899853071cf90e37782d398dffaeed", "patch": "@@ -0,0 +1,24 @@\n+#![feature(lint_reasons)]\n+\n+#![warn(absolute_paths_not_starting_with_crate, reason = 0)]\n+//~^ ERROR malformed lint attribute\n+//~| HELP reason must be a string literal\n+#![warn(anonymous_parameters, reason = b\"consider these, for we have condemned them\")]\n+//~^ ERROR malformed lint attribute\n+//~| HELP reason must be a string literal\n+#![warn(bare_trait_objects, reasons = \"leaders to no sure land, guides their bearings lost\")]\n+//~^ ERROR malformed lint attribute\n+#![warn(box_pointers, blerp = \"or in league with robbers have reversed the signposts\")]\n+//~^ ERROR malformed lint attribute\n+#![warn(elided_lifetimes_in_paths, reason(\"disrespectful to ancestors\", \"irresponsible to heirs\"))]\n+//~^ ERROR malformed lint attribute\n+#![warn(ellipsis_inclusive_range_patterns, reason = \"born barren\", reason = \"a freak growth\")]\n+//~^ ERROR malformed lint attribute\n+//~| HELP reason in lint attribute must come last\n+#![warn(keyword_idents, reason = \"root in rubble\", macro_use_extern_crate)]\n+//~^ ERROR malformed lint attribute\n+//~| HELP reason in lint attribute must come last\n+#![warn(missing_copy_implementations, reason)]\n+//~^ WARN unknown lint\n+\n+fn main() {}"}, {"sha": "6842686ecbab581a38343874bb5bdc2ec3c179a2", "filename": "src/test/ui/lint/reasons-erroneous.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-erroneous.stderr?ref=18311a6c47899853071cf90e37782d398dffaeed", "patch": "@@ -0,0 +1,61 @@\n+error[E0452]: malformed lint attribute\n+  --> $DIR/reasons-erroneous.rs:3:58\n+   |\n+LL | #![warn(absolute_paths_not_starting_with_crate, reason = 0)]\n+   |                                                          ^\n+   |\n+   = help: reason must be a string literal\n+\n+error[E0452]: malformed lint attribute\n+  --> $DIR/reasons-erroneous.rs:6:40\n+   |\n+LL | #![warn(anonymous_parameters, reason = b\"consider these, for we have condemned them\")]\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: reason must be a string literal\n+\n+error[E0452]: malformed lint attribute\n+  --> $DIR/reasons-erroneous.rs:9:29\n+   |\n+LL | #![warn(bare_trait_objects, reasons = \"leaders to no sure land, guides their bearings lost\")]\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0452]: malformed lint attribute\n+  --> $DIR/reasons-erroneous.rs:11:23\n+   |\n+LL | #![warn(box_pointers, blerp = \"or in league with robbers have reversed the signposts\")]\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0452]: malformed lint attribute\n+  --> $DIR/reasons-erroneous.rs:13:36\n+   |\n+LL | #![warn(elided_lifetimes_in_paths, reason(\"disrespectful to ancestors\", \"irresponsible to heirs\"))]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0452]: malformed lint attribute\n+  --> $DIR/reasons-erroneous.rs:15:44\n+   |\n+LL | #![warn(ellipsis_inclusive_range_patterns, reason = \"born barren\", reason = \"a freak growth\")]\n+   |                                            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: reason in lint attribute must come last\n+\n+error[E0452]: malformed lint attribute\n+  --> $DIR/reasons-erroneous.rs:18:25\n+   |\n+LL | #![warn(keyword_idents, reason = \"root in rubble\", macro_use_extern_crate)]\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: reason in lint attribute must come last\n+\n+warning: unknown lint: `reason`\n+  --> $DIR/reasons-erroneous.rs:21:39\n+   |\n+LL | #![warn(missing_copy_implementations, reason)]\n+   |                                       ^^^^^^\n+   |\n+   = note: #[warn(unknown_lints)] on by default\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0452`."}, {"sha": "19ab76707d40802d64eaae67944ee535ee61764d", "filename": "src/test/ui/lint/reasons-forbidden.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.rs?ref=18311a6c47899853071cf90e37782d398dffaeed", "patch": "@@ -0,0 +1,21 @@\n+#![feature(lint_reasons)]\n+\n+#![forbid(\n+    unsafe_code,\n+    //~^ NOTE `forbid` level set here\n+    reason = \"our errors & omissions insurance policy doesn't cover unsafe Rust\"\n+)]\n+\n+use std::ptr;\n+\n+fn main() {\n+    let a_billion_dollar_mistake = ptr::null();\n+\n+    #[allow(unsafe_code)]\n+    //~^ ERROR allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+    //~| NOTE overruled by previous forbid\n+    //~| NOTE our errors & omissions insurance policy doesn't cover unsafe Rust\n+    unsafe {\n+        *a_billion_dollar_mistake\n+    }\n+}"}, {"sha": "ea09e591cba0f41799834977655ae2f9e4fa976e", "filename": "src/test/ui/lint/reasons-forbidden.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons-forbidden.stderr?ref=18311a6c47899853071cf90e37782d398dffaeed", "patch": "@@ -0,0 +1,14 @@\n+error[E0453]: allow(unsafe_code) overruled by outer forbid(unsafe_code)\n+  --> $DIR/reasons-forbidden.rs:14:13\n+   |\n+LL |     unsafe_code,\n+   |     ----------- `forbid` level set here\n+...\n+LL |     #[allow(unsafe_code)]\n+   |             ^^^^^^^^^^^ overruled by previous forbid\n+   |\n+   = note: our errors & omissions insurance policy doesn't cover unsafe Rust\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0453`."}, {"sha": "eba91d92afb5bf4c9f4a0faf38cf103aef648c7f", "filename": "src/test/ui/lint/reasons.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Flint%2Freasons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Flint%2Freasons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons.rs?ref=18311a6c47899853071cf90e37782d398dffaeed", "patch": "@@ -0,0 +1,33 @@\n+// compile-pass\n+\n+#![feature(lint_reasons)]\n+\n+#![warn(elided_lifetimes_in_paths,\n+        //~^ NOTE lint level defined here\n+        reason = \"explicit anonymous lifetimes aid reasoning about ownership\")]\n+#![warn(\n+    nonstandard_style,\n+    //~^ NOTE lint level defined here\n+    reason = r#\"people shouldn't have to change their usual style habits\n+to contribute to our project\"#\n+)]\n+#![allow(unused, reason = \"unused code has never killed anypony\")]\n+\n+use std::fmt;\n+\n+pub struct CheaterDetectionMechanism {}\n+\n+impl fmt::Debug for CheaterDetectionMechanism {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        //~^ WARN hidden lifetime parameters in types are deprecated\n+        //~| NOTE explicit anonymous lifetimes aid\n+        //~| HELP indicate the anonymous lifetime\n+        fmt.debug_struct(\"CheaterDetectionMechanism\").finish()\n+    }\n+}\n+\n+fn main() {\n+    let Social_exchange_psychology = CheaterDetectionMechanism {};\n+    //~^ WARN should have a snake case name such as\n+    //~| NOTE people shouldn't have to change their usual style habits\n+}"}, {"sha": "df0f9cb9b61e89c7c87835cadc9a1c24cf4420fc", "filename": "src/test/ui/lint/reasons.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/18311a6c47899853071cf90e37782d398dffaeed/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons.stderr?ref=18311a6c47899853071cf90e37782d398dffaeed", "patch": "@@ -0,0 +1,28 @@\n+warning: hidden lifetime parameters in types are deprecated\n+  --> $DIR/reasons.rs:21:29\n+   |\n+LL |     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+   |                             ^^^^^^^^^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n+   |\n+   = note: explicit anonymous lifetimes aid reasoning about ownership\n+note: lint level defined here\n+  --> $DIR/reasons.rs:5:9\n+   |\n+LL | #![warn(elided_lifetimes_in_paths,\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: variable `Social_exchange_psychology` should have a snake case name such as `social_exchange_psychology`\n+  --> $DIR/reasons.rs:30:9\n+   |\n+LL |     let Social_exchange_psychology = CheaterDetectionMechanism {};\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: people shouldn't have to change their usual style habits\n+           to contribute to our project\n+note: lint level defined here\n+  --> $DIR/reasons.rs:9:5\n+   |\n+LL |     nonstandard_style,\n+   |     ^^^^^^^^^^^^^^^^^\n+   = note: #[warn(non_snake_case)] implied by #[warn(nonstandard_style)]\n+"}]}