{"sha": "e900a3549624860a466c33c04742ccfa026bdc6d", "node_id": "C_kwDOAAsO6NoAKGU5MDBhMzU0OTYyNDg2MGE0NjZjMzNjMDQ3NDJjY2ZhMDI2YmRjNmQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-21T03:47:25Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-21T03:56:51Z"}, "message": "Give name if anonymous region appears in impl signature", "tree": {"sha": "cf44f68986ff3ad1dfc1de21c0418dd569e14310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf44f68986ff3ad1dfc1de21c0418dd569e14310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e900a3549624860a466c33c04742ccfa026bdc6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e900a3549624860a466c33c04742ccfa026bdc6d", "html_url": "https://github.com/rust-lang/rust/commit/e900a3549624860a466c33c04742ccfa026bdc6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e900a3549624860a466c33c04742ccfa026bdc6d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08871139915b95ec868aff807f224f78d00f4311", "url": "https://api.github.com/repos/rust-lang/rust/commits/08871139915b95ec868aff807f224f78d00f4311", "html_url": "https://github.com/rust-lang/rust/commit/08871139915b95ec868aff807f224f78d00f4311"}], "stats": {"total": 130, "additions": 125, "deletions": 5}, "files": [{"sha": "d359d7efb626801905958a91c983f866105a1fce", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e900a3549624860a466c33c04742ccfa026bdc6d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e900a3549624860a466c33c04742ccfa026bdc6d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=e900a3549624860a466c33c04742ccfa026bdc6d", "patch": "@@ -62,7 +62,8 @@ impl OutlivesSuggestionBuilder {\n             | RegionNameSource::AnonRegionFromUpvar(..)\n             | RegionNameSource::AnonRegionFromOutput(..)\n             | RegionNameSource::AnonRegionFromYieldTy(..)\n-            | RegionNameSource::AnonRegionFromAsyncFn(..) => {\n+            | RegionNameSource::AnonRegionFromAsyncFn(..)\n+            | RegionNameSource::AnonRegionFromImplSignature(..) => {\n                 debug!(\"Region {:?} is NOT suggestable\", name);\n                 false\n             }"}, {"sha": "b5ae85fd042c2a584d586bee70a2bf0a9c0bfae1", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e900a3549624860a466c33c04742ccfa026bdc6d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e900a3549624860a466c33c04742ccfa026bdc6d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=e900a3549624860a466c33c04742ccfa026bdc6d", "patch": "@@ -6,7 +6,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_middle::ty::print::RegionHighlightMode;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, RegionVid, Ty};\n+use rustc_middle::ty::{self, DefIdTree, RegionVid, Ty};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -45,6 +45,8 @@ pub(crate) enum RegionNameSource {\n     AnonRegionFromYieldTy(Span, String),\n     /// An anonymous region from an async fn.\n     AnonRegionFromAsyncFn(Span),\n+    /// An anonymous region from an impl self type or trait\n+    AnonRegionFromImplSignature(Span, &'static str),\n }\n \n /// Describes what to highlight to explain to the user that we're giving an anonymous region a\n@@ -75,7 +77,8 @@ impl RegionName {\n             | RegionNameSource::AnonRegionFromUpvar(..)\n             | RegionNameSource::AnonRegionFromOutput(..)\n             | RegionNameSource::AnonRegionFromYieldTy(..)\n-            | RegionNameSource::AnonRegionFromAsyncFn(..) => false,\n+            | RegionNameSource::AnonRegionFromAsyncFn(..)\n+            | RegionNameSource::AnonRegionFromImplSignature(..) => false,\n         }\n     }\n \n@@ -87,7 +90,8 @@ impl RegionName {\n             | RegionNameSource::SynthesizedFreeEnvRegion(span, _)\n             | RegionNameSource::AnonRegionFromUpvar(span, _)\n             | RegionNameSource::AnonRegionFromYieldTy(span, _)\n-            | RegionNameSource::AnonRegionFromAsyncFn(span) => Some(span),\n+            | RegionNameSource::AnonRegionFromAsyncFn(span)\n+            | RegionNameSource::AnonRegionFromImplSignature(span, _) => Some(span),\n             RegionNameSource::AnonRegionFromArgument(ref highlight)\n             | RegionNameSource::AnonRegionFromOutput(ref highlight, _) => match *highlight {\n                 RegionNameHighlight::MatchedHirTy(span)\n@@ -166,6 +170,12 @@ impl RegionName {\n             RegionNameSource::AnonRegionFromYieldTy(span, type_name) => {\n                 diag.span_label(*span, format!(\"yield type is {type_name}\"));\n             }\n+            RegionNameSource::AnonRegionFromImplSignature(span, location) => {\n+                diag.span_label(\n+                    *span,\n+                    format!(\"lifetime `{self}` appears in the `impl`'s {location}\"),\n+                );\n+            }\n             RegionNameSource::Static => {}\n         }\n     }\n@@ -240,7 +250,8 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             .or_else(|| self.give_name_if_anonymous_region_appears_in_arguments(fr))\n             .or_else(|| self.give_name_if_anonymous_region_appears_in_upvars(fr))\n             .or_else(|| self.give_name_if_anonymous_region_appears_in_output(fr))\n-            .or_else(|| self.give_name_if_anonymous_region_appears_in_yield_ty(fr));\n+            .or_else(|| self.give_name_if_anonymous_region_appears_in_yield_ty(fr))\n+            .or_else(|| self.give_name_if_anonymous_region_appears_in_impl_signature(fr));\n \n         if let Some(ref value) = value {\n             self.region_names.try_borrow_mut().unwrap().insert(fr, value.clone());\n@@ -840,4 +851,43 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             source: RegionNameSource::AnonRegionFromYieldTy(yield_span, type_name),\n         })\n     }\n+\n+    fn give_name_if_anonymous_region_appears_in_impl_signature(\n+        &self,\n+        fr: RegionVid,\n+    ) -> Option<RegionName> {\n+        let ty::ReEarlyBound(region) = *self.to_error_region(fr)? else {\n+            return None;\n+        };\n+        if region.has_name() {\n+            return None;\n+        };\n+\n+        let tcx = self.infcx.tcx;\n+        let body_parent_did = tcx.opt_parent(self.mir_def_id().to_def_id())?;\n+        if tcx.parent(region.def_id) != body_parent_did\n+            || tcx.def_kind(body_parent_did) != DefKind::Impl\n+        {\n+            return None;\n+        }\n+\n+        let mut found = false;\n+        tcx.fold_regions(tcx.type_of(body_parent_did), &mut true, |r: ty::Region<'tcx>, _| {\n+            if *r == ty::ReEarlyBound(region) {\n+                found = true;\n+            }\n+            r\n+        });\n+\n+        Some(RegionName {\n+            name: self.synthesize_region_name(),\n+            source: RegionNameSource::AnonRegionFromImplSignature(\n+                tcx.def_span(region.def_id),\n+                // FIXME(compiler-errors): Does this ever actually show up\n+                // anywhere other than the self type? I couldn't create an\n+                // example of a `'_` in the impl's trait being referenceable.\n+                if found { \"self type\" } else { \"header\" },\n+            ),\n+        })\n+    }\n }"}, {"sha": "6bb12f52d3f3eabe404dca57ccd04a49655037ff", "filename": "src/test/ui/nll/issue-98170.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e900a3549624860a466c33c04742ccfa026bdc6d/src%2Ftest%2Fui%2Fnll%2Fissue-98170.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e900a3549624860a466c33c04742ccfa026bdc6d/src%2Ftest%2Fui%2Fnll%2Fissue-98170.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-98170.rs?ref=e900a3549624860a466c33c04742ccfa026bdc6d", "patch": "@@ -0,0 +1,25 @@\n+pub struct MyStruct<'a> {\n+    field: &'a [u32],\n+}\n+\n+impl MyStruct<'_> {\n+    pub fn new<'a>(field: &'a [u32]) -> MyStruct<'a> {\n+        Self { field }\n+        //~^ ERROR lifetime may not live long enough\n+        //~| ERROR lifetime may not live long enough\n+    }\n+}\n+\n+trait Trait<'a> {\n+    fn new(field: &'a [u32]) -> MyStruct<'a>;\n+}\n+\n+impl<'a> Trait<'a> for MyStruct<'_> {\n+    fn new(field: &'a [u32]) -> MyStruct<'a> {\n+        Self { field }\n+        //~^ ERROR lifetime may not live long enough\n+        //~| ERROR lifetime may not live long enough\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0d17365e71b4ae215970ceb2dd9ed727f7275e75", "filename": "src/test/ui/nll/issue-98170.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e900a3549624860a466c33c04742ccfa026bdc6d/src%2Ftest%2Fui%2Fnll%2Fissue-98170.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e900a3549624860a466c33c04742ccfa026bdc6d/src%2Ftest%2Fui%2Fnll%2Fissue-98170.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-98170.stderr?ref=e900a3549624860a466c33c04742ccfa026bdc6d", "patch": "@@ -0,0 +1,44 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98170.rs:7:9\n+   |\n+LL | impl MyStruct<'_> {\n+   |               -- lifetime `'1` appears in the `impl`'s self type\n+LL |     pub fn new<'a>(field: &'a [u32]) -> MyStruct<'a> {\n+   |                -- lifetime `'a` defined here\n+LL |         Self { field }\n+   |         ^^^^^^^^^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98170.rs:7:16\n+   |\n+LL | impl MyStruct<'_> {\n+   |               -- lifetime `'1` appears in the `impl`'s self type\n+LL |     pub fn new<'a>(field: &'a [u32]) -> MyStruct<'a> {\n+   |                -- lifetime `'a` defined here\n+LL |         Self { field }\n+   |                ^^^^^ this usage requires that `'a` must outlive `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98170.rs:19:9\n+   |\n+LL | impl<'a> Trait<'a> for MyStruct<'_> {\n+   |      --                         -- lifetime `'1` appears in the `impl`'s self type\n+   |      |\n+   |      lifetime `'a` defined here\n+LL |     fn new(field: &'a [u32]) -> MyStruct<'a> {\n+LL |         Self { field }\n+   |         ^^^^^^^^^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98170.rs:19:16\n+   |\n+LL | impl<'a> Trait<'a> for MyStruct<'_> {\n+   |      --                         -- lifetime `'1` appears in the `impl`'s self type\n+   |      |\n+   |      lifetime `'a` defined here\n+LL |     fn new(field: &'a [u32]) -> MyStruct<'a> {\n+LL |         Self { field }\n+   |                ^^^^^ this usage requires that `'a` must outlive `'1`\n+\n+error: aborting due to 4 previous errors\n+"}]}