{"sha": "5605d58fc79e1cdacfbf01266a2d46b76df53ede", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MDVkNThmYzc5ZTFjZGFjZmJmMDEyNjZhMmQ0NmI3NmRmNTNlZGU=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-07-27T22:08:29Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-07-30T18:09:37Z"}, "message": "move extended info for E0569 to numerical-order location in file\n\nWe want the error explanations to appear in numerical order so that\nthey're easy to find. (Also, any other order would be arbitrary and thus\nnot constitute a Schelling point.) Bizarrely, the extended information\nfor E0569 was placed between E0244 and E0318 in\nlibrustc_typeck/diagnostics.rs (when the code was introduced in\n9a649c32). This commit moves it to be between E0562 and E0570, where it\nbelongs.\n\n(Also, at reviewer request, say \"Erroneous code example\", the standard\nverbiage that it has been decided that we say everywhere.)", "tree": {"sha": "3c3b3dc90fbd87c5eb898bc602e822dc80b7bbce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c3b3dc90fbd87c5eb898bc602e822dc80b7bbce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5605d58fc79e1cdacfbf01266a2d46b76df53ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5605d58fc79e1cdacfbf01266a2d46b76df53ede", "html_url": "https://github.com/rust-lang/rust/commit/5605d58fc79e1cdacfbf01266a2d46b76df53ede", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5605d58fc79e1cdacfbf01266a2d46b76df53ede/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f14ff105f58672476e79bf3eff88d0673bbf0b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f14ff105f58672476e79bf3eff88d0673bbf0b2", "html_url": "https://github.com/rust-lang/rust/commit/6f14ff105f58672476e79bf3eff88d0673bbf0b2"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "3037e8d4a16022fda56d28d647e9422169cbc5c0", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5605d58fc79e1cdacfbf01266a2d46b76df53ede/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5605d58fc79e1cdacfbf01266a2d46b76df53ede/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=5605d58fc79e1cdacfbf01266a2d46b76df53ede", "patch": "@@ -2631,26 +2631,6 @@ struct Bar<S, T> { x: Foo<S, T> }\n ```\n \"##,\n \n-E0569: r##\"\n-If an impl has a generic parameter with the `#[may_dangle]` attribute, then\n-that impl must be declared as an `unsafe impl. For example:\n-\n-```compile_fail,E0569\n-#![feature(generic_param_attrs)]\n-#![feature(dropck_eyepatch)]\n-\n-struct Foo<X>(X);\n-impl<#[may_dangle] X> Drop for Foo<X> {\n-    fn drop(&mut self) { }\n-}\n-```\n-\n-In this example, we are asserting that the destructor for `Foo` will not\n-access any data of type `X`, and require this assertion to be true for\n-overall safety in our program. The compiler does not currently attempt to\n-verify this assertion; therefore we must tag this `impl` as unsafe.\n-\"##,\n-\n E0318: r##\"\n Default impls for a trait must be located in the same crate where the trait was\n defined. For more information see the [opt-in builtin traits RFC][RFC 19].\n@@ -3976,6 +3956,28 @@ See [RFC 1522] for more details.\n [RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n \"##,\n \n+E0569: r##\"\n+If an impl has a generic parameter with the `#[may_dangle]` attribute, then\n+that impl must be declared as an `unsafe impl.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0569\n+#![feature(generic_param_attrs)]\n+#![feature(dropck_eyepatch)]\n+\n+struct Foo<X>(X);\n+impl<#[may_dangle] X> Drop for Foo<X> {\n+    fn drop(&mut self) { }\n+}\n+```\n+\n+In this example, we are asserting that the destructor for `Foo` will not\n+access any data of type `X`, and require this assertion to be true for\n+overall safety in our program. The compiler does not currently attempt to\n+verify this assertion; therefore we must tag this `impl` as unsafe.\n+\"##,\n+\n E0570: r##\"\n The requested ABI is unsupported by the current target.\n "}]}