{"sha": "91fd862df011168e7634f79fc2f2c9fb15a7afd3", "node_id": "C_kwDOAAsO6NoAKDkxZmQ4NjJkZjAxMTE2OGU3NjM0Zjc5ZmMyZjJjOWZiMTVhN2FmZDM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-03T02:49:31Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-15T15:29:53Z"}, "message": "instantiate_own doesn't need to return a pair of vectors", "tree": {"sha": "6299caf60601e334a6750caa7e6875157e0a5293", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6299caf60601e334a6750caa7e6875157e0a5293"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91fd862df011168e7634f79fc2f2c9fb15a7afd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91fd862df011168e7634f79fc2f2c9fb15a7afd3", "html_url": "https://github.com/rust-lang/rust/commit/91fd862df011168e7634f79fc2f2c9fb15a7afd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91fd862df011168e7634f79fc2f2c9fb15a7afd3/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc11ee02ee91b32e23684cd478bca80fe5323b47", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc11ee02ee91b32e23684cd478bca80fe5323b47", "html_url": "https://github.com/rust-lang/rust/commit/fc11ee02ee91b32e23684cd478bca80fe5323b47"}], "stats": {"total": 66, "additions": 39, "deletions": 27}, "files": [{"sha": "c43bfd16ab1e4496d35ffcd81162d71d6c99d9b4", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/91fd862df011168e7634f79fc2f2c9fb15a7afd3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fd862df011168e7634f79fc2f2c9fb15a7afd3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=91fd862df011168e7634f79fc2f2c9fb15a7afd3", "patch": "@@ -209,9 +209,11 @@ fn compare_method_predicate_entailment<'tcx>(\n     //\n     // We then register the obligations from the impl_m and check to see\n     // if all constraints hold.\n-    hybrid_preds\n-        .predicates\n-        .extend(trait_m_predicates.instantiate_own(tcx, trait_to_placeholder_substs).predicates);\n+    hybrid_preds.predicates.extend(\n+        trait_m_predicates\n+            .instantiate_own(tcx, trait_to_placeholder_substs)\n+            .map(|(predicate, _)| predicate),\n+    );\n \n     // Construct trait parameter environment and then shift it into the placeholder viewpoint.\n     // The key step here is to update the caller_bounds's predicates to be\n@@ -230,7 +232,7 @@ fn compare_method_predicate_entailment<'tcx>(\n     debug!(\"compare_impl_method: caller_bounds={:?}\", param_env.caller_bounds());\n \n     let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_placeholder_substs);\n-    for (predicate, span) in iter::zip(impl_m_own_bounds.predicates, impl_m_own_bounds.spans) {\n+    for (predicate, span) in impl_m_own_bounds {\n         let normalize_cause = traits::ObligationCause::misc(span, impl_m_hir_id);\n         let predicate = ocx.normalize(&normalize_cause, param_env, predicate);\n \n@@ -1828,8 +1830,7 @@ fn compare_type_predicate_entailment<'tcx>(\n     check_region_bounds_on_impl_item(tcx, impl_ty, trait_ty, false)?;\n \n     let impl_ty_own_bounds = impl_ty_predicates.instantiate_own(tcx, impl_substs);\n-\n-    if impl_ty_own_bounds.is_empty() {\n+    if impl_ty_own_bounds.len() == 0 {\n         // Nothing to check.\n         return Ok(());\n     }\n@@ -1844,9 +1845,11 @@ fn compare_type_predicate_entailment<'tcx>(\n     // associated type in the trait are assumed.\n     let impl_predicates = tcx.predicates_of(impl_ty_predicates.parent.unwrap());\n     let mut hybrid_preds = impl_predicates.instantiate_identity(tcx);\n-    hybrid_preds\n-        .predicates\n-        .extend(trait_ty_predicates.instantiate_own(tcx, trait_to_impl_substs).predicates);\n+    hybrid_preds.predicates.extend(\n+        trait_ty_predicates\n+            .instantiate_own(tcx, trait_to_impl_substs)\n+            .map(|(predicate, _)| predicate),\n+    );\n \n     debug!(\"compare_type_predicate_entailment: bounds={:?}\", hybrid_preds);\n \n@@ -1862,9 +1865,7 @@ fn compare_type_predicate_entailment<'tcx>(\n \n     debug!(\"compare_type_predicate_entailment: caller_bounds={:?}\", param_env.caller_bounds());\n \n-    assert_eq!(impl_ty_own_bounds.predicates.len(), impl_ty_own_bounds.spans.len());\n-    for (span, predicate) in std::iter::zip(impl_ty_own_bounds.spans, impl_ty_own_bounds.predicates)\n-    {\n+    for (predicate, span) in impl_ty_own_bounds {\n         let cause = ObligationCause::misc(span, impl_ty_hir_id);\n         let predicate = ocx.normalize(&cause, param_env, predicate);\n "}, {"sha": "801ca6004456827daba7eaf84db464e153ac1387", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91fd862df011168e7634f79fc2f2c9fb15a7afd3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fd862df011168e7634f79fc2f2c9fb15a7afd3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=91fd862df011168e7634f79fc2f2c9fb15a7afd3", "patch": "@@ -341,15 +341,9 @@ impl<'tcx> GenericPredicates<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         substs: SubstsRef<'tcx>,\n-    ) -> InstantiatedPredicates<'tcx> {\n-        InstantiatedPredicates {\n-            predicates: self\n-                .predicates\n-                .iter()\n-                .map(|(p, _)| EarlyBinder(*p).subst(tcx, substs))\n-                .collect(),\n-            spans: self.predicates.iter().map(|(_, sp)| *sp).collect(),\n-        }\n+    ) -> impl Iterator<Item = (Predicate<'tcx>, Span)> + DoubleEndedIterator + ExactSizeIterator\n+    {\n+        EarlyBinder(self.predicates).subst_iter_copied(tcx, substs)\n     }\n \n     #[instrument(level = \"debug\", skip(self, tcx))]"}, {"sha": "5dc9e311bf6b1cd30a3ee1639811ed1d007e7030", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/91fd862df011168e7634f79fc2f2c9fb15a7afd3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fd862df011168e7634f79fc2f2c9fb15a7afd3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=91fd862df011168e7634f79fc2f2c9fb15a7afd3", "patch": "@@ -639,6 +639,13 @@ where\n     }\n }\n \n+impl<'tcx, I: IntoIterator> ExactSizeIterator for SubstIter<'_, 'tcx, I>\n+where\n+    I::IntoIter: ExactSizeIterator,\n+    I::Item: TypeFoldable<'tcx>,\n+{\n+}\n+\n impl<'tcx, 's, I: IntoIterator> EarlyBinder<I>\n where\n     I::Item: Deref,\n@@ -686,6 +693,14 @@ where\n     }\n }\n \n+impl<'tcx, I: IntoIterator> ExactSizeIterator for SubstIterCopied<'_, 'tcx, I>\n+where\n+    I::IntoIter: ExactSizeIterator,\n+    I::Item: Deref,\n+    <I::Item as Deref>::Target: Copy + TypeFoldable<'tcx>,\n+{\n+}\n+\n pub struct EarlyBinderIter<T> {\n     t: T,\n }"}, {"sha": "15320916fbe0968e5df556c63a66e4b56eca2999", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91fd862df011168e7634f79fc2f2c9fb15a7afd3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fd862df011168e7634f79fc2f2c9fb15a7afd3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=91fd862df011168e7634f79fc2f2c9fb15a7afd3", "patch": "@@ -2303,10 +2303,10 @@ fn assoc_ty_own_obligations<'cx, 'tcx>(\n     nested: &mut Vec<PredicateObligation<'tcx>>,\n ) {\n     let tcx = selcx.tcx();\n-    let own = tcx\n+    let predicates = tcx\n         .predicates_of(obligation.predicate.def_id)\n         .instantiate_own(tcx, obligation.predicate.substs);\n-    for (predicate, span) in std::iter::zip(own.predicates, own.spans) {\n+    for (predicate, span) in predicates {\n         let normalized = normalize_with_depth_to(\n             selcx,\n             obligation.param_env,"}, {"sha": "d4ac461690c9034460e6a5696d1d6ef38db64b97", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91fd862df011168e7634f79fc2f2c9fb15a7afd3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fd862df011168e7634f79fc2f2c9fb15a7afd3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=91fd862df011168e7634f79fc2f2c9fb15a7afd3", "patch": "@@ -185,9 +185,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         })?);\n \n         if let ty::Alias(ty::Projection, ..) = placeholder_self_ty.kind() {\n-            let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs).predicates;\n-            debug!(?predicates, \"projection predicates\");\n-            for predicate in predicates {\n+            let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs);\n+            for (predicate, _) in predicates {\n                 let normalized = normalize_with_depth_to(\n                     self,\n                     obligation.param_env,"}, {"sha": "64daca714c32d1e8b20d6ed3ed8a300727a0bc69", "filename": "compiler/rustc_trait_selection/src/traits/vtable.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91fd862df011168e7634f79fc2f2c9fb15a7afd3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fd862df011168e7634f79fc2f2c9fb15a7afd3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fvtable.rs?ref=91fd862df011168e7634f79fc2f2c9fb15a7afd3", "patch": "@@ -261,7 +261,10 @@ fn vtable_entries<'tcx>(\n                     // Note that this method could then never be called, so we\n                     // do not want to try and codegen it, in that case (see #23435).\n                     let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs);\n-                    if impossible_predicates(tcx, predicates.predicates) {\n+                    if impossible_predicates(\n+                        tcx,\n+                        predicates.map(|(predicate, _)| predicate).collect(),\n+                    ) {\n                         debug!(\"vtable_entries: predicates do not hold\");\n                         return VtblEntry::Vacant;\n                     }"}]}