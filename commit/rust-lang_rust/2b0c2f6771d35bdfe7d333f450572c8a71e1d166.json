{"sha": "2b0c2f6771d35bdfe7d333f450572c8a71e1d166", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMGMyZjY3NzFkMzViZGZlN2QzMzNmNDUwNTcyYzhhNzFlMWQxNjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-03T23:18:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-03T23:18:16Z"}, "message": "Merge #5659\n\n5659: Revert LineIndex optimizations to fix #5656 r=matklad a=lazear\n\nThis PR reverts the changes from https://github.com/rust-analyzer/rust-analyzer/pull/5532, which was causing issues as described in\r\nhttps://github.com/rust-analyzer/rust-analyzer/issues/5656\n\nCo-authored-by: Michael Lazear <lazear@scripps.edu>", "tree": {"sha": "01de0be46feaa0237adb61d30fe09f2445be599f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01de0be46feaa0237adb61d30fe09f2445be599f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b0c2f6771d35bdfe7d333f450572c8a71e1d166", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfKJs4CRBK7hj4Ov3rIwAAdHIIAJav0/DsiPphIx9l1Lyzj1c8\n5WgH0Y8NiRkcwcyfiHYfulEl2VPWj/dPHTwZnd/cta8mfD9ddMBAuvdprPx9yrMA\noZvksWfFLJBD/Z5ioaBEnm46xRLbNU+4aI+h+FTnuEL426tQwgj8B2IerS8FFeaM\nlYJgW+XzH+P6TZY2biP3fSfFvmXW1j8cfKuZ39G2XehUU5TKpbXmP4TKOlgk9qCr\n6VkVxMs+CwQKSRYKGZrbRokJtQlAuUPxMNpLLSJ0sGNKKMW0MQdGk74vDJ/8n9on\nvVvF4XIGroaw17/kg41QKsM53AzNta/Fca7LHnfsZ+UgT07jj8EwpdFssOoLzbY=\n=+64c\n-----END PGP SIGNATURE-----\n", "payload": "tree 01de0be46feaa0237adb61d30fe09f2445be599f\nparent 33e53d472158746c6a0150538bea348ce0e5a22d\nparent 2e72e74dbd41471579a10b564d97e23248aae594\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596496696 +0000\ncommitter GitHub <noreply@github.com> 1596496696 +0000\n\nMerge #5659\n\n5659: Revert LineIndex optimizations to fix #5656 r=matklad a=lazear\n\nThis PR reverts the changes from https://github.com/rust-analyzer/rust-analyzer/pull/5532, which was causing issues as described in\r\nhttps://github.com/rust-analyzer/rust-analyzer/issues/5656\n\nCo-authored-by: Michael Lazear <lazear@scripps.edu>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b0c2f6771d35bdfe7d333f450572c8a71e1d166", "html_url": "https://github.com/rust-lang/rust/commit/2b0c2f6771d35bdfe7d333f450572c8a71e1d166", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b0c2f6771d35bdfe7d333f450572c8a71e1d166/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33e53d472158746c6a0150538bea348ce0e5a22d", "url": "https://api.github.com/repos/rust-lang/rust/commits/33e53d472158746c6a0150538bea348ce0e5a22d", "html_url": "https://github.com/rust-lang/rust/commit/33e53d472158746c6a0150538bea348ce0e5a22d"}, {"sha": "2e72e74dbd41471579a10b564d97e23248aae594", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e72e74dbd41471579a10b564d97e23248aae594", "html_url": "https://github.com/rust-lang/rust/commit/2e72e74dbd41471579a10b564d97e23248aae594"}], "stats": {"total": 54, "additions": 23, "deletions": 31}, "files": [{"sha": "0bc3ff115df9438fc5e5b7b8827445027173d2bf", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2b0c2f6771d35bdfe7d333f450572c8a71e1d166/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0c2f6771d35bdfe7d333f450572c8a71e1d166/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=2b0c2f6771d35bdfe7d333f450572c8a71e1d166", "patch": "@@ -1,5 +1,5 @@\n //! Utilities for LSP-related boilerplate code.\n-use std::{borrow::Cow, error::Error, ops::Range};\n+use std::{error::Error, ops::Range};\n \n use lsp_server::Notification;\n use ra_db::Canceled;\n@@ -84,8 +84,8 @@ impl GlobalState {\n pub(crate) fn apply_document_changes(\n     old_text: &mut String,\n     content_changes: Vec<lsp_types::TextDocumentContentChangeEvent>,\n-    mut line_index: Cow<'_, LineIndex>,\n ) {\n+    let mut line_index = LineIndex::new(old_text);\n     // The changes we got must be applied sequentially, but can cross lines so we\n     // have to keep our line index updated.\n     // Some clients (e.g. Code) sort the ranges in reverse. As an optimization, we\n@@ -110,7 +110,7 @@ pub(crate) fn apply_document_changes(\n         match change.range {\n             Some(range) => {\n                 if !index_valid.covers(range.end.line) {\n-                    line_index = Cow::Owned(LineIndex::new(old_text));\n+                    line_index = LineIndex::new(&old_text);\n                 }\n                 index_valid = IndexValid::UpToLineExclusive(range.start.line);\n                 let range = from_proto::text_range(&line_index, range);\n@@ -145,15 +145,10 @@ mod tests {\n             };\n         }\n \n-        fn run(text: &mut String, changes: Vec<TextDocumentContentChangeEvent>) {\n-            let line_index = Cow::Owned(LineIndex::new(&text));\n-            super::apply_document_changes(text, changes, line_index);\n-        }\n-\n         let mut text = String::new();\n-        run(&mut text, vec![]);\n+        apply_document_changes(&mut text, vec![]);\n         assert_eq!(text, \"\");\n-        run(\n+        apply_document_changes(\n             &mut text,\n             vec![TextDocumentContentChangeEvent {\n                 range: None,\n@@ -162,36 +157,39 @@ mod tests {\n             }],\n         );\n         assert_eq!(text, \"the\");\n-        run(&mut text, c![0, 3; 0, 3 => \" quick\"]);\n+        apply_document_changes(&mut text, c![0, 3; 0, 3 => \" quick\"]);\n         assert_eq!(text, \"the quick\");\n-        run(&mut text, c![0, 0; 0, 4 => \"\", 0, 5; 0, 5 => \" foxes\"]);\n+        apply_document_changes(&mut text, c![0, 0; 0, 4 => \"\", 0, 5; 0, 5 => \" foxes\"]);\n         assert_eq!(text, \"quick foxes\");\n-        run(&mut text, c![0, 11; 0, 11 => \"\\ndream\"]);\n+        apply_document_changes(&mut text, c![0, 11; 0, 11 => \"\\ndream\"]);\n         assert_eq!(text, \"quick foxes\\ndream\");\n-        run(&mut text, c![1, 0; 1, 0 => \"have \"]);\n+        apply_document_changes(&mut text, c![1, 0; 1, 0 => \"have \"]);\n         assert_eq!(text, \"quick foxes\\nhave dream\");\n-        run(&mut text, c![0, 0; 0, 0 => \"the \", 1, 4; 1, 4 => \" quiet\", 1, 16; 1, 16 => \"s\\n\"]);\n+        apply_document_changes(\n+            &mut text,\n+            c![0, 0; 0, 0 => \"the \", 1, 4; 1, 4 => \" quiet\", 1, 16; 1, 16 => \"s\\n\"],\n+        );\n         assert_eq!(text, \"the quick foxes\\nhave quiet dreams\\n\");\n-        run(&mut text, c![0, 15; 0, 15 => \"\\n\", 2, 17; 2, 17 => \"\\n\"]);\n+        apply_document_changes(&mut text, c![0, 15; 0, 15 => \"\\n\", 2, 17; 2, 17 => \"\\n\"]);\n         assert_eq!(text, \"the quick foxes\\n\\nhave quiet dreams\\n\\n\");\n-        run(\n+        apply_document_changes(\n             &mut text,\n             c![1, 0; 1, 0 => \"DREAM\", 2, 0; 2, 0 => \"they \", 3, 0; 3, 0 => \"DON'T THEY?\"],\n         );\n         assert_eq!(text, \"the quick foxes\\nDREAM\\nthey have quiet dreams\\nDON'T THEY?\\n\");\n-        run(&mut text, c![0, 10; 1, 5 => \"\", 2, 0; 2, 12 => \"\"]);\n+        apply_document_changes(&mut text, c![0, 10; 1, 5 => \"\", 2, 0; 2, 12 => \"\"]);\n         assert_eq!(text, \"the quick \\nthey have quiet dreams\\n\");\n \n         text = String::from(\"\u2764\ufe0f\");\n-        run(&mut text, c![0, 0; 0, 0 => \"a\"]);\n+        apply_document_changes(&mut text, c![0, 0; 0, 0 => \"a\"]);\n         assert_eq!(text, \"a\u2764\ufe0f\");\n \n         text = String::from(\"a\\nb\");\n-        run(&mut text, c![0, 1; 1, 0 => \"\\n\u021bc\", 0, 1; 1, 1 => \"d\"]);\n+        apply_document_changes(&mut text, c![0, 1; 1, 0 => \"\\n\u021bc\", 0, 1; 1, 1 => \"d\"]);\n         assert_eq!(text, \"adcb\");\n \n         text = String::from(\"a\\nb\");\n-        run(&mut text, c![0, 1; 1, 0 => \"\u021b\\nc\", 0, 2; 0, 2 => \"c\"]);\n+        apply_document_changes(&mut text, c![0, 1; 1, 0 => \"\u021b\\nc\", 0, 2; 0, 2 => \"c\"]);\n         assert_eq!(text, \"a\u021bc\\ncb\");\n     }\n }"}, {"sha": "51626fcd58e046c34703c34cc740d1814634136d", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2b0c2f6771d35bdfe7d333f450572c8a71e1d166/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b0c2f6771d35bdfe7d333f450572c8a71e1d166/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=2b0c2f6771d35bdfe7d333f450572c8a71e1d166", "patch": "@@ -1,14 +1,13 @@\n //! The main loop of `rust-analyzer` responsible for dispatching LSP\n //! requests/replies and notifications back to the client.\n use std::{\n-    borrow::Cow,\n     env, fmt, panic,\n     time::{Duration, Instant},\n };\n \n use crossbeam_channel::{select, Receiver};\n use lsp_server::{Connection, Notification, Request, Response};\n-use lsp_types::{notification::Notification as _, DidChangeTextDocumentParams};\n+use lsp_types::notification::Notification as _;\n use ra_db::VfsPath;\n use ra_ide::{Canceled, FileId};\n use ra_prof::profile;\n@@ -422,20 +421,15 @@ impl GlobalState {\n             })?\n             .on::<lsp_types::notification::DidChangeTextDocument>(|this, params| {\n                 if let Ok(path) = from_proto::vfs_path(&params.text_document.uri) {\n-                    let DidChangeTextDocumentParams { text_document, content_changes } = params;\n+                    let doc = this.mem_docs.get_mut(&path).unwrap();\n                     let vfs = &mut this.vfs.write().0;\n-                    let world = this.snapshot();\n                     let file_id = vfs.file_id(&path).unwrap();\n-\n-                    // let file_id = vfs.file_id(&path).unwrap();\n                     let mut text = String::from_utf8(vfs.file_contents(file_id).to_vec()).unwrap();\n-                    let line_index = world.analysis.file_line_index(file_id)?;\n-                    apply_document_changes(&mut text, content_changes, Cow::Borrowed(&line_index));\n+                    apply_document_changes(&mut text, params.content_changes);\n \n                     // The version passed in DidChangeTextDocument is the version after all edits are applied\n                     // so we should apply it before the vfs is notified.\n-                    let doc = this.mem_docs.get_mut(&path).unwrap();\n-                    doc.version = text_document.version;\n+                    doc.version = params.text_document.version;\n \n                     vfs.set_file_contents(path.clone(), Some(text.into_bytes()));\n                 }"}]}