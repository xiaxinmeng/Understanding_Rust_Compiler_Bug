{"sha": "1fe9b7f3fe5781a0fdf57d89c39048cb960f3040", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZTliN2YzZmU1NzgxYTBmZGY1N2Q4OWMzOTA0OGNiOTYwZjMwNDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-12T02:20:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-12T02:20:04Z"}, "message": "Auto merge of #77790 - jyn514:undivided, r=ollie27\n\nShow summary lines on cross-crate re-exports\n\nSee my write-up in https://github.com/rust-lang/rust/issues/77783#issuecomment-706551743 for what's going on here.\n\nFixes https://github.com/rust-lang/rust/issues/77783\n\nr? `@ollie27`", "tree": {"sha": "2c8e82ee168c67d2971e6fcea381880c3434e651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c8e82ee168c67d2971e6fcea381880c3434e651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040", "html_url": "https://github.com/rust-lang/rust/commit/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "576e2277acda16dff6293b5c180e7851e6b17d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/576e2277acda16dff6293b5c180e7851e6b17d5c", "html_url": "https://github.com/rust-lang/rust/commit/576e2277acda16dff6293b5c180e7851e6b17d5c"}, {"sha": "41878285e84f4baf54c5f1d3b566df8459185fde", "url": "https://api.github.com/repos/rust-lang/rust/commits/41878285e84f4baf54c5f1d3b566df8459185fde", "html_url": "https://github.com/rust-lang/rust/commit/41878285e84f4baf54c5f1d3b566df8459185fde"}], "stats": {"total": 61, "additions": 32, "deletions": 29}, "files": [{"sha": "76efdfc1675b2b60c356c58fa2e39f07dab618ac", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=1fe9b7f3fe5781a0fdf57d89c39048cb960f3040", "patch": "@@ -393,24 +393,6 @@ pub enum DocFragmentKind {\n     /// A doc fragment created from a `#[doc(include=\"filename\")]` attribute. Contains both the\n     /// given filename and the file contents.\n     Include { filename: String },\n-    /// A doc fragment used to distinguish between documentation in different modules.\n-    ///\n-    /// In particular, this prevents `collapse_docs` from turning all documentation comments\n-    /// into a single giant attributes even when the item is re-exported with documentation on the re-export.\n-    Divider,\n-}\n-\n-impl DocFragment {\n-    /// Creates a dummy doc-fragment which divides earlier and later fragments.\n-    fn divider() -> Self {\n-        DocFragment {\n-            line: 0,\n-            span: DUMMY_SP,\n-            parent_module: None,\n-            doc: String::new(),\n-            kind: DocFragmentKind::Divider,\n-        }\n-    }\n }\n \n impl<'a> FromIterator<&'a DocFragment> for String {\n@@ -551,7 +533,7 @@ impl Attributes {\n         attrs: &[ast::Attribute],\n         additional_attrs: Option<(&[ast::Attribute], DefId)>,\n     ) -> Attributes {\n-        let doc_strings = RefCell::new(vec![]);\n+        let mut doc_strings = vec![];\n         let mut sp = None;\n         let mut cfg = Cfg::True;\n         let mut doc_line = 0;\n@@ -568,7 +550,7 @@ impl Attributes {\n \n                 let line = doc_line;\n                 doc_line += value.lines().count();\n-                doc_strings.borrow_mut().push(DocFragment {\n+                doc_strings.push(DocFragment {\n                     line,\n                     span: attr.span,\n                     doc: value,\n@@ -593,7 +575,7 @@ impl Attributes {\n                         {\n                             let line = doc_line;\n                             doc_line += contents.lines().count();\n-                            doc_strings.borrow_mut().push(DocFragment {\n+                            doc_strings.push(DocFragment {\n                                 line,\n                                 span: attr.span,\n                                 doc: contents,\n@@ -610,10 +592,7 @@ impl Attributes {\n         // Additional documentation should be shown before the original documentation\n         let other_attrs = additional_attrs\n             .into_iter()\n-            .map(|(attrs, id)| {\n-                doc_strings.borrow_mut().push(DocFragment::divider());\n-                attrs.iter().map(move |attr| (attr, Some(id)))\n-            })\n+            .map(|(attrs, id)| attrs.iter().map(move |attr| (attr, Some(id))))\n             .flatten()\n             .chain(attrs.iter().map(|attr| (attr, None)))\n             .filter_map(clean_attr)\n@@ -642,7 +621,7 @@ impl Attributes {\n             .map_or(true, |a| a.style == AttrStyle::Inner);\n \n         Attributes {\n-            doc_strings: doc_strings.into_inner(),\n+            doc_strings,\n             other_attrs,\n             cfg: if cfg == Cfg::True { None } else { Some(Arc::new(cfg)) },\n             span: sp,"}, {"sha": "c2f7f97a673ce3aeaa4cfb24235e0a0cd88b01e0", "filename": "src/librustdoc/passes/collapse_docs.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs?ref=1fe9b7f3fe5781a0fdf57d89c39048cb960f3040", "patch": "@@ -36,7 +36,10 @@ fn collapse(doc_strings: &mut Vec<DocFragment>) {\n             let curr_kind = &curr_frag.kind;\n             let new_kind = &frag.kind;\n \n-            if matches!(*curr_kind, DocFragmentKind::Include { .. }) || curr_kind != new_kind {\n+            if matches!(*curr_kind, DocFragmentKind::Include { .. })\n+                || curr_kind != new_kind\n+                || curr_frag.parent_module != frag.parent_module\n+            {\n                 if *curr_kind == DocFragmentKind::SugaredDoc\n                     || *curr_kind == DocFragmentKind::RawDoc\n                 {"}, {"sha": "fc51995a94eccc7724f30c13a1a98f3c92269093", "filename": "src/test/rustdoc/auxiliary/intra-link-reexport-additional-docs.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040/src%2Ftest%2Frustdoc%2Fauxiliary%2Fintra-link-reexport-additional-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040/src%2Ftest%2Frustdoc%2Fauxiliary%2Fintra-link-reexport-additional-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fintra-link-reexport-additional-docs.rs?ref=1fe9b7f3fe5781a0fdf57d89c39048cb960f3040", "patch": "@@ -0,0 +1,6 @@\n+#![crate_name = \"inner\"]\n+\n+/// Links to [f()]\n+pub struct Inner;\n+\n+pub fn f() {}"}, {"sha": "672ccb1cf0e8889b3f8515b8c89eb2caf2683cce", "filename": "src/test/rustdoc/auxiliary/reexport-check.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040/src%2Ftest%2Frustdoc%2Fauxiliary%2Freexport-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040/src%2Ftest%2Frustdoc%2Fauxiliary%2Freexport-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Freexport-check.rs?ref=1fe9b7f3fe5781a0fdf57d89c39048cb960f3040", "patch": "@@ -0,0 +1,2 @@\n+/// Docs in original\n+pub struct S;"}, {"sha": "96f3580f3055e8e2405fbfb5627c4c59ecb42f65", "filename": "src/test/rustdoc/intra-link-reexport-additional-docs.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040/src%2Ftest%2Frustdoc%2Fintra-link-reexport-additional-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040/src%2Ftest%2Frustdoc%2Fintra-link-reexport-additional-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-reexport-additional-docs.rs?ref=1fe9b7f3fe5781a0fdf57d89c39048cb960f3040", "patch": "@@ -1,6 +1,9 @@\n+// aux-build:intra-link-reexport-additional-docs.rs\n+// build-aux-docs\n #![crate_name = \"foo\"]\n+extern crate inner;\n \n-// @has foo/struct.JoinPathsError.html '//a[@href=\"../foo/fn.with_code.html\"]' 'crate::with_code'\n+// @has foo/struct.Inner.html '//a[@href=\"../foo/fn.with_code.html\"]' 'crate::with_code'\n /// [crate::with_code]\n // @has - '//a[@href=\"../foo/fn.with_code.html\"]' 'different text'\n /// [different text][with_code]\n@@ -11,7 +14,9 @@\n #[doc = \"has an attr in the way\"]\n ///\n /// [reference link]: me_three\n-pub use std::env::JoinPathsError;\n+// Should still resolve links from the original module in that scope\n+// @has - '//a[@href=\"../inner/fn.f.html\"]' 'f()'\n+pub use inner::Inner;\n \n pub fn with_code() {}\n pub fn me_too() {}"}, {"sha": "066b0cfe5e80e2f35be81c060e963122f951fc68", "filename": "src/test/rustdoc/reexport-check.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040/src%2Ftest%2Frustdoc%2Freexport-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fe9b7f3fe5781a0fdf57d89c39048cb960f3040/src%2Ftest%2Frustdoc%2Freexport-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexport-check.rs?ref=1fe9b7f3fe5781a0fdf57d89c39048cb960f3040", "patch": "@@ -1,9 +1,17 @@\n+// aux-build:reexport-check.rs\n #![crate_name = \"foo\"]\n \n+extern crate reexport_check;\n+\n // @!has 'foo/index.html' '//code' 'pub use self::i32;'\n // @has 'foo/index.html' '//tr[@class=\"module-item\"]' 'i32'\n // @has 'foo/i32/index.html'\n pub use std::i32;\n // @!has 'foo/index.html' '//code' 'pub use self::string::String;'\n // @has 'foo/index.html' '//tr[@class=\"module-item\"]' 'String'\n pub use std::string::String;\n+\n+// @has 'foo/index.html' '//td[@class=\"docblock-short\"]' 'Docs in original'\n+// this is a no-op, but shows what happens if there's an attribute that isn't a doc-comment\n+#[doc(inline)]\n+pub use reexport_check::S;"}]}