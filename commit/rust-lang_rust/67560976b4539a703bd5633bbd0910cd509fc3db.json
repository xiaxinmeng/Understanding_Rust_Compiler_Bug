{"sha": "67560976b4539a703bd5633bbd0910cd509fc3db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NTYwOTc2YjQ1MzlhNzAzYmQ1NjMzYmJkMDkxMGNkNTA5ZmMzZGI=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-11-27T17:39:25Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-12-04T15:18:03Z"}, "message": "fix imports", "tree": {"sha": "582824dca6f5812ae368edad7438d7bc3a0d69e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/582824dca6f5812ae368edad7438d7bc3a0d69e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67560976b4539a703bd5633bbd0910cd509fc3db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67560976b4539a703bd5633bbd0910cd509fc3db", "html_url": "https://github.com/rust-lang/rust/commit/67560976b4539a703bd5633bbd0910cd509fc3db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67560976b4539a703bd5633bbd0910cd509fc3db/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07a04862287b0f3a74a71fa5a45c982bb2e526b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a04862287b0f3a74a71fa5a45c982bb2e526b9", "html_url": "https://github.com/rust-lang/rust/commit/07a04862287b0f3a74a71fa5a45c982bb2e526b9"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "240077d744075fc1c36d4287240876a945dde1ec", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/67560976b4539a703bd5633bbd0910cd509fc3db/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67560976b4539a703bd5633bbd0910cd509fc3db/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=67560976b4539a703bd5633bbd0910cd509fc3db", "patch": "@@ -14,18 +14,21 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n use syntax::source_map::DesugaringKind;\n \n-use super::nll::explain_borrow::BorrowExplanation;\n-use super::nll::region_infer::{RegionName, RegionNameSource};\n-use super::prefixes::IsPrefixOf;\n-use super::WriteKind;\n-use super::borrow_set::BorrowData;\n-use super::MirBorrowckCtxt;\n-use super::{InitializationRequiringAction, PrefixSet};\n-use super::error_reporting::{IncludingDowncast, UseSpans};\n use crate::dataflow::drop_flag_effects;\n use crate::dataflow::indexes::{MovePathIndex, MoveOutIndex};\n use crate::util::borrowck_errors;\n \n+use crate::borrow_check::{\n+    nll::explain_borrow::BorrowExplanation,\n+    nll::region_infer::{RegionName, RegionNameSource},\n+    prefixes::IsPrefixOf,\n+    WriteKind,\n+    borrow_set::BorrowData,\n+    MirBorrowckCtxt, InitializationRequiringAction, PrefixSet\n+};\n+\n+use super::{IncludingDowncast, UseSpans};\n+\n #[derive(Debug)]\n struct MoveSite {\n     /// Index of the \"move out\" that we found. The `MoveData` can\n@@ -46,7 +49,7 @@ enum StorageDeadOrDrop<'tcx> {\n }\n \n impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n-    pub(super) fn report_use_of_moved_or_uninitialized(\n+    pub(in crate::borrow_check) fn report_use_of_moved_or_uninitialized(\n         &mut self,\n         location: Location,\n         desired_action: InitializationRequiringAction,\n@@ -269,7 +272,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n     }\n \n-    pub(super) fn report_move_out_while_borrowed(\n+    pub(in crate::borrow_check) fn report_move_out_while_borrowed(\n         &mut self,\n         location: Location,\n         (place, span): (&Place<'tcx>, Span),\n@@ -326,7 +329,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err.buffer(&mut self.errors_buffer);\n     }\n \n-    pub(super) fn report_use_while_mutably_borrowed(\n+    pub(in crate::borrow_check) fn report_use_while_mutably_borrowed(\n         &mut self,\n         location: Location,\n         (place, _span): (&Place<'tcx>, Span),\n@@ -368,7 +371,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         err\n     }\n \n-    pub(super) fn report_conflicting_borrow(\n+    pub(in crate::borrow_check) fn report_conflicting_borrow(\n         &mut self,\n         location: Location,\n         (place, span): (&Place<'tcx>, Span),\n@@ -614,7 +617,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ///\n     /// >  cannot borrow `a.u` (via `a.u.z.c`) as immutable because it is also borrowed as\n     /// >  mutable (via `a.u.s.b`) [E0502]\n-    pub(super) fn describe_place_for_conflicting_borrow(\n+    pub(in crate::borrow_check) fn describe_place_for_conflicting_borrow(\n         &self,\n         first_borrowed_place: &Place<'tcx>,\n         second_borrowed_place: &Place<'tcx>,\n@@ -722,7 +725,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// short a lifetime. (But sometimes it is more useful to report\n     /// it as a more direct conflict between the execution of a\n     /// `Drop::drop` with an aliasing borrow.)\n-    pub(super) fn report_borrowed_value_does_not_live_long_enough(\n+    pub(in crate::borrow_check) fn report_borrowed_value_does_not_live_long_enough(\n         &mut self,\n         location: Location,\n         borrow: &BorrowData<'tcx>,\n@@ -1478,7 +1481,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         result\n     }\n \n-    pub(super) fn report_illegal_mutation_of_borrowed(\n+    pub(in crate::borrow_check) fn report_illegal_mutation_of_borrowed(\n         &mut self,\n         location: Location,\n         (place, span): (&Place<'tcx>, Span),\n@@ -1537,7 +1540,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// assigned; `err_place` is a place providing a reason why\n     /// `place` is not mutable (e.g., the non-`mut` local `x` in an\n     /// assignment to `x.f`).\n-    pub(super) fn report_illegal_reassignment(\n+    pub(in crate::borrow_check) fn report_illegal_reassignment(\n         &mut self,\n         _location: Location,\n         (place, span): (&Place<'tcx>, Span),\n@@ -2080,7 +2083,7 @@ enum AnnotatedBorrowFnSignature<'tcx> {\n impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n     /// Annotate the provided diagnostic with information about borrow from the fn signature that\n     /// helps explain.\n-    pub(super) fn emit(\n+    pub(in crate::borrow_check) fn emit(\n         &self,\n         cx: &mut MirBorrowckCtxt<'_, 'tcx>,\n         diag: &mut DiagnosticBuilder<'_>,"}, {"sha": "c4ad63d7bb81cbeafdda2bdf1b226d876816cf4d", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67560976b4539a703bd5633bbd0910cd509fc3db/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67560976b4539a703bd5633bbd0910cd509fc3db/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=67560976b4539a703bd5633bbd0910cd509fc3db", "patch": "@@ -1,3 +1,5 @@\n+//! Borrow checker diagnostics.\n+\n use rustc::hir;\n use rustc::hir::def::Namespace;\n use rustc::hir::def_id::DefId;\n@@ -17,6 +19,10 @@ use super::borrow_set::BorrowData;\n use super::MirBorrowckCtxt;\n use crate::dataflow::move_paths::{InitLocation, LookupResult};\n \n+crate mod conflict_errors;\n+crate mod move_errors;\n+crate mod mutability_errors;\n+\n pub(super) struct IncludingDowncast(pub(super) bool);\n \n impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {"}, {"sha": "938836db9ae4b95b6554c1cc60453c0d15a522f9", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67560976b4539a703bd5633bbd0910cd509fc3db/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67560976b4539a703bd5633bbd0910cd509fc3db/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=67560976b4539a703bd5633bbd0910cd509fc3db", "patch": "@@ -5,7 +5,7 @@ use syntax_pos::Span;\n \n use crate::borrow_check::MirBorrowckCtxt;\n use crate::borrow_check::prefixes::PrefixSet;\n-use crate::borrow_check::error_reporting::UseSpans;\n+use crate::borrow_check::diagnostics::UseSpans;\n use crate::dataflow::move_paths::{\n     IllegalMoveOrigin, IllegalMoveOriginKind,\n     LookupResult, MoveError, MovePathIndex,"}, {"sha": "6449ae349abf2393be9e1c8b88c782bb1ff4348b", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67560976b4539a703bd5633bbd0910cd509fc3db/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67560976b4539a703bd5633bbd0910cd509fc3db/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=67560976b4539a703bd5633bbd0910cd509fc3db", "patch": "@@ -8,18 +8,18 @@ use syntax_pos::Span;\n use syntax_pos::symbol::kw;\n \n use crate::borrow_check::MirBorrowckCtxt;\n-use crate::borrow_check::error_reporting::BorrowedContentSource;\n+use crate::borrow_check::diagnostics::BorrowedContentSource;\n use crate::util::collect_writes::FindAssignments;\n use rustc_errors::Applicability;\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n-pub(super) enum AccessKind {\n+pub(crate) enum AccessKind {\n     MutableBorrow,\n     Mutate,\n }\n \n impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n-    pub(super) fn report_mutability_error(\n+    pub(crate) fn report_mutability_error(\n         &mut self,\n         access_place: &Place<'tcx>,\n         span: Span,"}, {"sha": "88387b3933ba89bfab1ecfb070a340b421065e2c", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/67560976b4539a703bd5633bbd0910cd509fc3db/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67560976b4539a703bd5633bbd0910cd509fc3db/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=67560976b4539a703bd5633bbd0910cd509fc3db", "patch": "@@ -46,17 +46,14 @@ use self::flows::Flows;\n use self::location::LocationTable;\n use self::prefixes::PrefixSet;\n use self::MutateMode::{JustWrite, WriteAndRead};\n-use self::mutability_errors::AccessKind;\n+use self::diagnostics::mutability_errors::AccessKind;\n \n use self::path_utils::*;\n \n crate mod borrow_set;\n-mod error_reporting;\n+mod diagnostics;\n mod flows;\n mod location;\n-mod conflict_errors;\n-mod move_errors;\n-mod mutability_errors;\n mod path_utils;\n crate mod place_ext;\n crate mod places_conflict;"}, {"sha": "46d5e8d4a900b5dd44bec3f4a56899a8de44777e", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67560976b4539a703bd5633bbd0910cd509fc3db/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67560976b4539a703bd5633bbd0910cd509fc3db/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=67560976b4539a703bd5633bbd0910cd509fc3db", "patch": "@@ -1,7 +1,7 @@\n use std::collections::VecDeque;\n \n use crate::borrow_check::borrow_set::BorrowData;\n-use crate::borrow_check::error_reporting::UseSpans;\n+use crate::borrow_check::diagnostics::UseSpans;\n use crate::borrow_check::nll::region_infer::{Cause, RegionName};\n use crate::borrow_check::nll::ConstraintDescription;\n use crate::borrow_check::{MirBorrowckCtxt, WriteKind};"}]}