{"sha": "4b3490f64d21947346529a09d8ca3bf1558ea42e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMzQ5MGY2NGQyMTk0NzM0NjUyOWEwOWQ4Y2EzYmYxNTU4ZWE0MmU=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-28T20:01:08Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-02-28T20:05:07Z"}, "message": "Convert some lang item comments to doc-comments", "tree": {"sha": "8585602e5fdf7d8361d407d93d4ff71f0df813d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8585602e5fdf7d8361d407d93d4ff71f0df813d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b3490f64d21947346529a09d8ca3bf1558ea42e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b3490f64d21947346529a09d8ca3bf1558ea42e", "html_url": "https://github.com/rust-lang/rust/commit/4b3490f64d21947346529a09d8ca3bf1558ea42e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b3490f64d21947346529a09d8ca3bf1558ea42e/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da0099a9ff0a8ab1c208f166a3b1b8b07571d025", "url": "https://api.github.com/repos/rust-lang/rust/commits/da0099a9ff0a8ab1c208f166a3b1b8b07571d025", "html_url": "https://github.com/rust-lang/rust/commit/da0099a9ff0a8ab1c208f166a3b1b8b07571d025"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "9301f622d6b46cc557415d8d7db306285f41e675", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b3490f64d21947346529a09d8ca3bf1558ea42e/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b3490f64d21947346529a09d8ca3bf1558ea42e/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=4b3490f64d21947346529a09d8ca3bf1558ea42e", "patch": "@@ -38,7 +38,7 @@ macro_rules! expand_group {\n // So you probably just want to nip down to the end.\n macro_rules! language_item_table {\n     (\n-        $( $variant:ident $($group:expr)?, $name:expr, $method:ident, $target:expr; )*\n+        $( $(#[attr:meta])* $variant:ident $($group:expr)?, $name:expr, $method:ident, $target:expr; )*\n     ) => {\n \n         enum_from_u32! {\n@@ -47,6 +47,8 @@ macro_rules! language_item_table {\n             pub enum LangItem {\n                 $(\n                     #[doc = concat!(\"The `\", stringify!($name), \"` lang item.\")]\n+                    ///\n+                    $(#[attr])*\n                     $variant,\n                 )*\n             }\n@@ -196,15 +198,15 @@ language_item_table! {\n \n     Sized,                   sym::sized,               sized_trait,                Target::Trait;\n     Unsize,                  sym::unsize,              unsize_trait,               Target::Trait;\n-    // Trait injected by #[derive(PartialEq)], (i.e. \"Partial EQ\").\n+    /// Trait injected by `#[derive(PartialEq)]`, (i.e. \"Partial EQ\").\n     StructuralPeq,           sym::structural_peq,      structural_peq_trait,       Target::Trait;\n-    // Trait injected by #[derive(Eq)], (i.e. \"Total EQ\"; no, I will not apologize).\n+    /// Trait injected by `#[derive(Eq)]`, (i.e. \"Total EQ\"; no, I will not apologize).\n     StructuralTeq,           sym::structural_teq,      structural_teq_trait,       Target::Trait;\n     Copy,                    sym::copy,                copy_trait,                 Target::Trait;\n     Clone,                   sym::clone,               clone_trait,                Target::Trait;\n     Sync,                    sym::sync,                sync_trait,                 Target::Trait;\n     DiscriminantKind,        sym::discriminant_kind,   discriminant_kind_trait,    Target::Trait;\n-    // The associated item of `trait DiscriminantKind`.\n+    /// The associated item of the [`DiscriminantKind`] trait.\n     Discriminant,            sym::discriminant_type,   discriminant_type,          Target::AssocTy;\n \n     PointeeTrait,            sym::pointee_trait,       pointee_trait,              Target::Trait;\n@@ -279,7 +281,7 @@ language_item_table! {\n     PanicInfo,               sym::panic_info,          panic_info,                 Target::Struct;\n     PanicLocation,           sym::panic_location,      panic_location,             Target::Struct;\n     PanicImpl,               sym::panic_impl,          panic_impl,                 Target::Fn;\n-    // libstd panic entry point. Necessary for const eval to be able to catch it\n+    /// libstd panic entry point. Necessary for const eval to be able to catch it\n     BeginPanic,              sym::begin_panic,         begin_panic_fn,             Target::Fn;\n \n     ExchangeMalloc,          sym::exchange_malloc,     exchange_malloc_fn,         Target::Fn;\n@@ -301,7 +303,7 @@ language_item_table! {\n \n     MaybeUninit,             sym::maybe_uninit,        maybe_uninit,               Target::Union;\n \n-    // Align offset for stride != 1; must not panic.\n+    /// Align offset for stride != 1; must not panic.\n     AlignOffset,             sym::align_offset,        align_offset_fn,            Target::Fn;\n \n     Termination,             sym::termination,         termination,                Target::Trait;"}]}