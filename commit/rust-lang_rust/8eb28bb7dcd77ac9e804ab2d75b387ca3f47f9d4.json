{"sha": "8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYjI4YmI3ZGNkNzdhYzllODA0YWIyZDc1YjM4N2NhM2Y0N2Y5ZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-06T21:41:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-06T21:41:28Z"}, "message": "auto merge of #9703 : alexcrichton/rust/compiler-features, r=cmr\n\nThis implements the necessary logic for gating particular features off by default in the compiler. There are a number of issues which have been wanting this form of mechanism, and this initially gates features which we have open issues for.\r\n\r\nAdditionally, this should unblock #9255", "tree": {"sha": "8843a8686ba71c57e01aa606c22db4c06bef327c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8843a8686ba71c57e01aa606c22db4c06bef327c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "html_url": "https://github.com/rust-lang/rust/commit/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4db6eba3a24778bd64260e5fcae24a41575c4d7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4db6eba3a24778bd64260e5fcae24a41575c4d7b", "html_url": "https://github.com/rust-lang/rust/commit/4db6eba3a24778bd64260e5fcae24a41575c4d7b"}, {"sha": "3396365cab2da7bb1e9b57932f4092bfa49d3787", "url": "https://api.github.com/repos/rust-lang/rust/commits/3396365cab2da7bb1e9b57932f4092bfa49d3787", "html_url": "https://github.com/rust-lang/rust/commit/3396365cab2da7bb1e9b57932f4092bfa49d3787"}], "stats": {"total": 536, "additions": 493, "deletions": 43}, "files": [{"sha": "e998f97869f7a8d778b96abd8f3770d2f54a8d98", "filename": "doc/rust.md", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -1833,6 +1833,58 @@ fn main() {\n > individual functions, structs, methods and enum variants, *not* to\n > entire modules, traits, impls or enums themselves.\n \n+### Compiler Features\n+\n+Certain aspects of Rust may be implemented in the compiler, but they're not\n+necessarily ready for every-day use. These features are often of \"prototype\n+quality\" or \"almost production ready\", but may not be stable enough to be\n+considered a full-fleged language feature.\n+\n+For this reason, rust recognizes a special crate-level attribute of the form:\n+\n+~~~ {.xfail-test}\n+#[feature(feature1, feature2, feature3)]\n+~~~\n+\n+This directive informs the compiler that the feature list: `feature1`,\n+`feature2`, and `feature3` should all be enabled. This is only recognized at a\n+crate-level, not at a module-level. Without this directive, all features are\n+considered off, and using the features will result in a compiler error.\n+\n+The currently implemented features of the compiler are:\n+\n+* `macro_rules` - The definition of new macros. This does not encompass\n+                  macro-invocation, that is always enabled by default, this only\n+                  covers the definition of new macros. There are currently\n+                  various problems with invoking macros, how they interact with\n+                  their environment, and possibly how they are used outside of\n+                  location in which they are defined. Macro definitions are\n+                  likely to change slightly in the future, so they are currently\n+                  hidden behind this feature.\n+\n+* `globs` - Importing everything in a module through `*`. This is currently a\n+            large source of bugs in name resolution for Rust, and it's not clear\n+            whether this will continue as a feature or not. For these reasons,\n+            the glob import statement has been hidden behind this feature flag.\n+\n+* `struct_variant` - Structural enum variants (those with named fields). It is\n+                     currently unknown whether this style of enum variant is as\n+                     fully supported as the tuple-forms, and it's not certain\n+                     that this style of variant should remain in the language.\n+                     For now this style of variant is hidden behind a feature\n+                     flag.\n+\n+If a feature is promoted to a language feature, then all existing programs will\n+start to receive compilation warnings about #[feature] directives which enabled\n+the new feature (because the directive is no longer necessary). However, if\n+a feature is decided to be removed from the language, errors will be issued (if\n+there isn't a parser error first). The directive in this case is no longer\n+necessary, and it's likely that existing code will break if the feature isn't\n+removed.\n+\n+If a unknown feature is found in a directive, it results in a compiler error. An\n+unknown feature is one which has never been recognized by the compiler.\n+\n # Statements and expressions\n \n Rust is _primarily_ an expression language. This means that most forms of"}, {"sha": "49ba38954b38683573b3e53f5c126bc6d3e058af", "filename": "doc/tutorial.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -746,6 +746,10 @@ fn area(sh: Shape) -> f64 {\n }\n ~~~~\n \n+> ***Note:*** This feature of the compiler is currently gated behind the\n+> `#[feature(struct_variant)]` directive. More about these directives can be\n+> found in the manual.\n+\n ## Tuples\n \n Tuples in Rust behave exactly like structs, except that their fields\n@@ -2665,6 +2669,10 @@ use farm::*;\n # fn main() { cow(); chicken() }\n ~~~\n \n+> ***Note:*** This feature of the compiler is currently gated behind the\n+> `#[feature(globs)]` directive. More about these directives can be found in\n+> the manual.\n+\n However, that's not all. You can also rename an item while you're bringing it into scope:\n \n ~~~"}, {"sha": "d40d25c1d18c7fea41af8f0355bf96fd49849f8d", "filename": "src/etc/combine-tests.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Fetc%2Fcombine-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Fetc%2Fcombine-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcombine-tests.py?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -40,6 +40,7 @@ def scrub(b):\n i = 0\n c.write(\"// AUTO-GENERATED FILE: DO NOT EDIT\\n\")\n c.write(\"#[link(name=\\\"run_pass_stage2\\\", vers=\\\"0.1\\\")];\\n\")\n+c.write(\"#[feature(globs, macro_rules, struct_variant)];\\n\")\n for t in stage2_tests:\n     p = os.path.join(run_pass, t)\n     p = p.replace(\"\\\\\", \"\\\\\\\\\")\n@@ -51,6 +52,7 @@ def scrub(b):\n \n d = open(\"tmp/run_pass_stage2_driver.rs\", \"w\")\n d.write(\"// AUTO-GENERATED FILE: DO NOT EDIT\\n\")\n+d.write(\"#[feature(globs)];\\n\")\n d.write(\"extern mod extra;\\n\")\n d.write(\"extern mod run_pass_stage2;\\n\")\n d.write(\"use run_pass_stage2::*;\\n\")"}, {"sha": "953b69eedbba63dea3c014e299c74fd3f72f7be4", "filename": "src/etc/extract-tests.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Fetc%2Fextract-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Fetc%2Fextract-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fextract-tests.py?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -63,6 +63,7 @@\n #[ allow(unused_variable) ];\\n\n #[ allow(dead_assignment) ];\\n\n #[ allow(unused_mut) ];\\n\n+#[ feature(macro_rules, globs, struct_variant) ];\\n\n \"\"\" + block\n             if xfail:\n                 block = \"// xfail-test\\n\" + block"}, {"sha": "45e4fe50f2561160a4778daf5f1c47b12795d2b5", "filename": "src/libextra/extra.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibextra%2Fextra.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibextra%2Fextra.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fextra.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -33,6 +33,8 @@ Rust extras are part of the standard Rust distribution.\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n+#[feature(macro_rules, globs)];\n+\n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n "}, {"sha": "5534342f3c7feacfc6d7d0d945a112b7307c9511", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -159,6 +159,8 @@ pub fn phase_2_configure_and_expand(sess: Session,\n     *sess.building_library = session::building_library(sess.opts.crate_type,\n                                                        &crate, sess.opts.test);\n \n+    time(time_passes, \"gated feature checking\", (), |_|\n+         front::feature_gate::check_crate(sess, &crate));\n \n     // strip before expansion to allow macros to depend on\n     // configuration variables e.g/ in"}, {"sha": "5986409c84369b5cb42f927652e2dc2659f6ba15", "filename": "src/librustc/front/feature_gate.rs", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -0,0 +1,176 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Feature gating\n+//!\n+//! This modules implements the gating necessary for preventing certain compiler\n+//! features from being used by default. This module will crawl a pre-expanded\n+//! AST to ensure that there are no features which are used that are not\n+//! enabled.\n+//!\n+//! Features are enabled in programs via the crate-level attributes of\n+//! #[feature(...)] with a comma-separated list of features.\n+\n+use syntax::ast;\n+use syntax::attr::AttrMetaMethods;\n+use syntax::codemap::Span;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n+\n+use driver::session::Session;\n+\n+/// This is a list of all known features since the beginning of time. This list\n+/// can never shrink, it may only be expanded (in order to prevent old programs\n+/// from failing to compile). The status of each feature may change, however.\n+static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n+    (\"globs\", Active),\n+    (\"macro_rules\", Active),\n+    (\"struct_variant\", Active),\n+\n+    // These are used to test this portion of the compiler, they don't actually\n+    // mean anything\n+    (\"test_accepted_feature\", Accepted),\n+    (\"test_removed_feature\", Removed),\n+];\n+\n+enum Status {\n+    /// Represents an active feature that is currently being implemented or\n+    /// currently being considered for addition/removal.\n+    Active,\n+\n+    /// Represents a feature which has since been removed (it was once Active)\n+    Removed,\n+\n+    /// This language feature has since been Accepted (it was once Active)\n+    Accepted,\n+}\n+\n+struct Context {\n+    features: ~[&'static str],\n+    sess: Session,\n+}\n+\n+impl Context {\n+    fn gate_feature(&self, feature: &str, span: Span, explain: &str) {\n+        if !self.has_feature(feature) {\n+            self.sess.span_err(span, explain);\n+            self.sess.span_note(span, format!(\"add \\\\#[feature({})] to the \\\n+                                                  crate attributes to enable\",\n+                                                 feature));\n+        }\n+    }\n+\n+    fn has_feature(&self, feature: &str) -> bool {\n+        self.features.iter().any(|n| n.as_slice() == feature)\n+    }\n+}\n+\n+impl Visitor<()> for Context {\n+    fn visit_view_item(&mut self, i: &ast::view_item, _: ()) {\n+        match i.node {\n+            ast::view_item_use(ref paths) => {\n+                for path in paths.iter() {\n+                    match path.node {\n+                        ast::view_path_glob(*) => {\n+                            self.gate_feature(\"globs\", path.span,\n+                                              \"glob import statements are \\\n+                                               experimental and possibly buggy\");\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        visit::walk_view_item(self, i, ())\n+    }\n+\n+    fn visit_item(&mut self, i: @ast::item, _:()) {\n+        match i.node {\n+            ast::item_enum(ref def, _) => {\n+                for variant in def.variants.iter() {\n+                    match variant.node.kind {\n+                        ast::struct_variant_kind(*) => {\n+                            self.gate_feature(\"struct_variant\", variant.span,\n+                                              \"enum struct variants are \\\n+                                               experimental and possibly buggy\");\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+            }\n+\n+            ast::item_mac(ref mac) => {\n+                match mac.node {\n+                    ast::mac_invoc_tt(ref path, _, _) => {\n+                        let rules = self.sess.ident_of(\"macro_rules\");\n+                        if path.segments.last().identifier == rules {\n+                            self.gate_feature(\"macro_rules\", i.span,\n+                                              \"macro definitions are not \\\n+                                               stable enough for use and are \\\n+                                               subject to change\");\n+                        }\n+                    }\n+                }\n+            }\n+\n+            _ => {}\n+        }\n+\n+        visit::walk_item(self, i, ());\n+    }\n+}\n+\n+pub fn check_crate(sess: Session, crate: &ast::Crate) {\n+    let mut cx = Context {\n+        features: ~[],\n+        sess: sess,\n+    };\n+\n+    for attr in crate.attrs.iter() {\n+        if \"feature\" != attr.name() { continue }\n+\n+        match attr.meta_item_list() {\n+            None => {\n+                sess.span_err(attr.span, \"malformed feature attribute, \\\n+                                          expected #[feature(...)]\");\n+            }\n+            Some(list) => {\n+                for &mi in list.iter() {\n+                    let name = match mi.node {\n+                        ast::MetaWord(word) => word,\n+                        _ => {\n+                            sess.span_err(mi.span, \"malformed feature, expected \\\n+                                                    just one word\");\n+                            continue\n+                        }\n+                    };\n+                    match KNOWN_FEATURES.iter().find(|& &(n, _)| n == name) {\n+                        Some(&(name, Active)) => { cx.features.push(name); }\n+                        Some(&(_, Removed)) => {\n+                            sess.span_err(mi.span, \"feature has been removed\");\n+                        }\n+                        Some(&(_, Accepted)) => {\n+                            sess.span_warn(mi.span, \"feature has added to rust, \\\n+                                                     directive not necessary\");\n+                        }\n+                        None => {\n+                            sess.span_err(mi.span, \"unknown feature\");\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    visit::walk_crate(&mut cx, crate, ());\n+\n+    sess.abort_if_errors();\n+}"}, {"sha": "a8a255669cab45bd3e27b874058e4fb2529090f7", "filename": "src/librustc/rustc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibrustc%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibrustc%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -17,6 +17,8 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n+#[feature(macro_rules, globs, struct_variant)];\n+\n // Rustc tasks always run on a fixed_stack_segment, so code in this\n // module can call C functions (in particular, LLVM functions) with\n // impunity.\n@@ -83,6 +85,7 @@ pub mod front {\n     pub mod test;\n     pub mod std_inject;\n     pub mod assign_node_ids;\n+    pub mod feature_gate;\n }\n \n pub mod back {"}, {"sha": "d72612256a75ad480553cf6c0fd29896d900409c", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -17,6 +17,8 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n+#[feature(globs, struct_variant)];\n+\n extern mod syntax;\n extern mod rustc;\n extern mod extra;"}, {"sha": "3775d175166f0324b579ba6a2cae5a8cca15f17e", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -66,6 +66,8 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n+#[feature(globs)];\n+\n extern mod extra;\n extern mod rustc;\n extern mod syntax;"}, {"sha": "cd4badfab3131e03436bce2cc8b4a636ba84a542", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -18,6 +18,8 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n+#[feature(globs)];\n+\n extern mod extra;\n extern mod rustc;\n extern mod syntax;"}, {"sha": "53837f965938ae509e0b610a166281c47805984b", "filename": "src/libstd/std.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibstd%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibstd%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -61,6 +61,8 @@ they contained the following prologue:\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://static.rust-lang.org/doc/master\")];\n \n+#[feature(macro_rules, globs)];\n+\n // Don't link to std. We are std.\n #[no_std];\n "}, {"sha": "1f385a00fa6d6491b0d31a9f284763b8c7fc8d14", "filename": "src/libsyntax/syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibsyntax%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Flibsyntax%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -20,6 +20,8 @@\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n+#[feature(macro_rules, globs)];\n+\n extern mod extra;\n \n pub mod util {"}, {"sha": "92c20e8d9e39b45d7a7cf9e4fd7d2568ee07a874", "filename": "src/test/auxiliary/issue_2316_b.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[allow(unused_imports)];\n+#[feature(globs)];\n \n extern mod issue_2316_a;\n "}, {"sha": "f797669195b7631c9c212830dcee9ef32a9e1515", "filename": "src/test/auxiliary/struct_variant_xc_aux.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -12,6 +12,8 @@\n        vers = \"0.1\")];\n #[crate_type = \"lib\"];\n \n+#[feature(struct_variant)];\n+\n pub enum Enum {\n     Variant { arg: u8 }\n }"}, {"sha": "7323dcf4ecb5e2335f3d379da2a114d087089323", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,8 @@\n \n // Microbenchmarks for various functions in std and extra\n \n+#[feature(macro_rules)];\n+\n extern mod extra;\n \n use extra::time::precise_time_s;"}, {"sha": "1f2f163b8f008411af14b54bea9bccc1c9918a05", "filename": "src/test/bench/rt-parfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fbench%2Frt-parfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fbench%2Frt-parfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-parfib.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -14,7 +14,7 @@ use std::os;\n use std::uint;\n use std::rt::test::spawntask_later;\n use std::cell::Cell;\n-use std::comm::*;\n+use std::comm::oneshot;\n \n // A simple implementation of parfib. One subtree is found in a new\n // task and communicated over a oneshot pipe, the other is found"}, {"sha": "1fa48755663be24c311e9bf1dddfd82a4ef69c23", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -13,7 +13,7 @@\n extern mod extra;\n \n use std::cell::Cell;\n-use std::comm::*;\n+use std::comm::{stream, SharedChan};\n use std::io;\n use std::option;\n use std::os;"}, {"sha": "0f0651f4a4d51cbf172ea41c1f72fbe0e1083fc0", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -22,7 +22,7 @@\n extern mod extra;\n \n use extra::{time, getopts};\n-use std::comm::*;\n+use std::comm::{stream, SharedChan};\n use std::io::WriterUtil;\n use std::io;\n use std::os;"}, {"sha": "03f778ca1d1fccd85772e24df7ff837f41199840", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -22,7 +22,7 @@\n // Creates in the background 'num_tasks' tasks, all blocked forever.\n // Doesn't return until all such tasks are ready, but doesn't block forever itself.\n \n-use std::comm::*;\n+use std::comm::{stream, SharedChan};\n use std::os;\n use std::result;\n use std::task;"}, {"sha": "0e530666a8cbf0000929322acf0d0a5645d0ab6a", "filename": "src/test/compile-fail/deriving-primitive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(struct_variant)];\n+\n use std::num::FromPrimitive;\n use std::int;\n "}, {"sha": "b9eda0765f6458ba3c35198083d81a02a955ae7a", "filename": "src/test/compile-fail/dup-struct-enum-struct-variant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fdup-struct-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fdup-struct-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdup-struct-enum-struct-variant.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(struct_variant)];\n+\n enum Foo { C { a: int, b: int } }\n struct C { a: int, b: int }         //~ ERROR error: duplicate definition of type `C`\n "}, {"sha": "cb2fedcf9d6a892d0344b9b4c4d98f3b6e1d6ea2", "filename": "src/test/compile-fail/functional-struct-update-noncopyable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -12,7 +12,7 @@\n \n // xfail-fast #7103\n extern mod extra;\n-use extra::arc::*;\n+use extra::arc::Arc;\n \n struct A { y: Arc<int>, x: Arc<int> }\n "}, {"sha": "0bf2d5ad78b1d30302eaed9bf50ec2f40cf757bd", "filename": "src/test/compile-fail/gated-bad-feature.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fgated-bad-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fgated-bad-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-bad-feature.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(\n+    foo_bar_baz,\n+    foo(bar),\n+    foo = \"baz\"\n+)];\n+//~^^^^ ERROR: unknown feature\n+//~^^^^ ERROR: malformed feature\n+//~^^^^ ERROR: malformed feature\n+\n+#[feature]; //~ ERROR: malformed feature\n+#[feature = \"foo\"]; //~ ERROR: malformed feature\n+\n+#[feature(test_removed_feature)]; //~ ERROR: feature has been removed\n+#[feature(test_accepted_feature)]; //~ WARNING: feature has added"}, {"sha": "cc7ba785e7e6589ffeee8e272df9e1864f4584d1", "filename": "src/test/compile-fail/gated-glob-imports.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fgated-glob-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fgated-glob-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-glob-imports.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::*;\n+//~^ ERROR: glob import statements are experimental\n+\n+fn main() {}"}, {"sha": "7f771c72416817a38fd5aa179b35efe07dc9c58a", "filename": "src/test/compile-fail/gated-macro-rules.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fgated-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fgated-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-macro-rules.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! foo(() => ())\n+//~^ ERROR: macro definitions are not stable enough for use\n+\n+fn main() {}"}, {"sha": "f1bd9362bb775d18e9d1945b5012b362a7450a66", "filename": "src/test/compile-fail/gated-struct-enums.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fgated-struct-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fgated-struct-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-struct-enums.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum A { B { foo: int } }\n+//~^ ERROR: enum struct variants are experimental\n+\n+fn main() {}\n+"}, {"sha": "233826bcc7d5edfcb1ef8380dd8a62482184bcf9", "filename": "src/test/compile-fail/import-glob-0.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern: unresolved name\n \n+#[feature(globs)];\n+\n use module_of_many_things::*;\n \n mod module_of_many_things {"}, {"sha": "23b449fe061e33e25c7e4a1ce92dff79bce3b036", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern: unresolved\n \n+#[feature(globs)];\n+\n mod circ1 {\n     pub use circ2::f2;\n     pub fn f1() { info2!(\"f1\"); }"}, {"sha": "e49eb1454d8a2d92f2ea1e469133079830ca6c34", "filename": "src/test/compile-fail/issue-1697.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,8 @@\n \n // Testing that we don't fail abnormally after hitting the errors\n \n+#[feature(globs)];\n+\n use unresolved::*; //~ ERROR unresolved import. maybe a missing\n //~^ ERROR failed to resolve import\n "}, {"sha": "6b84d897c87bd6da0b795b2d6809714bfe2c63c3", "filename": "src/test/compile-fail/issue-4366.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -13,6 +13,8 @@\n // ensures that 'use foo:*' doesn't import non-public 'use' statements in the\n // module 'foo'\n \n+#[feature(globs)];\n+\n use m1::*;\n \n mod foo {"}, {"sha": "c50398544440abb02ac4a971e5a4c6ccb78c0cc3", "filename": "src/test/compile-fail/issue-5060-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fissue-5060-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fissue-5060-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5060-fail.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(macro_rules)];\n \n use std::io;\n "}, {"sha": "339f21d10c31dbf87e9420d78a9251f7ffcac41b", "filename": "src/test/compile-fail/issue-6596.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fissue-6596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fissue-6596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6596.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -1,4 +1,8 @@\n-macro_rules! e( //~ ERROR unknown macro variable `nonexistent`\n+#[feature(macro_rules)];\n+\n+// error-pattern: unknown macro variable `nonexistent`\n+\n+macro_rules! e(\n     ($inp:ident) => (\n         $nonexistent\n     );"}, {"sha": "372bf803ec459ffec54525a434968167f7941d1b", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,7 @@\n \n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n+#[feature(struct_variant)];\n #[deny(missing_doc)];\n \n struct Foo {"}, {"sha": "1046a638ff9473bbe8c45580d60c2c1a08f4bebc", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -11,6 +11,7 @@\n // xfail-fast aux-build\n // aux-build:lint_stability.rs\n \n+#[feature(globs)];\n #[deny(unstable)];\n #[deny(deprecated)];\n #[deny(experimental)];"}, {"sha": "85edbd1d147ccae9c7dd6ef77a21c19c89b38296", "filename": "src/test/compile-fail/lint-unused-import-tricky-globs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-globs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-globs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-globs.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n #[deny(unused_imports)];\n \n mod A {"}, {"sha": "22cf54428a73a6e77b555c443f56155073deed09", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n #[deny(unused_imports)];\n \n use cal = bar::c::cc;"}, {"sha": "598e0706adcca94e6303016d5bdfa9202837daab", "filename": "src/test/compile-fail/macro-incomplete-parse.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(macro_rules)];\n+\n macro_rules! ignored_item {\n     () => {\n         fn foo() {}"}, {"sha": "d8fbb8b879c6ec34d853713efd24f00a8726ac98", "filename": "src/test/compile-fail/macro-inner-attributes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fmacro-inner-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fmacro-inner-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-inner-attributes.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -1,3 +1,5 @@\n+#[feature(macro_rules)];\n+\n macro_rules! test ( ($nm:ident,\n                      $a:attr,\n                      $i:item) => (mod $nm { $a; $i }); )"}, {"sha": "cd3c9df6a7255e37b79a78a4fe1213615b3a56e4", "filename": "src/test/compile-fail/macro-outer-attributes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fmacro-outer-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fmacro-outer-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-outer-attributes.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -1,3 +1,5 @@\n+#[feature(macro_rules)];\n+\n macro_rules! test ( ($nm:ident,\n                      $a:attr,\n                      $i:item) => (mod $nm { $a $i }); )"}, {"sha": "246f0cb9e662d508e26981a647da48a677eb3fa5", "filename": "src/test/compile-fail/name-clash-nullary.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n+\n // error-pattern:declaration of `None` shadows\n use std::option::*;\n "}, {"sha": "cc12d0ff2058d9e4b891497d2638a0f55bd38248", "filename": "src/test/compile-fail/private-method-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // aux-build:cci_class_5.rs\n extern mod cci_class_5;\n-use cci_class_5::kitties::*;\n+use cci_class_5::kitties::cat;\n \n fn main() {\n   let nyan : cat = cat(52, 99);"}, {"sha": "0b46e8d0a8206d037e3f828237fdc9006491fb3f", "filename": "src/test/compile-fail/private-struct-field-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:cci_class.rs\n extern mod cci_class;\n-use cci_class::kitties::*;\n+use cci_class::kitties::cat;\n \n fn main() {\n   let nyan : cat = cat(52u, 99);"}, {"sha": "06fd4e6d8c9c397e40743cb700ca90f84f393a54", "filename": "src/test/compile-fail/struct-like-enum-nonexhaustive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fstruct-like-enum-nonexhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fcompile-fail%2Fstruct-like-enum-nonexhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-like-enum-nonexhaustive.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(struct_variant)];\n+\n enum A {\n     B { x: Option<int> },\n     C"}, {"sha": "c77804c38bbcf6524cb808d78fac5fd24dcacac0", "filename": "src/test/debug-info/borrowed-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fborrowed-enum.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -23,6 +23,7 @@\n // check:$3 = {4820353753753434}\n \n #[allow(unused_variable)];\n+#[feature(struct_variant)];\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "45c7cb2a1925918d8eeaed6538b0e97eaa05f999", "filename": "src/test/debug-info/by-value-non-immediate-argument.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fby-value-non-immediate-argument.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -41,6 +41,8 @@\n // check:$7 = {{Case1, x = 0, y = 8970181431921507452}, {Case1, 0, 2088533116, 2088533116}}\n // debugger:continue\n \n+#[feature(struct_variant)];\n+\n #[deriving(Clone)]\n struct Struct {\n     a: int,"}, {"sha": "2e69dd1132380f689a67afd9d6b9048d19830cec", "filename": "src/test/debug-info/generic-static-method-on-struct-and-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fgeneric-static-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fgeneric-static-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-static-method-on-struct-and-enum.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -30,6 +30,7 @@\n // check:$5 = 5\n // debugger:continue\n \n+#[feature(struct_variant)];\n \n struct Struct {\n     x: int"}, {"sha": "672ddc8fc45ca71a9ebda597700a10fa8963ed71", "filename": "src/test/debug-info/generic-struct-style-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -26,6 +26,8 @@\n // debugger:print univariant\n // check:$4 = {a = -1}\n \n+#[feature(struct_variant)];\n+\n // NOTE: This is a copy of the non-generic test case. The `Txx` type parameters have to be\n // substituted with something of size `xx` bits and the same alignment as an integer type of the\n // same size."}, {"sha": "6e23797e10d662e63eefa2490e111a18e3c88c9f", "filename": "src/test/debug-info/lexical-scope-with-macro.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Flexical-scope-with-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Flexical-scope-with-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flexical-scope-with-macro.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -63,6 +63,8 @@\n // check:$15 = 400\n // debugger:continue\n \n+#[feature(macro_rules)];\n+\n macro_rules! trivial(\n     ($e1:expr) => ($e1)\n )"}, {"sha": "7be428725709318c51281915169f279e85b6d1e8", "filename": "src/test/debug-info/managed-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-enum.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -23,6 +23,7 @@\n // check:$3 = {-9747455}\n \n #[allow(unused_variable)];\n+#[feature(struct_variant)];\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "2f02844fdc5f704b14dc9217273dc63e4097c744", "filename": "src/test/debug-info/method-on-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmethod-on-enum.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -92,6 +92,8 @@\n // check:$21 = -16\n // debugger:continue\n \n+#[feature(struct_variant)];\n+\n enum Enum {\n     Variant1 { x: u16, y: u16 },\n     Variant2 (u32)"}, {"sha": "093b59a2bfe46a33b9e2a8c22f3d874cfd51a65d", "filename": "src/test/debug-info/option-like-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Foption-like-enum.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -33,6 +33,8 @@\n \n // debugger:continue\n \n+#[feature(struct_variant)];\n+\n // If a struct has exactly two variants, one of them is empty, and the other one\n // contains a non-nullable pointer, then this value is used as the discriminator.\n // The test cases in this file make sure that something readable is generated for"}, {"sha": "b8d510bd306d8281c00a7486831e61e352a92ef9", "filename": "src/test/debug-info/recursive-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Frecursive-struct.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -99,6 +99,7 @@\n // debugger:continue\n \n #[allow(unused_variable)];\n+#[feature(struct_variant)];\n \n enum Opt<T> {\n     Empty,"}, {"sha": "062cbdd48599062b30467e8e0d423fdbf0821ff5", "filename": "src/test/debug-info/static-method-on-struct-and-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fstatic-method-on-struct-and-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fstatic-method-on-struct-and-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstatic-method-on-struct-and-enum.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -30,6 +30,7 @@\n // check:$5 = 5\n // debugger:continue\n \n+#[feature(struct_variant)];\n \n struct Struct {\n     x: int"}, {"sha": "90072367bc53780f566af02dee5a7f2bc7ed65b6", "filename": "src/test/debug-info/struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -27,6 +27,7 @@\n // check:$4 = {a = -1}\n \n #[allow(unused_variable)];\n+#[feature(struct_variant)];\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "d939c8c4abccd9032178900770bb96e3ce5a4647", "filename": "src/test/debug-info/unique-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Fdebug-info%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Funique-enum.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -23,6 +23,7 @@\n // check:$3 = {123234}\n \n #[allow(unused_variable)];\n+#[feature(struct_variant)];\n \n // The first element is to ensure proper alignment, irrespective of the machines word size. Since\n // the size of the discriminant value is machine dependent, this has be taken into account when"}, {"sha": "45e544cef8c8a21c74e2bd8577eb345d7d69e855", "filename": "src/test/run-pass/anon-extern-mod-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -12,7 +12,7 @@\n // aux-build:anon-extern-mod-cross-crate-1.rs\n extern mod anonexternmod;\n \n-use anonexternmod::*;\n+use anonexternmod::rust_get_test_int;\n \n #[fixed_stack_segment]\n pub fn main() {"}, {"sha": "dcdab0edc3aaea1fb58dc323809b6532aad6e9f2", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n extern mod extra;\n-use extra::bitv::*;\n+use extra::bitv::Bitv;\n \n fn bitv_test() {\n     let mut v1 = ~Bitv::new(31, false);"}, {"sha": "2c4d007cb1a2130b059c4d11efb83f635b364791", "filename": "src/test/run-pass/borrowck-macro-interaction-issue-6304.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -1,6 +1,8 @@\n // Check that we do not ICE when compiling this\n // macro, which reuses the expression `$id`\n \n+#[feature(macro_rules)];\n+\n struct Foo {\n   a: int\n }"}, {"sha": "86641027e788a5050e25846f5490e351b2ec39d2", "filename": "src/test/run-pass/cci_nested_exe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -11,6 +11,8 @@\n // xfail-fast - check-fast doesn't understand aux-build\n // aux-build:cci_nested_lib.rs\n \n+#[feature(globs)];\n+\n extern mod cci_nested_lib;\n use cci_nested_lib::*;\n "}, {"sha": "224df80d08ef92c9f2480e6c6d29e58ede74d39a", "filename": "src/test/run-pass/cfg-macros-foo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-macros-foo.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -14,6 +14,8 @@\n // check that cfg correctly chooses between the macro impls (see also\n // cfg-macros-notfoo.rs)\n \n+#[feature(macro_rules)];\n+\n #[cfg(foo)]\n #[macro_escape]\n mod foo {"}, {"sha": "5aa94bb1fbdc9950cd2835cd273635d68e536998", "filename": "src/test/run-pass/cfg-macros-notfoo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-macros-notfoo.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -14,6 +14,8 @@\n // check that cfg correctly chooses between the macro impls (see also\n // cfg-macros-foo.rs)\n \n+#[feature(macro_rules)];\n+\n #[cfg(foo)]\n #[macro_escape]\n mod foo {"}, {"sha": "bdba6a4c6c67bf6822b5e1811d01c870c030b0f8", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -12,7 +12,7 @@\n // aux-build:cci_class_cast.rs\n extern mod cci_class_cast;\n use std::to_str::ToStr;\n-use cci_class_cast::kitty::*;\n+use cci_class_cast::kitty::cat;\n \n fn print_out(thing: @ToStr, expected: ~str) {\n   let actual = thing.to_str();"}, {"sha": "d801da49efc66ebf85d94b5dbfc8a7906d19aecc", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -13,7 +13,7 @@\n /* Test that exporting a class also exports its\n    public fields and methods */\n \n-use kitty::*;\n+use kitty::cat;\n \n mod kitty {\n     pub struct cat {"}, {"sha": "d6477d2d5a5cbae9dc895d176bd21094eb371d82", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // aux-build:cci_class_trait.rs\n extern mod cci_class_trait;\n-use cci_class_trait::animals::*;\n+use cci_class_trait::animals::noisy;\n \n struct cat {\n   priv meows: uint,"}, {"sha": "b0e96ad7e84b13f4e9031c881bdcdb1cb2592971", "filename": "src/test/run-pass/class-method-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // aux-build:cci_class_2.rs\n extern mod cci_class_2;\n-use cci_class_2::kitties::*;\n+use cci_class_2::kitties::cat;\n \n pub fn main() {\n   let nyan : cat = cat(52u, 99);"}, {"sha": "86a529a75b600a354cc210e15ce659279eed1ad5", "filename": "src/test/run-pass/class-methods-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // aux-build:cci_class_3.rs\n extern mod cci_class_3;\n-use cci_class_3::kitties::*;\n+use cci_class_3::kitties::cat;\n \n pub fn main() {\n     let mut nyan : cat = cat(52u, 99);"}, {"sha": "9aac6a0ff63d4e563105883ac03d24941d556183", "filename": "src/test/run-pass/class-poly-methods-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // aux-build:cci_class_6.rs\n extern mod cci_class_6;\n-use cci_class_6::kitties::*;\n+use cci_class_6::kitties::cat;\n \n pub fn main() {\n   let mut nyan : cat<char> = cat::<char>(52u, 99, ~['p']);"}, {"sha": "96d9434677d87a244929db3de97bde5447cd19e5", "filename": "src/test/run-pass/classes-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // aux-build:cci_class_4.rs\n extern mod cci_class_4;\n-use cci_class_4::kitties::*;\n+use cci_class_4::kitties::cat;\n \n pub fn main() {\n     let mut nyan = cat(0u, 2, ~\"nyan\");"}, {"sha": "519cca21a0ff391dc5d809b7b3d48f0acf1bded2", "filename": "src/test/run-pass/classes-simple-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // aux-build:cci_class.rs\n extern mod cci_class;\n-use cci_class::kitties::*;\n+use cci_class::kitties::cat;\n \n pub fn main() {\n   let nyan : cat = cat(52u, 99);"}, {"sha": "95ba635011f833641a05e23043261c90ac7679a8", "filename": "src/test/run-pass/const-enum-structlike.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-structlike.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(struct_variant)];\n+\n enum E {\n     S0 { s: ~str },\n     S1 { u: uint }"}, {"sha": "0e0e52c62737a4745f186e37eb8e8289c7437c25", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -16,7 +16,6 @@\n // instead of in std.\n \n use std::libc;\n-use std::run::*;\n use std::run;\n use std::str;\n "}, {"sha": "aedf4732afdbb8f49cebdf7afc3c8e857b178452", "filename": "src/test/run-pass/deriving-cmp-generic-struct-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(struct_variant)];\n+\n #[deriving(Eq, TotalEq, Ord, TotalOrd)]\n enum ES<T> {\n     ES1 { x: T },"}, {"sha": "b1c5f2f0f2d729365a1206eba7f7c05c259ed190", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -13,11 +13,13 @@\n \n // xfail-fast\n \n+#[feature(struct_variant)];\n+\n extern mod extra;\n \n use std::io;\n use std::rand::{random, Rand};\n-use extra::serialize::*;\n+use extra::serialize::{Encodable, Decodable};\n use extra::ebml;\n use extra::ebml::writer::Encoder;\n use extra::ebml::reader::Decoder;"}, {"sha": "39a86c0ae3fd629c38d4a66b7b6a88ab8948cb42", "filename": "src/test/run-pass/deriving-rand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-rand.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -9,6 +9,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(struct_variant)];\n+\n use std::rand;\n \n #[deriving(Rand)]"}, {"sha": "d9f69bd4a49364fbea6f59504cc10b541c8dd3a5", "filename": "src/test/run-pass/deriving-to-str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fderiving-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fderiving-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-to-str.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(struct_variant)];\n+\n #[deriving(ToStr)]\n enum A {}\n #[deriving(ToStr)]"}, {"sha": "83c8679027bb88c0b11b5473ee42bd60cac55bb4", "filename": "src/test/run-pass/deriving-via-extension-struct-like-enum-variant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -1,3 +1,5 @@\n+#[feature(struct_variant)];\n+\n #[deriving(Eq)]\n enum S {\n     X { x: int, y: int },"}, {"sha": "69f3c8813883aa44425bfedfb0d35a83f6b58d2b", "filename": "src/test/run-pass/enum-variants.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fenum-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fenum-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-variants.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -1,5 +1,6 @@\n #[allow(dead_assignment)];\n #[allow(unused_variable)];\n+#[feature(struct_variant)];\n \n enum Animal {\n     Dog (~str, f64),"}, {"sha": "16f4754beaf307724359573ae346a8b84500c1c2", "filename": "src/test/run-pass/export-glob-imports-target.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -15,6 +15,8 @@\n \n // Modified to not use export since it's going away. --pcw\n \n+#[feature(globs)];\n+\n mod foo {\n     use foo::bar::*;\n     pub mod bar {"}, {"sha": "e0ac464f321b89ed06aa531eb51df4cf0939623d", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -12,7 +12,7 @@\n \n extern mod extra;\n \n-use extra::getopts::*;\n+use extra::getopts::{optopt, getopts};\n \n pub fn main() {\n     let args = ~[];"}, {"sha": "c7b98c34a91def284eb63e8f0ff7353ab41607db", "filename": "src/test/run-pass/glob-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fglob-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fglob-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fglob-std.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -12,7 +12,7 @@\n \n extern mod extra;\n \n-use extra::glob::*;\n+use extra::glob::glob;\n use extra::tempfile;\n use std::unstable::finally::Finally;\n use std::{io, os, unstable};"}, {"sha": "13a544a200bab8760c33649a7e9b9e8b0dcfe93c", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -19,7 +19,7 @@\n pub fn map(filename: ~str, emit: map_reduce::putter) { emit(filename, ~\"1\"); }\n \n mod map_reduce {\n-    use std::comm::*;\n+    use std::comm::{stream, SharedChan};\n     use std::hashmap::HashMap;\n     use std::str;\n     use std::task;"}, {"sha": "97040716a11ee3df16a85273e16cd515ae70dce3", "filename": "src/test/run-pass/html-literals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhtml-literals.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,7 @@\n \n // A test of the macro system. Can we do HTML literals?\n \n+#[feature(macro_rules)];\n \n /*\n "}, {"sha": "7611871b0e760f797256d7708c7464730acd58cb", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,7 @@\n \n // xfail-fast: check-fast screws up repr paths\n \n+#[feature(macro_rules)];\n #[deny(warnings)];\n \n use std::fmt;"}, {"sha": "1da617273df64634175fdfe7d01967fb82bf96f0", "filename": "src/test/run-pass/import-glob-0.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n+\n use module_of_many_things::*;\n use dug::too::greedily::and::too::deep::*;\n "}, {"sha": "b3c8ffb2d8d5cb9491f5e5b3c05e09ed444b27bb", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n #[allow(dead_assignment)];\n \n extern mod extra;"}, {"sha": "0d539655148f0b5271e2031700952f18a611a76f", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n+\n pub fn main() {\n     use std::util::replace;\n     let mut x = 5;"}, {"sha": "bbbc8bf4c1f7964c43434c24c3a3de96f4fefdae", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n+\n extern mod extra;\n \n mod rusti {"}, {"sha": "281ca2c3424bb63b6b98297bd8d05fc15688054f", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n+\n mod rusti {\n     #[abi = \"rust-intrinsic\"]\n     extern \"rust-intrinsic\" {"}, {"sha": "e9df42b174ef6b3e5cb0165021ab26c02aaed9ec", "filename": "src/test/run-pass/issue-2526-a.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-2526-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-2526-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2526-a.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -11,6 +11,7 @@\n // xfail-fast\n // aux-build:issue-2526.rs\n \n+#[feature(globs)];\n #[allow(unused_imports)];\n \n extern mod issue_2526;"}, {"sha": "71aa11014c1dc90fdc0aa4edc452aa5c14939645", "filename": "src/test/run-pass/issue-2631-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2631-b.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -13,7 +13,7 @@\n \n extern mod req;\n \n-use req::*;\n+use req::request;\n use std::hashmap::HashMap;\n \n pub fn main() {"}, {"sha": "8c13ffed90b480fcb5b9d6ae3dfc5c4ef81c5dd0", "filename": "src/test/run-pass/issue-2723-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-2723-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-2723-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2723-b.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -12,7 +12,7 @@\n // aux-build:issue_2723_a.rs\n \n extern mod issue_2723_a;\n-use issue_2723_a::*;\n+use issue_2723_a::f;\n \n pub fn main() {\n     unsafe {"}, {"sha": "668f3f8f154cf86827750359d531464760b10b89", "filename": "src/test/run-pass/issue-3656.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3656.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -13,7 +13,7 @@\n // Incorrect struct size computation in the FFI, because of not taking\n // the alignment of elements into account.\n \n-use std::libc::*;\n+use std::libc::{c_uint, uint32_t, c_void};\n \n struct KEYGEN {\n     hash_algorithm: [c_uint, ..2],"}, {"sha": "a6294daca8a58fcb3878ec87231b27fd034a46b8", "filename": "src/test/run-pass/issue-3979-xcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-3979-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-3979-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979-xcrate.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // aux-build:issue_3979_traits.rs\n extern mod issue_3979_traits;\n-use issue_3979_traits::*;\n+use issue_3979_traits::{Positioned, Movable};\n \n struct Point { x: int, y: int }\n "}, {"sha": "4328dc7d5f912d8d81f1ae88e2127abbd6225fe3", "filename": "src/test/run-pass/issue-4208.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-4208.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-4208.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4208.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -12,7 +12,7 @@\n // xfail-fast - Windows hates cross-crate tests\n \n extern mod numeric;\n-use numeric::*;\n+use numeric::{sin, Angle};\n \n fn foo<T, A:Angle<T>>(theta: A) -> T { sin(&theta) }\n "}, {"sha": "e7d0cc012402af5b0138003f3bd0abc9a27a5bd1", "filename": "src/test/run-pass/issue-5060.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-5060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-5060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5060.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(macro_rules)];\n+\n use std::io;\n \n macro_rules! print_hd_tl ("}, {"sha": "68287a3a97ef763c5aa737f21a8b792f19152b5c", "filename": "src/test/run-pass/issue-5530.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-5530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-5530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5530.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(struct_variant)];\n+\n enum Enum {\n     Foo { foo: uint },\n     Bar { bar: uint }"}, {"sha": "e4ef20a3b0fc4cc24a85d8556da09f8d699b2b98", "filename": "src/test/run-pass/issue-5554.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-5554.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-5554.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5554.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(macro_rules)];\n+\n use std::num::Zero;\n \n pub struct X<T> {"}, {"sha": "dad9b53e0192ad818e66d1a2b4de46584d60e40d", "filename": "src/test/run-pass/issue-9110.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-9110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fissue-9110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9110.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(macro_rules)];\n+\n macro_rules! silly_macro(\n     () => (\n         pub mod Qux {"}, {"sha": "ce49492fee947d8b17047f9bb32ff8a9492e2a90", "filename": "src/test/run-pass/let-var-hygiene.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Flet-var-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Flet-var-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-var-hygiene.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(macro_rules)];\n+\n // shouldn't affect evaluation of $ex:\n macro_rules! bad_macro (($ex:expr) => ({let _x = 9; $ex}))\n pub fn main() {"}, {"sha": "faf83013e0001e80467acd2e95c25b75d776635f", "filename": "src/test/run-pass/macro-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fmacro-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fmacro-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-2.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,8 @@\n \n // xfail-pretty - token trees can't pretty print\n \n+#[feature(macro_rules)];\n+\n pub fn main() {\n \n     macro_rules! mylambda_tt("}, {"sha": "0741d74b214b02bd56ca1227b69177d851c9e1be", "filename": "src/test/run-pass/macro-interpolation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(macro_rules)];\n \n macro_rules! overly_complicated (\n     ($fnname:ident, $arg:ident, $ty:ty, $body:block, $val:expr, $pat:pat, $res:path) =>"}, {"sha": "9740982e2c9d3a5850b0c6089ee8864c6047c7de", "filename": "src/test/run-pass/macro-path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fmacro-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fmacro-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-path.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(macro_rules)];\n+\n mod m {\n     pub type t = int;\n }"}, {"sha": "28e0f6f8f20d0342b7c2fcc46f5f0c7e71d8b979", "filename": "src/test/run-pass/macro-stmt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fmacro-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fmacro-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-stmt.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,8 @@\n \n // xfail-pretty - token trees can't pretty print\n \n+#[feature(macro_rules)];\n+\n macro_rules! myfn(\n     ( $f:ident, ( $( $x:ident ),* ), $body:block ) => (\n         fn $f( $( $x : int),* ) -> int $body"}, {"sha": "f5e4cf6c9260b211b52c6b1332553ff7b7a7831b", "filename": "src/test/run-pass/match-enum-struct-0.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-0.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,8 @@\n \n // regression test for issue #5625\n \n+#[feature(struct_variant)];\n+\n enum E {\n     Foo{f : int},\n     Bar"}, {"sha": "0f853cf64c571517f3e26cae0a057b2f8203ff35", "filename": "src/test/run-pass/match-enum-struct-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-enum-struct-1.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(struct_variant)];\n+\n enum E {\n     Foo{f : int},\n     Bar"}, {"sha": "b364c8dc59f0c342b69b3131d70feba342c53aa3", "filename": "src/test/run-pass/match-in-macro.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(macro_rules, struct_variant)];\n+\n enum Foo {\n     B { b1: int, bb1: int},\n }"}, {"sha": "ed5434589317f6b5343112848f19b9de2dd0657d", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -12,7 +12,7 @@\n \n extern mod extra;\n \n-use extra::list::*;\n+use extra::list::{List, Cons, Nil, head, is_empty};\n \n fn pure_length_go<T:Clone>(ls: @List<T>, acc: uint) -> uint {\n     match *ls { Nil => { acc } Cons(_, tl) => { pure_length_go(tl, acc + 1u) } }"}, {"sha": "15cd508b655ffa008d6abfddd5bed7f7dd5b4463", "filename": "src/test/run-pass/nullable-pointer-size.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(macro_rules)];\n+\n use std::sys;\n \n enum E<T> { Thing(int, T), Nothing((), ((), ()), [i8, ..0]) }"}, {"sha": "df1df36eb3cada2715585c889f015378a554d24f", "filename": "src/test/run-pass/reexport-star.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Freexport-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Freexport-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freexport-star.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n+\n // FIXME #3654\n \n mod a {"}, {"sha": "80de9d8762be37e86d522f5d48ba1f791e267c5d", "filename": "src/test/run-pass/rename-directory.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frename-directory.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -17,12 +17,11 @@ extern mod extra;\n use extra::tempfile::mkdtemp;\n use std::os;\n use std::libc;\n-use std::libc::*;\n \n fn rename_directory() {\n     #[fixed_stack_segment];\n     unsafe {\n-        static U_RWX: i32 = (S_IRUSR | S_IWUSR | S_IXUSR) as i32;\n+        static U_RWX: i32 = (libc::S_IRUSR | libc::S_IWUSR | libc::S_IXUSR) as i32;\n \n         let tmpdir = mkdtemp(&os::tmpdir(), \"rename_directory\").expect(\"rename_directory failed\");\n         let old_path = tmpdir.push_many([\"foo\", \"bar\", \"baz\"]);\n@@ -38,13 +37,13 @@ fn rename_directory() {\n         assert!((ostream as uint != 0u));\n         let s = ~\"hello\";\n         do \"hello\".with_c_str |buf| {\n-            let write_len = libc::fwrite(buf as *c_void,\n-                                         1u as size_t,\n-                                         (s.len() + 1u) as size_t,\n+            let write_len = libc::fwrite(buf as *libc::c_void,\n+                                         1u as libc::size_t,\n+                                         (s.len() + 1u) as libc::size_t,\n                                          ostream);\n-            assert_eq!(write_len, (s.len() + 1) as size_t)\n+            assert_eq!(write_len, (s.len() + 1) as libc::size_t)\n         }\n-        assert_eq!(libc::fclose(ostream), (0u as c_int));\n+        assert_eq!(libc::fclose(ostream), (0u as libc::c_int));\n \n         let new_path = tmpdir.push_many([\"quux\", \"blat\"]);\n         assert!(os::mkdir_recursive(&new_path, U_RWX));"}, {"sha": "70d8b8fe5a4b842e6638685a38d1dad3d8233b5f", "filename": "src/test/run-pass/rtio-processes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Frtio-processes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Frtio-processes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frtio-processes.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -23,9 +23,9 @@\n //\n // See #9341\n \n-use std::rt::io::process::*;\n+use std::rt::io::process::{Process, ProcessConfig, CreatePipe, Ignored};\n use std::rt::io::{Reader, Writer};\n-use std::rt::io::pipe::*;\n+use std::rt::io::pipe::PipeStream;\n use std::str;\n \n #[test]"}, {"sha": "a7c9e3b8f064bfae069d498e30f9890c06062065", "filename": "src/test/run-pass/struct-like-variant-construct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fstruct-like-variant-construct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fstruct-like-variant-construct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-like-variant-construct.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(struct_variant)];\n+\n enum Foo {\n     Bar {\n         a: int,"}, {"sha": "bb03f57be78e89b4c4fcb6075c4786327b2a1420", "filename": "src/test/run-pass/struct-like-variant-match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fstruct-like-variant-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fstruct-like-variant-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-like-variant-match.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(struct_variant)];\n+\n enum Foo {\n     Bar {\n         x: int,"}, {"sha": "15a343044e13c2c8a42f448213dc9983efc27a48", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(macro_rules)];\n+\n // compile-flags: --cfg nofmt\n \n extern mod extra;"}, {"sha": "bf93dd0ae497dee9b15f14354bb9cb828ada0557", "filename": "src/test/run-pass/syntax-extension-source-utils.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -11,6 +11,8 @@\n // This test is brittle!\n // xfail-pretty - the pretty tests lose path information, breaking include!\n \n+#[feature(macro_rules)];\n+\n pub mod m1 {\n     pub mod m2 {\n         pub fn where_am_i() -> ~str { (module_path!()).to_owned() }\n@@ -20,9 +22,9 @@ pub mod m1 {\n macro_rules! indirect_line( () => ( line!() ) )\n \n pub fn main() {\n-    assert_eq!(line!(), 23);\n+    assert_eq!(line!(), 25);\n     //assert!((col!() == 11));\n-    assert_eq!(indirect_line!(), 25);\n+    assert_eq!(indirect_line!(), 27);\n     assert!((file!().to_owned().ends_with(\"syntax-extension-source-utils.rs\")));\n     assert_eq!(stringify!((2*3) + 5).to_owned(), ~\"( 2 * 3 ) + 5\");\n     assert!(include!(\"syntax-extension-source-utils-files/includeme.fragment\").to_owned()"}, {"sha": "b18bf66b6c9ccb53d947404603d14c3f68b560a1", "filename": "src/test/run-pass/tag-exports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Ftag-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Ftag-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-exports.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -10,6 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(globs)];\n+\n use alder::*;\n \n mod alder {"}, {"sha": "b4f28114f967281b442bfc80fa208e7e41779f4c", "filename": "src/test/run-pass/typeck-macro-interaction-issue-8852.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Ftypeck-macro-interaction-issue-8852.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Ftypeck-macro-interaction-issue-8852.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeck-macro-interaction-issue-8852.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -1,3 +1,5 @@\n+#[feature(macro_rules)];\n+\n enum T {\n     A(int),\n     B(f64)"}, {"sha": "5f63968d59d42e0f384e03b494eca76b3d5853cf", "filename": "src/test/run-pass/unfold-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::iter::*;\n+use std::iter::Unfold;\n \n // Unfold had a bug with 'self that mean it didn't work\n // cross-crate"}, {"sha": "e697af80dcc91df88ec7fdd66abe70d3d4c6c8f4", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::comm::*;\n+use std::comm::{SharedChan, stream};\n use std::task;\n \n fn child(c: &SharedChan<~uint>, i: uint) {"}, {"sha": "6ab40c10aa4534ef51504b634e30c633c2ea2779", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -12,7 +12,7 @@\n \n extern mod extra;\n \n-use std::comm::*;\n+use std::comm::{stream, SharedChan};\n use std::task;\n \n struct complainer {"}, {"sha": "66bdec453e636ebe14c524ccc34fbec2039a4360", "filename": "src/test/run-pass/variant-structs-trivial.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fvariant-structs-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4/src%2Ftest%2Frun-pass%2Fvariant-structs-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariant-structs-trivial.rs?ref=8eb28bb7dcd77ac9e804ab2d75b387ca3f47f9d4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[feature(struct_variant)];\n+\n enum Foo {\n     Bar { x: int },\n     Baz { y: int }"}]}