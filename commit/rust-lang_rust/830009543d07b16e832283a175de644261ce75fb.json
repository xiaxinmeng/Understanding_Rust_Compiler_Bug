{"sha": "830009543d07b16e832283a175de644261ce75fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMDAwOTU0M2QwN2IxNmU4MzIyODNhMTc1ZGU2NDQyNjFjZTc1ZmI=", "commit": {"author": {"name": "Nick Sarten", "email": "gen.battle@gmail.com", "date": "2015-02-12T07:48:09Z"}, "committer": {"name": "Nick Sarten", "email": "gen.battle@gmail.com", "date": "2015-02-12T07:48:09Z"}, "message": "Updated usage of StrExt.parse() as per a recommendation by edwardw.", "tree": {"sha": "21fbf449348ebf27104a7212d85e7bfa520b05f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21fbf449348ebf27104a7212d85e7bfa520b05f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/830009543d07b16e832283a175de644261ce75fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/830009543d07b16e832283a175de644261ce75fb", "html_url": "https://github.com/rust-lang/rust/commit/830009543d07b16e832283a175de644261ce75fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/830009543d07b16e832283a175de644261ce75fb/comments", "author": {"login": "genbattle", "id": 483375, "node_id": "MDQ6VXNlcjQ4MzM3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/483375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/genbattle", "html_url": "https://github.com/genbattle", "followers_url": "https://api.github.com/users/genbattle/followers", "following_url": "https://api.github.com/users/genbattle/following{/other_user}", "gists_url": "https://api.github.com/users/genbattle/gists{/gist_id}", "starred_url": "https://api.github.com/users/genbattle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/genbattle/subscriptions", "organizations_url": "https://api.github.com/users/genbattle/orgs", "repos_url": "https://api.github.com/users/genbattle/repos", "events_url": "https://api.github.com/users/genbattle/events{/privacy}", "received_events_url": "https://api.github.com/users/genbattle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "genbattle", "id": 483375, "node_id": "MDQ6VXNlcjQ4MzM3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/483375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/genbattle", "html_url": "https://github.com/genbattle", "followers_url": "https://api.github.com/users/genbattle/followers", "following_url": "https://api.github.com/users/genbattle/following{/other_user}", "gists_url": "https://api.github.com/users/genbattle/gists{/gist_id}", "starred_url": "https://api.github.com/users/genbattle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/genbattle/subscriptions", "organizations_url": "https://api.github.com/users/genbattle/orgs", "repos_url": "https://api.github.com/users/genbattle/repos", "events_url": "https://api.github.com/users/genbattle/events{/privacy}", "received_events_url": "https://api.github.com/users/genbattle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e9b1d6085f6b14ff3992cd2104a29322e213dd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e9b1d6085f6b14ff3992cd2104a29322e213dd2", "html_url": "https://github.com/rust-lang/rust/commit/9e9b1d6085f6b14ff3992cd2104a29322e213dd2"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "73880549ae64969d63d36acd054e4c368664d061", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/830009543d07b16e832283a175de644261ce75fb/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/830009543d07b16e832283a175de644261ce75fb/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=830009543d07b16e832283a175de644261ce75fb", "patch": "@@ -3005,7 +3005,7 @@ Some examples of call expressions:\n # fn add(x: i32, y: i32) -> i32 { 0 }\n \n let x: i32 = add(1i32, 2i32);\n-let pi: Option<f32> = \"3.14\".parse();\n+let pi: Result<f32, _> = \"3.14\".parse();\n ```\n \n ### Lambda expressions"}, {"sha": "01f270f19512ad22c10a24caa86a4eda0e861d7a", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/830009543d07b16e832283a175de644261ce75fb/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/830009543d07b16e832283a175de644261ce75fb/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=830009543d07b16e832283a175de644261ce75fb", "patch": "@@ -400,7 +400,7 @@ a function for that:\n let input = old_io::stdin().read_line()\n                        .ok()\n                        .expect(\"Failed to read line\");\n-let input_num: Option<u32> = input.parse().ok();\n+let input_num: Result<u32, _> = input.parse();\n ```\n \n The `parse` function takes in a `&str` value and converts it into something.\n@@ -422,8 +422,8 @@ In this case, we say `x` is a `u32` explicitly, so Rust is able to properly\n tell `random()` what to generate. In a similar fashion, both of these work:\n \n ```{rust,ignore}\n-let input_num = \"5\".parse::<u32>().ok(); // input_num: Option<u32>\n-let input_num: Option<u32> = \"5\".parse().ok(); // input_num: Option<u32>\n+let input_num = \"5\".parse::<u32>(); // input_num: Option<u32>\n+let input_num: Result<u32, _> = \"5\".parse(); // input_num: Result<u32, <u32 as FromStr>::Err>\n ```\n \n Here we're converting the `Result` returned by `parse` to an `Option` by using\n@@ -447,9 +447,9 @@ fn main() {\n     let input = old_io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n-    let input_num: Option<u32> = input.parse().ok();\n+    let input_num: Result<u32, _> = input.parse();\n \n-    println!(\"You guessed: {}\", input_num);\n+    println!(\"You guessed: {:?}\", input_num);\n \n     match cmp(input_num, secret_number) {\n         Ordering::Less => println!(\"Too small!\"),\n@@ -497,11 +497,11 @@ fn main() {\n     let input = old_io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n-    let input_num: Option<u32> = input.parse().ok();\n+    let input_num: Result<u32, _> = input.parse();\n \n     let num = match input_num {\n-        Some(num) => num,\n-        None => {\n+        Ok(num) => num,\n+        Err(_) => {\n             println!(\"Please input a number!\");\n             return;\n         }\n@@ -564,11 +564,11 @@ fn main() {\n     let input = old_io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n-    let input_num: Option<u32> = input.trim().parse().ok();\n+    let input_num: Result<u32, _> = input.trim().parse();\n \n     let num = match input_num {\n-        Some(num) => num,\n-        None => {\n+        Ok(num) => num,\n+        Err(_) => {\n             println!(\"Please input a number!\");\n             return;\n         }\n@@ -640,11 +640,11 @@ fn main() {\n         let input = old_io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n-        let input_num: Option<u32> = input.trim().parse().ok();\n+        let input_num: Result<u32, _> = input.trim().parse();\n \n         let num = match input_num {\n-            Some(num) => num,\n-            None => {\n+            Ok(num) => num,\n+            Err(_) => {\n                 println!(\"Please input a number!\");\n                 return;\n             }\n@@ -716,11 +716,11 @@ fn main() {\n         let input = old_io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n-        let input_num: Option<u32> = input.trim().parse().ok();\n+        let input_num: Result<u32, _> = input.trim().parse();\n \n         let num = match input_num {\n-            Some(num) => num,\n-            None => {\n+            Ok(num) => num,\n+            Err(_) => {\n                 println!(\"Please input a number!\");\n                 return;\n             }\n@@ -772,11 +772,11 @@ fn main() {\n         let input = old_io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n-        let input_num: Option<u32> = input.trim().parse().ok();\n+        let input_num: Result<u32, _> = input.trim().parse();\n \n         let num = match input_num {\n-            Some(num) => num,\n-            None => {\n+            Ok(num) => num,\n+            Err(_) => {\n                 println!(\"Please input a number!\");\n                 continue;\n             }\n@@ -849,11 +849,11 @@ fn main() {\n         let input = old_io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n-        let input_num: Option<u32> = input.trim().parse().ok();\n+        let input_num: Result<u32, _> = input.trim().parse();\n \n         let num = match input_num {\n-            Some(num) => num,\n-            None => {\n+            Ok(num) => num,\n+            Err(_) => {\n                 println!(\"Please input a number!\");\n                 continue;\n             }"}]}