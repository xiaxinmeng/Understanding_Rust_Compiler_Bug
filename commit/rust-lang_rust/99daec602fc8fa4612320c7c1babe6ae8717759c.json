{"sha": "99daec602fc8fa4612320c7c1babe6ae8717759c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZGFlYzYwMmZjOGZhNDYxMjMyMGM3YzFiYWJlNmFlODcxNzc1OWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-07T18:38:08Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-05-09T00:04:00Z"}, "message": "librustc: Fix merge fallout.", "tree": {"sha": "472ee0fe27d7d50f48d58b2e60339180c07848df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/472ee0fe27d7d50f48d58b2e60339180c07848df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99daec602fc8fa4612320c7c1babe6ae8717759c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99daec602fc8fa4612320c7c1babe6ae8717759c", "html_url": "https://github.com/rust-lang/rust/commit/99daec602fc8fa4612320c7c1babe6ae8717759c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99daec602fc8fa4612320c7c1babe6ae8717759c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "278b487cabcbe52b301a8023cd1362045b1a7132", "url": "https://api.github.com/repos/rust-lang/rust/commits/278b487cabcbe52b301a8023cd1362045b1a7132", "html_url": "https://github.com/rust-lang/rust/commit/278b487cabcbe52b301a8023cd1362045b1a7132"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "a00de5ff31177709bf75a82effc508cc4dbaa655", "filename": "src/libcore/io.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/99daec602fc8fa4612320c7c1babe6ae8717759c/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99daec602fc8fa4612320c7c1babe6ae8717759c/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=99daec602fc8fa4612320c7c1babe6ae8717759c", "patch": "@@ -1528,14 +1528,17 @@ pub struct BytesWriter {\n impl Writer for BytesWriter {\n     fn write(&self, v: &[u8]) {\n         let v_len = v.len();\n-        let bytes_len = vec::uniq_len(&const *self.bytes);\n \n-        let count = uint::max(bytes_len, *self.pos + v_len);\n-        vec::reserve(&mut *self.bytes, count);\n+        let bytes = &mut *self.bytes;\n+        let count = uint::max(bytes.len(), *self.pos + v_len);\n+        vec::reserve(bytes, count);\n \n         unsafe {\n-            vec::raw::set_len(&mut *self.bytes, count);\n-            let view = vec::mut_slice(*self.bytes, *self.pos, count);\n+            // Silly stage0 borrow check workaround...\n+            let casted: &mut ~[u8] = cast::transmute_copy(&bytes);\n+            vec::raw::set_len(casted, count);\n+\n+            let view = vec::mut_slice(*bytes, *self.pos, count);\n             vec::bytes::copy_memory(view, v, v_len);\n         }\n "}, {"sha": "a645a7e86807674b655b7a46f508d84558b6637a", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99daec602fc8fa4612320c7c1babe6ae8717759c/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99daec602fc8fa4612320c7c1babe6ae8717759c/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=99daec602fc8fa4612320c7c1babe6ae8717759c", "patch": "@@ -457,7 +457,7 @@ impl TyVisitor for ReprVisitor {\n         let disr = unsafe {\n             get_disr(transmute(*self.ptr))\n         };\n-        self.var_stk.push(SearchingFor(disr));\n+        var_stk.push(SearchingFor(disr));\n         true\n     }\n \n@@ -494,7 +494,7 @@ impl TyVisitor for ReprVisitor {\n                                 _offset: uint,\n                                 inner: *TyDesc)\n                                 -> bool {\n-        match self.var_stk[vec::uniq_len(&const self.var_stk) - 1] {\n+        match self.var_stk[vec::uniq_len(&const *self.var_stk) - 1] {\n             Matched => {\n                 if i != 0 {\n                     self.writer.write_str(\", \");\n@@ -530,7 +530,7 @@ impl TyVisitor for ReprVisitor {\n                         _align: uint)\n                         -> bool {\n         let var_stk: &mut ~[VariantState] = self.var_stk;\n-        match self.var_stk.pop() {\n+        match var_stk.pop() {\n             SearchingFor(*) => fail!(~\"enum value matched no variant\"),\n             _ => true\n         }"}, {"sha": "484f66ae9921b42843417b1c49aea4a0bcfd8867", "filename": "src/librustc/middle/resolve_stage0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99daec602fc8fa4612320c7c1babe6ae8717759c/src%2Flibrustc%2Fmiddle%2Fresolve_stage0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99daec602fc8fa4612320c7c1babe6ae8717759c/src%2Flibrustc%2Fmiddle%2Fresolve_stage0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_stage0.rs?ref=99daec602fc8fa4612320c7c1babe6ae8717759c", "patch": "@@ -4718,7 +4718,7 @@ pub impl Resolver {\n                       for vec::each(class_def.fields) |field| {\n                         match field.node.kind {\n                           unnamed_field => {},\n-                          named_field(ident, _, _) => {\n+                          named_field(ident, _) => {\n                               if str::eq_slice(*this.session.str_of(ident),\n                                                name) {\n                                 return true"}, {"sha": "eea9d56c97517b0cb9d682bdd29061b2fd7961eb", "filename": "src/libstd/future.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99daec602fc8fa4612320c7c1babe6ae8717759c/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99daec602fc8fa4612320c7c1babe6ae8717759c/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=99daec602fc8fa4612320c7c1babe6ae8717759c", "patch": "@@ -28,6 +28,13 @@ use core::pipes::recv;\n use core::task;\n \n #[doc = \"The future type\"]\n+#[cfg(stage0)]\n+pub struct Future<A> {\n+    priv mut state: FutureState<A>,\n+}\n+\n+#[doc = \"The future type\"]\n+#[cfg(not(stage0))]\n pub struct Future<A> {\n     priv state: FutureState<A>,\n }"}, {"sha": "560e91f13a7212d2213dd2cec05da0fab0b99880", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/99daec602fc8fa4612320c7c1babe6ae8717759c/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99daec602fc8fa4612320c7c1babe6ae8717759c/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=99daec602fc8fa4612320c7c1babe6ae8717759c", "patch": "@@ -902,8 +902,10 @@ impl io::Reader for TcpSocketBuf {\n           // need to read in data from the socket. Note that the internal\n           // buffer is of no use anymore as we read all bytes from it,\n           // so we can throw it away.\n-          let data = &*self.data;\n-          let read_result = read(&data.sock, 0u);\n+          let read_result = {\n+            let data = &*self.data;\n+            read(&data.sock, 0)\n+          };\n           if read_result.is_err() {\n               let err_data = read_result.get_err();\n \n@@ -918,8 +920,7 @@ impl io::Reader for TcpSocketBuf {\n                   // should show up in a later call to read().\n                   break;\n               }\n-          }\n-          else {\n+          } else {\n               self.data.buf = result::unwrap(read_result);\n               self.data.buf_off = 0;\n           }\n@@ -935,8 +936,10 @@ impl io::Reader for TcpSocketBuf {\n             return c as int\n           }\n \n-          let data = &*self.data;\n-          let read_result = read(&data.sock, 0u);\n+          let read_result = {\n+            let data = &*self.data;\n+            read(&data.sock, 0)\n+          };\n           if read_result.is_err() {\n               let err_data = read_result.get_err();\n \n@@ -948,8 +951,7 @@ impl io::Reader for TcpSocketBuf {\n                          err_data.err_name, err_data.err_msg);\n                   fail!()\n               }\n-          }\n-          else {\n+          } else {\n               self.data.buf = result::unwrap(read_result);\n               self.data.buf_off = 0;\n           }"}]}