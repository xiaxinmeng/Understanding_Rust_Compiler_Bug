{"sha": "2787a60fc23accc81c9f9c7350b62c73f1c368a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ODdhNjBmYzIzYWNjYzgxYzlmOWM3MzUwYjYyYzczZjFjMzY4YTQ=", "commit": {"author": {"name": "clippered", "email": "clarke_overkill@yahoo.com", "date": "2017-11-04T08:32:58Z"}, "committer": {"name": "clippered", "email": "clarke_overkill@yahoo.com", "date": "2017-11-04T22:37:17Z"}, "message": "Fix #1142 float constant comparison lint", "tree": {"sha": "58ca79970fd28c81bf839258baf2e0cbb2a9482c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58ca79970fd28c81bf839258baf2e0cbb2a9482c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2787a60fc23accc81c9f9c7350b62c73f1c368a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2787a60fc23accc81c9f9c7350b62c73f1c368a4", "html_url": "https://github.com/rust-lang/rust/commit/2787a60fc23accc81c9f9c7350b62c73f1c368a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2787a60fc23accc81c9f9c7350b62c73f1c368a4/comments", "author": {"login": "clippered", "id": 5051900, "node_id": "MDQ6VXNlcjUwNTE5MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/5051900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clippered", "html_url": "https://github.com/clippered", "followers_url": "https://api.github.com/users/clippered/followers", "following_url": "https://api.github.com/users/clippered/following{/other_user}", "gists_url": "https://api.github.com/users/clippered/gists{/gist_id}", "starred_url": "https://api.github.com/users/clippered/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clippered/subscriptions", "organizations_url": "https://api.github.com/users/clippered/orgs", "repos_url": "https://api.github.com/users/clippered/repos", "events_url": "https://api.github.com/users/clippered/events{/privacy}", "received_events_url": "https://api.github.com/users/clippered/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clippered", "id": 5051900, "node_id": "MDQ6VXNlcjUwNTE5MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/5051900?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clippered", "html_url": "https://github.com/clippered", "followers_url": "https://api.github.com/users/clippered/followers", "following_url": "https://api.github.com/users/clippered/following{/other_user}", "gists_url": "https://api.github.com/users/clippered/gists{/gist_id}", "starred_url": "https://api.github.com/users/clippered/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clippered/subscriptions", "organizations_url": "https://api.github.com/users/clippered/orgs", "repos_url": "https://api.github.com/users/clippered/repos", "events_url": "https://api.github.com/users/clippered/events{/privacy}", "received_events_url": "https://api.github.com/users/clippered/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c43b60dd4870f92e0a3938ddbb9276fe6814b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c43b60dd4870f92e0a3938ddbb9276fe6814b68", "html_url": "https://github.com/rust-lang/rust/commit/0c43b60dd4870f92e0a3938ddbb9276fe6814b68"}], "stats": {"total": 157, "additions": 155, "deletions": 2}, "files": [{"sha": "eea590f033fe713c6f9dcd00a24e81d77c718ecc", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2787a60fc23accc81c9f9c7350b62c73f1c368a4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2787a60fc23accc81c9f9c7350b62c73f1c368a4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=2787a60fc23accc81c9f9c7350b62c73f1c368a4", "patch": "@@ -357,6 +357,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         arithmetic::INTEGER_ARITHMETIC,\n         array_indexing::INDEXING_SLICING,\n         assign_ops::ASSIGN_OPS,\n+        misc::FLOAT_CMP_CONST,\n     ]);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec!["}, {"sha": "dfe1187916f1a4b8437e699dcaa5f9dabd6e9b21", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2787a60fc23accc81c9f9c7350b62c73f1c368a4/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2787a60fc23accc81c9f9c7350b62c73f1c368a4/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=2787a60fc23accc81c9f9c7350b62c73f1c368a4", "patch": "@@ -13,6 +13,7 @@ use utils::{get_item_name, get_parent_expr, implements_trait, in_constant, in_ma\n             span_lint_and_then, walk_ptrs_ty};\n use utils::sugg::Sugg;\n use syntax::ast::{FloatTy, LitKind, CRATE_NODE_ID};\n+use consts::constant;\n \n /// **What it does:** Checks for function arguments and let bindings denoted as\n /// `ref`.\n@@ -200,6 +201,27 @@ declare_lint! {\n     \"using 0 as *{const, mut} T\"\n }\n \n+/// **What it does:** Checks for (in-)equality comparisons on floating-point\n+/// value and constant, except in functions called `*eq*` (which probably\n+/// implement equality for a type involving floats).\n+///\n+/// **Why is this bad?** Floating point calculations are usually imprecise, so\n+/// asking if two values are *exactly* equal is asking for trouble. For a good\n+/// guide on what to do, see [the floating point\n+/// guide](http://www.floating-point-gui.de/errors/comparison).\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// const ONE == 1.00f64\n+/// x == ONE  // where both are floats\n+/// ```\n+declare_restriction_lint! {\n+    pub FLOAT_CMP_CONST,\n+    \"using `==` or `!=` on float constants instead of comparing difference with an epsilon\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct Pass;\n \n@@ -214,7 +236,8 @@ impl LintPass for Pass {\n             REDUNDANT_PATTERN,\n             USED_UNDERSCORE_BINDING,\n             SHORT_CIRCUIT_STATEMENT,\n-            ZERO_PTR\n+            ZERO_PTR,\n+            FLOAT_CMP_CONST\n         )\n     }\n }\n@@ -334,7 +357,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                             return;\n                         }\n                     }\n-                    span_lint_and_then(cx, FLOAT_CMP, expr.span, \"strict comparison of f32 or f64\", |db| {\n+                    let (lint, msg) = if is_named_constant(cx, left) || is_named_constant(cx, right) {\n+                        (FLOAT_CMP_CONST, \"strict comparison of f32 or f64 constant\")\n+                    } else {\n+                        (FLOAT_CMP, \"strict comparison of f32 or f64\")\n+                    };\n+                    span_lint_and_then(cx, lint, expr.span, msg, |db| {\n                         let lhs = Sugg::hir(cx, left, \"..\");\n                         let rhs = Sugg::hir(cx, right, \"..\");\n \n@@ -421,6 +449,14 @@ fn check_nan(cx: &LateContext, path: &Path, expr: &Expr) {\n     }\n }\n \n+fn is_named_constant<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> bool {\n+    if let Some((_, res)) = constant(cx, expr) {\n+        res\n+    } else {\n+       false\n+    }\n+}\n+\n fn is_allowed<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> bool {\n     let parent_item = cx.tcx.hir.get_parent(expr.id);\n     let parent_def_id = cx.tcx.hir.local_def_id(parent_item);"}, {"sha": "12ffb5b3301a0b2b1b680a64cdb470b7d8afab54", "filename": "tests/ui/float_cmp_const.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2787a60fc23accc81c9f9c7350b62c73f1c368a4/tests%2Fui%2Ffloat_cmp_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2787a60fc23accc81c9f9c7350b62c73f1c368a4/tests%2Fui%2Ffloat_cmp_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.rs?ref=2787a60fc23accc81c9f9c7350b62c73f1c368a4", "patch": "@@ -0,0 +1,31 @@\n+\n+\n+\n+#![warn(float_cmp_const)]\n+#![allow(unused, no_effect, unnecessary_operation)]\n+\n+const ONE: f32 = 1.0;\n+const TWO: f32 = 2.0;\n+\n+fn eq_one(x: f32) -> bool {\n+    if x.is_nan() { false } else { x == ONE } // no error, inside \"eq\" fn\n+}\n+\n+fn main() {\n+    // has errors\n+    1f32 == ONE;\n+    TWO == ONE;\n+    TWO != ONE;\n+    ONE + ONE == TWO;\n+    1 as f32 == ONE;\n+\n+    let v = 0.9;\n+    v == ONE;\n+    v != ONE;\n+\n+    // no errors, lower than or greater than comparisons\n+    v < ONE;\n+    v > ONE;\n+    v <= ONE;\n+    v >= ONE;\n+}"}, {"sha": "0bdbb6770dc97c9c0f17749838393030f08aea8b", "filename": "tests/ui/float_cmp_const.stderr", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/2787a60fc23accc81c9f9c7350b62c73f1c368a4/tests%2Fui%2Ffloat_cmp_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2787a60fc23accc81c9f9c7350b62c73f1c368a4/tests%2Fui%2Ffloat_cmp_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.stderr?ref=2787a60fc23accc81c9f9c7350b62c73f1c368a4", "patch": "@@ -0,0 +1,85 @@\n+error: strict comparison of f32 or f64 constant\n+  --> $DIR/float_cmp_const.rs:16:5\n+   |\n+16 |     1f32 == ONE;\n+   |     ^^^^^^^^^^^ help: consider comparing them within some error: `(1f32 - ONE).abs() < error`\n+   |\n+   = note: `-D float-cmp-const` implied by `-D warnings`\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp_const.rs:16:5\n+   |\n+16 |     1f32 == ONE;\n+   |     ^^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64 constant\n+  --> $DIR/float_cmp_const.rs:17:5\n+   |\n+17 |     TWO == ONE;\n+   |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() < error`\n+   |\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp_const.rs:17:5\n+   |\n+17 |     TWO == ONE;\n+   |     ^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64 constant\n+  --> $DIR/float_cmp_const.rs:18:5\n+   |\n+18 |     TWO != ONE;\n+   |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() < error`\n+   |\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp_const.rs:18:5\n+   |\n+18 |     TWO != ONE;\n+   |     ^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64 constant\n+  --> $DIR/float_cmp_const.rs:19:5\n+   |\n+19 |     ONE + ONE == TWO;\n+   |     ^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE + ONE - TWO).abs() < error`\n+   |\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp_const.rs:19:5\n+   |\n+19 |     ONE + ONE == TWO;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64 constant\n+  --> $DIR/float_cmp_const.rs:20:5\n+   |\n+20 |     1 as f32 == ONE;\n+   |     ^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(1 as f32 - ONE).abs() < error`\n+   |\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp_const.rs:20:5\n+   |\n+20 |     1 as f32 == ONE;\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64 constant\n+  --> $DIR/float_cmp_const.rs:23:5\n+   |\n+23 |     v == ONE;\n+   |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() < error`\n+   |\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp_const.rs:23:5\n+   |\n+23 |     v == ONE;\n+   |     ^^^^^^^^\n+\n+error: strict comparison of f32 or f64 constant\n+  --> $DIR/float_cmp_const.rs:24:5\n+   |\n+24 |     v != ONE;\n+   |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() < error`\n+   |\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp_const.rs:24:5\n+   |\n+24 |     v != ONE;\n+   |     ^^^^^^^^\n+"}]}