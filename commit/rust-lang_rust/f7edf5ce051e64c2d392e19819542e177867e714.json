{"sha": "f7edf5ce051e64c2d392e19819542e177867e714", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZWRmNWNlMDUxZTY0YzJkMzkyZTE5ODE5NTQyZTE3Nzg2N2U3MTQ=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-01-25T09:04:09Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-02-09T12:19:37Z"}, "message": "BTreeMap: fix internal comments", "tree": {"sha": "147e5e36e417904844c3a9b0c57b393a4496d3c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/147e5e36e417904844c3a9b0c57b393a4496d3c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7edf5ce051e64c2d392e19819542e177867e714", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7edf5ce051e64c2d392e19819542e177867e714", "html_url": "https://github.com/rust-lang/rust/commit/f7edf5ce051e64c2d392e19819542e177867e714", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7edf5ce051e64c2d392e19819542e177867e714/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4008fe94935d05ffb3a48fc5b7149070bb45550", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4008fe94935d05ffb3a48fc5b7149070bb45550", "html_url": "https://github.com/rust-lang/rust/commit/f4008fe94935d05ffb3a48fc5b7149070bb45550"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "259b22e5c6666fdeba7a52444caf56467c590a5d", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f7edf5ce051e64c2d392e19819542e177867e714/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7edf5ce051e64c2d392e19819542e177867e714/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=f7edf5ce051e64c2d392e19819542e177867e714", "patch": "@@ -103,7 +103,8 @@ where\n     }\n }\n \n-/// Equivalent to `range_search(k, v, ..)` but without the `Ord` bound.\n+/// Equivalent to `range_search(root1, root2, ..)` but without the `Ord` bound.\n+/// Equivalent to `(root1.first_leaf_edge(), root2.last_leaf_edge())` but more efficient.\n fn full_range<BorrowType: marker::BorrowType, K, V>(\n     root1: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n     root2: NodeRef<BorrowType, K, V, marker::LeafOrInternal>,\n@@ -130,7 +131,7 @@ fn full_range<BorrowType: marker::BorrowType, K, V>(\n }\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal> {\n-    /// Creates a pair of leaf edges delimiting a specified range in or underneath a node.\n+    /// Finds the pair of leaf edges delimiting a specific range in a tree.\n     ///\n     /// The result is meaningful only if the tree is ordered by key, like the tree\n     /// in a `BTreeMap` is.\n@@ -149,7 +150,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>\n         range_search(self, self, range)\n     }\n \n-    /// Returns (self.first_leaf_edge(), self.last_leaf_edge()), but more efficiently.\n+    /// Finds the pair of leaf edges delimiting an entire tree.\n     pub fn full_range(\n         self,\n     ) -> ("}, {"sha": "6f67aadc161f14c4c9bd515b6c33acce0a9f3793", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7edf5ce051e64c2d392e19819542e177867e714/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7edf5ce051e64c2d392e19819542e177867e714/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=f7edf5ce051e64c2d392e19819542e177867e714", "patch": "@@ -169,7 +169,7 @@ impl<K, V, Type> NodeRef<marker::Owned, K, V, Type> {\n         NodeRef { height: self.height, node: self.node, _marker: PhantomData }\n     }\n \n-    /// Irreversibly transistions to a reference that offers traversal,\n+    /// Irreversibly transitions to a reference that permits traversal and offers\n     /// destructive methods and little else.\n     pub fn into_dying(self) -> NodeRef<marker::Dying, K, V, Type> {\n         NodeRef { height: self.height, node: self.node, _marker: PhantomData }"}]}