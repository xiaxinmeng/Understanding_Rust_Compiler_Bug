{"sha": "86d8f1268ae0fbc07ca42233a0eac4668e2af724", "node_id": "C_kwDOAAsO6NoAKDg2ZDhmMTI2OGFlMGZiYzA3Y2E0MjIzM2EwZWFjNDY2OGUyYWY3MjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T00:10:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T00:10:44Z"}, "message": "Auto merge of #106934 - DrMeepster:offset_of, r=WaffleLapkin\n\nAdd offset_of! macro (RFC 3308)\n\nImplements https://github.com/rust-lang/rfcs/pull/3308 (tracking issue #106655) by adding the built in macro `core::mem::offset_of`. Two of the future possibilities are also implemented:\n\n* Nested field accesses (without array indexing)\n* DST support (for `Sized` fields)\n\nI wrote this a few months ago, before the RFC merged. Now that it's merged, I decided to rebase and finish it.\n\ncc `@thomcc` (RFC author)", "tree": {"sha": "7626ef8494f1499b3f121199e4e5080616f02d4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7626ef8494f1499b3f121199e4e5080616f02d4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86d8f1268ae0fbc07ca42233a0eac4668e2af724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86d8f1268ae0fbc07ca42233a0eac4668e2af724", "html_url": "https://github.com/rust-lang/rust/commit/86d8f1268ae0fbc07ca42233a0eac4668e2af724", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86d8f1268ae0fbc07ca42233a0eac4668e2af724/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84bab312abaf810a04eb2ef910b535b524c56c47", "url": "https://api.github.com/repos/rust-lang/rust/commits/84bab312abaf810a04eb2ef910b535b524c56c47", "html_url": "https://github.com/rust-lang/rust/commit/84bab312abaf810a04eb2ef910b535b524c56c47"}, {"sha": "68c4776b4603f453d17b772e4598fee77c48dde8", "url": "https://api.github.com/repos/rust-lang/rust/commits/68c4776b4603f453d17b772e4598fee77c48dde8", "html_url": "https://github.com/rust-lang/rust/commit/68c4776b4603f453d17b772e4598fee77c48dde8"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "5f1fdf00be8c3fc11df5dc1a0eced013ff23f69d", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=86d8f1268ae0fbc07ca42233a0eac4668e2af724", "patch": "@@ -226,7 +226,8 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n                 | InlineAsmOperand::SymStatic { .. } => NeverLoopResult::Otherwise,\n             })\n             .fold(NeverLoopResult::Otherwise, combine_seq),\n-        ExprKind::Yield(_, _)\n+        ExprKind::OffsetOf(_, _)\n+        | ExprKind::Yield(_, _)\n         | ExprKind::Closure { .. }\n         | ExprKind::Path(_)\n         | ExprKind::ConstBlock(_)"}, {"sha": "7945275393c04e5e666611c0df065b1562ae9873", "filename": "clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=86d8f1268ae0fbc07ca42233a0eac4668e2af724", "patch": "@@ -342,6 +342,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n             ExprKind::DropTemps(_) |\n             ExprKind::Err(_) |\n             ExprKind::InlineAsm(_) |\n+            ExprKind::OffsetOf(_, _) |\n             ExprKind::Let(_) |\n             ExprKind::Lit(_) |\n             ExprKind::Loop(_, _, _, _) |"}, {"sha": "01927b6b5f10d91958e6c1679bcfeac2767eb6b2", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=86d8f1268ae0fbc07ca42233a0eac4668e2af724", "patch": "@@ -558,6 +558,10 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 kind!(\"InlineAsm(_)\");\n                 out!(\"// unimplemented: `ExprKind::InlineAsm` is not further destructured at the moment\");\n             },\n+            ExprKind::OffsetOf(container, ref fields) => {\n+                bind!(self, container, fields);\n+                kind!(\"OffsetOf({container}, {fields})\");\n+            }\n             ExprKind::Struct(qpath, fields, base) => {\n                 bind!(self, qpath, fields);\n                 opt_bind!(self, base);"}, {"sha": "3df40942e7b5a5ee3652514342da623f63ae3d8b", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=86d8f1268ae0fbc07ca42233a0eac4668e2af724", "patch": "@@ -218,7 +218,8 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 | ExprKind::AddrOf(..)\n                 | ExprKind::Struct(..)\n                 | ExprKind::Repeat(..)\n-                | ExprKind::Block(Block { stmts: [], .. }, _) => (),\n+                | ExprKind::Block(Block { stmts: [], .. }, _)\n+                | ExprKind::OffsetOf(..) => (),\n \n                 // Assignment might be to a local defined earlier, so don't eagerly evaluate.\n                 // Blocks with multiple statements might be expensive, so don't eagerly evaluate."}, {"sha": "d972ed82c258b41bcdaed8ee73ec2d0e869c7384", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=86d8f1268ae0fbc07ca42233a0eac4668e2af724", "patch": "@@ -301,6 +301,9 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&ExprKind::Unary(l_op, le), &ExprKind::Unary(r_op, re)) => l_op == r_op && self.eq_expr(le, re),\n             (&ExprKind::Array(l), &ExprKind::Array(r)) => self.eq_exprs(l, r),\n             (&ExprKind::DropTemps(le), &ExprKind::DropTemps(re)) => self.eq_expr(le, re),\n+            (&ExprKind::OffsetOf(l_container, ref l_fields), &ExprKind::OffsetOf(r_container, ref r_fields)) => {\n+                self.eq_ty(l_container, r_container) && over(l_fields, r_fields, |l, r| l.name == r.name)\n+            },\n             _ => false,\n         };\n         (is_eq && (!self.should_ignore(left) || !self.should_ignore(right)))\n@@ -701,6 +704,12 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     }\n                 }\n             },\n+            ExprKind::OffsetOf(container, fields) => {\n+                self.hash_ty(container);\n+                for field in fields {\n+                    self.hash_name(field.name);\n+                }\n+            },\n             ExprKind::Let(Let { pat, init, ty, .. }) => {\n                 self.hash_expr(init);\n                 if let Some(ty) = ty {"}, {"sha": "ecd712f32dc1f29fb3efa950891fe026188ab9bc", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=86d8f1268ae0fbc07ca42233a0eac4668e2af724", "patch": "@@ -194,7 +194,7 @@ fn check_rvalue<'tcx>(\n                 ))\n             }\n         },\n-        Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) | Rvalue::ShallowInitBox(_, _) => Ok(()),\n+        Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf | NullOp::OffsetOf(_), _) | Rvalue::ShallowInitBox(_, _) => Ok(()),\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() {"}, {"sha": "e81eadceec0aa5ee53dc10bd74fb2d961fbcbe42", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=86d8f1268ae0fbc07ca42233a0eac4668e2af724", "patch": "@@ -139,6 +139,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Field(..)\n             | hir::ExprKind::Index(..)\n             | hir::ExprKind::InlineAsm(..)\n+            | hir::ExprKind::OffsetOf(..)\n             | hir::ExprKind::ConstBlock(..)\n             | hir::ExprKind::Lit(..)\n             | hir::ExprKind::Loop(..)\n@@ -197,6 +198,7 @@ impl<'a> Sugg<'a> {\n             | ast::ExprKind::ForLoop(..)\n             | ast::ExprKind::Index(..)\n             | ast::ExprKind::InlineAsm(..)\n+            | ast::ExprKind::OffsetOf(..)\n             | ast::ExprKind::ConstBlock(..)\n             | ast::ExprKind::Lit(..)\n             | ast::ExprKind::IncludedBytes(..)"}, {"sha": "5dcd71cef127e4b9d0a4a23c54e0f198138862c0", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d8f1268ae0fbc07ca42233a0eac4668e2af724/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=86d8f1268ae0fbc07ca42233a0eac4668e2af724", "patch": "@@ -662,6 +662,7 @@ pub fn for_each_unconsumed_temporary<'tcx, B>(\n             | ExprKind::Path(_)\n             | ExprKind::Continue(_)\n             | ExprKind::InlineAsm(_)\n+            | ExprKind::OffsetOf(..)\n             | ExprKind::Err(_) => (),\n         }\n         ControlFlow::Continue(())"}]}