{"sha": "de477edb6d95af009b4d81d9d87c1ff7b0a77459", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNDc3ZWRiNmQ5NWFmMDA5YjRkODFkOWQ4N2MxZmY3YjBhNzc0NTk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-17T12:20:34Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-17T12:20:34Z"}, "message": "Rollup merge of #32956 - GuillaumeGomez:ptr_examples, r=steveklabnik\n\nAdd examples for std::ptr module functions\n\nPart of #29371.\n\nr? @steveklabnik", "tree": {"sha": "1a37fdd95330266e366cc494d3403c44ba38c6d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a37fdd95330266e366cc494d3403c44ba38c6d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de477edb6d95af009b4d81d9d87c1ff7b0a77459", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de477edb6d95af009b4d81d9d87c1ff7b0a77459", "html_url": "https://github.com/rust-lang/rust/commit/de477edb6d95af009b4d81d9d87c1ff7b0a77459", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de477edb6d95af009b4d81d9d87c1ff7b0a77459/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e59af6c7196ee0118c524e9d33df10419452698d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e59af6c7196ee0118c524e9d33df10419452698d", "html_url": "https://github.com/rust-lang/rust/commit/e59af6c7196ee0118c524e9d33df10419452698d"}, {"sha": "fbcf9359c167b1e293de80f2562b81d7445b7ecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbcf9359c167b1e293de80f2562b81d7445b7ecd", "html_url": "https://github.com/rust-lang/rust/commit/fbcf9359c167b1e293de80f2562b81d7445b7ecd"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "a3c7ab481a765f63cee345578b23fdabd85a8cec", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/de477edb6d95af009b4d81d9d87c1ff7b0a77459/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de477edb6d95af009b4d81d9d87c1ff7b0a77459/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=de477edb6d95af009b4d81d9d87c1ff7b0a77459", "patch": "@@ -119,6 +119,17 @@ pub unsafe fn replace<T>(dest: *mut T, mut src: T) -> T {\n /// `src` is not used before the data is overwritten again (e.g. with `write`,\n /// `zero_memory`, or `copy_memory`). Note that `*src = foo` counts as a use\n /// because it will attempt to drop the value previously at `*src`.\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// let x = 12;\n+/// let y = &x as *const i32;\n+///\n+/// unsafe { println!(\"{}\", std::ptr::read(y)); }\n+/// ```\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn read<T>(src: *const T) -> T {\n@@ -155,6 +166,21 @@ pub unsafe fn read_and_drop<T>(dest: *mut T) -> T {\n ///\n /// This is appropriate for initializing uninitialized memory, or overwriting\n /// memory that has previously been `read` from.\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// let mut x = 0;\n+/// let y = &mut x as *mut i32;\n+/// let z = 12;\n+///\n+/// unsafe {\n+///     std::ptr::write(y, z);\n+///     println!(\"{}\", std::ptr::read(y));\n+/// }\n+/// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn write<T>(dst: *mut T, src: T) {\n@@ -185,6 +211,17 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n /// `src` is not used before the data is overwritten again (e.g. with `write`,\n /// `zero_memory`, or `copy_memory`). Note that `*src = foo` counts as a use\n /// because it will attempt to drop the value previously at `*src`.\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// let x = 12;\n+/// let y = &x as *const i32;\n+///\n+/// unsafe { println!(\"{}\", std::ptr::read_volatile(y)); }\n+/// ```\n #[inline]\n #[stable(feature = \"volatile\", since = \"1.9.0\")]\n pub unsafe fn read_volatile<T>(src: *const T) -> T {\n@@ -217,6 +254,21 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n ///\n /// This is appropriate for initializing uninitialized memory, or overwriting\n /// memory that has previously been `read` from.\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// let mut x = 0;\n+/// let y = &mut x as *mut i32;\n+/// let z = 12;\n+///\n+/// unsafe {\n+///     std::ptr::write_volatile(y, z);\n+///     println!(\"{}\", std::ptr::read_volatile(y));\n+/// }\n+/// ```\n #[inline]\n #[stable(feature = \"volatile\", since = \"1.9.0\")]\n pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {"}]}