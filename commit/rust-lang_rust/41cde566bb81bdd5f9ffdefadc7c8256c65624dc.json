{"sha": "41cde566bb81bdd5f9ffdefadc7c8256c65624dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxY2RlNTY2YmI4MWJkZDVmOWZmZGVmYWRjN2M4MjU2YzY1NjI0ZGM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-30T22:28:20Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-03T17:32:34Z"}, "message": "extra: Fix tests with io_error usage", "tree": {"sha": "5e604ccb7379c89f7c81558b5376a5ffde0035af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e604ccb7379c89f7c81558b5376a5ffde0035af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41cde566bb81bdd5f9ffdefadc7c8256c65624dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41cde566bb81bdd5f9ffdefadc7c8256c65624dc", "html_url": "https://github.com/rust-lang/rust/commit/41cde566bb81bdd5f9ffdefadc7c8256c65624dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "209642c65177d6cf42dd4eea693040aa91cde9ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/209642c65177d6cf42dd4eea693040aa91cde9ee", "html_url": "https://github.com/rust-lang/rust/commit/209642c65177d6cf42dd4eea693040aa91cde9ee"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "9615bdc2ad731e5c7fbd804d8070fa6e2763b8fd", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=41cde566bb81bdd5f9ffdefadc7c8256c65624dc", "patch": "@@ -637,7 +637,7 @@ mod tests {\n     fn test_mutex_arc_poison() {\n         let arc = ~MutexArc::new(1);\n         let arc2 = ~arc.clone();\n-        task::try(proc() {\n+        let _ = task::try(proc() {\n             arc2.access(|one| {\n                 assert_eq!(*one, 2);\n             })\n@@ -668,7 +668,7 @@ mod tests {\n     fn test_mutex_arc_access_in_unwind() {\n         let arc = MutexArc::new(1i);\n         let arc2 = arc.clone();\n-        task::try::<()>(proc() {\n+        let _ = task::try::<()>(proc() {\n             struct Unwinder {\n                 i: MutexArc<int>\n             }\n@@ -687,7 +687,7 @@ mod tests {\n     fn test_rw_arc_poison_wr() {\n         let arc = RWArc::new(1);\n         let arc2 = arc.clone();\n-        task::try(proc() {\n+        let _ = task::try(proc() {\n             arc2.write(|one| {\n                 assert_eq!(*one, 2);\n             })\n@@ -701,7 +701,7 @@ mod tests {\n     fn test_rw_arc_poison_ww() {\n         let arc = RWArc::new(1);\n         let arc2 = arc.clone();\n-        task::try(proc() {\n+        let _ = task::try(proc() {\n             arc2.write(|one| {\n                 assert_eq!(*one, 2);\n             })\n@@ -714,7 +714,7 @@ mod tests {\n     fn test_rw_arc_poison_dw() {\n         let arc = RWArc::new(1);\n         let arc2 = arc.clone();\n-        task::try(proc() {\n+        let _ = task::try(proc() {\n             arc2.write_downgrade(|mut write_mode| {\n                 write_mode.write(|one| {\n                     assert_eq!(*one, 2);\n@@ -729,7 +729,7 @@ mod tests {\n     fn test_rw_arc_no_poison_rr() {\n         let arc = RWArc::new(1);\n         let arc2 = arc.clone();\n-        task::try(proc() {\n+        let _ = task::try(proc() {\n             arc2.read(|one| {\n                 assert_eq!(*one, 2);\n             })\n@@ -742,7 +742,7 @@ mod tests {\n     fn test_rw_arc_no_poison_rw() {\n         let arc = RWArc::new(1);\n         let arc2 = arc.clone();\n-        task::try(proc() {\n+        let _ = task::try(proc() {\n             arc2.read(|one| {\n                 assert_eq!(*one, 2);\n             })\n@@ -755,7 +755,7 @@ mod tests {\n     fn test_rw_arc_no_poison_dr() {\n         let arc = RWArc::new(1);\n         let arc2 = arc.clone();\n-        task::try(proc() {\n+        let _ = task::try(proc() {\n             arc2.write_downgrade(|write_mode| {\n                 let read_mode = arc2.downgrade(write_mode);\n                 read_mode.read(|one| {\n@@ -800,7 +800,7 @@ mod tests {\n \n         // Wait for children to pass their asserts\n         for r in children.mut_iter() {\n-            r.recv();\n+            let _ = r.recv();\n         }\n \n         // Wait for writer to finish\n@@ -814,7 +814,7 @@ mod tests {\n     fn test_rw_arc_access_in_unwind() {\n         let arc = RWArc::new(1i);\n         let arc2 = arc.clone();\n-        task::try::<()>(proc() {\n+        let _ = task::try::<()>(proc() {\n             struct Unwinder {\n                 i: RWArc<int>\n             }"}, {"sha": "556032af1ac8465f027879414875dc22eb92ba9a", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=41cde566bb81bdd5f9ffdefadc7c8256c65624dc", "patch": "@@ -359,7 +359,7 @@ mod test {\n                  \u30a6\u30f0\u30ce\u30aa\u30af\u30e4\u30de \u30b1\u30d5\u30b3\u30a8\u30c6 \u30a2\u30b5\u30ad\u30e6\u30e1\u30df\u30b7 \u30f1\u30d2\u30e2\u30bb\u30b9\u30f3\";\n         let b = s.as_bytes().to_base64(STANDARD);\n         bh.iter(|| {\n-            b.from_base64();\n+            b.from_base64().unwrap();\n         });\n         bh.bytes = b.len() as u64;\n     }"}, {"sha": "d4e1ae123378e9c97a4a70d5453a6443da8d4b6d", "filename": "src/libextra/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fhex.rs?ref=41cde566bb81bdd5f9ffdefadc7c8256c65624dc", "patch": "@@ -201,7 +201,7 @@ mod tests {\n                  \u30a6\u30f0\u30ce\u30aa\u30af\u30e4\u30de \u30b1\u30d5\u30b3\u30a8\u30c6 \u30a2\u30b5\u30ad\u30e6\u30e1\u30df\u30b7 \u30f1\u30d2\u30e2\u30bb\u30b9\u30f3\";\n         let b = s.as_bytes().to_hex();\n         bh.iter(|| {\n-            b.from_hex();\n+            b.from_hex().unwrap();\n         });\n         bh.bytes = b.len() as u64;\n     }"}, {"sha": "8752020f564e0389b3f04da60b634fa395a8c898", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=41cde566bb81bdd5f9ffdefadc7c8256c65624dc", "patch": "@@ -456,11 +456,11 @@ mod tests {\n \n         let mut w = io::stdout();\n         let w = &mut w as &mut io::Writer;\n-        write!(w, \"\\n\");\n-        write_5_number_summary(w, &summ2);\n-        write!(w, \"\\n\");\n-        write_boxplot(w, &summ2, 50);\n-        write!(w, \"\\n\");\n+        (write!(w, \"\\n\")).unwrap();\n+        write_5_number_summary(w, &summ2).unwrap();\n+        (write!(w, \"\\n\")).unwrap();\n+        write_boxplot(w, &summ2, 50).unwrap();\n+        (write!(w, \"\\n\")).unwrap();\n \n         assert_eq!(summ.sum, summ2.sum);\n         assert_eq!(summ.min, summ2.min);\n@@ -1003,7 +1003,7 @@ mod tests {\n         fn t(s: &Summary, expected: ~str) {\n             use std::io::MemWriter;\n             let mut m = MemWriter::new();\n-            write_boxplot(&mut m as &mut io::Writer, s, 30);\n+            write_boxplot(&mut m as &mut io::Writer, s, 30).unwrap();\n             let out = str::from_utf8_owned(m.unwrap()).unwrap();\n             assert_eq!(out, expected);\n         }"}, {"sha": "0a29fd189822985de3759572e57d1f35ec77c0fa", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=41cde566bb81bdd5f9ffdefadc7c8256c65624dc", "patch": "@@ -959,7 +959,7 @@ mod tests {\n     fn test_mutex_cond_no_waiter() {\n         let m = Mutex::new();\n         let m2 = m.clone();\n-        task::try(proc() {\n+        let _ = task::try(proc() {\n             m.lock_cond(|_x| { })\n         });\n         m2.lock_cond(|cond| {"}, {"sha": "c4d27b25b5503587b4d16e5339d1d725e2501061", "filename": "src/libextra/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=41cde566bb81bdd5f9ffdefadc7c8256c65624dc", "patch": "@@ -720,7 +720,7 @@ fn should_sort_failures_before_printing_them() {\n         failures: ~[test_b, test_a]\n     };\n \n-    st.write_failures();\n+    st.write_failures().unwrap();\n     let s = match st.out {\n         Raw(ref m) => str::from_utf8(m.get_ref()).unwrap(),\n         Pretty(_) => unreachable!()\n@@ -1485,7 +1485,7 @@ mod tests {\n         m2.insert_metric(\"runtime\", 1100.0, 2.0);\n         m2.insert_metric(\"throughput\", 50.0, 2.0);\n \n-        m1.save(&pth);\n+        m1.save(&pth).unwrap();\n \n         // Ask for a ratchet that should fail to advance.\n         let (diff1, ok1) = m2.ratchet(&pth, None);"}, {"sha": "29d3066b2f5901a1113254b880322f356309a6a0", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=41cde566bb81bdd5f9ffdefadc7c8256c65624dc", "patch": "@@ -821,7 +821,7 @@ mod bench {\n     pub fn parse_str(bh: &mut BenchHarness) {\n         let s = \"urn:uuid:F9168C5E-CEB2-4faa-B6BF-329BF39FA1E4\";\n         bh.iter(|| {\n-            Uuid::parse_string(s);\n+            Uuid::parse_string(s).unwrap();\n         })\n     }\n }"}, {"sha": "4d8e7e50dcfd50f93092585387de5a6a61dd4754", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=41cde566bb81bdd5f9ffdefadc7c8256c65624dc", "patch": "@@ -473,13 +473,13 @@ fn test() {\n     fn make_path(filename: ~str) -> Path {\n         let pth = os::self_exe_path().expect(\"workcache::test failed\").with_filename(filename);\n         if pth.exists() {\n-            fs::unlink(&pth);\n+            fs::unlink(&pth).unwrap();\n         }\n         return pth;\n     }\n \n     let pth = make_path(~\"foo.c\");\n-    File::create(&pth).write(bytes!(\"int main() { return 0; }\"));\n+    File::create(&pth).write(bytes!(\"int main() { return 0; }\")).unwrap();\n \n     let db_path = make_path(~\"db.json\");\n \n@@ -491,7 +491,8 @@ fn test() {\n         let subcx = cx.clone();\n         let pth = pth.clone();\n \n-        let file_content = from_utf8_owned(File::open(&pth).read_to_end()).unwrap();\n+        let contents = File::open(&pth).read_to_end().unwrap();\n+        let file_content = from_utf8_owned(contents).unwrap();\n \n         // FIXME (#9639): This needs to handle non-utf8 paths\n         prep.declare_input(\"file\", pth.as_str().unwrap(), file_content);\n@@ -500,7 +501,7 @@ fn test() {\n             // FIXME (#9639): This needs to handle non-utf8 paths\n             run::process_status(\"gcc\", [pth.as_str().unwrap().to_owned(),\n                                         ~\"-o\",\n-                                        out.as_str().unwrap().to_owned()]);\n+                                        out.as_str().unwrap().to_owned()]).unwrap();\n \n             let _proof_of_concept = subcx.prep(\"subfn\");\n             // Could run sub-rules inside here."}, {"sha": "5b536d9aafa9129e630e68a7c60adbc5f52d2afc", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41cde566bb81bdd5f9ffdefadc7c8256c65624dc/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=41cde566bb81bdd5f9ffdefadc7c8256c65624dc", "patch": "@@ -106,7 +106,7 @@ fn test_get_dbpath_for_term() {\n #[test]\n #[ignore(reason = \"see test_get_dbpath_for_term\")]\n fn test_open() {\n-    open(\"screen\");\n+    open(\"screen\").unwrap();\n     let t = open(\"nonexistent terminal that hopefully does not exist\");\n     assert!(t.is_err());\n }"}]}