{"sha": "7518f688613a58bc2a070f2eb2e66364dfea7fe5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MThmNjg4NjEzYTU4YmMyYTA3MGYyZWIyZTY2MzY0ZGZlYTdmZTU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-15T22:44:43Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-16T02:05:05Z"}, "message": "Add an option to format struct lits with either block or visual indent", "tree": {"sha": "eea06a88896e935b22b2805865b28c5b999b5f3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eea06a88896e935b22b2805865b28c5b999b5f3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7518f688613a58bc2a070f2eb2e66364dfea7fe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7518f688613a58bc2a070f2eb2e66364dfea7fe5", "html_url": "https://github.com/rust-lang/rust/commit/7518f688613a58bc2a070f2eb2e66364dfea7fe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7518f688613a58bc2a070f2eb2e66364dfea7fe5/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a6f96d704d01d4301fa9e9b6f632318e4c57c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a6f96d704d01d4301fa9e9b6f632318e4c57c4", "html_url": "https://github.com/rust-lang/rust/commit/e4a6f96d704d01d4301fa9e9b6f632318e4c57c4"}], "stats": {"total": 218, "additions": 185, "deletions": 33}, "files": [{"sha": "a01d3e64689bf2ac68da319c09277cbb21f3fcb4", "filename": "src/config.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7518f688613a58bc2a070f2eb2e66364dfea7fe5/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7518f688613a58bc2a070f2eb2e66364dfea7fe5/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=7518f688613a58bc2a070f2eb2e66364dfea7fe5", "patch": "@@ -10,7 +10,7 @@\n \n extern crate toml;\n \n-use {NewlineStyle, BraceStyle, ReturnIndent};\n+use {NewlineStyle, BraceStyle, ReturnIndent, StructLitStyle};\n use lists::SeparatorTactic;\n use issues::ReportTactic;\n \n@@ -26,6 +26,7 @@ pub struct Config {\n     pub fn_args_paren_newline: bool,\n     pub struct_trailing_comma: SeparatorTactic,\n     pub struct_lit_trailing_comma: SeparatorTactic,\n+    pub struct_lit_style: StructLitStyle,\n     pub enum_trailing_comma: bool,\n     pub report_todo: ReportTactic,\n     pub report_fixme: ReportTactic,\n@@ -35,6 +36,14 @@ pub struct Config {\n impl Config {\n     pub fn from_toml(toml: &str) -> Config {\n         let parsed = toml.parse().unwrap();\n-        toml::decode(parsed).unwrap()\n+        match toml::decode(parsed) {\n+            Some(decoded) => decoded,\n+            None => {\n+                println!(\"Decoding config file failed. Config:\\n{}\", toml);\n+                let parsed: toml::Value = toml.parse().unwrap();\n+                println!(\"\\n\\nParsed:\\n{:?}\", parsed);\n+                panic!();\n+            }\n+        }\n     }\n }"}, {"sha": "e31a0f257e9e2eabbcb27987683ecc564c088f01", "filename": "src/default.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7518f688613a58bc2a070f2eb2e66364dfea7fe5/src%2Fdefault.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7518f688613a58bc2a070f2eb2e66364dfea7fe5/src%2Fdefault.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdefault.toml?ref=7518f688613a58bc2a070f2eb2e66364dfea7fe5", "patch": "@@ -7,6 +7,7 @@ fn_brace_style = \"SameLineWhere\"\n fn_return_indent = \"WithArgs\"\n fn_args_paren_newline = true\n struct_trailing_comma = \"Vertical\"\n+struct_lit_style = \"BlockIndent\"\n struct_lit_trailing_comma = \"Vertical\"\n enum_trailing_comma = true\n report_todo = \"Always\""}, {"sha": "c6e9a84421ab62af444cf253a3dcd84e5c49089f", "filename": "src/expr.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7518f688613a58bc2a070f2eb2e66364dfea7fe5/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7518f688613a58bc2a070f2eb2e66364dfea7fe5/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=7518f688613a58bc2a070f2eb2e66364dfea7fe5", "patch": "@@ -11,6 +11,7 @@\n use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic};\n use string::{StringFormat, rewrite_string};\n+use StructLitStyle;\n use utils::{span_after, make_indent};\n use visitor::FmtVisitor;\n \n@@ -188,8 +189,15 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n \n     let path_str = pprust::path_to_string(path);\n     // Foo { a: Foo } - indent is +3, width is -5.\n-    let indent = offset + path_str.len() + 3;\n-    let budget = width - (path_str.len() + 5);\n+    let (indent, budget) = match context.config.struct_lit_style {\n+        StructLitStyle::VisualIndent => {\n+            (offset + path_str.len() + 3, width - (path_str.len() + 5))\n+        }\n+        StructLitStyle::BlockIndent => {\n+            let indent = context.block_indent + context.config.tab_spaces;\n+            (indent, width - indent)\n+        }\n+    };\n \n     let field_iter = fields.into_iter().map(StructLitField::Regular)\n                            .chain(base.into_iter().map(StructLitField::Base));\n@@ -243,12 +251,18 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n                                v_width: budget,\n                                ends_with_newline: true, };\n     let fields_str = write_list(&items, &fmt);\n-    Some(format!(\"{} {{ {} }}\", path_str, fields_str))\n \n-    // FIXME if the usual multi-line layout is too wide, we should fall back to\n-    // Foo {\n-    //     a: ...,\n-    // }\n+    match context.config.struct_lit_style {\n+        StructLitStyle::BlockIndent if fields_str.contains('\\n') => {\n+            let inner_indent = make_indent(context.block_indent + context.config.tab_spaces);\n+            let outer_indent = make_indent(context.block_indent);\n+            Some(format!(\"{} {{\\n{}{}\\n{}}}\", path_str, inner_indent, fields_str, outer_indent))\n+        }\n+        _ => Some(format!(\"{} {{ {} }}\", path_str, fields_str)),\n+    }\n+\n+    // FIXME if context.config.struct_lit_style == VisualIndent, but we run out\n+    // of space, we should fall back to BlockIndent.\n }\n \n fn rewrite_field(context: &RewriteContext,"}, {"sha": "296a462ed389b864a66098695436b26d6bfc635e", "filename": "src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7518f688613a58bc2a070f2eb2e66364dfea7fe5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7518f688613a58bc2a070f2eb2e66364dfea7fe5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7518f688613a58bc2a070f2eb2e66364dfea7fe5", "patch": "@@ -111,6 +111,19 @@ pub enum ReturnIndent {\n \n impl_enum_decodable!(ReturnIndent, WithArgs, WithWhereClause);\n \n+// How to stle a struct literal.\n+#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n+pub enum StructLitStyle {\n+    // First line on the same line as the opening brace, all lines aligned with\n+    // the first line.\n+    VisualIndent,\n+    // First line is on a new line and all lines align with block indent.\n+    BlockIndent,\n+    // FIXME Maybe we should also have an option to align types.\n+}\n+\n+impl_enum_decodable!(StructLitStyle, VisualIndent, BlockIndent);\n+\n enum ErrorKind {\n     // Line has exceeded character limit\n     LineOverflow,"}, {"sha": "ddab2479f2ce9cba4f12e567fdde49a092fb3b7e", "filename": "tests/config/reorder_imports.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7518f688613a58bc2a070f2eb2e66364dfea7fe5/tests%2Fconfig%2Freorder_imports.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7518f688613a58bc2a070f2eb2e66364dfea7fe5/tests%2Fconfig%2Freorder_imports.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Freorder_imports.toml?ref=7518f688613a58bc2a070f2eb2e66364dfea7fe5", "patch": "@@ -8,6 +8,7 @@ fn_return_indent = \"WithArgs\"\n fn_args_paren_newline = true\n struct_trailing_comma = \"Vertical\"\n struct_lit_trailing_comma = \"Vertical\"\n+struct_lit_style = \"BlockIndent\"\n enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\""}, {"sha": "303433dbcc1e9416eba17115092f569092e21967", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7518f688613a58bc2a070f2eb2e66364dfea7fe5/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7518f688613a58bc2a070f2eb2e66364dfea7fe5/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=7518f688613a58bc2a070f2eb2e66364dfea7fe5", "patch": "@@ -8,6 +8,7 @@ fn_return_indent = \"WithArgs\"\n fn_args_paren_newline = true\n struct_trailing_comma = \"Vertical\"\n struct_lit_trailing_comma = \"Vertical\"\n+struct_lit_style = \"BlockIndent\"\n enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\""}, {"sha": "cf601303e9b5501114bea0a69ce7bc9ad0803d95", "filename": "tests/config/visual_struct_lits.toml", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7518f688613a58bc2a070f2eb2e66364dfea7fe5/tests%2Fconfig%2Fvisual_struct_lits.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7518f688613a58bc2a070f2eb2e66364dfea7fe5/tests%2Fconfig%2Fvisual_struct_lits.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fvisual_struct_lits.toml?ref=7518f688613a58bc2a070f2eb2e66364dfea7fe5", "patch": "@@ -0,0 +1,15 @@\n+max_width = 100\n+ideal_width = 80\n+leeway = 5\n+tab_spaces = 4\n+newline_style = \"Unix\"\n+fn_brace_style = \"SameLineWhere\"\n+fn_return_indent = \"WithArgs\"\n+fn_args_paren_newline = true\n+struct_trailing_comma = \"Vertical\"\n+struct_lit_style = \"VisualIndent\"\n+struct_lit_trailing_comma = \"Vertical\"\n+enum_trailing_comma = true\n+report_todo = \"Always\"\n+report_fixme = \"Never\"\n+reorder_imports = false"}, {"sha": "b629ffa1263ede7390138f707ff7b7f53202376e", "filename": "tests/source/struct_lits_visual.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7518f688613a58bc2a070f2eb2e66364dfea7fe5/tests%2Fsource%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7518f688613a58bc2a070f2eb2e66364dfea7fe5/tests%2Fsource%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits_visual.rs?ref=7518f688613a58bc2a070f2eb2e66364dfea7fe5", "patch": "@@ -0,0 +1,39 @@\n+// rustfmt-config: visual_struct_lits.toml\n+\n+// Struct literal expressions.\n+\n+fn main() {\n+    let x = Bar;\n+\n+    // Comment\n+    let y = Foo {a: x };\n+\n+    Foo { a: foo() /* comment*/, /* comment*/ b: bar(), ..something };\n+\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(), b: bar(), };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        // Comment\n+        a: foo(), // Comment\n+        // Comment\n+        b: bar(), // Comment\n+    };\n+\n+    Foo { a:Bar,\n+          b:foo() };\n+\n+    A { \n+    // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante hendrerit. Donec et mollis dolor.\n+    first: item(),\n+        // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n+        // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n+        second: Item\n+    };\n+\n+    Diagram { /*                 o        This graph demonstrates how                  \n+               *                / \\       significant whitespace is           \n+               *               o   o      preserved.  \n+               *              /|\\   \\\n+               *             o o o   o */\n+              graph: G, }\n+}"}, {"sha": "befeede14df1224075cbc1a1af5e4a664027a3ec", "filename": "tests/target/struct_lits.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/7518f688613a58bc2a070f2eb2e66364dfea7fe5/tests%2Ftarget%2Fstruct_lits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7518f688613a58bc2a070f2eb2e66364dfea7fe5/tests%2Ftarget%2Fstruct_lits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits.rs?ref=7518f688613a58bc2a070f2eb2e66364dfea7fe5", "patch": "@@ -6,30 +6,35 @@ fn main() {\n     // Comment\n     let y = Foo { a: x };\n \n-    Foo { a: foo(), // comment\n-          // comment\n-          b: bar(),\n-          ..something };\n-\n-    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(),\n-                                                                               b: bar(), };\n+    Foo {\n+        a: foo(), // comment\n+        // comment\n+        b: bar(),\n+        ..something\n+    };\n+\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo {\n+        a: foo(),\n+        b: bar(),\n+    };\n \n     Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { // Comment\n-                                                                                        a: foo(), /* C\n-                                                                                                   * o\n-                                                                                                   * m\n-                                                                                                   * m\n-                                                                                                   * e\n-                                                                                                   * n\n-                                                                                                   * t */\n-                                                                                        // Comment\n-                                                                                        b: bar(), /* C\n-                                                                                                   * o\n-                                                                                                   * m\n-                                                                                                   * m\n-                                                                                                   * e\n-                                                                                                   * n\n-                                                                                                   * t */ };\n+        a: foo(), /* C\n+                   * o\n+                   * m\n+                   * m\n+                   * e\n+                   * n\n+                   * t */\n+        // Comment\n+        b: bar(), /* C\n+                   * o\n+                   * m\n+                   * m\n+                   * e\n+                   * n\n+                   * t */\n+    };\n \n     Foo { a: Bar, b: foo() };\n \n@@ -39,12 +44,14 @@ fn main() {\n         first: item(),\n         // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n         // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n-        second: Item, };\n+        second: Item,\n+    };\n \n     Diagram { //                 o        This graph demonstrates how\n               //                / \\       significant whitespace is\n               //               o   o      preserved.\n               //              /|\\   \\\n               //             o o o   o\n-              graph: G, }\n+        graph: G,\n+    }\n }"}, {"sha": "651cd2b883b10cf1d2cd44c9a5d35b0e7ded2d46", "filename": "tests/target/struct_lits_visual.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7518f688613a58bc2a070f2eb2e66364dfea7fe5/tests%2Ftarget%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7518f688613a58bc2a070f2eb2e66364dfea7fe5/tests%2Ftarget%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits_visual.rs?ref=7518f688613a58bc2a070f2eb2e66364dfea7fe5", "patch": "@@ -0,0 +1,52 @@\n+// rustfmt-config: visual_struct_lits.toml\n+\n+// Struct literal expressions.\n+\n+fn main() {\n+    let x = Bar;\n+\n+    // Comment\n+    let y = Foo { a: x };\n+\n+    Foo { a: foo(), // comment\n+          // comment\n+          b: bar(),\n+          ..something };\n+\n+    Fooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { a: foo(),\n+                                                                               b: bar(), };\n+\n+    Foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo { // Comment\n+                                                                                        a: foo(), /* C\n+                                                                                                   * o\n+                                                                                                   * m\n+                                                                                                   * m\n+                                                                                                   * e\n+                                                                                                   * n\n+                                                                                                   * t */\n+                                                                                        // Comment\n+                                                                                        b: bar(), /* C\n+                                                                                                   * o\n+                                                                                                   * m\n+                                                                                                   * m\n+                                                                                                   * e\n+                                                                                                   * n\n+                                                                                                   * t */ };\n+\n+    Foo { a: Bar, b: foo() };\n+\n+    A { // Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec a diam lectus. Sed sit\n+        // amet ipsum mauris. Maecenas congue ligula ac quam viverra nec consectetur ante\n+        // hendrerit. Donec et mollis dolor.\n+        first: item(),\n+        // Praesent et diam eget libero egestas mattis sit amet vitae augue.\n+        // Nam tincidunt congue enim, ut porta lorem lacinia consectetur.\n+        second: Item, };\n+\n+    Diagram { //                 o        This graph demonstrates how\n+              //                / \\       significant whitespace is\n+              //               o   o      preserved.\n+              //              /|\\   \\\n+              //             o o o   o\n+              graph: G, }\n+}"}]}