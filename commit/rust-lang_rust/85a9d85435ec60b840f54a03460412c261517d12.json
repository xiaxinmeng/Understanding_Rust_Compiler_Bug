{"sha": "85a9d85435ec60b840f54a03460412c261517d12", "node_id": "C_kwDOAAsO6NoAKDg1YTlkODU0MzVlYzYwYjg0MGY1NGEwMzQ2MDQxMmMyNjE1MTdkMTI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-21T05:49:12Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-21T06:06:47Z"}, "message": "Don't call typeck if we have no typeck results\n\nThis has a 10000000% chance of us causing a cycle if we're not careful", "tree": {"sha": "cdc77dab792355b52cb3c26ff204da5026111490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdc77dab792355b52cb3c26ff204da5026111490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85a9d85435ec60b840f54a03460412c261517d12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85a9d85435ec60b840f54a03460412c261517d12", "html_url": "https://github.com/rust-lang/rust/commit/85a9d85435ec60b840f54a03460412c261517d12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85a9d85435ec60b840f54a03460412c261517d12/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6ef53477ee68ace77bead81439971a71669b22f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ef53477ee68ace77bead81439971a71669b22f", "html_url": "https://github.com/rust-lang/rust/commit/c6ef53477ee68ace77bead81439971a71669b22f"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "eb5e1d5ad5c1da2ca800d3334ebbdebe215c44a8", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/85a9d85435ec60b840f54a03460412c261517d12/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a9d85435ec60b840f54a03460412c261517d12/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=85a9d85435ec60b840f54a03460412c261517d12", "patch": "@@ -335,7 +335,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     );\n-    fn function_argument_obligation(\n+    fn note_function_argument_obligation(\n         &self,\n         arg_hir_id: HirId,\n         err: &mut Diagnostic,\n@@ -2909,7 +2909,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 ref parent_code,\n                 ..\n             } => {\n-                self.function_argument_obligation(\n+                self.note_function_argument_obligation(\n                     arg_hir_id,\n                     err,\n                     parent_code,\n@@ -3141,7 +3141,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             );\n         }\n     }\n-    fn function_argument_obligation(\n+    fn note_function_argument_obligation(\n         &self,\n         arg_hir_id: HirId,\n         err: &mut Diagnostic,\n@@ -3152,12 +3152,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     ) {\n         let tcx = self.tcx;\n         let hir = tcx.hir();\n-        if let Some(Node::Expr(expr)) = hir.find(arg_hir_id) {\n-            let parent_id = hir.get_parent_item(arg_hir_id);\n-            let typeck_results: &TypeckResults<'tcx> = match &self.typeck_results {\n-                Some(t) if t.hir_owner == parent_id => t,\n-                _ => self.tcx.typeck(parent_id.def_id),\n-            };\n+        if let Some(Node::Expr(expr)) = hir.find(arg_hir_id)\n+            && let Some(typeck_results) = &self.typeck_results\n+        {\n             if let hir::Expr { kind: hir::ExprKind::Block(..), .. } = expr {\n                 let expr = expr.peel_blocks();\n                 let ty = typeck_results.expr_ty_adjusted_opt(expr).unwrap_or(tcx.ty_error());\n@@ -3219,9 +3216,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // If the expression we're calling on is a binding, we want to point at the\n                 // `let` when talking about the type. Otherwise we'll point at every part\n                 // of the method chain with the type.\n-                self.point_at_chain(binding_expr, typeck_results, type_diffs, param_env, err);\n+                self.point_at_chain(binding_expr, &typeck_results, type_diffs, param_env, err);\n             } else {\n-                self.point_at_chain(expr, typeck_results, type_diffs, param_env, err);\n+                self.point_at_chain(expr, &typeck_results, type_diffs, param_env, err);\n             }\n         }\n         let call_node = hir.find(call_hir_id);"}]}