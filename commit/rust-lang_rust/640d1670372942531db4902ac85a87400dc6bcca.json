{"sha": "640d1670372942531db4902ac85a87400dc6bcca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MGQxNjcwMzcyOTQyNTMxZGI0OTAyYWM4NWE4NzQwMGRjNmJjY2E=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-14T20:28:07Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-14T20:28:07Z"}, "message": "Switch module-internal calls (i.e. all user code) to fastcall. Still returning via explicit outptr. Activate glue works by accident.", "tree": {"sha": "8da689226522c14580f7bcab6818d6de287a9bef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8da689226522c14580f7bcab6818d6de287a9bef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/640d1670372942531db4902ac85a87400dc6bcca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/640d1670372942531db4902ac85a87400dc6bcca", "html_url": "https://github.com/rust-lang/rust/commit/640d1670372942531db4902ac85a87400dc6bcca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/640d1670372942531db4902ac85a87400dc6bcca/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7af86155d9b82cd65758c1fd6954aaef053b11a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7af86155d9b82cd65758c1fd6954aaef053b11a", "html_url": "https://github.com/rust-lang/rust/commit/a7af86155d9b82cd65758c1fd6954aaef053b11a"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "1556ce93a9ecb6f4a0a2a81a924c8fe8c752fb82", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/640d1670372942531db4902ac85a87400dc6bcca/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640d1670372942531db4902ac85a87400dc6bcca/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=640d1670372942531db4902ac85a87400dc6bcca", "patch": "@@ -341,15 +341,25 @@ fn C_tydesc(TypeRef t) -> ValueRef {\n                      C_null(T_opaque())));      // is_stateful\n }\n \n-fn decl_cdecl_fn(ModuleRef llmod, str name,\n-                 vec[TypeRef] inputs, TypeRef output) -> ValueRef {\n+fn decl_fn(ModuleRef llmod, str name,\n+           uint cc, vec[TypeRef] inputs, TypeRef output) -> ValueRef {\n     let TypeRef llty = T_fn(inputs, output);\n     let ValueRef llfn =\n         llvm.LLVMAddFunction(llmod, _str.buf(name), llty);\n-    llvm.LLVMSetFunctionCallConv(llfn, lib.llvm.LLVMCCallConv);\n+    llvm.LLVMSetFunctionCallConv(llfn, cc);\n     ret llfn;\n }\n \n+fn decl_cdecl_fn(ModuleRef llmod, str name,\n+                 vec[TypeRef] inputs, TypeRef output) -> ValueRef {\n+    ret decl_fn(llmod, name, lib.llvm.LLVMCCallConv, inputs, output);\n+}\n+\n+fn decl_fastcall_fn(ModuleRef llmod, str name,\n+                    vec[TypeRef] inputs, TypeRef output) -> ValueRef {\n+    ret decl_fn(llmod, name, lib.llvm.LLVMFastCallConv, inputs, output);\n+}\n+\n fn decl_glue(ModuleRef llmod, str s) -> ValueRef {\n     ret decl_cdecl_fn(llmod, s, vec(T_taskptr()), T_void());\n }\n@@ -947,6 +957,8 @@ impure fn trans_expr(@block_ctxt cx, &ast.expr e) -> result {\n                               cx.fcx.lltaskptr);\n             llargs += args_res._1;\n             auto call_val = args_res._0.build.Call(f_res._0.val, llargs);\n+            llvm.LLVMSetInstructionCallConv(call_val,\n+                                            lib.llvm.LLVMFastCallConv);\n             ret res(args_res._0,\n                     args_res._0.build.Load(outptr));\n         }\n@@ -1246,7 +1258,7 @@ fn collect_item(&@trans_ctxt cx, @ast.item i) -> @trans_ctxt {\n             args += T_explicit_args;\n \n             let str s = cx.names.next(\"_rust_fn\") + \".\" + name;\n-            let ValueRef llfn = decl_cdecl_fn(cx.llmod, s, args, T_void());\n+            let ValueRef llfn = decl_fastcall_fn(cx.llmod, s, args, T_void());\n             cx.fn_ids.insert(fid, llfn);\n         }\n "}]}