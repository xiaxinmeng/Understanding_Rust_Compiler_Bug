{"sha": "431e8d9d2f4ae87b898624d7874fe19cc8ac0dc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMWU4ZDlkMmY0YWU4N2I4OTg2MjRkNzg3NGZlMTljYzhhYzBkYzY=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-27T15:56:38Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-27T15:56:38Z"}, "message": "Remove a few unchecked subtractions, uses of ty_to_string", "tree": {"sha": "be40d76da60ed41bbb60b9b2846544dcf30278cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be40d76da60ed41bbb60b9b2846544dcf30278cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/431e8d9d2f4ae87b898624d7874fe19cc8ac0dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/431e8d9d2f4ae87b898624d7874fe19cc8ac0dc6", "html_url": "https://github.com/rust-lang/rust/commit/431e8d9d2f4ae87b898624d7874fe19cc8ac0dc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/431e8d9d2f4ae87b898624d7874fe19cc8ac0dc6/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f485aabd6a8837203796b8164492919722b241a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f485aabd6a8837203796b8164492919722b241a", "html_url": "https://github.com/rust-lang/rust/commit/0f485aabd6a8837203796b8164492919722b241a"}], "stats": {"total": 73, "additions": 43, "deletions": 30}, "files": [{"sha": "8c3545f2e123cbf16f8ac2d7aeb2b392a759824e", "filename": "src/imports.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/431e8d9d2f4ae87b898624d7874fe19cc8ac0dc6/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431e8d9d2f4ae87b898624d7874fe19cc8ac0dc6/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=431e8d9d2f4ae87b898624d7874fe19cc8ac0dc6", "patch": "@@ -36,7 +36,8 @@ impl Rewrite for ast::ViewPath {\n             ast::ViewPath_::ViewPathSimple(ident, ref path) => {\n                 let ident_str = ident.to_string();\n                 // 4 = \" as \".len()\n-                let path_str = try_opt!(path.rewrite(context, width - ident_str.len() - 4, offset));\n+                let budget = try_opt!(width.checked_sub(ident_str.len() + 4));\n+                let path_str = try_opt!(path.rewrite(context, budget, offset));\n \n                 Some(if path.segments.last().unwrap().identifier == ident {\n                     path_str\n@@ -103,7 +104,8 @@ pub fn rewrite_use_list(width: usize,\n                         context: &RewriteContext)\n                         -> Option<String> {\n     // 1 = {}\n-    let path_str = try_opt!(path.rewrite(context, width - 1, offset));\n+    let budget = try_opt!(width.checked_sub(1));\n+    let path_str = try_opt!(path.rewrite(context, budget, offset));\n \n     match path_list.len() {\n         0 => unreachable!(),"}, {"sha": "28980174314c117f2c8a78d36b163b194b54faa6", "filename": "src/types.rs", "status": "modified", "additions": 39, "deletions": 28, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/431e8d9d2f4ae87b898624d7874fe19cc8ac0dc6/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/431e8d9d2f4ae87b898624d7874fe19cc8ac0dc6/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=431e8d9d2f4ae87b898624d7874fe19cc8ac0dc6", "patch": "@@ -15,7 +15,7 @@ use syntax::codemap::{self, Span, BytePos, CodeMap};\n use Indent;\n use lists::{itemize_list, write_list, ListFormatting};\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{extra_offset, span_after, format_mutability};\n+use utils::{extra_offset, span_after, format_mutability, wrap_str};\n \n impl Rewrite for ast::Path {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n@@ -49,7 +49,7 @@ pub fn rewrite_path(context: &RewriteContext,\n \n             let extra_offset = extra_offset(&result, offset);\n             // 3 = \">::\".len()\n-            let budget = try_opt!(width.checked_sub(extra_offset)) - 3;\n+            let budget = try_opt!(width.checked_sub(extra_offset + 3));\n \n             result = try_opt!(rewrite_path_segments(result,\n                                                     path.segments.iter().take(skip_count),\n@@ -242,25 +242,28 @@ fn rewrite_segment(segment: &ast::PathSegment,\n         }\n         ast::PathParameters::ParenthesizedParameters(ref data) => {\n             let output = match data.output {\n-                Some(ref ty) => format!(\" -> {}\", pprust::ty_to_string(&*ty)),\n+                Some(ref ty) => {\n+                    let type_str = try_opt!(ty.rewrite(context, width, offset));\n+                    format!(\" -> {}\", type_str)\n+                }\n                 None => String::new(),\n             };\n \n+            // 2 for ()\n+            let budget = try_opt!(width.checked_sub(output.len() + 2));\n+            // 1 for (\n+            let offset = offset + 1;\n             let list_lo = span_after(data.span, \"(\", context.codemap);\n             let items = itemize_list(context.codemap,\n                                      data.inputs.iter(),\n                                      \")\",\n                                      |ty| ty.span.lo,\n                                      |ty| ty.span.hi,\n-                                     |ty| pprust::ty_to_string(ty),\n+                                     |ty| ty.rewrite(context, budget, offset).unwrap(),\n                                      list_lo,\n                                      span_hi);\n \n-            // 2 for ()\n-            let budget = try_opt!(width.checked_sub(output.len() + 2));\n-\n-            // 1 for (\n-            let fmt = ListFormatting::for_fn(budget, offset + 1, context.config);\n+            let fmt = ListFormatting::for_fn(budget, offset, context.config);\n             let list_str = try_opt!(write_list(&items.collect::<Vec<_>>(), &fmt));\n \n             format!(\"({}){}\", list_str, output)\n@@ -280,6 +283,8 @@ impl Rewrite for ast::WherePredicate {\n                                                                            ref bounded_ty,\n                                                                            ref bounds,\n                                                                            .. }) => {\n+                let type_str = try_opt!(bounded_ty.rewrite(context, width, offset));\n+\n                 if !bound_lifetimes.is_empty() {\n                     let lifetime_str = bound_lifetimes.iter()\n                                                       .map(|lt| {\n@@ -288,13 +293,13 @@ impl Rewrite for ast::WherePredicate {\n                                                       })\n                                                       .collect::<Vec<_>>()\n                                                       .join(\", \");\n-                    let type_str = pprust::ty_to_string(bounded_ty);\n                     // 8 = \"for<> : \".len()\n                     let used_width = lifetime_str.len() + type_str.len() + 8;\n+                    let budget = try_opt!(width.checked_sub(used_width));\n                     let bounds_str = bounds.iter()\n                                            .map(|ty_bound| {\n                                                ty_bound.rewrite(context,\n-                                                                width - used_width,\n+                                                                budget,\n                                                                 offset + used_width)\n                                                        .unwrap()\n                                            })\n@@ -303,13 +308,13 @@ impl Rewrite for ast::WherePredicate {\n \n                     format!(\"for<{}> {}: {}\", lifetime_str, type_str, bounds_str)\n                 } else {\n-                    let type_str = pprust::ty_to_string(bounded_ty);\n                     // 2 = \": \".len()\n                     let used_width = type_str.len() + 2;\n+                    let budget = try_opt!(width.checked_sub(used_width));\n                     let bounds_str = bounds.iter()\n                                            .map(|ty_bound| {\n                                                ty_bound.rewrite(context,\n-                                                                width - used_width,\n+                                                                budget,\n                                                                 offset + used_width)\n                                                        .unwrap()\n                                            })\n@@ -330,12 +335,11 @@ impl Rewrite for ast::WherePredicate {\n                               .join(\" + \"))\n             }\n             ast::WherePredicate::EqPredicate(ast::WhereEqPredicate { ref path, ref ty, .. }) => {\n-                let ty_str = pprust::ty_to_string(ty);\n+                let ty_str = try_opt!(ty.rewrite(context, width, offset));\n                 // 3 = \" = \".len()\n                 let used_width = 3 + ty_str.len();\n-                let path_str = try_opt!(path.rewrite(context,\n-                                                     width - used_width,\n-                                                     offset + used_width));\n+                let budget = try_opt!(width.checked_sub(used_width));\n+                let path_str = try_opt!(path.rewrite(context, budget, offset + used_width));\n                 format!(\"{} = {}\", path_str, ty_str)\n             }\n         })\n@@ -365,8 +369,9 @@ impl Rewrite for ast::TyParamBound {\n                 tref.rewrite(context, width, offset)\n             }\n             ast::TyParamBound::TraitTyParamBound(ref tref, ast::TraitBoundModifier::Maybe) => {\n+                let budget = try_opt!(width.checked_sub(1));\n                 Some(format!(\"?{}\",\n-                             try_opt!(tref.rewrite(context, width - 1, offset + 1))))\n+                             try_opt!(tref.rewrite(context, budget, offset + 1))))\n             }\n             ast::TyParamBound::RegionTyParamBound(ref l) => {\n                 Some(pprust::lifetime_to_string(l))\n@@ -402,7 +407,9 @@ impl Rewrite for ast::TyParam {\n         }\n         if let Some(ref def) = self.default {\n             result.push_str(\" = \");\n-            result.push_str(&pprust::ty_to_string(&def));\n+            let budget = try_opt!(width.checked_sub(result.len()));\n+            let rewrite = try_opt!(def.rewrite(context, budget, offset + result.len()));\n+            result.push_str(&rewrite);\n         }\n \n         Some(result)\n@@ -451,30 +458,34 @@ impl Rewrite for ast::Ty {\n             ast::TyRptr(ref lifetime, ref mt) => {\n                 let mut_str = format_mutability(mt.mutbl);\n                 let mut_len = mut_str.len();\n-                Some(match lifetime {\n-                    &Some(ref lifetime) => {\n+                Some(match *lifetime {\n+                    Some(ref lifetime) => {\n                         let lt_str = pprust::lifetime_to_string(lifetime);\n                         let lt_len = lt_str.len();\n+                        let budget = try_opt!(width.checked_sub(2 + mut_len + lt_len));\n                         format!(\"&{} {}{}\",\n                                 lt_str,\n                                 mut_str,\n                                 try_opt!(mt.ty.rewrite(context,\n-                                                       width - (2 + mut_len + lt_len),\n+                                                       budget,\n                                                        offset + 2 + mut_len + lt_len)))\n                     }\n-                    &None => {\n+                    None => {\n+                        let budget = try_opt!(width.checked_sub(1 + mut_len));\n                         format!(\"&{}{}\",\n                                 mut_str,\n-                                try_opt!(mt.ty.rewrite(context,\n-                                                       width - (1 + mut_len),\n-                                                       offset + 1 + mut_len)))\n+                                try_opt!(mt.ty.rewrite(context, budget, offset + 1 + mut_len)))\n                     }\n                 })\n             }\n             ast::TyParen(ref ty) => {\n-                ty.rewrite(context, width - 2, offset + 1).map(|ty_str| format!(\"({})\", ty_str))\n+                let budget = try_opt!(width.checked_sub(2));\n+                ty.rewrite(context, budget, offset + 1).map(|ty_str| format!(\"({})\", ty_str))\n             }\n-            _ => Some(pprust::ty_to_string(self)),\n+            _ => wrap_str(pprust::ty_to_string(self),\n+                          context.config.max_width,\n+                          width,\n+                          offset),\n         }\n     }\n }"}]}