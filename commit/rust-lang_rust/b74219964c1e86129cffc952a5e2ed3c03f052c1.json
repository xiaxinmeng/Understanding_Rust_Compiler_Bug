{"sha": "b74219964c1e86129cffc952a5e2ed3c03f052c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NDIxOTk2NGMxZTg2MTI5Y2ZmYzk1MmE1ZTJlZDNjMDNmMDUyYzE=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-09-17T19:12:39Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-10-01T19:10:09Z"}, "message": "improve the tyencode abbrev format\n\n3% win on libcore\n\n528828 liballoc-bb943c5a.rlib\n1425126 liballoc_jemalloc-bb943c5a.rlib\n10090 liballoc_system-bb943c5a.rlib\n144904 libarena-bb943c5a.rlib\n3773896 libcollections-bb943c5a.rlib\n17075242 libcore-bb943c5a.rlib\n195770 libflate-bb943c5a.rlib\n234702 libfmt_macros-bb943c5a.rlib\n536342 libgetopts-bb943c5a.rlib\n212028 libgraphviz-bb943c5a.rlib\n397068 liblibc-bb943c5a.rlib\n185038 liblog-bb943c5a.rlib\n680782 librand-bb943c5a.rlib\n577574 librbml-bb943c5a.rlib\n1381992 librustc_back-bb943c5a.rlib\n37554736 librustc-bb943c5a.rlib\n12826 librustc_bitflags-bb943c5a.rlib\n2257392 librustc_borrowck-bb943c5a.rlib\n533858 librustc_data_structures-bb943c5a.rlib\n9338878 librustc_driver-bb943c5a.rlib\n8960016 librustc_front-bb943c5a.rlib\n1594212 librustc_lint-bb943c5a.rlib\n79159342 librustc_llvm-bb943c5a.rlib\n4590656 librustc_mir-bb943c5a.rlib\n3529292 librustc_platform_intrinsics-bb943c5a.rlib\n590688 librustc_privacy-bb943c5a.rlib\n3084134 librustc_resolve-bb943c5a.rlib\n14032890 librustc_trans-bb943c5a.rlib\n11833852 librustc_typeck-bb943c5a.rlib\n1641496 librustc_unicode-bb943c5a.rlib\n15611582 librustdoc-bb943c5a.rlib\n2693764 libserialize-bb943c5a.rlib\n8266920 libstd-bb943c5a.rlib\n29573790 libsyntax-bb943c5a.rlib\n895484 libterm-bb943c5a.rlib", "tree": {"sha": "39cca4173364ad87986f8f11dd9c394443a2400c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39cca4173364ad87986f8f11dd9c394443a2400c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b74219964c1e86129cffc952a5e2ed3c03f052c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b74219964c1e86129cffc952a5e2ed3c03f052c1", "html_url": "https://github.com/rust-lang/rust/commit/b74219964c1e86129cffc952a5e2ed3c03f052c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b74219964c1e86129cffc952a5e2ed3c03f052c1/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce02aa494283fa238aa9ce435e8e82a52088fd20", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce02aa494283fa238aa9ce435e8e82a52088fd20", "html_url": "https://github.com/rust-lang/rust/commit/ce02aa494283fa238aa9ce435e8e82a52088fd20"}], "stats": {"total": 64, "additions": 25, "deletions": 39}, "files": [{"sha": "4f7bbe9e0272563ea2d0b17aaa0bc4f9a6b5f47b", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b74219964c1e86129cffc952a5e2ed3c03f052c1/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74219964c1e86129cffc952a5e2ed3c03f052c1/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=b74219964c1e86129cffc952a5e2ed3c03f052c1", "patch": "@@ -914,7 +914,7 @@ pub mod writer {\n         }\n     }\n \n-    fn write_vuint<W: Write>(w: &mut W, n: usize) -> EncodeResult {\n+    pub fn write_vuint<W: Write>(w: &mut W, n: usize) -> EncodeResult {\n         if n < 0x7f { return write_sized_vuint(w, n, 1); }\n         if n < 0x4000 { return write_sized_vuint(w, n, 2); }\n         if n < 0x200000 { return write_sized_vuint(w, n, 3); }"}, {"sha": "822887a9c12a2e03c0cef22cf4966b75a7f5203d", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b74219964c1e86129cffc952a5e2ed3c03f052c1/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74219964c1e86129cffc952a5e2ed3c03f052c1/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=b74219964c1e86129cffc952a5e2ed3c03f052c1", "patch": "@@ -2150,13 +2150,13 @@ fn encode_metadata_inner(wr: &mut Cursor<Vec<u8>>,\n }\n \n // Get the encoded string for a type\n-pub fn encoded_ty<'tcx>(tcx: &ty::ctxt<'tcx>, t: Ty<'tcx>) -> String {\n+pub fn encoded_ty<'tcx>(tcx: &ty::ctxt<'tcx>, t: Ty<'tcx>) -> Vec<u8> {\n     let mut wr = Cursor::new(Vec::new());\n     tyencode::enc_ty(&mut Encoder::new(&mut wr), &tyencode::ctxt {\n         diag: tcx.sess.diagnostic(),\n         ds: def_to_string,\n         tcx: tcx,\n         abbrevs: &RefCell::new(FnvHashMap())\n     }, t);\n-    String::from_utf8(wr.into_inner()).unwrap()\n+    wr.into_inner()\n }"}, {"sha": "8e5b09b81c7acd1d7bf1889bf46d8b49f07a8685", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b74219964c1e86129cffc952a5e2ed3c03f052c1/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74219964c1e86129cffc952a5e2ed3c03f052c1/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=b74219964c1e86129cffc952a5e2ed3c03f052c1", "patch": "@@ -125,6 +125,12 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         return &self.data[start_pos..end_pos];\n     }\n \n+    fn parse_vuint(&mut self) -> usize {\n+        let res = rbml::reader::vuint_at(self.data, self.pos).unwrap();\n+        self.pos = res.next;\n+        res.val\n+    }\n+\n     fn parse_name(&mut self, last: char) -> ast::Name {\n         fn is_last(b: char, c: char) -> bool { return c == b; }\n         let bytes = self.scan(|a| is_last(last, a));\n@@ -405,11 +411,8 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n                 // we return it (modulo closure types, see below). But if not, then we\n                 // jump to offset 123 and read the type from there.\n \n-                let pos = self.parse_hex();\n-                assert_eq!(self.next(), ':');\n-                let len = self.parse_hex();\n-                assert_eq!(self.next(), '#');\n-                let key = ty::CReaderCacheKey {cnum: self.krate, pos: pos, len: len };\n+                let pos = self.parse_vuint();\n+                let key = ty::CReaderCacheKey { cnum: self.krate, pos: pos };\n                 match tcx.rcache.borrow().get(&key).cloned() {\n                     Some(tt) => {\n                         // If there is a closure buried in the type some where, then we\n@@ -508,19 +511,6 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         subst::ParamSpace::from_uint(self.parse_uint())\n     }\n \n-    fn parse_hex(&mut self) -> usize {\n-        let mut n = 0;\n-        loop {\n-            let cur = self.peek();\n-            if (cur < '0' || cur > '9') && (cur < 'a' || cur > 'f') { return n; }\n-            self.pos = self.pos + 1;\n-            n *= 16;\n-            if '0' <= cur && cur <= '9' {\n-                n += (cur as usize) - ('0' as usize);\n-            } else { n += 10 + (cur as usize) - ('a' as usize); }\n-        };\n-    }\n-\n     fn parse_abi_set(&mut self) -> abi::Abi {\n         assert_eq!(self.next(), '[');\n         let bytes = self.scan(|c| c == ']');"}, {"sha": "4a9257b60c48a150c636e36ca1e2118f03c06254", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b74219964c1e86129cffc952a5e2ed3c03f052c1/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74219964c1e86129cffc952a5e2ed3c03f052c1/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=b74219964c1e86129cffc952a5e2ed3c03f052c1", "patch": "@@ -14,7 +14,7 @@\n #![allow(non_camel_case_types)]\n \n use std::cell::RefCell;\n-use std::str;\n+use std::io::Cursor;\n use std::io::prelude::*;\n \n use middle::def_id::DefId;\n@@ -31,7 +31,7 @@ use syntax::abi::Abi;\n use syntax::ast;\n use syntax::diagnostic::SpanHandler;\n \n-use rbml::writer::Encoder;\n+use rbml::writer::{self, Encoder};\n \n macro_rules! mywrite { ($w:expr, $($arg:tt)*) => ({ write!($w.writer, $($arg)*); }) }\n \n@@ -48,14 +48,14 @@ pub struct ctxt<'a, 'tcx: 'a> {\n // Extra parameters are for converting to/from def_ids in the string rep.\n // Whatever format you choose should not contain pipe characters.\n pub struct ty_abbrev {\n-    s: String\n+    s: Vec<u8>\n }\n \n pub type abbrev_map<'tcx> = RefCell<FnvHashMap<Ty<'tcx>, ty_abbrev>>;\n \n pub fn enc_ty<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx>) {\n     match cx.abbrevs.borrow_mut().get(&t) {\n-        Some(a) => { w.writer.write_all(a.s.as_bytes()); return; }\n+        Some(a) => { w.writer.write_all(&a.s); return; }\n         None => {}\n     }\n \n@@ -167,23 +167,20 @@ pub fn enc_ty<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>, t: Ty<'tcx>) {\n \n     let end = w.mark_stable_position();\n     let len = end - pos;\n-    fn estimate_sz(u: u64) -> u64 {\n-        let mut n = u;\n-        let mut len = 0;\n-        while n != 0 { len += 1; n = n >> 4; }\n-        return len;\n-    }\n-    let abbrev_len = 3 + estimate_sz(pos) + estimate_sz(len);\n+\n+    let buf: &mut [u8] = &mut [0; 16]; // vuint < 15 bytes\n+    let mut abbrev = Cursor::new(buf);\n+    abbrev.write_all(b\"#\");\n+    writer::write_vuint(&mut abbrev, pos as usize);\n+\n     cx.abbrevs.borrow_mut().insert(t, ty_abbrev {\n-        s: if abbrev_len < len {\n-            format!(\"#{:x}:{:x}#\", pos, len)\n+        s: if abbrev.position() < len {\n+            abbrev.get_ref()[..abbrev.position() as usize].to_owned()\n         } else {\n             // if the abbreviation is longer than the real type,\n             // don't use #-notation. However, insert it here so\n             // other won't have to `mark_stable_position`\n-            str::from_utf8(\n-                &w.writer.get_ref()[pos as usize..end as usize]\n-            ).unwrap().to_owned()\n+            w.writer.get_ref()[pos as usize..end as usize].to_owned()\n         }\n     });\n }"}, {"sha": "45522c4e457e104c353bf2a6c883491b54080725", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b74219964c1e86129cffc952a5e2ed3c03f052c1/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74219964c1e86129cffc952a5e2ed3c03f052c1/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=b74219964c1e86129cffc952a5e2ed3c03f052c1", "patch": "@@ -366,7 +366,6 @@ pub type MethodMap<'tcx> = FnvHashMap<MethodCall, MethodCallee<'tcx>>;\n pub struct CReaderCacheKey {\n     pub cnum: CrateNum,\n     pub pos: usize,\n-    pub len: usize\n }\n \n /// A restriction that certain types must be the same size. The use of"}, {"sha": "3a98df0bdfd7401e258a7fd2d6f63e9328a8feea", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b74219964c1e86129cffc952a5e2ed3c03f052c1/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74219964c1e86129cffc952a5e2ed3c03f052c1/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=b74219964c1e86129cffc952a5e2ed3c03f052c1", "patch": "@@ -214,7 +214,7 @@ fn symbol_hash<'tcx>(tcx: &ty::ctxt<'tcx>,\n         symbol_hasher.input_str(&meta[..]);\n     }\n     symbol_hasher.input_str(\"-\");\n-    symbol_hasher.input_str(&encoder::encoded_ty(tcx, t));\n+    symbol_hasher.input(&encoder::encoded_ty(tcx, t));\n     // Prefix with 'h' so that it never blends into adjacent digits\n     let mut hash = String::from(\"h\");\n     hash.push_str(&truncated_hash_result(symbol_hasher));"}]}