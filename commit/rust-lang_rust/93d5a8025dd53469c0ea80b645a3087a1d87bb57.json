{"sha": "93d5a8025dd53469c0ea80b645a3087a1d87bb57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZDVhODAyNWRkNTM0NjljMGVhODBiNjQ1YTMwODdhMWQ4N2JiNTc=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-12-20T20:08:55Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-12-20T20:08:55Z"}, "message": "Clean up with_generic_param_rib, avoid double hashing", "tree": {"sha": "e92622e4e083c8df64671e90b39dd75b2a0bb0a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e92622e4e083c8df64671e90b39dd75b2a0bb0a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93d5a8025dd53469c0ea80b645a3087a1d87bb57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93d5a8025dd53469c0ea80b645a3087a1d87bb57", "html_url": "https://github.com/rust-lang/rust/commit/93d5a8025dd53469c0ea80b645a3087a1d87bb57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93d5a8025dd53469c0ea80b645a3087a1d87bb57/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd2f1cb2785f87177249e2bdb628ed782fcd8def", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2f1cb2785f87177249e2bdb628ed782fcd8def", "html_url": "https://github.com/rust-lang/rust/commit/bd2f1cb2785f87177249e2bdb628ed782fcd8def"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "02a7bc0b622edb8e0cb23ddc26bbd0bd2b543483", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/93d5a8025dd53469c0ea80b645a3087a1d87bb57/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93d5a8025dd53469c0ea80b645a3087a1d87bb57/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=93d5a8025dd53469c0ea80b645a3087a1d87bb57", "patch": "@@ -29,7 +29,7 @@ use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};\n \n use rustc_span::source_map::{respan, Spanned};\n-use std::collections::BTreeSet;\n+use std::collections::{hash_map::Entry, BTreeSet};\n use std::mem::{replace, take};\n use tracing::debug;\n \n@@ -1060,36 +1060,29 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 continue;\n             }\n \n-            let def_kind = match param.kind {\n-                GenericParamKind::Type { .. } => DefKind::TyParam,\n-                GenericParamKind::Const { .. } => DefKind::ConstParam,\n-                _ => unreachable!(),\n-            };\n-\n             let ident = param.ident.normalize_to_macros_2_0();\n             debug!(\"with_generic_param_rib: {}\", param.id);\n \n-            if seen_bindings.contains_key(&ident) {\n-                let span = seen_bindings.get(&ident).unwrap();\n-                let err = ResolutionError::NameAlreadyUsedInParameterList(ident.name, *span);\n-                self.report_error(param.ident.span, err);\n+            match seen_bindings.entry(ident) {\n+                Entry::Occupied(entry) => {\n+                    let span = *entry.get();\n+                    let err = ResolutionError::NameAlreadyUsedInParameterList(ident.name, span);\n+                    self.report_error(param.ident.span, err);\n+                }\n+                Entry::Vacant(entry) => {\n+                    entry.insert(param.ident.span);\n+                }\n             }\n-            seen_bindings.entry(ident).or_insert(param.ident.span);\n \n             // Plain insert (no renaming).\n-            let res = Res::Def(def_kind, self.r.local_def_id(param.id).to_def_id());\n-\n-            match param.kind {\n-                GenericParamKind::Type { .. } => {\n-                    function_type_rib.bindings.insert(ident, res);\n-                    self.r.record_partial_res(param.id, PartialRes::new(res));\n-                }\n-                GenericParamKind::Const { .. } => {\n-                    function_value_rib.bindings.insert(ident, res);\n-                    self.r.record_partial_res(param.id, PartialRes::new(res));\n-                }\n+            let (rib, def_kind) = match param.kind {\n+                GenericParamKind::Type { .. } => (&mut function_type_rib, DefKind::TyParam),\n+                GenericParamKind::Const { .. } => (&mut function_value_rib, DefKind::ConstParam),\n                 _ => unreachable!(),\n-            }\n+            };\n+            let res = Res::Def(def_kind, self.r.local_def_id(param.id).to_def_id());\n+            self.r.record_partial_res(param.id, PartialRes::new(res));\n+            rib.bindings.insert(ident, res);\n         }\n \n         self.ribs[ValueNS].push(function_value_rib);"}]}