{"sha": "17cc3d77d16e0cc3dfa1b3ee9749e2fca3ebb9e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3Y2MzZDc3ZDE2ZTBjYzNkZmExYjNlZTk3NDllMmZjYTNlYmI5ZTc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-23T18:32:20Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-23T23:02:36Z"}, "message": "Track IsSuggestion in ProbeContext. Don't warn stability for suggestions.", "tree": {"sha": "60c9ade8913114edfd396d261d0dc6da1b0b2a94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60c9ade8913114edfd396d261d0dc6da1b0b2a94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17cc3d77d16e0cc3dfa1b3ee9749e2fca3ebb9e7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlq1h4wACgkQ/vbIBR0O\nATw8iQ/+LepBwEAS8UDrvf/Lu3H52lRAhlM4HzOxeWW4MpJVvGwLGWS5z9+Wrs8L\n5qWj/K6c6GY1TDqfcRg9K52a7w2Vx8idgjQt/qP6z1UlikQ7stqyH4VqXWjjPuFH\ntpQZ7F/tNZ427Ym0vwChZJlCSTwnQZlSZd/dkt9WL6oIXEI/U9ZF54LvBJtBloe7\nKq2nSIEk4PLYBwZM7p2q67HXRUkemlqRu7aUu3qQLm/5JrOM97QkWfAb3EL3HcD+\nvyTzRfemocAO5ugH5TDPMoSCSKpziHyj3EJ5iZacKgjmdAlC1lrQUbFIwa4QjWRI\nE8NZQfdeLxl0YAMIW8GfogAoVFD61TCwdFt/qlLMSQFULXgDVFhimMVsKbfi2+BS\npHWDd06bPEC0OEPObO68uKP0w1mJZwO7y63VFjqYteCtuhSqi++QO6kjFYnNHf0X\n2bn8NK5nqWv111YzWle9m9lSUj8hZDBCT38cjadgFf6epBcI6j7Ri5jqXsBbl9i0\nSgqgacBBMpJJGmhnfLDwj9ZGBFvfYeUrBa21s70pf4or8KIEbeOCTqLLpzu4rOUT\nIjfHOhCvMhA2/xOOFiuJUCny1prcj/3n+fdRnAHZpGwXenVyNf+hVgt8s1GDgalp\nECCNUsjsfhGjNCn7CcRLEm9ktZCRtBeP3YD36wD/UJdElmsQyRc=\n=NrR3\n-----END PGP SIGNATURE-----", "payload": "tree 60c9ade8913114edfd396d261d0dc6da1b0b2a94\nparent db4f3f93bc3561fd0b125e45f693f16c9e1aa9bd\nauthor kennytm <kennytm@gmail.com> 1521829940 +0800\ncommitter kennytm <kennytm@gmail.com> 1521846156 +0800\n\nTrack IsSuggestion in ProbeContext. Don't warn stability for suggestions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17cc3d77d16e0cc3dfa1b3ee9749e2fca3ebb9e7", "html_url": "https://github.com/rust-lang/rust/commit/17cc3d77d16e0cc3dfa1b3ee9749e2fca3ebb9e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17cc3d77d16e0cc3dfa1b3ee9749e2fca3ebb9e7/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db4f3f93bc3561fd0b125e45f693f16c9e1aa9bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/db4f3f93bc3561fd0b125e45f693f16c9e1aa9bd", "html_url": "https://github.com/rust-lang/rust/commit/db4f3f93bc3561fd0b125e45f693f16c9e1aa9bd"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "136eb91e2abe6b8752caad09b77b71be24f77cc5", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/17cc3d77d16e0cc3dfa1b3ee9749e2fca3ebb9e7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cc3d77d16e0cc3dfa1b3ee9749e2fca3ebb9e7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=17cc3d77d16e0cc3dfa1b3ee9749e2fca3ebb9e7", "patch": "@@ -39,6 +39,7 @@ pub use self::PickKind::*;\n \n /// Boolean flag used to indicate if this search is for a suggestion\n /// or not.  If true, we can allow ambiguity and so forth.\n+#[derive(Clone, Copy)]\n pub struct IsSuggestion(pub bool);\n \n struct ProbeContext<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n@@ -66,6 +67,8 @@ struct ProbeContext<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     /// Collects near misses when trait bounds for type parameters are unsatisfied and is only used\n     /// for error reporting\n     unsatisfied_predicates: Vec<TraitRef<'tcx>>,\n+\n+    is_suggestion: IsSuggestion,\n }\n \n impl<'a, 'gcx, 'tcx> Deref for ProbeContext<'a, 'gcx, 'tcx> {\n@@ -277,8 +280,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // this creates one big transaction so that all type variables etc\n         // that we create during the probe process are removed later\n         self.probe(|_| {\n-            let mut probe_cx =\n-                ProbeContext::new(self, span, mode, method_name, return_type, Rc::new(steps));\n+            let mut probe_cx = ProbeContext::new(\n+                self, span, mode, method_name, return_type, Rc::new(steps), is_suggestion,\n+            );\n \n             probe_cx.assemble_inherent_candidates();\n             match scope {\n@@ -379,7 +383,8 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n            mode: Mode,\n            method_name: Option<ast::Name>,\n            return_type: Option<Ty<'tcx>>,\n-           steps: Rc<Vec<CandidateStep<'tcx>>>)\n+           steps: Rc<Vec<CandidateStep<'tcx>>>,\n+           is_suggestion: IsSuggestion)\n            -> ProbeContext<'a, 'gcx, 'tcx> {\n         ProbeContext {\n             fcx,\n@@ -395,6 +400,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             allow_similar_names: false,\n             private_candidate: None,\n             unsatisfied_predicates: Vec::new(),\n+            is_suggestion,\n         }\n     }\n \n@@ -952,14 +958,12 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 Some(&mut unstable_candidates),\n             );\n             if let Some(pick) = res {\n-                if !unstable_candidates.is_empty() && !self_ty.is_ty_var() {\n+                if !self.is_suggestion.0 && !unstable_candidates.is_empty() {\n                     if let Ok(p) = &pick {\n                         // Emit a lint if there are unstable candidates alongside the stable ones.\n                         //\n-                        // Note, we suppress warning if `self_ty` is TyVar (`_`), since every\n-                        // possible candidates of every type will be considered, which leads to\n-                        // bogus ambiguity like `str::rsplit` vs `[_]::rsplit`. This condition is\n-                        // seen in `src/test/compile-fail/occurs-check-2.rs`.\n+                        // We suppress warning if we're picking the method only because it is a\n+                        // suggestion.\n                         self.emit_unstable_name_collision_hint(p, &unstable_candidates);\n                     }\n                 }\n@@ -1265,7 +1269,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         let steps = self.steps.clone();\n         self.probe(|_| {\n             let mut pcx = ProbeContext::new(self.fcx, self.span, self.mode, self.method_name,\n-                                            self.return_type, steps);\n+                                            self.return_type, steps, IsSuggestion(true));\n             pcx.allow_similar_names = true;\n             pcx.assemble_inherent_candidates();\n             pcx.assemble_extension_candidates_for_traits_in_scope(ast::DUMMY_NODE_ID)?;"}]}