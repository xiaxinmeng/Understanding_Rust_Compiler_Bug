{"sha": "98edaead8249b936a29c53bffb095737643982dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZWRhZWFkODI0OWI5MzZhMjljNTNiZmZiMDk1NzM3NjQzOTgyZGM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-09-12T19:20:20Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-09-13T12:30:00Z"}, "message": "Fix style in comments", "tree": {"sha": "b634363c1f416fb8a47b3d17ecfe7245d0cdd2a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b634363c1f416fb8a47b3d17ecfe7245d0cdd2a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98edaead8249b936a29c53bffb095737643982dc", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl17i8gACgkQiMlBzaHU\nZDJ3Cg//eNJ1lF1uyRQlLc2O8tRsj3rJR5wVbBslNe3Cp28WMoctt9t8ltnO/WQT\nPvQ64Kw2SMvLpydXiRg7GzdThukEqVaA0xMu1luQ0qbeBFEczeUVsgGqTE9cdBEv\noUXKxGBM7+ACwhlqWtIoWfW6oufj7Ld/n4szZKuvifaAaLtxU6zkWsfnzYo18vvB\nFI/ZH+MYpm2mTVGFCdcCqZ6Cv6Ab3KAmRuVT/EHxCbzDQZNhmF6ExGchFfdmGBzn\nMGA7C+GLhbztdEZbnbG/CVzRvi1r65jPRJS6asCmjiMbMd+/pD6JPowJCtIl5pAn\nO2pL9MrgpHwFeo0ewwejEFRfJe0KAylwyGBlnRabzq24hcl+V8pGd0uRoynmp/sQ\nJu/L+rj3xVbEpydTNEc/6Dlgm8BkiMzM7KA7dUS7UgEnWNDV83YVUDQtYWV62hOr\npHPAiz08vW84GiPXC5lYm+hfaythLJhsGhOUuoZy5snTCCt5nEpzfqMs0sV/z2Aj\nv1ldtLc3M3aTi4XfEBN03K35t88Xarz/2a3jlZCD9C6XzPCimj3cbVzEmnINF0Dz\nSFRhJ4hyZm/GpyJbk0K1+UWg8p3r3hQ75xicUHzJ9vByH/V41eGtERLcoPfAEquS\ngiFAG3ub+uKEGPPyzDK13ZquYkzsQPePqzBTuIAJlF95ee1W5LU=\n=qA7u\n-----END PGP SIGNATURE-----", "payload": "tree b634363c1f416fb8a47b3d17ecfe7245d0cdd2a4\nparent 07a706ecf594e9feca5c57ae5db9e237a080fadf\nauthor Santiago Pastorino <spastorino@gmail.com> 1568316020 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1568377800 -0300\n\nFix style in comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98edaead8249b936a29c53bffb095737643982dc", "html_url": "https://github.com/rust-lang/rust/commit/98edaead8249b936a29c53bffb095737643982dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98edaead8249b936a29c53bffb095737643982dc/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07a706ecf594e9feca5c57ae5db9e237a080fadf", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a706ecf594e9feca5c57ae5db9e237a080fadf", "html_url": "https://github.com/rust-lang/rust/commit/07a706ecf594e9feca5c57ae5db9e237a080fadf"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "1d17bae559c59773d2e4976beec7c63a04a02609", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98edaead8249b936a29c53bffb095737643982dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98edaead8249b936a29c53bffb095737643982dc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=98edaead8249b936a29c53bffb095737643982dc", "patch": "@@ -488,16 +488,16 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                         substs: tcx.mk_substs_trait(place_ty.ty, &[]),\n                     };\n \n-                    // In order to have a Copy operand, the type T of the\n-                    // value must be Copy. Note that we prove that T: Copy,\n+                    // To have a `Copy` operand, the type `T` of the\n+                    // value must be `Copy`. Note that we prove that `T: Copy`,\n                     // rather than using the `is_copy_modulo_regions`\n                     // test. This is important because\n                     // `is_copy_modulo_regions` ignores the resulting region\n                     // obligations and assumes they pass. This can result in\n-                    // bounds from Copy impls being unsoundly ignored (e.g.,\n-                    // #29149). Note that we decide to use Copy before knowing\n+                    // bounds from `Copy` impls being unsoundly ignored (e.g.,\n+                    // #29149). Note that we decide to use `Copy` before knowing\n                     // whether the bounds fully apply: in effect, the rule is\n-                    // that if a value of some type could implement Copy, then\n+                    // that if a value of some type could implement `Copy`, then\n                     // it must.\n                     self.cx.prove_trait_ref(\n                         trait_ref,"}, {"sha": "0a268ec1340233ed425159ec283ffab59a9e955c", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98edaead8249b936a29c53bffb095737643982dc/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98edaead8249b936a29c53bffb095737643982dc/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=98edaead8249b936a29c53bffb095737643982dc", "patch": "@@ -118,28 +118,28 @@ impl<'cx, 'tcx> Iterator for Prefixes<'cx, 'tcx> {\n \n                     match self.kind {\n                         PrefixSet::Shallow => {\n-                            // shallow prefixes are found by stripping away\n+                            // Shallow prefixes are found by stripping away\n                             // fields, but stop at *any* dereference.\n                             // So we can just stop the traversal now.\n                             self.next = None;\n                             return Some(cursor);\n                         }\n                         PrefixSet::All => {\n-                            // all prefixes: just blindly enqueue the base\n-                            // of the projection\n+                            // All prefixes: just blindly enqueue the base\n+                            // of the projection.\n                             self.next = Some(PlaceRef {\n                                 base: cursor.base,\n                                 projection: proj_base,\n                             });\n                             return Some(cursor);\n                         }\n                         PrefixSet::Supporting => {\n-                            // fall through!\n+                            // Fall through!\n                         }\n                     }\n \n                     assert_eq!(self.kind, PrefixSet::Supporting);\n-                    // supporting prefixes: strip away fields and\n+                    // Supporting prefixes: strip away fields and\n                     // derefs, except we stop at the deref of a shared\n                     // reference.\n "}]}