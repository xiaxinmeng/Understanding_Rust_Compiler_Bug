{"sha": "b8c3f64cee8b07470572f274712dc9ab2634221b", "node_id": "C_kwDOAAsO6NoAKGI4YzNmNjRjZWU4YjA3NDcwNTcyZjI3NDcxMmRjOWFiMjYzNDIyMWI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-17T10:00:51Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-25T09:09:34Z"}, "message": "Add some more test cases for undocumented_unsafe_blocks", "tree": {"sha": "c988600d42a1ca9dbad6900c222ad60a1cc7abaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c988600d42a1ca9dbad6900c222ad60a1cc7abaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8c3f64cee8b07470572f274712dc9ab2634221b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c3f64cee8b07470572f274712dc9ab2634221b", "html_url": "https://github.com/rust-lang/rust/commit/b8c3f64cee8b07470572f274712dc9ab2634221b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8c3f64cee8b07470572f274712dc9ab2634221b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a116b9bdba6c3c00f4544a937af690bd462ca428", "url": "https://api.github.com/repos/rust-lang/rust/commits/a116b9bdba6c3c00f4544a937af690bd462ca428", "html_url": "https://github.com/rust-lang/rust/commit/a116b9bdba6c3c00f4544a937af690bd462ca428"}], "stats": {"total": 92, "additions": 85, "deletions": 7}, "files": [{"sha": "080a481e87f5d799c0451690797f8e33707ec9f3", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8c3f64cee8b07470572f274712dc9ab2634221b/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c3f64cee8b07470572f274712dc9ab2634221b/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=b8c3f64cee8b07470572f274712dc9ab2634221b", "patch": "@@ -82,7 +82,7 @@ declare_clippy_lint! {\n     ///\n     /// let ptr = NonNull::new(a).unwrap();\n     /// ```\n-    #[clippy::version = \"1.66.0\"]\n+    #[clippy::version = \"1.67.0\"]\n     pub UNNECESSARY_SAFETY_COMMENT,\n     restriction,\n     \"creating an unsafe block without explaining why it is safe\"\n@@ -136,6 +136,7 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n \n         let item_has_safety_comment = item_has_safety_comment(cx, item);\n         match (&item.kind, item_has_safety_comment) {\n+            // lint unsafe impl without safety comment\n             (hir::ItemKind::Impl(impl_), HasSafetyComment::No) if impl_.unsafety == hir::Unsafety::Unsafe => {\n                 if !is_lint_allowed(cx, UNDOCUMENTED_UNSAFE_BLOCKS, item.hir_id())\n                     && !is_unsafe_from_proc_macro(cx, item.span)\n@@ -157,6 +158,7 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n                     );\n                 }\n             },\n+            // lint safe impl with unnecessary safety comment\n             (hir::ItemKind::Impl(impl_), HasSafetyComment::Yes(pos)) if impl_.unsafety == hir::Unsafety::Normal => {\n                 if !is_lint_allowed(cx, UNNECESSARY_SAFETY_COMMENT, item.hir_id()) {\n                     let (span, help_span) = mk_spans(pos);\n@@ -172,6 +174,7 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n                 }\n             },\n             (hir::ItemKind::Impl(_), _) => {},\n+            // const and static items only need a safety comment if their body is an unsafe block, lint otherwise\n             (&hir::ItemKind::Const(.., body) | &hir::ItemKind::Static(.., body), HasSafetyComment::Yes(pos)) => {\n                 if !is_lint_allowed(cx, UNNECESSARY_SAFETY_COMMENT, body.hir_id) {\n                     let body = cx.tcx.hir().body(body);\n@@ -192,6 +195,8 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n                     }\n                 }\n             },\n+            // Aside from unsafe impls and consts/statics with an unsafe block, items in general\n+            // do not have safety invariants that need to be documented, so lint those.\n             (_, HasSafetyComment::Yes(pos)) => {\n                 if !is_lint_allowed(cx, UNNECESSARY_SAFETY_COMMENT, item.hir_id()) {\n                     let (span, help_span) = mk_spans(pos);"}, {"sha": "f68e0b4915eab5cc2664cdde4e05bcfc6e4c146f", "filename": "tests/ui/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8c3f64cee8b07470572f274712dc9ab2634221b/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c3f64cee8b07470572f274712dc9ab2634221b/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.rs?ref=b8c3f64cee8b07470572f274712dc9ab2634221b", "patch": "@@ -472,6 +472,19 @@ mod unsafe_impl_invalid_comment {\n     unsafe impl Interference for () {}\n }\n \n+mod unsafe_items_invalid_comment {\n+    // SAFETY:\n+    const CONST: u32 = 0;\n+    // SAFETY:\n+    static STATIC: u32 = 0;\n+    // SAFETY:\n+    struct Struct;\n+    // SAFETY:\n+    enum Enum {}\n+    // SAFETY:\n+    mod module {}\n+}\n+\n unsafe trait ImplInFn {}\n \n fn impl_in_fn() {"}, {"sha": "becad4f61a92d68871ebfeb8f4e41c97bb3f2d85", "filename": "tests/ui/undocumented_unsafe_blocks.stderr", "status": "modified", "additions": 66, "deletions": 6, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/b8c3f64cee8b07470572f274712dc9ab2634221b/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8c3f64cee8b07470572f274712dc9ab2634221b/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.stderr?ref=b8c3f64cee8b07470572f274712dc9ab2634221b", "patch": "@@ -260,45 +260,105 @@ LL |     unsafe impl Interference for () {}\n    |\n    = help: consider adding a safety comment on the preceding line\n \n-error: unsafe impl missing a safety comment\n+error: constant item has unnecessary safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:477:5\n+   |\n+LL |     const CONST: u32 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:476:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+\n+error: static item has unnecessary safety comment\n   --> $DIR/undocumented_unsafe_blocks.rs:479:5\n    |\n+LL |     static STATIC: u32 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:478:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+\n+error: struct has unnecessary safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:481:5\n+   |\n+LL |     struct Struct;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:480:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+\n+error: enum has unnecessary safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:483:5\n+   |\n+LL |     enum Enum {}\n+   |     ^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:482:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+\n+error: module has unnecessary safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:485:5\n+   |\n+LL |     mod module {}\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: consider removing the safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:484:5\n+   |\n+LL |     // SAFETY:\n+   |     ^^^^^^^^^^\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:492:5\n+   |\n LL |     unsafe impl ImplInFn for () {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe impl missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:488:1\n+  --> $DIR/undocumented_unsafe_blocks.rs:501:1\n    |\n LL | unsafe impl CrateRoot for () {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:498:9\n+  --> $DIR/undocumented_unsafe_blocks.rs:511:9\n    |\n LL |         unsafe {};\n    |         ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:502:12\n+  --> $DIR/undocumented_unsafe_blocks.rs:515:12\n    |\n LL |         if unsafe { true } {\n    |            ^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n error: unsafe block missing a safety comment\n-  --> $DIR/undocumented_unsafe_blocks.rs:505:23\n+  --> $DIR/undocumented_unsafe_blocks.rs:518:23\n    |\n LL |             let bar = unsafe {};\n    |                       ^^^^^^^^^\n    |\n    = help: consider adding a safety comment on the preceding line\n \n-error: aborting due to 35 previous errors\n+error: aborting due to 40 previous errors\n "}]}