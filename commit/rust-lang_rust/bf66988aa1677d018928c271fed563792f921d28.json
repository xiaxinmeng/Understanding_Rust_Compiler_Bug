{"sha": "bf66988aa1677d018928c271fed563792f921d28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNjY5ODhhYTE2NzdkMDE4OTI4YzI3MWZlZDU2Mzc5MmY5MjFkMjg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-08T11:27:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-08T14:29:13Z"}, "message": "Collapse all uses of `target.options.foo` into `target.foo`\n\nwith an eye on merging `TargetOptions` into `Target`.\n\n`TargetOptions` as a separate structure is mostly an implementation detail of `Target` construction, all its fields logically belong to `Target` and available from `Target` through `Deref` impls.", "tree": {"sha": "c007b5169182a6ba4b3ae15936b0061c080921b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c007b5169182a6ba4b3ae15936b0061c080921b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf66988aa1677d018928c271fed563792f921d28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf66988aa1677d018928c271fed563792f921d28", "html_url": "https://github.com/rust-lang/rust/commit/bf66988aa1677d018928c271fed563792f921d28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf66988aa1677d018928c271fed563792f921d28/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87a0997ef9c0bfad0ba362741afa601d8fb285b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/87a0997ef9c0bfad0ba362741afa601d8fb285b8", "html_url": "https://github.com/rust-lang/rust/commit/87a0997ef9c0bfad0ba362741afa601d8fb285b8"}], "stats": {"total": 497, "additions": 236, "deletions": 261}, "files": [{"sha": "bb1d2967d6a4e2bb95954126e4f41b4c66a1219c", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -796,7 +796,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n     fn visit_expr(&mut self, expr: &'a Expr) {\n         match &expr.kind {\n-            ExprKind::LlvmInlineAsm(..) if !self.session.target.options.allow_asm => {\n+            ExprKind::LlvmInlineAsm(..) if !self.session.target.allow_asm => {\n                 struct_span_err!(\n                     self.session,\n                     expr.span,"}, {"sha": "0c32afa91fc364369532f5eab495d234a989889f", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -37,7 +37,7 @@ struct TestCtxt<'a> {\n pub fn inject(sess: &Session, resolver: &mut dyn ResolverExpand, krate: &mut ast::Crate) {\n     let span_diagnostic = sess.diagnostic();\n     let panic_strategy = sess.panic_strategy();\n-    let platform_panic_strategy = sess.target.options.panic_strategy;\n+    let platform_panic_strategy = sess.target.panic_strategy;\n \n     // Check for #![reexport_test_harness_main = \"some_name\"] which gives the\n     // main test function the name `some_name` without hygiene. This needs to be"}, {"sha": "daf9fa6158f1c544fc59f3a65b2c7b8e7fe19216", "filename": "compiler/rustc_codegen_cranelift/src/archive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -63,9 +63,9 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             sess,\n             dst: output.to_path_buf(),\n             lib_search_paths: archive_search_paths(sess),\n-            use_gnu_style_archive: sess.target.options.archive_format == \"gnu\",\n+            use_gnu_style_archive: sess.target.archive_format == \"gnu\",\n             // FIXME fix builtin ranlib on macOS\n-            no_builtin_ranlib: sess.target.options.is_like_osx,\n+            no_builtin_ranlib: sess.target.is_like_osx,\n \n             src_archives,\n             entries,"}, {"sha": "85e8158af27ad5f9f8a6af1fde98c6c20c915006", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> DebugContext<'tcx> {\n             // TODO: this should be configurable\n             // macOS doesn't seem to support DWARF > 3\n             // 5 version is required for md5 file hash\n-            version: if tcx.sess.target.options.is_like_osx {\n+            version: if tcx.sess.target.is_like_osx {\n                 3\n             } else {\n                 // FIXME change to version 5 once the gdb and lldb shipping with the latest debian"}, {"sha": "c0245aa1e02138d494e5e4d955b5462f9a33f9be", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -320,8 +320,8 @@ fn codegen_global_asm(tcx: TyCtxt<'_>, cgu_name: &str, global_asm: &str) {\n     }\n \n     if cfg!(not(feature = \"inline_asm\"))\n-        || tcx.sess.target.options.is_like_osx\n-        || tcx.sess.target.options.is_like_windows\n+        || tcx.sess.target.is_like_osx\n+        || tcx.sess.target.is_like_windows\n     {\n         if global_asm.contains(\"__rust_probestack\") {\n             return;"}, {"sha": "2e3b9fb8364e493fca716d638e1d70f1a3fd3e5f", "filename": "compiler/rustc_codegen_cranelift/src/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -101,7 +101,7 @@ pub(crate) fn write_metadata<P: WriteMetadata>(\n     product.add_rustc_section(\n         rustc_middle::middle::exported_symbols::metadata_symbol_name(tcx),\n         compressed,\n-        tcx.sess.target.options.is_like_osx,\n+        tcx.sess.target.is_like_osx,\n     );\n \n     metadata"}, {"sha": "735c59d70c1201a87f322b26c29c687d8fdc4796", "filename": "compiler/rustc_codegen_cranelift/src/toolchain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftoolchain.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -91,7 +91,7 @@ fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                 } else if stem == \"link\" || stem == \"lld-link\" {\n                     LinkerFlavor::Msvc\n                 } else if stem == \"lld\" || stem == \"rust-lld\" {\n-                    LinkerFlavor::Lld(sess.target.options.lld_flavor)\n+                    LinkerFlavor::Lld(sess.target.lld_flavor)\n                 } else {\n                     // fall back to the value in the target spec\n                     sess.target.linker_flavor\n@@ -115,7 +115,7 @@ fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n \n     if let Some(ret) = infer_from(\n         sess,\n-        sess.target.options.linker.clone().map(PathBuf::from),\n+        sess.target.linker.clone().map(PathBuf::from),\n         Some(sess.target.linker_flavor),\n     ) {\n         return ret;"}, {"sha": "a5ea0b2a74c5c90f98632f84951ffc5182fadf44", "filename": "compiler/rustc_codegen_llvm/src/allocator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fallocator.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -57,7 +57,7 @@ pub(crate) unsafe fn codegen(\n         let name = format!(\"__rust_{}\", method.name);\n         let llfn = llvm::LLVMRustGetOrInsertFunction(llmod, name.as_ptr().cast(), name.len(), ty);\n \n-        if tcx.sess.target.options.default_hidden_visibility {\n+        if tcx.sess.target.default_hidden_visibility {\n             llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n         }\n         if tcx.sess.must_emit_unwind_tables() {\n@@ -98,7 +98,7 @@ pub(crate) unsafe fn codegen(\n     // -> ! DIFlagNoReturn\n     llvm::Attribute::NoReturn.apply_llfn(llvm::AttributePlace::Function, llfn);\n \n-    if tcx.sess.target.options.default_hidden_visibility {\n+    if tcx.sess.target.default_hidden_visibility {\n         llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n     }\n     if tcx.sess.must_emit_unwind_tables() {"}, {"sha": "aa7410abbb13178487a35857b0e3635c2edfc394", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -90,8 +90,7 @@ fn set_instrument_function(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n \n         // The function name varies on platforms.\n         // See test/CodeGen/mcount.c in clang.\n-        let mcount_name =\n-            CString::new(cx.sess().target.options.target_mcount.as_str().as_bytes()).unwrap();\n+        let mcount_name = CString::new(cx.sess().target.target_mcount.as_str().as_bytes()).unwrap();\n \n         llvm::AddFunctionAttrStringValue(\n             llfn,\n@@ -105,7 +104,7 @@ fn set_instrument_function(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     // Only use stack probes if the target specification indicates that we\n     // should be using stack probes\n-    if !cx.sess().target.options.stack_probes {\n+    if !cx.sess().target.stack_probes {\n         return;\n     }\n \n@@ -174,7 +173,6 @@ pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n         .split(',')\n         .filter(|f| !RUSTC_SPECIFIC_FEATURES.iter().any(|s| f.contains(s)));\n     sess.target\n-        .options\n         .features\n         .split(',')\n         .chain(cmdline)"}, {"sha": "4e7213853b015a596f32875f26807a88b7b2d5ba", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -206,7 +206,7 @@ impl<'a> LlvmArchiveBuilder<'a> {\n     }\n \n     fn llvm_archive_kind(&self) -> Result<ArchiveKind, &str> {\n-        let kind = &*self.config.sess.target.options.archive_format;\n+        let kind = &*self.config.sess.target.archive_format;\n         kind.parse().map_err(|_| kind)\n     }\n "}, {"sha": "e6acb6860be9efa3869755caeb68d320d3d36c44", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -129,13 +129,13 @@ pub fn target_machine_factory(\n     let use_softfp = sess.opts.cg.soft_float;\n \n     let ffunction_sections =\n-        sess.opts.debugging_opts.function_sections.unwrap_or(sess.target.options.function_sections);\n+        sess.opts.debugging_opts.function_sections.unwrap_or(sess.target.function_sections);\n     let fdata_sections = ffunction_sections;\n \n     let code_model = to_llvm_code_model(sess.code_model());\n \n     let features = attributes::llvm_target_features(sess).collect::<Vec<_>>();\n-    let mut singlethread = sess.target.options.singlethread;\n+    let mut singlethread = sess.target.singlethread;\n \n     // On the wasm target once the `atomics` feature is enabled that means that\n     // we're no longer single-threaded, or otherwise we don't want LLVM to\n@@ -151,22 +151,16 @@ pub fn target_machine_factory(\n     let cpu = SmallCStr::new(llvm_util::target_cpu(sess));\n     let features = features.join(\",\");\n     let features = CString::new(features).unwrap();\n-    let abi = SmallCStr::new(&sess.target.options.llvm_abiname);\n-    let trap_unreachable = sess.target.options.trap_unreachable;\n+    let abi = SmallCStr::new(&sess.target.llvm_abiname);\n+    let trap_unreachable = sess.target.trap_unreachable;\n     let emit_stack_size_section = sess.opts.debugging_opts.emit_stack_sizes;\n \n     let asm_comments = sess.asm_comments();\n-    let relax_elf_relocations = sess\n-        .opts\n-        .debugging_opts\n-        .relax_elf_relocations\n-        .unwrap_or(sess.target.options.relax_elf_relocations);\n-\n-    let use_init_array = !sess\n-        .opts\n-        .debugging_opts\n-        .use_ctors_section\n-        .unwrap_or(sess.target.options.use_ctors_section);\n+    let relax_elf_relocations =\n+        sess.opts.debugging_opts.relax_elf_relocations.unwrap_or(sess.target.relax_elf_relocations);\n+\n+    let use_init_array =\n+        !sess.opts.debugging_opts.use_ctors_section.unwrap_or(sess.target.use_ctors_section);\n \n     Arc::new(move || {\n         let tm = unsafe {"}, {"sha": "14dd245625d2556bc1496e43fe817c0531b38a51", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -91,7 +91,7 @@ fn set_global_alignment(cx: &CodegenCx<'ll, '_>, gv: &'ll Value, mut align: Alig\n     // The target may require greater alignment for globals than the type does.\n     // Note: GCC and Clang also allow `__attribute__((aligned))` on variables,\n     // which can force it to be smaller.  Rust doesn't support this yet.\n-    if let Some(min) = cx.sess().target.options.min_global_align {\n+    if let Some(min) = cx.sess().target.min_global_align {\n         match Align::from_bits(min) {\n             Ok(min) => align = align.max(min),\n             Err(err) => {\n@@ -283,7 +283,7 @@ impl CodegenCx<'ll, 'tcx> {\n             // argument validation.\n             debug_assert!(\n                 !(self.tcx.sess.opts.cg.linker_plugin_lto.enabled()\n-                    && self.tcx.sess.target.options.is_like_windows\n+                    && self.tcx.sess.target.is_like_windows\n                     && self.tcx.sess.opts.cg.prefer_dynamic)\n             );\n \n@@ -435,7 +435,7 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n                 // will use load-unaligned instructions instead, and thus avoiding the crash.\n                 //\n                 // We could remove this hack whenever we decide to drop macOS 10.10 support.\n-                if self.tcx.sess.target.options.is_like_osx {\n+                if self.tcx.sess.target.is_like_osx {\n                     // The `inspect` method is okay here because we checked relocations, and\n                     // because we are doing this access to inspect the final interpreter state\n                     // (not as part of the interpreter execution)."}, {"sha": "b6e922ca5456beb881886192e2b51ad72b271e01", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -129,7 +129,7 @@ pub unsafe fn create_module(\n     }\n \n     // Ensure the data-layout values hardcoded remain the defaults.\n-    if sess.target.options.is_builtin {\n+    if sess.target.is_builtin {\n         let tm = crate::back::write::create_informational_target_machine(tcx.sess);\n         llvm::LLVMRustSetDataLayoutFromTargetMachine(llmod, tm);\n         llvm::LLVMRustDisposeTargetMachine(tm);\n@@ -190,7 +190,7 @@ pub unsafe fn create_module(\n     }\n \n     // Control Flow Guard is currently only supported by the MSVC linker on Windows.\n-    if sess.target.options.is_like_msvc {\n+    if sess.target.is_like_msvc {\n         match sess.opts.cg.control_flow_guard {\n             CFGuard::Disabled => {}\n             CFGuard::NoChecks => {\n@@ -265,7 +265,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n         // linker will take care of everything. Fixing this problem will likely\n         // require adding a few attributes to Rust itself (feature gated at the\n         // start) and then strongly recommending static linkage on Windows!\n-        let use_dll_storage_attrs = tcx.sess.target.options.is_like_windows;\n+        let use_dll_storage_attrs = tcx.sess.target.is_like_windows;\n \n         let check_overflow = tcx.sess.overflow_checks();\n \n@@ -839,7 +839,7 @@ impl CodegenCx<'b, 'tcx> {\n             return eh_catch_typeinfo;\n         }\n         let tcx = self.tcx;\n-        assert!(self.sess().target.options.is_like_emscripten);\n+        assert!(self.sess().target.is_like_emscripten);\n         let eh_catch_typeinfo = match tcx.lang_items().eh_catch_typeinfo() {\n             Some(def_id) => self.get_static(def_id),\n             _ => {"}, {"sha": "38f50a6d621bb0bff399c6e9f7345debcafb870f", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -67,5 +67,5 @@ pub fn needs_gdb_debug_scripts_section(cx: &CodegenCx<'_, '_>) -> bool {\n \n     !omit_gdb_pretty_printer_section\n         && cx.sess().opts.debuginfo != DebugInfo::None\n-        && cx.sess().target.options.emit_debug_gdb_scripts\n+        && cx.sess().target.emit_debug_gdb_scripts\n }"}, {"sha": "27b81ebcff67613bf282c4e52cb74dcac4c2ca22", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -870,7 +870,7 @@ fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n \n     // When targeting MSVC, emit MSVC style type names for compatibility with\n     // .natvis visualizers (and perhaps other existing native debuggers?)\n-    let msvc_like_names = cx.tcx.sess.target.options.is_like_msvc;\n+    let msvc_like_names = cx.tcx.sess.target.is_like_msvc;\n \n     let (name, encoding) = match t.kind() {\n         ty::Never => (\"!\", DW_ATE_unsigned),\n@@ -981,7 +981,7 @@ pub fn compile_unit_metadata(\n     // if multiple object files with the same `DW_AT_name` are linked together.\n     // As a workaround we generate unique names for each object file. Those do\n     // not correspond to an actual source file but that should be harmless.\n-    if tcx.sess.target.options.is_like_osx {\n+    if tcx.sess.target.is_like_osx {\n         name_in_debuginfo.push(\"@\");\n         name_in_debuginfo.push(codegen_unit_name);\n     }\n@@ -1397,7 +1397,7 @@ fn prepare_union_metadata(\n /// on MSVC we have to use the fallback mode, because LLVM doesn't\n /// lower variant parts to PDB.\n fn use_enum_fallback(cx: &CodegenCx<'_, '_>) -> bool {\n-    cx.sess().target.options.is_like_msvc\n+    cx.sess().target.is_like_msvc\n }\n \n // FIXME(eddyb) maybe precompute this? Right now it's computed once"}, {"sha": "5065ff01aed0da0ffdb34afbd886e3fb03e78e07", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -122,12 +122,12 @@ pub fn finalize(cx: &CodegenCx<'_, '_>) {\n         // for macOS to understand. For more info see #11352\n         // This can be overridden using --llvm-opts -dwarf-version,N.\n         // Android has the same issue (#22398)\n-        if let Some(version) = cx.sess().target.options.dwarf_version {\n+        if let Some(version) = cx.sess().target.dwarf_version {\n             llvm::LLVMRustAddModuleFlag(cx.llmod, \"Dwarf Version\\0\".as_ptr().cast(), version)\n         }\n \n         // Indicate that we want CodeView debug information on MSVC\n-        if cx.sess().target.options.is_like_msvc {\n+        if cx.sess().target.is_like_msvc {\n             llvm::LLVMRustAddModuleFlag(cx.llmod, \"CodeView\\0\".as_ptr().cast(), 1)\n         }\n \n@@ -251,7 +251,7 @@ impl CodegenCx<'ll, '_> {\n         // For MSVC, omit the column number.\n         // Otherwise, emit it. This mimics clang behaviour.\n         // See discussion in https://github.com/rust-lang/rust/issues/42921\n-        if self.sess().target.options.is_like_msvc {\n+        if self.sess().target.is_like_msvc {\n             DebugLoc { file, line, col: None }\n         } else {\n             DebugLoc { file, line, col }\n@@ -387,7 +387,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             });\n \n             // Arguments types\n-            if cx.sess().target.options.is_like_msvc {\n+            if cx.sess().target.is_like_msvc {\n                 // FIXME(#42800):\n                 // There is a bug in MSDIA that leads to a crash when it encounters\n                 // a fixed-size array of `u8` or something zero-sized in a"}, {"sha": "0591e0a5c1279c24b93c9530673f68f7881a06c6", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -42,7 +42,7 @@ fn declare_raw_fn(\n     // be merged.\n     llvm::SetUnnamedAddress(llfn, llvm::UnnamedAddr::Global);\n \n-    if cx.tcx.sess.opts.cg.no_redzone.unwrap_or(cx.tcx.sess.target.options.disable_redzone) {\n+    if cx.tcx.sess.opts.cg.no_redzone.unwrap_or(cx.tcx.sess.target.disable_redzone) {\n         llvm::Attribute::NoRedZone.apply_llfn(Function, llfn);\n     }\n "}, {"sha": "4f999f8b560b542b6b71de9bb54a1c048f24bb1c", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -367,7 +367,7 @@ fn try_intrinsic(\n         bx.store(bx.const_i32(0), dest, ret_align);\n     } else if wants_msvc_seh(bx.sess()) {\n         codegen_msvc_try(bx, try_func, data, catch_func, dest);\n-    } else if bx.sess().target.options.is_like_emscripten {\n+    } else if bx.sess().target.is_like_emscripten {\n         codegen_emcc_try(bx, try_func, data, catch_func, dest);\n     } else {\n         codegen_gnu_try(bx, try_func, data, catch_func, dest);"}, {"sha": "47ca3ca5ba80b570313a78e13e5b52792d92b3da", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -46,7 +46,7 @@ fn require_inited() {\n }\n \n unsafe fn configure_llvm(sess: &Session) {\n-    let n_args = sess.opts.cg.llvm_args.len() + sess.target.options.llvm_args.len();\n+    let n_args = sess.opts.cg.llvm_args.len() + sess.target.llvm_args.len();\n     let mut llvm_c_strs = Vec::with_capacity(n_args + 1);\n     let mut llvm_args = Vec::with_capacity(n_args + 1);\n \n@@ -57,7 +57,7 @@ unsafe fn configure_llvm(sess: &Session) {\n     }\n \n     let cg_opts = sess.opts.cg.llvm_args.iter();\n-    let tg_opts = sess.target.options.llvm_args.iter();\n+    let tg_opts = sess.target.llvm_args.iter();\n     let sess_args = cg_opts.chain(tg_opts);\n \n     let user_specified_args: FxHashSet<_> =\n@@ -84,12 +84,7 @@ unsafe fn configure_llvm(sess: &Session) {\n         if !sess.opts.debugging_opts.no_generate_arange_section {\n             add(\"-generate-arange-section\", false);\n         }\n-        match sess\n-            .opts\n-            .debugging_opts\n-            .merge_functions\n-            .unwrap_or(sess.target.options.merge_functions)\n-        {\n+        match sess.opts.debugging_opts.merge_functions.unwrap_or(sess.target.merge_functions) {\n             MergeFunctions::Disabled | MergeFunctions::Trampolines => {}\n             MergeFunctions::Aliases => {\n                 add(\"-mergefunc-use-aliases\", false);\n@@ -215,7 +210,7 @@ fn handle_native(name: &str) -> &str {\n pub fn target_cpu(sess: &Session) -> &str {\n     let name = match sess.opts.cg.target_cpu {\n         Some(ref s) => &**s,\n-        None => &*sess.target.options.cpu,\n+        None => &*sess.target.cpu,\n     };\n \n     handle_native(name)"}, {"sha": "3912d6a3a48b65cfb7184ebaf2fb1d579e36eda6", "filename": "compiler/rustc_codegen_llvm/src/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -104,7 +104,7 @@ pub fn metadata_section_name(target: &Target) -> &'static str {\n     // As a result, we choose a slightly shorter name! As to why\n     // `.note.rustc` works on MinGW, that's another good question...\n \n-    if target.options.is_like_osx { \"__DATA,.rustc\" } else { \".rustc\" }\n+    if target.is_like_osx { \"__DATA,.rustc\" } else { \".rustc\" }\n }\n \n fn read_metadata_section_name(_target: &Target) -> &'static str {"}, {"sha": "8ba7bd83cf4c9dbc2f946f78d6f6c1bf96926ded", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -175,22 +175,22 @@ pub(super) fn emit_va_arg(\n     let arch = &bx.cx.tcx.sess.target.arch;\n     match &**arch {\n         // Windows x86\n-        \"x86\" if target.options.is_like_windows => {\n+        \"x86\" if target.is_like_windows => {\n             emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(4).unwrap(), false)\n         }\n         // Generic x86\n         \"x86\" => emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(4).unwrap(), true),\n         // Windows AArch64\n-        \"aarch64\" if target.options.is_like_windows => {\n+        \"aarch64\" if target.is_like_windows => {\n             emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(8).unwrap(), false)\n         }\n         // macOS / iOS AArch64\n-        \"aarch64\" if target.options.is_like_osx => {\n+        \"aarch64\" if target.is_like_osx => {\n             emit_ptr_va_arg(bx, addr, target_ty, false, Align::from_bytes(8).unwrap(), true)\n         }\n         \"aarch64\" => emit_aapcs_va_arg(bx, addr, target_ty),\n         // Windows x86_64\n-        \"x86_64\" if target.options.is_like_windows => {\n+        \"x86_64\" if target.is_like_windows => {\n             let target_ty_size = bx.cx.size_of(target_ty).bytes();\n             let indirect: bool = target_ty_size > 8 || !target_ty_size.is_power_of_two();\n             emit_ptr_va_arg(bx, addr, target_ty, indirect, Align::from_bytes(8).unwrap(), false)"}, {"sha": "c477ac6462acb21420303dcf06eedccb3b3c9ec9", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -7,10 +7,8 @@ use std::path::{Path, PathBuf};\n pub fn find_library(name: Symbol, search_paths: &[PathBuf], sess: &Session) -> PathBuf {\n     // On Windows, static libraries sometimes show up as libfoo.a and other\n     // times show up as foo.lib\n-    let oslibname = format!(\n-        \"{}{}{}\",\n-        sess.target.options.staticlib_prefix, name, sess.target.options.staticlib_suffix\n-    );\n+    let oslibname =\n+        format!(\"{}{}{}\", sess.target.staticlib_prefix, name, sess.target.staticlib_suffix);\n     let unixlibname = format!(\"lib{}.a\", name);\n \n     for path in search_paths {"}, {"sha": "e7d73cbdd8d5d7d5f0d553b44c33d1c37c72aa61", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 41, "deletions": 45, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -151,9 +151,7 @@ fn get_linker(\n         Some(linker) if cfg!(windows) && linker.ends_with(\".bat\") => Command::bat_script(linker),\n         _ => match flavor {\n             LinkerFlavor::Lld(f) => Command::lld(linker, f),\n-            LinkerFlavor::Msvc\n-                if sess.opts.cg.linker.is_none() && sess.target.options.linker.is_none() =>\n-            {\n+            LinkerFlavor::Msvc if sess.opts.cg.linker.is_none() && sess.target.linker.is_none() => {\n                 Command::new(msvc_tool.as_ref().map(|t| t.path()).unwrap_or(linker))\n             }\n             _ => Command::new(linker),\n@@ -197,7 +195,7 @@ fn get_linker(\n     // PATH for the child.\n     let mut new_path = sess.host_filesearch(PathKind::All).get_tools_search_paths(self_contained);\n     let mut msvc_changed_path = false;\n-    if sess.target.options.is_like_msvc {\n+    if sess.target.is_like_msvc {\n         if let Some(ref tool) = msvc_tool {\n             cmd.args(tool.args());\n             for &(ref k, ref v) in tool.env() {\n@@ -365,7 +363,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n             // After adding all files to the archive, we need to update the\n             // symbol table of the archive. This currently dies on macOS (see\n             // #11162), and isn't necessary there anyway\n-            if !sess.target.options.is_like_osx {\n+            if !sess.target.is_like_osx {\n                 ab.update_symbols();\n             }\n         }\n@@ -476,10 +474,10 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n \n     linker::disable_localization(&mut cmd);\n \n-    for &(ref k, ref v) in &sess.target.options.link_env {\n+    for &(ref k, ref v) in &sess.target.link_env {\n         cmd.env(k, v);\n     }\n-    for k in &sess.target.options.link_env_remove {\n+    for k in &sess.target.link_env_remove {\n         cmd.env_remove(k);\n     }\n \n@@ -515,7 +513,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n         // if the linker doesn't support -no-pie then it should not default to\n         // linking executables as pie. Different versions of gcc seem to use\n         // different quotes in the error message so don't check for them.\n-        if sess.target.options.linker_is_gnu\n+        if sess.target.linker_is_gnu\n             && flavor != LinkerFlavor::Ld\n             && (out.contains(\"unrecognized command line option\")\n                 || out.contains(\"unknown argument\"))\n@@ -535,7 +533,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n \n         // Detect '-static-pie' used with an older version of gcc or clang not supporting it.\n         // Fallback from '-static-pie' to '-static' in that case.\n-        if sess.target.options.linker_is_gnu\n+        if sess.target.linker_is_gnu\n             && flavor != LinkerFlavor::Ld\n             && (out.contains(\"unrecognized command line option\")\n                 || out.contains(\"unknown argument\"))\n@@ -548,7 +546,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n             );\n             // Mirror `add_(pre,post)_link_objects` to replace CRT objects.\n             let self_contained = crt_objects_fallback(sess, crate_type);\n-            let opts = &sess.target.options;\n+            let opts = &sess.target;\n             let pre_objects = if self_contained {\n                 &opts.pre_link_objects_fallback\n             } else {\n@@ -670,7 +668,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n                 // is not a Microsoft LNK error then suggest a way to fix or\n                 // install the Visual Studio build tools.\n                 if let Some(code) = prog.status.code() {\n-                    if sess.target.options.is_like_msvc\n+                    if sess.target.is_like_msvc\n                         && flavor == LinkerFlavor::Msvc\n                         // Respect the command line override\n                         && sess.opts.cg.linker.is_none()\n@@ -741,7 +739,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n \n             linker_error.emit();\n \n-            if sess.target.options.is_like_msvc && linker_not_found {\n+            if sess.target.is_like_msvc && linker_not_found {\n                 sess.note_without_error(\n                     \"the msvc targets depend on the msvc linker \\\n                      but `link.exe` was not found\",\n@@ -758,7 +756,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     // On macOS, debuggers need this utility to get run to do some munging of\n     // the symbols. Note, though, that if the object files are being preserved\n     // for their debug information there's no need for us to run dsymutil.\n-    if sess.target.options.is_like_osx\n+    if sess.target.is_like_osx\n         && sess.opts.debuginfo != DebugInfo::None\n         && !preserve_objects_for_their_debuginfo(sess)\n     {\n@@ -775,9 +773,7 @@ fn link_sanitizers(sess: &Session, crate_type: CrateType, linker: &mut dyn Linke\n     // executables only.\n     let needs_runtime = match crate_type {\n         CrateType::Executable => true,\n-        CrateType::Dylib | CrateType::Cdylib | CrateType::ProcMacro => {\n-            sess.target.options.is_like_osx\n-        }\n+        CrateType::Dylib | CrateType::Cdylib | CrateType::ProcMacro => sess.target.is_like_osx,\n         CrateType::Rlib | CrateType::Staticlib => false,\n     };\n \n@@ -846,7 +842,7 @@ pub fn ignored_for_lto(sess: &Session, info: &CrateInfo, cnum: CrateNum) -> bool\n     // If our target enables builtin function lowering in LLVM then the\n     // crates providing these functions don't participate in LTO (e.g.\n     // no_builtins or compiler builtins crates).\n-    !sess.target.options.no_builtins\n+    !sess.target.no_builtins\n         && (info.compiler_builtins == Some(cnum) || info.is_no_builtins.contains(&cnum))\n }\n \n@@ -906,7 +902,7 @@ fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                 } else if stem == \"link\" || stem == \"lld-link\" {\n                     LinkerFlavor::Msvc\n                 } else if stem == \"lld\" || stem == \"rust-lld\" {\n-                    LinkerFlavor::Lld(sess.target.options.lld_flavor)\n+                    LinkerFlavor::Lld(sess.target.lld_flavor)\n                 } else {\n                     // fall back to the value in the target spec\n                     sess.target.linker_flavor\n@@ -926,7 +922,7 @@ fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n \n     if let Some(ret) = infer_from(\n         sess,\n-        sess.target.options.linker.clone().map(PathBuf::from),\n+        sess.target.linker.clone().map(PathBuf::from),\n         Some(sess.target.linker_flavor),\n     ) {\n         return ret;\n@@ -962,7 +958,7 @@ fn preserve_objects_for_their_debuginfo(sess: &Session) -> bool {\n     // Basically as a result this just means that if we're on OSX and we're\n     // *not* running dsymutil then the object files are the only source of truth\n     // for debug information, so we must preserve them.\n-    if sess.target.options.is_like_osx {\n+    if sess.target.is_like_osx {\n         return !sess.opts.debugging_opts.run_dsymutil;\n     }\n \n@@ -988,7 +984,7 @@ fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLib]) {\n                 NativeLibKind::StaticNoBundle\n                 | NativeLibKind::Dylib\n                 | NativeLibKind::Unspecified => {\n-                    if sess.target.options.is_like_msvc {\n+                    if sess.target.is_like_msvc {\n                         Some(format!(\"{}.lib\", name))\n                     } else {\n                         Some(format!(\"-l{}\", name))\n@@ -1070,13 +1066,13 @@ fn exec_linker(\n     let mut args = String::new();\n     for arg in cmd2.take_args() {\n         args.push_str(\n-            &Escape { arg: arg.to_str().unwrap(), is_like_msvc: sess.target.options.is_like_msvc }\n+            &Escape { arg: arg.to_str().unwrap(), is_like_msvc: sess.target.is_like_msvc }\n                 .to_string(),\n         );\n         args.push('\\n');\n     }\n     let file = tmpdir.join(\"linker-arguments\");\n-    let bytes = if sess.target.options.is_like_msvc {\n+    let bytes = if sess.target.is_like_msvc {\n         let mut out = Vec::with_capacity((1 + args.len()) * 2);\n         // start the stream with a UTF-16 BOM\n         for c in std::iter::once(0xFEFF).chain(args.encode_utf16()) {\n@@ -1192,7 +1188,7 @@ fn link_output_kind(sess: &Session, crate_type: CrateType) -> LinkOutputKind {\n     };\n \n     // Adjust the output kind to target capabilities.\n-    let opts = &sess.target.options;\n+    let opts = &sess.target;\n     let pic_exe_supported = opts.position_independent_executables;\n     let static_pic_exe_supported = opts.static_position_independent_executables;\n     let static_dylib_supported = opts.crt_static_allows_dylibs;\n@@ -1233,7 +1229,7 @@ fn crt_objects_fallback(sess: &Session, crate_type: CrateType) -> bool {\n         return self_contained;\n     }\n \n-    match sess.target.options.crt_objects_fallback {\n+    match sess.target.crt_objects_fallback {\n         // FIXME: Find a better heuristic for \"native musl toolchain is available\",\n         // based on host and linker path, for example.\n         // (https://github.com/rust-lang/rust/pull/71769#issuecomment-626330237).\n@@ -1256,7 +1252,7 @@ fn add_pre_link_objects(\n     link_output_kind: LinkOutputKind,\n     self_contained: bool,\n ) {\n-    let opts = &sess.target.options;\n+    let opts = &sess.target;\n     let objects =\n         if self_contained { &opts.pre_link_objects_fallback } else { &opts.pre_link_objects };\n     for obj in objects.get(&link_output_kind).iter().copied().flatten() {\n@@ -1271,7 +1267,7 @@ fn add_post_link_objects(\n     link_output_kind: LinkOutputKind,\n     self_contained: bool,\n ) {\n-    let opts = &sess.target.options;\n+    let opts = &sess.target;\n     let objects =\n         if self_contained { &opts.post_link_objects_fallback } else { &opts.post_link_objects };\n     for obj in objects.get(&link_output_kind).iter().copied().flatten() {\n@@ -1282,17 +1278,17 @@ fn add_post_link_objects(\n /// Add arbitrary \"pre-link\" args defined by the target spec or from command line.\n /// FIXME: Determine where exactly these args need to be inserted.\n fn add_pre_link_args(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n-    if let Some(args) = sess.target.options.pre_link_args.get(&flavor) {\n+    if let Some(args) = sess.target.pre_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n     cmd.args(&sess.opts.debugging_opts.pre_link_args);\n }\n \n /// Add a link script embedded in the target, if applicable.\n fn add_link_script(cmd: &mut dyn Linker, sess: &Session, tmpdir: &Path, crate_type: CrateType) {\n-    match (crate_type, &sess.target.options.link_script) {\n+    match (crate_type, &sess.target.link_script) {\n         (CrateType::Cdylib | CrateType::Executable, Some(script)) => {\n-            if !sess.target.options.linker_is_gnu {\n+            if !sess.target.linker_is_gnu {\n                 sess.fatal(\"can only use link script when linking with GNU-like linker\");\n             }\n \n@@ -1335,23 +1331,23 @@ fn add_late_link_args(\n             *ty == crate_type && list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n         });\n     if any_dynamic_crate {\n-        if let Some(args) = sess.target.options.late_link_args_dynamic.get(&flavor) {\n+        if let Some(args) = sess.target.late_link_args_dynamic.get(&flavor) {\n             cmd.args(args);\n         }\n     } else {\n-        if let Some(args) = sess.target.options.late_link_args_static.get(&flavor) {\n+        if let Some(args) = sess.target.late_link_args_static.get(&flavor) {\n             cmd.args(args);\n         }\n     }\n-    if let Some(args) = sess.target.options.late_link_args.get(&flavor) {\n+    if let Some(args) = sess.target.late_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n }\n \n /// Add arbitrary \"post-link\" args defined by the target spec.\n /// FIXME: Determine where exactly these args need to be inserted.\n fn add_post_link_args(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n-    if let Some(args) = sess.target.options.post_link_args.get(&flavor) {\n+    if let Some(args) = sess.target.post_link_args.get(&flavor) {\n         cmd.args(args);\n     }\n }\n@@ -1453,7 +1449,7 @@ fn add_library_search_dirs(cmd: &mut dyn Linker, sess: &Session, self_contained:\n /// Add options making relocation sections in the produced ELF files read-only\n /// and suppressing lazy binding.\n fn add_relro_args(cmd: &mut dyn Linker, sess: &Session) {\n-    match sess.opts.debugging_opts.relro_level.unwrap_or(sess.target.options.relro_level) {\n+    match sess.opts.debugging_opts.relro_level.unwrap_or(sess.target.relro_level) {\n         RelroLevel::Full => cmd.full_relro(),\n         RelroLevel::Partial => cmd.partial_relro(),\n         RelroLevel::Off => cmd.no_relro(),\n@@ -1484,9 +1480,9 @@ fn add_rpath_args(\n         let mut rpath_config = RPathConfig {\n             used_crates: &codegen_results.crate_info.used_crates_dynamic,\n             out_filename: out_filename.to_path_buf(),\n-            has_rpath: sess.target.options.has_rpath,\n-            is_like_osx: sess.target.options.is_like_osx,\n-            linker_is_gnu: sess.target.options.linker_is_gnu,\n+            has_rpath: sess.target.has_rpath,\n+            is_like_osx: sess.target.is_like_osx,\n+            linker_is_gnu: sess.target.linker_is_gnu,\n             get_install_prefix_lib_path: &mut get_install_prefix_lib_path,\n         };\n         cmd.args(&rpath::get_rpath_flags(&mut rpath_config));\n@@ -1528,7 +1524,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     add_link_script(cmd, sess, tmpdir, crate_type);\n \n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n-    if sess.target.options.is_like_fuchsia && crate_type == CrateType::Executable {\n+    if sess.target.is_like_fuchsia && crate_type == CrateType::Executable {\n         let prefix = if sess.opts.debugging_opts.sanitizer.contains(SanitizerSet::ADDRESS) {\n             \"asan/\"\n         } else {\n@@ -1538,7 +1534,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     }\n \n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n-    if sess.target.options.eh_frame_header {\n+    if sess.target.eh_frame_header {\n         cmd.add_eh_frame_header();\n     }\n \n@@ -1551,7 +1547,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     add_pre_link_objects(cmd, sess, link_output_kind, crt_objects_fallback);\n \n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n-    if sess.target.options.is_like_emscripten {\n+    if sess.target.is_like_emscripten {\n         cmd.arg(\"-s\");\n         cmd.arg(if sess.panic_strategy() == PanicStrategy::Abort {\n             \"DISABLE_EXCEPTION_CATCHING=1\"\n@@ -1579,7 +1575,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     cmd.output_filename(out_filename);\n \n     // OBJECT-FILES-NO, AUDIT-ORDER\n-    if crate_type == CrateType::Executable && sess.target.options.is_like_windows {\n+    if crate_type == CrateType::Executable && sess.target.is_like_windows {\n         if let Some(ref s) = codegen_results.windows_subsystem {\n             cmd.subsystem(s);\n         }\n@@ -1623,7 +1619,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     // OBJECT-FILES-NO, AUDIT-ORDER\n     // We want to prevent the compiler from accidentally leaking in any system libraries,\n     // so by default we tell linkers not to link to any default libraries.\n-    if !sess.opts.cg.default_linker_libraries && sess.target.options.no_default_libraries {\n+    if !sess.opts.cg.default_linker_libraries && sess.target.no_default_libraries {\n         cmd.no_default_libraries();\n     }\n \n@@ -1843,7 +1839,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n \n     // Converts a library file-stem into a cc -l argument\n     fn unlib<'a>(target: &Target, stem: &'a str) -> &'a str {\n-        if stem.starts_with(\"lib\") && !target.options.is_like_windows { &stem[3..] } else { stem }\n+        if stem.starts_with(\"lib\") && !target.is_like_windows { &stem[3..] } else { stem }\n     }\n \n     // Adds the static \"rlib\" versions of all crates to the command line.\n@@ -1938,7 +1934,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n                 // though, so we let that object file slide.\n                 let skip_because_lto = are_upstream_rust_objects_already_included(sess)\n                     && is_rust_object\n-                    && (sess.target.options.no_builtins\n+                    && (sess.target.no_builtins\n                         || !codegen_results.crate_info.is_no_builtins.contains(&cnum));\n \n                 if skip_because_cfg_say_so || skip_because_lto {"}, {"sha": "93f0aad1349eb7f14d1c5f48d72760e9a85c2805", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -184,7 +184,7 @@ impl<'a> GccLinker<'a> {\n         // * On OSX they have their own linker, not binutils'\n         // * For WebAssembly the only functional linker is LLD, which doesn't\n         //   support hint flags\n-        !self.sess.target.options.is_like_osx && self.sess.target.arch != \"wasm32\"\n+        !self.sess.target.is_like_osx && self.sess.target.arch != \"wasm32\"\n     }\n \n     // Some platforms take hints about whether a library is static or dynamic.\n@@ -232,7 +232,7 @@ impl<'a> GccLinker<'a> {\n \n     fn build_dylib(&mut self, out_filename: &Path) {\n         // On mac we need to tell the linker to let this library be rpathed\n-        if self.sess.target.options.is_like_osx {\n+        if self.sess.target.is_like_osx {\n             self.cmd.arg(\"-dynamiclib\");\n             self.linker_arg(\"-dylib\");\n \n@@ -248,17 +248,17 @@ impl<'a> GccLinker<'a> {\n             }\n         } else {\n             self.cmd.arg(\"-shared\");\n-            if self.sess.target.options.is_like_windows {\n+            if self.sess.target.is_like_windows {\n                 // The output filename already contains `dll_suffix` so\n                 // the resulting import library will have a name in the\n                 // form of libfoo.dll.a\n                 let implib_name =\n                     out_filename.file_name().and_then(|file| file.to_str()).map(|file| {\n                         format!(\n                             \"{}{}{}\",\n-                            self.sess.target.options.staticlib_prefix,\n+                            self.sess.target.staticlib_prefix,\n                             file,\n-                            self.sess.target.options.staticlib_suffix\n+                            self.sess.target.staticlib_suffix\n                         )\n                     });\n                 if let Some(implib_name) = implib_name {\n@@ -280,7 +280,7 @@ impl<'a> Linker for GccLinker<'a> {\n     fn set_output_kind(&mut self, output_kind: LinkOutputKind, out_filename: &Path) {\n         match output_kind {\n             LinkOutputKind::DynamicNoPicExe => {\n-                if !self.is_ld && self.sess.target.options.linker_is_gnu {\n+                if !self.is_ld && self.sess.target.linker_is_gnu {\n                     self.cmd.arg(\"-no-pie\");\n                 }\n             }\n@@ -291,7 +291,7 @@ impl<'a> Linker for GccLinker<'a> {\n             LinkOutputKind::StaticNoPicExe => {\n                 // `-static` works for both gcc wrapper and ld.\n                 self.cmd.arg(\"-static\");\n-                if !self.is_ld && self.sess.target.options.linker_is_gnu {\n+                if !self.is_ld && self.sess.target.linker_is_gnu {\n                     self.cmd.arg(\"-no-pie\");\n                 }\n             }\n@@ -386,7 +386,7 @@ impl<'a> Linker for GccLinker<'a> {\n     fn link_whole_staticlib(&mut self, lib: Symbol, search_path: &[PathBuf]) {\n         self.hint_static();\n         let target = &self.sess.target;\n-        if !target.options.is_like_osx {\n+        if !target.is_like_osx {\n             self.linker_arg(\"--whole-archive\").cmd.arg(format!(\"-l{}\", lib));\n             self.linker_arg(\"--no-whole-archive\");\n         } else {\n@@ -400,7 +400,7 @@ impl<'a> Linker for GccLinker<'a> {\n \n     fn link_whole_rlib(&mut self, lib: &Path) {\n         self.hint_static();\n-        if self.sess.target.options.is_like_osx {\n+        if self.sess.target.is_like_osx {\n             self.linker_arg(\"-force_load\");\n             self.linker_arg(&lib);\n         } else {\n@@ -424,9 +424,9 @@ impl<'a> Linker for GccLinker<'a> {\n         // -dead_strip can't be part of the pre_link_args because it's also used\n         // for partial linking when using multiple codegen units (-r).  So we\n         // insert it here.\n-        if self.sess.target.options.is_like_osx {\n+        if self.sess.target.is_like_osx {\n             self.linker_arg(\"-dead_strip\");\n-        } else if self.sess.target.options.is_like_solaris {\n+        } else if self.sess.target.is_like_solaris {\n             self.linker_arg(\"-zignore\");\n \n         // If we're building a dylib, we don't use --gc-sections because LLVM\n@@ -440,7 +440,7 @@ impl<'a> Linker for GccLinker<'a> {\n     }\n \n     fn optimize(&mut self) {\n-        if !self.sess.target.options.linker_is_gnu {\n+        if !self.sess.target.linker_is_gnu {\n             return;\n         }\n \n@@ -454,7 +454,7 @@ impl<'a> Linker for GccLinker<'a> {\n     }\n \n     fn pgo_gen(&mut self) {\n-        if !self.sess.target.options.linker_is_gnu {\n+        if !self.sess.target.linker_is_gnu {\n             return;\n         }\n \n@@ -503,8 +503,7 @@ impl<'a> Linker for GccLinker<'a> {\n \n     fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType) {\n         // Symbol visibility in object files typically takes care of this.\n-        if crate_type == CrateType::Executable\n-            && self.sess.target.options.override_export_symbols.is_none()\n+        if crate_type == CrateType::Executable && self.sess.target.override_export_symbols.is_none()\n         {\n             return;\n         }\n@@ -513,21 +512,21 @@ impl<'a> Linker for GccLinker<'a> {\n         // The object files have far more public symbols than we actually want to export,\n         // so we hide them all here.\n \n-        if !self.sess.target.options.limit_rdylib_exports {\n+        if !self.sess.target.limit_rdylib_exports {\n             return;\n         }\n \n         if crate_type == CrateType::ProcMacro {\n             return;\n         }\n \n-        let is_windows = self.sess.target.options.is_like_windows;\n+        let is_windows = self.sess.target.is_like_windows;\n         let mut arg = OsString::new();\n         let path = tmpdir.join(if is_windows { \"list.def\" } else { \"list\" });\n \n         debug!(\"EXPORTED SYMBOLS:\");\n \n-        if self.sess.target.options.is_like_osx {\n+        if self.sess.target.is_like_osx {\n             // Write a plain, newline-separated list of symbols\n             let res: io::Result<()> = try {\n                 let mut f = BufWriter::new(File::create(&path)?);\n@@ -573,12 +572,12 @@ impl<'a> Linker for GccLinker<'a> {\n             }\n         }\n \n-        if self.sess.target.options.is_like_osx {\n+        if self.sess.target.is_like_osx {\n             if !self.is_ld {\n                 arg.push(\"-Wl,\")\n             }\n             arg.push(\"-exported_symbols_list,\");\n-        } else if self.sess.target.options.is_like_solaris {\n+        } else if self.sess.target.is_like_solaris {\n             if !self.is_ld {\n                 arg.push(\"-Wl,\")\n             }\n@@ -1203,7 +1202,7 @@ impl<'a> Linker for WasmLd<'a> {\n }\n \n fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n-    if let Some(ref exports) = tcx.sess.target.options.override_export_symbols {\n+    if let Some(ref exports) = tcx.sess.target.override_export_symbols {\n         return exports.clone();\n     }\n \n@@ -1293,7 +1292,7 @@ impl<'a> Linker for PtxLinker<'a> {\n         // Provide the linker with fallback to internal `target-cpu`.\n         self.cmd.arg(\"--fallback-arch\").arg(match self.sess.opts.cg.target_cpu {\n             Some(ref s) => s,\n-            None => &self.sess.target.options.cpu,\n+            None => &self.sess.target.cpu,\n         });\n     }\n "}, {"sha": "9a6f8cde1b25d737d9721bfb5f325c842d25380c", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -229,8 +229,7 @@ fn exported_symbols_provider_local(\n         // needs to be exported.\n         // However, on platforms that don't allow for Rust dylibs, having\n         // external linkage is enough for monomorphization to be linked to.\n-        let need_visibility =\n-            tcx.sess.target.options.dynamic_linking && !tcx.sess.target.options.only_cdylib;\n+        let need_visibility = tcx.sess.target.dynamic_linking && !tcx.sess.target.only_cdylib;\n \n         let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n "}, {"sha": "b34bee3358b40615403b29b7dcb2243ed71ba1ef", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -139,7 +139,7 @@ impl ModuleConfig {\n \n         let emit_obj = if !should_emit_obj {\n             EmitObj::None\n-        } else if sess.target.options.obj_is_bitcode\n+        } else if sess.target.obj_is_bitcode\n             || (sess.opts.cg.linker_plugin_lto.enabled() && !no_builtins)\n         {\n             // This case is selected if the target uses objects as bitcode, or\n@@ -221,11 +221,11 @@ impl ModuleConfig {\n                 false\n             ),\n             emit_obj,\n-            bc_cmdline: sess.target.options.bitcode_llvm_cmdline.clone(),\n+            bc_cmdline: sess.target.bitcode_llvm_cmdline.clone(),\n \n             verify_llvm_ir: sess.verify_llvm_ir(),\n             no_prepopulate_passes: sess.opts.cg.no_prepopulate_passes,\n-            no_builtins: no_builtins || sess.target.options.no_builtins,\n+            no_builtins: no_builtins || sess.target.no_builtins,\n \n             // Exclude metadata and allocator modules from time_passes output,\n             // since they throw off the \"LLVM passes\" measurement.\n@@ -252,7 +252,7 @@ impl ModuleConfig {\n                 .opts\n                 .debugging_opts\n                 .merge_functions\n-                .unwrap_or(sess.target.options.merge_functions)\n+                .unwrap_or(sess.target.merge_functions)\n             {\n                 MergeFunctions::Disabled => false,\n                 MergeFunctions::Trampolines | MergeFunctions::Aliases => {\n@@ -388,7 +388,7 @@ fn need_bitcode_in_object(sess: &Session) -> bool {\n     let requested_for_rlib = sess.opts.cg.embed_bitcode\n         && sess.crate_types().contains(&CrateType::Rlib)\n         && sess.opts.output_types.contains_key(&OutputType::Exe);\n-    let forced_by_target = sess.target.options.forces_embed_bitcode;\n+    let forced_by_target = sess.target.forces_embed_bitcode;\n     requested_for_rlib || forced_by_target\n }\n \n@@ -1865,11 +1865,11 @@ fn msvc_imps_needed(tcx: TyCtxt<'_>) -> bool {\n     // something is wrong with commandline arg validation.\n     assert!(\n         !(tcx.sess.opts.cg.linker_plugin_lto.enabled()\n-            && tcx.sess.target.options.is_like_windows\n+            && tcx.sess.target.is_like_windows\n             && tcx.sess.opts.cg.prefer_dynamic)\n     );\n \n-    tcx.sess.target.options.is_like_windows &&\n+    tcx.sess.target.is_like_windows &&\n         tcx.sess.crate_types().iter().any(|ct| *ct == CrateType::Rlib) &&\n     // ThinLTO can't handle this workaround in all cases, so we don't\n     // emit the `__imp_` symbols. Instead we make them unnecessary by disallowing"}, {"sha": "5fe26dbf914022eec3a58f8543e9547fcf255418", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -326,7 +326,7 @@ fn cast_shift_rhs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n /// currently uses SEH-ish unwinding with DWARF info tables to the side (same as\n /// 64-bit MinGW) instead of \"full SEH\".\n pub fn wants_msvc_seh(sess: &Session) -> bool {\n-    sess.target.options.is_like_msvc\n+    sess.target.is_like_msvc\n }\n \n pub fn memcpy_ty<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n@@ -387,7 +387,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     ) -> Bx::Function {\n         // The entry function is either `int main(void)` or `int main(int argc, char **argv)`,\n         // depending on whether the target needs `argc` and `argv` to be passed in.\n-        let llfty = if cx.sess().target.options.main_needs_argc_argv {\n+        let llfty = if cx.sess().target.main_needs_argc_argv {\n             cx.type_func(&[cx.type_int(), cx.type_ptr_to(cx.type_i8p())], cx.type_int())\n         } else {\n             cx.type_func(&[], cx.type_int())\n@@ -459,7 +459,7 @@ fn get_argc_argv<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx,\n     bx: &mut Bx,\n ) -> (Bx::Value, Bx::Value) {\n-    if cx.sess().target.options.main_needs_argc_argv {\n+    if cx.sess().target.main_needs_argc_argv {\n         // Params from native `main()` used as args for rust start function\n         let param_argc = bx.get_param(0);\n         let param_argv = bx.get_param(1);"}, {"sha": "0b49a37907014b44c2760fe9d46b2662a1df4e58", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -33,7 +33,7 @@ pub fn push_debuginfo_type_name<'tcx>(\n ) {\n     // When targeting MSVC, emit C++ style type names for compatibility with\n     // .natvis visualizers (and perhaps other existing native debuggers?)\n-    let cpp_like_names = tcx.sess.target.options.is_like_msvc;\n+    let cpp_like_names = tcx.sess.target.is_like_msvc;\n \n     match *t.kind() {\n         ty::Bool => output.push_str(\"bool\"),"}, {"sha": "c3afc9f048cf56309fb702f92a21f99f8dc3a9a1", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -127,7 +127,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n         if ty == CrateType::Staticlib\n             || (ty == CrateType::Executable\n                 && sess.crt_static(Some(ty))\n-                && !sess.target.options.crt_static_allows_dylibs)\n+                && !sess.target.crt_static_allows_dylibs)\n         {\n             for &cnum in tcx.crates().iter() {\n                 if tcx.dep_kind(cnum).macros_only() {"}, {"sha": "c4c025de8b3c4b99cdd0664f5f44668c1466b1ef", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -373,11 +373,10 @@ impl<'a> CrateLocator<'a> {\n         seen_paths: &mut FxHashSet<PathBuf>,\n     ) -> Result<Option<Library>, CrateError> {\n         // want: crate_name.dir_part() + prefix + crate_name.file_part + \"-\"\n-        let dylib_prefix =\n-            format!(\"{}{}{}\", self.target.options.dll_prefix, self.crate_name, extra_prefix);\n+        let dylib_prefix = format!(\"{}{}{}\", self.target.dll_prefix, self.crate_name, extra_prefix);\n         let rlib_prefix = format!(\"lib{}{}\", self.crate_name, extra_prefix);\n         let staticlib_prefix =\n-            format!(\"{}{}{}\", self.target.options.staticlib_prefix, self.crate_name, extra_prefix);\n+            format!(\"{}{}{}\", self.target.staticlib_prefix, self.crate_name, extra_prefix);\n \n         let mut candidates: FxHashMap<_, (FxHashMap<_, _>, FxHashMap<_, _>, FxHashMap<_, _>)> =\n             Default::default();\n@@ -405,17 +404,14 @@ impl<'a> CrateLocator<'a> {\n                 (&file[(rlib_prefix.len())..(file.len() - \".rlib\".len())], CrateFlavor::Rlib)\n             } else if file.starts_with(&rlib_prefix) && file.ends_with(\".rmeta\") {\n                 (&file[(rlib_prefix.len())..(file.len() - \".rmeta\".len())], CrateFlavor::Rmeta)\n-            } else if file.starts_with(&dylib_prefix)\n-                && file.ends_with(&self.target.options.dll_suffix)\n-            {\n+            } else if file.starts_with(&dylib_prefix) && file.ends_with(&self.target.dll_suffix) {\n                 (\n-                    &file\n-                        [(dylib_prefix.len())..(file.len() - self.target.options.dll_suffix.len())],\n+                    &file[(dylib_prefix.len())..(file.len() - self.target.dll_suffix.len())],\n                     CrateFlavor::Dylib,\n                 )\n             } else {\n                 if file.starts_with(&staticlib_prefix)\n-                    && file.ends_with(&self.target.options.staticlib_suffix)\n+                    && file.ends_with(&self.target.staticlib_suffix)\n                 {\n                     staticlibs\n                         .push(CrateMismatch { path: spf.path.clone(), got: \"static\".to_string() });\n@@ -679,8 +675,8 @@ impl<'a> CrateLocator<'a> {\n             };\n \n             if file.starts_with(\"lib\") && (file.ends_with(\".rlib\") || file.ends_with(\".rmeta\"))\n-                || file.starts_with(&self.target.options.dll_prefix)\n-                    && file.ends_with(&self.target.options.dll_suffix)\n+                || file.starts_with(&self.target.dll_prefix)\n+                    && file.ends_with(&self.target.dll_suffix)\n             {\n                 // Make sure there's at most one rlib and at most one dylib.\n                 // Note to take care and match against the non-canonicalized name:\n@@ -712,8 +708,8 @@ impl<'a> CrateLocator<'a> {\n             crate_name: self.crate_name,\n             root: self.root.cloned(),\n             triple: self.triple,\n-            dll_prefix: self.target.options.dll_prefix.clone(),\n-            dll_suffix: self.target.options.dll_suffix.clone(),\n+            dll_prefix: self.target.dll_prefix.clone(),\n+            dll_suffix: self.target.dll_suffix.clone(),\n             rejected_via_hash: self.rejected_via_hash,\n             rejected_via_triple: self.rejected_via_triple,\n             rejected_via_kind: self.rejected_via_kind,"}, {"sha": "2f7c2c2c405192397eb978ae4512016716d36c33", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -149,7 +149,7 @@ impl Collector<'tcx> {\n             }\n             return;\n         }\n-        let is_osx = self.tcx.sess.target.options.is_like_osx;\n+        let is_osx = self.tcx.sess.target.is_like_osx;\n         if lib.kind == NativeLibKind::Framework && !is_osx {\n             let msg = \"native frameworks are only available on macOS targets\";\n             match span {"}, {"sha": "b5720abc0a284b66a483d9a1cb16ed98ade713aa", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -2775,7 +2775,7 @@ where\n                     // anyway, we control all calls to it in libstd.\n                     Abi::Vector { .. }\n                         if abi != SpecAbi::PlatformIntrinsic\n-                            && cx.tcx().sess.target.options.simd_types_indirect =>\n+                            && cx.tcx().sess.target.simd_types_indirect =>\n                     {\n                         arg.make_indirect();\n                         return;"}, {"sha": "037b80e4bf2bb541e019907c32a668a6a1f80f97", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -532,7 +532,7 @@ fn mono_item_visibility(\n }\n \n fn default_visibility(tcx: TyCtxt<'_>, id: DefId, is_generic: bool) -> Visibility {\n-    if !tcx.sess.target.options.default_hidden_visibility {\n+    if !tcx.sess.target.default_hidden_visibility {\n         return Visibility::Default;\n     }\n "}, {"sha": "4273d60000454164b684574ed160f22090a2c053", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -26,7 +26,7 @@ pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>, items: &mut lang_items::LanguageItem\n     if items.eh_personality().is_none() {\n         items.missing.push(LangItem::EhPersonality);\n     }\n-    if tcx.sess.target.options.is_like_emscripten && items.eh_catch_typeinfo().is_none() {\n+    if tcx.sess.target.is_like_emscripten && items.eh_catch_typeinfo().is_none() {\n         items.missing.push(LangItem::EhCatchTypeinfo);\n     }\n "}, {"sha": "2d39e4540c77f4921db10909988ae83033348903", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -743,7 +743,7 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n     let vendor = &sess.target.target_vendor;\n     let min_atomic_width = sess.target.min_atomic_width();\n     let max_atomic_width = sess.target.max_atomic_width();\n-    let atomic_cas = sess.target.options.atomic_cas;\n+    let atomic_cas = sess.target.atomic_cas;\n     let layout = TargetDataLayout::parse(&sess.target).unwrap_or_else(|err| {\n         sess.fatal(&err);\n     });\n@@ -752,7 +752,7 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n     ret.reserve(6); // the minimum number of insertions\n     // Target bindings.\n     ret.insert((sym::target_os, Some(Symbol::intern(os))));\n-    if let Some(ref fam) = sess.target.options.target_family {\n+    if let Some(ref fam) = sess.target.target_family {\n         ret.insert((sym::target_family, Some(Symbol::intern(fam))));\n         if fam == \"windows\" {\n             ret.insert((sym::windows, None));\n@@ -765,7 +765,7 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n     ret.insert((sym::target_pointer_width, Some(Symbol::intern(&wordsz))));\n     ret.insert((sym::target_env, Some(Symbol::intern(env))));\n     ret.insert((sym::target_vendor, Some(Symbol::intern(vendor))));\n-    if sess.target.options.has_elf_tls {\n+    if sess.target.has_elf_tls {\n         ret.insert((sym::target_thread_local, None));\n     }\n     for &(i, align) in &["}, {"sha": "777eea3f68d02bf8def1da207bd4e1b41d7960b1", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -150,17 +150,15 @@ pub fn filename_for_input(\n     match crate_type {\n         CrateType::Rlib => outputs.out_directory.join(&format!(\"lib{}.rlib\", libname)),\n         CrateType::Cdylib | CrateType::ProcMacro | CrateType::Dylib => {\n-            let (prefix, suffix) =\n-                (&sess.target.options.dll_prefix, &sess.target.options.dll_suffix);\n+            let (prefix, suffix) = (&sess.target.dll_prefix, &sess.target.dll_suffix);\n             outputs.out_directory.join(&format!(\"{}{}{}\", prefix, libname, suffix))\n         }\n         CrateType::Staticlib => {\n-            let (prefix, suffix) =\n-                (&sess.target.options.staticlib_prefix, &sess.target.options.staticlib_suffix);\n+            let (prefix, suffix) = (&sess.target.staticlib_prefix, &sess.target.staticlib_suffix);\n             outputs.out_directory.join(&format!(\"{}{}{}\", prefix, libname, suffix))\n         }\n         CrateType::Executable => {\n-            let suffix = &sess.target.options.exe_suffix;\n+            let suffix = &sess.target.exe_suffix;\n             let out_filename = outputs.path(OutputType::Exe);\n             if suffix.is_empty() { out_filename } else { out_filename.with_extension(&suffix[1..]) }\n         }\n@@ -177,29 +175,29 @@ pub fn filename_for_input(\n /// interaction with Rust code through static library is the only\n /// option for now\n pub fn default_output_for_target(sess: &Session) -> CrateType {\n-    if !sess.target.options.executables { CrateType::Staticlib } else { CrateType::Executable }\n+    if !sess.target.executables { CrateType::Staticlib } else { CrateType::Executable }\n }\n \n /// Checks if target supports crate_type as output\n pub fn invalid_output_for_target(sess: &Session, crate_type: CrateType) -> bool {\n     match crate_type {\n         CrateType::Cdylib | CrateType::Dylib | CrateType::ProcMacro => {\n-            if !sess.target.options.dynamic_linking {\n+            if !sess.target.dynamic_linking {\n                 return true;\n             }\n-            if sess.crt_static(Some(crate_type)) && !sess.target.options.crt_static_allows_dylibs {\n+            if sess.crt_static(Some(crate_type)) && !sess.target.crt_static_allows_dylibs {\n                 return true;\n             }\n         }\n         _ => {}\n     }\n-    if sess.target.options.only_cdylib {\n+    if sess.target.only_cdylib {\n         match crate_type {\n             CrateType::ProcMacro | CrateType::Dylib => return true,\n             _ => {}\n         }\n     }\n-    if !sess.target.options.executables && crate_type == CrateType::Executable {\n+    if !sess.target.executables && crate_type == CrateType::Executable {\n         return true;\n     }\n "}, {"sha": "d0aa280978976f3be31ea242a66d11c440f52bfa", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -663,7 +663,7 @@ impl Session {\n     /// Calculates the flavor of LTO to use for this compilation.\n     pub fn lto(&self) -> config::Lto {\n         // If our target has codegen requirements ignore the command line\n-        if self.target.options.requires_lto {\n+        if self.target.requires_lto {\n             return config::Lto::Fat;\n         }\n \n@@ -731,7 +731,7 @@ impl Session {\n     /// Returns the panic strategy for this compile session. If the user explicitly selected one\n     /// using '-C panic', use that, otherwise use the panic strategy defined by the target.\n     pub fn panic_strategy(&self) -> PanicStrategy {\n-        self.opts.cg.panic.unwrap_or(self.target.options.panic_strategy)\n+        self.opts.cg.panic.unwrap_or(self.target.panic_strategy)\n     }\n     pub fn fewer_names(&self) -> bool {\n         let more_names = self.opts.output_types.contains_key(&OutputType::LlvmAssembly)\n@@ -755,9 +755,9 @@ impl Session {\n \n     /// Check whether this compile session and crate type use static crt.\n     pub fn crt_static(&self, crate_type: Option<CrateType>) -> bool {\n-        if !self.target.options.crt_static_respected {\n+        if !self.target.crt_static_respected {\n             // If the target does not opt in to crt-static support, use its default.\n-            return self.target.options.crt_static_default;\n+            return self.target.crt_static_default;\n         }\n \n         let requested_features = self.opts.cg.target_feature.split(',');\n@@ -774,20 +774,20 @@ impl Session {\n             // We can't check `#![crate_type = \"proc-macro\"]` here.\n             false\n         } else {\n-            self.target.options.crt_static_default\n+            self.target.crt_static_default\n         }\n     }\n \n     pub fn relocation_model(&self) -> RelocModel {\n-        self.opts.cg.relocation_model.unwrap_or(self.target.options.relocation_model)\n+        self.opts.cg.relocation_model.unwrap_or(self.target.relocation_model)\n     }\n \n     pub fn code_model(&self) -> Option<CodeModel> {\n-        self.opts.cg.code_model.or(self.target.options.code_model)\n+        self.opts.cg.code_model.or(self.target.code_model)\n     }\n \n     pub fn tls_model(&self) -> TlsModel {\n-        self.opts.debugging_opts.tls_model.unwrap_or(self.target.options.tls_model)\n+        self.opts.debugging_opts.tls_model.unwrap_or(self.target.tls_model)\n     }\n \n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n@@ -798,7 +798,7 @@ impl Session {\n         } else if let Some(x) = self.opts.cg.force_frame_pointers {\n             x\n         } else {\n-            !self.target.options.eliminate_frame_pointer\n+            !self.target.eliminate_frame_pointer\n         }\n     }\n \n@@ -822,7 +822,7 @@ impl Session {\n         // value, if it is provided, or disable them, if not.\n         if self.panic_strategy() == PanicStrategy::Unwind {\n             true\n-        } else if self.target.options.requires_uwtable {\n+        } else if self.target.requires_uwtable {\n             true\n         } else {\n             self.opts.cg.force_unwind_tables.unwrap_or(false)\n@@ -993,7 +993,7 @@ impl Session {\n         if let Some(n) = self.opts.cli_forced_codegen_units {\n             return n;\n         }\n-        if let Some(n) = self.target.options.default_codegen_units {\n+        if let Some(n) = self.target.default_codegen_units {\n             return n as usize;\n         }\n \n@@ -1078,11 +1078,11 @@ impl Session {\n     pub fn needs_plt(&self) -> bool {\n         // Check if the current target usually needs PLT to be enabled.\n         // The user can use the command line flag to override it.\n-        let needs_plt = self.target.options.needs_plt;\n+        let needs_plt = self.target.needs_plt;\n \n         let dbg_opts = &self.opts.debugging_opts;\n \n-        let relro_level = dbg_opts.relro_level.unwrap_or(self.target.options.relro_level);\n+        let relro_level = dbg_opts.relro_level.unwrap_or(self.target.relro_level);\n \n         // Only enable this optimization by default if full relro is also enabled.\n         // In this case, lazy binding was already unavailable, so nothing is lost.\n@@ -1106,7 +1106,7 @@ impl Session {\n         match self.opts.cg.link_dead_code {\n             Some(explicitly_set) => explicitly_set,\n             None => {\n-                self.opts.debugging_opts.instrument_coverage && !self.target.options.is_like_msvc\n+                self.opts.debugging_opts.instrument_coverage && !self.target.is_like_msvc\n                 // Issue #76038: (rustc `-Clink-dead-code` causes MSVC linker to produce invalid\n                 // binaries when LLVM InstrProf counters are enabled). As described by this issue,\n                 // the \"link dead code\" option produces incorrect binaries when compiled and linked\n@@ -1307,7 +1307,7 @@ pub fn build_session(\n \n     let loader = file_loader.unwrap_or(Box::new(RealFileLoader));\n     let hash_kind = sopts.debugging_opts.src_hash_algorithm.unwrap_or_else(|| {\n-        if target_cfg.options.is_like_msvc {\n+        if target_cfg.is_like_msvc {\n             SourceFileHashAlgorithm::Sha1\n         } else {\n             SourceFileHashAlgorithm::Md5\n@@ -1417,11 +1417,8 @@ pub fn build_session(\n         if candidate.join(\"library/std/src/lib.rs\").is_file() { Some(candidate) } else { None }\n     };\n \n-    let asm_arch = if target_cfg.options.allow_asm {\n-        InlineAsmArch::from_str(&target_cfg.arch).ok()\n-    } else {\n-        None\n-    };\n+    let asm_arch =\n+        if target_cfg.allow_asm { InlineAsmArch::from_str(&target_cfg.arch).ok() } else { None };\n \n     let sess = Session {\n         target: target_cfg,\n@@ -1487,7 +1484,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     // the `dllimport` attributes and `__imp_` symbols in that case.\n     if sess.opts.cg.linker_plugin_lto.enabled()\n         && sess.opts.cg.prefer_dynamic\n-        && sess.target.options.is_like_windows\n+        && sess.target.is_like_windows\n     {\n         sess.err(\n             \"Linker plugin based LTO is not supported together with \\\n@@ -1515,7 +1512,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n             );\n         }\n \n-        if sess.target.options.requires_uwtable && !include_uwtables {\n+        if sess.target.requires_uwtable && !include_uwtables {\n             sess.err(\n                 \"target requires unwind tables, they cannot be disabled with \\\n                      `-C force-unwind-tables=no`.\",\n@@ -1530,7 +1527,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     // We should only display this error if we're actually going to run PGO.\n     // If we're just supposed to print out some data, don't show the error (#61002).\n     if sess.opts.cg.profile_generate.enabled()\n-        && sess.target.options.is_like_msvc\n+        && sess.target.is_like_msvc\n         && sess.panic_strategy() == PanicStrategy::Unwind\n         && sess.opts.prints.iter().all(|&p| p == PrintRequest::NativeStaticLibs)\n     {"}, {"sha": "3520a52db2eb54eac7f29e473cb9064de419c1fe", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -562,7 +562,7 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n             \"x86_64\" => {\n                 if abi == spec::abi::Abi::SysV64 {\n                     x86_64::compute_abi_info(cx, self);\n-                } else if abi == spec::abi::Abi::Win64 || cx.target_spec().options.is_like_windows {\n+                } else if abi == spec::abi::Abi::Win64 || cx.target_spec().is_like_windows {\n                     x86_win64::compute_abi_info(self);\n                 } else {\n                     x86_64::compute_abi_info(cx, self);"}, {"sha": "782c661c31fdb5b9f7aa0d1bcdf7443baf3ffe3f", "filename": "compiler/rustc_target/src/abi/call/riscv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Friscv.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -323,7 +323,7 @@ where\n     Ty: TyAndLayoutMethods<'a, C> + Copy,\n     C: LayoutOf<Ty = Ty, TyAndLayout = TyAndLayout<'a, Ty>> + HasDataLayout + HasTargetSpec,\n {\n-    let flen = match &cx.target_spec().options.llvm_abiname[..] {\n+    let flen = match &cx.target_spec().llvm_abiname[..] {\n         \"ilp32f\" | \"lp64f\" => 32,\n         \"ilp32d\" | \"lp64d\" => 64,\n         _ => 0,"}, {"sha": "07bf1e94c617eee072e45bd3982fcc4bc3e34573", "filename": "compiler/rustc_target/src/abi/call/x86.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fx86.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -41,10 +41,10 @@ where\n             // http://www.angelcode.com/dev/callconv/callconv.html\n             // Clang's ABI handling is in lib/CodeGen/TargetInfo.cpp\n             let t = cx.target_spec();\n-            if t.options.abi_return_struct_as_int {\n+            if t.abi_return_struct_as_int {\n                 // According to Clang, everyone but MSVC returns single-element\n                 // float aggregates directly in a floating-point register.\n-                if !t.options.is_like_msvc && is_single_fp_element(cx, fn_abi.ret.layout) {\n+                if !t.is_like_msvc && is_single_fp_element(cx, fn_abi.ret.layout) {\n                     match fn_abi.ret.layout.size.bytes() {\n                         4 => fn_abi.ret.cast_to(Reg::f32()),\n                         8 => fn_abi.ret.cast_to(Reg::f64()),"}, {"sha": "28000916e0c30a50c7927734948f5302824b5756", "filename": "compiler/rustc_target/src/asm/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fasm%2Farm.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -61,7 +61,7 @@ impl ArmInlineAsmRegClass {\n \n // This uses the same logic as useR7AsFramePointer in LLVM\n fn frame_pointer_is_r7(mut has_feature: impl FnMut(&str) -> bool, target: &Target) -> bool {\n-    target.options.is_like_osx || (!target.options.is_like_windows && has_feature(\"thumb-mode\"))\n+    target.is_like_osx || (!target.is_like_windows && has_feature(\"thumb-mode\"))\n }\n \n fn frame_pointer_r11("}, {"sha": "b1adefe1a51e70406c13a92e18e967500af0e0c7", "filename": "compiler/rustc_target/src/spec/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -3,7 +3,6 @@ use super::{wasm32_unknown_emscripten, LinkerFlavor, Target};\n pub fn target() -> Target {\n     let mut target = wasm32_unknown_emscripten::target();\n     target\n-        .options\n         .post_link_args\n         .entry(LinkerFlavor::Em)\n         .or_default()"}, {"sha": "4a7779a6df0836b80fb3646b5b83915ac739a625", "filename": "compiler/rustc_target/src/spec/i586_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_pc_windows_msvc.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::i686_pc_windows_msvc::target();\n-    base.options.cpu = \"pentium\".to_string();\n+    base.cpu = \"pentium\".to_string();\n     base.llvm_target = \"i586-pc-windows-msvc\".to_string();\n     base\n }"}, {"sha": "7c92dda8a9df75d7e138dcbb80ae93d08ac53828", "filename": "compiler/rustc_target/src/spec/i586_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_gnu.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::i686_unknown_linux_gnu::target();\n-    base.options.cpu = \"pentium\".to_string();\n+    base.cpu = \"pentium\".to_string();\n     base.llvm_target = \"i586-unknown-linux-gnu\".to_string();\n     base\n }"}, {"sha": "1fea02bbee88f3de36913f05438887f89db4ecf8", "filename": "compiler/rustc_target/src/spec/i586_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi586_unknown_linux_musl.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::i686_unknown_linux_musl::target();\n-    base.options.cpu = \"pentium\".to_string();\n+    base.cpu = \"pentium\".to_string();\n     base.llvm_target = \"i586-unknown-linux-musl\".to_string();\n     base\n }"}, {"sha": "bd99a40813eabb2978d7239e15ff514d4466deb7", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 46, "deletions": 40, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -38,7 +38,7 @@ use crate::spec::abi::{lookup as lookup_abi, Abi};\n use crate::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_serialize::json::{Json, ToJson};\n use std::collections::BTreeMap;\n-use std::ops::Deref;\n+use std::ops::{Deref, DerefMut};\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n use std::{fmt, io};\n@@ -446,7 +446,7 @@ macro_rules! supported_targets {\n                 $( $($triple)|+ => $module::target(), )+\n                 _ => return None,\n             };\n-            t.options.is_builtin = true;\n+            t.is_builtin = true;\n             debug!(\"got builtin target: {:?}\", t);\n             Some(t)\n         }\n@@ -691,6 +691,10 @@ impl HasTargetSpec for Target {\n ///\n /// This has an implementation of `Default`, see each field for what the default is. In general,\n /// these try to take \"minimal defaults\" that don't assume anything about the runtime they run in.\n+///\n+/// `TargetOptions` as a separate structure is mostly an implementation detail of `Target`\n+/// construction, all its fields logically belong to `Target` and available from `Target`\n+/// through `Deref` impls.\n #[derive(PartialEq, Clone, Debug)]\n pub struct TargetOptions {\n     /// Whether the target is built-in or loaded from a custom target specification.\n@@ -1094,13 +1098,18 @@ impl Deref for Target {\n         &self.options\n     }\n }\n+impl DerefMut for Target {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.options\n+    }\n+}\n \n impl Target {\n     /// Given a function ABI, turn it into the correct ABI for this target.\n     pub fn adjust_abi(&self, abi: Abi) -> Abi {\n         match abi {\n             Abi::System => {\n-                if self.options.is_like_windows && self.arch == \"x86\" {\n+                if self.is_like_windows && self.arch == \"x86\" {\n                     Abi::Stdcall\n                 } else {\n                     Abi::C\n@@ -1110,7 +1119,7 @@ impl Target {\n             // See https://docs.microsoft.com/en-us/cpp/cpp/argument-passing-and-naming-conventions\n             // and the individual pages for __stdcall et al.\n             Abi::Stdcall | Abi::Fastcall | Abi::Vectorcall | Abi::Thiscall => {\n-                if self.options.is_like_windows && self.arch != \"x86\" { Abi::C } else { abi }\n+                if self.is_like_windows && self.arch != \"x86\" { Abi::C } else { abi }\n             }\n             Abi::EfiApi => {\n                 if self.arch == \"x86_64\" {\n@@ -1126,17 +1135,17 @@ impl Target {\n     /// Minimum integer size in bits that this target can perform atomic\n     /// operations on.\n     pub fn min_atomic_width(&self) -> u64 {\n-        self.options.min_atomic_width.unwrap_or(8)\n+        self.min_atomic_width.unwrap_or(8)\n     }\n \n     /// Maximum integer size in bits that this target can perform atomic\n     /// operations on.\n     pub fn max_atomic_width(&self) -> u64 {\n-        self.options.max_atomic_width.unwrap_or_else(|| self.pointer_width.into())\n+        self.max_atomic_width.unwrap_or_else(|| self.pointer_width.into())\n     }\n \n     pub fn is_abi_supported(&self, abi: Abi) -> bool {\n-        abi.generic() || !self.options.unsupported_abis.contains(&abi)\n+        abi.generic() || !self.unsupported_abis.contains(&abi)\n     }\n \n     /// Loads a target descriptor from a JSON object.\n@@ -1169,19 +1178,19 @@ impl Target {\n             ($key_name:ident) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(s) = obj.find(&name).and_then(Json::as_string) {\n-                    base.options.$key_name = s.to_string();\n+                    base.$key_name = s.to_string();\n                 }\n             } );\n             ($key_name:ident = $json_name:expr) => ( {\n                 let name = $json_name;\n                 if let Some(s) = obj.find(&name).and_then(Json::as_string) {\n-                    base.options.$key_name = s.to_string();\n+                    base.$key_name = s.to_string();\n                 }\n             } );\n             ($key_name:ident, bool) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(s) = obj.find(&name).and_then(Json::as_boolean) {\n-                    base.options.$key_name = s;\n+                    base.$key_name = s;\n                 }\n             } );\n             ($key_name:ident, Option<u32>) => ( {\n@@ -1190,20 +1199,20 @@ impl Target {\n                     if s < 1 || s > 5 {\n                         return Err(\"Not a valid DWARF version number\".to_string());\n                     }\n-                    base.options.$key_name = Some(s as u32);\n+                    base.$key_name = Some(s as u32);\n                 }\n             } );\n             ($key_name:ident, Option<u64>) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(s) = obj.find(&name).and_then(Json::as_u64) {\n-                    base.options.$key_name = Some(s);\n+                    base.$key_name = Some(s);\n                 }\n             } );\n             ($key_name:ident, MergeFunctions) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match s.parse::<MergeFunctions>() {\n-                        Ok(mergefunc) => base.options.$key_name = mergefunc,\n+                        Ok(mergefunc) => base.$key_name = mergefunc,\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for \\\n                                                       merge-functions. Use 'disabled', \\\n                                                       'trampolines', or 'aliases'.\",\n@@ -1216,7 +1225,7 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match s.parse::<RelocModel>() {\n-                        Ok(relocation_model) => base.options.$key_name = relocation_model,\n+                        Ok(relocation_model) => base.$key_name = relocation_model,\n                         _ => return Some(Err(format!(\"'{}' is not a valid relocation model. \\\n                                                       Run `rustc --print relocation-models` to \\\n                                                       see the list of supported values.\", s))),\n@@ -1228,7 +1237,7 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match s.parse::<CodeModel>() {\n-                        Ok(code_model) => base.options.$key_name = Some(code_model),\n+                        Ok(code_model) => base.$key_name = Some(code_model),\n                         _ => return Some(Err(format!(\"'{}' is not a valid code model. \\\n                                                       Run `rustc --print code-models` to \\\n                                                       see the list of supported values.\", s))),\n@@ -1240,7 +1249,7 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match s.parse::<TlsModel>() {\n-                        Ok(tls_model) => base.options.$key_name = tls_model,\n+                        Ok(tls_model) => base.$key_name = tls_model,\n                         _ => return Some(Err(format!(\"'{}' is not a valid TLS model. \\\n                                                       Run `rustc --print tls-models` to \\\n                                                       see the list of supported values.\", s))),\n@@ -1252,8 +1261,8 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match s {\n-                        \"unwind\" => base.options.$key_name = PanicStrategy::Unwind,\n-                        \"abort\" => base.options.$key_name = PanicStrategy::Abort,\n+                        \"unwind\" => base.$key_name = PanicStrategy::Unwind,\n+                        \"abort\" => base.$key_name = PanicStrategy::Abort,\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for \\\n                                                       panic-strategy. Use 'unwind' or 'abort'.\",\n                                                      s))),\n@@ -1265,7 +1274,7 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match s.parse::<RelroLevel>() {\n-                        Ok(level) => base.options.$key_name = level,\n+                        Ok(level) => base.$key_name = level,\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for \\\n                                                       relro-level. Use 'full', 'partial, or 'off'.\",\n                                                       s))),\n@@ -1276,23 +1285,23 @@ impl Target {\n             ($key_name:ident, list) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(v) = obj.find(&name).and_then(Json::as_array) {\n-                    base.options.$key_name = v.iter()\n+                    base.$key_name = v.iter()\n                         .map(|a| a.as_string().unwrap().to_string())\n                         .collect();\n                 }\n             } );\n             ($key_name:ident, opt_list) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(v) = obj.find(&name).and_then(Json::as_array) {\n-                    base.options.$key_name = Some(v.iter()\n+                    base.$key_name = Some(v.iter()\n                         .map(|a| a.as_string().unwrap().to_string())\n                         .collect());\n                 }\n             } );\n             ($key_name:ident, optional) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 if let Some(o) = obj.find(&name[..]) {\n-                    base.options.$key_name = o\n+                    base.$key_name = o\n                         .as_string()\n                         .map(|s| s.to_string() );\n                 }\n@@ -1301,7 +1310,7 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     if let Some(flavor) = LldFlavor::from_str(&s) {\n-                        base.options.$key_name = flavor;\n+                        base.$key_name = flavor;\n                     } else {\n                         return Some(Err(format!(\n                             \"'{}' is not a valid value for lld-flavor. \\\n@@ -1315,7 +1324,7 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match LinkerFlavor::from_str(s) {\n-                        Some(linker_flavor) => base.options.$key_name = linker_flavor,\n+                        Some(linker_flavor) => base.$key_name = linker_flavor,\n                         _ => return Some(Err(format!(\"'{}' is not a valid value for linker-flavor. \\\n                                                       Use {}\", s, LinkerFlavor::one_of()))),\n                     }\n@@ -1326,7 +1335,7 @@ impl Target {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n                     match s.parse::<CrtObjectsFallback>() {\n-                        Ok(fallback) => base.options.$key_name = Some(fallback),\n+                        Ok(fallback) => base.$key_name = Some(fallback),\n                         _ => return Some(Err(format!(\"'{}' is not a valid CRT objects fallback. \\\n                                                       Use 'musl', 'mingw' or 'wasm'\", s))),\n                     }\n@@ -1358,7 +1367,7 @@ impl Target {\n \n                         args.insert(kind, v);\n                     }\n-                    base.options.$key_name = args;\n+                    base.$key_name = args;\n                 }\n             } );\n             ($key_name:ident, link_args) => ( {\n@@ -1385,7 +1394,7 @@ impl Target {\n \n                         args.insert(flavor, v);\n                     }\n-                    base.options.$key_name = args;\n+                    base.$key_name = args;\n                 }\n             } );\n             ($key_name:ident, env) => ( {\n@@ -1397,7 +1406,7 @@ impl Target {\n                             if p.len() == 2 {\n                                 let k = p[0].to_string();\n                                 let v = p[1].to_string();\n-                                base.options.$key_name.push((k, v));\n+                                base.$key_name.push((k, v));\n                             }\n                         }\n                     }\n@@ -1513,7 +1522,7 @@ impl Target {\n                                 ));\n                             }\n \n-                            base.options.unsupported_abis.push(abi)\n+                            base.unsupported_abis.push(abi)\n                         }\n                         None => {\n                             return Err(format!(\n@@ -1602,21 +1611,20 @@ impl ToJson for Target {\n         macro_rules! target_option_val {\n             ($attr:ident) => {{\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                if default.$attr != self.options.$attr {\n-                    d.insert(name, self.options.$attr.to_json());\n+                if default.$attr != self.$attr {\n+                    d.insert(name, self.$attr.to_json());\n                 }\n             }};\n             ($attr:ident, $key_name:expr) => {{\n                 let name = $key_name;\n-                if default.$attr != self.options.$attr {\n-                    d.insert(name.to_string(), self.options.$attr.to_json());\n+                if default.$attr != self.$attr {\n+                    d.insert(name.to_string(), self.$attr.to_json());\n                 }\n             }};\n             (link_args - $attr:ident) => {{\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                if default.$attr != self.options.$attr {\n+                if default.$attr != self.$attr {\n                     let obj = self\n-                        .options\n                         .$attr\n                         .iter()\n                         .map(|(k, v)| (k.desc().to_owned(), v.clone()))\n@@ -1626,9 +1634,8 @@ impl ToJson for Target {\n             }};\n             (env - $attr:ident) => {{\n                 let name = (stringify!($attr)).replace(\"_\", \"-\");\n-                if default.$attr != self.options.$attr {\n+                if default.$attr != self.$attr {\n                     let obj = self\n-                        .options\n                         .$attr\n                         .iter()\n                         .map(|&(ref k, ref v)| k.clone() + \"=\" + &v)\n@@ -1736,11 +1743,10 @@ impl ToJson for Target {\n         target_option_val!(eh_frame_header);\n         target_option_val!(has_thumb_interworking);\n \n-        if default.unsupported_abis != self.options.unsupported_abis {\n+        if default.unsupported_abis != self.unsupported_abis {\n             d.insert(\n                 \"unsupported-abis\".to_string(),\n-                self.options\n-                    .unsupported_abis\n+                self.unsupported_abis\n                     .iter()\n                     .map(|&name| Abi::name(name).to_json())\n                     .collect::<Vec<_>>()"}, {"sha": "f348df7d5a716ddd9dfc49296134aebe52ae9296", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -14,27 +14,27 @@ impl Target {\n         assert_eq!(\n             self.linker_flavor == LinkerFlavor::Msvc\n                 || self.linker_flavor == LinkerFlavor::Lld(LldFlavor::Link),\n-            self.options.lld_flavor == LldFlavor::Link,\n+            self.lld_flavor == LldFlavor::Link,\n         );\n         for args in &[\n-            &self.options.pre_link_args,\n-            &self.options.late_link_args,\n-            &self.options.late_link_args_dynamic,\n-            &self.options.late_link_args_static,\n-            &self.options.post_link_args,\n+            &self.pre_link_args,\n+            &self.late_link_args,\n+            &self.late_link_args_dynamic,\n+            &self.late_link_args_static,\n+            &self.post_link_args,\n         ] {\n             assert_eq!(\n                 args.get(&LinkerFlavor::Msvc),\n                 args.get(&LinkerFlavor::Lld(LldFlavor::Link)),\n             );\n             if args.contains_key(&LinkerFlavor::Msvc) {\n-                assert_eq!(self.options.lld_flavor, LldFlavor::Link);\n+                assert_eq!(self.lld_flavor, LldFlavor::Link);\n             }\n         }\n         assert!(\n-            (self.options.pre_link_objects_fallback.is_empty()\n-                && self.options.post_link_objects_fallback.is_empty())\n-                || self.options.crt_objects_fallback.is_some()\n+            (self.pre_link_objects_fallback.is_empty()\n+                && self.post_link_objects_fallback.is_empty())\n+                || self.crt_objects_fallback.is_some()\n         );\n     }\n }"}, {"sha": "b431de90369444f0c84a95b38520794bc495ce91", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf66988aa1677d018928c271fed563792f921d28/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=bf66988aa1677d018928c271fed563792f921d28", "patch": "@@ -2653,7 +2653,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                             set.path.segments.iter().map(|x| x.ident.name).collect::<Vec<_>>();\n                         match segments.as_slice() {\n                             [sym::arm, sym::a32] | [sym::arm, sym::t32] => {\n-                                if !tcx.sess.target.options.has_thumb_interworking {\n+                                if !tcx.sess.target.has_thumb_interworking {\n                                     struct_span_err!(\n                                         tcx.sess.diagnostic(),\n                                         attr.span,"}]}