{"sha": "5b638c1d3751b7ab31cac9739add516bdf39e10a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNjM4YzFkMzc1MWI3YWIzMWNhYzk3MzlhZGQ1MTZiZGYzOWUxMGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-06T16:41:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-06T16:41:36Z"}, "message": "Auto merge of #85086 - petrochenkov:linkord2, r=nagisa\n\nlinker: Reorder linker arguments\n\n- Split arguments into order-independent and order-dependent, to define more precisely what (pre-,post-,late-,)link-args mean.\n- Add some comments.", "tree": {"sha": "8b5c64192eaabd0e2f9382ce560744f0b34466c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b5c64192eaabd0e2f9382ce560744f0b34466c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b638c1d3751b7ab31cac9739add516bdf39e10a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b638c1d3751b7ab31cac9739add516bdf39e10a", "html_url": "https://github.com/rust-lang/rust/commit/5b638c1d3751b7ab31cac9739add516bdf39e10a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b638c1d3751b7ab31cac9739add516bdf39e10a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86b0bafbf1e0fab3aa433c10256919d1b6ba46ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/86b0bafbf1e0fab3aa433c10256919d1b6ba46ac", "html_url": "https://github.com/rust-lang/rust/commit/86b0bafbf1e0fab3aa433c10256919d1b6ba46ac"}, {"sha": "3eab2805676b9be331ae7a1cfe5bb4124dc6a2d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eab2805676b9be331ae7a1cfe5bb4124dc6a2d3", "html_url": "https://github.com/rust-lang/rust/commit/3eab2805676b9be331ae7a1cfe5bb4124dc6a2d3"}], "stats": {"total": 329, "additions": 164, "deletions": 165}, "files": [{"sha": "f9f59be1e8b6ac518ad4033164d8df64b6246c0c", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 160, "deletions": 136, "changes": 296, "blob_url": "https://github.com/rust-lang/rust/blob/5b638c1d3751b7ab31cac9739add516bdf39e10a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b638c1d3751b7ab31cac9739add516bdf39e10a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=5b638c1d3751b7ab31cac9739add516bdf39e10a", "patch": "@@ -1058,7 +1058,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n     }\n }\n \n-fn link_sanitizers(sess: &Session, crate_type: CrateType, linker: &mut dyn Linker) {\n+fn add_sanitizer_libraries(sess: &Session, crate_type: CrateType, linker: &mut dyn Linker) {\n     // On macOS the runtimes are distributed as dylibs which should be linked to\n     // both executables and dynamic shared objects. Everywhere else the runtimes\n     // are currently distributed as static liraries which should be linked to\n@@ -1680,55 +1680,6 @@ fn add_local_crate_metadata_objects(\n     }\n }\n \n-/// Link native libraries corresponding to the current crate and all libraries corresponding to\n-/// all its dependency crates.\n-/// FIXME: Consider combining this with the functions above adding object files for the local crate.\n-fn link_local_crate_native_libs_and_dependent_crate_libs<'a, B: ArchiveBuilder<'a>>(\n-    cmd: &mut dyn Linker,\n-    sess: &'a Session,\n-    crate_type: CrateType,\n-    codegen_results: &CodegenResults,\n-    tmpdir: &Path,\n-) {\n-    // Take careful note of the ordering of the arguments we pass to the linker\n-    // here. Linkers will assume that things on the left depend on things to the\n-    // right. Things on the right cannot depend on things on the left. This is\n-    // all formally implemented in terms of resolving symbols (libs on the right\n-    // resolve unknown symbols of libs on the left, but not vice versa).\n-    //\n-    // For this reason, we have organized the arguments we pass to the linker as\n-    // such:\n-    //\n-    // 1. The local object that LLVM just generated\n-    // 2. Local native libraries\n-    // 3. Upstream rust libraries\n-    // 4. Upstream native libraries\n-    //\n-    // The rationale behind this ordering is that those items lower down in the\n-    // list can't depend on items higher up in the list. For example nothing can\n-    // depend on what we just generated (e.g., that'd be a circular dependency).\n-    // Upstream rust libraries are not allowed to depend on our local native\n-    // libraries as that would violate the structure of the DAG, in that\n-    // scenario they are required to link to them as well in a shared fashion.\n-    //\n-    // Note that upstream rust libraries may contain native dependencies as\n-    // well, but they also can't depend on what we just started to add to the\n-    // link line. And finally upstream native libraries can't depend on anything\n-    // in this DAG so far because they're only dylibs and dylibs can only depend\n-    // on other dylibs (e.g., other native deps).\n-    //\n-    // If -Zlink-native-libraries=false is set, then the assumption is that an\n-    // external build system already has the native dependencies defined, and it\n-    // will provide them to the linker itself.\n-    if sess.opts.debugging_opts.link_native_libraries {\n-        add_local_native_libraries(cmd, sess, codegen_results);\n-    }\n-    add_upstream_rust_crates::<B>(cmd, sess, codegen_results, crate_type, tmpdir);\n-    if sess.opts.debugging_opts.link_native_libraries {\n-        add_upstream_native_libraries(cmd, sess, codegen_results, crate_type);\n-    }\n-}\n-\n /// Add sysroot and other globally set directories to the directory search list.\n fn add_library_search_dirs(cmd: &mut dyn Linker, sess: &Session, self_contained: bool) {\n     // The default library location, we need this to find the runtime.\n@@ -1787,12 +1738,13 @@ fn add_rpath_args(\n }\n \n /// Produce the linker command line containing linker path and arguments.\n-/// `NO-OPT-OUT` marks the arguments that cannot be removed from the command line\n-/// by the user without creating a custom target specification.\n-/// `OBJECT-FILES` specify whether the arguments can add object files.\n-/// `CUSTOMIZATION-POINT` means that arbitrary arguments defined by the user\n-/// or by the target spec can be inserted here.\n-/// `AUDIT-ORDER` - need to figure out whether the option is order-dependent or not.\n+///\n+/// When comments in the function say \"order-(in)dependent\" they mean order-dependence between\n+/// options and libraries/object files. For example `--whole-archive` (order-dependent) applies\n+/// to specific libraries passed after it, and `-o` (output file, order-independent) applies\n+/// to the linking process as a whole.\n+/// Order-independent options may still override each other in order-dependent fashion,\n+/// e.g `--foo=yes --foo=no` may be equivalent to `--foo=no`.\n fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     path: &Path,\n     flavor: LinkerFlavor,\n@@ -1810,16 +1762,151 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     let cmd = &mut *codegen_results.linker_info.to_linker(base_cmd, &sess, flavor);\n     let link_output_kind = link_output_kind(sess, crate_type);\n \n-    // NO-OPT-OUT, OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n+    // ------------ Early order-dependent options ------------\n+\n+    // If we're building something like a dynamic library then some platforms\n+    // need to make sure that all symbols are exported correctly from the\n+    // dynamic library.\n+    // Must be passed before any libraries to prevent the symbols to export from being thrown away,\n+    // at least on some platforms (e.g. windows-gnu).\n+    cmd.export_symbols(tmpdir, crate_type);\n+\n+    // Can be used for adding custom CRT objects or overriding order-dependent options above.\n+    // FIXME: In practice built-in target specs use this for arbitrary order-independent options,\n+    // introduce a target spec option for order-independent linker options and migrate built-in\n+    // specs to it.\n     add_pre_link_args(cmd, sess, flavor);\n \n-    // NO-OPT-OUT, OBJECT-FILES-NO\n+    // ------------ Object code and libraries, order-dependent ------------\n+\n+    // Pre-link CRT objects.\n+    add_pre_link_objects(cmd, sess, link_output_kind, crt_objects_fallback);\n+\n+    // Sanitizer libraries.\n+    add_sanitizer_libraries(sess, crate_type, cmd);\n+\n+    // Object code from the current crate.\n+    // Take careful note of the ordering of the arguments we pass to the linker\n+    // here. Linkers will assume that things on the left depend on things to the\n+    // right. Things on the right cannot depend on things on the left. This is\n+    // all formally implemented in terms of resolving symbols (libs on the right\n+    // resolve unknown symbols of libs on the left, but not vice versa).\n+    //\n+    // For this reason, we have organized the arguments we pass to the linker as\n+    // such:\n+    //\n+    // 1. The local object that LLVM just generated\n+    // 2. Local native libraries\n+    // 3. Upstream rust libraries\n+    // 4. Upstream native libraries\n+    //\n+    // The rationale behind this ordering is that those items lower down in the\n+    // list can't depend on items higher up in the list. For example nothing can\n+    // depend on what we just generated (e.g., that'd be a circular dependency).\n+    // Upstream rust libraries are not supposed to depend on our local native\n+    // libraries as that would violate the structure of the DAG, in that\n+    // scenario they are required to link to them as well in a shared fashion.\n+    // (The current implementation still doesn't prevent it though, see the FIXME below.)\n+    //\n+    // Note that upstream rust libraries may contain native dependencies as\n+    // well, but they also can't depend on what we just started to add to the\n+    // link line. And finally upstream native libraries can't depend on anything\n+    // in this DAG so far because they can only depend on other native libraries\n+    // and such dependencies are also required to be specified.\n+    add_local_crate_regular_objects(cmd, codegen_results);\n+    add_local_crate_metadata_objects(cmd, crate_type, codegen_results);\n+    add_local_crate_allocator_objects(cmd, codegen_results);\n+\n+    // Avoid linking to dynamic libraries unless they satisfy some undefined symbols\n+    // at the point at which they are specified on the command line.\n+    // Must be passed before any (dynamic) libraries to have effect on them.\n+    // On Solaris-like systems, `-z ignore` acts as both `--as-needed` and `--gc-sections`\n+    // so it will ignore unreferenced ELF sections from relocatable objects.\n+    // For that reason, we put this flag after metadata objects as they would otherwise be removed.\n+    // FIXME: Support more fine-grained dead code removal on Solaris/illumos\n+    // and move this option back to the top.\n+    cmd.add_as_needed();\n+\n+    // FIXME: Move this below to other native libraries\n+    // (or alternatively link all native libraries after their respective crates).\n+    // This change is somewhat breaking in practice due to local static libraries being linked\n+    // as whole-archive (#85144), so removing whole-archive may be a pre-requisite.\n+    if sess.opts.debugging_opts.link_native_libraries {\n+        add_local_native_libraries(cmd, sess, codegen_results);\n+    }\n+\n+    // Rust libraries.\n+    add_upstream_rust_crates::<B>(cmd, sess, codegen_results, crate_type, tmpdir);\n+\n+    // Native libraries linked with `#[link]` attributes at and `-l` command line options.\n+    // If -Zlink-native-libraries=false is set, then the assumption is that an\n+    // external build system already has the native dependencies defined, and it\n+    // will provide them to the linker itself.\n+    if sess.opts.debugging_opts.link_native_libraries {\n+        add_upstream_native_libraries(cmd, sess, codegen_results, crate_type);\n+    }\n+\n+    // Library linking above uses some global state for things like `-Bstatic`/`-Bdynamic` to make\n+    // command line shorter, reset it to default here before adding more libraries.\n+    cmd.reset_per_library_state();\n+\n+    // FIXME: Built-in target specs occasionally use this for linking system libraries,\n+    // eliminate all such uses by migrating them to `#[link]` attributes in `lib(std,c,unwind)`\n+    // and remove the option.\n+    add_late_link_args(cmd, sess, flavor, crate_type, codegen_results);\n+\n+    // ------------ Arbitrary order-independent options ------------\n+\n+    // Add order-independent options determined by rustc from its compiler options,\n+    // target properties and source code.\n+    add_order_independent_options(\n+        cmd,\n+        sess,\n+        link_output_kind,\n+        crt_objects_fallback,\n+        flavor,\n+        crate_type,\n+        codegen_results,\n+        out_filename,\n+        tmpdir,\n+    );\n+\n+    // Can be used for arbitrary order-independent options.\n+    // In practice may also be occasionally used for linking native libraries.\n+    // Passed after compiler-generated options to support manual overriding when necessary.\n+    add_user_defined_link_args(cmd, sess);\n+\n+    // ------------ Object code and libraries, order-dependent ------------\n+\n+    // Post-link CRT objects.\n+    add_post_link_objects(cmd, sess, link_output_kind, crt_objects_fallback);\n+\n+    // ------------ Late order-dependent options ------------\n+\n+    // Doesn't really make sense.\n+    // FIXME: In practice built-in target specs use this for arbitrary order-independent options,\n+    // introduce a target spec option for order-independent linker options, migrate built-in specs\n+    // to it and remove the option.\n+    add_post_link_args(cmd, sess, flavor);\n+\n+    cmd.take_cmd()\n+}\n+\n+fn add_order_independent_options(\n+    cmd: &mut dyn Linker,\n+    sess: &Session,\n+    link_output_kind: LinkOutputKind,\n+    crt_objects_fallback: bool,\n+    flavor: LinkerFlavor,\n+    crate_type: CrateType,\n+    codegen_results: &CodegenResults,\n+    out_filename: &Path,\n+    tmpdir: &Path,\n+) {\n     add_apple_sdk(cmd, sess, flavor);\n \n-    // NO-OPT-OUT\n     add_link_script(cmd, sess, tmpdir, crate_type);\n \n-    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.target.is_like_fuchsia && crate_type == CrateType::Executable {\n         let prefix = if sess.opts.debugging_opts.sanitizer.contains(SanitizerSet::ADDRESS) {\n             \"asan/\"\n@@ -1829,36 +1916,17 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         cmd.arg(format!(\"--dynamic-linker={}ld.so.1\", prefix));\n     }\n \n-    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.target.eh_frame_header {\n         cmd.add_eh_frame_header();\n     }\n \n-    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     // Make the binary compatible with data execution prevention schemes.\n     cmd.add_no_exec();\n \n-    // OBJECT-FILES-YES\n-    add_local_crate_metadata_objects(cmd, crate_type, codegen_results);\n-\n-    // NO-OPT-OUT, OBJECT-FILES-NO\n-    // Avoid linking to dynamic libraries unless they satisfy some undefined symbols\n-    // at the point at which they are specified on the command line.\n-    // Must be passed before any dynamic libraries.\n-    // On solaris-like systems, this also will ignore unreferenced ELF sections\n-    // from relocatable objects. For that reason, we move the metadata objects\n-    // to before this flag as they would otherwise be removed.\n-    cmd.add_as_needed();\n-\n-    // NO-OPT-OUT, OBJECT-FILES-NO\n     if crt_objects_fallback {\n         cmd.no_crt_objects();\n     }\n \n-    // NO-OPT-OUT, OBJECT-FILES-YES\n-    add_pre_link_objects(cmd, sess, link_output_kind, crt_objects_fallback);\n-\n-    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.target.is_like_emscripten {\n         cmd.arg(\"-s\");\n         cmd.arg(if sess.panic_strategy() == PanicStrategy::Abort {\n@@ -1868,108 +1936,64 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         });\n     }\n \n-    // OBJECT-FILES-YES, AUDIT-ORDER\n-    link_sanitizers(sess, crate_type, cmd);\n+    if flavor == LinkerFlavor::PtxLinker {\n+        // Provide the linker with fallback to internal `target-cpu`.\n+        cmd.arg(\"--fallback-arch\");\n+        cmd.arg(&codegen_results.linker_info.target_cpu);\n+    } else if flavor == LinkerFlavor::BpfLinker {\n+        cmd.arg(\"--cpu\");\n+        cmd.arg(&codegen_results.linker_info.target_cpu);\n+        cmd.arg(\"--cpu-features\");\n+        cmd.arg(match &sess.opts.cg.target_feature {\n+            feat if !feat.is_empty() => feat,\n+            _ => &sess.target.options.features,\n+        });\n+    }\n \n-    // OBJECT-FILES-NO, AUDIT-ORDER\n-    // Linker plugins should be specified early in the list of arguments\n-    // FIXME: How \"early\" exactly?\n     cmd.linker_plugin_lto();\n \n-    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n-    // FIXME: Order-dependent, at least relatively to other args adding searh directories.\n     add_library_search_dirs(cmd, sess, crt_objects_fallback);\n \n-    // OBJECT-FILES-YES\n-    add_local_crate_regular_objects(cmd, codegen_results);\n-\n-    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     cmd.output_filename(out_filename);\n \n-    // OBJECT-FILES-NO, AUDIT-ORDER\n     if crate_type == CrateType::Executable && sess.target.is_like_windows {\n         if let Some(ref s) = codegen_results.windows_subsystem {\n             cmd.subsystem(s);\n         }\n     }\n \n-    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n-    // If we're building something like a dynamic library then some platforms\n-    // need to make sure that all symbols are exported correctly from the\n-    // dynamic library.\n-    cmd.export_symbols(tmpdir, crate_type);\n-\n-    // OBJECT-FILES-YES\n-    add_local_crate_allocator_objects(cmd, codegen_results);\n-\n-    // OBJECT-FILES-NO, AUDIT-ORDER\n-    // FIXME: Order dependent, applies to the following objects. Where should it be placed?\n     // Try to strip as much out of the generated object by removing unused\n     // sections if possible. See more comments in linker.rs\n     if !sess.link_dead_code() {\n         let keep_metadata = crate_type == CrateType::Dylib;\n         cmd.gc_sections(keep_metadata);\n     }\n \n-    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     cmd.set_output_kind(link_output_kind, out_filename);\n \n-    // OBJECT-FILES-NO, AUDIT-ORDER\n     add_relro_args(cmd, sess);\n \n-    // OBJECT-FILES-NO, AUDIT-ORDER\n     // Pass optimization flags down to the linker.\n     cmd.optimize();\n \n-    // OBJECT-FILES-NO, AUDIT-ORDER\n     // Pass debuginfo and strip flags down to the linker.\n     cmd.debuginfo(sess.opts.debugging_opts.strip);\n \n-    // OBJECT-FILES-NO, AUDIT-ORDER\n     // We want to prevent the compiler from accidentally leaking in any system libraries,\n     // so by default we tell linkers not to link to any default libraries.\n     if !sess.opts.cg.default_linker_libraries && sess.target.no_default_libraries {\n         cmd.no_default_libraries();\n     }\n \n-    // OBJECT-FILES-YES\n-    link_local_crate_native_libs_and_dependent_crate_libs::<B>(\n-        cmd,\n-        sess,\n-        crate_type,\n-        codegen_results,\n-        tmpdir,\n-    );\n-\n-    // OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.opts.cg.profile_generate.enabled() || sess.instrument_coverage() {\n         cmd.pgo_gen();\n     }\n \n-    // OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.opts.cg.control_flow_guard != CFGuard::Disabled {\n         cmd.control_flow_guard();\n     }\n \n-    // OBJECT-FILES-NO, AUDIT-ORDER\n     add_rpath_args(cmd, sess, codegen_results, out_filename);\n-\n-    // OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n-    add_user_defined_link_args(cmd, sess);\n-\n-    // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n-    cmd.finalize();\n-\n-    // NO-OPT-OUT, OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n-    add_late_link_args(cmd, sess, flavor, crate_type, codegen_results);\n-\n-    // NO-OPT-OUT, OBJECT-FILES-YES\n-    add_post_link_objects(cmd, sess, link_output_kind, crt_objects_fallback);\n-\n-    // NO-OPT-OUT, OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n-    add_post_link_args(cmd, sess, flavor);\n-\n-    cmd.take_cmd()\n }\n \n /// # Native library linking"}, {"sha": "1d53e9ad8b34cdc50419009d17f2eefc99032673", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5b638c1d3751b7ab31cac9739add516bdf39e10a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b638c1d3751b7ab31cac9739add516bdf39e10a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=5b638c1d3751b7ab31cac9739add516bdf39e10a", "patch": "@@ -37,7 +37,7 @@ pub fn disable_localization(linker: &mut Command) {\n /// need out of the shared crate context before we get rid of it.\n #[derive(Encodable, Decodable)]\n pub struct LinkerInfo {\n-    target_cpu: String,\n+    pub(super) target_cpu: String,\n     exports: FxHashMap<CrateType, Vec<String>>,\n }\n \n@@ -81,9 +81,7 @@ impl LinkerInfo {\n                 Box::new(WasmLd::new(cmd, sess, self)) as Box<dyn Linker>\n             }\n \n-            LinkerFlavor::PtxLinker => {\n-                Box::new(PtxLinker { cmd, sess, info: self }) as Box<dyn Linker>\n-            }\n+            LinkerFlavor::PtxLinker => Box::new(PtxLinker { cmd, sess }) as Box<dyn Linker>,\n \n             LinkerFlavor::BpfLinker => {\n                 Box::new(BpfLinker { cmd, sess, info: self }) as Box<dyn Linker>\n@@ -132,7 +130,7 @@ pub trait Linker {\n     fn add_eh_frame_header(&mut self) {}\n     fn add_no_exec(&mut self) {}\n     fn add_as_needed(&mut self) {}\n-    fn finalize(&mut self);\n+    fn reset_per_library_state(&mut self) {}\n }\n \n impl dyn Linker + '_ {\n@@ -653,7 +651,7 @@ impl<'a> Linker for GccLinker<'a> {\n         self.linker_arg(&subsystem);\n     }\n \n-    fn finalize(&mut self) {\n+    fn reset_per_library_state(&mut self) {\n         self.hint_dynamic(); // Reset to default before returning the composed command line.\n     }\n \n@@ -937,8 +935,6 @@ impl<'a> Linker for MsvcLinker<'a> {\n         }\n     }\n \n-    fn finalize(&mut self) {}\n-\n     // MSVC doesn't need group indicators\n     fn group_start(&mut self) {}\n     fn group_end(&mut self) {}\n@@ -1099,8 +1095,6 @@ impl<'a> Linker for EmLinker<'a> {\n         // noop\n     }\n \n-    fn finalize(&mut self) {}\n-\n     // Appears not necessary on Emscripten\n     fn group_start(&mut self) {}\n     fn group_end(&mut self) {}\n@@ -1281,8 +1275,6 @@ impl<'a> Linker for WasmLd<'a> {\n \n     fn subsystem(&mut self, _subsystem: &str) {}\n \n-    fn finalize(&mut self) {}\n-\n     // Not needed for now with LLD\n     fn group_start(&mut self) {}\n     fn group_end(&mut self) {}\n@@ -1336,7 +1328,6 @@ fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n pub struct PtxLinker<'a> {\n     cmd: Command,\n     sess: &'a Session,\n-    info: &'a LinkerInfo,\n }\n \n impl<'a> Linker for PtxLinker<'a> {\n@@ -1380,11 +1371,6 @@ impl<'a> Linker for PtxLinker<'a> {\n         self.cmd.arg(\"-o\").arg(path);\n     }\n \n-    fn finalize(&mut self) {\n-        // Provide the linker with fallback to internal `target-cpu`.\n-        self.cmd.arg(\"--fallback-arch\").arg(&self.info.target_cpu);\n-    }\n-\n     fn link_dylib(&mut self, _lib: Symbol, _verbatim: bool, _as_needed: bool) {\n         panic!(\"external dylibs not supported\")\n     }\n@@ -1486,17 +1472,6 @@ impl<'a> Linker for BpfLinker<'a> {\n         self.cmd.arg(\"-o\").arg(path);\n     }\n \n-    fn finalize(&mut self) {\n-        self.cmd.arg(\"--cpu\").arg(match self.sess.opts.cg.target_cpu {\n-            Some(ref s) => s,\n-            None => &self.sess.target.options.cpu,\n-        });\n-        self.cmd.arg(\"--cpu-features\").arg(match &self.sess.opts.cg.target_feature {\n-            feat if !feat.is_empty() => feat,\n-            _ => &self.sess.target.options.features,\n-        });\n-    }\n-\n     fn link_dylib(&mut self, _lib: Symbol, _verbatim: bool, _as_needed: bool) {\n         panic!(\"external dylibs not supported\")\n     }"}]}