{"sha": "f8813cf10eea79f7703e716b6c050e818220670a", "node_id": "C_kwDOAAsO6NoAKGY4ODEzY2YxMGVlYTc5Zjc3MDNlNzE2YjZjMDUwZTgxODIyMDY3MGE", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-10T06:37:26Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-09-16T03:48:43Z"}, "message": "do const trait method bounds check later in rustc_const_eval", "tree": {"sha": "3784e8db8807e9cd46581ed9a494b41d0f38f5ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3784e8db8807e9cd46581ed9a494b41d0f38f5ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8813cf10eea79f7703e716b6c050e818220670a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8813cf10eea79f7703e716b6c050e818220670a", "html_url": "https://github.com/rust-lang/rust/commit/f8813cf10eea79f7703e716b6c050e818220670a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8813cf10eea79f7703e716b6c050e818220670a/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bcc26a6b135fb934bf5f91d03d525f204323829", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bcc26a6b135fb934bf5f91d03d525f204323829", "html_url": "https://github.com/rust-lang/rust/commit/1bcc26a6b135fb934bf5f91d03d525f204323829"}], "stats": {"total": 248, "additions": 174, "deletions": 74}, "files": [{"sha": "79e7eb0f1cc2833c8cd30498399f19e00ceeee7c", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8813cf10eea79f7703e716b6c050e818220670a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8813cf10eea79f7703e716b6c050e818220670a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=f8813cf10eea79f7703e716b6c050e818220670a", "patch": "@@ -424,12 +424,31 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n             }\n \n             if let ty::FnDef(def_id, substs) = *constant.literal.ty().kind() {\n+                // N.B.: When instantiating a trait method as a function item, it does not actually matter\n+                // whether the trait is `const` or not, or whether `where T: ~const Tr` needs to be satisfied\n+                // as `const`. If we were to introduce instantiating trait methods as `const fn`s, we would\n+                // check that after this, either via a bound `where F: ~const FnOnce` or when coercing to a\n+                // `const fn` pointer.\n+                //\n+                // FIXME(fee1-dead) FIXME(const_trait_impl): update this doc when trait methods can satisfy\n+                // `~const FnOnce` or can be coerced to `const fn` pointer.\n+                let const_norm = self.tcx().def_kind(def_id) == hir::def::DefKind::AssocFn\n+                    && self.tcx().def_kind(ty::DefIdTree::parent(self.tcx(), def_id))\n+                        == hir::def::DefKind::Trait;\n+\n                 let instantiated_predicates = tcx.predicates_of(def_id).instantiate(tcx, substs);\n+                let prev = self.cx.param_env;\n+                if const_norm {\n+                    self.cx.param_env = prev.without_const();\n+                }\n                 self.cx.normalize_and_prove_instantiated_predicates(\n                     def_id,\n                     instantiated_predicates,\n                     locations,\n                 );\n+                if const_norm {\n+                    self.cx.param_env = prev;\n+                }\n             }\n         }\n     }"}, {"sha": "329d1033abf5100276ff8bc99d67fe63356c4d8d", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f8813cf10eea79f7703e716b6c050e818220670a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8813cf10eea79f7703e716b6c050e818220670a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=f8813cf10eea79f7703e716b6c050e818220670a", "patch": "@@ -13,8 +13,11 @@ use rustc_middle::ty::{self, adjustment::PointerCast, Instance, InstanceDef, Ty,\n use rustc_middle::ty::{Binder, TraitPredicate, TraitRef, TypeVisitable};\n use rustc_mir_dataflow::{self, Analysis};\n use rustc_span::{sym, Span, Symbol};\n-use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n-use rustc_trait_selection::traits::SelectionContext;\n+use rustc_trait_selection::infer::InferCtxtExt;\n+use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n+use rustc_trait_selection::traits::{\n+    self, ObligationCauseCode, SelectionContext, TraitEngine, TraitEngineExt,\n+};\n \n use std::mem;\n use std::ops::Deref;\n@@ -738,6 +741,43 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                         selcx.select(&obligation)\n                     });\n \n+                    // do a well-formedness check on the trait method being called. This is because typeck only does a\n+                    // \"non-const\" check. This is required for correctness here.\n+                    tcx.infer_ctxt().enter(|infcx| {\n+                        let mut fulfill_cx = <dyn TraitEngine<'_>>::new(infcx.tcx);\n+                        let predicates = tcx.predicates_of(callee).instantiate(tcx, substs);\n+                        let hir_id = tcx\n+                            .hir()\n+                            .local_def_id_to_hir_id(self.body.source.def_id().expect_local());\n+                        let cause = || {\n+                            ObligationCause::new(\n+                                terminator.source_info.span,\n+                                hir_id,\n+                                ObligationCauseCode::ItemObligation(callee),\n+                            )\n+                        };\n+                        let normalized = infcx.partially_normalize_associated_types_in(\n+                            cause(),\n+                            param_env,\n+                            predicates,\n+                        );\n+\n+                        for p in normalized.obligations {\n+                            fulfill_cx.register_predicate_obligation(&infcx, p);\n+                        }\n+                        for obligation in traits::predicates_for_generics(\n+                            |_, _| cause(),\n+                            self.param_env,\n+                            normalized.value,\n+                        ) {\n+                            fulfill_cx.register_predicate_obligation(&infcx, obligation);\n+                        }\n+                        let errors = fulfill_cx.select_all_or_error(&infcx);\n+                        if !errors.is_empty() {\n+                            infcx.report_fulfillment_errors(&errors, None, false);\n+                        }\n+                    });\n+\n                     match implsrc {\n                         Ok(Some(ImplSource::Param(_, ty::BoundConstness::ConstIfConst))) => {\n                             debug!("}, {"sha": "31eb2b6547640bd9b3151b570cf77e64a21f1050", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f8813cf10eea79f7703e716b6c050e818220670a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8813cf10eea79f7703e716b6c050e818220670a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=f8813cf10eea79f7703e716b6c050e818220670a", "patch": "@@ -1410,22 +1410,37 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         })\n     }\n \n-    #[instrument(level = \"debug\", skip(self, code, span, def_id, substs))]\n+    #[instrument(level = \"debug\", skip(self, code, span, substs))]\n     fn add_required_obligations_with_code(\n         &self,\n         span: Span,\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n         code: impl Fn(usize, Span) -> ObligationCauseCode<'tcx>,\n     ) {\n-        // Associated consts have `Self: ~const Trait` bounds that should be satisfiable when\n-        // `Self: Trait` is satisfied because it does not matter whether the impl is `const`.\n-        // Therefore we have to remap the param env here to be non-const.\n-        let param_env = if let hir::def::DefKind::AssocConst = self.tcx.def_kind(def_id) {\n-            self.param_env.without_const()\n-        } else {\n-            self.param_env\n-        };\n+        let mut param_env = self.param_env;\n+        match self.tcx.def_kind(def_id) {\n+            // Associated consts have `Self: ~const Trait` bounds that should be satisfiable when\n+            // `Self: Trait` is satisfied because it does not matter whether the impl is `const`.\n+            // Therefore we have to remap the param env here to be non-const.\n+            hir::def::DefKind::AssocConst => param_env = param_env.without_const(),\n+            hir::def::DefKind::AssocFn\n+                if self.tcx.def_kind(self.tcx.parent(def_id)) == hir::def::DefKind::Trait =>\n+            {\n+                // N.B.: All callsites to this function involve checking a path expression.\n+                //\n+                // When instantiating a trait method as a function item, it does not actually matter whether\n+                // the trait is `const` or not, or whether `where T: ~const Tr` needs to be satisfied as\n+                // `const`. If we were to introduce instantiating trait methods as `const fn`s, we would\n+                // check that after this, either via a bound `where F: ~const FnOnce` or when coercing to a\n+                // `const fn` pointer.\n+                //\n+                // FIXME(fee1-dead) FIXME(const_trait_impl): update this doc when trait methods can satisfy\n+                // `~const FnOnce` or can be coerced to `const fn` pointer.\n+                param_env = param_env.without_const();\n+            }\n+            _ => {}\n+        }\n         let (bounds, _) = self.instantiate_bounds(span, def_id, &substs);\n \n         for obligation in traits::predicates_for_generics("}, {"sha": "4520a36960c7be355377f77531c4cff2037f5ed1", "filename": "src/test/ui/rfc-2632-const-trait-impl/static-const-trait-bound.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8813cf10eea79f7703e716b6c050e818220670a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstatic-const-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8813cf10eea79f7703e716b6c050e818220670a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstatic-const-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstatic-const-trait-bound.rs?ref=f8813cf10eea79f7703e716b6c050e818220670a", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+pub struct S<T, F: FnOnce() -> T = fn() -> T> {\n+    f: F,\n+    x: Option<T>,\n+}\n+\n+impl<T, F: FnOnce() -> T> S<T, F> {\n+    pub const fn new(f: F) -> Self {\n+        Self { f, x: None }\n+    }\n+}\n+\n+#[derive(Default)]\n+pub struct Foo;\n+\n+static LOCKED_CALLSITES: S<Foo> = S::new(Default::default);\n+\n+fn main() {}"}, {"sha": "7a88ec35c8f2a8f269c6f7f740fd68adbe382718", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-const.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f8813cf10eea79f7703e716b6c050e818220670a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8813cf10eea79f7703e716b6c050e818220670a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.rs?ref=f8813cf10eea79f7703e716b6c050e818220670a", "patch": "@@ -0,0 +1,29 @@\n+// Like trait-where-clause.rs, but we are calling from a const context.\n+// Checking the validity of traits' where clauses happen at a later stage.\n+// (`rustc_const_eval` instead of `rustc_typeck`) Therefore one file as a\n+// test is not enough.\n+#![feature(const_trait_impl)]\n+\n+trait Bar {}\n+\n+trait Foo {\n+    fn a();\n+    fn b() where Self: ~const Bar;\n+    fn c<T: ~const Bar>();\n+}\n+\n+const fn test1<T: ~const Foo + Bar>() {\n+    T::a();\n+    T::b();\n+    //~^ ERROR the trait bound\n+    T::c::<T>();\n+    //~^ ERROR the trait bound\n+}\n+\n+const fn test2<T: ~const Foo + ~const Bar>() {\n+    T::a();\n+    T::b();\n+    T::c::<T>();\n+}\n+\n+fn main() {}"}, {"sha": "13d8639de30c3c82d64d2f53eb4e8fd6c83a7682", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-const.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f8813cf10eea79f7703e716b6c050e818220670a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8813cf10eea79f7703e716b6c050e818220670a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.stderr?ref=f8813cf10eea79f7703e716b6c050e818220670a", "patch": "@@ -0,0 +1,35 @@\n+error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n+  --> $DIR/trait-where-clause-const.rs:17:5\n+   |\n+LL |     T::b();\n+   |     ^^^^^^ the trait `~const Bar` is not implemented for `T`\n+   |\n+note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/trait-where-clause-const.rs:17:5\n+   |\n+LL |     T::b();\n+   |     ^^^^^^\n+help: consider further restricting this bound\n+   |\n+LL | const fn test1<T: ~const Foo + Bar + ~const Bar>() {\n+   |                                    ++++++++++++\n+\n+error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n+  --> $DIR/trait-where-clause-const.rs:19:5\n+   |\n+LL |     T::c::<T>();\n+   |     ^^^^^^^^^^^ the trait `~const Bar` is not implemented for `T`\n+   |\n+note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/trait-where-clause-const.rs:19:5\n+   |\n+LL |     T::c::<T>();\n+   |     ^^^^^^^^^^^\n+help: consider further restricting this bound\n+   |\n+LL | const fn test1<T: ~const Foo + Bar + ~const Bar>() {\n+   |                                    ++++++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "5bd23a8cb2079b1760b2888d5b885af73425fb9e", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f8813cf10eea79f7703e716b6c050e818220670a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8813cf10eea79f7703e716b6c050e818220670a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs?ref=f8813cf10eea79f7703e716b6c050e818220670a", "patch": "@@ -8,29 +8,15 @@ trait Foo {\n     fn c<T: ~const Bar>();\n }\n \n-const fn test1<T: ~const Foo + Bar>() {\n+fn test1<T: Foo>() {\n     T::a();\n     T::b();\n     //~^ ERROR the trait bound\n     T::c::<T>();\n     //~^ ERROR the trait bound\n }\n \n-const fn test2<T: ~const Foo + ~const Bar>() {\n-    T::a();\n-    T::b();\n-    T::c::<T>();\n-}\n-\n-fn test3<T: Foo>() {\n-    T::a();\n-    T::b();\n-    //~^ ERROR the trait bound\n-    T::c::<T>();\n-    //~^ ERROR the trait bound\n-}\n-\n-fn test4<T: Foo + Bar>() {\n+fn test2<T: Foo + Bar>() {\n     T::a();\n     T::b();\n     T::c::<T>();"}, {"sha": "96365d3343362e9b9de83ca62cff3438cd48ad7b", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "modified", "additions": 5, "deletions": 47, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f8813cf10eea79f7703e716b6c050e818220670a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8813cf10eea79f7703e716b6c050e818220670a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=f8813cf10eea79f7703e716b6c050e818220670a", "patch": "@@ -1,47 +1,5 @@\n-error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:13:5\n-   |\n-LL |     T::b();\n-   |     ^^^^ the trait `~const Bar` is not implemented for `T`\n-   |\n-note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/trait-where-clause.rs:13:5\n-   |\n-LL |     T::b();\n-   |     ^^^^\n-note: required by a bound in `Foo::b`\n-  --> $DIR/trait-where-clause.rs:7:24\n-   |\n-LL |     fn b() where Self: ~const Bar;\n-   |                        ^^^^^^^^^^ required by this bound in `Foo::b`\n-help: consider further restricting this bound\n-   |\n-LL | const fn test1<T: ~const Foo + Bar + ~const Bar>() {\n-   |                                    ++++++++++++\n-\n-error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:15:12\n-   |\n-LL |     T::c::<T>();\n-   |            ^ the trait `~const Bar` is not implemented for `T`\n-   |\n-note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/trait-where-clause.rs:15:12\n-   |\n-LL |     T::c::<T>();\n-   |            ^\n-note: required by a bound in `Foo::c`\n-  --> $DIR/trait-where-clause.rs:8:13\n-   |\n-LL |     fn c<T: ~const Bar>();\n-   |             ^^^^^^^^^^ required by this bound in `Foo::c`\n-help: consider further restricting this bound\n-   |\n-LL | const fn test1<T: ~const Foo + Bar + ~const Bar>() {\n-   |                                    ++++++++++++\n-\n error[E0277]: the trait bound `T: Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:27:5\n+  --> $DIR/trait-where-clause.rs:13:5\n    |\n LL |     T::b();\n    |     ^^^^ the trait `Bar` is not implemented for `T`\n@@ -53,11 +11,11 @@ LL |     fn b() where Self: ~const Bar;\n    |                        ^^^^^^^^^^ required by this bound in `Foo::b`\n help: consider further restricting this bound\n    |\n-LL | fn test3<T: Foo + Bar>() {\n+LL | fn test1<T: Foo + Bar>() {\n    |                 +++++\n \n error[E0277]: the trait bound `T: Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:29:12\n+  --> $DIR/trait-where-clause.rs:15:12\n    |\n LL |     T::c::<T>();\n    |            ^ the trait `Bar` is not implemented for `T`\n@@ -69,9 +27,9 @@ LL |     fn c<T: ~const Bar>();\n    |             ^^^^^^^^^^ required by this bound in `Foo::c`\n help: consider further restricting this bound\n    |\n-LL | fn test3<T: Foo + Bar>() {\n+LL | fn test1<T: Foo + Bar>() {\n    |                 +++++\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}