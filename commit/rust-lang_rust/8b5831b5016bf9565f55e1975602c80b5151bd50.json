{"sha": "8b5831b5016bf9565f55e1975602c80b5151bd50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNTgzMWI1MDE2YmY5NTY1ZjU1ZTE5NzU2MDJjODBiNTE1MWJkNTA=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-07-25T23:40:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-25T23:40:41Z"}, "message": "Merge pull request #1818 from topecongiro/issue-1194\n\nPut braces on the next line if it exceeds max width", "tree": {"sha": "55f50430c01ee076d4ea2f93f7827c7f26dd4a15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55f50430c01ee076d4ea2f93f7827c7f26dd4a15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b5831b5016bf9565f55e1975602c80b5151bd50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b5831b5016bf9565f55e1975602c80b5151bd50", "html_url": "https://github.com/rust-lang/rust/commit/8b5831b5016bf9565f55e1975602c80b5151bd50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b5831b5016bf9565f55e1975602c80b5151bd50/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b831df57aff7905fd4a6ea673a39ffebb538196d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b831df57aff7905fd4a6ea673a39ffebb538196d", "html_url": "https://github.com/rust-lang/rust/commit/b831df57aff7905fd4a6ea673a39ffebb538196d"}, {"sha": "d97ecd319dd65c4913e63bf9fed4d8fd857359c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d97ecd319dd65c4913e63bf9fed4d8fd857359c2", "html_url": "https://github.com/rust-lang/rust/commit/d97ecd319dd65c4913e63bf9fed4d8fd857359c2"}], "stats": {"total": 108, "additions": 77, "deletions": 31}, "files": [{"sha": "ac19e85a1133f551fc5d86d2ae652e6ce76dfa53", "filename": "src/items.rs", "status": "modified", "additions": 43, "deletions": 31, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/8b5831b5016bf9565f55e1975602c80b5151bd50/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5831b5016bf9565f55e1975602c80b5151bd50/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=8b5831b5016bf9565f55e1975602c80b5151bd50", "patch": "@@ -1095,12 +1095,14 @@ pub fn format_struct_struct(\n     };\n     // 1 = `}`\n     let overhead = if fields.is_empty() { 1 } else { 0 };\n-    let max_len = context.config.max_width() - offset.width();\n+    let max_len = context\n+        .config\n+        .max_width()\n+        .checked_sub(offset.width())\n+        .unwrap_or(0);\n     if !generics_str.contains('\\n') && result.len() + generics_str.len() + overhead > max_len {\n         result.push('\\n');\n-        result.push_str(&offset\n-            .block_indent(context.config)\n-            .to_string(context.config));\n+        result.push_str(&offset.to_string(context.config));\n         result.push_str(&generics_str.trim_left());\n     } else {\n         result.push_str(&generics_str);\n@@ -2732,13 +2734,14 @@ fn format_generics(\n     let shape = Shape::legacy(context.budget(used_width + offset.width()), offset);\n     let mut result = try_opt!(rewrite_generics(context, generics, shape, span));\n \n-    if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n-        let budget = try_opt!(\n-            context\n-                .config\n-                .max_width()\n-                .checked_sub(last_line_width(&result))\n-        );\n+    let same_line_brace = if !generics.where_clause.predicates.is_empty() ||\n+        result.contains('\\n')\n+    {\n+        let budget = context\n+            .config\n+            .max_width()\n+            .checked_sub(last_line_width(&result))\n+            .unwrap_or(0);\n         let where_clause_str = try_opt!(rewrite_where_clause(\n             context,\n             &generics.where_clause,\n@@ -2753,29 +2756,38 @@ fn format_generics(\n             generics.span.hi,\n         ));\n         result.push_str(&where_clause_str);\n-        let same_line_brace = force_same_line_brace ||\n-            (generics.where_clause.predicates.is_empty() && trimmed_last_line_width(&result) == 1);\n-        if !same_line_brace &&\n-            (brace_style == BraceStyle::SameLineWhere ||\n-                brace_style == BraceStyle::AlwaysNextLine)\n-        {\n-            result.push('\\n');\n-            result.push_str(&offset.block_only().to_string(context.config));\n-        } else {\n-            result.push(' ');\n-        }\n-        result.push_str(opener);\n+        force_same_line_brace || brace_style == BraceStyle::PreferSameLine ||\n+            (generics.where_clause.predicates.is_empty() && trimmed_last_line_width(&result) == 1)\n     } else {\n-        if force_same_line_brace || trimmed_last_line_width(&result) == 1 ||\n+        force_same_line_brace || trimmed_last_line_width(&result) == 1 ||\n             brace_style != BraceStyle::AlwaysNextLine\n-        {\n-            result.push(' ');\n-        } else {\n-            result.push('\\n');\n-            result.push_str(&offset.block_only().to_string(context.config));\n-        }\n-        result.push_str(opener);\n+    };\n+    let total_used_width = if result.contains('\\n') {\n+        last_line_width(&result)\n+    } else {\n+        used_width + result.len()\n+    };\n+    let remaining_budget = context\n+        .config\n+        .max_width()\n+        .checked_sub(total_used_width)\n+        .unwrap_or(0);\n+    // If the same line brace if forced, it indicates that we are rewriting an item with empty body,\n+    // and hence we take the closer into account as well for one line budget.\n+    // We assume that the closer has the same length as the opener.\n+    let overhead = if force_same_line_brace {\n+        1 + opener.len() + opener.len()\n+    } else {\n+        1 + opener.len()\n+    };\n+    let forbid_same_line_brace = overhead > remaining_budget;\n+    if !forbid_same_line_brace && same_line_brace {\n+        result.push(' ');\n+    } else {\n+        result.push('\\n');\n+        result.push_str(&offset.block_only().to_string(context.config));\n     }\n+    result.push_str(opener);\n \n     Some(result)\n }"}, {"sha": "7b9bf4ec0c5926c106d2cc8c6253c68b644dea77", "filename": "tests/source/enum.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b5831b5016bf9565f55e1975602c80b5151bd50/tests%2Fsource%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5831b5016bf9565f55e1975602c80b5151bd50/tests%2Fsource%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fenum.rs?ref=8b5831b5016bf9565f55e1975602c80b5151bd50", "patch": "@@ -120,3 +120,8 @@ pub enum CoreResourceMsg {\n         CookieSource\n     ),\n }\n+\n+enum Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong {}\n+enum Looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong {}\n+enum Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong {}\n+enum Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong { Foo }"}, {"sha": "b759943292f8050e9e429b1b812eb6b852d146cb", "filename": "tests/source/structs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b5831b5016bf9565f55e1975602c80b5151bd50/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5831b5016bf9565f55e1975602c80b5151bd50/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=8b5831b5016bf9565f55e1975602c80b5151bd50", "patch": "@@ -247,3 +247,9 @@ struct Foo {\n     // separate\n     please_do_not_push_this_comment3: u32, // comment3\n }\n+\n+// structs with long identifier\n+struct Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong {}\n+struct Looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong {}\n+struct Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong {}\n+struct Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong { x: i32 }"}, {"sha": "e87fcf9a7f7299f4789012eff9de5561a3ec1207", "filename": "tests/target/enum.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b5831b5016bf9565f55e1975602c80b5151bd50/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5831b5016bf9565f55e1975602c80b5151bd50/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=8b5831b5016bf9565f55e1975602c80b5151bd50", "patch": "@@ -158,3 +158,14 @@ pub enum CoreResourceMsg {\n         CookieSource,\n     ),\n }\n+\n+enum Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong\n+{}\n+enum Looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong\n+{}\n+enum Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong\n+{}\n+enum Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong\n+{\n+    Foo,\n+}"}, {"sha": "945eb683f602342e051a10444370bbe94c8454ee", "filename": "tests/target/structs.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b5831b5016bf9565f55e1975602c80b5151bd50/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b5831b5016bf9565f55e1975602c80b5151bd50/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=8b5831b5016bf9565f55e1975602c80b5151bd50", "patch": "@@ -284,3 +284,15 @@ struct Foo {\n     // separate\n     please_do_not_push_this_comment3: u32, // comment3\n }\n+\n+// structs with long identifier\n+struct Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong\n+{}\n+struct Looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong\n+{}\n+struct Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong\n+{}\n+struct Loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong\n+{\n+    x: i32,\n+}"}]}