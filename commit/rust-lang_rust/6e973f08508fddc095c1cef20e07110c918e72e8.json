{"sha": "6e973f08508fddc095c1cef20e07110c918e72e8", "node_id": "C_kwDOAAsO6NoAKDZlOTczZjA4NTA4ZmRkYzA5NWMxY2VmMjBlMDcxMTBjOTE4ZTcyZTg", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-09-28T00:16:04Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-09-29T16:15:35Z"}, "message": "fix(lint): don't suggest refutable patterns to \"fix\" irrefutable bind\n\nIn function arguments and let bindings, do not suggest changing `C` to `Foo::C`\nunless `C` is the only variant of `Foo`, because it won't work.\n\nThe general warning is still kept, because code like this is confusing.\n\nFixes #88730", "tree": {"sha": "06364c2136d352a51d146b40986d663704a26f13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06364c2136d352a51d146b40986d663704a26f13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e973f08508fddc095c1cef20e07110c918e72e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e973f08508fddc095c1cef20e07110c918e72e8", "html_url": "https://github.com/rust-lang/rust/commit/6e973f08508fddc095c1cef20e07110c918e72e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e973f08508fddc095c1cef20e07110c918e72e8/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50f9f7810c975234ce4730488d32661a76a00428", "url": "https://api.github.com/repos/rust-lang/rust/commits/50f9f7810c975234ce4730488d32661a76a00428", "html_url": "https://github.com/rust-lang/rust/commit/50f9f7810c975234ce4730488d32661a76a00428"}], "stats": {"total": 92, "additions": 73, "deletions": 19}, "files": [{"sha": "e28fd2c50814fa48428cb9afc2a0649b12ea2be8", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/6e973f08508fddc095c1cef20e07110c918e72e8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e973f08508fddc095c1cef20e07110c918e72e8/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=6e973f08508fddc095c1cef20e07110c918e72e8", "patch": "@@ -39,6 +39,13 @@ fn create_e0004(sess: &Session, sp: Span, error_message: String) -> DiagnosticBu\n     struct_span_err!(sess, sp, E0004, \"{}\", &error_message)\n }\n \n+#[derive(PartialEq)]\n+enum RefutableFlag {\n+    Irrefutable,\n+    Refutable,\n+}\n+use RefutableFlag::*;\n+\n struct MatchVisitor<'a, 'p, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     typeck_results: &'a ty::TypeckResults<'tcx>,\n@@ -73,13 +80,13 @@ impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, '_, 'tcx> {\n             hir::LocalSource::AssignDesugar(_) => (\"destructuring assignment binding\", None),\n         };\n         self.check_irrefutable(&loc.pat, msg, sp);\n-        self.check_patterns(&loc.pat);\n+        self.check_patterns(&loc.pat, Irrefutable);\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n         intravisit::walk_param(self, param);\n         self.check_irrefutable(&param.pat, \"function argument\", None);\n-        self.check_patterns(&param.pat);\n+        self.check_patterns(&param.pat, Irrefutable);\n     }\n }\n \n@@ -113,9 +120,9 @@ impl PatCtxt<'_, '_> {\n }\n \n impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n-    fn check_patterns(&self, pat: &Pat<'_>) {\n+    fn check_patterns(&self, pat: &Pat<'_>, rf: RefutableFlag) {\n         pat.walk_always(|pat| check_borrow_conflicts_in_at_patterns(self, pat));\n-        check_for_bindings_named_same_as_variants(self, pat);\n+        check_for_bindings_named_same_as_variants(self, pat, rf);\n     }\n \n     fn lower_pattern(\n@@ -145,7 +152,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n     }\n \n     fn check_let(&mut self, pat: &'tcx hir::Pat<'tcx>, expr: &hir::Expr<'_>, span: Span) {\n-        self.check_patterns(pat);\n+        self.check_patterns(pat, Refutable);\n         let mut cx = self.new_cx(expr.hir_id);\n         let tpat = self.lower_pattern(&mut cx, pat, &mut false);\n         check_let_reachability(&mut cx, pat.hir_id, tpat, span);\n@@ -161,9 +168,9 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n \n         for arm in arms {\n             // Check the arm for some things unrelated to exhaustiveness.\n-            self.check_patterns(&arm.pat);\n+            self.check_patterns(&arm.pat, Refutable);\n             if let Some(hir::Guard::IfLet(ref pat, _)) = arm.guard {\n-                self.check_patterns(pat);\n+                self.check_patterns(pat, Refutable);\n                 let tpat = self.lower_pattern(&mut cx, pat, &mut false);\n                 check_let_reachability(&mut cx, pat.hir_id, tpat, tpat.span());\n             }\n@@ -297,7 +304,11 @@ fn const_not_var(\n     }\n }\n \n-fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor<'_, '_, '_>, pat: &Pat<'_>) {\n+fn check_for_bindings_named_same_as_variants(\n+    cx: &MatchVisitor<'_, '_, '_>,\n+    pat: &Pat<'_>,\n+    rf: RefutableFlag,\n+) {\n     pat.walk_always(|p| {\n         if let hir::PatKind::Binding(_, _, ident, None) = p.kind {\n             if let Some(ty::BindByValue(hir::Mutability::Not)) =\n@@ -310,25 +321,31 @@ fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor<'_, '_, '_>, pat:\n                             variant.ident == ident && variant.ctor_kind == CtorKind::Const\n                         })\n                     {\n+                        let variant_count = edef.variants.len();\n                         cx.tcx.struct_span_lint_hir(\n                             BINDINGS_WITH_VARIANT_NAME,\n                             p.hir_id,\n                             p.span,\n                             |lint| {\n                                 let ty_path = cx.tcx.def_path_str(edef.did);\n-                                lint.build(&format!(\n+                                let mut err = lint.build(&format!(\n                                     \"pattern binding `{}` is named the same as one \\\n-                                                of the variants of the type `{}`\",\n+                                                    of the variants of the type `{}`\",\n                                     ident, ty_path\n-                                ))\n-                                .code(error_code!(E0170))\n-                                .span_suggestion(\n-                                    p.span,\n-                                    \"to match on the variant, qualify the path\",\n-                                    format!(\"{}::{}\", ty_path, ident),\n-                                    Applicability::MachineApplicable,\n-                                )\n-                                .emit();\n+                                ));\n+                                err.code(error_code!(E0170));\n+                                // If this is an irrefutable pattern, and there's > 1 variant,\n+                                // then we can't actually match on this. Applying the below\n+                                // suggestion would produce code that breaks on `check_irrefutable`.\n+                                if rf == Refutable || variant_count == 1 {\n+                                    err.span_suggestion(\n+                                        p.span,\n+                                        \"to match on the variant, qualify the path\",\n+                                        format!(\"{}::{}\", ty_path, ident),\n+                                        Applicability::MachineApplicable,\n+                                    );\n+                                }\n+                                err.emit();\n                             },\n                         )\n                     }"}, {"sha": "e63210a3e987efd7c8bf7e1549b15b0aa8e01e0c", "filename": "src/test/ui/suggestions/issue-88730.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6e973f08508fddc095c1cef20e07110c918e72e8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-88730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e973f08508fddc095c1cef20e07110c918e72e8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-88730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-88730.rs?ref=6e973f08508fddc095c1cef20e07110c918e72e8", "patch": "@@ -0,0 +1,16 @@\n+#![allow(unused, nonstandard_style)]\n+#![deny(bindings_with_variant_name)]\n+\n+// If an enum has two different variants,\n+// then it cannot be matched upon in a function argument.\n+// It still gets a warning, but no suggestions.\n+enum Foo {\n+    C,\n+    D,\n+}\n+\n+fn foo(C: Foo) {} //~ERROR\n+\n+fn main() {\n+    let C = Foo::D; //~ERROR\n+}"}, {"sha": "eb22b0ea5c83da68b71dbe18c4752664f228331f", "filename": "src/test/ui/suggestions/issue-88730.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6e973f08508fddc095c1cef20e07110c918e72e8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-88730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e973f08508fddc095c1cef20e07110c918e72e8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-88730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-88730.stderr?ref=6e973f08508fddc095c1cef20e07110c918e72e8", "patch": "@@ -0,0 +1,21 @@\n+error[E0170]: pattern binding `C` is named the same as one of the variants of the type `Foo`\n+  --> $DIR/issue-88730.rs:12:8\n+   |\n+LL | fn foo(C: Foo) {}\n+   |        ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-88730.rs:2:9\n+   |\n+LL | #![deny(bindings_with_variant_name)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0170]: pattern binding `C` is named the same as one of the variants of the type `Foo`\n+  --> $DIR/issue-88730.rs:15:9\n+   |\n+LL |     let C = Foo::D;\n+   |         ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0170`."}]}