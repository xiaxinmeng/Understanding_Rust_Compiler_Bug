{"sha": "953d685ea119abc28c38738efe8961adc54e7b08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1M2Q2ODVlYTExOWFiYzI4YzM4NzM4ZWZlODk2MWFkYzU0ZTdiMDg=", "commit": {"author": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-08-26T19:12:29Z"}, "committer": {"name": "Will Crichton", "email": "wcrichto@cs.stanford.edu", "date": "2021-08-26T19:12:29Z"}, "message": "Add remaining impl for hybrid X dense", "tree": {"sha": "d672bd8ce1d7828791aedaf55c34bcd8d7410523", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d672bd8ce1d7828791aedaf55c34bcd8d7410523"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/953d685ea119abc28c38738efe8961adc54e7b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/953d685ea119abc28c38738efe8961adc54e7b08", "html_url": "https://github.com/rust-lang/rust/commit/953d685ea119abc28c38738efe8961adc54e7b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/953d685ea119abc28c38738efe8961adc54e7b08/comments", "author": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willcrichton", "id": 663326, "node_id": "MDQ6VXNlcjY2MzMyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/663326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willcrichton", "html_url": "https://github.com/willcrichton", "followers_url": "https://api.github.com/users/willcrichton/followers", "following_url": "https://api.github.com/users/willcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/willcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/willcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willcrichton/subscriptions", "organizations_url": "https://api.github.com/users/willcrichton/orgs", "repos_url": "https://api.github.com/users/willcrichton/repos", "events_url": "https://api.github.com/users/willcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/willcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e854027c12f88d9d28c5a016ee8b6a6cb89983cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e854027c12f88d9d28c5a016ee8b6a6cb89983cc", "html_url": "https://github.com/rust-lang/rust/commit/e854027c12f88d9d28c5a016ee8b6a6cb89983cc"}], "stats": {"total": 72, "additions": 51, "deletions": 21}, "files": [{"sha": "1bb323cb2c43cf20658bca8f9209b4acdddb4cda", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 51, "deletions": 21, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/953d685ea119abc28c38738efe8961adc54e7b08/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d685ea119abc28c38738efe8961adc54e7b08/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=953d685ea119abc28c38738efe8961adc54e7b08", "patch": "@@ -230,6 +230,7 @@ impl<T: Idx> BitSet<T> {\n     bit_relations_inherent_impls! {}\n }\n \n+// dense REL dense\n impl<T: Idx> BitRelations<BitSet<T>> for BitSet<T> {\n     fn union(&mut self, other: &BitSet<T>) -> bool {\n         assert_eq!(self.domain_size, other.domain_size);\n@@ -285,6 +286,53 @@ fn dense_sparse_intersect<T: Idx>(\n     (sparse_copy, n != dense.count())\n }\n \n+// hybrid REL dense\n+impl<T: Idx> BitRelations<BitSet<T>> for HybridBitSet<T> {\n+    fn union(&mut self, other: &BitSet<T>) -> bool {\n+        match self {\n+            HybridBitSet::Sparse(sparse) => {\n+                // `self` is sparse and `other` is dense. To\n+                // merge them, we have two available strategies:\n+                // * Densify `self` then merge other\n+                // * Clone other then integrate bits from `self`\n+                // The second strategy requires dedicated method\n+                // since the usual `union` returns the wrong\n+                // result. In the dedicated case the computation\n+                // is slightly faster if the bits of the sparse\n+                // bitset map to only few words of the dense\n+                // representation, i.e. indices are near each\n+                // other.\n+                //\n+                // Benchmarking seems to suggest that the second\n+                // option is worth it.\n+                let mut new_dense = other.clone();\n+                let changed = new_dense.reverse_union_sparse(sparse);\n+                *self = HybridBitSet::Dense(new_dense);\n+                changed\n+            }\n+\n+            HybridBitSet::Dense(dense) => dense.union(other),\n+        }\n+    }\n+\n+    fn subtract(&mut self, other: &BitSet<T>) -> bool {\n+        match self {\n+            HybridBitSet::Sparse(sparse) => {\n+                sequential_update(|elem| sparse.remove(elem), other.iter())\n+            }\n+            HybridBitSet::Dense(dense) => dense.subtract(other),\n+        }\n+    }\n+\n+    fn intersect(&mut self, other: &BitSet<T>) -> bool {\n+        match self {\n+            HybridBitSet::Sparse(sparse) => sparse_intersect(sparse, |elem| other.contains(*elem)),\n+            HybridBitSet::Dense(dense) => dense.intersect(other),\n+        }\n+    }\n+}\n+\n+// dense REL hybrid\n impl<T: Idx> BitRelations<HybridBitSet<T>> for BitSet<T> {\n     fn union(&mut self, other: &HybridBitSet<T>) -> bool {\n         assert_eq!(self.domain_size, other.domain_size());\n@@ -326,13 +374,14 @@ impl<T: Idx> BitRelations<HybridBitSet<T>> for BitSet<T> {\n     }\n }\n \n+// hybrid REL hybrid\n impl<T: Idx> BitRelations<HybridBitSet<T>> for HybridBitSet<T> {\n     fn union(&mut self, other: &HybridBitSet<T>) -> bool {\n         assert_eq!(self.domain_size(), other.domain_size());\n         match self {\n             HybridBitSet::Sparse(self_sparse) => {\n                 match other {\n-                    HybridBitSet::Sparse(other_sparse) => {\n+                    HybridBitSet::Sparse(_) => {\n                         // Both sets are sparse. Add the elements in\n                         // `other_sparse` to `self` one at a time. This\n                         // may or may not cause `self` to be densified.\n@@ -344,26 +393,7 @@ impl<T: Idx> BitRelations<HybridBitSet<T>> for HybridBitSet<T> {\n                         changed\n                     }\n \n-                    HybridBitSet::Dense(other_dense) => {\n-                        // `self` is sparse and `other` is dense. To\n-                        // merge them, we have two available strategies:\n-                        // * Densify `self` then merge other\n-                        // * Clone other then integrate bits from `self`\n-                        // The second strategy requires dedicated method\n-                        // since the usual `union` returns the wrong\n-                        // result. In the dedicated case the computation\n-                        // is slightly faster if the bits of the sparse\n-                        // bitset map to only few words of the dense\n-                        // representation, i.e. indices are near each\n-                        // other.\n-                        //\n-                        // Benchmarking seems to suggest that the second\n-                        // option is worth it.\n-                        let mut new_dense = other_dense.clone();\n-                        let changed = new_dense.reverse_union_sparse(self_sparse);\n-                        *self = HybridBitSet::Dense(new_dense);\n-                        changed\n-                    }\n+                    HybridBitSet::Dense(other_dense) => self.union(other_dense),\n                 }\n             }\n "}]}