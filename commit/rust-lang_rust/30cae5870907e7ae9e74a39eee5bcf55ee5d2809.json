{"sha": "30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwY2FlNTg3MDkwN2U3YWU5ZTc0YTM5ZWVlNWJjZjU1ZWU1ZDI4MDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-31T08:55:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-31T08:55:09Z"}, "message": "Auto merge of #51182 - eddyb:not-just-visibility, r=nikomatsakis\n\n[MIR] Change \"scopes\" from \"visibility scopes\" to \"source scopes\".\n\nThese scopes are already used for source-oriented diagnostics, lint levels and unsafety checks.\nThis PR generalizes the naming around scopes, making the type `SourceScope`, and flips (across several commits) the relationship/priority between `LocalDecl`'s \"visibility\" and \"syntactic\" scopes.\n\nr? @nikomatsakis", "tree": {"sha": "f8d908c5be52b521751c164a2de64f60572a4e09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8d908c5be52b521751c164a2de64f60572a4e09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "html_url": "https://github.com/rust-lang/rust/commit/30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a47b2d09d6caa5aeb5a7f6128869bd6eb12418d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a47b2d09d6caa5aeb5a7f6128869bd6eb12418d2", "html_url": "https://github.com/rust-lang/rust/commit/a47b2d09d6caa5aeb5a7f6128869bd6eb12418d2"}, {"sha": "06d88cda088783c3751074d2debaf6bb1ca542c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/06d88cda088783c3751074d2debaf6bb1ca542c3", "html_url": "https://github.com/rust-lang/rust/commit/06d88cda088783c3751074d2debaf6bb1ca542c3"}], "stats": {"total": 536, "additions": 275, "deletions": 261}, "files": [{"sha": "f43ac7ad0dd5a4afd5afab40ee23b21e4889cf72", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -26,8 +26,8 @@ impl_stable_hash_for!(struct mir::LocalDecl<'tcx> {\n     ty,\n     name,\n     source_info,\n+    visibility_scope,\n     internal,\n-    syntactic_scope,\n     is_user_variable\n });\n impl_stable_hash_for!(struct mir::UpvarDecl { debug_name, by_ref, mutability });\n@@ -127,7 +127,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for mir::Field {\n }\n \n impl<'a> HashStable<StableHashingContext<'a>>\n-for mir::VisibilityScope {\n+for mir::SourceScope {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n@@ -363,8 +363,8 @@ for mir::ProjectionElem<'gcx, V, T>\n     }\n }\n \n-impl_stable_hash_for!(struct mir::VisibilityScopeData { span, parent_scope });\n-impl_stable_hash_for!(struct mir::VisibilityScopeInfo {\n+impl_stable_hash_for!(struct mir::SourceScopeData { span, parent_scope });\n+impl_stable_hash_for!(struct mir::SourceScopeLocalData {\n     lint_root, safety\n });\n "}, {"sha": "b2ff36cb87c78f8876a6613c5e5038ecaa39b777", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 54, "deletions": 52, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -78,13 +78,13 @@ pub struct Mir<'tcx> {\n     /// that indexes into this vector.\n     basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n \n-    /// List of visibility (lexical) scopes; these are referenced by statements\n-    /// and used (eventually) for debuginfo. Indexed by a `VisibilityScope`.\n-    pub visibility_scopes: IndexVec<VisibilityScope, VisibilityScopeData>,\n+    /// List of source scopes; these are referenced by statements\n+    /// and used for debuginfo. Indexed by a `SourceScope`.\n+    pub source_scopes: IndexVec<SourceScope, SourceScopeData>,\n \n-    /// Crate-local information for each visibility scope, that can't (and\n+    /// Crate-local information for each source scope, that can't (and\n     /// needn't) be tracked across crates.\n-    pub visibility_scope_info: ClearCrossCrate<IndexVec<VisibilityScope, VisibilityScopeInfo>>,\n+    pub source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope, SourceScopeLocalData>>,\n \n     /// Rvalues promoted from this function, such as borrows of constants.\n     /// Each of them is the Mir of a constant with the fn's type parameters\n@@ -137,9 +137,9 @@ pub const START_BLOCK: BasicBlock = BasicBlock(0);\n \n impl<'tcx> Mir<'tcx> {\n     pub fn new(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n-               visibility_scopes: IndexVec<VisibilityScope, VisibilityScopeData>,\n-               visibility_scope_info: ClearCrossCrate<IndexVec<VisibilityScope,\n-                                                               VisibilityScopeInfo>>,\n+               source_scopes: IndexVec<SourceScope, SourceScopeData>,\n+               source_scope_local_data: ClearCrossCrate<IndexVec<SourceScope,\n+                                                                 SourceScopeLocalData>>,\n                promoted: IndexVec<Promoted, Mir<'tcx>>,\n                yield_ty: Option<Ty<'tcx>>,\n                local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n@@ -153,8 +153,8 @@ impl<'tcx> Mir<'tcx> {\n \n         Mir {\n             basic_blocks,\n-            visibility_scopes,\n-            visibility_scope_info,\n+            source_scopes,\n+            source_scope_local_data,\n             promoted,\n             yield_ty,\n             generator_drop: None,\n@@ -308,14 +308,6 @@ impl<'tcx> Mir<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub struct VisibilityScopeInfo {\n-    /// A NodeId with lint levels equivalent to this scope's lint levels.\n-    pub lint_root: ast::NodeId,\n-    /// The unsafe block that contains this node.\n-    pub safety: Safety,\n-}\n-\n #[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n pub enum Safety {\n     Safe,\n@@ -329,8 +321,8 @@ pub enum Safety {\n \n impl_stable_hash_for!(struct Mir<'tcx> {\n     basic_blocks,\n-    visibility_scopes,\n-    visibility_scope_info,\n+    source_scopes,\n+    source_scope_local_data,\n     promoted,\n     yield_ty,\n     generator_drop,\n@@ -376,8 +368,9 @@ pub struct SourceInfo {\n     /// Source span for the AST pertaining to this MIR entity.\n     pub span: Span,\n \n-    /// The lexical visibility scope, i.e. which bindings can be seen.\n-    pub scope: VisibilityScope\n+    /// The source scope, keeping track of which bindings can be\n+    /// seen by debuginfo, active lint levels, `unsafe {...}`, etc.\n+    pub scope: SourceScope\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -512,16 +505,13 @@ pub struct LocalDecl<'tcx> {\n     /// to generate better debuginfo.\n     pub name: Option<Name>,\n \n-    /// Source info of the local.\n-    pub source_info: SourceInfo,\n-\n-    /// The *syntactic* visibility scope the local is defined\n+    /// The *syntactic* (i.e. not visibility) source scope the local is defined\n     /// in. If the local was defined in a let-statement, this\n     /// is *within* the let-statement, rather than outside\n     /// of it.\n     ///\n-    /// This is needed because visibility scope of locals within a let-statement\n-    /// is weird.\n+    /// This is needed because the visibility source scope of locals within\n+    /// a let-statement is weird.\n     ///\n     /// The reason is that we want the local to be *within* the let-statement\n     /// for lint purposes, but we want the local to be *after* the let-statement\n@@ -566,9 +556,9 @@ pub struct LocalDecl<'tcx> {\n     /// `drop(x)`, we want it to refer to `x: u32`.\n     ///\n     /// To allow both uses to work, we need to have more than a single scope\n-    /// for a local. We have the `syntactic_scope` represent the\n+    /// for a local. We have the `source_info.scope` represent the\n     /// \"syntactic\" lint scope (with a variable being under its let\n-    /// block) while the source-info scope represents the \"local variable\"\n+    /// block) while the `visibility_scope` represents the \"local variable\"\n     /// scope (where the \"rest\" of a block is under all prior let-statements).\n     ///\n     /// The end result looks like this:\n@@ -580,21 +570,25 @@ pub struct LocalDecl<'tcx> {\n     ///  \u2502 \u2502{ #[allow(unused_mut] } // this is actually split into 2 scopes\n     ///  \u2502 \u2502                        // in practice because I'm lazy.\n     ///  \u2502 \u2502\n-    ///  \u2502 \u2502\u2190 x.syntactic_scope\n+    ///  \u2502 \u2502\u2190 x.source_info.scope\n     ///  \u2502 \u2502\u2190 `x.parse().unwrap()`\n     ///  \u2502 \u2502\n-    ///  \u2502 \u2502 \u2502\u2190 y.syntactic_scope\n+    ///  \u2502 \u2502 \u2502\u2190 y.source_info.scope\n     ///  \u2502 \u2502\n     ///  \u2502 \u2502 \u2502{ let y: u32 }\n     ///  \u2502 \u2502 \u2502\n-    ///  \u2502 \u2502 \u2502\u2190 y.source_info.scope\n+    ///  \u2502 \u2502 \u2502\u2190 y.visibility_scope\n     ///  \u2502 \u2502 \u2502\u2190 `y + 2`\n     ///  \u2502\n     ///  \u2502 \u2502{ let x: u32 }\n-    ///  \u2502 \u2502\u2190 x.source_info.scope\n+    ///  \u2502 \u2502\u2190 x.visibility_scope\n     ///  \u2502 \u2502\u2190 `drop(x)` // this accesses `x: u32`\n     /// ```\n-    pub syntactic_scope: VisibilityScope,\n+    pub source_info: SourceInfo,\n+\n+    /// Source scope within which the local is visible (for debuginfo)\n+    /// (see `source_info` for more details).\n+    pub visibility_scope: SourceScope,\n }\n \n impl<'tcx> LocalDecl<'tcx> {\n@@ -607,9 +601,9 @@ impl<'tcx> LocalDecl<'tcx> {\n             name: None,\n             source_info: SourceInfo {\n                 span,\n-                scope: ARGUMENT_VISIBILITY_SCOPE\n+                scope: OUTERMOST_SOURCE_SCOPE\n             },\n-            syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n+            visibility_scope: OUTERMOST_SOURCE_SCOPE,\n             internal: false,\n             is_user_variable: false\n         }\n@@ -624,9 +618,9 @@ impl<'tcx> LocalDecl<'tcx> {\n             name: None,\n             source_info: SourceInfo {\n                 span,\n-                scope: ARGUMENT_VISIBILITY_SCOPE\n+                scope: OUTERMOST_SOURCE_SCOPE\n             },\n-            syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n+            visibility_scope: OUTERMOST_SOURCE_SCOPE,\n             internal: true,\n             is_user_variable: false\n         }\n@@ -642,9 +636,9 @@ impl<'tcx> LocalDecl<'tcx> {\n             ty: return_ty,\n             source_info: SourceInfo {\n                 span,\n-                scope: ARGUMENT_VISIBILITY_SCOPE\n+                scope: OUTERMOST_SOURCE_SCOPE\n             },\n-            syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n+            visibility_scope: OUTERMOST_SOURCE_SCOPE,\n             internal: false,\n             name: None,     // FIXME maybe we do want some name here?\n             is_user_variable: false\n@@ -1047,7 +1041,7 @@ impl<'tcx> BasicBlockData<'tcx> {\n         self.statements.resize(gap.end, Statement {\n             source_info: SourceInfo {\n                 span: DUMMY_SP,\n-                scope: ARGUMENT_VISIBILITY_SCOPE\n+                scope: OUTERMOST_SOURCE_SCOPE\n             },\n             kind: StatementKind::Nop\n         });\n@@ -1501,16 +1495,24 @@ impl<'tcx> Debug for Place<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Scopes\n \n-newtype_index!(VisibilityScope\n+newtype_index!(SourceScope\n     {\n         DEBUG_FORMAT = \"scope[{}]\",\n-        const ARGUMENT_VISIBILITY_SCOPE = 0,\n+        const OUTERMOST_SOURCE_SCOPE = 0,\n     });\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub struct VisibilityScopeData {\n+pub struct SourceScopeData {\n     pub span: Span,\n-    pub parent_scope: Option<VisibilityScope>,\n+    pub parent_scope: Option<SourceScope>,\n+}\n+\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+pub struct SourceScopeLocalData {\n+    /// A NodeId with lint levels equivalent to this scope's lint levels.\n+    pub lint_root: ast::NodeId,\n+    /// The unsafe block that contains this node.\n+    pub safety: Safety,\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -2153,16 +2155,16 @@ CloneTypeFoldableAndLiftImpls! {\n     SourceInfo,\n     UpvarDecl,\n     ValidationOp,\n-    VisibilityScopeData,\n-    VisibilityScope,\n-    VisibilityScopeInfo,\n+    SourceScope,\n+    SourceScopeData,\n+    SourceScopeLocalData,\n }\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for Mir<'tcx> {\n         basic_blocks,\n-        visibility_scopes,\n-        visibility_scope_info,\n+        source_scopes,\n+        source_scope_local_data,\n         promoted,\n         yield_ty,\n         generator_drop,\n@@ -2190,7 +2192,7 @@ BraceStructTypeFoldableImpl! {\n         ty,\n         name,\n         source_info,\n-        syntactic_scope,\n+        visibility_scope,\n     }\n }\n "}, {"sha": "758d887cd7b3ef59730f278a56c7007575ee9b65", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -92,9 +92,9 @@ macro_rules! make_mir_visitor {\n                 self.super_basic_block_data(block, data);\n             }\n \n-            fn visit_visibility_scope_data(&mut self,\n-                                           scope_data: & $($mutability)* VisibilityScopeData) {\n-                self.super_visibility_scope_data(scope_data);\n+            fn visit_source_scope_data(&mut self,\n+                                           scope_data: & $($mutability)* SourceScopeData) {\n+                self.super_source_scope_data(scope_data);\n             }\n \n             fn visit_statement(&mut self,\n@@ -261,9 +261,9 @@ macro_rules! make_mir_visitor {\n                             _location: Location) {\n             }\n \n-            fn visit_visibility_scope(&mut self,\n-                                      scope: & $($mutability)* VisibilityScope) {\n-                self.super_visibility_scope(scope);\n+            fn visit_source_scope(&mut self,\n+                                      scope: & $($mutability)* SourceScope) {\n+                self.super_source_scope(scope);\n             }\n \n             // The `super_xxx` methods comprise the default behavior and are\n@@ -274,7 +274,7 @@ macro_rules! make_mir_visitor {\n                 if let Some(yield_ty) = &$($mutability)* mir.yield_ty {\n                     self.visit_ty(yield_ty, TyContext::YieldTy(SourceInfo {\n                         span: mir.span,\n-                        scope: ARGUMENT_VISIBILITY_SCOPE,\n+                        scope: OUTERMOST_SOURCE_SCOPE,\n                     }));\n                 }\n \n@@ -289,13 +289,13 @@ macro_rules! make_mir_visitor {\n                     self.visit_basic_block_data(bb, data);\n                 }\n \n-                for scope in &$($mutability)* mir.visibility_scopes {\n-                    self.visit_visibility_scope_data(scope);\n+                for scope in &$($mutability)* mir.source_scopes {\n+                    self.visit_source_scope_data(scope);\n                 }\n \n                 self.visit_ty(&$($mutability)* mir.return_ty(), TyContext::ReturnTy(SourceInfo {\n                     span: mir.span,\n-                    scope: ARGUMENT_VISIBILITY_SCOPE,\n+                    scope: OUTERMOST_SOURCE_SCOPE,\n                 }));\n \n                 for local in mir.local_decls.indices() {\n@@ -327,16 +327,16 @@ macro_rules! make_mir_visitor {\n                 }\n             }\n \n-            fn super_visibility_scope_data(&mut self,\n-                                           scope_data: & $($mutability)* VisibilityScopeData) {\n-                let VisibilityScopeData {\n+            fn super_source_scope_data(&mut self,\n+                                           scope_data: & $($mutability)* SourceScopeData) {\n+                let SourceScopeData {\n                     ref $($mutability)* span,\n                     ref $($mutability)* parent_scope,\n                 } = *scope_data;\n \n                 self.visit_span(span);\n                 if let Some(ref $($mutability)* parent_scope) = *parent_scope {\n-                    self.visit_visibility_scope(parent_scope);\n+                    self.visit_source_scope(parent_scope);\n                 }\n             }\n \n@@ -715,8 +715,8 @@ macro_rules! make_mir_visitor {\n                     ref $($mutability)* ty,\n                     name: _,\n                     ref $($mutability)* source_info,\n+                    ref $($mutability)* visibility_scope,\n                     internal: _,\n-                    ref $($mutability)* syntactic_scope,\n                     is_user_variable: _,\n                 } = *local_decl;\n \n@@ -725,11 +725,11 @@ macro_rules! make_mir_visitor {\n                     source_info: *source_info,\n                 });\n                 self.visit_source_info(source_info);\n-                self.visit_visibility_scope(syntactic_scope);\n+                self.visit_source_scope(visibility_scope);\n             }\n \n-            fn super_visibility_scope(&mut self,\n-                                      _scope: & $($mutability)* VisibilityScope) {\n+            fn super_source_scope(&mut self,\n+                                      _scope: & $($mutability)* SourceScope) {\n             }\n \n             fn super_branch(&mut self,\n@@ -775,7 +775,7 @@ macro_rules! make_mir_visitor {\n                 } = *source_info;\n \n                 self.visit_span(span);\n-                self.visit_visibility_scope(scope);\n+                self.visit_source_scope(scope);\n             }\n \n             fn super_ty(&mut self, _ty: & $($mutability)* Ty<'tcx>) {"}, {"sha": "9ced0f5f4eca13425a89369f90efa2dd6c68dd51", "filename": "src/librustc_codegen_llvm/debuginfo/create_scope_map.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -15,7 +15,7 @@ use super::utils::{DIB, span_start};\n use llvm;\n use llvm::debuginfo::DIScope;\n use common::CodegenCx;\n-use rustc::mir::{Mir, VisibilityScope};\n+use rustc::mir::{Mir, SourceScope};\n \n use libc::c_uint;\n use std::ptr;\n@@ -45,13 +45,13 @@ impl MirDebugScope {\n /// Produce DIScope DIEs for each MIR Scope which has variables defined in it.\n /// If debuginfo is disabled, the returned vector is empty.\n pub fn create_mir_scopes(cx: &CodegenCx, mir: &Mir, debug_context: &FunctionDebugContext)\n-    -> IndexVec<VisibilityScope, MirDebugScope> {\n+    -> IndexVec<SourceScope, MirDebugScope> {\n     let null_scope = MirDebugScope {\n         scope_metadata: ptr::null_mut(),\n         file_start_pos: BytePos(0),\n         file_end_pos: BytePos(0)\n     };\n-    let mut scopes = IndexVec::from_elem(null_scope, &mir.visibility_scopes);\n+    let mut scopes = IndexVec::from_elem(null_scope, &mir.source_scopes);\n \n     let debug_context = match *debug_context {\n         FunctionDebugContext::RegularContext(ref data) => data,\n@@ -62,15 +62,15 @@ pub fn create_mir_scopes(cx: &CodegenCx, mir: &Mir, debug_context: &FunctionDebu\n     };\n \n     // Find all the scopes with variables defined in them.\n-    let mut has_variables = BitVector::new(mir.visibility_scopes.len());\n+    let mut has_variables = BitVector::new(mir.source_scopes.len());\n     for var in mir.vars_iter() {\n         let decl = &mir.local_decls[var];\n-        has_variables.insert(decl.source_info.scope.index());\n+        has_variables.insert(decl.visibility_scope.index());\n     }\n \n     // Instantiate all scopes.\n-    for idx in 0..mir.visibility_scopes.len() {\n-        let scope = VisibilityScope::new(idx);\n+    for idx in 0..mir.source_scopes.len() {\n+        let scope = SourceScope::new(idx);\n         make_mir_scope(cx, &mir, &has_variables, debug_context, scope, &mut scopes);\n     }\n \n@@ -81,13 +81,13 @@ fn make_mir_scope(cx: &CodegenCx,\n                   mir: &Mir,\n                   has_variables: &BitVector,\n                   debug_context: &FunctionDebugContextData,\n-                  scope: VisibilityScope,\n-                  scopes: &mut IndexVec<VisibilityScope, MirDebugScope>) {\n+                  scope: SourceScope,\n+                  scopes: &mut IndexVec<SourceScope, MirDebugScope>) {\n     if scopes[scope].is_valid() {\n         return;\n     }\n \n-    let scope_data = &mir.visibility_scopes[scope];\n+    let scope_data = &mir.source_scopes[scope];\n     let parent_scope = if let Some(parent) = scope_data.parent_scope {\n         make_mir_scope(cx, mir, has_variables, debug_context, parent, scopes);\n         scopes[parent]"}, {"sha": "f9be91b4f3f13d93d2ae1ad16f66b31c1e03cbc0", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -99,7 +99,7 @@ pub struct FunctionCx<'a, 'tcx:'a> {\n     locals: IndexVec<mir::Local, LocalRef<'tcx>>,\n \n     /// Debug information for MIR scopes.\n-    scopes: IndexVec<mir::VisibilityScope, debuginfo::MirDebugScope>,\n+    scopes: IndexVec<mir::SourceScope, debuginfo::MirDebugScope>,\n \n     /// If this function is being monomorphized, this contains the type substitutions used.\n     param_substs: &'tcx Substs<'tcx>,\n@@ -158,9 +158,9 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n \n     // DILocations inherit source file name from the parent DIScope.  Due to macro expansions\n     // it may so happen that the current span belongs to a different file than the DIScope\n-    // corresponding to span's containing visibility scope.  If so, we need to create a DIScope\n+    // corresponding to span's containing source scope.  If so, we need to create a DIScope\n     // \"extension\" into that file.\n-    fn scope_metadata_for_loc(&self, scope_id: mir::VisibilityScope, pos: BytePos)\n+    fn scope_metadata_for_loc(&self, scope_id: mir::SourceScope, pos: BytePos)\n                                -> llvm::debuginfo::DIScope {\n         let scope_metadata = self.scopes[scope_id].scope_metadata;\n         if pos < self.scopes[scope_id].file_start_pos ||\n@@ -265,7 +265,7 @@ pub fn codegen_mir<'a, 'tcx: 'a>(\n \n             if let Some(name) = decl.name {\n                 // User variable\n-                let debug_scope = fx.scopes[decl.source_info.scope];\n+                let debug_scope = fx.scopes[decl.visibility_scope];\n                 let dbg = debug_scope.is_valid() && bx.sess().opts.debuginfo == FullDebugInfo;\n \n                 if !memory_locals.contains(local.index()) && !dbg {\n@@ -276,7 +276,10 @@ pub fn codegen_mir<'a, 'tcx: 'a>(\n                 debug!(\"alloc: {:?} ({}) -> place\", local, name);\n                 let place = PlaceRef::alloca(&bx, layout, &name.as_str());\n                 if dbg {\n-                    let (scope, span) = fx.debug_loc(decl.source_info);\n+                    let (scope, span) = fx.debug_loc(mir::SourceInfo {\n+                        span: decl.source_info.span,\n+                        scope: decl.visibility_scope,\n+                    });\n                     declare_local(&bx, &fx.debug_context, name, layout.ty, scope,\n                         VariableAccess::DirectVariable { alloca: place.llval },\n                         VariableKind::LocalVariable, span);\n@@ -411,7 +414,7 @@ fn create_funclets<'a, 'tcx>(\n /// indirect.\n fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n                             fx: &FunctionCx<'a, 'tcx>,\n-                            scopes: &IndexVec<mir::VisibilityScope, debuginfo::MirDebugScope>,\n+                            scopes: &IndexVec<mir::SourceScope, debuginfo::MirDebugScope>,\n                             memory_locals: &BitVector)\n                             -> Vec<LocalRef<'tcx>> {\n     let mir = fx.mir;\n@@ -420,7 +423,7 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n     let mut llarg_idx = fx.fn_ty.ret.is_indirect() as usize;\n \n     // Get the argument scope, if it exists and if we need it.\n-    let arg_scope = scopes[mir::ARGUMENT_VISIBILITY_SCOPE];\n+    let arg_scope = scopes[mir::OUTERMOST_SOURCE_SCOPE];\n     let arg_scope = if arg_scope.is_valid() && bx.sess().opts.debuginfo == FullDebugInfo {\n         Some(arg_scope.scope_metadata)\n     } else {"}, {"sha": "5efbdeafd1bbfe3144065b41dc8afb31e5dbc160", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -292,7 +292,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     debug!(\"mbcx.used_mut: {:?}\", mbcx.used_mut);\n \n     for local in mbcx.mir.mut_vars_and_args_iter().filter(|local| !mbcx.used_mut.contains(local)) {\n-        if let ClearCrossCrate::Set(ref vsi) = mbcx.mir.visibility_scope_info {\n+        if let ClearCrossCrate::Set(ref vsi) = mbcx.mir.source_scope_local_data {\n             let local_decl = &mbcx.mir.local_decls[local];\n \n             // Skip implicit `self` argument for closures\n@@ -306,13 +306,13 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n                 None => continue,\n             }\n \n-            let source_info = local_decl.source_info;\n-            let mut_span = tcx.sess.codemap().span_until_non_whitespace(source_info.span);\n+            let span = local_decl.source_info.span;\n+            let mut_span = tcx.sess.codemap().span_until_non_whitespace(span);\n \n             tcx.struct_span_lint_node(\n                 UNUSED_MUT,\n-                vsi[local_decl.syntactic_scope].lint_root,\n-                source_info.span,\n+                vsi[local_decl.source_info.scope].lint_root,\n+                span,\n                 \"variable does not need to be mutable\"\n             )\n             .span_suggestion_short(mut_span, \"remove this `mut`\", \"\".to_owned())"}, {"sha": "7096f91dc1ddb0751402e9f72f7588a08bf7fb3c", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -81,10 +81,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         //\n         // First we build all the statements in the block.\n         let mut let_scope_stack = Vec::with_capacity(8);\n-        let outer_visibility_scope = this.visibility_scope;\n+        let outer_source_scope = this.source_scope;\n         let outer_push_unsafe_count = this.push_unsafe_count;\n         let outer_unpushed_unsafe = this.unpushed_unsafe;\n-        this.update_visibility_scope_for_safety_mode(span, safety_mode);\n+        this.update_source_scope_for_safety_mode(span, safety_mode);\n \n         let source_info = this.source_info(span);\n         for stmt in stmts {\n@@ -112,7 +112,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     this.push_scope((remainder_scope, source_info));\n                     let_scope_stack.push(remainder_scope);\n \n-                    // Declare the bindings, which may create a visibility scope.\n+                    // Declare the bindings, which may create a source scope.\n                     let remainder_span = remainder_scope.span(this.hir.tcx(),\n                                                               &this.hir.region_scope_tree);\n                     let scope = this.declare_bindings(None, remainder_span, lint_level, &pattern,\n@@ -143,9 +143,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         })\n                     }\n \n-                    // Enter the visibility scope, after evaluating the initializer.\n-                    if let Some(visibility_scope) = scope {\n-                        this.visibility_scope = visibility_scope;\n+                    // Enter the source scope, after evaluating the initializer.\n+                    if let Some(source_scope) = scope {\n+                        this.source_scope = source_scope;\n                     }\n                 }\n             }\n@@ -172,19 +172,19 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         for scope in let_scope_stack.into_iter().rev() {\n             unpack!(block = this.pop_scope((scope, source_info), block));\n         }\n-        // Restore the original visibility scope.\n-        this.visibility_scope = outer_visibility_scope;\n+        // Restore the original source scope.\n+        this.source_scope = outer_source_scope;\n         this.push_unsafe_count = outer_push_unsafe_count;\n         this.unpushed_unsafe = outer_unpushed_unsafe;\n         block.unit()\n     }\n \n-    /// If we are changing the safety mode, create a new visibility scope\n-    fn update_visibility_scope_for_safety_mode(&mut self,\n+    /// If we are changing the safety mode, create a new source scope\n+    fn update_source_scope_for_safety_mode(&mut self,\n                                                span: Span,\n                                                safety_mode: BlockSafety)\n     {\n-        debug!(\"update_visibility_scope_for({:?}, {:?})\", span, safety_mode);\n+        debug!(\"update_source_scope_for({:?}, {:?})\", span, safety_mode);\n         let new_unsafety = match safety_mode {\n             BlockSafety::Safe => None,\n             BlockSafety::ExplicitUnsafe(node_id) => {\n@@ -214,7 +214,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         };\n \n         if let Some(unsafety) = new_unsafety {\n-            self.visibility_scope = self.new_visibility_scope(\n+            self.source_scope = self.new_source_scope(\n                 span, LintLevel::Inherited, Some(unsafety));\n         }\n     }"}, {"sha": "fbd771fbe500d7eb8fab1b18401ad1873a271d2a", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -247,7 +247,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         ty: ptr_ty,\n                         name: None,\n                         source_info,\n-                        syntactic_scope: source_info.scope,\n+                        visibility_scope: source_info.scope,\n                         internal: true,\n                         is_user_variable: false\n                     });"}, {"sha": "062a48a8c434d02e5029eedadb1cb1705ab884af", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                               LintLevel::Inherited,\n                                               &arm.patterns[0],\n                                               ArmHasGuard(arm.guard.is_some()));\n-            (body, scope.unwrap_or(self.visibility_scope))\n+            (body, scope.unwrap_or(self.source_scope))\n         }).collect();\n \n         // create binding start block for link them by false edges\n@@ -200,15 +200,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let end_block = self.cfg.start_new_block();\n \n         let outer_source_info = self.source_info(span);\n-        for (arm_index, (body, visibility_scope)) in arm_bodies.into_iter().enumerate() {\n+        for (arm_index, (body, source_scope)) in arm_bodies.into_iter().enumerate() {\n             let mut arm_block = arm_blocks.blocks[arm_index];\n-            // Re-enter the visibility scope we created the bindings in.\n-            self.visibility_scope = visibility_scope;\n+            // Re-enter the source scope we created the bindings in.\n+            self.source_scope = source_scope;\n             unpack!(arm_block = self.into(destination, arm_block, body));\n             self.cfg.terminate(arm_block, outer_source_info,\n                                TerminatorKind::Goto { target: end_block });\n         }\n-        self.visibility_scope = outer_source_info.scope;\n+        self.source_scope = outer_source_info.scope;\n \n         end_block.unit()\n     }\n@@ -298,36 +298,37 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// for the bindings in this patterns, if such a scope had to be created.\n     /// NOTE: Declaring the bindings should always be done in their drop scope.\n     pub fn declare_bindings(&mut self,\n-                            mut var_scope: Option<VisibilityScope>,\n+                            mut visibility_scope: Option<SourceScope>,\n                             scope_span: Span,\n                             lint_level: LintLevel,\n                             pattern: &Pattern<'tcx>,\n                             has_guard: ArmHasGuard)\n-                            -> Option<VisibilityScope> {\n-        assert!(!(var_scope.is_some() && lint_level.is_explicit()),\n-                \"can't have both a var and a lint scope at the same time\");\n-        let mut syntactic_scope = self.visibility_scope;\n+                            -> Option<SourceScope> {\n+        assert!(!(visibility_scope.is_some() && lint_level.is_explicit()),\n+                \"can't have both a visibility and a lint scope at the same time\");\n+        let mut scope = self.source_scope;\n         self.visit_bindings(pattern, &mut |this, mutability, name, var, span, ty| {\n-            if var_scope.is_none() {\n-                var_scope = Some(this.new_visibility_scope(scope_span,\n+            if visibility_scope.is_none() {\n+                visibility_scope = Some(this.new_source_scope(scope_span,\n                                                            LintLevel::Inherited,\n                                                            None));\n-                // If we have lints, create a new visibility scope\n+                // If we have lints, create a new source scope\n                 // that marks the lints for the locals. See the comment\n-                // on the `syntactic_scope` field for why this is needed.\n+                // on the `source_info` field for why this is needed.\n                 if lint_level.is_explicit() {\n-                    syntactic_scope =\n-                        this.new_visibility_scope(scope_span, lint_level, None);\n+                    scope =\n+                        this.new_source_scope(scope_span, lint_level, None);\n                 }\n             }\n             let source_info = SourceInfo {\n                 span,\n-                scope: var_scope.unwrap()\n+                scope,\n             };\n-            this.declare_binding(source_info, syntactic_scope, mutability, name, var,\n+            let visibility_scope = visibility_scope.unwrap();\n+            this.declare_binding(source_info, visibility_scope, mutability, name, var,\n                                  ty, has_guard);\n         });\n-        var_scope\n+        visibility_scope\n     }\n \n     pub fn storage_live_binding(&mut self,\n@@ -1114,24 +1115,24 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// in the arm body, which will have type `T`.\n     fn declare_binding(&mut self,\n                        source_info: SourceInfo,\n-                       syntactic_scope: VisibilityScope,\n+                       visibility_scope: SourceScope,\n                        mutability: Mutability,\n                        name: Name,\n                        var_id: NodeId,\n                        var_ty: Ty<'tcx>,\n                        has_guard: ArmHasGuard)\n     {\n-        debug!(\"declare_binding(var_id={:?}, name={:?}, var_ty={:?}, source_info={:?}, \\\n-                syntactic_scope={:?})\",\n-               var_id, name, var_ty, source_info, syntactic_scope);\n+        debug!(\"declare_binding(var_id={:?}, name={:?}, var_ty={:?}, visibility_scope={:?}, \\\n+                source_info={:?})\",\n+               var_id, name, var_ty, visibility_scope, source_info);\n \n         let tcx = self.hir.tcx();\n         let local = LocalDecl::<'tcx> {\n             mutability,\n             ty: var_ty.clone(),\n             name: Some(name),\n             source_info,\n-            syntactic_scope,\n+            visibility_scope,\n             internal: false,\n             is_user_variable: true,\n         };\n@@ -1143,7 +1144,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 ty: tcx.mk_imm_ref(tcx.types.re_empty, var_ty),\n                 name: Some(name),\n                 source_info,\n-                syntactic_scope,\n+                visibility_scope,\n                 internal: false,\n                 is_user_variable: true,\n             });"}, {"sha": "ca7a2daf39d2ecb9bef31b465c8710bc89aa3ec6", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -256,9 +256,9 @@ struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n     /// the vector of all scopes that we have created thus far;\n     /// we track this for debuginfo later\n-    visibility_scopes: IndexVec<VisibilityScope, VisibilityScopeData>,\n-    visibility_scope_info: IndexVec<VisibilityScope, VisibilityScopeInfo>,\n-    visibility_scope: VisibilityScope,\n+    source_scopes: IndexVec<SourceScope, SourceScopeData>,\n+    source_scope_local_data: IndexVec<SourceScope, SourceScopeLocalData>,\n+    source_scope: SourceScope,\n \n     /// the guard-context: each time we build the guard expression for\n     /// a match arm, we push onto this stack, and then pop when we\n@@ -593,9 +593,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             fn_span: span,\n             arg_count,\n             scopes: vec![],\n-            visibility_scopes: IndexVec::new(),\n-            visibility_scope: ARGUMENT_VISIBILITY_SCOPE,\n-            visibility_scope_info: IndexVec::new(),\n+            source_scopes: IndexVec::new(),\n+            source_scope: OUTERMOST_SOURCE_SCOPE,\n+            source_scope_local_data: IndexVec::new(),\n             guard_context: vec![],\n             push_unsafe_count: 0,\n             unpushed_unsafe: safety,\n@@ -611,9 +611,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         assert_eq!(builder.cfg.start_new_block(), START_BLOCK);\n         assert_eq!(\n-            builder.new_visibility_scope(span, lint_level, Some(safety)),\n-            ARGUMENT_VISIBILITY_SCOPE);\n-        builder.visibility_scopes[ARGUMENT_VISIBILITY_SCOPE].parent_scope = None;\n+            builder.new_source_scope(span, lint_level, Some(safety)),\n+            OUTERMOST_SOURCE_SCOPE);\n+        builder.source_scopes[OUTERMOST_SOURCE_SCOPE].parent_scope = None;\n \n         builder\n     }\n@@ -629,8 +629,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n \n         Mir::new(self.cfg.basic_blocks,\n-                 self.visibility_scopes,\n-                 ClearCrossCrate::Set(self.visibility_scope_info),\n+                 self.source_scopes,\n+                 ClearCrossCrate::Set(self.source_scope_local_data),\n                  IndexVec::new(),\n                  yield_ty,\n                  self.local_decls,\n@@ -657,14 +657,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n+            let source_info = SourceInfo {\n+                scope: OUTERMOST_SOURCE_SCOPE,\n+                span: pattern.map_or(self.fn_span, |pat| pat.span)\n+            };\n             self.local_decls.push(LocalDecl {\n                 mutability: Mutability::Mut,\n                 ty,\n-                source_info: SourceInfo {\n-                    scope: ARGUMENT_VISIBILITY_SCOPE,\n-                    span: pattern.map_or(self.fn_span, |pat| pat.span)\n-                },\n-                syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n+                source_info,\n+                visibility_scope: source_info.scope,\n                 name,\n                 internal: false,\n                 is_user_variable: false,\n@@ -702,9 +703,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         }\n \n-        // Enter the argument pattern bindings visibility scope, if it exists.\n-        if let Some(visibility_scope) = scope {\n-            self.visibility_scope = visibility_scope;\n+        // Enter the argument pattern bindings source scope, if it exists.\n+        if let Some(source_scope) = scope {\n+            self.source_scope = source_scope;\n         }\n \n         let body = self.hir.mirror(ast_body);"}, {"sha": "ee0a087a1dd0ae9860199e80afa58d8fc4cac970", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -100,8 +100,8 @@ use rustc_data_structures::fx::FxHashMap;\n \n #[derive(Debug)]\n pub struct Scope<'tcx> {\n-    /// The visibility scope this scope was created in.\n-    visibility_scope: VisibilityScope,\n+    /// The source scope this scope was created in.\n+    source_scope: SourceScope,\n \n     /// the region span of this scope within source code.\n     region_scope: region::Scope,\n@@ -251,11 +251,11 @@ impl<'tcx> Scope<'tcx> {\n         }\n     }\n \n-    /// Given a span and this scope's visibility scope, make a SourceInfo.\n+    /// Given a span and this scope's source scope, make a SourceInfo.\n     fn source_info(&self, span: Span) -> SourceInfo {\n         SourceInfo {\n             span,\n-            scope: self.visibility_scope\n+            scope: self.source_scope\n         }\n     }\n }\n@@ -316,14 +316,14 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> BlockAnd<R>\n     {\n         debug!(\"in_scope(region_scope={:?}, block={:?})\", region_scope, block);\n-        let visibility_scope = self.visibility_scope;\n+        let source_scope = self.source_scope;\n         let tcx = self.hir.tcx();\n         if let LintLevel::Explicit(node_id) = lint_level {\n             let same_lint_scopes = tcx.dep_graph.with_ignore(|| {\n                 let sets = tcx.lint_levels(LOCAL_CRATE);\n                 let parent_hir_id =\n                     tcx.hir.definitions().node_to_hir_id(\n-                        self.visibility_scope_info[visibility_scope].lint_root\n+                        self.source_scope_local_data[source_scope].lint_root\n                             );\n                 let current_hir_id =\n                     tcx.hir.definitions().node_to_hir_id(node_id);\n@@ -332,15 +332,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             });\n \n             if !same_lint_scopes {\n-                self.visibility_scope =\n-                    self.new_visibility_scope(region_scope.1.span, lint_level,\n+                self.source_scope =\n+                    self.new_source_scope(region_scope.1.span, lint_level,\n                                               None);\n             }\n         }\n         self.push_scope(region_scope);\n         let rv = unpack!(block = f(self));\n         unpack!(block = self.pop_scope(region_scope, block));\n-        self.visibility_scope = visibility_scope;\n+        self.source_scope = source_scope;\n         debug!(\"in_scope: exiting region_scope={:?} block={:?}\", region_scope, block);\n         block.and(rv)\n     }\n@@ -351,9 +351,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// wrapper maybe preferable.\n     pub fn push_scope(&mut self, region_scope: (region::Scope, SourceInfo)) {\n         debug!(\"push_scope({:?})\", region_scope);\n-        let vis_scope = self.visibility_scope;\n+        let vis_scope = self.source_scope;\n         self.scopes.push(Scope {\n-            visibility_scope: vis_scope,\n+            source_scope: vis_scope,\n             region_scope: region_scope.0,\n             region_scope_span: region_scope.1.span,\n             needs_cleanup: false,\n@@ -509,30 +509,30 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         Some(result)\n     }\n \n-    /// Creates a new visibility scope, nested in the current one.\n-    pub fn new_visibility_scope(&mut self,\n+    /// Creates a new source scope, nested in the current one.\n+    pub fn new_source_scope(&mut self,\n                                 span: Span,\n                                 lint_level: LintLevel,\n-                                safety: Option<Safety>) -> VisibilityScope {\n-        let parent = self.visibility_scope;\n-        debug!(\"new_visibility_scope({:?}, {:?}, {:?}) - parent({:?})={:?}\",\n+                                safety: Option<Safety>) -> SourceScope {\n+        let parent = self.source_scope;\n+        debug!(\"new_source_scope({:?}, {:?}, {:?}) - parent({:?})={:?}\",\n                span, lint_level, safety,\n-               parent, self.visibility_scope_info.get(parent));\n-        let scope = self.visibility_scopes.push(VisibilityScopeData {\n+               parent, self.source_scope_local_data.get(parent));\n+        let scope = self.source_scopes.push(SourceScopeData {\n             span,\n             parent_scope: Some(parent),\n         });\n-        let scope_info = VisibilityScopeInfo {\n+        let scope_local_data = SourceScopeLocalData {\n             lint_root: if let LintLevel::Explicit(lint_root) = lint_level {\n                 lint_root\n             } else {\n-                self.visibility_scope_info[parent].lint_root\n+                self.source_scope_local_data[parent].lint_root\n             },\n             safety: safety.unwrap_or_else(|| {\n-                self.visibility_scope_info[parent].safety\n+                self.source_scope_local_data[parent].safety\n             })\n         };\n-        self.visibility_scope_info.push(scope_info);\n+        self.source_scope_local_data.push(scope_local_data);\n         scope\n     }\n \n@@ -552,11 +552,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             .unwrap_or_else(|| span_bug!(span, \"no enclosing breakable scope found\"))\n     }\n \n-    /// Given a span and the current visibility scope, make a SourceInfo.\n+    /// Given a span and the current source scope, make a SourceInfo.\n     pub fn source_info(&self, span: Span) -> SourceInfo {\n         SourceInfo {\n             span,\n-            scope: self.visibility_scope\n+            scope: self.source_scope\n         }\n     }\n \n@@ -730,7 +730,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let resumeblk = self.cfg.start_new_cleanup_block();\n             self.cfg.terminate(resumeblk,\n                                SourceInfo {\n-                                   scope: ARGUMENT_VISIBILITY_SCOPE,\n+                                   scope: OUTERMOST_SOURCE_SCOPE,\n                                    span: self.fn_span\n                                },\n                                TerminatorKind::Resume);\n@@ -939,10 +939,10 @@ fn build_diverge_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     // remainder. If everything is cached, we'll just walk right to\n     // left reading the cached results but never create anything.\n \n-    let visibility_scope = scope.visibility_scope;\n+    let source_scope = scope.source_scope;\n     let source_info = |span| SourceInfo {\n         span,\n-        scope: visibility_scope\n+        scope: source_scope\n     };\n \n     // Next, build up the drops. Here we iterate the vector in"}, {"sha": "d4a9b2cdd1fbf4022b819540a16387dca7211e8a", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -138,10 +138,11 @@ enum CallKind {\n }\n \n fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n+    let source_info = SourceInfo { scope: OUTERMOST_SOURCE_SCOPE, span };\n     LocalDecl {\n         mutability, ty, name: None,\n-        source_info: SourceInfo { scope: ARGUMENT_VISIBILITY_SCOPE, span },\n-        syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n+        source_info,\n+        visibility_scope: source_info.scope,\n         internal: false,\n         is_user_variable: false\n     }\n@@ -178,7 +179,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let sig = tcx.erase_late_bound_regions(&sig);\n     let span = tcx.def_span(def_id);\n \n-    let source_info = SourceInfo { span, scope: ARGUMENT_VISIBILITY_SCOPE };\n+    let source_info = SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE };\n \n     let return_block = BasicBlock::new(1);\n     let mut blocks = IndexVec::new();\n@@ -195,7 +196,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut mir = Mir::new(\n         blocks,\n         IndexVec::from_elem_n(\n-            VisibilityScopeData { span: span, parent_scope: None }, 1\n+            SourceScopeData { span: span, parent_scope: None }, 1\n         ),\n         ClearCrossCrate::Clear,\n         IndexVec::new(),\n@@ -354,7 +355,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n         Mir::new(\n             self.blocks,\n             IndexVec::from_elem_n(\n-                VisibilityScopeData { span: self.span, parent_scope: None }, 1\n+                SourceScopeData { span: self.span, parent_scope: None }, 1\n             ),\n             ClearCrossCrate::Clear,\n             IndexVec::new(),\n@@ -367,7 +368,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n     }\n \n     fn source_info(&self) -> SourceInfo {\n-        SourceInfo { span: self.span, scope: ARGUMENT_VISIBILITY_SCOPE }\n+        SourceInfo { span: self.span, scope: OUTERMOST_SOURCE_SCOPE }\n     }\n \n     fn block(\n@@ -688,7 +689,7 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"build_call_shim: sig={:?}\", sig);\n \n     let mut local_decls = local_decls_for_sig(&sig, span);\n-    let source_info = SourceInfo { span, scope: ARGUMENT_VISIBILITY_SCOPE };\n+    let source_info = SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE };\n \n     let rcvr_arg = Local::new(1+0);\n     let rcvr_l = Place::Local(rcvr_arg);\n@@ -794,7 +795,7 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut mir = Mir::new(\n         blocks,\n         IndexVec::from_elem_n(\n-            VisibilityScopeData { span: span, parent_scope: None }, 1\n+            SourceScopeData { span: span, parent_scope: None }, 1\n         ),\n         ClearCrossCrate::Clear,\n         IndexVec::new(),\n@@ -836,7 +837,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n \n     let source_info = SourceInfo {\n         span,\n-        scope: ARGUMENT_VISIBILITY_SCOPE\n+        scope: OUTERMOST_SOURCE_SCOPE\n     };\n \n     let variant_no = if adt_def.is_enum() {\n@@ -869,7 +870,7 @@ pub fn build_adt_ctor<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a, 'gcx, 'tcx>,\n     Mir::new(\n         IndexVec::from_elem_n(start_block, 1),\n         IndexVec::from_elem_n(\n-            VisibilityScopeData { span: span, parent_scope: None }, 1\n+            SourceScopeData { span: span, parent_scope: None }, 1\n         ),\n         ClearCrossCrate::Clear,\n         IndexVec::new(),"}, {"sha": "44f9477c2ecbf14d4d391fefc4aeab040fb93427", "filename": "src/librustc_mir/transform/add_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_validation.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -231,7 +231,7 @@ impl MirPass for AddValidation {\n         // Add an AcquireValid at the beginning of the start block.\n         {\n             let source_info = SourceInfo {\n-                scope: ARGUMENT_VISIBILITY_SCOPE,\n+                scope: OUTERMOST_SOURCE_SCOPE,\n                 span: mir.span, // FIXME: Consider using just the span covering the function\n                                 // argument declaration.\n             };"}, {"sha": "fedd0774df44cb20595283d211f029877b0c2de4", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -27,7 +27,7 @@ use util;\n \n pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n     mir: &'a Mir<'tcx>,\n-    visibility_scope_info: &'a IndexVec<VisibilityScope, VisibilityScopeInfo>,\n+    source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n     violations: Vec<UnsafetyViolation>,\n     source_info: SourceInfo,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -38,16 +38,16 @@ pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n \n impl<'a, 'gcx, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn new(mir: &'a Mir<'tcx>,\n-           visibility_scope_info: &'a IndexVec<VisibilityScope, VisibilityScopeInfo>,\n+           source_scope_local_data: &'a IndexVec<SourceScope, SourceScopeLocalData>,\n            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n            param_env: ty::ParamEnv<'tcx>) -> Self {\n         Self {\n             mir,\n-            visibility_scope_info,\n+            source_scope_local_data,\n             violations: vec![],\n             source_info: SourceInfo {\n                 span: mir.span,\n-                scope: ARGUMENT_VISIBILITY_SCOPE\n+                scope: OUTERMOST_SOURCE_SCOPE\n             },\n             tcx,\n             param_env,\n@@ -147,7 +147,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             if util::is_disaligned(self.tcx, self.mir, self.param_env, place) {\n                 let source_info = self.source_info;\n                 let lint_root =\n-                    self.visibility_scope_info[source_info.scope].lint_root;\n+                    self.source_scope_local_data[source_info.scope].lint_root;\n                 self.register_violations(&[UnsafetyViolation {\n                     source_info,\n                     description: Symbol::intern(\"borrow of packed field\").as_interned_str(),\n@@ -212,7 +212,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 } else if self.tcx.is_foreign_item(def_id) {\n                     let source_info = self.source_info;\n                     let lint_root =\n-                        self.visibility_scope_info[source_info.scope].lint_root;\n+                        self.source_scope_local_data[source_info.scope].lint_root;\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n                         description: Symbol::intern(\"use of extern static\").as_interned_str(),\n@@ -240,7 +240,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n     fn register_violations(&mut self,\n                            violations: &[UnsafetyViolation],\n                            unsafe_blocks: &[(ast::NodeId, bool)]) {\n-        let within_unsafe = match self.visibility_scope_info[self.source_info.scope].safety {\n+        let within_unsafe = match self.source_scope_local_data[self.source_info.scope].safety {\n             Safety::Safe => {\n                 for violation in violations {\n                     if !self.violations.contains(violation) {\n@@ -327,7 +327,7 @@ fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n     // `mir_built` force this.\n     let mir = &tcx.mir_built(def_id).borrow();\n \n-    let visibility_scope_info = match mir.visibility_scope_info {\n+    let source_scope_local_data = match mir.source_scope_local_data {\n         ClearCrossCrate::Set(ref data) => data,\n         ClearCrossCrate::Clear => {\n             debug!(\"unsafety_violations: {:?} - remote, skipping\", def_id);\n@@ -340,7 +340,7 @@ fn unsafety_check_result<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n \n     let param_env = tcx.param_env(def_id);\n     let mut checker = UnsafetyChecker::new(\n-        mir, visibility_scope_info, tcx, param_env);\n+        mir, source_scope_local_data, tcx, param_env);\n     checker.visit_mir(mir);\n \n     check_unused_unsafe(tcx, def_id, &checker.used_unsafe, &mut checker.inherited_blocks);"}, {"sha": "ef61fe099bfb1a35a5372cc416b799c042aad9ba", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -338,7 +338,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                         .bits();\n                     let right_size = self.tcx.layout_of(self.param_env.and(right.1)).unwrap().size;\n                     if r.to_bits(right_size).ok().map_or(false, |b| b >= left_bits as u128) {\n-                        let scope_info = match self.mir.visibility_scope_info {\n+                        let source_scope_local_data = match self.mir.source_scope_local_data {\n                             ClearCrossCrate::Set(ref data) => data,\n                             ClearCrossCrate::Clear => return None,\n                         };\n@@ -347,7 +347,7 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n                         } else {\n                             \"left\"\n                         };\n-                        let node_id = scope_info[source_info.scope].lint_root;\n+                        let node_id = source_scope_local_data[source_info.scope].lint_root;\n                         self.tcx.lint_node(\n                             ::rustc::lint::builtin::EXCEEDING_BITSHIFTS,\n                             node_id,"}, {"sha": "7ac3b7beb06d5358dc797eda9763208e3bc5d11a", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -295,12 +295,13 @@ fn make_generator_state_argument_indirect<'a, 'tcx>(\n \n fn replace_result_variable<'tcx>(ret_ty: Ty<'tcx>,\n                             mir: &mut Mir<'tcx>) -> Local {\n+    let source_info = source_info(mir);\n     let new_ret = LocalDecl {\n         mutability: Mutability::Mut,\n         ty: ret_ty,\n         name: None,\n-        source_info: source_info(mir),\n-        syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n+        source_info,\n+        visibility_scope: source_info.scope,\n         internal: false,\n         is_user_variable: false,\n     };\n@@ -641,7 +642,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         ty: tcx.mk_nil(),\n         name: None,\n         source_info,\n-        syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n+        visibility_scope: source_info.scope,\n         internal: false,\n         is_user_variable: false,\n     };\n@@ -657,7 +658,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         }),\n         name: None,\n         source_info,\n-        syntactic_scope: ARGUMENT_VISIBILITY_SCOPE,\n+        visibility_scope: source_info.scope,\n         internal: false,\n         is_user_variable: false,\n     };\n@@ -762,7 +763,7 @@ fn create_generator_resume_function<'a, 'tcx>(\n fn source_info<'a, 'tcx>(mir: &Mir<'tcx>) -> SourceInfo {\n     SourceInfo {\n         span: mir.span,\n-        scope: ARGUMENT_VISIBILITY_SCOPE,\n+        scope: OUTERMOST_SOURCE_SCOPE,\n     }\n }\n "}, {"sha": "a1845f7ef268cd15a0b304c1ca67d1ad5cd092af", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -380,26 +380,28 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 debug!(\"Inlined {:?} into {:?}\", callsite.callee, self.source);\n \n                 let mut local_map = IndexVec::with_capacity(callee_mir.local_decls.len());\n-                let mut scope_map = IndexVec::with_capacity(callee_mir.visibility_scopes.len());\n+                let mut scope_map = IndexVec::with_capacity(callee_mir.source_scopes.len());\n                 let mut promoted_map = IndexVec::with_capacity(callee_mir.promoted.len());\n \n-                for mut scope in callee_mir.visibility_scopes.iter().cloned() {\n+                for mut scope in callee_mir.source_scopes.iter().cloned() {\n                     if scope.parent_scope.is_none() {\n                         scope.parent_scope = Some(callsite.location.scope);\n                         scope.span = callee_mir.span;\n                     }\n \n                     scope.span = callsite.location.span;\n \n-                    let idx = caller_mir.visibility_scopes.push(scope);\n+                    let idx = caller_mir.source_scopes.push(scope);\n                     scope_map.push(idx);\n                 }\n \n                 for loc in callee_mir.vars_and_temps_iter() {\n                     let mut local = callee_mir.local_decls[loc].clone();\n \n-                    local.source_info.scope = scope_map[local.source_info.scope];\n+                    local.source_info.scope =\n+                        scope_map[local.source_info.scope];\n                     local.source_info.span = callsite.location.span;\n+                    local.visibility_scope = scope_map[local.visibility_scope];\n \n                     let idx = caller_mir.local_decls.push(local);\n                     local_map.push(idx);\n@@ -618,7 +620,7 @@ struct Integrator<'a, 'tcx: 'a> {\n     block_idx: usize,\n     args: &'a [Local],\n     local_map: IndexVec<Local, Local>,\n-    scope_map: IndexVec<VisibilityScope, VisibilityScope>,\n+    scope_map: IndexVec<SourceScope, SourceScope>,\n     promoted_map: IndexVec<Promoted, Promoted>,\n     _callsite: CallSite<'tcx>,\n     destination: Place<'tcx>,\n@@ -745,7 +747,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_visibility_scope(&mut self, scope: &mut VisibilityScope) {\n+    fn visit_source_scope(&mut self, scope: &mut SourceScope) {\n         *scope = self.scope_map[*scope];\n     }\n "}, {"sha": "8dc6539b65d6a8178ec2f1d8074991fc7522bae8", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             terminator: Some(Terminator {\n                 source_info: SourceInfo {\n                     span,\n-                    scope: ARGUMENT_VISIBILITY_SCOPE\n+                    scope: OUTERMOST_SOURCE_SCOPE\n                 },\n                 kind: TerminatorKind::Return\n             }),\n@@ -181,7 +181,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         data.statements.push(Statement {\n             source_info: SourceInfo {\n                 span,\n-                scope: ARGUMENT_VISIBILITY_SCOPE\n+                scope: OUTERMOST_SOURCE_SCOPE\n             },\n             kind: StatementKind::Assign(Place::Local(dest), rvalue)\n         });\n@@ -335,6 +335,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             // otherwise we would use the `promoted` directly.\n                             let mut promoted_ref = LocalDecl::new_temp(ref_ty, span);\n                             promoted_ref.source_info = statement.source_info;\n+                            promoted_ref.visibility_scope = statement.source_info.scope;\n                             let promoted_ref = local_decls.push(promoted_ref);\n                             assert_eq!(self.temps.push(TempState::Unpromotable), promoted_ref);\n                             self.extra_statements.push((loc, Statement {\n@@ -424,8 +425,8 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n                 IndexVec::new(),\n                 // FIXME: maybe try to filter this to avoid blowing up\n                 // memory usage?\n-                mir.visibility_scopes.clone(),\n-                mir.visibility_scope_info.clone(),\n+                mir.source_scopes.clone(),\n+                mir.source_scope_local_data.clone(),\n                 IndexVec::new(),\n                 None,\n                 initial_locals,"}, {"sha": "21ff7eaa72d9d298be595b11d0a2aca70e980a62", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> MirPatch<'tcx> {\n                 terminator: Some(Terminator {\n                     source_info: SourceInfo {\n                         span: mir.span,\n-                        scope: ARGUMENT_VISIBILITY_SCOPE\n+                        scope: OUTERMOST_SOURCE_SCOPE\n                     },\n                     kind: TerminatorKind::Resume\n                 }),"}, {"sha": "8176c644dd7457b392b1fd07a62af275cd304e24", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -447,9 +447,9 @@ fn comment(tcx: TyCtxt, SourceInfo { span, scope }: SourceInfo) -> String {\n fn write_scope_tree(\n     tcx: TyCtxt,\n     mir: &Mir,\n-    scope_tree: &FxHashMap<VisibilityScope, Vec<VisibilityScope>>,\n+    scope_tree: &FxHashMap<SourceScope, Vec<SourceScope>>,\n     w: &mut dyn Write,\n-    parent: VisibilityScope,\n+    parent: SourceScope,\n     depth: usize,\n ) -> io::Result<()> {\n     let indent = depth * INDENT.len();\n@@ -460,7 +460,7 @@ fn write_scope_tree(\n     };\n \n     for &child in children {\n-        let data = &mir.visibility_scopes[child];\n+        let data = &mir.source_scopes[child];\n         assert_eq!(data.parent_scope, Some(parent));\n         writeln!(w, \"{0:1$}scope {2} {{\", \"\", indent, child.index())?;\n \n@@ -519,16 +519,16 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n     writeln!(w, \"{{\")?;\n \n     // construct a scope tree and write it out\n-    let mut scope_tree: FxHashMap<VisibilityScope, Vec<VisibilityScope>> = FxHashMap();\n-    for (index, scope_data) in mir.visibility_scopes.iter().enumerate() {\n+    let mut scope_tree: FxHashMap<SourceScope, Vec<SourceScope>> = FxHashMap();\n+    for (index, scope_data) in mir.source_scopes.iter().enumerate() {\n         if let Some(parent) = scope_data.parent_scope {\n             scope_tree\n                 .entry(parent)\n                 .or_insert(vec![])\n-                .push(VisibilityScope::new(index));\n+                .push(SourceScope::new(index));\n         } else {\n             // Only the argument scope has no parent, because it's the root.\n-            assert_eq!(index, ARGUMENT_VISIBILITY_SCOPE.index());\n+            assert_eq!(index, OUTERMOST_SOURCE_SCOPE.index());\n         }\n     }\n \n@@ -541,7 +541,7 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n              indented_retptr,\n              ALIGN)?;\n \n-    write_scope_tree(tcx, mir, &scope_tree, w, ARGUMENT_VISIBILITY_SCOPE, 1)?;\n+    write_scope_tree(tcx, mir, &scope_tree, w, OUTERMOST_SOURCE_SCOPE, 1)?;\n \n     write_temp_decls(mir, w)?;\n "}, {"sha": "b795685bb6fd80a904a7a8ee448cd59853d61087", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::{Constant, Literal, Location, Local, LocalDecl};\n use rustc::mir::{Place, PlaceElem, PlaceProjection};\n use rustc::mir::{Mir, Operand, ProjectionElem};\n use rustc::mir::{Rvalue, SourceInfo, Statement, StatementKind};\n-use rustc::mir::{Terminator, TerminatorKind, VisibilityScope, VisibilityScopeData};\n+use rustc::mir::{Terminator, TerminatorKind, SourceScope, SourceScopeData};\n use rustc::mir::interpret::EvalErrorKind;\n use rustc::mir::visit as mir_visit;\n use rustc::ty::{self, ClosureSubsts, TyCtxt};\n@@ -72,10 +72,10 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.super_basic_block_data(block, data);\n     }\n \n-    fn visit_visibility_scope_data(&mut self,\n-                                   scope_data: &VisibilityScopeData) {\n-        self.record(\"VisibilityScopeData\", scope_data);\n-        self.super_visibility_scope_data(scope_data);\n+    fn visit_source_scope_data(&mut self,\n+                                   scope_data: &SourceScopeData) {\n+        self.record(\"SourceScopeData\", scope_data);\n+        self.super_source_scope_data(scope_data);\n     }\n \n     fn visit_statement(&mut self,\n@@ -278,9 +278,9 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.super_local_decl(local, local_decl);\n     }\n \n-    fn visit_visibility_scope(&mut self,\n-                              scope: &VisibilityScope) {\n+    fn visit_source_scope(&mut self,\n+                              scope: &SourceScope) {\n         self.record(\"VisiblityScope\", scope);\n-        self.super_visibility_scope(scope);\n+        self.super_source_scope(scope);\n     }\n }"}, {"sha": "8390a0d19ae7b51e416d624c3bec8000d636e30e", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -33,9 +33,10 @@ impl Drop for S {\n // START rustc.main.ElaborateDrops.before.mir\n //     let mut _0: ();\n //     scope 1 {\n+//     }\n+//     scope 2 {\n //         let _1: std::boxed::Box<S>;\n //     }\n-//     ...\n //     let mut _2: std::boxed::Box<S>;\n //     let mut _3: ();\n //     let mut _4: std::boxed::Box<S>;"}, {"sha": "184459aa90eb8cf403fc014e8a253f246ac7ec97", "filename": "src/test/mir-opt/end_region_1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_1.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -22,10 +22,10 @@ fn main() {\n // START rustc.main.SimplifyCfg-qualify-consts.after.mir\n //     let mut _0: ();\n //     ...\n-//     let _1: i32;\n-//     ...\n //     let _2: &'10_1rs i32;\n //     ...\n+//     let _1: i32;\n+//     ...\n //     bb0: {\n //         StorageLive(_1);\n //         _1 = const 3i32;"}, {"sha": "c40ab5253a075d3f6233d73c46003a37623a28e1", "filename": "src/test/mir-opt/end_region_2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_2.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -27,11 +27,11 @@ fn main() {\n // START rustc.main.SimplifyCfg-qualify-consts.after.mir\n //     let mut _0: ();\n //     ...\n-//     let _2: bool;\n+//     let _7: &'23_3rs bool;\n //     ...\n //     let _3: &'23_1rs bool;\n //     ...\n-//     let _7: &'23_3rs bool;\n+//     let _2: bool;\n //     ...\n //     let mut _4: ();\n //     let mut _5: bool;"}, {"sha": "086d80d15eacd43150333595e108900fc861313e", "filename": "src/test/mir-opt/end_region_3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_3.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -28,11 +28,11 @@ fn main() {\n // START rustc.main.SimplifyCfg-qualify-consts.after.mir\n //     let mut _0: ();\n //     ...\n-//     let mut _1: bool;\n+//     let _7: &'26_3rs bool;\n //     ...\n //     let _3: &'26_1rs bool;\n //     ...\n-//     let _7: &'26_3rs bool;\n+//     let mut _1: bool;\n //     ...\n //     let mut _2: ();\n //     let mut _4: ();"}, {"sha": "fc58e0824e8bdad258eeb8cbfafdb19a9039ec30", "filename": "src/test/mir-opt/end_region_4.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_4.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -32,13 +32,13 @@ fn foo(i: i32) {\n // START rustc.main.SimplifyCfg-qualify-consts.after.mir\n //     let mut _0: ();\n //     ...\n-//     let _1: D;\n-//     ...\n-//     let _2: i32;\n+//     let _6: &'26_4rs i32;\n //     ...\n //     let _3: &'26_2rs i32;\n //     ...\n-//     let _6: &'26_4rs i32;\n+//     let _2: i32;\n+//     ...\n+//     let _1: D;\n //     ...\n //     let mut _4: ();\n //     let mut _5: i32;"}, {"sha": "96a64f2eebfb49cc1547c3d9d4235cdc1791bfff", "filename": "src/test/mir-opt/end_region_8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_8.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -31,10 +31,10 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // fn main() -> () {\n //    let mut _0: ();\n //    ...\n-//    let _1: D;\n-//    ...\n //    let _2: &'21_1rs D;\n //    ...\n+//    let _1: D;\n+//    ...\n //    let mut _3: ();\n //    let mut _4: [closure@NodeId(22) r:&'19s D];\n //    let mut _5: &'21_1rs D;"}, {"sha": "15c31e178759d076dec144ef3426f22b13daf949", "filename": "src/test/mir-opt/end_region_9.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_9.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -41,11 +41,11 @@ fn main() {\n // fn main() -> () {\n //     let mut _0: ();\n //     ...\n-//     let mut _1: bool;\n+//     let mut _4: &'33_0rs i32;\n //     ...\n //     let _2: i32;\n //     ...\n-//     let mut _4: &'33_0rs i32;\n+//     let mut _1: bool;\n //     ...\n //     let mut _3: ();\n //     let mut _5: !;"}, {"sha": "2d6962c5a5c1f5609b9357532ede492609220131", "filename": "src/test/mir-opt/end_region_cyclic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -43,9 +43,9 @@ fn query() -> bool { true }\n // fn main() -> (){\n //     let mut _0: ();\n //     scope 1 {\n-//         let _2: S<'36_0rs>;\n //     }\n //     scope 2 {\n+//         let _2: S<'36_0rs>;\n //     }\n //     let mut _1: ();\n //     let mut _3: std::cell::Cell<std::option::Option<&'36_0rs S<'36_0rs>>>;"}, {"sha": "e43b4052e07e885a08420b9d7f4bf0d9a187792e", "filename": "src/test/mir-opt/issue-41110.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -40,9 +40,10 @@ impl S {\n // START rustc.main.ElaborateDrops.after.mir\n //    let mut _0: ();\n //    scope 1 {\n+//    }\n+//    scope 2 {\n //        let _1: ();\n //    }\n-//    ...\n //    let mut _2: S;\n //    let mut _3: S;\n //    let mut _4: S;\n@@ -52,10 +53,10 @@ impl S {\n // START rustc.test.ElaborateDrops.after.mir\n //    let mut _0: ();\n //    ...\n-//    let _1: S;\n-//    ...\n //    let mut _2: S;\n //    ...\n+//    let _1: S;\n+//    ...\n //    let mut _3: ();\n //    let mut _4: S;\n //    let mut _5: S;"}, {"sha": "94a6a9799cf9d1b87c5c362db33e79ac6b7a5d35", "filename": "src/test/mir-opt/nll/reborrow-basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Freborrow-basic.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -32,7 +32,7 @@ fn main() {\n // ...\n // | '_#9r    | {bb0[10], bb0[14..=17]}\n // ...\n-// let _2: &'_#7r mut i32;\n-// ...\n // let _4: &'_#9r mut i32;\n+// ...\n+// let _2: &'_#7r mut i32;\n // END rustc.main.nll.0.mir"}, {"sha": "57a11d8dd25cb280c87d5ea8922e947abc35a1a8", "filename": "src/test/mir-opt/nll/region-subtyping-basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -37,10 +37,10 @@ fn main() {\n // | '_#4r    | {bb2[5..=6], bb3[0..=1]}\n // END rustc.main.nll.0.mir\n // START rustc.main.nll.0.mir\n-// let _2: &'_#3r usize;\n-// ...\n // let _6: &'_#4r usize;\n // ...\n+// let _2: &'_#3r usize;\n+// ...\n // _2 = &'_#2r _1[_3];\n // ...\n // _7 = _2;"}, {"sha": "9441c6f4085a2d9bc3bfbbf75618219f2d4caeb1", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -29,9 +29,9 @@ impl Drop for Droppy {\n // fn main() -> () {\n //     let mut _0: ();\n //     scope 1 {\n-//         let mut _1: Packed;\n //     }\n //     scope 2 {\n+//         let mut _1: Packed;\n //     }\n //     let mut _2: Aligned;\n //     let mut _3: Droppy;"}, {"sha": "72ec9ce400ffeccbb8a30c0a13ffc637bef1c1de", "filename": "src/test/mir-opt/validate_3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30cae5870907e7ae9e74a39eee5bcf55ee5d2809/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_3.rs?ref=30cae5870907e7ae9e74a39eee5bcf55ee5d2809", "patch": "@@ -32,14 +32,14 @@ fn main() {\n // fn main() -> (){\n //     let mut _0: ();\n //     scope 1 {\n-//         let _1: Test;\n //         scope 3 {\n-//             let _2: &ReErased Test;\n //         }\n //         scope 4 {\n+//             let _2: &ReErased Test;\n //         }\n //     }\n //     scope 2 {\n+//         let _1: Test;\n //     }\n //     let mut _3: ();\n //     let mut _4: &ReErased i32;"}]}