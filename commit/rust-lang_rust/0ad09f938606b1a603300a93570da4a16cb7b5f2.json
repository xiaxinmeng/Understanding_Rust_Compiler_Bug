{"sha": "0ad09f938606b1a603300a93570da4a16cb7b5f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZDA5ZjkzODYwNmIxYTYwMzMwMGE5MzU3MGRhNGExNmNiN2I1ZjI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-08T19:48:58Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-06-08T20:17:45Z"}, "message": "Do not deconstruct OpaqueTypeKey to make the code more clear", "tree": {"sha": "3259d195181fb9f905c08221a6658829c2f6d733", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3259d195181fb9f905c08221a6658829c2f6d733"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ad09f938606b1a603300a93570da4a16cb7b5f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmC/0GoACgkQgTGiTgx5\n769/Ng/+IZZxQ3UC5nZsXI2zsSANjrLbga6pDKiUBqNGNsearYKa/yhyY4ABPsaf\nBGrfo1JzrpEI1OV5JDtknC4RqEyQmKcFzJBdZv2S4DbJCUhGOvOV7tQ8phJnOV2X\nK0oWumNI3m8SUHLZpTOK6RRqdK/GRRMqHIYkbPLtFvqZw1vy4+C4WCe7KymisJ4m\nlaqmrVSGZ3pl2a7AxLJAN6Qn/bE/7NHW+uV6qmV/sOOCMQFof9GhmM5Akttk9Rxb\n1V9Embais6WHyQ7zKh5NBXhyo9R7abUqK8dkzjx0h5W1ZgWfz1zLey+yGq5nNKw3\n16/DPFGBiaX0PZDHXhKeY7JH+Q75mp7CIkWcUJIgvAC6QAbIzWcp1wpI4L2xoRRq\nXFAIB7xuh+w1+nkGN9qz3ouzVAsVtBoO4iz3vB7RTdACumbgULJzgILn909yK6b1\nttD1niCcBxTZb5S+I4fkUek1p7+8p64lCevEV0HPEjrpqfrpjyTeF31IiublpAuV\na03FW1Evt9+4HficayLtY7C0R17z+epF5czclU/NFBytqcyK5wUzj+yODFye/Gkr\n4bAh0SeTNjf3bAMZHIyoYw4qxG+35hf2cmOanTkbQAZPkiyUIOPZxrc9C7f+7Zhg\nuMLTIdYWOgIiDVung+Ck5ecLktKMpj9iGqf0OL9fX67EJzcOV8A=\n=v3F6\n-----END PGP SIGNATURE-----", "payload": "tree 3259d195181fb9f905c08221a6658829c2f6d733\nparent ecd78e985e7049d011e4de5e4fe04f5c9fe5af31\nauthor Santiago Pastorino <spastorino@gmail.com> 1623181738 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1623183465 -0300\n\nDo not deconstruct OpaqueTypeKey to make the code more clear\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad09f938606b1a603300a93570da4a16cb7b5f2", "html_url": "https://github.com/rust-lang/rust/commit/0ad09f938606b1a603300a93570da4a16cb7b5f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ad09f938606b1a603300a93570da4a16cb7b5f2/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecd78e985e7049d011e4de5e4fe04f5c9fe5af31", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd78e985e7049d011e4de5e4fe04f5c9fe5af31", "html_url": "https://github.com/rust-lang/rust/commit/ecd78e985e7049d011e4de5e4fe04f5c9fe5af31"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "032cc7ee2334abc18a641f34cbb022dc577ee171", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0ad09f938606b1a603300a93570da4a16cb7b5f2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad09f938606b1a603300a93570da4a16cb7b5f2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=0ad09f938606b1a603300a93570da4a16cb7b5f2", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n-use rustc_middle::ty::{self, OpaqueTypeKey, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::opaque_types::InferCtxtExt;\n@@ -475,10 +475,9 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n     }\n \n     fn visit_opaque_types(&mut self, span: Span) {\n-        for &(opaque_type_key @ OpaqueTypeKey { def_id, substs }, opaque_defn) in\n-            self.fcx.opaque_types.borrow().iter()\n-        {\n-            let hir_id = self.tcx().hir().local_def_id_to_hir_id(def_id.expect_local());\n+        for &(opaque_type_key, opaque_defn) in self.fcx.opaque_types.borrow().iter() {\n+            let hir_id =\n+                self.tcx().hir().local_def_id_to_hir_id(opaque_type_key.def_id.expect_local());\n             let instantiated_ty = self.resolve(opaque_defn.concrete_ty, &hir_id);\n \n             debug_assert!(!instantiated_ty.has_escaping_bound_vars());\n@@ -506,17 +505,17 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             if let ty::Opaque(definition_ty_def_id, _substs) = *definition_ty.kind() {\n                 if let hir::OpaqueTyOrigin::Misc | hir::OpaqueTyOrigin::TyAlias = opaque_defn.origin\n                 {\n-                    if def_id == definition_ty_def_id {\n+                    if opaque_type_key.def_id == definition_ty_def_id {\n                         debug!(\n                             \"skipping adding concrete definition for opaque type {:?} {:?}\",\n-                            opaque_defn, def_id\n+                            opaque_defn, opaque_type_key.def_id\n                         );\n                         skip_add = true;\n                     }\n                 }\n             }\n \n-            if !substs.needs_infer() {\n+            if !opaque_type_key.substs.needs_infer() {\n                 // We only want to add an entry into `concrete_opaque_types`\n                 // if we actually found a defining usage of this opaque type.\n                 // Otherwise, we do nothing - we'll either find a defining usage\n@@ -533,7 +532,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                                 span,\n                                 \"`visit_opaque_types` tried to write different types for the same \\\n                                  opaque type: {:?}, {:?}, {:?}, {:?}\",\n-                                def_id,\n+                                opaque_type_key.def_id,\n                                 definition_ty,\n                                 opaque_defn,\n                                 old_concrete_ty,"}]}