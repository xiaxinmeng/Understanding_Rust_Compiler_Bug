{"sha": "87fb0ad4850ad710bb53440a12186006b498e785", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZmIwYWQ0ODUwYWQ3MTBiYjUzNDQwYTEyMTg2MDA2YjQ5OGU3ODU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-08T23:38:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-08T23:38:36Z"}, "message": "Rollup merge of #63387 - Centril:async-block-control-flow-tests, r=cramertj\n\nTest interaction between `async { ... }` and `?`, `return`, and `break`\n\nPer the second checkbox in https://github.com/rust-lang/rust/issues/62121#issuecomment-506884048, test that `async { .. }` blocks:\n1. do not allow `break` expressions.\n2. get targeted by `return` and not the parent function.\n3. get targeted by `?` and not the parent function.\n\nWorks towards resolving blockers in #63209.\n\nr? @cramertj", "tree": {"sha": "0235c6e12166debd6990519714e3c3291041570c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0235c6e12166debd6990519714e3c3291041570c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87fb0ad4850ad710bb53440a12186006b498e785", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdTLJ8CRBK7hj4Ov3rIwAAdHIIAGReHZmFeWo/QkcyK9sPC6a2\nnUnv9IrgI+FahsKaMgTeB8DRBxkUuaL1UvrWO4Si07P4xUsWq7on3N05BcmT86Eo\nn8bq4hjXN1Jw2v2FwgnJfwTUorUIqi0yiY9pio7SEmwbCoTeDx3LJChU5194Sntd\netAIm0ASJ79OW4P+wuS/CXlhBSr+vZf9Wa0/ExDSJ5IT4NeUbakRFdSfBQ3Xl7ap\nUH71ElG4KPmTkOsVeTMq6k5duplikxafPZRpMKqgnPTpt+4KMSL8VvBTrRtSs5Y9\nMs2QXRW1EQxWeBiVg4iajM9igm2Xu7jzmsqsL/KhhDqxrXNc6rmym5xoNuD30QY=\n=aXaB\n-----END PGP SIGNATURE-----\n", "payload": "tree 0235c6e12166debd6990519714e3c3291041570c\nparent c9dd9309f2bc3a6885ab599ea2c771c85fc9346b\nparent 48fbf4891a138edbaf2142ff9121c298c2750164\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565307516 +0200\ncommitter GitHub <noreply@github.com> 1565307516 +0200\n\nRollup merge of #63387 - Centril:async-block-control-flow-tests, r=cramertj\n\nTest interaction between `async { ... }` and `?`, `return`, and `break`\n\nPer the second checkbox in https://github.com/rust-lang/rust/issues/62121#issuecomment-506884048, test that `async { .. }` blocks:\n1. do not allow `break` expressions.\n2. get targeted by `return` and not the parent function.\n3. get targeted by `?` and not the parent function.\n\nWorks towards resolving blockers in #63209.\n\nr? @cramertj\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87fb0ad4850ad710bb53440a12186006b498e785", "html_url": "https://github.com/rust-lang/rust/commit/87fb0ad4850ad710bb53440a12186006b498e785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87fb0ad4850ad710bb53440a12186006b498e785/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9dd9309f2bc3a6885ab599ea2c771c85fc9346b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9dd9309f2bc3a6885ab599ea2c771c85fc9346b", "html_url": "https://github.com/rust-lang/rust/commit/c9dd9309f2bc3a6885ab599ea2c771c85fc9346b"}, {"sha": "48fbf4891a138edbaf2142ff9121c298c2750164", "url": "https://api.github.com/repos/rust-lang/rust/commits/48fbf4891a138edbaf2142ff9121c298c2750164", "html_url": "https://github.com/rust-lang/rust/commit/48fbf4891a138edbaf2142ff9121c298c2750164"}], "stats": {"total": 146, "additions": 146, "deletions": 0}, "files": [{"sha": "6a766ede0ed87acc18faa1de25e1611b0524100b", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/87fb0ad4850ad710bb53440a12186006b498e785/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87fb0ad4850ad710bb53440a12186006b498e785/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=87fb0ad4850ad710bb53440a12186006b498e785", "patch": "@@ -0,0 +1,67 @@\n+// Test that `async { .. }` blocks:\n+// 1. do not allow `break` expressions.\n+// 2. get targeted by `return` and not the parent function.\n+// 3. get targeted by `?` and not the parent function.\n+//\n+// edition:2018\n+// ignore-tidy-linelength\n+\n+#![feature(async_await)]\n+\n+fn main() {}\n+\n+use core::future::Future;\n+\n+fn return_targets_async_block_not_fn() -> u8 {\n+    //~^ ERROR mismatched types\n+    let block = async {\n+        return 0u8;\n+    };\n+    let _: &dyn Future<Output = ()> = &block;\n+    //~^ ERROR type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n+}\n+\n+async fn return_targets_async_block_not_async_fn() -> u8 {\n+    //~^ ERROR type mismatch resolving\n+    let block = async {\n+        return 0u8;\n+    };\n+    let _: &dyn Future<Output = ()> = &block;\n+    //~^ ERROR type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n+}\n+\n+fn no_break_in_async_block() {\n+    async {\n+        break 0u8; //~ ERROR `break` inside of a closure\n+        // FIXME: This diagnostic is pretty bad.\n+    };\n+}\n+\n+fn no_break_in_async_block_even_with_outer_loop() {\n+    loop {\n+        async {\n+            break 0u8; //~ ERROR `break` inside of a closure\n+        };\n+    }\n+}\n+\n+struct MyErr;\n+fn err() -> Result<u8, MyErr> { Err(MyErr) }\n+\n+fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n+    //~^ ERROR mismatched types\n+    let block = async {\n+        err()?;\n+        Ok(())\n+    };\n+    let _: &dyn Future<Output = Result<(), MyErr>> = &block;\n+}\n+\n+fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n+    //~^ ERROR mismatched types\n+    let block = async {\n+        err()?;\n+        Ok(())\n+    };\n+    let _: &dyn Future<Output = Result<(), MyErr>> = &block;\n+}"}, {"sha": "96927ac9632d61d7977b99025e065a0c41840abf", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/87fb0ad4850ad710bb53440a12186006b498e785/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87fb0ad4850ad710bb53440a12186006b498e785/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=87fb0ad4850ad710bb53440a12186006b498e785", "patch": "@@ -0,0 +1,79 @@\n+error[E0267]: `break` inside of a closure\n+  --> $DIR/async-block-control-flow-static-semantics.rs:35:9\n+   |\n+LL |         break 0u8;\n+   |         ^^^^^^^^^ cannot break inside of a closure\n+\n+error[E0267]: `break` inside of a closure\n+  --> $DIR/async-block-control-flow-static-semantics.rs:43:13\n+   |\n+LL |             break 0u8;\n+   |             ^^^^^^^^^ cannot break inside of a closure\n+\n+error[E0308]: mismatched types\n+  --> $DIR/async-block-control-flow-static-semantics.rs:15:43\n+   |\n+LL | fn return_targets_async_block_not_fn() -> u8 {\n+   |    ---------------------------------      ^^ expected u8, found ()\n+   |    |\n+   |    this function's body doesn't return\n+   |\n+   = note: expected type `u8`\n+              found type `()`\n+\n+error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n+  --> $DIR/async-block-control-flow-static-semantics.rs:20:39\n+   |\n+LL |     let _: &dyn Future<Output = ()> = &block;\n+   |                                       ^^^^^^ expected u8, found ()\n+   |\n+   = note: expected type `u8`\n+              found type `()`\n+   = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n+\n+error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n+  --> $DIR/async-block-control-flow-static-semantics.rs:29:39\n+   |\n+LL |     let _: &dyn Future<Output = ()> = &block;\n+   |                                       ^^^^^^ expected u8, found ()\n+   |\n+   = note: expected type `u8`\n+              found type `()`\n+   = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n+\n+error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == u8`\n+  --> $DIR/async-block-control-flow-static-semantics.rs:24:55\n+   |\n+LL | async fn return_targets_async_block_not_async_fn() -> u8 {\n+   |                                                       ^^ expected (), found u8\n+   |\n+   = note: expected type `()`\n+              found type `u8`\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0308]: mismatched types\n+  --> $DIR/async-block-control-flow-static-semantics.rs:51:44\n+   |\n+LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n+   |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    |\n+   |    this function's body doesn't return\n+   |\n+   = note: expected type `std::result::Result<u8, MyErr>`\n+              found type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/async-block-control-flow-static-semantics.rs:60:50\n+   |\n+LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n+   |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+   |    |\n+   |    this function's body doesn't return\n+   |\n+   = note: expected type `std::result::Result<u8, MyErr>`\n+              found type `()`\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0267, E0271, E0308.\n+For more information about an error, try `rustc --explain E0267`."}]}