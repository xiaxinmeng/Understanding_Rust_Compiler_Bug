{"sha": "b106ef81164a33e2f18820274b48cb9673c423af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMDZlZjgxMTY0YTMzZTJmMTg4MjAyNzRiNDhjYjk2NzNjNDIzYWY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-02-07T14:37:08Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-02-11T18:14:41Z"}, "message": "make bind syntax unnecessary: just use _ for one of the arguments", "tree": {"sha": "7b0fe347c80af1cdbc84df5b24290791c222e0fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b0fe347c80af1cdbc84df5b24290791c222e0fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b106ef81164a33e2f18820274b48cb9673c423af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b106ef81164a33e2f18820274b48cb9673c423af", "html_url": "https://github.com/rust-lang/rust/commit/b106ef81164a33e2f18820274b48cb9673c423af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b106ef81164a33e2f18820274b48cb9673c423af/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc023d91c77f468211ba9f7681b4d2a6469aac74", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc023d91c77f468211ba9f7681b4d2a6469aac74", "html_url": "https://github.com/rust-lang/rust/commit/fc023d91c77f468211ba9f7681b4d2a6469aac74"}], "stats": {"total": 121, "additions": 66, "deletions": 55}, "files": [{"sha": "3ce4d38013e0a5232c5bd42fe427a77511f5d237", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -854,15 +854,9 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n         ret pexpr(mk_mac_expr(p, lo, p.span.hi, ast::mac_ellipsis));\n     } else if eat_word(p, \"bind\") {\n         let e = parse_expr_res(p, RESTRICT_NO_CALL_EXPRS);\n-        fn parse_expr_opt(p: parser) -> option<@ast::expr> {\n-            alt p.token {\n-              token::UNDERSCORE { p.bump(); ret none; }\n-              _ { ret some(parse_expr(p)); }\n-            }\n-        }\n         let es =\n             parse_seq(token::LPAREN, token::RPAREN, seq_sep(token::COMMA),\n-                      parse_expr_opt, p);\n+                      parse_expr_or_hole, p);\n         hi = es.span.hi;\n         ex = ast::expr_bind(e, es.node);\n     } else if p.token == token::POUND {\n@@ -1036,10 +1030,18 @@ fn parse_dot_or_call_expr_with(p: parser, e0: pexpr) -> pexpr {\n         alt p.token {\n           // expr(...)\n           token::LPAREN if permits_call(p) {\n-            let es = parse_seq(token::LPAREN, token::RPAREN,\n-                               seq_sep(token::COMMA), parse_expr, p);\n-            hi = es.span.hi;\n-            let nd = ast::expr_call(to_expr(e), es.node, false);\n+            let es_opt =\n+                parse_seq(token::LPAREN, token::RPAREN,\n+                          seq_sep(token::COMMA), parse_expr_or_hole, p);\n+            hi = es_opt.span.hi;\n+\n+            let nd =\n+                if vec::any(es_opt.node, {|e| option::is_none(e) }) {\n+                    ast::expr_bind(to_expr(e), es_opt.node)\n+                } else {\n+                    let es = vec::map(es_opt.node) {|e| option::get(e) };\n+                    ast::expr_call(to_expr(e), es, false)\n+                };\n             e = mk_pexpr(p, lo, hi, nd);\n           }\n \n@@ -1388,6 +1390,13 @@ fn parse_expr(p: parser) -> @ast::expr {\n     ret parse_expr_res(p, UNRESTRICTED);\n }\n \n+fn parse_expr_or_hole(p: parser) -> option<@ast::expr> {\n+    alt p.token {\n+      token::UNDERSCORE { p.bump(); ret none; }\n+      _ { ret some(parse_expr(p)); }\n+    }\n+}\n+\n fn parse_expr_res(p: parser, r: restriction) -> @ast::expr {\n     let old = p.restriction;\n     p.restriction = r;"}, {"sha": "9ed73b17d9da0465941de1c4d2696dd4033bfd66", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -846,7 +846,12 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n               _ { word(s.s, \"_\"); }\n             }\n         }\n-        word_nbsp(s, \"bind\");\n+\n+        // \"bind\" keyword is only needed if there are no \"_\" arguments.\n+        if !vec::any(args) {|arg| option::is_none(arg) } {\n+            word_nbsp(s, \"bind\");\n+        }\n+\n         print_expr(s, func);\n         popen(s);\n         commasep(s, inconsistent, args, print_opt);"}, {"sha": "997bc2b17990a950415d16f013e92787e44edb92", "filename": "src/test/run-pass/bind-parameterized-args-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     fn echo<T>(c: int, x: fn@(T)) { #error(\"wee\"); }\n \n-    let y = bind echo(42, _);\n+    let y = echo(42, _);\n \n     y(fn@(&&i: str) { });\n }"}, {"sha": "a990ecc4da17857721006661240b2d9fbb4533c2", "filename": "src/test/run-pass/bind-parameterized-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fbind-parameterized-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fbind-parameterized-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-parameterized-args.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     fn echo<T>(c: int, x: [T]) { }\n \n-    let y: fn@([int]) = bind echo(42, _);\n+    let y: fn@([int]) = echo(42, _);\n \n     y([1]);\n }"}, {"sha": "205809a2b6943fc1794007b12cdf65e181a05b4a", "filename": "src/test/run-pass/bind-trivial.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fbind-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fbind-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-trivial.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -5,7 +5,7 @@\n fn f(n: int) -> int { ret n; }\n \n fn main() {\n-    let g: fn@(int) -> int = bind f(_);\n+    let g: fn@(int) -> int = f(_);\n     let i: int = g(42);\n     assert (i == 42);\n }"}, {"sha": "e75320c1e7549da9f22aa39fd7ba5b578e4cd512", "filename": "src/test/run-pass/drop-bind-thunk-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fdrop-bind-thunk-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fdrop-bind-thunk-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-bind-thunk-args.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -2,4 +2,4 @@\n \n fn f(x: @int) { }\n \n-fn main() { let x = @10; let ff = bind f(_); ff(x); ff(x); }\n+fn main() { let x = @10; let ff = f(_); ff(x); ff(x); }"}, {"sha": "39785d10bbf287ab7ede67aa897590ff9a27a2de", "filename": "src/test/run-pass/drop-parametric-closure-with-bound-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fdrop-parametric-closure-with-bound-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fdrop-parametric-closure-with-bound-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-parametric-closure-with-bound-box.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -2,4 +2,4 @@\n \n fn f<T>(i: @uint, t: T) { }\n \n-fn main() { let x = bind f::<char>(@0xdeafbeefu, _); }\n+fn main() { let x = f::<char>(@0xdeafbeefu, _); }"}, {"sha": "98f3b86aec9863bdc75957019a364d39992312b1", "filename": "src/test/run-pass/expr-alt-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -11,7 +11,7 @@ fn test_generic<T>(expected: @T, eq: compare<T>) {\n \n fn test_box() {\n     fn compare_box(b1: @bool, b2: @bool) -> bool { ret *b1 == *b2; }\n-    let eq = bind compare_box(_, _);\n+    let eq = compare_box(_, _);\n     test_generic::<bool>(@true, eq);\n }\n "}, {"sha": "b4a40c51361a0b00adccdc1c8aa6f2a077c7dc1a", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -11,7 +11,7 @@ fn test_generic<T: copy>(expected: T, eq: compare<T>) {\n \n fn test_vec() {\n     fn compare_box(&&v1: @int, &&v2: @int) -> bool { ret v1 == v2; }\n-    let eq = bind compare_box(_, _);\n+    let eq = compare_box(_, _);\n     test_generic::<@int>(@1, eq);\n }\n "}, {"sha": "2b8b9f53946b6c975a3484a1ad85ed406783627d", "filename": "src/test/run-pass/expr-alt-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -10,7 +10,7 @@ fn test_generic<T: copy>(expected: ~T, eq: compare<T>) {\n \n fn test_box() {\n     fn compare_box(b1: ~bool, b2: ~bool) -> bool { ret *b1 == *b2; }\n-    let eq = bind compare_box(_, _);\n+    let eq = compare_box(_, _);\n     test_generic::<bool>(~true, eq);\n }\n "}, {"sha": "0a0dd1dd8d5b1f9927f262e52230c47a22e9b08b", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -11,7 +11,7 @@ fn test_generic<T: copy>(expected: T, eq: compare<T>) {\n \n fn test_vec() {\n     fn compare_box(&&v1: ~int, &&v2: ~int) -> bool { ret v1 == v2; }\n-    let eq = bind compare_box(_, _);\n+    let eq = compare_box(_, _);\n     test_generic::<~int>(~1, eq);\n }\n "}, {"sha": "13da160c73c4ee52c9832800bdd54b4269f3f24c", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -11,15 +11,15 @@ fn test_generic<T: copy>(expected: T, eq: compare<T>) {\n \n fn test_bool() {\n     fn compare_bool(&&b1: bool, &&b2: bool) -> bool { ret b1 == b2; }\n-    let eq = bind compare_bool(_, _);\n+    let eq = compare_bool(_, _);\n     test_generic::<bool>(true, eq);\n }\n \n fn test_rec() {\n     type t = {a: int, b: int};\n \n     fn compare_rec(t1: t, t2: t) -> bool { ret t1 == t2; }\n-    let eq = bind compare_rec(_, _);\n+    let eq = compare_rec(_, _);\n     test_generic::<t>({a: 1, b: 2}, eq);\n }\n "}, {"sha": "432c1438be6d6979dc23494a54479453ebd41f7a", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -15,7 +15,7 @@ fn test_box() {\n         log(debug, *b2);\n         ret *b1 == *b2;\n     }\n-    let eq = bind compare_box(_, _);\n+    let eq = compare_box(_, _);\n     test_generic::<bool>(@true, eq);\n }\n "}, {"sha": "d099875a46230e6b0dbde98fdb2bf4f376826397", "filename": "src/test/run-pass/expr-block-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box2.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -11,7 +11,7 @@ fn test_generic<T: copy>(expected: T, eq: compare<T>) {\n \n fn test_vec() {\n     fn compare_vec(&&v1: @int, &&v2: @int) -> bool { ret v1 == v2; }\n-    let eq = bind compare_vec(_, _);\n+    let eq = compare_vec(_, _);\n     test_generic::<@int>(@1, eq);\n }\n "}, {"sha": "5647eab3dfe7e1391b25c39ce9ca2efb20a484d8", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -14,7 +14,7 @@ fn test_box() {\n         log(debug, *b2);\n         ret *b1 == *b2;\n     }\n-    let eq = bind compare_box(_, _);\n+    let eq = compare_box(_, _);\n     test_generic::<bool>(~true, eq);\n }\n "}, {"sha": "903d93eb3c0c70c24a7e07da206870acd3eb9328", "filename": "src/test/run-pass/expr-block-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique2.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -11,7 +11,7 @@ fn test_generic<T: copy>(expected: T, eq: compare<T>) {\n \n fn test_vec() {\n     fn compare_vec(&&v1: ~int, &&v2: ~int) -> bool { ret v1 == v2; }\n-    let eq = bind compare_vec(_, _);\n+    let eq = compare_vec(_, _);\n     test_generic::<~int>(~1, eq);\n }\n "}, {"sha": "f9b8a43d3440371c8eb2fec5595ca245a90ce763", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -13,15 +13,15 @@ fn test_generic<T: copy>(expected: T, eq: compare<T>) {\n \n fn test_bool() {\n     fn compare_bool(&&b1: bool, &&b2: bool) -> bool { ret b1 == b2; }\n-    let eq = bind compare_bool(_, _);\n+    let eq = compare_bool(_, _);\n     test_generic::<bool>(true, eq);\n }\n \n fn test_rec() {\n     type t = {a: int, b: int};\n \n     fn compare_rec(t1: t, t2: t) -> bool { ret t1 == t2; }\n-    let eq = bind compare_rec(_, _);\n+    let eq = compare_rec(_, _);\n     test_generic::<t>({a: 1, b: 2}, eq);\n }\n "}, {"sha": "e69f022c29185303dd727b6ffc932856bc529a73", "filename": "src/test/run-pass/expr-if-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box1.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -11,7 +11,7 @@ fn test_generic<T>(expected: @T, not_expected: @T, eq: compare<T>) {\n \n fn test_box() {\n     fn compare_box(b1: @bool, b2: @bool) -> bool { ret *b1 == *b2; }\n-    let eq = bind compare_box(_, _);\n+    let eq = compare_box(_, _);\n     test_generic::<bool>(@true, @false, eq);\n }\n "}, {"sha": "68b8e0173b12247aaf3123b9c6db7d1a5fa163f1", "filename": "src/test/run-pass/expr-if-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic-box2.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -11,7 +11,7 @@ fn test_generic<T: copy>(expected: T, not_expected: T, eq: compare<T>) {\n \n fn test_vec() {\n     fn compare_box(&&v1: @int, &&v2: @int) -> bool { ret v1 == v2; }\n-    let eq = bind compare_box(_, _);\n+    let eq = compare_box(_, _);\n     test_generic::<@int>(@1, @2, eq);\n }\n "}, {"sha": "3152f9eb801428fa19c07346a078d44edd555c7e", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -13,15 +13,15 @@ fn test_generic<T: copy>(expected: T, not_expected: T, eq: compare<T>) {\n \n fn test_bool() {\n     fn compare_bool(&&b1: bool, &&b2: bool) -> bool { ret b1 == b2; }\n-    let eq = bind compare_bool(_, _);\n+    let eq = compare_bool(_, _);\n     test_generic::<bool>(true, false, eq);\n }\n \n fn test_rec() {\n     type t = {a: int, b: int};\n \n     fn compare_rec(t1: t, t2: t) -> bool { ret t1 == t2; }\n-    let eq = bind compare_rec(_, _);\n+    let eq = compare_rec(_, _);\n     test_generic::<t>({a: 1, b: 2}, {a: 2, b: 3}, eq);\n }\n "}, {"sha": "319f24a7b02b35f22e49e472d571a35b71a67f83", "filename": "src/test/run-pass/fixed-point-bind-box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-box.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -1,9 +1,9 @@\n fn fix_help<A, B>(f: native fn(fn@(A) -> B, A) -> B, x: A) -> B {\n-    ret f(bind fix_help(f, _), x);\n+    ret f(fix_help(f, _), x);\n }\n \n fn fix<A, B>(f: native fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n-    ret bind fix_help(f, _);\n+    ret fix_help(f, _);\n }\n \n fn fact_(f: fn@(&&int) -> int, &&n: int) -> int {"}, {"sha": "a15b2fbbd53e9c07b6c921f6fd9eff4aaeca84ab", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -1,9 +1,9 @@\n fn fix_help<A, B: send>(f: native fn(fn@(A) -> B, A) -> B, x: A) -> B {\n-    ret f(bind fix_help(f, _), x);\n+    ret f(fix_help(f, _), x);\n }\n \n fn fix<A, B: send>(f: native fn(fn@(A) -> B, A) -> B) -> fn@(A) -> B {\n-    ret bind fix_help(f, _);\n+    ret fix_help(f, _);\n }\n \n fn fact_(f: fn@(&&int) -> int, &&n: int) -> int {"}, {"sha": "2f28b7c419212301bfb2fe62add124a341dee30d", "filename": "src/test/run-pass/fun-call-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffun-call-variants.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let a: int = direct(3); // direct\n     let b: int = ho(direct); // indirect unbound\n \n-    let c: int = ho(bind direct(_)); // indirect bound\n+    let c: int = ho(direct(_)); // indirect bound\n     assert (a == b);\n     assert (b == c);\n }"}, {"sha": "5a9795d7ec60f629f0f3d47376c482e470b87093", "filename": "src/test/run-pass/generic-bind.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-bind.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -6,12 +6,12 @@ fn main() {\n     let t = {_0: 1, _1: 2, _2: 3, _3: 4, _4: 5, _5: 6, _6: 7};\n     assert (t._5 == 6);\n     let f1 =\n-        bind id::<{_0: int,\n-                   _1: int,\n-                   _2: int,\n-                   _3: int,\n-                   _4: int,\n-                   _5: int,\n-                   _6: int}>(_);\n+        id::<{_0: int,\n+              _1: int,\n+              _2: int,\n+              _3: int,\n+              _4: int,\n+              _5: int,\n+              _6: int}>(_);\n     assert (f1(t)._5 == 6);\n }"}, {"sha": "bc16c319374f99a70f4b7b9b9d3a86990dba1ddb", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -58,7 +58,7 @@ mod map_reduce {\n             }\n         }\n \n-        map(input, bind emit(intermediates, ctrl, _, _));\n+        map(input, emit(intermediates, ctrl, _, _));\n         send(ctrl, mapper_done);\n     }\n "}, {"sha": "1f0e2d830e5f648057f310325af90818d131b9d2", "filename": "src/test/run-pass/issue-333.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fissue-333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fissue-333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-333.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -1,4 +1,4 @@\n-fn quux<T: copy>(x: T) -> T { let f = bind id::<T>(_); ret f(x); }\n+fn quux<T: copy>(x: T) -> T { let f = id::<T>(_); ret f(x); }\n \n fn id<T: copy>(x: T) -> T { ret x; }\n "}, {"sha": "7b6f3033ab41393ecf7da569b270e13b2095c5ea", "filename": "src/test/run-pass/issue-898.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fissue-898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Fissue-898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-898.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -7,5 +7,5 @@ fn log_if<T>(c: native fn(T)->bool, e: T) {\n }\n \n fn main() {\n-    (bind log_if(even, _))(2);\n+    (log_if(even, _))(2);\n }"}, {"sha": "49cc7ef6d5a9b03f0abd59bf8721726ee8b84358", "filename": "src/test/run-pass/rebind-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Frebind-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Frebind-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frebind-fn.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -1,5 +1,5 @@\n fn add(i: int, j: int) -> int { ret i + j; }\n-fn binder(n: int) -> fn@() -> int { let f = bind add(n, _); ret bind f(2); }\n+fn binder(n: int) -> fn@() -> int { let f = add(n, _); ret bind f(2); }\n fn main() {\n     binder(5);\n     let f = binder(1);"}, {"sha": "0db319c4c3581f2dd5cd088b1488a6bfcec4dbd3", "filename": "src/test/run-pass/task-comm-17.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -1,9 +1,6 @@\n-// xfail-test\n // Issue #922\n \n-// This test is specifically about spawning temporary closures, which\n-// isn't possible under the bare-fn regime. I'm keeping it around\n-// until such time as we have unique closures.\n+// This test is specifically about spawning temporary closures.\n \n use std;\n import task;\n@@ -12,5 +9,5 @@ fn f() {\n }\n \n fn main() {\n-    task::spawn(bind f());\n+    task::spawn {|| f() };\n }\n\\ No newline at end of file"}, {"sha": "166243cad119d0d50f35755172ac69e46fe7a466", "filename": "src/test/run-pass/unchecked-predicates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b106ef81164a33e2f18820274b48cb9673c423af/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs?ref=b106ef81164a33e2f18820274b48cb9673c423af", "patch": "@@ -18,7 +18,7 @@ fn pure_foldl<T: copy, U: copy>(ls: list<T>, u: U, f: fn(T, U) -> U) -> U {\n // fn from a pure fn\n pure fn pure_length<T: copy>(ls: list<T>) -> uint {\n     fn count<T>(_t: T, &&u: uint) -> uint { u + 1u }\n-    unchecked{ pure_foldl(ls, 0u, bind count(_, _)) }\n+    unchecked{ pure_foldl(ls, 0u, count(_, _)) }\n }\n \n pure fn nonempty_list<T: copy>(ls: list<T>) -> bool { pure_length(ls) > 0u }"}]}