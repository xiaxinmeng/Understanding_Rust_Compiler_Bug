{"sha": "5bf5994d922744c1d9e44b53a6ad54005fe3489e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZjU5OTRkOTIyNzQ0YzFkOWU0NGI1M2E2YWQ1NDAwNWZlMzQ4OWU=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-05-10T02:46:39Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-06-05T20:09:27Z"}, "message": "Fixed up some comments.", "tree": {"sha": "70f74902dbefdcc3c8bf8d52d84e3c0ec8e43090", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f74902dbefdcc3c8bf8d52d84e3c0ec8e43090"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bf5994d922744c1d9e44b53a6ad54005fe3489e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf5994d922744c1d9e44b53a6ad54005fe3489e", "html_url": "https://github.com/rust-lang/rust/commit/5bf5994d922744c1d9e44b53a6ad54005fe3489e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bf5994d922744c1d9e44b53a6ad54005fe3489e/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "538ebd197c52f2551f550d7aa5c82f7b3412c99d", "url": "https://api.github.com/repos/rust-lang/rust/commits/538ebd197c52f2551f550d7aa5c82f7b3412c99d", "html_url": "https://github.com/rust-lang/rust/commit/538ebd197c52f2551f550d7aa5c82f7b3412c99d"}], "stats": {"total": 33, "additions": 14, "deletions": 19}, "files": [{"sha": "4c96e106d1f1b264fc918508532c36f95073fec7", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5bf5994d922744c1d9e44b53a6ad54005fe3489e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf5994d922744c1d9e44b53a6ad54005fe3489e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=5bf5994d922744c1d9e44b53a6ad54005fe3489e", "patch": "@@ -1381,53 +1381,48 @@ impl<'a> LoweringContext<'a> {\n         let ty = match c.kind {\n             AssocTyConstraintKind::Equality { ref ty } => self.lower_ty(ty, itctx),\n             AssocTyConstraintKind::Bound { ref bounds } => {\n-                // Piggy-back on the impl trait context to figure out\n-                // the correct behavior.\n+                // Piggy-back on the `impl Trait` context to figure out the correct behavior.\n                 let (desugar_to_impl_trait, itctx) = match itctx {\n                     // We are in the return position:\n                     //\n-                    // fn foo() -> impl Iterator<Item: Debug>\n+                    //     fn foo() -> impl Iterator<Item: Debug>\n                     //\n                     // so desugar to\n                     //\n-                    // fn foo() -> impl Iterator<Item = impl Debug>\n+                    //     fn foo() -> impl Iterator<Item = impl Debug>\n                     ImplTraitContext::Existential(_) => (true, itctx),\n \n                     // We are in the argument position, but within a dyn type:\n                     //\n-                    // fn foo(x: dyn Iterator<Item: Debug>)\n+                    //     fn foo(x: dyn Iterator<Item: Debug>)\n                     //\n                     // so desugar to\n                     //\n-                    // fn foo(x: dyn Iterator<Item = impl Debug>)\n+                    //     fn foo(x: dyn Iterator<Item = impl Debug>)\n                     ImplTraitContext::Universal(_) if self.is_in_dyn_type => (true, itctx),\n \n-                    // In `type Foo = dyn Iterator<Item: Debug>` we\n-                    // desugar to `type Foo = dyn Iterator<Item = impl\n-                    // Debug>` but we have to override the \"impl trait\n-                    // context\" to permit `impl Debug` in this\n-                    // position (it desugars then to an existential\n-                    // type).\n+                    // In `type Foo = dyn Iterator<Item: Debug>` we desugar to\n+                    // `type Foo = dyn Iterator<Item = impl Debug>` but we have to override the\n+                    // \"impl trait context\" to permit `impl Debug` in this position (it desugars\n+                    // then to an existential type).\n                     //\n                     // FIXME: this is only needed until `impl Trait` is allowed in type aliases.\n                     ImplTraitContext::Disallowed(_) if self.is_in_dyn_type =>\n                         (true, ImplTraitContext::Existential(None)),\n \n                     // We are in the argument position, but not within a dyn type:\n                     //\n-                    // fn foo(x: impl Iterator<Item: Debug>)\n+                    //     fn foo(x: impl Iterator<Item: Debug>)\n                     //\n-                    // so we leave it as is and this gets expanded in\n-                    // astconv to a bound like `<T as Iterator>::Item:\n-                    // Debug` where `T` is the type parameter for the\n+                    // so we leave it as is and this gets expanded in astconv to a bound like\n+                    // `<T as Iterator>::Item: Debug` where `T` is the type parameter for the\n                     // `impl Iterator`.\n                     _ => (false, itctx),\n                 };\n \n                 if desugar_to_impl_trait {\n-                    // Desugar `AssocTy: Bounds` into `AssocTy = impl\n-                    // Bounds`. We do this by constructing the HIR\n-                    // for \"impl bounds\" and then lowering that.\n+                    // Desugar `AssocTy: Bounds` into `AssocTy = impl Bounds`. We do this by\n+                    // constructing the HIR for \"impl bounds\" and then lowering that.\n \n                     let impl_trait_node_id = self.sess.next_node_id();\n                     let parent_def_index = self.current_hir_id_owner.last().unwrap().0;"}]}