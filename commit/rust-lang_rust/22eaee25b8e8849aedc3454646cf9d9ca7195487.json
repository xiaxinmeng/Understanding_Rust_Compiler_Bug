{"sha": "22eaee25b8e8849aedc3454646cf9d9ca7195487", "node_id": "C_kwDOAAsO6NoAKDIyZWFlZTI1YjhlODg0OWFlZGMzNDU0NjQ2Y2Y5ZDljYTcxOTU0ODc", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-03-24T08:36:27Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2022-03-24T08:50:35Z"}, "message": "organize const eval tests", "tree": {"sha": "648f4d84610133afe3601b4762bce939291cebe9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/648f4d84610133afe3601b4762bce939291cebe9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22eaee25b8e8849aedc3454646cf9d9ca7195487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22eaee25b8e8849aedc3454646cf9d9ca7195487", "html_url": "https://github.com/rust-lang/rust/commit/22eaee25b8e8849aedc3454646cf9d9ca7195487", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22eaee25b8e8849aedc3454646cf9d9ca7195487/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e2989e421b03cb38bed54705783c63e751c3c86", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e2989e421b03cb38bed54705783c63e751c3c86", "html_url": "https://github.com/rust-lang/rust/commit/0e2989e421b03cb38bed54705783c63e751c3c86"}], "stats": {"total": 348, "additions": 180, "deletions": 168}, "files": [{"sha": "18de04b16da939a4355c17aea880a7c14d3c9fe7", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/22eaee25b8e8849aedc3454646cf9d9ca7195487/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22eaee25b8e8849aedc3454646cf9d9ca7195487/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=22eaee25b8e8849aedc3454646cf9d9ca7195487", "patch": "@@ -55,10 +55,7 @@ use hir_def::{\n use hir_expand::{name::name, MacroCallKind};\n use hir_ty::{\n     autoderef,\n-    consteval::{\n-        eval_const, unknown_const_as_generic, ComputedExpr, ConstEvalCtx, ConstEvalError, ConstExt,\n-    },\n-    could_unify,\n+    consteval::{unknown_const_as_generic, ComputedExpr, ConstEvalError, ConstExt},\n     diagnostics::BodyValidationDiagnostic,\n     method_resolution::{self, TyFingerprint},\n     primitive::UintTy,"}, {"sha": "9e1a856cd02bc3821f3827cdb1aa9e4779833e0b", "filename": "crates/hir_ty/src/consteval.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/22eaee25b8e8849aedc3454646cf9d9ca7195487/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22eaee25b8e8849aedc3454646cf9d9ca7195487/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs?ref=22eaee25b8e8849aedc3454646cf9d9ca7195487", "patch": "@@ -87,14 +87,14 @@ impl Display for ComputedExpr {\n         match self {\n             ComputedExpr::Literal(l) => match l {\n                 Literal::Int(x, _) => {\n-                    if *x >= 16 {\n+                    if *x >= 10 {\n                         write!(f, \"{} ({:#X})\", x, x)\n                     } else {\n                         x.fmt(f)\n                     }\n                 }\n                 Literal::Uint(x, _) => {\n-                    if *x >= 16 {\n+                    if *x >= 10 {\n                         write!(f, \"{} ({:#X})\", x, x)\n                     } else {\n                         x.fmt(f)\n@@ -156,6 +156,7 @@ pub fn eval_const(\n ) -> Result<ComputedExpr, ConstEvalError> {\n     let expr = &ctx.exprs[expr_id];\n     match expr {\n+        Expr::Missing => Err(ConstEvalError::IncompleteExpr),\n         Expr::Literal(l) => Ok(ComputedExpr::Literal(l.clone())),\n         &Expr::UnaryOp { expr, op } => {\n             let ty = &ctx.expr_ty(expr);\n@@ -339,6 +340,9 @@ pub fn eval_const(\n                     Ok(r.clone())\n                 }\n                 ValueNs::ConstId(id) => ctx.db.const_eval(id),\n+                ValueNs::GenericParam(_) => {\n+                    Err(ConstEvalError::NotSupported(\"const generic without substitution\"))\n+                }\n                 _ => Err(ConstEvalError::NotSupported(\"path that are not const or local\")),\n             }\n         }\n@@ -433,7 +437,7 @@ pub(crate) fn const_eval_query(\n ) -> Result<ComputedExpr, ConstEvalError> {\n     let def = const_id.into();\n     let body = db.body(def);\n-    let mut infer = db.infer_query(def);\n+    let infer = &db.infer(def);\n     let result = eval_const(\n         body.body_expr,\n         &mut ConstEvalCtx {\n@@ -442,7 +446,7 @@ pub(crate) fn const_eval_query(\n             exprs: &body.exprs,\n             pats: &body.pats,\n             local_data: HashMap::default(),\n-            infer: &mut infer,\n+            infer,\n         },\n     );\n     result\n@@ -473,3 +477,6 @@ pub(crate) fn eval_to_const<'a>(\n     };\n     usize_const(eval_usize(expr, ctx))\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "4a052851afd147b802f5fb12947ece83c967726a", "filename": "crates/hir_ty/src/consteval/tests.rs", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/22eaee25b8e8849aedc3454646cf9d9ca7195487/crates%2Fhir_ty%2Fsrc%2Fconsteval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22eaee25b8e8849aedc3454646cf9d9ca7195487/crates%2Fhir_ty%2Fsrc%2Fconsteval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsteval%2Ftests.rs?ref=22eaee25b8e8849aedc3454646cf9d9ca7195487", "patch": "@@ -0,0 +1,148 @@\n+use base_db::fixture::WithFixture;\n+use hir_def::{db::DefDatabase, expr::Literal};\n+\n+use crate::{consteval::ComputedExpr, db::HirDatabase, test_db::TestDB};\n+\n+use super::ConstEvalError;\n+\n+fn check_fail(ra_fixture: &str, error: ConstEvalError) {\n+    assert_eq!(eval_goal(ra_fixture), Err(error));\n+}\n+\n+fn check_number(ra_fixture: &str, answer: i128) {\n+    let r = eval_goal(ra_fixture).unwrap();\n+    match r {\n+        ComputedExpr::Literal(Literal::Int(r, _)) => assert_eq!(r, answer),\n+        ComputedExpr::Literal(Literal::Uint(r, _)) => assert_eq!(r, answer as u128),\n+        x => panic!(\"Expected number but found {:?}\", x),\n+    }\n+}\n+\n+fn eval_goal(ra_fixture: &str) -> Result<ComputedExpr, ConstEvalError> {\n+    let (db, file_id) = TestDB::with_single_file(ra_fixture);\n+    let module_id = db.module_for_file(file_id);\n+    let def_map = module_id.def_map(&db);\n+    let scope = &def_map[module_id.local_id].scope;\n+    let const_id = scope\n+        .declarations()\n+        .into_iter()\n+        .find_map(|x| match x {\n+            hir_def::ModuleDefId::ConstId(x) => {\n+                if db.const_data(x).name.as_ref()?.to_string() == \"GOAL\" {\n+                    Some(x)\n+                } else {\n+                    None\n+                }\n+            }\n+            _ => None,\n+        })\n+        .unwrap();\n+    db.const_eval(const_id)\n+}\n+\n+#[test]\n+fn add() {\n+    check_number(r#\"const GOAL: usize = 2 + 2;\"#, 4);\n+}\n+\n+#[test]\n+fn bit_op() {\n+    check_number(r#\"const GOAL: u8 = !0 & !(!0 >> 1)\"#, 128);\n+    check_number(r#\"const GOAL: i8 = !0 & !(!0 >> 1)\"#, 0);\n+    // FIXME: rustc evaluate this to -128\n+    check_fail(\n+        r#\"const GOAL: i8 = 1 << 7\"#,\n+        ConstEvalError::Panic(\"attempt to run invalid arithmetic operation\".to_string()),\n+    );\n+    check_fail(\n+        r#\"const GOAL: i8 = 1 << 8\"#,\n+        ConstEvalError::Panic(\"attempt to run invalid arithmetic operation\".to_string()),\n+    );\n+}\n+\n+#[test]\n+fn locals() {\n+    check_number(\n+        r#\"\n+    const GOAL: usize = {\n+        let a = 3 + 2;\n+        let b = a * a;\n+        b\n+    };\n+    \"#,\n+        25,\n+    );\n+}\n+\n+#[test]\n+fn consts() {\n+    check_number(\n+        r#\"\n+    const F1: i32 = 1;\n+    const F3: i32 = 3 * F2;\n+    const F2: i32 = 2 * F1;\n+    const GOAL: i32 = F3;\n+    \"#,\n+        6,\n+    );\n+}\n+\n+#[test]\n+fn const_loop() {\n+    check_fail(\n+        r#\"\n+    const F1: i32 = 1 * F3;\n+    const F3: i32 = 3 * F2;\n+    const F2: i32 = 2 * F1;\n+    const GOAL: i32 = F3;\n+    \"#,\n+        ConstEvalError::Loop,\n+    );\n+}\n+\n+#[test]\n+fn const_impl_assoc() {\n+    check_number(\n+        r#\"\n+    struct U5;\n+    impl U5 {\n+        const VAL: usize = 5;\n+    }\n+    const GOAL: usize = U5::VAL;\n+    \"#,\n+        5,\n+    );\n+}\n+\n+#[test]\n+fn const_generic_subst() {\n+    // FIXME: this should evaluate to 5\n+    check_fail(\n+        r#\"\n+    struct Adder<const N: usize, const M: usize>;\n+    impl<const N: usize, const M: usize> Adder<N, M> {\n+        const VAL: usize = N + M;\n+    }\n+    const GOAL: usize = Adder::<2, 3>::VAL;\n+    \"#,\n+        ConstEvalError::NotSupported(\"const generic without substitution\"),\n+    );\n+}\n+\n+#[test]\n+fn const_trait_assoc() {\n+    // FIXME: this should evaluate to 0\n+    check_fail(\n+        r#\"\n+    struct U0;\n+    trait ToConst {\n+        const VAL: usize;\n+    }\n+    impl ToConst for U0 {\n+        const VAL: usize = 0;\n+    }\n+    const GOAL: usize = U0::VAL;\n+    \"#,\n+        ConstEvalError::IncompleteExpr,\n+    );\n+}"}, {"sha": "675f9038f0961f616f63d33293fb7dd00d7efb9b", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22eaee25b8e8849aedc3454646cf9d9ca7195487/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22eaee25b8e8849aedc3454646cf9d9ca7195487/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=22eaee25b8e8849aedc3454646cf9d9ca7195487", "patch": "@@ -1749,6 +1749,18 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn const_eval_array_repeat_expr() {\n+    check_types(\n+        r#\"\n+fn main() {\n+    const X: usize = 6 - 1;\n+    let t = [(); X + 2];\n+      //^ [(); 7]\n+}\"#,\n+    );\n+}\n+\n #[test]\n fn shadowing_primitive_with_inner_items() {\n     check_types("}, {"sha": "67dc9884ed33793c6caf84a0b3185335196a7cb8", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 8, "deletions": 160, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/22eaee25b8e8849aedc3454646cf9d9ca7195487/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22eaee25b8e8849aedc3454646cf9d9ca7195487/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=22eaee25b8e8849aedc3454646cf9d9ca7195487", "patch": "@@ -3399,13 +3399,13 @@ impl<const LEN: usize> Foo<LEN$0> {}\n     );\n }\n \n-// FIXME: move these tests to consteval module\n #[test]\n fn hover_const_eval() {\n+    // show hex for <10\n     check(\n         r#\"\n /// This is a doc\n-const FOO$0: usize = !0 & !(!0 >> 1);\n+const FOO$0: usize = 1 << 3;\n \"#,\n         expect![[r#\"\n             *FOO*\n@@ -3415,22 +3415,19 @@ const FOO$0: usize = !0 & !(!0 >> 1);\n             ```\n \n             ```rust\n-            const FOO: usize = 9223372036854775808 (0x8000000000000000)\n+            const FOO: usize = 8\n             ```\n \n             ---\n \n             This is a doc\n         \"#]],\n     );\n+    // show hex for >10\n     check(\n         r#\"\n /// This is a doc\n-const FOO$0: usize = {\n-    let a = 3 + 2;\n-    let b = a * a;\n-    b\n-};\n+const FOO$0: usize = (1 << 3) + (1 << 2);\n \"#,\n         expect![[r#\"\n             *FOO*\n@@ -3440,60 +3437,15 @@ const FOO$0: usize = {\n             ```\n \n             ```rust\n-            const FOO: usize = 25 (0x19)\n-            ```\n-\n-            ---\n-\n-            This is a doc\n-        \"#]],\n-    );\n-    check(\n-        r#\"\n-/// This is a doc\n-const FOO$0: usize = 1 << 10;\n-\"#,\n-        expect![[r#\"\n-            *FOO*\n-\n-            ```rust\n-            test\n-            ```\n-\n-            ```rust\n-            const FOO: usize = 1024 (0x400)\n-            ```\n-\n-            ---\n-\n-            This is a doc\n-        \"#]],\n-    );\n-    check(\n-        r#\"\n-/// This is a doc\n-const FOO$0: usize = {\n-    let b = 4;\n-    let a = { let b = 2; let a = b; a } + { let a = 1; a + b };\n-    a\n-};\n-\"#,\n-        expect![[r#\"\n-            *FOO*\n-\n-            ```rust\n-            test\n-            ```\n-\n-            ```rust\n-            const FOO: usize = 7\n+            const FOO: usize = 12 (0xC)\n             ```\n \n             ---\n \n             This is a doc\n         \"#]],\n     );\n+    // show original body when const eval fails\n     check(\n         r#\"\n /// This is a doc\n@@ -3515,6 +3467,7 @@ const FOO$0: usize = 2 - 3;\n             This is a doc\n         \"#]],\n     );\n+    // don't show hex for negatives\n     check(\n         r#\"\n /// This is a doc\n@@ -3539,27 +3492,6 @@ const FOO$0: i32 = 2 - 3;\n     check(\n         r#\"\n /// This is a doc\n-const FOO$0: usize = 1 << 100;\n-\"#,\n-        expect![[r#\"\n-            *FOO*\n-\n-            ```rust\n-            test\n-            ```\n-\n-            ```rust\n-            const FOO: usize = 1 << 100\n-            ```\n-\n-            ---\n-\n-            This is a doc\n-        \"#]],\n-    );\n-    check(\n-        r#\"\n-/// This is a doc\n const FOO$0: &str = \"bar\";\n \"#,\n         expect![[r#\"\n@@ -3578,90 +3510,6 @@ const FOO$0: &str = \"bar\";\n             This is a doc\n         \"#]],\n     );\n-    check(\n-        r#\"\n-const F1: i32 = 1;\n-const F$03: i32 = 3 * F2;\n-const F2: i32 = 2 * F1;\n-\"#,\n-        expect![[r#\"\n-            *F3*\n-\n-            ```rust\n-            test\n-            ```\n-\n-            ```rust\n-            const F3: i32 = 6\n-            ```\n-        \"#]],\n-    );\n-    check(\n-        r#\"\n-const F1: i32 = 1 * F3;\n-const F2: i32 = 2 * F1;\n-const F$03: i32 = 3 * F2;\n-\"#,\n-        expect![[r#\"\n-            *F3*\n-\n-            ```rust\n-            test\n-            ```\n-\n-            ```rust\n-            const F3: i32 = 3 * F2\n-            ```\n-        \"#]],\n-    );\n-    check(\n-        r#\"\n-struct U5;\n-impl U5 {\n-    const VAL: usize = 5;\n-}\n-const X$0X: usize = U5::VAL;\n-\"#,\n-        expect![[r#\"\n-            *XX*\n-\n-            ```rust\n-            test\n-            ```\n-\n-            ```rust\n-            const XX: usize = 5\n-            ```\n-        \"#]],\n-    );\n-}\n-\n-// FIXME: this should evaluate to zero\n-#[test]\n-fn hover_const_eval_broken() {\n-    check(\n-        r#\"\n-struct U0;\n-trait ToConst {\n-    const VAL: usize;\n-}\n-impl ToConst for U0 {\n-    const VAL: usize = 0;\n-}\n-const X$0X: usize = U0::VAL;\n-\"#,\n-        expect![[r#\"\n-            *XX*\n-\n-            ```rust\n-            test\n-            ```\n-\n-            ```rust\n-            const XX: usize = U0::VAL\n-            ```\n-        \"#]],\n-    );\n }\n \n #[test]"}]}