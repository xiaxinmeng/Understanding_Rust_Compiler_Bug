{"sha": "5896cd51de65cb6f7b8f3a4df85c4eb8886b76e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4OTZjZDUxZGU2NWNiNmY3YjhmM2E0ZGY4NWM0ZWI4ODg2Yjc2ZTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T19:55:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T19:55:42Z"}, "message": "Cleanup log messages", "tree": {"sha": "f0bb0ff393ec571107e9c78265b2ac0e84281d58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0bb0ff393ec571107e9c78265b2ac0e84281d58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5896cd51de65cb6f7b8f3a4df85c4eb8886b76e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5896cd51de65cb6f7b8f3a4df85c4eb8886b76e2", "html_url": "https://github.com/rust-lang/rust/commit/5896cd51de65cb6f7b8f3a4df85c4eb8886b76e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5896cd51de65cb6f7b8f3a4df85c4eb8886b76e2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c67612b8a894187fa3b64725531a5459f9211bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c67612b8a894187fa3b64725531a5459f9211bf", "html_url": "https://github.com/rust-lang/rust/commit/7c67612b8a894187fa3b64725531a5459f9211bf"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "7a3b7669324411384d28536181a2a0ba590eeaf8", "filename": "codeless/.gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5896cd51de65cb6f7b8f3a4df85c4eb8886b76e2/codeless%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/5896cd51de65cb6f7b8f3a4df85c4eb8886b76e2/codeless%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2F.gitignore?ref=5896cd51de65cb6f7b8f3a4df85c4eb8886b76e2", "patch": "@@ -4,3 +4,4 @@ artifacts.json\n *.vsix\n out/*\n node_modules/*\n+log/*"}, {"sha": "2d8695d2307f77c9cad0b9ac57facce8f075db55", "filename": "crates/server/src/main.rs", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5896cd51de65cb6f7b8f3a4df85c4eb8886b76e2/crates%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5896cd51de65cb6f7b8f3a4df85c4eb8886b76e2/crates%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain.rs?ref=5896cd51de65cb6f7b8f3a4df85c4eb8886b76e2", "patch": "@@ -41,10 +41,10 @@ fn main() -> Result<()> {\n         .log_to_file()\n         .directory(\"log\")\n         .start()?;\n-    info!(\"starting server\");\n+    info!(\"lifecycle: server started\");\n     match ::std::panic::catch_unwind(|| main_inner()) {\n         Ok(res) => {\n-            info!(\"shutting down: {:?}\", res);\n+            info!(\"lifecycle: terminating process with {:?}\", res);\n             res\n         }\n         Err(_) => {\n@@ -105,15 +105,31 @@ fn initialize(io: &mut Io) -> Result<()> {\n type Thunk = Box<for<'a> FnBox<&'a mut Io, Result<()>>>;\n \n fn initialized(io: &mut Io) -> Result<()> {\n-    let mut world = WorldState::new();\n-    let mut pool = ThreadPool::new(4);\n-    let (sender, receiver) = bounded::<Thunk>(16);\n-    let res = main_loop(io, &mut world, &mut pool, sender, receiver.clone());\n-    info!(\"waiting for background jobs to finish...\");\n-    receiver.for_each(drop);\n-    pool.join();\n-    info!(\"...background jobs have finished\");\n-    res\n+    {\n+        let mut world = WorldState::new();\n+        let mut pool = ThreadPool::new(4);\n+        let (sender, receiver) = bounded::<Thunk>(16);\n+        info!(\"lifecycle: handshake finished, server ready to serve requests\");\n+        let res = main_loop(io, &mut world, &mut pool, sender, receiver.clone());\n+        info!(\"waiting for background jobs to finish...\");\n+        receiver.for_each(drop);\n+        pool.join();\n+        info!(\"...background jobs have finished\");\n+        res\n+    }?;\n+\n+    match io.recv()? {\n+        RawMsg::Notification(n) => {\n+            if n.method == \"exit\" {\n+                info!(\"lifecycle: shutdown complete\");\n+                return Ok(());\n+            }\n+            bail!(\"unexpected notification during shutdown: {:?}\", n)\n+        }\n+        m => {\n+            bail!(\"unexpected message during shutdown: {:?}\", m)\n+        }\n+    }\n }\n \n fn main_loop(\n@@ -172,10 +188,17 @@ fn main_loop(\n                     });\n                     Ok(())\n                 })?;\n+                let mut shutdown = false;\n                 dispatch::handle_request::<req::Shutdown, _>(&mut req, |(), resp| {\n                     resp.result(io, ())?;\n+                    shutdown = true;\n                     Ok(())\n                 })?;\n+                if shutdown {\n+                    info!(\"lifecycle: initiating shutdown\");\n+                    drop(sender);\n+                    return Ok(());\n+                }\n                 if let Some(req) = req {\n                     error!(\"unknown method: {:?}\", req);\n                     dispatch::unknown_method(io, req)?;"}]}