{"sha": "98f7842e408587fdaca3d15d8eda677b689a035a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4Zjc4NDJlNDA4NTg3ZmRhY2EzZDE1ZDhlZGE2NzdiNjg5YTAzNWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-02T07:55:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-02T07:55:11Z"}, "message": "Merge #3820\n\n3820: Remove old syntax highlighting r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8640d85d6978df48789ef5d36a80ebe030426311", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8640d85d6978df48789ef5d36a80ebe030426311"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98f7842e408587fdaca3d15d8eda677b689a035a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehZpfCRBK7hj4Ov3rIwAAdHIIADiFwCumR72lK+CfRB4T/WSE\nsXnkn3m1m9OHTTFGtrSvZjmWMRdFfy21mJVd5A6D/jbhhacV5v66k+Pzezyt0u5T\nPYMJgvn3BoveHvY1YDoUdCqBqWQDR5TdhMpFG7ush4N6izU/Drou8x50IrOIv5AH\nH29Uk7CFE5yC/wd8Hsqtjtocn8ht8+fdcp/i5gLkw11GDiWlMsBHVLrJkopxp+HK\nzFN3utzxcEJzmabF+VMbk9YQk92u+C9riVIeyXRwyPWWH2MhZjBSpJzlPbu0cKpy\ncAI1nq2J5PDPl9IOzWhzKI1w9XZgPJ9GF5AJbv1rBhuZmYlDmdWPlNTnePziPi8=\n=ptl+\n-----END PGP SIGNATURE-----\n", "payload": "tree 8640d85d6978df48789ef5d36a80ebe030426311\nparent 2883b299a7282b548fab389e43f1c45c0e51548a\nparent 309fc701559088d630121ffccb114422ff18460c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585814111 +0000\ncommitter GitHub <noreply@github.com> 1585814111 +0000\n\nMerge #3820\n\n3820: Remove old syntax highlighting r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98f7842e408587fdaca3d15d8eda677b689a035a", "html_url": "https://github.com/rust-lang/rust/commit/98f7842e408587fdaca3d15d8eda677b689a035a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98f7842e408587fdaca3d15d8eda677b689a035a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2883b299a7282b548fab389e43f1c45c0e51548a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2883b299a7282b548fab389e43f1c45c0e51548a", "html_url": "https://github.com/rust-lang/rust/commit/2883b299a7282b548fab389e43f1c45c0e51548a"}, {"sha": "309fc701559088d630121ffccb114422ff18460c", "url": "https://api.github.com/repos/rust-lang/rust/commits/309fc701559088d630121ffccb114422ff18460c", "html_url": "https://github.com/rust-lang/rust/commit/309fc701559088d630121ffccb114422ff18460c"}], "stats": {"total": 362, "additions": 3, "deletions": 359}, "files": [{"sha": "602423919f28af2788812b37869c0af5d5573a33", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98f7842e408587fdaca3d15d8eda677b689a035a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f7842e408587fdaca3d15d8eda677b689a035a/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=98f7842e408587fdaca3d15d8eda677b689a035a", "patch": "@@ -16,7 +16,6 @@ use serde::Deserialize;\n #[derive(Debug, Clone)]\n pub struct Config {\n     pub client_caps: ClientCapsConfig,\n-    pub publish_decorations: bool,\n     pub publish_diagnostics: bool,\n     pub notifications: NotificationsConfig,\n     pub inlay_hints: InlayHintsConfig,\n@@ -60,7 +59,6 @@ pub struct ClientCapsConfig {\n impl Default for Config {\n     fn default() -> Self {\n         Config {\n-            publish_decorations: false,\n             publish_diagnostics: true,\n             notifications: NotificationsConfig {\n                 workspace_loaded: true,\n@@ -105,7 +103,6 @@ impl Config {\n         *self = Default::default();\n         self.client_caps = client_caps;\n \n-        set(value, \"/publishDecorations\", &mut self.publish_decorations);\n         set(value, \"/excludeGlobs\", &mut self.exclude_globs);\n         set(value, \"/useClientWatching\", &mut self.use_client_watching);\n         set(value, \"/lruCapacity\", &mut self.lru_capacity);"}, {"sha": "47fef59d467796f20fc2185f025e925b849514d8", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/98f7842e408587fdaca3d15d8eda677b689a035a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f7842e408587fdaca3d15d8eda677b689a035a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=98f7842e408587fdaca3d15d8eda677b689a035a", "patch": "@@ -250,9 +250,7 @@ impl fmt::Debug for Event {\n                 }\n             }\n             Event::Task(Task::Notify(not)) => {\n-                if notification_is::<req::PublishDecorations>(not)\n-                    || notification_is::<req::PublishDiagnostics>(not)\n-                {\n+                if notification_is::<req::PublishDiagnostics>(not) {\n                     return debug_verbose_not(not, f);\n                 }\n             }\n@@ -427,7 +425,6 @@ fn loop_turn(\n         update_file_notifications_on_threadpool(\n             pool,\n             world_state.snapshot(),\n-            world_state.config.publish_decorations,\n             task_sender.clone(),\n             loop_state.subscriptions.subscriptions(),\n         )\n@@ -508,7 +505,6 @@ fn on_request(\n         .on::<req::GotoTypeDefinition>(handlers::handle_goto_type_definition)?\n         .on::<req::ParentModule>(handlers::handle_parent_module)?\n         .on::<req::Runnables>(handlers::handle_runnables)?\n-        .on::<req::DecorationsRequest>(handlers::handle_decorations)?\n         .on::<req::Completion>(handlers::handle_completion)?\n         .on::<req::CodeActionRequest>(handlers::handle_code_action)?\n         .on::<req::CodeLensRequest>(handlers::handle_code_lens)?\n@@ -884,7 +880,6 @@ where\n fn update_file_notifications_on_threadpool(\n     pool: &ThreadPool,\n     world: WorldSnapshot,\n-    publish_decorations: bool,\n     task_sender: Sender<Task>,\n     subscriptions: Vec<FileId>,\n ) {\n@@ -904,19 +899,6 @@ fn update_file_notifications_on_threadpool(\n                     }\n                 }\n             }\n-            if publish_decorations {\n-                match handlers::publish_decorations(&world, file_id) {\n-                    Err(e) => {\n-                        if !is_canceled(&e) {\n-                            log::error!(\"failed to compute decorations: {:?}\", e);\n-                        }\n-                    }\n-                    Ok(params) => {\n-                        let not = notification_new::<req::PublishDecorations>(params);\n-                        task_sender.send(Task::Notify(not)).unwrap();\n-                    }\n-                }\n-            }\n         }\n     });\n }"}, {"sha": "db620dca30a80d11a4bfb721732dfe4a7e444f89", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/98f7842e408587fdaca3d15d8eda677b689a035a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f7842e408587fdaca3d15d8eda677b689a035a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=98f7842e408587fdaca3d15d8eda677b689a035a", "patch": "@@ -38,7 +38,7 @@ use crate::{\n     },\n     diagnostics::DiagnosticTask,\n     from_json,\n-    req::{self, Decoration, InlayHint, InlayHintsParams},\n+    req::{self, InlayHint, InlayHintsParams},\n     semantic_tokens::SemanticTokensBuilder,\n     world::WorldSnapshot,\n     LspError, Result,\n@@ -389,15 +389,6 @@ pub fn handle_runnables(\n     Ok(res)\n }\n \n-pub fn handle_decorations(\n-    world: WorldSnapshot,\n-    params: TextDocumentIdentifier,\n-) -> Result<Vec<Decoration>> {\n-    let _p = profile(\"handle_decorations\");\n-    let file_id = params.try_conv_with(&world)?;\n-    highlight(&world, file_id)\n-}\n-\n pub fn handle_completion(\n     world: WorldSnapshot,\n     params: req::CompletionParams,\n@@ -970,15 +961,6 @@ pub fn publish_diagnostics(world: &WorldSnapshot, file_id: FileId) -> Result<Dia\n     Ok(DiagnosticTask::SetNative(file_id, diagnostics))\n }\n \n-pub fn publish_decorations(\n-    world: &WorldSnapshot,\n-    file_id: FileId,\n-) -> Result<req::PublishDecorationsParams> {\n-    let _p = profile(\"publish_decorations\");\n-    let uri = world.file_id_to_uri(file_id)?;\n-    Ok(req::PublishDecorationsParams { uri, decorations: highlight(&world, file_id)? })\n-}\n-\n fn to_lsp_runnable(\n     world: &WorldSnapshot,\n     file_id: FileId,\n@@ -1008,21 +990,6 @@ fn to_lsp_runnable(\n     })\n }\n \n-fn highlight(world: &WorldSnapshot, file_id: FileId) -> Result<Vec<Decoration>> {\n-    let line_index = world.analysis().file_line_index(file_id)?;\n-    let res = world\n-        .analysis()\n-        .highlight(file_id)?\n-        .into_iter()\n-        .map(|h| Decoration {\n-            range: h.range.conv_with(&line_index),\n-            tag: h.highlight.to_string(),\n-            binding_hash: h.binding_hash.map(|x| x.to_string()),\n-        })\n-        .collect();\n-    Ok(res)\n-}\n-\n pub fn handle_inlay_hints(\n     world: WorldSnapshot,\n     params: InlayHintsParams,"}, {"sha": "ce799a683e2577658c47d0444477f54e968020d8", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/98f7842e408587fdaca3d15d8eda677b689a035a/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f7842e408587fdaca3d15d8eda677b689a035a/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=98f7842e408587fdaca3d15d8eda677b689a035a", "patch": "@@ -1,6 +1,6 @@\n //! Defines `rust-analyzer` specific custom messages.\n \n-use lsp_types::{Location, Position, Range, TextDocumentIdentifier, Url};\n+use lsp_types::{Location, Position, Range, TextDocumentIdentifier};\n use rustc_hash::FxHashMap;\n use serde::{Deserialize, Serialize};\n \n@@ -86,36 +86,6 @@ pub struct FindMatchingBraceParams {\n     pub offsets: Vec<Position>,\n }\n \n-pub enum DecorationsRequest {}\n-\n-impl Request for DecorationsRequest {\n-    type Params = TextDocumentIdentifier;\n-    type Result = Vec<Decoration>;\n-    const METHOD: &'static str = \"rust-analyzer/decorationsRequest\";\n-}\n-\n-pub enum PublishDecorations {}\n-\n-impl Notification for PublishDecorations {\n-    type Params = PublishDecorationsParams;\n-    const METHOD: &'static str = \"rust-analyzer/publishDecorations\";\n-}\n-\n-#[derive(Deserialize, Serialize, Debug)]\n-#[serde(rename_all = \"camelCase\")]\n-pub struct PublishDecorationsParams {\n-    pub uri: Url,\n-    pub decorations: Vec<Decoration>,\n-}\n-\n-#[derive(Deserialize, Serialize, Debug)]\n-#[serde(rename_all = \"camelCase\")]\n-pub struct Decoration {\n-    pub range: Range,\n-    pub tag: String,\n-    pub binding_hash: Option<String>,\n-}\n-\n pub enum ParentModule {}\n \n impl Request for ParentModule {"}, {"sha": "946145df80baa92a5640b432b5d31fdc09be8040", "filename": "editors/code/package.json", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98f7842e408587fdaca3d15d8eda677b689a035a/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/98f7842e408587fdaca3d15d8eda677b689a035a/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=98f7842e408587fdaca3d15d8eda677b689a035a", "patch": "@@ -182,16 +182,6 @@\n                     \"default\": false,\n                     \"description\": \"Use proposed semantic tokens API for syntax highlighting\"\n                 },\n-                \"rust-analyzer.highlightingOn\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": false,\n-                    \"description\": \"Highlight Rust code (overrides built-in syntax highlighting)\"\n-                },\n-                \"rust-analyzer.rainbowHighlightingOn\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": false,\n-                    \"description\": \"When highlighting Rust code, use a unique color per identifier\"\n-                },\n                 \"rust-analyzer.featureFlags\": {\n                     \"type\": \"object\",\n                     \"default\": {},"}, {"sha": "8ddc1cdca210b10044c57c3742c150fd7ad04562", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98f7842e408587fdaca3d15d8eda677b689a035a/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/98f7842e408587fdaca3d15d8eda677b689a035a/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=98f7842e408587fdaca3d15d8eda677b689a035a", "patch": "@@ -7,7 +7,6 @@ import { SemanticTokensFeature, DocumentSemanticsTokensSignature } from 'vscode-\n \n export function configToServerOptions(config: Config) {\n     return {\n-        publishDecorations: !config.highlightingSemanticTokens,\n         lruCapacity: config.lruCapacity,\n \n         inlayHintsType: config.inlayHints.typeHints,"}, {"sha": "c37c6276bb4236e12cb9c6b2060f38ec1cc14051", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98f7842e408587fdaca3d15d8eda677b689a035a/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/98f7842e408587fdaca3d15d8eda677b689a035a/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=98f7842e408587fdaca3d15d8eda677b689a035a", "patch": "@@ -71,8 +71,6 @@ export class Config {\n     get channel() { return this.cfg.get<UpdatesChannel>(\"updates.channel\")!; }\n     get askBeforeDownload() { return this.cfg.get<boolean>(\"updates.askBeforeDownload\")!; }\n     get highlightingSemanticTokens() { return this.cfg.get<boolean>(\"highlighting.semanticTokens\")!; }\n-    get highlightingOn() { return this.cfg.get<boolean>(\"highlightingOn\")!; }\n-    get rainbowHighlightingOn() { return this.cfg.get<boolean>(\"rainbowHighlightingOn\")!; }\n     get lruCapacity() { return this.cfg.get<null | number>(\"lruCapacity\")!; }\n     get excludeGlobs() { return this.cfg.get<string[]>(\"excludeGlobs\")!; }\n     get useClientWatching() { return this.cfg.get<boolean>(\"useClientWatching\")!; }"}, {"sha": "ea2dfc0e39f640d9d87d7163d592d2faa23a9ae5", "filename": "editors/code/src/highlighting.ts", "status": "removed", "additions": 0, "deletions": 255, "changes": 255, "blob_url": "https://github.com/rust-lang/rust/blob/2883b299a7282b548fab389e43f1c45c0e51548a/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/2883b299a7282b548fab389e43f1c45c0e51548a/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=2883b299a7282b548fab389e43f1c45c0e51548a", "patch": "@@ -1,255 +0,0 @@\n-import * as vscode from 'vscode';\n-import * as ra from './rust-analyzer-api';\n-\n-import { ColorTheme, TextMateRuleSettings } from './color_theme';\n-\n-import { Ctx } from './ctx';\n-import { sendRequestWithRetry, isRustDocument } from './util';\n-\n-export function activateHighlighting(ctx: Ctx) {\n-    const highlighter = new Highlighter(ctx);\n-\n-    ctx.client.onNotification(ra.publishDecorations, params => {\n-        if (!ctx.config.highlightingOn) return;\n-\n-        const targetEditor = vscode.window.visibleTextEditors.find(\n-            editor => {\n-                const unescapedUri = unescape(\n-                    editor.document.uri.toString(),\n-                );\n-                // Unescaped URI looks like:\n-                // file:///c:/Workspace/ra-test/src/main.rs\n-                return unescapedUri === params.uri;\n-            },\n-        );\n-        if (!targetEditor) return;\n-\n-        highlighter.setHighlights(targetEditor, params.decorations);\n-    });\n-\n-\n-    vscode.workspace.onDidChangeConfiguration(\n-        _ => highlighter.removeHighlights(),\n-        null,\n-        ctx.subscriptions,\n-    );\n-\n-    vscode.window.onDidChangeActiveTextEditor(\n-        async (editor: vscode.TextEditor | undefined) => {\n-            if (!editor || !isRustDocument(editor.document)) return;\n-            if (!ctx.config.highlightingOn) return;\n-            const client = ctx.client;\n-            if (!client) return;\n-\n-            const decorations = await sendRequestWithRetry(\n-                client,\n-                ra.decorationsRequest,\n-                { uri: editor.document.uri.toString() },\n-            );\n-            highlighter.setHighlights(editor, decorations);\n-        },\n-        null,\n-        ctx.subscriptions,\n-    );\n-}\n-\n-// Based on this HSL-based color generator: https://gist.github.com/bendc/76c48ce53299e6078a76\n-function fancify(seed: string, shade: 'light' | 'dark') {\n-    const random = randomU32Numbers(hashString(seed));\n-    const randomInt = (min: number, max: number) => {\n-        return Math.abs(random()) % (max - min + 1) + min;\n-    };\n-\n-    const h = randomInt(0, 360);\n-    const s = randomInt(42, 98);\n-    const l = shade === 'light' ? randomInt(15, 40) : randomInt(40, 90);\n-    return `hsl(${h},${s}%,${l}%)`;\n-}\n-\n-class Highlighter {\n-    private ctx: Ctx;\n-    private decorations: Map<\n-        string,\n-        vscode.TextEditorDecorationType\n-    > | null = null;\n-\n-    constructor(ctx: Ctx) {\n-        this.ctx = ctx;\n-    }\n-\n-    public removeHighlights() {\n-        if (this.decorations == null) {\n-            return;\n-        }\n-\n-        // Decorations are removed when the object is disposed\n-        for (const decoration of this.decorations.values()) {\n-            decoration.dispose();\n-        }\n-\n-        this.decorations = null;\n-    }\n-\n-    public setHighlights(editor: vscode.TextEditor, highlights: ra.Decoration[]) {\n-        const client = this.ctx.client;\n-        if (!client) return;\n-        // Initialize decorations if necessary\n-        //\n-        // Note: decoration objects need to be kept around so we can dispose them\n-        // if the user disables syntax highlighting\n-        if (this.decorations == null) {\n-            this.decorations = initDecorations();\n-        }\n-\n-        const byTag: Map<string, vscode.Range[]> = new Map();\n-        const colorfulIdents: Map<\n-            string,\n-            [vscode.Range[], boolean]\n-        > = new Map();\n-        const rainbowTime = this.ctx.config.rainbowHighlightingOn;\n-\n-        for (const tag of this.decorations.keys()) {\n-            byTag.set(tag, []);\n-        }\n-\n-        for (const d of highlights) {\n-            if (!byTag.get(d.tag)) {\n-                continue;\n-            }\n-\n-            if (rainbowTime && d.bindingHash) {\n-                if (!colorfulIdents.has(d.bindingHash)) {\n-                    const mut = d.tag.endsWith('.mut');\n-                    colorfulIdents.set(d.bindingHash, [[], mut]);\n-                }\n-                colorfulIdents\n-                    .get(d.bindingHash)![0]\n-                    .push(\n-                        client.protocol2CodeConverter.asRange(d.range),\n-                    );\n-            } else {\n-                byTag\n-                    .get(d.tag)!\n-                    .push(\n-                        client.protocol2CodeConverter.asRange(d.range),\n-                    );\n-            }\n-        }\n-\n-        for (const tag of byTag.keys()) {\n-            const dec = this.decorations.get(\n-                tag,\n-            ) as vscode.TextEditorDecorationType;\n-            const ranges = byTag.get(tag)!;\n-            editor.setDecorations(dec, ranges);\n-        }\n-\n-        for (const [hash, [ranges, mut]] of colorfulIdents.entries()) {\n-            const textDecoration = mut ? 'underline' : undefined;\n-            const dec = vscode.window.createTextEditorDecorationType({\n-                light: { color: fancify(hash, 'light'), textDecoration },\n-                dark: { color: fancify(hash, 'dark'), textDecoration },\n-            });\n-            editor.setDecorations(dec, ranges);\n-        }\n-    }\n-}\n-\n-function initDecorations(): Map<string, vscode.TextEditorDecorationType> {\n-    const theme = ColorTheme.load();\n-    const res = new Map();\n-    TAG_TO_SCOPES.forEach((scopes, tag) => {\n-        // We are going to axe this soon, so don't try to detect unknown tags.\n-        // Users should switch to the new semantic tokens implementation.\n-        if (!scopes) return;\n-        const rule = theme.lookup(scopes);\n-        const decor = createDecorationFromTextmate(rule);\n-        res.set(tag, decor);\n-    });\n-    return res;\n-}\n-\n-function createDecorationFromTextmate(\n-    themeStyle: TextMateRuleSettings,\n-): vscode.TextEditorDecorationType {\n-    const decorationOptions: vscode.DecorationRenderOptions = {};\n-    decorationOptions.rangeBehavior = vscode.DecorationRangeBehavior.OpenOpen;\n-\n-    if (themeStyle.foreground) {\n-        decorationOptions.color = themeStyle.foreground;\n-    }\n-\n-    if (themeStyle.background) {\n-        decorationOptions.backgroundColor = themeStyle.background;\n-    }\n-\n-    if (themeStyle.fontStyle) {\n-        const parts: string[] = themeStyle.fontStyle.split(' ');\n-        parts.forEach(part => {\n-            switch (part) {\n-                case 'italic':\n-                    decorationOptions.fontStyle = 'italic';\n-                    break;\n-                case 'bold':\n-                    decorationOptions.fontWeight = 'bold';\n-                    break;\n-                case 'underline':\n-                    decorationOptions.textDecoration = 'underline';\n-                    break;\n-                default:\n-                    break;\n-            }\n-        });\n-    }\n-    return vscode.window.createTextEditorDecorationType(decorationOptions);\n-}\n-\n-// sync with tags from `syntax_highlighting.rs`.\n-const TAG_TO_SCOPES = new Map<string, string[]>([\n-    [\"field\", [\"entity.name.field\"]],\n-    [\"function\", [\"entity.name.function\"]],\n-    [\"module\", [\"entity.name.module\"]],\n-    [\"constant\", [\"entity.name.constant\"]],\n-    [\"macro\", [\"entity.name.macro\"]],\n-\n-    [\"variable\", [\"variable\"]],\n-    [\"variable.mutable\", [\"variable\", \"meta.mutable\"]],\n-\n-    [\"type\", [\"entity.name.type\"]],\n-    [\"type.builtin\", [\"entity.name.type\", \"support.type.primitive\"]],\n-    [\"type.self\", [\"entity.name.type.parameter.self\"]],\n-    [\"type.param\", [\"entity.name.type.parameter\", \"entity.name.type.param.rust\"]],\n-    [\"type.lifetime\", [\"entity.name.type.lifetime\", \"entity.name.lifetime.rust\"]],\n-\n-    [\"literal.byte\", [\"constant.character.byte\"]],\n-    [\"literal.char\", [\"constant.character.rust\"]],\n-    [\"numeric_literal\", [\"constant.numeric\"]],\n-\n-    [\"comment\", [\"comment\"]],\n-    [\"string_literal\", [\"string.quoted\"]],\n-    [\"attribute\", [\"meta.attribute.rust\"]],\n-\n-    [\"keyword\", [\"keyword\"]],\n-    [\"keyword.unsafe\", [\"keyword.other.unsafe\"]],\n-    [\"keyword.control\", [\"keyword.control\"]],\n-]);\n-\n-function randomU32Numbers(seed: number) {\n-    let random = seed | 0;\n-    return () => {\n-        random ^= random << 13;\n-        random ^= random >> 17;\n-        random ^= random << 5;\n-        random |= 0;\n-        return random;\n-    };\n-}\n-\n-function hashString(str: string): number {\n-    let res = 0;\n-    for (let i = 0; i < str.length; ++i) {\n-        const c = str.codePointAt(i)!;\n-        res = (res * 31 + c) & ~0;\n-    }\n-    return res;\n-}"}, {"sha": "4f3b89f446221ceaf10ccca403baac94f625b1d9", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98f7842e408587fdaca3d15d8eda677b689a035a/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/98f7842e408587fdaca3d15d8eda677b689a035a/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=98f7842e408587fdaca3d15d8eda677b689a035a", "patch": "@@ -7,7 +7,6 @@ import * as commands from './commands';\n import { activateInlayHints } from './inlay_hints';\n import { activateStatusDisplay } from './status_display';\n import { Ctx } from './ctx';\n-import { activateHighlighting } from './highlighting';\n import { Config, NIGHTLY_TAG } from './config';\n import { log, assert } from './util';\n import { PersistentState } from './persistent_state';\n@@ -97,9 +96,6 @@ export async function activate(context: vscode.ExtensionContext) {\n \n     activateStatusDisplay(ctx);\n \n-    if (!ctx.config.highlightingSemanticTokens) {\n-        activateHighlighting(ctx);\n-    }\n     activateInlayHints(ctx);\n \n     vscode.workspace.onDidChangeConfiguration("}]}