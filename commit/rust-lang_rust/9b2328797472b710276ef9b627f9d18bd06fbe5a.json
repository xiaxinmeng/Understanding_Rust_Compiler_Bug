{"sha": "9b2328797472b710276ef9b627f9d18bd06fbe5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMjMyODc5NzQ3MmI3MTAyNzZlZjliNjI3ZjlkMThiZDA2ZmJlNWE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-08-19T20:35:16Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-08-19T20:35:41Z"}, "message": "Don't fail if an object is keyed with a string and we're expecting a number", "tree": {"sha": "3f89fd48ed2ced54ab904232ead6f4a10e729914", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f89fd48ed2ced54ab904232ead6f4a10e729914"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b2328797472b710276ef9b627f9d18bd06fbe5a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2328797472b710276ef9b627f9d18bd06fbe5a", "html_url": "https://github.com/rust-lang/rust/commit/9b2328797472b710276ef9b627f9d18bd06fbe5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b2328797472b710276ef9b627f9d18bd06fbe5a/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e95552c5e624ac1ad0c04db505e34122c9d261ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/e95552c5e624ac1ad0c04db505e34122c9d261ae", "html_url": "https://github.com/rust-lang/rust/commit/e95552c5e624ac1ad0c04db505e34122c9d261ae"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "cef50a1308fc5a8d44f4cd00200729f1e35973ae", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9b2328797472b710276ef9b627f9d18bd06fbe5a/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2328797472b710276ef9b627f9d18bd06fbe5a/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=9b2328797472b710276ef9b627f9d18bd06fbe5a", "patch": "@@ -1951,7 +1951,10 @@ macro_rules! read_primitive {\n                 String(s) => {\n                     // re: #12967.. a type w/ numeric keys (ie HashMap<uint, V> etc)\n                     // is going to have a string here, as per JSON spec.\n-                    Ok(std::from_str::from_str(s.as_slice()).unwrap())\n+                    match std::from_str::from_str(s.as_slice()) {\n+                        Some(f) => Ok(f),\n+                        None => Err(ExpectedError(\"Number\".to_string(), s)),\n+                    }\n                 },\n                 value => Err(ExpectedError(\"Number\".to_string(), format!(\"{}\", value)))\n             }\n@@ -1987,7 +1990,10 @@ impl ::Decoder<DecoderError> for Decoder {\n             String(s) => {\n                 // re: #12967.. a type w/ numeric keys (ie HashMap<uint, V> etc)\n                 // is going to have a string here, as per JSON spec.\n-                Ok(std::from_str::from_str(s.as_slice()).unwrap())\n+                match std::from_str::from_str(s.as_slice()) {\n+                    Some(f) => Ok(f),\n+                    None => Err(ExpectedError(\"Number\".to_string(), s)),\n+                }\n             },\n             Null => Ok(f64::NAN),\n             value => Err(ExpectedError(\"Number\".to_string(), format!(\"{}\", value)))\n@@ -3169,6 +3175,7 @@ mod tests {\n             _ => {} // it parsed and we are good to go\n         }\n     }\n+\n     #[test]\n     fn test_prettyencode_hashmap_with_numeric_key() {\n         use std::str::from_utf8;\n@@ -3189,6 +3196,7 @@ mod tests {\n             _ => {} // it parsed and we are good to go\n         }\n     }\n+\n     #[test]\n     fn test_hashmap_with_numeric_key_can_handle_double_quote_delimited_key() {\n         use std::collections::HashMap;\n@@ -3202,6 +3210,20 @@ mod tests {\n         let _hm: HashMap<uint, bool> = Decodable::decode(&mut decoder).unwrap();\n     }\n \n+    #[test]\n+    fn test_hashmap_with_numeric_key_will_error_with_string_keys() {\n+        use std::collections::HashMap;\n+        use Decodable;\n+        let json_str = \"{\\\"a\\\":true}\";\n+        let json_obj = match from_str(json_str) {\n+            Err(_) => fail!(\"Unable to parse json_str: {}\", json_str),\n+            Ok(o) => o\n+        };\n+        let mut decoder = Decoder::new(json_obj);\n+        let result: Result<HashMap<uint, bool>, DecoderError> = Decodable::decode(&mut decoder);\n+        assert_eq!(result, Err(ExpectedError(\"Number\".to_string(), \"a\".to_string())));\n+    }\n+\n     fn assert_stream_equal(src: &str,\n                            expected: Vec<(JsonEvent, Vec<StackElement>)>) {\n         let mut parser = Parser::new(src.chars());"}]}