{"sha": "7125a481ce16fba90f833d4f2d9650d032229a83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMjVhNDgxY2UxNmZiYTkwZjgzM2Q0ZjJkOTY1MGQwMzIyMjlhODM=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-09-04T13:14:39Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-09-19T14:54:20Z"}, "message": "Move Wrapping<T> definition to wrapping mod", "tree": {"sha": "2b7d684a52f89a5e83838a13d245580698ae3449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b7d684a52f89a5e83838a13d245580698ae3449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7125a481ce16fba90f833d4f2d9650d032229a83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7125a481ce16fba90f833d4f2d9650d032229a83", "html_url": "https://github.com/rust-lang/rust/commit/7125a481ce16fba90f833d4f2d9650d032229a83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7125a481ce16fba90f833d4f2d9650d032229a83/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baecad9c392ec74fe0cccee2dc5876cf157e4966", "url": "https://api.github.com/repos/rust-lang/rust/commits/baecad9c392ec74fe0cccee2dc5876cf157e4966", "html_url": "https://github.com/rust-lang/rust/commit/baecad9c392ec74fe0cccee2dc5876cf157e4966"}], "stats": {"total": 157, "additions": 82, "deletions": 75}, "files": [{"sha": "ee9c9cf82f01a76d4f5d93a2f865dd3fdb4ce86c", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 3, "deletions": 73, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7125a481ce16fba90f833d4f2d9650d032229a83/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7125a481ce16fba90f833d4f2d9650d032229a83/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=7125a481ce16fba90f833d4f2d9650d032229a83", "patch": "@@ -34,79 +34,6 @@ macro_rules! doc_comment {\n     };\n }\n \n-/// Provides intentionally-wrapped arithmetic on `T`.\n-///\n-/// Operations like `+` on `u32` values are intended to never overflow,\n-/// and in some debug configurations overflow is detected and results\n-/// in a panic. While most arithmetic falls into this category, some\n-/// code explicitly expects and relies upon modular arithmetic (e.g.,\n-/// hashing).\n-///\n-/// Wrapping arithmetic can be achieved either through methods like\n-/// `wrapping_add`, or through the `Wrapping<T>` type, which says that\n-/// all standard arithmetic operations on the underlying value are\n-/// intended to have wrapping semantics.\n-///\n-/// The underlying value can be retrieved through the `.0` index of the\n-/// `Wrapping` tuple.\n-///\n-/// # Examples\n-///\n-/// ```\n-/// use std::num::Wrapping;\n-///\n-/// let zero = Wrapping(0u32);\n-/// let one = Wrapping(1u32);\n-///\n-/// assert_eq!(u32::MAX, (zero - one).0);\n-/// ```\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Default, Hash)]\n-#[repr(transparent)]\n-pub struct Wrapping<T>(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub T);\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: fmt::Debug> fmt::Debug for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.0.fmt(f)\n-    }\n-}\n-\n-#[stable(feature = \"wrapping_display\", since = \"1.10.0\")]\n-impl<T: fmt::Display> fmt::Display for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.0.fmt(f)\n-    }\n-}\n-\n-#[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n-impl<T: fmt::Binary> fmt::Binary for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.0.fmt(f)\n-    }\n-}\n-\n-#[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n-impl<T: fmt::Octal> fmt::Octal for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.0.fmt(f)\n-    }\n-}\n-\n-#[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n-impl<T: fmt::LowerHex> fmt::LowerHex for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.0.fmt(f)\n-    }\n-}\n-\n-#[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n-impl<T: fmt::UpperHex> fmt::UpperHex for Wrapping<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.0.fmt(f)\n-    }\n-}\n-\n // All these modules are technically private and only exposed for coretests:\n pub mod bignum;\n pub mod dec2flt;\n@@ -116,6 +43,9 @@ pub mod flt2dec;\n mod nonzero;\n mod wrapping;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use wrapping::Wrapping;\n+\n #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n pub use nonzero::{NonZeroU128, NonZeroU16, NonZeroU32, NonZeroU64, NonZeroU8, NonZeroUsize};\n "}, {"sha": "5324dfdeddde281ce17470651429f5f01f47f644", "filename": "library/core/src/num/wrapping.rs", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7125a481ce16fba90f833d4f2d9650d032229a83/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7125a481ce16fba90f833d4f2d9650d032229a83/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fwrapping.rs?ref=7125a481ce16fba90f833d4f2d9650d032229a83", "patch": "@@ -1,6 +1,83 @@\n-use super::Wrapping;\n+//! Definitions of `Wrapping<T>`.\n+\n+use crate::fmt;\n+use crate::ops::{Add, AddAssign, BitAnd, BitAndAssign, BitOr, BitOrAssign};\n+use crate::ops::{BitXor, BitXorAssign, Div, DivAssign};\n+use crate::ops::{Mul, MulAssign, Neg, Not, Rem, RemAssign};\n+use crate::ops::{Shl, ShlAssign, Shr, ShrAssign, Sub, SubAssign};\n+\n+/// Provides intentionally-wrapped arithmetic on `T`.\n+///\n+/// Operations like `+` on `u32` values are intended to never overflow,\n+/// and in some debug configurations overflow is detected and results\n+/// in a panic. While most arithmetic falls into this category, some\n+/// code explicitly expects and relies upon modular arithmetic (e.g.,\n+/// hashing).\n+///\n+/// Wrapping arithmetic can be achieved either through methods like\n+/// `wrapping_add`, or through the `Wrapping<T>` type, which says that\n+/// all standard arithmetic operations on the underlying value are\n+/// intended to have wrapping semantics.\n+///\n+/// The underlying value can be retrieved through the `.0` index of the\n+/// `Wrapping` tuple.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::num::Wrapping;\n+///\n+/// let zero = Wrapping(0u32);\n+/// let one = Wrapping(1u32);\n+///\n+/// assert_eq!(u32::MAX, (zero - one).0);\n+/// ```\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Default, Hash)]\n+#[repr(transparent)]\n+pub struct Wrapping<T>(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub T);\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: fmt::Debug> fmt::Debug for Wrapping<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n+#[stable(feature = \"wrapping_display\", since = \"1.10.0\")]\n+impl<T: fmt::Display> fmt::Display for Wrapping<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n+#[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n+impl<T: fmt::Binary> fmt::Binary for Wrapping<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n \n-use crate::ops::*;\n+#[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n+impl<T: fmt::Octal> fmt::Octal for Wrapping<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n+#[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n+impl<T: fmt::LowerHex> fmt::LowerHex for Wrapping<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n+#[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n+impl<T: fmt::UpperHex> fmt::UpperHex for Wrapping<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n \n #[allow(unused_macros)]\n macro_rules! sh_impl_signed {"}]}