{"sha": "e77d163e82b2b6680322085c421c438cf60a7bc6", "node_id": "C_kwDOAAsO6NoAKGU3N2QxNjNlODJiMmI2NjgwMzIyMDg1YzQyMWM0MzhjZjYwYTdiYzY", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-01T06:41:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T06:41:06Z"}, "message": "Rollup merge of #89251 - estebank:negative-index-literals, r=davidtwco\n\nDetect when negative literal indices are used and suggest appropriate code", "tree": {"sha": "b392be45391c1712f636f0545c2902cfd317e77d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b392be45391c1712f636f0545c2902cfd317e77d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e77d163e82b2b6680322085c421c438cf60a7bc6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVq2DCRBK7hj4Ov3rIwAAY1MIAIRDMRIz76H7aMCSQ6XpIPDd\nVq4624jcKO7MLq24BqCc4V8P01derLlU1f9Ov5qlsvtGdIjC8KavFl/ZC65jabjJ\nPuVoU6APWtDcuTyyF6bvJoX1/6OI6dqoGRVLr7VXnNmxRc3lbVHYri8EtnDiu8ti\nh3+/kS2lKd10mOz5EhWqJHzV9o8FktS+EaPzLyxlCB82Zdan/EVsIune4SzMHOmx\nUBIZDCGNkBEMKPB5v7JuVuRrR29KrjZbg0witfxVW1oGWAzTAYuo3qF9mPbM+6yY\nP/FikK1lKMoaJXfzA/Mtzzxqq5gZjoz4yy/TDPhv2bqtOgfuRt7nUpIjMaMm+rA=\n=K+FV\n-----END PGP SIGNATURE-----\n", "payload": "tree b392be45391c1712f636f0545c2902cfd317e77d\nparent 9593e61f64233c6c556762060dc5e1cdc636845e\nparent e19d82f1bf190de6c67114811e12256cba6831e8\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633070466 -0700\ncommitter GitHub <noreply@github.com> 1633070466 -0700\n\nRollup merge of #89251 - estebank:negative-index-literals, r=davidtwco\n\nDetect when negative literal indices are used and suggest appropriate code\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e77d163e82b2b6680322085c421c438cf60a7bc6", "html_url": "https://github.com/rust-lang/rust/commit/e77d163e82b2b6680322085c421c438cf60a7bc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e77d163e82b2b6680322085c421c438cf60a7bc6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9593e61f64233c6c556762060dc5e1cdc636845e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9593e61f64233c6c556762060dc5e1cdc636845e", "html_url": "https://github.com/rust-lang/rust/commit/9593e61f64233c6c556762060dc5e1cdc636845e"}, {"sha": "e19d82f1bf190de6c67114811e12256cba6831e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e19d82f1bf190de6c67114811e12256cba6831e8", "html_url": "https://github.com/rust-lang/rust/commit/e19d82f1bf190de6c67114811e12256cba6831e8"}], "stats": {"total": 138, "additions": 136, "deletions": 2}, "files": [{"sha": "09a55937cc5adfb77688f40195e946265a8fad4c", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e77d163e82b2b6680322085c421c438cf60a7bc6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77d163e82b2b6680322085c421c438cf60a7bc6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=e77d163e82b2b6680322085c421c438cf60a7bc6", "patch": "@@ -2137,7 +2137,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             idx_t\n         } else {\n             let base_t = self.structurally_resolved_type(base.span, base_t);\n-            match self.lookup_indexing(expr, base, base_t, idx_t) {\n+            match self.lookup_indexing(expr, base, base_t, idx, idx_t) {\n                 Some((index_ty, element_ty)) => {\n                     // two-phase not needed because index_ty is never mutable\n                     self.demand_coerce(idx, idx_t, index_ty, None, AllowTwoPhase::No);"}, {"sha": "64775d7aba9f8688dfad292fe550a80f9eb69f46", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e77d163e82b2b6680322085c421c438cf60a7bc6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77d163e82b2b6680322085c421c438cf60a7bc6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=e77d163e82b2b6680322085c421c438cf60a7bc6", "patch": "@@ -1,5 +1,7 @@\n use crate::check::method::MethodCallee;\n use crate::check::{has_expected_num_generic_args, FnCtxt, PlaceOp};\n+use rustc_ast as ast;\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::InferOk;\n@@ -47,6 +49,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr<'_>,\n         base_expr: &'tcx hir::Expr<'tcx>,\n         base_ty: Ty<'tcx>,\n+        index_expr: &'tcx hir::Expr<'tcx>,\n         idx_ty: Ty<'tcx>,\n     ) -> Option<(/*index type*/ Ty<'tcx>, /*element type*/ Ty<'tcx>)> {\n         // FIXME(#18741) -- this is almost but not quite the same as the\n@@ -56,12 +59,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut autoderef = self.autoderef(base_expr.span, base_ty);\n         let mut result = None;\n         while result.is_none() && autoderef.next().is_some() {\n-            result = self.try_index_step(expr, base_expr, &autoderef, idx_ty);\n+            result = self.try_index_step(expr, base_expr, &autoderef, idx_ty, index_expr);\n         }\n         self.register_predicates(autoderef.into_obligations());\n         result\n     }\n \n+    fn negative_index(\n+        &self,\n+        ty: Ty<'tcx>,\n+        span: Span,\n+        base_expr: &hir::Expr<'_>,\n+    ) -> Option<(Ty<'tcx>, Ty<'tcx>)> {\n+        let ty = self.resolve_vars_if_possible(ty);\n+        let mut err = self.tcx.sess.struct_span_err(\n+            span,\n+            &format!(\"negative integers cannot be used to index on a `{}`\", ty),\n+        );\n+        err.span_label(span, &format!(\"cannot use a negative integer for indexing on `{}`\", ty));\n+        if let (hir::ExprKind::Path(..), Ok(snippet)) =\n+            (&base_expr.kind, self.tcx.sess.source_map().span_to_snippet(base_expr.span))\n+        {\n+            // `foo[-1]` to `foo[foo.len() - 1]`\n+            err.span_suggestion_verbose(\n+                span.shrink_to_lo(),\n+                &format!(\n+                    \"to access an element starting from the end of the `{}`, compute the index\",\n+                    ty,\n+                ),\n+                format!(\"{}.len() \", snippet),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+        err.emit();\n+        Some((self.tcx.ty_error(), self.tcx.ty_error()))\n+    }\n+\n     /// To type-check `base_expr[index_expr]`, we progressively autoderef\n     /// (and otherwise adjust) `base_expr`, looking for a type which either\n     /// supports builtin indexing or overloaded indexing.\n@@ -73,6 +106,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         base_expr: &hir::Expr<'_>,\n         autoderef: &Autoderef<'a, 'tcx>,\n         index_ty: Ty<'tcx>,\n+        index_expr: &hir::Expr<'_>,\n     ) -> Option<(/*index type*/ Ty<'tcx>, /*element type*/ Ty<'tcx>)> {\n         let adjusted_ty =\n             self.structurally_resolved_type(autoderef.span(), autoderef.final_ty(false));\n@@ -82,6 +116,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             expr, base_expr, adjusted_ty, index_ty\n         );\n \n+        if let hir::ExprKind::Unary(\n+            hir::UnOp::Neg,\n+            hir::Expr {\n+                kind: hir::ExprKind::Lit(hir::Lit { node: ast::LitKind::Int(..), .. }),\n+                ..\n+            },\n+        ) = index_expr.kind\n+        {\n+            match adjusted_ty.kind() {\n+                ty::Adt(ty::AdtDef { did, .. }, _)\n+                    if self.tcx.is_diagnostic_item(sym::vec_type, *did) =>\n+                {\n+                    return self.negative_index(adjusted_ty, index_expr.span, base_expr);\n+                }\n+                ty::Slice(_) | ty::Array(_, _) => {\n+                    return self.negative_index(adjusted_ty, index_expr.span, base_expr);\n+                }\n+                _ => {}\n+            }\n+        }\n+\n         for unsize in [false, true] {\n             let mut self_ty = adjusted_ty;\n             if unsize {"}, {"sha": "e52714cf97fe6f5cc54d7830500bf65faad524bf", "filename": "src/test/ui/suggestions/negative-literal-index.fixed", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e77d163e82b2b6680322085c421c438cf60a7bc6/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e77d163e82b2b6680322085c421c438cf60a7bc6/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.fixed?ref=e77d163e82b2b6680322085c421c438cf60a7bc6", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+use std::ops::Index;\n+struct X;\n+impl Index<i32> for X {\n+    type Output = ();\n+\n+    fn index(&self, _: i32) -> &() {\n+        &()\n+    }\n+}\n+\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    x[x.len() -1]; //~ ERROR negative integers cannot be used to index on a\n+    let x = [1, 2, 3];\n+    x[x.len() -1]; //~ ERROR negative integers cannot be used to index on a\n+    let x = &[1, 2, 3];\n+    x[x.len() -1]; //~ ERROR negative integers cannot be used to index on a\n+    let _ = x;\n+    X[-1];\n+}"}, {"sha": "d88b66e679e56d2fd6df33fdad7ab07310bf9be2", "filename": "src/test/ui/suggestions/negative-literal-index.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e77d163e82b2b6680322085c421c438cf60a7bc6/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77d163e82b2b6680322085c421c438cf60a7bc6/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.rs?ref=e77d163e82b2b6680322085c421c438cf60a7bc6", "patch": "@@ -0,0 +1,22 @@\n+// run-rustfix\n+\n+use std::ops::Index;\n+struct X;\n+impl Index<i32> for X {\n+    type Output = ();\n+\n+    fn index(&self, _: i32) -> &() {\n+        &()\n+    }\n+}\n+\n+fn main() {\n+    let x = vec![1, 2, 3];\n+    x[-1]; //~ ERROR negative integers cannot be used to index on a\n+    let x = [1, 2, 3];\n+    x[-1]; //~ ERROR negative integers cannot be used to index on a\n+    let x = &[1, 2, 3];\n+    x[-1]; //~ ERROR negative integers cannot be used to index on a\n+    let _ = x;\n+    X[-1];\n+}"}, {"sha": "2b51bf7b7ce87c21a1d2bc8feb9c1cdadd0333a8", "filename": "src/test/ui/suggestions/negative-literal-index.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e77d163e82b2b6680322085c421c438cf60a7bc6/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e77d163e82b2b6680322085c421c438cf60a7bc6/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fnegative-literal-index.stderr?ref=e77d163e82b2b6680322085c421c438cf60a7bc6", "patch": "@@ -0,0 +1,35 @@\n+error: negative integers cannot be used to index on a `Vec<{integer}>`\n+  --> $DIR/negative-literal-index.rs:15:7\n+   |\n+LL |     x[-1];\n+   |       ^^ cannot use a negative integer for indexing on `Vec<{integer}>`\n+   |\n+help: to access an element starting from the end of the `Vec<{integer}>`, compute the index\n+   |\n+LL |     x[x.len() -1];\n+   |       +++++++\n+\n+error: negative integers cannot be used to index on a `[{integer}; 3]`\n+  --> $DIR/negative-literal-index.rs:17:7\n+   |\n+LL |     x[-1];\n+   |       ^^ cannot use a negative integer for indexing on `[{integer}; 3]`\n+   |\n+help: to access an element starting from the end of the `[{integer}; 3]`, compute the index\n+   |\n+LL |     x[x.len() -1];\n+   |       +++++++\n+\n+error: negative integers cannot be used to index on a `[{integer}; 3]`\n+  --> $DIR/negative-literal-index.rs:19:7\n+   |\n+LL |     x[-1];\n+   |       ^^ cannot use a negative integer for indexing on `[{integer}; 3]`\n+   |\n+help: to access an element starting from the end of the `[{integer}; 3]`, compute the index\n+   |\n+LL |     x[x.len() -1];\n+   |       +++++++\n+\n+error: aborting due to 3 previous errors\n+"}]}