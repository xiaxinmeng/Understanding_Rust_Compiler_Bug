{"sha": "054a312a33403c6f28b2948ac7ba25dec7f3b267", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NGEzMTJhMzM0MDNjNmYyOGIyOTQ4YWM3YmEyNWRlYzdmM2IyNjc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-04-18T11:46:21Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-04-18T15:21:39Z"}, "message": "Stop duplicating non-generic resource destructors\n\nCloses #2177", "tree": {"sha": "30281a7c19b30fa7f0221860d26369baa181446e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30281a7c19b30fa7f0221860d26369baa181446e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/054a312a33403c6f28b2948ac7ba25dec7f3b267", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/054a312a33403c6f28b2948ac7ba25dec7f3b267", "html_url": "https://github.com/rust-lang/rust/commit/054a312a33403c6f28b2948ac7ba25dec7f3b267", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/054a312a33403c6f28b2948ac7ba25dec7f3b267/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0fa0994695475bd50bae75291f9e7b222bae72a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0fa0994695475bd50bae75291f9e7b222bae72a", "html_url": "https://github.com/rust-lang/rust/commit/a0fa0994695475bd50bae75291f9e7b222bae72a"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "0ffb3a5d456846f7e7736ba4e0ac8ccdcfd8bc36", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/054a312a33403c6f28b2948ac7ba25dec7f3b267/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054a312a33403c6f28b2948ac7ba25dec7f3b267/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=054a312a33403c6f28b2948ac7ba25dec7f3b267", "patch": "@@ -616,6 +616,9 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_type(ecx, ebml_w, ty::ty_fn_ret(fn_ty));\n         encode_name(ebml_w, item.ident);\n         astencode::encode_inlined_item(ecx, ebml_w, path, ii_item(item));\n+        if (tps.len() == 0u) {\n+            encode_symbol(ecx, ebml_w, item.id);\n+        }\n         encode_path(ebml_w, path, ast_map::path_name(item.ident));\n         ebml_w.end_tag();\n "}, {"sha": "19e84603deb08791193c394bcd717b2c464eeddc", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/054a312a33403c6f28b2948ac7ba25dec7f3b267/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054a312a33403c6f28b2948ac7ba25dec7f3b267/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=054a312a33403c6f28b2948ac7ba25dec7f3b267", "patch": "@@ -706,11 +706,23 @@ fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n fn get_res_dtor(ccx: @crate_ctxt, did: ast::def_id, substs: [ty::t])\n    -> ValueRef {\n     let _icx = ccx.insn_ctxt(\"trans_res_dtor\");\n-    let did = if did.crate != ast::local_crate {\n-        maybe_instantiate_inline(ccx, did)\n-    } else { did };\n-    assert did.crate == ast::local_crate;\n-    monomorphic_fn(ccx, did, substs, none, none).val\n+    if (substs.len() > 0u) {\n+        let did = if did.crate != ast::local_crate {\n+            maybe_instantiate_inline(ccx, did)\n+        } else { did };\n+        assert did.crate == ast::local_crate;\n+        monomorphic_fn(ccx, did, substs, none, none).val\n+    } else if did.crate == ast::local_crate {\n+        get_item_val(ccx, did.node)\n+    } else {\n+        let fty = ty::mk_fn(ccx.tcx, {proto: ast::proto_bare,\n+                                      inputs: [{mode: ast::expl(ast::by_ref),\n+                                                ty: ty::mk_nil_ptr(ccx.tcx)}],\n+                                      output: ty::mk_nil(ccx.tcx),\n+                                      ret_style: ast::return_val,\n+                                      constraints: []});\n+        trans_external_path(ccx, did, fty)\n+    }\n }\n \n fn trans_res_drop(bcx: block, rs: ValueRef, did: ast::def_id,\n@@ -1946,7 +1958,6 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id, real_substs: [ty::t],\n     let s = mangle_exported_name(ccx, pt, mono_ty);\n     let lldecl = decl_internal_cdecl_fn(ccx.llmod, s, llfty);\n     ccx.monomorphized.insert(hash_id, lldecl);\n-    ccx.item_symbols.insert(fn_id.node, s);\n \n     let psubsts = some({tys: substs, vtables: vtables, bounds: tpt.bounds});\n     alt check map_node {"}]}