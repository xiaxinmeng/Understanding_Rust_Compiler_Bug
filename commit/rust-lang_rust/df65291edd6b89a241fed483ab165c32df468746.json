{"sha": "df65291edd6b89a241fed483ab165c32df468746", "node_id": "C_kwDOAAsO6NoAKGRmNjUyOTFlZGQ2Yjg5YTI0MWZlZDQ4M2FiMTY1YzMyZGY0Njg3NDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-21T21:51:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-21T21:51:24Z"}, "message": "Auto merge of #7856 - Manishearth:impl-safety, r=xFrednet\n\nmissing_safety_doc: Handle 'implementation safety' headers as well\n\nWe hit some FPs on this in `yoke`, it's somewhat normal to mark trait impl safety with \"implementation safety\". We could also broaden the check for headers which contain the word \"safety\" somehow, or split out impl safety stuff to only apply to traits.\n\nchangelog: handle 'implementation safety' headers in `missing_safety_doc`", "tree": {"sha": "dd89e84f6ec08fcae9c8cc9c65f2e39745325292", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd89e84f6ec08fcae9c8cc9c65f2e39745325292"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df65291edd6b89a241fed483ab165c32df468746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df65291edd6b89a241fed483ab165c32df468746", "html_url": "https://github.com/rust-lang/rust/commit/df65291edd6b89a241fed483ab165c32df468746", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df65291edd6b89a241fed483ab165c32df468746/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6714eff09ac91e4149cffea53aaa5204c9198ed3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6714eff09ac91e4149cffea53aaa5204c9198ed3", "html_url": "https://github.com/rust-lang/rust/commit/6714eff09ac91e4149cffea53aaa5204c9198ed3"}, {"sha": "9def82d382220970760baa9d6480663bec3ebf97", "url": "https://api.github.com/repos/rust-lang/rust/commits/9def82d382220970760baa9d6480663bec3ebf97", "html_url": "https://github.com/rust-lang/rust/commit/9def82d382220970760baa9d6480663bec3ebf97"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "ec67adf3f87662ef1c81b75a2bcfc6e8a98a572a", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df65291edd6b89a241fed483ab165c32df468746/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df65291edd6b89a241fed483ab165c32df468746/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=df65291edd6b89a241fed483ab165c32df468746", "patch": "@@ -578,9 +578,12 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n                     // text \"http://example.com\" by pulldown-cmark\n                     continue;\n                 }\n-                headers.safety |= in_heading && text.trim() == \"Safety\";\n-                headers.errors |= in_heading && text.trim() == \"Errors\";\n-                headers.panics |= in_heading && text.trim() == \"Panics\";\n+                let trimmed_text = text.trim();\n+                headers.safety |= in_heading && trimmed_text == \"Safety\";\n+                headers.safety |= in_heading && trimmed_text == \"Implementation safety\";\n+                headers.safety |= in_heading && trimmed_text == \"Implementation Safety\";\n+                headers.errors |= in_heading && trimmed_text == \"Errors\";\n+                headers.panics |= in_heading && trimmed_text == \"Panics\";\n                 if in_code {\n                     if is_rust {\n                         let edition = edition.unwrap_or_else(|| cx.tcx.sess.edition());"}, {"sha": "4464a21b3b654bdf89b238a5c0594b61edbf06ce", "filename": "tests/ui/doc_unsafe.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df65291edd6b89a241fed483ab165c32df468746/tests%2Fui%2Fdoc_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df65291edd6b89a241fed483ab165c32df468746/tests%2Fui%2Fdoc_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.rs?ref=df65291edd6b89a241fed483ab165c32df468746", "patch": "@@ -125,3 +125,8 @@ pub mod __macro {\n         pub unsafe fn f() {}\n     }\n }\n+\n+/// # Implementation safety\n+pub unsafe trait DocumentedUnsafeTraitWithImplementationHeader {\n+    fn method();\n+}"}]}