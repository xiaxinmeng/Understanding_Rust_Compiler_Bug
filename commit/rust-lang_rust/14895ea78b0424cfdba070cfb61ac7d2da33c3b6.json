{"sha": "14895ea78b0424cfdba070cfb61ac7d2da33c3b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ODk1ZWE3OGIwNDI0Y2ZkYmEwNzBjZmI2MWFjN2QyZGEzM2MzYjY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-12-04T02:30:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-04T02:30:29Z"}, "message": "Rollup merge of #79623 - jyn514:ident, r=GuillaumeGomez\n\nPass around Symbols instead of Idents in doctree\n\nThe span was unused.\n\nVaguely related to https://github.com/rust-lang/rust/pull/78082 - currently working on converting `visit_ast` to use `hir::intravisit` and this makes that a little easier.\n\nr? ``@GuillaumeGomez``", "tree": {"sha": "45b2139969f238c7fae67feb1398d5a65ff258be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45b2139969f238c7fae67feb1398d5a65ff258be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14895ea78b0424cfdba070cfb61ac7d2da33c3b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfyZ9FCRBK7hj4Ov3rIwAAdHIIAJJqrcbvoumzjL5j14kYQZzx\nvEnWnn2oXncCB96oUnT9UrphETvXsRrnel+XqAih8jZNm1NroLqESFF+MNy4o+WW\nrSkl1OghE0ZSbhO1LjprXe9FvHjxLtZAHO9e/MACJK+DqUbWF/SiIzVBz48Z3bUP\nfCW0npKcfynu9XvDX9PlvfZXjoCVx5M4/gHP5LD/vx/r7R9lvJ/lmbj4ZUkmsndk\nNrIUznlBsiY4SQOx1a15xrrVynJj3zQyKH8HlE9mpYA2f9ZZ3V3/NXPmxE4WJ5LE\nkggvPV79t+AgAukhsN1+65chS32KaV+3TREYYWfLhB4J8LgWKRMXst0T8V0JjUg=\n=gsMC\n-----END PGP SIGNATURE-----\n", "payload": "tree 45b2139969f238c7fae67feb1398d5a65ff258be\nparent 88f0c72dc693cd1391fab4f60df861b245db5d12\nparent 88c6cf88842fa6a321f2630ea154d0267969466d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1607049029 +0100\ncommitter GitHub <noreply@github.com> 1607049029 +0100\n\nRollup merge of #79623 - jyn514:ident, r=GuillaumeGomez\n\nPass around Symbols instead of Idents in doctree\n\nThe span was unused.\n\nVaguely related to https://github.com/rust-lang/rust/pull/78082 - currently working on converting `visit_ast` to use `hir::intravisit` and this makes that a little easier.\n\nr? ``@GuillaumeGomez``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14895ea78b0424cfdba070cfb61ac7d2da33c3b6", "html_url": "https://github.com/rust-lang/rust/commit/14895ea78b0424cfdba070cfb61ac7d2da33c3b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14895ea78b0424cfdba070cfb61ac7d2da33c3b6/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88f0c72dc693cd1391fab4f60df861b245db5d12", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f0c72dc693cd1391fab4f60df861b245db5d12", "html_url": "https://github.com/rust-lang/rust/commit/88f0c72dc693cd1391fab4f60df861b245db5d12"}, {"sha": "88c6cf88842fa6a321f2630ea154d0267969466d", "url": "https://api.github.com/repos/rust-lang/rust/commits/88c6cf88842fa6a321f2630ea154d0267969466d", "html_url": "https://github.com/rust-lang/rust/commit/88c6cf88842fa6a321f2630ea154d0267969466d"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "8c344338de7a589978344b049bcadc17f2f8b396", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/14895ea78b0424cfdba070cfb61ac7d2da33c3b6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14895ea78b0424cfdba070cfb61ac7d2da33c3b6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=14895ea78b0424cfdba070cfb61ac7d2da33c3b6", "patch": "@@ -1974,16 +1974,13 @@ impl Clean<BareFunctionDecl> for hir::BareFnTy<'_> {\n     }\n }\n \n-impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Ident>) {\n+impl Clean<Vec<Item>> for (&hir::Item<'_>, Option<Symbol>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Vec<Item> {\n         use hir::ItemKind;\n \n         let (item, renamed) = self;\n         let def_id = cx.tcx.hir().local_def_id(item.hir_id).to_def_id();\n-        let mut name = match renamed {\n-            Some(ident) => ident.name,\n-            None => cx.tcx.hir().name(item.hir_id),\n-        };\n+        let mut name = renamed.unwrap_or_else(|| cx.tcx.hir().name(item.hir_id));\n         cx.with_param_env(def_id, || {\n             let kind = match item.kind {\n                 ItemKind::Static(ty, mutability, body_id) => StaticItem(Static {\n@@ -2276,7 +2273,7 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n     }\n }\n \n-impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Ident>) {\n+impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Symbol>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let (item, renamed) = self;\n         cx.with_param_env(cx.tcx.hir().local_def_id(item.hir_id).to_def_id(), || {\n@@ -2310,18 +2307,18 @@ impl Clean<Item> for (&hir::ForeignItem<'_>, Option<Ident>) {\n \n             Item::from_hir_id_and_parts(\n                 item.hir_id,\n-                Some(renamed.unwrap_or(item.ident).name),\n+                Some(renamed.unwrap_or(item.ident.name)),\n                 kind,\n                 cx,\n             )\n         })\n     }\n }\n \n-impl Clean<Item> for (&hir::MacroDef<'_>, Option<Ident>) {\n+impl Clean<Item> for (&hir::MacroDef<'_>, Option<Symbol>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let (item, renamed) = self;\n-        let name = renamed.unwrap_or(item.ident).name;\n+        let name = renamed.unwrap_or(item.ident.name);\n         let tts = item.ast.body.inner_tokens().trees().collect::<Vec<_>>();\n         // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n         let matchers = tts.chunks(4).map(|arm| arm[0].span()).collect::<Vec<_>>();"}, {"sha": "ee9a6981857998546af36a594fa4c259cb5f437f", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14895ea78b0424cfdba070cfb61ac7d2da33c3b6/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14895ea78b0424cfdba070cfb61ac7d2da33c3b6/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=14895ea78b0424cfdba070cfb61ac7d2da33c3b6", "patch": "@@ -3,7 +3,7 @@\n crate use self::StructType::*;\n \n use rustc_ast as ast;\n-use rustc_span::{self, symbol::Ident, Span, Symbol};\n+use rustc_span::{self, Span, Symbol};\n \n use rustc_hir as hir;\n \n@@ -16,9 +16,9 @@ crate struct Module<'hir> {\n     crate mods: Vec<Module<'hir>>,\n     crate id: hir::HirId,\n     // (item, renamed)\n-    crate items: Vec<(&'hir hir::Item<'hir>, Option<Ident>)>,\n-    crate foreigns: Vec<(&'hir hir::ForeignItem<'hir>, Option<Ident>)>,\n-    crate macros: Vec<(&'hir hir::MacroDef<'hir>, Option<Ident>)>,\n+    crate items: Vec<(&'hir hir::Item<'hir>, Option<Symbol>)>,\n+    crate foreigns: Vec<(&'hir hir::ForeignItem<'hir>, Option<Symbol>)>,\n+    crate macros: Vec<(&'hir hir::MacroDef<'hir>, Option<Symbol>)>,\n     crate is_crate: bool,\n }\n "}, {"sha": "f9cb1d586b10266b53601e6842c46d2de4d3ba1c", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14895ea78b0424cfdba070cfb61ac7d2da33c3b6/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14895ea78b0424cfdba070cfb61ac7d2da33c3b6/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=14895ea78b0424cfdba070cfb61ac7d2da33c3b6", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::Node;\n use rustc_middle::middle::privacy::AccessLevel;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::source_map::Spanned;\n-use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{self, Span};\n \n use std::mem;\n@@ -116,7 +116,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         &mut self,\n         id: hir::HirId,\n         res: Res,\n-        renamed: Option<Ident>,\n+        renamed: Option<Symbol>,\n         glob: bool,\n         om: &mut Module<'tcx>,\n         please_inline: bool,\n@@ -226,11 +226,11 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     fn visit_item(\n         &mut self,\n         item: &'tcx hir::Item<'_>,\n-        renamed: Option<Ident>,\n+        renamed: Option<Symbol>,\n         om: &mut Module<'tcx>,\n     ) {\n         debug!(\"visiting item {:?}\", item);\n-        let ident = renamed.unwrap_or(item.ident);\n+        let name = renamed.unwrap_or(item.ident.name);\n \n         if item.vis.node.is_pub() {\n             let def_id = self.cx.tcx.hir().local_def_id(item.hir_id);\n@@ -266,7 +266,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                         }\n                         _ => false,\n                     });\n-                    let ident = if is_glob { None } else { Some(ident) };\n+                    let ident = if is_glob { None } else { Some(name) };\n                     if self.maybe_inline_local(\n                         item.hir_id,\n                         path.res,\n@@ -280,7 +280,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 }\n \n                 om.imports.push(Import {\n-                    name: ident.name,\n+                    name,\n                     id: item.hir_id,\n                     vis: &item.vis,\n                     attrs: &item.attrs,\n@@ -296,7 +296,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     &item.vis,\n                     item.hir_id,\n                     m,\n-                    Some(ident.name),\n+                    Some(name),\n                 ));\n             }\n             hir::ItemKind::Fn(..)\n@@ -312,7 +312,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             hir::ItemKind::Const(..) => {\n                 // Underscore constants do not correspond to a nameable item and\n                 // so are never useful in documentation.\n-                if ident.name != kw::Underscore {\n+                if name != kw::Underscore {\n                     om.items.push((item, renamed));\n                 }\n             }\n@@ -329,7 +329,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     fn visit_foreign_item(\n         &mut self,\n         item: &'tcx hir::ForeignItem<'_>,\n-        renamed: Option<Ident>,\n+        renamed: Option<Symbol>,\n         om: &mut Module<'tcx>,\n     ) {\n         // If inlining we only want to include public functions."}]}