{"sha": "8a6e9cf07471672f75a24047b48131a547355106", "node_id": "C_kwDOAAsO6NoAKDhhNmU5Y2YwNzQ3MTY3MmY3NWEyNDA0N2I0ODEzMWE1NDczNTUxMDY", "commit": {"author": {"name": "the8472", "email": "the8472@users.noreply.github.com", "date": "2021-09-21T20:54:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-21T20:54:04Z"}, "message": "Rollup merge of #89114 - dequbed:c-char, r=yaahc\n\nFixes a technicality regarding the size of C's `char` type\n\nSpecifically, ISO/IEC 9899:2018 \u2014 better known as \"C18\" \u2014 (and at least\nC11, C99 and C89) do not specify the size of `byte` in bits.\nSection 3.6 defines \"byte\" as \"addressable unit of data storage\" while\nsection 6.2.5 (\"Types\") only defines \"char\" as \"large enough to store\nany member of the basic execution set\" giving it a lower bound of 7 bit\n(since there are 96 characters in the basic execution set).\nWith section 6.5.3.4 paragraph 4 \"When sizeof is applied to an operant\nthat has type char [\u2026] the result is 1\" you could read this as the size\nof `char` in bits being defined as exactly the same as the number of\nbits in a byte but it's also valid to read that as an exception.\n\nIn general implementations take `char` as the smallest unit of\naddressable memory, which for modern byte-addressed architectures is\noverwhelmingly 8 bits to the point of this convention being completely\ncemented into just about all of our software.\n\nSo is any of this actually relevant at all? I hope not. I sincerely hope\nthat this never, ever comes up.\nBut if for some reason a poor rustacean is having to interface with C\ncode running on a Cray X1 that in 2003 is still doing word-addressed\nmemory with 64-bit chars and they trust the docs here blindly it will\nblow up in her face. And I'll be truly sorry for her to have to deal\nwith \u2026 all of that.", "tree": {"sha": "e4d27ee3f06188f57298eecc052f0d81e4b5c807", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4d27ee3f06188f57298eecc052f0d81e4b5c807"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a6e9cf07471672f75a24047b48131a547355106", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhSkZsCRBK7hj4Ov3rIwAArVEIAHFkC/8hwap5us6KVASZab1u\nxnMexCQ2UurwSUae9fSLOJAgcvnNHSdUf3ouffl0+JEYwMODLUcpiJx8QRNPsxxR\nVboR7Lkfz30oON4o5HcsyffB/0LsX5E9DqaoesJB+mU6OAOHgf2JDsRUSStWU1k4\nh3a7Kp8Q5dDCQ0iUxgvR9ZQ8GVJYfn8EdOUggDSCuSLgm8iAHOzmyH7LxXJaL8N1\nXYc8pFpfUqtxwFtcqSEr2i+sXw+4SfG4IUL19EEmOzfnuIJh7OFw35Ri0ODveEdU\nk05djYQ0jXT4rhcU+1GFt7k21lm+qO8IpsNCBLhp3OXcE006oPjWdFLMgT0AeOo=\n=/SpO\n-----END PGP SIGNATURE-----\n", "payload": "tree e4d27ee3f06188f57298eecc052f0d81e4b5c807\nparent ecfdadcef9070951adf10e116ef768e7846b7e5c\nparent 23c608f3a1b0cf09344f0e356610e59d8ee581ac\nauthor the8472 <the8472@users.noreply.github.com> 1632257644 +0200\ncommitter GitHub <noreply@github.com> 1632257644 +0200\n\nRollup merge of #89114 - dequbed:c-char, r=yaahc\n\nFixes a technicality regarding the size of C's `char` type\n\nSpecifically, ISO/IEC 9899:2018 \u2014 better known as \"C18\" \u2014 (and at least\nC11, C99 and C89) do not specify the size of `byte` in bits.\nSection 3.6 defines \"byte\" as \"addressable unit of data storage\" while\nsection 6.2.5 (\"Types\") only defines \"char\" as \"large enough to store\nany member of the basic execution set\" giving it a lower bound of 7 bit\n(since there are 96 characters in the basic execution set).\nWith section 6.5.3.4 paragraph 4 \"When sizeof is applied to an operant\nthat has type char [\u2026] the result is 1\" you could read this as the size\nof `char` in bits being defined as exactly the same as the number of\nbits in a byte but it's also valid to read that as an exception.\n\nIn general implementations take `char` as the smallest unit of\naddressable memory, which for modern byte-addressed architectures is\noverwhelmingly 8 bits to the point of this convention being completely\ncemented into just about all of our software.\n\nSo is any of this actually relevant at all? I hope not. I sincerely hope\nthat this never, ever comes up.\nBut if for some reason a poor rustacean is having to interface with C\ncode running on a Cray X1 that in 2003 is still doing word-addressed\nmemory with 64-bit chars and they trust the docs here blindly it will\nblow up in her face. And I'll be truly sorry for her to have to deal\nwith \u2026 all of that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6e9cf07471672f75a24047b48131a547355106", "html_url": "https://github.com/rust-lang/rust/commit/8a6e9cf07471672f75a24047b48131a547355106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a6e9cf07471672f75a24047b48131a547355106/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecfdadcef9070951adf10e116ef768e7846b7e5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecfdadcef9070951adf10e116ef768e7846b7e5c", "html_url": "https://github.com/rust-lang/rust/commit/ecfdadcef9070951adf10e116ef768e7846b7e5c"}, {"sha": "23c608f3a1b0cf09344f0e356610e59d8ee581ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/23c608f3a1b0cf09344f0e356610e59d8ee581ac", "html_url": "https://github.com/rust-lang/rust/commit/23c608f3a1b0cf09344f0e356610e59d8ee581ac"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "375d070516eb49bcbf7c1d047b107f6e817275da", "filename": "library/std/src/os/raw/char.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a6e9cf07471672f75a24047b48131a547355106/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fchar.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a6e9cf07471672f75a24047b48131a547355106/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fchar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fraw%2Fchar.md?ref=8a6e9cf07471672f75a24047b48131a547355106", "patch": "@@ -1,6 +1,6 @@\n Equivalent to C's `char` type.\n \n-[C's `char` type] is completely unlike [Rust's `char` type]; while Rust's type represents a unicode scalar value, C's `char` type is just an ordinary integer. This type will always be either [`i8`] or [`u8`], as the type is defined as being one byte long.\n+[C's `char` type] is completely unlike [Rust's `char` type]; while Rust's type represents a unicode scalar value, C's `char` type is just an ordinary integer. On modern architectures this type will always be either [`i8`] or [`u8`], as they use byte-addresses memory with 8-bit bytes.\n \n C chars are most commonly used to make C strings. Unlike Rust, where the length of a string is included alongside the string, C strings mark the end of a string with the character `'\\0'`. See [`CStr`] for more information.\n "}]}