{"sha": "203d691a6bf6795f3d1f77378696a4506dd550f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwM2Q2OTFhNmJmNjc5NWYzZDFmNzczNzg2OTZhNDUwNmRkNTUwZjI=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-27T20:42:21Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2013-03-27T22:41:58Z"}, "message": "libsyntax: use a struct for inline asm in ast.", "tree": {"sha": "345c876e08705654e22e34b5f08d9c92cf88990c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/345c876e08705654e22e34b5f08d9c92cf88990c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/203d691a6bf6795f3d1f77378696a4506dd550f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/203d691a6bf6795f3d1f77378696a4506dd550f2", "html_url": "https://github.com/rust-lang/rust/commit/203d691a6bf6795f3d1f77378696a4506dd550f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/203d691a6bf6795f3d1f77378696a4506dd550f2/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "727a565f1e65c415b018f26d878a0d3ebdc9e3ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/727a565f1e65c415b018f26d878a0d3ebdc9e3ea", "html_url": "https://github.com/rust-lang/rust/commit/727a565f1e65c415b018f26d878a0d3ebdc9e3ea"}], "stats": {"total": 117, "additions": 68, "deletions": 49}, "files": [{"sha": "9a419c85894ad934fd177990720f53455b64f8fb", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=203d691a6bf6795f3d1f77378696a4506dd550f2", "patch": "@@ -1346,11 +1346,11 @@ pub impl Liveness {\n             self.propagate_through_expr(e, succ)\n           }\n \n-          expr_inline_asm(_, ref ins, ref outs, _, _, _) =>{\n-            let succ = do ins.foldr(succ) |&(_, expr), succ| {\n+          expr_inline_asm(ref ia) =>{\n+            let succ = do ia.inputs.foldr(succ) |&(_, expr), succ| {\n                 self.propagate_through_expr(expr, succ)\n             };\n-            do outs.foldr(succ) |&(_, expr), succ| {\n+            do ia.outputs.foldr(succ) |&(_, expr), succ| {\n                 self.propagate_through_expr(expr, succ)\n             }\n           }\n@@ -1620,14 +1620,19 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n         visit::visit_expr(expr, self, vt);\n       }\n \n-      expr_inline_asm(_, ref ins, ref outs, _, _, _) => {\n-        for ins.each |&(_, in)| {\n+      expr_inline_asm(ref ia) => {\n+        for ia.inputs.each |&(_, in)| {\n           (vt.visit_expr)(in, self, vt);\n         }\n \n         // Output operands must be lvalues\n-        for outs.each |&(_, out)| {\n-          self.check_lvalue(out, vt);\n+        for ia.outputs.each |&(_, out)| {\n+          match out.node {\n+            expr_addr_of(_, inner) => {\n+              self.check_lvalue(inner, vt);\n+            }\n+            _ => {}\n+          }\n           (vt.visit_expr)(out, self, vt);\n         }\n "}, {"sha": "a658908f9781a8b9bb8e32f19f3a3ec5456276f4", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=203d691a6bf6795f3d1f77378696a4506dd550f2", "patch": "@@ -21,19 +21,17 @@ use middle::trans::common::*;\n use middle::ty;\n \n use syntax::ast;\n-use syntax::ast::*;\n \n // Take an inline assembly expression and splat it out via LLVM\n-pub fn trans_inline_asm(bcx: block, asm: @~str, ins: &[(@~str, @expr)], outs: &[(@~str, @expr)],\n-                        clobs: @~str, volatile: bool, alignstack: bool) -> block {\n+pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n \n     let mut bcx = bcx;\n     let mut constraints = ~[];\n     let mut cleanups = ~[];\n     let mut aoutputs = ~[];\n \n     // Prepare the output operands\n-    let outputs = do outs.map |&(c, out)| {\n+    let outputs = do ia.outputs.map |&(c, out)| {\n         constraints.push(copy *c);\n \n         let aoutty = ty::arg {\n@@ -66,7 +64,7 @@ pub fn trans_inline_asm(bcx: block, asm: @~str, ins: &[(@~str, @expr)], outs: &[\n     cleanups.clear();\n \n     // Now the input operands\n-    let inputs = do ins.map |&(c, in)| {\n+    let inputs = do ia.inputs.map |&(c, in)| {\n         constraints.push(copy *c);\n \n         let inty = ty::arg {\n@@ -87,10 +85,10 @@ pub fn trans_inline_asm(bcx: block, asm: @~str, ins: &[(@~str, @expr)], outs: &[\n     let mut constraints = str::connect(constraints, \",\");\n \n     // Add the clobbers to our constraints list\n-    if *clobs != ~\"\" && constraints != ~\"\" {\n-        constraints += ~\",\" + *clobs;\n+    if *ia.clobbers != ~\"\" && constraints != ~\"\" {\n+        constraints += ~\",\" + *ia.clobbers;\n     } else {\n-        constraints += *clobs;\n+        constraints += *ia.clobbers;\n     }\n \n     debug!(\"Asm Constraints: %?\", constraints);\n@@ -106,10 +104,10 @@ pub fn trans_inline_asm(bcx: block, asm: @~str, ins: &[(@~str, @expr)], outs: &[\n         T_struct(outputs.map(|o| val_ty(*o)))\n     };\n \n-    let r = do str::as_c_str(*asm) |a| {\n+    let r = do str::as_c_str(*ia.asm) |a| {\n         do str::as_c_str(constraints) |c| {\n             // XXX: Allow selection of at&t or intel\n-            InlineAsmCall(bcx, a, c, inputs, output, volatile, alignstack, lib::llvm::AD_ATT)\n+            InlineAsmCall(bcx, a, c, inputs, output, ia.volatile, ia.alignstack, lib::llvm::AD_ATT)\n         }\n     };\n "}, {"sha": "9cd9916932302d6916ef762060af46891cbbcc12", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=203d691a6bf6795f3d1f77378696a4506dd550f2", "patch": "@@ -558,9 +558,8 @@ fn trans_rvalue_stmt_unadjusted(bcx: block, expr: @ast::expr) -> block {\n         ast::expr_paren(a) => {\n             return trans_rvalue_stmt_unadjusted(bcx, a);\n         }\n-        ast::expr_inline_asm(asm, ref ins, ref outs,\n-                             clobs, volatile, alignstack) => {\n-            return asm::trans_inline_asm(bcx, asm, *ins, *outs, clobs, volatile, alignstack);\n+        ast::expr_inline_asm(ref a) => {\n+            return asm::trans_inline_asm(bcx, a);\n         }\n         _ => {\n             bcx.tcx().sess.span_bug("}, {"sha": "cee92af6620b6253bbd9d30ccdc6a6711079c95f", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=203d691a6bf6795f3d1f77378696a4506dd550f2", "patch": "@@ -360,11 +360,11 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n         mark_for_method_call(cx, e.id, e.callee_id);\n       }\n \n-      expr_inline_asm(_, ref ins, ref outs, _, _, _) => {\n-        for ins.each |&(_, in)| {\n+      expr_inline_asm(ref ia) => {\n+        for ia.inputs.each |&(_, in)| {\n           node_type_needs(cx, use_repr, in.id);\n         }\n-        for outs.each |&(_, out)| {\n+        for ia.outputs.each |&(_, out)| {\n           node_type_needs(cx, use_repr, out.id);\n         }\n       }"}, {"sha": "6d4af492c972e7c5d1b30238b16dc5167f419eef", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=203d691a6bf6795f3d1f77378696a4506dd550f2", "patch": "@@ -2332,13 +2332,13 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let region_lb = ty::re_scope(expr.id);\n         instantiate_path(fcx, pth, tpt, expr.span, expr.id, region_lb);\n       }\n-      ast::expr_inline_asm(_, ref ins, ref outs, _, _, _) => {\n+      ast::expr_inline_asm(ref ia) => {\n           fcx.require_unsafe(expr.span, ~\"use of inline assembly\");\n \n-          for ins.each |&(_, in)| {\n+          for ia.inputs.each |&(_, in)| {\n               check_expr(fcx, in);\n           }\n-          for outs.each |&(_, out)| {\n+          for ia.outputs.each |&(_, out)| {\n               check_expr(fcx, out);\n           }\n           fcx.write_nil(id);"}, {"sha": "05c5f447993d75cbdd0068df38549879caaa619e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=203d691a6bf6795f3d1f77378696a4506dd550f2", "patch": "@@ -600,10 +600,7 @@ pub enum expr_ {\n     expr_ret(Option<@expr>),\n     expr_log(log_level, @expr, @expr),\n \n-    expr_inline_asm(@~str,              // asm\n-                    ~[(@~str, @expr)],  // inputs\n-                    ~[(@~str, @expr)],  // outputs\n-                    @~str, bool, bool), // clobbers, volatile, align stack\n+    expr_inline_asm(inline_asm),\n \n     expr_mac(mac),\n \n@@ -937,6 +934,18 @@ impl to_bytes::IterBytes for Ty {\n     }\n }\n \n+#[auto_encode]\n+#[auto_decode]\n+#[deriving(Eq)]\n+pub struct inline_asm {\n+    asm: @~str,\n+    clobbers: @~str,\n+    inputs: ~[(@~str, @expr)],\n+    outputs: ~[(@~str, @expr)],\n+    volatile: bool,\n+    alignstack: bool\n+}\n+\n #[auto_encode]\n #[auto_decode]\n #[deriving(Eq)]"}, {"sha": "c3faf4f1e09455094ce661d5bc2ccb990482865e", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=203d691a6bf6795f3d1f77378696a4506dd550f2", "patch": "@@ -59,7 +59,7 @@ pub fn expand_asm(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n         match state {\n             Asm => {\n                 asm = expr_to_str(cx, p.parse_expr(),\n-                                ~\"inline assembly must be a string literal.\");\n+                                  ~\"inline assembly must be a string literal.\");\n             }\n             Outputs => {\n                 while *p.token != token::EOF &&\n@@ -163,8 +163,14 @@ pub fn expand_asm(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n     MRExpr(@ast::expr {\n         id: cx.next_id(),\n         callee_id: cx.next_id(),\n-        node: ast::expr_inline_asm(@asm, inputs, outputs,\n-                                   @cons, volatile, alignstack),\n+        node: ast::expr_inline_asm(ast::inline_asm {\n+            asm: @asm,\n+            clobbers: @cons,\n+            inputs: inputs,\n+            outputs: outputs,\n+            volatile: volatile,\n+            alignstack: alignstack\n+        }),\n         span: sp\n     })\n }"}, {"sha": "6ba629a24e1e4385da031374eb031604385238a3", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=203d691a6bf6795f3d1f77378696a4506dd550f2", "patch": "@@ -559,13 +559,15 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n                 fld.fold_expr(e)\n             )\n         }\n-        expr_inline_asm(asm, ins, outs, c, v, a) => {\n-            expr_inline_asm(\n-                asm,\n-                ins.map(|&(c, in)| (c, fld.fold_expr(in))),\n-                outs.map(|&(c, out)| (c, fld.fold_expr(out))),\n-                c, v, a\n-            )\n+        expr_inline_asm(a) => {\n+            expr_inline_asm(inline_asm {\n+                asm: a.asm,\n+                clobbers: a.clobbers,\n+                inputs: a.inputs.map(|&(c, in)| (c, fld.fold_expr(in))),\n+                outputs: a.outputs.map(|&(c, out)| (c, fld.fold_expr(out))),\n+                volatile: a.volatile,\n+                alignstack: a.alignstack\n+            })\n         }\n         expr_mac(ref mac) => expr_mac(fold_mac((*mac))),\n         expr_struct(path, ref fields, maybe_expr) => {"}, {"sha": "3b56017b8e085fe68a4b9f09d5de3d556b6e2573", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=203d691a6bf6795f3d1f77378696a4506dd550f2", "patch": "@@ -1406,32 +1406,32 @@ pub fn print_expr(s: @ps, &&expr: @ast::expr) {\n           }\n         }\n       }\n-      ast::expr_inline_asm(a, in, out, c, v, _) => {\n-        if v {\n+      ast::expr_inline_asm(a) => {\n+        if a.volatile {\n             word(s.s, ~\"__volatile__ asm!\");\n         } else {\n             word(s.s, ~\"asm!\");\n         }\n         popen(s);\n-        print_string(s, *a);\n+        print_string(s, *a.asm);\n         word_space(s, ~\":\");\n-        for out.each |&(co, o)| {\n+        for a.outputs.each |&(co, o)| {\n             print_string(s, *co);\n             popen(s);\n             print_expr(s, o);\n             pclose(s);\n             word_space(s, ~\",\");\n         }\n         word_space(s, ~\":\");\n-        for in.each |&(co, o)| {\n+        for a.inputs.each |&(co, o)| {\n             print_string(s, *co);\n             popen(s);\n             print_expr(s, o);\n             pclose(s);\n             word_space(s, ~\",\");\n         }\n         word_space(s, ~\":\");\n-        print_string(s, *c);\n+        print_string(s, *a.clobbers);\n         pclose(s);\n       }\n       ast::expr_mac(ref m) => print_mac(s, (*m)),"}, {"sha": "daa16e867b9da88dc434e9ed3c733061168213ea", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203d691a6bf6795f3d1f77378696a4506dd550f2/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=203d691a6bf6795f3d1f77378696a4506dd550f2", "patch": "@@ -565,11 +565,11 @@ pub fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         }\n         expr_mac(ref mac) => visit_mac((*mac), e, v),\n         expr_paren(x) => (v.visit_expr)(x, e, v),\n-        expr_inline_asm(_, ins, outs, _, _, _) => {\n-            for ins.each |&(_, in)| {\n+        expr_inline_asm(ref a) => {\n+            for a.inputs.each |&(_, in)| {\n                 (v.visit_expr)(in, e, v);\n             }\n-            for outs.each |&(_, out)| {\n+            for a.outputs.each |&(_, out)| {\n                 (v.visit_expr)(out, e, v);\n             }\n         }"}]}