{"sha": "b1f59ff6c1dcb88f75e999324d6bb95dfdb78da3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZjU5ZmY2YzFkY2I4OGY3NWU5OTkzMjRkNmJiOTVkZmRiNzhkYTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-31T13:47:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-31T13:47:42Z"}, "message": "Reduce path_from_text usage", "tree": {"sha": "1e1420034351cee24f789d9398ec029b7a506f33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e1420034351cee24f789d9398ec029b7a506f33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1f59ff6c1dcb88f75e999324d6bb95dfdb78da3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f59ff6c1dcb88f75e999324d6bb95dfdb78da3", "html_url": "https://github.com/rust-lang/rust/commit/b1f59ff6c1dcb88f75e999324d6bb95dfdb78da3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1f59ff6c1dcb88f75e999324d6bb95dfdb78da3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60706fca8e6187e0abf322c4c144ccb19fec1ae7", "url": "https://api.github.com/repos/rust-lang/rust/commits/60706fca8e6187e0abf322c4c144ccb19fec1ae7", "html_url": "https://github.com/rust-lang/rust/commit/60706fca8e6187e0abf322c4c144ccb19fec1ae7"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "e14ac7f65ed5d128cca6f8220a938043409ebfa3", "filename": "crates/assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b1f59ff6c1dcb88f75e999324d6bb95dfdb78da3/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f59ff6c1dcb88f75e999324d6bb95dfdb78da3/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=b1f59ff6c1dcb88f75e999324d6bb95dfdb78da3", "patch": "@@ -4,7 +4,11 @@ use ide_db::{\n     defs::{classify_name_ref, Definition, NameRefClass},\n     search::SearchScope,\n };\n-use syntax::{algo, ast, AstNode, Direction, SyntaxNode, SyntaxToken, T};\n+use syntax::{\n+    algo,\n+    ast::{self, make},\n+    AstNode, Direction, SyntaxNode, SyntaxToken, T,\n+};\n \n use crate::{\n     assist_context::{AssistBuilder, AssistContext, Assists},\n@@ -249,16 +253,19 @@ fn replace_ast(\n \n     let new_use_trees: Vec<ast::UseTree> = names_to_import\n         .iter()\n-        .map(|n| ast::make::use_tree(ast::make::path_from_text(&n.to_string()), None, None, false))\n+        .map(|n| {\n+            let path = make::path_unqualified(make::path_segment(make::name_ref(&n.to_string())));\n+            make::use_tree(path, None, None, false)\n+        })\n         .collect();\n \n     let use_trees = [&existing_use_trees[..], &new_use_trees[..]].concat();\n \n     match use_trees.as_slice() {\n         [name] => {\n             if let Some(end_path) = name.path() {\n-                let replacement = ast::make::use_tree(\n-                    ast::make::path_from_text(&format!(\"{}::{}\", path, end_path)),\n+                let replacement = make::use_tree(\n+                    make::path_from_text(&format!(\"{}::{}\", path, end_path)),\n                     None,\n                     None,\n                     false,\n@@ -273,15 +280,12 @@ fn replace_ast(\n         }\n         names => {\n             let replacement = match parent {\n-                Either::Left(_) => ast::make::use_tree(\n-                    path,\n-                    Some(ast::make::use_tree_list(names.to_owned())),\n-                    None,\n-                    false,\n-                )\n-                .syntax()\n-                .clone(),\n-                Either::Right(_) => ast::make::use_tree_list(names.to_owned()).syntax().clone(),\n+                Either::Left(_) => {\n+                    make::use_tree(path, Some(make::use_tree_list(names.to_owned())), None, false)\n+                        .syntax()\n+                        .clone()\n+                }\n+                Either::Right(_) => make::use_tree_list(names.to_owned()).syntax().clone(),\n             };\n \n             algo::diff("}, {"sha": "c2c938ad11d11f16928a9b4c11639afce599560e", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1f59ff6c1dcb88f75e999324d6bb95dfdb78da3/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f59ff6c1dcb88f75e999324d6bb95dfdb78da3/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=b1f59ff6c1dcb88f75e999324d6bb95dfdb78da3", "patch": "@@ -33,6 +33,7 @@ pub fn path_unqualified(segment: ast::PathSegment) -> ast::Path {\n pub fn path_qualified(qual: ast::Path, segment: ast::PathSegment) -> ast::Path {\n     path_from_text(&format!(\"{}::{}\", qual, segment))\n }\n+// FIXME: make this private\n pub fn path_from_text(text: &str) -> ast::Path {\n     ast_from_text(text)\n }"}]}