{"sha": "725d6d8d8b934b4f69aa443346d257df6cede61e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNWQ2ZDhkOGI5MzRiNGY2OWFhNDQzMzQ2ZDI1N2RmNmNlZGU2MWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-11T21:11:26Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-11T21:11:26Z"}, "message": "Rollup merge of #32137 - nathankleyn:improve-docs-for-binaryheap, r=steveklabnik\n\nAdd missing documentation examples for BinaryHeap.\n\nAs part of the ongoing effort to document all methods with examples,\nthis commit adds the missing examples for the `BinaryHeap` collection\ntype.\n\nThis is part of issue #29348.\n\nr? @steveklabnik", "tree": {"sha": "8e92babe7e77ecea2954d03bde893fcf7141d5cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e92babe7e77ecea2954d03bde893fcf7141d5cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/725d6d8d8b934b4f69aa443346d257df6cede61e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/725d6d8d8b934b4f69aa443346d257df6cede61e", "html_url": "https://github.com/rust-lang/rust/commit/725d6d8d8b934b4f69aa443346d257df6cede61e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/725d6d8d8b934b4f69aa443346d257df6cede61e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeb85a953322df7773095186e9762f3fe73375e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeb85a953322df7773095186e9762f3fe73375e2", "html_url": "https://github.com/rust-lang/rust/commit/aeb85a953322df7773095186e9762f3fe73375e2"}, {"sha": "da4fda44e742671c9451b0b0fd811a5626828041", "url": "https://api.github.com/repos/rust-lang/rust/commits/da4fda44e742671c9451b0b0fd811a5626828041", "html_url": "https://github.com/rust-lang/rust/commit/da4fda44e742671c9451b0b0fd811a5626828041"}], "stats": {"total": 144, "additions": 144, "deletions": 0}, "files": [{"sha": "ba317334cfa0b55235b9205d2563b340d6e92461", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/725d6d8d8b934b4f69aa443346d257df6cede61e/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/725d6d8d8b934b4f69aa443346d257df6cede61e/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=725d6d8d8b934b4f69aa443346d257df6cede61e", "patch": "@@ -167,6 +167,49 @@ use vec::{self, Vec};\n /// item's ordering relative to any other item, as determined by the `Ord`\n /// trait, changes while it is in the heap. This is normally only possible\n /// through `Cell`, `RefCell`, global state, I/O, or unsafe code.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::BinaryHeap;\n+///\n+/// // type inference lets us omit an explicit type signature (which\n+/// // would be `BinaryHeap<i32>` in this example).\n+/// let mut heap = BinaryHeap::new();\n+///\n+/// // We can use peek to look at the next item in the heap. In this case,\n+/// // there's no items in there yet so we get None.\n+/// assert_eq!(heap.peek(), None);\n+///\n+/// // Let's add some scores...\n+/// heap.push(1);\n+/// heap.push(5);\n+/// heap.push(2);\n+///\n+/// // Now peek shows the most important item in the heap.\n+/// assert_eq!(heap.peek(), Some(&5));\n+///\n+/// // We can check the length of a heap.\n+/// assert_eq!(heap.len(), 3);\n+///\n+/// // We can iterate over the items in the heap, although they are returned in\n+/// // a random order.\n+/// for x in heap.iter() {\n+///     println!(\"{}\", x);\n+/// }\n+///\n+/// // If we instead pop these scores, they should come back in order.\n+/// assert_eq!(heap.pop(), Some(5));\n+/// assert_eq!(heap.pop(), Some(2));\n+/// assert_eq!(heap.pop(), Some(1));\n+/// assert_eq!(heap.pop(), None);\n+///\n+/// // We can clear the heap of any remaining items.\n+/// heap.clear();\n+///\n+/// // The heap should now be empty.\n+/// assert!(heap.is_empty())\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BinaryHeap<T> {\n     data: Vec<T>,\n@@ -203,6 +246,8 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n@@ -220,6 +265,8 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::with_capacity(10);\n@@ -235,6 +282,8 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from(vec![1, 2, 3, 4]);\n@@ -253,6 +302,8 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n@@ -273,6 +324,8 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::with_capacity(100);\n@@ -297,6 +350,8 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n@@ -318,6 +373,8 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n@@ -331,6 +388,19 @@ impl<T: Ord> BinaryHeap<T> {\n     }\n \n     /// Discards as much additional capacity as possible.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// use std::collections::BinaryHeap;\n+    /// let mut heap: BinaryHeap<i32> = BinaryHeap::with_capacity(100);\n+    ///\n+    /// assert!(heap.capacity() >= 100);\n+    /// heap.shrink_to_fit();\n+    /// assert!(heap.capacity() == 0);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn shrink_to_fit(&mut self) {\n         self.data.shrink_to_fit();\n@@ -341,6 +411,8 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::from(vec![1, 3]);\n@@ -364,6 +436,8 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n@@ -386,6 +460,8 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// #![feature(binary_heap_extras)]\n     ///\n@@ -424,6 +500,8 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// #![feature(binary_heap_extras)]\n     ///\n@@ -454,6 +532,8 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from(vec![1, 2, 3, 4, 5, 6, 7]);\n@@ -474,6 +554,8 @@ impl<T: Ord> BinaryHeap<T> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n     ///\n@@ -571,12 +653,40 @@ impl<T: Ord> BinaryHeap<T> {\n     }\n \n     /// Returns the length of the binary heap.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// use std::collections::BinaryHeap;\n+    /// let heap = BinaryHeap::from(vec![1, 3]);\n+    ///\n+    /// assert_eq!(heap.len(), 2);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.data.len()\n     }\n \n     /// Checks if the binary heap is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// use std::collections::BinaryHeap;\n+    /// let mut heap = BinaryHeap::new();\n+    ///\n+    /// assert!(heap.is_empty());\n+    ///\n+    /// heap.push(3);\n+    /// heap.push(5);\n+    /// heap.push(1);\n+    ///\n+    /// assert!(!heap.is_empty());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_empty(&self) -> bool {\n         self.len() == 0\n@@ -585,13 +695,45 @@ impl<T: Ord> BinaryHeap<T> {\n     /// Clears the binary heap, returning an iterator over the removed elements.\n     ///\n     /// The elements are removed in arbitrary order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// use std::collections::BinaryHeap;\n+    /// let mut heap = BinaryHeap::from(vec![1, 3]);\n+    ///\n+    /// assert!(!heap.is_empty());\n+    ///\n+    /// for x in heap.drain() {\n+    ///     println!(\"{}\", x);\n+    /// }\n+    ///\n+    /// assert!(heap.is_empty());\n+    /// ```\n     #[inline]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<T> {\n         Drain { iter: self.data.drain(..) }\n     }\n \n     /// Drops all items from the binary heap.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// use std::collections::BinaryHeap;\n+    /// let mut heap = BinaryHeap::from(vec![1, 3]);\n+    ///\n+    /// assert!(!heap.is_empty());\n+    ///\n+    /// heap.clear();\n+    ///\n+    /// assert!(heap.is_empty());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn clear(&mut self) {\n         self.drain();\n@@ -809,6 +951,8 @@ impl<T: Ord> IntoIterator for BinaryHeap<T> {\n     ///\n     /// # Examples\n     ///\n+    /// Basic usage:\n+    ///\n     /// ```\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from(vec![1, 2, 3, 4]);"}]}