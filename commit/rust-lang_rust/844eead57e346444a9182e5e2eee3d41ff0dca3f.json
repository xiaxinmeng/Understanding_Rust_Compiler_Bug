{"sha": "844eead57e346444a9182e5e2eee3d41ff0dca3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NGVlYWQ1N2UzNDY0NDRhOTE4MmU1ZTJlZWUzZDQxZmYwZGNhM2Y=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-16T14:47:10Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-16T14:47:10Z"}, "message": "Rename Machine::eval_maybe_thread_local_static_const to adjust_global_const and add an additional comment.", "tree": {"sha": "1bdfb87cc2bc9a487378cf402b6096b230deb76c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bdfb87cc2bc9a487378cf402b6096b230deb76c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/844eead57e346444a9182e5e2eee3d41ff0dca3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/844eead57e346444a9182e5e2eee3d41ff0dca3f", "html_url": "https://github.com/rust-lang/rust/commit/844eead57e346444a9182e5e2eee3d41ff0dca3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/844eead57e346444a9182e5e2eee3d41ff0dca3f/comments", "author": null, "committer": null, "parents": [{"sha": "738ebcfb6ab1aa6f960f62ff78d7029e554ee51f", "url": "https://api.github.com/repos/rust-lang/rust/commits/738ebcfb6ab1aa6f960f62ff78d7029e554ee51f", "html_url": "https://github.com/rust-lang/rust/commit/738ebcfb6ab1aa6f960f62ff78d7029e554ee51f"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "dfdd95c95a36482fe80b997427f1fc592f39b99d", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/844eead57e346444a9182e5e2eee3d41ff0dca3f/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844eead57e346444a9182e5e2eee3d41ff0dca3f/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=844eead57e346444a9182e5e2eee3d41ff0dca3f", "patch": "@@ -251,7 +251,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// `canonical_alloc_id` would result in pointer pointing to `t2`'s thread\n     /// local and not `t1` as it should.\n     #[inline]\n-    fn eval_maybe_thread_local_static_const(\n+    fn adjust_global_const(\n         _ecx: &InterpCx<'mir, 'tcx, Self>,\n         val: mir::interpret::ConstValue<'tcx>,\n     ) -> InterpResult<'tcx, mir::interpret::ConstValue<'tcx>> {"}, {"sha": "450d5500cfd5694d559ee4d2d1cdd825d0c8f9fe", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/844eead57e346444a9182e5e2eee3d41ff0dca3f/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844eead57e346444a9182e5e2eee3d41ff0dca3f/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=844eead57e346444a9182e5e2eee3d41ff0dca3f", "patch": "@@ -537,7 +537,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n             ty::ConstKind::Value(val_val) => val_val,\n         };\n-        let val_val = M::eval_maybe_thread_local_static_const(self, val_val)?;\n+        // This call allows the machine to create fresh allocation ids for\n+        // thread-local statics (see the `adjust_global_const` function\n+        // documentation). Please note that the `const_eval` call in the early\n+        // return above calls `eval_const_to_op` again, so `adjust_global_const`\n+        // is guaranteed to be called for all constants.\n+        let val_val = M::adjust_global_const(self, val_val)?;\n         // Other cases need layout.\n         let layout = from_known_layout(self.tcx, layout, || self.layout_of(val.ty))?;\n         let op = match val_val {"}]}