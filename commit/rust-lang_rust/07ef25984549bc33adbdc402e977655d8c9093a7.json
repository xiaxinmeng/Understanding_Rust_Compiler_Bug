{"sha": "07ef25984549bc33adbdc402e977655d8c9093a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZWYyNTk4NDU0OWJjMzNhZGJkYzQwMmU5Nzc2NTVkOGM5MDkzYTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-14T15:35:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-14T15:35:33Z"}, "message": "Auto merge of #84158 - cratelyn:patch-extern-c-unwind-behavior, r=nikomatsakis\n\nmove new c abi abort behavior behind feature gate\n\n*Background*\n\nIn #76570, new ABI strings including `C-unwind` were introduced. Their\nbehavior is specified in RFC 2945 <sup>[1]</sup>.\n\nHowever, it was reported in the #ffi-unwind stream of the Rust community Zulip\nthat this had altered the way that `extern \"C\"` functions behaved even when the\n`c_unwind` feature gate was not active. <sup>[2]</sup>\n\n*Overview*\n\nThis makes a small patch to `rustc_mir_build::build::should_abort_on_panic`, so\nthat the same behavior from before is in place when the `c_unwind` gate is not\nactive.\n\n`rustc_middle::ty::layout::fn_can_unwind` is not touched, as the visible\nbehavior should not differ before/after #76570. <sup>[3]</sup>\n\n---\n\n1: https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md\n2: https://rust-lang.zulipchat.com/#narrow/stream/210922-project-ffi-unwind/topic/Is.20unwinding.20through.20extern.20C.20UB.3F/near/230112325\n3: https://github.com/rust-lang/rust/pull/76570/files#diff-b0320c2b8868f325d83c027fc5d71732636e9763551e35895488f30fe057c6e9L2599-R2617\n\n[1]: https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md\n[2]: https://rust-lang.zulipchat.com/#narrow/stream/210922-project-ffi-unwind/topic/Is.20unwinding.20through.20extern.20C.20UB.3F/near/230112325\n[3]: https://github.com/rust-lang/rust/pull/76570/files#diff-b0320c2b8868f325d83c027fc5d71732636e9763551e35895488f30fe057c6e9L2599-R2617", "tree": {"sha": "e5061c842a1e748904051d08789e89302ed1a2e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5061c842a1e748904051d08789e89302ed1a2e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07ef25984549bc33adbdc402e977655d8c9093a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07ef25984549bc33adbdc402e977655d8c9093a7", "html_url": "https://github.com/rust-lang/rust/commit/07ef25984549bc33adbdc402e977655d8c9093a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07ef25984549bc33adbdc402e977655d8c9093a7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b203b0d240b67916cfa77f640aedaf1c87d50f6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b203b0d240b67916cfa77f640aedaf1c87d50f6d", "html_url": "https://github.com/rust-lang/rust/commit/b203b0d240b67916cfa77f640aedaf1c87d50f6d"}, {"sha": "3e16d233d85e0774c58c736e3ce5a939d3ef2817", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e16d233d85e0774c58c736e3ce5a939d3ef2817", "html_url": "https://github.com/rust-lang/rust/commit/3e16d233d85e0774c58c736e3ce5a939d3ef2817"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "f944e5f8f0420e038b4bb857a31451f3777ee761", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07ef25984549bc33adbdc402e977655d8c9093a7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ef25984549bc33adbdc402e977655d8c9093a7/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=07ef25984549bc33adbdc402e977655d8c9093a7", "patch": "@@ -584,7 +584,7 @@ fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: LocalDefId, abi: Abi) -> bo\n         Some(UnwindAttr::Aborts) => true,\n         // If no attribute was found and the panic strategy is `unwind`, then we should examine\n         // the function's ABI string to determine whether it should abort upon panic.\n-        None => {\n+        None if tcx.features().c_unwind => {\n             use Abi::*;\n             match abi {\n                 // In the case of ABI's that have an `-unwind` equivalent, check whether the ABI\n@@ -615,6 +615,10 @@ fn should_abort_on_panic(tcx: TyCtxt<'_>, fn_def_id: LocalDefId, abi: Abi) -> bo\n                 | Unadjusted => true,\n             }\n         }\n+        // If the `c_unwind` feature gate is not active, follow the behavior that was in place\n+        // prior to #76570. This is a special case: some functions have a C ABI but are meant to\n+        // unwind anyway. Don't stop them.\n+        None => false, // FIXME(#58794); should be `!(abi == Abi::Rust || abi == Abi::RustCall)`\n     }\n }\n "}]}