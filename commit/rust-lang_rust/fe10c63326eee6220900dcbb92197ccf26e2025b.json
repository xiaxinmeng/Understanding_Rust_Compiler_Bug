{"sha": "fe10c63326eee6220900dcbb92197ccf26e2025b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMTBjNjMzMjZlZWU2MjIwOTAwZGNiYjkyMTk3Y2NmMjZlMjAyNWI=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2013-12-31T14:17:59Z"}, "committer": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2014-01-01T10:10:43Z"}, "message": "syntax::diagnostic: Remove unnecessary traits\n\nThis removes trait `handler` and `span_handler`,\nand renames `HandlerT` to `Handler`, `CodemapT` to `SpanHandler`.", "tree": {"sha": "d19b12845e153c61d0d68267b50e93afc2f4f3a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d19b12845e153c61d0d68267b50e93afc2f4f3a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe10c63326eee6220900dcbb92197ccf26e2025b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe10c63326eee6220900dcbb92197ccf26e2025b", "html_url": "https://github.com/rust-lang/rust/commit/fe10c63326eee6220900dcbb92197ccf26e2025b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe10c63326eee6220900dcbb92197ccf26e2025b/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a52cdfdfce58c3fda80d4503a2b198546f96b6c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a52cdfdfce58c3fda80d4503a2b198546f96b6c0", "html_url": "https://github.com/rust-lang/rust/commit/a52cdfdfce58c3fda80d4503a2b198546f96b6c0"}], "stats": {"total": 177, "additions": 74, "deletions": 103}, "files": [{"sha": "c4a3e21cbad8bb2d0495241f4faded2112cbf4aa", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -883,7 +883,7 @@ pub fn build_session(sopts: @session::options, demitter: @diagnostic::Emitter)\n pub fn build_session_(sopts: @session::options,\n                       cm: @codemap::CodeMap,\n                       demitter: @diagnostic::Emitter,\n-                      span_diagnostic_handler: @mut diagnostic::span_handler)\n+                      span_diagnostic_handler: @mut diagnostic::SpanHandler)\n                       -> Session {\n     let target_cfg = build_target_config(sopts, demitter);\n     let p_s = parse::new_parse_sess_special_handler(span_diagnostic_handler,"}, {"sha": "3f9274bc901b558df6ce6fde81f39835e2b9ee9c", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -209,7 +209,7 @@ pub struct Session_ {\n     // For a library crate, this is always none\n     entry_fn: RefCell<Option<(NodeId, codemap::Span)>>,\n     entry_type: Cell<Option<EntryFnType>>,\n-    span_diagnostic: @mut diagnostic::span_handler,\n+    span_diagnostic: @mut diagnostic::SpanHandler,\n     filesearch: @filesearch::FileSearch,\n     building_library: Cell<bool>,\n     working_dir: Path,\n@@ -292,7 +292,7 @@ impl Session_ {\n \n         v\n     }\n-    pub fn diagnostic(&self) -> @mut diagnostic::span_handler {\n+    pub fn diagnostic(&self) -> @mut diagnostic::SpanHandler {\n         self.span_diagnostic\n     }\n     pub fn debugging_opt(&self, opt: uint) -> bool {"}, {"sha": "673caa04487c6f69aee1edf61c7dc2f453f8245d", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -22,7 +22,7 @@ use syntax::abi;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{Span, dummy_sp};\n-use syntax::diagnostic::span_handler;\n+use syntax::diagnostic::SpanHandler;\n use syntax::parse::token;\n use syntax::parse::token::ident_interner;\n use syntax::crateid::CrateId;\n@@ -86,7 +86,7 @@ fn dump_crates(crate_cache: &[cache_entry]) {\n }\n \n fn warn_if_multiple_versions(e: &mut Env,\n-                             diag: @mut span_handler,\n+                             diag: @mut SpanHandler,\n                              crate_cache: &[cache_entry]) {\n     if crate_cache.len() != 0u {\n         let name = crate_cache[crate_cache.len() - 1].crateid.name.clone();"}, {"sha": "6aa5f11c3207e91cff385e95a545e61788119307", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -39,7 +39,7 @@ use syntax::ast_map;\n use syntax::ast_util::*;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n-use syntax::diagnostic::span_handler;\n+use syntax::diagnostic::SpanHandler;\n use syntax::parse::token::special_idents;\n use syntax::ast_util;\n use syntax::visit::Visitor;\n@@ -57,7 +57,7 @@ pub type encode_inlined_item<'a> = 'a |ecx: &EncodeContext,\n                                              ii: ast::inlined_item|;\n \n pub struct EncodeParams<'a> {\n-    diag: @mut span_handler,\n+    diag: @mut SpanHandler,\n     tcx: ty::ctxt,\n     reexports2: middle::resolve::ExportMap2,\n     item_symbols: &'a RefCell<HashMap<ast::NodeId, ~str>>,\n@@ -83,7 +83,7 @@ struct Stats {\n }\n \n pub struct EncodeContext<'a> {\n-    diag: @mut span_handler,\n+    diag: @mut SpanHandler,\n     tcx: ty::ctxt,\n     stats: @Stats,\n     reexports2: middle::resolve::ExportMap2,"}, {"sha": "37e6a46d6ba2ee2696cb4980506c9823cc84a2c7", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -19,7 +19,7 @@ use metadata::encoder;\n use metadata::filesearch::{FileMatches, FileDoesntMatch};\n use metadata::filesearch;\n use syntax::codemap::Span;\n-use syntax::diagnostic::span_handler;\n+use syntax::diagnostic::SpanHandler;\n use syntax::parse::token::ident_interner;\n use syntax::crateid::CrateId;\n use syntax::attr;\n@@ -231,8 +231,8 @@ impl Context {\n     }\n }\n \n-pub fn note_crateid_attr(diag: @mut span_handler,\n-                       crateid: &CrateId) {\n+pub fn note_crateid_attr(diag: @mut SpanHandler,\n+                         crateid: &CrateId) {\n     diag.handler().note(format!(\"crate_id: {}\", crateid.to_str()));\n }\n "}, {"sha": "e6ed70bd4dc858ea22b64675d8ac9dbac15d8f95", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -24,15 +24,15 @@ use middle::ty;\n use syntax::abi::AbiSet;\n use syntax::ast;\n use syntax::ast::*;\n-use syntax::diagnostic::span_handler;\n+use syntax::diagnostic::SpanHandler;\n use syntax::print::pprust::*;\n \n macro_rules! mywrite( ($wr:expr, $($arg:tt)*) => (\n     format_args!(|a| { mywrite($wr, a) }, $($arg)*)\n ) )\n \n pub struct ctxt {\n-    diag: @mut span_handler,\n+    diag: @mut SpanHandler,\n     // Def -> str Callback:\n     ds: extern \"Rust\" fn(DefId) -> ~str,\n     // The type context."}, {"sha": "78b06d62480645f37025274a6a00f97af37d995d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -267,7 +267,7 @@ pub type ctxt = @ctxt_;\n /// generates so that so that it can be reused and doesn't have to be redone\n /// later on.\n struct ctxt_ {\n-    diag: @mut syntax::diagnostic::span_handler,\n+    diag: @mut syntax::diagnostic::SpanHandler,\n     interner: RefCell<HashMap<intern_key, ~t_box_>>,\n     next_id: Cell<uint>,\n     cstore: @metadata::cstore::CStore,"}, {"sha": "3a2c0651ed90d005f328dabbb79ba8da60f0b91b", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -15,7 +15,7 @@ use ast_util::{inlined_item_utils, stmt_id};\n use ast_util;\n use codemap::Span;\n use codemap;\n-use diagnostic::span_handler;\n+use diagnostic::SpanHandler;\n use parse::token::get_ident_interner;\n use parse::token::ident_interner;\n use parse::token::special_idents;\n@@ -152,7 +152,7 @@ pub type map = @mut HashMap<NodeId, ast_node>;\n pub struct Ctx {\n     map: map,\n     path: path,\n-    diag: @mut span_handler,\n+    diag: @mut SpanHandler,\n }\n \n impl Ctx {\n@@ -373,7 +373,7 @@ impl Visitor<()> for Ctx {\n     }\n }\n \n-pub fn map_crate(diag: @mut span_handler, c: &Crate) -> map {\n+pub fn map_crate(diag: @mut SpanHandler, c: &Crate) -> map {\n     let cx = @mut Ctx {\n         map: @mut HashMap::new(),\n         path: ~[],\n@@ -386,7 +386,7 @@ pub fn map_crate(diag: @mut span_handler, c: &Crate) -> map {\n // Used for items loaded from external crate that are being inlined into this\n // crate.  The `path` should be the path to the item but should not include\n // the item itself.\n-pub fn map_decoded_item(diag: @mut span_handler,\n+pub fn map_decoded_item(diag: @mut SpanHandler,\n                         map: map,\n                         path: path,\n                         ii: &inlined_item) {"}, {"sha": "7a3ac0f2f4d9a2705b8e45fab479fcfcba6573a2", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -14,7 +14,7 @@ use ast;\n use ast::{Attribute, Attribute_, MetaItem, MetaWord, MetaNameValue, MetaList};\n use codemap::{Span, Spanned, spanned, dummy_spanned};\n use codemap::BytePos;\n-use diagnostic::span_handler;\n+use diagnostic::SpanHandler;\n use parse::comments::{doc_comment_style, strip_doc_comment_decoration};\n use crateid::CrateId;\n \n@@ -355,7 +355,7 @@ pub fn find_stability<AM: AttrMetaMethods, It: Iterator<AM>>(mut metas: It) -> O\n     None\n }\n \n-pub fn require_unique_names(diagnostic: @mut span_handler,\n+pub fn require_unique_names(diagnostic: @mut SpanHandler,\n                             metas: &[@MetaItem]) {\n     let mut set = HashSet::new();\n     for meta in metas.iter() {\n@@ -381,7 +381,7 @@ pub fn require_unique_names(diagnostic: @mut span_handler,\n  * present (before fields, if any) with that type; reprensentation\n  * optimizations which would remove it will not be done.\n  */\n-pub fn find_repr_attr(diagnostic: @mut span_handler, attr: @ast::MetaItem, acc: ReprAttr)\n+pub fn find_repr_attr(diagnostic: @mut SpanHandler, attr: @ast::MetaItem, acc: ReprAttr)\n     -> ReprAttr {\n     let mut acc = acc;\n     match attr.node {"}, {"sha": "e53c0c39281217bb4fa3b33472fd320223373e5b", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 38, "deletions": 66, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -26,95 +26,67 @@ pub trait Emitter {\n             lvl: level);\n }\n \n-// a handler deals with errors; certain errors\n-// (fatal, bug, unimpl) may cause immediate exit,\n-// others log errors for later reporting.\n-pub trait handler {\n-    fn fatal(@mut self, msg: &str) -> !;\n-    fn err(@mut self, msg: &str);\n-    fn bump_err_count(@mut self);\n-    fn err_count(@mut self) -> uint;\n-    fn has_errors(@mut self) -> bool;\n-    fn abort_if_errors(@mut self);\n-    fn warn(@mut self, msg: &str);\n-    fn note(@mut self, msg: &str);\n-    // used to indicate a bug in the compiler:\n-    fn bug(@mut self, msg: &str) -> !;\n-    fn unimpl(@mut self, msg: &str) -> !;\n-    fn emit(@mut self,\n-            cmsp: Option<(@codemap::CodeMap, Span)>,\n-            msg: &str,\n-            lvl: level);\n-}\n-\n // a span-handler is like a handler but also\n // accepts span information for source-location\n // reporting.\n-pub trait span_handler {\n-    fn span_fatal(@mut self, sp: Span, msg: &str) -> !;\n-    fn span_err(@mut self, sp: Span, msg: &str);\n-    fn span_warn(@mut self, sp: Span, msg: &str);\n-    fn span_note(@mut self, sp: Span, msg: &str);\n-    fn span_bug(@mut self, sp: Span, msg: &str) -> !;\n-    fn span_unimpl(@mut self, sp: Span, msg: &str) -> !;\n-    fn handler(@mut self) -> @mut handler;\n-}\n-\n-struct HandlerT {\n-    err_count: uint,\n-    emit: @Emitter,\n-}\n-\n-struct CodemapT {\n-    handler: @mut handler,\n+pub struct SpanHandler {\n+    handler: @mut Handler,\n     cm: @codemap::CodeMap,\n }\n \n-impl span_handler for CodemapT {\n-    fn span_fatal(@mut self, sp: Span, msg: &str) -> ! {\n+impl SpanHandler {\n+    pub fn span_fatal(@mut self, sp: Span, msg: &str) -> ! {\n         self.handler.emit(Some((self.cm, sp)), msg, fatal);\n         fail!();\n     }\n-    fn span_err(@mut self, sp: Span, msg: &str) {\n+    pub fn span_err(@mut self, sp: Span, msg: &str) {\n         self.handler.emit(Some((self.cm, sp)), msg, error);\n         self.handler.bump_err_count();\n     }\n-    fn span_warn(@mut self, sp: Span, msg: &str) {\n+    pub fn span_warn(@mut self, sp: Span, msg: &str) {\n         self.handler.emit(Some((self.cm, sp)), msg, warning);\n     }\n-    fn span_note(@mut self, sp: Span, msg: &str) {\n+    pub fn span_note(@mut self, sp: Span, msg: &str) {\n         self.handler.emit(Some((self.cm, sp)), msg, note);\n     }\n-    fn span_bug(@mut self, sp: Span, msg: &str) -> ! {\n+    pub fn span_bug(@mut self, sp: Span, msg: &str) -> ! {\n         self.span_fatal(sp, ice_msg(msg));\n     }\n-    fn span_unimpl(@mut self, sp: Span, msg: &str) -> ! {\n+    pub fn span_unimpl(@mut self, sp: Span, msg: &str) -> ! {\n         self.span_bug(sp, ~\"unimplemented \" + msg);\n     }\n-    fn handler(@mut self) -> @mut handler {\n+    pub fn handler(@mut self) -> @mut Handler {\n         self.handler\n     }\n }\n \n-impl handler for HandlerT {\n-    fn fatal(@mut self, msg: &str) -> ! {\n+// a handler deals with errors; certain errors\n+// (fatal, bug, unimpl) may cause immediate exit,\n+// others log errors for later reporting.\n+pub struct Handler {\n+    err_count: uint,\n+    emit: @Emitter,\n+}\n+\n+impl Handler {\n+    pub fn fatal(@mut self, msg: &str) -> ! {\n         self.emit.emit(None, msg, fatal);\n         fail!();\n     }\n-    fn err(@mut self, msg: &str) {\n+    pub fn err(@mut self, msg: &str) {\n         self.emit.emit(None, msg, error);\n         self.bump_err_count();\n     }\n-    fn bump_err_count(@mut self) {\n+    pub fn bump_err_count(@mut self) {\n         self.err_count += 1u;\n     }\n-    fn err_count(@mut self) -> uint {\n+    pub fn err_count(@mut self) -> uint {\n         self.err_count\n     }\n-    fn has_errors(@mut self) -> bool {\n+    pub fn has_errors(@mut self) -> bool {\n         self.err_count > 0u\n     }\n-    fn abort_if_errors(@mut self) {\n+    pub fn abort_if_errors(@mut self) {\n         let s;\n         match self.err_count {\n           0u => return,\n@@ -126,19 +98,19 @@ impl handler for HandlerT {\n         }\n         self.fatal(s);\n     }\n-    fn warn(@mut self, msg: &str) {\n+    pub fn warn(@mut self, msg: &str) {\n         self.emit.emit(None, msg, warning);\n     }\n-    fn note(@mut self, msg: &str) {\n+    pub fn note(@mut self, msg: &str) {\n         self.emit.emit(None, msg, note);\n     }\n-    fn bug(@mut self, msg: &str) -> ! {\n+    pub fn bug(@mut self, msg: &str) -> ! {\n         self.fatal(ice_msg(msg));\n     }\n-    fn unimpl(@mut self, msg: &str) -> ! {\n+    pub fn unimpl(@mut self, msg: &str) -> ! {\n         self.bug(~\"unimplemented \" + msg);\n     }\n-    fn emit(@mut self,\n+    pub fn emit(@mut self,\n             cmsp: Option<(@codemap::CodeMap, Span)>,\n             msg: &str,\n             lvl: level) {\n@@ -151,24 +123,24 @@ pub fn ice_msg(msg: &str) -> ~str {\n             \\nWe would appreciate a bug report: {}\", msg, BUG_REPORT_URL)\n }\n \n-pub fn mk_span_handler(handler: @mut handler, cm: @codemap::CodeMap)\n-                    -> @mut span_handler {\n-    @mut CodemapT {\n+pub fn mk_span_handler(handler: @mut Handler, cm: @codemap::CodeMap)\n+                    -> @mut SpanHandler {\n+    @mut SpanHandler {\n         handler: handler,\n         cm: cm,\n-    } as @mut span_handler\n+    }\n }\n \n-pub fn mk_handler(emitter: Option<@Emitter>) -> @mut handler {\n+pub fn mk_handler(emitter: Option<@Emitter>) -> @mut Handler {\n     let emit: @Emitter = match emitter {\n         Some(e) => e,\n         None => @DefaultEmitter as @Emitter\n     };\n \n-    @mut HandlerT {\n+    @mut Handler {\n         err_count: 0,\n         emit: emit,\n-    } as @mut handler\n+    }\n }\n \n #[deriving(Eq)]\n@@ -356,7 +328,7 @@ fn print_macro_backtrace(cm: @codemap::CodeMap, sp: Span) {\n }\n \n pub fn expect<T:Clone>(\n-              diag: @mut span_handler,\n+              diag: @mut SpanHandler,\n               opt: Option<T>,\n               msg: || -> ~str)\n               -> T {"}, {"sha": "7c2dad34002cf7eab7bbab0734122a2de668e314", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -12,7 +12,6 @@ use ast;\n use ast::Name;\n use codemap;\n use codemap::{CodeMap, Span, ExpnInfo};\n-use diagnostic::span_handler;\n use ext;\n use ext::expand;\n use parse;"}, {"sha": "fc7d3d2b40c08265e907779c9d19263bef841b42", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -11,7 +11,7 @@\n use ast;\n use ast::{token_tree, tt_delim, tt_tok, tt_seq, tt_nonterminal,Ident};\n use codemap::{Span, dummy_sp};\n-use diagnostic::span_handler;\n+use diagnostic::SpanHandler;\n use ext::tt::macro_parser::{named_match, matched_seq, matched_nonterminal};\n use parse::token::{EOF, INTERPOLATED, IDENT, Token, nt_ident};\n use parse::token::{ident_to_str};\n@@ -30,7 +30,7 @@ struct TtFrame {\n }\n \n pub struct TtReader {\n-    sp_diag: @mut span_handler,\n+    sp_diag: @mut SpanHandler,\n     // the unzipped tree:\n     stack: @mut TtFrame,\n     /* for MBE-style macro transcription */\n@@ -45,7 +45,7 @@ pub struct TtReader {\n /** This can do Macro-By-Example transcription. On the other hand, if\n  *  `src` contains no `tt_seq`s and `tt_nonterminal`s, `interp` can (and\n  *  should) be none. */\n-pub fn new_tt_reader(sp_diag: @mut span_handler,\n+pub fn new_tt_reader(sp_diag: @mut SpanHandler,\n                      interp: Option<HashMap<Ident,@named_match>>,\n                      src: ~[ast::token_tree])\n                   -> @mut TtReader {"}, {"sha": "b1390253d19452423441117dd236ffb099a91ae3", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -342,7 +342,7 @@ pub struct lit {\n // it appears this function is called only from pprust... that's\n // probably not a good thing.\n pub fn gather_comments_and_literals(span_diagnostic:\n-                                    @mut diagnostic::span_handler,\n+                                    @mut diagnostic::SpanHandler,\n                                     path: @str,\n                                     srdr: &mut io::Reader)\n                                  -> (~[cmnt], ~[lit]) {"}, {"sha": "8b7ef6d9cf8be4bc388162941963a4f0385fc496", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -11,7 +11,7 @@\n use ast;\n use codemap::{BytePos, CharPos, CodeMap, Pos, Span};\n use codemap;\n-use diagnostic::span_handler;\n+use diagnostic::SpanHandler;\n use ext::tt::transcribe::{tt_next_token};\n use ext::tt::transcribe::{dup_tt_reader};\n use parse::token;\n@@ -29,7 +29,7 @@ pub trait reader {\n     fn is_eof(@mut self) -> bool;\n     fn next_token(@mut self) -> TokenAndSpan;\n     fn fatal(@mut self, ~str) -> !;\n-    fn span_diag(@mut self) -> @mut span_handler;\n+    fn span_diag(@mut self) -> @mut SpanHandler;\n     fn peek(@mut self) -> TokenAndSpan;\n     fn dup(@mut self) -> @mut reader;\n }\n@@ -41,7 +41,7 @@ pub struct TokenAndSpan {\n }\n \n pub struct StringReader {\n-    span_diagnostic: @mut span_handler,\n+    span_diagnostic: @mut SpanHandler,\n     src: @str,\n     // The absolute offset within the codemap of the next character to read\n     pos: BytePos,\n@@ -57,7 +57,7 @@ pub struct StringReader {\n     peek_span: Span\n }\n \n-pub fn new_string_reader(span_diagnostic: @mut span_handler,\n+pub fn new_string_reader(span_diagnostic: @mut SpanHandler,\n                          filemap: @codemap::FileMap)\n                       -> @mut StringReader {\n     let r = new_low_level_string_reader(span_diagnostic, filemap);\n@@ -66,7 +66,7 @@ pub fn new_string_reader(span_diagnostic: @mut span_handler,\n }\n \n /* For comments.rs, which hackily pokes into 'pos' and 'curr' */\n-pub fn new_low_level_string_reader(span_diagnostic: @mut span_handler,\n+pub fn new_low_level_string_reader(span_diagnostic: @mut SpanHandler,\n                                    filemap: @codemap::FileMap)\n                                 -> @mut StringReader {\n     // Force the initial reader bump to start on a fresh line\n@@ -118,7 +118,7 @@ impl reader for StringReader {\n     fn fatal(@mut self, m: ~str) -> ! {\n         self.span_diagnostic.span_fatal(self.peek_span, m)\n     }\n-    fn span_diag(@mut self) -> @mut span_handler { self.span_diagnostic }\n+    fn span_diag(@mut self) -> @mut SpanHandler { self.span_diagnostic }\n     fn peek(@mut self) -> TokenAndSpan {\n         // XXX(pcwalton): Bad copy!\n         TokenAndSpan {\n@@ -139,7 +139,7 @@ impl reader for TtReader {\n     fn fatal(@mut self, m: ~str) -> ! {\n         self.sp_diag.span_fatal(self.cur_span, m);\n     }\n-    fn span_diag(@mut self) -> @mut span_handler { self.sp_diag }\n+    fn span_diag(@mut self) -> @mut SpanHandler { self.sp_diag }\n     fn peek(@mut self) -> TokenAndSpan {\n         TokenAndSpan {\n             tok: self.cur_tok.clone(),"}, {"sha": "8aedc1462406f3635a2f6aff6cc3c562cb19895f", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -14,7 +14,7 @@\n use ast;\n use codemap::{Span, CodeMap, FileMap, FileSubstr};\n use codemap;\n-use diagnostic::{span_handler, mk_span_handler, mk_handler, Emitter};\n+use diagnostic::{SpanHandler, mk_span_handler, mk_handler, Emitter};\n use parse::attr::parser_attr;\n use parse::lexer::reader;\n use parse::parser::Parser;\n@@ -41,7 +41,7 @@ pub mod obsolete;\n // info about a parsing session.\n pub struct ParseSess {\n     cm: @codemap::CodeMap, // better be the same as the one in the reader!\n-    span_diagnostic: @mut span_handler, // better be the same as the one in the reader!\n+    span_diagnostic: @mut SpanHandler, // better be the same as the one in the reader!\n     /// Used to determine and report recursive mod inclusions\n     included_mod_stack: ~[Path],\n }\n@@ -55,7 +55,7 @@ pub fn new_parse_sess(demitter: Option<@Emitter>) -> @mut ParseSess {\n     }\n }\n \n-pub fn new_parse_sess_special_handler(sh: @mut span_handler,\n+pub fn new_parse_sess_special_handler(sh: @mut SpanHandler,\n                                       cm: @codemap::CodeMap)\n                                    -> @mut ParseSess {\n     @mut ParseSess {"}, {"sha": "fa0d2d4765b6adc79dd882acf4fc43a3bd202c11", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe10c63326eee6220900dcbb92197ccf26e2025b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=fe10c63326eee6220900dcbb92197ccf26e2025b", "patch": "@@ -118,7 +118,7 @@ pub static default_columns: uint = 78u;\n // copy forward.\n pub fn print_crate(cm: @CodeMap,\n                    intr: @ident_interner,\n-                   span_diagnostic: @mut diagnostic::span_handler,\n+                   span_diagnostic: @mut diagnostic::SpanHandler,\n                    crate: &ast::Crate,\n                    filename: @str,\n                    input: @mut io::Reader,"}]}