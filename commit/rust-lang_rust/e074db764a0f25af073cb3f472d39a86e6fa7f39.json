{"sha": "e074db764a0f25af073cb3f472d39a86e6fa7f39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNzRkYjc2NGEwZjI1YWYwNzNjYjNmNDcyZDM5YTg2ZTZmYTdmMzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-19T08:44:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-19T12:47:56Z"}, "message": "use const array repeat expressions for uninit_array", "tree": {"sha": "6d0263f84567761ea6e65dd81f1c92bd9e7299e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d0263f84567761ea6e65dd81f1c92bd9e7299e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e074db764a0f25af073cb3f472d39a86e6fa7f39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e074db764a0f25af073cb3f472d39a86e6fa7f39", "html_url": "https://github.com/rust-lang/rust/commit/e074db764a0f25af073cb3f472d39a86e6fa7f39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e074db764a0f25af073cb3f472d39a86e6fa7f39/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe499a7b34dcb1fc054dd637ea561a19a268d2de", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe499a7b34dcb1fc054dd637ea561a19a268d2de", "html_url": "https://github.com/rust-lang/rust/commit/fe499a7b34dcb1fc054dd637ea561a19a268d2de"}], "stats": {"total": 40, "additions": 30, "deletions": 10}, "files": [{"sha": "e067096f0c780ccc9c5294dbe9fbb45471d47dab", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e074db764a0f25af073cb3f472d39a86e6fa7f39/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e074db764a0f25af073cb3f472d39a86e6fa7f39/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=e074db764a0f25af073cb3f472d39a86e6fa7f39", "patch": "@@ -106,8 +106,8 @@ impl<K, V> LeafNode<K, V> {\n         LeafNode {\n             // As a general policy, we leave fields uninitialized if they can be, as this should\n             // be both slightly faster and easier to track in Valgrind.\n-            keys: uninitialized_array![_; CAPACITY],\n-            vals: uninitialized_array![_; CAPACITY],\n+            keys: uninit_array![_; CAPACITY],\n+            vals: uninit_array![_; CAPACITY],\n             parent: ptr::null(),\n             parent_idx: MaybeUninit::uninit(),\n             len: 0\n@@ -159,7 +159,7 @@ impl<K, V> InternalNode<K, V> {\n     unsafe fn new() -> Self {\n         InternalNode {\n             data: LeafNode::new(),\n-            edges: uninitialized_array![_; 2*B],\n+            edges: uninit_array![_; 2*B],\n         }\n     }\n }"}, {"sha": "68df0137ee6375d45ba557af38af4d990e7f93f4", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e074db764a0f25af073cb3f472d39a86e6fa7f39/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e074db764a0f25af073cb3f472d39a86e6fa7f39/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=e074db764a0f25af073cb3f472d39a86e6fa7f39", "patch": "@@ -77,6 +77,7 @@\n #![feature(box_syntax)]\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n+#![cfg_attr(not(bootstrap), feature(const_in_array_repeat_expressions))]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]"}, {"sha": "e2d00e654ddb8185b2162786453db874ea52bd89", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e074db764a0f25af073cb3f472d39a86e6fa7f39/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e074db764a0f25af073cb3f472d39a86e6fa7f39/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=e074db764a0f25af073cb3f472d39a86e6fa7f39", "patch": "@@ -51,7 +51,7 @@ trait GenericRadix {\n         // characters for a base 2 number.\n         let zero = T::zero();\n         let is_nonnegative = x >= zero;\n-        let mut buf = uninitialized_array![u8; 128];\n+        let mut buf = uninit_array![u8; 128];\n         let mut curr = buf.len();\n         let base = T::from_u8(Self::BASE);\n         if is_nonnegative {\n@@ -189,7 +189,7 @@ static DEC_DIGITS_LUT: &[u8; 200] =\n macro_rules! impl_Display {\n     ($($t:ident),* as $u:ident via $conv_fn:ident named $name:ident) => {\n         fn $name(mut n: $u, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            let mut buf = uninitialized_array![u8; 39];\n+            let mut buf = uninit_array![u8; 39];\n             let mut curr = buf.len() as isize;\n             let buf_ptr = MaybeUninit::first_ptr_mut(&mut buf);\n             let lut_ptr = DEC_DIGITS_LUT.as_ptr();"}, {"sha": "8d3c42cbf35019eae8734bacf99fb75a5dae4410", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e074db764a0f25af073cb3f472d39a86e6fa7f39/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e074db764a0f25af073cb3f472d39a86e6fa7f39/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e074db764a0f25af073cb3f472d39a86e6fa7f39", "patch": "@@ -75,6 +75,7 @@\n #![feature(const_fn)]\n #![feature(const_fn_union)]\n #![cfg_attr(not(bootstrap), feature(const_generics))]\n+#![cfg_attr(not(bootstrap), feature(const_in_array_repeat_expressions))]\n #![feature(custom_inner_attributes)]\n #![feature(decl_macro)]\n #![feature(doc_cfg)]"}, {"sha": "9855c5fb9c32fdaa0ec149750ed4a285281d5963", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e074db764a0f25af073cb3f472d39a86e6fa7f39/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e074db764a0f25af073cb3f472d39a86e6fa7f39/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=e074db764a0f25af073cb3f472d39a86e6fa7f39", "patch": "@@ -626,20 +626,37 @@ macro_rules! todo {\n /// Creates an array of [`MaybeUninit`].\n ///\n /// This macro constructs an uninitialized array of the type `[MaybeUninit<K>; N]`.\n+/// It exists solely because bootstrap does not yet support const array-init expressions.\n ///\n /// [`MaybeUninit`]: mem/union.MaybeUninit.html\n+// FIXME: Remove both versions of this macro once bootstrap is 1.38.\n #[macro_export]\n #[unstable(feature = \"maybe_uninit_array\", issue = \"53491\")]\n-macro_rules! uninitialized_array {\n+#[cfg(bootstrap)]\n+macro_rules! uninit_array {\n     // This `assume_init` is safe because an array of `MaybeUninit` does not\n     // require initialization.\n-    // FIXME(#49147): Could be replaced by an array initializer, once those can\n-    // be any const expression.\n     ($t:ty; $size:expr) => (unsafe {\n         MaybeUninit::<[MaybeUninit<$t>; $size]>::uninit().assume_init()\n     });\n }\n \n+/// Creates an array of [`MaybeUninit`].\n+///\n+/// This macro constructs an uninitialized array of the type `[MaybeUninit<K>; N]`.\n+/// It exists solely because bootstrap does not yet support const array-init expressions.\n+///\n+/// [`MaybeUninit`]: mem/union.MaybeUninit.html\n+// FIXME: Just inline this version of the macro once bootstrap is 1.38.\n+#[macro_export]\n+#[unstable(feature = \"maybe_uninit_array\", issue = \"53491\")]\n+#[cfg(not(bootstrap))]\n+macro_rules! uninit_array {\n+    ($t:ty; $size:expr) => (\n+        [MaybeUninit::<$t>::uninit(); $size]\n+    );\n+}\n+\n /// Built-in macros to the compiler itself.\n ///\n /// These macros do not have any corresponding definition with a `macro_rules!`"}, {"sha": "1c69e7f90f6c76c038fe2480f98636ef98921c0e", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e074db764a0f25af073cb3f472d39a86e6fa7f39/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e074db764a0f25af073cb3f472d39a86e6fa7f39/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=e074db764a0f25af073cb3f472d39a86e6fa7f39", "patch": "@@ -248,6 +248,7 @@ impl<T> MaybeUninit<T> {\n     /// [type]: union.MaybeUninit.html\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n     #[inline(always)]\n+    #[rustc_promotable]\n     pub const fn uninit() -> MaybeUninit<T> {\n         MaybeUninit { uninit: () }\n     }"}, {"sha": "fbf9caeaece56472fde81a160fb1387ca6db7d90", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e074db764a0f25af073cb3f472d39a86e6fa7f39/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e074db764a0f25af073cb3f472d39a86e6fa7f39/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=e074db764a0f25af073cb3f472d39a86e6fa7f39", "patch": "@@ -216,14 +216,14 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n     let mut block_l = BLOCK;\n     let mut start_l = ptr::null_mut();\n     let mut end_l = ptr::null_mut();\n-    let mut offsets_l: [MaybeUninit<u8>; BLOCK] = uninitialized_array![u8; BLOCK];\n+    let mut offsets_l: [MaybeUninit<u8>; BLOCK] = uninit_array![u8; BLOCK];\n \n     // The current block on the right side (from `r.sub(block_r)` to `r`).\n     let mut r = unsafe { l.add(v.len()) };\n     let mut block_r = BLOCK;\n     let mut start_r = ptr::null_mut();\n     let mut end_r = ptr::null_mut();\n-    let mut offsets_r: [MaybeUninit<u8>; BLOCK] = uninitialized_array![u8; BLOCK];\n+    let mut offsets_r: [MaybeUninit<u8>; BLOCK] = uninit_array![u8; BLOCK];\n \n     // FIXME: When we get VLAs, try creating one array of length `min(v.len(), 2 * BLOCK)` rather\n     // than two fixed-size arrays of length `BLOCK`. VLAs might be more cache-efficient."}]}