{"sha": "9f9183d34d411cf51645b91487de4a5191442b1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmOTE4M2QzNGQ0MTFjZjUxNjQ1YjkxNDg3ZGU0YTUxOTE0NDJiMWE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-02-24T23:59:34Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-02-26T18:20:31Z"}, "message": "Fix rebase", "tree": {"sha": "5af1b0a10be866a44a3d7e510962aafdc6af5445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5af1b0a10be866a44a3d7e510962aafdc6af5445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f9183d34d411cf51645b91487de4a5191442b1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f9183d34d411cf51645b91487de4a5191442b1a", "html_url": "https://github.com/rust-lang/rust/commit/9f9183d34d411cf51645b91487de4a5191442b1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f9183d34d411cf51645b91487de4a5191442b1a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ba5fd168a20cbead2afb800e638159e11bb79da", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba5fd168a20cbead2afb800e638159e11bb79da", "html_url": "https://github.com/rust-lang/rust/commit/7ba5fd168a20cbead2afb800e638159e11bb79da"}], "stats": {"total": 483, "additions": 243, "deletions": 240}, "files": [{"sha": "939154fac7ab0041cbfefdcca531fb93598e733d", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -909,13 +909,14 @@ pub fn build_session_with_codemap(sopts: config::Options,\n \n     let emitter: Box<Emitter> = match (sopts.error_format, emitter_dest) {\n         (config::ErrorOutputType::HumanReadable(color_config), None) => {\n-            Box::new(EmitterWriter::stderr(color_config,\n-                                           Some(codemap.clone()),\n-                                           false,\n-                                           sopts.debugging_opts.teach))\n+            Box::new(EmitterWriter::stderr(color_config, Some(codemap.clone()),\n+                     false, sopts.debugging_opts.teach)\n+                     .ui_testing(sopts.debugging_opts.ui_testing))\n         }\n         (config::ErrorOutputType::HumanReadable(_), Some(dst)) => {\n-            Box::new(EmitterWriter::new(dst, Some(codemap.clone()), false, false))\n+            Box::new(EmitterWriter::new(dst, Some(codemap.clone()),\n+                     false, false)\n+                     .ui_testing(sopts.debugging_opts.ui_testing))\n         }\n         (config::ErrorOutputType::Json(pretty), None) => {\n             Box::new(JsonEmitter::stderr(Some(registry), codemap.clone(),"}, {"sha": "0bd9b7268cb3a3d87c3e9f86cc68a486fa746bdc", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -189,8 +189,9 @@ impl EmitterWriter {\n         }\n     }\n \n-    pub fn ui_testing(self, ui_testing: bool) -> Self {\n-        Self { ui_testing, ..self }\n+    pub fn ui_testing(mut self, ui_testing: bool) -> Self {\n+        self.ui_testing = ui_testing;\n+        self\n     }\n \n     fn maybe_anonymized(&self, line_num: usize) -> String {"}, {"sha": "edfd134469cda7056686d619190752d26bac7908", "filename": "src/test/ui-fulldeps/proc-macro/load-panic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fload-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fload-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fload-panic.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,7 +1,7 @@\n error: proc-macro derive panicked\n   --> $DIR/load-panic.rs:17:10\n    |\n-17 | #[derive(A)]\n+LL | #[derive(A)]\n    |          ^\n    |\n    = help: message: nope!"}, {"sha": "9e9e03373e8850cf6b15ee97b0c4492f625e45f8", "filename": "src/test/ui/command-line-diagnostics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fcommand-line-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fcommand-line-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand-line-diagnostics.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,9 +1,9 @@\n error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/command-line-diagnostics.rs:16:5\n    |\n-15 |     let x = 42;\n+LL |     let x = 42;\n    |         - first assignment to `x`\n-16 |     x = 43;\n+LL |     x = 43;\n    |     ^^^^^^ cannot assign twice to immutable variable\n \n error: aborting due to previous error"}, {"sha": "64c20ff8e07856ac72858fa3672ea7c78b14b1c8", "filename": "src/test/ui/did_you_mean/issue-42599_available_fields_note.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,13 +1,13 @@\n error[E0560]: struct `submodule::Demo` has no field named `inocently_mispellable`\n   --> $DIR/issue-42599_available_fields_note.rs:26:39\n    |\n-26 |             Self { secret_integer: 2, inocently_mispellable: () }\n+LL |             Self { secret_integer: 2, inocently_mispellable: () }\n    |                                       ^^^^^^^^^^^^^^^^^^^^^ field does not exist - did you mean `innocently_misspellable`?\n \n error[E0560]: struct `submodule::Demo` has no field named `egregiously_nonexistent_field`\n   --> $DIR/issue-42599_available_fields_note.rs:31:39\n    |\n-31 |             Self { secret_integer: 3, egregiously_nonexistent_field: () }\n+LL |             Self { secret_integer: 3, egregiously_nonexistent_field: () }\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `submodule::Demo` does not have this field\n    |\n    = note: available fields are: `favorite_integer`, `secret_integer`, `innocently_misspellable`, `another_field`, `yet_another_field` ... and 2 others"}, {"sha": "a24c5e05914712548ef489afe033f5732d8b2458", "filename": "src/test/ui/error-codes/E0062.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Ferror-codes%2FE0062.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Ferror-codes%2FE0062.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0062.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -3,7 +3,7 @@ error[E0062]: field `x` specified more than once\n    |\n LL |         x: 0,\n    |         ---- first use of `x`\n-18 |         x: 0,\n+LL |         x: 0,\n    |         ^ used more than once\n \n error: aborting due to previous error"}, {"sha": "5e0382de5c93a98bfc3c5ade9021fa89103b6259", "filename": "src/test/ui/error-codes/E0559.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Ferror-codes%2FE0559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Ferror-codes%2FE0559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0559.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,7 +1,7 @@\n error[E0559]: variant `Field::Fool` has no field named `joke`\n   --> $DIR/E0559.rs:16:27\n    |\n-16 |     let s = Field::Fool { joke: 0 };\n+LL |     let s = Field::Fool { joke: 0 };\n    |                           ^^^^ `Field::Fool` does not have this field\n    |\n    = note: available fields are: `x`"}, {"sha": "1b4e62425f0e1cb574147ed7719e5d2eb84c4374", "filename": "src/test/ui/error-codes/E0560.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Ferror-codes%2FE0560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Ferror-codes%2FE0560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0560.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,7 +1,7 @@\n error[E0560]: struct `Simba` has no field named `father`\n   --> $DIR/E0560.rs:16:32\n    |\n-16 |     let s = Simba { mother: 1, father: 0 };\n+LL |     let s = Simba { mother: 1, father: 0 };\n    |                                ^^^^^^ `Simba` does not have this field\n    |\n    = note: available fields are: `mother`"}, {"sha": "34952dc73c20c3d443f29e85538f09e74b6ba0db", "filename": "src/test/ui/error-codes/E0657.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,14 +1,14 @@\n error[E0657]: `impl Trait` can only capture lifetimes bound at the fn or impl level\n   --> $DIR/E0657.rs:20:31\n    |\n-LL |     -> impl for<'a> Id<impl Lt<'a>>\n-   |                                ^^\n+LL |     -> Box<for<'a> Id<impl Lt<'a>>>\n+   |                               ^^\n \n error[E0657]: `impl Trait` can only capture lifetimes bound at the fn or impl level\n   --> $DIR/E0657.rs:29:35\n    |\n-LL |         -> impl for<'a> Id<impl Lt<'a>>\n-   |                                    ^^\n+LL |         -> Box<for<'a> Id<impl Lt<'a>>>\n+   |                                   ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "231864e9655b0153aae2a62b5decf55106c3baa9", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,73 +1,73 @@\n error[E0425]: cannot find value `y` in this scope\n   --> $DIR/error-festival.rs:24:5\n    |\n-24 |     y = 2;\n+LL |     y = 2;\n    |     ^ did you mean `x`?\n \n error[E0603]: constant `FOO` is private\n   --> $DIR/error-festival.rs:32:5\n    |\n-32 |     foo::FOO;\n+LL |     foo::FOO;\n    |     ^^^^^^^^\n \n error[E0368]: binary assignment operation `+=` cannot be applied to type `&str`\n   --> $DIR/error-festival.rs:22:5\n    |\n-22 |     x += 2;\n+LL |     x += 2;\n    |     -^^^^^\n    |     |\n    |     cannot use `+=` on type `&str`\n \n error[E0599]: no method named `z` found for type `&str` in the current scope\n   --> $DIR/error-festival.rs:26:7\n    |\n-26 |     x.z();\n+LL |     x.z();\n    |       ^\n \n error[E0600]: cannot apply unary operator `!` to type `Question`\n   --> $DIR/error-festival.rs:29:5\n    |\n-29 |     !Question::Yes;\n+LL |     !Question::Yes;\n    |     ^^^^^^^^^^^^^^\n \n error[E0604]: only `u8` can be cast as `char`, not `u32`\n   --> $DIR/error-festival.rs:35:5\n    |\n-35 |     0u32 as char;\n+LL |     0u32 as char;\n    |     ^^^^^^^^^^^^\n \n error[E0605]: non-primitive cast: `u8` as `std::vec::Vec<u8>`\n   --> $DIR/error-festival.rs:39:5\n    |\n-39 |     x as Vec<u8>;\n+LL |     x as Vec<u8>;\n    |     ^^^^^^^^^^^^\n    |\n    = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n \n error[E0054]: cannot cast as `bool`\n   --> $DIR/error-festival.rs:43:24\n    |\n-43 |     let x_is_nonzero = x as bool;\n+LL |     let x_is_nonzero = x as bool;\n    |                        ^^^^^^^^^ unsupported cast\n    |\n    = help: compare with zero instead\n \n error[E0606]: casting `&u8` as `u32` is invalid\n   --> $DIR/error-festival.rs:47:18\n    |\n-47 |     let y: u32 = x as u32;\n+LL |     let y: u32 = x as u32;\n    |                  ^^^^^^^^ cannot cast `&u8` as `u32`\n    |\n help: did you mean `*x`?\n   --> $DIR/error-festival.rs:47:18\n    |\n-47 |     let y: u32 = x as u32;\n+LL |     let y: u32 = x as u32;\n    |                  ^\n \n error[E0607]: cannot cast thin pointer `*const u8` to fat pointer `*const [u8]`\n   --> $DIR/error-festival.rs:51:5\n    |\n-51 |     v as *const [u8];\n+LL |     v as *const [u8];\n    |     ^^^^^^^^^^^^^^^^\n \n error: aborting due to 10 previous errors"}, {"sha": "6096804190eda581ed0ba37dfc1d81e2308395ad", "filename": "src/test/ui/feature-gate-if_while_or_patterns.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Ffeature-gate-if_while_or_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Ffeature-gate-if_while_or_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-if_while_or_patterns.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,19 +1,19 @@\n error[E0658]: multiple patterns in `if let` and `while let` are unstable (see issue #48215)\n   --> $DIR/feature-gate-if_while_or_patterns.rs:12:5\n    |\n-12 | /     if let 0 | 1 = 0 { //~ ERROR multiple patterns in `if let` and `while let` are unstable\n-13 | |         ;\n-14 | |     }\n+LL | /     if let 0 | 1 = 0 { //~ ERROR multiple patterns in `if let` and `while let` are unstable\n+LL | |         ;\n+LL | |     }\n    | |_____^\n    |\n    = help: add #![feature(if_while_or_patterns)] to the crate attributes to enable\n \n error[E0658]: multiple patterns in `if let` and `while let` are unstable (see issue #48215)\n   --> $DIR/feature-gate-if_while_or_patterns.rs:15:5\n    |\n-15 | /     while let 0 | 1 = 1 { //~ ERROR multiple patterns in `if let` and `while let` are unstable\n-16 | |         break;\n-17 | |     }\n+LL | /     while let 0 | 1 = 1 { //~ ERROR multiple patterns in `if let` and `while let` are unstable\n+LL | |         break;\n+LL | |     }\n    | |_____^\n    |\n    = help: add #![feature(if_while_or_patterns)] to the crate attributes to enable"}, {"sha": "f519f21215ef8217d818ad33910ce0d8bb39f656", "filename": "src/test/ui/impl_trait_projections.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,31 +1,31 @@\n error[E0667]: `impl Trait` is not allowed in path parameters\n   --> $DIR/impl_trait_projections.rs:23:51\n    |\n-23 | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n+LL | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n    |                                                   ^^^^^^^^^^^^^\n \n error[E0667]: `impl Trait` is not allowed in path parameters\n   --> $DIR/impl_trait_projections.rs:30:9\n    |\n-30 |     -> <impl Iterator as Iterator>::Item\n+LL |     -> <impl Iterator as Iterator>::Item\n    |         ^^^^^^^^^^^^^\n \n error[E0667]: `impl Trait` is not allowed in path parameters\n   --> $DIR/impl_trait_projections.rs:37:27\n    |\n-37 |     -> <::std::ops::Range<impl Debug> as Iterator>::Item\n+LL |     -> <::std::ops::Range<impl Debug> as Iterator>::Item\n    |                           ^^^^^^^^^^\n \n error[E0667]: `impl Trait` is not allowed in path parameters\n   --> $DIR/impl_trait_projections.rs:44:29\n    |\n-44 |     -> <dyn Iterator<Item = impl Debug> as Iterator>::Item\n+LL |     -> <dyn Iterator<Item = impl Debug> as Iterator>::Item\n    |                             ^^^^^^^^^^\n \n error[E0223]: ambiguous associated type\n   --> $DIR/impl_trait_projections.rs:23:50\n    |\n-23 | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n+LL | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n    |                                                  ^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n    |\n    = note: specify the type using the syntax `<impl std::iter::Iterator as Trait>::Item`"}, {"sha": "ac64cb12ef0bd2deb4bae74d4a29f4c9772d5ef9", "filename": "src/test/ui/issue-19922.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fissue-19922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fissue-19922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-19922.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,7 +1,7 @@\n error[E0559]: variant `Homura::Akemi` has no field named `kaname`\n   --> $DIR/issue-19922.rs:16:34\n    |\n-16 |     let homura = Homura::Akemi { kaname: () };\n+LL |     let homura = Homura::Akemi { kaname: () };\n    |                                  ^^^^^^ `Homura::Akemi` does not have this field\n    |\n    = note: available fields are: `madoka`"}, {"sha": "13a2a23cc527d44af3cbb4e5767152e124eca0e0", "filename": "src/test/ui/issue-23302-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fissue-23302-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fissue-23302-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302-1.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,13 +1,13 @@\n error[E0391]: cyclic dependency detected\n   --> $DIR/issue-23302-1.rs:14:9\n    |\n-14 |     A = X::A as isize, //~ ERROR E0391\n+LL |     A = X::A as isize, //~ ERROR E0391\n    |         ^^^^^^^^^^^^^ cyclic reference\n    |\n note: the cycle begins when const-evaluating `X::A::{{initializer}}`...\n   --> $DIR/issue-23302-1.rs:14:5\n    |\n-14 |     A = X::A as isize, //~ ERROR E0391\n+LL |     A = X::A as isize, //~ ERROR E0391\n    |     ^^^^^^^^^^^^^^^^^\n    = note: ...which then again requires const-evaluating `X::A::{{initializer}}`, completing the cycle.\n "}, {"sha": "f303fa7c6718e3a13645c1b7fe3c36d55043b305", "filename": "src/test/ui/issue-23302-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fissue-23302-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fissue-23302-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302-2.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,13 +1,13 @@\n error[E0391]: cyclic dependency detected\n   --> $DIR/issue-23302-2.rs:14:9\n    |\n-14 |     A = Y::B as isize, //~ ERROR E0391\n+LL |     A = Y::B as isize, //~ ERROR E0391\n    |         ^^^^^^^^^^^^^ cyclic reference\n    |\n note: the cycle begins when const-evaluating `Y::A::{{initializer}}`...\n   --> $DIR/issue-23302-2.rs:14:5\n    |\n-14 |     A = Y::B as isize, //~ ERROR E0391\n+LL |     A = Y::B as isize, //~ ERROR E0391\n    |     ^^^^^^^^^^^^^^^^^\n    = note: ...which then again requires const-evaluating `Y::A::{{initializer}}`, completing the cycle.\n "}, {"sha": "ec615809749ae4bfaa5ab0b71adc1b29be1043dd", "filename": "src/test/ui/issue-23302-3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fissue-23302-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fissue-23302-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-23302-3.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,18 +1,18 @@\n error[E0391]: cyclic dependency detected\n   --> $DIR/issue-23302-3.rs:11:16\n    |\n-11 | const A: i32 = B; //~ ERROR E0391\n+LL | const A: i32 = B; //~ ERROR E0391\n    |                ^ cyclic reference\n    |\n note: the cycle begins when processing `B`...\n   --> $DIR/issue-23302-3.rs:13:1\n    |\n-13 | const B: i32 = A;\n+LL | const B: i32 = A;\n    | ^^^^^^^^^^^^^^^^^\n note: ...which then requires processing `A`...\n   --> $DIR/issue-23302-3.rs:13:16\n    |\n-13 | const B: i32 = A;\n+LL | const B: i32 = A;\n    |                ^\n    = note: ...which then again requires processing `B`, completing the cycle.\n "}, {"sha": "c511b576a21845c44dc89838b2c7e5d726306096", "filename": "src/test/ui/issue-36163.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36163.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,20 +1,20 @@\n-error[E0265]: recursive constant\n-  --> $DIR/issue-36163.rs:11:1\n-   |\n-LL | const A: i32 = Foo::B; //~ ERROR E0265\n-   | ^^^^^^^^^^^^^^^^^^^^^^ recursion not allowed in constant\n-\n-error[E0265]: recursive constant\n+error[E0391]: cyclic dependency detected\n   --> $DIR/issue-36163.rs:14:9\n    |\n-LL |     B = A, //~ ERROR E0265\n-   |         ^ recursion not allowed in constant\n-\n-error[E0265]: recursive constant\n-  --> $DIR/issue-36163.rs:18:9\n+LL |     B = A, //~ ERROR E0391\n+   |         ^ cyclic reference\n+   |\n+note: the cycle begins when const-evaluating `Foo::B::{{initializer}}`...\n+  --> $DIR/issue-36163.rs:14:5\n+   |\n+LL |     B = A, //~ ERROR E0391\n+   |     ^^^^^\n+note: ...which then requires const-evaluating `A`...\n+  --> $DIR/issue-36163.rs:14:9\n    |\n-LL |     C = Bar::C, //~ ERROR E0265\n-   |         ^^^^^^ recursion not allowed in constant\n+LL |     B = A, //~ ERROR E0391\n+   |         ^\n+   = note: ...which then again requires const-evaluating `Foo::B::{{initializer}}`, completing the cycle.\n \n error: aborting due to previous error\n "}, {"sha": "3ce93da6ad5500cee7015f09f42b3ec26c575f8e", "filename": "src/test/ui/issue-45157.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fissue-45157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fissue-45157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45157.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,19 +1,19 @@\n error[E0502]: cannot borrow `u.z.c` as immutable because it is also borrowed as mutable\n   --> $DIR/issue-45157.rs:37:20\n    |\n-34 |         let mref = &mut u.s.a;\n+LL |         let mref = &mut u.s.a;\n    |                    ---------- mutable borrow occurs here\n ...\n-37 |         let nref = &u.z.c;\n+LL |         let nref = &u.z.c;\n    |                    ^^^^^^ immutable borrow occurs here\n \n error[E0502]: cannot borrow `u.s.a` as mutable because it is also borrowed as immutable\n   --> $DIR/issue-45157.rs:39:27\n    |\n-37 |         let nref = &u.z.c;\n+LL |         let nref = &u.z.c;\n    |                    ------ immutable borrow occurs here\n-38 |         //~^ ERROR cannot borrow `u.z.c` as immutable because it is also borrowed as mutable [E0502]\n-39 |         println!(\"{} {}\", mref, nref)\n+LL |         //~^ ERROR cannot borrow `u.z.c` as immutable because it is also borrowed as mutable [E0502]\n+LL |         println!(\"{} {}\", mref, nref)\n    |                           ^^^^ mutable borrow occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "ef48d4d7aaefaff22241873087df8adad394d455", "filename": "src/test/ui/issue-47706.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47706.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -10,20 +10,20 @@ LL |         self.foo.map(Foo::new)\n error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n   --> $DIR/issue-47706.rs:37:5\n    |\n-27 |     Bar(i32),\n+LL |     Bar(i32),\n    |     -------- takes 1 argument\n ...\n-37 |     foo(Qux::Bar);\n+LL |     foo(Qux::Bar);\n    |     ^^^ expected function that takes 0 arguments\n    |\n note: required by `foo`\n   --> $DIR/issue-47706.rs:30:1\n    |\n-30 | / fn foo<F>(f: F)\n-31 | | where\n-32 | |     F: Fn(),\n-33 | | {\n-34 | | }\n+LL | / fn foo<F>(f: F)\n+LL | | where\n+LL | |     F: Fn(),\n+LL | | {\n+LL | | }\n    | |_^\n \n error: aborting due to 2 previous errors"}, {"sha": "6979510e50048225677ef35193c6bb2525fd2788", "filename": "src/test/ui/lint/lint-group-nonstandard-style.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-nonstandard-style.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,65 +1,65 @@\n error: function `CamelCase` should have a snake case name such as `camel_case`\n   --> $DIR/lint-group-nonstandard-style.rs:14:1\n    |\n-14 | fn CamelCase() {} //~ ERROR should have a snake\n+LL | fn CamelCase() {} //~ ERROR should have a snake\n    | ^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/lint-group-nonstandard-style.rs:11:9\n    |\n-11 | #![deny(nonstandard_style)]\n+LL | #![deny(nonstandard_style)]\n    |         ^^^^^^^^^^^^^^^^^\n    = note: #[deny(non_snake_case)] implied by #[deny(nonstandard_style)]\n \n error: function `CamelCase` should have a snake case name such as `camel_case`\n   --> $DIR/lint-group-nonstandard-style.rs:22:9\n    |\n-22 |         fn CamelCase() {} //~ ERROR should have a snake\n+LL |         fn CamelCase() {} //~ ERROR should have a snake\n    |         ^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/lint-group-nonstandard-style.rs:20:14\n    |\n-20 |     #[forbid(nonstandard_style)]\n+LL |     #[forbid(nonstandard_style)]\n    |              ^^^^^^^^^^^^^^^^^\n    = note: #[forbid(non_snake_case)] implied by #[forbid(nonstandard_style)]\n \n error: static variable `bad` should have an upper case name such as `BAD`\n   --> $DIR/lint-group-nonstandard-style.rs:24:9\n    |\n-24 |         static bad: isize = 1; //~ ERROR should have an upper\n+LL |         static bad: isize = 1; //~ ERROR should have an upper\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/lint-group-nonstandard-style.rs:20:14\n    |\n-20 |     #[forbid(nonstandard_style)]\n+LL |     #[forbid(nonstandard_style)]\n    |              ^^^^^^^^^^^^^^^^^\n    = note: #[forbid(non_upper_case_globals)] implied by #[forbid(nonstandard_style)]\n \n warning: function `CamelCase` should have a snake case name such as `camel_case`\n   --> $DIR/lint-group-nonstandard-style.rs:30:9\n    |\n-30 |         fn CamelCase() {} //~ WARN should have a snake\n+LL |         fn CamelCase() {} //~ WARN should have a snake\n    |         ^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/lint-group-nonstandard-style.rs:28:17\n    |\n-28 |         #![warn(nonstandard_style)]\n+LL |         #![warn(nonstandard_style)]\n    |                 ^^^^^^^^^^^^^^^^^\n    = note: #[warn(non_snake_case)] implied by #[warn(nonstandard_style)]\n \n warning: type `snake_case` should have a camel case name such as `SnakeCase`\n   --> $DIR/lint-group-nonstandard-style.rs:32:9\n    |\n-32 |         struct snake_case; //~ WARN should have a camel\n+LL |         struct snake_case; //~ WARN should have a camel\n    |         ^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/lint-group-nonstandard-style.rs:28:17\n    |\n-28 |         #![warn(nonstandard_style)]\n+LL |         #![warn(nonstandard_style)]\n    |                 ^^^^^^^^^^^^^^^^^\n    = note: #[warn(non_camel_case_types)] implied by #[warn(nonstandard_style)]\n "}, {"sha": "d382082a5758562bb4f6163ef74237c8c0fbc3af", "filename": "src/test/ui/macros/macro-at-most-once-rep-ambig.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-ambig.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,79 +1,79 @@\n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-ambig.rs:40:11\n    |\n-40 |     foo!(a?a?a); //~ ERROR no rules expected the token `?`\n+LL |     foo!(a?a?a); //~ ERROR no rules expected the token `?`\n    |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-ambig.rs:41:11\n    |\n-41 |     foo!(a?a); //~ ERROR no rules expected the token `?`\n+LL |     foo!(a?a); //~ ERROR no rules expected the token `?`\n    |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-ambig.rs:42:11\n    |\n-42 |     foo!(a?); //~ ERROR no rules expected the token `?`\n+LL |     foo!(a?); //~ ERROR no rules expected the token `?`\n    |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-ambig.rs:43:11\n    |\n-43 |     baz!(a?a?a); //~ ERROR no rules expected the token `?`\n+LL |     baz!(a?a?a); //~ ERROR no rules expected the token `?`\n    |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-ambig.rs:44:11\n    |\n-44 |     baz!(a?a); //~ ERROR no rules expected the token `?`\n+LL |     baz!(a?a); //~ ERROR no rules expected the token `?`\n    |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-ambig.rs:45:11\n    |\n-45 |     baz!(a?); //~ ERROR no rules expected the token `?`\n+LL |     baz!(a?); //~ ERROR no rules expected the token `?`\n    |           ^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-ambig.rs:46:11\n    |\n-46 |     baz!(a,); //~ ERROR unexpected end of macro invocation\n+LL |     baz!(a,); //~ ERROR unexpected end of macro invocation\n    |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-ambig.rs:47:11\n    |\n-47 |     baz!(a?a?a,); //~ ERROR no rules expected the token `?`\n+LL |     baz!(a?a?a,); //~ ERROR no rules expected the token `?`\n    |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-ambig.rs:48:11\n    |\n-48 |     baz!(a?a,); //~ ERROR no rules expected the token `?`\n+LL |     baz!(a?a,); //~ ERROR no rules expected the token `?`\n    |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-ambig.rs:49:11\n    |\n-49 |     baz!(a?,); //~ ERROR no rules expected the token `?`\n+LL |     baz!(a?,); //~ ERROR no rules expected the token `?`\n    |           ^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-ambig.rs:50:5\n    |\n-50 |     barplus!(); //~ ERROR unexpected end of macro invocation\n+LL |     barplus!(); //~ ERROR unexpected end of macro invocation\n    |     ^^^^^^^^^^^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-ambig.rs:51:15\n    |\n-51 |     barplus!(a?); //~ ERROR unexpected end of macro invocation\n+LL |     barplus!(a?); //~ ERROR unexpected end of macro invocation\n    |               ^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-ambig.rs:52:15\n    |\n-52 |     barstar!(a?); //~ ERROR unexpected end of macro invocation\n+LL |     barstar!(a?); //~ ERROR unexpected end of macro invocation\n    |               ^\n \n error: aborting due to 13 previous errors"}, {"sha": "b3e61e74bbb727029e966641d556b4ddf86d2515", "filename": "src/test/ui/nested_impl_trait.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested_impl_trait.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,7 +1,7 @@\n error[E0666]: nested `impl Trait` is not allowed\n   --> $DIR/nested_impl_trait.rs:16:56\n    |\n-16 | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n+LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                              ----------^^^^^^^^^^-\n    |                                              |         |\n    |                                              |         nested `impl Trait` here\n@@ -10,7 +10,7 @@ error[E0666]: nested `impl Trait` is not allowed\n error[E0666]: nested `impl Trait` is not allowed\n   --> $DIR/nested_impl_trait.rs:19:42\n    |\n-19 | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n+LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ----------^^^^^^^^^^-\n    |                                |         |\n    |                                |         nested `impl Trait` here\n@@ -19,7 +19,7 @@ error[E0666]: nested `impl Trait` is not allowed\n error[E0666]: nested `impl Trait` is not allowed\n   --> $DIR/nested_impl_trait.rs:23:37\n    |\n-23 | fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n+LL | fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n    |                           ----------^^^^^^^^^^-\n    |                           |         |\n    |                           |         nested `impl Trait` here\n@@ -28,7 +28,7 @@ error[E0666]: nested `impl Trait` is not allowed\n error[E0666]: nested `impl Trait` is not allowed\n   --> $DIR/nested_impl_trait.rs:28:44\n    |\n-28 |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n+LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  ----------^^^^^^^^^^-\n    |                                  |         |\n    |                                  |         nested `impl Trait` here\n@@ -37,13 +37,13 @@ error[E0666]: nested `impl Trait` is not allowed\n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/nested_impl_trait.rs:19:32\n    |\n-19 | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n+LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/nested_impl_trait.rs:36:42\n    |\n-36 | fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n+LL | fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n    |                                          ^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors"}, {"sha": "a580502f1757f86ec5a510515af39fca627890cf", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -53,7 +53,7 @@ LL | | }\n note: External requirements\n   --> $DIR/projection-no-regions-closure.rs:46:23\n    |\n-46 |     with_signature(x, |mut y| Box::new(y.next()))\n+LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:18 ~ projection_no_regions_closure[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n@@ -84,7 +84,7 @@ LL | | }\n note: External requirements\n   --> $DIR/projection-no-regions-closure.rs:54:23\n    |\n-54 |     with_signature(x, |mut y| Box::new(y.next()))\n+LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:22 ~ projection_no_regions_closure[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n@@ -126,7 +126,7 @@ LL | | }\n note: External requirements\n   --> $DIR/projection-no-regions-closure.rs:65:23\n    |\n-65 |     with_signature(x, |mut y| Box::new(y.next()))\n+LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:26 ~ projection_no_regions_closure[317d]::outlives_region[0]::{{closure}}[0]) with closure substs ["}, {"sha": "f557b448cec38cb7315daaca28330024482f0df5", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -66,7 +66,7 @@ LL | | }\n note: External requirements\n   --> $DIR/projection-one-region-closure.rs:68:29\n    |\n-68 |     with_signature(cell, t, |cell, t| require(cell, t));\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:23 ~ projection_one_region_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n@@ -115,7 +115,7 @@ LL | | }\n note: External requirements\n   --> $DIR/projection-one-region-closure.rs:90:29\n    |\n-90 |     with_signature(cell, t, |cell, t| require(cell, t));\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:27 ~ projection_one_region_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n@@ -162,21 +162,21 @@ LL | | }\n            ]\n \n note: External requirements\n-   --> $DIR/projection-one-region-closure.rs:103:29\n-    |\n-103 |     with_signature(cell, t, |cell, t| require(cell, t));\n-    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: defining type: DefId(0/1:31 ~ projection_one_region_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n-                '_#1r,\n-                '_#2r,\n-                T,\n-                i32,\n-                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n-            ]\n-    = note: number of external vids: 4\n-    = note: where T: '_#3r\n-    = note: where '_#2r: '_#3r\n+  --> $DIR/projection-one-region-closure.rs:103:29\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:31 ~ projection_one_region_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+           ]\n+   = note: number of external vids: 4\n+   = note: where T: '_#3r\n+   = note: where '_#2r: '_#3r\n \n note: No external requirements\n   --> $DIR/projection-one-region-closure.rs:97:1"}, {"sha": "7a8010ad8e0ea94f7c2d8503df2e2a95b312f4b7", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -57,7 +57,7 @@ LL | | }\n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:59:29\n    |\n-59 |     with_signature(cell, t, |cell, t| require(cell, t));\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:23 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n@@ -97,7 +97,7 @@ LL | | }\n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:80:29\n    |\n-80 |     with_signature(cell, t, |cell, t| require(cell, t));\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:27 ~ projection_one_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n@@ -137,7 +137,7 @@ LL | | }\n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:91:29\n    |\n-91 |     with_signature(cell, t, |cell, t| require(cell, t));\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:31 ~ projection_one_region_trait_bound_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n@@ -169,19 +169,19 @@ LL | | }\n            ]\n \n note: External requirements\n-   --> $DIR/projection-one-region-trait-bound-closure.rs:103:29\n-    |\n-103 |     with_signature(cell, t, |cell, t| require(cell, t));\n-    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: defining type: DefId(0/1:34 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n-                '_#1r,\n-                T,\n-                i32,\n-                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n-            ]\n-    = note: number of external vids: 3\n-    = note: where '_#1r: '_#2r\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:103:29\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:34 ~ projection_one_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+           ]\n+   = note: number of external vids: 3\n+   = note: where '_#1r: '_#2r\n \n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:95:1"}, {"sha": "875907e6b39d5779770728654e20bf678d9d7953", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -14,12 +14,12 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:43:1\n    |\n-43 | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n-44 | | where\n-45 | |     T: Anything<'b>,\n-46 | | {\n-47 | |     with_signature(cell, t, |cell, t| require(cell, t));\n-48 | | }\n+LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n+LL | | where\n+LL | |     T: Anything<'b>,\n+LL | | {\n+LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n+LL | | }\n    | |_^\n    |\n    = note: defining type: DefId(0/0:8 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_late[0]) with substs [\n@@ -30,7 +30,7 @@ note: No external requirements\n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:56:29\n    |\n-56 |     with_signature(cell, t, |cell, t| require(cell, t));\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:23 ~ projection_one_region_trait_bound_static_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n@@ -62,7 +62,7 @@ LL | | }\n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:75:29\n    |\n-75 |     with_signature(cell, t, |cell, t| require(cell, t));\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:27 ~ projection_one_region_trait_bound_static_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n@@ -94,7 +94,7 @@ LL | | }\n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:84:29\n    |\n-84 |     with_signature(cell, t, |cell, t| require(cell, t));\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:31 ~ projection_one_region_trait_bound_static_closure[317d]::elements_outlive[0]::{{closure}}[0]) with closure substs [\n@@ -126,7 +126,7 @@ LL | | }\n note: No external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:96:29\n    |\n-96 |     with_signature(cell, t, |cell, t| require(cell, t));\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:34 ~ projection_one_region_trait_bound_static_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs ["}, {"sha": "4fc0dffa6757fa6492f1e66801531e9cf69cdc54", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 58, "deletions": 58, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -67,7 +67,7 @@ LL | | }\n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:60:29\n    |\n-60 |     with_signature(cell, t, |cell, t| require(cell, t));\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:27 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_early[0]::{{closure}}[0]) with closure substs [\n@@ -111,7 +111,7 @@ LL | | }\n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:81:29\n    |\n-81 |     with_signature(cell, t, |cell, t| require(cell, t));\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:32 ~ projection_two_region_trait_bound_closure[317d]::projection_outlives[0]::{{closure}}[0]) with closure substs [\n@@ -155,7 +155,7 @@ LL | | }\n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:92:29\n    |\n-92 |     with_signature(cell, t, |cell, t| require(cell, t));\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:37 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive1[0]::{{closure}}[0]) with closure substs [\n@@ -189,21 +189,21 @@ LL | | }\n            ]\n \n note: External requirements\n-   --> $DIR/projection-two-region-trait-bound-closure.rs:101:29\n-    |\n-101 |     with_signature(cell, t, |cell, t| require(cell, t));\n-    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: defining type: DefId(0/1:42 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]::{{closure}}[0]) with closure substs [\n-                '_#1r,\n-                '_#2r,\n-                '_#3r,\n-                T,\n-                i32,\n-                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n-            ]\n-    = note: number of external vids: 5\n-    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:101:29\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:42 ~ projection_two_region_trait_bound_closure[317d]::elements_outlive2[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               '_#3r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n+           ]\n+   = note: number of external vids: 5\n+   = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n note: No external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:96:1\n@@ -225,19 +225,19 @@ LL | | }\n            ]\n \n note: External requirements\n-   --> $DIR/projection-two-region-trait-bound-closure.rs:109:29\n-    |\n-109 |     with_signature(cell, t, |cell, t| require(cell, t));\n-    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: defining type: DefId(0/1:46 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]::{{closure}}[0]) with closure substs [\n-                '_#1r,\n-                T,\n-                i32,\n-                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n-            ]\n-    = note: number of external vids: 3\n-    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:109:29\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:46 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+           ]\n+   = note: number of external vids: 3\n+   = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n error: free region `ReEarlyBound(0, 'b)` does not outlive free region `ReFree(DefId(0/0:13 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]), BrNamed(crate0:DefIndex(1:43), 'a))`\n   --> $DIR/projection-two-region-trait-bound-closure.rs:109:20\n@@ -263,20 +263,20 @@ LL | | }\n            ]\n \n note: External requirements\n-   --> $DIR/projection-two-region-trait-bound-closure.rs:120:29\n-    |\n-120 |     with_signature(cell, t, |cell, t| require(cell, t));\n-    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: defining type: DefId(0/1:50 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]::{{closure}}[0]) with closure substs [\n-                '_#1r,\n-                '_#2r,\n-                T,\n-                i32,\n-                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n-            ]\n-    = note: number of external vids: 4\n-    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:120:29\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:50 ~ projection_two_region_trait_bound_closure[317d]::two_regions_outlive[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               '_#2r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n+           ]\n+   = note: number of external vids: 4\n+   = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n note: No external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:115:1\n@@ -297,19 +297,19 @@ LL | | }\n            ]\n \n note: External requirements\n-   --> $DIR/projection-two-region-trait-bound-closure.rs:132:29\n-    |\n-132 |     with_signature(cell, t, |cell, t| require(cell, t));\n-    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: defining type: DefId(0/1:53 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n-                '_#1r,\n-                T,\n-                i32,\n-                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n-            ]\n-    = note: number of external vids: 3\n-    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:132:29\n+   |\n+LL |     with_signature(cell, t, |cell, t| require(cell, t));\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: defining type: DefId(0/1:53 ~ projection_two_region_trait_bound_closure[317d]::one_region[0]::{{closure}}[0]) with closure substs [\n+               '_#1r,\n+               T,\n+               i32,\n+               extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n+           ]\n+   = note: number of external vids: 3\n+   = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n note: No external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:124:1"}, {"sha": "ab3c400645965509384abaae890dfab5afcbbc43", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -49,7 +49,7 @@ LL | | }\n note: External requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:43:24\n    |\n-43 |     twice(cell, value, |a, b| invoke(a, b));\n+LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: DefId(0/1:17 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs ["}, {"sha": "83d2b959c80165020ee5c2031320f336816b5222", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -65,14 +65,14 @@ LL | | }\n note: External requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:55:26\n    |\n-55 |       with_signature(a, b, |x, y| {\n+LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n-56 | |         // Key point of this test:\n-57 | |         //\n-58 | |         // The *closure* is being type-checked with all of its free\n+LL | |         // Key point of this test:\n+LL | |         //\n+LL | |         // The *closure* is being type-checked with all of its free\n ...  |\n-67 | |         require(&x, &y)\n-68 | |     })\n+LL | |         require(&x, &y)\n+LL | |     })\n    | |_____^\n    |\n    = note: defining type: DefId(0/1:19 ~ ty_param_closure_outlives_from_where_clause[317d]::correct_region[0]::{{closure}}[0]) with closure substs [\n@@ -104,13 +104,13 @@ LL | | }\n note: External requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:76:26\n    |\n-76 |       with_signature(a, b, |x, y| {\n+LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n-77 | |         //~^ ERROR the parameter type `T` may not live long enough\n-78 | |         // See `correct_region`\n-79 | |         require(&x, &y)\n-80 | |         //~^ WARNING not reporting region error due to -Znll\n-81 | |     })\n+LL | |         //~^ ERROR the parameter type `T` may not live long enough\n+LL | |         // See `correct_region`\n+LL | |         require(&x, &y)\n+LL | |         //~^ WARNING not reporting region error due to -Znll\n+LL | |     })\n    | |_____^\n    |\n    = note: defining type: DefId(0/1:23 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]::{{closure}}[0]) with closure substs [\n@@ -156,11 +156,11 @@ LL | | }\n note: External requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:90:26\n    |\n-90 |       with_signature(a, b, |x, y| {\n+LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n-91 | |         // See `correct_region`\n-92 | |         require(&x, &y)\n-93 | |     })\n+LL | |         // See `correct_region`\n+LL | |         require(&x, &y)\n+LL | |     })\n    | |_____^\n    |\n    = note: defining type: DefId(0/1:27 ~ ty_param_closure_outlives_from_where_clause[317d]::outlives_region[0]::{{closure}}[0]) with closure substs ["}, {"sha": "bed94e8f09a9eae7d34ae2a94faf020b2bbe4c99", "filename": "src/test/ui/numeric-fields.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnumeric-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fnumeric-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric-fields.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,7 +1,7 @@\n error[E0560]: struct `S` has no field named `0b1`\n   --> $DIR/numeric-fields.rs:14:15\n    |\n-14 |     let s = S{0b1: 10, 0: 11};\n+LL |     let s = S{0b1: 10, 0: 11};\n    |               ^^^ `S` does not have this field\n    |\n    = note: available fields are: `0`, `1`"}, {"sha": "d300357fa0b625c0887651202e7039f7fb863b20", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -19,15 +19,15 @@ LL |     let y = World::Hello + World::Goodbye;\n error[E0369]: binary operation `+` cannot be applied to type `&str`\n   --> $DIR/issue-39018.rs:21:13\n    |\n-21 |     let x = \"Hello \" + \"World!\".to_owned();\n+LL |     let x = \"Hello \" + \"World!\".to_owned();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `+` can't be used to concatenate a `&str` with a `String`\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n-21 |     let x = \"Hello \".to_owned() + \"World!\".to_owned();\n+LL |     let x = \"Hello \".to_owned() + \"World!\".to_owned();\n    |             ^^^^^^^^^^^^^^^^^^^\n help: you also need to borrow the `String` on the right to get a `&str`\n    |\n-21 |     let x = \"Hello \" + &\"World!\".to_owned();\n+LL |     let x = \"Hello \" + &\"World!\".to_owned();\n    |                        ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors"}, {"sha": "7c276098febd39c13b2ad643ec0d9207174a7894", "filename": "src/test/ui/struct-fields-hints-no-dupe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fstruct-fields-hints-no-dupe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fstruct-fields-hints-no-dupe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-fields-hints-no-dupe.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,7 +1,7 @@\n error[E0560]: struct `A` has no field named `bar`\n   --> $DIR/struct-fields-hints-no-dupe.rs:20:9\n    |\n-20 |         bar : 42,\n+LL |         bar : 42,\n    |         ^^^ field does not exist - did you mean `barr`?\n \n error: aborting due to previous error"}, {"sha": "6e4d30086601a4468a0012d13674dece223e5874", "filename": "src/test/ui/struct-fields-hints.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fstruct-fields-hints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fstruct-fields-hints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-fields-hints.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,7 +1,7 @@\n error[E0560]: struct `A` has no field named `bar`\n   --> $DIR/struct-fields-hints.rs:20:9\n    |\n-20 |         bar : 42,\n+LL |         bar : 42,\n    |         ^^^ field does not exist - did you mean `car`?\n \n error: aborting due to previous error"}, {"sha": "8132cf687a31d04071bd51c7fe079c9c423a8d14", "filename": "src/test/ui/struct-fields-too-many.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fstruct-fields-too-many.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fstruct-fields-too-many.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-fields-too-many.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,7 +1,7 @@\n error[E0560]: struct `BuildData` has no field named `bar`\n   --> $DIR/struct-fields-too-many.rs:18:9\n    |\n-18 |         bar: 0\n+LL |         bar: 0\n    |         ^^^ `BuildData` does not have this field\n    |\n    = note: available fields are: `foo`"}, {"sha": "fb3d8a6756993368c2d899fd9ee0789d2dbb499f", "filename": "src/test/ui/suggest-private-fields.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fsuggest-private-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fsuggest-private-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggest-private-fields.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,27 +1,27 @@\n error[E0560]: struct `xc::B` has no field named `aa`\n   --> $DIR/suggest-private-fields.rs:25:9\n    |\n-25 |         aa: 20,\n+LL |         aa: 20,\n    |         ^^ field does not exist - did you mean `a`?\n \n error[E0560]: struct `xc::B` has no field named `bb`\n   --> $DIR/suggest-private-fields.rs:27:9\n    |\n-27 |         bb: 20,\n+LL |         bb: 20,\n    |         ^^ `xc::B` does not have this field\n    |\n    = note: available fields are: `a`\n \n error[E0560]: struct `A` has no field named `aa`\n   --> $DIR/suggest-private-fields.rs:32:9\n    |\n-32 |         aa: 20,\n+LL |         aa: 20,\n    |         ^^ field does not exist - did you mean `a`?\n \n error[E0560]: struct `A` has no field named `bb`\n   --> $DIR/suggest-private-fields.rs:34:9\n    |\n-34 |         bb: 20,\n+LL |         bb: 20,\n    |         ^^ field does not exist - did you mean `b`?\n \n error: aborting due to 4 previous errors"}, {"sha": "1c13da57b0d047b8d7ec8d8a8297db2f9a28a249", "filename": "src/test/ui/ui-testing-optout.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fui-testing-optout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Fui-testing-optout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fui-testing-optout.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -18,3 +18,4 @@ error[E0412]: cannot find type `F` in this scope\n \n error: aborting due to 3 previous errors\n \n+If you want more information on this error, try using \"rustc --explain E0412\""}, {"sha": "d902ad1629cd5cd4c40df468302a5c4ddf768e75", "filename": "src/test/ui/union/union-fields-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Funion%2Funion-fields-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Funion%2Funion-fields-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-fields-2.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -13,7 +13,7 @@ LL |     let u = U { a: 0, b: 1 }; //~ ERROR union expressions should have exact\n error[E0560]: union `U` has no field named `c`\n   --> $DIR/union-fields-2.rs:20:29\n    |\n-20 |     let u = U { a: 0, b: 1, c: 2 }; //~ ERROR union expressions should have exactly one field\n+LL |     let u = U { a: 0, b: 1, c: 2 }; //~ ERROR union expressions should have exactly one field\n    |                             ^ `U` does not have this field\n    |\n    = note: available fields are: `a`, `b`"}, {"sha": "f2ff38bd0c7ccb17c5a7c5489dff8c74df7ccc53", "filename": "src/test/ui/union/union-suggest-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,7 +1,7 @@\n error[E0560]: union `U` has no field named `principle`\n   --> $DIR/union-suggest-field.rs:20:17\n    |\n-20 |     let u = U { principle: 0 };\n+LL |     let u = U { principle: 0 };\n    |                 ^^^^^^^^^ field does not exist - did you mean `principal`?\n \n error[E0609]: no field `principial` on type `U`"}, {"sha": "e6d2403ac4cec334b41ce08cb61be4e6d018a2d5", "filename": "src/test/ui/unsafe-block-without-braces.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Funsafe-block-without-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f9183d34d411cf51645b91487de4a5191442b1a/src%2Ftest%2Fui%2Funsafe-block-without-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe-block-without-braces.stderr?ref=9f9183d34d411cf51645b91487de4a5191442b1a", "patch": "@@ -1,9 +1,9 @@\n error: expected one of `extern`, `fn`, or `{`, found `std`\n   --> $DIR/unsafe-block-without-braces.rs:13:9\n    |\n-12 |     unsafe //{\n+LL |     unsafe //{\n    |           - expected one of `extern`, `fn`, or `{` here\n-13 |         std::mem::transmute::<f32, u32>(1.0);\n+LL |         std::mem::transmute::<f32, u32>(1.0);\n    |         ^^^ unexpected token\n \n error: aborting due to previous error"}]}