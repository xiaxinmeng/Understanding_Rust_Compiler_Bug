{"sha": "23e9a1def59ae7cc852181e9395cb467ffdbd46e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZTlhMWRlZjU5YWU3Y2M4NTIxODFlOTM5NWNiNDY3ZmZkYmQ0NmU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-15T00:51:12Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-20T20:12:36Z"}, "message": "resolve: Consolidate error reporting for resolved macros in `fn resolve_macro_to_def`", "tree": {"sha": "87be37e28078bf2cb6cff64eaacdfd230836fa4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87be37e28078bf2cb6cff64eaacdfd230836fa4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23e9a1def59ae7cc852181e9395cb467ffdbd46e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23e9a1def59ae7cc852181e9395cb467ffdbd46e", "html_url": "https://github.com/rust-lang/rust/commit/23e9a1def59ae7cc852181e9395cb467ffdbd46e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23e9a1def59ae7cc852181e9395cb467ffdbd46e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a44ee68fbfa9cf436d5a1afe96427c29d2d94b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a44ee68fbfa9cf436d5a1afe96427c29d2d94b9", "html_url": "https://github.com/rust-lang/rust/commit/3a44ee68fbfa9cf436d5a1afe96427c29d2d94b9"}], "stats": {"total": 372, "additions": 173, "deletions": 199}, "files": [{"sha": "7de6358613b04033c932c27d8f2b1a00a7d14865", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -1399,7 +1399,7 @@ pub struct Resolver<'a, 'b: 'a> {\n     proc_mac_errors: Vec<macros::ProcMacError>,\n     /// crate-local macro expanded `macro_export` referred to by a module-relative path\n     macro_expanded_macro_export_errors: BTreeSet<(Span, Span)>,\n-\n+    /// macro-expanded `macro_rules` shadowing existing macros\n     disallowed_shadowing: Vec<&'a LegacyBinding<'a>>,\n \n     arenas: &'a ResolverArenas<'a>,"}, {"sha": "d4d1f91a48ea7d74edde0a1e276c854c1aa5d72f", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 94, "deletions": 112, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -319,9 +319,9 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n         None\n     }\n \n-    fn resolve_invoc(&mut self, invoc: &Invocation, scope: Mark, force: bool)\n-                     -> Result<Option<Lrc<SyntaxExtension>>, Determinacy> {\n-        let (path, macro_kind, derives_in_scope) = match invoc.kind {\n+    fn resolve_macro_invocation(&mut self, invoc: &Invocation, scope: Mark, force: bool)\n+                                -> Result<Option<Lrc<SyntaxExtension>>, Determinacy> {\n+        let (path, kind, derives_in_scope) = match invoc.kind {\n             InvocationKind::Attr { attr: None, .. } =>\n                 return Ok(None),\n             InvocationKind::Attr { attr: Some(ref attr), ref traits, .. } =>\n@@ -331,90 +331,26 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n             InvocationKind::Derive { ref path, .. } =>\n                 (path, MacroKind::Derive, &[][..]),\n         };\n-        let def = self.resolve_macro_to_def(scope, path, macro_kind, derives_in_scope, force)?;\n-\n-        if let Def::Macro(_, MacroKind::ProcMacroStub) = def {\n-            self.report_proc_macro_stub(invoc.span());\n-            return Err(Determinacy::Determined);\n-        } else if let Def::NonMacroAttr(attr_kind) = def {\n-            // Note that not only attributes, but anything in macro namespace can result in a\n-            // `Def::NonMacroAttr` definition (e.g. `inline!()`), so we must report the error\n-            // below for these cases.\n-            let is_attr_invoc =\n-                if let InvocationKind::Attr { .. } = invoc.kind { true } else { false };\n-            let path = invoc.path().expect(\"no path for non-macro attr\");\n-            match attr_kind {\n-                NonMacroAttrKind::Tool | NonMacroAttrKind::DeriveHelper |\n-                NonMacroAttrKind::Custom if is_attr_invoc => {\n-                    let features = self.session.features_untracked();\n-                    if attr_kind == NonMacroAttrKind::Tool &&\n-                       !features.tool_attributes {\n-                        feature_err(&self.session.parse_sess, \"tool_attributes\",\n-                                    invoc.span(), GateIssue::Language,\n-                                    \"tool attributes are unstable\").emit();\n-                    }\n-                    if attr_kind == NonMacroAttrKind::Custom {\n-                        assert!(path.segments.len() == 1);\n-                        let name = path.segments[0].ident.name.as_str();\n-                        if name.starts_with(\"rustc_\") {\n-                            if !features.rustc_attrs {\n-                                let msg = \"unless otherwise specified, attributes with the prefix \\\n-                                        `rustc_` are reserved for internal compiler diagnostics\";\n-                                feature_err(&self.session.parse_sess, \"rustc_attrs\", invoc.span(),\n-                                            GateIssue::Language, &msg).emit();\n-                            }\n-                        } else if name.starts_with(\"derive_\") {\n-                            if !features.custom_derive {\n-                                feature_err(&self.session.parse_sess, \"custom_derive\", invoc.span(),\n-                                            GateIssue::Language, EXPLAIN_DERIVE_UNDERSCORE).emit();\n-                            }\n-                        } else if !features.custom_attribute {\n-                            let msg = format!(\"The attribute `{}` is currently unknown to the \\\n-                                               compiler and may have meaning added to it in the \\\n-                                               future\", path);\n-                            feature_err(&self.session.parse_sess, \"custom_attribute\", invoc.span(),\n-                                        GateIssue::Language, &msg).emit();\n-                        }\n-                    }\n \n-                    return Ok(Some(Lrc::new(SyntaxExtension::NonMacroAttr {\n-                        mark_used: attr_kind == NonMacroAttrKind::Tool,\n-                    })));\n-                }\n-                _ => {\n-                    self.report_non_macro_attr(path.span, def);\n-                    return Err(Determinacy::Determined);\n-                }\n-            }\n+        let (def, ext) = self.resolve_macro_to_def(path, kind, scope, derives_in_scope, force)?;\n+\n+        if let Def::Macro(def_id, _) = def {\n+            self.macro_defs.insert(invoc.expansion_data.mark, def_id);\n+            let normal_module_def_id =\n+                self.macro_def_scope(invoc.expansion_data.mark).normal_ancestor_id;\n+            self.definitions.add_parent_module_of_macro_def(invoc.expansion_data.mark,\n+                                                            normal_module_def_id);\n+            invoc.expansion_data.mark.set_default_transparency(ext.default_transparency());\n+            invoc.expansion_data.mark.set_is_builtin(def_id.krate == BUILTIN_MACROS_CRATE);\n         }\n-        let def_id = def.def_id();\n-\n-        self.macro_defs.insert(invoc.expansion_data.mark, def_id);\n-        let normal_module_def_id =\n-            self.macro_def_scope(invoc.expansion_data.mark).normal_ancestor_id;\n-        self.definitions.add_parent_module_of_macro_def(invoc.expansion_data.mark,\n-                                                        normal_module_def_id);\n-\n-        self.unused_macros.remove(&def_id);\n-        let ext = self.get_macro(def);\n-        invoc.expansion_data.mark.set_default_transparency(ext.default_transparency());\n-        invoc.expansion_data.mark.set_is_builtin(def_id.krate == BUILTIN_MACROS_CRATE);\n+\n         Ok(Some(ext))\n     }\n \n-    fn resolve_macro(&mut self, scope: Mark, path: &ast::Path, kind: MacroKind, force: bool)\n-                     -> Result<Lrc<SyntaxExtension>, Determinacy> {\n-        self.resolve_macro_to_def(scope, path, kind, &[], force).and_then(|def| {\n-            if let Def::Macro(_, MacroKind::ProcMacroStub) = def {\n-                self.report_proc_macro_stub(path.span);\n-                return Err(Determinacy::Determined);\n-            } else if let Def::NonMacroAttr(..) = def {\n-                self.report_non_macro_attr(path.span, def);\n-                return Err(Determinacy::Determined);\n-            }\n-            self.unused_macros.remove(&def.def_id());\n-            Ok(self.get_macro(def))\n-        })\n+    fn resolve_macro_path(&mut self, path: &ast::Path, kind: MacroKind, scope: Mark,\n+                          derives_in_scope: &[ast::Path], force: bool)\n+                          -> Result<Lrc<SyntaxExtension>, Determinacy> {\n+        Ok(self.resolve_macro_to_def(path, kind, scope, derives_in_scope, force)?.1)\n     }\n \n     fn check_unused_macros(&self) {\n@@ -436,43 +372,89 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n }\n \n impl<'a, 'cl> Resolver<'a, 'cl> {\n-    fn report_proc_macro_stub(&self, span: Span) {\n-        self.session.span_err(span,\n-                              \"can't use a procedural macro from the same crate that defines it\");\n-    }\n-\n-    fn report_non_macro_attr(&self, span: Span, def: Def) {\n-        self.session.span_err(span, &format!(\"expected a macro, found {}\", def.kind_name()));\n-    }\n-\n-    fn resolve_macro_to_def(&mut self, scope: Mark, path: &ast::Path, kind: MacroKind,\n+    fn resolve_macro_to_def(&mut self, path: &ast::Path, kind: MacroKind, scope: Mark,\n                             derives_in_scope: &[ast::Path], force: bool)\n-                            -> Result<Def, Determinacy> {\n-        let def = self.resolve_macro_to_def_inner(scope, path, kind, derives_in_scope, force);\n+                            -> Result<(Def, Lrc<SyntaxExtension>), Determinacy> {\n+        let def = self.resolve_macro_to_def_inner(path, kind, scope, derives_in_scope, force);\n+\n+        // Report errors and enforce feature gates for the resolved macro.\n         if def != Err(Determinacy::Undetermined) {\n             // Do not report duplicated errors on every undetermined resolution.\n-            path.segments.iter().find(|segment| segment.args.is_some()).map(|segment| {\n-                self.session.span_err(segment.args.as_ref().unwrap().span(),\n-                                      \"generic arguments in macro path\");\n-            });\n+            for segment in &path.segments {\n+                if let Some(args) = &segment.args {\n+                    self.session.span_err(args.span(), \"generic arguments in macro path\");\n+                }\n+            }\n         }\n-        if kind != MacroKind::Bang && path.segments.len() > 1 &&\n-           def != Ok(Def::NonMacroAttr(NonMacroAttrKind::Tool)) {\n-            if !self.session.features_untracked().proc_macro_path_invoc {\n-                emit_feature_err(\n-                    &self.session.parse_sess,\n-                    \"proc_macro_path_invoc\",\n-                    path.span,\n-                    GateIssue::Language,\n-                    \"paths of length greater than one in macro invocations are \\\n-                     currently unstable\",\n-                );\n+\n+        let def = def?;\n+\n+        if path.segments.len() > 1 {\n+            if kind != MacroKind::Bang {\n+                if def != Def::NonMacroAttr(NonMacroAttrKind::Tool) &&\n+                   !self.session.features_untracked().proc_macro_path_invoc {\n+                    let msg = format!(\"non-ident {} paths are unstable\", kind.descr());\n+                    emit_feature_err(&self.session.parse_sess, \"proc_macro_path_invoc\",\n+                                     path.span, GateIssue::Language, &msg);\n+                }\n             }\n         }\n-        def\n+\n+        match def {\n+            Def::Macro(def_id, macro_kind) => {\n+                self.unused_macros.remove(&def_id);\n+                if macro_kind == MacroKind::ProcMacroStub {\n+                    let msg = \"can't use a procedural macro from the same crate that defines it\";\n+                    self.session.span_err(path.span, msg);\n+                    return Err(Determinacy::Determined);\n+                }\n+            }\n+            Def::NonMacroAttr(attr_kind) => {\n+                if kind == MacroKind::Attr {\n+                    let features = self.session.features_untracked();\n+                    if attr_kind == NonMacroAttrKind::Tool && !features.tool_attributes {\n+                        feature_err(&self.session.parse_sess, \"tool_attributes\", path.span,\n+                                    GateIssue::Language, \"tool attributes are unstable\").emit();\n+                    }\n+                    if attr_kind == NonMacroAttrKind::Custom {\n+                        assert!(path.segments.len() == 1);\n+                        let name = path.segments[0].ident.name.as_str();\n+                        if name.starts_with(\"rustc_\") {\n+                            if !features.rustc_attrs {\n+                                let msg = \"unless otherwise specified, attributes with the prefix \\\n+                                           `rustc_` are reserved for internal compiler diagnostics\";\n+                                feature_err(&self.session.parse_sess, \"rustc_attrs\", path.span,\n+                                            GateIssue::Language, &msg).emit();\n+                            }\n+                        } else if name.starts_with(\"derive_\") {\n+                            if !features.custom_derive {\n+                                feature_err(&self.session.parse_sess, \"custom_derive\", path.span,\n+                                            GateIssue::Language, EXPLAIN_DERIVE_UNDERSCORE).emit();\n+                            }\n+                        } else if !features.custom_attribute {\n+                            let msg = format!(\"The attribute `{}` is currently unknown to the \\\n+                                               compiler and may have meaning added to it in the \\\n+                                               future\", path);\n+                            feature_err(&self.session.parse_sess, \"custom_attribute\", path.span,\n+                                        GateIssue::Language, &msg).emit();\n+                        }\n+                    }\n+                } else {\n+                    // Not only attributes, but anything in macro namespace can result in\n+                    // `Def::NonMacroAttr` definition (e.g. `inline!()`), so we must report\n+                    // an error for those cases.\n+                    let msg = format!(\"expected a macro, found {}\", def.kind_name());\n+                    self.session.span_err(path.span, &msg);\n+                    return Err(Determinacy::Determined);\n+                }\n+            }\n+            _ => panic!(\"expected `Def::Macro` or `Def::NonMacroAttr`\"),\n+        }\n+\n+        Ok((def, self.get_macro(def)))\n     }\n \n-    pub fn resolve_macro_to_def_inner(&mut self, scope: Mark, path: &ast::Path, kind: MacroKind,\n+    pub fn resolve_macro_to_def_inner(&mut self, path: &ast::Path, kind: MacroKind, scope: Mark,\n                                       derives_in_scope: &[ast::Path], force: bool)\n                                       -> Result<Def, Determinacy> {\n         let ast::Path { ref segments, span } = *path;\n@@ -550,7 +532,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n         enum ConvertToDeriveHelper { Yes, No, DontKnow }\n         let mut convert_to_derive_helper = ConvertToDeriveHelper::No;\n         for derive in derives_in_scope {\n-            match self.resolve_macro(scope, derive, MacroKind::Derive, force) {\n+            match self.resolve_macro_path(derive, MacroKind::Derive, scope, &[], force) {\n                 Ok(ext) => if let SyntaxExtension::ProcMacroDerive(_, ref inert_attrs, _) = *ext {\n                     if inert_attrs.contains(&path[0].name) {\n                         convert_to_derive_helper = ConvertToDeriveHelper::Yes;"}, {"sha": "c00d67aaab6b44f2ecb682ad6bfcbea45be21137", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -403,9 +403,7 @@ fn macro_resolve(cx: &DocContext, path_str: &str) -> Option<Def> {\n     let path = ast::Path { segments: vec![segment], span: DUMMY_SP };\n     let mut resolver = cx.resolver.borrow_mut();\n     let mark = Mark::root();\n-    let res = resolver\n-        .resolve_macro_to_def_inner(mark, &path, MacroKind::Bang, &[], false);\n-    if let Ok(def) = res {\n+    if let Ok(def) = resolver.resolve_macro_to_def_inner(&path, MacroKind::Bang, mark, &[], false) {\n         if let SyntaxExtension::DeclMacro { .. } = *resolver.get_macro(def) {\n             return Some(def);\n         }"}, {"sha": "c9925b41498cff95d32e8f1ebb2af21085b40758", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -727,10 +727,12 @@ pub trait Resolver {\n     fn find_legacy_attr_invoc(&mut self, attrs: &mut Vec<Attribute>, allow_derive: bool)\n                               -> Option<Attribute>;\n \n-    fn resolve_invoc(&mut self, invoc: &Invocation, scope: Mark, force: bool)\n-                     -> Result<Option<Lrc<SyntaxExtension>>, Determinacy>;\n-    fn resolve_macro(&mut self, scope: Mark, path: &ast::Path, kind: MacroKind, force: bool)\n-                     -> Result<Lrc<SyntaxExtension>, Determinacy>;\n+    fn resolve_macro_invocation(&mut self, invoc: &Invocation, scope: Mark, force: bool)\n+                                -> Result<Option<Lrc<SyntaxExtension>>, Determinacy>;\n+    fn resolve_macro_path(&mut self, path: &ast::Path, kind: MacroKind, scope: Mark,\n+                          derives_in_scope: &[ast::Path], force: bool)\n+                          -> Result<Lrc<SyntaxExtension>, Determinacy>;\n+\n     fn check_unused_macros(&self);\n }\n \n@@ -761,12 +763,13 @@ impl Resolver for DummyResolver {\n     fn resolve_imports(&mut self) {}\n     fn find_legacy_attr_invoc(&mut self, _attrs: &mut Vec<Attribute>, _allow_derive: bool)\n                               -> Option<Attribute> { None }\n-    fn resolve_invoc(&mut self, _invoc: &Invocation, _scope: Mark, _force: bool)\n-                     -> Result<Option<Lrc<SyntaxExtension>>, Determinacy> {\n+    fn resolve_macro_invocation(&mut self, _invoc: &Invocation, _scope: Mark, _force: bool)\n+                                -> Result<Option<Lrc<SyntaxExtension>>, Determinacy> {\n         Err(Determinacy::Determined)\n     }\n-    fn resolve_macro(&mut self, _scope: Mark, _path: &ast::Path, _kind: MacroKind,\n-                     _force: bool) -> Result<Lrc<SyntaxExtension>, Determinacy> {\n+    fn resolve_macro_path(&mut self, _path: &ast::Path, _kind: MacroKind, _scope: Mark,\n+                          _derives_in_scope: &[ast::Path], _force: bool)\n+                          -> Result<Lrc<SyntaxExtension>, Determinacy> {\n         Err(Determinacy::Determined)\n     }\n     fn check_unused_macros(&self) {}"}, {"sha": "66be1b0ae751367bea8023af9f84ff461625f9d4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -243,15 +243,6 @@ impl Invocation {\n             InvocationKind::Derive { ref path, .. } => path.span,\n         }\n     }\n-\n-    pub fn path(&self) -> Option<&Path> {\n-        match self.kind {\n-            InvocationKind::Bang { ref mac, .. } => Some(&mac.node.path),\n-            InvocationKind::Attr { attr: Some(ref attr), .. } => Some(&attr.path),\n-            InvocationKind::Attr { attr: None, .. } => None,\n-            InvocationKind::Derive { ref path, .. } => Some(path),\n-        }\n-    }\n }\n \n pub struct MacroExpander<'a, 'b:'a> {\n@@ -343,7 +334,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n             let scope =\n                 if self.monotonic { invoc.expansion_data.mark } else { orig_expansion_data.mark };\n-            let ext = match self.cx.resolver.resolve_invoc(&invoc, scope, force) {\n+            let ext = match self.cx.resolver.resolve_macro_invocation(&invoc, scope, force) {\n                 Ok(ext) => Some(ext),\n                 Err(Determinacy::Determined) => None,\n                 Err(Determinacy::Undetermined) => {\n@@ -393,8 +384,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     for path in &traits {\n                         let mark = Mark::fresh(self.cx.current_expansion.mark);\n                         derives.push(mark);\n-                        let item = match self.cx.resolver.resolve_macro(\n-                                Mark::root(), path, MacroKind::Derive, false) {\n+                        let item = match self.cx.resolver.resolve_macro_path(\n+                                path, MacroKind::Derive, Mark::root(), &[], false) {\n                             Ok(ext) => match *ext {\n                                 BuiltinDerive(..) => item_with_markers.clone(),\n                                 _ => item.clone(),"}, {"sha": "96f68341db7a7ff5632e8409abca46ae9ec7f1d8", "filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-gates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fproc-macro-gates.rs?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -22,7 +22,7 @@ extern crate proc_macro_gates as foo;\n \n use foo::*;\n \n-#[foo::a] //~ ERROR: paths of length greater than one\n+#[foo::a] //~ ERROR: non-ident attribute macro paths are unstable\n fn _test() {}\n \n fn _test_inner() {"}, {"sha": "046e7dc8bfe10c2abe480d9422d99ef596b95a53", "filename": "src/test/ui-fulldeps/proc-macro/macro-namespace-reserved-2.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -2,37 +2,37 @@ error: can't use a procedural macro from the same crate that defines it\n   --> $DIR/macro-namespace-reserved-2.rs:34:5\n    |\n LL |     my_macro!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n-   |     ^^^^^^^^^^^^\n+   |     ^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n   --> $DIR/macro-namespace-reserved-2.rs:37:5\n    |\n LL |     my_macro_attr!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n   --> $DIR/macro-namespace-reserved-2.rs:40:5\n    |\n LL |     MyTrait!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:43:1\n+  --> $DIR/macro-namespace-reserved-2.rs:44:3\n    |\n LL | #[my_macro] //~ ERROR can't use a procedural macro from the same crate that defines it\n-   | ^^^^^^^^^^^\n+   |   ^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:45:1\n+  --> $DIR/macro-namespace-reserved-2.rs:46:3\n    |\n LL | #[my_macro_attr] //~ ERROR can't use a procedural macro from the same crate that defines it\n-   | ^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:47:1\n+  --> $DIR/macro-namespace-reserved-2.rs:48:3\n    |\n LL | #[MyTrait] //~ ERROR can't use a procedural macro from the same crate that defines it\n-   | ^^^^^^^^^^\n+   |   ^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n   --> $DIR/macro-namespace-reserved-2.rs:50:10"}, {"sha": "0f51c7d68c642f2a81c8cdbf954973345906510f", "filename": "src/test/ui/cfg-attr-unknown-attribute-macro-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-attr-unknown-attribute-macro-expansion.stderr?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -2,7 +2,7 @@ error[E0658]: The attribute `unknown` is currently unknown to the compiler and m\n   --> $DIR/cfg-attr-unknown-attribute-macro-expansion.rs:13:27\n    |\n LL |         #[cfg_attr(all(), unknown)] //~ ERROR `unknown` is currently unknown\n-   |                           ^^^^^^^^\n+   |                           ^^^^^^^\n ...\n LL | foo!();\n    | ------- in this macro invocation"}, {"sha": "6ecad7d79b86772d649cdf8dbf37aecf4ba390b7", "filename": "src/test/ui/custom_attribute.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Fcustom_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Fcustom_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom_attribute.stderr?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -1,24 +1,24 @@\n error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/custom_attribute.rs:13:1\n+  --> $DIR/custom_attribute.rs:13:3\n    |\n LL | #[foo] //~ ERROR The attribute `foo`\n-   | ^^^^^^\n+   |   ^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/custom_attribute.rs:15:5\n+  --> $DIR/custom_attribute.rs:15:7\n    |\n LL |     #[foo] //~ ERROR The attribute `foo`\n-   |     ^^^^^^\n+   |       ^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/custom_attribute.rs:17:5\n+  --> $DIR/custom_attribute.rs:17:7\n    |\n LL |     #[foo] //~ ERROR The attribute `foo`\n-   |     ^^^^^^\n+   |       ^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n "}, {"sha": "e60e9a342a99c39bf88f225d53eb70678f3f19d9", "filename": "src/test/ui/feature-gates/feature-gate-custom_attribute.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute.stderr?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -1,104 +1,104 @@\n error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute.rs:17:1\n+  --> $DIR/feature-gate-custom_attribute.rs:17:3\n    |\n LL | #[fake_attr] //~ ERROR attribute `fake_attr` is currently unknown\n-   | ^^^^^^^^^^^^\n+   |   ^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute.rs:18:1\n+  --> $DIR/feature-gate-custom_attribute.rs:18:3\n    |\n LL | #[fake_attr(100)] //~ ERROR attribute `fake_attr` is currently unknown\n-   | ^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute.rs:19:1\n+  --> $DIR/feature-gate-custom_attribute.rs:19:3\n    |\n LL | #[fake_attr(1, 2, 3)] //~ ERROR attribute `fake_attr` is currently unknown\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute.rs:20:1\n+  --> $DIR/feature-gate-custom_attribute.rs:20:3\n    |\n LL | #[fake_attr(\"hello\")] //~ ERROR attribute `fake_attr` is currently unknown\n-   | ^^^^^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute.rs:21:1\n+  --> $DIR/feature-gate-custom_attribute.rs:21:3\n    |\n LL | #[fake_attr(name = \"hello\")] //~ ERROR attribute `fake_attr` is currently unknown\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute.rs:22:1\n+  --> $DIR/feature-gate-custom_attribute.rs:22:3\n    |\n LL | #[fake_attr(1, \"hi\", key = 12, true, false)] //~ ERROR attribute `fake_attr` is currently unknown\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute.rs:23:1\n+  --> $DIR/feature-gate-custom_attribute.rs:23:3\n    |\n LL | #[fake_attr(key = \"hello\", val = 10)] //~ ERROR attribute `fake_attr` is currently unknown\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute.rs:24:1\n+  --> $DIR/feature-gate-custom_attribute.rs:24:3\n    |\n LL | #[fake_attr(key(\"hello\"), val(10))] //~ ERROR attribute `fake_attr` is currently unknown\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute.rs:25:1\n+  --> $DIR/feature-gate-custom_attribute.rs:25:3\n    |\n LL | #[fake_attr(enabled = true, disabled = false)] //~ ERROR attribute `fake_attr` is currently unknown\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute.rs:26:1\n+  --> $DIR/feature-gate-custom_attribute.rs:26:3\n    |\n LL | #[fake_attr(true)] //~ ERROR attribute `fake_attr` is currently unknown\n-   | ^^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute.rs:27:1\n+  --> $DIR/feature-gate-custom_attribute.rs:27:3\n    |\n LL | #[fake_attr(pi = 3.14159)] //~ ERROR attribute `fake_attr` is currently unknown\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `fake_attr` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute.rs:28:1\n+  --> $DIR/feature-gate-custom_attribute.rs:28:3\n    |\n LL | #[fake_attr(b\"hi\")] //~ ERROR attribute `fake_attr` is currently unknown\n-   | ^^^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `fake_doc` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/feature-gate-custom_attribute.rs:29:1\n+  --> $DIR/feature-gate-custom_attribute.rs:29:3\n    |\n LL | #[fake_doc(r\"doc\")] //~ ERROR attribute `fake_doc` is currently unknown\n-   | ^^^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n "}, {"sha": "0979372daea3066d56029ca486e5b861a4b58ede", "filename": "src/test/ui/feature-gates/feature-gate-custom_derive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_derive.stderr?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: attributes of the form `#[derive_*]` are reserved for the compiler (see issue #29644)\n-  --> $DIR/feature-gate-custom_derive.rs:11:1\n+  --> $DIR/feature-gate-custom_derive.rs:11:3\n    |\n LL | #[derive_Clone]\n-   | ^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_derive)] to the crate attributes to enable\n "}, {"sha": "882549c1eafbadbab9c00b059756ed0f1b43ec02", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics (see issue #29642)\n-  --> $DIR/feature-gate-rustc-attrs.rs:15:1\n+  --> $DIR/feature-gate-rustc-attrs.rs:15:3\n    |\n LL | #[rustc_foo]\n-   | ^^^^^^^^^^^^\n+   |   ^^^^^^^^^\n    |\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n "}, {"sha": "b024059d4501424b9720683b5f154e9fa6ccf0d0", "filename": "src/test/ui/feature-gates/feature-gate-tool_attributes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tool_attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tool_attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-tool_attributes.stderr?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: tool attributes are unstable (see issue #44690)\n-  --> $DIR/feature-gate-tool_attributes.rs:12:5\n+  --> $DIR/feature-gate-tool_attributes.rs:12:7\n    |\n LL |     #[rustfmt::skip] //~ ERROR tool attributes are unstable\n-   |     ^^^^^^^^^^^^^^^^\n+   |       ^^^^^^^^^^^^^\n    |\n    = help: add #![feature(tool_attributes)] to the crate attributes to enable\n "}, {"sha": "f930217fe9ef5e0d311c84a9524cb8a194e81e9c", "filename": "src/test/ui/issues/issue-32655.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -1,19 +1,19 @@\n error[E0658]: attributes of the form `#[derive_*]` are reserved for the compiler (see issue #29644)\n-  --> $DIR/issue-32655.rs:16:9\n+  --> $DIR/issue-32655.rs:16:11\n    |\n LL |         #[derive_Clone] //~ ERROR attributes of the form\n-   |         ^^^^^^^^^^^^^^^\n+   |           ^^^^^^^^^^^^\n ...\n LL | foo!();\n    | ------- in this macro invocation\n    |\n    = help: add #![feature(custom_derive)] to the crate attributes to enable\n \n error[E0658]: attributes of the form `#[derive_*]` are reserved for the compiler (see issue #29644)\n-  --> $DIR/issue-32655.rs:28:5\n+  --> $DIR/issue-32655.rs:28:7\n    |\n LL |     #[derive_Clone] //~ ERROR attributes of the form\n-   |     ^^^^^^^^^^^^^^^\n+   |       ^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_derive)] to the crate attributes to enable\n "}, {"sha": "6c9d1eac3568436aa9788aa2dc7e1bf31db2324a", "filename": "src/test/ui/issues/issue-49074.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49074.stderr?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: The attribute `marco_use` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/issue-49074.rs:13:1\n+  --> $DIR/issue-49074.rs:13:3\n    |\n LL | #[marco_use] // typo\n-   | ^^^^^^^^^^^^\n+   |   ^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n "}, {"sha": "8f954158a6315cad8a815ffd46e8bc849fe59f26", "filename": "src/test/ui/macros/macro-reexport-removed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Fmacros%2Fmacro-reexport-removed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Fmacros%2Fmacro-reexport-removed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-reexport-removed.stderr?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -11,10 +11,10 @@ LL | #![feature(macro_reexport)] //~ ERROR feature has been removed\n    |            ^^^^^^^^^^^^^^\n \n error[E0658]: The attribute `macro_reexport` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/macro-reexport-removed.rs:15:1\n+  --> $DIR/macro-reexport-removed.rs:15:3\n    |\n LL | #[macro_reexport(macro_one)] //~ ERROR attribute `macro_reexport` is currently unknown\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n "}, {"sha": "efcd1ec67d7e9491a5d88a53edee7a984bfd8bab", "filename": "src/test/ui/reserved/reserved-attr-on-macro.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics (see issue #29642)\n-  --> $DIR/reserved-attr-on-macro.rs:11:1\n+  --> $DIR/reserved-attr-on-macro.rs:11:3\n    |\n LL | #[rustc_attribute_should_be_reserved] //~ ERROR attributes with the prefix `rustc_` are reserved\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n "}, {"sha": "e7dd8e7aa8fa073c1510131cb506e1b48a54624d", "filename": "src/test/ui/span/issue-36530.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/23e9a1def59ae7cc852181e9395cb467ffdbd46e/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr?ref=23e9a1def59ae7cc852181e9395cb467ffdbd46e", "patch": "@@ -1,16 +1,16 @@\n error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/issue-36530.rs:11:1\n+  --> $DIR/issue-36530.rs:11:3\n    |\n LL | #[foo] //~ ERROR is currently unknown to the compiler\n-   | ^^^^^^\n+   |   ^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n error[E0658]: The attribute `foo` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n-  --> $DIR/issue-36530.rs:13:5\n+  --> $DIR/issue-36530.rs:13:8\n    |\n LL |     #![foo] //~ ERROR is currently unknown to the compiler\n-   |     ^^^^^^^\n+   |        ^^^\n    |\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n "}]}