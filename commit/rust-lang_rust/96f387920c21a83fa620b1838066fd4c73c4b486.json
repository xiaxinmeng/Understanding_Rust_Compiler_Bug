{"sha": "96f387920c21a83fa620b1838066fd4c73c4b486", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZjM4NzkyMGMyMWE4M2ZhNjIwYjE4MzgwNjZmZDRjNzNjNGI0ODY=", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-05-21T03:46:57Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2020-05-21T04:54:46Z"}, "message": "impl Step for char\n\nEnables Range<char> to be iterable\n\nNote: https://rust.godbolt.org/z/fdveKo\nAn iteration over all char ('\\0'..=char::MAX)\nincludes unreachable panic code currently.\nUpdating RangeInclusive::next to call\nStep::forward_unchecked (which is safe to do\nbut not done yet becuase it wasn't necessary)\nsuccessfully removes the panic from this iteration.", "tree": {"sha": "fca025c1dd18616daaa7dfe407ffc842f1c561d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fca025c1dd18616daaa7dfe407ffc842f1c561d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96f387920c21a83fa620b1838066fd4c73c4b486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96f387920c21a83fa620b1838066fd4c73c4b486", "html_url": "https://github.com/rust-lang/rust/commit/96f387920c21a83fa620b1838066fd4c73c4b486", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96f387920c21a83fa620b1838066fd4c73c4b486/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a7dfda40a3e798bf086bd58cc7e5e09deb808b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7dfda40a3e798bf086bd58cc7e5e09deb808b5", "html_url": "https://github.com/rust-lang/rust/commit/3a7dfda40a3e798bf086bd58cc7e5e09deb808b5"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "6837aab7af1a2439d0292cc38a7f069eaa2667d6", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/96f387920c21a83fa620b1838066fd4c73c4b486/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96f387920c21a83fa620b1838066fd4c73c4b486/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=96f387920c21a83fa620b1838066fd4c73c4b486", "patch": "@@ -1,3 +1,4 @@\n+use crate::char;\n use crate::convert::TryFrom;\n use crate::mem;\n use crate::ops::{self, Add, Sub, Try};\n@@ -400,6 +401,69 @@ step_integer_impls! {\n     wider than usize: [u32 i32], [u64 i64], [u128 i128];\n }\n \n+#[unstable(feature = \"step_trait\", reason = \"recently redesigned\", issue = \"42168\")]\n+unsafe impl Step for char {\n+    #[inline]\n+    fn steps_between(&start: &char, &end: &char) -> Option<usize> {\n+        let start = start as u32;\n+        let end = end as u32;\n+        if start <= end {\n+            let count = end - start + 1;\n+            if start < 0xD800 && 0xE000 <= end {\n+                usize::try_from(count - 0x800).ok()\n+            } else {\n+                usize::try_from(count).ok()\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n+    #[inline]\n+    fn forward_checked(start: char, count: usize) -> Option<char> {\n+        let start = start as u32;\n+        let mut res = Step::forward_checked(start, count)?;\n+        if start < 0xD800 && 0xD800 <= res {\n+            res = Step::forward_checked(res, 0x800)?;\n+        }\n+        if res <= char::MAX as u32 {\n+            Some(unsafe { char::from_u32_unchecked(res) })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    #[inline]\n+    fn backward_checked(start: char, count: usize) -> Option<char> {\n+        let start = start as u32;\n+        let mut res = Step::backward_checked(start, count)?;\n+        if start >= 0xE000 && 0xE000 > res {\n+            res = Step::backward_checked(res, 0x800)?;\n+        }\n+        Some(unsafe { char::from_u32_unchecked(res) })\n+    }\n+\n+    #[inline]\n+    unsafe fn forward_unchecked(start: char, count: usize) -> char {\n+        let start = start as u32;\n+        let mut res = Step::forward_unchecked(start, count);\n+        if start < 0xD800 && 0xD800 <= res {\n+            res = Step::forward_unchecked(res, 0x800);\n+        }\n+        char::from_u32_unchecked(res)\n+    }\n+\n+    #[inline]\n+    unsafe fn backward_unchecked(start: char, count: usize) -> char {\n+        let start = start as u32;\n+        let mut res = Step::backward_unchecked(start, count);\n+        if start >= 0xE000 && 0xE000 > res {\n+            res = Step::backward_unchecked(res, 0x800);\n+        }\n+        char::from_u32_unchecked(res)\n+    }\n+}\n+\n macro_rules! range_exact_iter_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}