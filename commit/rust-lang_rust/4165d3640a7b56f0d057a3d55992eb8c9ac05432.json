{"sha": "4165d3640a7b56f0d057a3d55992eb8c9ac05432", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNjVkMzY0MGE3YjU2ZjBkMDU3YTNkNTU5OTJlYjhjOWFjMDU0MzI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-30T05:32:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-30T17:06:26Z"}, "message": "Add a pass to fold out items that do not belong in the current configuration\n\nThe parser needs to parse unconfigured items into the AST so that they can\nmake the round trip back through the pretty printer, but subsequent passes\nshouldn't care about items not being translated. Running a fold pass after\nparsing is the lowest-impact way to make this work. The performance seems\nfine.\n\nIssue #489", "tree": {"sha": "6e4de59b1a53ea22b3ac967ce2e425414d98b7b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e4de59b1a53ea22b3ac967ce2e425414d98b7b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4165d3640a7b56f0d057a3d55992eb8c9ac05432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4165d3640a7b56f0d057a3d55992eb8c9ac05432", "html_url": "https://github.com/rust-lang/rust/commit/4165d3640a7b56f0d057a3d55992eb8c9ac05432", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4165d3640a7b56f0d057a3d55992eb8c9ac05432/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3483c65b1f7b511e1428e7599aee3fe747e4301a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3483c65b1f7b511e1428e7599aee3fe747e4301a", "html_url": "https://github.com/rust-lang/rust/commit/3483c65b1f7b511e1428e7599aee3fe747e4301a"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "55dcc35a637a9f7a31a2c5be4fb6d111f3c61712", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4165d3640a7b56f0d057a3d55992eb8c9ac05432/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4165d3640a7b56f0d057a3d55992eb8c9ac05432/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=4165d3640a7b56f0d057a3d55992eb8c9ac05432", "patch": "@@ -80,6 +80,8 @@ fn compile_input(session::session sess, eval::env env, str input,\n     auto crate =\n         time(time_passes, \"parsing\", bind parse_input(sess, p, input));\n     if (sess.get_opts().output_type == link::output_type_none) { ret; }\n+    crate = time(time_passes, \"configuration\",\n+                 bind front::config::strip_unconfigured_items(crate));\n     auto ast_map = time(time_passes, \"ast indexing\",\n                         bind middle::ast_map::map_crate(*crate));\n     auto d ="}, {"sha": "04429481b5a1d34466fd13cc07ac1db52d1b5df7", "filename": "src/comp/front/config.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4165d3640a7b56f0d057a3d55992eb8c9ac05432/src%2Fcomp%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4165d3640a7b56f0d057a3d55992eb8c9ac05432/src%2Fcomp%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fconfig.rs?ref=4165d3640a7b56f0d057a3d55992eb8c9ac05432", "patch": "@@ -0,0 +1,68 @@\n+import std::option;\n+import std::vec;\n+import ast;\n+import fold;\n+import attr;\n+\n+export strip_unconfigured_items;\n+\n+// Support conditional compilation by transforming the AST, stripping out\n+// any items that do not belong in the current configuration\n+fn strip_unconfigured_items(@ast::crate crate) -> @ast::crate {\n+    auto cfg = crate.node.config;\n+\n+    auto precursor = rec(fold_mod = bind fold_mod(cfg, _, _)\n+                         with *fold::default_ast_fold());\n+\n+    auto fold = fold::make_fold(precursor);\n+    auto res = @fold.fold_crate(*crate);\n+    // FIXME: This is necessary to break a circular reference\n+    fold::dummy_out(fold);\n+    ret res;\n+}\n+\n+fn filter_item(&ast::crate_cfg cfg,\n+               &@ast::item item) -> option::t[@ast::item] {\n+    if (in_cfg(cfg, item)) {\n+        option::some(item)\n+    } else {\n+        option::none\n+    }\n+}\n+\n+fn fold_mod(&ast::crate_cfg cfg, &ast::_mod m,\n+              fold::ast_fold fld) -> ast::_mod {\n+    auto filter = bind filter_item(cfg, _);\n+    auto filtered_items = vec::filter_map(filter, m.items);\n+    ret rec(view_items=vec::map(fld.fold_view_item, m.view_items),\n+            items=vec::map(fld.fold_item, filtered_items));\n+}\n+\n+// Determine if an item should be translated in the current crate\n+// configuration based on the item's attributes\n+fn in_cfg(&ast::crate_cfg cfg, &@ast::item item) -> bool {\n+\n+    auto item_cfg_attrs = attr::find_attrs_by_name(item.attrs, \"cfg\");\n+\n+    auto item_has_cfg_attrs = vec::len(item_cfg_attrs) > 0u;\n+    if (!item_has_cfg_attrs) { ret true; }\n+\n+    auto item_cfg_metas = attr::attr_metas(item_cfg_attrs);\n+\n+    for (@ast::meta_item cfg_mi in item_cfg_metas) {\n+        if (attr::contains(cfg, cfg_mi)) {\n+            ret true;\n+        }\n+    }\n+\n+    ret false;\n+}\n+\n+\n+// Local Variables:\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:"}, {"sha": "0fb9f2332559a7a0e14b3906eb7ea67c0ab4ec3c", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4165d3640a7b56f0d057a3d55992eb8c9ac05432/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/4165d3640a7b56f0d057a3d55992eb8c9ac05432/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=4165d3640a7b56f0d057a3d55992eb8c9ac05432", "patch": "@@ -57,6 +57,7 @@ mod front {\n     mod parser;\n     mod token;\n     mod eval;\n+    mod config;\n }\n \n mod back {"}]}