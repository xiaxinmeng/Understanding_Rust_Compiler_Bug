{"sha": "e447b3a4a2bf089e5e3a190a532c17a4572ea013", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NDdiM2E0YTJiZjA4OWU1ZTNhMTkwYTUzMmMxN2E0NTcyZWEwMTM=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-09-12T14:32:19Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-02T09:42:39Z"}, "message": "Improve checks for postfix suggestions", "tree": {"sha": "cf5a0b06d5fffb5e95271cd6c818928ff2494b20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf5a0b06d5fffb5e95271cd6c818928ff2494b20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e447b3a4a2bf089e5e3a190a532c17a4572ea013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e447b3a4a2bf089e5e3a190a532c17a4572ea013", "html_url": "https://github.com/rust-lang/rust/commit/e447b3a4a2bf089e5e3a190a532c17a4572ea013", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e447b3a4a2bf089e5e3a190a532c17a4572ea013/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea320141c6f87383880878b91182355c9ad7dc7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea320141c6f87383880878b91182355c9ad7dc7b", "html_url": "https://github.com/rust-lang/rust/commit/ea320141c6f87383880878b91182355c9ad7dc7b"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "5990742548bf73c444f7e42ecee70b97473bec44", "filename": "crates/ide/src/completion/complete_postfix.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e447b3a4a2bf089e5e3a190a532c17a4572ea013/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e447b3a4a2bf089e5e3a190a532c17a4572ea013/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=e447b3a4a2bf089e5e3a190a532c17a4572ea013", "patch": "@@ -211,9 +211,7 @@ pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n     )\n     .add_to(acc);\n \n-    if ctx.is_string_literal {\n-        add_format_like_completions(acc, ctx, &dot_receiver, cap, &receiver_text);\n-    }\n+    add_format_like_completions(acc, ctx, &dot_receiver, cap, &receiver_text);\n }\n \n fn get_receiver_text(receiver: &ast::Expr, receiver_is_ambiguous_float_literal: bool) -> String {"}, {"sha": "6be3c2c925d67583de1c493e1880066cd99a49d7", "filename": "crates/ide/src/completion/complete_postfix/format_like.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e447b3a4a2bf089e5e3a190a532c17a4572ea013/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix%2Fformat_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e447b3a4a2bf089e5e3a190a532c17a4572ea013/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix%2Fformat_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcomplete_postfix%2Fformat_like.rs?ref=e447b3a4a2bf089e5e3a190a532c17a4572ea013", "patch": "@@ -27,7 +27,11 @@ pub(super) fn add_format_like_completions(\n     cap: SnippetCap,\n     receiver_text: &str,\n ) {\n-    assert!(receiver_text.len() >= 2);\n+    if !is_string_literal(receiver_text) {\n+        // It's not a string literal, do not parse input.\n+        return;\n+    }\n+\n     let input = &receiver_text[1..receiver_text.len() - 1];\n \n     let mut parser = FormatStrParser::new(input);\n@@ -42,6 +46,20 @@ pub(super) fn add_format_like_completions(\n     }\n }\n \n+/// Checks whether provided item is a string literal.\n+fn is_string_literal(item: &str) -> bool {\n+    if item.len() < 2 {\n+        return false;\n+    }\n+    if item.chars().nth(0) != Some('\"') || item.chars().nth(item.len() - 1) != Some('\"') {\n+        return false;\n+    }\n+\n+    true\n+}\n+\n+/// Parser for a format-like string. It is more allowing in terms of string contents,\n+/// as we expect variable placeholders to be filled with expressions.\n #[derive(Debug)]\n pub struct FormatStrParser {\n     input: String,\n@@ -127,7 +145,7 @@ impl FormatStrParser {\n     pub fn parse(&mut self) -> Result<(), ()> {\n         let mut current_expr = String::new();\n \n-        let mut placeholders_count = 0;\n+        let mut placeholder_id = 1;\n \n         // Count of open braces inside of an expression.\n         // We assume that user knows what they're doing, thus we treat it like a correct pattern, e.g.\n@@ -163,8 +181,8 @@ impl FormatStrParser {\n                 (State::MaybeExpr, '}') => {\n                     // This is an empty sequence '{}'. Replace it with placeholder.\n                     self.output.push(chr);\n-                    self.extracted_expressions.push(format!(\"${}\", placeholders_count));\n-                    placeholders_count += 1;\n+                    self.extracted_expressions.push(format!(\"${}\", placeholder_id));\n+                    placeholder_id += 1;\n                     self.state = State::NotExpr;\n                 }\n                 (State::MaybeExpr, _) => {"}, {"sha": "101be8eb54b6fd49ba435863c4d1b94875d71dd5", "filename": "crates/ide/src/completion/completion_context.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e447b3a4a2bf089e5e3a190a532c17a4572ea013/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e447b3a4a2bf089e5e3a190a532c17a4572ea013/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=e447b3a4a2bf089e5e3a190a532c17a4572ea013", "patch": "@@ -74,8 +74,6 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) is_pattern_call: bool,\n     /// If this is a macro call, i.e. the () are already there.\n     pub(super) is_macro_call: bool,\n-    /// If this is a string literal, like \"lorem ipsum\".\n-    pub(super) is_string_literal: bool,\n     pub(super) is_path_type: bool,\n     pub(super) has_type_args: bool,\n     pub(super) attribute_under_caret: Option<ast::Attr>,\n@@ -158,7 +156,6 @@ impl<'a> CompletionContext<'a> {\n             is_call: false,\n             is_pattern_call: false,\n             is_macro_call: false,\n-            is_string_literal: false,\n             is_path_type: false,\n             has_type_args: false,\n             dot_receiver_is_ambiguous_float_literal: false,\n@@ -473,12 +470,6 @@ impl<'a> CompletionContext<'a> {\n                 } else {\n                     false\n                 };\n-\n-            self.is_string_literal = if let Some(ast::Expr::Literal(l)) = &self.dot_receiver {\n-                matches!(l.kind(), ast::LiteralKind::String { .. })\n-            } else {\n-                false\n-            };\n         }\n         if let Some(method_call_expr) = ast::MethodCallExpr::cast(parent) {\n             // As above"}]}