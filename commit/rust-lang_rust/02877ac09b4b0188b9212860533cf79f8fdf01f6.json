{"sha": "02877ac09b4b0188b9212860533cf79f8fdf01f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyODc3YWMwOWI0YjAxODhiOTIxMjg2MDUzM2NmNzlmOGZkZjAxZjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T10:11:01Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T10:11:01Z"}, "message": "Lint on 'cfg_attr(,).'", "tree": {"sha": "bae239a0c019b0727d8f8fdc58c3b6aca9929dc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bae239a0c019b0727d8f8fdc58c3b6aca9929dc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02877ac09b4b0188b9212860533cf79f8fdf01f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02877ac09b4b0188b9212860533cf79f8fdf01f6", "html_url": "https://github.com/rust-lang/rust/commit/02877ac09b4b0188b9212860533cf79f8fdf01f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02877ac09b4b0188b9212860533cf79f8fdf01f6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e562b24ae325f5a31b7ba5873e3db426a14e6342", "url": "https://api.github.com/repos/rust-lang/rust/commits/e562b24ae325f5a31b7ba5873e3db426a14e6342", "html_url": "https://github.com/rust-lang/rust/commit/e562b24ae325f5a31b7ba5873e3db426a14e6342"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "1ab367f73c1b31a1da288c8a293fc999d5ee150a", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/02877ac09b4b0188b9212860533cf79f8fdf01f6/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02877ac09b4b0188b9212860533cf79f8fdf01f6/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=02877ac09b4b0188b9212860533cf79f8fdf01f6", "patch": "@@ -91,10 +91,10 @@ impl<'a> StripUnconfigured<'a> {\n     /// is in the original source file. Gives a compiler error if the syntax of\n     /// the attribute is incorrect.\n     fn process_cfg_attr(&mut self, attr: ast::Attribute) -> Vec<ast::Attribute> {\n-        if !attr.check_name(sym::cfg_attr) {\n+        if attr.path != sym::cfg_attr {\n             return vec![attr];\n         }\n-        if attr.tokens.len() == 0 {\n+        if attr.tokens.is_empty() {\n             self.sess.span_diagnostic\n                 .struct_span_err(\n                     attr.span,\n@@ -108,7 +108,7 @@ impl<'a> StripUnconfigured<'a> {\n                        <https://doc.rust-lang.org/reference/conditional-compilation.html\\\n                        #the-cfg_attr-attribute>\")\n                 .emit();\n-            return Vec::new();\n+            return vec![];\n         }\n \n         let (cfg_predicate, expanded_attrs) = match attr.parse(self.sess, |parser| {\n@@ -133,17 +133,18 @@ impl<'a> StripUnconfigured<'a> {\n             Ok(result) => result,\n             Err(mut e) => {\n                 e.emit();\n-                return Vec::new();\n+                return vec![];\n             }\n         };\n \n-        // Check feature gate and lint on zero attributes in source. Even if the feature is gated,\n-        // we still compute as if it wasn't, since the emitted error will stop compilation further\n-        // along the compilation.\n-        if expanded_attrs.len() == 0 {\n-            // FIXME: Emit unused attribute lint here.\n+        // Lint on zero attributes in source.\n+        if expanded_attrs.is_empty() {\n+            return vec![attr];\n         }\n \n+        // At this point we know the attribute is considered used.\n+        attr::mark_used(&attr);\n+\n         if attr::cfg_matches(&cfg_predicate, self.sess, self.features) {\n             // We call `process_cfg_attr` recursively in case there's a\n             // `cfg_attr` inside of another `cfg_attr`. E.g.\n@@ -159,7 +160,7 @@ impl<'a> StripUnconfigured<'a> {\n             }))\n             .collect()\n         } else {\n-            Vec::new()\n+            vec![]\n         }\n     }\n "}]}