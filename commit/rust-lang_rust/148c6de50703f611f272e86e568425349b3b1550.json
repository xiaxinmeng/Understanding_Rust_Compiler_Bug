{"sha": "148c6de50703f611f272e86e568425349b3b1550", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0OGM2ZGU1MDcwM2Y2MTFmMjcyZTg2ZTU2ODQyNTM0OWIzYjE1NTA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-31T09:36:46Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-01-31T09:36:46Z"}, "message": "fix some unaligned reads", "tree": {"sha": "d73779644e57dd1c72e766db0206166020426f59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d73779644e57dd1c72e766db0206166020426f59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/148c6de50703f611f272e86e568425349b3b1550", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/148c6de50703f611f272e86e568425349b3b1550", "html_url": "https://github.com/rust-lang/rust/commit/148c6de50703f611f272e86e568425349b3b1550", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/148c6de50703f611f272e86e568425349b3b1550/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96607d45936c80eead2b1ac89b2c6a658a19489e", "url": "https://api.github.com/repos/rust-lang/rust/commits/96607d45936c80eead2b1ac89b2c6a658a19489e", "html_url": "https://github.com/rust-lang/rust/commit/96607d45936c80eead2b1ac89b2c6a658a19489e"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "833e16a4950fee8be49e5c01f5f9c76652216908", "filename": "src/memory.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/148c6de50703f611f272e86e568425349b3b1550/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c6de50703f611f272e86e568425349b3b1550/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=148c6de50703f611f272e86e568425349b3b1550", "patch": "@@ -474,10 +474,11 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n \n /// Byte accessors\n impl<'a, 'tcx> Memory<'a, 'tcx> {\n-    fn get_bytes_unchecked(&self, ptr: Pointer, size: u64) -> EvalResult<'tcx, &[u8]> {\n+    fn get_bytes_unchecked(&self, ptr: Pointer, size: u64, align: u64) -> EvalResult<'tcx, &[u8]> {\n         if size == 0 {\n             return Ok(&[]);\n         }\n+        self.check_align(ptr, align, size)?;\n         let alloc = self.get(ptr.alloc_id)?;\n         let allocation_size = alloc.bytes.len() as u64;\n         if ptr.offset + size > allocation_size {\n@@ -489,10 +490,11 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         Ok(&alloc.bytes[offset..offset + size as usize])\n     }\n \n-    fn get_bytes_unchecked_mut(&mut self, ptr: Pointer, size: u64) -> EvalResult<'tcx, &mut [u8]> {\n+    fn get_bytes_unchecked_mut(&mut self, ptr: Pointer, size: u64, align: u64) -> EvalResult<'tcx, &mut [u8]> {\n         if size == 0 {\n             return Ok(&mut []);\n         }\n+        self.check_align(ptr, align, size)?;\n         let alloc = self.get_mut(ptr.alloc_id)?;\n         let allocation_size = alloc.bytes.len() as u64;\n         if ptr.offset + size > allocation_size {\n@@ -513,7 +515,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             return Err(EvalError::ReadPointerAsBytes);\n         }\n         self.check_defined(ptr, size)?;\n-        self.get_bytes_unchecked(ptr, size)\n+        self.get_bytes_unchecked(ptr, size, align)\n     }\n \n     fn get_bytes_mut(&mut self, ptr: Pointer, size: u64, align: u64) -> EvalResult<'tcx, &mut [u8]> {\n@@ -523,7 +525,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         self.check_align(ptr, align, size)?;\n         self.clear_relocations(ptr, size)?;\n         self.mark_definedness(ptr, size, true)?;\n-        self.get_bytes_unchecked_mut(ptr, size)\n+        self.get_bytes_unchecked_mut(ptr, size, align)\n     }\n }\n \n@@ -558,7 +560,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         }\n         self.check_relocation_edges(src, size)?;\n \n-        let src_bytes = self.get_bytes_unchecked(src, size)?.as_ptr();\n+        let src_bytes = self.get_bytes_unchecked(src, size, align)?.as_ptr();\n         let dest_bytes = self.get_bytes_mut(dest, size, align)?.as_mut_ptr();\n \n         // SAFE: The above indexing would have panicked if there weren't at least `size` bytes\n@@ -615,7 +617,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         let size = self.pointer_size();\n         self.check_defined(ptr, size)?;\n         let endianess = self.endianess();\n-        let bytes = self.get_bytes_unchecked(ptr, size)?;\n+        let bytes = self.get_bytes_unchecked(ptr, size, size)?;\n         let offset = read_target_uint(endianess, bytes).unwrap();\n         assert_eq!(offset as u64 as u128, offset);\n         let offset = offset as u64;"}, {"sha": "119225f3e369d1cd679f9b9099bed7e4806588bc", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/148c6de50703f611f272e86e568425349b3b1550/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c6de50703f611f272e86e568425349b3b1550/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=148c6de50703f611f272e86e568425349b3b1550", "patch": "@@ -0,0 +1,16 @@\n+#![allow(dead_code, unused_variables)]\n+\n+#[repr(packed)]\n+struct Foo {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn main() {\n+    let foo = Foo {\n+        x: 42,\n+        y: 99,\n+    };\n+    let p = &foo.x;\n+    let i = *p; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n+}\n\\ No newline at end of file"}, {"sha": "5761f23b7dd41a6dc8b4648b58a13df1e9fb0b69", "filename": "tests/compile-fail/reference_to_packed_unsafe.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/148c6de50703f611f272e86e568425349b3b1550/tests%2Fcompile-fail%2Freference_to_packed_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c6de50703f611f272e86e568425349b3b1550/tests%2Fcompile-fail%2Freference_to_packed_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed_unsafe.rs?ref=148c6de50703f611f272e86e568425349b3b1550", "patch": "@@ -0,0 +1,16 @@\n+#![allow(dead_code, unused_variables)]\n+\n+#[repr(packed)]\n+struct Foo {\n+    x: i32,\n+    y: i32,\n+}\n+\n+fn main() {\n+    let foo = Foo {\n+        x: 42,\n+        y: 99,\n+    };\n+    let p: *const i32 = &foo.x;\n+    let x = unsafe { *p + foo.x }; //~ ERROR tried to access memory with alignment 1, but alignment 4 is required\n+}"}]}