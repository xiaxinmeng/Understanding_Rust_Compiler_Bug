{"sha": "467d2c18334eaedb5b8adda7a0b8a8a20d2ccb56", "node_id": "C_kwDOAAsO6NoAKDQ2N2QyYzE4MzM0ZWFlZGI1YjhhZGRhN2EwYjhhOGEyMGQyY2NiNTY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-30T11:26:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-30T11:26:10Z"}, "message": "Rollup merge of #100941 - lyming2007:issue-100584, r=oli-obk\n\nPoint at the string inside literal and mention if we need string inte\u2026\n\n\u2026rpolation\n\n\tmodified:   compiler/rustc_passes/src/liveness.rs", "tree": {"sha": "89f5ed3099c4d90391036fb4767c5fae177503b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89f5ed3099c4d90391036fb4767c5fae177503b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/467d2c18334eaedb5b8adda7a0b8a8a20d2ccb56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjDfPSCRBK7hj4Ov3rIwAA+gwIAEy0nvYsjzPbIEUDIFJgGm8q\no3imu2V+kbEah/nduc5g1KQr5MQMtFvW6S6FxEXwNVRfRqoJ6fN8ofWjfou9kxoj\n9I4CCXPK7iqrbmOvlaiM8XK/brtUqrIR/IeQ9INkbbMhD34w3GcsYSHJY4CVPDKO\n5zaZZHr9ZTE3WNoTF6EPpvevVxGNixOkBk6OuIcb10ssj7922xstmi52NzBQVljv\nSja+74vGpHcNealv5I2k/YvlCCj48C31JgYsgEQlsRv5wl/uXuvgAFeVQcv7FxGd\nomqHVIuEdFIkWU/a3Jskfayr35FS2/1SVy4V/MqOdQIzMWbwrSK1BRKFnGeGWVs=\n=JJVX\n-----END PGP SIGNATURE-----\n", "payload": "tree 89f5ed3099c4d90391036fb4767c5fae177503b7\nparent c57a932c3f1235d93076a3925b226b9bdb9108fc\nparent 39ffabbb40e91f50fb20243b2fd6198b446663c6\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1661858770 +0530\ncommitter GitHub <noreply@github.com> 1661858770 +0530\n\nRollup merge of #100941 - lyming2007:issue-100584, r=oli-obk\n\nPoint at the string inside literal and mention if we need string inte\u2026\n\n\u2026rpolation\n\n\tmodified:   compiler/rustc_passes/src/liveness.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/467d2c18334eaedb5b8adda7a0b8a8a20d2ccb56", "html_url": "https://github.com/rust-lang/rust/commit/467d2c18334eaedb5b8adda7a0b8a8a20d2ccb56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/467d2c18334eaedb5b8adda7a0b8a8a20d2ccb56/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c57a932c3f1235d93076a3925b226b9bdb9108fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c57a932c3f1235d93076a3925b226b9bdb9108fc", "html_url": "https://github.com/rust-lang/rust/commit/c57a932c3f1235d93076a3925b226b9bdb9108fc"}, {"sha": "39ffabbb40e91f50fb20243b2fd6198b446663c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/39ffabbb40e91f50fb20243b2fd6198b446663c6", "html_url": "https://github.com/rust-lang/rust/commit/39ffabbb40e91f50fb20243b2fd6198b446663c6"}], "stats": {"total": 141, "additions": 130, "deletions": 11}, "files": [{"sha": "5b79dd3d3ef25d3a14e0760bcb2587773e14dacd", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 71, "deletions": 11, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/467d2c18334eaedb5b8adda7a0b8a8a20d2ccb56/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467d2c18334eaedb5b8adda7a0b8a8a20d2ccb56/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=467d2c18334eaedb5b8adda7a0b8a8a20d2ccb56", "patch": "@@ -229,6 +229,19 @@ enum VarKind {\n     Upvar(HirId, Symbol),\n }\n \n+struct CollectLitsVisitor<'tcx> {\n+    lit_exprs: Vec<&'tcx hir::Expr<'tcx>>,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for CollectLitsVisitor<'tcx> {\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n+        if let hir::ExprKind::Lit(_) = expr.kind {\n+            self.lit_exprs.push(expr);\n+        }\n+        intravisit::walk_expr(self, expr);\n+    }\n+}\n+\n struct IrMaps<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     live_node_map: HirIdMap<LiveNode>,\n@@ -1333,7 +1346,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n     fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {\n-        self.check_unused_vars_in_pat(&local.pat, None, |spans, hir_id, ln, var| {\n+        self.check_unused_vars_in_pat(&local.pat, None, None, |spans, hir_id, ln, var| {\n             if local.init.is_some() {\n                 self.warn_about_dead_assign(spans, hir_id, ln, var);\n             }\n@@ -1348,7 +1361,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n     }\n \n     fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {\n-        self.check_unused_vars_in_pat(&arm.pat, None, |_, _, _, _| {});\n+        self.check_unused_vars_in_pat(&arm.pat, None, None, |_, _, _, _| {});\n         intravisit::walk_arm(self, arm);\n     }\n }\n@@ -1387,7 +1400,7 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n         }\n \n         hir::ExprKind::Let(let_expr) => {\n-            this.check_unused_vars_in_pat(let_expr.pat, None, |_, _, _, _| {});\n+            this.check_unused_vars_in_pat(let_expr.pat, None, None, |_, _, _, _| {});\n         }\n \n         // no correctness conditions related to liveness\n@@ -1508,20 +1521,26 @@ impl<'tcx> Liveness<'_, 'tcx> {\n \n     fn warn_about_unused_args(&self, body: &hir::Body<'_>, entry_ln: LiveNode) {\n         for p in body.params {\n-            self.check_unused_vars_in_pat(&p.pat, Some(entry_ln), |spans, hir_id, ln, var| {\n-                if !self.live_on_entry(ln, var) {\n-                    self.report_unused_assign(hir_id, spans, var, |name| {\n-                        format!(\"value passed to `{}` is never read\", name)\n-                    });\n-                }\n-            });\n+            self.check_unused_vars_in_pat(\n+                &p.pat,\n+                Some(entry_ln),\n+                Some(body),\n+                |spans, hir_id, ln, var| {\n+                    if !self.live_on_entry(ln, var) {\n+                        self.report_unused_assign(hir_id, spans, var, |name| {\n+                            format!(\"value passed to `{}` is never read\", name)\n+                        });\n+                    }\n+                },\n+            );\n         }\n     }\n \n     fn check_unused_vars_in_pat(\n         &self,\n         pat: &hir::Pat<'_>,\n         entry_ln: Option<LiveNode>,\n+        opt_body: Option<&hir::Body<'_>>,\n         on_used_on_entry: impl Fn(Vec<Span>, HirId, LiveNode, Variable),\n     ) {\n         // In an or-pattern, only consider the variable; any later patterns must have the same\n@@ -1549,7 +1568,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                     hir_ids_and_spans.into_iter().map(|(_, _, ident_span)| ident_span).collect();\n                 on_used_on_entry(spans, id, ln, var);\n             } else {\n-                self.report_unused(hir_ids_and_spans, ln, var, can_remove);\n+                self.report_unused(hir_ids_and_spans, ln, var, can_remove, pat, opt_body);\n             }\n         }\n     }\n@@ -1561,6 +1580,8 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         ln: LiveNode,\n         var: Variable,\n         can_remove: bool,\n+        pat: &hir::Pat<'_>,\n+        opt_body: Option<&hir::Body<'_>>,\n     ) {\n         let first_hir_id = hir_ids_and_spans[0].0;\n \n@@ -1664,6 +1685,9 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                             .collect::<Vec<_>>(),\n                         |lint| {\n                             let mut err = lint.build(&format!(\"unused variable: `{}`\", name));\n+                            if self.has_added_lit_match_name_span(&name, opt_body, &mut err) {\n+                                err.span_label(pat.span, \"unused variable\");\n+                            }\n                             err.multipart_suggestion(\n                                 \"if this is intentional, prefix it with an underscore\",\n                                 non_shorthands,\n@@ -1677,6 +1701,42 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         }\n     }\n \n+    fn has_added_lit_match_name_span(\n+        &self,\n+        name: &str,\n+        opt_body: Option<&hir::Body<'_>>,\n+        err: &mut rustc_errors::DiagnosticBuilder<'_, ()>,\n+    ) -> bool {\n+        let mut has_litstring = false;\n+        let Some(opt_body) = opt_body else {return false;};\n+        let mut visitor = CollectLitsVisitor { lit_exprs: vec![] };\n+        intravisit::walk_body(&mut visitor, opt_body);\n+        for lit_expr in visitor.lit_exprs {\n+            let hir::ExprKind::Lit(litx) = &lit_expr.kind else { continue };\n+            let rustc_ast::LitKind::Str(syb, _) = litx.node else{ continue; };\n+            let name_str: &str = syb.as_str();\n+            let mut name_pa = String::from(\"{\");\n+            name_pa.push_str(&name);\n+            name_pa.push('}');\n+            if name_str.contains(&name_pa) {\n+                err.span_label(\n+                    lit_expr.span,\n+                    \"you might have meant to use string interpolation in this string literal\",\n+                );\n+                err.multipart_suggestion(\n+                    \"string interpolation only works in `format!` invocations\",\n+                    vec![\n+                        (lit_expr.span.shrink_to_lo(), \"format!(\".to_string()),\n+                        (lit_expr.span.shrink_to_hi(), \")\".to_string()),\n+                    ],\n+                    Applicability::MachineApplicable,\n+                );\n+                has_litstring = true;\n+            }\n+        }\n+        has_litstring\n+    }\n+\n     fn warn_about_dead_assign(&self, spans: Vec<Span>, hir_id: HirId, ln: LiveNode, var: Variable) {\n         if !self.live_on_exit(ln, var) {\n             self.report_unused_assign(hir_id, spans, var, |name| {"}, {"sha": "102846563231e25157226b39e7280e1286be9099", "filename": "src/test/ui/type/issue-100584.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/467d2c18334eaedb5b8adda7a0b8a8a20d2ccb56/src%2Ftest%2Fui%2Ftype%2Fissue-100584.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467d2c18334eaedb5b8adda7a0b8a8a20d2ccb56/src%2Ftest%2Fui%2Ftype%2Fissue-100584.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-100584.rs?ref=467d2c18334eaedb5b8adda7a0b8a8a20d2ccb56", "patch": "@@ -0,0 +1,15 @@\n+#![deny(unused)]\n+fn foo(xyza: &str) {\n+//~^ ERROR unused variable: `xyza`\n+    let _ = \"{xyza}\";\n+}\n+\n+fn foo3(xyza: &str) {\n+//~^ ERROR unused variable: `xyza`\n+    let _ = \"aaa{xyza}bbb\";\n+}\n+\n+fn main() {\n+  foo(\"x\");\n+  foo3(\"xx\");\n+}"}, {"sha": "e1db14d1f001bd1dfe18a14d45f297654d1fcf8f", "filename": "src/test/ui/type/issue-100584.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/467d2c18334eaedb5b8adda7a0b8a8a20d2ccb56/src%2Ftest%2Fui%2Ftype%2Fissue-100584.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/467d2c18334eaedb5b8adda7a0b8a8a20d2ccb56/src%2Ftest%2Fui%2Ftype%2Fissue-100584.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-100584.stderr?ref=467d2c18334eaedb5b8adda7a0b8a8a20d2ccb56", "patch": "@@ -0,0 +1,44 @@\n+error: unused variable: `xyza`\n+  --> $DIR/issue-100584.rs:2:8\n+   |\n+LL | fn foo(xyza: &str) {\n+   |        ^^^^ unused variable\n+LL |\n+LL |     let _ = \"{xyza}\";\n+   |             -------- you might have meant to use string interpolation in this string literal\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-100584.rs:1:9\n+   |\n+LL | #![deny(unused)]\n+   |         ^^^^^^\n+   = note: `#[deny(unused_variables)]` implied by `#[deny(unused)]`\n+help: string interpolation only works in `format!` invocations\n+   |\n+LL |     let _ = format!(\"{xyza}\");\n+   |             ++++++++        +\n+help: if this is intentional, prefix it with an underscore\n+   |\n+LL | fn foo(_xyza: &str) {\n+   |        ~~~~~\n+\n+error: unused variable: `xyza`\n+  --> $DIR/issue-100584.rs:7:9\n+   |\n+LL | fn foo3(xyza: &str) {\n+   |         ^^^^ unused variable\n+LL |\n+LL |     let _ = \"aaa{xyza}bbb\";\n+   |             -------------- you might have meant to use string interpolation in this string literal\n+   |\n+help: string interpolation only works in `format!` invocations\n+   |\n+LL |     let _ = format!(\"aaa{xyza}bbb\");\n+   |             ++++++++              +\n+help: if this is intentional, prefix it with an underscore\n+   |\n+LL | fn foo3(_xyza: &str) {\n+   |         ~~~~~\n+\n+error: aborting due to 2 previous errors\n+"}]}