{"sha": "b792258b320fa926f31bd7b5367fd151deea25c4", "node_id": "C_kwDOAAsO6NoAKGI3OTIyNThiMzIwZmE5MjZmMzFiZDdiNTM2N2ZkMTUxZGVlYTI1YzQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-05-05T01:20:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-05T01:20:34Z"}, "message": "Rollup merge of #96619 - akiekintveld:same_mutex_check_relaxed_ordering, r=m-ou-se\n\nRelax memory ordering used in SameMutexCheck\n\n`SameMutexCheck` only requires atomicity for `self.addr`, but does not need ordering of other memory accesses in either the success or failure case. Using `Relaxed`, the code still correctly handles the case when two threads race to store an address.", "tree": {"sha": "3c4e3807019a01d92a02238183020033ca55e4c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c4e3807019a01d92a02238183020033ca55e4c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b792258b320fa926f31bd7b5367fd151deea25c4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJicyZiCRBK7hj4Ov3rIwAAfjAIAHupAx4CZuy3i17sqlRHkRlp\n//z4/CDOEyqubSGRcltSjWkVFd/k65TMfz22YfViSzvJrPiWQj0hL543v65GGxW+\nKSpoJRL6laNZWFnyjakooG/OI99lMZzWvurY6cPXCXnuI6QHmRAQlRG6ZjTH9P9c\nAZf2HDT/aRAdgNE2nUcuCjrRUTtgxh39Z4GMKwMMXDflcGnV/9KRH6W02X3meBt6\nnteJYygoMlhkDZH1Rer1F6UOyRzSrcjejZhkAp1GR8sMZQvew/3LnlQQAMh5/iXj\nuEceKD7mdEkZyc5n8bJl1h6eKUsAsy71HNOqlZ3ojEN56fVjjU/SNf44LuZqhBg=\n=vyfV\n-----END PGP SIGNATURE-----\n", "payload": "tree 3c4e3807019a01d92a02238183020033ca55e4c1\nparent 8385d1713e2507df36f3c33a1eae5539dd6b0f0a\nparent 55a7d18189cfa65a35dacf63ee9e70aedd85e3c4\nauthor Yuki Okushi <jtitor@2k36.org> 1651713634 +0900\ncommitter GitHub <noreply@github.com> 1651713634 +0900\n\nRollup merge of #96619 - akiekintveld:same_mutex_check_relaxed_ordering, r=m-ou-se\n\nRelax memory ordering used in SameMutexCheck\n\n`SameMutexCheck` only requires atomicity for `self.addr`, but does not need ordering of other memory accesses in either the success or failure case. Using `Relaxed`, the code still correctly handles the case when two threads race to store an address.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b792258b320fa926f31bd7b5367fd151deea25c4", "html_url": "https://github.com/rust-lang/rust/commit/b792258b320fa926f31bd7b5367fd151deea25c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b792258b320fa926f31bd7b5367fd151deea25c4/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8385d1713e2507df36f3c33a1eae5539dd6b0f0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8385d1713e2507df36f3c33a1eae5539dd6b0f0a", "html_url": "https://github.com/rust-lang/rust/commit/8385d1713e2507df36f3c33a1eae5539dd6b0f0a"}, {"sha": "55a7d18189cfa65a35dacf63ee9e70aedd85e3c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/55a7d18189cfa65a35dacf63ee9e70aedd85e3c4", "html_url": "https://github.com/rust-lang/rust/commit/55a7d18189cfa65a35dacf63ee9e70aedd85e3c4"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "d0d0d59651895c9fa1af49daffc646790da7f057", "filename": "library/std/src/sys_common/condvar/check.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b792258b320fa926f31bd7b5367fd151deea25c4/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b792258b320fa926f31bd7b5367fd151deea25c4/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fcondvar%2Fcheck.rs?ref=b792258b320fa926f31bd7b5367fd151deea25c4", "patch": "@@ -24,8 +24,14 @@ impl SameMutexCheck {\n     }\n     pub fn verify(&self, mutex: &MovableMutex) {\n         let addr = mutex.raw() as *const imp::Mutex as *const () as *mut _;\n-        match self.addr.compare_exchange(ptr::null_mut(), addr, Ordering::SeqCst, Ordering::SeqCst)\n-        {\n+        // Relaxed is okay here because we never read through `self.addr`, and only use it to\n+        // compare addresses.\n+        match self.addr.compare_exchange(\n+            ptr::null_mut(),\n+            addr,\n+            Ordering::Relaxed,\n+            Ordering::Relaxed,\n+        ) {\n             Ok(_) => {}               // Stored the address\n             Err(n) if n == addr => {} // Lost a race to store the same address\n             _ => panic!(\"attempted to use a condition variable with two mutexes\"),"}]}