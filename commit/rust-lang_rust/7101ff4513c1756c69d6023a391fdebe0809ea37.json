{"sha": "7101ff4513c1756c69d6023a391fdebe0809ea37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMDFmZjQ1MTNjMTc1NmM2OWQ2MDIzYTM5MWZkZWJlMDgwOWVhMzc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:11:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:11:15Z"}, "message": "rollup merge of #23648: steveklabnik/rollup\n\n- Successful merges: #22954, #23119, #23509, #23561, #23590, #23607, #23608, #23618, #23622, #23639, #23641\n- Failed merges: #23401", "tree": {"sha": "c492757de575de639c3b6143e3f75705fef0f47b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c492757de575de639c3b6143e3f75705fef0f47b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7101ff4513c1756c69d6023a391fdebe0809ea37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7101ff4513c1756c69d6023a391fdebe0809ea37", "html_url": "https://github.com/rust-lang/rust/commit/7101ff4513c1756c69d6023a391fdebe0809ea37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7101ff4513c1756c69d6023a391fdebe0809ea37/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcf2ba794ec9522296db1df438e89dc70e447f59", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf2ba794ec9522296db1df438e89dc70e447f59", "html_url": "https://github.com/rust-lang/rust/commit/fcf2ba794ec9522296db1df438e89dc70e447f59"}, {"sha": "6a5b1e9f8ef3b46ad46f9878e5869153f081a32b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5b1e9f8ef3b46ad46f9878e5869153f081a32b", "html_url": "https://github.com/rust-lang/rust/commit/6a5b1e9f8ef3b46ad46f9878e5869153f081a32b"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "506b65525791ee3a24bcd6912fbf6b70a1d05510", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7101ff4513c1756c69d6023a391fdebe0809ea37/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7101ff4513c1756c69d6023a391fdebe0809ea37/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=7101ff4513c1756c69d6023a391fdebe0809ea37", "patch": "@@ -125,26 +125,26 @@ pub struct RangeMut<'a, K: 'a, V: 'a> {\n }\n \n /// A view into a single entry in a map, which may either be vacant or occupied.\n-#[unstable(feature = \"collections\",\n-           reason = \"precise API still under development\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Entry<'a, K:'a, V:'a> {\n     /// A vacant Entry\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Vacant(VacantEntry<'a, K, V>),\n+\n     /// An occupied Entry\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Occupied(OccupiedEntry<'a, K, V>),\n }\n \n /// A vacant Entry.\n-#[unstable(feature = \"collections\",\n-           reason = \"precise API still under development\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct VacantEntry<'a, K:'a, V:'a> {\n     key: K,\n     stack: stack::SearchStack<'a, K, V, node::handle::Edge, node::handle::Leaf>,\n }\n \n /// An occupied Entry.\n-#[unstable(feature = \"collections\",\n-           reason = \"precise API still under development\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OccupiedEntry<'a, K:'a, V:'a> {\n     stack: stack::SearchStack<'a, K, V, node::handle::KV, node::handle::LeafOrInternal>,\n }\n@@ -1143,9 +1143,9 @@ impl<'a, K, V> DoubleEndedIterator for RangeMut<'a, K, V> {\n }\n \n impl<'a, K: Ord, V> Entry<'a, K, V> {\n-    #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n     /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"will soon be replaced by or_insert\")]\n     pub fn get(self) -> Result<&'a mut V, VacantEntry<'a, K, V>> {\n         match self {\n             Occupied(entry) => Ok(entry.into_mut()),"}, {"sha": "eb9e04c5419395c8bbbd9a2e6f349c00ebd3a3d3", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7101ff4513c1756c69d6023a391fdebe0809ea37/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7101ff4513c1756c69d6023a391fdebe0809ea37/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=7101ff4513c1756c69d6023a391fdebe0809ea37", "patch": "@@ -67,26 +67,28 @@ pub struct VecMap<V> {\n }\n \n /// A view into a single entry in a map, which may either be vacant or occupied.\n-#[unstable(feature = \"collections\",\n-           reason = \"precise API still under development\")]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Entry<'a, V:'a> {\n     /// A vacant Entry\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Vacant(VacantEntry<'a, V>),\n+\n     /// An occupied Entry\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Occupied(OccupiedEntry<'a, V>),\n }\n \n /// A vacant Entry.\n-#[unstable(feature = \"collections\",\n-           reason = \"precise API still under development\")]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct VacantEntry<'a, V:'a> {\n     map: &'a mut VecMap<V>,\n     index: usize,\n }\n \n /// An occupied Entry.\n-#[unstable(feature = \"collections\",\n-           reason = \"precise API still under development\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OccupiedEntry<'a, V:'a> {\n     map: &'a mut VecMap<V>,\n     index: usize,\n@@ -651,7 +653,7 @@ impl<V> VecMap<V> {\n \n impl<'a, V> Entry<'a, V> {\n     #[unstable(feature = \"collections\",\n-               reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n+               reason = \"will soon be replaced by or_insert\")]\n     /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant\n     pub fn get(self) -> Result<&'a mut V, VacantEntry<'a, V>> {\n         match self {"}, {"sha": "7de2791baadf04d6bfa892c2802e4e79e8e1c84a", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7101ff4513c1756c69d6023a391fdebe0809ea37/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7101ff4513c1756c69d6023a391fdebe0809ea37/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=7101ff4513c1756c69d6023a391fdebe0809ea37", "patch": "@@ -1339,28 +1339,28 @@ pub struct Drain<'a, K: 'a, V: 'a> {\n }\n \n /// A view into a single occupied location in a HashMap.\n-#[unstable(feature = \"std_misc\",\n-           reason = \"precise API still being fleshed out\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n     elem: FullBucket<K, V, &'a mut RawTable<K, V>>,\n }\n \n /// A view into a single empty location in a HashMap.\n-#[unstable(feature = \"std_misc\",\n-           reason = \"precise API still being fleshed out\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct VacantEntry<'a, K: 'a, V: 'a> {\n     hash: SafeHash,\n     key: K,\n     elem: VacantEntryState<K, V, &'a mut RawTable<K, V>>,\n }\n \n /// A view into a single location in a map, which may be vacant or occupied.\n-#[unstable(feature = \"std_misc\",\n-           reason = \"precise API still being fleshed out\")]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Entry<'a, K: 'a, V: 'a> {\n     /// An occupied Entry.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Occupied(OccupiedEntry<'a, K, V>),\n+\n     /// A vacant Entry.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Vacant(VacantEntry<'a, K, V>),\n }\n \n@@ -1481,10 +1481,10 @@ impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n     #[inline] fn len(&self) -> usize { self.inner.len() }\n }\n \n-#[unstable(feature = \"std_misc\",\n-           reason = \"matches collection reform v2 specification, waiting for dust to settle\")]\n impl<'a, K, V> Entry<'a, K, V> {\n     /// Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant.\n+    #[unstable(feature = \"std_misc\",\n+               reason = \"will soon be replaced by or_insert\")]\n     pub fn get(self) -> Result<&'a mut V, VacantEntry<'a, K, V>> {\n         match self {\n             Occupied(entry) => Ok(entry.into_mut()),"}]}