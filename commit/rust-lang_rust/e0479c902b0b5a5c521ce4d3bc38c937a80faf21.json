{"sha": "e0479c902b0b5a5c521ce4d3bc38c937a80faf21", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNDc5YzkwMmIwYjVhNWM1MjFjZTRkM2JjMzhjOTM3YTgwZmFmMjE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-25T21:08:12Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-25T21:08:12Z"}, "message": "rustc: Add a -save-temps option to save bitcode and write output simultaneously; document command line switches", "tree": {"sha": "ba743009cd446ddfe566d246b4c02ef7dba40019", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba743009cd446ddfe566d246b4c02ef7dba40019"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0479c902b0b5a5c521ce4d3bc38c937a80faf21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0479c902b0b5a5c521ce4d3bc38c937a80faf21", "html_url": "https://github.com/rust-lang/rust/commit/e0479c902b0b5a5c521ce4d3bc38c937a80faf21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0479c902b0b5a5c521ce4d3bc38c937a80faf21/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e102413aadf4cb0e2740b26d249a710ad98cbd14", "url": "https://api.github.com/repos/rust-lang/rust/commits/e102413aadf4cb0e2740b26d249a710ad98cbd14", "html_url": "https://github.com/rust-lang/rust/commit/e102413aadf4cb0e2740b26d249a710ad98cbd14"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "890e69da269e39e267f2a3ea91dd3cdabe1c99e3", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e0479c902b0b5a5c521ce4d3bc38c937a80faf21/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0479c902b0b5a5c521ce4d3bc38c937a80faf21/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=e0479c902b0b5a5c521ce4d3bc38c937a80faf21", "patch": "@@ -62,6 +62,7 @@ fn compile_input(session.session sess,\n                         bool shared,\n                         bool optimize,\n                         bool verify,\n+                        bool save_temps,\n                         trans.output_type ot,\n                         vec[str] library_search_paths) {\n     auto def = tup(0, 0);\n@@ -80,7 +81,7 @@ fn compile_input(session.session sess,\n     // FIXME: uncomment once typestate_check works\n     // crate = typestate_check.check_crate(crate);\n     trans.trans_crate(sess, crate, ty_cx, type_cache, output, shared,\n-                      optimize, verify, ot);\n+                      optimize, verify, save_temps, ot);\n }\n \n fn pretty_print_input(session.session sess,\n@@ -111,6 +112,11 @@ options:\n     -ls                list the symbols defined by a crate file\n     -L <path>          add a directory to the library search path\n     -noverify          suppress LLVM verification step (slight speedup)\n+    -parse-only        parse only; do not compile, assemble, or link\n+    -O                 optimize\n+    -S                 compile only; do not assemble or link\n+    -c                 compile and assemble, but do not link\n+    -save-temps        write intermediate files in addition to normal output\n     -h                 display this message\\n\\n\");\n }\n \n@@ -146,6 +152,7 @@ fn main(vec[str] args) {\n     auto ot = trans.output_type_bitcode;\n     let bool glue = false;\n     let bool verify = true;\n+    let bool save_temps = false;\n \n     // FIXME: Maybe we should support -O0, -O1, -Os, etc\n     let bool optimize = false;\n@@ -183,6 +190,8 @@ fn main(vec[str] args) {\n                     usage(sess, args.(0));\n                     sess.err(\"-o requires an argument\");\n                 }\n+            } else if (_str.eq(arg, \"-save-temps\")) {\n+                save_temps = true;\n             } else if (_str.eq(arg, \"-L\")) {\n                 if (i+1u < len) {\n                     library_search_paths += vec(args.(i+1u));\n@@ -221,10 +230,11 @@ fn main(vec[str] args) {\n         alt (output_file) {\n             case (none[str]) {\n                 middle.trans.make_common_glue(\"glue.bc\", optimize, verify,\n-                                              ot);\n+                                              save_temps, ot);\n             }\n             case (some[str](?s)) {\n-                middle.trans.make_common_glue(s, optimize, verify, ot);\n+                middle.trans.make_common_glue(s, optimize, verify, save_temps,\n+                                              ot);\n             }\n         }\n         ret;\n@@ -250,12 +260,12 @@ fn main(vec[str] args) {\n                         parts += vec(\".bc\");\n                         auto ofile = _str.concat(parts);\n                         compile_input(sess, env, ifile, ofile, shared,\n-                                      optimize, verify, ot,\n+                                      optimize, verify, save_temps, ot,\n                                       library_search_paths);\n                     }\n                     case (some[str](?ofile)) {\n                         compile_input(sess, env, ifile, ofile, shared,\n-                                      optimize, verify, ot,\n+                                      optimize, verify, save_temps, ot,\n                                       library_search_paths);\n                     }\n                 }"}, {"sha": "40294862229f80833cee4ee13fb85f9ba33e9ac9", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 49, "deletions": 6, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e0479c902b0b5a5c521ce4d3bc38c937a80faf21/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0479c902b0b5a5c521ce4d3bc38c937a80faf21/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e0479c902b0b5a5c521ce4d3bc38c937a80faf21", "patch": "@@ -6980,6 +6980,19 @@ tag output_type {\n     output_type_object;\n }\n \n+// Decides what to call an intermediate file, given the name of the output and\n+// the extension to use.\n+fn mk_intermediate_name(str output_path, str extension) -> str {\n+    auto dot_pos = _str.index(output_path, '.' as u8);\n+    auto stem;\n+    if (dot_pos < 0) {\n+        stem = output_path;\n+    } else {\n+        stem = _str.substr(output_path, 0u, dot_pos as uint);\n+    }\n+    ret stem + \".\" + extension;\n+}\n+\n fn is_object_or_assembly(output_type ot) -> bool {\n     if (ot == output_type_assembly) {\n         ret true;\n@@ -6990,12 +7003,29 @@ fn is_object_or_assembly(output_type ot) -> bool {\n     ret false;\n }\n \n-fn run_passes(ModuleRef llmod, bool opt, bool verify, str output,\n-              output_type ot) {\n+fn run_passes(ModuleRef llmod, bool opt, bool verify, bool save_temps,\n+              str output, output_type ot) {\n     auto pm = mk_pass_manager();\n \n     // TODO: run the linter here also, once there are llvm-c bindings for it.\n \n+    // Generate a pre-optimization intermediate file if -save-temps was\n+    // specified.\n+    if (save_temps) {\n+        alt (ot) {\n+            case (output_type_bitcode) {\n+                if (opt) {\n+                    auto filename = mk_intermediate_name(output, \"no-opt.bc\");\n+                    llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(filename));\n+                }\n+            }\n+            case (_) {\n+                auto filename = mk_intermediate_name(output, \"bc\");\n+                llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(filename));\n+            }\n+        }\n+    }\n+\n     // FIXME: This is mostly a copy of the bits of opt's -O2 that are\n     // available in the C api.\n     // FIXME2: We might want to add optmization levels like -O1, -O2, -Os, etc\n@@ -7054,12 +7084,25 @@ fn run_passes(ModuleRef llmod, bool opt, bool verify, str output,\n         llvm.LLVMAddStripDeadPrototypesPass(pm.llpm);\n         llvm.LLVMAddDeadTypeEliminationPass(pm.llpm);\n         llvm.LLVMAddConstantMergePass(pm.llpm);\n+\n+        // Generate a post-optimization intermediate file if -save-temps was\n+        // specified.\n+        if (save_temps) {\n+            alt (ot) {\n+                case (output_type_bitcode) { /* nothing to do */ }\n+                case (_) {\n+                    auto filename = mk_intermediate_name(output, \"opt.bc\");\n+                    llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(filename));\n+                }\n+            }\n+        }\n     }\n \n     if (verify) {\n         llvm.LLVMAddVerifierPass(pm.llpm);\n     }\n \n+    // TODO: Write .s if -c was specified and -save-temps was on.\n     if (is_object_or_assembly(ot)) {\n         let int LLVMAssemblyFile = 0;\n         let int LLVMObjectFile = 1;\n@@ -7414,7 +7457,7 @@ fn make_glues(ModuleRef llmod, type_names tn) -> @glue_fns {\n              vec_append_glue = make_vec_append_glue(llmod, tn));\n }\n \n-fn make_common_glue(str output, bool optimize, bool verify,\n+fn make_common_glue(str output, bool optimize, bool verify, bool save_temps,\n                     output_type ot) {\n     // FIXME: part of this is repetitive and is probably a good idea\n     // to autogen it, but things like the memcpy implementation are not\n@@ -7441,7 +7484,7 @@ fn make_common_glue(str output, bool optimize, bool verify,\n \n     trans_exit_task_glue(glues, new_str_hash[ValueRef](), tn, llmod);\n \n-    run_passes(llmod, optimize, verify, output, ot);\n+    run_passes(llmod, optimize, verify, save_temps, output, ot);\n }\n \n fn create_module_map(@crate_ctxt ccx) -> ValueRef {\n@@ -7494,7 +7537,7 @@ fn create_crate_map(@crate_ctxt ccx) -> ValueRef {\n \n fn trans_crate(session.session sess, @ast.crate crate, ty.ctxt tcx,\n                &ty.type_cache type_cache, str output, bool shared,\n-               bool optimize, bool verify, output_type ot) {\n+               bool optimize, bool verify, bool save_temps, output_type ot) {\n     auto llmod =\n         llvm.LLVMModuleCreateWithNameInContext(_str.buf(\"rust_out\"),\n                                                llvm.LLVMGetGlobalContext());\n@@ -7557,7 +7600,7 @@ fn trans_crate(session.session sess, @ast.crate crate, ty.ctxt tcx,\n     // Translate the metadata.\n     middle.metadata.write_metadata(cx.ccx, crate);\n \n-    run_passes(llmod, optimize, verify, output, ot);\n+    run_passes(llmod, optimize, verify, save_temps, output, ot);\n }\n \n //"}]}