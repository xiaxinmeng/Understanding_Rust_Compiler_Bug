{"sha": "4435dfec0f1180411ac85a9def504ecbf5dd82ad", "node_id": "C_kwDOAAsO6NoAKDQ0MzVkZmVjMGYxMTgwNDExYWM4NWE5ZGVmNTA0ZWNiZjVkZDgyYWQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-01T17:44:45Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-09T19:11:29Z"}, "message": "Make FnAbiError Copy.", "tree": {"sha": "2e291f3dbb3f135f1668d9422aa6e4fc9f164a91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e291f3dbb3f135f1668d9422aa6e4fc9f164a91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4435dfec0f1180411ac85a9def504ecbf5dd82ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4435dfec0f1180411ac85a9def504ecbf5dd82ad", "html_url": "https://github.com/rust-lang/rust/commit/4435dfec0f1180411ac85a9def504ecbf5dd82ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4435dfec0f1180411ac85a9def504ecbf5dd82ad/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e52131efad56b2c55a3ca2a09011d71f1ae358a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e52131efad56b2c55a3ca2a09011d71f1ae358a5", "html_url": "https://github.com/rust-lang/rust/commit/e52131efad56b2c55a3ca2a09011d71f1ae358a5"}], "stats": {"total": 77, "additions": 35, "deletions": 42}, "files": [{"sha": "3b6025c73d10bd7a0113e2b31662dd7a20d9753a", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=4435dfec0f1180411ac85a9def504ecbf5dd82ad", "patch": "@@ -274,7 +274,7 @@ impl<'tcx> FnAbiOfHelpers<'tcx> for FunctionCx<'_, '_, 'tcx> {\n     #[inline]\n     fn handle_fn_abi_err(\n         &self,\n-        err: &'tcx FnAbiError<'tcx>,\n+        err: FnAbiError<'tcx>,\n         span: Span,\n         fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {\n@@ -396,7 +396,7 @@ impl<'tcx> FnAbiOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n     #[inline]\n     fn handle_fn_abi_err(\n         &self,\n-        err: &'tcx FnAbiError<'tcx>,\n+        err: FnAbiError<'tcx>,\n         span: Span,\n         fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {"}, {"sha": "ffb77e16a14863c505b199efdf2acdb02e9118a8", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=4435dfec0f1180411ac85a9def504ecbf5dd82ad", "patch": "@@ -354,7 +354,7 @@ impl<'tcx> FnAbiOfHelpers<'tcx> for Builder<'_, '_, 'tcx> {\n     #[inline]\n     fn handle_fn_abi_err(\n         &self,\n-        err: &'tcx FnAbiError<'tcx>,\n+        err: FnAbiError<'tcx>,\n         span: Span,\n         fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {"}, {"sha": "dfcd1b6231216cb49acc361bdb83e054a43e058d", "filename": "compiler/rustc_codegen_gcc/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fcontext.rs?ref=4435dfec0f1180411ac85a9def504ecbf5dd82ad", "patch": "@@ -397,7 +397,7 @@ impl<'gcc, 'tcx> FnAbiOfHelpers<'tcx> for CodegenCx<'gcc, 'tcx> {\n     #[inline]\n     fn handle_fn_abi_err(\n         &self,\n-        err: &'tcx FnAbiError<'tcx>,\n+        err: FnAbiError<'tcx>,\n         span: Span,\n         fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {"}, {"sha": "c9a04e6280f4092d4537ffec4e535a12ffafa805", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=4435dfec0f1180411ac85a9def504ecbf5dd82ad", "patch": "@@ -105,7 +105,7 @@ impl<'tcx> FnAbiOfHelpers<'tcx> for Builder<'_, '_, 'tcx> {\n     #[inline]\n     fn handle_fn_abi_err(\n         &self,\n-        err: &'tcx FnAbiError<'tcx>,\n+        err: FnAbiError<'tcx>,\n         span: Span,\n         fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {"}, {"sha": "8672459b5da3aae9191938309ca7e29808314256", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=4435dfec0f1180411ac85a9def504ecbf5dd82ad", "patch": "@@ -920,7 +920,7 @@ impl<'tcx> FnAbiOfHelpers<'tcx> for CodegenCx<'_, 'tcx> {\n     #[inline]\n     fn handle_fn_abi_err(\n         &self,\n-        err: &'tcx FnAbiError<'tcx>,\n+        err: FnAbiError<'tcx>,\n         span: Span,\n         fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {"}, {"sha": "0a8112da2aba8fbe4ccd596e05a14da16e970773", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=4435dfec0f1180411ac85a9def504ecbf5dd82ad", "patch": "@@ -341,12 +341,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> FnAbiOfHelpers<'tcx> for InterpCx\n \n     fn handle_fn_abi_err(\n         &self,\n-        err: &'tcx FnAbiError<'tcx>,\n+        err: FnAbiError<'tcx>,\n         _span: Span,\n         _fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> InterpErrorInfo<'tcx> {\n         match err {\n-            FnAbiError::Layout(err) => err_inval!(Layout(*err)).into(),\n+            FnAbiError::Layout(err) => err_inval!(Layout(err)).into(),\n             FnAbiError::AdjustForForeignAbi(err) => {\n                 err_inval!(FnAbiAdjustForForeignAbi(err)).into()\n             }"}, {"sha": "e9a857d09124f4cad822cd3213adb0625d761891", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=4435dfec0f1180411ac85a9def504ecbf5dd82ad", "patch": "@@ -144,7 +144,7 @@ pub enum InvalidProgramInfo<'tcx> {\n     /// An error occurred during FnAbi computation: the passed --target lacks FFI support\n     /// (which unfortunately typeck does not reject).\n     /// Not using `FnAbiError` as that contains a nested `LayoutError`.\n-    FnAbiAdjustForForeignAbi(&'tcx call::AdjustForForeignAbiError),\n+    FnAbiAdjustForForeignAbi(call::AdjustForForeignAbiError),\n     /// An invalid transmute happened.\n     TransmuteSizeDiff(Ty<'tcx>, Ty<'tcx>),\n     /// SizeOf of unsized type was requested."}, {"sha": "1861f547fca149642443928bdb6380ea4ea3e167", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=4435dfec0f1180411ac85a9def504ecbf5dd82ad", "patch": "@@ -1217,8 +1217,7 @@ rustc_queries! {\n     /// instead, where the instance is an `InstanceDef::Virtual`.\n     query fn_abi_of_fn_ptr(\n         key: ty::ParamEnvAnd<'tcx, (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>)>\n-    ) -> Result<abi::call::FnAbi<'tcx, Ty<'tcx>>, ty::layout::FnAbiError<'tcx>> {\n-        storage(ArenaCacheSelector<'tcx>)\n+    ) -> Result<&'tcx abi::call::FnAbi<'tcx, Ty<'tcx>>, ty::layout::FnAbiError<'tcx>> {\n         desc { \"computing call ABI of `{}` function pointers\", key.value.0 }\n         remap_env_constness\n     }\n@@ -1230,8 +1229,7 @@ rustc_queries! {\n     /// to an `InstanceDef::Virtual` instance (of `<dyn Trait as Trait>::fn`).\n     query fn_abi_of_instance(\n         key: ty::ParamEnvAnd<'tcx, (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>)>\n-    ) -> Result<abi::call::FnAbi<'tcx, Ty<'tcx>>, ty::layout::FnAbiError<'tcx>> {\n-        storage(ArenaCacheSelector<'tcx>)\n+    ) -> Result<&'tcx abi::call::FnAbi<'tcx, Ty<'tcx>>, ty::layout::FnAbiError<'tcx>> {\n         desc { \"computing call ABI of `{}`\", key.value.0 }\n         remap_env_constness\n     }"}, {"sha": "c59918df4de5b79640042e83fe568dbfa1cee4fb", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=4435dfec0f1180411ac85a9def504ecbf5dd82ad", "patch": "@@ -2839,7 +2839,7 @@ pub fn conv_from_spec_abi(tcx: TyCtxt<'_>, abi: SpecAbi) -> Conv {\n }\n \n /// Error produced by attempting to compute or adjust a `FnAbi`.\n-#[derive(Clone, Debug, HashStable)]\n+#[derive(Copy, Clone, Debug, HashStable)]\n pub enum FnAbiError<'tcx> {\n     /// Error produced by a `layout_of` call, while computing `FnAbi` initially.\n     Layout(LayoutError<'tcx>),\n@@ -2893,7 +2893,7 @@ pub trait FnAbiOfHelpers<'tcx>: LayoutOfHelpers<'tcx> {\n     /// (and any `FnAbiError`s are turned into fatal errors or ICEs).\n     fn handle_fn_abi_err(\n         &self,\n-        err: &'tcx FnAbiError<'tcx>,\n+        err: FnAbiError<'tcx>,\n         span: Span,\n         fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> <Self::FnAbiOfResult as MaybeResult<&'tcx FnAbi<'tcx, Ty<'tcx>>>>::Error;\n@@ -2915,11 +2915,9 @@ pub trait FnAbiOf<'tcx>: FnAbiOfHelpers<'tcx> {\n         let span = self.layout_tcx_at_span();\n         let tcx = self.tcx().at(span);\n \n-        MaybeResult::from(\n-            tcx.fn_abi_of_fn_ptr(self.param_env().and((sig, extra_args))).as_ref().map_err(|err| {\n-                self.handle_fn_abi_err(err, span, FnAbiRequest::OfFnPtr { sig, extra_args })\n-            }),\n-        )\n+        MaybeResult::from(tcx.fn_abi_of_fn_ptr(self.param_env().and((sig, extra_args))).map_err(\n+            |err| self.handle_fn_abi_err(err, span, FnAbiRequest::OfFnPtr { sig, extra_args }),\n+        ))\n     }\n \n     /// Compute a `FnAbi` suitable for declaring/defining an `fn` instance, and for\n@@ -2938,21 +2936,14 @@ pub trait FnAbiOf<'tcx>: FnAbiOfHelpers<'tcx> {\n         let tcx = self.tcx().at(span);\n \n         MaybeResult::from(\n-            tcx.fn_abi_of_instance(self.param_env().and((instance, extra_args))).as_ref().map_err(\n-                |err| {\n-                    // HACK(eddyb) at least for definitions of/calls to `Instance`s,\n-                    // we can get some kind of span even if one wasn't provided.\n-                    // However, we don't do this early in order to avoid calling\n-                    // `def_span` unconditionally (which may have a perf penalty).\n-                    let span =\n-                        if !span.is_dummy() { span } else { tcx.def_span(instance.def_id()) };\n-                    self.handle_fn_abi_err(\n-                        err,\n-                        span,\n-                        FnAbiRequest::OfInstance { instance, extra_args },\n-                    )\n-                },\n-            ),\n+            tcx.fn_abi_of_instance(self.param_env().and((instance, extra_args))).map_err(|err| {\n+                // HACK(eddyb) at least for definitions of/calls to `Instance`s,\n+                // we can get some kind of span even if one wasn't provided.\n+                // However, we don't do this early in order to avoid calling\n+                // `def_span` unconditionally (which may have a perf penalty).\n+                let span = if !span.is_dummy() { span } else { tcx.def_span(instance.def_id()) };\n+                self.handle_fn_abi_err(err, span, FnAbiRequest::OfInstance { instance, extra_args })\n+            }),\n         )\n     }\n }\n@@ -2962,7 +2953,7 @@ impl<'tcx, C: FnAbiOfHelpers<'tcx>> FnAbiOf<'tcx> for C {}\n fn fn_abi_of_fn_ptr<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     query: ty::ParamEnvAnd<'tcx, (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>)>,\n-) -> Result<FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {\n+) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {\n     let (param_env, (sig, extra_args)) = query.into_parts();\n \n     LayoutCx { tcx, param_env }.fn_abi_new_uncached(\n@@ -2977,7 +2968,7 @@ fn fn_abi_of_fn_ptr<'tcx>(\n fn fn_abi_of_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     query: ty::ParamEnvAnd<'tcx, (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>)>,\n-) -> Result<FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {\n+) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {\n     let (param_env, (instance, extra_args)) = query.into_parts();\n \n     let sig = instance.fn_sig_for_fn_abi(tcx, param_env);\n@@ -3010,7 +3001,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         codegen_fn_attr_flags: CodegenFnAttrFlags,\n         // FIXME(eddyb) replace this with something typed, like an `enum`.\n         force_thin_self_ptr: bool,\n-    ) -> Result<FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {\n+    ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {\n         debug!(\"fn_abi_new_uncached({:?}, {:?})\", sig, extra_args);\n \n         let sig = self.tcx.normalize_erasing_late_bound_regions(self.param_env, sig);\n@@ -3174,7 +3165,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         };\n         self.fn_abi_adjust_for_abi(&mut fn_abi, sig.abi)?;\n         debug!(\"fn_abi_new_uncached = {:?}\", fn_abi);\n-        Ok(fn_abi)\n+        Ok(self.tcx.arena.alloc(fn_abi))\n     }\n \n     fn fn_abi_adjust_for_abi("}, {"sha": "0870b1054e43097e894c99e291d238b7abf5c44d", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435dfec0f1180411ac85a9def504ecbf5dd82ad/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=4435dfec0f1180411ac85a9def504ecbf5dd82ad", "patch": "@@ -1,6 +1,7 @@\n use crate::abi::{self, Abi, Align, FieldsShape, Size};\n use crate::abi::{HasDataLayout, TyAbiInterface, TyAndLayout};\n use crate::spec::{self, HasTargetSpec};\n+use rustc_span::Symbol;\n use std::fmt;\n \n mod aarch64;\n@@ -623,10 +624,10 @@ pub struct FnAbi<'a, Ty> {\n }\n \n /// Error produced by attempting to adjust a `FnAbi`, for a \"foreign\" ABI.\n-#[derive(Clone, Debug, HashStable_Generic)]\n+#[derive(Copy, Clone, Debug, HashStable_Generic)]\n pub enum AdjustForForeignAbiError {\n     /// Target architecture doesn't support \"foreign\" (i.e. non-Rust) ABIs.\n-    Unsupported { arch: String, abi: spec::abi::Abi },\n+    Unsupported { arch: Symbol, abi: spec::abi::Abi },\n }\n \n impl fmt::Display for AdjustForForeignAbiError {\n@@ -703,7 +704,10 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n             \"asmjs\" => wasm::compute_c_abi_info(cx, self),\n             \"bpf\" => bpf::compute_abi_info(self),\n             arch => {\n-                return Err(AdjustForForeignAbiError::Unsupported { arch: arch.to_string(), abi });\n+                return Err(AdjustForForeignAbiError::Unsupported {\n+                    arch: Symbol::intern(arch),\n+                    abi,\n+                });\n             }\n         }\n "}]}