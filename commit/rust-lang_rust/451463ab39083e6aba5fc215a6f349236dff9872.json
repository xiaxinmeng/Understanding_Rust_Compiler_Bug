{"sha": "451463ab39083e6aba5fc215a6f349236dff9872", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MTQ2M2FiMzkwODNlNmFiYTVmYzIxNWE2ZjM0OTIzNmRmZjk4NzI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-21T06:21:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-21T06:21:03Z"}, "message": "rustdoc: Use more explicit self", "tree": {"sha": "aaa440147155254f0a06f2b89255732e728faec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaa440147155254f0a06f2b89255732e728faec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/451463ab39083e6aba5fc215a6f349236dff9872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/451463ab39083e6aba5fc215a6f349236dff9872", "html_url": "https://github.com/rust-lang/rust/commit/451463ab39083e6aba5fc215a6f349236dff9872", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/451463ab39083e6aba5fc215a6f349236dff9872/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "415664181b04574a5dfa553a54efb4df7924c15f", "url": "https://api.github.com/repos/rust-lang/rust/commits/415664181b04574a5dfa553a54efb4df7924c15f", "html_url": "https://github.com/rust-lang/rust/commit/415664181b04574a5dfa553a54efb4df7924c15f"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "a1ac12cbc3adcde7da623de08b5f578b6c524ce5", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/451463ab39083e6aba5fc215a6f349236dff9872/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451463ab39083e6aba5fc215a6f349236dff9872/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=451463ab39083e6aba5fc215a6f349236dff9872", "patch": "@@ -765,83 +765,83 @@ impl ModDoc {\n }\n \n pub trait PageUtils {\n-    fn mods() -> ~[ModDoc];\n-    fn nmods() -> ~[NmodDoc];\n-    fn fns() -> ~[FnDoc];\n-    fn consts() -> ~[ConstDoc];\n-    fn enums() -> ~[EnumDoc];\n-    fn traits() -> ~[TraitDoc];\n-    fn impls() -> ~[ImplDoc];\n-    fn types() -> ~[TyDoc];\n+    fn mods(&self) -> ~[ModDoc];\n+    fn nmods(&self) -> ~[NmodDoc];\n+    fn fns(&self) -> ~[FnDoc];\n+    fn consts(&self) -> ~[ConstDoc];\n+    fn enums(&self) -> ~[EnumDoc];\n+    fn traits(&self) -> ~[TraitDoc];\n+    fn impls(&self) -> ~[ImplDoc];\n+    fn types(&self) -> ~[TyDoc];\n }\n \n impl ~[Page]: PageUtils {\n \n-    fn mods() -> ~[ModDoc] {\n-        do vec::filter_map(self) |page| {\n+    fn mods(&self) -> ~[ModDoc] {\n+        do vec::filter_map(*self) |page| {\n             match *page {\n               ItemPage(ModTag(ModDoc)) => Some(ModDoc),\n               _ => None\n             }\n         }\n     }\n \n-    fn nmods() -> ~[NmodDoc] {\n-        do vec::filter_map(self) |page| {\n+    fn nmods(&self) -> ~[NmodDoc] {\n+        do vec::filter_map(*self) |page| {\n             match *page {\n               ItemPage(NmodTag(nModDoc)) => Some(nModDoc),\n               _ => None\n             }\n         }\n     }\n \n-    fn fns() -> ~[FnDoc] {\n-        do vec::filter_map(self) |page| {\n+    fn fns(&self) -> ~[FnDoc] {\n+        do vec::filter_map(*self) |page| {\n             match *page {\n               ItemPage(FnTag(FnDoc)) => Some(FnDoc),\n               _ => None\n             }\n         }\n     }\n \n-    fn consts() -> ~[ConstDoc] {\n-        do vec::filter_map(self) |page| {\n+    fn consts(&self) -> ~[ConstDoc] {\n+        do vec::filter_map(*self) |page| {\n             match *page {\n               ItemPage(ConstTag(ConstDoc)) => Some(ConstDoc),\n               _ => None\n             }\n         }\n     }\n \n-    fn enums() -> ~[EnumDoc] {\n-        do vec::filter_map(self) |page| {\n+    fn enums(&self) -> ~[EnumDoc] {\n+        do vec::filter_map(*self) |page| {\n             match *page {\n               ItemPage(EnumTag(EnumDoc)) => Some(EnumDoc),\n               _ => None\n             }\n         }\n     }\n \n-    fn traits() -> ~[TraitDoc] {\n-        do vec::filter_map(self) |page| {\n+    fn traits(&self) -> ~[TraitDoc] {\n+        do vec::filter_map(*self) |page| {\n             match *page {\n               ItemPage(TraitTag(TraitDoc)) => Some(TraitDoc),\n               _ => None\n             }\n         }\n     }\n \n-    fn impls() -> ~[ImplDoc] {\n-        do vec::filter_map(self) |page| {\n+    fn impls(&self) -> ~[ImplDoc] {\n+        do vec::filter_map(*self) |page| {\n             match *page {\n               ItemPage(ImplTag(ImplDoc)) => Some(ImplDoc),\n               _ => None\n             }\n         }\n     }\n \n-    fn types() -> ~[TyDoc] {\n-        do vec::filter_map(self) |page| {\n+    fn types(&self) -> ~[TyDoc] {\n+        do vec::filter_map(*self) |page| {\n             match *page {\n               ItemPage(TyTag(TyDoc)) => Some(TyDoc),\n               _ => None\n@@ -851,12 +851,12 @@ impl ~[Page]: PageUtils {\n }\n \n pub trait Item {\n-    pure fn item() -> ItemDoc;\n+    pure fn item(&self) -> ItemDoc;\n }\n \n impl ItemTag: Item {\n-    pure fn item() -> ItemDoc {\n-        match self {\n+    pure fn item(&self) -> ItemDoc {\n+        match *self {\n           doc::ModTag(doc) => doc.item,\n           doc::NmodTag(doc) => doc.item,\n           doc::FnTag(doc) => doc.item,\n@@ -871,64 +871,64 @@ impl ItemTag: Item {\n }\n \n impl SimpleItemDoc: Item {\n-    pure fn item() -> ItemDoc { self.item }\n+    pure fn item(&self) -> ItemDoc { self.item }\n }\n \n impl ModDoc: Item {\n-    pure fn item() -> ItemDoc { self.item }\n+    pure fn item(&self) -> ItemDoc { self.item }\n }\n \n impl NmodDoc: Item {\n-    pure fn item() -> ItemDoc { self.item }\n+    pure fn item(&self) -> ItemDoc { self.item }\n }\n \n impl EnumDoc: Item {\n-    pure fn item() -> ItemDoc { self.item }\n+    pure fn item(&self) -> ItemDoc { self.item }\n }\n \n impl TraitDoc: Item {\n-    pure fn item() -> ItemDoc { self.item }\n+    pure fn item(&self) -> ItemDoc { self.item }\n }\n \n impl ImplDoc: Item {\n-    pure fn item() -> ItemDoc { self.item }\n+    pure fn item(&self) -> ItemDoc { self.item }\n }\n \n impl StructDoc: Item {\n-    pure fn item() -> ItemDoc { self.item }\n+    pure fn item(&self) -> ItemDoc { self.item }\n }\n \n pub trait ItemUtils {\n-    pure fn id() -> AstId;\n-    pure fn name() -> ~str;\n-    pure fn path() -> ~[~str];\n-    pure fn brief() -> Option<~str>;\n-    pure fn desc() -> Option<~str>;\n-    pure fn sections() -> ~[Section];\n+    pure fn id(&self) -> AstId;\n+    pure fn name(&self) -> ~str;\n+    pure fn path(&self) -> ~[~str];\n+    pure fn brief(&self) -> Option<~str>;\n+    pure fn desc(&self) -> Option<~str>;\n+    pure fn sections(&self) -> ~[Section];\n }\n \n impl<A:Item> A: ItemUtils {\n-    pure fn id() -> AstId {\n+    pure fn id(&self) -> AstId {\n         self.item().id\n     }\n \n-    pure fn name() -> ~str {\n+    pure fn name(&self) -> ~str {\n         self.item().name\n     }\n \n-    pure fn path() -> ~[~str] {\n+    pure fn path(&self) -> ~[~str] {\n         self.item().path\n     }\n \n-    pure fn brief() -> Option<~str> {\n+    pure fn brief(&self) -> Option<~str> {\n         self.item().brief\n     }\n \n-    pure fn desc() -> Option<~str> {\n+    pure fn desc(&self) -> Option<~str> {\n         self.item().desc\n     }\n \n-    pure fn sections() -> ~[Section] {\n+    pure fn sections(&self) -> ~[Section] {\n         self.item().sections\n     }\n }"}]}