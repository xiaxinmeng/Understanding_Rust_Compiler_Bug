{"sha": "e649e903440bfd919bfc9db848c28df6d795a116", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NDllOTAzNDQwYmZkOTE5YmZjOWRiODQ4YzI4ZGY2ZDc5NWExMTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-22T17:08:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-22T17:08:25Z"}, "message": "Auto merge of #62873 - Centril:rollup-ncnuelj, r=Centril\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #62709 (Test that maplike FromIter satisfies uniqueness)\n - #62713 (Stabilize <*mut _>::cast and <*const _>::cast)\n - #62746 ( do not use assume_init in std::io)\n - #62787 (Fix typo in src/libstd/net/udp.rs doc comment)\n - #62788 (normalize use of backticks in compiler messages for libcore/ptr)\n - #62799 (use const array repeat expressions for uninit_array)\n - #62810 (normalize use of backticks in compiler messages for librustc_lint)\n - #62812 (normalize use of backticks in compiler messages for librustc_metadata)\n - #62832 (normalize use of backticks in compiler messages for librustc_incremental)\n - #62845 (read: fix doc comment)\n - #62853 (normalize use of backticks in compiler messages for librustc/hir)\n - #62854 (Fix typo in Unicode character name)\n - #62858 (Change wrong variable name.)\n - #62870 (fix lexing of comments with many \\r)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d182bd52c502a10edf0c1f8dfd172f1081685ac2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d182bd52c502a10edf0c1f8dfd172f1081685ac2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e649e903440bfd919bfc9db848c28df6d795a116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e649e903440bfd919bfc9db848c28df6d795a116", "html_url": "https://github.com/rust-lang/rust/commit/e649e903440bfd919bfc9db848c28df6d795a116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e649e903440bfd919bfc9db848c28df6d795a116/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bc1ce7bdb7f5dc9ea07c0b630c087d8e11140e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bc1ce7bdb7f5dc9ea07c0b630c087d8e11140e4", "html_url": "https://github.com/rust-lang/rust/commit/4bc1ce7bdb7f5dc9ea07c0b630c087d8e11140e4"}, {"sha": "376382aff3e8dad93b273ce7e9231ec7946edbe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/376382aff3e8dad93b273ce7e9231ec7946edbe0", "html_url": "https://github.com/rust-lang/rust/commit/376382aff3e8dad93b273ce7e9231ec7946edbe0"}], "stats": {"total": 366, "additions": 212, "deletions": 154}, "files": [{"sha": "7cf779b3e72814363f7ca9664ecb07f7ac26df85", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -75,10 +75,10 @@ use Entry::*;\n ///\n /// // look up the values associated with some keys.\n /// let to_find = [\"Up!\", \"Office Space\"];\n-/// for book in &to_find {\n-///     match movie_reviews.get(book) {\n-///        Some(review) => println!(\"{}: {}\", book, review),\n-///        None => println!(\"{} is unreviewed.\", book)\n+/// for movie in &to_find {\n+///     match movie_reviews.get(movie) {\n+///        Some(review) => println!(\"{}: {}\", movie, review),\n+///        None => println!(\"{} is unreviewed.\", movie)\n ///     }\n /// }\n ///"}, {"sha": "e067096f0c780ccc9c5294dbe9fbb45471d47dab", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -106,8 +106,8 @@ impl<K, V> LeafNode<K, V> {\n         LeafNode {\n             // As a general policy, we leave fields uninitialized if they can be, as this should\n             // be both slightly faster and easier to track in Valgrind.\n-            keys: uninitialized_array![_; CAPACITY],\n-            vals: uninitialized_array![_; CAPACITY],\n+            keys: uninit_array![_; CAPACITY],\n+            vals: uninit_array![_; CAPACITY],\n             parent: ptr::null(),\n             parent_idx: MaybeUninit::uninit(),\n             len: 0\n@@ -159,7 +159,7 @@ impl<K, V> InternalNode<K, V> {\n     unsafe fn new() -> Self {\n         InternalNode {\n             data: LeafNode::new(),\n-            edges: uninitialized_array![_; 2*B],\n+            edges: uninit_array![_; 2*B],\n         }\n     }\n }"}, {"sha": "dbc1f3b47c80dc0dc36da2c46de85c695ad83c37", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -77,13 +77,15 @@\n #![feature(box_syntax)]\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n+#![cfg_attr(not(bootstrap), feature(const_in_array_repeat_expressions))]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n #![feature(fmt_internals)]\n #![feature(fn_traits)]\n #![feature(fundamental)]\n+#![feature(internal_uninit_const)]\n #![feature(lang_items)]\n #![feature(libc)]\n #![feature(nll)]"}, {"sha": "a2fff913ac720c1475eeb23a6a9be0d3588ff035", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -12,10 +12,11 @@ fn float_to_decimal_common_exact<T>(fmt: &mut Formatter<'_>, num: &T,\n     unsafe {\n         let mut buf = MaybeUninit::<[u8; 1024]>::uninit(); // enough for f32 and f64\n         let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 4]>::uninit();\n-        // FIXME(#53491): Technically, this is calling `get_mut` on an uninitialized\n-        // `MaybeUninit` (here and elsewhere in this file).  Revisit this once\n+        // FIXME(#53491): This is calling `get_mut` on an uninitialized\n+        // `MaybeUninit` (here and elsewhere in this file). Revisit this once\n         // we decided whether that is valid or not.\n-        // Using `freeze` is *not enough*; `flt2dec::Part` is an enum!\n+        // We can do this only because we are libstd and coupled to the compiler.\n+        // (FWIW, using `freeze` would not be enough; `flt2dec::Part` is an enum!)\n         let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n                                                     *num, sign, precision,\n                                                     false, buf.get_mut(), parts.get_mut());"}, {"sha": "3b5c9fbff250ae1e654e156e38b36950f489e69d", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -51,7 +51,7 @@ trait GenericRadix {\n         // characters for a base 2 number.\n         let zero = T::zero();\n         let is_nonnegative = x >= zero;\n-        let mut buf = uninitialized_array![u8; 128];\n+        let mut buf = [MaybeUninit::<u8>::uninit(); 128];\n         let mut curr = buf.len();\n         let base = T::from_u8(Self::BASE);\n         if is_nonnegative {\n@@ -189,7 +189,7 @@ static DEC_DIGITS_LUT: &[u8; 200] =\n macro_rules! impl_Display {\n     ($($t:ident),* as $u:ident via $conv_fn:ident named $name:ident) => {\n         fn $name(mut n: $u, is_nonnegative: bool, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            let mut buf = uninitialized_array![u8; 39];\n+            let mut buf = [MaybeUninit::<u8>::uninit(); 39];\n             let mut curr = buf.len() as isize;\n             let buf_ptr = MaybeUninit::first_ptr_mut(&mut buf);\n             let lut_ptr = DEC_DIGITS_LUT.as_ptr();"}, {"sha": "296bb43f9fad4d8ff7b8f65a1004dafe61ffa4e2", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -626,20 +626,37 @@ macro_rules! todo {\n /// Creates an array of [`MaybeUninit`].\n ///\n /// This macro constructs an uninitialized array of the type `[MaybeUninit<K>; N]`.\n+/// It exists solely because bootstrap does not yet support const array-init expressions.\n ///\n /// [`MaybeUninit`]: mem/union.MaybeUninit.html\n+// FIXME: Remove both versions of this macro once bootstrap is 1.38.\n #[macro_export]\n #[unstable(feature = \"maybe_uninit_array\", issue = \"53491\")]\n-macro_rules! uninitialized_array {\n+#[cfg(bootstrap)]\n+macro_rules! uninit_array {\n     // This `assume_init` is safe because an array of `MaybeUninit` does not\n     // require initialization.\n-    // FIXME(#49147): Could be replaced by an array initializer, once those can\n-    // be any const expression.\n     ($t:ty; $size:expr) => (unsafe {\n         MaybeUninit::<[MaybeUninit<$t>; $size]>::uninit().assume_init()\n     });\n }\n \n+/// Creates an array of [`MaybeUninit`].\n+///\n+/// This macro constructs an uninitialized array of the type `[MaybeUninit<K>; N]`.\n+/// It exists solely because bootstrap does not yet support const array-init expressions.\n+///\n+/// [`MaybeUninit`]: mem/union.MaybeUninit.html\n+// FIXME: Just inline this version of the macro once bootstrap is 1.38.\n+#[macro_export]\n+#[unstable(feature = \"maybe_uninit_array\", issue = \"53491\")]\n+#[cfg(not(bootstrap))]\n+macro_rules! uninit_array {\n+    ($t:ty; $size:expr) => (\n+        [MaybeUninit::<$t>::UNINIT; $size]\n+    );\n+}\n+\n /// Built-in macros to the compiler itself.\n ///\n /// These macros do not have any corresponding definition with a `macro_rules!`"}, {"sha": "2e88db8df11634f3ea30c78340a2d12fb2722137", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -252,6 +252,11 @@ impl<T> MaybeUninit<T> {\n         MaybeUninit { uninit: () }\n     }\n \n+    /// A promotable constant, equivalent to `uninit()`.\n+    #[unstable(feature = \"internal_uninit_const\", issue = \"0\",\n+        reason = \"hack to work around promotability\")]\n+    pub const UNINIT: Self = Self::uninit();\n+\n     /// Creates a new `MaybeUninit<T>` in an uninitialized state, with the memory being\n     /// filled with `0` bytes. It depends on `T` whether that already makes for\n     /// proper initialization. For example, `MaybeUninit<usize>::zeroed()` is initialized,"}, {"sha": "a7f6926de4263614947090045f98b3bbfcfcb383", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1043,7 +1043,7 @@ impl<T: ?Sized> *const T {\n     }\n \n     /// Cast to a pointer to a different type\n-    #[unstable(feature = \"ptr_cast\", issue = \"60602\")]\n+    #[stable(feature = \"ptr_cast\", since = \"1.38.0\")]\n     #[inline]\n     pub const fn cast<U>(self) -> *const U {\n         self as _\n@@ -1678,7 +1678,7 @@ impl<T: ?Sized> *mut T {\n     }\n \n     /// Cast to a pointer to a different type\n-    #[unstable(feature = \"ptr_cast\", issue = \"60602\")]\n+    #[stable(feature = \"ptr_cast\", since = \"1.38.0\")]\n     #[inline]\n     pub const fn cast<U>(self) -> *mut U {\n         self as _"}, {"sha": "d2517e51fc5a62801fa8c77018cb79196d532be7", "filename": "src/libcore/ptr/unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibcore%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibcore%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Funique.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -26,8 +26,8 @@ use crate::ptr::NonNull;\n /// Unlike `*mut T`, `Unique<T>` is covariant over `T`. This should always be correct\n /// for any type which upholds Unique's aliasing requirements.\n #[unstable(feature = \"ptr_internals\", issue = \"0\",\n-           reason = \"use NonNull instead and consider PhantomData<T> \\\n-                     (if you also use #[may_dangle]), Send, and/or Sync\")]\n+           reason = \"use `NonNull` instead and consider `PhantomData<T>` \\\n+                     (if you also use `#[may_dangle]`), `Send`, and/or `Sync`\")]\n #[doc(hidden)]\n #[repr(transparent)]\n #[rustc_layout_scalar_valid_range_start(1)]"}, {"sha": "2f2170f7ff14ce7860d3b219f7e55ce0e2a7365b", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -216,14 +216,14 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n     let mut block_l = BLOCK;\n     let mut start_l = ptr::null_mut();\n     let mut end_l = ptr::null_mut();\n-    let mut offsets_l: [MaybeUninit<u8>; BLOCK] = uninitialized_array![u8; BLOCK];\n+    let mut offsets_l = [MaybeUninit::<u8>::uninit(); BLOCK];\n \n     // The current block on the right side (from `r.sub(block_r)` to `r`).\n     let mut r = unsafe { l.add(v.len()) };\n     let mut block_r = BLOCK;\n     let mut start_r = ptr::null_mut();\n     let mut end_r = ptr::null_mut();\n-    let mut offsets_r: [MaybeUninit<u8>; BLOCK] = uninitialized_array![u8; BLOCK];\n+    let mut offsets_r = [MaybeUninit::<u8>::uninit(); BLOCK];\n \n     // FIXME: When we get VLAs, try creating one array of length `min(v.len(), 2 * BLOCK)` rather\n     // than two fixed-size arrays of length `BLOCK`. VLAs might be more cache-efficient."}, {"sha": "057d878a0ab8dc58b64959adc08fa5daa68471c6", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -69,14 +69,14 @@ impl CrateNum {\n     pub fn as_usize(self) -> usize {\n         match self {\n             CrateNum::Index(id) => id.as_usize(),\n-            _ => bug!(\"tried to get index of nonstandard crate {:?}\", self),\n+            _ => bug!(\"tried to get index of non-standard crate {:?}\", self),\n         }\n     }\n \n     pub fn as_u32(self) -> u32 {\n         match self {\n             CrateNum::Index(id) => id.as_u32(),\n-            _ => bug!(\"tried to get index of nonstandard crate {:?}\", self),\n+            _ => bug!(\"tried to get index of non-standard crate {:?}\", self),\n         }\n     }\n "}, {"sha": "288fd2714e251a054e7d92aea0b560241049d97f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1693,8 +1693,8 @@ impl<'a> LoweringContext<'a> {\n                         if pos == ImplTraitPosition::Binding &&\n                             nightly_options::is_nightly_build() {\n                             help!(err,\n-                                  \"add #![feature(impl_trait_in_bindings)] to the crate attributes \\\n-                                   to enable\");\n+                                  \"add `#![feature(impl_trait_in_bindings)]` to the crate \\\n+                                   attributes to enable\");\n                         }\n                         err.emit();\n                         hir::TyKind::Err"}, {"sha": "07d426af6ee959f707c8f6f29f24400fda8664d3", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -190,7 +190,7 @@ fn check_paths<'tcx>(tcx: TyCtxt<'tcx>, if_this_changed: &Sources, then_this_wou\n         for &(target_span, _, _, _) in then_this_would_need {\n             tcx.sess.span_err(\n                 target_span,\n-                \"no #[rustc_if_this_changed] annotation detected\");\n+                \"no `#[rustc_if_this_changed]` annotation detected\");\n \n         }\n         return;"}, {"sha": "aa98ebae543a3db202ae41e890762f7ee55d7f2c", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -610,7 +610,7 @@ impl FindAllAttrs<'tcx> {\n         for attr in &self.found_attrs {\n             if !checked_attrs.contains(&attr.id) {\n                 self.tcx.sess.span_err(attr.span, &format!(\"found unchecked \\\n-                    #[rustc_dirty]/#[rustc_clean] attribute\"));\n+                    `#[rustc_dirty]` / `#[rustc_clean]` attribute\"));\n             }\n         }\n     }"}, {"sha": "0ab67af613bd7ad90bf3d2976fd0477e6d654733", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -538,7 +538,7 @@ fn find_source_directory_in_iter<I>(iter: I,\n         if source_directories_already_tried.contains(&session_dir) ||\n            !is_session_directory(&directory_name) ||\n            !is_finalized(&directory_name) {\n-            debug!(\"find_source_directory_in_iter - ignoring.\");\n+            debug!(\"find_source_directory_in_iter - ignoring\");\n             continue\n         }\n \n@@ -693,7 +693,7 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n             let timestamp = match extract_timestamp_from_session_dir(lock_file_name) {\n                 Ok(timestamp) => timestamp,\n                 Err(()) => {\n-                    debug!(\"Found lock-file with malformed timestamp: {}\",\n+                    debug!(\"found lock-file with malformed timestamp: {}\",\n                         crate_directory.join(&lock_file_name).display());\n                     // Ignore it\n                     continue\n@@ -746,7 +746,7 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n         let timestamp = match extract_timestamp_from_session_dir(directory_name) {\n             Ok(timestamp) => timestamp,\n             Err(()) => {\n-                debug!(\"Found session-dir with malformed timestamp: {}\",\n+                debug!(\"found session-dir with malformed timestamp: {}\",\n                         crate_directory.join(directory_name).display());\n                 // Ignore it\n                 continue"}, {"sha": "4105e030477f13ded267b7abec7b9851795a5775", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -591,7 +591,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n         if !self.impling_types.as_ref().unwrap().contains(&item.hir_id) {\n             cx.span_lint(MISSING_DEBUG_IMPLEMENTATIONS,\n                          item.span,\n-                         \"type does not implement `fmt::Debug`; consider adding #[derive(Debug)] \\\n+                         \"type does not implement `fmt::Debug`; consider adding `#[derive(Debug)]` \\\n                           or a manual implementation\")\n         }\n     }\n@@ -867,7 +867,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                 if attr::contains_name(&it.attrs, sym::no_mangle) {\n                     // Const items do not refer to a particular location in memory, and therefore\n                     // don't have anything to attach a symbol to\n-                    let msg = \"const items should never be #[no_mangle]\";\n+                    let msg = \"const items should never be `#[no_mangle]`\";\n                     let mut err = cx.struct_span_lint(NO_MANGLE_CONST_ITEMS, it.span, msg);\n \n                     // account for \"pub const\" (#45562)\n@@ -1358,7 +1358,7 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n declare_lint! {\n     UNNAMEABLE_TEST_ITEMS,\n     Warn,\n-    \"detects an item that cannot be named being marked as #[test_case]\",\n+    \"detects an item that cannot be named being marked as `#[test_case]`\",\n     report_in_external_macro: true\n }\n "}, {"sha": "c7a8c2b892351839dedd8533b4dd31b331f1152f", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -481,9 +481,9 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_removed(\"resolve_trait_on_defaulted_unit\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/48950\");\n     store.register_removed(\"private_no_mangle_fns\",\n-        \"no longer a warning, #[no_mangle] functions always exported\");\n+        \"no longer a warning, `#[no_mangle]` functions always exported\");\n     store.register_removed(\"private_no_mangle_statics\",\n-        \"no longer a warning, #[no_mangle] statics always exported\");\n+        \"no longer a warning, `#[no_mangle]` statics always exported\");\n     store.register_removed(\"bad_repr\",\n         \"replaced with a generic attribute input check\");\n     store.register_removed(\"duplicate_matcher_binding_name\","}, {"sha": "4cccaa942b7429d929b640203b64527e1c50987d", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -24,7 +24,7 @@ use log::debug;\n declare_lint! {\n     pub UNUSED_MUST_USE,\n     Warn,\n-    \"unused result of a type flagged as #[must_use]\",\n+    \"unused result of a type flagged as `#[must_use]`\",\n     report_in_external_macro: true\n }\n \n@@ -316,7 +316,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n \n         let name = attr.name_or_empty();\n         if !attr::is_used(attr) {\n-            debug!(\"Emitting warning for: {:?}\", attr);\n+            debug!(\"emitting warning for: {:?}\", attr);\n             cx.span_lint(UNUSED_ATTRIBUTES, attr.span, \"unused attribute\");\n             // Is it a builtin attribute that must be used at the crate level?\n             let known_crate = attr_info.map(|&&(_, ty, ..)| {\n@@ -332,7 +332,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n                 let msg = match attr.style {\n                     ast::AttrStyle::Outer => {\n                         \"crate-level attribute should be an inner attribute: add an exclamation \\\n-                         mark: #![foo]\"\n+                         mark: `#![foo]`\"\n                     }\n                     ast::AttrStyle::Inner => \"crate-level attribute should be in the root module\",\n                 };\n@@ -570,9 +570,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAllocation {\n             if let adjustment::Adjust::Borrow(adjustment::AutoBorrow::Ref(_, m)) = adj.kind {\n                 let msg = match m {\n                     adjustment::AutoBorrowMutability::Immutable =>\n-                        \"unnecessary allocation, use & instead\",\n+                        \"unnecessary allocation, use `&` instead\",\n                     adjustment::AutoBorrowMutability::Mutable { .. }=>\n-                        \"unnecessary allocation, use &mut instead\"\n+                        \"unnecessary allocation, use `&mut` instead\"\n                 };\n                 cx.span_lint(UNUSED_ALLOCATION, e.span, msg);\n             }"}, {"sha": "126cfec157ff383cacc9d1d5b096e584e954daa5", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -938,14 +938,14 @@ impl<'a> CrateLoader<'a> {\n             }\n             match global_allocator {\n                 Some(Some(other_crate)) => {\n-                    self.sess.err(&format!(\"the #[global_allocator] in {} \\\n+                    self.sess.err(&format!(\"the `#[global_allocator]` in {} \\\n                                             conflicts with this global \\\n                                             allocator in: {}\",\n                                            other_crate,\n                                            data.root.name));\n                 }\n                 Some(None) => {\n-                    self.sess.err(&format!(\"the #[global_allocator] in this \\\n+                    self.sess.err(&format!(\"the `#[global_allocator]` in this \\\n                                             crate conflicts with global \\\n                                             allocator in: {}\", data.root.name));\n                 }\n@@ -971,7 +971,7 @@ impl<'a> CrateLoader<'a> {\n         if !has_default {\n             self.sess.err(\"no global memory allocator found but one is \\\n                            required; link to std or \\\n-                           add #[global_allocator] to a static item \\\n+                           add `#[global_allocator]` to a static item \\\n                            that implements the GlobalAlloc trait.\");\n         }\n         self.sess.allocator_kind.set(Some(AllocatorKind::DefaultLib));"}, {"sha": "909fca2ab586f2e983894772c5cf87231422616d", "filename": "src/librustc_metadata/error_codes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_metadata%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_metadata%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ferror_codes.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -7,7 +7,8 @@ E0454: r##\"\n A link name was given with an empty name. Erroneous code example:\n \n ```ignore (cannot-test-this-because-rustdoc-stops-compile-fail-before-codegen)\n-#[link(name = \"\")] extern {} // error: #[link(name = \"\")] given with empty name\n+#[link(name = \"\")] extern {}\n+// error: `#[link(name = \"\")]` given with empty name\n ```\n \n The rust compiler cannot link to an external library if you don't give it its\n@@ -61,7 +62,7 @@ A link was used without a name parameter. Erroneous code example:\n \n ```ignore (cannot-test-this-because-rustdoc-stops-compile-fail-before-codegen)\n #[link(kind = \"dylib\")] extern {}\n-// error: #[link(...)] specified without `name = \"foo\"`\n+// error: `#[link(...)]` specified without `name = \"foo\"`\n ```\n \n Please add the name parameter to allow the rust compiler to find the library"}, {"sha": "66971bb6f8b1c914b168596451f8142d6b94a16f", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -102,7 +102,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                     match item.value_str() {\n                         Some(s) => lib.wasm_import_module = Some(s),\n                         None => {\n-                            let msg = \"must be of the form #[link(wasm_import_module = \\\"...\\\")]\";\n+                            let msg = \"must be of the form `#[link(wasm_import_module = \\\"...\\\")]`\";\n                             self.tcx.sess.span_err(item.span(), msg);\n                         }\n                     }\n@@ -117,7 +117,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n             let requires_name = kind_specified || lib.wasm_import_module.is_none();\n             if lib.name.is_none() && requires_name {\n                 struct_span_err!(self.tcx.sess, m.span, E0459,\n-                                 \"#[link(...)] specified without \\\n+                                 \"`#[link(...)]` specified without \\\n                                   `name = \\\"foo\\\"`\")\n                     .span_label(m.span, \"missing `name` argument\")\n                     .emit();\n@@ -136,7 +136,7 @@ impl Collector<'tcx> {\n             match span {\n                 Some(span) => {\n                     struct_span_err!(self.tcx.sess, span, E0454,\n-                                     \"#[link(name = \\\"\\\")] given with empty name\")\n+                                     \"`#[link(name = \\\"\\\")]` given with empty name\")\n                         .span_label(span, \"empty name given\")\n                         .emit();\n                 }\n@@ -187,7 +187,7 @@ impl Collector<'tcx> {\n                         &format!(\"an empty renaming target was specified for library `{}`\",name));\n                 } else if !any_duplicate {\n                     self.tcx.sess.err(&format!(\"renaming of the library `{}` was specified, \\\n-                                                however this crate contains no #[link(...)] \\\n+                                                however this crate contains no `#[link(...)]` \\\n                                                 attributes referencing this library.\", name));\n                 } else if renames.contains(name) {\n                     self.tcx.sess.err(&format!(\"multiple renamings were \\"}, {"sha": "1e28ee8da26b49e35aa7b6d9240fe7bbe1604672", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -3138,13 +3138,15 @@ mod test_map {\n \n     #[test]\n     fn test_from_iter() {\n-        let xs = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n+        let xs = [(1, 1), (2, 2), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)];\n \n         let map: HashMap<_, _> = xs.iter().cloned().collect();\n \n         for &(k, v) in &xs {\n             assert_eq!(map.get(&k), Some(&v));\n         }\n+\n+        assert_eq!(map.iter().len(), xs.len() - 1);\n     }\n \n     #[test]"}, {"sha": "d243412405a790e08f2f58254a3556013c9fd53d", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1782,13 +1782,15 @@ mod test_set {\n \n     #[test]\n     fn test_from_iter() {\n-        let xs = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n+        let xs = [1, 2, 2, 3, 4, 5, 6, 7, 8, 9];\n \n         let set: HashSet<_> = xs.iter().cloned().collect();\n \n         for x in &xs {\n             assert!(set.contains(x));\n         }\n+\n+        assert_eq!(set.iter().len(), xs.len() - 1);\n     }\n \n     #[test]"}, {"sha": "e951b575773b39cee8444b1227b176d22cd3136d", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -511,8 +511,8 @@ pub trait Read {\n     ///\n     /// Correspondingly, however, *callers* of this method may not assume any guarantees\n     /// about how the implementation uses `buf`. The trait is safe to implement,\n-    //  so it is possible that the code that's supposed to write to the buffer might also read\n-    //  from it. It is your responsibility to make sure that `buf` is initialized\n+    /// so it is possible that the code that's supposed to write to the buffer might also read\n+    /// from it. It is your responsibility to make sure that `buf` is initialized\n     /// before calling `read`. Calling `read` with an uninitialized `buf` (of the kind one\n     /// obtains via [`MaybeUninit<T>`]) is not safe, and can lead to undefined behavior.\n     ///"}, {"sha": "33cc87eb795554bf1945c186d4e72819fbe866ad", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -2,7 +2,7 @@\n \n use crate::fmt;\n use crate::io::{self, Read, Initializer, Write, ErrorKind, BufRead, IoSlice, IoSliceMut};\n-use crate::mem;\n+use crate::mem::MaybeUninit;\n \n /// Copies the entire contents of a reader into a writer.\n ///\n@@ -43,27 +43,23 @@ use crate::mem;\n pub fn copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> io::Result<u64>\n     where R: Read, W: Write\n {\n-    let mut buf = unsafe {\n-        // This is still technically undefined behavior due to creating a reference\n-        // to uninitialized data, but within libstd we can rely on more guarantees\n-        // than if this code were in an external lib\n-\n-        // FIXME: This should probably be changed to an array of `MaybeUninit<u8>`\n-        // once the `mem::MaybeUninit` slice APIs stabilize\n-        let mut buf: mem::MaybeUninit<[u8; super::DEFAULT_BUF_SIZE]> = mem::MaybeUninit::uninit();\n-        reader.initializer().initialize(&mut *buf.as_mut_ptr());\n-        buf.assume_init()\n-    };\n+    let mut buf = MaybeUninit::<[u8; super::DEFAULT_BUF_SIZE]>::uninit();\n+    // FIXME(#53491): This is calling `get_mut` and `get_ref` on an uninitialized\n+    // `MaybeUninit`. Revisit this once we decided whether that is valid or not.\n+    // This is still technically undefined behavior due to creating a reference\n+    // to uninitialized data, but within libstd we can rely on more guarantees\n+    // than if this code were in an external lib.\n+    unsafe { reader.initializer().initialize(buf.get_mut()); }\n \n     let mut written = 0;\n     loop {\n-        let len = match reader.read(&mut buf) {\n+        let len = match reader.read(unsafe { buf.get_mut() }) {\n             Ok(0) => return Ok(written),\n             Ok(len) => len,\n             Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,\n             Err(e) => return Err(e),\n         };\n-        writer.write_all(&buf[..len])?;\n+        writer.write_all(unsafe { &buf.get_ref()[..len] })?;\n         written += len as u64;\n     }\n }"}, {"sha": "49fb4be39b451d3a03ccbb339284711802bb02ce", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -205,7 +205,7 @@\n // Don't link to std. We are std.\n #![no_std]\n \n-//#![warn(deprecated_in_future)] // FIXME: std still has quite a few uses of `mem::uninitialized`\n+#![warn(deprecated_in_future)]\n #![warn(missing_docs)]\n #![warn(missing_debug_implementations)]\n #![deny(intra_doc_link_resolution_failure)] // rustdoc is run without -D warnings\n@@ -272,6 +272,7 @@\n #![feature(libc)]\n #![feature(link_args)]\n #![feature(linkage)]\n+#![feature(maybe_uninit_ref)]\n #![feature(mem_take)]\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]"}, {"sha": "c430e103951f158a9649eee31c459445e846c870", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -422,7 +422,7 @@ impl UdpSocket {\n     /// Sets the value of the `IP_MULTICAST_LOOP` option for this socket.\n     ///\n     /// If enabled, multicast packets will be looped back to the local socket.\n-    /// Note that this may not have any affect on IPv6 sockets.\n+    /// Note that this may not have any effect on IPv6 sockets.\n     ///\n     /// # Examples\n     ///\n@@ -464,7 +464,7 @@ impl UdpSocket {\n     /// this socket. The default value is 1 which means that multicast packets\n     /// don't leave the local network unless explicitly requested.\n     ///\n-    /// Note that this may not have any affect on IPv6 sockets.\n+    /// Note that this may not have any effect on IPv6 sockets.\n     ///\n     /// # Examples\n     ///"}, {"sha": "e29faf18d83e5029ecb53b83a8000c8b47fe00cc", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -163,6 +163,7 @@ pub use self::condvar::{Condvar, WaitTimeoutResult};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::mutex::{Mutex, MutexGuard};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(bootstrap, allow(deprecated_in_future))]\n #[allow(deprecated)]\n pub use self::once::{Once, OnceState, ONCE_INIT};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "77a52a8743d95015c56db27dfe319c76fa9f3265", "filename": "src/libstd/sys/cloudabi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,4 +1,4 @@\n-#![allow(deprecated)] // mem::uninitialized\n+#![allow(deprecated_in_future)] // mem::uninitialized; becomes `deprecated` when nightly is 1.39\n \n use crate::io::ErrorKind;\n use crate::mem;"}, {"sha": "bfefd9adbfe8f050878c1c726ce55cbb607849b3", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -226,7 +226,7 @@ impl<'a> StringReader<'a> {\n                     loop {\n                         idx = match string[idx..].find('\\r') {\n                             None => break,\n-                            Some(it) => it + 1\n+                            Some(it) => idx + it + 1\n                         };\n                         if string[idx..].chars().next() != Some('\\n') {\n                             self.err_span_(start + BytePos(idx as u32 - 1),"}, {"sha": "b728a9e1988c8825ad2562424c9c446532399300", "filename": "src/libsyntax/parse/lexer/unicode_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -50,7 +50,7 @@ const UNICODE_ARRAY: &[(char, &str, char)] = &[\n     ('\u2500', \"Box Drawings Light Horizontal\", '-'),\n     ('\u2501', \"Box Drawings Heavy Horizontal\", '-'),\n     ('\u31d0', \"CJK Stroke H\", '-'),\n-    ('\ua7f7', \"Latin Epigraphic Letter Dideways\", '-'),\n+    ('\ua7f7', \"Latin Epigraphic Letter Sideways I\", '-'),\n     ('\u1173', \"Hangul Jungseong Eu\", '-'),\n     ('\u3161', \"Hangul Letter Eu\", '-'),\n     ('\u4e00', \"CJK Unified Ideograph-4E00\", '-'),"}, {"sha": "66bdb670167eda2c90e52961364125be44eb0778", "filename": "src/test/incremental/unchecked_dirty_clean.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fincremental%2Funchecked_dirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fincremental%2Funchecked_dirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Funchecked_dirty_clean.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -11,24 +11,24 @@\n fn main() {\n \n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    //[cfail2]~^ ERROR found unchecked #[rustc_dirty]/#[rustc_clean] attribute\n+    //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n     {\n         // empty block\n     }\n \n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    //[cfail2]~^ ERROR found unchecked #[rustc_dirty]/#[rustc_clean] attribute\n+    //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n     {\n         // empty block\n     }\n }\n \n struct _Struct {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    //[cfail2]~^ ERROR found unchecked #[rustc_dirty]/#[rustc_clean] attribute\n+    //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n     _field1: i32,\n \n     #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    //[cfail2]~^ ERROR found unchecked #[rustc_dirty]/#[rustc_clean] attribute\n+    //[cfail2]~^ ERROR found unchecked `#[rustc_dirty]` / `#[rustc_clean]` attribute\n     _field2: i32,\n }"}, {"sha": "64a67f6e16036c86290c4b082f1544c99170481d", "filename": "src/test/ui-fulldeps/plugin-attr-register-deny.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -10,7 +10,7 @@ note: lint level defined here\n LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+error: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/plugin-attr-register-deny.rs:14:5\n    |\n LL |     #[bar]"}, {"sha": "6dfefe19c7fa4f688ae7cd38666b1db888942d8d", "filename": "src/test/ui/allocator/two-allocators2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,6 +1,6 @@\n // aux-build:system-allocator.rs\n // no-prefer-dynamic\n-// error-pattern: the #[global_allocator] in\n+// error-pattern: the `#[global_allocator]` in\n \n extern crate system_allocator;\n "}, {"sha": "b1fb4421ea048eb666650105f6f50a1493a9cb23", "filename": "src/test/ui/allocator/two-allocators2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators2.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,4 +1,4 @@\n-error: the #[global_allocator] in this crate conflicts with global allocator in: system_allocator\n+error: the `#[global_allocator]` in this crate conflicts with global allocator in: system_allocator\n \n error: aborting due to previous error\n "}, {"sha": "31dea2d4478f7a943ef5804d9cecc66be7833c93", "filename": "src/test/ui/allocator/two-allocators3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,7 +1,7 @@\n // aux-build:system-allocator.rs\n // aux-build:system-allocator2.rs\n // no-prefer-dynamic\n-// error-pattern: the #[global_allocator] in\n+// error-pattern: the `#[global_allocator]` in\n \n \n extern crate system_allocator;"}, {"sha": "ecffb192e2acb5fdfd7dd3de022aa32a3f638cd2", "filename": "src/test/ui/allocator/two-allocators3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators3.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,4 +1,4 @@\n-error: the #[global_allocator] in system_allocator conflicts with this global allocator in: system_allocator2\n+error: the `#[global_allocator]` in system_allocator conflicts with this global allocator in: system_allocator2\n \n error: aborting due to previous error\n "}, {"sha": "525c605a9cf6722026301272898cfa509a3d37a1", "filename": "src/test/ui/bad/bad-extern-link-attrs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,10 +1,10 @@\n-error[E0459]: #[link(...)] specified without `name = \"foo\"`\n+error[E0459]: `#[link(...)]` specified without `name = \"foo\"`\n   --> $DIR/bad-extern-link-attrs.rs:1:1\n    |\n LL | #[link()]\n    | ^^^^^^^^^ missing `name` argument\n \n-error[E0454]: #[link(name = \"\")] given with empty name\n+error[E0454]: `#[link(name = \"\")]` given with empty name\n   --> $DIR/bad-extern-link-attrs.rs:2:1\n    |\n LL | #[link(name = \"\")]"}, {"sha": "b9d1841f16ca374496887a76b74c8c773b771131", "filename": "src/test/ui/empty/empty-linkname.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fempty%2Fempty-linkname.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fempty%2Fempty-linkname.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-linkname.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,4 +1,4 @@\n-error[E0454]: #[link(name = \"\")] given with empty name\n+error[E0454]: `#[link(name = \"\")]` given with empty name\n   --> $DIR/empty-linkname.rs:1:1\n    |\n LL | #[link(name = \"\")]"}, {"sha": "499162694e57dfbc903faa51e73ae99e98c7d00e", "filename": "src/test/ui/error-codes/E0454.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Ferror-codes%2FE0454.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Ferror-codes%2FE0454.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0454.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,4 +1,4 @@\n-error[E0454]: #[link(name = \"\")] given with empty name\n+error[E0454]: `#[link(name = \"\")]` given with empty name\n   --> $DIR/E0454.rs:1:1\n    |\n LL | #[link(name = \"\")] extern {}"}, {"sha": "51f7764aaf283412bb3231fe8820d0ba57435b5f", "filename": "src/test/ui/error-codes/E0458.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Ferror-codes%2FE0458.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Ferror-codes%2FE0458.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0458.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -6,7 +6,7 @@ LL | #[link(kind = \"wonderful_unicorn\")] extern {}\n    |        |\n    |        unknown kind\n \n-error[E0459]: #[link(...)] specified without `name = \"foo\"`\n+error[E0459]: `#[link(...)]` specified without `name = \"foo\"`\n   --> $DIR/E0458.rs:1:1\n    |\n LL | #[link(kind = \"wonderful_unicorn\")] extern {}"}, {"sha": "c618fea9afc8a2e0689257eba33c5f80dc74a6cb", "filename": "src/test/ui/error-codes/E0459.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Ferror-codes%2FE0459.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Ferror-codes%2FE0459.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0459.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,4 +1,4 @@\n-error[E0459]: #[link(...)] specified without `name = \"foo\"`\n+error[E0459]: `#[link(...)]` specified without `name = \"foo\"`\n   --> $DIR/E0459.rs:1:1\n    |\n LL | #[link(kind = \"dylib\")] extern {}"}, {"sha": "94757c5a35af2628020c2c063933202365c7192e", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -632,7 +632,7 @@ warning: unused attribute\n LL |     #[no_std] fn f() { }\n    |     ^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:483:5\n    |\n LL |     #[no_std] fn f() { }\n@@ -644,7 +644,7 @@ warning: unused attribute\n LL |     #[no_std] struct S;\n    |     ^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:487:5\n    |\n LL |     #[no_std] struct S;\n@@ -656,7 +656,7 @@ warning: unused attribute\n LL |     #[no_std] type T = S;\n    |     ^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:491:5\n    |\n LL |     #[no_std] type T = S;\n@@ -668,7 +668,7 @@ warning: unused attribute\n LL |     #[no_std] impl S { }\n    |     ^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:495:5\n    |\n LL |     #[no_std] impl S { }\n@@ -680,7 +680,7 @@ warning: unused attribute\n LL | #[no_std]\n    | ^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:475:1\n    |\n LL | #[no_std]\n@@ -704,7 +704,7 @@ warning: unused attribute\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:638:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n@@ -716,7 +716,7 @@ warning: unused attribute\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:642:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n@@ -728,7 +728,7 @@ warning: unused attribute\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:646:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n@@ -740,7 +740,7 @@ warning: unused attribute\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:650:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n@@ -752,7 +752,7 @@ warning: unused attribute\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:630:1\n    |\n LL | #[crate_name = \"0900\"]\n@@ -776,7 +776,7 @@ warning: unused attribute\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:663:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n@@ -788,7 +788,7 @@ warning: unused attribute\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:667:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n@@ -800,7 +800,7 @@ warning: unused attribute\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:671:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n@@ -812,7 +812,7 @@ warning: unused attribute\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n@@ -824,7 +824,7 @@ warning: unused attribute\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:655:1\n    |\n LL | #[crate_type = \"0800\"]\n@@ -848,7 +848,7 @@ warning: unused attribute\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:688:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n@@ -860,7 +860,7 @@ warning: unused attribute\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:692:5\n    |\n LL |     #[feature(x0600)] struct S;\n@@ -872,7 +872,7 @@ warning: unused attribute\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:696:5\n    |\n LL |     #[feature(x0600)] type T = S;\n@@ -884,7 +884,7 @@ warning: unused attribute\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:5\n    |\n LL |     #[feature(x0600)] impl S { }\n@@ -896,7 +896,7 @@ warning: unused attribute\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:680:1\n    |\n LL | #[feature(x0600)]\n@@ -920,7 +920,7 @@ warning: unused attribute\n LL |     #[no_main] fn f() { }\n    |     ^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:714:5\n    |\n LL |     #[no_main] fn f() { }\n@@ -932,7 +932,7 @@ warning: unused attribute\n LL |     #[no_main] struct S;\n    |     ^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:718:5\n    |\n LL |     #[no_main] struct S;\n@@ -944,7 +944,7 @@ warning: unused attribute\n LL |     #[no_main] type T = S;\n    |     ^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:722:5\n    |\n LL |     #[no_main] type T = S;\n@@ -956,7 +956,7 @@ warning: unused attribute\n LL |     #[no_main] impl S { }\n    |     ^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:726:5\n    |\n LL |     #[no_main] impl S { }\n@@ -968,7 +968,7 @@ warning: unused attribute\n LL | #[no_main]\n    | ^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:706:1\n    |\n LL | #[no_main]\n@@ -992,7 +992,7 @@ warning: unused attribute\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:752:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n@@ -1004,7 +1004,7 @@ warning: unused attribute\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:756:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n@@ -1016,7 +1016,7 @@ warning: unused attribute\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:760:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n@@ -1028,7 +1028,7 @@ warning: unused attribute\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:764:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n@@ -1040,7 +1040,7 @@ warning: unused attribute\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:744:1\n    |\n LL | #[recursion_limit=\"0200\"]\n@@ -1064,7 +1064,7 @@ warning: unused attribute\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:777:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n@@ -1076,7 +1076,7 @@ warning: unused attribute\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:781:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n@@ -1088,7 +1088,7 @@ warning: unused attribute\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:785:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n@@ -1100,7 +1100,7 @@ warning: unused attribute\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:789:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n@@ -1112,7 +1112,7 @@ warning: unused attribute\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+warning: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:769:1\n    |\n LL | #[type_length_limit=\"0100\"]"}, {"sha": "314238a34df8695321784b16859753fa9b8cb0e0", "filename": "src/test/ui/feature-gate/issue-49983-see-issue-0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-49983-see-issue-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-49983-see-issue-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-49983-see-issue-0.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: use of unstable library feature 'ptr_internals': use NonNull instead and consider PhantomData<T> (if you also use #[may_dangle]), Send, and/or Sync\n+error[E0658]: use of unstable library feature 'ptr_internals': use `NonNull` instead and consider `PhantomData<T>` (if you also use `#[may_dangle]`), `Send`, and/or `Sync`\n   --> $DIR/issue-49983-see-issue-0.rs:4:30\n    |\n LL | #[allow(unused_imports)] use core::ptr::Unique;"}, {"sha": "84af2a0163ae44dbc6948aa69624f88e7bfb11bc", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -121,23 +121,23 @@ error[E0562]: `impl Trait` not allowed outside of function and inherent method r\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: add #![feature(impl_trait_in_bindings)] to the crate attributes to enable\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/feature-gate-associated_type_bounds.rs:60:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |               ^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: add #![feature(impl_trait_in_bindings)] to the crate attributes to enable\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/feature-gate-associated_type_bounds.rs:67:12\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |            ^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: add #![feature(impl_trait_in_bindings)] to the crate attributes to enable\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error: aborting due to 16 previous errors\n "}, {"sha": "bd648b40590ef7549cd191c0b2f47675b64fd64c", "filename": "src/test/ui/feature-gates/feature-gate-impl_trait_in_bindings.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_bindings.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -10,15 +10,15 @@ error[E0562]: `impl Trait` not allowed outside of function and inherent method r\n LL | const FOO: impl Copy = 42;\n    |            ^^^^^^^^^\n    |\n-   = help: add #![feature(impl_trait_in_bindings)] to the crate attributes to enable\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/feature-gate-impl_trait_in_bindings.rs:4:13\n    |\n LL | static BAR: impl Copy = 42;\n    |             ^^^^^^^^^\n    |\n-   = help: add #![feature(impl_trait_in_bindings)] to the crate attributes to enable\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9895b028a4e26a61fcef6df6f8a2c13537da93c6", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -232,7 +232,7 @@ error[E0562]: `impl Trait` not allowed outside of function and inherent method r\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n    |\n-   = help: add #![feature(impl_trait_in_bindings)] to the crate attributes to enable\n+   = help: add `#![feature(impl_trait_in_bindings)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:222:46"}, {"sha": "36714c39b315a7650c59eab3deef446884672a8c", "filename": "src/test/ui/invalid/invalid-plugin-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Finvalid%2Finvalid-plugin-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Finvalid%2Finvalid-plugin-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-plugin-attr.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -10,7 +10,7 @@ note: lint level defined here\n LL | #![deny(unused_attributes)]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+error: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/invalid-plugin-attr.rs:4:1\n    |\n LL | #[plugin(bla)]"}, {"sha": "ac700fbd0464392744b4258d4df22547fd773def", "filename": "src/test/ui/issues/issue-45562.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fissues%2Fissue-45562.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fissues%2Fissue-45562.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45562.fixed?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n #[no_mangle] pub static RAH: usize = 5;\n-//~^ ERROR const items should never be #[no_mangle]\n+//~^ ERROR const items should never be `#[no_mangle]`\n \n fn main() {}"}, {"sha": "eabb5a5cecf81208295c38766bcc18b1138db9b2", "filename": "src/test/ui/issues/issue-45562.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fissues%2Fissue-45562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fissues%2Fissue-45562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45562.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n #[no_mangle] pub const RAH: usize = 5;\n-//~^ ERROR const items should never be #[no_mangle]\n+//~^ ERROR const items should never be `#[no_mangle]`\n \n fn main() {}"}, {"sha": "be259d3f8a49e0399afeed8356948ddcef8c8614", "filename": "src/test/ui/issues/issue-45562.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fissues%2Fissue-45562.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fissues%2Fissue-45562.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45562.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,4 +1,4 @@\n-error: const items should never be #[no_mangle]\n+error: const items should never be `#[no_mangle]`\n   --> $DIR/issue-45562.rs:3:14\n    |\n LL | #[no_mangle] pub const RAH: usize = 5;"}, {"sha": "cd4a89f91c4cc25954dc27f285974cdf0ae6bc5f", "filename": "src/test/ui/lint/lint-misplaced-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Flint%2Flint-misplaced-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Flint%2Flint-misplaced-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-misplaced-attr.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -22,7 +22,7 @@ error: unused attribute\n LL | #[crate_type = \"bin\"] fn main() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n+error: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n   --> $DIR/lint-misplaced-attr.rs:11:1\n    |\n LL | #[crate_type = \"bin\"] fn main() {}"}, {"sha": "f260fc32303cff08343c89ba768a4fc208b25883", "filename": "src/test/ui/lint/lint-unexported-no-mangle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -6,10 +6,10 @@ fn foo() {\n \n #[allow(dead_code)]\n #[no_mangle]\n-const FOO: u64 = 1; //~ ERROR const items should never be #[no_mangle]\n+const FOO: u64 = 1; //~ ERROR const items should never be `#[no_mangle]`\n \n #[no_mangle]\n-pub const PUB_FOO: u64 = 1; //~ ERROR const items should never be #[no_mangle]\n+pub const PUB_FOO: u64 = 1; //~ ERROR const items should never be `#[no_mangle]`\n \n #[no_mangle]\n pub fn bar()  {"}, {"sha": "c2cbf5feaada4d8c08f93f6d7d79e582180c847a", "filename": "src/test/ui/lint/lint-unexported-no-mangle.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,12 +1,12 @@\n-warning: lint `private_no_mangle_fns` has been removed: `no longer a warning, #[no_mangle] functions always exported`\n+warning: lint `private_no_mangle_fns` has been removed: `no longer a warning, `#[no_mangle]` functions always exported`\n    |\n    = note: requested on the command line with `-F private_no_mangle_fns`\n \n-warning: lint `private_no_mangle_statics` has been removed: `no longer a warning, #[no_mangle] statics always exported`\n+warning: lint `private_no_mangle_statics` has been removed: `no longer a warning, `#[no_mangle]` statics always exported`\n    |\n    = note: requested on the command line with `-F private_no_mangle_statics`\n \n-error: const items should never be #[no_mangle]\n+error: const items should never be `#[no_mangle]`\n   --> $DIR/lint-unexported-no-mangle.rs:9:1\n    |\n LL | const FOO: u64 = 1;\n@@ -16,7 +16,7 @@ LL | const FOO: u64 = 1;\n    |\n    = note: requested on the command line with `-F no-mangle-const-items`\n \n-error: const items should never be #[no_mangle]\n+error: const items should never be `#[no_mangle]`\n   --> $DIR/lint-unexported-no-mangle.rs:12:1\n    |\n LL | pub const PUB_FOO: u64 = 1;"}, {"sha": "aa5518d1a7adcfcbf60b51945d807d9ae17d5e48", "filename": "src/test/ui/lint/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -4,7 +4,7 @@\n #![feature(no_debug)]\n \n #[no_mangle] const DISCOVERY: usize = 1;\n-//~^ ERROR const items should never be #[no_mangle]\n+//~^ ERROR const items should never be `#[no_mangle]`\n //~| HELP try a static value\n \n #[no_mangle]\n@@ -20,15 +20,15 @@ mod badlands {\n     // item is already `pub` (but triggered the lint because, e.g., it's in a\n     // private module). (Issue #47383)\n     #[no_mangle] pub const DAUNTLESS: bool = true;\n-    //~^ ERROR const items should never be #[no_mangle]\n+    //~^ ERROR const items should never be `#[no_mangle]`\n     //~| HELP try a static value\n     #[no_mangle] pub fn val_jean<T>() {}\n     //~^ WARN functions generic over types or consts must be mangled\n     //~| HELP remove this attribute\n \n     // ... but we can suggest just-`pub` instead of restricted\n     #[no_mangle] pub(crate) const VETAR: bool = true;\n-    //~^ ERROR const items should never be #[no_mangle]\n+    //~^ ERROR const items should never be `#[no_mangle]`\n     //~| HELP try a static value\n     #[no_mangle] pub(crate) fn crossfield<T>() {}\n     //~^ WARN functions generic over types or consts must be mangled"}, {"sha": "2042ed7553786fe6e7e760bf862304f8d43f6fbf", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -52,7 +52,7 @@ LL | ||             b = 1;\n    |  |____________|\n    |               help: remove this `mut`\n \n-error: const items should never be #[no_mangle]\n+error: const items should never be `#[no_mangle]`\n   --> $DIR/suggestions.rs:6:14\n    |\n LL | #[no_mangle] const DISCOVERY: usize = 1;\n@@ -83,7 +83,7 @@ LL |             Equinox { warp_factor: warp_factor } => {}\n    |\n    = note: `#[warn(non_shorthand_field_patterns)]` on by default\n \n-error: const items should never be #[no_mangle]\n+error: const items should never be `#[no_mangle]`\n   --> $DIR/suggestions.rs:22:18\n    |\n LL |     #[no_mangle] pub const DAUNTLESS: bool = true;\n@@ -99,7 +99,7 @@ LL |     #[no_mangle] pub fn val_jean<T>() {}\n    |     |\n    |     help: remove this attribute\n \n-error: const items should never be #[no_mangle]\n+error: const items should never be `#[no_mangle]`\n   --> $DIR/suggestions.rs:30:18\n    |\n LL |     #[no_mangle] pub(crate) const VETAR: bool = true;"}, {"sha": "59648c42a5f3151a06a6aba9d8d2d8c83568ada1", "filename": "src/test/ui/missing/missing-allocator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-allocator.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,4 +1,4 @@\n-error: no global memory allocator found but one is required; link to std or add #[global_allocator] to a static item that implements the GlobalAlloc trait.\n+error: no global memory allocator found but one is required; link to std or add `#[global_allocator]` to a static item that implements the GlobalAlloc trait.\n \n error: aborting due to previous error\n "}, {"sha": "b9530587787917b49c39848d9d424ddb2071fa2f", "filename": "src/test/ui/missing_debug_impls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fmissing_debug_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fmissing_debug_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing_debug_impls.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,4 +1,4 @@\n-error: type does not implement `fmt::Debug`; consider adding #[derive(Debug)] or a manual implementation\n+error: type does not implement `fmt::Debug`; consider adding `#[derive(Debug)]` or a manual implementation\n   --> $DIR/missing_debug_impls.rs:7:1\n    |\n LL | pub enum A {}\n@@ -10,7 +10,7 @@ note: lint level defined here\n LL | #![deny(missing_debug_implementations)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: type does not implement `fmt::Debug`; consider adding #[derive(Debug)] or a manual implementation\n+error: type does not implement `fmt::Debug`; consider adding `#[derive(Debug)]` or a manual implementation\n   --> $DIR/missing_debug_impls.rs:20:1\n    |\n LL | pub struct Foo;"}, {"sha": "ee14c55d292a760dd6655fd18346a00a99448f7f", "filename": "src/test/ui/parser/several-carriage-returns-in-doc-comment.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fparser%2Fseveral-carriage-returns-in-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fparser%2Fseveral-carriage-returns-in-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fseveral-carriage-returns-in-doc-comment.rs?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -0,0 +1,10 @@\n+// Issue #62863\n+// ignore-tidy-cr\n+\n+// Note: if you see ^M in this file, that's how your editor renders literal `\\r`\n+\n+/// This do\rc comment contains \rthree isolated `\\r`\r symbols\n+//~^ ERROR bare CR not allowed in doc-comment\n+//~| ERROR bare CR not allowed in doc-comment\n+//~| ERROR bare CR not allowed in doc-comment\n+fn main() {}"}, {"sha": "07066fc22e6cd4800869b67207b7bbb154de6c20", "filename": "src/test/ui/parser/several-carriage-returns-in-doc-comment.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fparser%2Fseveral-carriage-returns-in-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fparser%2Fseveral-carriage-returns-in-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fseveral-carriage-returns-in-doc-comment.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -0,0 +1,20 @@\n+error: bare CR not allowed in doc-comment\n+  --> $DIR/several-carriage-returns-in-doc-comment.rs:6:12\n+   |\n+LL | /// This do\rc comment contains \rthree isolated `\\r`\r symbols\n+   |            ^\n+\n+error: bare CR not allowed in doc-comment\n+  --> $DIR/several-carriage-returns-in-doc-comment.rs:6:32\n+   |\n+LL | /// This do\rc comment contains \rthree isolated `\\r`\r symbols\n+   |                               ^\n+\n+error: bare CR not allowed in doc-comment\n+  --> $DIR/several-carriage-returns-in-doc-comment.rs:6:52\n+   |\n+LL | /// This do\rc comment contains \rthree isolated `\\r`\r symbols\n+   |                                                  ^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "d836741f9eddfca0f42a2b80a278f6a9a3180ace", "filename": "src/test/ui/rfc1717/missing-link-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Frfc1717%2Fmissing-link-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Frfc1717%2Fmissing-link-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1717%2Fmissing-link-attr.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,4 +1,4 @@\n-error: renaming of the library `foo` was specified, however this crate contains no #[link(...)] attributes referencing this library.\n+error: renaming of the library `foo` was specified, however this crate contains no `#[link(...)]` attributes referencing this library.\n \n error: aborting due to previous error\n "}, {"sha": "47d6cb6899723c4b2bcd2b4b5d937ea714928081", "filename": "src/test/ui/wasm-import-module.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fwasm-import-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e649e903440bfd919bfc9db848c28df6d795a116/src%2Ftest%2Fui%2Fwasm-import-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwasm-import-module.stderr?ref=e649e903440bfd919bfc9db848c28df6d795a116", "patch": "@@ -1,16 +1,16 @@\n-error: must be of the form #[link(wasm_import_module = \"...\")]\n+error: must be of the form `#[link(wasm_import_module = \"...\")]`\n   --> $DIR/wasm-import-module.rs:1:22\n    |\n LL | #[link(name = \"...\", wasm_import_module)]\n    |                      ^^^^^^^^^^^^^^^^^^\n \n-error: must be of the form #[link(wasm_import_module = \"...\")]\n+error: must be of the form `#[link(wasm_import_module = \"...\")]`\n   --> $DIR/wasm-import-module.rs:4:22\n    |\n LL | #[link(name = \"...\", wasm_import_module(x))]\n    |                      ^^^^^^^^^^^^^^^^^^^^^\n \n-error: must be of the form #[link(wasm_import_module = \"...\")]\n+error: must be of the form `#[link(wasm_import_module = \"...\")]`\n   --> $DIR/wasm-import-module.rs:7:22\n    |\n LL | #[link(name = \"...\", wasm_import_module())]"}]}