{"sha": "f4f96e294335de13bc7341c626837affdb2e4a45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0Zjk2ZTI5NDMzNWRlMTNiYzczNDFjNjI2ODM3YWZmZGIyZTRhNDU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-22T01:41:44Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-24T16:24:49Z"}, "message": "Normalise diagnostics with respect to \"the X is declared/defined here\"", "tree": {"sha": "9099bdacdf568fdbccfca09142a7b49342b850fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9099bdacdf568fdbccfca09142a7b49342b850fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4f96e294335de13bc7341c626837affdb2e4a45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f96e294335de13bc7341c626837affdb2e4a45", "html_url": "https://github.com/rust-lang/rust/commit/f4f96e294335de13bc7341c626837affdb2e4a45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4f96e294335de13bc7341c626837affdb2e4a45/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5", "html_url": "https://github.com/rust-lang/rust/commit/dee12bb2b7d75cce8fc8f21b5d7ea0da920df5e5"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "4c4383aa603cb075444c4e14a3888c7b652c91a5", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=f4f96e294335de13bc7341c626837affdb2e4a45", "patch": "@@ -694,7 +694,7 @@ impl<'a> CrateLoader<'a> {\n                 self.sess\n                     .struct_span_err(*span2, \"cannot define multiple global allocators\")\n                     .span_label(*span2, \"cannot define a new global allocator\")\n-                    .span_label(*span1, \"previous global allocator is defined here\")\n+                    .span_label(*span1, \"previous global allocator defined here\")\n                     .emit();\n                 true\n             }"}, {"sha": "89fe1883e629b6a68c9cb508494eb1f547bfcf20", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=f4f96e294335de13bc7341c626837affdb2e4a45", "patch": "@@ -1259,7 +1259,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         err.span_label(\n             upvar_span,\n-            format!(\"`{}` is declared here, outside of the {} body\", upvar_name, escapes_from),\n+            format!(\"`{}` declared here, outside of the {} body\", upvar_name, escapes_from),\n         );\n \n         err.span_label(borrow_span, format!(\"borrow is only valid in the {} body\", escapes_from));"}, {"sha": "0e040ec7827e16573d21d3be3260ce8d73830c8c", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=f4f96e294335de13bc7341c626837affdb2e4a45", "patch": "@@ -457,7 +457,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             diag.span_label(\n                 outlived_fr_span,\n                 format!(\n-                    \"`{}` is declared here, outside of the {} body\",\n+                    \"`{}` declared here, outside of the {} body\",\n                     outlived_fr_name, escapes_from\n                 ),\n             );"}, {"sha": "da636a5a567f358f7b99a26b169f5dba2a77cb8f", "filename": "src/test/ui/allocator/two-allocators.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr?ref=f4f96e294335de13bc7341c626837affdb2e4a45", "patch": "@@ -2,7 +2,7 @@ error: cannot define multiple global allocators\n   --> $DIR/two-allocators.rs:6:1\n    |\n LL | static A: System = System;\n-   | -------------------------- previous global allocator is defined here\n+   | -------------------------- previous global allocator defined here\n LL | #[global_allocator]\n LL | static B: System = System;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot define a new global allocator"}, {"sha": "51bb4dee6762a3a688d9b01548d77969d6bf0d94", "filename": "src/test/ui/borrowck/issue-45983.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr?ref=f4f96e294335de13bc7341c626837affdb2e4a45", "patch": "@@ -2,7 +2,7 @@ error[E0521]: borrowed data escapes outside of closure\n   --> $DIR/issue-45983.rs:20:18\n    |\n LL |     let x = None;\n-   |         - `x` is declared here, outside of the closure body\n+   |         - `x` declared here, outside of the closure body\n LL |     give_any(|y| x = Some(y));\n    |               -  ^^^^^^^^^^^ `y` escapes the closure body here\n    |               |"}, {"sha": "9986220218e28c673642b09348f5f282464f9e74", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr?ref=f4f96e294335de13bc7341c626837affdb2e4a45", "patch": "@@ -2,7 +2,7 @@ error[E0521]: borrowed data escapes outside of generator\n   --> $DIR/ref-escapes-but-not-over-yield.rs:11:9\n    |\n LL |     let mut a = &3;\n-   |         ----- `a` is declared here, outside of the generator body\n+   |         ----- `a` declared here, outside of the generator body\n ...\n LL |         a = &b;\n    |         ^^^^--"}, {"sha": "f5723ba5da5ba4397bae8cc4c93cefaee36c5839", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=f4f96e294335de13bc7341c626837affdb2e4a45", "patch": "@@ -19,7 +19,7 @@ error[E0521]: borrowed data escapes outside of closure\n LL |     foo(cell, |cell_a, cell_x| {\n    |                ------  ------ `cell_x` is a reference that is only valid in the closure body\n    |                |\n-   |                `cell_a` is declared here, outside of the closure body\n+   |                `cell_a` declared here, outside of the closure body\n LL |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ `cell_x` escapes the closure body here\n "}, {"sha": "db7f57ceccf134342a5ed88b5379afbb22a7f531", "filename": "src/test/ui/nll/outlives-suggestion-simple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4f96e294335de13bc7341c626837affdb2e4a45/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr?ref=f4f96e294335de13bc7341c626837affdb2e4a45", "patch": "@@ -99,7 +99,7 @@ error[E0521]: borrowed data escapes outside of function\n LL |     fn get_bar(&self) -> Bar2 {\n    |                -----\n    |                |\n-   |                `self` is declared here, outside of the function body\n+   |                `self` declared here, outside of the function body\n    |                `self` is a reference that is only valid in the function body\n LL |         Bar2::new(&self)\n    |         ^^^^^^^^^^^^^^^^ `self` escapes the function body here"}]}