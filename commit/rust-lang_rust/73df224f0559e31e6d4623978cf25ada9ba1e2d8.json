{"sha": "73df224f0559e31e6d4623978cf25ada9ba1e2d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZGYyMjRmMDU1OWUzMWU2ZDQ2MjM5NzhjZjI1YWRhOWJhMWUyZDg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-23T14:01:46Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-23T14:02:26Z"}, "message": "Review feedback: add unstable marker to Placer API and put in bound that now works.", "tree": {"sha": "fcfaa4cf8f35ec735078cafe157c4f835d7cc06d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcfaa4cf8f35ec735078cafe157c4f835d7cc06d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73df224f0559e31e6d4623978cf25ada9ba1e2d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73df224f0559e31e6d4623978cf25ada9ba1e2d8", "html_url": "https://github.com/rust-lang/rust/commit/73df224f0559e31e6d4623978cf25ada9ba1e2d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73df224f0559e31e6d4623978cf25ada9ba1e2d8/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1905a498751af69ffe78de8eae0c4e83d562d175", "url": "https://api.github.com/repos/rust-lang/rust/commits/1905a498751af69ffe78de8eae0c4e83d562d175", "html_url": "https://github.com/rust-lang/rust/commit/1905a498751af69ffe78de8eae0c4e83d562d175"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "f66495c4057c4c283350eaef90296ac81bf0ca51", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73df224f0559e31e6d4623978cf25ada9ba1e2d8/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73df224f0559e31e6d4623978cf25ada9ba1e2d8/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=73df224f0559e31e6d4623978cf25ada9ba1e2d8", "patch": "@@ -70,6 +70,8 @@\n        test(no_crate_inject))]\n #![no_std]\n \n+// SNAP d4432b3\n+#![allow(unused_features)] // until feature(placement_in_syntax) is in snap\n #![feature(allocator)]\n #![feature(box_syntax)]\n #![feature(coerce_unsized)]\n@@ -83,6 +85,7 @@\n #![feature(nonzero)]\n #![feature(optin_builtin_traits)]\n #![feature(placement_in_syntax)]\n+#![feature(placement_new_protocol)]\n #![feature(raw)]\n #![feature(staged_api)]\n #![feature(unboxed_closures)]"}, {"sha": "2ea42011a5cf2ff6a2206c52ad780a689bc25394", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/73df224f0559e31e6d4623978cf25ada9ba1e2d8/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73df224f0559e31e6d4623978cf25ada9ba1e2d8/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=73df224f0559e31e6d4623978cf25ada9ba1e2d8", "patch": "@@ -1285,6 +1285,7 @@ impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n /// If evaluating EXPR fails, then the destructor for the\n /// implementation of Place to clean up any intermediate state\n /// (e.g. deallocate box storage, pop a stack, etc).\n+#[unstable(feature = \"placement_new_protocol\")]\n pub trait Place<Data: ?Sized> {\n     /// Returns the address where the input value will be written.\n     /// Note that the data at this address is generally uninitialized,\n@@ -1315,6 +1316,7 @@ pub trait Place<Data: ?Sized> {\n /// Values for types implementing this trait usually are transient\n /// intermediate values (e.g. the return value of `Vec::emplace_back`)\n /// or `Copy`, since the `make_place` method takes `self` by value.\n+#[unstable(feature = \"placement_new_protocol\")]\n pub trait Placer<Data: ?Sized> {\n     /// `Place` is the intermedate agent guarding the\n     /// uninitialized state for `Data`.\n@@ -1325,6 +1327,7 @@ pub trait Placer<Data: ?Sized> {\n }\n \n /// Specialization of `Place` trait supporting `in (PLACE) EXPR`.\n+#[unstable(feature = \"placement_new_protocol\")]\n pub trait InPlace<Data: ?Sized>: Place<Data> {\n     /// `Owner` is the type of the end value of `in (PLACE) EXPR`\n     ///\n@@ -1361,11 +1364,12 @@ pub trait InPlace<Data: ?Sized>: Place<Data> {\n /// `<T as Boxed>` in turn dictates determines which\n /// implementation of `BoxPlace` to use, namely:\n /// `<<T as Boxed>::Place as BoxPlace>`.\n+#[unstable(feature = \"placement_new_protocol\")]\n pub trait Boxed {\n     /// The kind of data that is stored in this kind of box.\n     type Data;  /* (`Data` unused b/c cannot yet express below bound.) */\n     /// The place that will negotiate the storage of the data.\n-    type Place; /* should be bounded by BoxPlace<Self::Data> */\n+    type Place: BoxPlace<Self::Data>;\n \n     /// Converts filled place into final owning value, shifting\n     /// deallocation/cleanup responsibilities (if any remain), over to\n@@ -1374,6 +1378,7 @@ pub trait Boxed {\n }\n \n /// Specialization of `Place` trait supporting `box EXPR`.\n+#[unstable(feature = \"placement_new_protocol\")]\n pub trait BoxPlace<Data: ?Sized> : Place<Data> {\n     /// Creates a globally fresh place.\n     fn make_place() -> Self;"}]}