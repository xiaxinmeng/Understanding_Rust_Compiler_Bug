{"sha": "0b168c693a7c9e1307b143937d6537b36b929303", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMTY4YzY5M2E3YzllMTMwN2IxNDM5MzdkNjUzN2IzNmI5MjkzMDM=", "commit": {"author": {"name": "daxpedda", "email": "daxpedda@gmail.com", "date": "2020-02-16T21:49:47Z"}, "committer": {"name": "daxpedda", "email": "daxpedda@gmail.com", "date": "2020-02-17T13:43:32Z"}, "message": "Add `Future` detection for `missing_errors_doc`.", "tree": {"sha": "cbaef2362dff768f3e8cd778b3c7ec5f86525fa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbaef2362dff768f3e8cd778b3c7ec5f86525fa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b168c693a7c9e1307b143937d6537b36b929303", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3qx/rJh59vdc2+v9Q9YqPqOI5G8FAl5KmIQACgkQQ9YqPqOI\n5G80qA/5AT5cIUel8UMEwUCb8b5pOsLSBZZguzofyLmaIp6Ofbm/N3JSHCmnU7uO\nSmXeahHm/VJAA0pN6uUOWde+MdF7EYWv7EZLG1VwAE9/kn8o3P8VRd6jMoxHeQuU\ncd3O4xqO/0ll5ZhCZvcZHwtEoXDgmYzxWsBTE43fKmIrN61mjUvh+jnmGDy6gZ5O\nzJR1nnjH6ypo0CQ0rEMYFEe7oaj8xKM7Gd5N2FPZD0GXTtMuojgVTED4z1mUnRk1\ny5l9Xd+sb7tz3qF2mlLPikAWZv5r63Rv6sp4nX9mRV/PK6Rc43pcf2D3Xh7kEBMe\nfLR2RwAjyZVJgY4hVlvh/2UpSoeg6hlbgWqaPzyMkLsy9gc58EBN9MAiUATr0+86\nSltyRORyaMpHXDhrtYOsCV9ta7xTGxYZwrBXcSQycuXRkI8mFf85HzWF40Eb79dq\nQPaHzJyt4eL07IcweDnYloLoh1t9fs5FQB1XSTbrdpAPBC7i9j9CtZWttLNn30Dc\nlfXDMpPXJNkNlkHxMK8DkTIydZP0dlgQdaoYc9CPcaSZhIAl3oLVPsmVpk3QNM7x\nxz5Uo5qx857OEXLcBvHcid7iLGe1u25vGBW1Z0pPhNs4BdKHlTzPTLRxw1HFtnG2\nOP+70JIhuRTmI05FpvVJy7d0mlUsAOpQKpGV+cMktJZB3yJ7YAg=\n=q2lA\n-----END PGP SIGNATURE-----", "payload": "tree cbaef2362dff768f3e8cd778b3c7ec5f86525fa0\nparent b91ae16eb1ab03b996de5ffc44db054244c1d2f6\nauthor daxpedda <daxpedda@gmail.com> 1581889787 +0100\ncommitter daxpedda <daxpedda@gmail.com> 1581947012 +0100\n\nAdd `Future` detection for `missing_errors_doc`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b168c693a7c9e1307b143937d6537b36b929303", "html_url": "https://github.com/rust-lang/rust/commit/0b168c693a7c9e1307b143937d6537b36b929303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b168c693a7c9e1307b143937d6537b36b929303/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b91ae16eb1ab03b996de5ffc44db054244c1d2f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b91ae16eb1ab03b996de5ffc44db054244c1d2f6", "html_url": "https://github.com/rust-lang/rust/commit/b91ae16eb1ab03b996de5ffc44db054244c1d2f6"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "4b1f2ec68cb1ad9186ad7e76bbcb4ccaee904343", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0b168c693a7c9e1307b143937d6537b36b929303/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b168c693a7c9e1307b143937d6537b36b929303/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=0b168c693a7c9e1307b143937d6537b36b929303", "patch": "@@ -1,6 +1,7 @@\n use crate::utils::{is_entrypoint_fn, match_type, paths, return_ty, span_lint};\n use itertools::Itertools;\n use rustc::lint::in_external_macro;\n+use rustc::ty::TyKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -213,13 +214,33 @@ fn lint_for_missing_headers<'a, 'tcx>(\n             \"unsafe function's docs miss `# Safety` section\",\n         );\n     }\n-    if !headers.errors && match_type(cx, return_ty(cx, hir_id), &paths::RESULT) {\n-        span_lint(\n-            cx,\n-            MISSING_ERRORS_DOC,\n-            span,\n-            \"docs for function returning `Result` missing `# Errors` section\",\n-        );\n+    if !headers.errors {\n+        if match_type(cx, return_ty(cx, hir_id), &paths::RESULT) {\n+            span_lint(\n+                cx,\n+                MISSING_ERRORS_DOC,\n+                span,\n+                \"docs for function returning `Result` missing `# Errors` section\",\n+            );\n+        } else {\n+            use TyKind::*;\n+            let def_id = cx.tcx.hir().local_def_id(hir_id);\n+            let mir = cx.tcx.optimized_mir(def_id);\n+            if let Opaque(_, subs) = mir.return_ty().kind {\n+                if let Some(ty) = subs.types().next() {\n+                    if let Generator(_, subs, _) = ty.kind {\n+                        if match_type(cx, subs.as_generator().return_ty(def_id, cx.tcx), &paths::RESULT) {\n+                            span_lint(\n+                                cx,\n+                                MISSING_ERRORS_DOC,\n+                                span,\n+                                \"docs for function returning `Result` missing `# Errors` section\",\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n+        }\n     }\n }\n "}]}