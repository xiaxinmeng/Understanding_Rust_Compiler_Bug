{"sha": "982cb824ce6254fef0525073597d39957bcc0b92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MmNiODI0Y2U2MjU0ZmVmMDUyNTA3MzU5N2QzOTk1N2JjYzBiOTI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-31T00:33:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:59Z"}, "message": "libsyntax: De-`@mut` `Interner::vect`", "tree": {"sha": "48dde6a5d1301aaa7f1a058db4f64858d06582fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48dde6a5d1301aaa7f1a058db4f64858d06582fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/982cb824ce6254fef0525073597d39957bcc0b92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/982cb824ce6254fef0525073597d39957bcc0b92", "html_url": "https://github.com/rust-lang/rust/commit/982cb824ce6254fef0525073597d39957bcc0b92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/982cb824ce6254fef0525073597d39957bcc0b92/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c", "html_url": "https://github.com/rust-lang/rust/commit/4c85cf7a40b4a63e7629d39d2a2ad0f348c1459c"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "b694e1f702b4ea30a225c6539affbfa74b7a253b", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/982cb824ce6254fef0525073597d39957bcc0b92/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982cb824ce6254fef0525073597d39957bcc0b92/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=982cb824ce6254fef0525073597d39957bcc0b92", "patch": "@@ -20,15 +20,15 @@ use std::hashmap::HashMap;\n \n pub struct Interner<T> {\n     priv map: @RefCell<HashMap<T, Name>>,\n-    priv vect: @mut ~[T],\n+    priv vect: @RefCell<~[T]>,\n }\n \n // when traits can extend traits, we should extend index<Name,T> to get []\n impl<T:Eq + IterBytes + Hash + Freeze + Clone + 'static> Interner<T> {\n     pub fn new() -> Interner<T> {\n         Interner {\n             map: @RefCell::new(HashMap::new()),\n-            vect: @mut ~[],\n+            vect: @RefCell::new(~[]),\n         }\n     }\n \n@@ -47,28 +47,30 @@ impl<T:Eq + IterBytes + Hash + Freeze + Clone + 'static> Interner<T> {\n             None => (),\n         }\n \n-        let vect = &mut *self.vect;\n-        let new_idx = vect.len() as Name;\n+        let mut vect = self.vect.borrow_mut();\n+        let new_idx = vect.get().len() as Name;\n         map.get().insert(val.clone(), new_idx);\n-        vect.push(val);\n+        vect.get().push(val);\n         new_idx\n     }\n \n     pub fn gensym(&self, val: T) -> Name {\n-        let new_idx = {\n-            let vect = &*self.vect;\n-            vect.len() as Name\n-        };\n+        let mut vect = self.vect.borrow_mut();\n+        let new_idx = vect.get().len() as Name;\n         // leave out of .map to avoid colliding\n-        self.vect.push(val);\n+        vect.get().push(val);\n         new_idx\n     }\n \n     pub fn get(&self, idx: Name) -> T {\n-        self.vect[idx].clone()\n+        let vect = self.vect.borrow();\n+        vect.get()[idx].clone()\n     }\n \n-    pub fn len(&self) -> uint { let vect = &*self.vect; vect.len() }\n+    pub fn len(&self) -> uint {\n+        let vect = self.vect.borrow();\n+        vect.get().len()\n+    }\n \n     pub fn find_equiv<Q:Hash + IterBytes + Equiv<T>>(&self, val: &Q)\n                                               -> Option<Name> {\n@@ -84,15 +86,15 @@ impl<T:Eq + IterBytes + Hash + Freeze + Clone + 'static> Interner<T> {\n // borrowed pointers rather than @ ones, resulting in less allocation.\n pub struct StrInterner {\n     priv map: @RefCell<HashMap<@str, Name>>,\n-    priv vect: @mut ~[@str],\n+    priv vect: @RefCell<~[@str]>,\n }\n \n // when traits can extend traits, we should extend index<Name,T> to get []\n impl StrInterner {\n     pub fn new() -> StrInterner {\n         StrInterner {\n             map: @RefCell::new(HashMap::new()),\n-            vect: @mut ~[],\n+            vect: @RefCell::new(~[]),\n         }\n     }\n \n@@ -112,14 +114,16 @@ impl StrInterner {\n         let new_idx = self.len() as Name;\n         let val = val.to_managed();\n         map.get().insert(val, new_idx);\n-        self.vect.push(val);\n+        let mut vect = self.vect.borrow_mut();\n+        vect.get().push(val);\n         new_idx\n     }\n \n     pub fn gensym(&self, val: &str) -> Name {\n         let new_idx = self.len() as Name;\n         // leave out of .map to avoid colliding\n-        self.vect.push(val.to_managed());\n+        let mut vect = self.vect.borrow_mut();\n+        vect.get().push(val.to_managed());\n         new_idx\n     }\n \n@@ -136,13 +140,21 @@ impl StrInterner {\n     pub fn gensym_copy(&self, idx : Name) -> Name {\n         let new_idx = self.len() as Name;\n         // leave out of map to avoid colliding\n-        self.vect.push(self.vect[idx]);\n+        let mut vect = self.vect.borrow_mut();\n+        let existing = vect.get()[idx];\n+        vect.get().push(existing);\n         new_idx\n     }\n \n-    pub fn get(&self, idx: Name) -> @str { self.vect[idx] }\n+    pub fn get(&self, idx: Name) -> @str {\n+        let vect = self.vect.borrow();\n+        vect.get()[idx]\n+    }\n \n-    pub fn len(&self) -> uint { let vect = &*self.vect; vect.len() }\n+    pub fn len(&self) -> uint {\n+        let vect = self.vect.borrow();\n+        vect.get().len()\n+    }\n \n     pub fn find_equiv<Q:Hash + IterBytes + Equiv<@str>>(&self, val: &Q)\n                                                          -> Option<Name> {"}]}