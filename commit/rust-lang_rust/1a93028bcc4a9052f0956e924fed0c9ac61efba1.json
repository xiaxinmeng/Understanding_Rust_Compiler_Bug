{"sha": "1a93028bcc4a9052f0956e924fed0c9ac61efba1", "node_id": "C_kwDOAAsO6NoAKDFhOTMwMjhiY2M0YTkwNTJmMDk1NmU5MjRmZWQwYzlhYzYxZWZiYTE", "commit": {"author": {"name": "fee1-dead", "email": "ent3rm4n@gmail.com", "date": "2022-09-26T01:27:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-26T01:27:36Z"}, "message": "Rollup merge of #101851 - Xiretza:diagnostic-derive-cleanups, r=davidtwco\n\nClean up (sub)diagnostic derives\n\nThe biggest chunk of this is unifying the parsing of subdiagnostic attributes (`#[error]`, `#[suggestion(...)]`, `#[label(...)]`, etc) between `Subdiagnostic` and `Diagnostic` type attributes as well as `Diagnostic` field attributes.\n\nIt also improves a number of proc macro diagnostics.\n\nWaiting for #101558.", "tree": {"sha": "8e90f4153ad1f65b157bf8381fc0301fcd80a1ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e90f4153ad1f65b157bf8381fc0301fcd80a1ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a93028bcc4a9052f0956e924fed0c9ac61efba1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjMQAICRBK7hj4Ov3rIwAA4EwIAIhtQygf1xSWh/d+QgbwWlWa\nE31AlOUR3+V2cb/Y/gw12KiV+ppsgPunVg4itrrLVK/BJdTWFYdSDihvQ0a8oS/z\nxnc013tHTX1t3Brn9l8K/ZInonAg5e9RuTsKkC1PssqlIjOh9n70FT+Bty6DT2dy\n8p6H/UALi5q3FJ0X/FtVX6Qp7YK5ROQX0sBjjNeqXH0Bi8WeAfBvNVBHsq9uUdLR\naOMgyKONOGbEBvH/YZUiGBB8jcV9FEjfFsZasQ7c2ixh2GeQ/xMU7GNnuX7CoS8C\nOfEOvtrJv6sCwvMJyQ4D+Ee+gICzt7lskW8QBzhxth4e1P7uJ6kAWuNvFurBnlU=\n=OR7h\n-----END PGP SIGNATURE-----\n", "payload": "tree 8e90f4153ad1f65b157bf8381fc0301fcd80a1ba\nparent ff40f2ec95923c4d45366e85bcff17d75df68d68\nparent 336a72a8daea236a89787f16931611310315340c\nauthor fee1-dead <ent3rm4n@gmail.com> 1664155656 +0800\ncommitter GitHub <noreply@github.com> 1664155656 +0800\n\nRollup merge of #101851 - Xiretza:diagnostic-derive-cleanups, r=davidtwco\n\nClean up (sub)diagnostic derives\n\nThe biggest chunk of this is unifying the parsing of subdiagnostic attributes (`#[error]`, `#[suggestion(...)]`, `#[label(...)]`, etc) between `Subdiagnostic` and `Diagnostic` type attributes as well as `Diagnostic` field attributes.\n\nIt also improves a number of proc macro diagnostics.\n\nWaiting for #101558.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a93028bcc4a9052f0956e924fed0c9ac61efba1", "html_url": "https://github.com/rust-lang/rust/commit/1a93028bcc4a9052f0956e924fed0c9ac61efba1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a93028bcc4a9052f0956e924fed0c9ac61efba1/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff40f2ec95923c4d45366e85bcff17d75df68d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff40f2ec95923c4d45366e85bcff17d75df68d68", "html_url": "https://github.com/rust-lang/rust/commit/ff40f2ec95923c4d45366e85bcff17d75df68d68"}, {"sha": "336a72a8daea236a89787f16931611310315340c", "url": "https://api.github.com/repos/rust-lang/rust/commits/336a72a8daea236a89787f16931611310315340c", "html_url": "https://github.com/rust-lang/rust/commit/336a72a8daea236a89787f16931611310315340c"}], "stats": {"total": 1674, "additions": 912, "deletions": 762}, "files": [{"sha": "2aa292bbce2b6493b86c23e12d46c0fdecf7696b", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 165, "deletions": 323, "changes": 488, "blob_url": "https://github.com/rust-lang/rust/blob/1a93028bcc4a9052f0956e924fed0c9ac61efba1/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a93028bcc4a9052f0956e924fed0c9ac61efba1/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=1a93028bcc4a9052f0956e924fed0c9ac61efba1", "patch": "@@ -1,17 +1,17 @@\n #![deny(unused_must_use)]\n \n+use super::error::throw_invalid_nested_attr;\n+use super::utils::{SpannedOption, SubdiagnosticKind};\n use crate::diagnostics::error::{\n-    invalid_nested_attr, span_err, throw_invalid_attr, throw_invalid_nested_attr, throw_span_err,\n-    DiagnosticDeriveError,\n+    invalid_nested_attr, span_err, throw_invalid_attr, throw_span_err, DiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n     report_error_if_not_applied_to_span, report_type_error, type_is_unit, type_matches_path,\n-    Applicability, FieldInfo, FieldInnerTy, HasFieldMap, SetOnce,\n+    FieldInfo, FieldInnerTy, HasFieldMap, SetOnce,\n };\n use proc_macro2::{Ident, Span, TokenStream};\n use quote::{format_ident, quote};\n use std::collections::HashMap;\n-use std::str::FromStr;\n use syn::{\n     parse_quote, spanned::Spanned, Attribute, Field, Meta, MetaList, MetaNameValue, NestedMeta,\n     Path, Type,\n@@ -40,10 +40,10 @@ pub(crate) struct DiagnosticDeriveBuilder {\n     pub kind: DiagnosticDeriveKind,\n     /// Slug is a mandatory part of the struct attribute as corresponds to the Fluent message that\n     /// has the actual diagnostic message.\n-    pub slug: Option<(Path, proc_macro::Span)>,\n+    pub slug: SpannedOption<Path>,\n     /// Error codes are a optional part of the struct attribute - this is only set to detect\n     /// multiple specifications.\n-    pub code: Option<(String, proc_macro::Span)>,\n+    pub code: SpannedOption<()>,\n }\n \n impl HasFieldMap for DiagnosticDeriveBuilder {\n@@ -127,6 +127,30 @@ impl DiagnosticDeriveBuilder {\n             || is_subdiagnostic\n     }\n \n+    fn parse_subdiag_attribute(\n+        &self,\n+        attr: &Attribute,\n+    ) -> Result<(SubdiagnosticKind, Path), DiagnosticDeriveError> {\n+        let (subdiag, slug) = SubdiagnosticKind::from_attr(attr, self)?;\n+\n+        if let SubdiagnosticKind::MultipartSuggestion { .. } = subdiag {\n+            let meta = attr.parse_meta()?;\n+            throw_invalid_attr!(attr, &meta, |diag| diag\n+                .help(\"consider creating a `Subdiagnostic` instead\"));\n+        }\n+\n+        let slug = slug.unwrap_or_else(|| match subdiag {\n+            SubdiagnosticKind::Label => parse_quote! { _subdiag::label },\n+            SubdiagnosticKind::Note => parse_quote! { _subdiag::note },\n+            SubdiagnosticKind::Help => parse_quote! { _subdiag::help },\n+            SubdiagnosticKind::Warn => parse_quote! { _subdiag::warn },\n+            SubdiagnosticKind::Suggestion { .. } => parse_quote! { _subdiag::suggestion },\n+            SubdiagnosticKind::MultipartSuggestion { .. } => unreachable!(),\n+        });\n+\n+        Ok((subdiag, slug))\n+    }\n+\n     /// Establishes state in the `DiagnosticDeriveBuilder` resulting from the struct\n     /// attributes like `#[diag(..)]`, such as the slug and error code. Generates\n     /// diagnostic builder calls for setting error code and creating note/help messages.\n@@ -135,111 +159,87 @@ impl DiagnosticDeriveBuilder {\n         attr: &Attribute,\n     ) -> Result<TokenStream, DiagnosticDeriveError> {\n         let diag = &self.diag;\n-        let span = attr.span().unwrap();\n \n         let name = attr.path.segments.last().unwrap().ident.to_string();\n         let name = name.as_str();\n         let meta = attr.parse_meta()?;\n \n-        let is_diag = name == \"diag\";\n-\n-        let nested = match meta {\n-            // Most attributes are lists, like `#[diag(..)]` for most cases or\n-            // `#[help(..)]`/`#[note(..)]` when the user is specifying a alternative slug.\n-            Meta::List(MetaList { ref nested, .. }) => nested,\n-            // Subdiagnostics without spans can be applied to the type too, and these are just\n-            // paths: `#[help]`, `#[note]` and `#[warning]`\n-            Meta::Path(_) if !is_diag => {\n-                let fn_name = if name == \"warning\" {\n-                    Ident::new(\"warn\", attr.span())\n-                } else {\n-                    Ident::new(name, attr.span())\n-                };\n-                return Ok(quote! { #diag.#fn_name(rustc_errors::fluent::_subdiag::#fn_name); });\n-            }\n-            _ => throw_invalid_attr!(attr, &meta),\n-        };\n-\n-        // Check the kind before doing any further processing so that there aren't misleading\n-        // \"no kind specified\" errors if there are failures later.\n-        match name {\n-            \"error\" | \"lint\" => throw_invalid_attr!(attr, &meta, |diag| {\n-                diag.help(\"`error` and `lint` have been replaced by `diag`\")\n-            }),\n-            \"warn_\" => throw_invalid_attr!(attr, &meta, |diag| {\n-                diag.help(\"`warn_` have been replaced by `warning`\")\n-            }),\n-            \"diag\" | \"help\" | \"note\" | \"warning\" => (),\n-            _ => throw_invalid_attr!(attr, &meta, |diag| {\n-                diag.help(\"only `diag`, `help`, `note` and `warning` are valid attributes\")\n-            }),\n-        }\n+        if name == \"diag\" {\n+            let Meta::List(MetaList { ref nested, .. }) = meta else {\n+                throw_invalid_attr!(\n+                    attr,\n+                    &meta\n+                );\n+            };\n \n-        // First nested element should always be the path, e.g. `#[diag(typeck::invalid)]` or\n-        // `#[help(typeck::another_help)]`.\n-        let mut nested_iter = nested.into_iter();\n-        if let Some(nested_attr) = nested_iter.next() {\n-            // Report an error if there are any other list items after the path.\n-            if !is_diag && nested_iter.next().is_some() {\n-                throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                    diag.help(\n-                        \"`help`, `note` and `warning` struct attributes can only have one argument\",\n-                    )\n-                });\n-            }\n+            let mut nested_iter = nested.into_iter().peekable();\n \n-            match nested_attr {\n-                NestedMeta::Meta(Meta::Path(path)) => {\n-                    if is_diag {\n-                        self.slug.set_once((path.clone(), span));\n-                    } else {\n-                        let fn_name = proc_macro2::Ident::new(name, attr.span());\n-                        return Ok(quote! { #diag.#fn_name(rustc_errors::fluent::#path); });\n-                    }\n-                }\n-                NestedMeta::Meta(meta @ Meta::NameValue(_))\n-                    if is_diag && meta.path().segments.last().unwrap().ident == \"code\" =>\n-                {\n-                    // don't error for valid follow-up attributes\n+            match nested_iter.peek() {\n+                Some(NestedMeta::Meta(Meta::Path(slug))) => {\n+                    self.slug.set_once(slug.clone(), slug.span().unwrap());\n+                    nested_iter.next();\n                 }\n-                nested_attr => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                    diag.help(\"first argument of the attribute should be the diagnostic slug\")\n-                }),\n+                Some(NestedMeta::Meta(Meta::NameValue { .. })) => {}\n+                Some(nested_attr) => throw_invalid_nested_attr!(attr, &nested_attr, |diag| diag\n+                    .help(\"a diagnostic slug is required as the first argument\")),\n+                None => throw_invalid_attr!(attr, &meta, |diag| diag\n+                    .help(\"a diagnostic slug is required as the first argument\")),\n             };\n-        }\n \n-        // Remaining attributes are optional, only `code = \"..\"` at the moment.\n-        let mut tokens = Vec::new();\n-        for nested_attr in nested_iter {\n-            let meta = match nested_attr {\n-                syn::NestedMeta::Meta(meta) => meta,\n-                _ => throw_invalid_nested_attr!(attr, &nested_attr),\n-            };\n+            // Remaining attributes are optional, only `code = \"..\"` at the moment.\n+            let mut tokens = TokenStream::new();\n+            for nested_attr in nested_iter {\n+                let (value, path) = match nested_attr {\n+                    NestedMeta::Meta(Meta::NameValue(MetaNameValue {\n+                        lit: syn::Lit::Str(value),\n+                        path,\n+                        ..\n+                    })) => (value, path),\n+                    NestedMeta::Meta(Meta::Path(_)) => {\n+                        invalid_nested_attr(attr, &nested_attr)\n+                            .help(\"diagnostic slug must be the first argument\")\n+                            .emit();\n+                        continue;\n+                    }\n+                    _ => {\n+                        invalid_nested_attr(attr, &nested_attr).emit();\n+                        continue;\n+                    }\n+                };\n \n-            let path = meta.path();\n-            let nested_name = path.segments.last().unwrap().ident.to_string();\n-            // Struct attributes are only allowed to be applied once, and the diagnostic\n-            // changes will be set in the initialisation code.\n-            if let Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(s), .. }) = &meta {\n-                let span = s.span().unwrap();\n+                let nested_name = path.segments.last().unwrap().ident.to_string();\n+                // Struct attributes are only allowed to be applied once, and the diagnostic\n+                // changes will be set in the initialisation code.\n+                let span = value.span().unwrap();\n                 match nested_name.as_str() {\n                     \"code\" => {\n-                        self.code.set_once((s.value(), span));\n-                        let code = &self.code.as_ref().map(|(v, _)| v);\n-                        tokens.push(quote! {\n+                        self.code.set_once((), span);\n+\n+                        let code = value.value();\n+                        tokens.extend(quote! {\n                             #diag.code(rustc_errors::DiagnosticId::Error(#code.to_string()));\n                         });\n                     }\n                     _ => invalid_nested_attr(attr, &nested_attr)\n                         .help(\"only `code` is a valid nested attributes following the slug\")\n                         .emit(),\n                 }\n-            } else {\n-                invalid_nested_attr(attr, &nested_attr).emit()\n             }\n+            return Ok(tokens);\n         }\n \n-        Ok(tokens.into_iter().collect())\n+        let (subdiag, slug) = self.parse_subdiag_attribute(attr)?;\n+        let fn_ident = format_ident!(\"{}\", subdiag);\n+        match subdiag {\n+            SubdiagnosticKind::Note | SubdiagnosticKind::Help | SubdiagnosticKind::Warn => {\n+                Ok(self.add_subdiagnostic(&fn_ident, slug))\n+            }\n+            SubdiagnosticKind::Label | SubdiagnosticKind::Suggestion { .. } => {\n+                throw_invalid_attr!(attr, &meta, |diag| diag\n+                    .help(\"`#[label]` and `#[suggestion]` can only be applied to fields\"));\n+            }\n+            SubdiagnosticKind::MultipartSuggestion { .. } => unreachable!(),\n+        }\n     }\n \n     fn generate_field_attrs_code(&mut self, binding_info: &BindingInfo<'_>) -> TokenStream {\n@@ -303,232 +303,83 @@ impl DiagnosticDeriveBuilder {\n         info: FieldInfo<'_>,\n         binding: TokenStream,\n     ) -> Result<TokenStream, DiagnosticDeriveError> {\n-        let meta = attr.parse_meta()?;\n-        match meta {\n-            Meta::Path(_) => self.generate_inner_field_code_path(attr, info, binding),\n-            Meta::List(MetaList { .. }) => self.generate_inner_field_code_list(attr, info, binding),\n-            _ => throw_invalid_attr!(attr, &meta),\n-        }\n-    }\n-\n-    fn generate_inner_field_code_path(\n-        &mut self,\n-        attr: &Attribute,\n-        info: FieldInfo<'_>,\n-        binding: TokenStream,\n-    ) -> Result<TokenStream, DiagnosticDeriveError> {\n-        assert!(matches!(attr.parse_meta()?, Meta::Path(_)));\n         let diag = &self.diag;\n-\n         let meta = attr.parse_meta()?;\n \n-        let ident = &attr.path.segments.last().unwrap().ident;\n-        let name = ident.to_string();\n-        let name = name.as_str();\n-        match name {\n-            \"skip_arg\" => {\n-                // Don't need to do anything - by virtue of the attribute existing, the\n-                // `set_arg` call will not be generated.\n-                Ok(quote! {})\n-            }\n-            \"primary_span\" => {\n-                match self.kind {\n+        if let Meta::Path(_) = meta {\n+            let ident = &attr.path.segments.last().unwrap().ident;\n+            let name = ident.to_string();\n+            let name = name.as_str();\n+            match name {\n+                \"skip_arg\" => {\n+                    // Don't need to do anything - by virtue of the attribute existing, the\n+                    // `set_arg` call will not be generated.\n+                    return Ok(quote! {});\n+                }\n+                \"primary_span\" => match self.kind {\n                     DiagnosticDeriveKind::Diagnostic => {\n                         report_error_if_not_applied_to_span(attr, &info)?;\n \n-                        Ok(quote! {\n+                        return Ok(quote! {\n                             #diag.set_span(#binding);\n-                        })\n+                        });\n                     }\n                     DiagnosticDeriveKind::LintDiagnostic => {\n                         throw_invalid_attr!(attr, &meta, |diag| {\n                             diag.help(\"the `primary_span` field attribute is not valid for lint diagnostics\")\n                         })\n                     }\n-                }\n+                },\n+                \"subdiagnostic\" => return Ok(quote! { #diag.subdiagnostic(#binding); }),\n+                _ => {}\n             }\n-            \"label\" => {\n+        }\n+\n+        let (subdiag, slug) = self.parse_subdiag_attribute(attr)?;\n+\n+        let fn_ident = format_ident!(\"{}\", subdiag);\n+        match subdiag {\n+            SubdiagnosticKind::Label => {\n                 report_error_if_not_applied_to_span(attr, &info)?;\n-                Ok(self.add_spanned_subdiagnostic(binding, ident, parse_quote! { _subdiag::label }))\n+                Ok(self.add_spanned_subdiagnostic(binding, &fn_ident, slug))\n             }\n-            \"note\" | \"help\" | \"warning\" => {\n-                let warn_ident = Ident::new(\"warn\", Span::call_site());\n-                let (ident, path) = match name {\n-                    \"note\" => (ident, parse_quote! { _subdiag::note }),\n-                    \"help\" => (ident, parse_quote! { _subdiag::help }),\n-                    \"warning\" => (&warn_ident, parse_quote! { _subdiag::warn }),\n-                    _ => unreachable!(),\n-                };\n+            SubdiagnosticKind::Note | SubdiagnosticKind::Help | SubdiagnosticKind::Warn => {\n                 if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n-                    Ok(self.add_spanned_subdiagnostic(binding, ident, path))\n+                    Ok(self.add_spanned_subdiagnostic(binding, &fn_ident, slug))\n                 } else if type_is_unit(&info.ty) {\n-                    Ok(self.add_subdiagnostic(ident, path))\n+                    Ok(self.add_subdiagnostic(&fn_ident, slug))\n                 } else {\n                     report_type_error(attr, \"`Span` or `()`\")?\n                 }\n             }\n-            \"subdiagnostic\" => Ok(quote! { #diag.subdiagnostic(#binding); }),\n-            _ => throw_invalid_attr!(attr, &meta, |diag| {\n-                diag.help(\n-                    \"only `skip_arg`, `primary_span`, `label`, `note`, `help` and `subdiagnostic` \\\n-                     are valid field attributes\",\n-                )\n-            }),\n-        }\n-    }\n-\n-    fn generate_inner_field_code_list(\n-        &mut self,\n-        attr: &Attribute,\n-        info: FieldInfo<'_>,\n-        binding: TokenStream,\n-    ) -> Result<TokenStream, DiagnosticDeriveError> {\n-        let meta = attr.parse_meta()?;\n-        let Meta::List(MetaList { ref path, ref nested, .. }) = meta  else { unreachable!() };\n-\n-        let ident = &attr.path.segments.last().unwrap().ident;\n-        let name = path.segments.last().unwrap().ident.to_string();\n-        let name = name.as_ref();\n-        match name {\n-            \"suggestion\" | \"suggestion_short\" | \"suggestion_hidden\" | \"suggestion_verbose\" => {\n-                return self.generate_inner_field_code_suggestion(attr, info);\n-            }\n-            \"label\" | \"help\" | \"note\" | \"warning\" => (),\n-            _ => throw_invalid_attr!(attr, &meta, |diag| {\n-                diag.help(\n-                    \"only `label`, `help`, `note`, `warn` or `suggestion{,_short,_hidden,_verbose}` are \\\n-                     valid field attributes\",\n-                )\n-            }),\n-        }\n-\n-        // For `#[label(..)]`, `#[note(..)]` and `#[help(..)]`, the first nested element must be a\n-        // path, e.g. `#[label(typeck::label)]`.\n-        let mut nested_iter = nested.into_iter();\n-        let msg = match nested_iter.next() {\n-            Some(NestedMeta::Meta(Meta::Path(path))) => path.clone(),\n-            Some(nested_attr) => throw_invalid_nested_attr!(attr, &nested_attr),\n-            None => throw_invalid_attr!(attr, &meta),\n-        };\n-\n-        // None of these attributes should have anything following the slug.\n-        if nested_iter.next().is_some() {\n-            throw_invalid_attr!(attr, &meta);\n-        }\n-\n-        match name {\n-            \"label\" => {\n-                report_error_if_not_applied_to_span(attr, &info)?;\n-                Ok(self.add_spanned_subdiagnostic(binding, ident, msg))\n-            }\n-            \"note\" | \"help\" if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) => {\n-                Ok(self.add_spanned_subdiagnostic(binding, ident, msg))\n-            }\n-            \"note\" | \"help\" if type_is_unit(&info.ty) => Ok(self.add_subdiagnostic(ident, msg)),\n-            // `warning` must be special-cased because the attribute `warn` already has meaning and\n-            // so isn't used, despite the diagnostic API being named `warn`.\n-            \"warning\" if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) => Ok(self\n-                .add_spanned_subdiagnostic(binding, &Ident::new(\"warn\", Span::call_site()), msg)),\n-            \"warning\" if type_is_unit(&info.ty) => {\n-                Ok(self.add_subdiagnostic(&Ident::new(\"warn\", Span::call_site()), msg))\n-            }\n-            \"note\" | \"help\" | \"warning\" => report_type_error(attr, \"`Span` or `()`\")?,\n-            _ => unreachable!(),\n-        }\n-    }\n-\n-    fn generate_inner_field_code_suggestion(\n-        &mut self,\n-        attr: &Attribute,\n-        info: FieldInfo<'_>,\n-    ) -> Result<TokenStream, DiagnosticDeriveError> {\n-        let diag = &self.diag;\n-\n-        let mut meta = attr.parse_meta()?;\n-        let Meta::List(MetaList { ref path, ref mut nested, .. }) = meta  else { unreachable!() };\n-\n-        let (span_field, mut applicability) = self.span_and_applicability_of_ty(info)?;\n-\n-        let mut msg = None;\n-        let mut code = None;\n-\n-        let mut nested_iter = nested.into_iter().peekable();\n-        if let Some(nested_attr) = nested_iter.peek() {\n-            if let NestedMeta::Meta(Meta::Path(path)) = nested_attr {\n-                msg = Some(path.clone());\n-            }\n-        };\n-        // Move the iterator forward if a path was found (don't otherwise so that\n-        // code/applicability can be found or an error emitted).\n-        if msg.is_some() {\n-            let _ = nested_iter.next();\n-        }\n-\n-        for nested_attr in nested_iter {\n-            let meta = match nested_attr {\n-                syn::NestedMeta::Meta(ref meta) => meta,\n-                syn::NestedMeta::Lit(_) => throw_invalid_nested_attr!(attr, &nested_attr),\n-            };\n-\n-            let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n-            let nested_name = nested_name.as_str();\n-            match meta {\n-                Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(s), .. }) => {\n-                    let span = meta.span().unwrap();\n-                    match nested_name {\n-                        \"code\" => {\n-                            let formatted_str = self.build_format(&s.value(), s.span());\n-                            code = Some(formatted_str);\n-                        }\n-                        \"applicability\" => {\n-                            applicability = match applicability {\n-                                Some(v) => {\n-                                    span_err(\n-                                        span,\n-                                        \"applicability cannot be set in both the field and \\\n-                                         attribute\",\n-                                    )\n-                                    .emit();\n-                                    Some(v)\n-                                }\n-                                None => match Applicability::from_str(&s.value()) {\n-                                    Ok(v) => Some(quote! { #v }),\n-                                    Err(()) => {\n-                                        span_err(span, \"invalid applicability\").emit();\n-                                        None\n-                                    }\n-                                },\n-                            }\n-                        }\n-                        _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                            diag.help(\n-                                \"only `message`, `code` and `applicability` are valid field \\\n-                                 attributes\",\n-                            )\n-                        }),\n-                    }\n+            SubdiagnosticKind::Suggestion {\n+                suggestion_kind,\n+                applicability: static_applicability,\n+                code,\n+            } => {\n+                let (span_field, mut applicability) = self.span_and_applicability_of_ty(info)?;\n+\n+                if let Some((static_applicability, span)) = static_applicability {\n+                    applicability.set_once(quote! { #static_applicability }, span);\n                 }\n-                _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                    if matches!(meta, Meta::Path(_)) {\n-                        diag.help(\"a diagnostic slug must be the first argument to the attribute\")\n-                    } else {\n-                        diag\n-                    }\n-                }),\n+\n+                let applicability = applicability\n+                    .value()\n+                    .unwrap_or_else(|| quote! { rustc_errors::Applicability::Unspecified });\n+                let style = suggestion_kind.to_suggestion_style();\n+\n+                Ok(quote! {\n+                    #diag.span_suggestion_with_style(\n+                        #span_field,\n+                        rustc_errors::fluent::#slug,\n+                        #code,\n+                        #applicability,\n+                        #style\n+                    );\n+                })\n             }\n+            SubdiagnosticKind::MultipartSuggestion { .. } => unreachable!(),\n         }\n-\n-        let applicability =\n-            applicability.unwrap_or_else(|| quote!(rustc_errors::Applicability::Unspecified));\n-\n-        let name = path.segments.last().unwrap().ident.to_string();\n-        let method = format_ident!(\"span_{}\", name);\n-\n-        let msg = msg.unwrap_or_else(|| parse_quote! { _subdiag::suggestion });\n-        let msg = quote! { rustc_errors::fluent::#msg };\n-        let code = code.unwrap_or_else(|| quote! { String::new() });\n-\n-        Ok(quote! { #diag.#method(#span_field, #msg, #code, #applicability); })\n     }\n \n     /// Adds a spanned subdiagnostic by generating a `diag.span_$kind` call with the current slug\n@@ -561,7 +412,7 @@ impl DiagnosticDeriveBuilder {\n     fn span_and_applicability_of_ty(\n         &self,\n         info: FieldInfo<'_>,\n-    ) -> Result<(TokenStream, Option<TokenStream>), DiagnosticDeriveError> {\n+    ) -> Result<(TokenStream, SpannedOption<TokenStream>), DiagnosticDeriveError> {\n         match &info.ty {\n             // If `ty` is `Span` w/out applicability, then use `Applicability::Unspecified`.\n             ty @ Type::Path(..) if type_matches_path(ty, &[\"rustc_span\", \"Span\"]) => {\n@@ -573,46 +424,37 @@ impl DiagnosticDeriveBuilder {\n                 let mut span_idx = None;\n                 let mut applicability_idx = None;\n \n+                fn type_err(span: &Span) -> Result<!, DiagnosticDeriveError> {\n+                    span_err(span.unwrap(), \"wrong types for suggestion\")\n+                        .help(\n+                            \"`#[suggestion(...)]` on a tuple field must be applied to fields \\\n+                             of type `(Span, Applicability)`\",\n+                        )\n+                        .emit();\n+                    Err(DiagnosticDeriveError::ErrorHandled)\n+                }\n+\n                 for (idx, elem) in tup.elems.iter().enumerate() {\n                     if type_matches_path(elem, &[\"rustc_span\", \"Span\"]) {\n-                        if span_idx.is_none() {\n-                            span_idx = Some(syn::Index::from(idx));\n-                        } else {\n-                            throw_span_err!(\n-                                info.span.unwrap(),\n-                                \"type of field annotated with `#[suggestion(...)]` contains more \\\n-                                 than one `Span`\"\n-                            );\n-                        }\n+                        span_idx.set_once(syn::Index::from(idx), elem.span().unwrap());\n                     } else if type_matches_path(elem, &[\"rustc_errors\", \"Applicability\"]) {\n-                        if applicability_idx.is_none() {\n-                            applicability_idx = Some(syn::Index::from(idx));\n-                        } else {\n-                            throw_span_err!(\n-                                info.span.unwrap(),\n-                                \"type of field annotated with `#[suggestion(...)]` contains more \\\n-                                 than one Applicability\"\n-                            );\n-                        }\n+                        applicability_idx.set_once(syn::Index::from(idx), elem.span().unwrap());\n+                    } else {\n+                        type_err(&elem.span())?;\n                     }\n                 }\n \n-                if let Some(span_idx) = span_idx {\n-                    let binding = &info.binding.binding;\n-                    let span = quote!(#binding.#span_idx);\n-                    let applicability = applicability_idx\n-                        .map(|applicability_idx| quote!(#binding.#applicability_idx))\n-                        .unwrap_or_else(|| quote!(rustc_errors::Applicability::Unspecified));\n-\n-                    return Ok((span, Some(applicability)));\n-                }\n+                let Some((span_idx, _)) = span_idx else {\n+                    type_err(&tup.span())?;\n+                };\n+                let Some((applicability_idx, applicability_span)) = applicability_idx else {\n+                    type_err(&tup.span())?;\n+                };\n+                let binding = &info.binding.binding;\n+                let span = quote!(#binding.#span_idx);\n+                let applicability = quote!(#binding.#applicability_idx);\n \n-                throw_span_err!(info.span.unwrap(), \"wrong types for suggestion\", |diag| {\n-                    diag.help(\n-                        \"`#[suggestion(...)]` on a tuple field must be applied to fields of type \\\n-                         `(Span, Applicability)`\",\n-                    )\n-                });\n+                Ok((span, Some((applicability, applicability_span))))\n             }\n             // If `ty` isn't a `Span` or `(Span, Applicability)` then emit an error.\n             _ => throw_span_err!(info.span.unwrap(), \"wrong field type for suggestion\", |diag| {"}, {"sha": "6545ae086b15801e6106258d904c5c85a1a1d719", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 75, "deletions": 253, "changes": 328, "blob_url": "https://github.com/rust-lang/rust/blob/1a93028bcc4a9052f0956e924fed0c9ac61efba1/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a93028bcc4a9052f0956e924fed0c9ac61efba1/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=1a93028bcc4a9052f0956e924fed0c9ac61efba1", "patch": "@@ -4,98 +4,17 @@ use crate::diagnostics::error::{\n     span_err, throw_invalid_attr, throw_invalid_nested_attr, throw_span_err, DiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n-    report_error_if_not_applied_to_applicability, report_error_if_not_applied_to_span,\n-    Applicability, FieldInfo, FieldInnerTy, HasFieldMap, SetOnce,\n+    report_error_if_not_applied_to_applicability, report_error_if_not_applied_to_span, FieldInfo,\n+    FieldInnerTy, HasFieldMap, SetOnce,\n };\n use proc_macro2::TokenStream;\n use quote::{format_ident, quote};\n use std::collections::HashMap;\n-use std::fmt;\n-use std::str::FromStr;\n use syn::{spanned::Spanned, Attribute, Meta, MetaList, MetaNameValue, NestedMeta, Path};\n use synstructure::{BindingInfo, Structure, VariantInfo};\n \n-/// Which kind of suggestion is being created?\n-#[derive(Clone, Copy)]\n-enum SubdiagnosticSuggestionKind {\n-    /// `#[suggestion]`\n-    Normal,\n-    /// `#[suggestion_short]`\n-    Short,\n-    /// `#[suggestion_hidden]`\n-    Hidden,\n-    /// `#[suggestion_verbose]`\n-    Verbose,\n-}\n-\n-impl FromStr for SubdiagnosticSuggestionKind {\n-    type Err = ();\n-\n-    fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        match s {\n-            \"\" => Ok(SubdiagnosticSuggestionKind::Normal),\n-            \"_short\" => Ok(SubdiagnosticSuggestionKind::Short),\n-            \"_hidden\" => Ok(SubdiagnosticSuggestionKind::Hidden),\n-            \"_verbose\" => Ok(SubdiagnosticSuggestionKind::Verbose),\n-            _ => Err(()),\n-        }\n-    }\n-}\n-\n-impl SubdiagnosticSuggestionKind {\n-    pub fn to_suggestion_style(&self) -> TokenStream {\n-        match self {\n-            SubdiagnosticSuggestionKind::Normal => {\n-                quote! { rustc_errors::SuggestionStyle::ShowCode }\n-            }\n-            SubdiagnosticSuggestionKind::Short => {\n-                quote! { rustc_errors::SuggestionStyle::HideCodeInline }\n-            }\n-            SubdiagnosticSuggestionKind::Hidden => {\n-                quote! { rustc_errors::SuggestionStyle::HideCodeAlways }\n-            }\n-            SubdiagnosticSuggestionKind::Verbose => {\n-                quote! { rustc_errors::SuggestionStyle::ShowAlways }\n-            }\n-        }\n-    }\n-}\n-\n-/// Which kind of subdiagnostic is being created from a variant?\n-#[derive(Clone)]\n-enum SubdiagnosticKind {\n-    /// `#[label(...)]`\n-    Label,\n-    /// `#[note(...)]`\n-    Note,\n-    /// `#[help(...)]`\n-    Help,\n-    /// `#[warning(...)]`\n-    Warn,\n-    /// `#[suggestion{,_short,_hidden,_verbose}]`\n-    Suggestion { suggestion_kind: SubdiagnosticSuggestionKind, code: TokenStream },\n-    /// `#[multipart_suggestion{,_short,_hidden,_verbose}]`\n-    MultipartSuggestion { suggestion_kind: SubdiagnosticSuggestionKind },\n-}\n-\n-impl quote::IdentFragment for SubdiagnosticKind {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            SubdiagnosticKind::Label => write!(f, \"label\"),\n-            SubdiagnosticKind::Note => write!(f, \"note\"),\n-            SubdiagnosticKind::Help => write!(f, \"help\"),\n-            SubdiagnosticKind::Warn => write!(f, \"warn\"),\n-            SubdiagnosticKind::Suggestion { .. } => write!(f, \"suggestion_with_style\"),\n-            SubdiagnosticKind::MultipartSuggestion { .. } => {\n-                write!(f, \"multipart_suggestion_with_style\")\n-            }\n-        }\n-    }\n-\n-    fn span(&self) -> Option<proc_macro2::Span> {\n-        None\n-    }\n-}\n+use super::error::invalid_attr;\n+use super::utils::{SpannedOption, SubdiagnosticKind};\n \n /// The central struct for constructing the `add_to_diagnostic` method from an annotated struct.\n pub(crate) struct SubdiagnosticDerive<'a> {\n@@ -195,10 +114,10 @@ struct SubdiagnosticDeriveBuilder<'a> {\n     fields: HashMap<String, TokenStream>,\n \n     /// Identifier for the binding to the `#[primary_span]` field.\n-    span_field: Option<(proc_macro2::Ident, proc_macro::Span)>,\n-    /// If a suggestion, the identifier for the binding to the `#[applicability]` field or a\n-    /// `rustc_errors::Applicability::*` variant directly.\n-    applicability: Option<(TokenStream, proc_macro::Span)>,\n+    span_field: SpannedOption<proc_macro2::Ident>,\n+\n+    /// The binding to the `#[applicability]` field, if present.\n+    applicability: SpannedOption<TokenStream>,\n \n     /// Set to true when a `#[suggestion_part]` field is encountered, used to generate an error\n     /// during finalization if still `false`.\n@@ -217,6 +136,7 @@ struct KindsStatistics {\n     has_multipart_suggestion: bool,\n     all_multipart_suggestions: bool,\n     has_normal_suggestion: bool,\n+    all_applicabilities_static: bool,\n }\n \n impl<'a> FromIterator<&'a SubdiagnosticKind> for KindsStatistics {\n@@ -225,8 +145,15 @@ impl<'a> FromIterator<&'a SubdiagnosticKind> for KindsStatistics {\n             has_multipart_suggestion: false,\n             all_multipart_suggestions: true,\n             has_normal_suggestion: false,\n+            all_applicabilities_static: true,\n         };\n+\n         for kind in kinds {\n+            if let SubdiagnosticKind::MultipartSuggestion { applicability: None, .. }\n+            | SubdiagnosticKind::Suggestion { applicability: None, .. } = kind\n+            {\n+                ret.all_applicabilities_static = false;\n+            }\n             if let SubdiagnosticKind::MultipartSuggestion { .. } = kind {\n                 ret.has_multipart_suggestion = true;\n             } else {\n@@ -246,151 +173,22 @@ impl<'a> SubdiagnosticDeriveBuilder<'a> {\n         let mut kind_slugs = vec![];\n \n         for attr in self.variant.ast().attrs {\n-            let span = attr.span().unwrap();\n-\n-            let name = attr.path.segments.last().unwrap().ident.to_string();\n-            let name = name.as_str();\n-\n-            let meta = attr.parse_meta()?;\n-            let Meta::List(MetaList { ref nested, .. }) = meta else {\n-                throw_invalid_attr!(attr, &meta);\n-            };\n-\n-            let mut kind = match name {\n-                \"label\" => SubdiagnosticKind::Label,\n-                \"note\" => SubdiagnosticKind::Note,\n-                \"help\" => SubdiagnosticKind::Help,\n-                \"warning\" => SubdiagnosticKind::Warn,\n-                _ => {\n-                    if let Some(suggestion_kind) =\n-                        name.strip_prefix(\"suggestion\").and_then(|s| s.parse().ok())\n-                    {\n-                        SubdiagnosticKind::Suggestion { suggestion_kind, code: TokenStream::new() }\n-                    } else if let Some(suggestion_kind) =\n-                        name.strip_prefix(\"multipart_suggestion\").and_then(|s| s.parse().ok())\n-                    {\n-                        SubdiagnosticKind::MultipartSuggestion { suggestion_kind }\n-                    } else {\n-                        throw_invalid_attr!(attr, &meta);\n-                    }\n-                }\n-            };\n+            let (kind, slug) = SubdiagnosticKind::from_attr(attr, self)?;\n \n-            let mut slug = None;\n-            let mut code = None;\n+            let Some(slug) = slug else {\n+                let name = attr.path.segments.last().unwrap().ident.to_string();\n+                let name = name.as_str();\n \n-            let mut nested_iter = nested.into_iter();\n-            if let Some(nested_attr) = nested_iter.next() {\n-                match nested_attr {\n-                    NestedMeta::Meta(Meta::Path(path)) => {\n-                        slug.set_once((path.clone(), span));\n-                    }\n-                    NestedMeta::Meta(meta @ Meta::NameValue(_))\n-                        if matches!(\n-                            meta.path().segments.last().unwrap().ident.to_string().as_str(),\n-                            \"code\" | \"applicability\"\n-                        ) =>\n-                    {\n-                        // Don't error for valid follow-up attributes.\n-                    }\n-                    nested_attr => {\n-                        throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                            diag.help(\n-                                \"first argument of the attribute should be the diagnostic \\\n-                                 slug\",\n-                            )\n-                        })\n-                    }\n-                };\n-            }\n-\n-            for nested_attr in nested_iter {\n-                let meta = match nested_attr {\n-                    NestedMeta::Meta(ref meta) => meta,\n-                    _ => throw_invalid_nested_attr!(attr, &nested_attr),\n-                };\n-\n-                let span = meta.span().unwrap();\n-                let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n-                let nested_name = nested_name.as_str();\n-\n-                let value = match meta {\n-                    Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(value), .. }) => value,\n-                    Meta::Path(_) => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                        diag.help(\"a diagnostic slug must be the first argument to the attribute\")\n-                    }),\n-                    _ => throw_invalid_nested_attr!(attr, &nested_attr),\n-                };\n-\n-                match nested_name {\n-                    \"code\" => {\n-                        if matches!(kind, SubdiagnosticKind::Suggestion { .. }) {\n-                            let formatted_str = self.build_format(&value.value(), value.span());\n-                            code.set_once((formatted_str, span));\n-                        } else {\n-                            span_err(\n-                                span,\n-                                &format!(\n-                                    \"`code` is not a valid nested attribute of a `{}` attribute\",\n-                                    name\n-                                ),\n-                            )\n-                            .emit();\n-                        }\n-                    }\n-                    \"applicability\" => {\n-                        if matches!(\n-                            kind,\n-                            SubdiagnosticKind::Suggestion { .. }\n-                                | SubdiagnosticKind::MultipartSuggestion { .. }\n-                        ) {\n-                            let value =\n-                                Applicability::from_str(&value.value()).unwrap_or_else(|()| {\n-                                    span_err(span, \"invalid applicability\").emit();\n-                                    Applicability::Unspecified\n-                                });\n-                            self.applicability.set_once((quote! { #value }, span));\n-                        } else {\n-                            span_err(\n-                                span,\n-                                &format!(\n-                                    \"`applicability` is not a valid nested attribute of a `{}` attribute\",\n-                                    name\n-                                )\n-                            ).emit();\n-                        }\n-                    }\n-                    _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n-                        diag.help(\"only `code` and `applicability` are valid nested attributes\")\n-                    }),\n-                }\n-            }\n-\n-            let Some((slug, _)) = slug else {\n                 throw_span_err!(\n-                    span,\n+                    attr.span().unwrap(),\n                     &format!(\n                         \"diagnostic slug must be first argument of a `#[{}(...)]` attribute\",\n                         name\n                     )\n                 );\n             };\n \n-            match kind {\n-                SubdiagnosticKind::Suggestion { code: ref mut code_field, .. } => {\n-                    let Some((code, _)) = code else {\n-                        throw_span_err!(span, \"suggestion without `code = \\\"...\\\"`\");\n-                    };\n-                    *code_field = code;\n-                }\n-                SubdiagnosticKind::Label\n-                | SubdiagnosticKind::Note\n-                | SubdiagnosticKind::Help\n-                | SubdiagnosticKind::Warn\n-                | SubdiagnosticKind::MultipartSuggestion { .. } => {}\n-            }\n-\n-            kind_slugs.push((kind, slug))\n+            kind_slugs.push((kind, slug));\n         }\n \n         Ok(kind_slugs)\n@@ -474,18 +272,18 @@ impl<'a> SubdiagnosticDeriveBuilder<'a> {\n             \"skip_arg\" => Ok(quote! {}),\n             \"primary_span\" => {\n                 if kind_stats.has_multipart_suggestion {\n-                    throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n-                        diag.help(\n+                    invalid_attr(attr, &Meta::Path(path))\n+                        .help(\n                             \"multipart suggestions use one or more `#[suggestion_part]`s rather \\\n                             than one `#[primary_span]`\",\n                         )\n-                    })\n-                }\n-\n-                report_error_if_not_applied_to_span(attr, &info)?;\n+                        .emit();\n+                } else {\n+                    report_error_if_not_applied_to_span(attr, &info)?;\n \n-                let binding = info.binding.binding.clone();\n-                self.span_field.set_once((binding, span));\n+                    let binding = info.binding.binding.clone();\n+                    self.span_field.set_once(binding, span);\n+                }\n \n                 Ok(quote! {})\n             }\n@@ -495,40 +293,56 @@ impl<'a> SubdiagnosticDeriveBuilder<'a> {\n                 if kind_stats.has_multipart_suggestion {\n                     span_err(span, \"`#[suggestion_part(...)]` attribute without `code = \\\"...\\\"`\")\n                         .emit();\n-                    Ok(quote! {})\n                 } else {\n-                    throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n-                        diag.help(\n-                                \"`#[suggestion_part(...)]` is only valid in multipart suggestions, use `#[primary_span]` instead\",\n-                            )\n-                    });\n+                    invalid_attr(attr, &Meta::Path(path))\n+                        .help(\n+                            \"`#[suggestion_part(...)]` is only valid in multipart suggestions, \\\n+                             use `#[primary_span]` instead\",\n+                        )\n+                        .emit();\n                 }\n+\n+                Ok(quote! {})\n             }\n             \"applicability\" => {\n                 if kind_stats.has_multipart_suggestion || kind_stats.has_normal_suggestion {\n                     report_error_if_not_applied_to_applicability(attr, &info)?;\n \n+                    if kind_stats.all_applicabilities_static {\n+                        span_err(\n+                            span,\n+                            \"`#[applicability]` has no effect if all `#[suggestion]`/\\\n+                             `#[multipart_suggestion]` attributes have a static \\\n+                             `applicability = \\\"...\\\"`\",\n+                        )\n+                        .emit();\n+                    }\n                     let binding = info.binding.binding.clone();\n-                    self.applicability.set_once((quote! { #binding }, span));\n+                    self.applicability.set_once(quote! { #binding }, span);\n                 } else {\n                     span_err(span, \"`#[applicability]` is only valid on suggestions\").emit();\n                 }\n \n                 Ok(quote! {})\n             }\n-            _ => throw_invalid_attr!(attr, &Meta::Path(path), |diag| {\n+            _ => {\n                 let mut span_attrs = vec![];\n                 if kind_stats.has_multipart_suggestion {\n                     span_attrs.push(\"suggestion_part\");\n                 }\n                 if !kind_stats.all_multipart_suggestions {\n                     span_attrs.push(\"primary_span\")\n                 }\n-                diag.help(format!(\n-                    \"only `{}`, `applicability` and `skip_arg` are valid field attributes\",\n-                    span_attrs.join(\", \")\n-                ))\n-            }),\n+\n+                invalid_attr(attr, &Meta::Path(path))\n+                    .help(format!(\n+                        \"only `{}`, `applicability` and `skip_arg` are valid field attributes\",\n+                        span_attrs.join(\", \")\n+                    ))\n+                    .emit();\n+\n+                Ok(quote! {})\n+            }\n         }\n     }\n \n@@ -577,7 +391,7 @@ impl<'a> SubdiagnosticDeriveBuilder<'a> {\n                     match nested_name {\n                         \"code\" => {\n                             let formatted_str = self.build_format(&value.value(), value.span());\n-                            code.set_once((formatted_str, span));\n+                            code.set_once(formatted_str, span);\n                         }\n                         _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n                             diag.help(\"`code` is the only valid nested attribute\")\n@@ -635,19 +449,21 @@ impl<'a> SubdiagnosticDeriveBuilder<'a> {\n             .map(|binding| self.generate_field_attr_code(binding, kind_stats))\n             .collect();\n \n-        let span_field = self.span_field.as_ref().map(|(span, _)| span);\n-        let applicability = self.applicability.take().map_or_else(\n-            || quote! { rustc_errors::Applicability::Unspecified },\n-            |(applicability, _)| applicability,\n-        );\n+        let span_field = self.span_field.value_ref();\n \n         let diag = &self.diag;\n         let mut calls = TokenStream::new();\n         for (kind, slug) in kind_slugs {\n             let name = format_ident!(\"{}{}\", if span_field.is_some() { \"span_\" } else { \"\" }, kind);\n             let message = quote! { rustc_errors::fluent::#slug };\n             let call = match kind {\n-                SubdiagnosticKind::Suggestion { suggestion_kind, code } => {\n+                SubdiagnosticKind::Suggestion { suggestion_kind, applicability, code } => {\n+                    let applicability = applicability\n+                        .value()\n+                        .map(|a| quote! { #a })\n+                        .or_else(|| self.applicability.take().value())\n+                        .unwrap_or_else(|| quote! { rustc_errors::Applicability::Unspecified });\n+\n                     if let Some(span) = span_field {\n                         let style = suggestion_kind.to_suggestion_style();\n \n@@ -657,7 +473,13 @@ impl<'a> SubdiagnosticDeriveBuilder<'a> {\n                         quote! { unreachable!(); }\n                     }\n                 }\n-                SubdiagnosticKind::MultipartSuggestion { suggestion_kind } => {\n+                SubdiagnosticKind::MultipartSuggestion { suggestion_kind, applicability } => {\n+                    let applicability = applicability\n+                        .value()\n+                        .map(|a| quote! { #a })\n+                        .or_else(|| self.applicability.take().value())\n+                        .unwrap_or_else(|| quote! { rustc_errors::Applicability::Unspecified });\n+\n                     if !self.has_suggestion_parts {\n                         span_err(\n                             self.span,"}, {"sha": "a31bda9ca0def7dfab11df273586e4fc4e5156e0", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 266, "deletions": 4, "changes": 270, "blob_url": "https://github.com/rust-lang/rust/blob/1a93028bcc4a9052f0956e924fed0c9ac61efba1/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a93028bcc4a9052f0956e924fed0c9ac61efba1/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=1a93028bcc4a9052f0956e924fed0c9ac61efba1", "patch": "@@ -1,12 +1,18 @@\n-use crate::diagnostics::error::{span_err, throw_span_err, DiagnosticDeriveError};\n+use crate::diagnostics::error::{\n+    span_err, throw_invalid_attr, throw_invalid_nested_attr, throw_span_err, DiagnosticDeriveError,\n+};\n use proc_macro::Span;\n use proc_macro2::TokenStream;\n use quote::{format_ident, quote, ToTokens};\n use std::collections::{BTreeSet, HashMap};\n+use std::fmt;\n use std::str::FromStr;\n use syn::{spanned::Spanned, Attribute, Meta, Type, TypeTuple};\n+use syn::{MetaList, MetaNameValue, NestedMeta, Path};\n use synstructure::{BindingInfo, Structure};\n \n+use super::error::invalid_nested_attr;\n+\n /// Checks whether the type name of `ty` matches `name`.\n ///\n /// Given some struct at `a::b::c::Foo`, this will return true for `c::Foo`, `b::c::Foo`, or\n@@ -172,13 +178,17 @@ pub(crate) struct FieldInfo<'a> {\n /// Small helper trait for abstracting over `Option` fields that contain a value and a `Span`\n /// for error reporting if they are set more than once.\n pub(crate) trait SetOnce<T> {\n-    fn set_once(&mut self, _: (T, Span));\n+    fn set_once(&mut self, value: T, span: Span);\n \n     fn value(self) -> Option<T>;\n+    fn value_ref(&self) -> Option<&T>;\n }\n \n-impl<T> SetOnce<T> for Option<(T, Span)> {\n-    fn set_once(&mut self, (value, span): (T, Span)) {\n+/// An [`Option<T>`] that keeps track of the span that caused it to be set; used with [`SetOnce`].\n+pub(super) type SpannedOption<T> = Option<(T, Span)>;\n+\n+impl<T> SetOnce<T> for SpannedOption<T> {\n+    fn set_once(&mut self, value: T, span: Span) {\n         match self {\n             None => {\n                 *self = Some((value, span));\n@@ -194,6 +204,10 @@ impl<T> SetOnce<T> for Option<(T, Span)> {\n     fn value(self) -> Option<T> {\n         self.map(|(v, _)| v)\n     }\n+\n+    fn value_ref(&self) -> Option<&T> {\n+        self.as_ref().map(|(v, _)| v)\n+    }\n }\n \n pub(crate) trait HasFieldMap {\n@@ -303,6 +317,7 @@ pub(crate) trait HasFieldMap {\n \n /// `Applicability` of a suggestion - mirrors `rustc_errors::Applicability` - and used to represent\n /// the user's selection of applicability if specified in an attribute.\n+#[derive(Clone, Copy)]\n pub(crate) enum Applicability {\n     MachineApplicable,\n     MaybeIncorrect,\n@@ -359,3 +374,250 @@ pub(crate) fn build_field_mapping<'a>(structure: &Structure<'a>) -> HashMap<Stri\n \n     fields_map\n }\n+\n+/// Possible styles for suggestion subdiagnostics.\n+#[derive(Clone, Copy)]\n+pub(super) enum SuggestionKind {\n+    /// `#[suggestion]`\n+    Normal,\n+    /// `#[suggestion_short]`\n+    Short,\n+    /// `#[suggestion_hidden]`\n+    Hidden,\n+    /// `#[suggestion_verbose]`\n+    Verbose,\n+}\n+\n+impl FromStr for SuggestionKind {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"\" => Ok(SuggestionKind::Normal),\n+            \"_short\" => Ok(SuggestionKind::Short),\n+            \"_hidden\" => Ok(SuggestionKind::Hidden),\n+            \"_verbose\" => Ok(SuggestionKind::Verbose),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl SuggestionKind {\n+    pub fn to_suggestion_style(&self) -> TokenStream {\n+        match self {\n+            SuggestionKind::Normal => {\n+                quote! { rustc_errors::SuggestionStyle::ShowCode }\n+            }\n+            SuggestionKind::Short => {\n+                quote! { rustc_errors::SuggestionStyle::HideCodeInline }\n+            }\n+            SuggestionKind::Hidden => {\n+                quote! { rustc_errors::SuggestionStyle::HideCodeAlways }\n+            }\n+            SuggestionKind::Verbose => {\n+                quote! { rustc_errors::SuggestionStyle::ShowAlways }\n+            }\n+        }\n+    }\n+}\n+\n+/// Types of subdiagnostics that can be created using attributes\n+#[derive(Clone)]\n+pub(super) enum SubdiagnosticKind {\n+    /// `#[label(...)]`\n+    Label,\n+    /// `#[note(...)]`\n+    Note,\n+    /// `#[help(...)]`\n+    Help,\n+    /// `#[warning(...)]`\n+    Warn,\n+    /// `#[suggestion{,_short,_hidden,_verbose}]`\n+    Suggestion {\n+        suggestion_kind: SuggestionKind,\n+        applicability: SpannedOption<Applicability>,\n+        code: TokenStream,\n+    },\n+    /// `#[multipart_suggestion{,_short,_hidden,_verbose}]`\n+    MultipartSuggestion {\n+        suggestion_kind: SuggestionKind,\n+        applicability: SpannedOption<Applicability>,\n+    },\n+}\n+\n+impl SubdiagnosticKind {\n+    /// Constructs a `SubdiagnosticKind` from a field or type attribute such as `#[note]`,\n+    /// `#[error(parser::add_paren)]` or `#[suggestion(code = \"...\")]`. Returns the\n+    /// `SubdiagnosticKind` and the diagnostic slug, if specified.\n+    pub(super) fn from_attr(\n+        attr: &Attribute,\n+        fields: &impl HasFieldMap,\n+    ) -> Result<(SubdiagnosticKind, Option<Path>), DiagnosticDeriveError> {\n+        let span = attr.span().unwrap();\n+\n+        let name = attr.path.segments.last().unwrap().ident.to_string();\n+        let name = name.as_str();\n+\n+        let meta = attr.parse_meta()?;\n+        let mut kind = match name {\n+            \"label\" => SubdiagnosticKind::Label,\n+            \"note\" => SubdiagnosticKind::Note,\n+            \"help\" => SubdiagnosticKind::Help,\n+            \"warning\" => SubdiagnosticKind::Warn,\n+            _ => {\n+                if let Some(suggestion_kind) =\n+                    name.strip_prefix(\"suggestion\").and_then(|s| s.parse().ok())\n+                {\n+                    SubdiagnosticKind::Suggestion {\n+                        suggestion_kind,\n+                        applicability: None,\n+                        code: TokenStream::new(),\n+                    }\n+                } else if let Some(suggestion_kind) =\n+                    name.strip_prefix(\"multipart_suggestion\").and_then(|s| s.parse().ok())\n+                {\n+                    SubdiagnosticKind::MultipartSuggestion { suggestion_kind, applicability: None }\n+                } else {\n+                    throw_invalid_attr!(attr, &meta);\n+                }\n+            }\n+        };\n+\n+        let nested = match meta {\n+            Meta::List(MetaList { ref nested, .. }) => {\n+                // An attribute with properties, such as `#[suggestion(code = \"...\")]` or\n+                // `#[error(some::slug)]`\n+                nested\n+            }\n+            Meta::Path(_) => {\n+                // An attribute without a slug or other properties, such as `#[note]` - return\n+                // without further processing.\n+                //\n+                // Only allow this if there are no mandatory properties, such as `code = \"...\"` in\n+                // `#[suggestion(...)]`\n+                match kind {\n+                    SubdiagnosticKind::Label\n+                    | SubdiagnosticKind::Note\n+                    | SubdiagnosticKind::Help\n+                    | SubdiagnosticKind::Warn\n+                    | SubdiagnosticKind::MultipartSuggestion { .. } => return Ok((kind, None)),\n+                    SubdiagnosticKind::Suggestion { .. } => {\n+                        throw_span_err!(span, \"suggestion without `code = \\\"...\\\"`\")\n+                    }\n+                }\n+            }\n+            _ => {\n+                throw_invalid_attr!(attr, &meta)\n+            }\n+        };\n+\n+        let mut code = None;\n+\n+        let mut nested_iter = nested.into_iter().peekable();\n+\n+        // Peek at the first nested attribute: if it's a slug path, consume it.\n+        let slug = if let Some(NestedMeta::Meta(Meta::Path(path))) = nested_iter.peek() {\n+            let path = path.clone();\n+            // Advance the iterator.\n+            nested_iter.next();\n+            Some(path)\n+        } else {\n+            None\n+        };\n+\n+        for nested_attr in nested_iter {\n+            let meta = match nested_attr {\n+                NestedMeta::Meta(ref meta) => meta,\n+                NestedMeta::Lit(_) => {\n+                    invalid_nested_attr(attr, &nested_attr).emit();\n+                    continue;\n+                }\n+            };\n+\n+            let span = meta.span().unwrap();\n+            let nested_name = meta.path().segments.last().unwrap().ident.to_string();\n+            let nested_name = nested_name.as_str();\n+\n+            let value = match meta {\n+                Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(value), .. }) => value,\n+                Meta::Path(_) => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n+                    diag.help(\"a diagnostic slug must be the first argument to the attribute\")\n+                }),\n+                _ => {\n+                    invalid_nested_attr(attr, &nested_attr).emit();\n+                    continue;\n+                }\n+            };\n+\n+            match (nested_name, &mut kind) {\n+                (\"code\", SubdiagnosticKind::Suggestion { .. }) => {\n+                    let formatted_str = fields.build_format(&value.value(), value.span());\n+                    code.set_once(formatted_str, span);\n+                }\n+                (\n+                    \"applicability\",\n+                    SubdiagnosticKind::Suggestion { ref mut applicability, .. }\n+                    | SubdiagnosticKind::MultipartSuggestion { ref mut applicability, .. },\n+                ) => {\n+                    let value = Applicability::from_str(&value.value()).unwrap_or_else(|()| {\n+                        span_err(span, \"invalid applicability\").emit();\n+                        Applicability::Unspecified\n+                    });\n+                    applicability.set_once(value, span);\n+                }\n+\n+                // Invalid nested attribute\n+                (_, SubdiagnosticKind::Suggestion { .. }) => {\n+                    invalid_nested_attr(attr, &nested_attr)\n+                        .help(\"only `code` and `applicability` are valid nested attributes\")\n+                        .emit();\n+                }\n+                (_, SubdiagnosticKind::MultipartSuggestion { .. }) => {\n+                    invalid_nested_attr(attr, &nested_attr)\n+                        .help(\"only `applicability` is a valid nested attributes\")\n+                        .emit()\n+                }\n+                _ => {\n+                    invalid_nested_attr(attr, &nested_attr).emit();\n+                }\n+            }\n+        }\n+\n+        match kind {\n+            SubdiagnosticKind::Suggestion { code: ref mut code_field, .. } => {\n+                *code_field = if let Some((code, _)) = code {\n+                    code\n+                } else {\n+                    span_err(span, \"suggestion without `code = \\\"...\\\"`\").emit();\n+                    quote! { \"\" }\n+                }\n+            }\n+            SubdiagnosticKind::Label\n+            | SubdiagnosticKind::Note\n+            | SubdiagnosticKind::Help\n+            | SubdiagnosticKind::Warn\n+            | SubdiagnosticKind::MultipartSuggestion { .. } => {}\n+        }\n+\n+        Ok((kind, slug))\n+    }\n+}\n+\n+impl quote::IdentFragment for SubdiagnosticKind {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            SubdiagnosticKind::Label => write!(f, \"label\"),\n+            SubdiagnosticKind::Note => write!(f, \"note\"),\n+            SubdiagnosticKind::Help => write!(f, \"help\"),\n+            SubdiagnosticKind::Warn => write!(f, \"warn\"),\n+            SubdiagnosticKind::Suggestion { .. } => write!(f, \"suggestion_with_style\"),\n+            SubdiagnosticKind::MultipartSuggestion { .. } => {\n+                write!(f, \"multipart_suggestion_with_style\")\n+            }\n+        }\n+    }\n+\n+    fn span(&self) -> Option<proc_macro2::Span> {\n+        None\n+    }\n+}"}, {"sha": "0a81cde93be9c2bd7fa26cd4ea6a994b2b182332", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a93028bcc4a9052f0956e924fed0c9ac61efba1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a93028bcc4a9052f0956e924fed0c9ac61efba1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=1a93028bcc4a9052f0956e924fed0c9ac61efba1", "patch": "@@ -289,7 +289,7 @@ pub enum BadTypePlusSub {\n #[diag(parser::maybe_recover_from_bad_qpath_stage_2)]\n struct BadQPathStage2 {\n     #[primary_span]\n-    #[suggestion(applicability = \"maybe-incorrect\")]\n+    #[suggestion(code = \"\", applicability = \"maybe-incorrect\")]\n     span: Span,\n     ty: String,\n }\n@@ -298,7 +298,7 @@ struct BadQPathStage2 {\n #[diag(parser::incorrect_semicolon)]\n struct IncorrectSemicolon<'a> {\n     #[primary_span]\n-    #[suggestion_short(applicability = \"machine-applicable\")]\n+    #[suggestion_short(code = \"\", applicability = \"machine-applicable\")]\n     span: Span,\n     #[help]\n     opt_help: Option<()>,\n@@ -309,7 +309,7 @@ struct IncorrectSemicolon<'a> {\n #[diag(parser::incorrect_use_of_await)]\n struct IncorrectUseOfAwait {\n     #[primary_span]\n-    #[suggestion(parser::parentheses_suggestion, applicability = \"machine-applicable\")]\n+    #[suggestion(parser::parentheses_suggestion, code = \"\", applicability = \"machine-applicable\")]\n     span: Span,\n }\n \n@@ -329,7 +329,7 @@ struct IncorrectAwait {\n struct InInTypo {\n     #[primary_span]\n     span: Span,\n-    #[suggestion(applicability = \"machine-applicable\")]\n+    #[suggestion(code = \"\", applicability = \"machine-applicable\")]\n     sugg_span: Span,\n }\n "}, {"sha": "cc231af71a2748c3de43f0651273d178bc8e29f0", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a93028bcc4a9052f0956e924fed0c9ac61efba1/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a93028bcc4a9052f0956e924fed0c9ac61efba1/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=1a93028bcc4a9052f0956e924fed0c9ac61efba1", "patch": "@@ -462,7 +462,7 @@ pub struct LinkSection {\n pub struct NoMangleForeign {\n     #[label]\n     pub span: Span,\n-    #[suggestion(applicability = \"machine-applicable\")]\n+    #[suggestion(code = \"\", applicability = \"machine-applicable\")]\n     pub attr_span: Span,\n     pub foreign_item_kind: &'static str,\n }\n@@ -596,7 +596,7 @@ pub enum UnusedNote {\n #[derive(LintDiagnostic)]\n #[diag(passes::unused)]\n pub struct Unused {\n-    #[suggestion(applicability = \"machine-applicable\")]\n+    #[suggestion(code = \"\", applicability = \"machine-applicable\")]\n     pub attr_span: Span,\n     #[subdiagnostic]\n     pub note: UnusedNote,"}, {"sha": "ad481c14bab8d9905e4f69fbad4cd74d3fb81881", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 79, "deletions": 9, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/1a93028bcc4a9052f0956e924fed0c9ac61efba1/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a93028bcc4a9052f0956e924fed0c9ac61efba1/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=1a93028bcc4a9052f0956e924fed0c9ac61efba1", "patch": "@@ -76,13 +76,15 @@ struct InvalidNestedStructAttr1 {}\n #[derive(Diagnostic)]\n #[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n //~^ ERROR `#[diag(nonsense = ...)]` is not a valid attribute\n-//~^^ ERROR diagnostic slug not specified\n+//~| ERROR `#[diag(slug = ...)]` is not a valid attribute\n+//~| ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr2 {}\n \n #[derive(Diagnostic)]\n #[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n //~^ ERROR `#[diag(nonsense = ...)]` is not a valid attribute\n-//~^^ ERROR diagnostic slug not specified\n+//~| ERROR `#[diag(slug = ...)]` is not a valid attribute\n+//~| ERROR diagnostic slug not specified\n struct InvalidNestedStructAttr3 {}\n \n #[derive(Diagnostic)]\n@@ -217,6 +219,7 @@ struct Suggest {\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithoutCode {\n     #[suggestion(typeck::suggestion)]\n+    //~^ ERROR suggestion without `code = \"...\"`\n     suggestion: (Span, Applicability),\n }\n \n@@ -225,6 +228,7 @@ struct SuggestWithoutCode {\n struct SuggestWithBadKey {\n     #[suggestion(nonsense = \"bar\")]\n     //~^ ERROR `#[suggestion(nonsense = ...)]` is not a valid attribute\n+    //~| ERROR suggestion without `code = \"...\"`\n     suggestion: (Span, Applicability),\n }\n \n@@ -233,6 +237,7 @@ struct SuggestWithBadKey {\n struct SuggestWithShorthandMsg {\n     #[suggestion(msg = \"bar\")]\n     //~^ ERROR `#[suggestion(msg = ...)]` is not a valid attribute\n+    //~| ERROR suggestion without `code = \"...\"`\n     suggestion: (Span, Applicability),\n }\n \n@@ -269,16 +274,16 @@ struct SuggestWithSpanOnly {\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithDuplicateSpanAndApplicability {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n-    //~^ ERROR type of field annotated with `#[suggestion(...)]` contains more than one `Span`\n     suggestion: (Span, Span, Applicability),\n+    //~^ ERROR specified multiple times\n }\n \n #[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithDuplicateApplicabilityAndSpan {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n-    //~^ ERROR type of field annotated with `#[suggestion(...)]` contains more than one\n     suggestion: (Applicability, Applicability, Span),\n+    //~^ ERROR specified multiple times\n }\n \n #[derive(Diagnostic)]\n@@ -294,7 +299,7 @@ struct WrongKindOfAnnotation {\n struct OptionsInErrors {\n     #[label(typeck::label)]\n     label: Option<Span>,\n-    #[suggestion(typeck::suggestion)]\n+    #[suggestion(typeck::suggestion, code = \"...\")]\n     opt_sugg: Option<(Span, Applicability)>,\n }\n \n@@ -436,7 +441,7 @@ struct ErrorWithNoteCustomWrongOrder {\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct ApplicabilityInBoth {\n     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n-    //~^ ERROR applicability cannot be set in both the field and attribute\n+    //~^ ERROR specified multiple times\n     suggestion: (Span, Applicability),\n }\n \n@@ -507,23 +512,23 @@ struct OptUnitField {\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelWithTrailingPath {\n     #[label(typeck::label, foo)]\n-    //~^ ERROR `#[label(...)]` is not a valid attribute\n+    //~^ ERROR `#[label(foo)]` is not a valid attribute\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelWithTrailingNameValue {\n     #[label(typeck::label, foo = \"...\")]\n-    //~^ ERROR `#[label(...)]` is not a valid attribute\n+    //~^ ERROR `#[label(foo = ...)]` is not a valid attribute\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct LabelWithTrailingList {\n     #[label(typeck::label, foo(\"...\"))]\n-    //~^ ERROR `#[label(...)]` is not a valid attribute\n+    //~^ ERROR `#[label(foo(...))]` is not a valid attribute\n     span: Span,\n }\n \n@@ -581,3 +586,68 @@ struct LintAttributeOnSessionDiag {}\n //~| ERROR diagnostic slug not specified\n //~| ERROR cannot find attribute `lint` in this scope\n struct LintAttributeOnLintDiag {}\n+\n+#[derive(Diagnostic)]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+struct DuplicatedSuggestionCode {\n+    #[suggestion(typeck::suggestion, code = \"...\", code = \",,,\")]\n+    //~^ ERROR specified multiple times\n+    suggestion: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+struct InvalidTypeInSuggestionTuple {\n+    #[suggestion(typeck::suggestion, code = \"...\")]\n+    suggestion: (Span, usize),\n+    //~^ ERROR wrong types for suggestion\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+struct MissingApplicabilityInSuggestionTuple {\n+    #[suggestion(typeck::suggestion, code = \"...\")]\n+    suggestion: (Span,),\n+    //~^ ERROR wrong types for suggestion\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+struct MissingCodeInSuggestion {\n+    #[suggestion(typeck::suggestion)]\n+    //~^ ERROR suggestion without `code = \"...\"`\n+    suggestion: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[multipart_suggestion(typeck::suggestion)]\n+//~^ ERROR `#[multipart_suggestion(...)]` is not a valid attribute\n+//~| ERROR cannot find attribute `multipart_suggestion` in this scope\n+#[multipart_suggestion()]\n+//~^ ERROR `#[multipart_suggestion(...)]` is not a valid attribute\n+//~| ERROR cannot find attribute `multipart_suggestion` in this scope\n+struct MultipartSuggestion {\n+    #[multipart_suggestion(typeck::suggestion)]\n+    //~^ ERROR `#[multipart_suggestion(...)]` is not a valid attribute\n+    //~| ERROR cannot find attribute `multipart_suggestion` in this scope\n+    suggestion: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[suggestion(typeck::suggestion, code = \"...\")]\n+//~^ ERROR `#[suggestion(...)]` is not a valid attribute\n+struct SuggestionOnStruct {\n+    #[primary_span]\n+    suggestion: Span,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+#[label]\n+//~^ ERROR `#[label]` is not a valid attribute\n+struct LabelOnStruct {\n+    #[primary_span]\n+    suggestion: Span,\n+}"}, {"sha": "9919b12beaf0a54edf0b0f53122900e9583232ff", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 216, "deletions": 84, "changes": 300, "blob_url": "https://github.com/rust-lang/rust/blob/1a93028bcc4a9052f0956e924fed0c9ac61efba1/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a93028bcc4a9052f0956e924fed0c9ac61efba1/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=1a93028bcc4a9052f0956e924fed0c9ac61efba1", "patch": "@@ -20,8 +20,6 @@ error: `#[nonsense(...)]` is not a valid attribute\n    |\n LL | #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: only `diag`, `help`, `note` and `warning` are valid attributes\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:53:1\n@@ -41,7 +39,7 @@ error: `#[diag(\"...\")]` is not a valid attribute\n LL | #[diag(\"E0123\")]\n    |        ^^^^^^^\n    |\n-   = help: first argument of the attribute should be the diagnostic slug\n+   = help: a diagnostic slug is required as the first argument\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:60:1\n@@ -60,7 +58,7 @@ error: `#[diag(nonsense(...))]` is not a valid attribute\n LL | #[diag(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n    |        ^^^^^^^^^^^^^^^\n    |\n-   = help: first argument of the attribute should be the diagnostic slug\n+   = help: a diagnostic slug is required as the first argument\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:71:1\n@@ -79,104 +77,122 @@ error: `#[diag(nonsense = ...)]` is not a valid attribute\n LL | #[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n    |        ^^^^^^^^^^^^^^^^\n    |\n-   = help: first argument of the attribute should be the diagnostic slug\n+   = help: only `code` is a valid nested attributes following the slug\n+\n+error: `#[diag(slug = ...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:77:42\n+   |\n+LL | #[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n+   |                                          ^^^^^^^^^^^^\n+   |\n+   = help: only `code` is a valid nested attributes following the slug\n \n error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:77:1\n    |\n LL | / #[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n LL | |\n LL | |\n+LL | |\n LL | | struct InvalidNestedStructAttr2 {}\n    | |__________________________________^\n    |\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: `#[diag(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:83:8\n+  --> $DIR/diagnostic-derive.rs:84:8\n    |\n LL | #[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n    |        ^^^^^^^^^^^^\n+\n+error: `#[diag(slug = ...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:84:38\n    |\n-   = help: first argument of the attribute should be the diagnostic slug\n+LL | #[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n+   |                                      ^^^^^^^^^^^^\n+   |\n+   = help: only `code` is a valid nested attributes following the slug\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:83:1\n+  --> $DIR/diagnostic-derive.rs:84:1\n    |\n LL | / #[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n LL | |\n LL | |\n+LL | |\n LL | | struct InvalidNestedStructAttr3 {}\n    | |__________________________________^\n    |\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: `#[diag(slug = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:89:58\n+  --> $DIR/diagnostic-derive.rs:91:58\n    |\n LL | #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\", slug = \"foo\")]\n    |                                                          ^^^^^^^^^^^^\n    |\n    = help: only `code` is a valid nested attributes following the slug\n \n error: `#[suggestion = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:96:5\n+  --> $DIR/diagnostic-derive.rs:98:5\n    |\n LL |     #[suggestion = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:103:1\n+  --> $DIR/diagnostic-derive.rs:105:8\n    |\n LL | #[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:102:1\n+  --> $DIR/diagnostic-derive.rs:104:8\n    |\n LL | #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:103:49\n+  --> $DIR/diagnostic-derive.rs:105:49\n    |\n LL | #[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n    |                                                 ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:102:49\n+  --> $DIR/diagnostic-derive.rs:104:49\n    |\n LL | #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |                                                 ^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:109:65\n+  --> $DIR/diagnostic-derive.rs:111:65\n    |\n LL | #[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n    |                                                                 ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:109:49\n+  --> $DIR/diagnostic-derive.rs:111:49\n    |\n LL | #[diag(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n    |                                                 ^^^^^^^\n \n error: `#[diag(typeck::ambiguous_lifetime_bound)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:114:42\n+  --> $DIR/diagnostic-derive.rs:116:42\n    |\n LL | #[diag(typeck::ambiguous_lifetime_bound, typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: diagnostic slug must be the first argument\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:119:1\n+  --> $DIR/diagnostic-derive.rs:121:1\n    |\n LL | struct KindNotProvided {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:122:1\n+  --> $DIR/diagnostic-derive.rs:124:1\n    |\n LL | / #[diag(code = \"E0456\")]\n LL | |\n@@ -186,33 +202,31 @@ LL | | struct SlugNotProvided {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: the `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/diagnostic-derive.rs:133:5\n+  --> $DIR/diagnostic-derive.rs:135:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: `#[nonsense]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:141:5\n+  --> $DIR/diagnostic-derive.rs:143:5\n    |\n LL |     #[nonsense]\n    |     ^^^^^^^^^^^\n-   |\n-   = help: only `skip_arg`, `primary_span`, `label`, `note`, `help` and `subdiagnostic` are valid field attributes\n \n error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/diagnostic-derive.rs:158:5\n+  --> $DIR/diagnostic-derive.rs:160:5\n    |\n LL |     #[label(typeck::label)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `name` doesn't refer to a field on this type\n-  --> $DIR/diagnostic-derive.rs:166:45\n+  --> $DIR/diagnostic-derive.rs:168:45\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"{name}\")]\n    |                                             ^^^^^^^^\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/diagnostic-derive.rs:171:16\n+  --> $DIR/diagnostic-derive.rs:173:16\n    |\n LL | #[derive(Diagnostic)]\n    |           -    ^ expected `'}'` in format string\n@@ -223,7 +237,7 @@ LL | #[derive(Diagnostic)]\n    = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/diagnostic-derive.rs:181:15\n+  --> $DIR/diagnostic-derive.rs:183:15\n    |\n LL | #[derive(Diagnostic)]\n    |               ^ unmatched `}` in format string\n@@ -232,29 +246,47 @@ LL | #[derive(Diagnostic)]\n    = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/diagnostic-derive.rs:201:5\n+  --> $DIR/diagnostic-derive.rs:203:5\n    |\n LL |     #[label(typeck::label)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: suggestion without `code = \"...\"`\n+  --> $DIR/diagnostic-derive.rs:221:5\n+   |\n+LL |     #[suggestion(typeck::suggestion)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: `#[suggestion(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:226:18\n+  --> $DIR/diagnostic-derive.rs:229:18\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |                  ^^^^^^^^^^^^^^^^\n    |\n-   = help: only `message`, `code` and `applicability` are valid field attributes\n+   = help: only `code` and `applicability` are valid nested attributes\n+\n+error: suggestion without `code = \"...\"`\n+  --> $DIR/diagnostic-derive.rs:229:5\n+   |\n+LL |     #[suggestion(nonsense = \"bar\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion(msg = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:234:18\n+  --> $DIR/diagnostic-derive.rs:238:18\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |                  ^^^^^^^^^^^\n    |\n-   = help: only `message`, `code` and `applicability` are valid field attributes\n+   = help: only `code` and `applicability` are valid nested attributes\n+\n+error: suggestion without `code = \"...\"`\n+  --> $DIR/diagnostic-derive.rs:238:5\n+   |\n+LL |     #[suggestion(msg = \"bar\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: wrong field type for suggestion\n-  --> $DIR/diagnostic-derive.rs:256:5\n+  --> $DIR/diagnostic-derive.rs:261:5\n    |\n LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n LL | |\n@@ -263,76 +295,90 @@ LL | |     suggestion: Applicability,\n    |\n    = help: `#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`\n \n-error: type of field annotated with `#[suggestion(...)]` contains more than one `Span`\n-  --> $DIR/diagnostic-derive.rs:271:5\n+error: specified multiple times\n+  --> $DIR/diagnostic-derive.rs:277:24\n    |\n-LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n-LL | |\n-LL | |     suggestion: (Span, Span, Applicability),\n-   | |___________________________________________^\n+LL |     suggestion: (Span, Span, Applicability),\n+   |                        ^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/diagnostic-derive.rs:277:18\n+   |\n+LL |     suggestion: (Span, Span, Applicability),\n+   |                  ^^^^\n \n-error: type of field annotated with `#[suggestion(...)]` contains more than one Applicability\n-  --> $DIR/diagnostic-derive.rs:279:5\n+error: specified multiple times\n+  --> $DIR/diagnostic-derive.rs:285:33\n    |\n-LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n-LL | |\n-LL | |     suggestion: (Applicability, Applicability, Span),\n-   | |____________________________________________________^\n+LL |     suggestion: (Applicability, Applicability, Span),\n+   |                                 ^^^^^^^^^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/diagnostic-derive.rs:285:18\n+   |\n+LL |     suggestion: (Applicability, Applicability, Span),\n+   |                  ^^^^^^^^^^^^^\n \n error: `#[label = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:287:5\n+  --> $DIR/diagnostic-derive.rs:292:5\n    |\n LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n-error: applicability cannot be set in both the field and attribute\n-  --> $DIR/diagnostic-derive.rs:438:52\n+error: specified multiple times\n+  --> $DIR/diagnostic-derive.rs:443:52\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/diagnostic-derive.rs:445:24\n+   |\n+LL |     suggestion: (Span, Applicability),\n+   |                        ^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/diagnostic-derive.rs:446:52\n+  --> $DIR/diagnostic-derive.rs:451:52\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"batman\")]\n    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `#[label(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:509:5\n+error: `#[label(foo)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:514:28\n    |\n LL |     #[label(typeck::label, foo)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                            ^^^\n+   |\n+   = help: a diagnostic slug must be the first argument to the attribute\n \n-error: `#[label(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:517:5\n+error: `#[label(foo = ...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:522:28\n    |\n LL |     #[label(typeck::label, foo = \"...\")]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                            ^^^^^^^^^^^\n \n-error: `#[label(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:525:5\n+error: `#[label(foo(...))]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:530:28\n    |\n LL |     #[label(typeck::label, foo(\"...\"))]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                            ^^^^^^^^^^\n \n error: `#[primary_span]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:538:5\n+  --> $DIR/diagnostic-derive.rs:543:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: the `primary_span` field attribute is not valid for lint diagnostics\n \n error: `#[error(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:558:1\n+  --> $DIR/diagnostic-derive.rs:563:1\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: `error` and `lint` have been replaced by `diag`\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:558:1\n+  --> $DIR/diagnostic-derive.rs:563:1\n    |\n LL | / #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n@@ -344,15 +390,13 @@ LL | | struct ErrorAttribute {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: `#[warn_(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:565:1\n+  --> $DIR/diagnostic-derive.rs:570:1\n    |\n LL | #[warn_(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: `warn_` have been replaced by `warning`\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:565:1\n+  --> $DIR/diagnostic-derive.rs:570:1\n    |\n LL | / #[warn_(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n@@ -364,15 +408,13 @@ LL | | struct WarnAttribute {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:572:1\n+  --> $DIR/diagnostic-derive.rs:577:1\n    |\n LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: `error` and `lint` have been replaced by `diag`\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:572:1\n+  --> $DIR/diagnostic-derive.rs:577:1\n    |\n LL | / #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n@@ -384,15 +426,13 @@ LL | | struct LintAttributeOnSessionDiag {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:579:1\n+  --> $DIR/diagnostic-derive.rs:584:1\n    |\n LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: `error` and `lint` have been replaced by `diag`\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:579:1\n+  --> $DIR/diagnostic-derive.rs:584:1\n    |\n LL | / #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n LL | |\n@@ -403,50 +443,142 @@ LL | | struct LintAttributeOnLintDiag {}\n    |\n    = help: specify the slug as the first argument to the attribute, such as `#[diag(typeck::example_error)]`\n \n+error: specified multiple times\n+  --> $DIR/diagnostic-derive.rs:593:52\n+   |\n+LL |     #[suggestion(typeck::suggestion, code = \"...\", code = \",,,\")]\n+   |                                                    ^^^^^^^^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/diagnostic-derive.rs:593:38\n+   |\n+LL |     #[suggestion(typeck::suggestion, code = \"...\", code = \",,,\")]\n+   |                                      ^^^^^^^^^^^^\n+\n+error: wrong types for suggestion\n+  --> $DIR/diagnostic-derive.rs:602:24\n+   |\n+LL |     suggestion: (Span, usize),\n+   |                        ^^^^^\n+   |\n+   = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n+\n+error: wrong types for suggestion\n+  --> $DIR/diagnostic-derive.rs:610:17\n+   |\n+LL |     suggestion: (Span,),\n+   |                 ^^^^^^^\n+   |\n+   = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n+\n+error: suggestion without `code = \"...\"`\n+  --> $DIR/diagnostic-derive.rs:617:5\n+   |\n+LL |     #[suggestion(typeck::suggestion)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `#[multipart_suggestion(...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:624:1\n+   |\n+LL | #[multipart_suggestion(typeck::suggestion)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider creating a `Subdiagnostic` instead\n+\n+error: `#[multipart_suggestion(...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:627:1\n+   |\n+LL | #[multipart_suggestion()]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider creating a `Subdiagnostic` instead\n+\n+error: `#[multipart_suggestion(...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:631:5\n+   |\n+LL |     #[multipart_suggestion(typeck::suggestion)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider creating a `Subdiagnostic` instead\n+\n+error: `#[suggestion(...)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:639:1\n+   |\n+LL | #[suggestion(typeck::suggestion, code = \"...\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `#[label]` and `#[suggestion]` can only be applied to fields\n+\n+error: `#[label]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:648:1\n+   |\n+LL | #[label]\n+   | ^^^^^^^^\n+   |\n+   = help: `#[label]` and `#[suggestion]` can only be applied to fields\n+\n error: cannot find attribute `nonsense` in this scope\n   --> $DIR/diagnostic-derive.rs:53:3\n    |\n LL | #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |   ^^^^^^^^\n \n error: cannot find attribute `nonsense` in this scope\n-  --> $DIR/diagnostic-derive.rs:141:7\n+  --> $DIR/diagnostic-derive.rs:143:7\n    |\n LL |     #[nonsense]\n    |       ^^^^^^^^\n \n error: cannot find attribute `error` in this scope\n-  --> $DIR/diagnostic-derive.rs:558:3\n+  --> $DIR/diagnostic-derive.rs:563:3\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |   ^^^^^\n \n error: cannot find attribute `warn_` in this scope\n-  --> $DIR/diagnostic-derive.rs:565:3\n+  --> $DIR/diagnostic-derive.rs:570:3\n    |\n LL | #[warn_(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |   ^^^^^ help: a built-in attribute with a similar name exists: `warn`\n \n error: cannot find attribute `lint` in this scope\n-  --> $DIR/diagnostic-derive.rs:572:3\n+  --> $DIR/diagnostic-derive.rs:577:3\n    |\n LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n error: cannot find attribute `lint` in this scope\n-  --> $DIR/diagnostic-derive.rs:579:3\n+  --> $DIR/diagnostic-derive.rs:584:3\n    |\n LL | #[lint(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n+error: cannot find attribute `multipart_suggestion` in this scope\n+  --> $DIR/diagnostic-derive.rs:624:3\n+   |\n+LL | #[multipart_suggestion(typeck::suggestion)]\n+   |   ^^^^^^^^^^^^^^^^^^^^\n+\n+error: cannot find attribute `multipart_suggestion` in this scope\n+  --> $DIR/diagnostic-derive.rs:627:3\n+   |\n+LL | #[multipart_suggestion()]\n+   |   ^^^^^^^^^^^^^^^^^^^^\n+\n+error: cannot find attribute `multipart_suggestion` in this scope\n+  --> $DIR/diagnostic-derive.rs:631:7\n+   |\n+LL |     #[multipart_suggestion(typeck::suggestion)]\n+   |       ^^^^^^^^^^^^^^^^^^^^\n+\n error[E0425]: cannot find value `nonsense` in module `rustc_errors::fluent`\n   --> $DIR/diagnostic-derive.rs:66:8\n    |\n LL | #[diag(nonsense, code = \"E0123\")]\n    |        ^^^^^^^^ not found in `rustc_errors::fluent`\n \n error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n-  --> $DIR/diagnostic-derive.rs:331:10\n+  --> $DIR/diagnostic-derive.rs:336:10\n    |\n LL | #[derive(Diagnostic)]\n    |          ^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`\n@@ -459,7 +591,7 @@ LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`\n    = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 55 previous errors\n+error: aborting due to 72 previous errors\n \n Some errors have detailed explanations: E0277, E0425.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "606b3b5e5ebca1943bc5e3a74347bf9b75d48d71", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1a93028bcc4a9052f0956e924fed0c9ac61efba1/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a93028bcc4a9052f0956e924fed0c9ac61efba1/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=1a93028bcc4a9052f0956e924fed0c9ac61efba1", "patch": "@@ -52,7 +52,7 @@ struct C {\n \n #[derive(Subdiagnostic)]\n #[label]\n-//~^ ERROR `#[label]` is not a valid attribute\n+//~^ ERROR diagnostic slug must be first argument\n struct D {\n     #[primary_span]\n     span: Span,\n@@ -81,6 +81,7 @@ struct F {\n #[derive(Subdiagnostic)]\n #[label(bug = \"...\")]\n //~^ ERROR `#[label(bug = ...)]` is not a valid attribute\n+//~| ERROR diagnostic slug must be first argument\n struct G {\n     #[primary_span]\n     span: Span,\n@@ -90,6 +91,7 @@ struct G {\n #[derive(Subdiagnostic)]\n #[label(\"...\")]\n //~^ ERROR `#[label(\"...\")]` is not a valid attribute\n+//~| ERROR diagnostic slug must be first argument\n struct H {\n     #[primary_span]\n     span: Span,\n@@ -99,6 +101,7 @@ struct H {\n #[derive(Subdiagnostic)]\n #[label(slug = 4)]\n //~^ ERROR `#[label(slug = ...)]` is not a valid attribute\n+//~| ERROR diagnostic slug must be first argument\n struct J {\n     #[primary_span]\n     span: Span,\n@@ -108,6 +111,7 @@ struct J {\n #[derive(Subdiagnostic)]\n #[label(slug(\"...\"))]\n //~^ ERROR `#[label(slug(...))]` is not a valid attribute\n+//~| ERROR diagnostic slug must be first argument\n struct K {\n     #[primary_span]\n     span: Span,\n@@ -135,7 +139,7 @@ struct M {\n \n #[derive(Subdiagnostic)]\n #[label(parser::add_paren, code = \"...\")]\n-//~^ ERROR `code` is not a valid nested attribute of a `label` attribute\n+//~^ ERROR `#[label(code = ...)]` is not a valid attribute\n struct N {\n     #[primary_span]\n     span: Span,\n@@ -144,7 +148,7 @@ struct N {\n \n #[derive(Subdiagnostic)]\n #[label(parser::add_paren, applicability = \"machine-applicable\")]\n-//~^ ERROR `applicability` is not a valid nested attribute of a `label` attribute\n+//~^ ERROR `#[label(applicability = ...)]` is not a valid attribute\n struct O {\n     #[primary_span]\n     span: Span,\n@@ -216,6 +220,7 @@ enum T {\n enum U {\n     #[label(code = \"...\")]\n     //~^ ERROR diagnostic slug must be first argument of a `#[label(...)]` attribute\n+    //~| ERROR `#[label(code = ...)]` is not a valid attribute\n     A {\n         #[primary_span]\n         span: Span,\n@@ -531,7 +536,7 @@ struct BA {\n #[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n //~^ ERROR multipart suggestion without any `#[suggestion_part(...)]` fields\n-//~| ERROR `code` is not a valid nested attribute of a `multipart_suggestion` attribute\n+//~| ERROR `#[multipart_suggestion(code = ...)]` is not a valid attribute\n struct BBa {\n     var: String,\n }\n@@ -612,10 +617,9 @@ struct BG {\n \n #[derive(Subdiagnostic)]\n #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n-//~^ NOTE previously specified here\n struct BH {\n     #[applicability]\n-    //~^ ERROR specified multiple times\n+    //~^ ERROR `#[applicability]` has no effect\n     appl: Applicability,\n     #[suggestion_part(code = \"(\")]\n     first: Span,"}, {"sha": "171b89e657d81eb12d03766c8ef3325995fc526b", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 95, "deletions": 77, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/1a93028bcc4a9052f0956e924fed0c9ac61efba1/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a93028bcc4a9052f0956e924fed0c9ac61efba1/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=1a93028bcc4a9052f0956e924fed0c9ac61efba1", "patch": "@@ -8,7 +8,7 @@ LL | |     var: String,\n LL | | }\n    | |_^\n \n-error: `#[label]` is not a valid attribute\n+error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n   --> $DIR/subdiagnostic-derive.rs:54:1\n    |\n LL | #[label]\n@@ -31,101 +31,123 @@ error: `#[label(bug = ...)]` is not a valid attribute\n    |\n LL | #[label(bug = \"...\")]\n    |         ^^^^^^^^^^^\n+\n+error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n+  --> $DIR/subdiagnostic-derive.rs:82:1\n    |\n-   = help: first argument of the attribute should be the diagnostic slug\n+LL | #[label(bug = \"...\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(\"...\")]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:91:9\n+  --> $DIR/subdiagnostic-derive.rs:92:9\n    |\n LL | #[label(\"...\")]\n    |         ^^^^^\n+\n+error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n+  --> $DIR/subdiagnostic-derive.rs:92:1\n    |\n-   = help: first argument of the attribute should be the diagnostic slug\n+LL | #[label(\"...\")]\n+   | ^^^^^^^^^^^^^^^\n \n error: `#[label(slug = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:100:9\n+  --> $DIR/subdiagnostic-derive.rs:102:9\n    |\n LL | #[label(slug = 4)]\n    |         ^^^^^^^^\n+\n+error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n+  --> $DIR/subdiagnostic-derive.rs:102:1\n    |\n-   = help: first argument of the attribute should be the diagnostic slug\n+LL | #[label(slug = 4)]\n+   | ^^^^^^^^^^^^^^^^^^\n \n error: `#[label(slug(...))]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:109:9\n+  --> $DIR/subdiagnostic-derive.rs:112:9\n    |\n LL | #[label(slug(\"...\"))]\n    |         ^^^^^^^^^^^\n+\n+error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n+  --> $DIR/subdiagnostic-derive.rs:112:1\n    |\n-   = help: first argument of the attribute should be the diagnostic slug\n+LL | #[label(slug(\"...\"))]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n-  --> $DIR/subdiagnostic-derive.rs:128:1\n+  --> $DIR/subdiagnostic-derive.rs:132:1\n    |\n LL | #[label()]\n    | ^^^^^^^^^^\n \n-error: `code` is not a valid nested attribute of a `label` attribute\n-  --> $DIR/subdiagnostic-derive.rs:137:28\n+error: `#[label(code = ...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:141:28\n    |\n LL | #[label(parser::add_paren, code = \"...\")]\n    |                            ^^^^^^^^^^^^\n \n-error: `applicability` is not a valid nested attribute of a `label` attribute\n-  --> $DIR/subdiagnostic-derive.rs:146:28\n+error: `#[label(applicability = ...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:150:28\n    |\n LL | #[label(parser::add_paren, applicability = \"machine-applicable\")]\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsupported type attribute for subdiagnostic enum\n-  --> $DIR/subdiagnostic-derive.rs:155:1\n+  --> $DIR/subdiagnostic-derive.rs:159:1\n    |\n LL | #[foo]\n    | ^^^^^^\n \n error: `#[bar]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:169:5\n+  --> $DIR/subdiagnostic-derive.rs:173:5\n    |\n LL |     #[bar]\n    |     ^^^^^^\n \n error: `#[bar = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:181:5\n+  --> $DIR/subdiagnostic-derive.rs:185:5\n    |\n LL |     #[bar = \"...\"]\n    |     ^^^^^^^^^^^^^^\n \n error: `#[bar = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:193:5\n+  --> $DIR/subdiagnostic-derive.rs:197:5\n    |\n LL |     #[bar = 4]\n    |     ^^^^^^^^^^\n \n error: `#[bar(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:205:5\n+  --> $DIR/subdiagnostic-derive.rs:209:5\n    |\n LL |     #[bar(\"...\")]\n    |     ^^^^^^^^^^^^^\n \n+error: `#[label(code = ...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:221:13\n+   |\n+LL |     #[label(code = \"...\")]\n+   |             ^^^^^^^^^^^^\n+\n error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n-  --> $DIR/subdiagnostic-derive.rs:217:5\n+  --> $DIR/subdiagnostic-derive.rs:221:5\n    |\n LL |     #[label(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:234:5\n+  --> $DIR/subdiagnostic-derive.rs:239:5\n    |\n LL |     B {\n    |     ^\n \n error: the `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:246:5\n+  --> $DIR/subdiagnostic-derive.rs:251:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: label without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:243:1\n+  --> $DIR/subdiagnostic-derive.rs:248:1\n    |\n LL | / #[label(parser::add_paren)]\n LL | |\n@@ -137,35 +159,35 @@ LL | | }\n    | |_^\n \n error: `#[applicability]` is only valid on suggestions\n-  --> $DIR/subdiagnostic-derive.rs:256:5\n+  --> $DIR/subdiagnostic-derive.rs:261:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: `#[bar]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:266:5\n+  --> $DIR/subdiagnostic-derive.rs:271:5\n    |\n LL |     #[bar]\n    |     ^^^^^^\n    |\n    = help: only `primary_span`, `applicability` and `skip_arg` are valid field attributes\n \n error: `#[bar = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:277:5\n+  --> $DIR/subdiagnostic-derive.rs:282:5\n    |\n LL |     #[bar = \"...\"]\n    |     ^^^^^^^^^^^^^^\n \n error: `#[bar(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:288:5\n+  --> $DIR/subdiagnostic-derive.rs:293:5\n    |\n LL |     #[bar(\"...\")]\n    |     ^^^^^^^^^^^^^\n    |\n    = help: only `primary_span`, `applicability` and `skip_arg` are valid field attributes\n \n error: unexpected unsupported untagged union\n-  --> $DIR/subdiagnostic-derive.rs:304:1\n+  --> $DIR/subdiagnostic-derive.rs:309:1\n    |\n LL | / union AC {\n LL | |\n@@ -175,75 +197,75 @@ LL | | }\n    | |_^\n \n error: `#[label(parser::add_paren)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:319:28\n+  --> $DIR/subdiagnostic-derive.rs:324:28\n    |\n LL | #[label(parser::add_paren, parser::add_paren)]\n    |                            ^^^^^^^^^^^^^^^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:332:5\n+  --> $DIR/subdiagnostic-derive.rs:337:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:329:5\n+  --> $DIR/subdiagnostic-derive.rs:334:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:338:8\n+  --> $DIR/subdiagnostic-derive.rs:343:8\n    |\n LL | struct AG {\n    |        ^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:375:47\n+  --> $DIR/subdiagnostic-derive.rs:380:47\n    |\n LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n    |                                               ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:375:33\n+  --> $DIR/subdiagnostic-derive.rs:380:33\n    |\n LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n    |                                 ^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:393:5\n+  --> $DIR/subdiagnostic-derive.rs:398:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:390:5\n+  --> $DIR/subdiagnostic-derive.rs:395:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: the `#[applicability]` attribute can only be applied to fields of type `Applicability`\n-  --> $DIR/subdiagnostic-derive.rs:403:5\n+  --> $DIR/subdiagnostic-derive.rs:408:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:416:1\n+  --> $DIR/subdiagnostic-derive.rs:421:1\n    |\n LL | #[suggestion(parser::add_paren)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:426:46\n+  --> $DIR/subdiagnostic-derive.rs:431:46\n    |\n LL | #[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n    |                                              ^^^^^^^^^^^^^^^^^^^^^\n \n error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:444:1\n+  --> $DIR/subdiagnostic-derive.rs:449:1\n    |\n LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n@@ -253,41 +275,41 @@ LL | | }\n    | |_^\n \n error: unsupported type attribute for subdiagnostic enum\n-  --> $DIR/subdiagnostic-derive.rs:458:1\n+  --> $DIR/subdiagnostic-derive.rs:463:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:478:39\n+  --> $DIR/subdiagnostic-derive.rs:483:39\n    |\n LL | #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n    |                                       ^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:497:43\n+  --> $DIR/subdiagnostic-derive.rs:502:43\n    |\n LL |     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n    |                                           ^^^^^^^\n \n error: `#[suggestion_part]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:520:5\n+  --> $DIR/subdiagnostic-derive.rs:525:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[suggestion_part(...)]` is only valid in multipart suggestions, use `#[primary_span]` instead\n \n error: `#[suggestion_part(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:523:5\n+  --> $DIR/subdiagnostic-derive.rs:528:5\n    |\n LL |     #[suggestion_part(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[suggestion_part(...)]` is only valid in multipart suggestions\n \n error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:517:1\n+  --> $DIR/subdiagnostic-derive.rs:522:1\n    |\n LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n@@ -298,14 +320,16 @@ LL | |     var: String,\n LL | | }\n    | |_^\n \n-error: `code` is not a valid nested attribute of a `multipart_suggestion` attribute\n-  --> $DIR/subdiagnostic-derive.rs:532:43\n+error: `#[multipart_suggestion(code = ...)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:537:43\n    |\n LL | #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n    |                                           ^^^^^^^^^^^^\n+   |\n+   = help: only `applicability` is a valid nested attributes\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n-  --> $DIR/subdiagnostic-derive.rs:532:1\n+  --> $DIR/subdiagnostic-derive.rs:537:1\n    |\n LL | / #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n LL | |\n@@ -316,27 +340,27 @@ LL | | }\n    | |_^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:542:5\n+  --> $DIR/subdiagnostic-derive.rs:547:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:550:5\n+  --> $DIR/subdiagnostic-derive.rs:555:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: `#[primary_span]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:559:5\n+  --> $DIR/subdiagnostic-derive.rs:564:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: multipart suggestions use one or more `#[suggestion_part]`s rather than one `#[primary_span]`\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n-  --> $DIR/subdiagnostic-derive.rs:556:1\n+  --> $DIR/subdiagnostic-derive.rs:561:1\n    |\n LL | / #[multipart_suggestion(parser::add_paren)]\n LL | |\n@@ -348,60 +372,54 @@ LL | | }\n    | |_^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:567:5\n+  --> $DIR/subdiagnostic-derive.rs:572:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:570:5\n+  --> $DIR/subdiagnostic-derive.rs:575:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(foo = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:573:23\n+  --> $DIR/subdiagnostic-derive.rs:578:23\n    |\n LL |     #[suggestion_part(foo = \"bar\")]\n    |                       ^^^^^^^^^^^\n    |\n    = help: `code` is the only valid nested attribute\n \n error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:576:5\n+  --> $DIR/subdiagnostic-derive.rs:581:5\n    |\n LL |     #[suggestion_part(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:579:5\n+  --> $DIR/subdiagnostic-derive.rs:584:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:587:37\n+  --> $DIR/subdiagnostic-derive.rs:592:37\n    |\n LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n    |                                     ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:587:23\n+  --> $DIR/subdiagnostic-derive.rs:592:23\n    |\n LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n    |                       ^^^^^^^^^^^^\n \n-error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:617:5\n+error: `#[applicability]` has no effect if all `#[suggestion]`/`#[multipart_suggestion]` attributes have a static `applicability = \"...\"`\n+  --> $DIR/subdiagnostic-derive.rs:621:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n-   |\n-note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:614:43\n-   |\n-LL | #[multipart_suggestion(parser::add_paren, applicability = \"machine-applicable\")]\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `foo` in this scope\n   --> $DIR/subdiagnostic-derive.rs:63:3\n@@ -410,59 +428,59 @@ LL | #[foo]\n    |   ^^^\n \n error: cannot find attribute `foo` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:155:3\n+  --> $DIR/subdiagnostic-derive.rs:159:3\n    |\n LL | #[foo]\n    |   ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:169:7\n+  --> $DIR/subdiagnostic-derive.rs:173:7\n    |\n LL |     #[bar]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:181:7\n+  --> $DIR/subdiagnostic-derive.rs:185:7\n    |\n LL |     #[bar = \"...\"]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:193:7\n+  --> $DIR/subdiagnostic-derive.rs:197:7\n    |\n LL |     #[bar = 4]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:205:7\n+  --> $DIR/subdiagnostic-derive.rs:209:7\n    |\n LL |     #[bar(\"...\")]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:266:7\n+  --> $DIR/subdiagnostic-derive.rs:271:7\n    |\n LL |     #[bar]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:277:7\n+  --> $DIR/subdiagnostic-derive.rs:282:7\n    |\n LL |     #[bar = \"...\"]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:288:7\n+  --> $DIR/subdiagnostic-derive.rs:293:7\n    |\n LL |     #[bar(\"...\")]\n    |       ^^^\n \n error[E0425]: cannot find value `slug` in module `rustc_errors::fluent`\n-  --> $DIR/subdiagnostic-derive.rs:118:9\n+  --> $DIR/subdiagnostic-derive.rs:122:9\n    |\n LL | #[label(slug)]\n    |         ^^^^ not found in `rustc_errors::fluent`\n \n-error: aborting due to 63 previous errors\n+error: aborting due to 68 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}]}