{"sha": "84fb2f402e92976c34c4a60cab5b918d377388fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZmIyZjQwMmU5Mjk3NmMzNGM0YTYwY2FiNWI5MThkMzc3Mzg4ZmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2016-04-02T18:56:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2016-04-02T19:24:38Z"}, "message": "refactor: unify run and run_from_stdin", "tree": {"sha": "0e64a526f3e0ed78cd420f151edd723d058d552e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e64a526f3e0ed78cd420f151edd723d058d552e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84fb2f402e92976c34c4a60cab5b918d377388fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84fb2f402e92976c34c4a60cab5b918d377388fb", "html_url": "https://github.com/rust-lang/rust/commit/84fb2f402e92976c34c4a60cab5b918d377388fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84fb2f402e92976c34c4a60cab5b918d377388fb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "294b463b5d9755fe2138b1d7a8593aa263567bdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/294b463b5d9755fe2138b1d7a8593aa263567bdf", "html_url": "https://github.com/rust-lang/rust/commit/294b463b5d9755fe2138b1d7a8593aa263567bdf"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "e3ead2a28a13f3ee4c95f00fd24510da2e173b11", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84fb2f402e92976c34c4a60cab5b918d377388fb/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fb2f402e92976c34c4a60cab5b918d377388fb/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=84fb2f402e92976c34c4a60cab5b918d377388fb", "patch": "@@ -17,7 +17,7 @@ extern crate toml;\n extern crate env_logger;\n extern crate getopts;\n \n-use rustfmt::{run, run_from_stdin};\n+use rustfmt::{run, Input};\n use rustfmt::config::{Config, WriteMode};\n \n use std::env;\n@@ -197,7 +197,7 @@ fn execute() -> i32 {\n             // write_mode is always Plain for Stdin.\n             config.write_mode = WriteMode::Plain;\n \n-            run_from_stdin(input, &config);\n+            run(Input::Text(input), &config);\n             0\n         }\n         Operation::Format { files, config_path } => {\n@@ -233,7 +233,7 @@ fn execute() -> i32 {\n                     print_usage(&opts, &e);\n                     return 1;\n                 }\n-                run(&file, &config);\n+                run(Input::File(file), &config);\n             }\n             0\n         }"}, {"sha": "c6af9a7018486b15e0563773cab147a2946566ef", "filename": "src/filemap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/84fb2f402e92976c34c4a60cab5b918d377388fb/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fb2f402e92976c34c4a60cab5b918d377388fb/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=84fb2f402e92976c34c4a60cab5b918d377388fb", "patch": "@@ -80,11 +80,11 @@ pub fn write_system_newlines<T>(writer: T,\n     }\n }\n \n-pub fn write_file<T>(text: &StringBuffer,\n-                     filename: &str,\n-                     out: &mut T,\n-                     config: &Config)\n-                     -> Result<Option<String>, io::Error>\n+fn write_file<T>(text: &StringBuffer,\n+                 filename: &str,\n+                 out: &mut T,\n+                 config: &Config)\n+                 -> Result<Option<String>, io::Error>\n     where T: Write\n {\n "}, {"sha": "42c5c7a589587490e195fe8002eb5afc6d6bfdbf", "filename": "src/lib.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/84fb2f402e92976c34c4a60cab5b918d377388fb/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fb2f402e92976c34c4a60cab5b918d377388fb/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=84fb2f402e92976c34c4a60cab5b918d377388fb", "patch": "@@ -33,15 +33,15 @@ use syntax::parse::{self, ParseSess};\n \n use std::io::stdout;\n use std::ops::{Add, Sub};\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::rc::Rc;\n use std::collections::HashMap;\n use std::fmt;\n \n use issues::{BadIssueSeeker, Issue};\n use filemap::FileMap;\n use visitor::FmtVisitor;\n-use config::Config;\n+use config::{Config, WriteMode};\n \n #[macro_use]\n mod utils;\n@@ -428,27 +428,35 @@ pub fn format(file: &Path, config: &Config) -> FileMap {\n     file_map\n }\n \n-pub fn run(file: &Path, config: &Config) {\n-    let mut result = format(file, config);\n+fn format_input(input: Input, config: &Config) -> (FileMap, FormatReport) {\n+    let mut file_map = match input {\n+        Input::File(ref file) => format(file, config),\n+        Input::Text(text) => format_string(text, config),\n+    };\n \n-    print!(\"{}\", fmt_lines(&mut result, config));\n-    let mut out = stdout();\n-    let write_result = filemap::write_all_files(&result, &mut out, config);\n+    let report = fmt_lines(&mut file_map, config);\n+    (file_map, report)\n+}\n \n-    if let Err(msg) = write_result {\n-        println!(\"Error writing files: {}\", msg);\n-    }\n+pub enum Input {\n+    File(PathBuf),\n+    Text(String),\n }\n \n-// Similar to run, but takes an input String instead of a file to format\n-pub fn run_from_stdin(input: String, config: &Config) {\n-    let mut result = format_string(input, config);\n-    fmt_lines(&mut result, config);\n+pub fn run(input: Input, config: &Config) {\n+    let (file_map, report) = format_input(input, config);\n+\n+    let ignore_errors = config.write_mode == WriteMode::Plain;\n+    if !ignore_errors {\n+        print!(\"{}\", report);\n+    }\n \n     let mut out = stdout();\n-    let write_result = filemap::write_file(&result[\"stdin\"], \"stdin\", &mut out, config);\n+    let write_result = filemap::write_all_files(&file_map, &mut out, config);\n \n     if let Err(msg) = write_result {\n-        panic!(\"Error writing to stdout: {}\", msg);\n+        if !ignore_errors {\n+            println!(\"Error writing files: {}\", msg);\n+        }\n     }\n }"}]}