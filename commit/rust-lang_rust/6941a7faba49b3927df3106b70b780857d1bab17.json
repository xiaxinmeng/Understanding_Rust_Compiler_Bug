{"sha": "6941a7faba49b3927df3106b70b780857d1bab17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NDFhN2ZhYmE0OWIzOTI3ZGYzMTA2YjcwYjc4MDg1N2QxYmFiMTc=", "commit": {"author": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-18T07:46:42Z"}, "committer": {"name": "Steffen Lyngbaek", "email": "steffenlyngbaek@gmail.com", "date": "2020-03-19T21:12:00Z"}, "message": "- Exclude Local Scope for BindPats\n- Exclude BindPats with @ or ref\n- Remove outdated test and add one testing for ref", "tree": {"sha": "359d9e1b9902e8d0126c5673f3575cc24d02bf9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/359d9e1b9902e8d0126c5673f3575cc24d02bf9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6941a7faba49b3927df3106b70b780857d1bab17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6941a7faba49b3927df3106b70b780857d1bab17", "html_url": "https://github.com/rust-lang/rust/commit/6941a7faba49b3927df3106b70b780857d1bab17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6941a7faba49b3927df3106b70b780857d1bab17/comments", "author": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "slyngbaek", "id": 1216902, "node_id": "MDQ6VXNlcjEyMTY5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1216902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/slyngbaek", "html_url": "https://github.com/slyngbaek", "followers_url": "https://api.github.com/users/slyngbaek/followers", "following_url": "https://api.github.com/users/slyngbaek/following{/other_user}", "gists_url": "https://api.github.com/users/slyngbaek/gists{/gist_id}", "starred_url": "https://api.github.com/users/slyngbaek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/slyngbaek/subscriptions", "organizations_url": "https://api.github.com/users/slyngbaek/orgs", "repos_url": "https://api.github.com/users/slyngbaek/repos", "events_url": "https://api.github.com/users/slyngbaek/events{/privacy}", "received_events_url": "https://api.github.com/users/slyngbaek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6d6277362366e7ddd2b355d83227041d8b6fa12", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6d6277362366e7ddd2b355d83227041d8b6fa12", "html_url": "https://github.com/rust-lang/rust/commit/b6d6277362366e7ddd2b355d83227041d8b6fa12"}], "stats": {"total": 74, "additions": 16, "deletions": 58}, "files": [{"sha": "6b062108124abcd80e8691a74694d98f1a1ebd50", "filename": "crates/ra_ide/src/completion/complete_scope.rs", "status": "modified", "additions": 12, "deletions": 51, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6941a7faba49b3927df3106b70b780857d1bab17/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6941a7faba49b3927df3106b70b780857d1bab17/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=6941a7faba49b3927df3106b70b780857d1bab17", "patch": "@@ -1,13 +1,17 @@\n //! Completion of names from the current scope, e.g. locals and imported items.\n \n use crate::completion::{CompletionContext, Completions};\n+use hir::ScopeDef;\n \n pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_trivial_path && !ctx.is_pat_binding_and_path {\n         return;\n     }\n \n-    ctx.scope().process_all_names(&mut |name, res| acc.add_resolution(ctx, name.to_string(), &res));\n+    ctx.scope().process_all_names(&mut |name, res| match (ctx.is_pat_binding_and_path, &res) {\n+        (true, ScopeDef::Local(..)) => {}\n+        _ => acc.add_resolution(ctx, name.to_string(), &res),\n+    });\n }\n \n #[cfg(test)]\n@@ -21,53 +25,23 @@ mod tests {\n     }\n \n     #[test]\n-    fn nested_bind_pat_and_path() {\n+    fn bind_pat_and_path_ignore_ref() {\n         assert_debug_snapshot!(\n             do_reference_completion(\n                 r\"\n-                enum First {\n+                enum Enum {\n                     A,\n                     B,\n                 }\n-                enum Second {\n-                    A(First),\n-                    B(First),\n-                }\n-                fn quux(x: Option<Option<Second>>>) {\n+                fn quux(x: Option<Enum>) {\n                     match x {\n                         None => (),\n-                        Some(Some(Second(Fi<|>))) => (),\n+                        Some(ref en<|>) => (),\n                     }\n                 }\n                 \"\n             ),\n-            @r###\"\n-            [\n-                CompletionItem {\n-                    label: \"First\",\n-                    source_range: [363; 365),\n-                    delete: [363; 365),\n-                    insert: \"First\",\n-                    kind: Enum,\n-                },\n-                CompletionItem {\n-                    label: \"Second\",\n-                    source_range: [363; 365),\n-                    delete: [363; 365),\n-                    insert: \"Second\",\n-                    kind: Enum,\n-                },\n-                CompletionItem {\n-                    label: \"quux(\u2026)\",\n-                    source_range: [363; 365),\n-                    delete: [363; 365),\n-                    insert: \"quux(${1:x})$0\",\n-                    kind: Function,\n-                    lookup: \"quux\",\n-                    detail: \"fn quux(x: Option<Option<Second>>)\",\n-                },\n-            ]\n-            \"###\n+            @r###\"[]\"###\n         );\n     }\n \n@@ -83,7 +57,7 @@ mod tests {\n                 fn quux(x: Option<Enum>) {\n                     match x {\n                         None => (),\n-                        Some(en<|>) => (),\n+                        Some(En<|>) => (),\n                     }\n                 }\n                 \"\n@@ -97,13 +71,6 @@ mod tests {\n                     insert: \"Enum\",\n                     kind: Enum,\n                 },\n-                CompletionItem {\n-                    label: \"None\",\n-                    source_range: [231; 233),\n-                    delete: [231; 233),\n-                    insert: \"None\",\n-                    kind: Binding,\n-                },\n                 CompletionItem {\n                     label: \"quux(\u2026)\",\n                     source_range: [231; 233),\n@@ -112,13 +79,7 @@ mod tests {\n                     kind: Function,\n                     lookup: \"quux\",\n                     detail: \"fn quux(x: Option<Enum>)\",\n-                },\n-                CompletionItem {\n-                    label: \"x\",\n-                    source_range: [231; 233),\n-                    delete: [231; 233),\n-                    insert: \"x\",\n-                    kind: Binding,\n+                    trigger_call_info: true,\n                 },\n             ]\n             \"###"}, {"sha": "f9d4154d840f69e5b7d8a432fa9cd07877904a12", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6941a7faba49b3927df3106b70b780857d1bab17/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6941a7faba49b3927df3106b70b780857d1bab17/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=6941a7faba49b3927df3106b70b780857d1bab17", "patch": "@@ -190,19 +190,16 @@ impl<'a> CompletionContext<'a> {\n         // suggest declaration names, see `CompletionKind::Magic`.\n         if let Some(name) = find_node_at_offset::<ast::Name>(&file_with_fake_ident, offset) {\n             if let Some(bind_pat) = name.syntax().ancestors().find_map(ast::BindPat::cast) {\n-                let mut parent = bind_pat.syntax().parent();\n+                let parent = bind_pat.syntax().parent();\n                 if parent.clone().and_then(ast::MatchArm::cast).is_some()\n                     || parent.clone().and_then(ast::Condition::cast).is_some()\n                 {\n                     self.is_pat_binding = true;\n                 }\n \n-                while let Some(_) = parent.clone().and_then(ast::TupleStructPat::cast) {\n-                    parent = parent.and_then(|p| p.parent());\n-                    if parent.clone().and_then(ast::MatchArm::cast).is_some() {\n-                        self.is_pat_binding_and_path = true;\n-                        break;\n-                    }\n+                let bind_pat_string = bind_pat.syntax().to_string();\n+                if !bind_pat_string.contains(\"ref \") && !bind_pat_string.contains(\" @ \") {\n+                    self.is_pat_binding_and_path = true;\n                 }\n             }\n             if is_node::<ast::Param>(name.syntax()) {"}]}