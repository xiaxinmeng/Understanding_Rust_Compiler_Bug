{"sha": "43751e45d90ed3a2f5a9d0208d50125d88af6dfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNzUxZTQ1ZDkwZWQzYTJmNWE5ZDAyMDhkNTAxMjVkODhhZjZkZmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-27T04:44:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-27T04:44:29Z"}, "message": "rustc: Rename llalign_of_real to llalign_of_pref\n\nThis alignment is the \"preferred\" alignment of a type, which is not\nnecessarily the alignment the compiler will use when packing the\ntype into structures - that is the \"ABI\" alignment (in LLVM terms).\n\nOn x86, 64-bit ints have 8-byte preferred alignment, but 4-byte\nABI alignment.", "tree": {"sha": "11d792ab2dee2e701eaf239a0192d98a09279462", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11d792ab2dee2e701eaf239a0192d98a09279462"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43751e45d90ed3a2f5a9d0208d50125d88af6dfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43751e45d90ed3a2f5a9d0208d50125d88af6dfc", "html_url": "https://github.com/rust-lang/rust/commit/43751e45d90ed3a2f5a9d0208d50125d88af6dfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43751e45d90ed3a2f5a9d0208d50125d88af6dfc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c166937608789d3a1ad3d89a8577b9a178c9595", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c166937608789d3a1ad3d89a8577b9a178c9595", "html_url": "https://github.com/rust-lang/rust/commit/3c166937608789d3a1ad3d89a8577b9a178c9595"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "b3166c8bd2625b38cdac73794b1ad7f7f6745bff", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43751e45d90ed3a2f5a9d0208d50125d88af6dfc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43751e45d90ed3a2f5a9d0208d50125d88af6dfc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=43751e45d90ed3a2f5a9d0208d50125d88af6dfc", "patch": "@@ -1896,7 +1896,7 @@ fn make_mono_id(ccx: @crate_ctxt, item: ast::def_id, substs: [ty::t],\n                         !ty::type_needs_drop(ccx.tcx, subst) {\n                     let llty = type_of(ccx, subst);\n                     let size = shape::llsize_of_real(ccx, llty);\n-                    let align = shape::llalign_of_real(ccx, llty);\n+                    let align = shape::llalign_of_pref(ccx, llty);\n                     // Special value for nil to prevent problems with undef\n                     // return pointers.\n                     if size == 1u && ty::type_is_nil(subst) {"}, {"sha": "4f198971cd5b67b52ba99b37bbdcc1b37e45b30a", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43751e45d90ed3a2f5a9d0208d50125d88af6dfc/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43751e45d90ed3a2f5a9d0208d50125d88af6dfc/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=43751e45d90ed3a2f5a9d0208d50125d88af6dfc", "patch": "@@ -282,7 +282,7 @@ fn create_block(cx: block) -> @metadata<block_md> {\n fn size_and_align_of(cx: @crate_ctxt, t: ty::t) -> (int, int) {\n     let llty = type_of::type_of(cx, t);\n     (shape::llsize_of_real(cx, llty) as int,\n-     shape::llalign_of_real(cx, llty) as int)\n+     shape::llalign_of_pref(cx, llty) as int)\n }\n \n fn create_basic_type(cx: @crate_ctxt, t: ty::t, ty: ast::prim_ty, span: span)"}, {"sha": "42e5669ee4eb79141cf8591c64fe4da703dde682", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43751e45d90ed3a2f5a9d0208d50125d88af6dfc/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43751e45d90ed3a2f5a9d0208d50125d88af6dfc/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=43751e45d90ed3a2f5a9d0208d50125d88af6dfc", "patch": "@@ -765,7 +765,7 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::native_item,\n               fcx.llretptr);\n       }\n       \"align_of\" {\n-        Store(bcx, C_uint(ccx, shape::llalign_of_real(ccx, lltp_ty)),\n+        Store(bcx, C_uint(ccx, shape::llalign_of_pref(ccx, lltp_ty)),\n               fcx.llretptr);\n       }\n       \"get_tydesc\" {"}, {"sha": "ffd80bcf7da447a235c8886642bd0e91cf2a43b4", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43751e45d90ed3a2f5a9d0208d50125d88af6dfc/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43751e45d90ed3a2f5a9d0208d50125d88af6dfc/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=43751e45d90ed3a2f5a9d0208d50125d88af6dfc", "patch": "@@ -117,7 +117,7 @@ fn largest_variants(ccx: @crate_ctxt, tag_id: ast::def_id) -> [uint] {\n             } else {\n                 let llty = type_of::type_of(ccx, elem_t);\n                 min_size += llsize_of_real(ccx, llty);\n-                min_align += llalign_of_real(ccx, llty);\n+                min_align += llalign_of_pref(ccx, llty);\n             }\n         }\n \n@@ -190,7 +190,7 @@ fn compute_static_enum_size(ccx: @crate_ctxt, largest_variants: [uint],\n \n         let llty = trans::common::T_struct(lltys);\n         let dp = llsize_of_real(ccx, llty) as u16;\n-        let variant_align = llalign_of_real(ccx, llty) as u8;\n+        let variant_align = llalign_of_pref(ccx, llty) as u8;\n \n         if max_size < dp { max_size = dp; }\n         if max_align < variant_align { max_align = variant_align; }\n@@ -202,7 +202,7 @@ fn compute_static_enum_size(ccx: @crate_ctxt, largest_variants: [uint],\n     if vec::len(*variants) > 1u {\n         let variant_t = T_enum_variant(ccx);\n         max_size += llsize_of_real(ccx, variant_t) as u16;\n-        let align = llalign_of_real(ccx, variant_t) as u8;\n+        let align = llalign_of_pref(ccx, variant_t) as u8;\n         if max_align < align { max_align = align; }\n     }\n \n@@ -630,8 +630,10 @@ fn llsize_of_real(cx: @crate_ctxt, t: TypeRef) -> uint {\n     ret llvm::LLVMStoreSizeOfType(cx.td.lltd, t) as uint;\n }\n \n-// Returns the real alignment of the given type for the current target.\n-fn llalign_of_real(cx: @crate_ctxt, t: TypeRef) -> uint {\n+// Returns the preferred alignment of the given type for the current target.\n+// The preffered alignment may be larger than the alignment used when\n+// packing the type into structs\n+fn llalign_of_pref(cx: @crate_ctxt, t: TypeRef) -> uint {\n     ret llvm::LLVMPreferredAlignmentOfType(cx.td.lltd, t) as uint;\n }\n "}]}