{"sha": "61f8c3ef27c367558d050122d33674a9a5062584", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZjhjM2VmMjdjMzY3NTU4ZDA1MDEyMmQzMzY3NGE5YTUwNjI1ODQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-20T02:43:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-20T02:43:07Z"}, "message": "Rollup merge of #73452 - matthewjasper:auto-rec, r=nikomatsakis\n\nUnify region variables when projecting associated types\n\nThis is required to avoid cycles when evaluating auto trait predicates.\nNotably, this is required to be able add Chalk types to `CtxtInterners` for `cfg(parallel_compiler)`.\n\nr? @nikomatsakis", "tree": {"sha": "2c880c14c2a7ae0306c279416772db69c9f45d78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c880c14c2a7ae0306c279416772db69c9f45d78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61f8c3ef27c367558d050122d33674a9a5062584", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7Xe8CRBK7hj4Ov3rIwAAdHIIABw/BAJHBMv76I7O+uJ4R5Ek\ncQgr0Gqi63z6pYrWPXdZbe6AbwUb1yZT1juuUiO1gNwFWrD9999IR2aOZBB7lXTu\n0P/KG/xpyMUkZYr/hZolrPZqovSZBMYubU3LgQQIt2eC390dcrD57vocyO+aN1xX\nq1qAIZcXm4wz5P0hwC0amYYahmY1fzqAgyavFTt7dI5ot8JRa6MhiW1TBopwM1Pj\ncdpLVuJ5tZrlGGTyToWC7d6Gefn5IM++kAowxmsM+HUf+22mzUqt2kaS7qsvCjF9\nCiNl3UmnWdHAV+BAZnSnsd8wGfFmRN9c3TzLo4vvYQgWcUC0rHy/enTauwkmKaM=\n=w03Z\n-----END PGP SIGNATURE-----\n", "payload": "tree 2c880c14c2a7ae0306c279416772db69c9f45d78\nparent db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9\nparent aa117047f05bba9b6838a773a64aaa8f04f51208\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592620987 -0700\ncommitter GitHub <noreply@github.com> 1592620987 -0700\n\nRollup merge of #73452 - matthewjasper:auto-rec, r=nikomatsakis\n\nUnify region variables when projecting associated types\n\nThis is required to avoid cycles when evaluating auto trait predicates.\nNotably, this is required to be able add Chalk types to `CtxtInterners` for `cfg(parallel_compiler)`.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61f8c3ef27c367558d050122d33674a9a5062584", "html_url": "https://github.com/rust-lang/rust/commit/61f8c3ef27c367558d050122d33674a9a5062584", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61f8c3ef27c367558d050122d33674a9a5062584/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9", "html_url": "https://github.com/rust-lang/rust/commit/db7203d6f82e277ba1cedfd78730b1f6ab0f2ba9"}, {"sha": "aa117047f05bba9b6838a773a64aaa8f04f51208", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa117047f05bba9b6838a773a64aaa8f04f51208", "html_url": "https://github.com/rust-lang/rust/commit/aa117047f05bba9b6838a773a64aaa8f04f51208"}], "stats": {"total": 204, "additions": 169, "deletions": 35}, "files": [{"sha": "2dc803b959533da68c74b26f9d0cfe64c5bb9140", "filename": "src/librustc_infer/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "patch": "@@ -314,18 +314,19 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             }\n \n             ty::ReVar(vid) => {\n-                let r = self\n+                let resolved_vid = self\n                     .infcx\n                     .unwrap()\n                     .inner\n                     .borrow_mut()\n                     .unwrap_region_constraints()\n-                    .opportunistic_resolve_var(self.tcx, vid);\n+                    .opportunistic_resolve_var(vid);\n                 debug!(\n                     \"canonical: region var found with vid {:?}, \\\n                      opportunistically resolved to {:?}\",\n                     vid, r\n                 );\n+                let r = self.tcx.reuse_or_mk_region(r, ty::ReVar(resolved_vid));\n                 self.canonicalize_region_mode.canonicalize_free_region(self, r)\n             }\n "}, {"sha": "90d61a78f9b9996e5124a18d5c6a645b236371ac", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "patch": "@@ -50,10 +50,10 @@ pub struct RegionConstraintStorage<'tcx> {\n     /// R1 <= R2 and R2 <= R1 and (b) we unify the two regions in this\n     /// table. You can then call `opportunistic_resolve_var` early\n     /// which will map R1 and R2 to some common region (i.e., either\n-    /// R1 or R2). This is important when dropck and other such code\n-    /// is iterating to a fixed point, because otherwise we sometimes\n-    /// would wind up with a fresh stream of region variables that\n-    /// have been equated but appear distinct.\n+    /// R1 or R2). This is important when fulfillment, dropck and other such\n+    /// code is iterating to a fixed point, because otherwise we sometimes\n+    /// would wind up with a fresh stream of region variables that have been\n+    /// equated but appear distinct.\n     pub(super) unification_table: ut::UnificationTableStorage<ty::RegionVid>,\n \n     /// a flag set to true when we perform any unifications; this is used\n@@ -714,13 +714,8 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         }\n     }\n \n-    pub fn opportunistic_resolve_var(\n-        &mut self,\n-        tcx: TyCtxt<'tcx>,\n-        rid: RegionVid,\n-    ) -> ty::Region<'tcx> {\n-        let vid = self.unification_table().probe_value(rid).min_vid;\n-        tcx.mk_region(ty::ReVar(vid))\n+    pub fn opportunistic_resolve_var(&mut self, rid: RegionVid) -> ty::RegionVid {\n+        self.unification_table().probe_value(rid).min_vid\n     }\n \n     fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {"}, {"sha": "74f365ced2373e8fdaca01cc099fc34905bf112e", "filename": "src/librustc_infer/infer/resolve.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fresolve.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "patch": "@@ -46,51 +46,56 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n     }\n }\n \n-/// The opportunistic type and region resolver is similar to the\n-/// opportunistic type resolver, but also opportunistically resolves\n-/// regions. It is useful for canonicalization.\n-pub struct OpportunisticTypeAndRegionResolver<'a, 'tcx> {\n+/// The opportunistic region resolver opportunistically resolves regions\n+/// variables to the variable with the least variable id. It is used when\n+/// normlizing projections to avoid hitting the recursion limit by creating\n+/// many versions of a predicate for types that in the end have to unify.\n+///\n+/// If you want to resolve type and const variables as well, call\n+/// [InferCtxt::resolve_vars_if_possible] first.\n+pub struct OpportunisticRegionResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx> OpportunisticTypeAndRegionResolver<'a, 'tcx> {\n+impl<'a, 'tcx> OpportunisticRegionResolver<'a, 'tcx> {\n     pub fn new(infcx: &'a InferCtxt<'a, 'tcx>) -> Self {\n-        OpportunisticTypeAndRegionResolver { infcx }\n+        OpportunisticRegionResolver { infcx }\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticTypeAndRegionResolver<'a, 'tcx> {\n+impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if !t.needs_infer() {\n+        if !t.has_infer_regions() {\n             t // micro-optimize -- if there is nothing in this type that this fold affects...\n         } else {\n-            let t0 = self.infcx.shallow_resolve(t);\n-            t0.super_fold_with(self)\n+            t.super_fold_with(self)\n         }\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n-            ty::ReVar(rid) => self\n-                .infcx\n-                .inner\n-                .borrow_mut()\n-                .unwrap_region_constraints()\n-                .opportunistic_resolve_var(self.tcx(), rid),\n+            ty::ReVar(rid) => {\n+                let resolved = self\n+                    .infcx\n+                    .inner\n+                    .borrow_mut()\n+                    .unwrap_region_constraints()\n+                    .opportunistic_resolve_var(rid);\n+                self.tcx().reuse_or_mk_region(r, ty::ReVar(resolved))\n+            }\n             _ => r,\n         }\n     }\n \n     fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if !ct.needs_infer() {\n+        if !ct.has_infer_regions() {\n             ct // micro-optimize -- if there is nothing in this const that this fold affects...\n         } else {\n-            let c0 = self.infcx.shallow_resolve(ct);\n-            c0.super_fold_with(self)\n+            ct.super_fold_with(self)\n         }\n     }\n }"}, {"sha": "6380f8be98d138598f12de75fe59521af48d9ac7", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "patch": "@@ -2110,6 +2110,13 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n+    /// Same a `self.mk_region(kind)`, but avoids accessing the interners if\n+    /// `*r == kind`.\n+    #[inline]\n+    pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {\n+        if *r == kind { r } else { self.mk_region(kind) }\n+    }\n+\n     #[allow(rustc::usage_of_ty_tykind)]\n     #[inline]\n     pub fn mk_ty(&self, st: TyKind<'tcx>) -> Ty<'tcx> {"}, {"sha": "24dbf7b8c46719694ac08d863d293d91fb2c0723", "filename": "src/librustc_middle/ty/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Flibrustc_middle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Flibrustc_middle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ffold.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "patch": "@@ -87,6 +87,9 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn has_param_types_or_consts(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)\n     }\n+    fn has_infer_regions(&self) -> bool {\n+        self.has_type_flags(TypeFlags::HAS_RE_INFER)\n+    }\n     fn has_infer_types(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_INFER)\n     }"}, {"sha": "706e68698eb5575fb6ae28b52723fb47844e835b", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "patch": "@@ -24,6 +24,7 @@ use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::{FnOnceTraitLangItem, GeneratorTraitLangItem};\n+use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::util::IntTypeExt;\n@@ -1146,7 +1147,7 @@ fn confirm_candidate<'cx, 'tcx>(\n ) -> Progress<'tcx> {\n     debug!(\"confirm_candidate(candidate={:?}, obligation={:?})\", candidate, obligation);\n \n-    match candidate {\n+    let mut progress = match candidate {\n         ProjectionTyCandidate::ParamEnv(poly_projection)\n         | ProjectionTyCandidate::TraitDef(poly_projection) => {\n             confirm_param_env_candidate(selcx, obligation, poly_projection)\n@@ -1155,7 +1156,16 @@ fn confirm_candidate<'cx, 'tcx>(\n         ProjectionTyCandidate::Select(impl_source) => {\n             confirm_select_candidate(selcx, obligation, obligation_trait_ref, impl_source)\n         }\n+    };\n+    // When checking for cycle during evaluation, we compare predicates with\n+    // \"syntactic\" equality. Since normalization generally introduces a type\n+    // with new region variables, we need to resolve them to existing variables\n+    // when possible for this to work. See `auto-trait-projection-recursion.rs`\n+    // for a case where this matters.\n+    if progress.ty.has_infer_regions() {\n+        progress.ty = OpportunisticRegionResolver::new(selcx.infcx()).fold_ty(progress.ty);\n     }\n+    progress\n }\n \n fn confirm_select_candidate<'cx, 'tcx>("}, {"sha": "546b3e07793e15982bdbf9282ecf66b49c4b3eea", "filename": "src/test/rustdoc/synthetic_auto/overflow.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Foverflow.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "patch": "@@ -0,0 +1,35 @@\n+// Tests that we don't fail with an overflow error for certain\n+// strange types\n+// See https://github.com/rust-lang/rust/pull/72936#issuecomment-643676915\n+\n+pub trait Interner {\n+    type InternedType;\n+}\n+\n+struct RustInterner<'tcx> {\n+    foo: &'tcx ()\n+}\n+\n+impl<'tcx> Interner for RustInterner<'tcx> {\n+    type InternedType = Box<TyData<Self>>;\n+}\n+\n+enum TyData<I: Interner> {\n+    FnDef(I::InternedType)\n+}\n+\n+struct VariableKind<I: Interner>(I::InternedType);\n+\n+// @has overflow/struct.BoundVarsCollector.html\n+// @has - '//code' \"impl<'tcx> Send for BoundVarsCollector<'tcx>\"\n+pub struct BoundVarsCollector<'tcx> {\n+    val: VariableKind<RustInterner<'tcx>>\n+}\n+\n+fn is_send<T: Send>() {}\n+\n+struct MyInterner<'tcx> {\n+    val: &'tcx ()\n+}\n+\n+fn main() {}"}, {"sha": "0a05fc6bb82863f5bdaf43c410f92cc3d054ee34", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.stderr?ref=61f8c3ef27c367558d050122d33674a9a5062584", "patch": "@@ -1,8 +1,8 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/project-fn-ret-invariant.rs:48:8\n+  --> $DIR/project-fn-ret-invariant.rs:48:4\n    |\n LL |    bar(foo, x)\n-   |        ^^^\n+   |    ^^^^^^^^^^^\n    |\n note: first, the lifetime cannot outlive the lifetime `'a` as defined on the function body at 44:8...\n   --> $DIR/project-fn-ret-invariant.rs:44:8"}, {"sha": "a2ddd5374c08bdb01c08b72ee28b6c23a7252211", "filename": "src/test/ui/auto-traits/auto-is-contextual.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fauto-is-contextual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fauto-is-contextual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-is-contextual.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/auto-is-contextual.rs"}, {"sha": "a36f26f02e9f46ed8df2b46784a69d7823211ee3", "filename": "src/test/ui/auto-traits/auto-trait-projection-recursion.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-projection-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-projection-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-projection-recursion.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "patch": "@@ -0,0 +1,34 @@\n+// Checking the `Send` bound in `main` requires:\n+//\n+// checking             <C<'static> as Y>::P: Send\n+// which normalizes to  Box<X<C<'?1>>>: Send\n+// which needs          X<C<'?1>>: Send\n+// which needs          <C<'?1> as Y>::P: Send\n+//\n+// At this point we used to normalize the predicate to `Box<X<C<'?2>>>: Send`\n+// and continue in a loop where we created new region variables to the\n+// recursion limit. To avoid this we now \"canonicalize\" region variables to\n+// lowest unified region vid. This means we instead have to prove\n+// `Box<X<C<'?1>>>: Send`, which we can because auto traits are coinductive.\n+\n+// check-pass\n+\n+// Avoid a really long error message if this regresses.\n+#![recursion_limit=\"20\"]\n+\n+trait Y {\n+    type P;\n+}\n+\n+impl<'a> Y for C<'a> {\n+    type P = Box<X<C<'a>>>;\n+}\n+\n+struct C<'a>(&'a ());\n+struct X<T: Y>(T::P);\n+\n+fn is_send<S: Send>() {}\n+\n+fn main() {\n+    is_send::<X<C<'static>>>();\n+}"}, {"sha": "34d6c3da00ee3308486f6aebcfa127ea1837b591", "filename": "src/test/ui/auto-traits/auto-trait-validation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/auto-trait-validation.rs"}, {"sha": "4040e66c6af776f65aa5f99e5a0f5fafd9504761", "filename": "src/test/ui/auto-traits/auto-trait-validation.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-trait-validation.stderr?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/auto-trait-validation.stderr"}, {"sha": "15fdddc5f3f5c3b779de91a6e2df28ade5d9bee8", "filename": "src/test/ui/auto-traits/auto-traits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fauto-traits.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/traits/auto-traits.rs"}, {"sha": "7f6b9e3fba79fc1703d571295d205bb1aa4d86af", "filename": "src/test/ui/auto-traits/issue-23080-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/issues/issue-23080-2.rs"}, {"sha": "48ce09aaa34dab455295b3a818e6c39a5c8199f0", "filename": "src/test/ui/auto-traits/issue-23080-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080-2.stderr?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/issues/issue-23080-2.stderr"}, {"sha": "035db82ba5de0df26ec58513fda41d04993525f8", "filename": "src/test/ui/auto-traits/issue-23080.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/issues/issue-23080.rs"}, {"sha": "73ecb1c362e1767941666d9f25c736271f4b915b", "filename": "src/test/ui/auto-traits/issue-23080.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Fissue-23080.stderr?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/issues/issue-23080.stderr"}, {"sha": "8824a6d2767f74cc76ade01e05d7e42276651799", "filename": "src/test/ui/auto-traits/typeck-auto-trait-no-supertraits-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits-2.rs"}, {"sha": "63b3300f6dbf4d1ed641bd9dbbbba9fcdfdd8e94", "filename": "src/test/ui/auto-traits/typeck-auto-trait-no-supertraits-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits-2.stderr?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits-2.stderr"}, {"sha": "edbca9151248672a02a63bfb50170fb44ee57c6a", "filename": "src/test/ui/auto-traits/typeck-auto-trait-no-supertraits.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits.rs"}, {"sha": "796638fc54dce7651c5f8583988d2223a4b223c4", "filename": "src/test/ui/auto-traits/typeck-auto-trait-no-supertraits.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-auto-trait-no-supertraits.stderr?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits.stderr"}, {"sha": "71ac2b466c10a191ee0dfff89bdc9970a25ae475", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types-2.rs"}, {"sha": "53ba9b8a3f6b4d6bb6f4fc68df651692c9fa4709", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types-2.stderr"}, {"sha": "6483b9213dc5303f4dfb68caf1339a7a3b2aa39d", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types.rs"}, {"sha": "bc5000049846362e2e770323ca2034d44b57a761", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.stderr?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types.stderr"}, {"sha": "47cab60625dce59c6b2593b99cef0c2343f26763", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-negation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-negation.rs"}, {"sha": "76a6994cb009a42dec9e01aad42d280d253aeb00", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-negation.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.stderr?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-negation.stderr"}, {"sha": "614a5ff55b1ed0e95d03d85849c955d87e01bc7d", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-precedence.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-precedence.rs"}, {"sha": "5962d191292889c3a34fd4509c617ca877dc8d99", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-precedence.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr?ref=61f8c3ef27c367558d050122d33674a9a5062584", "previous_filename": "src/test/ui/typeck/typeck-default-trait-impl-precedence.stderr"}, {"sha": "205d50a2ed9ce5bc88a7b0c508536d108da8378d", "filename": "src/test/ui/traits/traits-inductive-overflow-lifetime.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.rs?ref=61f8c3ef27c367558d050122d33674a9a5062584", "patch": "@@ -0,0 +1,30 @@\n+// Test that we don't hit the recursion limit for short cycles involving lifetimes.\n+\n+// Shouldn't hit this, we should realize that we're in a cycle sooner.\n+#![recursion_limit=\"20\"]\n+\n+trait NotAuto {}\n+trait Y {\n+    type P;\n+}\n+\n+impl<'a> Y for C<'a> {\n+    type P = Box<X<C<'a>>>;\n+}\n+\n+struct C<'a>(&'a ());\n+struct X<T: Y>(T::P);\n+\n+impl<T: NotAuto> NotAuto for Box<T> {}\n+impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n+impl<'a> NotAuto for C<'a> {}\n+\n+fn is_send<S: NotAuto>() {}\n+//~^ NOTE: required\n+\n+fn main() {\n+    // Should only be a few notes.\n+    is_send::<X<C<'static>>>();\n+    //~^ ERROR overflow evaluating\n+    //~| NOTE: required\n+}"}, {"sha": "9a227229ea4c2532ca90da09741b0c0b0c6a9460", "filename": "src/test/ui/traits/traits-inductive-overflow-lifetime.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/61f8c3ef27c367558d050122d33674a9a5062584/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-lifetime.stderr?ref=61f8c3ef27c367558d050122d33674a9a5062584", "patch": "@@ -0,0 +1,14 @@\n+error[E0275]: overflow evaluating the requirement `std::boxed::Box<X<C<'_>>>: NotAuto`\n+  --> $DIR/traits-inductive-overflow-lifetime.rs:27:5\n+   |\n+LL | fn is_send<S: NotAuto>() {}\n+   |               ------- required by this bound in `is_send`\n+...\n+LL |     is_send::<X<C<'static>>>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}]}