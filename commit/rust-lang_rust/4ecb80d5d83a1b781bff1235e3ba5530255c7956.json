{"sha": "4ecb80d5d83a1b781bff1235e3ba5530255c7956", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlY2I4MGQ1ZDgzYTFiNzgxYmZmMTIzNWUzYmE1NTMwMjU1Yzc5NTY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-05T05:06:05Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-11T20:14:37Z"}, "message": "Remove trampoline, pass `ret` and `unwind` when handling intrinsics", "tree": {"sha": "cfd899785eb6f388a6db3eb109418cc103dc94cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfd899785eb6f388a6db3eb109418cc103dc94cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ecb80d5d83a1b781bff1235e3ba5530255c7956", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3JwS0ACgkQtAh+UQ6Y\nsWR3jw/+LxUTAI/3+xcyD08/sd4EcKYn98tqR83jbKf1gr170fnQ5Rw9r4hUavc6\nTCXUOqA18jC187mMwQYgKr9RHtfwh9W+Gd4cInhFKb+446RC4ZdfMoBDF5prnRr5\nQ9KK6Ji+V35yTKJlxtGoeuE0wfA5ulywGi/1L5FkGJbeT1olKLEoPlZKHhj1Anei\nYVPc6whaSpI/mXKVmH3cCynbQse8a4YrTlMcrYjjrLxJak/mtVFOKDEWtWnrjKFW\nvBEkuW7yRmB13wudHptYimik00aH3SodBef/Qf9A15rE7r87yQJiNw0RYNNGf/mP\njCpHqImYvqODqu8tvPcjjzWKD9Y3J6AOrxk2lfaacemkonO/W3vPoRSUrrNSCQqH\nZm4iiww44Td/9cP/V7W5OKzEKVuDOHym/VERXEPlf4qfKUAN+DMkflf5uWuWXt6E\nXRNo+gr1M0yOKiMc0IDAunz7dSg+nPf0JQ9Vg5dDBxN45J3HS0OMKpcvXk6IzB90\nFaxAaFG5bGUtq0nQoRW0mHo1STmmw5Xtd1eYBbX+1mbaJjffzASrbgS1cc4UR+jo\nfrEVafhpY6P7RYIs56ywkNTbxBMxUzdMGwZnXiVseAZXBKnx8JhWPj0veZrWwDPH\niDEeiS9zgXA/W5ED3yzo6BYWCdGGVMpabWkkRoOO4R1U8kv0TlY=\n=zXeE\n-----END PGP SIGNATURE-----", "payload": "tree cfd899785eb6f388a6db3eb109418cc103dc94cc\nparent 607339f66a5883ae1c6d24d81a1e7a97c9a4298c\nauthor Aaron Hill <aa1ronham@gmail.com> 1572930365 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1573503277 -0500\n\nRemove trampoline, pass `ret` and `unwind` when handling intrinsics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecb80d5d83a1b781bff1235e3ba5530255c7956", "html_url": "https://github.com/rust-lang/rust/commit/4ecb80d5d83a1b781bff1235e3ba5530255c7956", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ecb80d5d83a1b781bff1235e3ba5530255c7956/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "607339f66a5883ae1c6d24d81a1e7a97c9a4298c", "url": "https://api.github.com/repos/rust-lang/rust/commits/607339f66a5883ae1c6d24d81a1e7a97c9a4298c", "html_url": "https://github.com/rust-lang/rust/commit/607339f66a5883ae1c6d24d81a1e7a97c9a4298c"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "4c6c728f6f7d4e2c00ba3c6dfd141dab49d777f2", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ecb80d5d83a1b781bff1235e3ba5530255c7956/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecb80d5d83a1b781bff1235e3ba5530255c7956/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=4ecb80d5d83a1b781bff1235e3ba5530255c7956", "patch": "@@ -39,9 +39,6 @@ cfg_if::cfg_if! {\n     if #[cfg(miri)] {\n         #[path = \"miri.rs\"]\n         mod imp;\n-        // Export this at the root of the crate so that Miri\n-        // has a stable palce to look it up\n-        pub use imp::miri_panic_trampoline;\n     } else if #[cfg(target_os = \"emscripten\")] {\n         #[path = \"emcc.rs\"]\n         mod imp;"}, {"sha": "254a9383b42236ee616f24e75e040ebaa045969f", "filename": "src/libpanic_unwind/miri.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ecb80d5d83a1b781bff1235e3ba5530255c7956/src%2Flibpanic_unwind%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecb80d5d83a1b781bff1235e3ba5530255c7956/src%2Flibpanic_unwind%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fmiri.rs?ref=4ecb80d5d83a1b781bff1235e3ba5530255c7956", "patch": "@@ -21,8 +21,3 @@ pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {\n fn rust_eh_personality() {\n     unsafe { core::intrinsics::abort() }\n }\n-\n-// A dummy helper function for Miri.\n-// Used to push an empty stack frame when we start unwinding\n-#[cfg(miri)]\n-pub fn miri_panic_trampoline() {}"}, {"sha": "e2d5eec6502e53d0346b728b0a65bdba859a8949", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ecb80d5d83a1b781bff1235e3ba5530255c7956/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecb80d5d83a1b781bff1235e3ba5530255c7956/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=4ecb80d5d83a1b781bff1235e3ba5530255c7956", "patch": "@@ -376,6 +376,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx>],\n         dest: Option<PlaceTy<'tcx>>,\n+        _ret: Option<mir::BasicBlock>,\n+        _unwind: Option<mir::BasicBlock>\n     ) -> InterpResult<'tcx> {\n         if ecx.emulate_intrinsic(span, instance, args, dest)? {\n             return Ok(());"}, {"sha": "92358ad247e1821832cce1b2de12d16464687720", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4ecb80d5d83a1b781bff1235e3ba5530255c7956/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecb80d5d83a1b781bff1235e3ba5530255c7956/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=4ecb80d5d83a1b781bff1235e3ba5530255c7956", "patch": "@@ -585,21 +585,17 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             \"tried to pop a stack frame, but there were none\",\n         );\n         let stack_pop_info = M::stack_pop(self, frame.extra, unwinding)?;\n-        match (unwinding, stack_pop_info) {\n-            (true, StackPopInfo::StartUnwinding) =>\n-                bug!(\"Attempted to start unwinding while already unwinding!\"),\n-            (false, StackPopInfo::StopUnwinding) =>\n-                bug!(\"Attempted to stop unwinding while there is no unwinding!\"),\n-            _ => {}\n+        if let (false, StackPopInfo::StopUnwinding) = (unwinding, stack_pop_info) {\n+            bug!(\"Attempted to stop unwinding while there is no unwinding!\");\n         }\n \n         // Now where do we jump next?\n \n         // Determine if we leave this function normally or via unwinding.\n-        let cur_unwinding = match stack_pop_info {\n-            StackPopInfo::StartUnwinding => true,\n-            StackPopInfo::StopUnwinding => false,\n-            _ => unwinding\n+        let cur_unwinding = if let StackPopInfo::StopUnwinding = stack_pop_info {\n+            false\n+        } else {\n+            unwinding\n         };\n \n         // Usually we want to clean up (deallocate locals), but in a few rare cases we don't."}, {"sha": "0ddd0962ba54423b0d5c319ef424ca8c83baee0a", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ecb80d5d83a1b781bff1235e3ba5530255c7956/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecb80d5d83a1b781bff1235e3ba5530255c7956/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=4ecb80d5d83a1b781bff1235e3ba5530255c7956", "patch": "@@ -20,10 +20,6 @@ use super::{\n /// to provide further control over the popping of the stack frame\n #[derive(Eq, PartialEq, Debug, Copy, Clone)]\n pub enum StackPopInfo {\n-    /// Indicates that we have just started unwinding\n-    /// as the result of panic\n-    StartUnwinding,\n-\n     /// Indicates that no special handling should be\n     /// done - we'll either return normally or unwind\n     /// based on the terminator for the function\n@@ -177,6 +173,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Self::PointerTag>],\n         dest: Option<PlaceTy<'tcx, Self::PointerTag>>,\n+        ret: Option<mir::BasicBlock>,\n+        unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx>;\n \n     /// Called for read access to a foreign static item."}, {"sha": "f1e1c98e44eb491684807bf541a72c3def5b9033", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ecb80d5d83a1b781bff1235e3ba5530255c7956/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecb80d5d83a1b781bff1235e3ba5530255c7956/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=4ecb80d5d83a1b781bff1235e3ba5530255c7956", "patch": "@@ -265,7 +265,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n                 let old_stack = self.cur_frame();\n-                M::call_intrinsic(self, span, instance, args, dest)?;\n+                M::call_intrinsic(self, span, instance, args, dest, ret, unwind)?;\n                 // No stack frame gets pushed, the main loop will just act as if the\n                 // call completed.\n                 if ret.is_some() {"}, {"sha": "2ede43e2111ed164a5f39422f3eda3f9e7bc3f72", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ecb80d5d83a1b781bff1235e3ba5530255c7956/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ecb80d5d83a1b781bff1235e3ba5530255c7956/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=4ecb80d5d83a1b781bff1235e3ba5530255c7956", "patch": "@@ -164,6 +164,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         _instance: ty::Instance<'tcx>,\n         _args: &[OpTy<'tcx>],\n         _dest: Option<PlaceTy<'tcx>>,\n+        _ret: Option<BasicBlock>,\n+        _unwind: Option<BasicBlock>\n     ) -> InterpResult<'tcx> {\n         throw_unsup_format!(\"calling intrinsics isn't supported in ConstProp\");\n     }"}]}