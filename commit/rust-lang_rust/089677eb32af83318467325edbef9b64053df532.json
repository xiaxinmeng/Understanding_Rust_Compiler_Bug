{"sha": "089677eb32af83318467325edbef9b64053df532", "node_id": "C_kwDOAAsO6NoAKDA4OTY3N2ViMzJhZjgzMzE4NDY3MzI1ZWRiZWY5YjY0MDUzZGY1MzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-28T21:53:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-28T21:53:56Z"}, "message": "Auto merge of #111813 - scottmcm:pretty-mir, r=cjgillot\n\nMIR: opt-in normalization of `BasicBlock` and `Local` numbering\n\nThis doesn't matter at all for actual codegen, but after spending some time reading pre-codegen MIR, I was wishing I didn't have to jump around so much in reading post-inlining code.\n\nSo this add two passes that are off by default for every mir level, but can be enabled (`-Zmir-enable-passes=+ReorderBasicBlocks,+ReorderLocals`) for humans.", "tree": {"sha": "d1863fbc8e15a88e528495262199fab40bdc17c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1863fbc8e15a88e528495262199fab40bdc17c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/089677eb32af83318467325edbef9b64053df532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/089677eb32af83318467325edbef9b64053df532", "html_url": "https://github.com/rust-lang/rust/commit/089677eb32af83318467325edbef9b64053df532", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/089677eb32af83318467325edbef9b64053df532/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c53407e8c7cc922d718bde61ca34f47b6d2120f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c53407e8c7cc922d718bde61ca34f47b6d2120f", "html_url": "https://github.com/rust-lang/rust/commit/1c53407e8c7cc922d718bde61ca34f47b6d2120f"}, {"sha": "d69725d5d5173e6c6fc20873f306cbd66fa963e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d69725d5d5173e6c6fc20873f306cbd66fa963e7", "html_url": "https://github.com/rust-lang/rust/commit/d69725d5d5173e6c6fc20873f306cbd66fa963e7"}], "stats": {"total": 1698, "additions": 927, "deletions": 771}, "files": [{"sha": "561ef371b09048c413cd5442a89b4d5387540797", "filename": "compiler/rustc_middle/src/mir/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator.rs?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -105,7 +105,7 @@ pub struct Terminator<'tcx> {\n     pub kind: TerminatorKind<'tcx>,\n }\n \n-pub type Successors<'a> = impl Iterator<Item = BasicBlock> + 'a;\n+pub type Successors<'a> = impl DoubleEndedIterator<Item = BasicBlock> + 'a;\n pub type SuccessorsMut<'a> =\n     iter::Chain<std::option::IntoIter<&'a mut BasicBlock>, slice::IterMut<'a, BasicBlock>>;\n "}, {"sha": "99ead14139aec1e6441268ec3abeaf08e7b46bf8", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n         //      B     C\n         //      |     |\n         //      |     |\n-        //      D     |\n+        //      |     D\n         //       \\   /\n         //        \\ /\n         //         E\n@@ -159,26 +159,26 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n         //\n         // When the first call to `traverse_successor` happens, the following happens:\n         //\n-        //     [(B, [D]),  // `B` taken from the successors of `A`, pushed to the\n-        //                 // top of the stack along with the successors of `B`\n-        //      (A, [C])]\n+        //     [(C, [D]),  // `C` taken from the successors of `A`, pushed to the\n+        //                 // top of the stack along with the successors of `C`\n+        //      (A, [B])]\n         //\n-        //     [(D, [E]),  // `D` taken from successors of `B`, pushed to stack\n-        //      (B, []),\n-        //      (A, [C])]\n+        //     [(D, [E]),  // `D` taken from successors of `C`, pushed to stack\n+        //      (C, []),\n+        //      (A, [B])]\n         //\n         //     [(E, []),   // `E` taken from successors of `D`, pushed to stack\n         //      (D, []),\n-        //      (B, []),\n-        //      (A, [C])]\n+        //      (C, []),\n+        //      (A, [B])]\n         //\n         // Now that the top of the stack has no successors we can traverse, each item will\n-        // be popped off during iteration until we get back to `A`. This yields [E, D, B].\n+        // be popped off during iteration until we get back to `A`. This yields [E, D, C].\n         //\n-        // When we yield `B` and call `traverse_successor`, we push `C` to the stack, but\n+        // When we yield `C` and call `traverse_successor`, we push `B` to the stack, but\n         // since we've already visited `E`, that child isn't added to the stack. The last\n-        // two iterations yield `C` and finally `A` for a final traversal of [E, D, B, C, A]\n-        while let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() && let Some(bb) = iter.next() {\n+        // two iterations yield `B` and finally `A` for a final traversal of [E, D, C, B, A]\n+        while let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() && let Some(bb) = iter.next_back() {\n             if self.visited.insert(bb) {\n                 if let Some(term) = &self.basic_blocks[bb].terminator {\n                     self.visit_stack.push((bb, term.successors()));"}, {"sha": "54c138b6fbd4cf481957c72216359ac07dba95e4", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -3,6 +3,7 @@\n #![deny(rustc::diagnostic_outside_of_impl)]\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n+#![feature(is_sorted)]\n #![feature(let_chains)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]\n@@ -84,6 +85,7 @@ mod match_branches;\n mod multiple_return_terminators;\n mod normalize_array_len;\n mod nrvo;\n+mod prettify;\n mod ref_prop;\n mod remove_noop_landing_pads;\n mod remove_storage_markers;\n@@ -581,6 +583,9 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &large_enums::EnumSizeOpt { discrepancy: 128 },\n             // Some cleanup necessary at least for LLVM and potentially other codegen backends.\n             &add_call_guards::CriticalCallEdges,\n+            // Cleanup for human readability, off by default.\n+            &prettify::ReorderBasicBlocks,\n+            &prettify::ReorderLocals,\n             // Dump the end result for testing and debugging purposes.\n             &dump_mir::Marker(\"PreCodegen\"),\n         ],"}, {"sha": "6f46974ea0053eb049442ecf90b8c936a9386306", "filename": "compiler/rustc_mir_transform/src/prettify.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/compiler%2Frustc_mir_transform%2Fsrc%2Fprettify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/compiler%2Frustc_mir_transform%2Fsrc%2Fprettify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fprettify.rs?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -0,0 +1,150 @@\n+//! These two passes provide no value to the compiler, so are off at every level.\n+//!\n+//! However, they can be enabled on the command line\n+//! (`-Zmir-enable-passes=+ReorderBasicBlocks,+ReorderLocals`)\n+//! to make the MIR easier to read for humans.\n+\n+use crate::MirPass;\n+use rustc_index::{bit_set::BitSet, IndexSlice, IndexVec};\n+use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::TyCtxt;\n+use rustc_session::Session;\n+\n+/// Rearranges the basic blocks into a *reverse post-order*.\n+///\n+/// Thus after this pass, all the successors of a block are later than it in the\n+/// `IndexVec`, unless that successor is a back-edge (such as from a loop).\n+pub struct ReorderBasicBlocks;\n+\n+impl<'tcx> MirPass<'tcx> for ReorderBasicBlocks {\n+    fn is_enabled(&self, _session: &Session) -> bool {\n+        false\n+    }\n+\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        let rpo: IndexVec<BasicBlock, BasicBlock> =\n+            body.basic_blocks.postorder().iter().copied().rev().collect();\n+        if rpo.iter().is_sorted() {\n+            return;\n+        }\n+\n+        let mut updater = BasicBlockUpdater { map: rpo.invert_bijective_mapping(), tcx };\n+        debug_assert_eq!(updater.map[START_BLOCK], START_BLOCK);\n+        updater.visit_body(body);\n+\n+        permute(body.basic_blocks.as_mut(), &updater.map);\n+    }\n+}\n+\n+/// Rearranges the locals into *use* order.\n+///\n+/// Thus after this pass, a local with a smaller [`Location`] where it was first\n+/// assigned or referenced will have a smaller number.\n+///\n+/// (Does not reorder arguments nor the [`RETURN_PLACE`].)\n+pub struct ReorderLocals;\n+\n+impl<'tcx> MirPass<'tcx> for ReorderLocals {\n+    fn is_enabled(&self, _session: &Session) -> bool {\n+        false\n+    }\n+\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        let mut finder =\n+            LocalFinder { map: IndexVec::new(), seen: BitSet::new_empty(body.local_decls.len()) };\n+\n+        // We can't reorder the return place or the arguments\n+        for local in (0..=body.arg_count).map(Local::from_usize) {\n+            finder.track(local);\n+        }\n+\n+        for (bb, bbd) in body.basic_blocks.iter_enumerated() {\n+            finder.visit_basic_block_data(bb, bbd);\n+        }\n+\n+        // track everything in case there are some locals that we never saw,\n+        // such as in non-block things like debug info or in non-uses.\n+        for local in body.local_decls.indices() {\n+            finder.track(local);\n+        }\n+\n+        if finder.map.iter().is_sorted() {\n+            return;\n+        }\n+\n+        let mut updater = LocalUpdater { map: finder.map.invert_bijective_mapping(), tcx };\n+\n+        for local in (0..=body.arg_count).map(Local::from_usize) {\n+            debug_assert_eq!(updater.map[local], local);\n+        }\n+\n+        updater.visit_body_preserves_cfg(body);\n+\n+        permute(&mut body.local_decls, &updater.map);\n+    }\n+}\n+\n+fn permute<I: rustc_index::Idx + Ord, T>(data: &mut IndexVec<I, T>, map: &IndexSlice<I, I>) {\n+    // FIXME: It would be nice to have a less-awkward way to apply permutations,\n+    // but I don't know one that exists.  `sort_by_cached_key` has logic for it\n+    // internally, but not in a way that we're allowed to use here.\n+    let mut enumerated: Vec<_> = std::mem::take(data).into_iter_enumerated().collect();\n+    enumerated.sort_by_key(|p| map[p.0]);\n+    *data = enumerated.into_iter().map(|p| p.1).collect();\n+}\n+\n+struct BasicBlockUpdater<'tcx> {\n+    map: IndexVec<BasicBlock, BasicBlock>,\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for BasicBlockUpdater<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn visit_terminator(&mut self, terminator: &mut Terminator<'tcx>, _location: Location) {\n+        for succ in terminator.successors_mut() {\n+            *succ = self.map[*succ];\n+        }\n+    }\n+}\n+\n+struct LocalFinder {\n+    map: IndexVec<Local, Local>,\n+    seen: BitSet<Local>,\n+}\n+\n+impl LocalFinder {\n+    fn track(&mut self, l: Local) {\n+        if self.seen.insert(l) {\n+            self.map.push(l);\n+        }\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for LocalFinder {\n+    fn visit_local(&mut self, l: Local, context: PlaceContext, _location: Location) {\n+        // Exclude non-uses to keep `StorageLive` from controlling where we put\n+        // a `Local`, since it might not actually be assigned until much later.\n+        if context.is_use() {\n+            self.track(l);\n+        }\n+    }\n+}\n+\n+struct LocalUpdater<'tcx> {\n+    pub map: IndexVec<Local, Local>,\n+    pub tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for LocalUpdater<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn visit_local(&mut self, l: &mut Local, _: PlaceContext, _: Location) {\n+        *l = self.map[*l];\n+    }\n+}"}, {"sha": "a799d93ce25c7294721cd13215778192234cc03c", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -2045,7 +2045,10 @@ impl<'test> TestCx<'test> {\n                 if let Some(pass) = &self.props.mir_unit_test {\n                     rustc.args(&[\"-Zmir-opt-level=0\", &format!(\"-Zmir-enable-passes=+{}\", pass)]);\n                 } else {\n-                    rustc.arg(\"-Zmir-opt-level=4\");\n+                    rustc.args(&[\n+                        \"-Zmir-opt-level=4\",\n+                        \"-Zmir-enable-passes=+ReorderBasicBlocks,+ReorderLocals\",\n+                    ]);\n                 }\n \n                 let mir_dump_dir = self.get_mir_dump_dir();"}, {"sha": "bcdb12011bcd5887ae831c9955f1df68125127f2", "filename": "tests/mir-opt/deref-patterns/string.foo.PreCodegen.after.mir", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -3,41 +3,33 @@\n fn foo(_1: Option<String>) -> i32 {\n     debug s => _1;                       // in scope 0 at $DIR/string.rs:+0:12: +0:13\n     let mut _0: i32;                     // return place in scope 0 at $DIR/string.rs:+0:34: +0:37\n-    let mut _2: &std::string::String;    // in scope 0 at $DIR/string.rs:+2:14: +2:17\n-    let mut _3: &str;                    // in scope 0 at $DIR/string.rs:+2:14: +2:17\n-    let mut _4: bool;                    // in scope 0 at $DIR/string.rs:+2:14: +2:17\n-    let mut _5: isize;                   // in scope 0 at $DIR/string.rs:+2:9: +2:18\n-    let _6: std::option::Option<std::string::String>; // in scope 0 at $DIR/string.rs:+3:9: +3:10\n-    let mut _7: bool;                    // in scope 0 at $DIR/string.rs:+5:1: +5:2\n+    let mut _2: bool;                    // in scope 0 at $DIR/string.rs:+5:1: +5:2\n+    let mut _3: isize;                   // in scope 0 at $DIR/string.rs:+2:9: +2:18\n+    let mut _4: &std::string::String;    // in scope 0 at $DIR/string.rs:+2:14: +2:17\n+    let mut _5: &str;                    // in scope 0 at $DIR/string.rs:+2:14: +2:17\n+    let mut _6: bool;                    // in scope 0 at $DIR/string.rs:+2:14: +2:17\n+    let _7: std::option::Option<std::string::String>; // in scope 0 at $DIR/string.rs:+3:9: +3:10\n     scope 1 {\n-        debug s => _6;                   // in scope 1 at $DIR/string.rs:+3:9: +3:10\n+        debug s => _7;                   // in scope 1 at $DIR/string.rs:+3:9: +3:10\n     }\n \n     bb0: {\n-        _7 = const false;                // scope 0 at $DIR/string.rs:+1:11: +1:12\n-        _7 = const true;                 // scope 0 at $DIR/string.rs:+1:11: +1:12\n-        _5 = discriminant(_1);           // scope 0 at $DIR/string.rs:+1:11: +1:12\n-        switchInt(move _5) -> [1: bb2, otherwise: bb1]; // scope 0 at $DIR/string.rs:+1:5: +1:12\n+        _2 = const false;                // scope 0 at $DIR/string.rs:+1:11: +1:12\n+        _2 = const true;                 // scope 0 at $DIR/string.rs:+1:11: +1:12\n+        _3 = discriminant(_1);           // scope 0 at $DIR/string.rs:+1:11: +1:12\n+        switchInt(move _3) -> [1: bb1, otherwise: bb5]; // scope 0 at $DIR/string.rs:+1:5: +1:12\n     }\n \n     bb1: {\n-        StorageLive(_6);                 // scope 0 at $DIR/string.rs:+3:9: +3:10\n-        _7 = const false;                // scope 0 at $DIR/string.rs:+3:9: +3:10\n-        _6 = move _1;                    // scope 0 at $DIR/string.rs:+3:9: +3:10\n-        _0 = const 4321_i32;             // scope 1 at $DIR/string.rs:+3:14: +3:18\n-        drop(_6) -> [return: bb6, unwind unreachable]; // scope 0 at $DIR/string.rs:+3:17: +3:18\n-    }\n-\n-    bb2: {\n-        _2 = &((_1 as Some).0: std::string::String); // scope 0 at $DIR/string.rs:+2:14: +2:17\n-        _3 = <String as Deref>::deref(move _2) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n+        _4 = &((_1 as Some).0: std::string::String); // scope 0 at $DIR/string.rs:+2:14: +2:17\n+        _5 = <String as Deref>::deref(move _4) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n                                          // mir::Constant\n                                          // + span: $DIR/string.rs:9:14: 9:17\n                                          // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }\n     }\n \n-    bb3: {\n-        _4 = <str as PartialEq>::eq(_3, const \"a\") -> [return: bb4, unwind unreachable]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n+    bb2: {\n+        _6 = <str as PartialEq>::eq(_5, const \"a\") -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n                                          // mir::Constant\n                                          // + span: $DIR/string.rs:9:14: 9:17\n                                          // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }\n@@ -46,29 +38,37 @@ fn foo(_1: Option<String>) -> i32 {\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n     }\n \n+    bb3: {\n+        switchInt(move _6) -> [0: bb5, otherwise: bb4]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n+    }\n+\n     bb4: {\n-        switchInt(move _4) -> [0: bb1, otherwise: bb5]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n+        _0 = const 1234_i32;             // scope 0 at $DIR/string.rs:+2:22: +2:26\n+        goto -> bb7;                     // scope 0 at $DIR/string.rs:+2:22: +2:26\n     }\n \n     bb5: {\n-        _0 = const 1234_i32;             // scope 0 at $DIR/string.rs:+2:22: +2:26\n-        goto -> bb9;                     // scope 0 at $DIR/string.rs:+2:22: +2:26\n+        StorageLive(_7);                 // scope 0 at $DIR/string.rs:+3:9: +3:10\n+        _2 = const false;                // scope 0 at $DIR/string.rs:+3:9: +3:10\n+        _7 = move _1;                    // scope 0 at $DIR/string.rs:+3:9: +3:10\n+        _0 = const 4321_i32;             // scope 1 at $DIR/string.rs:+3:14: +3:18\n+        drop(_7) -> [return: bb6, unwind unreachable]; // scope 0 at $DIR/string.rs:+3:17: +3:18\n     }\n \n     bb6: {\n-        StorageDead(_6);                 // scope 0 at $DIR/string.rs:+3:17: +3:18\n-        goto -> bb9;                     // scope 0 at $DIR/string.rs:+3:17: +3:18\n+        StorageDead(_7);                 // scope 0 at $DIR/string.rs:+3:17: +3:18\n+        goto -> bb7;                     // scope 0 at $DIR/string.rs:+3:17: +3:18\n     }\n \n     bb7: {\n-        return;                          // scope 0 at $DIR/string.rs:+5:2: +5:2\n+        switchInt(_2) -> [0: bb9, otherwise: bb8]; // scope 0 at $DIR/string.rs:+5:1: +5:2\n     }\n \n     bb8: {\n-        drop(_1) -> [return: bb7, unwind unreachable]; // scope 0 at $DIR/string.rs:+5:1: +5:2\n+        drop(_1) -> [return: bb9, unwind unreachable]; // scope 0 at $DIR/string.rs:+5:1: +5:2\n     }\n \n     bb9: {\n-        switchInt(_7) -> [0: bb7, otherwise: bb8]; // scope 0 at $DIR/string.rs:+5:1: +5:2\n+        return;                          // scope 0 at $DIR/string.rs:+5:2: +5:2\n     }\n }"}, {"sha": "53bf14a0ab6e92123f3bdd3cd1f3700fa8af38c1", "filename": "tests/mir-opt/inline/cycle.g.Inline.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -8,8 +8,8 @@\n +     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n +     scope 1 (inlined f::<fn() {main}>) { // at $DIR/cycle.rs:12:5: 12:12\n +         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n-+         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         let mut _4: &fn() {main};        // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         let mut _3: &fn() {main};        // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         let _4: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         scope 2 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n +         }\n +     }\n@@ -25,16 +25,16 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:12:7: 12:11\n                                            // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }\n-+         StorageLive(_3);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n-+         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n-+         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         StorageLive(_4);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n++         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         _3 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         _3 = move (*_4)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         _4 = move (*_3)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n++         StorageDead(_4);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n +         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:12\n           StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:+1:12: +1:13\n           _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:8: +2:2\n@@ -51,7 +51,7 @@\n + \n +     bb4: {\n +         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n +         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n       }\n   }"}, {"sha": "fdf6337a9bee6e1648201c163bee3c155f491ebd", "filename": "tests/mir-opt/inline/cycle.main.Inline.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -8,8 +8,8 @@\n +     let mut _5: ();                      // in scope 0 at $DIR/cycle.rs:6:5: 6:8\n +     scope 1 (inlined f::<fn() {g}>) {    // at $DIR/cycle.rs:17:5: 17:9\n +         debug g => _2;                   // in scope 1 at $DIR/cycle.rs:5:6: 5:7\n-+         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         let mut _4: &fn() {g};           // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         let mut _3: &fn() {g};           // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         let _4: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         scope 2 (inlined <fn() {g} as Fn<()>>::call - shim(fn() {g})) { // at $DIR/cycle.rs:6:5: 6:8\n +         }\n +     }\n@@ -25,16 +25,16 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/cycle.rs:17:7: 17:8\n                                            // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }\n-+         StorageLive(_3);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n-+         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n-+         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         StorageLive(_4);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n++         StorageLive(_3);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n++         _3 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         _5 = const ();                   // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         _3 = move (*_4)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         _4 = move (*_3)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n++         StorageDead(_4);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n +         StorageDead(_2);                 // scope 0 at $DIR/cycle.rs:+1:5: +1:9\n           StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:+1:9: +1:10\n           _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:11: +2:2\n@@ -51,7 +51,7 @@\n + \n +     bb4: {\n +         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n +         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n       }\n   }"}, {"sha": "33bf3b73b2372b85a2c59983a4699972e9e5166c", "filename": "tests/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -17,10 +17,10 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n             debug _q => _9;              // in scope 2 at $DIR/inline_closure_captures.rs:+1:14: +1:16\n             debug q => (*((*_6).0: &i32)); // in scope 2 at $DIR/inline_closure_captures.rs:+0:23: +0:24\n             debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline_closure_captures.rs:+0:17: +0:18\n-            let mut _10: i32;            // in scope 2 at $DIR/inline_closure_captures.rs:+1:19: +1:20\n-            let mut _11: T;              // in scope 2 at $DIR/inline_closure_captures.rs:+1:22: +1:23\n-            let mut _12: &i32;           // in scope 2 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n-            let mut _13: &T;             // in scope 2 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n+            let mut _10: &i32;           // in scope 2 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n+            let mut _11: i32;            // in scope 2 at $DIR/inline_closure_captures.rs:+1:19: +1:20\n+            let mut _12: &T;             // in scope 2 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n+            let mut _13: T;              // in scope 2 at $DIR/inline_closure_captures.rs:+1:22: +1:23\n         }\n     }\n \n@@ -49,15 +49,15 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         _7 = (move _8,);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n         StorageLive(_9);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n         _9 = move (_7.0: i32);           // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n-        StorageLive(_10);                // scope 2 at $DIR/inline_closure_captures.rs:+1:19: +1:20\n-        _12 = deref_copy ((*_6).0: &i32); // scope 2 at $DIR/inline_closure_captures.rs:+1:19: +1:20\n-        _10 = (*_12);                    // scope 2 at $DIR/inline_closure_captures.rs:+1:19: +1:20\n-        StorageLive(_11);                // scope 2 at $DIR/inline_closure_captures.rs:+1:22: +1:23\n-        _13 = deref_copy ((*_6).1: &T);  // scope 2 at $DIR/inline_closure_captures.rs:+1:22: +1:23\n-        _11 = (*_13);                    // scope 2 at $DIR/inline_closure_captures.rs:+1:22: +1:23\n-        _0 = (move _10, move _11);       // scope 2 at $DIR/inline_closure_captures.rs:+1:18: +1:24\n+        StorageLive(_11);                // scope 2 at $DIR/inline_closure_captures.rs:+1:19: +1:20\n+        _10 = deref_copy ((*_6).0: &i32); // scope 2 at $DIR/inline_closure_captures.rs:+1:19: +1:20\n+        _11 = (*_10);                    // scope 2 at $DIR/inline_closure_captures.rs:+1:19: +1:20\n+        StorageLive(_13);                // scope 2 at $DIR/inline_closure_captures.rs:+1:22: +1:23\n+        _12 = deref_copy ((*_6).1: &T);  // scope 2 at $DIR/inline_closure_captures.rs:+1:22: +1:23\n+        _13 = (*_12);                    // scope 2 at $DIR/inline_closure_captures.rs:+1:22: +1:23\n+        _0 = (move _11, move _13);       // scope 2 at $DIR/inline_closure_captures.rs:+1:18: +1:24\n+        StorageDead(_13);                // scope 2 at $DIR/inline_closure_captures.rs:+1:23: +1:24\n         StorageDead(_11);                // scope 2 at $DIR/inline_closure_captures.rs:+1:23: +1:24\n-        StorageDead(_10);                // scope 2 at $DIR/inline_closure_captures.rs:+1:23: +1:24\n         StorageDead(_9);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:5: +2:9\n         StorageDead(_8);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:8: +2:9\n         StorageDead(_7);                 // scope 1 at $DIR/inline_closure_captures.rs:+2:8: +2:9"}, {"sha": "255451e867030a95f3a28a069cb910be77d967f1", "filename": "tests/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -8,15 +8,15 @@\n +     let mut _8: ();                      // in scope 0 at $DIR/inline_diverging.rs:27:13: 27:16\n +     scope 1 (inlined call_twice::<!, fn() -> ! {sleep}>) { // at $DIR/inline_diverging.rs:22:5: 22:22\n +         debug f => _2;                   // in scope 1 at $DIR/inline_diverging.rs:26:36: 26:37\n-+         let _3: !;                       // in scope 1 at $DIR/inline_diverging.rs:27:9: 27:10\n-+         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n++         let mut _3: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n++         let _4: !;                       // in scope 1 at $DIR/inline_diverging.rs:27:9: 27:10\n +         let mut _5: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline_diverging.rs:28:13: 28:14\n-+         let mut _6: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:6: 29:7\n-+         let mut _7: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:9: 29:10\n++         let mut _6: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:9: 29:10\n++         let mut _7: !;                   // in scope 1 at $DIR/inline_diverging.rs:29:6: 29:7\n +         scope 2 {\n-+             debug a => _3;               // in scope 2 at $DIR/inline_diverging.rs:27:9: 27:10\n++             debug a => _4;               // in scope 2 at $DIR/inline_diverging.rs:27:9: 27:10\n +             scope 3 {\n-+                 debug b => _7;           // in scope 3 at $DIR/inline_diverging.rs:28:9: 28:10\n++                 debug b => _6;           // in scope 3 at $DIR/inline_diverging.rs:28:9: 28:10\n +             }\n +         }\n +         scope 4 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline_diverging.rs:27:13: 27:16\n@@ -34,22 +34,22 @@\n -                                          // mir::Constant\n                                            // + span: $DIR/inline_diverging.rs:22:16: 22:21\n                                            // + literal: Const { ty: fn() -> ! {sleep}, val: Value(<ZST>) }\n-+         StorageLive(_7);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n-+         StorageLive(_3);                 // scope 1 at $DIR/inline_diverging.rs:27:9: 27:10\n-+         StorageLive(_4);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n-+         _4 = &_2;                        // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n++         StorageLive(_6);                 // scope 0 at $DIR/inline_diverging.rs:+1:5: +1:22\n++         StorageLive(_4);                 // scope 1 at $DIR/inline_diverging.rs:27:9: 27:10\n++         StorageLive(_3);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n++         _3 = &_2;                        // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n +         StorageLive(_8);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n +         _8 = const ();                   // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n-+         _3 = move (*_4)() -> [return: bb6, unwind: bb4]; // scope 4 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n++         _4 = move (*_3)() -> [return: bb6, unwind: bb4]; // scope 4 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n +     }\n + \n +     bb1: {\n +         StorageDead(_5);                 // scope 2 at $DIR/inline_diverging.rs:28:15: 28:16\n-+         StorageLive(_6);                 // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n-+         _6 = move _3;                    // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n-+         _1 = (move _6, move _7);         // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11\n-+         StorageDead(_6);                 // scope 3 at $DIR/inline_diverging.rs:29:10: 29:11\n-+         StorageDead(_3);                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n++         StorageLive(_7);                 // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n++         _7 = move _4;                    // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n++         _1 = (move _7, move _6);         // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11\n++         StorageDead(_7);                 // scope 3 at $DIR/inline_diverging.rs:29:10: 29:11\n++         StorageDead(_4);                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n +         drop(_2) -> bb2;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n +     }\n + \n@@ -58,7 +58,7 @@\n +     }\n + \n +     bb3 (cleanup): {\n-+         drop(_3) -> [return: bb4, unwind terminate]; // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n++         drop(_4) -> [return: bb4, unwind terminate]; // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n +     }\n + \n +     bb4 (cleanup): {\n@@ -71,10 +71,10 @@\n + \n +     bb6: {\n +         StorageDead(_8);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n-+         StorageDead(_4);                 // scope 1 at $DIR/inline_diverging.rs:27:15: 27:16\n++         StorageDead(_3);                 // scope 1 at $DIR/inline_diverging.rs:27:15: 27:16\n +         StorageLive(_5);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n +         _5 = &_2;                        // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n-+         _7 = <fn() -> ! {sleep} as Fn<()>>::call(move _5, const ()) -> [return: bb1, unwind: bb3]; // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16\n++         _6 = <fn() -> ! {sleep} as Fn<()>>::call(move _5, const ()) -> [return: bb1, unwind: bb3]; // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16\n +                                          // mir::Constant\n +                                          // + span: $DIR/inline_diverging.rs:28:13: 28:14\n +                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() -> ! {sleep}, ()) -> <fn() -> ! {sleep} as FnOnce<()>>::Output {<fn() -> ! {sleep} as Fn<()>>::call}, val: Value(<ZST>) }"}, {"sha": "0dcae1e4d45f98a5c6a757b6b1e5d2152b53ee81", "filename": "tests/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -23,9 +23,9 @@\n +     }\n +     scope 6 (inlined g::{closure#0}) {   // at $DIR/inline_generator.rs:9:33: 9:46\n +         debug a => _5;                   // in scope 6 at $DIR/inline_generator.rs:15:6: 15:7\n-+         let mut _6: i32;                 // in scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n++         let mut _6: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n +         let mut _7: u32;                 // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n-+         let mut _8: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         let mut _8: i32;                 // in scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n +         let mut _9: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n +         let mut _10: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]; // in scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n +     }\n@@ -70,9 +70,9 @@\n -                                          // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@$DIR/inline_generator.rs:15:5: 15:8]>, bool) -> GeneratorState<<[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::Yield, <[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::Return> {<[generator@$DIR/inline_generator.rs:15:5: 15:8] as Generator<bool>>::resume}, val: Value(<ZST>) }\n +         StorageLive(_5);                 // scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n +         _5 = const false;                // scope 0 at $DIR/inline_generator.rs:+1:33: +1:46\n-+         _8 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n-+         _7 = discriminant((*_8));        // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n-+         switchInt(move _7) -> [0: bb3, 1: bb8, 3: bb7, otherwise: bb9]; // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         _6 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         _7 = discriminant((*_6));        // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         switchInt(move _7) -> [0: bb3, 1: bb7, 3: bb8, otherwise: bb9]; // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n       }\n   \n -     bb3: {\n@@ -91,40 +91,40 @@\n +     }\n + \n +     bb3: {\n-+         StorageLive(_6);                 // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n-+         switchInt(_5) -> [0: bb5, otherwise: bb4]; // scope 6 at $DIR/inline_generator.rs:15:20: 15:21\n++         StorageLive(_8);                 // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n++         switchInt(_5) -> [0: bb4, otherwise: bb5]; // scope 6 at $DIR/inline_generator.rs:15:20: 15:21\n +     }\n + \n +     bb4: {\n-+         _6 = const 7_i32;                // scope 6 at $DIR/inline_generator.rs:15:24: 15:25\n++         _8 = const 13_i32;               // scope 6 at $DIR/inline_generator.rs:15:35: 15:37\n +         goto -> bb6;                     // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n +     }\n + \n +     bb5: {\n-+         _6 = const 13_i32;               // scope 6 at $DIR/inline_generator.rs:15:35: 15:37\n++         _8 = const 7_i32;                // scope 6 at $DIR/inline_generator.rs:15:24: 15:25\n +         goto -> bb6;                     // scope 6 at $DIR/inline_generator.rs:15:17: 15:39\n +     }\n + \n +     bb6: {\n-+         _1 = GeneratorState::<i32, bool>::Yielded(move _6); // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n++         _1 = GeneratorState::<i32, bool>::Yielded(move _8); // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n +         _9 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n +         discriminant((*_9)) = 3;         // scope 6 at $DIR/inline_generator.rs:15:11: 15:39\n +         goto -> bb1;                     // scope 0 at $DIR/inline_generator.rs:15:11: 15:39\n +     }\n + \n +     bb7: {\n-+         StorageLive(_6);                 // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n-+         StorageDead(_6);                 // scope 6 at $DIR/inline_generator.rs:15:38: 15:39\n++         assert(const false, \"generator resumed after completion\") -> [success: bb7, unwind: bb2]; // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++     }\n++ \n++     bb8: {\n++         StorageLive(_8);                 // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n++         StorageDead(_8);                 // scope 6 at $DIR/inline_generator.rs:15:38: 15:39\n +         _1 = GeneratorState::<i32, bool>::Complete(_5); // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         _10 = deref_copy (_2.0: &mut [generator@$DIR/inline_generator.rs:15:5: 15:8]); // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         discriminant((*_10)) = 1;        // scope 6 at $DIR/inline_generator.rs:15:41: 15:41\n +         goto -> bb1;                     // scope 0 at $DIR/inline_generator.rs:15:41: 15:41\n +     }\n + \n-+     bb8: {\n-+         assert(const false, \"generator resumed after completion\") -> [success: bb8, unwind: bb2]; // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n-+     }\n-+ \n +     bb9: {\n +         unreachable;                     // scope 6 at $DIR/inline_generator.rs:15:5: 15:41\n       }"}, {"sha": "5fed54f83a78863b497e4cb4752b593c07354d38", "filename": "tests/mir-opt/inline/issue_106141.outer.Inline.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Fissue_106141.outer.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Fissue_106141.outer.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_106141.outer.Inline.diff?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -4,9 +4,9 @@\n   fn outer() -> usize {\n       let mut _0: usize;                   // return place in scope 0 at $DIR/issue_106141.rs:+0:19: +0:24\n +     scope 1 (inlined inner) {            // at $DIR/issue_106141.rs:3:5: 3:12\n-+         let mut _1: bool;                // in scope 1 at $DIR/issue_106141.rs:14:8: 14:21\n++         let mut _1: &[bool; 1];          // in scope 1 at $DIR/issue_106141.rs:12:18: 12:25\n +         let mut _2: bool;                // in scope 1 at $DIR/issue_106141.rs:14:8: 14:21\n-+         let mut _3: &[bool; 1];          // in scope 1 at $DIR/issue_106141.rs:12:18: 12:25\n++         let mut _3: bool;                // in scope 1 at $DIR/issue_106141.rs:14:8: 14:21\n +         scope 2 {\n +             debug buffer => const _;     // in scope 2 at $DIR/issue_106141.rs:12:9: 12:15\n +             scope 3 {\n@@ -17,8 +17,8 @@\n   \n       bb0: {\n -         _0 = inner() -> bb1;             // scope 0 at $DIR/issue_106141.rs:+1:5: +1:12\n-+         StorageLive(_3);                 // scope 0 at $DIR/issue_106141.rs:+1:5: +1:12\n-+         _3 = const _;                    // scope 1 at $DIR/issue_106141.rs:12:18: 12:25\n++         StorageLive(_1);                 // scope 0 at $DIR/issue_106141.rs:+1:5: +1:12\n++         _1 = const _;                    // scope 1 at $DIR/issue_106141.rs:12:18: 12:25\n                                            // mir::Constant\n -                                          // + span: $DIR/issue_106141.rs:3:5: 3:10\n -                                          // + literal: Const { ty: fn() -> usize {inner}, val: Value(<ZST>) }\n@@ -31,14 +31,14 @@\n       }\n   \n       bb1: {\n-+         StorageLive(_1);                 // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n++         StorageLive(_3);                 // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n +         _2 = Lt(_0, const 1_usize);      // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n +         assert(move _2, \"index out of bounds: the length is {} but the index is {}\", const 1_usize, _0) -> bb2; // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n +     }\n + \n +     bb2: {\n-+         _1 = (*_3)[_0];                  // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n-+         switchInt(move _1) -> [0: bb3, otherwise: bb4]; // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n++         _3 = (*_1)[_0];                  // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n++         switchInt(move _3) -> [0: bb3, otherwise: bb4]; // scope 3 at $DIR/issue_106141.rs:14:8: 14:21\n +     }\n + \n +     bb3: {\n@@ -47,8 +47,8 @@\n +     }\n + \n +     bb4: {\n-+         StorageDead(_1);                 // scope 3 at $DIR/issue_106141.rs:18:5: 18:6\n-+         StorageDead(_3);                 // scope 0 at $DIR/issue_106141.rs:+1:5: +1:12\n++         StorageDead(_3);                 // scope 3 at $DIR/issue_106141.rs:18:5: 18:6\n++         StorageDead(_1);                 // scope 0 at $DIR/issue_106141.rs:+1:5: +1:12\n           return;                          // scope 0 at $DIR/issue_106141.rs:+2:2: +2:2\n       }\n   }"}, {"sha": "f4b2416eaab11d674185b852289236c98e68fb16", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -7,38 +7,38 @@ fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n     scope 1 (inlined core::num::<impl u16>::unchecked_shl) { // at $DIR/unchecked_shifts.rs:11:7: 11:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        let mut _3: u16;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        let mut _4: (u32,);              // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        let mut _5: u32;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        let mut _3: (u32,);              // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        let mut _4: u32;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        let mut _13: u16;                // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         scope 2 {\n             scope 3 (inlined core::num::<impl u16>::unchecked_shl::conv) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                debug x => _5;           // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                let mut _6: std::option::Option<u16>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                let mut _7: std::result::Result<u16, std::num::TryFromIntError>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                debug x => _4;           // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                let mut _8: std::result::Result<u16, std::num::TryFromIntError>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                let mut _11: std::option::Option<u16>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n                 scope 4 {\n                     scope 5 (inlined <u32 as TryInto<u16>>::try_into) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                        debug self => _5; // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                        debug self => _4; // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                         scope 6 (inlined convert::num::<impl TryFrom<u32> for u16>::try_from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-                            debug u => _5; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-                            let mut _8: bool; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-                            let mut _9: u32; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-                            let mut _10: u16; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                            debug u => _4; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                            let mut _5: u32; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                            let mut _6: bool; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                            let mut _7: u16; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n                         }\n                     }\n                     scope 7 (inlined Result::<u16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                        debug self => _7; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-                        let mut _11: isize; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-                        let _12: u16;    // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+                        debug self => _8; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+                        let mut _9: isize; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+                        let _10: u16;    // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n                         scope 8 {\n-                            debug x => _12; // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                            debug x => _10; // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                         }\n                     }\n                     scope 9 (inlined #[track_caller] Option::<u16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                        debug self => _6; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n-                        let mut _13: &std::option::Option<u16>; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n-                        let mut _14: isize; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        debug self => _11; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        let mut _12: isize; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        let mut _14: &std::option::Option<u16>; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n                         scope 10 {\n-                            debug val => _3; // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n+                            debug val => _13; // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n                         }\n                         scope 11 {\n                             scope 13 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n@@ -49,7 +49,7 @@ fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n                             }\n                         }\n                         scope 12 (inlined Option::<u16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n-                            debug self => _13; // in scope 12 at $SRC_DIR/core/src/option.rs:LL:COL\n+                            debug self => _14; // in scope 12 at $SRC_DIR/core/src/option.rs:LL:COL\n                         }\n                     }\n                 }\n@@ -58,81 +58,81 @@ fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n     }\n \n     bb0: {\n+        StorageLive(_13);                // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _3 = (_2,);                      // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _4 = (_2,);                      // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _5 = move (_4.0: u32);           // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageLive(_6);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageLive(_7);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageLive(_8);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        StorageLive(_9);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        _9 = const 65535_u32;            // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        _8 = Gt(_5, move _9);            // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        StorageDead(_9);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _4 = move (_3.0: u32);           // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_6);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageLive(_5);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _5 = const 65535_u32;            // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _6 = Gt(_4, move _5);            // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageDead(_5);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        switchInt(move _6) -> [0: bb1, otherwise: bb2]; // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n+        StorageLive(_7);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _7 = _4 as u16 (IntToInt);       // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _8 = Result::<u16, TryFromIntError>::Ok(move _7); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageDead(_7);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        goto -> bb3;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n     }\n \n     bb2: {\n-        _7 = Result::<u16, TryFromIntError>::Err(const TryFromIntError(())); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _8 = Result::<u16, TryFromIntError>::Err(const TryFromIntError(())); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: no-location\n                                          // + literal: Const { ty: TryFromIntError, val: Value(<ZST>) }\n-        goto -> bb4;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        goto -> bb3;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n     }\n \n     bb3: {\n-        StorageLive(_10);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        _10 = _5 as u16 (IntToInt);      // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        _7 = Result::<u16, TryFromIntError>::Ok(move _10); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        goto -> bb4;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageDead(_6);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _9 = discriminant(_8);           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        switchInt(move _9) -> [0: bb4, 1: bb5, otherwise: bb9]; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n \n     bb4: {\n-        StorageDead(_8);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _11 = discriminant(_7);          // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        switchInt(move _11) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _10 = move ((_8 as Ok).0: u16);  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _11 = Option::<u16>::Some(move _10); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb6;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n \n     bb5: {\n-        _6 = Option::<u16>::None;        // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        goto -> bb8;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _11 = Option::<u16>::None;       // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb6;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n \n     bb6: {\n-        unreachable;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_14);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _12 = discriminant(_11);         // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _12) -> [1: bb7, otherwise: bb9]; // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n     }\n \n     bb7: {\n-        _12 = move ((_7 as Ok).0: u16);  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _6 = Option::<u16>::Some(move _12); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-        goto -> bb8;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _13 = move ((_11 as Some).0: u16); // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_14);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _0 = unchecked_shl::<u16>(_1, move _13) -> [return: bb8, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }\n     }\n \n     bb8: {\n-        StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageDead(_7);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _14 = discriminant(_6);          // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n-        switchInt(move _14) -> [1: bb9, otherwise: bb6]; // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_13);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n     }\n \n     bb9: {\n-        _3 = move ((_6 as Some).0: u16); // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n-        StorageDead(_13);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageDead(_6);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _0 = unchecked_shl::<u16>(_1, move _3) -> [return: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }\n+        unreachable;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n }"}, {"sha": "67f0fe8932f4105773e8c4abe707c8dd714858cd", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "status": "modified", "additions": 64, "deletions": 64, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -7,38 +7,38 @@ fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n     scope 1 (inlined core::num::<impl i16>::unchecked_shr) { // at $DIR/unchecked_shifts.rs:17:7: 17:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n         debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-        let mut _3: i16;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        let mut _4: (u32,);              // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        let mut _5: u32;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        let mut _3: (u32,);              // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        let mut _4: u32;                 // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        let mut _13: i16;                // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         scope 2 {\n             scope 3 (inlined core::num::<impl i16>::unchecked_shr::conv) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                debug x => _5;           // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                let mut _6: std::option::Option<i16>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                let mut _7: std::result::Result<i16, std::num::TryFromIntError>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                debug x => _4;           // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                let mut _8: std::result::Result<i16, std::num::TryFromIntError>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                let mut _11: std::option::Option<i16>; // in scope 3 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n                 scope 4 {\n                     scope 5 (inlined <u32 as TryInto<i16>>::try_into) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                        debug self => _5; // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                        debug self => _4; // in scope 5 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                         scope 6 (inlined convert::num::<impl TryFrom<u32> for i16>::try_from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-                            debug u => _5; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-                            let mut _8: bool; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-                            let mut _9: u32; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-                            let mut _10: i16; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                            debug u => _4; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                            let mut _5: u32; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                            let mut _6: bool; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+                            let mut _7: i16; // in scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n                         }\n                     }\n                     scope 7 (inlined Result::<i16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                        debug self => _7; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-                        let mut _11: isize; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-                        let _12: i16;    // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+                        debug self => _8; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+                        let mut _9: isize; // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+                        let _10: i16;    // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n                         scope 8 {\n-                            debug x => _12; // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+                            debug x => _10; // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                         }\n                     }\n                     scope 9 (inlined #[track_caller] Option::<i16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                        debug self => _6; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n-                        let mut _13: &std::option::Option<i16>; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n-                        let mut _14: isize; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        debug self => _11; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        let mut _12: isize; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+                        let mut _14: &std::option::Option<i16>; // in scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n                         scope 10 {\n-                            debug val => _3; // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n+                            debug val => _13; // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n                         }\n                         scope 11 {\n                             scope 13 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n@@ -49,7 +49,7 @@ fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n                             }\n                         }\n                         scope 12 (inlined Option::<i16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n-                            debug self => _13; // in scope 12 at $SRC_DIR/core/src/option.rs:LL:COL\n+                            debug self => _14; // in scope 12 at $SRC_DIR/core/src/option.rs:LL:COL\n                         }\n                     }\n                 }\n@@ -58,81 +58,81 @@ fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n     }\n \n     bb0: {\n+        StorageLive(_13);                // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _3 = (_2,);                      // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _4 = (_2,);                      // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _5 = move (_4.0: u32);           // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageLive(_6);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageLive(_7);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageLive(_8);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        StorageLive(_9);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        _9 = const 32767_u32;            // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        _8 = Gt(_5, move _9);            // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        StorageDead(_9);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _4 = move (_3.0: u32);           // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_8);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_6);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageLive(_5);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _5 = const 32767_u32;            // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _6 = Gt(_4, move _5);            // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageDead(_5);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        switchInt(move _6) -> [0: bb1, otherwise: bb2]; // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n+        StorageLive(_7);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _7 = _4 as i16 (IntToInt);       // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _8 = Result::<i16, TryFromIntError>::Ok(move _7); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageDead(_7);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        goto -> bb3;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n     }\n \n     bb2: {\n-        _7 = Result::<i16, TryFromIntError>::Err(const TryFromIntError(())); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        _8 = Result::<i16, TryFromIntError>::Err(const TryFromIntError(())); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: no-location\n                                          // + literal: Const { ty: TryFromIntError, val: Value(<ZST>) }\n-        goto -> bb4;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        goto -> bb3;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n     }\n \n     bb3: {\n-        StorageLive(_10);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        _10 = _5 as i16 (IntToInt);      // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        _7 = Result::<i16, TryFromIntError>::Ok(move _10); // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        goto -> bb4;                     // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageDead(_6);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n+        StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _9 = discriminant(_8);           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        switchInt(move _9) -> [0: bb4, 1: bb5, otherwise: bb9]; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n \n     bb4: {\n-        StorageDead(_8);                 // scope 6 at $SRC_DIR/core/src/convert/num.rs:LL:COL\n-        StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _11 = discriminant(_7);          // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        switchInt(move _11) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _10 = move ((_8 as Ok).0: i16);  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _11 = Option::<i16>::Some(move _10); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb6;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n \n     bb5: {\n-        _6 = Option::<i16>::None;        // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        goto -> bb8;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _11 = Option::<i16>::None;       // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb6;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n \n     bb6: {\n-        unreachable;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_8);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_14);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _12 = discriminant(_11);         // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _12) -> [1: bb7, otherwise: bb9]; // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n     }\n \n     bb7: {\n-        _12 = move ((_7 as Ok).0: i16);  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _6 = Option::<i16>::Some(move _12); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-        goto -> bb8;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _13 = move ((_11 as Some).0: i16); // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_14);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _0 = unchecked_shr::<i16>(_1, move _13) -> [return: bb8, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }\n     }\n \n     bb8: {\n-        StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageDead(_7);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _14 = discriminant(_6);          // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n-        switchInt(move _14) -> [1: bb9, otherwise: bb6]; // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_13);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n     }\n \n     bb9: {\n-        _3 = move ((_6 as Some).0: i16); // scope 9 at $SRC_DIR/core/src/option.rs:LL:COL\n-        StorageDead(_13);                // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageDead(_6);                 // scope 4 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _0 = unchecked_shr::<i16>(_1, move _3) -> [return: bb1, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }\n+        unreachable;                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n }"}, {"sha": "601d83702f435d787c95e41cdb23e91bab0077a6", "filename": "tests/mir-opt/inline/unwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -5,8 +5,8 @@ fn unwrap_unchecked(_1: Option<T>) -> T {\n     let mut _0: T;                       // return place in scope 0 at $DIR/unwrap_unchecked.rs:+0:54: +0:55\n     scope 1 (inlined #[track_caller] Option::<T>::unwrap_unchecked) { // at $DIR/unwrap_unchecked.rs:10:9: 10:27\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n-        let mut _2: &std::option::Option<T>; // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n-        let mut _3: isize;               // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        let mut _2: isize;               // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        let mut _3: &std::option::Option<T>; // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n         scope 2 {\n             debug val => _0;             // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n         }\n@@ -19,23 +19,23 @@ fn unwrap_unchecked(_1: Option<T>) -> T {\n             }\n         }\n         scope 4 (inlined Option::<T>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n-            debug self => _2;            // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+            debug self => _3;            // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n         }\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:9: +1:27\n-        _3 = discriminant(_1);           // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n-        switchInt(move _3) -> [1: bb2, otherwise: bb1]; // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageLive(_3);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:9: +1:27\n+        _2 = discriminant(_1);           // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _2) -> [1: bb1, otherwise: bb2]; // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n     }\n \n     bb1: {\n-        unreachable;                     // scope 6 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+        _0 = move ((_1 as Some).0: T);   // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_3);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:9: +1:27\n+        return;                          // scope 0 at $DIR/unwrap_unchecked.rs:+2:2: +2:2\n     }\n \n     bb2: {\n-        _0 = move ((_1 as Some).0: T);   // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n-        StorageDead(_2);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:9: +1:27\n-        return;                          // scope 0 at $DIR/unwrap_unchecked.rs:+2:2: +2:2\n+        unreachable;                     // scope 6 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n     }\n }"}, {"sha": "2f68f65c87492f985ee27f4dcde603ae4d89dd53", "filename": "tests/mir-opt/issue_101973.inner.ConstProp.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -18,8 +18,8 @@\n       let mut _13: bool;                   // in scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n       scope 1 (inlined imm8) {             // at $DIR/issue_101973.rs:15:5: 15:17\n           debug x => _1;                   // in scope 1 at $DIR/issue_101973.rs:6:13: 6:14\n-          let mut _14: u32;                // in scope 1 at $DIR/issue_101973.rs:8:12: 8:27\n-          let mut _15: u32;                // in scope 1 at $DIR/issue_101973.rs:8:12: 8:20\n+          let mut _14: u32;                // in scope 1 at $DIR/issue_101973.rs:8:12: 8:20\n+          let mut _15: u32;                // in scope 1 at $DIR/issue_101973.rs:8:12: 8:27\n           scope 2 {\n               debug out => _4;             // in scope 2 at $DIR/issue_101973.rs:7:9: 7:16\n           }\n@@ -33,13 +33,13 @@\n           StorageLive(_2);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:65\n           StorageLive(_3);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:58\n           StorageLive(_4);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:17\n-          StorageLive(_14);                // scope 2 at $DIR/issue_101973.rs:8:12: 8:27\n-          StorageLive(_15);                // scope 2 at $DIR/issue_101973.rs:8:12: 8:20\n-          _15 = Shr(_1, const 0_i32);      // scope 2 at $DIR/issue_101973.rs:8:12: 8:20\n-          _14 = BitAnd(move _15, const 255_u32); // scope 2 at $DIR/issue_101973.rs:8:12: 8:27\n-          StorageDead(_15);                // scope 2 at $DIR/issue_101973.rs:8:26: 8:27\n-          _4 = BitOr(const 0_u32, move _14); // scope 2 at $DIR/issue_101973.rs:8:5: 8:27\n+          StorageLive(_15);                // scope 2 at $DIR/issue_101973.rs:8:12: 8:27\n+          StorageLive(_14);                // scope 2 at $DIR/issue_101973.rs:8:12: 8:20\n+          _14 = Shr(_1, const 0_i32);      // scope 2 at $DIR/issue_101973.rs:8:12: 8:20\n+          _15 = BitAnd(move _14, const 255_u32); // scope 2 at $DIR/issue_101973.rs:8:12: 8:27\n           StorageDead(_14);                // scope 2 at $DIR/issue_101973.rs:8:26: 8:27\n+          _4 = BitOr(const 0_u32, move _15); // scope 2 at $DIR/issue_101973.rs:8:5: 8:27\n+          StorageDead(_15);                // scope 2 at $DIR/issue_101973.rs:8:26: 8:27\n           StorageLive(_6);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n           StorageLive(_7);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:52\n           StorageLive(_8);                 // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45"}, {"sha": "fac4b8a2d25e08430ae8e11c932ddfa87c66df29", "filename": "tests/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -3,19 +3,19 @@\n fn num_to_digit(_1: char) -> u32 {\n     debug num => _1;                     // in scope 0 at $DIR/issue_59352.rs:+0:21: +0:24\n     let mut _0: u32;                     // return place in scope 0 at $DIR/issue_59352.rs:+0:35: +0:38\n-    let mut _2: std::option::Option<u32>; // in scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n+    let mut _5: std::option::Option<u32>; // in scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n     scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue_59352.rs:15:12: 15:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         debug radix => const 8_u32;      // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        let _2: std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         let mut _3: &std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        let _4: std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n         scope 2 (inlined Option::<u32>::is_some) { // at $SRC_DIR/core/src/char/methods.rs:LL:COL\n             debug self => _3;            // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n-            let mut _5: isize;           // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n+            let mut _4: isize;           // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n         }\n     }\n     scope 3 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue_59352.rs:15:42: 15:50\n-        debug self => _2;                // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        debug self => _5;                // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         let mut _6: isize;               // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         let mut _7: !;                   // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n         scope 4 {\n@@ -25,44 +25,35 @@ fn num_to_digit(_1: char) -> u32 {\n \n     bb0: {\n         StorageLive(_3);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageLive(_4);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        _4 = char::methods::<impl char>::to_digit(_1, const 8_u32) -> bb5; // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageLive(_2);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        _2 = char::methods::<impl char>::to_digit(_1, const 8_u32) -> bb1; // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/char/methods.rs:LL:COL\n                                          // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageLive(_2);                 // scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n-        _2 = char::methods::<impl char>::to_digit(_1, const 8_u32) -> bb2; // scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n-                                         // mir::Constant\n-                                         // + span: $DIR/issue_59352.rs:15:30: 15:38\n-                                         // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(<ZST>) }\n+        _3 = &_2;                        // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        _4 = discriminant((*_3));        // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_3);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        StorageDead(_2);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n+        switchInt(move _4) -> [1: bb2, otherwise: bb7]; // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n     }\n \n     bb2: {\n-        _6 = discriminant(_2);           // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n-        switchInt(move _6) -> [0: bb6, 1: bb8, otherwise: bb7]; // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageLive(_5);                 // scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n+        _5 = char::methods::<impl char>::to_digit(_1, const 8_u32) -> bb3; // scope 0 at $DIR/issue_59352.rs:+2:26: +2:41\n+                                         // mir::Constant\n+                                         // + span: $DIR/issue_59352.rs:15:30: 15:38\n+                                         // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n-        _0 = const 0_u32;                // scope 0 at $DIR/issue_59352.rs:+2:60: +2:61\n-        goto -> bb4;                     // scope 0 at $DIR/issue_59352.rs:+2:5: +2:63\n+        _6 = discriminant(_5);           // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb6]; // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n     }\n \n     bb4: {\n-        return;                          // scope 0 at $DIR/issue_59352.rs:+3:2: +3:2\n-    }\n-\n-    bb5: {\n-        _3 = &_4;                        // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        _5 = discriminant((*_3));        // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n-        StorageDead(_3);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        StorageDead(_4);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL\n-        switchInt(move _5) -> [1: bb1, otherwise: bb3]; // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23\n-    }\n-\n-    bb6: {\n         _7 = core::panicking::panic(const \"called `Option::unwrap()` on a `None` value\"); // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/option.rs:LL:COL\n@@ -72,13 +63,22 @@ fn num_to_digit(_1: char) -> u32 {\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n     }\n \n-    bb7: {\n+    bb5: {\n+        _0 = move ((_5 as Some).0: u32); // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_5);                 // scope 0 at $DIR/issue_59352.rs:+2:49: +2:50\n+        goto -> bb8;                     // scope 0 at $DIR/issue_59352.rs:+2:5: +2:63\n+    }\n+\n+    bb6: {\n         unreachable;                     // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n     }\n \n+    bb7: {\n+        _0 = const 0_u32;                // scope 0 at $DIR/issue_59352.rs:+2:60: +2:61\n+        goto -> bb8;                     // scope 0 at $DIR/issue_59352.rs:+2:5: +2:63\n+    }\n+\n     bb8: {\n-        _0 = move ((_2 as Some).0: u32); // scope 3 at $SRC_DIR/core/src/option.rs:LL:COL\n-        StorageDead(_2);                 // scope 0 at $DIR/issue_59352.rs:+2:49: +2:50\n-        goto -> bb4;                     // scope 0 at $DIR/issue_59352.rs:+2:5: +2:63\n+        return;                          // scope 0 at $DIR/issue_59352.rs:+3:2: +3:2\n     }\n }"}, {"sha": "6b805166ba29ce70159e4ca5e96b038611b2ac31", "filename": "tests/mir-opt/pre-codegen/duplicate_switch_targets.ub_if_b.PreCodegen.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Fduplicate_switch_targets.ub_if_b.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Fduplicate_switch_targets.ub_if_b.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fduplicate_switch_targets.ub_if_b.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -13,15 +13,15 @@ fn ub_if_b(_1: Thing) -> Thing {\n \n     bb0: {\n         _2 = discriminant(_1);           // scope 0 at $DIR/duplicate_switch_targets.rs:+1:11: +1:12\n-        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/duplicate_switch_targets.rs:+1:5: +1:12\n+        switchInt(move _2) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/duplicate_switch_targets.rs:+1:5: +1:12\n     }\n \n     bb1: {\n-        unreachable;                     // scope 2 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+        _0 = move _1;                    // scope 0 at $DIR/duplicate_switch_targets.rs:+2:21: +2:22\n+        return;                          // scope 0 at $DIR/duplicate_switch_targets.rs:+5:2: +5:2\n     }\n \n     bb2: {\n-        _0 = move _1;                    // scope 0 at $DIR/duplicate_switch_targets.rs:+2:21: +2:22\n-        return;                          // scope 0 at $DIR/duplicate_switch_targets.rs:+5:2: +5:2\n+        unreachable;                     // scope 2 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n     }\n }"}, {"sha": "9856cdd5688ba980247f61763561f8365b6a2ec6", "filename": "tests/mir-opt/pre-codegen/range_iter.forward_loop.PreCodegen.after.mir", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.forward_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.forward_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.forward_loop.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -7,20 +7,20 @@ fn forward_loop(_1: u32, _2: u32, _3: impl Fn(u32)) -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/range_iter.rs:+0:60: +0:60\n     let mut _4: std::ops::Range<u32>;    // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n     let mut _5: std::ops::Range<u32>;    // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n-    let _6: ();                          // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n+    let mut _6: &mut std::ops::Range<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n     let mut _7: std::option::Option<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n-    let mut _8: &mut std::ops::Range<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n-    let mut _9: isize;                   // in scope 0 at $DIR/range_iter.rs:+1:5: +3:6\n-    let mut _11: &impl Fn(u32);          // in scope 0 at $DIR/range_iter.rs:+2:9: +2:10\n-    let mut _12: (u32,);                 // in scope 0 at $DIR/range_iter.rs:+2:9: +2:13\n+    let mut _8: isize;                   // in scope 0 at $DIR/range_iter.rs:+1:5: +3:6\n+    let mut _10: &impl Fn(u32);          // in scope 0 at $DIR/range_iter.rs:+2:9: +2:10\n+    let mut _11: (u32,);                 // in scope 0 at $DIR/range_iter.rs:+2:9: +2:13\n+    let _12: ();                         // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24\n     scope 1 {\n         debug iter => _5;                // in scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n-        let _10: u32;                    // in scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n+        let _9: u32;                     // in scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n         scope 2 {\n-            debug x => _10;              // in scope 2 at $DIR/range_iter.rs:+1:9: +1:10\n+            debug x => _9;               // in scope 2 at $DIR/range_iter.rs:+1:9: +1:10\n         }\n         scope 4 (inlined iter::range::<impl Iterator for std::ops::Range<u32>>::next) { // at $DIR/range_iter.rs:21:14: 21:24\n-            debug self => _8;            // in scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            debug self => _6;            // in scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         }\n     }\n     scope 3 (inlined <std::ops::Range<u32> as IntoIterator>::into_iter) { // at $DIR/range_iter.rs:21:14: 21:24\n@@ -36,56 +36,56 @@ fn forward_loop(_1: u32, _2: u32, _3: impl Fn(u32)) -> () {\n \n     bb1: {\n         StorageLive(_7);                 // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n-        _8 = &mut _5;                    // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n-        _7 = <std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next(_8) -> [return: bb9, unwind: bb7]; // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _6 = &mut _5;                    // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+        _7 = <std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next(_6) -> [return: bb2, unwind: bb8]; // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<u32>) -> Option<<std::ops::Range<u32> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        _10 = ((_7 as Some).0: u32);     // scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n-        StorageLive(_11);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n-        _11 = &_3;                       // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n-        StorageLive(_12);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n-        _12 = (_10,);                    // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n-        _6 = <impl Fn(u32) as Fn<(u32,)>>::call(move _11, move _12) -> [return: bb5, unwind: bb7]; // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n-                                         // mir::Constant\n-                                         // + span: $DIR/range_iter.rs:22:9: 22:10\n-                                         // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(u32), (u32,)) -> <impl Fn(u32) as FnOnce<(u32,)>>::Output {<impl Fn(u32) as Fn<(u32,)>>::call}, val: Value(<ZST>) }\n+        _8 = discriminant(_7);           // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb7]; // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n     }\n \n     bb3: {\n-        unreachable;                     // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+        StorageDead(_7);                 // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n+        StorageDead(_5);                 // scope 0 at $DIR/range_iter.rs:+3:5: +3:6\n+        drop(_3) -> bb4;                 // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n     }\n \n     bb4: {\n-        StorageDead(_7);                 // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n-        StorageDead(_5);                 // scope 0 at $DIR/range_iter.rs:+3:5: +3:6\n-        drop(_3) -> bb6;                 // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/range_iter.rs:+4:2: +4:2\n     }\n \n     bb5: {\n-        StorageDead(_12);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n-        StorageDead(_11);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n-        StorageDead(_7);                 // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n-        goto -> bb1;                     // scope 1 at $DIR/range_iter.rs:+1:5: +3:6\n+        _9 = ((_7 as Some).0: u32);      // scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n+        StorageLive(_10);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n+        _10 = &_3;                       // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n+        StorageLive(_11);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+        _11 = (_9,);                     // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+        _12 = <impl Fn(u32) as Fn<(u32,)>>::call(move _10, move _11) -> [return: bb6, unwind: bb8]; // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+                                         // mir::Constant\n+                                         // + span: $DIR/range_iter.rs:22:9: 22:10\n+                                         // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(u32), (u32,)) -> <impl Fn(u32) as FnOnce<(u32,)>>::Output {<impl Fn(u32) as Fn<(u32,)>>::call}, val: Value(<ZST>) }\n     }\n \n     bb6: {\n-        return;                          // scope 0 at $DIR/range_iter.rs:+4:2: +4:2\n+        StorageDead(_11);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n+        StorageDead(_10);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n+        StorageDead(_7);                 // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n+        goto -> bb1;                     // scope 1 at $DIR/range_iter.rs:+1:5: +3:6\n     }\n \n-    bb7 (cleanup): {\n-        drop(_3) -> [return: bb8, unwind terminate]; // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n+    bb7: {\n+        unreachable;                     // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n     }\n \n     bb8 (cleanup): {\n-        resume;                          // scope 0 at $DIR/range_iter.rs:+0:1: +4:2\n+        drop(_3) -> [return: bb9, unwind terminate]; // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n     }\n \n-    bb9: {\n-        _9 = discriminant(_7);           // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n-        switchInt(move _9) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 1 at $DIR/range_iter.rs:+1:14: +1:24\n+    bb9 (cleanup): {\n+        resume;                          // scope 0 at $DIR/range_iter.rs:+0:1: +4:2\n     }\n }"}, {"sha": "a187d650a77720c8eb024375cfb926f3ae96c6a3", "filename": "tests/mir-opt/pre-codegen/range_iter.inclusive_loop.PreCodegen.after.mir", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.inclusive_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.inclusive_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Frange_iter.inclusive_loop.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -7,20 +7,20 @@ fn inclusive_loop(_1: u32, _2: u32, _3: impl Fn(u32)) -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/range_iter.rs:+0:62: +0:62\n     let mut _4: std::ops::RangeInclusive<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:25\n     let mut _5: std::ops::RangeInclusive<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:25\n-    let _6: ();                          // in scope 0 at $DIR/range_iter.rs:+1:14: +1:25\n+    let mut _6: &mut std::ops::RangeInclusive<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:25\n     let mut _7: std::option::Option<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:25\n-    let mut _8: &mut std::ops::RangeInclusive<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:25\n-    let mut _9: isize;                   // in scope 0 at $DIR/range_iter.rs:+1:5: +3:6\n-    let mut _11: &impl Fn(u32);          // in scope 0 at $DIR/range_iter.rs:+2:9: +2:10\n-    let mut _12: (u32,);                 // in scope 0 at $DIR/range_iter.rs:+2:9: +2:13\n+    let mut _8: isize;                   // in scope 0 at $DIR/range_iter.rs:+1:5: +3:6\n+    let mut _10: &impl Fn(u32);          // in scope 0 at $DIR/range_iter.rs:+2:9: +2:10\n+    let mut _11: (u32,);                 // in scope 0 at $DIR/range_iter.rs:+2:9: +2:13\n+    let _12: ();                         // in scope 0 at $DIR/range_iter.rs:+1:14: +1:25\n     scope 1 {\n         debug iter => _5;                // in scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n-        let _10: u32;                    // in scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n+        let _9: u32;                     // in scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n         scope 2 {\n-            debug x => _10;              // in scope 2 at $DIR/range_iter.rs:+1:9: +1:10\n+            debug x => _9;               // in scope 2 at $DIR/range_iter.rs:+1:9: +1:10\n         }\n         scope 5 (inlined iter::range::<impl Iterator for RangeInclusive<u32>>::next) { // at $DIR/range_iter.rs:28:14: 28:25\n-            debug self => _8;            // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            debug self => _6;            // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n         }\n     }\n     scope 3 (inlined RangeInclusive::<u32>::new) { // at $DIR/range_iter.rs:28:14: 28:25\n@@ -40,56 +40,56 @@ fn inclusive_loop(_1: u32, _2: u32, _3: impl Fn(u32)) -> () {\n \n     bb1: {\n         StorageLive(_7);                 // scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n-        _8 = &mut _5;                    // scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n-        _7 = <RangeInclusive<u32> as iter::range::RangeInclusiveIteratorImpl>::spec_next(_8) -> [return: bb9, unwind: bb7]; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _6 = &mut _5;                    // scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n+        _7 = <RangeInclusive<u32> as iter::range::RangeInclusiveIteratorImpl>::spec_next(_6) -> [return: bb2, unwind: bb8]; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u32>) -> Option<<RangeInclusive<u32> as iter::range::RangeInclusiveIteratorImpl>::Item> {<RangeInclusive<u32> as iter::range::RangeInclusiveIteratorImpl>::spec_next}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        _10 = ((_7 as Some).0: u32);     // scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n-        StorageLive(_11);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n-        _11 = &_3;                       // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n-        StorageLive(_12);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n-        _12 = (_10,);                    // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n-        _6 = <impl Fn(u32) as Fn<(u32,)>>::call(move _11, move _12) -> [return: bb5, unwind: bb7]; // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n-                                         // mir::Constant\n-                                         // + span: $DIR/range_iter.rs:29:9: 29:10\n-                                         // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(u32), (u32,)) -> <impl Fn(u32) as FnOnce<(u32,)>>::Output {<impl Fn(u32) as Fn<(u32,)>>::call}, val: Value(<ZST>) }\n+        _8 = discriminant(_7);           // scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n+        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb7]; // scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n     }\n \n     bb3: {\n-        unreachable;                     // scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n+        StorageDead(_7);                 // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n+        StorageDead(_5);                 // scope 0 at $DIR/range_iter.rs:+3:5: +3:6\n+        drop(_3) -> bb4;                 // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n     }\n \n     bb4: {\n-        StorageDead(_7);                 // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n-        StorageDead(_5);                 // scope 0 at $DIR/range_iter.rs:+3:5: +3:6\n-        drop(_3) -> bb6;                 // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/range_iter.rs:+4:2: +4:2\n     }\n \n     bb5: {\n-        StorageDead(_12);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n-        StorageDead(_11);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n-        StorageDead(_7);                 // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n-        goto -> bb1;                     // scope 1 at $DIR/range_iter.rs:+1:5: +3:6\n+        _9 = ((_7 as Some).0: u32);      // scope 1 at $DIR/range_iter.rs:+1:9: +1:10\n+        StorageLive(_10);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n+        _10 = &_3;                       // scope 2 at $DIR/range_iter.rs:+2:9: +2:10\n+        StorageLive(_11);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+        _11 = (_9,);                     // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+        _12 = <impl Fn(u32) as Fn<(u32,)>>::call(move _10, move _11) -> [return: bb6, unwind: bb8]; // scope 2 at $DIR/range_iter.rs:+2:9: +2:13\n+                                         // mir::Constant\n+                                         // + span: $DIR/range_iter.rs:29:9: 29:10\n+                                         // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(u32), (u32,)) -> <impl Fn(u32) as FnOnce<(u32,)>>::Output {<impl Fn(u32) as Fn<(u32,)>>::call}, val: Value(<ZST>) }\n     }\n \n     bb6: {\n-        return;                          // scope 0 at $DIR/range_iter.rs:+4:2: +4:2\n+        StorageDead(_11);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n+        StorageDead(_10);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13\n+        StorageDead(_7);                 // scope 1 at $DIR/range_iter.rs:+3:5: +3:6\n+        goto -> bb1;                     // scope 1 at $DIR/range_iter.rs:+1:5: +3:6\n     }\n \n-    bb7 (cleanup): {\n-        drop(_3) -> [return: bb8, unwind terminate]; // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n+    bb7: {\n+        unreachable;                     // scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n     }\n \n     bb8 (cleanup): {\n-        resume;                          // scope 0 at $DIR/range_iter.rs:+0:1: +4:2\n+        drop(_3) -> [return: bb9, unwind terminate]; // scope 0 at $DIR/range_iter.rs:+4:1: +4:2\n     }\n \n-    bb9: {\n-        _9 = discriminant(_7);           // scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n-        switchInt(move _9) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 1 at $DIR/range_iter.rs:+1:14: +1:25\n+    bb9 (cleanup): {\n+        resume;                          // scope 0 at $DIR/range_iter.rs:+0:1: +4:2\n     }\n }"}, {"sha": "089b0c23e2ce77ee4f23c445c7973fbcf345c575", "filename": "tests/mir-opt/pre-codegen/simple_option_map.ezmap.PreCodegen.after.mir", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Fsimple_option_map.ezmap.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Fsimple_option_map.ezmap.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fsimple_option_map.ezmap.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -3,54 +3,54 @@\n fn ezmap(_1: Option<i32>) -> Option<i32> {\n     debug x => _1;                       // in scope 0 at $DIR/simple_option_map.rs:+0:14: +0:15\n     let mut _0: std::option::Option<i32>; // return place in scope 0 at $DIR/simple_option_map.rs:+0:33: +0:44\n-    let mut _6: i32;                     // in scope 0 at $DIR/simple_option_map.rs:11:25: 11:29\n+    let mut _5: i32;                     // in scope 0 at $DIR/simple_option_map.rs:11:25: 11:29\n     scope 1 (inlined map::<i32, i32, [closure@$DIR/simple_option_map.rs:18:12: 18:15]>) { // at $DIR/simple_option_map.rs:18:5: 18:22\n         debug slf => _1;                 // in scope 1 at $DIR/simple_option_map.rs:6:17: 6:20\n         debug f => const ZeroSized: [closure@$DIR/simple_option_map.rs:18:12: 18:15]; // in scope 1 at $DIR/simple_option_map.rs:6:33: 6:34\n         let mut _2: isize;               // in scope 1 at $DIR/simple_option_map.rs:11:9: 11:16\n         let _3: i32;                     // in scope 1 at $DIR/simple_option_map.rs:11:14: 11:15\n-        let mut _4: i32;                 // in scope 1 at $DIR/simple_option_map.rs:11:25: 11:29\n-        let mut _5: (i32,);              // in scope 1 at $DIR/simple_option_map.rs:11:25: 11:29\n+        let mut _4: (i32,);              // in scope 1 at $DIR/simple_option_map.rs:11:25: 11:29\n+        let mut _6: i32;                 // in scope 1 at $DIR/simple_option_map.rs:11:25: 11:29\n         scope 2 {\n             debug x => _3;               // in scope 2 at $DIR/simple_option_map.rs:11:14: 11:15\n             scope 3 (inlined ezmap::{closure#0}) { // at $DIR/simple_option_map.rs:11:25: 11:29\n-                debug n => _6;           // in scope 3 at $DIR/simple_option_map.rs:+1:13: +1:14\n+                debug n => _5;           // in scope 3 at $DIR/simple_option_map.rs:+1:13: +1:14\n             }\n         }\n     }\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/simple_option_map.rs:+1:5: +1:22\n         _2 = discriminant(_1);           // scope 1 at $DIR/simple_option_map.rs:10:11: 10:14\n-        switchInt(move _2) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 1 at $DIR/simple_option_map.rs:10:5: 10:14\n+        switchInt(move _2) -> [0: bb1, 1: bb2, otherwise: bb4]; // scope 1 at $DIR/simple_option_map.rs:10:5: 10:14\n     }\n \n     bb1: {\n         _0 = Option::<i32>::None;        // scope 1 at $DIR/simple_option_map.rs:12:17: 12:21\n-        goto -> bb4;                     // scope 1 at $DIR/simple_option_map.rs:12:17: 12:21\n+        goto -> bb3;                     // scope 1 at $DIR/simple_option_map.rs:12:17: 12:21\n     }\n \n     bb2: {\n-        unreachable;                     // scope 1 at $DIR/simple_option_map.rs:10:11: 10:14\n-    }\n-\n-    bb3: {\n         _3 = ((_1 as Some).0: i32);      // scope 1 at $DIR/simple_option_map.rs:11:14: 11:15\n+        StorageLive(_6);                 // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n         StorageLive(_4);                 // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n+        _4 = (move _3,);                 // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n         StorageLive(_5);                 // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n-        _5 = (move _3,);                 // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n-        StorageLive(_6);                 // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n-        _6 = move (_5.0: i32);           // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n-        _4 = Add(_6, const 1_i32);       // scope 3 at $DIR/simple_option_map.rs:+1:16: +1:21\n-        StorageDead(_6);                 // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n-        StorageDead(_5);                 // scope 2 at $DIR/simple_option_map.rs:11:28: 11:29\n-        _0 = Option::<i32>::Some(move _4); // scope 2 at $DIR/simple_option_map.rs:11:20: 11:30\n-        StorageDead(_4);                 // scope 2 at $DIR/simple_option_map.rs:11:29: 11:30\n-        goto -> bb4;                     // scope 1 at $DIR/simple_option_map.rs:14:1: 14:2\n+        _5 = move (_4.0: i32);           // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n+        _6 = Add(_5, const 1_i32);       // scope 3 at $DIR/simple_option_map.rs:+1:16: +1:21\n+        StorageDead(_5);                 // scope 2 at $DIR/simple_option_map.rs:11:25: 11:29\n+        StorageDead(_4);                 // scope 2 at $DIR/simple_option_map.rs:11:28: 11:29\n+        _0 = Option::<i32>::Some(move _6); // scope 2 at $DIR/simple_option_map.rs:11:20: 11:30\n+        StorageDead(_6);                 // scope 2 at $DIR/simple_option_map.rs:11:29: 11:30\n+        goto -> bb3;                     // scope 1 at $DIR/simple_option_map.rs:14:1: 14:2\n     }\n \n-    bb4: {\n+    bb3: {\n         StorageDead(_3);                 // scope 0 at $DIR/simple_option_map.rs:+1:5: +1:22\n         return;                          // scope 0 at $DIR/simple_option_map.rs:+2:2: +2:2\n     }\n+\n+    bb4: {\n+        unreachable;                     // scope 1 at $DIR/simple_option_map.rs:10:11: 10:14\n+    }\n }"}, {"sha": "b05d44f4d60ab26a7f0ca4ccb2bed17db67c9d40", "filename": "tests/mir-opt/pre-codegen/slice_index.slice_get_mut_usize.PreCodegen.after.mir", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_get_mut_usize.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_get_mut_usize.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_get_mut_usize.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -10,17 +10,17 @@ fn slice_get_mut_usize(_1: &mut [u32], _2: usize) -> Option<&mut u32> {\n         scope 2 (inlined <usize as SliceIndex<[u32]>>::get_mut) { // at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n             debug self => _2;            // in scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n             debug slice => _1;           // in scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-            let mut _3: bool;            // in scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+            let mut _3: &[u32];          // in scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n             let mut _4: usize;           // in scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-            let mut _5: &[u32];          // in scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-            let mut _6: &mut u32;        // in scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-            let mut _7: *mut u32;        // in scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-            let mut _8: *mut [u32];      // in scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+            let mut _5: bool;            // in scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+            let mut _6: *mut [u32];      // in scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+            let mut _8: *mut u32;        // in scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+            let mut _9: &mut u32;        // in scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n             scope 3 {\n                 scope 4 (inlined <usize as SliceIndex<[u32]>>::get_unchecked_mut) { // at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                     debug self => _2;    // in scope 4 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                    debug slice => _8;   // in scope 4 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                    let mut _9: *mut u32; // in scope 4 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                    debug slice => _6;   // in scope 4 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                    let mut _7: *mut u32; // in scope 4 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                     let mut _10: usize;  // in scope 4 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                     let mut _11: *mut [u32]; // in scope 4 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                     scope 5 {\n@@ -40,10 +40,10 @@ fn slice_get_mut_usize(_1: &mut [u32], _2: usize) -> Option<&mut u32> {\n                                 }\n                             }\n                             scope 11 (inlined ptr::mut_ptr::<impl *mut [u32]>::as_mut_ptr) { // at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                                debug self => _8; // in scope 11 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                debug self => _6; // in scope 11 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                             }\n                             scope 12 (inlined ptr::mut_ptr::<impl *mut u32>::add) { // at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                                debug self => _9; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                debug self => _7; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                 debug count => _2; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                 scope 13 {\n                                 }\n@@ -56,50 +56,50 @@ fn slice_get_mut_usize(_1: &mut [u32], _2: usize) -> Option<&mut u32> {\n     }\n \n     bb0: {\n-        StorageLive(_6);                 // scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageLive(_9);                 // scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _5 = &(*_1);                     // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _4 = Len((*_5));                 // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _3 = Lt(_2, move _4);            // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _3 = &(*_1);                     // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _4 = Len((*_3));                 // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _5 = Lt(_2, move _4);            // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n     }\n \n     bb1: {\n-        StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _0 = const Option::<&mut u32>::None; // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: no-location\n+                                         // + literal: Const { ty: Option<&mut u32>, val: Value(Scalar(0x0000000000000000)) }\n+        goto -> bb3;                     // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+    }\n+\n+    bb2: {\n         StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _8 = &raw mut (*_1);             // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _6 = &raw mut (*_1);             // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageLive(_12);                // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageLive(_9);                 // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _9 = _8 as *mut u32 (PtrToPtr);  // scope 11 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        _7 = Offset(_9, _2);             // scope 13 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageDead(_9);                 // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageLive(_7);                 // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _7 = _6 as *mut u32 (PtrToPtr);  // scope 11 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+        _8 = Offset(_7, _2);             // scope 13 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+        StorageDead(_7);                 // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageDead(_12);                // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageDead(_10);                // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _6 = &mut (*_7);                 // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _0 = Option::<&mut u32>::Some(_6); // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        goto -> bb3;                     // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-    }\n-\n-    bb2: {\n-        _0 = const Option::<&mut u32>::None; // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: no-location\n-                                         // + literal: Const { ty: Option<&mut u32>, val: Value(Scalar(0x0000000000000000)) }\n+        StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _9 = &mut (*_8);                 // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _0 = Option::<&mut u32>::Some(_9); // scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         goto -> bb3;                     // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n     }\n \n     bb3: {\n-        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageDead(_6);                 // scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageDead(_9);                 // scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         return;                          // scope 0 at $DIR/slice_index.rs:+2:2: +2:2\n     }\n }"}, {"sha": "6d9ec5d9a27f51fa4ce2194e8eb1133b3df1540e", "filename": "tests/mir-opt/pre-codegen/slice_index.slice_get_unchecked_mut_range.PreCodegen.after.mir", "status": "modified", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_get_unchecked_mut_range.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_get_unchecked_mut_range.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_index.slice_get_unchecked_mut_range.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -8,61 +8,61 @@ fn slice_get_unchecked_mut_range(_1: &mut [u32], _2: std::ops::Range<usize>) ->\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         debug index => _2;               // in scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         let mut _3: *mut [u32];          // in scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        let mut _4: *mut [u32];          // in scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        let mut _15: *mut [u32];         // in scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         scope 2 {\n             scope 3 (inlined <std::ops::Range<usize> as SliceIndex<[u32]>>::get_unchecked_mut) { // at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n                 debug self => _2;        // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                debug slice => _4;       // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                let _5: std::ops::Range<usize>; // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                let mut _7: usize;       // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                debug slice => _3;       // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                let mut _4: usize;       // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                let mut _5: usize;       // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                let mut _7: *mut u32;    // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                 let mut _8: usize;       // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                 let mut _9: *mut u32;    // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                let mut _10: *mut u32;   // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                let mut _11: usize;      // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                let mut _12: usize;      // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                let mut _13: std::ops::Range<usize>; // in scope 3 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-                let mut _14: *mut [u32]; // in scope 3 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                let mut _10: usize;      // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                let _16: std::ops::Range<usize>; // in scope 3 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                let mut _17: std::ops::Range<usize>; // in scope 3 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                let mut _18: *mut [u32]; // in scope 3 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                 scope 4 {\n-                    debug this => _5;    // in scope 4 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+                    debug this => _16;   // in scope 4 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                     scope 5 {\n                         let _6: usize;   // in scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                         scope 6 {\n                             debug new_len => _6; // in scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                             scope 11 (inlined ptr::mut_ptr::<impl *mut [u32]>::as_mut_ptr) { // at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                                debug self => _4; // in scope 11 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                debug self => _3; // in scope 11 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                             }\n                             scope 12 (inlined ptr::mut_ptr::<impl *mut u32>::add) { // at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                                debug self => _10; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                debug count => _11; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                debug self => _7; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                debug count => _8; // in scope 12 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                 scope 13 {\n                                 }\n                             }\n                             scope 14 (inlined slice_from_raw_parts_mut::<u32>) { // at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                                 debug data => _9; // in scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                debug len => _12; // in scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                let mut _16: *mut (); // in scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                                debug len => _10; // in scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                                let mut _11: *mut (); // in scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                 scope 15 (inlined ptr::mut_ptr::<impl *mut u32>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                                     debug self => _9; // in scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                 }\n                                 scope 16 (inlined std::ptr::from_raw_parts_mut::<[u32]>) { // at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-                                    debug data_address => _16; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-                                    debug metadata => _12; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-                                    let mut _17: std::ptr::metadata::PtrRepr<[u32]>; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-                                    let mut _18: std::ptr::metadata::PtrComponents<[u32]>; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-                                    let mut _19: *const (); // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    debug data_address => _11; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    debug metadata => _10; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    let mut _12: *const (); // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    let mut _13: std::ptr::metadata::PtrComponents<[u32]>; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    let mut _14: std::ptr::metadata::PtrRepr<[u32]>; // in scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n                                     scope 17 {\n                                     }\n                                 }\n                             }\n                         }\n                         scope 7 (inlined <std::ops::Range<usize> as SliceIndex<[T]>>::get_unchecked_mut::runtime::<u32>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-                            debug this => _13; // in scope 7 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-                            debug slice => _14; // in scope 7 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            debug this => _17; // in scope 7 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            debug slice => _18; // in scope 7 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                             scope 8 (inlined ptr::mut_ptr::<impl *mut [u32]>::len) { // at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-                                debug self => _14; // in scope 8 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                let mut _15: *const [u32]; // in scope 8 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                debug self => _18; // in scope 8 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                let mut _19: *const [u32]; // in scope 8 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                 scope 9 (inlined std::ptr::metadata::<[u32]>) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                    debug ptr => _15; // in scope 9 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+                                    debug ptr => _19; // in scope 9 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n                                     scope 10 {\n                                     }\n                                 }\n@@ -75,60 +75,60 @@ fn slice_get_unchecked_mut_range(_1: &mut [u32], _2: std::ops::Range<usize>) ->\n     }\n \n     bb0: {\n-        StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        _4 = &raw mut (*_1);             // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageLive(_13);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageLive(_14);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         StorageLive(_15);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _3 = &raw mut (*_1);             // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_16);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_17);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_18);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_19);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         StorageLive(_6);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageLive(_7);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _7 = (_2.1: usize);              // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageLive(_8);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _8 = (_2.0: usize);              // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _6 = unchecked_sub::<usize>(move _7, move _8) -> [return: bb1, unwind unreachable]; // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageLive(_4);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _4 = (_2.1: usize);              // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageLive(_5);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _5 = (_2.0: usize);              // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _6 = unchecked_sub::<usize>(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/slice/index.rs:LL:COL\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize, usize) -> usize {unchecked_sub::<usize>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_8);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageDead(_7);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageDead(_5);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageDead(_4);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageLive(_9);                 // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageLive(_7);                 // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _7 = _3 as *mut u32 (PtrToPtr);  // scope 11 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+        StorageLive(_8);                 // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _8 = (_2.0: usize);              // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _9 = Offset(_7, _8);             // scope 13 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+        StorageDead(_8);                 // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageDead(_7);                 // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageLive(_10);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _10 = _4 as *mut u32 (PtrToPtr); // scope 11 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _11 = (_2.0: usize);             // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _9 = Offset(_10, _11);           // scope 13 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        _10 = _6;                        // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n+        StorageLive(_11);                // scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        _11 = _9 as *mut () (PtrToPtr);  // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+        StorageLive(_14);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageLive(_13);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageLive(_12);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _12 = _11 as *const () (Pointer(MutToConstPointer)); // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _13 = ptr::metadata::PtrComponents::<[u32]> { data_address: move _12, metadata: _10 }; // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_12);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _14 = ptr::metadata::PtrRepr::<[u32]> { const_ptr: move _13 }; // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_13);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        _15 = (_14.1: *mut [u32]);       // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_14);                // scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n+        StorageDead(_11);                // scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n         StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        _12 = _6;                        // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageLive(_16);                // scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        _16 = _9 as *mut () (PtrToPtr);  // scope 15 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-        StorageLive(_17);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageLive(_18);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageLive(_19);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        _19 = _16 as *const () (Pointer(MutToConstPointer)); // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        _18 = ptr::metadata::PtrComponents::<[u32]> { data_address: move _19, metadata: _12 }; // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageDead(_19);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        _17 = ptr::metadata::PtrRepr::<[u32]> { const_ptr: move _18 }; // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageDead(_18);                // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        _3 = (_17.1: *mut [u32]);        // scope 17 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageDead(_17);                // scope 16 at $SRC_DIR/core/src/ptr/metadata.rs:LL:COL\n-        StorageDead(_16);                // scope 14 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageDead(_9);                 // scope 6 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n         StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/slice/index.rs:LL:COL\n-        StorageDead(_15);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageDead(_14);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageDead(_13);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        _0 = &mut (*_3);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageDead(_3);                 // scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_19);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_18);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_17);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_16);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _0 = &mut (*_15);                // scope 2 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_15);                // scope 1 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         return;                          // scope 0 at $DIR/slice_index.rs:+2:2: +2:2\n     }\n }"}, {"sha": "0cf1d68d18a2ec091ad61d034f7950cfaefd0eda", "filename": "tests/mir-opt/pre-codegen/slice_iter.forward_loop.PreCodegen.after.mir", "status": "modified", "additions": 105, "deletions": 105, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.forward_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.forward_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.forward_loop.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -4,41 +4,41 @@ fn forward_loop(_1: &[T], _2: impl Fn(&T)) -> () {\n     debug slice => _1;                   // in scope 0 at $DIR/slice_iter.rs:+0:28: +0:33\n     debug f => _2;                       // in scope 0 at $DIR/slice_iter.rs:+0:44: +0:45\n     let mut _0: ();                      // return place in scope 0 at $DIR/slice_iter.rs:+0:60: +0:60\n-    let mut _3: std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-    let mut _4: std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-    let _5: ();                          // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-    let mut _6: std::option::Option<&T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-    let mut _7: &mut std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-    let mut _8: isize;                   // in scope 0 at $DIR/slice_iter.rs:+1:5: +3:6\n-    let mut _10: &impl Fn(&T);           // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:10\n-    let mut _11: (&T,);                  // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:13\n+    let mut _13: std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+    let mut _14: std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+    let mut _15: &mut std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+    let mut _16: std::option::Option<&T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+    let mut _17: isize;                  // in scope 0 at $DIR/slice_iter.rs:+1:5: +3:6\n+    let mut _19: &impl Fn(&T);           // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:10\n+    let mut _20: (&T,);                  // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:13\n+    let _21: ();                         // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n     scope 1 {\n-        debug iter => _4;                // in scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n-        let _9: &T;                      // in scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        debug iter => _14;               // in scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        let _18: &T;                     // in scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n         scope 2 {\n-            debug x => _9;               // in scope 2 at $DIR/slice_iter.rs:+1:9: +1:10\n+            debug x => _18;              // in scope 2 at $DIR/slice_iter.rs:+1:9: +1:10\n         }\n     }\n     scope 3 (inlined core::slice::<impl [T]>::iter) { // at $DIR/slice_iter.rs:28:20: 28:26\n         debug self => _1;                // in scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         scope 4 (inlined std::slice::Iter::<'_, T>::new) { // at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n             debug slice => _1;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-            let _12: *const T;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-            let mut _14: bool;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-            let mut _15: usize;          // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-            let mut _16: usize;          // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-            let mut _17: std::ptr::NonNull<T>; // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-            let mut _18: *mut T;         // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-            let mut _19: *const T;       // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let _4: *const T;            // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _5: bool;            // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _6: usize;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _8: usize;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _9: *mut T;          // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _11: std::ptr::NonNull<T>; // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _12: *const T;       // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n             scope 5 {\n-                debug ptr => _12;        // in scope 5 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                debug ptr => _4;         // in scope 5 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n                 scope 6 {\n-                    let _13: *const T;   // in scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                    let _7: *const T;    // in scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n                     scope 7 {\n-                        debug end => _13; // in scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug end => _7; // in scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n                         scope 13 (inlined NonNull::<T>::new_unchecked) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-                            debug ptr => _18; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n-                            let mut _21: *const T; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            debug ptr => _9; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _10: *const T; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n                             let mut _22: *mut T; // in scope 13 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                             scope 14 {\n                                 scope 15 (inlined NonNull::<T>::new_unchecked::runtime::<T>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n@@ -65,139 +65,139 @@ fn forward_loop(_1: &[T], _2: impl Fn(&T)) -> () {\n                         }\n                     }\n                     scope 9 (inlined invalid::<T>) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-                        debug addr => _15; // in scope 9 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        debug addr => _8; // in scope 9 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                         scope 10 {\n                         }\n                     }\n                     scope 11 (inlined ptr::const_ptr::<impl *const T>::add) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-                        debug self => _12; // in scope 11 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-                        debug count => _16; // in scope 11 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        debug self => _4; // in scope 11 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        debug count => _6; // in scope 11 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n                         scope 12 {\n                         }\n                     }\n                 }\n             }\n             scope 8 (inlined core::slice::<impl [T]>::as_ptr) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n                 debug self => _1;        // in scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-                let mut _20: *const [T]; // in scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+                let mut _3: *const [T];  // in scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n             }\n         }\n     }\n     scope 22 (inlined <std::slice::Iter<'_, T> as IntoIterator>::into_iter) { // at $DIR/slice_iter.rs:28:14: 28:26\n-        debug self => _3;                // in scope 22 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+        debug self => _13;               // in scope 22 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n     }\n \n     bb0: {\n-        StorageLive(_12);                // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageLive(_20);                // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        _20 = &raw const (*_1);          // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        _12 = move _20 as *const T (PtrToPtr); // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageDead(_20);                // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageLive(_13);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageLive(_14);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _14 = const _;                   // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        switchInt(move _14) -> [0: bb11, otherwise: bb10]; // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_4);                 // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_3);                 // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _3 = &raw const (*_1);           // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _4 = move _3 as *const T (PtrToPtr); // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_3);                 // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_7);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_5);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _5 = const _;                    // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n     }\n \n     bb1: {\n-        StorageLive(_6);                 // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n-        _7 = &mut _4;                    // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n-        _6 = <std::slice::Iter<'_, T> as Iterator>::next(_7) -> [return: bb2, unwind: bb8]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n-                                         // mir::Constant\n-                                         // + span: $DIR/slice_iter.rs:28:14: 28:26\n-                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as Iterator>::next}, val: Value(<ZST>) }\n+        StorageLive(_6);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _6 = Len((*_1));                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _7 = Offset(_4, _6);             // scope 12 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+        StorageDead(_6);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb3;                     // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n     }\n \n     bb2: {\n-        _8 = discriminant(_6);           // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n-        switchInt(move _8) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        StorageLive(_8);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _8 = Len((*_1));                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _7 = _8 as *const T (Transmute); // scope 10 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_8);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb3;                     // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n     }\n \n     bb3: {\n-        _9 = ((_6 as Some).0: &T);       // scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n-        StorageLive(_10);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n-        _10 = &_2;                       // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n-        StorageLive(_11);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n-        _11 = (_9,);                     // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n-        _5 = <impl Fn(&T) as Fn<(&T,)>>::call(move _10, move _11) -> [return: bb6, unwind: bb8]; // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+        StorageDead(_5);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_11);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_9);                 // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _9 = _4 as *mut T (PtrToPtr);    // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_10);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_22);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_23);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _10 = _9 as *const T (Pointer(MutToConstPointer)); // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _11 = NonNull::<T> { pointer: _10 }; // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_23);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_22);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_10);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_9);                 // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_12);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _12 = _7;                        // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _13 = std::slice::Iter::<'_, T> { ptr: move _11, end: move _12, _marker: const ZeroSized: PhantomData<&T> }; // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n                                          // mir::Constant\n-                                         // + span: $DIR/slice_iter.rs:29:9: 29:10\n-                                         // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(&T), (&T,)) -> <impl Fn(&T) as FnOnce<(&T,)>>::Output {<impl Fn(&T) as Fn<(&T,)>>::call}, val: Value(<ZST>) }\n+                                         // + span: no-location\n+                                         // + literal: Const { ty: PhantomData<&T>, val: Value(<ZST>) }\n+                                         // adt\n+                                         // + user_ty: UserType(1)\n+        StorageDead(_12);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_11);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_7);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_4);                 // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_14);                // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+        _14 = move _13;                  // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+        goto -> bb4;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n     }\n \n     bb4: {\n-        unreachable;                     // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        StorageLive(_16);                // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        _15 = &mut _14;                  // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        _16 = <std::slice::Iter<'_, T> as Iterator>::next(_15) -> [return: bb5, unwind: bb11]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+                                         // mir::Constant\n+                                         // + span: $DIR/slice_iter.rs:28:14: 28:26\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as Iterator>::next}, val: Value(<ZST>) }\n     }\n \n     bb5: {\n-        StorageDead(_6);                 // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n-        StorageDead(_4);                 // scope 0 at $DIR/slice_iter.rs:+3:5: +3:6\n-        drop(_2) -> bb7;                 // scope 0 at $DIR/slice_iter.rs:+4:1: +4:2\n+        _17 = discriminant(_16);         // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n+        switchInt(move _17) -> [0: bb6, 1: bb8, otherwise: bb10]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n     }\n \n     bb6: {\n-        StorageDead(_11);                // scope 2 at $DIR/slice_iter.rs:+2:12: +2:13\n-        StorageDead(_10);                // scope 2 at $DIR/slice_iter.rs:+2:12: +2:13\n-        StorageDead(_6);                 // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n-        goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n+        StorageDead(_16);                // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n+        StorageDead(_14);                // scope 0 at $DIR/slice_iter.rs:+3:5: +3:6\n+        drop(_2) -> bb7;                 // scope 0 at $DIR/slice_iter.rs:+4:1: +4:2\n     }\n \n     bb7: {\n         return;                          // scope 0 at $DIR/slice_iter.rs:+4:2: +4:2\n     }\n \n-    bb8 (cleanup): {\n-        drop(_2) -> [return: bb9, unwind terminate]; // scope 0 at $DIR/slice_iter.rs:+4:1: +4:2\n+    bb8: {\n+        _18 = ((_16 as Some).0: &T);     // scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        StorageLive(_19);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n+        _19 = &_2;                       // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n+        StorageLive(_20);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+        _20 = (_18,);                    // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+        _21 = <impl Fn(&T) as Fn<(&T,)>>::call(move _19, move _20) -> [return: bb9, unwind: bb11]; // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+                                         // mir::Constant\n+                                         // + span: $DIR/slice_iter.rs:29:9: 29:10\n+                                         // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(&T), (&T,)) -> <impl Fn(&T) as FnOnce<(&T,)>>::Output {<impl Fn(&T) as Fn<(&T,)>>::call}, val: Value(<ZST>) }\n     }\n \n-    bb9 (cleanup): {\n-        resume;                          // scope 0 at $DIR/slice_iter.rs:+0:1: +4:2\n+    bb9: {\n+        StorageDead(_20);                // scope 2 at $DIR/slice_iter.rs:+2:12: +2:13\n+        StorageDead(_19);                // scope 2 at $DIR/slice_iter.rs:+2:12: +2:13\n+        StorageDead(_16);                // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n+        goto -> bb4;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n     }\n \n     bb10: {\n-        StorageLive(_15);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _15 = Len((*_1));                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _13 = _15 as *const T (Transmute); // scope 10 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        StorageDead(_15);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        goto -> bb12;                    // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        unreachable;                     // scope 1 at $DIR/slice_iter.rs:+1:14: +1:26\n     }\n \n-    bb11: {\n-        StorageLive(_16);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _16 = Len((*_1));                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _13 = Offset(_12, _16);          // scope 12 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-        StorageDead(_16);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        goto -> bb12;                    // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+    bb11 (cleanup): {\n+        drop(_2) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/slice_iter.rs:+4:1: +4:2\n     }\n \n-    bb12: {\n-        StorageDead(_14);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageLive(_17);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageLive(_18);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _18 = _12 as *mut T (PtrToPtr);  // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageLive(_21);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageLive(_22);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageLive(_23);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _21 = _18 as *const T (Pointer(MutToConstPointer)); // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n-        _17 = NonNull::<T> { pointer: _21 }; // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n-        StorageDead(_23);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageDead(_22);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageDead(_21);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageDead(_18);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageLive(_19);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _19 = _13;                       // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _3 = std::slice::Iter::<'_, T> { ptr: move _17, end: move _19, _marker: const ZeroSized: PhantomData<&T> }; // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: no-location\n-                                         // + literal: Const { ty: PhantomData<&T>, val: Value(<ZST>) }\n-                                         // adt\n-                                         // + user_ty: UserType(1)\n-        StorageDead(_19);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageDead(_17);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageDead(_13);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageDead(_12);                // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageLive(_4);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-        _4 = move _3;                    // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-        goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n+    bb12 (cleanup): {\n+        resume;                          // scope 0 at $DIR/slice_iter.rs:+0:1: +4:2\n     }\n }"}, {"sha": "4fde50c6fe43a0f1067635893b9134fc8e48525e", "filename": "tests/mir-opt/pre-codegen/slice_iter.reverse_loop.PreCodegen.after.mir", "status": "modified", "additions": 125, "deletions": 125, "changes": 250, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.reverse_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.reverse_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.reverse_loop.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -4,61 +4,61 @@ fn reverse_loop(_1: &[T], _2: impl Fn(&T)) -> () {\n     debug slice => _1;                   // in scope 0 at $DIR/slice_iter.rs:+0:28: +0:33\n     debug f => _2;                       // in scope 0 at $DIR/slice_iter.rs:+0:44: +0:45\n     let mut _0: ();                      // return place in scope 0 at $DIR/slice_iter.rs:+0:60: +0:60\n-    let mut _3: std::iter::Rev<std::slice::Iter<'_, T>>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n-    let mut _4: std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-    let mut _5: std::iter::Rev<std::slice::Iter<'_, T>>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n-    let _6: ();                          // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n-    let mut _7: std::option::Option<&T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n-    let mut _8: &mut std::iter::Rev<std::slice::Iter<'_, T>>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n-    let mut _9: isize;                   // in scope 0 at $DIR/slice_iter.rs:+1:5: +3:6\n-    let mut _11: &impl Fn(&T);           // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:10\n-    let mut _12: (&T,);                  // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:13\n+    let mut _13: std::slice::Iter<'_, T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+    let mut _14: std::iter::Rev<std::slice::Iter<'_, T>>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n+    let mut _15: std::iter::Rev<std::slice::Iter<'_, T>>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n+    let mut _16: &mut std::iter::Rev<std::slice::Iter<'_, T>>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n+    let mut _18: std::option::Option<&T>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n+    let mut _19: isize;                  // in scope 0 at $DIR/slice_iter.rs:+1:5: +3:6\n+    let mut _21: &impl Fn(&T);           // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:10\n+    let mut _22: (&T,);                  // in scope 0 at $DIR/slice_iter.rs:+2:9: +2:13\n+    let _23: ();                         // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n     scope 1 {\n-        debug iter => _5;                // in scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n-        let _10: &T;                     // in scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        debug iter => _15;               // in scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n+        let _20: &T;                     // in scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n         scope 2 {\n-            debug x => _10;              // in scope 2 at $DIR/slice_iter.rs:+1:9: +1:10\n+            debug x => _20;              // in scope 2 at $DIR/slice_iter.rs:+1:9: +1:10\n         }\n         scope 25 (inlined <Rev<std::slice::Iter<'_, T>> as Iterator>::next) { // at $DIR/slice_iter.rs:35:14: 35:32\n-            debug self => _8;            // in scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n-            let mut _25: &mut std::slice::Iter<'_, T>; // in scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+            debug self => _16;           // in scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+            let mut _17: &mut std::slice::Iter<'_, T>; // in scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n         }\n     }\n     scope 3 (inlined core::slice::<impl [T]>::iter) { // at $DIR/slice_iter.rs:35:20: 35:26\n         debug self => _1;                // in scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n         scope 4 (inlined std::slice::Iter::<'_, T>::new) { // at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n             debug slice => _1;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-            let _13: *const T;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-            let mut _15: bool;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-            let mut _16: usize;          // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-            let mut _17: usize;          // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-            let mut _18: std::ptr::NonNull<T>; // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-            let mut _19: *mut T;         // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-            let mut _20: *const T;       // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let _4: *const T;            // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _5: bool;            // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _6: usize;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _8: usize;           // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _9: *mut T;          // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _11: std::ptr::NonNull<T>; // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+            let mut _12: *const T;       // in scope 4 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n             scope 5 {\n-                debug ptr => _13;        // in scope 5 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                debug ptr => _4;         // in scope 5 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n                 scope 6 {\n-                    let _14: *const T;   // in scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                    let _7: *const T;    // in scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n                     scope 7 {\n-                        debug end => _14; // in scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                        debug end => _7; // in scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n                         scope 13 (inlined NonNull::<T>::new_unchecked) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-                            debug ptr => _19; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n-                            let mut _22: *const T; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n-                            let mut _23: *mut T; // in scope 13 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            debug ptr => _9; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _10: *const T; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+                            let mut _24: *mut T; // in scope 13 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                             scope 14 {\n                                 scope 15 (inlined NonNull::<T>::new_unchecked::runtime::<T>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-                                    debug ptr => _23; // in scope 15 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    debug ptr => _24; // in scope 15 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                                     scope 16 (inlined ptr::mut_ptr::<impl *mut T>::is_null) { // at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n-                                        debug self => _23; // in scope 16 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                        let mut _24: *mut u8; // in scope 16 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        debug self => _24; // in scope 16 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        let mut _25: *mut u8; // in scope 16 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                         scope 17 {\n                                             scope 18 (inlined ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                                debug ptr => _24; // in scope 18 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                debug ptr => _25; // in scope 18 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                                 scope 19 (inlined ptr::mut_ptr::<impl *mut u8>::addr) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                                    debug self => _24; // in scope 19 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    debug self => _25; // in scope 19 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                                     scope 20 {\n                                                         scope 21 (inlined ptr::mut_ptr::<impl *mut u8>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                                            debug self => _24; // in scope 21 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                            debug self => _25; // in scope 21 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                                         }\n                                                     }\n                                                 }\n@@ -70,151 +70,151 @@ fn reverse_loop(_1: &[T], _2: impl Fn(&T)) -> () {\n                         }\n                     }\n                     scope 9 (inlined invalid::<T>) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-                        debug addr => _16; // in scope 9 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+                        debug addr => _8; // in scope 9 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n                         scope 10 {\n                         }\n                     }\n                     scope 11 (inlined ptr::const_ptr::<impl *const T>::add) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-                        debug self => _13; // in scope 11 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-                        debug count => _17; // in scope 11 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        debug self => _4; // in scope 11 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+                        debug count => _6; // in scope 11 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n                         scope 12 {\n                         }\n                     }\n                 }\n             }\n             scope 8 (inlined core::slice::<impl [T]>::as_ptr) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n                 debug self => _1;        // in scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-                let mut _21: *const [T]; // in scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+                let mut _3: *const [T];  // in scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n             }\n         }\n     }\n     scope 22 (inlined <std::slice::Iter<'_, T> as Iterator>::rev) { // at $DIR/slice_iter.rs:35:27: 35:32\n-        debug self => _4;                // in scope 22 at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+        debug self => _13;               // in scope 22 at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n         scope 23 (inlined Rev::<std::slice::Iter<'_, T>>::new) { // at $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n-            debug iter => _4;            // in scope 23 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+            debug iter => _13;           // in scope 23 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n         }\n     }\n     scope 24 (inlined <Rev<std::slice::Iter<'_, T>> as IntoIterator>::into_iter) { // at $DIR/slice_iter.rs:35:14: 35:32\n-        debug self => _3;                // in scope 24 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+        debug self => _14;               // in scope 24 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n     }\n \n     bb0: {\n-        StorageLive(_4);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n-        StorageLive(_13);                // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageLive(_21);                // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        _21 = &raw const (*_1);          // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        _13 = move _21 as *const T (PtrToPtr); // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageDead(_21);                // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        StorageLive(_14);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageLive(_15);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _15 = const _;                   // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        switchInt(move _15) -> [0: bb10, otherwise: bb9]; // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_13);                // scope 0 at $DIR/slice_iter.rs:+1:14: +1:26\n+        StorageLive(_4);                 // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_3);                 // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _3 = &raw const (*_1);           // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _4 = move _3 as *const T (PtrToPtr); // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageDead(_3);                 // scope 8 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        StorageLive(_7);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_5);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _5 = const _;                    // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n     }\n \n     bb1: {\n-        StorageLive(_7);                 // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n-        _8 = &mut _5;                    // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n-        StorageLive(_25);                // scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n-        _25 = &mut ((*_8).0: std::slice::Iter<'_, T>); // scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n-        _7 = <std::slice::Iter<'_, T> as DoubleEndedIterator>::next_back(move _25) -> [return: bb12, unwind: bb7]; // scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n-                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as DoubleEndedIterator>::next_back}, val: Value(<ZST>) }\n+        StorageLive(_6);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _6 = Len((*_1));                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _7 = Offset(_4, _6);             // scope 12 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n+        StorageDead(_6);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb3;                     // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n     }\n \n     bb2: {\n-        _10 = ((_7 as Some).0: &T);      // scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n-        StorageLive(_11);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n-        _11 = &_2;                       // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n-        StorageLive(_12);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n-        _12 = (_10,);                    // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n-        _6 = <impl Fn(&T) as Fn<(&T,)>>::call(move _11, move _12) -> [return: bb5, unwind: bb7]; // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n-                                         // mir::Constant\n-                                         // + span: $DIR/slice_iter.rs:36:9: 36:10\n-                                         // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(&T), (&T,)) -> <impl Fn(&T) as FnOnce<(&T,)>>::Output {<impl Fn(&T) as Fn<(&T,)>>::call}, val: Value(<ZST>) }\n+        StorageLive(_8);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _8 = Len((*_1));                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _7 = _8 as *const T (Transmute); // scope 10 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n+        StorageDead(_8);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        goto -> bb3;                     // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n     }\n \n     bb3: {\n-        unreachable;                     // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n+        StorageDead(_5);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_11);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_9);                 // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _9 = _4 as *mut T (PtrToPtr);    // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_10);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_24);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_25);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _10 = _9 as *const T (Pointer(MutToConstPointer)); // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        _11 = NonNull::<T> { pointer: _10 }; // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n+        StorageDead(_25);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_24);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_10);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_9);                 // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageLive(_12);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _12 = _7;                        // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        _13 = std::slice::Iter::<'_, T> { ptr: move _11, end: move _12, _marker: const ZeroSized: PhantomData<&T> }; // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: no-location\n+                                         // + literal: Const { ty: PhantomData<&T>, val: Value(<ZST>) }\n+                                         // adt\n+                                         // + user_ty: UserType(1)\n+        StorageDead(_12);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_11);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_7);                 // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_4);                 // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n+        _14 = Rev::<std::slice::Iter<'_, T>> { iter: move _13 }; // scope 23 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+        StorageDead(_13);                // scope 0 at $DIR/slice_iter.rs:+1:31: +1:32\n+        StorageLive(_15);                // scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n+        _15 = move _14;                  // scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n+        goto -> bb4;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n     }\n \n     bb4: {\n-        StorageDead(_7);                 // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n-        StorageDead(_5);                 // scope 0 at $DIR/slice_iter.rs:+3:5: +3:6\n-        drop(_2) -> bb6;                 // scope 0 at $DIR/slice_iter.rs:+4:1: +4:2\n+        StorageLive(_18);                // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n+        _16 = &mut _15;                  // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n+        StorageLive(_17);                // scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+        _17 = &mut ((*_16).0: std::slice::Iter<'_, T>); // scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+        _18 = <std::slice::Iter<'_, T> as DoubleEndedIterator>::next_back(move _17) -> [return: bb5, unwind: bb11]; // scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as DoubleEndedIterator>::next_back}, val: Value(<ZST>) }\n     }\n \n     bb5: {\n-        StorageDead(_12);                // scope 2 at $DIR/slice_iter.rs:+2:12: +2:13\n-        StorageDead(_11);                // scope 2 at $DIR/slice_iter.rs:+2:12: +2:13\n-        StorageDead(_7);                 // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n-        goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n+        StorageDead(_17);                // scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n+        _19 = discriminant(_18);         // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n+        switchInt(move _19) -> [0: bb6, 1: bb8, otherwise: bb10]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n     }\n \n     bb6: {\n-        return;                          // scope 0 at $DIR/slice_iter.rs:+4:2: +4:2\n+        StorageDead(_18);                // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n+        StorageDead(_15);                // scope 0 at $DIR/slice_iter.rs:+3:5: +3:6\n+        drop(_2) -> bb7;                 // scope 0 at $DIR/slice_iter.rs:+4:1: +4:2\n     }\n \n-    bb7 (cleanup): {\n-        drop(_2) -> [return: bb8, unwind terminate]; // scope 0 at $DIR/slice_iter.rs:+4:1: +4:2\n+    bb7: {\n+        return;                          // scope 0 at $DIR/slice_iter.rs:+4:2: +4:2\n     }\n \n-    bb8 (cleanup): {\n-        resume;                          // scope 0 at $DIR/slice_iter.rs:+0:1: +4:2\n+    bb8: {\n+        _20 = ((_18 as Some).0: &T);     // scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        StorageLive(_21);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n+        _21 = &_2;                       // scope 2 at $DIR/slice_iter.rs:+2:9: +2:10\n+        StorageLive(_22);                // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+        _22 = (_20,);                    // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+        _23 = <impl Fn(&T) as Fn<(&T,)>>::call(move _21, move _22) -> [return: bb9, unwind: bb11]; // scope 2 at $DIR/slice_iter.rs:+2:9: +2:13\n+                                         // mir::Constant\n+                                         // + span: $DIR/slice_iter.rs:36:9: 36:10\n+                                         // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(&T), (&T,)) -> <impl Fn(&T) as FnOnce<(&T,)>>::Output {<impl Fn(&T) as Fn<(&T,)>>::call}, val: Value(<ZST>) }\n     }\n \n     bb9: {\n-        StorageLive(_16);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _16 = Len((*_1));                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _14 = _16 as *const T (Transmute); // scope 10 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n-        StorageDead(_16);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        goto -> bb11;                    // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        StorageDead(_22);                // scope 2 at $DIR/slice_iter.rs:+2:12: +2:13\n+        StorageDead(_21);                // scope 2 at $DIR/slice_iter.rs:+2:12: +2:13\n+        StorageDead(_18);                // scope 1 at $DIR/slice_iter.rs:+3:5: +3:6\n+        goto -> bb4;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n     }\n \n     bb10: {\n-        StorageLive(_17);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _17 = Len((*_1));                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _14 = Offset(_13, _17);          // scope 12 at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n-        StorageDead(_17);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        goto -> bb11;                    // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n+        unreachable;                     // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n     }\n \n-    bb11: {\n-        StorageDead(_15);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageLive(_18);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageLive(_19);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _19 = _13 as *mut T (PtrToPtr);  // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageLive(_22);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageLive(_23);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageLive(_24);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _22 = _19 as *const T (Pointer(MutToConstPointer)); // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n-        _18 = NonNull::<T> { pointer: _22 }; // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n-        StorageDead(_24);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageDead(_23);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageDead(_22);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageDead(_19);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageLive(_20);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _20 = _14;                       // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        _4 = std::slice::Iter::<'_, T> { ptr: move _18, end: move _20, _marker: const ZeroSized: PhantomData<&T> }; // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-                                         // mir::Constant\n-                                         // + span: no-location\n-                                         // + literal: Const { ty: PhantomData<&T>, val: Value(<ZST>) }\n-                                         // adt\n-                                         // + user_ty: UserType(1)\n-        StorageDead(_20);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageDead(_18);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageDead(_14);                // scope 6 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/slice/mod.rs:LL:COL\n-        _3 = Rev::<std::slice::Iter<'_, T>> { iter: move _4 }; // scope 23 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n-        StorageDead(_4);                 // scope 0 at $DIR/slice_iter.rs:+1:31: +1:32\n-        StorageLive(_5);                 // scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n-        _5 = move _3;                    // scope 0 at $DIR/slice_iter.rs:+1:14: +1:32\n-        goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +3:6\n+    bb11 (cleanup): {\n+        drop(_2) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/slice_iter.rs:+4:1: +4:2\n     }\n \n-    bb12: {\n-        StorageDead(_25);                // scope 25 at $SRC_DIR/core/src/iter/adapters/rev.rs:LL:COL\n-        _9 = discriminant(_7);           // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n-        switchInt(move _9) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:32\n+    bb12 (cleanup): {\n+        resume;                          // scope 0 at $DIR/slice_iter.rs:+0:1: +4:2\n     }\n }"}, {"sha": "c3f8745b4220fd3bf3f3bb7fd1b187225679d466", "filename": "tests/mir-opt/pre-codegen/try_identity.new.PreCodegen.after.mir", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Ftry_identity.new.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Ftry_identity.new.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Ftry_identity.new.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -3,15 +3,15 @@\n fn new(_1: Result<T, E>) -> Result<T, E> {\n     debug x => _1;                       // in scope 0 at $DIR/try_identity.rs:+0:14: +0:15\n     let mut _0: std::result::Result<T, E>; // return place in scope 0 at $DIR/try_identity.rs:+0:34: +0:46\n-    let mut _2: std::ops::ControlFlow<E, T>; // in scope 0 at $DIR/try_identity.rs:+2:15: +7:10\n-    let mut _3: isize;                   // in scope 0 at $DIR/try_identity.rs:+4:17: +4:22\n-    let _4: T;                           // in scope 0 at $DIR/try_identity.rs:+4:20: +4:21\n+    let mut _2: isize;                   // in scope 0 at $DIR/try_identity.rs:+4:17: +4:22\n+    let _3: T;                           // in scope 0 at $DIR/try_identity.rs:+4:20: +4:21\n+    let mut _4: std::ops::ControlFlow<E, T>; // in scope 0 at $DIR/try_identity.rs:+2:15: +7:10\n     let _5: E;                           // in scope 0 at $DIR/try_identity.rs:+5:21: +5:22\n     let mut _6: isize;                   // in scope 0 at $DIR/try_identity.rs:+8:13: +8:37\n     let _7: T;                           // in scope 0 at $DIR/try_identity.rs:+8:35: +8:36\n     let _8: E;                           // in scope 0 at $DIR/try_identity.rs:+9:32: +9:33\n     scope 1 {\n-        debug v => _4;                   // in scope 1 at $DIR/try_identity.rs:+4:20: +4:21\n+        debug v => _3;                   // in scope 1 at $DIR/try_identity.rs:+4:20: +4:21\n     }\n     scope 2 {\n         debug e => _5;                   // in scope 2 at $DIR/try_identity.rs:+5:21: +5:22\n@@ -24,47 +24,47 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/try_identity.rs:+2:15: +7:10\n-        _3 = discriminant(_1);           // scope 0 at $DIR/try_identity.rs:+3:19: +3:20\n-        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at $DIR/try_identity.rs:+3:13: +3:20\n+        StorageLive(_4);                 // scope 0 at $DIR/try_identity.rs:+2:15: +7:10\n+        _2 = discriminant(_1);           // scope 0 at $DIR/try_identity.rs:+3:19: +3:20\n+        switchInt(move _2) -> [0: bb1, 1: bb2, otherwise: bb7]; // scope 0 at $DIR/try_identity.rs:+3:13: +3:20\n     }\n \n     bb1: {\n-        _5 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity.rs:+5:21: +5:22\n-        _2 = ControlFlow::<E, T>::Break(move _5); // scope 2 at $DIR/try_identity.rs:+5:27: +5:48\n-        goto -> bb4;                     // scope 0 at $DIR/try_identity.rs:+5:47: +5:48\n+        _3 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity.rs:+4:20: +4:21\n+        _4 = ControlFlow::<E, T>::Continue(move _3); // scope 1 at $DIR/try_identity.rs:+4:26: +4:50\n+        goto -> bb3;                     // scope 0 at $DIR/try_identity.rs:+4:49: +4:50\n     }\n \n     bb2: {\n-        unreachable;                     // scope 0 at $DIR/try_identity.rs:+3:19: +3:20\n+        _5 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity.rs:+5:21: +5:22\n+        _4 = ControlFlow::<E, T>::Break(move _5); // scope 2 at $DIR/try_identity.rs:+5:27: +5:48\n+        goto -> bb3;                     // scope 0 at $DIR/try_identity.rs:+5:47: +5:48\n     }\n \n     bb3: {\n-        _4 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity.rs:+4:20: +4:21\n-        _2 = ControlFlow::<E, T>::Continue(move _4); // scope 1 at $DIR/try_identity.rs:+4:26: +4:50\n-        goto -> bb4;                     // scope 0 at $DIR/try_identity.rs:+4:49: +4:50\n+        _6 = discriminant(_4);           // scope 0 at $DIR/try_identity.rs:+2:15: +7:10\n+        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb7]; // scope 0 at $DIR/try_identity.rs:+2:9: +7:10\n     }\n \n     bb4: {\n-        _6 = discriminant(_2);           // scope 0 at $DIR/try_identity.rs:+2:15: +7:10\n-        switchInt(move _6) -> [0: bb6, 1: bb5, otherwise: bb2]; // scope 0 at $DIR/try_identity.rs:+2:9: +7:10\n+        _7 = move ((_4 as Continue).0: T); // scope 0 at $DIR/try_identity.rs:+8:35: +8:36\n+        _0 = Result::<T, E>::Ok(move _7); // scope 0 at $DIR/try_identity.rs:+1:5: +11:6\n+        StorageDead(_4);                 // scope 0 at $DIR/try_identity.rs:+12:1: +12:2\n+        goto -> bb6;                     // scope 0 at $DIR/try_identity.rs:+12:1: +12:2\n     }\n \n     bb5: {\n-        _8 = move ((_2 as Break).0: E);  // scope 0 at $DIR/try_identity.rs:+9:32: +9:33\n+        _8 = move ((_4 as Break).0: E);  // scope 0 at $DIR/try_identity.rs:+9:32: +9:33\n         _0 = Result::<T, E>::Err(move _8); // scope 4 at $DIR/try_identity.rs:+9:45: +9:51\n-        StorageDead(_2);                 // scope 0 at $DIR/try_identity.rs:+12:1: +12:2\n-        goto -> bb7;                     // scope 0 at $DIR/try_identity.rs:+12:1: +12:2\n+        StorageDead(_4);                 // scope 0 at $DIR/try_identity.rs:+12:1: +12:2\n+        goto -> bb6;                     // scope 0 at $DIR/try_identity.rs:+12:1: +12:2\n     }\n \n     bb6: {\n-        _7 = move ((_2 as Continue).0: T); // scope 0 at $DIR/try_identity.rs:+8:35: +8:36\n-        _0 = Result::<T, E>::Ok(move _7); // scope 0 at $DIR/try_identity.rs:+1:5: +11:6\n-        StorageDead(_2);                 // scope 0 at $DIR/try_identity.rs:+12:1: +12:2\n-        goto -> bb7;                     // scope 0 at $DIR/try_identity.rs:+12:1: +12:2\n+        return;                          // scope 0 at $DIR/try_identity.rs:+12:2: +12:2\n     }\n \n     bb7: {\n-        return;                          // scope 0 at $DIR/try_identity.rs:+12:2: +12:2\n+        unreachable;                     // scope 0 at $DIR/try_identity.rs:+3:19: +3:20\n     }\n }"}, {"sha": "0487c6c3994a23f2b9c48d576910c1852ee78ef4", "filename": "tests/mir-opt/pre-codegen/try_identity.old.PreCodegen.after.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Ftry_identity.old.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fpre-codegen%2Ftry_identity.old.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Ftry_identity.old.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -15,26 +15,26 @@ fn old(_1: Result<T, E>) -> Result<T, E> {\n \n     bb0: {\n         _2 = discriminant(_1);           // scope 0 at $DIR/try_identity.rs:+2:15: +2:16\n-        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at $DIR/try_identity.rs:+2:9: +2:16\n+        switchInt(move _2) -> [0: bb1, 1: bb2, otherwise: bb4]; // scope 0 at $DIR/try_identity.rs:+2:9: +2:16\n     }\n \n     bb1: {\n-        _4 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity.rs:+4:17: +4:18\n-        _0 = Result::<T, E>::Err(move _4); // scope 2 at $DIR/try_identity.rs:+4:30: +4:36\n-        goto -> bb4;                     // scope 0 at $DIR/try_identity.rs:+7:1: +7:2\n+        _3 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity.rs:+3:16: +3:17\n+        _0 = Result::<T, E>::Ok(move _3); // scope 0 at $DIR/try_identity.rs:+1:5: +6:6\n+        goto -> bb3;                     // scope 0 at $DIR/try_identity.rs:+7:1: +7:2\n     }\n \n     bb2: {\n-        unreachable;                     // scope 0 at $DIR/try_identity.rs:+2:15: +2:16\n+        _4 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity.rs:+4:17: +4:18\n+        _0 = Result::<T, E>::Err(move _4); // scope 2 at $DIR/try_identity.rs:+4:30: +4:36\n+        goto -> bb3;                     // scope 0 at $DIR/try_identity.rs:+7:1: +7:2\n     }\n \n     bb3: {\n-        _3 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity.rs:+3:16: +3:17\n-        _0 = Result::<T, E>::Ok(move _3); // scope 0 at $DIR/try_identity.rs:+1:5: +6:6\n-        goto -> bb4;                     // scope 0 at $DIR/try_identity.rs:+7:1: +7:2\n+        return;                          // scope 0 at $DIR/try_identity.rs:+7:2: +7:2\n     }\n \n     bb4: {\n-        return;                          // scope 0 at $DIR/try_identity.rs:+7:2: +7:2\n+        unreachable;                     // scope 0 at $DIR/try_identity.rs:+2:15: +2:16\n     }\n }"}, {"sha": "03618ae28149ce0e80afcf5028841ee24ed1824c", "filename": "tests/mir-opt/tls_access.main.PreCodegen.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Ftls_access.main.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Ftls_access.main.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ftls_access.main.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -2,27 +2,27 @@\n \n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/tls_access.rs:+0:11: +0:11\n-    let _2: *mut u8;                     // in scope 0 at $DIR/tls_access.rs:+2:18: +2:21\n+    let _1: *mut u8;                     // in scope 0 at $DIR/tls_access.rs:+2:18: +2:21\n     let mut _3: *mut u8;                 // in scope 0 at $DIR/tls_access.rs:+3:9: +3:12\n     scope 1 {\n-        let _1: &u8;                     // in scope 1 at $DIR/tls_access.rs:+2:13: +2:14\n+        let _2: &u8;                     // in scope 1 at $DIR/tls_access.rs:+2:13: +2:14\n         scope 2 {\n-            debug a => _1;               // in scope 2 at $DIR/tls_access.rs:+2:13: +2:14\n+            debug a => _2;               // in scope 2 at $DIR/tls_access.rs:+2:13: +2:14\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 1 at $DIR/tls_access.rs:+2:13: +2:14\n-        StorageLive(_2);                 // scope 1 at $DIR/tls_access.rs:+2:18: +2:21\n-        _2 = &/*tls*/ mut FOO;           // scope 1 at $DIR/tls_access.rs:+2:18: +2:21\n-        _1 = &(*_2);                     // scope 1 at $DIR/tls_access.rs:+2:17: +2:21\n+        StorageLive(_2);                 // scope 1 at $DIR/tls_access.rs:+2:13: +2:14\n+        StorageLive(_1);                 // scope 1 at $DIR/tls_access.rs:+2:18: +2:21\n+        _1 = &/*tls*/ mut FOO;           // scope 1 at $DIR/tls_access.rs:+2:18: +2:21\n+        _2 = &(*_1);                     // scope 1 at $DIR/tls_access.rs:+2:17: +2:21\n         StorageLive(_3);                 // scope 2 at $DIR/tls_access.rs:+3:9: +3:12\n         _3 = &/*tls*/ mut FOO;           // scope 2 at $DIR/tls_access.rs:+3:9: +3:12\n         (*_3) = const 42_u8;             // scope 2 at $DIR/tls_access.rs:+3:9: +3:17\n         StorageDead(_3);                 // scope 2 at $DIR/tls_access.rs:+3:17: +3:18\n         _0 = const ();                   // scope 1 at $DIR/tls_access.rs:+1:5: +4:6\n-        StorageDead(_2);                 // scope 1 at $DIR/tls_access.rs:+4:5: +4:6\n         StorageDead(_1);                 // scope 1 at $DIR/tls_access.rs:+4:5: +4:6\n+        StorageDead(_2);                 // scope 1 at $DIR/tls_access.rs:+4:5: +4:6\n         return;                          // scope 0 at $DIR/tls_access.rs:+5:2: +5:2\n     }\n }"}, {"sha": "8922eda07acfc483e532bfc97f3bd1692d61a632", "filename": "tests/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -31,18 +31,18 @@ fn while_loop(_1: bool) -> () {\n     }\n \n     bb4: {\n-        switchInt(move _3) -> [0: bb6, otherwise: bb5]; // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n+        switchInt(move _3) -> [0: bb5, otherwise: bb6]; // scope 0 at $DIR/while_storage.rs:+2:12: +2:23\n     }\n \n     bb5: {\n         StorageDead(_3);                 // scope 0 at $DIR/while_storage.rs:+4:9: +4:10\n-        goto -> bb7;                     // scope 0 at no-location\n+        StorageDead(_2);                 // scope 0 at $DIR/while_storage.rs:+5:5: +5:6\n+        goto -> bb1;                     // scope 0 at $DIR/while_storage.rs:+1:5: +5:6\n     }\n \n     bb6: {\n         StorageDead(_3);                 // scope 0 at $DIR/while_storage.rs:+4:9: +4:10\n-        StorageDead(_2);                 // scope 0 at $DIR/while_storage.rs:+5:5: +5:6\n-        goto -> bb1;                     // scope 0 at $DIR/while_storage.rs:+1:5: +5:6\n+        goto -> bb7;                     // scope 0 at no-location\n     }\n \n     bb7: {"}, {"sha": "2f397f6b5853232ce557d009b143cbcf70103eff", "filename": "tests/ui/borrowck/borrowck-thread-local-static-borrow-outlives-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.stderr?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -4,7 +4,7 @@ error[E0712]: thread-local variable borrowed past end of function\n LL |      assert_static(&FOO);\n    |                    ^^^^ thread-local variables cannot be borrowed beyond the end of the function\n LL | }\n-   | - end of enclosing function is here\n+   |  - end of enclosing function is here\n \n error: aborting due to previous error\n "}, {"sha": "3e3706bcb7de9fc36aba1b45f11438c12716c5d0", "filename": "tests/ui/issues/issue-17954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fui%2Fissues%2Fissue-17954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fui%2Fissues%2Fissue-17954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-17954.stderr?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -5,7 +5,7 @@ LL |     let a = &FOO;\n    |             ^^^^ thread-local variables cannot be borrowed beyond the end of the function\n ...\n LL | }\n-   | - end of enclosing function is here\n+   |  - end of enclosing function is here\n \n error: aborting due to previous error\n "}, {"sha": "0812976cf40924d2ef327571f3717d7c1568af58", "filename": "tests/ui/issues/issue-52049.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fui%2Fissues%2Fissue-52049.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fui%2Fissues%2Fissue-52049.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-52049.stderr?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -2,12 +2,10 @@ error[E0716]: temporary value dropped while borrowed\n   --> $DIR/issue-52049.rs:6:10\n    |\n LL |     foo(&unpromotable(5u32));\n-   |     -----^^^^^^^^^^^^^^^^^^-\n+   |     -----^^^^^^^^^^^^^^^^^^-- temporary value is freed at the end of this statement\n    |     |    |\n    |     |    creates a temporary value which is freed while still in use\n    |     argument requires that borrow lasts for `'static`\n-LL | }\n-   | - temporary value is freed at the end of this statement\n \n error: aborting due to previous error\n "}, {"sha": "598f14241913768d2ff6c6fe370eefbcef595629", "filename": "tests/ui/lifetimes/issue-90600-expected-return-static-indirect.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/089677eb32af83318467325edbef9b64053df532/tests%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/089677eb32af83318467325edbef9b64053df532/tests%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr?ref=089677eb32af83318467325edbef9b64053df532", "patch": "@@ -10,7 +10,7 @@ LL |     let read = &refcell as &RefCell<dyn Read>;\n    |                -------- cast requires that `foo` is borrowed for `'static`\n ...\n LL | }\n-   | - `foo` dropped here while still borrowed\n+   |  - `foo` dropped here while still borrowed\n \n error: lifetime may not live long enough\n   --> $DIR/issue-90600-expected-return-static-indirect.rs:9:16"}]}