{"sha": "200a08fc212374f5650c54489ae26f995c60bad9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMGEwOGZjMjEyMzc0ZjU2NTBjNTQ0ODlhZTI2Zjk5NWM2MGJhZDk=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-09-11T03:59:26Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-09-11T04:02:39Z"}, "message": "Remove BasicMacroExpander and BasicIdentMacroExpander\n\nThe spans inside of these types were always None and never used. Pass\nthe expander function directly instead of wrapping it in one of these\ntypes.\n\n[breaking-change]", "tree": {"sha": "0ea53a5c76cd2ec43b5bb2a125ec156de1967313", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ea53a5c76cd2ec43b5bb2a125ec156de1967313"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/200a08fc212374f5650c54489ae26f995c60bad9", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/200a08fc212374f5650c54489ae26f995c60bad9", "html_url": "https://github.com/rust-lang/rust/commit/200a08fc212374f5650c54489ae26f995c60bad9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/200a08fc212374f5650c54489ae26f995c60bad9/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "313cb8acaea05e703441bd5adb92aacce5bf6411", "url": "https://api.github.com/repos/rust-lang/rust/commits/313cb8acaea05e703441bd5adb92aacce5bf6411", "html_url": "https://github.com/rust-lang/rust/commit/313cb8acaea05e703441bd5adb92aacce5bf6411"}], "stats": {"total": 50, "additions": 13, "deletions": 37}, "files": [{"sha": "2b2fc8c94d4acefb122f65dd686cfadf42abd3df", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/200a08fc212374f5650c54489ae26f995c60bad9/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200a08fc212374f5650c54489ae26f995c60bad9/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=200a08fc212374f5650c54489ae26f995c60bad9", "patch": "@@ -13,7 +13,7 @@\n use lint::{LintPassObject, LintId, Lint};\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n-use syntax::ext::base::{IdentTT, LetSyntaxTT, ItemDecorator, ItemModifier, BasicMacroExpander};\n+use syntax::ext::base::{IdentTT, LetSyntaxTT, ItemDecorator, ItemModifier};\n use syntax::ext::base::{MacroExpanderFn};\n use syntax::codemap::Span;\n use syntax::parse::token;\n@@ -71,15 +71,10 @@ impl Registry {\n     /// Register a macro of the usual kind.\n     ///\n     /// This is a convenience wrapper for `register_syntax_extension`.\n-    /// It builds for you a `NormalTT` with a `BasicMacroExpander`,\n+    /// It builds for you a `NormalTT` that calls `expander`,\n     /// and also takes care of interning the macro's name.\n     pub fn register_macro(&mut self, name: &str, expander: MacroExpanderFn) {\n-        self.register_syntax_extension(\n-            token::intern(name),\n-            NormalTT(box BasicMacroExpander {\n-                expander: expander,\n-                span: None,\n-            }, None));\n+        self.register_syntax_extension(token::intern(name), NormalTT(box expander, None));\n     }\n \n     /// Register a compiler lint pass."}, {"sha": "4976e68cc64644976deb6de33fc686646c5dcab1", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 10, "deletions": 29, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/200a08fc212374f5650c54489ae26f995c60bad9/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200a08fc212374f5650c54489ae26f995c60bad9/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=200a08fc212374f5650c54489ae26f995c60bad9", "patch": "@@ -79,11 +79,6 @@ impl ItemModifier for fn(&mut ExtCtxt, Span, Gc<ast::MetaItem>, Gc<ast::Item>) -\n     }\n }\n \n-pub struct BasicMacroExpander {\n-    pub expander: MacroExpanderFn,\n-    pub span: Option<Span>\n-}\n-\n /// Represents a thing that maps token trees to Macro Results\n pub trait TTMacroExpander {\n     fn expand<'cx>(&self,\n@@ -94,24 +89,18 @@ pub trait TTMacroExpander {\n }\n \n pub type MacroExpanderFn =\n-    fn<'cx>(ecx: &'cx mut ExtCtxt, span: codemap::Span, token_tree: &[ast::TokenTree])\n-            -> Box<MacResult+'cx>;\n+    fn<'cx>(&'cx mut ExtCtxt, Span, &[ast::TokenTree]) -> Box<MacResult+'cx>;\n \n-impl TTMacroExpander for BasicMacroExpander {\n+impl TTMacroExpander for MacroExpanderFn {\n     fn expand<'cx>(&self,\n                    ecx: &'cx mut ExtCtxt,\n                    span: Span,\n                    token_tree: &[ast::TokenTree])\n                    -> Box<MacResult+'cx> {\n-        (self.expander)(ecx, span, token_tree)\n+        (*self)(ecx, span, token_tree)\n     }\n }\n \n-pub struct BasicIdentMacroExpander {\n-    pub expander: IdentMacroExpanderFn,\n-    pub span: Option<Span>\n-}\n-\n pub trait IdentMacroExpander {\n     fn expand<'cx>(&self,\n                    cx: &'cx mut ExtCtxt,\n@@ -121,20 +110,20 @@ pub trait IdentMacroExpander {\n                    -> Box<MacResult+'cx>;\n }\n \n-impl IdentMacroExpander for BasicIdentMacroExpander {\n+pub type IdentMacroExpanderFn =\n+    fn<'cx>(&'cx mut ExtCtxt, Span, ast::Ident, Vec<ast::TokenTree>) -> Box<MacResult+'cx>;\n+\n+impl IdentMacroExpander for IdentMacroExpanderFn {\n     fn expand<'cx>(&self,\n                    cx: &'cx mut ExtCtxt,\n                    sp: Span,\n                    ident: ast::Ident,\n                    token_tree: Vec<ast::TokenTree> )\n                    -> Box<MacResult+'cx> {\n-        (self.expander)(cx, sp, ident, token_tree)\n+        (*self)(cx, sp, ident, token_tree)\n     }\n }\n \n-pub type IdentMacroExpanderFn =\n-    fn<'cx>(&'cx mut ExtCtxt, Span, ast::Ident, Vec<ast::TokenTree>) -> Box<MacResult+'cx>;\n-\n /// The result of a macro expansion. The return values of the various\n /// methods are spliced into the AST at the callsite of the macro (or\n /// just into the compiler's internal macro table, for `make_def`).\n@@ -363,20 +352,12 @@ impl BlockInfo {\n fn initial_syntax_expander_table() -> SyntaxEnv {\n     // utility function to simplify creating NormalTT syntax extensions\n     fn builtin_normal_expander(f: MacroExpanderFn) -> SyntaxExtension {\n-        NormalTT(box BasicMacroExpander {\n-                expander: f,\n-                span: None,\n-            },\n-            None)\n+        NormalTT(box f, None)\n     }\n \n     let mut syntax_expanders = SyntaxEnv::new();\n     syntax_expanders.insert(intern(\"macro_rules\"),\n-                            LetSyntaxTT(box BasicIdentMacroExpander {\n-                                expander: ext::tt::macro_rules::add_new_extension,\n-                                span: None,\n-                            },\n-                            None));\n+                            LetSyntaxTT(box ext::tt::macro_rules::add_new_extension, None));\n     syntax_expanders.insert(intern(\"fmt\"),\n                             builtin_normal_expander(\n                                 ext::fmt::expand_syntax_ext));"}]}