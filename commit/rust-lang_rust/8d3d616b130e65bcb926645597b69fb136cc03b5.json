{"sha": "8d3d616b130e65bcb926645597b69fb136cc03b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkM2Q2MTZiMTMwZTY1YmNiOTI2NjQ1NTk3YjY5ZmIxMzZjYzAzYjU=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-10-06T20:40:39Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-10-06T20:40:39Z"}, "message": "Apply review feedback", "tree": {"sha": "4d55bbdc6c8669bdf8d31d38ac8c446f3d0622f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d55bbdc6c8669bdf8d31d38ac8c446f3d0622f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d3d616b130e65bcb926645597b69fb136cc03b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3d616b130e65bcb926645597b69fb136cc03b5", "html_url": "https://github.com/rust-lang/rust/commit/8d3d616b130e65bcb926645597b69fb136cc03b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d3d616b130e65bcb926645597b69fb136cc03b5/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "541369c38e6fac164198fd4298e043b34ccbef9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/541369c38e6fac164198fd4298e043b34ccbef9f", "html_url": "https://github.com/rust-lang/rust/commit/541369c38e6fac164198fd4298e043b34ccbef9f"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "f37d13c3ca32edd8f5d14da928d2468a38b7d07f", "filename": "crates/core_simd/src/macros.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d3d616b130e65bcb926645597b69fb136cc03b5/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3d616b130e65bcb926645597b69fb136cc03b5/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmacros.rs?ref=8d3d616b130e65bcb926645597b69fb136cc03b5", "patch": "@@ -295,8 +295,7 @@ macro_rules! impl_float_vector {\n             #[inline]\n             pub fn abs(self) -> Self {\n                 let no_sign = <$bits_ty>::splat(!0 >> 1);\n-                let abs = unsafe { crate::intrinsics::simd_and(self.to_bits(), no_sign) };\n-                Self::from_bits(abs)\n+                Self::from_bits(self.to_bits() & no_sign)\n             }\n         }\n     };"}, {"sha": "1c969a2e8af3be2c19432e342009a69d72203787", "filename": "crates/core_simd/tests/ops_impl/float_macros.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d3d616b130e65bcb926645597b69fb136cc03b5/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3d616b130e65bcb926645597b69fb136cc03b5/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs?ref=8d3d616b130e65bcb926645597b69fb136cc03b5", "patch": "@@ -19,6 +19,11 @@ macro_rules! float_tests {\n                 value\n             }\n \n+            fn slice_chunks(slice: &[$scalar]) -> impl Iterator<Item = core_simd::$vector> + '_ {\n+                let lanes = core::mem::size_of::<core_simd::$vector>() / core::mem::size_of::<$scalar>();\n+                slice.chunks_exact(lanes).map(from_slice)\n+            }\n+\n             const A: [$scalar; 16] = [0.,   1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14., 15.];\n             const B: [$scalar; 16] = [16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27., 28., 29., 30., 31.];\n             const C: [$scalar; 16] = [\n@@ -303,9 +308,10 @@ macro_rules! float_tests {\n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn abs_odd_floats() {\n-                let v = from_slice(&C);\n-                let expected = apply_unary_lanewise(v, <$scalar>::abs);\n-                assert_biteq!(v.abs(), expected);\n+                for v in slice_chunks(&C) {\n+                    let expected = apply_unary_lanewise(v, <$scalar>::abs);\n+                    assert_biteq!(v.abs(), expected);\n+                }\n             }\n         }\n     }"}]}