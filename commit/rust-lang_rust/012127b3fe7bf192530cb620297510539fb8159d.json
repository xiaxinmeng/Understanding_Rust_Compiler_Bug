{"sha": "012127b3fe7bf192530cb620297510539fb8159d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMjEyN2IzZmU3YmYxOTI1MzBjYjYyMDI5NzUxMDUzOWZiODE1OWQ=", "commit": {"author": {"name": "Umesh Kalappa", "email": "Umesh.Kallapa@windriver.com", "date": "2019-12-09T14:37:29Z"}, "committer": {"name": "BaoshanPang", "email": "pangbw@gmail.com", "date": "2020-01-06T19:04:58Z"}, "message": "Remove weak.rs for VxWorks", "tree": {"sha": "69e1bebd9a59320000babb1ba544fdbafe637cbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69e1bebd9a59320000babb1ba544fdbafe637cbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/012127b3fe7bf192530cb620297510539fb8159d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/012127b3fe7bf192530cb620297510539fb8159d", "html_url": "https://github.com/rust-lang/rust/commit/012127b3fe7bf192530cb620297510539fb8159d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/012127b3fe7bf192530cb620297510539fb8159d/comments", "author": null, "committer": {"login": "BaoshanPang", "id": 3380860, "node_id": "MDQ6VXNlcjMzODA4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3380860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BaoshanPang", "html_url": "https://github.com/BaoshanPang", "followers_url": "https://api.github.com/users/BaoshanPang/followers", "following_url": "https://api.github.com/users/BaoshanPang/following{/other_user}", "gists_url": "https://api.github.com/users/BaoshanPang/gists{/gist_id}", "starred_url": "https://api.github.com/users/BaoshanPang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BaoshanPang/subscriptions", "organizations_url": "https://api.github.com/users/BaoshanPang/orgs", "repos_url": "https://api.github.com/users/BaoshanPang/repos", "events_url": "https://api.github.com/users/BaoshanPang/events{/privacy}", "received_events_url": "https://api.github.com/users/BaoshanPang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebbb2bf37aedaaa64dfaa52ba337ca6efb6b9093", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebbb2bf37aedaaa64dfaa52ba337ca6efb6b9093", "html_url": "https://github.com/rust-lang/rust/commit/ebbb2bf37aedaaa64dfaa52ba337ca6efb6b9093"}], "stats": {"total": 56, "additions": 0, "deletions": 56}, "files": [{"sha": "4c6fddefd3f84c938e2a1ff2a6ffad202022e421", "filename": "src/libstd/sys/vxworks/weak.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ebbb2bf37aedaaa64dfaa52ba337ca6efb6b9093/src%2Flibstd%2Fsys%2Fvxworks%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebbb2bf37aedaaa64dfaa52ba337ca6efb6b9093/src%2Flibstd%2Fsys%2Fvxworks%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fweak.rs?ref=ebbb2bf37aedaaa64dfaa52ba337ca6efb6b9093", "patch": "@@ -1,56 +0,0 @@\n-//! Support for \"weak linkage\" to symbols on Unix\n-//!\n-//! Some I/O operations we do in libstd require newer versions of OSes but we\n-//! need to maintain binary compatibility with older releases for now. In order\n-//! to use the new functionality when available we use this module for\n-//! detection.\n-//!\n-//! One option to use here is weak linkage, but that is unfortunately only\n-//! really workable on Linux. Hence, use dlsym to get the symbol value at\n-//! runtime. This is also done for compatibility with older versions of glibc,\n-//! and to avoid creating dependencies on GLIBC_PRIVATE symbols. It assumes that\n-//! we've been dynamically linked to the library the symbol comes from, but that\n-//! is currently always the case for things like libpthread/libc.\n-//!\n-//! A long time ago this used weak linkage for the __pthread_get_minstack\n-//! symbol, but that caused Debian to detect an unnecessarily strict versioned\n-//! dependency on libc6 (#23628).\n-\n-use crate::ffi::CStr;\n-use crate::marker;\n-use crate::mem;\n-use crate::sync::atomic::{AtomicUsize, Ordering};\n-\n-pub struct Weak<F> {\n-    name: &'static str,\n-    addr: AtomicUsize,\n-    _marker: marker::PhantomData<F>,\n-}\n-\n-impl<F> Weak<F> {\n-    pub const fn new(name: &'static str) -> Weak<F> {\n-        Weak { name, addr: AtomicUsize::new(1), _marker: marker::PhantomData }\n-    }\n-\n-    pub fn get(&self) -> Option<F> {\n-        assert_eq!(mem::size_of::<F>(), mem::size_of::<usize>());\n-        unsafe {\n-            if self.addr.load(Ordering::SeqCst) == 1 {\n-                self.addr.store(fetch(self.name), Ordering::SeqCst);\n-            }\n-            match self.addr.load(Ordering::SeqCst) {\n-                0 => None,\n-                addr => Some(mem::transmute_copy::<usize, F>(&addr)),\n-            }\n-        }\n-    }\n-}\n-\n-unsafe fn fetch(name: &str) -> usize {\n-    let name = match CStr::from_bytes_with_nul(name.as_bytes()) {\n-        Ok(cstr) => cstr,\n-        Err(..) => return 0,\n-    };\n-    assert!(false, \"FIXME: fetch\");\n-    libc::dlsym(libc::RTLD_DEFAULT, name.as_ptr()) as usize\n-}"}]}