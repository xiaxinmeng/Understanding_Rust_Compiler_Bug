{"sha": "a908716ec6ac70de274d5f7bcc06c6d9c343ae10", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MDg3MTZlYzZhYzcwZGUyNzRkNWY3YmNjMDZjNmQ5YzM0M2FlMTA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-12T19:36:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-12T19:36:58Z"}, "message": "Rollup merge of #69040 - jethrogb:jb/cleanup-sgx-entry, r=nagisa\n\nCleanup SGX entry code\n\ncc @aandyl", "tree": {"sha": "baa10b3b039d83f72bb38c443102cd14e501a5cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baa10b3b039d83f72bb38c443102cd14e501a5cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a908716ec6ac70de274d5f7bcc06c6d9c343ae10", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRFPaCRBK7hj4Ov3rIwAAdHIIABTeEvisUVnrz8oVGw/tB//U\nGQ5ErAYzTZlobhB8UudKt1hQG0Dqb3on9cpDWpXkJKMJbamq3KlgfBbz9Zm3Tcqd\n5ycjouhHvCyFzKdqlZYAPXskWccz4MtkorYigfXmSVZkKR4/Qnunh98iHMZJGn+W\nfgooGjryEFLESbOFvZYdoYFW9QYgQYehzhNn/AET+fSY3DtQmscezFE4nbucrjPf\nfkkcA8Pjt80czYcI1Zb6nzzkxKgG+CmSovE+doEKFaesfYfGTo6n0bLde2jPm/xH\nBvwlgP16+KYc/Pdgk+Jkqm+nC6vNTDNTPoemvRx/cXd0cHB5DjpW0Dko9KNUelA=\n=oehB\n-----END PGP SIGNATURE-----\n", "payload": "tree baa10b3b039d83f72bb38c443102cd14e501a5cf\nparent 5a800d7ee641054c59199b6960ea30936a0b9de2\nparent 71b9ed4a36748be01826063951310a2da2717a9b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581536218 +0100\ncommitter GitHub <noreply@github.com> 1581536218 +0100\n\nRollup merge of #69040 - jethrogb:jb/cleanup-sgx-entry, r=nagisa\n\nCleanup SGX entry code\n\ncc @aandyl\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a908716ec6ac70de274d5f7bcc06c6d9c343ae10", "html_url": "https://github.com/rust-lang/rust/commit/a908716ec6ac70de274d5f7bcc06c6d9c343ae10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a908716ec6ac70de274d5f7bcc06c6d9c343ae10/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a800d7ee641054c59199b6960ea30936a0b9de2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a800d7ee641054c59199b6960ea30936a0b9de2", "html_url": "https://github.com/rust-lang/rust/commit/5a800d7ee641054c59199b6960ea30936a0b9de2"}, {"sha": "71b9ed4a36748be01826063951310a2da2717a9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b9ed4a36748be01826063951310a2da2717a9b", "html_url": "https://github.com/rust-lang/rust/commit/71b9ed4a36748be01826063951310a2da2717a9b"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "ed4db287229dce8726c9ab5e2d911c6bbd3bbe61", "filename": "src/libstd/sys/sgx/abi/entry.S", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a908716ec6ac70de274d5f7bcc06c6d9c343ae10/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "raw_url": "https://github.com/rust-lang/rust/raw/a908716ec6ac70de274d5f7bcc06c6d9c343ae10/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fentry.S?ref=a908716ec6ac70de274d5f7bcc06c6d9c343ae10", "patch": "@@ -30,6 +30,14 @@ IMAGE_BASE:\n \n /*  We can store a bunch of data in the gap between MXCSR and the XSAVE header */\n \n+/* MXCSR initialization value for ABI */\n+.Lmxcsr_init:\n+    .int 0x1f80\n+\n+/* x87 FPU control word initialization value for ABI */\n+.Lfpucw_init:\n+    .int 0x037f\n+\n /*  The following symbols point at read-only data that will be filled in by the */\n /*  post-linker. */\n \n@@ -134,6 +142,19 @@ elf_entry:\n     ud2                               /* should not be reached  */\n /*  end elf_entry */\n \n+/* This code needs to be called *after* the enclave stack has been setup. */\n+/* There are 3 places where this needs to happen, so this is put in a macro. */\n+.macro entry_sanitize_final\n+/*  Sanitize rflags received from user */\n+/*    - DF flag: x86-64 ABI requires DF to be unset at function entry/exit */\n+/*    - AC flag: AEX on misaligned memory accesses leaks side channel info */\n+    pushfq\n+    andq $~0x40400, (%rsp)\n+    popfq\n+    bt $0,.Laborted(%rip)\n+    jc .Lreentry_panic\n+.endm\n+\n .text\n .global sgx_entry\n .type sgx_entry,function\n@@ -150,25 +171,18 @@ sgx_entry:\n     stmxcsr %gs:tcsls_user_mxcsr\n     fnstcw %gs:tcsls_user_fcw\n \n-/*  reset user state */\n-/*    - DF flag: x86-64 ABI requires DF to be unset at function entry/exit */\n-/*    - AC flag: AEX on misaligned memory accesses leaks side channel info */\n-    pushfq\n-    andq $~0x40400, (%rsp)\n-    popfq\n-\n /*  check for debug buffer pointer */\n     testb  $0xff,DEBUG(%rip)\n     jz .Lskip_debug_init\n     mov %r10,%gs:tcsls_debug_panic_buf_ptr\n .Lskip_debug_init:\n-/*  check for abort */\n-    bt $0,.Laborted(%rip)\n-    jc .Lreentry_panic\n /*  check if returning from usercall */\n     mov %gs:tcsls_last_rsp,%r11\n     test %r11,%r11\n     jnz .Lusercall_ret\n+/*  reset user state */\n+    ldmxcsr .Lmxcsr_init(%rip)\n+    fldcw .Lfpucw_init(%rip)\n /*  setup stack */\n     mov %gs:tcsls_tos,%rsp /*  initially, RSP is not set to the correct value */\n                            /*  here. This is fixed below under \"adjust stack\". */\n@@ -179,6 +193,7 @@ sgx_entry:\n     lea IMAGE_BASE(%rip),%rax\n     add %rax,%rsp\n     mov %rsp,%gs:tcsls_tos\n+    entry_sanitize_final\n /*  call tcs_init */\n /*  store caller-saved registers in callee-saved registers */\n     mov %rdi,%rbx\n@@ -194,7 +209,10 @@ sgx_entry:\n     mov %r13,%rdx\n     mov %r14,%r8\n     mov %r15,%r9\n+    jmp .Lafter_init\n .Lskip_init:\n+    entry_sanitize_final\n+.Lafter_init:\n /*  call into main entry point */\n     load_tcsls_flag_secondary_bool cx /* RCX = entry() argument: secondary: bool */\n     call entry /* RDI, RSI, RDX, R8, R9 passed in from userspace */\n@@ -295,6 +313,7 @@ usercall:\n     ldmxcsr (%rsp)\n     fldcw 4(%rsp)\n     add $8, %rsp\n+    entry_sanitize_final\n     pop %rbx\n     pop %rbp\n     pop %r12"}]}