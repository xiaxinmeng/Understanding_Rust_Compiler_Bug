{"sha": "273299693b85996878907ad256ed55f072ec3f1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MzI5OTY5M2I4NTk5Njg3ODkwN2FkMjU2ZWQ1NWYwNzJlYzNmMWE=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2019-12-09T18:57:55Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2019-12-09T19:07:19Z"}, "message": "Code: enable prettier trailing commas", "tree": {"sha": "16d7de77952895b4cebf1cbb7a18652eaf4d98b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16d7de77952895b4cebf1cbb7a18652eaf4d98b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/273299693b85996878907ad256ed55f072ec3f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/273299693b85996878907ad256ed55f072ec3f1a", "html_url": "https://github.com/rust-lang/rust/commit/273299693b85996878907ad256ed55f072ec3f1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/273299693b85996878907ad256ed55f072ec3f1a/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "897b550049d8889804bb476e305427d07879cd63", "url": "https://api.github.com/repos/rust-lang/rust/commits/897b550049d8889804bb476e305427d07879cd63", "html_url": "https://github.com/rust-lang/rust/commit/897b550049d8889804bb476e305427d07879cd63"}], "stats": {"total": 465, "additions": 233, "deletions": 232}, "files": [{"sha": "7bc08ec31fec5498dd6fdbbe6f108bab026f9f58", "filename": "editors/code/package.json", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -27,8 +27,9 @@\n         \"travis\": \"npm run compile && npm run test && npm run lint && npm run prettier -- --write && git diff --exit-code\"\n     },\n     \"prettier\": {\n+        \"singleQuote\": true,\n         \"tabWidth\": 4,\n-        \"singleQuote\": true\n+        \"trailingComma\": \"all\"\n     },\n     \"dependencies\": {\n         \"lookpath\": \"^1.0.3\","}, {"sha": "9e4ce0eb3c00d802012fc5baef21c1835ba5d9fa", "filename": "editors/code/src/commands/analyzer_status.ts", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -9,15 +9,15 @@ export class TextDocumentContentProvider\n     public syntaxTree: string = 'Not available';\n \n     public provideTextDocumentContent(\n-        uri: vscode.Uri\n+        uri: vscode.Uri,\n     ): vscode.ProviderResult<string> {\n         const editor = vscode.window.activeTextEditor;\n         if (editor == null) {\n             return '';\n         }\n         return Server.client.sendRequest<string>(\n             'rust-analyzer/analyzerStatus',\n-            null\n+            null,\n         );\n     }\n \n@@ -35,30 +35,30 @@ export function makeCommand(context: vscode.ExtensionContext) {\n     context.subscriptions.push(\n         vscode.workspace.registerTextDocumentContentProvider(\n             'rust-analyzer-status',\n-            textDocumentContentProvider\n-        )\n+            textDocumentContentProvider,\n+        ),\n     );\n \n     context.subscriptions.push({\n         dispose() {\n             if (poller != null) {\n                 clearInterval(poller);\n             }\n-        }\n+        },\n     });\n \n     return async function handle() {\n         if (poller == null) {\n             poller = setInterval(\n                 () => textDocumentContentProvider.eventEmitter.fire(statusUri),\n-                1000\n+                1000,\n             );\n         }\n         const document = await vscode.workspace.openTextDocument(statusUri);\n         return vscode.window.showTextDocument(\n             document,\n             vscode.ViewColumn.Two,\n-            true\n+            true,\n         );\n     };\n }"}, {"sha": "8167398b1ce0339ff0fd3b8c113b2570e04db5b2", "filename": "editors/code/src/commands/apply_source_change.ts", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fapply_source_change.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -11,7 +11,7 @@ export interface SourceChange {\n \n export async function handle(change: SourceChange) {\n     const wsEdit = Server.client.protocol2CodeConverter.asWorkspaceEdit(\n-        change.workspaceEdit\n+        change.workspaceEdit,\n     );\n     let created;\n     let moved;\n@@ -33,10 +33,10 @@ export async function handle(change: SourceChange) {\n         await vscode.window.showTextDocument(doc);\n     } else if (toReveal) {\n         const uri = Server.client.protocol2CodeConverter.asUri(\n-            toReveal.textDocument.uri\n+            toReveal.textDocument.uri,\n         );\n         const position = Server.client.protocol2CodeConverter.asPosition(\n-            toReveal.position\n+            toReveal.position,\n         );\n         const editor = vscode.window.activeTextEditor;\n         if (!editor || editor.document.uri.toString() !== uri.toString()) {\n@@ -48,7 +48,7 @@ export async function handle(change: SourceChange) {\n         editor.selection = new vscode.Selection(position, position);\n         editor.revealRange(\n             new vscode.Range(position, position),\n-            vscode.TextEditorRevealType.Default\n+            vscode.TextEditorRevealType.Default,\n         );\n     }\n }"}, {"sha": "512362eb1884dd96b403784a3b48c6c1c5c4d044", "filename": "editors/code/src/commands/cargo_watch.ts", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -9,13 +9,13 @@ import { StatusDisplay } from './watch_status';\n \n import {\n     mapRustDiagnosticToVsCode,\n-    RustDiagnostic\n+    RustDiagnostic,\n } from '../utils/diagnostics/rust';\n import SuggestedFixCollection from '../utils/diagnostics/SuggestedFixCollection';\n import { areDiagnosticsEqual } from '../utils/diagnostics/vscode';\n \n export async function registerCargoWatchProvider(\n-    subscriptions: vscode.Disposable[]\n+    subscriptions: vscode.Disposable[],\n ): Promise<CargoWatchProvider | undefined> {\n     let cargoExists = false;\n \n@@ -30,7 +30,7 @@ export async function registerCargoWatchProvider(\n \n     if (!cargoExists) {\n         vscode.window.showErrorMessage(\n-            `Couldn\\'t find \\'Cargo.toml\\' at ${cargoTomlPath}`\n+            `Couldn\\'t find \\'Cargo.toml\\' at ${cargoTomlPath}`,\n         );\n         return;\n     }\n@@ -52,13 +52,13 @@ export class CargoWatchProvider implements vscode.Disposable {\n \n     constructor() {\n         this.diagnosticCollection = vscode.languages.createDiagnosticCollection(\n-            'rustc'\n+            'rustc',\n         );\n         this.statusDisplay = new StatusDisplay(\n-            Server.config.cargoWatchOptions.command\n+            Server.config.cargoWatchOptions.command,\n         );\n         this.outputChannel = vscode.window.createOutputChannel(\n-            'Cargo Watch Trace'\n+            'Cargo Watch Trace',\n         );\n \n         // Track `rustc`'s suggested fixes so we can convert them to code actions\n@@ -68,15 +68,15 @@ export class CargoWatchProvider implements vscode.Disposable {\n             this.suggestedFixCollection,\n             {\n                 providedCodeActionKinds:\n-                    SuggestedFixCollection.PROVIDED_CODE_ACTION_KINDS\n-            }\n+                    SuggestedFixCollection.PROVIDED_CODE_ACTION_KINDS,\n+            },\n         );\n     }\n \n     public start() {\n         if (this.cargoProcess) {\n             vscode.window.showInformationMessage(\n-                'Cargo Watch is already running'\n+                'Cargo Watch is already running',\n             );\n             return;\n         }\n@@ -95,7 +95,7 @@ export class CargoWatchProvider implements vscode.Disposable {\n \n         const ignoreFlags = Server.config.cargoWatchOptions.ignore.reduce(\n             (flags, pattern) => [...flags, '--ignore', pattern],\n-            [] as string[]\n+            [] as string[],\n         );\n \n         // Start the cargo watch with json message\n@@ -105,8 +105,8 @@ export class CargoWatchProvider implements vscode.Disposable {\n             {\n                 stdio: ['ignore', 'pipe', 'pipe'],\n                 cwd: vscode.workspace.rootPath,\n-                windowsVerbatimArguments: true\n-            }\n+                windowsVerbatimArguments: true,\n+            },\n         );\n \n         const stdoutData = new LineBuffer();\n@@ -130,7 +130,7 @@ export class CargoWatchProvider implements vscode.Disposable {\n \n         this.cargoProcess.on('error', (err: Error) => {\n             this.logError(\n-                'Error on cargo-watch process : {\\n' + err.message + '}\\n'\n+                'Error on cargo-watch process : {\\n' + err.message + '}\\n',\n             );\n         });\n \n@@ -223,12 +223,12 @@ export class CargoWatchProvider implements vscode.Disposable {\n             const fileUri = location.uri;\n \n             const diagnostics: vscode.Diagnostic[] = [\n-                ...(this.diagnosticCollection!.get(fileUri) || [])\n+                ...(this.diagnosticCollection!.get(fileUri) || []),\n             ];\n \n             // If we're building multiple targets it's possible we've already seen this diagnostic\n             const isDuplicate = diagnostics.some(d =>\n-                areDiagnosticsEqual(d, diagnostic)\n+                areDiagnosticsEqual(d, diagnostic),\n             );\n             if (isDuplicate) {\n                 return;\n@@ -241,15 +241,15 @@ export class CargoWatchProvider implements vscode.Disposable {\n                 for (const suggestedFix of suggestedFixes) {\n                     this.suggestedFixCollection.addSuggestedFixForDiagnostic(\n                         suggestedFix,\n-                        diagnostic\n+                        diagnostic,\n                     );\n                 }\n \n                 // Have VsCode query us for the code actions\n                 vscode.commands.executeCommand(\n                     'vscode.executeCodeActionProvider',\n                     fileUri,\n-                    diagnostic.range\n+                    diagnostic.range,\n                 );\n             }\n         }"}, {"sha": "842898020be01133390ed0453ae565a8751496c9", "filename": "editors/code/src/commands/expand_macro.ts", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -3,15 +3,15 @@ import { Position, TextDocumentIdentifier } from 'vscode-languageclient';\n import { Server } from '../server';\n \n export const expandMacroUri = vscode.Uri.parse(\n-    'rust-analyzer://expandMacro/[EXPANSION].rs'\n+    'rust-analyzer://expandMacro/[EXPANSION].rs',\n );\n \n export class ExpandMacroContentProvider\n     implements vscode.TextDocumentContentProvider {\n     public eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n     public provideTextDocumentContent(\n-        uri: vscode.Uri\n+        uri: vscode.Uri,\n     ): vscode.ProviderResult<string> {\n         async function handle() {\n             const editor = vscode.window.activeTextEditor;\n@@ -22,11 +22,11 @@ export class ExpandMacroContentProvider\n             const position = editor.selection.active;\n             const request: MacroExpandParams = {\n                 textDocument: { uri: editor.document.uri.toString() },\n-                position\n+                position,\n             };\n             const expanded = await Server.client.sendRequest<ExpandedMacro>(\n                 'rust-analyzer/expandMacro',\n-                request\n+                request,\n             );\n \n             if (expanded == null) {\n@@ -58,7 +58,7 @@ export function createHandle(provider: ExpandMacroContentProvider) {\n         return vscode.window.showTextDocument(\n             document,\n             vscode.ViewColumn.Two,\n-            true\n+            true,\n         );\n     };\n }"}, {"sha": "13a696758b44a392f2c08e925e1d98ff0c7bd2dd", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -19,5 +19,5 @@ export {\n     runnables,\n     syntaxTree,\n     onEnter,\n-    inlayHints\n+    inlayHints,\n };"}, {"sha": "ac7dcce604b4250d7a659a3a346373e01298be30", "filename": "editors/code/src/commands/inlay_hints.ts", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -15,8 +15,8 @@ interface InlayHint {\n \n const typeHintDecorationType = vscode.window.createTextEditorDecorationType({\n     after: {\n-        color: new vscode.ThemeColor('ralsp.inlayHint')\n-    }\n+        color: new vscode.ThemeColor('ralsp.inlayHint'),\n+    },\n });\n \n export class HintsUpdater {\n@@ -26,13 +26,13 @@ export class HintsUpdater {\n         if (this.displayHints !== displayHints) {\n             this.displayHints = displayHints;\n             return this.refreshVisibleEditorsHints(\n-                displayHints ? undefined : []\n+                displayHints ? undefined : [],\n             );\n         }\n     }\n \n     public async refreshHintsForVisibleEditors(\n-        cause?: TextDocumentChangeEvent\n+        cause?: TextDocumentChangeEvent,\n     ): Promise<void> {\n         if (!this.displayHints) {\n             return;\n@@ -48,21 +48,21 @@ export class HintsUpdater {\n     }\n \n     private async refreshVisibleEditorsHints(\n-        newDecorations?: vscode.DecorationOptions[]\n+        newDecorations?: vscode.DecorationOptions[],\n     ) {\n         const promises: Array<Promise<void>> = [];\n \n         for (const rustEditor of vscode.window.visibleTextEditors.filter(\n-            editor => this.isRustDocument(editor.document)\n+            editor => this.isRustDocument(editor.document),\n         )) {\n             if (newDecorations !== undefined) {\n                 promises.push(\n                     Promise.resolve(\n                         rustEditor.setDecorations(\n                             typeHintDecorationType,\n-                            newDecorations\n-                        )\n-                    )\n+                            newDecorations,\n+                        ),\n+                    ),\n                 );\n             } else {\n                 promises.push(this.updateDecorationsFromServer(rustEditor));\n@@ -79,37 +79,37 @@ export class HintsUpdater {\n     }\n \n     private async updateDecorationsFromServer(\n-        editor: TextEditor\n+        editor: TextEditor,\n     ): Promise<void> {\n         const newHints = await this.queryHints(editor.document.uri.toString());\n         if (newHints !== null) {\n             const newDecorations = newHints.map(hint => ({\n                 range: hint.range,\n                 renderOptions: {\n                     after: {\n-                        contentText: `: ${hint.label}`\n-                    }\n-                }\n+                        contentText: `: ${hint.label}`,\n+                    },\n+                },\n             }));\n             return editor.setDecorations(\n                 typeHintDecorationType,\n-                newDecorations\n+                newDecorations,\n             );\n         }\n     }\n \n     private async queryHints(documentUri: string): Promise<InlayHint[] | null> {\n         const request: InlayHintsParams = {\n-            textDocument: { uri: documentUri }\n+            textDocument: { uri: documentUri },\n         };\n         const client = Server.client;\n         return client\n             .onReady()\n             .then(() =>\n                 client.sendRequest<InlayHint[] | null>(\n                     'rust-analyzer/inlayHints',\n-                    request\n-                )\n+                    request,\n+                ),\n             );\n     }\n }"}, {"sha": "134ddc80164daf6e387c97bb265464ee3bb151f5", "filename": "editors/code/src/commands/join_lines.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fjoin_lines.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -4,7 +4,7 @@ import { Range, TextDocumentIdentifier } from 'vscode-languageclient';\n import { Server } from '../server';\n import {\n     handle as applySourceChange,\n-    SourceChange\n+    SourceChange,\n } from './apply_source_change';\n \n interface JoinLinesParams {\n@@ -19,11 +19,11 @@ export async function handle() {\n     }\n     const request: JoinLinesParams = {\n         range: Server.client.code2ProtocolConverter.asRange(editor.selection),\n-        textDocument: { uri: editor.document.uri.toString() }\n+        textDocument: { uri: editor.document.uri.toString() },\n     };\n     const change = await Server.client.sendRequest<SourceChange>(\n         'rust-analyzer/joinLines',\n-        request\n+        request,\n     );\n     await applySourceChange(change);\n }"}, {"sha": "364208cc75801d361cecb10de6f4be8cd816a362", "filename": "editors/code/src/commands/matching_brace.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -17,15 +17,15 @@ export async function handle() {\n         textDocument: { uri: editor.document.uri.toString() },\n         offsets: editor.selections.map(s => {\n             return Server.client.code2ProtocolConverter.asPosition(s.active);\n-        })\n+        }),\n     };\n     const response = await Server.client.sendRequest<Position[]>(\n         'rust-analyzer/findMatchingBrace',\n-        request\n+        request,\n     );\n     editor.selections = editor.selections.map((sel, idx) => {\n         const active = Server.client.protocol2CodeConverter.asPosition(\n-            response[idx]\n+            response[idx],\n         );\n         const anchor = sel.isEmpty ? active : sel.anchor;\n         return new vscode.Selection(anchor, active);"}, {"sha": "772c64b3c78e6b009f7dd222620d3307cac83d33", "filename": "editors/code/src/commands/on_enter.ts", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -3,7 +3,7 @@ import * as lc from 'vscode-languageclient';\n import { Server } from '../server';\n import {\n     handle as applySourceChange,\n-    SourceChange\n+    SourceChange,\n } from './apply_source_change';\n \n export async function handle(event: { text: string }): Promise<boolean> {\n@@ -18,12 +18,12 @@ export async function handle(event: { text: string }): Promise<boolean> {\n     const request: lc.TextDocumentPositionParams = {\n         textDocument: { uri: editor.document.uri.toString() },\n         position: Server.client.code2ProtocolConverter.asPosition(\n-            editor.selection.active\n-        )\n+            editor.selection.active,\n+        ),\n     };\n     const change = await Server.client.sendRequest<undefined | SourceChange>(\n         'rust-analyzer/onEnter',\n-        request\n+        request,\n     );\n     if (!change) {\n         return false;"}, {"sha": "ad49e1bdbbfae7ea618135d8d702e76dd96f6118", "filename": "editors/code/src/commands/parent_module.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fparent_module.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -11,12 +11,12 @@ export async function handle() {\n     const request: lc.TextDocumentPositionParams = {\n         textDocument: { uri: editor.document.uri.toString() },\n         position: Server.client.code2ProtocolConverter.asPosition(\n-            editor.selection.active\n-        )\n+            editor.selection.active,\n+        ),\n     };\n     const response = await Server.client.sendRequest<lc.Location[]>(\n         'rust-analyzer/parentModule',\n-        request\n+        request,\n     );\n     const loc = response[0];\n     if (loc == null) {"}, {"sha": "9b1c6643d40b24c115b91524b7222fd9be741a55", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -46,17 +46,17 @@ function createTask(spec: Runnable): vscode.Task {\n         label: spec.label,\n         command: spec.bin,\n         args: spec.args,\n-        env: spec.env\n+        env: spec.env,\n     };\n \n     const execOption: vscode.ShellExecutionOptions = {\n         cwd: spec.cwd || '.',\n-        env: definition.env\n+        env: definition.env,\n     };\n     const exec = new vscode.ShellExecution(\n         definition.command,\n         definition.args,\n-        execOption\n+        execOption,\n     );\n \n     const f = vscode.workspace.workspaceFolders![0];\n@@ -66,7 +66,7 @@ function createTask(spec: Runnable): vscode.Task {\n         definition.label,\n         TASK_SOURCE,\n         exec,\n-        ['$rustc']\n+        ['$rustc'],\n     );\n     t.presentationOptions.clear = true;\n     return t;\n@@ -79,17 +79,17 @@ export async function handle() {\n         return;\n     }\n     const textDocument: lc.TextDocumentIdentifier = {\n-        uri: editor.document.uri.toString()\n+        uri: editor.document.uri.toString(),\n     };\n     const params: RunnablesParams = {\n         textDocument,\n         position: Server.client.code2ProtocolConverter.asPosition(\n-            editor.selection.active\n-        )\n+            editor.selection.active,\n+        ),\n     };\n     const runnables = await Server.client.sendRequest<Runnable[]>(\n         'rust-analyzer/runnables',\n-        params\n+        params,\n     );\n     const items: RunnableQuickPick[] = [];\n     if (prevRunnable) {\n@@ -124,7 +124,7 @@ export async function handleSingle(runnable: Runnable) {\n     task.presentationOptions = {\n         reveal: vscode.TaskRevealKind.Always,\n         panel: vscode.TaskPanelKind.Dedicated,\n-        clear: true\n+        clear: true,\n     };\n \n     return vscode.tasks.executeTask(task);\n@@ -136,7 +136,7 @@ export async function handleSingle(runnable: Runnable) {\n  * that, when accepted, allow us to `cargo install cargo-watch` and then run it.\n  */\n export async function interactivelyStartCargoWatch(\n-    context: vscode.ExtensionContext\n+    context: vscode.ExtensionContext,\n ): Promise<CargoWatchProvider | undefined> {\n     if (Server.config.cargoWatchOptions.enableOnStartup === 'disabled') {\n         return;\n@@ -146,7 +146,7 @@ export async function interactivelyStartCargoWatch(\n         const watch = await vscode.window.showInformationMessage(\n             'Start watching changes with cargo? (Executes `cargo watch`, provides inline diagnostics)',\n             'yes',\n-            'no'\n+            'no',\n         );\n         if (watch !== 'yes') {\n             return;\n@@ -157,12 +157,12 @@ export async function interactivelyStartCargoWatch(\n }\n \n export async function startCargoWatch(\n-    context: vscode.ExtensionContext\n+    context: vscode.ExtensionContext,\n ): Promise<CargoWatchProvider | undefined> {\n     const execPromise = util.promisify(child_process.exec);\n \n     const { stderr, code = 0 } = await execPromise(\n-        'cargo watch --version'\n+        'cargo watch --version',\n     ).catch(e => e);\n \n     if (stderr.includes('no such subcommand: `watch`')) {\n@@ -171,7 +171,7 @@ export async function startCargoWatch(\n         const install = await vscode.window.showInformationMessage(\n             msg,\n             'yes',\n-            'no'\n+            'no',\n         );\n         if (install !== 'yes') {\n             return;\n@@ -192,20 +192,20 @@ export async function startCargoWatch(\n                 label,\n                 bin: 'cargo',\n                 args: ['install', 'cargo-watch'],\n-                env: {}\n-            })\n+                env: {},\n+            }),\n         );\n         await taskFinished;\n         const output = await execPromise('cargo watch --version').catch(e => e);\n         if (output.stderr !== '') {\n             vscode.window.showErrorMessage(\n-                `Couldn't install \\`cargo-\\`watch: ${output.stderr}`\n+                `Couldn't install \\`cargo-\\`watch: ${output.stderr}`,\n             );\n             return;\n         }\n     } else if (code !== 0) {\n         vscode.window.showErrorMessage(\n-            `\\`cargo watch\\` failed with ${code}: ${stderr}`\n+            `\\`cargo watch\\` failed with ${code}: ${stderr}`,\n         );\n         return;\n     }"}, {"sha": "89a80550cee08aafa083f64dbcc2e393a23b2c91", "filename": "editors/code/src/commands/syntaxTree.ts", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2FsyntaxTree.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -11,7 +11,7 @@ export class SyntaxTreeContentProvider\n     public syntaxTree: string = 'Not available';\n \n     public provideTextDocumentContent(\n-        uri: vscode.Uri\n+        uri: vscode.Uri,\n     ): vscode.ProviderResult<string> {\n         const editor = vscode.window.activeTextEditor;\n         if (editor == null) {\n@@ -25,17 +25,17 @@ export class SyntaxTreeContentProvider\n             range = editor.selection.isEmpty\n                 ? undefined\n                 : Server.client.code2ProtocolConverter.asRange(\n-                      editor.selection\n+                      editor.selection,\n                   );\n         }\n \n         const request: SyntaxTreeParams = {\n             textDocument: { uri: editor.document.uri.toString() },\n-            range\n+            range,\n         };\n         return Server.client.sendRequest<SyntaxTreeResult>(\n             'rust-analyzer/syntaxTree',\n-            request\n+            request,\n         );\n     }\n \n@@ -70,7 +70,7 @@ export function createHandle(provider: SyntaxTreeContentProvider) {\n         return vscode.window.showTextDocument(\n             document,\n             vscode.ViewColumn.Two,\n-            true\n+            true,\n         );\n     };\n }"}, {"sha": "8d64394c7b696795a7164a94a9153ac305c5a060", "filename": "editors/code/src/commands/watch_status.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -13,7 +13,7 @@ export class StatusDisplay implements vscode.Disposable {\n     constructor(command: string) {\n         this.statusBarItem = vscode.window.createStatusBarItem(\n             vscode.StatusBarAlignment.Left,\n-            10\n+            10,\n         );\n         this.command = command;\n         this.statusBarItem.hide();"}, {"sha": "2d3b6a54ea5bcde41bd0e4975ab00d8da6dbe3eb", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -33,14 +33,14 @@ export class Config {\n         trace: 'off',\n         arguments: '',\n         command: '',\n-        ignore: []\n+        ignore: [],\n     };\n \n     private prevEnhancedTyping: null | boolean = null;\n \n     constructor() {\n         vscode.workspace.onDidChangeConfiguration(_ =>\n-            this.userConfigChanged()\n+            this.userConfigChanged(),\n         );\n         this.userConfigChanged();\n     }\n@@ -53,7 +53,7 @@ export class Config {\n \n         if (config.has('rainbowHighlightingOn')) {\n             this.rainbowHighlightingOn = config.get(\n-                'rainbowHighlightingOn'\n+                'rainbowHighlightingOn',\n             ) as boolean;\n         }\n \n@@ -63,7 +63,7 @@ export class Config {\n \n         if (config.has('enableEnhancedTyping')) {\n             this.enableEnhancedTyping = config.get(\n-                'enableEnhancedTyping'\n+                'enableEnhancedTyping',\n             ) as boolean;\n \n             if (this.prevEnhancedTyping === null) {\n@@ -78,12 +78,12 @@ export class Config {\n             vscode.window\n                 .showInformationMessage(\n                     'Changing enhanced typing setting requires a reload',\n-                    reloadAction\n+                    reloadAction,\n                 )\n                 .then(selectedAction => {\n                     if (selectedAction === reloadAction) {\n                         vscode.commands.executeCommand(\n-                            'workbench.action.reloadWindow'\n+                            'workbench.action.reloadWindow',\n                         );\n                     }\n                 });\n@@ -104,28 +104,28 @@ export class Config {\n         if (config.has('trace.cargo-watch')) {\n             this.cargoWatchOptions.trace = config.get<CargoWatchTraceOptions>(\n                 'trace.cargo-watch',\n-                'off'\n+                'off',\n             );\n         }\n \n         if (config.has('cargo-watch.arguments')) {\n             this.cargoWatchOptions.arguments = config.get<string>(\n                 'cargo-watch.arguments',\n-                ''\n+                '',\n             );\n         }\n \n         if (config.has('cargo-watch.command')) {\n             this.cargoWatchOptions.command = config.get<string>(\n                 'cargo-watch.command',\n-                ''\n+                '',\n             );\n         }\n \n         if (config.has('cargo-watch.ignore')) {\n             this.cargoWatchOptions.ignore = config.get<string[]>(\n                 'cargo-watch.ignore',\n-                []\n+                [],\n             );\n         }\n \n@@ -138,7 +138,7 @@ export class Config {\n         }\n         if (config.has('maxInlayHintLength')) {\n             this.maxInlayHintLength = config.get(\n-                'maxInlayHintLength'\n+                'maxInlayHintLength',\n             ) as number;\n         }\n         if (config.has('excludeGlobs')) {"}, {"sha": "74b91bd48712be1e968ea8b0ec1631d409c6eb09", "filename": "editors/code/src/events/change_active_text_editor.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_active_text_editor.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -3,7 +3,7 @@ import { TextDocumentIdentifier } from 'vscode-languageclient';\n \n import {\n     SyntaxTreeContentProvider,\n-    syntaxTreeUri\n+    syntaxTreeUri,\n } from '../commands/syntaxTree';\n import { Decoration } from '../highlighting';\n import { Server } from '../server';\n@@ -21,11 +21,11 @@ export function makeHandler(syntaxTreeProvider: SyntaxTreeContentProvider) {\n         }\n \n         const params: TextDocumentIdentifier = {\n-            uri: editor.document.uri.toString()\n+            uri: editor.document.uri.toString(),\n         };\n         const decorations = await Server.client.sendRequest<Decoration[]>(\n             'rust-analyzer/decorationsRequest',\n-            params\n+            params,\n         );\n         Server.highlighter.setHighlights(editor, decorations);\n     };"}, {"sha": "2e998e889ba17db5e22a59ad805e7e2eca1c702b", "filename": "editors/code/src/events/change_text_document.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fevents%2Fchange_text_document.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -2,7 +2,7 @@ import * as vscode from 'vscode';\n \n import {\n     SyntaxTreeContentProvider,\n-    syntaxTreeUri\n+    syntaxTreeUri,\n } from '../commands/syntaxTree';\n \n export function createHandler(syntaxTreeProvider: SyntaxTreeContentProvider) {"}, {"sha": "815f3692c0236e11f4dc30f5b3cc14289a2bc19c", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -7,7 +7,7 @@ import { ExpandMacroContentProvider } from './commands/expand_macro';\n import { HintsUpdater } from './commands/inlay_hints';\n import {\n     interactivelyStartCargoWatch,\n-    startCargoWatch\n+    startCargoWatch,\n } from './commands/runnables';\n import { SyntaxTreeContentProvider } from './commands/syntaxTree';\n import * as events from './events';\n@@ -24,7 +24,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     }\n     function overrideCommand(\n         name: string,\n-        f: (...args: any[]) => Promise<boolean>\n+        f: (...args: any[]) => Promise<boolean>,\n     ) {\n         const defaultCmd = `default:${name}`;\n         const original = (...args: any[]) =>\n@@ -46,22 +46,22 @@ export async function activate(context: vscode.ExtensionContext) {\n             });\n         } catch (_) {\n             vscode.window.showWarningMessage(\n-                'Enhanced typing feature is disabled because of incompatibility with VIM extension, consider turning off rust-analyzer.enableEnhancedTyping: https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/README.md#settings'\n+                'Enhanced typing feature is disabled because of incompatibility with VIM extension, consider turning off rust-analyzer.enableEnhancedTyping: https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/README.md#settings',\n             );\n         }\n     }\n \n     // Commands are requests from vscode to the language server\n     registerCommand(\n         'rust-analyzer.analyzerStatus',\n-        commands.analyzerStatus.makeCommand(context)\n+        commands.analyzerStatus.makeCommand(context),\n     );\n     registerCommand('rust-analyzer.collectGarbage', () =>\n-        Server.client.sendRequest<null>('rust-analyzer/collectGarbage', null)\n+        Server.client.sendRequest<null>('rust-analyzer/collectGarbage', null),\n     );\n     registerCommand(\n         'rust-analyzer.matchingBrace',\n-        commands.matchingBrace.handle\n+        commands.matchingBrace.handle,\n     );\n     registerCommand('rust-analyzer.joinLines', commands.joinLines.handle);\n     registerCommand('rust-analyzer.parentModule', commands.parentModule.handle);\n@@ -70,7 +70,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     registerCommand('rust-analyzer.runSingle', commands.runnables.handleSingle);\n     registerCommand(\n         'rust-analyzer.applySourceChange',\n-        commands.applySourceChange.handle\n+        commands.applySourceChange.handle,\n     );\n     registerCommand(\n         'rust-analyzer.showReferences',\n@@ -79,9 +79,9 @@ export async function activate(context: vscode.ExtensionContext) {\n                 'editor.action.showReferences',\n                 vscode.Uri.parse(uri),\n                 Server.client.protocol2CodeConverter.asPosition(position),\n-                locations.map(Server.client.protocol2CodeConverter.asLocation)\n+                locations.map(Server.client.protocol2CodeConverter.asLocation),\n             );\n-        }\n+        },\n     );\n \n     if (Server.config.enableEnhancedTyping) {\n@@ -91,47 +91,47 @@ export async function activate(context: vscode.ExtensionContext) {\n     // Notifications are events triggered by the language server\n     const allNotifications: Iterable<[\n         string,\n-        lc.GenericNotificationHandler\n+        lc.GenericNotificationHandler,\n     ]> = [\n         [\n             'rust-analyzer/publishDecorations',\n-            notifications.publishDecorations.handle\n-        ]\n+            notifications.publishDecorations.handle,\n+        ],\n     ];\n     const syntaxTreeContentProvider = new SyntaxTreeContentProvider();\n     const expandMacroContentProvider = new ExpandMacroContentProvider();\n \n     // The events below are plain old javascript events, triggered and handled by vscode\n     vscode.window.onDidChangeActiveTextEditor(\n-        events.changeActiveTextEditor.makeHandler(syntaxTreeContentProvider)\n+        events.changeActiveTextEditor.makeHandler(syntaxTreeContentProvider),\n     );\n \n     disposeOnDeactivation(\n         vscode.workspace.registerTextDocumentContentProvider(\n             'rust-analyzer',\n-            syntaxTreeContentProvider\n-        )\n+            syntaxTreeContentProvider,\n+        ),\n     );\n     disposeOnDeactivation(\n         vscode.workspace.registerTextDocumentContentProvider(\n             'rust-analyzer',\n-            expandMacroContentProvider\n-        )\n+            expandMacroContentProvider,\n+        ),\n     );\n \n     registerCommand(\n         'rust-analyzer.syntaxTree',\n-        commands.syntaxTree.createHandle(syntaxTreeContentProvider)\n+        commands.syntaxTree.createHandle(syntaxTreeContentProvider),\n     );\n     registerCommand(\n         'rust-analyzer.expandMacro',\n-        commands.expandMacro.createHandle(expandMacroContentProvider)\n+        commands.expandMacro.createHandle(expandMacroContentProvider),\n     );\n \n     vscode.workspace.onDidChangeTextDocument(\n         events.changeTextDocument.createHandler(syntaxTreeContentProvider),\n         null,\n-        context.subscriptions\n+        context.subscriptions,\n     );\n \n     const startServer = () => Server.start(allNotifications);\n@@ -178,25 +178,25 @@ export async function activate(context: vscode.ExtensionContext) {\n                         editorChangeDisposable.dispose();\n                     }\n                     return hintsUpdater.refreshHintsForVisibleEditors();\n-                }\n+                },\n             );\n \n             disposeOnDeactivation(\n                 vscode.window.onDidChangeVisibleTextEditors(_ =>\n-                    hintsUpdater.refreshHintsForVisibleEditors()\n-                )\n+                    hintsUpdater.refreshHintsForVisibleEditors(),\n+                ),\n             );\n             disposeOnDeactivation(\n                 vscode.workspace.onDidChangeTextDocument(e =>\n-                    hintsUpdater.refreshHintsForVisibleEditors(e)\n-                )\n+                    hintsUpdater.refreshHintsForVisibleEditors(e),\n+                ),\n             );\n             disposeOnDeactivation(\n                 vscode.workspace.onDidChangeConfiguration(_ =>\n                     hintsUpdater.toggleHintsDisplay(\n-                        Server.config.displayInlayHints\n-                    )\n-                )\n+                        Server.config.displayInlayHints,\n+                    ),\n+                ),\n             );\n         });\n     }"}, {"sha": "6d50a2f2ded08886227e7d9de60445ba88e3acdc", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -30,19 +30,19 @@ export class Highlighter {\n     > {\n         const decoration = (\n             tag: string,\n-            textDecoration?: string\n+            textDecoration?: string,\n         ): [string, vscode.TextEditorDecorationType] => {\n             const color = new vscode.ThemeColor('ralsp.' + tag);\n             const decor = vscode.window.createTextEditorDecorationType({\n                 color,\n-                textDecoration\n+                textDecoration,\n             });\n             return [tag, decor];\n         };\n \n         const decorations: Iterable<[\n             string,\n-            vscode.TextEditorDecorationType\n+            vscode.TextEditorDecorationType,\n         ]> = [\n             decoration('comment'),\n             decoration('string'),\n@@ -61,7 +61,7 @@ export class Highlighter {\n             decoration('variable'),\n             decoration('variable.mut', 'underline'),\n             decoration('field'),\n-            decoration('module')\n+            decoration('module'),\n         ];\n \n         return new Map<string, vscode.TextEditorDecorationType>(decorations);\n@@ -118,20 +118,20 @@ export class Highlighter {\n                 colorfulIdents\n                     .get(d.bindingHash)![0]\n                     .push(\n-                        Server.client.protocol2CodeConverter.asRange(d.range)\n+                        Server.client.protocol2CodeConverter.asRange(d.range),\n                     );\n             } else {\n                 byTag\n                     .get(d.tag)!\n                     .push(\n-                        Server.client.protocol2CodeConverter.asRange(d.range)\n+                        Server.client.protocol2CodeConverter.asRange(d.range),\n                     );\n             }\n         }\n \n         for (const tag of byTag.keys()) {\n             const dec = this.decorations.get(\n-                tag\n+                tag,\n             ) as vscode.TextEditorDecorationType;\n             const ranges = byTag.get(tag)!;\n             editor.setDecorations(dec, ranges);\n@@ -141,7 +141,7 @@ export class Highlighter {\n             const textDecoration = mut ? 'underline' : undefined;\n             const dec = vscode.window.createTextEditorDecorationType({\n                 light: { color: fancify(hash, 'light'), textDecoration },\n-                dark: { color: fancify(hash, 'dark'), textDecoration }\n+                dark: { color: fancify(hash, 'dark'), textDecoration },\n             });\n             editor.setDecorations(dec, ranges);\n         }"}, {"sha": "00ffb7776b4e270e8b2d9d6f7f1ad872b91555bd", "filename": "editors/code/src/notifications/publish_decorations.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fnotifications%2Fpublish_decorations.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fnotifications%2Fpublish_decorations.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fnotifications%2Fpublish_decorations.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -10,7 +10,7 @@ export interface PublishDecorationsParams {\n \n export function handle(params: PublishDecorationsParams) {\n     const targetEditor = vscode.window.visibleTextEditors.find(\n-        editor => editor.document.uri.toString() === params.uri\n+        editor => editor.document.uri.toString() === params.uri,\n     );\n     if (!Server.config.highlightingOn || !targetEditor) {\n         return;"}, {"sha": "2fe45f1ed6841db0805b1de5d2e995b84d1186de", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -19,7 +19,7 @@ export class Server {\n     public static client: lc.LanguageClient;\n \n     public static async start(\n-        notificationHandlers: Iterable<[string, lc.GenericNotificationHandler]>\n+        notificationHandlers: Iterable<[string, lc.GenericNotificationHandler]>,\n     ) {\n         // '.' Is the fallback if no folder is open\n         // TODO?: Workspace folders support Uri's (eg: file://test.txt). It might be a good idea to test if the uri points to a file.\n@@ -34,20 +34,20 @@ export class Server {\n         if (platform() !== 'win32') {\n             if (!(await lookpath(command))) {\n                 throw new Error(\n-                    `Cannot find rust-analyzer server \\`${command}\\` in PATH.`\n+                    `Cannot find rust-analyzer server \\`${command}\\` in PATH.`,\n                 );\n             }\n         }\n         const run: lc.Executable = {\n             command,\n-            options: { cwd: folder }\n+            options: { cwd: folder },\n         };\n         const serverOptions: lc.ServerOptions = {\n             run,\n-            debug: run\n+            debug: run,\n         };\n         const traceOutputChannel = window.createOutputChannel(\n-            'Rust Analyzer Language Server Trace'\n+            'Rust Analyzer Language Server Trace',\n         );\n         const clientOptions: lc.LanguageClientOptions = {\n             documentSelector: [{ scheme: 'file', language: 'rust' }],\n@@ -58,16 +58,16 @@ export class Server {\n                 excludeGlobs: Server.config.excludeGlobs,\n                 useClientWatching: Server.config.useClientWatching,\n                 featureFlags: Server.config.featureFlags,\n-                withSysroot: Server.config.withSysroot\n+                withSysroot: Server.config.withSysroot,\n             },\n-            traceOutputChannel\n+            traceOutputChannel,\n         };\n \n         Server.client = new lc.LanguageClient(\n             'rust-analyzer',\n             'Rust Analyzer Language Server',\n             serverOptions,\n-            clientOptions\n+            clientOptions,\n         );\n         // HACK: This is an awful way of filtering out the decorations notifications\n         // However, pending proper support, this is the most effecitve approach\n@@ -80,10 +80,10 @@ export class Server {\n                 if (typeof messageOrDataObject === 'string') {\n                     if (\n                         messageOrDataObject.includes(\n-                            'rust-analyzer/publishDecorations'\n+                            'rust-analyzer/publishDecorations',\n                         ) ||\n                         messageOrDataObject.includes(\n-                            'rust-analyzer/decorationsRequest'\n+                            'rust-analyzer/decorationsRequest',\n                         )\n                     ) {\n                         // Don't log publish decorations requests\n@@ -95,7 +95,7 @@ export class Server {\n                     // @ts-ignore\n                     Server.client.logObjectTrace(messageOrDataObject);\n                 }\n-            }\n+            },\n         };\n         Server.client.registerProposedFeatures();\n         Server.client.onReady().then(() => {"}, {"sha": "96ec8c614d093bdda55f1b3aa40e9ded332c2997", "filename": "editors/code/src/test/utils/diagnotics/SuggestedFix.test.ts", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFix.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFix.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFix.test.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -6,12 +6,12 @@ import SuggestedFix from '../../../utils/diagnostics/SuggestedFix';\n \n const location1 = new vscode.Location(\n     vscode.Uri.file('/file/1'),\n-    new vscode.Range(new vscode.Position(1, 2), new vscode.Position(3, 4))\n+    new vscode.Range(new vscode.Position(1, 2), new vscode.Position(3, 4)),\n );\n \n const location2 = new vscode.Location(\n     vscode.Uri.file('/file/2'),\n-    new vscode.Range(new vscode.Position(5, 6), new vscode.Position(7, 8))\n+    new vscode.Range(new vscode.Position(5, 6), new vscode.Position(7, 8)),\n );\n \n describe('SuggestedFix', () => {\n@@ -20,13 +20,13 @@ describe('SuggestedFix', () => {\n             const suggestion1 = new SuggestedFix(\n                 'Replace me!',\n                 location1,\n-                'With this!'\n+                'With this!',\n             );\n \n             const suggestion2 = new SuggestedFix(\n                 'Replace me!',\n                 location1,\n-                'With this!'\n+                'With this!',\n             );\n \n             assert(suggestion1.isEqual(suggestion2));\n@@ -36,13 +36,13 @@ describe('SuggestedFix', () => {\n             const suggestion1 = new SuggestedFix(\n                 'Replace me!',\n                 location1,\n-                'With this!'\n+                'With this!',\n             );\n \n             const suggestion2 = new SuggestedFix(\n                 'Not the same title!',\n                 location1,\n-                'With this!'\n+                'With this!',\n             );\n \n             assert(!suggestion1.isEqual(suggestion2));\n@@ -52,13 +52,13 @@ describe('SuggestedFix', () => {\n             const suggestion1 = new SuggestedFix(\n                 'Replace me!',\n                 location1,\n-                'With this!'\n+                'With this!',\n             );\n \n             const suggestion2 = new SuggestedFix(\n                 'Replace me!',\n                 location1,\n-                'With something else!'\n+                'With something else!',\n             );\n \n             assert(!suggestion1.isEqual(suggestion2));\n@@ -68,13 +68,13 @@ describe('SuggestedFix', () => {\n             const suggestion1 = new SuggestedFix(\n                 'Replace me!',\n                 location1,\n-                'With this!'\n+                'With this!',\n             );\n \n             const suggestion2 = new SuggestedFix(\n                 'Replace me!',\n                 location2,\n-                'With this!'\n+                'With this!',\n             );\n \n             assert(!suggestion1.isEqual(suggestion2));\n@@ -85,14 +85,14 @@ describe('SuggestedFix', () => {\n                 'Replace me!',\n                 location1,\n                 'With this!',\n-                SuggestionApplicability.MachineApplicable\n+                SuggestionApplicability.MachineApplicable,\n             );\n \n             const suggestion2 = new SuggestedFix(\n                 'Replace me!',\n                 location2,\n                 'With this!',\n-                SuggestionApplicability.HasPlaceholders\n+                SuggestionApplicability.HasPlaceholders,\n             );\n \n             assert(!suggestion1.isEqual(suggestion2));\n@@ -104,7 +104,7 @@ describe('SuggestedFix', () => {\n             const suggestion = new SuggestedFix(\n                 'Replace me!',\n                 location1,\n-                'With this!'\n+                'With this!',\n             );\n \n             const codeAction = suggestion.toCodeAction();"}, {"sha": "4c1467b5760279e74917f8c9af169c2a88f1b33c", "filename": "editors/code/src/test/utils/diagnotics/SuggestedFixCollection.test.ts", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFixCollection.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFixCollection.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFixCollection.test.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -8,20 +8,20 @@ const uri1 = vscode.Uri.file('/file/1');\n const uri2 = vscode.Uri.file('/file/2');\n \n const mockDocument1 = ({\n-    uri: uri1\n+    uri: uri1,\n } as unknown) as vscode.TextDocument;\n \n const mockDocument2 = ({\n-    uri: uri2\n+    uri: uri2,\n } as unknown) as vscode.TextDocument;\n \n const range1 = new vscode.Range(\n     new vscode.Position(1, 2),\n-    new vscode.Position(3, 4)\n+    new vscode.Position(3, 4),\n );\n const range2 = new vscode.Range(\n     new vscode.Position(5, 6),\n-    new vscode.Position(7, 8)\n+    new vscode.Position(7, 8),\n );\n \n const diagnostic1 = new vscode.Diagnostic(range1, 'First diagnostic');\n@@ -32,7 +32,7 @@ function suggestion1(): SuggestedFix {\n     return new SuggestedFix(\n         'Replace me!',\n         new vscode.Location(uri1, range1),\n-        'With this!'\n+        'With this!',\n     );\n }\n \n@@ -44,7 +44,7 @@ describe('SuggestedFixCollection', () => {\n         // Specify the document and range that exactly matches\n         const codeActions = suggestedFixes.provideCodeActions(\n             mockDocument1,\n-            range1\n+            range1,\n         );\n \n         assert.strictEqual(codeActions.length, 1);\n@@ -66,7 +66,7 @@ describe('SuggestedFixCollection', () => {\n \n         const codeActions = suggestedFixes.provideCodeActions(\n             mockDocument1,\n-            range2\n+            range2,\n         );\n \n         assert(!codeActions || codeActions.length === 0);\n@@ -78,7 +78,7 @@ describe('SuggestedFixCollection', () => {\n \n         const codeActions = suggestedFixes.provideCodeActions(\n             mockDocument2,\n-            range1\n+            range1,\n         );\n \n         assert(!codeActions || codeActions.length === 0);\n@@ -91,7 +91,7 @@ describe('SuggestedFixCollection', () => {\n \n         const codeActions = suggestedFixes.provideCodeActions(\n             mockDocument1,\n-            range1\n+            range1,\n         );\n \n         assert(!codeActions || codeActions.length === 0);\n@@ -106,7 +106,7 @@ describe('SuggestedFixCollection', () => {\n \n         const codeActions = suggestedFixes.provideCodeActions(\n             mockDocument1,\n-            range1\n+            range1,\n         );\n \n         assert.strictEqual(codeActions.length, 1);"}, {"sha": "cee59061f3b529f1091edf5662401c49ead47c14", "filename": "editors/code/src/test/utils/diagnotics/rust.test.ts", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -6,14 +6,14 @@ import {\n     MappedRustDiagnostic,\n     mapRustDiagnosticToVsCode,\n     RustDiagnostic,\n-    SuggestionApplicability\n+    SuggestionApplicability,\n } from '../../../utils/diagnostics/rust';\n \n function loadDiagnosticFixture(name: string): RustDiagnostic {\n     const jsonText = fs\n         .readFileSync(\n             // We're actually in our JavaScript output directory, climb out\n-            `${__dirname}/../../../../src/test/fixtures/rust-diagnostics/${name}.json`\n+            `${__dirname}/../../../../src/test/fixtures/rust-diagnostics/${name}.json`,\n         )\n         .toString();\n \n@@ -33,21 +33,21 @@ function mapFixtureToVsCode(name: string): MappedRustDiagnostic {\n describe('mapRustDiagnosticToVsCode', () => {\n     it('should map an incompatible type for trait error', () => {\n         const { diagnostic, suggestedFixes } = mapFixtureToVsCode(\n-            'error/E0053'\n+            'error/E0053',\n         );\n \n         assert.strictEqual(\n             diagnostic.severity,\n-            vscode.DiagnosticSeverity.Error\n+            vscode.DiagnosticSeverity.Error,\n         );\n         assert.strictEqual(diagnostic.source, 'rustc');\n         assert.strictEqual(\n             diagnostic.message,\n             [\n                 `method \\`next\\` has an incompatible type for trait`,\n                 `expected type \\`fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>\\``,\n-                `   found type \\`fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>\\``\n-            ].join('\\n')\n+                `   found type \\`fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>\\``,\n+            ].join('\\n'),\n         );\n         assert.strictEqual(diagnostic.code, 'E0053');\n         assert.deepStrictEqual(diagnostic.tags, []);\n@@ -61,24 +61,24 @@ describe('mapRustDiagnosticToVsCode', () => {\n \n     it('should map an unused variable warning', () => {\n         const { diagnostic, suggestedFixes } = mapFixtureToVsCode(\n-            'warning/unused_variables'\n+            'warning/unused_variables',\n         );\n \n         assert.strictEqual(\n             diagnostic.severity,\n-            vscode.DiagnosticSeverity.Warning\n+            vscode.DiagnosticSeverity.Warning,\n         );\n         assert.strictEqual(\n             diagnostic.message,\n             [\n                 'unused variable: `foo`',\n-                '#[warn(unused_variables)] on by default'\n-            ].join('\\n')\n+                '#[warn(unused_variables)] on by default',\n+            ].join('\\n'),\n         );\n         assert.strictEqual(diagnostic.code, 'unused_variables');\n         assert.strictEqual(diagnostic.source, 'rustc');\n         assert.deepStrictEqual(diagnostic.tags, [\n-            vscode.DiagnosticTag.Unnecessary\n+            vscode.DiagnosticTag.Unnecessary,\n         ]);\n \n         // No related information\n@@ -89,29 +89,29 @@ describe('mapRustDiagnosticToVsCode', () => {\n         const [suggestedFix] = suggestedFixes;\n         assert.strictEqual(\n             suggestedFix.title,\n-            'consider prefixing with an underscore: `_foo`'\n+            'consider prefixing with an underscore: `_foo`',\n         );\n         assert.strictEqual(\n             suggestedFix.applicability,\n-            SuggestionApplicability.MachineApplicable\n+            SuggestionApplicability.MachineApplicable,\n         );\n     });\n \n     it('should map a wrong number of parameters error', () => {\n         const { diagnostic, suggestedFixes } = mapFixtureToVsCode(\n-            'error/E0061'\n+            'error/E0061',\n         );\n \n         assert.strictEqual(\n             diagnostic.severity,\n-            vscode.DiagnosticSeverity.Error\n+            vscode.DiagnosticSeverity.Error,\n         );\n         assert.strictEqual(\n             diagnostic.message,\n             [\n                 'this function takes 2 parameters but 3 parameters were supplied',\n-                'expected 2 parameters'\n-            ].join('\\n')\n+                'expected 2 parameters',\n+            ].join('\\n'),\n         );\n         assert.strictEqual(diagnostic.code, 'E0061');\n         assert.strictEqual(diagnostic.source, 'rustc');\n@@ -132,21 +132,21 @@ describe('mapRustDiagnosticToVsCode', () => {\n \n     it('should map a Clippy copy pass by ref warning', () => {\n         const { diagnostic, suggestedFixes } = mapFixtureToVsCode(\n-            'clippy/trivially_copy_pass_by_ref'\n+            'clippy/trivially_copy_pass_by_ref',\n         );\n \n         assert.strictEqual(\n             diagnostic.severity,\n-            vscode.DiagnosticSeverity.Warning\n+            vscode.DiagnosticSeverity.Warning,\n         );\n         assert.strictEqual(diagnostic.source, 'clippy');\n         assert.strictEqual(\n             diagnostic.message,\n             [\n                 'this argument is passed by reference, but would be more efficient if passed by value',\n                 '#[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]',\n-                'for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref'\n-            ].join('\\n')\n+                'for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref',\n+            ].join('\\n'),\n         );\n         assert.strictEqual(diagnostic.code, 'trivially_copy_pass_by_ref');\n         assert.deepStrictEqual(diagnostic.tags, []);\n@@ -165,27 +165,27 @@ describe('mapRustDiagnosticToVsCode', () => {\n         const [suggestedFix] = suggestedFixes;\n         assert.strictEqual(\n             suggestedFix.title,\n-            'consider passing by value instead: `self`'\n+            'consider passing by value instead: `self`',\n         );\n         // Clippy does not mark this with any applicability\n         assert.strictEqual(\n             suggestedFix.applicability,\n-            SuggestionApplicability.Unspecified\n+            SuggestionApplicability.Unspecified,\n         );\n     });\n \n     it('should map a mismatched type error', () => {\n         const { diagnostic, suggestedFixes } = mapFixtureToVsCode(\n-            'error/E0308'\n+            'error/E0308',\n         );\n \n         assert.strictEqual(\n             diagnostic.severity,\n-            vscode.DiagnosticSeverity.Error\n+            vscode.DiagnosticSeverity.Error,\n         );\n         assert.strictEqual(\n             diagnostic.message,\n-            ['mismatched types', 'expected usize, found u32'].join('\\n')\n+            ['mismatched types', 'expected usize, found u32'].join('\\n'),\n         );\n         assert.strictEqual(diagnostic.code, 'E0308');\n         assert.strictEqual(diagnostic.source, 'rustc');"}, {"sha": "4944dd0328ce3ff6000c300a90d5e9687b2fa7a3", "filename": "editors/code/src/test/utils/diagnotics/vscode.test.ts", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Fvscode.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Fvscode.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Fvscode.test.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -5,26 +5,26 @@ import { areDiagnosticsEqual } from '../../../utils/diagnostics/vscode';\n \n const range1 = new vscode.Range(\n     new vscode.Position(1, 2),\n-    new vscode.Position(3, 4)\n+    new vscode.Position(3, 4),\n );\n \n const range2 = new vscode.Range(\n     new vscode.Position(5, 6),\n-    new vscode.Position(7, 8)\n+    new vscode.Position(7, 8),\n );\n \n describe('areDiagnosticsEqual', () => {\n     it('should treat identical diagnostics as equal', () => {\n         const diagnostic1 = new vscode.Diagnostic(\n             range1,\n             'Hello, world!',\n-            vscode.DiagnosticSeverity.Error\n+            vscode.DiagnosticSeverity.Error,\n         );\n \n         const diagnostic2 = new vscode.Diagnostic(\n             range1,\n             'Hello, world!',\n-            vscode.DiagnosticSeverity.Error\n+            vscode.DiagnosticSeverity.Error,\n         );\n \n         assert(areDiagnosticsEqual(diagnostic1, diagnostic2));\n@@ -34,14 +34,14 @@ describe('areDiagnosticsEqual', () => {\n         const diagnostic1 = new vscode.Diagnostic(\n             range1,\n             'Hello, world!',\n-            vscode.DiagnosticSeverity.Error\n+            vscode.DiagnosticSeverity.Error,\n         );\n         diagnostic1.source = 'rustc';\n \n         const diagnostic2 = new vscode.Diagnostic(\n             range1,\n             'Hello, world!',\n-            vscode.DiagnosticSeverity.Error\n+            vscode.DiagnosticSeverity.Error,\n         );\n         diagnostic2.source = 'clippy';\n \n@@ -52,13 +52,13 @@ describe('areDiagnosticsEqual', () => {\n         const diagnostic1 = new vscode.Diagnostic(\n             range1,\n             'Hello, world!',\n-            vscode.DiagnosticSeverity.Error\n+            vscode.DiagnosticSeverity.Error,\n         );\n \n         const diagnostic2 = new vscode.Diagnostic(\n             range2,\n             'Hello, world!',\n-            vscode.DiagnosticSeverity.Error\n+            vscode.DiagnosticSeverity.Error,\n         );\n \n         assert(!areDiagnosticsEqual(diagnostic1, diagnostic2));\n@@ -68,13 +68,13 @@ describe('areDiagnosticsEqual', () => {\n         const diagnostic1 = new vscode.Diagnostic(\n             range1,\n             'Hello, world!',\n-            vscode.DiagnosticSeverity.Error\n+            vscode.DiagnosticSeverity.Error,\n         );\n \n         const diagnostic2 = new vscode.Diagnostic(\n             range1,\n             'Goodbye!, world!',\n-            vscode.DiagnosticSeverity.Error\n+            vscode.DiagnosticSeverity.Error,\n         );\n \n         assert(!areDiagnosticsEqual(diagnostic1, diagnostic2));\n@@ -84,13 +84,13 @@ describe('areDiagnosticsEqual', () => {\n         const diagnostic1 = new vscode.Diagnostic(\n             range1,\n             'Hello, world!',\n-            vscode.DiagnosticSeverity.Warning\n+            vscode.DiagnosticSeverity.Warning,\n         );\n \n         const diagnostic2 = new vscode.Diagnostic(\n             range1,\n             'Hello, world!',\n-            vscode.DiagnosticSeverity.Error\n+            vscode.DiagnosticSeverity.Error,\n         );\n \n         assert(!areDiagnosticsEqual(diagnostic1, diagnostic2));"}, {"sha": "9927daaf6ae78f0fd8136cee9e6a3fd5339739f4", "filename": "editors/code/src/test/utils/index.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Findex.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -17,7 +17,7 @@ import * as path from 'path';\n export function run(): Promise<void> {\n     // Create the mocha test\n     const mocha = new Mocha({\n-        ui: 'bdd'\n+        ui: 'bdd',\n     });\n     mocha.useColors(true);\n "}, {"sha": "6e660bb61d95517f4476512019c88addb9b7e861", "filename": "editors/code/src/utils/diagnostics/SuggestedFix.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFix.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFix.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFix.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -24,7 +24,7 @@ export default class SuggestedFix {\n         title: string,\n         location: vscode.Location,\n         replacement: string,\n-        applicability: SuggestionApplicability = SuggestionApplicability.Unspecified\n+        applicability: SuggestionApplicability = SuggestionApplicability.Unspecified,\n     ) {\n         this.title = title;\n         this.location = location;\n@@ -51,7 +51,7 @@ export default class SuggestedFix {\n     public toCodeAction(): vscode.CodeAction {\n         const codeAction = new vscode.CodeAction(\n             this.title,\n-            vscode.CodeActionKind.QuickFix\n+            vscode.CodeActionKind.QuickFix,\n         );\n \n         const edit = new vscode.WorkspaceEdit();"}, {"sha": "57c9856cfa3cb7ebdad64c3d78622e296d9c7aa5", "filename": "editors/code/src/utils/diagnostics/SuggestedFixCollection.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFixCollection.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFixCollection.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFixCollection.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -38,13 +38,13 @@ export default class SuggestedFixCollection\n      */\n     public addSuggestedFixForDiagnostic(\n         suggestedFix: SuggestedFix,\n-        diagnostic: vscode.Diagnostic\n+        diagnostic: vscode.Diagnostic,\n     ): void {\n         const fileUriString = suggestedFix.location.uri.toString();\n         const fileSuggestions = this.suggestedFixes.get(fileUriString) || [];\n \n         const existingSuggestion = fileSuggestions.find(s =>\n-            s.isEqual(suggestedFix)\n+            s.isEqual(suggestedFix),\n         );\n \n         if (existingSuggestion) {\n@@ -65,7 +65,7 @@ export default class SuggestedFixCollection\n      */\n     public provideCodeActions(\n         document: vscode.TextDocument,\n-        range: vscode.Range\n+        range: vscode.Range,\n     ): vscode.CodeAction[] {\n         const documentUriString = document.uri.toString();\n "}, {"sha": "b6efc0f56490157cbed8b5e399f305b9cc0ed798", "filename": "editors/code/src/utils/diagnostics/rust.ts", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Frust.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Frust.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Frust.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -7,7 +7,7 @@ export enum SuggestionApplicability {\n     MachineApplicable = 'MachineApplicable',\n     HasPlaceholders = 'HasPlaceholders',\n     MaybeIncorrect = 'MaybeIncorrect',\n-    Unspecified = 'Unspecified'\n+    Unspecified = 'Unspecified',\n }\n \n // Reference:\n@@ -69,7 +69,7 @@ function mapSpanToLocation(span: RustDiagnosticSpan): vscode.Location {\n \n     const range = new vscode.Range(\n         new vscode.Position(span.line_start - 1, span.column_start - 1),\n-        new vscode.Position(span.line_end - 1, span.column_end - 1)\n+        new vscode.Position(span.line_end - 1, span.column_end - 1),\n     );\n \n     return new vscode.Location(fileUri, range);\n@@ -81,7 +81,7 @@ function mapSpanToLocation(span: RustDiagnosticSpan): vscode.Location {\n  * If the span is unlabelled this will return `undefined`.\n  */\n function mapSecondarySpanToRelated(\n-    span: RustDiagnosticSpan\n+    span: RustDiagnosticSpan,\n ): vscode.DiagnosticRelatedInformation | undefined {\n     if (!span.label) {\n         // Nothing to label this with\n@@ -107,7 +107,7 @@ function isUnusedOrUnnecessary(rd: RustDiagnostic): boolean {\n         'unused_attributes',\n         'unused_imports',\n         'unused_macros',\n-        'unused_variables'\n+        'unused_variables',\n     ].includes(rd.code.code);\n }\n \n@@ -157,13 +157,13 @@ function mapRustChildDiagnostic(rd: RustDiagnostic): MappedRustChildDiagnostic {\n                 title,\n                 location,\n                 span.suggested_replacement,\n-                span.suggestion_applicability\n-            )\n+                span.suggestion_applicability,\n+            ),\n         };\n     } else {\n         const related = new vscode.DiagnosticRelatedInformation(\n             location,\n-            rd.message\n+            rd.message,\n         );\n \n         return { related };\n@@ -183,7 +183,7 @@ function mapRustChildDiagnostic(rd: RustDiagnostic): MappedRustChildDiagnostic {\n  * If the diagnostic has no primary span this will return `undefined`\n  */\n export function mapRustDiagnosticToVsCode(\n-    rd: RustDiagnostic\n+    rd: RustDiagnostic,\n ): MappedRustDiagnostic | undefined {\n     const primarySpan = rd.spans.find(s => s.is_primary);\n     if (!primarySpan) {\n@@ -223,7 +223,7 @@ export function mapRustDiagnosticToVsCode(\n     const suggestedFixes = [];\n     for (const child of rd.children) {\n         const { related, suggestedFix, messageLine } = mapRustChildDiagnostic(\n-            child\n+            child,\n         );\n \n         if (related) {\n@@ -256,6 +256,6 @@ export function mapRustDiagnosticToVsCode(\n     return {\n         location,\n         diagnostic: vd,\n-        suggestedFixes\n+        suggestedFixes,\n     };\n }"}, {"sha": "f4a5450e2b8c19bc946f2fc6a4488d8797ef583f", "filename": "editors/code/src/utils/diagnostics/vscode.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Fvscode.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Fvscode.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Fvscode.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -3,7 +3,7 @@ import * as vscode from 'vscode';\n /** Compares two `vscode.Diagnostic`s for equality */\n export function areDiagnosticsEqual(\n     left: vscode.Diagnostic,\n-    right: vscode.Diagnostic\n+    right: vscode.Diagnostic,\n ): boolean {\n     return (\n         left.source === right.source &&"}, {"sha": "a1d6b7eafbc8f30eb07a5b5a5eb30d2ca48091b1", "filename": "editors/code/src/utils/processes.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Futils%2Fprocesses.ts", "raw_url": "https://github.com/rust-lang/rust/raw/273299693b85996878907ad256ed55f072ec3f1a/editors%2Fcode%2Fsrc%2Futils%2Fprocesses.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fprocesses.ts?ref=273299693b85996878907ad256ed55f072ec3f1a", "patch": "@@ -22,15 +22,15 @@ export function terminate(process: ChildProcess, cwd?: string): boolean {\n             // Ignore stderr since this is otherwise piped to parent.stderr\n             // which might be already closed.\n             const options: any = {\n-                stdio: ['pipe', 'pipe', 'ignore']\n+                stdio: ['pipe', 'pipe', 'ignore'],\n             };\n             if (cwd) {\n                 options.cwd = cwd;\n             }\n             cp.execFileSync(\n                 'taskkill',\n                 ['/T', '/F', '/PID', process.pid.toString()],\n-                options\n+                options,\n             );\n             return true;\n         } catch (err) {"}]}