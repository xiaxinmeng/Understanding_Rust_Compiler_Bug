{"sha": "6ddd840f36a3951fb1ef9c7649fab161500c8268", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZGQ4NDBmMzZhMzk1MWZiMWVmOWM3NjQ5ZmFiMTYxNTAwYzgyNjg=", "commit": {"author": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-03-14T13:00:02Z"}, "committer": {"name": "\u00d6mer Sinan A\u011facan", "email": "omeragacan@gmail.com", "date": "2021-03-14T13:00:07Z"}, "message": "Minor refactoring in try_index_step\n\nMerges `if-let` and `if x.is_some() { ... }` blocks", "tree": {"sha": "1bc5ca31623f9b89fdd1364007cd0f96fa673edf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bc5ca31623f9b89fdd1364007cd0f96fa673edf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ddd840f36a3951fb1ef9c7649fab161500c8268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ddd840f36a3951fb1ef9c7649fab161500c8268", "html_url": "https://github.com/rust-lang/rust/commit/6ddd840f36a3951fb1ef9c7649fab161500c8268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ddd840f36a3951fb1ef9c7649fab161500c8268/comments", "author": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "osa1", "id": 448274, "node_id": "MDQ6VXNlcjQ0ODI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/448274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/osa1", "html_url": "https://github.com/osa1", "followers_url": "https://api.github.com/users/osa1/followers", "following_url": "https://api.github.com/users/osa1/following{/other_user}", "gists_url": "https://api.github.com/users/osa1/gists{/gist_id}", "starred_url": "https://api.github.com/users/osa1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/osa1/subscriptions", "organizations_url": "https://api.github.com/users/osa1/orgs", "repos_url": "https://api.github.com/users/osa1/repos", "events_url": "https://api.github.com/users/osa1/events{/privacy}", "received_events_url": "https://api.github.com/users/osa1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2caeeb0527894cd61c22b5ca69bda28a2ff64de3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2caeeb0527894cd61c22b5ca69bda28a2ff64de3", "html_url": "https://github.com/rust-lang/rust/commit/2caeeb0527894cd61c22b5ca69bda28a2ff64de3"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "5bd385107ca391be958e6b7d426a8fc0595957b7", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ddd840f36a3951fb1ef9c7649fab161500c8268/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ddd840f36a3951fb1ef9c7649fab161500c8268/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=6ddd840f36a3951fb1ef9c7649fab161500c8268", "patch": "@@ -103,9 +103,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let method =\n                 self.try_overloaded_place_op(expr.span, self_ty, &[input_ty], PlaceOp::Index);\n \n-            let result = method.map(|ok| {\n+            if let Some(result) = method {\n                 debug!(\"try_index_step: success, using overloaded indexing\");\n-                let method = self.register_infer_ok_obligations(ok);\n+                let method = self.register_infer_ok_obligations(result);\n \n                 let mut adjustments = self.adjust_steps(autoderef);\n                 if let ty::Ref(region, _, hir::Mutability::Not) = method.sig.inputs()[0].kind() {\n@@ -128,10 +128,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.apply_adjustments(base_expr, adjustments);\n \n                 self.write_method_call(expr.hir_id, method);\n-                (input_ty, self.make_overloaded_place_return_type(method).ty)\n-            });\n-            if result.is_some() {\n-                return result;\n+\n+                return Some((input_ty, self.make_overloaded_place_return_type(method).ty));\n             }\n         }\n "}]}