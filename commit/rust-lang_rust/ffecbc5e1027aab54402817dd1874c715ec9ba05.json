{"sha": "ffecbc5e1027aab54402817dd1874c715ec9ba05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZWNiYzVlMTAyN2FhYjU0NDAyODE3ZGQxODc0YzcxNWVjOWJhMDU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-17T14:58:12Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-17T20:57:38Z"}, "message": "nll: improve common patterns", "tree": {"sha": "60a8f1b4ac07ee49178656aee43729b2eaf2dfa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60a8f1b4ac07ee49178656aee43729b2eaf2dfa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffecbc5e1027aab54402817dd1874c715ec9ba05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffecbc5e1027aab54402817dd1874c715ec9ba05", "html_url": "https://github.com/rust-lang/rust/commit/ffecbc5e1027aab54402817dd1874c715ec9ba05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffecbc5e1027aab54402817dd1874c715ec9ba05/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bda0c196f7118971801b0f5d6ddce5c6fb74fd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bda0c196f7118971801b0f5d6ddce5c6fb74fd3", "html_url": "https://github.com/rust-lang/rust/commit/2bda0c196f7118971801b0f5d6ddce5c6fb74fd3"}], "stats": {"total": 67, "additions": 32, "deletions": 35}, "files": [{"sha": "a0f832c54493430ff52b70f6d362e2457b4f73cb", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 28, "deletions": 31, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ffecbc5e1027aab54402817dd1874c715ec9ba05/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffecbc5e1027aab54402817dd1874c715ec9ba05/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=ffecbc5e1027aab54402817dd1874c715ec9ba05", "patch": "@@ -439,17 +439,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                             Operand::Move(Place::Local(from)) if *from == target => {\n                                 debug!(\"was_captured_by_trait_object: ty={:?}\", ty);\n                                 // Check the type for a trait object.\n-                                match ty.sty {\n+                                return match ty.sty {\n                                     // `&dyn Trait`\n-                                    ty::TyKind::Ref(_, ty, _) if ty.is_trait() => return true,\n+                                    ty::TyKind::Ref(_, ty, _) if ty.is_trait() => true,\n                                     // `Box<dyn Trait>`\n                                     _ if ty.is_box() && ty.boxed_ty().is_trait() =>\n-                                        return true,\n+                                        true,\n                                     // `dyn Trait`\n-                                    _ if ty.is_trait() => return true,\n+                                    _ if ty.is_trait() => true,\n                                     // Anything else.\n-                                    _ => return false,\n-                                }\n+                                    _ => false,\n+                                };\n                             },\n                             _ => return false,\n                         },\n@@ -464,32 +464,29 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 let terminator = block.terminator();\n                 debug!(\"was_captured_by_trait_object: terminator={:?}\", terminator);\n \n-                match &terminator.kind {\n-                    TerminatorKind::Call {\n-                        destination: Some((Place::Local(dest), block)),\n-                        args,\n-                        ..\n-                    } => {\n-                        debug!(\n-                            \"was_captured_by_trait_object: target={:?} dest={:?} args={:?}\",\n-                            target, dest, args\n-                        );\n-                        // Check if one of the arguments to this function is the target place.\n-                        let found_target = args.iter().any(|arg| {\n-                            if let Operand::Move(Place::Local(potential)) = arg {\n-                                *potential == target\n-                            } else {\n-                                false\n-                            }\n-                        });\n-\n-                        // If it is, follow this to the next block and update the target.\n-                        if found_target {\n-                            target = *dest;\n-                            queue.push(block.start_location());\n+                if let TerminatorKind::Call {\n+                    destination: Some((Place::Local(dest), block)),\n+                    args,\n+                    ..\n+                } = &terminator.kind {\n+                    debug!(\n+                        \"was_captured_by_trait_object: target={:?} dest={:?} args={:?}\",\n+                        target, dest, args\n+                    );\n+                    // Check if one of the arguments to this function is the target place.\n+                    let found_target = args.iter().any(|arg| {\n+                        if let Operand::Move(Place::Local(potential)) = arg {\n+                            *potential == target\n+                        } else {\n+                            false\n                         }\n-                    },\n-                    _ => {},\n+                    });\n+\n+                    // If it is, follow this to the next block and update the target.\n+                    if found_target {\n+                        target = *dest;\n+                        queue.push(block.start_location());\n+                    }\n                 }\n             }\n "}, {"sha": "002f35880ae6b92d1dda52012b3f8cab6e747c89", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ffecbc5e1027aab54402817dd1874c715ec9ba05/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffecbc5e1027aab54402817dd1874c715ec9ba05/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=ffecbc5e1027aab54402817dd1874c715ec9ba05", "patch": "@@ -35,7 +35,7 @@ pub(super) fn generate_invalidates<'cx, 'gcx, 'tcx>(\n     mir: &Mir<'tcx>,\n     borrow_set: &BorrowSet<'tcx>,\n ) {\n-    if !all_facts.is_some() {\n+    if all_facts.is_none() {\n         // Nothing to do if we don't have any facts\n         return;\n     }"}, {"sha": "e07dfda406b19052ad87487f2a148204b07bcb6e", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ffecbc5e1027aab54402817dd1874c715ec9ba05/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffecbc5e1027aab54402817dd1874c715ec9ba05/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=ffecbc5e1027aab54402817dd1874c715ec9ba05", "patch": "@@ -566,10 +566,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             | hir::LifetimeName::Underscore => {\n                 let region_name = self.synthesize_region_name(counter);\n                 let ampersand_span = lifetime.span;\n-                return Some(RegionName {\n+                Some(RegionName {\n                     name: region_name,\n                     source: RegionNameSource::MatchedAdtAndSegment(ampersand_span),\n-                });\n+                })\n             }\n \n             hir::LifetimeName::Implicit => {\n@@ -584,7 +584,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 // T>`. We don't consider this a match; instead we let\n                 // the \"fully elaborated\" type fallback above handle\n                 // it.\n-                return None;\n+                None\n             }\n         }\n     }"}]}