{"sha": "e2c329c72c3d764423c3909c7483cf2fd6659626", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyYzMyOWM3MmMzZDc2NDQyM2MzOTA5Yzc0ODNjZjJmZDY2NTk2MjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-10T01:08:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-10T01:08:05Z"}, "message": "Auto merge of #56269 - nnethercote:_match-Matrix-SmallVec, r=simulacrum\n\nUse a `SmallVec` within `_match::Matrix`.\n\nThis avoids allocations.", "tree": {"sha": "c30353b85f87bf3d9f2bbe3f33665816ddc47e3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c30353b85f87bf3d9f2bbe3f33665816ddc47e3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2c329c72c3d764423c3909c7483cf2fd6659626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2c329c72c3d764423c3909c7483cf2fd6659626", "html_url": "https://github.com/rust-lang/rust/commit/e2c329c72c3d764423c3909c7483cf2fd6659626", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2c329c72c3d764423c3909c7483cf2fd6659626/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cb38a84e7d593106946cae8e25d9cdbf24751ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb38a84e7d593106946cae8e25d9cdbf24751ee", "html_url": "https://github.com/rust-lang/rust/commit/9cb38a84e7d593106946cae8e25d9cdbf24751ee"}, {"sha": "cdc66334242dec2d30a17988ca8d150c65580620", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc66334242dec2d30a17988ca8d150c65580620", "html_url": "https://github.com/rust-lang/rust/commit/cdc66334242dec2d30a17988ca8d150c65580620"}], "stats": {"total": 124, "additions": 65, "deletions": 59}, "files": [{"sha": "d0d3b8316df2d5bae52b471420c54f7989b5d3c2", "filename": "Cargo.lock", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e2c329c72c3d764423c3909c7483cf2fd6659626/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e2c329c72c3d764423c3909c7483cf2fd6659626/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e2c329c72c3d764423c3909c7483cf2fd6659626", "patch": "@@ -349,7 +349,7 @@ dependencies = [\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-normalization 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -489,7 +489,7 @@ dependencies = [\n  \"crossbeam-utils 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1518,7 +1518,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1529,7 +1529,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1992,7 +1992,7 @@ dependencies = [\n  \"rustc_target 0.0.0\",\n  \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n  \"tempfile 3.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2037,7 +2037,7 @@ dependencies = [\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon-core 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stable_deref_trait 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2073,7 +2073,7 @@ name = \"rustc-ap-serialize\"\n version = \"297.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2089,7 +2089,7 @@ dependencies = [\n  \"rustc-ap-serialize 297.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-syntax_pos 297.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2172,7 +2172,7 @@ dependencies = [\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_target 0.0.0\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -2183,7 +2183,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_cratesio_shim 0.0.0\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2288,7 +2288,7 @@ dependencies = [\n  \"rustc-rayon-core 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_cratesio_shim 0.0.0\",\n  \"serialize 0.0.0\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stable_deref_trait 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2322,7 +2322,7 @@ dependencies = [\n  \"rustc_typeck 0.0.0\",\n  \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_ext 0.0.0\",\n  \"syntax_pos 0.0.0\",\n@@ -2428,7 +2428,7 @@ dependencies = [\n  \"rustc_errors 0.0.0\",\n  \"rustc_target 0.0.0\",\n  \"serialize 0.0.0\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -2541,7 +2541,7 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_target 0.0.0\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -2568,7 +2568,7 @@ dependencies = [\n  \"rustc_errors 0.0.0\",\n  \"rustc_platform_intrinsics 0.0.0\",\n  \"rustc_target 0.0.0\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -2737,7 +2737,7 @@ dependencies = [\n name = \"serialize\"\n version = \"0.0.0\"\n dependencies = [\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2757,7 +2757,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"smallvec\"\n-version = \"0.6.5\"\n+version = \"0.6.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2904,7 +2904,7 @@ dependencies = [\n  \"rustc_target 0.0.0\",\n  \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax_pos 0.0.0\",\n ]\n \n@@ -2917,7 +2917,7 @@ dependencies = [\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_target 0.0.0\",\n- \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -3489,7 +3489,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum shell-escape 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"170a13e64f2a51b77a45702ba77287f5c6829375b04a69cf2222acd17d0cfab9\"\n \"checksum shlex 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7fdf1b9db47230893d76faad238fd6097fd6d6a9245cd7a4d90dbd639536bbd2\"\n \"checksum siphasher 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0df90a788073e8d0235a67e50441d47db7c8ad9debd91cbf43736a2a92d36537\"\n-\"checksum smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"153ffa32fd170e9944f7e0838edf824a754ec4c1fc64746fcc9fe1f8fa602e5d\"\n+\"checksum smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b73ea3738b47563803ef814925e69be00799a8c07420be8b996f8e98fb2336db\"\n \"checksum socket2 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c4d11a52082057d87cb5caa31ad812f4504b97ab44732cd8359df2e9ff9f48e7\"\n \"checksum stable_deref_trait 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffbc596e092fe5f598b12ef46cc03754085ac2f4d8c739ad61c4ae266cc3b3fa\"\n \"checksum string_cache 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25d70109977172b127fe834e5449e5ab1740b9ba49fa18a2020f509174f25423\""}, {"sha": "a572b6bf919e1bbf378d5bfa0e9ceb7d3278c2ef", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=e2c329c72c3d764423c3909c7483cf2fd6659626", "patch": "@@ -32,7 +32,7 @@ parking_lot = \"0.6\"\n byteorder = { version = \"1.1\", features = [\"i128\"]}\n chalk-engine = { version = \"0.8.0\", default-features=false }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n-smallvec = { version = \"0.6.5\", features = [\"union\"] }\n+smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n \n # Note that these dependencies are a lie, they're just here to get linkage to\n # work."}, {"sha": "03d33f413c807e92aee7eb7aeea69d4f0dd1f1c5", "filename": "src/librustc_allocator/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_allocator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_allocator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2FCargo.toml?ref=e2c329c72c3d764423c3909c7483cf2fd6659626", "patch": "@@ -16,4 +16,4 @@ rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n log = \"0.4\"\n-smallvec = { version = \"0.6.5\", features = [\"union\"] }\n+smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "248f2d71f41e58d47454ad79716b695b1b43c832", "filename": "src/librustc_apfloat/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_apfloat%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_apfloat%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2FCargo.toml?ref=e2c329c72c3d764423c3909c7483cf2fd6659626", "patch": "@@ -10,4 +10,4 @@ path = \"lib.rs\"\n [dependencies]\n bitflags = \"1.0\"\n rustc_cratesio_shim = { path = \"../librustc_cratesio_shim\" }\n-smallvec = { version = \"0.6.5\", features = [\"union\"] }\n+smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "1754376a5d7f9e7202daa43007574d722a3fd311", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=e2c329c72c3d764423c3909c7483cf2fd6659626", "patch": "@@ -19,7 +19,7 @@ stable_deref_trait = \"1.0.0\"\n rustc-rayon = \"0.1.1\"\n rustc-rayon-core = \"0.1.1\"\n rustc-hash = \"1.0.1\"\n-smallvec = { version = \"0.6.5\", features = [\"union\"] }\n+smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n \n [dependencies.parking_lot]\n version = \"0.6\""}, {"sha": "0356cc9bd545f0e9606f1319636cbf54a7556725", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=e2c329c72c3d764423c3909c7483cf2fd6659626", "patch": "@@ -35,7 +35,7 @@ rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n-smallvec = { version = \"0.6.5\", features = [\"union\"] }\n+smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n syntax_ext = { path = \"../libsyntax_ext\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n "}, {"sha": "5044e351962ed0227d8a4fe36014218014a53875", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=e2c329c72c3d764423c3909c7483cf2fd6659626", "patch": "@@ -25,4 +25,4 @@ syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n byteorder = { version = \"1.1\", features = [\"i128\"] }\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n-smallvec = { version = \"0.6.5\", features = [\"union\"] }\n+smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "4c77350f10ecd7182b8d058fade9b5a02978e614", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=e2c329c72c3d764423c3909c7483cf2fd6659626", "patch": "@@ -190,6 +190,7 @@ use syntax_pos::{Span, DUMMY_SP};\n \n use arena::TypedArena;\n \n+use smallvec::{SmallVec, smallvec};\n use std::cmp::{self, Ordering, min, max};\n use std::fmt;\n use std::iter::{FromIterator, IntoIterator};\n@@ -237,14 +238,16 @@ impl<'tcx> Pattern<'tcx> {\n     }\n }\n \n-pub struct Matrix<'a, 'tcx: 'a>(Vec<Vec<&'a Pattern<'tcx>>>);\n+/// A 2D matrix. Nx1 matrices are very common, which is why `SmallVec[_; 2]`\n+/// works well for each row.\n+pub struct Matrix<'p, 'tcx: 'p>(Vec<SmallVec<[&'p Pattern<'tcx>; 2]>>);\n \n-impl<'a, 'tcx> Matrix<'a, 'tcx> {\n+impl<'p, 'tcx> Matrix<'p, 'tcx> {\n     pub fn empty() -> Self {\n         Matrix(vec![])\n     }\n \n-    pub fn push(&mut self, row: Vec<&'a Pattern<'tcx>>) {\n+    pub fn push(&mut self, row: SmallVec<[&'p Pattern<'tcx>; 2]>) {\n         self.0.push(row)\n     }\n }\n@@ -261,7 +264,7 @@ impl<'a, 'tcx> Matrix<'a, 'tcx> {\n /// ++++++++++++++++++++++++++\n /// + _     + [_, _, ..tail] +\n /// ++++++++++++++++++++++++++\n-impl<'a, 'tcx> fmt::Debug for Matrix<'a, 'tcx> {\n+impl<'p, 'tcx> fmt::Debug for Matrix<'p, 'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"\\n\")?;\n \n@@ -293,8 +296,9 @@ impl<'a, 'tcx> fmt::Debug for Matrix<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> FromIterator<Vec<&'a Pattern<'tcx>>> for Matrix<'a, 'tcx> {\n-    fn from_iter<T: IntoIterator<Item=Vec<&'a Pattern<'tcx>>>>(iter: T) -> Self\n+impl<'p, 'tcx> FromIterator<SmallVec<[&'p Pattern<'tcx>; 2]>> for Matrix<'p, 'tcx> {\n+    fn from_iter<T>(iter: T) -> Self\n+        where T: IntoIterator<Item=SmallVec<[&'p Pattern<'tcx>; 2]>>\n     {\n         Matrix(iter.into_iter().collect())\n     }\n@@ -998,7 +1002,7 @@ fn compute_missing_ctors<'a, 'tcx: 'a>(\n /// matrix isn't exhaustive).\n pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                        matrix: &Matrix<'p, 'tcx>,\n-                                       v: &[&'p Pattern<'tcx>],\n+                                       v: &[&Pattern<'tcx>],\n                                        witness: WitnessPreference)\n                                        -> Usefulness<'tcx> {\n     let &Matrix(ref rows) = matrix;\n@@ -1108,7 +1112,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         } else {\n             let matrix = rows.iter().filter_map(|r| {\n                 if r[0].is_wildcard() {\n-                    Some(r[1..].to_vec())\n+                    Some(SmallVec::from_slice(&r[1..]))\n                 } else {\n                     None\n                 }\n@@ -1199,10 +1203,10 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n \n /// A shorthand for the `U(S(c, P), S(c, q))` operation from the paper. I.e., `is_useful` applied\n /// to the specialised version of both the pattern matrix `P` and the new pattern `q`.\n-fn is_useful_specialized<'p, 'a:'p, 'tcx: 'a>(\n+fn is_useful_specialized<'p, 'a: 'p, 'tcx: 'a>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     &Matrix(ref m): &Matrix<'p, 'tcx>,\n-    v: &[&'p Pattern<'tcx>],\n+    v: &[&Pattern<'tcx>],\n     ctor: Constructor<'tcx>,\n     lty: Ty<'tcx>,\n     witness: WitnessPreference,\n@@ -1521,15 +1525,15 @@ fn constructor_intersects_pattern<'p, 'a: 'p, 'tcx: 'a>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ctor: &Constructor<'tcx>,\n     pat: &'p Pattern<'tcx>,\n-) -> Option<Vec<&'p Pattern<'tcx>>> {\n+) -> Option<SmallVec<[&'p Pattern<'tcx>; 2]>> {\n     if should_treat_range_exhaustively(tcx, ctor) {\n         match (IntRange::from_ctor(tcx, ctor), IntRange::from_pat(tcx, pat)) {\n             (Some(ctor), Some(pat)) => {\n                 ctor.intersection(&pat).map(|_| {\n                     let (pat_lo, pat_hi) = pat.range.into_inner();\n                     let (ctor_lo, ctor_hi) = ctor.range.into_inner();\n                     assert!(pat_lo <= ctor_lo && ctor_hi <= pat_hi);\n-                    vec![]\n+                    smallvec![]\n                 })\n             }\n             _ => None,\n@@ -1539,7 +1543,7 @@ fn constructor_intersects_pattern<'p, 'a: 'p, 'tcx: 'a>(\n         // conveniently handled by `IntRange`. For these cases, the constructor may not be a range\n         // so intersection actually devolves into being covered by the pattern.\n         match constructor_covered_by_range(tcx, ctor, pat) {\n-            Ok(true) => Some(vec![]),\n+            Ok(true) => Some(smallvec![]),\n             Ok(false) | Err(ErrorReported) => None,\n         }\n     }\n@@ -1610,9 +1614,9 @@ fn constructor_covered_by_range<'a, 'tcx>(\n fn patterns_for_variant<'p, 'a: 'p, 'tcx: 'a>(\n     subpatterns: &'p [FieldPattern<'tcx>],\n     wild_patterns: &[&'p Pattern<'tcx>])\n-    -> Vec<&'p Pattern<'tcx>>\n+    -> SmallVec<[&'p Pattern<'tcx>; 2]>\n {\n-    let mut result = wild_patterns.to_owned();\n+    let mut result = SmallVec::from_slice(wild_patterns);\n \n     for subpat in subpatterns {\n         result[subpat.field.index()] = &subpat.pattern;\n@@ -1635,15 +1639,16 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n     r: &[&'p Pattern<'tcx>],\n     constructor: &Constructor<'tcx>,\n     wild_patterns: &[&'p Pattern<'tcx>],\n-) -> Option<Vec<&'p Pattern<'tcx>>> {\n+) -> Option<SmallVec<[&'p Pattern<'tcx>; 2]>> {\n     let pat = &r[0];\n \n-    let head: Option<Vec<&Pattern>> = match *pat.kind {\n-        PatternKind::AscribeUserType { ref subpattern, .. } =>\n-            specialize(cx, ::std::slice::from_ref(&subpattern), constructor, wild_patterns),\n+    let head = match *pat.kind {\n+        PatternKind::AscribeUserType { ref subpattern, .. } => {\n+            specialize(cx, ::std::slice::from_ref(&subpattern), constructor, wild_patterns)\n+        }\n \n         PatternKind::Binding { .. } | PatternKind::Wild => {\n-            Some(wild_patterns.to_owned())\n+            Some(SmallVec::from_slice(wild_patterns))\n         }\n \n         PatternKind::Variant { adt_def, variant_index, ref subpatterns, .. } => {\n@@ -1660,7 +1665,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n         }\n \n         PatternKind::Deref { ref subpattern } => {\n-            Some(vec![subpattern])\n+            Some(smallvec![subpattern])\n         }\n \n         PatternKind::Constant { value } => {\n@@ -1696,7 +1701,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                     if wild_patterns.len() as u64 == n {\n                         // convert a constant slice/array pattern to a list of patterns.\n                         match (n, opt_ptr) {\n-                            (0, _) => Some(Vec::new()),\n+                            (0, _) => Some(SmallVec::new()),\n                             (_, Some(ptr)) => {\n                                 let alloc = cx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n                                 let layout = cx.tcx.layout_of(cx.param_env.and(ty)).ok()?;\n@@ -1765,7 +1770,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                     match slice_pat_covered_by_constructor(\n                         cx.tcx, pat.span, constructor, prefix, slice, suffix\n                             ) {\n-                        Ok(true) => Some(vec![]),\n+                        Ok(true) => Some(smallvec![]),\n                         Ok(false) => None,\n                         Err(ErrorReported) => None\n                     }"}, {"sha": "bfa2e53b9e0cfb545d2eb53d7f0740da0db5cd11", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=e2c329c72c3d764423c3909c7483cf2fd6659626", "patch": "@@ -31,6 +31,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, Pat, PatKind};\n \n+use smallvec::smallvec;\n use std::slice;\n \n use syntax::ast;\n@@ -250,7 +251,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 .iter()\n                 .filter(|&&(_, guard)| guard.is_none())\n                 .flat_map(|arm| &arm.0)\n-                .map(|pat| vec![pat.0])\n+                .map(|pat| smallvec![pat.0])\n                 .collect();\n             let scrut_ty = self.tables.node_id_to_type(scrut.hir_id);\n             check_exhaustive(cx, scrut_ty, scrut.span, &matrix);\n@@ -274,7 +275,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                                                 self.tables);\n             let pattern = patcx.lower_pattern(pat);\n             let pattern_ty = pattern.ty;\n-            let pats: Matrix = vec![vec![\n+            let pats: Matrix = vec![smallvec![\n                 expand_pattern(cx, pattern)\n             ]].into_iter().collect();\n \n@@ -367,7 +368,7 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     let mut printed_if_let_err = false;\n     for (arm_index, &(ref pats, guard)) in arms.iter().enumerate() {\n         for &(pat, hir_pat) in pats {\n-            let v = vec![pat];\n+            let v = smallvec![pat];\n \n             match is_useful(cx, &seen, &v, LeaveOutWitness) {\n                 NotUseful => {\n@@ -462,10 +463,10 @@ fn check_arms<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     }\n }\n \n-fn check_exhaustive<'a, 'tcx>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n+fn check_exhaustive<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                               scrut_ty: Ty<'tcx>,\n                               sp: Span,\n-                              matrix: &Matrix<'a, 'tcx>) {\n+                              matrix: &Matrix<'p, 'tcx>) {\n     let wild_pattern = Pattern {\n         ty: scrut_ty,\n         span: DUMMY_SP,"}, {"sha": "48a5864d0da44ff4b5cf4070aa8509f4cea4ab7b", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=e2c329c72c3d764423c3909c7483cf2fd6659626", "patch": "@@ -18,4 +18,4 @@ rustc_target = { path = \"../librustc_target\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n chalk-engine = { version = \"0.8.0\", default-features=false }\n-smallvec = { version = \"0.6.5\", features = [\"union\"] }\n+smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "87f11b01a1d94e15ee6ffb5f087b583ae8057320", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=e2c329c72c3d764423c3909c7483cf2fd6659626", "patch": "@@ -17,6 +17,6 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }\n rustc_target = { path = \"../librustc_target\" }\n-smallvec = { version = \"0.6.5\", features = [\"union\"] }\n+smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "3e040818d377707588d3561568c99df463259d96", "filename": "src/libserialize/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibserialize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibserialize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2FCargo.toml?ref=e2c329c72c3d764423c3909c7483cf2fd6659626", "patch": "@@ -9,4 +9,4 @@ path = \"lib.rs\"\n crate-type = [\"dylib\", \"rlib\"]\n \n [dependencies]\n-smallvec = { version = \"0.6.5\", features = [\"union\"] }\n+smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "fba2623e005d08821266b4c0738bba1f40475518", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=e2c329c72c3d764423c3909c7483cf2fd6659626", "patch": "@@ -17,4 +17,4 @@ syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_target = { path = \"../librustc_target\" }\n-smallvec = { version = \"0.6.5\", features = [\"union\"] }\n+smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "7ad08f75e8bdda8f8ea6251c6d7482931552dd97", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2c329c72c3d764423c3909c7483cf2fd6659626/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=e2c329c72c3d764423c3909c7483cf2fd6659626", "patch": "@@ -15,5 +15,5 @@ syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_target = { path = \"../librustc_target\" }\n-smallvec = { version = \"0.6.5\", features = [\"union\"] }\n+smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n log = \"0.4\""}]}