{"sha": "0616cba62be78082f10f6673d45ba4d94da423dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MTZjYmE2MmJlNzgwODJmMTBmNjY3M2Q0NWJhNGQ5NGRhNDIzZGM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-13T06:17:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-13T06:24:27Z"}, "message": "libcore: Add sys::set_exit_status\n\nSets the process exit code", "tree": {"sha": "0cd1d0cf9434a751b293b8292da1c153065da491", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cd1d0cf9434a751b293b8292da1c153065da491"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0616cba62be78082f10f6673d45ba4d94da423dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0616cba62be78082f10f6673d45ba4d94da423dc", "html_url": "https://github.com/rust-lang/rust/commit/0616cba62be78082f10f6673d45ba4d94da423dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0616cba62be78082f10f6673d45ba4d94da423dc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcac427795285a46232722a38e8a5f88ae4dc891", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcac427795285a46232722a38e8a5f88ae4dc891", "html_url": "https://github.com/rust-lang/rust/commit/dcac427795285a46232722a38e8a5f88ae4dc891"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "96e5947daf0d450a1be1d59945dcc1a556881c25", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=0616cba62be78082f10f6673d45ba4d94da423dc", "patch": "@@ -20,6 +20,7 @@ native mod rustrt {\n     fn do_gc();\n     fn unsupervise();\n     fn shape_log_str<T>(t: *sys::type_desc, data: T) -> str;\n+    fn rust_set_exit_status(code: int);\n }\n \n #[abi = \"rust-intrinsic\"]\n@@ -92,6 +93,18 @@ fn log_str<T>(t: T) -> str {\n     rustrt::shape_log_str(get_type_desc::<T>(), t)\n }\n \n+#[doc(\n+    brief = \"Sets the process exit code\",\n+    desc = \"Sets the exit code returned by the process if all supervised \\\n+            tasks terminate successfully (without failing). If the current \\\n+            root task fails and is supervised by the scheduler then any \\\n+            user-specified exit status is ignored and the process exits \\\n+            with the default failure status.\"\n+)]\n+fn set_exit_status(code: int) {\n+    rustrt::rust_set_exit_status(code);\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "7bd1c76c1878366a7456ac4b0eeb57e237488282", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=0616cba62be78082f10f6673d45ba4d94da423dc", "patch": "@@ -561,6 +561,12 @@ port_recv(uintptr_t *dptr, rust_port *port,\n     return;\n }\n \n+extern \"C\" CDECL void\n+rust_set_exit_status(intptr_t code) {\n+    rust_task *task = rust_scheduler::get_task();\n+    task->kernel->set_exit_status((int)code);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "aa62c22fc8fe08f636d216d952882e664a641835", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=0616cba62be78082f10f6673d45ba4d94da423dc", "patch": "@@ -92,7 +92,7 @@ static size_t const TIME_SLICE_IN_MS = 10;\n static size_t const BUF_BYTES = 2048;\n \n // The error status to use when the process fails\n-#define PROC_FAIL_CODE 101;\n+#define PROC_FAIL_CODE 101\n \n // Every reference counted object should use this macro and initialize\n // ref_count."}, {"sha": "a7e4ee2e4506c095164e3767d169ac876cea97d8", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=0616cba62be78082f10f6673d45ba4d94da423dc", "patch": "@@ -11,8 +11,8 @@ rust_kernel::rust_kernel(rust_srv *srv, size_t num_threads) :\n     _log(srv, NULL),\n     srv(srv),\n     max_id(0),\n-    num_threads(num_threads),\n     rval(0),\n+    num_threads(num_threads),\n     live_tasks(0),\n     env(srv->env)\n {\n@@ -140,6 +140,7 @@ rust_kernel::fail() {\n     // FIXME: On windows we're getting \"Application has requested the\n     // Runtime to terminate it in an unusual way\" when trying to shutdown\n     // cleanly.\n+    set_exit_status(PROC_FAIL_CODE);\n #if defined(__WIN32__)\n     exit(rval);\n #endif\n@@ -210,6 +211,15 @@ rust_kernel::win32_require(LPCTSTR fn, BOOL ok) {\n }\n #endif\n \n+void\n+rust_kernel::set_exit_status(int code) {\n+    scoped_lock with(_kernel_lock);\n+    // If we've already failed then that's the code we're going to use\n+    if (rval != PROC_FAIL_CODE) {\n+        rval = code;\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "f60987acae5597596d319e3056de718fc2418c52", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=0616cba62be78082f10f6673d45ba4d94da423dc", "patch": "@@ -34,9 +34,10 @@ class rust_kernel {\n     rust_task_id max_id;\n     hash_map<rust_task_id, rust_task *> task_table;\n \n+    int rval;\n+\n public:\n     const size_t num_threads;\n-    int rval;\n \n     volatile int live_tasks;\n     struct rust_env *env;\n@@ -68,6 +69,7 @@ class rust_kernel {\n     rust_task_id create_task(rust_task *spawner, const char *name);\n     rust_task *get_task_by_id(rust_task_id id);\n     void release_task_id(rust_task_id tid);\n+    void set_exit_status(int code);\n };\n \n #endif /* RUST_KERNEL_H */"}, {"sha": "0b4e35910acda10a40b9b0c8c74d9a85df5cc5fc", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=0616cba62be78082f10f6673d45ba4d94da423dc", "patch": "@@ -82,8 +82,6 @@ void\n rust_scheduler::fail() {\n     log(NULL, log_err, \"domain %s @0x%\" PRIxPTR \" root task failed\",\n         name, this);\n-    I(this, kernel->rval == 0);\n-    kernel->rval = PROC_FAIL_CODE;\n     kernel->fail();\n }\n "}, {"sha": "e058ad739df84bb100a9c5fb915e221fd0780dff", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=0616cba62be78082f10f6673d45ba4d94da423dc", "patch": "@@ -41,6 +41,7 @@ rust_port_size\n rust_process_wait\n rust_ptr_eq\n rust_run_program\n+rust_set_exit_status\n rust_start\n rust_getcwd\n rust_task_is_unwinding"}, {"sha": "fd32ff046003078ee679c063d2f8da456c477801", "filename": "src/test/run-fail/rt-set-exit-status-fail.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs?ref=0616cba62be78082f10f6673d45ba4d94da423dc", "patch": "@@ -0,0 +1,10 @@\n+// error-pattern:whatever\n+\n+fn main() {\n+    log(error, \"whatever\");\n+    // Setting the exit status only works when the scheduler terminates\n+    // normally. In this case we're going to fail, so instead of of\n+    // returning 50 the process will return the typical rt failure code.\n+    sys::set_exit_status(50);\n+    fail;\n+}\n\\ No newline at end of file"}, {"sha": "5d973d2a9e39cea906da53c174f73348767cb6eb", "filename": "src/test/run-fail/rt-set-exit-status-fail2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail2.rs?ref=0616cba62be78082f10f6673d45ba4d94da423dc", "patch": "@@ -0,0 +1,15 @@\n+// error-pattern:whatever\n+\n+fn main() {\n+    log(error, \"whatever\");\n+    task::spawn {||\n+        resource r(_i: ()) {\n+            // Setting the exit status after the runtime has already\n+            // failed has no effect and the process exits with the\n+            // runtime's exit code\n+            sys::set_exit_status(50);\n+        }\n+        let i = r(());\n+    };\n+    fail;\n+}\n\\ No newline at end of file"}, {"sha": "e9e8f2394343a48a65542267fd0de4a9a9f9aa78", "filename": "src/test/run-fail/rt-set-exit-status.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0616cba62be78082f10f6673d45ba4d94da423dc/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status.rs?ref=0616cba62be78082f10f6673d45ba4d94da423dc", "patch": "@@ -0,0 +1,8 @@\n+// error-pattern:whatever\n+\n+fn main() {\n+    log(error, \"whatever\");\n+    // 101 is the code the runtime uses on task failure and the value\n+    // compiletest expects run-fail tests to return.\n+    sys::set_exit_status(101);\n+}\n\\ No newline at end of file"}]}