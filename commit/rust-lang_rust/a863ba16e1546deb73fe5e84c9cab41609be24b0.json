{"sha": "a863ba16e1546deb73fe5e84c9cab41609be24b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NjNiYTE2ZTE1NDZkZWI3M2ZlNWU4NGM5Y2FiNDE2MDliZTI0YjA=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-04-07T07:42:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-07T07:42:26Z"}, "message": "Merge pull request #2640 from mikerite/fix_compilation_20180406\n\nFix compilation for nightly 2018-04-06", "tree": {"sha": "09df63d6945118ebf9befa5fd2c5956e0850928d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09df63d6945118ebf9befa5fd2c5956e0850928d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a863ba16e1546deb73fe5e84c9cab41609be24b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJayHZiCRBK7hj4Ov3rIwAAdHIIAHKHw7T4GETNMgDHiHot6E4e\n4VIfCKmBtSNmdJK8mzGnihhehMircQOT5+FcqlvHPwFSMruPOYe+6NNXjbtp/yov\nRo0WfykIu3KtwpvCn+ycEfqVuTwlAK5Z1Ld8aC4QtV5pVhdXeas5AvCB1UKwer6m\nt8P3q3wjUD01JqHoV1FIi7HQg8ojzprR9qiYe/iFWFUMlnujFroekS+mPB3v++S7\n6Zhpc3gNSRdQ+NMrPIj82pxHa3cX0cLajz3NvpoC7qhKOTbrWsiPV+IyGNOELWnm\n0d3ThM7/iEkQ252Ku4+NC+SMKo2YouZT+Kyh7JKk9aN0yXF1CON3GNliG9D9Cho=\n=VGGf\n-----END PGP SIGNATURE-----\n", "payload": "tree 09df63d6945118ebf9befa5fd2c5956e0850928d\nparent 044b3d90c31d871d716c390fb5792168ad203489\nparent fe8068c41b4f35e57bda1c5aec092dce4ea2071c\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1523086946 +0200\ncommitter GitHub <noreply@github.com> 1523086946 +0200\n\nMerge pull request #2640 from mikerite/fix_compilation_20180406\n\nFix compilation for nightly 2018-04-06"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a863ba16e1546deb73fe5e84c9cab41609be24b0", "html_url": "https://github.com/rust-lang/rust/commit/a863ba16e1546deb73fe5e84c9cab41609be24b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a863ba16e1546deb73fe5e84c9cab41609be24b0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "044b3d90c31d871d716c390fb5792168ad203489", "url": "https://api.github.com/repos/rust-lang/rust/commits/044b3d90c31d871d716c390fb5792168ad203489", "html_url": "https://github.com/rust-lang/rust/commit/044b3d90c31d871d716c390fb5792168ad203489"}, {"sha": "fe8068c41b4f35e57bda1c5aec092dce4ea2071c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe8068c41b4f35e57bda1c5aec092dce4ea2071c", "html_url": "https://github.com/rust-lang/rust/commit/fe8068c41b4f35e57bda1c5aec092dce4ea2071c"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "c822c59deeb38da9fc13e819a29ed9213f8af82c", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=a863ba16e1546deb73fe5e84c9cab41609be24b0", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n                 if_chain! {\n                     if let NestedMetaItemKind::MetaItem(ref mi) = item.node;\n                     if let MetaItemKind::NameValue(ref lit) = mi.node;\n-                    if mi.name() == \"since\";\n+                    if mi.ident.name == \"since\";\n                     then {\n                         check_semver(cx, item.span, lit);\n                     }\n@@ -328,7 +328,7 @@ fn check_semver(cx: &LateContext, span: Span, lit: &Lit) {\n \n fn is_word(nmi: &NestedMetaItem, expected: &str) -> bool {\n     if let NestedMetaItemKind::MetaItem(ref mi) = nmi.node {\n-        mi.is_word() && mi.name() == expected\n+        mi.is_word() && mi.ident.name == expected\n     } else {\n         false\n     }"}, {"sha": "2ff7fa9e3abe51996e2aea776412694b21b43d20", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=a863ba16e1546deb73fe5e84c9cab41609be24b0", "patch": "@@ -56,7 +56,7 @@ impl StaticConst {\n                                 span_lint_and_then(\n                                     cx,\n                                     CONST_STATIC_LIFETIME,\n-                                    lifetime.span,\n+                                    lifetime.ident.span,\n                                     \"Constants have by default a `'static` lifetime\",\n                                     |db| {\n                                         db.span_suggestion(ty.span, \"consider removing `'static`\", sugg);"}, {"sha": "e769c2acc4b07a2f703863384a4bb58da308a5d7", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=a863ba16e1546deb73fe5e84c9cab41609be24b0", "patch": "@@ -119,7 +119,7 @@ impl LintPass for EnumVariantNames {\n }\n \n fn var2str(var: &Variant) -> InternedString {\n-    var.node.name.name.as_str()\n+    var.node.ident.name.as_str()\n }\n \n /// Returns the number of chars that match from the start"}, {"sha": "9ff7bbe4aba960b950c78dad74576af020e63d57", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=a863ba16e1546deb73fe5e84c9cab41609be24b0", "patch": "@@ -195,7 +195,7 @@ impl EarlyLintPass for MiscEarly {\n                     span_lint(\n                         cx,\n                         BUILTIN_TYPE_SHADOW,\n-                        ty.span,\n+                        ty.ident.span,\n                         &format!(\"This generic shadows the built-in type `{}`\", name),\n                     );\n                 }\n@@ -209,7 +209,7 @@ impl EarlyLintPass for MiscEarly {\n             let type_name = npat.segments\n                 .last()\n                 .expect(\"A path must have at least one segment\")\n-                .identifier\n+                .ident\n                 .name;\n \n             for field in pfields {\n@@ -267,8 +267,8 @@ impl EarlyLintPass for MiscEarly {\n         let mut registered_names: HashMap<String, Span> = HashMap::new();\n \n         for arg in &decl.inputs {\n-            if let PatKind::Ident(_, sp_ident, None) = arg.pat.node {\n-                let arg_name = sp_ident.node.to_string();\n+            if let PatKind::Ident(_, ident, None) = arg.pat.node {\n+                let arg_name = ident.name.to_string();\n \n                 if arg_name.starts_with('_') {\n                     if let Some(correspondence) = registered_names.get(&arg_name[1..]) {\n@@ -328,13 +328,13 @@ impl EarlyLintPass for MiscEarly {\n                 if let StmtKind::Local(ref local) = w[0].node;\n                 if let Option::Some(ref t) = local.init;\n                 if let ExprKind::Closure(_, _, _, _, _) = t.node;\n-                if let PatKind::Ident(_, sp_ident, _) = local.pat.node;\n+                if let PatKind::Ident(_, ident, _) = local.pat.node;\n                 if let StmtKind::Semi(ref second) = w[1].node;\n                 if let ExprKind::Assign(_, ref call) = second.node;\n                 if let ExprKind::Call(ref closure, _) = call.node;\n                 if let ExprKind::Path(_, ref path) = closure.node;\n                 then {\n-                    if sp_ident.node == (&path.segments[0]).identifier {\n+                    if ident == (&path.segments[0]).ident {\n                         span_lint(\n                             cx,\n                             REDUNDANT_CLOSURE_CALL,"}, {"sha": "394bc4bcfbcd129a98b54cd64c4a628db8f7d960", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=a863ba16e1546deb73fe5e84c9cab41609be24b0", "patch": "@@ -104,7 +104,7 @@ struct SimilarNamesNameVisitor<'a: 'b, 'tcx: 'a, 'b>(&'b mut SimilarNamesLocalVi\n impl<'a, 'tcx: 'a, 'b> Visitor<'tcx> for SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n     fn visit_pat(&mut self, pat: &'tcx Pat) {\n         match pat.node {\n-            PatKind::Ident(_, id, _) => self.check_name(id.span, id.node.name),\n+            PatKind::Ident(_, ident, _) => self.check_name(ident.span, ident.name),\n             PatKind::Struct(_, ref fields, _) => for field in fields {\n                 if !field.node.is_shorthand {\n                     self.visit_pat(&field.node.pat);"}, {"sha": "5e5e93783d32bf5d26a82a5a5275152b27341c1c", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=a863ba16e1546deb73fe5e84c9cab41609be24b0", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use syntax::ast;\n-use syntax::codemap::{Span, Spanned};\n+use syntax::codemap::Span;\n use syntax::visit::FnKind;\n \n use utils::{in_external_macro, in_macro, match_path_ast, snippet_opt, span_lint_and_then, span_note_and_lint};\n@@ -112,9 +112,9 @@ impl ReturnPass {\n             if local.ty.is_none();\n             if !local.attrs.iter().any(attr_is_cfg);\n             if let Some(ref initexpr) = local.init;\n-            if let ast::PatKind::Ident(_, Spanned { node: id, .. }, _) = local.pat.node;\n+            if let ast::PatKind::Ident(_, ident, _) = local.pat.node;\n             if let ast::ExprKind::Path(_, ref path) = retexpr.node;\n-            if match_path_ast(path, &[&id.name.as_str()]);\n+            if match_path_ast(path, &[&ident.name.as_str()]);\n             if !in_external_macro(cx, initexpr.span);\n             then {\n                     span_note_and_lint(cx,"}, {"sha": "8ecc95fb72c8fa5e10bb045d7bc50be648e3526d", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=a863ba16e1546deb73fe5e84c9cab41609be24b0", "patch": "@@ -49,7 +49,7 @@ fn check_use_tree(use_tree: &UseTree, cx: &EarlyContext, span: &Span) {\n                 .segments\n                 .last()\n                 .expect(\"use paths cannot be empty\")\n-                .identifier;\n+                .ident;\n             unsafe_to_safe_check(old_name, new_name, cx, span);\n         }\n         UseTreeKind::Simple(None) |"}, {"sha": "7aeaa71044324cdb44a8a6eae4722eefabd3a86e", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=a863ba16e1546deb73fe5e84c9cab41609be24b0", "patch": "@@ -471,7 +471,7 @@ fn has_attr(attrs: &[Attribute]) -> bool {\n     attrs.iter().any(|attr| {\n         attr.check_name(\"clippy\") && attr.meta_item_list().map_or(false, |list| {\n             list.len() == 1 && match list[0].node {\n-                ast::NestedMetaItemKind::MetaItem(ref it) => it.name == \"author\",\n+                ast::NestedMetaItemKind::MetaItem(ref it) => it.ident.name == \"author\",\n                 ast::NestedMetaItemKind::Literal(_) => false,\n             }\n         })"}, {"sha": "607082e8ad2387ee6ece5bb96ce45e03c5b67bdf", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=a863ba16e1546deb73fe5e84c9cab41609be24b0", "patch": "@@ -13,7 +13,7 @@ pub fn file_from_args(\n     args: &[codemap::Spanned<ast::NestedMetaItemKind>],\n ) -> Result<Option<path::PathBuf>, (&'static str, codemap::Span)> {\n     for arg in args.iter().filter_map(|a| a.meta_item()) {\n-        if arg.name() == \"conf_file\" {\n+        if arg.ident.name == \"conf_file\" {\n             return match arg.node {\n                 ast::MetaItemKind::Word | ast::MetaItemKind::List(_) => {\n                     Err((\"`conf_file` must be a named value\", arg.span))"}, {"sha": "bfb6160d3cd5d49749e8a1ddbc9967821dbb099b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a863ba16e1546deb73fe5e84c9cab41609be24b0/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=a863ba16e1546deb73fe5e84c9cab41609be24b0", "patch": "@@ -237,7 +237,7 @@ pub fn match_path_ast(path: &ast::Path, segments: &[&str]) -> bool {\n         .iter()\n         .rev()\n         .zip(segments.iter().rev())\n-        .all(|(a, b)| a.identifier.name == *b)\n+        .all(|(a, b)| a.ident.name == *b)\n }\n \n /// Get the definition associated to a path."}]}