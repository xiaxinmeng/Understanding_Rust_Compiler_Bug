{"sha": "3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkOWNmMTVkMGI1Yzg5ZjNlNzFkMTY3OWIwNjk4ZjM4ODRlNWE1ZDI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-19T21:00:04Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-19T21:00:04Z"}, "message": "Remove half-baked 'opacity' layer qualifier.", "tree": {"sha": "bb282c4d0fe1a8b6442156712889f6e427c8f2ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb282c4d0fe1a8b6442156712889f6e427c8f2ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2", "html_url": "https://github.com/rust-lang/rust/commit/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7d680b57d941bbcb8e11363f6278852d59eaea9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7d680b57d941bbcb8e11363f6278852d59eaea9", "html_url": "https://github.com/rust-lang/rust/commit/b7d680b57d941bbcb8e11363f6278852d59eaea9"}], "stats": {"total": 73, "additions": 4, "deletions": 69}, "files": [{"sha": "e7860a9305e98a8be94b203489025547b6a5e060", "filename": "doc/rust.texi", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2", "patch": "@@ -678,7 +678,6 @@ The keywords are:\n @tab @code{auto}\n @item @code{state}\n @tab @code{gc}\n-@tab @code{abs}\n @tab @code{const}\n @tab @code{thread}\n @item @code{auth}"}, {"sha": "26c3b7c12cf063a9b8db6969dd9fed77bf3db7b8", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2", "patch": "@@ -37,11 +37,6 @@ type layer =\n   | LAYER_gc\n ;;\n \n-type opacity =\n-    OPA_transparent\n-  | OPA_abstract\n-;;\n-\n type mutability =\n     MUT_mutable\n   | MUT_immutable\n@@ -720,22 +715,6 @@ and fmt_layer_qual\n   fmt_layer ff s;\n   if s <> LAYER_value then fmt ff \" \";\n \n-and fmt_opacity\n-    (ff:Format.formatter)\n-    (opa:opacity)\n-    : unit =\n-  match opa with\n-      OPA_transparent -> ()\n-    | OPA_abstract -> fmt ff \"abs\"\n-\n-and fmt_opacity_qual\n-    (ff:Format.formatter)\n-    (op:opacity)\n-    : unit =\n-  fmt_opacity ff op;\n-  if op <> OPA_transparent then fmt ff \" \";\n-\n-\n and fmt_ty_fn\n     (ff:Format.formatter)\n     (ident_and_params:(ident * ty_param array) option)"}, {"sha": "6b232e7eba7edaa3e5cb2f7a1dfc25becf498a2b", "filename": "src/boot/fe/item.ml", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fboot%2Ffe%2Fitem.ml", "raw_url": "https://github.com/rust-lang/rust/raw/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fboot%2Ffe%2Fitem.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fitem.ml?ref=3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2", "patch": "@@ -609,8 +609,7 @@ and parse_stmts_including_none (ps:pstate) : Ast.stmt array =\n             spans ps stmts apos (Ast.STMT_join lval)\n \n \n-       | STATE | GC\n-       | ABS | NATIVE\n+       | STATE | GC | NATIVE\n        | MOD | OBJ | TAG | TYPE | FN | USE ->\n           let items = ctxt \"stmt: decl\" parse_mod_item ps in\n           let bpos = lexpos ps in\n@@ -695,7 +694,6 @@ and parse_stmts_including_none (ps:pstate) : Ast.stmt array =\n \n and parse_ty_param (iref:int ref) (ps:pstate) : Ast.ty_param identified =\n   let apos = lexpos ps in\n-  let _ = Pexp.parse_opacity ps in\n   let s = Pexp.parse_layer ps in\n   let ident = Pexp.parse_ident ps in\n   let i = !iref in\n@@ -990,9 +988,8 @@ and parse_mod_item (ps:pstate)\n \n     match peek ps with\n \n-        STATE | GC | ABS\n+        STATE | GC\n       | TYPE | OBJ | TAG | FN | ITER ->\n-          let _ = Pexp.parse_opacity ps in\n           let layer = Pexp.parse_layer ps in\n             begin\n               match peek ps with"}, {"sha": "b375b874b89d259d405728ddea71d9bc26c75b7a", "filename": "src/boot/fe/lexer.mll", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fboot%2Ffe%2Flexer.mll", "raw_url": "https://github.com/rust-lang/rust/raw/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fboot%2Ffe%2Flexer.mll", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Flexer.mll?ref=3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2", "patch": "@@ -95,8 +95,6 @@\n                 (\"claim\", CLAIM);\n                 (\"prove\", PROVE);\n \n-                (\"abs\", ABS);\n-\n                 (\"state\", STATE);\n                 (\"gc\", GC);\n "}, {"sha": "ed36926dfb788683ba580f0d5e10933b254a2059", "filename": "src/boot/fe/pexp.ml", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fboot%2Ffe%2Fpexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fboot%2Ffe%2Fpexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fpexp.ml?ref=3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2", "patch": "@@ -140,11 +140,6 @@ and parse_optional_trailing_constrs (ps:pstate) : Ast.constrs =\n       COLON -> (bump ps; parse_constrs ps)\n     | _ -> [| |]\n \n-and parse_opacity (ps:pstate) : Ast.opacity =\n-  match peek ps with\n-      ABS -> bump ps; Ast.OPA_abstract\n-    |  _ -> Ast.OPA_transparent\n-\n and parse_layer (ps:pstate) : Ast.layer =\n   match peek ps with\n       STATE -> bump ps; Ast.LAYER_state"}, {"sha": "0b1579839847c00f3f66c0976315e6f55eff91a7", "filename": "src/boot/fe/token.ml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fboot%2Ffe%2Ftoken.ml", "raw_url": "https://github.com/rust-lang/rust/raw/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fboot%2Ffe%2Ftoken.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Ftoken.ml?ref=3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2", "patch": "@@ -80,9 +80,6 @@ type token =\n   | CLAIM\n   | PROVE\n \n-  (* Opacity keywords *)\n-  | ABS\n-\n   (* Layer keywords *)\n   | STATE\n   | GC\n@@ -243,9 +240,6 @@ let rec string_of_tok t =\n     | CLAIM      -> \"claim\"\n     | PROVE      -> \"prove\"\n \n-    (* Opacity keywords *)\n-    | ABS        -> \"abs\"\n-\n     (* Layer keywords *)\n     | STATE      -> \"state\"\n     | GC         -> \"gc\""}, {"sha": "882b70a42803bced4ae4f80f02c7cef7a599632b", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2", "patch": "@@ -119,11 +119,6 @@ tag mutability {\n     maybe_mut;\n }\n \n-tag opacity {\n-    op_abstract;\n-    op_transparent;\n-}\n-\n tag layer {\n     layer_value;\n     layer_state;"}, {"sha": "3659af1c655e2708a8c9aad56e3fe889b60e6d09", "filename": "src/comp/front/lexer.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fcomp%2Ffront%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fcomp%2Ffront%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Flexer.rs?ref=3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2", "patch": "@@ -130,8 +130,6 @@ fn keyword_table() -> std.map.hashmap[str, token.token] {\n     keywords.insert(\"claim\", token.CLAIM);\n     keywords.insert(\"prove\", token.PROVE);\n \n-    keywords.insert(\"abs\", token.ABS);\n-\n     keywords.insert(\"state\", token.STATE);\n     keywords.insert(\"gc\", token.GC);\n "}, {"sha": "30d0ffbc3437da416459d5c28190db41809cac26", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2", "patch": "@@ -1951,7 +1951,6 @@ fn parse_item_native_fn(parser p) -> @ast.native_item {\n }\n \n fn parse_native_item(parser p) -> @ast.native_item {\n-    let ast.opacity opa = parse_opacity(p);\n     let ast.layer lyr = parse_layer(p);\n     alt (p.peek()) {\n         case (token.TYPE) {\n@@ -2106,18 +2105,6 @@ fn parse_item_tag(parser p) -> @ast.item {\n     ret @spanned(lo, hi, item);\n }\n \n-fn parse_opacity(parser p) -> ast.opacity {\n-    alt (p.peek()) {\n-        case (token.ABS) {\n-            p.bump();\n-            ret ast.op_abstract;\n-        }\n-        case (_) {\n-            ret ast.op_transparent;\n-        }\n-    }\n-    fail;\n-}\n \n fn parse_layer(parser p) -> ast.layer {\n     alt (p.peek()) {\n@@ -2167,7 +2154,6 @@ fn peeking_at_item(parser p) -> bool {\n }\n \n fn parse_item(parser p) -> @ast.item {\n-    let ast.opacity opa = parse_opacity(p);\n     let ast.layer lyr = parse_layer(p);\n \n     alt (p.peek()) {"}, {"sha": "f367bcc6835a26b32ea397f6a7f054bfb3b56ae2", "filename": "src/comp/front/token.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fcomp%2Ffront%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Fcomp%2Ffront%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftoken.rs?ref=3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2", "patch": "@@ -93,9 +93,6 @@ tag token {\n     CLAIM;\n     PROVE;\n \n-    /* Opacity keywords */\n-    ABS;\n-\n     /* Layer keywords */\n     STATE;\n     GC;\n@@ -265,9 +262,6 @@ fn to_str(token t) -> str {\n         case (CLAIM) { ret \"claim\"; }\n         case (PROVE) { ret \"prove\"; }\n \n-        /* Opacity keywords */\n-        case (ABS) { ret \"abs\"; }\n-\n         /* Layer keywords */\n         case (STATE) { ret \"state\"; }\n         case (GC) { ret \"gc\"; }"}, {"sha": "2c530f5bde40392736f105daa6bba6012199d927", "filename": "src/lib/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Flib%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2/src%2Flib%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmap.rs?ref=3d9cf15d0b5c89f3e71d1679b0698f3884e5a5d2", "patch": "@@ -6,7 +6,7 @@\n type hashfn[K] = fn(&K) -> uint;\n type eqfn[K] = fn(&K, &K) -> bool;\n \n-abs state type hashmap[K, V] = state obj {\n+state type hashmap[K, V] = state obj {\n                                  fn size() -> uint;\n                                  fn insert(&K key, &V val) -> bool;\n                                  fn contains_key(&K key) -> bool;\n@@ -241,5 +241,5 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n // indent-tabs-mode: nil\n // c-basic-offset: 4\n // buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n // End:"}]}