{"sha": "71dab738ac80c2dfadc0d83bb251c70d72d261d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZGFiNzM4YWM4MGMyZGZhZGMwZDgzYmIyNTFjNzBkNzJkMjYxZDY=", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-07-28T14:02:51Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-08-19T19:02:40Z"}, "message": "Synchronize minor differences between Unix and WASI implementations.", "tree": {"sha": "3da48d0bf85fb12ca570628825933cf399f81e3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3da48d0bf85fb12ca570628825933cf399f81e3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71dab738ac80c2dfadc0d83bb251c70d72d261d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71dab738ac80c2dfadc0d83bb251c70d72d261d6", "html_url": "https://github.com/rust-lang/rust/commit/71dab738ac80c2dfadc0d83bb251c70d72d261d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71dab738ac80c2dfadc0d83bb251c70d72d261d6/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "907f00be3059deae7ccc0e95388501ff6f2b118d", "url": "https://api.github.com/repos/rust-lang/rust/commits/907f00be3059deae7ccc0e95388501ff6f2b118d", "html_url": "https://github.com/rust-lang/rust/commit/907f00be3059deae7ccc0e95388501ff6f2b118d"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "f22da62555116e6a40f8defdfb3f3e6bbd5286ae", "filename": "library/std/src/os/unix/io/fd.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/71dab738ac80c2dfadc0d83bb251c70d72d261d6/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dab738ac80c2dfadc0d83bb251c70d72d261d6/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Ffd.rs?ref=71dab738ac80c2dfadc0d83bb251c70d72d261d6", "patch": "@@ -65,8 +65,9 @@ impl BorrowedFd<'_> {\n     #[inline]\n     #[unstable(feature = \"io_safety\", issue = \"87074\")]\n     pub unsafe fn borrow_raw_fd(fd: RawFd) -> Self {\n-        assert_ne!(fd, -1_i32 as RawFd);\n-        Self { fd, _phantom: PhantomData }\n+        assert_ne!(fd, u32::MAX as RawFd);\n+        // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n+        unsafe { Self { fd, _phantom: PhantomData } }\n     }\n }\n \n@@ -106,9 +107,9 @@ impl FromRawFd for OwnedFd {\n     /// ownership. The resource must not require any cleanup other than `close`.\n     #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> Self {\n-        assert_ne!(fd, -1i32);\n+        assert_ne!(fd, u32::MAX as RawFd);\n         // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n-        Self { fd }\n+        unsafe { Self { fd } }\n     }\n }\n "}, {"sha": "8029ad68da931018f99801ff5244c3dbbaf3a671", "filename": "library/std/src/os/wasi/io/fd.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/71dab738ac80c2dfadc0d83bb251c70d72d261d6/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71dab738ac80c2dfadc0d83bb251c70d72d261d6/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Ffd.rs?ref=71dab738ac80c2dfadc0d83bb251c70d72d261d6", "patch": "@@ -65,7 +65,8 @@ impl BorrowedFd<'_> {\n     #[inline]\n     #[unstable(feature = \"io_safety\", issue = \"87074\")]\n     pub unsafe fn borrow_raw_fd(fd: RawFd) -> Self {\n-        assert_ne!(fd, -1_i32 as RawFd);\n+        assert_ne!(fd, u32::MAX as RawFd);\n+        // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n         unsafe { Self { fd, _phantom: PhantomData } }\n     }\n }\n@@ -103,10 +104,10 @@ impl FromRawFd for OwnedFd {\n     /// # Safety\n     ///\n     /// The resource pointed to by `fd` must be open and suitable for assuming\n-    /// ownership.\n+    /// ownership. The resource must not require any cleanup other than `close`.\n     #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> Self {\n-        assert_ne!(fd, RawFd::MAX);\n+        assert_ne!(fd, u32::MAX as RawFd);\n         // SAFETY: we just asserted that the value is in the valid range and isn't `-1` (the only value bigger than `0xFF_FF_FF_FE` unsigned)\n         unsafe { Self { fd } }\n     }"}]}