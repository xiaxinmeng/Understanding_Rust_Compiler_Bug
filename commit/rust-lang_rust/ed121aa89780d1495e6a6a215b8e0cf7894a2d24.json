{"sha": "ed121aa89780d1495e6a6a215b8e0cf7894a2d24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMTIxYWE4OTc4MGQxNDk1ZTZhNmEyMTViOGUwY2Y3ODk0YTJkMjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-01T16:09:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-01T16:09:33Z"}, "message": "Auto merge of #30124 - steveklabnik:doc_string_errors, r=alexcrichton\n\nPart of #29376", "tree": {"sha": "0ada9e0af5c15954ceec6316162f3cd87df9e618", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ada9e0af5c15954ceec6316162f3cd87df9e618"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed121aa89780d1495e6a6a215b8e0cf7894a2d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed121aa89780d1495e6a6a215b8e0cf7894a2d24", "html_url": "https://github.com/rust-lang/rust/commit/ed121aa89780d1495e6a6a215b8e0cf7894a2d24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed121aa89780d1495e6a6a215b8e0cf7894a2d24/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dda364ab3a4234524836ca104224d9cb236a599", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dda364ab3a4234524836ca104224d9cb236a599", "html_url": "https://github.com/rust-lang/rust/commit/4dda364ab3a4234524836ca104224d9cb236a599"}, {"sha": "546e8f9ff47c29e92b970bb2921ef7148fc7ea14", "url": "https://api.github.com/repos/rust-lang/rust/commits/546e8f9ff47c29e92b970bb2921ef7148fc7ea14", "html_url": "https://github.com/rust-lang/rust/commit/546e8f9ff47c29e92b970bb2921ef7148fc7ea14"}], "stats": {"total": 106, "additions": 98, "deletions": 8}, "files": [{"sha": "b0db7bda033b8c89b10a8638f35da3cfa60485af", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 98, "deletions": 8, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ed121aa89780d1495e6a6a215b8e0cf7894a2d24/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed121aa89780d1495e6a6a215b8e0cf7894a2d24/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=ed121aa89780d1495e6a6a215b8e0cf7894a2d24", "patch": "@@ -36,15 +36,66 @@ pub struct String {\n     vec: Vec<u8>,\n }\n \n-/// A possible error value from the `String::from_utf8` function.\n+/// A possible error value when converting a `String` from a UTF-8 byte vector.\n+///\n+/// This type is the error type for the [`from_utf8()`] method on [`String`]. It\n+/// is designed in such a way to carefully avoid reallocations: the\n+/// [`into_bytes()`] method will give back the byte vector that was used in the\n+/// conversion attempt.\n+///\n+/// [`from_utf8()`]: struct.String.html#method.from_utf8\n+/// [`String`]: struct.String.html\n+/// [`into_bytes()`]: struct.FromUtf8Error.html#method.into_bytes\n+///\n+/// The [`Utf8Error`] type provided by [`std::str`] represents an error that may\n+/// occur when converting a slice of [`u8`]s to a [`&str`]. In this sense, it's\n+/// an analogue to `FromUtf8Error`, and you can get one from a `FromUtf8Error`\n+/// through the [`utf8_error()`] method.\n+///\n+/// [`Utf8Error`]: ../str/struct.Utf8Error.html\n+/// [`std::str`]: ../str/index.html\n+/// [`u8`]: ../primitive.u8.html\n+/// [`&str`]: ../primitive.str.html\n+/// [`utf8_error()`]: #method.utf8_error\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// // some invalid bytes, in a vector\n+/// let bytes = vec![0, 159];\n+///\n+/// let value = String::from_utf8(bytes);\n+///\n+/// assert!(value.is_err());\n+/// assert_eq!(vec![0, 159], value.unwrap_err().into_bytes());\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct FromUtf8Error {\n     bytes: Vec<u8>,\n     error: Utf8Error,\n }\n \n-/// A possible error value from the `String::from_utf16` function.\n+/// A possible error value when converting a `String` from a UTF-16 byte slice.\n+///\n+/// This type is the error type for the [`from_utf16()`] method on [`String`].\n+///\n+/// [`from_utf16()`]: struct.String.html#method.from_utf16\n+/// [`String`]: struct.String.html\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// // \ud834\udd1emu<invalid>ic\n+/// let v = &[0xD834, 0xDD1E, 0x006d, 0x0075,\n+///           0xD800, 0x0069, 0x0063];\n+///\n+/// assert!(String::from_utf16(v).is_err());\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct FromUtf16Error(());\n@@ -337,13 +388,14 @@ impl String {\n     ///\n     /// ```\n     /// // \ud834\udd1emusic\n-    /// let mut v = &mut [0xD834, 0xDD1E, 0x006d, 0x0075,\n-    ///                   0x0073, 0x0069, 0x0063];\n+    /// let v = &[0xD834, 0xDD1E, 0x006d, 0x0075,\n+    ///           0x0073, 0x0069, 0x0063];\n     /// assert_eq!(String::from_utf16(v).unwrap(),\n     ///            \"\ud834\udd1emusic\".to_string());\n     ///\n     /// // \ud834\udd1emu<invalid>ic\n-    /// v[4] = 0xD800;\n+    /// let v = &[0xD834, 0xDD1E, 0x006d, 0x0075,\n+    ///           0xD800, 0x0069, 0x0063];\n     /// assert!(String::from_utf16(v).is_err());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -850,14 +902,52 @@ impl String {\n }\n \n impl FromUtf8Error {\n-    /// Consumes this error, returning the bytes that were attempted to make a\n-    /// `String` with.\n+    /// Returns the bytes that were attempted to convert to a `String`.\n+    ///\n+    /// This method is carefully constructed to avoid allocation. It will\n+    /// consume the error, moving out the bytes, so that a copy of the bytes\n+    /// does not need to be made.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// // some invalid bytes, in a vector\n+    /// let bytes = vec![0, 159];\n+    ///\n+    /// let value = String::from_utf8(bytes);\n+    ///\n+    /// assert_eq!(vec![0, 159], value.unwrap_err().into_bytes());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_bytes(self) -> Vec<u8> {\n         self.bytes\n     }\n \n-    /// Access the underlying UTF8-error that was the cause of this error.\n+    /// Fetch a `Utf8Error` to get more details about the conversion failure.\n+    ///\n+    /// The [`Utf8Error`] type provided by [`std::str`] represents an error that may\n+    /// occur when converting a slice of [`u8`]s to a [`&str`]. In this sense, it's\n+    /// an analogue to `FromUtf8Error`. See its documentation for more details\n+    /// on using it.\n+    ///\n+    /// [`Utf8Error`]: ../str/struct.Utf8Error.html\n+    /// [`std::str`]: ../str/index.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// // some invalid bytes, in a vector\n+    /// let bytes = vec![0, 159];\n+    ///\n+    /// let error = String::from_utf8(bytes).unwrap_err().utf8_error();\n+    ///\n+    /// // the first byte is invalid here\n+    /// assert_eq!(1, error.valid_up_to());\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn utf8_error(&self) -> Utf8Error {\n         self.error"}]}