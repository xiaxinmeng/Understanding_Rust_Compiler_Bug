{"sha": "14b2436993461c3c703baab29a9d9579bea461fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YjI0MzY5OTM0NjFjM2M3MDNiYWFiMjlhOWQ5NTc5YmVhNDYxZmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-12T15:48:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-12T15:48:46Z"}, "message": "avoid more intermediate allocations in validation errors", "tree": {"sha": "cc07593a86f12766d0a8ff204b8ff48604407bb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc07593a86f12766d0a8ff204b8ff48604407bb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14b2436993461c3c703baab29a9d9579bea461fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14b2436993461c3c703baab29a9d9579bea461fc", "html_url": "https://github.com/rust-lang/rust/commit/14b2436993461c3c703baab29a9d9579bea461fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14b2436993461c3c703baab29a9d9579bea461fc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ddc0278d36179dc485a093b5bc2fc2347a746da", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ddc0278d36179dc485a093b5bc2fc2347a746da", "html_url": "https://github.com/rust-lang/rust/commit/3ddc0278d36179dc485a093b5bc2fc2347a746da"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "1dbcfe5588e48c75e421e113bbb9e2a5ab116b3b", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/14b2436993461c3c703baab29a9d9579bea461fc/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b2436993461c3c703baab29a9d9579bea461fc/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=14b2436993461c3c703baab29a9d9579bea461fc", "patch": "@@ -22,28 +22,23 @@ use super::{\n \n macro_rules! throw_validation_failure {\n     ($what:expr, $where:expr, $details:expr) => {{\n-        let where_ = path_format(&$where);\n-        let where_ = if where_.is_empty() {\n-            String::new()\n-        } else {\n-            format!(\" at {}\", where_)\n-        };\n-        throw_unsup!(ValidationFailure(format!(\n-            \"encountered {}{}, but expected {}\",\n-            $what, where_, $details,\n-        )))\n+        let mut msg = format!(\"encountered {}\", $what);\n+        let where_ = &$where;\n+        if !where_.is_empty() {\n+            msg.push_str(\" at \");\n+            write_path(&mut msg, where_);\n+        }\n+        write!(&mut msg, \", but expected {}\", $details).unwrap();\n+        throw_unsup!(ValidationFailure(msg))\n     }};\n     ($what:expr, $where:expr) => {{\n-        let where_ = path_format(&$where);\n-        let where_ = if where_.is_empty() {\n-            String::new()\n-        } else {\n-            format!(\" at {}\", where_)\n-        };\n-        throw_unsup!(ValidationFailure(format!(\n-            \"encountered {}{}\",\n-            $what, where_,\n-        )))\n+        let mut msg = format!(\"encountered {}\", $what);\n+        let where_ = &$where;\n+        if !where_.is_empty() {\n+            msg.push_str(\" at \");\n+            write_path(&mut msg, where_);\n+        }\n+        throw_unsup!(ValidationFailure(msg))\n     }};\n }\n \n@@ -113,10 +108,9 @@ impl<T: Copy + Eq + Hash + std::fmt::Debug, PATH: Default> RefTracking<T, PATH>\n }\n \n /// Format a path\n-fn path_format(path: &Vec<PathElem>) -> String {\n+fn write_path(out: &mut String, path: &Vec<PathElem>) {\n     use self::PathElem::*;\n \n-    let mut out = String::new();\n     for elem in path.iter() {\n         match elem {\n             Field(name) => write!(out, \".{}\", name),\n@@ -135,7 +129,6 @@ fn path_format(path: &Vec<PathElem>) -> String {\n             DynDowncast => write!(out, \".<dyn-downcast>\"),\n         }.unwrap()\n     }\n-    out\n }\n \n // Test if a range that wraps at overflow contains `test`"}]}