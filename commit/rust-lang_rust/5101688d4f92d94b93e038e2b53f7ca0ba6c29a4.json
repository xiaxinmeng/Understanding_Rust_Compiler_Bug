{"sha": "5101688d4f92d94b93e038e2b53f7ca0ba6c29a4", "node_id": "C_kwDOAAsO6NoAKDUxMDE2ODhkNGY5MmQ5NGI5M2UwMzhlMmI1M2Y3Y2EwYmE2YzI5YTQ", "commit": {"author": {"name": "nidnogg", "email": "henriquevt98@gmail.com", "date": "2022-08-22T15:38:16Z"}, "committer": {"name": "nidnogg", "email": "henriquevt98@gmail.com", "date": "2022-08-22T15:38:16Z"}, "message": "Addressed trailing newlines, odd whitespace skipped by x.py fmt", "tree": {"sha": "f232e8b2cf60b51c826e5dbd9013bfd24852336c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f232e8b2cf60b51c826e5dbd9013bfd24852336c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5101688d4f92d94b93e038e2b53f7ca0ba6c29a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5101688d4f92d94b93e038e2b53f7ca0ba6c29a4", "html_url": "https://github.com/rust-lang/rust/commit/5101688d4f92d94b93e038e2b53f7ca0ba6c29a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5101688d4f92d94b93e038e2b53f7ca0ba6c29a4/comments", "author": {"login": "nidnogg", "id": 17261185, "node_id": "MDQ6VXNlcjE3MjYxMTg1", "avatar_url": "https://avatars.githubusercontent.com/u/17261185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nidnogg", "html_url": "https://github.com/nidnogg", "followers_url": "https://api.github.com/users/nidnogg/followers", "following_url": "https://api.github.com/users/nidnogg/following{/other_user}", "gists_url": "https://api.github.com/users/nidnogg/gists{/gist_id}", "starred_url": "https://api.github.com/users/nidnogg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nidnogg/subscriptions", "organizations_url": "https://api.github.com/users/nidnogg/orgs", "repos_url": "https://api.github.com/users/nidnogg/repos", "events_url": "https://api.github.com/users/nidnogg/events{/privacy}", "received_events_url": "https://api.github.com/users/nidnogg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nidnogg", "id": 17261185, "node_id": "MDQ6VXNlcjE3MjYxMTg1", "avatar_url": "https://avatars.githubusercontent.com/u/17261185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nidnogg", "html_url": "https://github.com/nidnogg", "followers_url": "https://api.github.com/users/nidnogg/followers", "following_url": "https://api.github.com/users/nidnogg/following{/other_user}", "gists_url": "https://api.github.com/users/nidnogg/gists{/gist_id}", "starred_url": "https://api.github.com/users/nidnogg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nidnogg/subscriptions", "organizations_url": "https://api.github.com/users/nidnogg/orgs", "repos_url": "https://api.github.com/users/nidnogg/repos", "events_url": "https://api.github.com/users/nidnogg/events{/privacy}", "received_events_url": "https://api.github.com/users/nidnogg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "066796cecebf79fe8732c33d10167999661dca67", "url": "https://api.github.com/repos/rust-lang/rust/commits/066796cecebf79fe8732c33d10167999661dca67", "html_url": "https://github.com/rust-lang/rust/commit/066796cecebf79fe8732c33d10167999661dca67"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "33bb116d6fa23f01c513d1b34b0d7e8ed9007070", "filename": "compiler/rustc_error_messages/locales/en-US/const_eval.ftl", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5101688d4f92d94b93e038e2b53f7ca0ba6c29a4/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5101688d4f92d94b93e038e2b53f7ca0ba6c29a4/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl?ref=5101688d4f92d94b93e038e2b53f7ca0ba6c29a4", "patch": "@@ -38,33 +38,33 @@ const_eval_unstable_const_fn = `{$def_path}` is not yet stable as a const fn\n \n const_eval_unallowed_mutable_refs =\n     mutable references are not allowed in the final value of {$kind}s\n-    .teach_note = \n+    .teach_note =\n         References in statics and constants may only refer to immutable values.\\n\\n\n-        Statics are shared everywhere, and if they refer to mutable data one might violate memory \n+        Statics are shared everywhere, and if they refer to mutable data one might violate memory\n         safety since holding multiple mutable references to shared data is not allowed.\\n\\n\n         If you really want global mutable state, try using static mut or a global UnsafeCell.\n \n const_eval_unallowed_mutable_refs_raw =\n     raw mutable references are not allowed in the final value of {$kind}s\n-    .teach_note = \n+    .teach_note =\n         References in statics and constants may only refer to immutable values.\\n\\n\n-        Statics are shared everywhere, and if they refer to mutable data one might violate memory \n+        Statics are shared everywhere, and if they refer to mutable data one might violate memory\n         safety since holding multiple mutable references to shared data is not allowed.\\n\\n\n         If you really want global mutable state, try using static mut or a global UnsafeCell.\n \n-const_eval_non_const_fmt_macro_call = \n+const_eval_non_const_fmt_macro_call =\n     cannot call non-const formatting macro in {$kind}s\n \n-const_eval_non_const_fn_call = \n+const_eval_non_const_fn_call =\n     cannot call non-const fn `{$def_path_str}` in {$kind}s\n \n-const_eval_unallowed_op_in_const_context = \n+const_eval_unallowed_op_in_const_context =\n     {$msg}\n \n const_eval_unallowed_heap_allocations =\n     allocations are not allowed in {$kind}s\n     .label = allocation not allowed in {$kind}s\n-    .teach_note = \n+    .teach_note =\n         The value of statics and constants must be known at compile time, and they live for the entire lifetime of a program. Creating a boxed value allocates memory on the heap at runtime, and therefore cannot be done at compile time.\n \n const_eval_unallowed_inline_asm =\n@@ -74,10 +74,10 @@ const_eval_interior_mutable_data_refer =\n     {$kind}s cannot refer to interior mutable data\n     .label = this borrow of an interior mutable value may end up in the final value\n     .help = to fix this, the value can be extracted to a separate `static` item and then referenced\n-    .teach_note = \n-        A constant containing interior mutable data behind a reference can allow you to modify that data. \n-        This would make multiple uses of a constant to be able to see different values and allow circumventing \n+    .teach_note =\n+        A constant containing interior mutable data behind a reference can allow you to modify that data.\n+        This would make multiple uses of a constant to be able to see different values and allow circumventing\n         the `Send` and `Sync` requirements for shared mutable data, which is unsound.\n \n-const_eval_interior_mutability_borrow = \n-    cannot borrow here, since the borrowed element may contain interior mutability\n\\ No newline at end of file\n+const_eval_interior_mutability_borrow =\n+    cannot borrow here, since the borrowed element may contain interior mutability"}]}