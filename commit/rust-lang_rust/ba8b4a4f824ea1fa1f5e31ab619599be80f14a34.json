{"sha": "ba8b4a4f824ea1fa1f5e31ab619599be80f14a34", "node_id": "C_kwDOAAsO6NoAKGJhOGI0YTRmODI0ZWExZmExZjVlMzFhYjYxOTU5OWJlODBmMTRhMzQ", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-03-17T17:55:16Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-03-17T17:55:16Z"}, "message": "Use let else here", "tree": {"sha": "982ae9e1d1b3d7705eee8650d0533fb7044fe1e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/982ae9e1d1b3d7705eee8650d0533fb7044fe1e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba8b4a4f824ea1fa1f5e31ab619599be80f14a34", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmIzdgQACgkQgTGiTgx5\n76+ASxAAhz9Pl+y5tzq8Em0eqWnMlQh5c+3z6G9JYLwfQTgyUldewmZvsyiGaWli\n36cL3PL+K5XytqZGwZDq0U2GvofVhAumWyQCmVnVNHSgvjNfOmR6/UHh4/LwEmOQ\nVc9SVMBR0Volih9Ruf6Y9/C+aEUi80tz2QTRwZ+ERJwLsd5FTYxsvVvS8x4VskTI\nvWRPPU9ZCe/QbJ4rIPGMY23OnWTVFqBt1qBhnLmBDIijkeNi8vzC3ZoeK7kFLYjB\n0xDV57u4YROTwRJhDMWkL+eK0I4jK0S8cQS8lD5l1MBQmV0jMj1EIYrA2adTMwBA\npZXV8gW7fihT1EXMWAYVOsxgZbbySpr38sqHOo9HHcP3oyIz80u5L8QtwC04nYit\nmp0D3XmJg22Hn6kymRXoLpDLLcd2UuGVFm9OK2XqKIWj9YWIalxkAHicRqZP3JWO\nGucTugYawtUHV3Yt7JjIQkxBGdiqoEaDqajNb8OSG8O+MrA8zCCYOr/gKFRM4y6A\nM2C5fOCKLb1GWVWrq4npuhWZQREVQQy8mmAJGstET9ndctvrkVUGAzNH9GWkejUW\ncfAkczLViLoo/Iq74KxLNG2P8af6zc+Uf9PC6KLC60mjO5ERrmu1vDCCe36A5npZ\nQnKGGK5zopkz/BsiQZUWOnNeInD6tpyvXQT0CcMWWie4+dlAmfs=\n=cPfr\n-----END PGP SIGNATURE-----", "payload": "tree 982ae9e1d1b3d7705eee8650d0533fb7044fe1e0\nparent 9c076f3f90444183d4d51754f19ea55a801e0e05\nauthor Santiago Pastorino <spastorino@gmail.com> 1647539716 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1647539716 -0300\n\nUse let else here\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba8b4a4f824ea1fa1f5e31ab619599be80f14a34", "html_url": "https://github.com/rust-lang/rust/commit/ba8b4a4f824ea1fa1f5e31ab619599be80f14a34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba8b4a4f824ea1fa1f5e31ab619599be80f14a34/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c076f3f90444183d4d51754f19ea55a801e0e05", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c076f3f90444183d4d51754f19ea55a801e0e05", "html_url": "https://github.com/rust-lang/rust/commit/9c076f3f90444183d4d51754f19ea55a801e0e05"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "6c3ce3ee371b3dbfdba53d0a76689672482ec325", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ba8b4a4f824ea1fa1f5e31ab619599be80f14a34/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba8b4a4f824ea1fa1f5e31ab619599be80f14a34/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=ba8b4a4f824ea1fa1f5e31ab619599be80f14a34", "patch": "@@ -387,42 +387,42 @@ fn resolve_negative_obligation<'cx, 'tcx>(\n ) -> bool {\n     let tcx = infcx.tcx;\n \n-    if let Some(o) = o.flip_polarity(tcx) {\n-        let mut fulfillment_cx = FulfillmentContext::new();\n-        fulfillment_cx.register_predicate_obligation(infcx, o);\n+    let Some(o) = o.flip_polarity(tcx) else {\n+        return false;\n+    };\n \n-        let errors = fulfillment_cx.select_all_or_error(infcx);\n+    let mut fulfillment_cx = FulfillmentContext::new();\n+    fulfillment_cx.register_predicate_obligation(infcx, o);\n \n-        if !errors.is_empty() {\n-            return false;\n-        }\n+    let errors = fulfillment_cx.select_all_or_error(infcx);\n \n-        let mut outlives_env = OutlivesEnvironment::new(param_env);\n-        // FIXME -- add \"assumed to be well formed\" types into the `outlives_env`\n+    if !errors.is_empty() {\n+        return false;\n+    }\n \n-        // \"Save\" the accumulated implied bounds into the outlives environment\n-        // (due to the FIXME above, there aren't any, but this step is still needed).\n-        // The \"body id\" is given as `CRATE_HIR_ID`, which is the same body-id used\n-        // by the \"dummy\" causes elsewhere (body-id is only relevant when checking\n-        // function bodies with closures).\n-        outlives_env.save_implied_bounds(CRATE_HIR_ID);\n+    let mut outlives_env = OutlivesEnvironment::new(param_env);\n+    // FIXME -- add \"assumed to be well formed\" types into the `outlives_env`\n \n-        infcx.process_registered_region_obligations(\n-            outlives_env.region_bound_pairs_map(),\n-            Some(tcx.lifetimes.re_root_empty),\n-            param_env,\n-        );\n+    // \"Save\" the accumulated implied bounds into the outlives environment\n+    // (due to the FIXME above, there aren't any, but this step is still needed).\n+    // The \"body id\" is given as `CRATE_HIR_ID`, which is the same body-id used\n+    // by the \"dummy\" causes elsewhere (body-id is only relevant when checking\n+    // function bodies with closures).\n+    outlives_env.save_implied_bounds(CRATE_HIR_ID);\n \n-        let errors = infcx.resolve_regions(region_context, &outlives_env, RegionckMode::default());\n+    infcx.process_registered_region_obligations(\n+        outlives_env.region_bound_pairs_map(),\n+        Some(tcx.lifetimes.re_root_empty),\n+        param_env,\n+    );\n \n-        if !errors.is_empty() {\n-            return false;\n-        }\n+    let errors = infcx.resolve_regions(region_context, &outlives_env, RegionckMode::default());\n \n-        return true;\n+    if !errors.is_empty() {\n+        return false;\n     }\n \n-    false\n+    true\n }\n \n pub fn trait_ref_is_knowable<'tcx>("}]}