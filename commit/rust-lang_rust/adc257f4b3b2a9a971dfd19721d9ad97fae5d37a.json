{"sha": "adc257f4b3b2a9a971dfd19721d9ad97fae5d37a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYzI1N2Y0YjNiMmE5YTk3MWRmZDE5NzIxZDlhZDk3ZmFlNWQzN2E=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-18T05:29:36Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-03-18T23:27:53Z"}, "message": "Put a space before colon that appears after a meta variable\n\nCloses #2534.", "tree": {"sha": "aacc7bf7b1c0200ad28289b5422977d328bbe021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aacc7bf7b1c0200ad28289b5422977d328bbe021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adc257f4b3b2a9a971dfd19721d9ad97fae5d37a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adc257f4b3b2a9a971dfd19721d9ad97fae5d37a", "html_url": "https://github.com/rust-lang/rust/commit/adc257f4b3b2a9a971dfd19721d9ad97fae5d37a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adc257f4b3b2a9a971dfd19721d9ad97fae5d37a/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8109f8e9c9a460dcb3176bd002985d8a27afc32", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8109f8e9c9a460dcb3176bd002985d8a27afc32", "html_url": "https://github.com/rust-lang/rust/commit/f8109f8e9c9a460dcb3176bd002985d8a27afc32"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "784e6c5798bec15c13fef1ef119ffe687cc5a89f", "filename": "src/macros.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adc257f4b3b2a9a971dfd19721d9ad97fae5d37a/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc257f4b3b2a9a971dfd19721d9ad97fae5d37a/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=adc257f4b3b2a9a971dfd19721d9ad97fae5d37a", "patch": "@@ -522,6 +522,7 @@ impl MacroArgKind {\n             _ => false,\n         }\n     }\n+\n     fn starts_with_dollar(&self) -> bool {\n         match *self {\n             MacroArgKind::Repeat(..) | MacroArgKind::MetaVariable(..) => true,\n@@ -777,6 +778,9 @@ impl MacroArgParser {\n             if ident_like(&self.start_tok) {\n                 return true;\n             }\n+            if self.start_tok == Token::Colon {\n+                return true;\n+            }\n         }\n \n         if force_space_before(&self.start_tok) {"}, {"sha": "f390b426317eabd5081ac2f6382599e69d56de2b", "filename": "tests/source/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adc257f4b3b2a9a971dfd19721d9ad97fae5d37a/tests%2Fsource%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc257f4b3b2a9a971dfd19721d9ad97fae5d37a/tests%2Fsource%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacro_rules.rs?ref=adc257f4b3b2a9a971dfd19721d9ad97fae5d37a", "patch": "@@ -147,6 +147,12 @@ macro foo($type_name: ident, $docs: expr) {\n     pub struct $type_name;\n }\n \n+// #2534\n+macro_rules! foo {\n+    ($a:ident : $b:ty) => {};\n+    ($a:ident $b:ident $c:ident) => {};\n+}\n+\n // #2538\n macro_rules! add_message_to_notes {\n     ($msg:expr) => {{"}, {"sha": "793efcb6b0c2fc94f2040ee43170c5aa3c5d2c5f", "filename": "tests/target/macro_rules.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/adc257f4b3b2a9a971dfd19721d9ad97fae5d37a/tests%2Ftarget%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc257f4b3b2a9a971dfd19721d9ad97fae5d37a/tests%2Ftarget%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacro_rules.rs?ref=adc257f4b3b2a9a971dfd19721d9ad97fae5d37a", "patch": "@@ -15,8 +15,8 @@ macro_rules! m {\n     ) => {};\n     ($name: ident($($dol: tt $var: ident)*) $($body: tt)*) => {};\n     (\n-        $($i: ident: $ty: ty, $def: expr, $stb: expr, $($dstring: tt),+);+ $(;)*\n-        $($i: ident: $ty: ty, $def: expr, $stb: expr, $($dstring: tt),+);+ $(;)*\n+        $($i: ident : $ty: ty, $def: expr, $stb: expr, $($dstring: tt),+);+ $(;)*\n+        $($i: ident : $ty: ty, $def: expr, $stb: expr, $($dstring: tt),+);+ $(;)*\n     ) => {};\n     ($foo: tt foo[$attr: meta] $name: ident) => {};\n     ($foo: tt[$attr: meta] $name: ident) => {};\n@@ -28,7 +28,7 @@ macro_rules! m {\n }\n \n macro_rules! impl_a_method {\n-    ($n: ident($a: ident: $ta: ty) -> $ret: ty { $body: expr }) => {\n+    ($n: ident($a: ident : $ta: ty) -> $ret: ty { $body: expr }) => {\n         fn $n($a: $ta) -> $ret {\n             $body\n         }\n@@ -38,7 +38,7 @@ macro_rules! impl_a_method {\n             };\n         }\n     };\n-    ($n: ident($a: ident: $ta: ty, $b: ident: $tb: ty) -> $ret: ty { $body: expr }) => {\n+    ($n: ident($a: ident : $ta: ty, $b: ident : $tb: ty) -> $ret: ty { $body: expr }) => {\n         fn $n($a: $ta, $b: $tb) -> $ret {\n             $body\n         }\n@@ -49,7 +49,7 @@ macro_rules! impl_a_method {\n         }\n     };\n     (\n-        $n: ident($a: ident: $ta: ty, $b: ident: $tb: ty, $c: ident: $tc: ty) ->\n+        $n: ident($a: ident : $ta: ty, $b: ident : $tb: ty, $c: ident : $tc: ty) ->\n         $ret: ty { $body: expr }\n     ) => {\n         fn $n($a: $ta, $b: $tb, $c: $tc) -> $ret {\n@@ -62,7 +62,7 @@ macro_rules! impl_a_method {\n         }\n     };\n     (\n-        $n: ident($a: ident: $ta: ty, $b: ident: $tb: ty, $c: ident: $tc: ty, $d: ident: $td: ty) ->\n+        $n: ident($a: ident : $ta: ty, $b: ident : $tb: ty, $c: ident : $tc: ty, $d: ident : $td: ty) ->\n         $ret: ty { $body: expr }\n     ) => {\n         fn $n($a: $ta, $b: $tb, $c: $tc, $d: $td) -> $ret {\n@@ -180,6 +180,12 @@ macro foo($type_name: ident, $docs: expr) {\n     pub struct $type_name;\n }\n \n+// #2534\n+macro_rules! foo {\n+    ($a: ident : $b: ty) => {};\n+    ($a: ident $b: ident $c: ident) => {};\n+}\n+\n // #2538\n macro_rules! add_message_to_notes {\n     ($msg: expr) => {{"}]}