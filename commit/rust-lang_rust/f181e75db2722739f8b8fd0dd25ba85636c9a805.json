{"sha": "f181e75db2722739f8b8fd0dd25ba85636c9a805", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxODFlNzVkYjI3MjI3MzlmOGI4ZmQwZGQyNWJhODU2MzZjOWE4MDU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-29T08:01:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-29T08:01:31Z"}, "message": "rustup", "tree": {"sha": "2164fd023e0dd03d56bab38bb465743516fee06d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2164fd023e0dd03d56bab38bb465743516fee06d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f181e75db2722739f8b8fd0dd25ba85636c9a805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f181e75db2722739f8b8fd0dd25ba85636c9a805", "html_url": "https://github.com/rust-lang/rust/commit/f181e75db2722739f8b8fd0dd25ba85636c9a805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f181e75db2722739f8b8fd0dd25ba85636c9a805/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85", "html_url": "https://github.com/rust-lang/rust/commit/7a5e95c9ac3fa2eab4b2413bdf5f5b8672e94a85"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "0b3196a7a2806dba4e5ecdb556783b8b959fe43c", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f181e75db2722739f8b8fd0dd25ba85636c9a805/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/f181e75db2722739f8b8fd0dd25ba85636c9a805/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=f181e75db2722739f8b8fd0dd25ba85636c9a805", "patch": "@@ -1 +1 @@\n-7b73d14b0b35e7b4f79f2d71dc1bbbab31698288\n+150322f86d441752874a8bed603d71119f190b8b"}, {"sha": "d0a5fc958662a52ef2a49e69a2ba69aed539288b", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f181e75db2722739f8b8fd0dd25ba85636c9a805/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f181e75db2722739f8b8fd0dd25ba85636c9a805/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=f181e75db2722739f8b8fd0dd25ba85636c9a805", "patch": "@@ -92,7 +92,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// Test if this immediate equals 0.\n     fn is_null(&self, val: Scalar<Tag>) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_ref();\n-        let null = Scalar::ptr_null(this);\n+        let null = Scalar::null_ptr(this);\n         this.ptr_eq(val, null)\n     }\n "}, {"sha": "8a69e725abfc6ab1dc221858dae18326e46f5925", "filename": "src/shims/env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f181e75db2722739f8b8fd0dd25ba85636c9a805/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f181e75db2722739f8b8fd0dd25ba85636c9a805/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=f181e75db2722739f8b8fd0dd25ba85636c9a805", "patch": "@@ -98,7 +98,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // The offset is used to strip the \"{name}=\" part of the string.\n                 Scalar::from(var_ptr.offset(Size::from_bytes(u64::try_from(name.len()).unwrap().checked_add(1).unwrap()), this)?)\n             }\n-            None => Scalar::ptr_null(&*this.tcx),\n+            None => Scalar::null_ptr(&*this.tcx),\n         })\n     }\n \n@@ -305,7 +305,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             Err(e) => this.set_last_error_from_io_error(e)?,\n         }\n-        Ok(Scalar::ptr_null(&*this.tcx))\n+        Ok(Scalar::null_ptr(&*this.tcx))\n     }\n \n     fn chdir(&mut self, path_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n@@ -343,7 +343,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Collect all the pointers to each variable in a vector.\n         let mut vars: Vec<Scalar<Tag>> = this.machine.env_vars.map.values().map(|&ptr| ptr.into()).collect();\n         // Add the trailing null pointer.\n-        vars.push(Scalar::ptr_null(this));\n+        vars.push(Scalar::null_ptr(this));\n         // Make an array with all these pointers inside Miri.\n         let tcx = this.tcx;\n         let vars_layout ="}, {"sha": "21c4b02e708526ef880ecf8a768bd31c6c910ff6", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f181e75db2722739f8b8fd0dd25ba85636c9a805/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f181e75db2722739f8b8fd0dd25ba85636c9a805/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=f181e75db2722739f8b8fd0dd25ba85636c9a805", "patch": "@@ -47,7 +47,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn malloc(&mut self, size: u64, zero_init: bool, kind: MiriMemoryKind) -> Scalar<Tag> {\n         let this = self.eval_context_mut();\n         if size == 0 {\n-            Scalar::ptr_null(this)\n+            Scalar::null_ptr(this)\n         } else {\n             let align = this.min_align(size, kind);\n             let ptr = this.memory.allocate(Size::from_bytes(size), align, kind.into());\n@@ -78,7 +78,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let new_align = this.min_align(new_size, kind);\n         if this.is_null(old_ptr)? {\n             if new_size == 0 {\n-                Ok(Scalar::ptr_null(this))\n+                Ok(Scalar::null_ptr(this))\n             } else {\n                 let new_ptr =\n                     this.memory.allocate(Size::from_bytes(new_size), new_align, kind.into());\n@@ -88,7 +88,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let old_ptr = this.force_ptr(old_ptr)?;\n             if new_size == 0 {\n                 this.memory.deallocate(old_ptr, None, kind.into())?;\n-                Ok(Scalar::ptr_null(this))\n+                Ok(Scalar::null_ptr(this))\n             } else {\n                 let new_ptr = this.memory.reallocate(\n                     old_ptr,"}, {"sha": "5f8be275b2e43ea205fb42b51700da5090d45d58", "filename": "src/shims/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f181e75db2722739f8b8fd0dd25ba85636c9a805/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f181e75db2722739f8b8fd0dd25ba85636c9a805/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=f181e75db2722739f8b8fd0dd25ba85636c9a805", "patch": "@@ -420,7 +420,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // We cap the number of read bytes to the largest value that we are able to fit in both the\n         // host's and target's `isize`. This saves us from having to handle overflows later.\n-        let count = count.min(this.isize_max() as u64).min(isize::MAX as u64);\n+        let count = count.min(this.machine_isize_max() as u64).min(isize::MAX as u64);\n \n         if let Some(FileHandle { file, writable: _ }) = this.machine.file_handler.handles.get_mut(&fd) {\n             // This can never fail because `count` was capped to be smaller than\n@@ -474,7 +474,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // We cap the number of written bytes to the largest value that we are able to fit in both the\n         // host's and target's `isize`. This saves us from having to handle overflows later.\n-        let count = count.min(this.isize_max() as u64).min(isize::MAX as u64);\n+        let count = count.min(this.machine_isize_max() as u64).min(isize::MAX as u64);\n \n         if let Some(FileHandle { file, writable: _ }) = this.machine.file_handler.handles.get_mut(&fd) {\n             let bytes = this.memory.read_bytes(buf, Size::from_bytes(count))?;\n@@ -860,7 +860,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             Err(e) => {\n                 this.set_last_error_from_io_error(e)?;\n-                Ok(Scalar::ptr_null(this))\n+                Ok(Scalar::null_ptr(this))\n             }\n         }\n     }"}, {"sha": "731dc2fedc5780c6a5e25b991987f2820a6edbb8", "filename": "src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f181e75db2722739f8b8fd0dd25ba85636c9a805/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f181e75db2722739f8b8fd0dd25ba85636c9a805/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=f181e75db2722739f8b8fd0dd25ba85636c9a805", "patch": "@@ -76,7 +76,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let ptr_scalar = this.read_scalar(ptr_op)?.not_undef()?;\n \n         // Default: no result.\n-        let mut result = this.usize_max();\n+        let mut result = this.machine_usize_max();\n         if let Ok(ptr) = this.force_ptr(ptr_scalar) {\n             // Only do anything if we can identify the allocation this goes to.\n             let cur_align ="}, {"sha": "2727c320504015c35fefaae8be62c9c38fe5a6ff", "filename": "src/shims/tls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f181e75db2722739f8b8fd0dd25ba85636c9a805/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f181e75db2722739f8b8fd0dd25ba85636c9a805/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=f181e75db2722739f8b8fd0dd25ba85636c9a805", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> TlsData<'tcx> {\n         match self.keys.get(&key) {\n             Some(&TlsEntry { data, .. }) => {\n                 trace!(\"TLS key {} loaded: {:?}\", key, data);\n-                Ok(data.unwrap_or_else(|| Scalar::ptr_null(cx).into()))\n+                Ok(data.unwrap_or_else(|| Scalar::null_ptr(cx).into()))\n             }\n             None => throw_ub_format!(\"loading from a non-existing TLS key: {}\", key),\n         }\n@@ -173,7 +173,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let ret_place = MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();\n             this.call_function(\n                 thread_callback,\n-                &[Scalar::ptr_null(this).into(), reason.into(), Scalar::ptr_null(this).into()],\n+                &[Scalar::null_ptr(this).into(), reason.into(), Scalar::null_ptr(this).into()],\n                 Some(ret_place),\n                 StackPopCleanup::None { cleanup: true },\n             )?;"}]}