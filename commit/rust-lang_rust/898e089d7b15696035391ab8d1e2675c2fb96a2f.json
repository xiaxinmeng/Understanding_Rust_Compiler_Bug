{"sha": "898e089d7b15696035391ab8d1e2675c2fb96a2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5OGUwODlkN2IxNTY5NjAzNTM5MWFiOGQxZTI2NzVjMmZiOTZhMmY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-05T00:13:39Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-05T00:16:49Z"}, "message": "Fix and re-enable destructors\n\nThere was some confusion on whether the destructors took their\nargument by pointer or direct value. They now take it directly, just\nlike other methods. You no longer get a segfault when a constructor\nactually does something with its self value.", "tree": {"sha": "84cbe7f98173db60c2476e2008b9dc0bd3df383c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84cbe7f98173db60c2476e2008b9dc0bd3df383c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/898e089d7b15696035391ab8d1e2675c2fb96a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/898e089d7b15696035391ab8d1e2675c2fb96a2f", "html_url": "https://github.com/rust-lang/rust/commit/898e089d7b15696035391ab8d1e2675c2fb96a2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/898e089d7b15696035391ab8d1e2675c2fb96a2f/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdb68224054eddddb0c1d2519f9c12b654a6ff8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb68224054eddddb0c1d2519f9c12b654a6ff8f", "html_url": "https://github.com/rust-lang/rust/commit/cdb68224054eddddb0c1d2519f9c12b654a6ff8f"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "3a654da8ae6ca365d22b1e0d8ea07f0dc37b2dc4", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/898e089d7b15696035391ab8d1e2675c2fb96a2f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898e089d7b15696035391ab8d1e2675c2fb96a2f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=898e089d7b15696035391ab8d1e2675c2fb96a2f", "patch": "@@ -1971,9 +1971,7 @@ fn make_drop_glue(@block_ctxt cx, ValueRef v0, ty.t t) {\n                                      C_int(abi.obj_body_elt_tydesc)));\n                 auto tydesc = cx.build.Load(tydescptr);\n \n-                // FIXME: disabled for now.\n-                // auto cx_ = maybe_call_dtor(cx, o);\n-                auto cx_ = cx;\n+                auto cx_ = maybe_call_dtor(cx, o);\n \n                 // Call through the obj's own fields-drop glue first.\n                 call_tydesc_glue_full(cx_, body, tydesc,\n@@ -2771,18 +2769,19 @@ fn maybe_call_dtor(@block_ctxt cx, ValueRef v) -> @block_ctxt {\n     vtbl = cx.build.Load(vtbl);\n     auto dtor_ptr = cx.build.GEP(vtbl, vec(C_int(0), C_int(0)));\n     dtor_ptr = cx.build.Load(dtor_ptr);\n+    auto self_t = llvm.LLVMGetElementType(val_ty(v));\n     dtor_ptr = cx.build.BitCast(dtor_ptr,\n-                                T_ptr(T_dtor(cx.fcx.lcx.ccx, val_ty(v))));\n+                                T_ptr(T_dtor(cx.fcx.lcx.ccx, self_t)));\n     \n     auto dtor_cx = new_sub_block_ctxt(cx, \"dtor\");\n     auto after_cx = new_sub_block_ctxt(cx, \"after_dtor\");\n     auto test = cx.build.ICmp(lib.llvm.LLVMIntNE, dtor_ptr,\n                               C_null(val_ty(dtor_ptr)));\n     cx.build.CondBr(test, dtor_cx.llbb, after_cx.llbb);\n \n-    // FIXME need to pass type params (?)\n+    auto me = dtor_cx.build.Load(v);\n     dtor_cx.build.FastCall(dtor_ptr, vec(C_null(T_ptr(T_nil())),\n-                                        cx.fcx.lltaskptr, v));\n+                                         cx.fcx.lltaskptr, me));\n     dtor_cx.build.Br(after_cx.llbb);\n     ret after_cx;\n }\n@@ -6357,6 +6356,8 @@ fn trans_obj(@local_ctxt cx, &ast._obj ob, ast.def_id oid,\n \n     let TypeRef llbox_ty = T_opaque_obj_ptr(ccx.tn);\n \n+    // FIXME we should probably also allocate a box for empty objs that have a\n+    // dtor, since otherwise they are never dropped, and the dtor never runs\n     if (_vec.len[ast.ty_param](ty_params) == 0u &&\n         _vec.len[ty.arg](arg_tys) == 0u) {\n         // Store null into pair, if no args or typarams."}]}