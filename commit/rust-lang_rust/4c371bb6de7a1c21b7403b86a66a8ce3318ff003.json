{"sha": "4c371bb6de7a1c21b7403b86a66a8ce3318ff003", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMzcxYmI2ZGU3YTFjMjFiNzQwM2I4NmE2NmE4Y2UzMzE4ZmYwMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-28T10:28:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-28T10:28:45Z"}, "message": "Auto merge of #27319 - diaphore:pr_debug_osstr_escape, r=alexcrichton\n\nI had to modify some tests : since `wtf8buf_show` and `wtf8_show` were doing the exact same thing, I repurposed `wtf8_show` to `wtf8buf_show_str` which ensures `Wtf8Buf` `Debug`-formats the same as `str`.\r\n\r\n`write_str_escaped` might also be shared amongst other `fmt` but I just left it there within `Wtf8::fmt` for review.", "tree": {"sha": "06b78d6597cda66e5e96f7e3da90fe895f5379f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b78d6597cda66e5e96f7e3da90fe895f5379f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c371bb6de7a1c21b7403b86a66a8ce3318ff003", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c371bb6de7a1c21b7403b86a66a8ce3318ff003", "html_url": "https://github.com/rust-lang/rust/commit/4c371bb6de7a1c21b7403b86a66a8ce3318ff003", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c371bb6de7a1c21b7403b86a66a8ce3318ff003/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9", "html_url": "https://github.com/rust-lang/rust/commit/5b72fa42d434e92e5fbb9fbd3b0995cc936ddcb9"}, {"sha": "aa8950427e522794dc5c0201c5e0d5bd2da1f0db", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa8950427e522794dc5c0201c5e0d5bd2da1f0db", "html_url": "https://github.com/rust-lang/rust/commit/aa8950427e522794dc5c0201c5e0d5bd2da1f0db"}], "stats": {"total": 44, "additions": 27, "deletions": 17}, "files": [{"sha": "02b23c6c7e74980a896290608a8ca1b12d9d39b2", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c371bb6de7a1c21b7403b86a66a8ce3318ff003/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c371bb6de7a1c21b7403b86a66a8ce3318ff003/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=4c371bb6de7a1c21b7403b86a66a8ce3318ff003", "patch": "@@ -1287,7 +1287,7 @@ impl Debug for str {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         try!(write!(f, \"\\\"\"));\n         for c in self.chars().flat_map(|c| c.escape_default()) {\n-            try!(write!(f, \"{}\", c));\n+            try!(f.write_char(c))\n         }\n         write!(f, \"\\\"\")\n     }\n@@ -1306,7 +1306,7 @@ impl Debug for char {\n         use char::CharExt;\n         try!(write!(f, \"'\"));\n         for c in self.escape_default() {\n-            try!(write!(f, \"{}\", c));\n+            try!(f.write_char(c))\n         }\n         write!(f, \"'\")\n     }"}, {"sha": "3d5d1f5e0ebd1205a99acf8e309462529ab51e8f", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4c371bb6de7a1c21b7403b86a66a8ce3318ff003/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c371bb6de7a1c21b7403b86a66a8ce3318ff003/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=4c371bb6de7a1c21b7403b86a66a8ce3318ff003", "patch": "@@ -426,26 +426,36 @@ impl Ord for Wtf8 {\n /// and surrogates as `\\u` followed by four hexadecimal digits.\n /// Example: `\"a\\u{D800}\"` for a slice with code points [U+0061, U+D800]\n impl fmt::Debug for Wtf8 {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n+        fn write_str_escaped(f: &mut fmt::Formatter, s: &str) -> fmt::Result {\n+            use fmt::Write;\n+            for c in s.chars().flat_map(|c| c.escape_default()) {\n+                try!(f.write_char(c))\n+            }\n+            Ok(())\n+        }\n+\n         try!(formatter.write_str(\"\\\"\"));\n         let mut pos = 0;\n         loop {\n             match self.next_surrogate(pos) {\n                 None => break,\n                 Some((surrogate_pos, surrogate)) => {\n-                    try!(formatter.write_str(unsafe {\n-                        // the data in this slice is valid UTF-8, transmute to &str\n-                        mem::transmute(&self.bytes[pos .. surrogate_pos])\n-                    }));\n+                    try!(write_str_escaped(\n+                        formatter,\n+                        unsafe { str::from_utf8_unchecked(\n+                            &self.bytes[pos .. surrogate_pos]\n+                        )},\n+                    ));\n                     try!(write!(formatter, \"\\\\u{{{:X}}}\", surrogate));\n                     pos = surrogate_pos + 3;\n                 }\n             }\n         }\n-        try!(formatter.write_str(unsafe {\n-            // the data in this slice is valid UTF-8, transmute to &str\n-            mem::transmute(&self.bytes[pos..])\n-        }));\n+        try!(write_str_escaped(\n+            formatter,\n+            unsafe { str::from_utf8_unchecked(&self.bytes[pos..]) },\n+        ));\n         formatter.write_str(\"\\\"\")\n     }\n }\n@@ -1083,9 +1093,9 @@ mod tests {\n \n     #[test]\n     fn wtf8buf_show() {\n-        let mut string = Wtf8Buf::from_str(\"a\u00e9 \ud83d\udca9\");\n+        let mut string = Wtf8Buf::from_str(\"a\\t\u00e9 \ud83d\udca9\\r\");\n         string.push(CodePoint::from_u32(0xD800).unwrap());\n-        assert_eq!(format!(\"{:?}\", string), r#\"\"a\u00e9 \ud83d\udca9\\u{D800}\"\"#);\n+        assert_eq!(format!(\"{:?}\", string), r#\"\"a\\t\\u{e9} \\u{1f4a9}\\r\\u{D800}\"\"#);\n     }\n \n     #[test]\n@@ -1094,10 +1104,10 @@ mod tests {\n     }\n \n     #[test]\n-    fn wtf8_show() {\n-        let mut string = Wtf8Buf::from_str(\"a\u00e9 \ud83d\udca9\");\n-        string.push(CodePoint::from_u32(0xD800).unwrap());\n-        assert_eq!(format!(\"{:?}\", string), r#\"\"a\u00e9 \ud83d\udca9\\u{D800}\"\"#);\n+    fn wtf8buf_show_str() {\n+        let text = \"a\\t\u00e9 \ud83d\udca9\\r\";\n+        let mut string = Wtf8Buf::from_str(text);\n+        assert_eq!(format!(\"{:?}\", text), format!(\"{:?}\", string));\n     }\n \n     #[test]"}]}