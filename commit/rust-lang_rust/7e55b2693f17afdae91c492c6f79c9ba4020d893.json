{"sha": "7e55b2693f17afdae91c492c6f79c9ba4020d893", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNTViMjY5M2YxN2FmZGFlOTFjNDkyYzZmNzljOWJhNDAyMGQ4OTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-28T14:46:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-28T18:18:24Z"}, "message": "Move struct parsing to a separate module", "tree": {"sha": "1c639fbb06731440a2545b84f63de711296595e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c639fbb06731440a2545b84f63de711296595e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e55b2693f17afdae91c492c6f79c9ba4020d893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e55b2693f17afdae91c492c6f79c9ba4020d893", "html_url": "https://github.com/rust-lang/rust/commit/7e55b2693f17afdae91c492c6f79c9ba4020d893", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e55b2693f17afdae91c492c6f79c9ba4020d893/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08def60f16a222895b242d907163d914348894c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/08def60f16a222895b242d907163d914348894c7", "html_url": "https://github.com/rust-lang/rust/commit/08def60f16a222895b242d907163d914348894c7"}], "stats": {"total": 169, "additions": 86, "deletions": 83}, "files": [{"sha": "867776415f769558b6373aac953d8b2f9287c5b5", "filename": "src/parser/event_parser/grammar/items/mod.rs", "status": "renamed", "additions": 3, "deletions": 83, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/7e55b2693f17afdae91c492c6f79c9ba4020d893/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e55b2693f17afdae91c492c6f79c9ba4020d893/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fmod.rs?ref=7e55b2693f17afdae91c492c6f79c9ba4020d893", "patch": "@@ -1,5 +1,7 @@\n use super::*;\n \n+mod structs;\n+\n pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n     attributes::inner_attributes(p);\n     while !p.at(EOF) && !(stop_on_r_curly && p.at(R_CURLY)) {\n@@ -29,7 +31,7 @@ fn item(p: &mut Parser) {\n             USE_ITEM\n         }\n         STRUCT_KW => {\n-            struct_item(p);\n+            structs::struct_item(p);\n             STRUCT_ITEM\n         }\n         FN_KW => {\n@@ -57,88 +59,6 @@ fn item(p: &mut Parser) {\n     item.complete(p, item_kind);\n }\n \n-fn struct_item(p: &mut Parser) {\n-    assert!(p.at(STRUCT_KW));\n-    p.bump();\n-\n-    if !p.expect(IDENT) {\n-        return;\n-    }\n-    generic_parameters(p);\n-    match p.current() {\n-        WHERE_KW => {\n-            where_clause(p);\n-            match p.current() {\n-                SEMI => {\n-                    p.bump();\n-                    return;\n-                }\n-                L_CURLY => named_fields(p),\n-                _ => {\n-                    //TODO: special case `(` error message\n-                    p.error().message(\"expected `;` or `{`\").emit();\n-                    return;\n-                }\n-            }\n-        }\n-        SEMI => {\n-            p.bump();\n-            return;\n-        }\n-        L_CURLY => named_fields(p),\n-        L_PAREN => {\n-            pos_fields(p);\n-            p.expect(SEMI);\n-        }\n-        _ => {\n-            p.error().message(\"expected `;`, `{`, or `(`\").emit();\n-            return;\n-        }\n-    }\n-}\n-\n-fn named_fields(p: &mut Parser) {\n-    assert!(p.at(L_CURLY));\n-    p.bump();\n-    while !p.at(R_CURLY) && !p.at(EOF) {\n-        named_field(p);\n-        if !p.at(R_CURLY) {\n-            p.expect(COMMA);\n-        }\n-    }\n-    p.expect(R_CURLY);\n-\n-    fn named_field(p: &mut Parser) {\n-        let field = p.start();\n-        visibility(p);\n-        if p.expect(IDENT) {\n-            p.expect(COLON);\n-            types::type_ref(p);\n-            field.complete(p, NAMED_FIELD);\n-        } else {\n-            field.abandon(p);\n-            p.err_and_bump(\"expected field declaration\");\n-        }\n-    }\n-}\n-\n-fn pos_fields(p: &mut Parser) {\n-    if !p.expect(L_PAREN) {\n-        return;\n-    }\n-    while !p.at(R_PAREN) && !p.at(EOF) {\n-        let pos_field = p.start();\n-        visibility(p);\n-        types::type_ref(p);\n-        pos_field.complete(p, POS_FIELD);\n-\n-        if !p.at(R_PAREN) {\n-            p.expect(COMMA);\n-        }\n-    }\n-    p.expect(R_PAREN);\n-}\n-\n fn generic_parameters(_: &mut Parser) {}\n \n fn where_clause(_: &mut Parser) {}", "previous_filename": "src/parser/event_parser/grammar/items.rs"}, {"sha": "b31cf18df51f1032481ed318ef60bd1aa87ea5a2", "filename": "src/parser/event_parser/grammar/items/structs.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/7e55b2693f17afdae91c492c6f79c9ba4020d893/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e55b2693f17afdae91c492c6f79c9ba4020d893/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fitems%2Fstructs.rs?ref=7e55b2693f17afdae91c492c6f79c9ba4020d893", "patch": "@@ -0,0 +1,83 @@\n+use super::*;\n+\n+pub(super) fn struct_item(p: &mut Parser) {\n+    assert!(p.at(STRUCT_KW));\n+    p.bump();\n+\n+    if !p.expect(IDENT) {\n+        return;\n+    }\n+    generic_parameters(p);\n+    match p.current() {\n+        WHERE_KW => {\n+            where_clause(p);\n+            match p.current() {\n+                SEMI => {\n+                    p.bump();\n+                    return;\n+                }\n+                L_CURLY => named_fields(p),\n+                _ => {\n+                    //TODO: special case `(` error message\n+                    p.error().message(\"expected `;` or `{`\").emit();\n+                    return;\n+                }\n+            }\n+        }\n+        SEMI => {\n+            p.bump();\n+            return;\n+        }\n+        L_CURLY => named_fields(p),\n+        L_PAREN => {\n+            pos_fields(p);\n+            p.expect(SEMI);\n+        }\n+        _ => {\n+            p.error().message(\"expected `;`, `{`, or `(`\").emit();\n+            return;\n+        }\n+    }\n+}\n+\n+fn named_fields(p: &mut Parser) {\n+    assert!(p.at(L_CURLY));\n+    p.bump();\n+    while !p.at(R_CURLY) && !p.at(EOF) {\n+        named_field(p);\n+        if !p.at(R_CURLY) {\n+            p.expect(COMMA);\n+        }\n+    }\n+    p.expect(R_CURLY);\n+\n+    fn named_field(p: &mut Parser) {\n+        let field = p.start();\n+        visibility(p);\n+        if p.expect(IDENT) {\n+            p.expect(COLON);\n+            types::type_ref(p);\n+            field.complete(p, NAMED_FIELD);\n+        } else {\n+            field.abandon(p);\n+            p.err_and_bump(\"expected field declaration\");\n+        }\n+    }\n+}\n+\n+fn pos_fields(p: &mut Parser) {\n+    if !p.expect(L_PAREN) {\n+        return;\n+    }\n+    while !p.at(R_PAREN) && !p.at(EOF) {\n+        let pos_field = p.start();\n+        visibility(p);\n+        types::type_ref(p);\n+        pos_field.complete(p, POS_FIELD);\n+\n+        if !p.at(R_PAREN) {\n+            p.expect(COMMA);\n+        }\n+    }\n+    p.expect(R_PAREN);\n+}"}]}