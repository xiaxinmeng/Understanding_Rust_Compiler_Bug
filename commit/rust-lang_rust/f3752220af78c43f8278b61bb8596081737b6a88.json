{"sha": "f3752220af78c43f8278b61bb8596081737b6a88", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNzUyMjIwYWY3OGM0M2Y4Mjc4YjYxYmI4NTk2MDgxNzM3YjZhODg=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-01-12T10:35:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-12T10:35:36Z"}, "message": "Merge pull request #100 from oli-obk/tuple_struct_constructor_as_fn\n\nallow the use of tuple struct constructors as functions", "tree": {"sha": "92ca8d9801e12cd7779249e6724b1d0387227e42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ca8d9801e12cd7779249e6724b1d0387227e42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3752220af78c43f8278b61bb8596081737b6a88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3752220af78c43f8278b61bb8596081737b6a88", "html_url": "https://github.com/rust-lang/rust/commit/f3752220af78c43f8278b61bb8596081737b6a88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3752220af78c43f8278b61bb8596081737b6a88/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0daa3b28981abd1de017752a89b372f7415e70ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/0daa3b28981abd1de017752a89b372f7415e70ce", "html_url": "https://github.com/rust-lang/rust/commit/0daa3b28981abd1de017752a89b372f7415e70ce"}, {"sha": "0595f9546085ac53e57fe4776687794b0bf2bb7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0595f9546085ac53e57fe4776687794b0bf2bb7d", "html_url": "https://github.com/rust-lang/rust/commit/0595f9546085ac53e57fe4776687794b0bf2bb7d"}], "stats": {"total": 91, "additions": 88, "deletions": 3}, "files": [{"sha": "bf1c71f089dbd11f408ba9ec09b5fddbe74ab4b1", "filename": "src/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3752220af78c43f8278b61bb8596081737b6a88/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3752220af78c43f8278b61bb8596081737b6a88/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=f3752220af78c43f8278b61bb8596081737b6a88", "patch": "@@ -52,6 +52,7 @@ pub enum EvalError<'tcx> {\n     ReallocatedFrozenMemory,\n     DeallocatedFrozenMemory,\n     Layout(layout::LayoutError<'tcx>),\n+    Unreachable,\n }\n \n pub type EvalResult<'tcx, T> = Result<T, EvalError<'tcx>>;\n@@ -122,6 +123,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"rustc layout computation failed\",\n             EvalError::UnterminatedCString(_) =>\n                 \"attempted to get length of a null terminated string, but no null found before end of allocation\",\n+            EvalError::Unreachable =>\n+                \"entered unreachable code\",\n         }\n     }\n "}, {"sha": "fe5beb2e5cfbf3d7279f368ad26782f9e830610e", "filename": "src/eval_context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3752220af78c43f8278b61bb8596081737b6a88/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3752220af78c43f8278b61bb8596081737b6a88/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=f3752220af78c43f8278b61bb8596081737b6a88", "patch": "@@ -10,6 +10,7 @@ use rustc::ty::layout::{self, Layout, Size};\n use rustc::ty::subst::{self, Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::indexed_vec::Idx;\n+use rustc_data_structures::fx::FxHashSet;\n use syntax::codemap::{self, DUMMY_SP};\n \n use error::{EvalError, EvalResult};\n@@ -1468,3 +1469,7 @@ pub fn monomorphize_field_ty<'a, 'tcx:'a >(tcx: TyCtxt<'a, 'tcx, 'tcx>, f: &ty::\n     let substituted = &f.ty(tcx, substs);\n     tcx.normalize_associated_type(&substituted)\n }\n+\n+pub fn is_inhabited<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> bool {\n+    ty.uninhabited_from(&mut FxHashSet::default(), tcx).is_empty()\n+}"}, {"sha": "7107a99e8b5e76bfb37f09bc2b18250f9f46395c", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f3752220af78c43f8278b61bb8596081737b6a88/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3752220af78c43f8278b61bb8596081737b6a88/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=f3752220af78c43f8278b61bb8596081737b6a88", "patch": "@@ -9,7 +9,7 @@ use syntax::codemap::{DUMMY_SP, Span};\n use syntax::{ast, attr};\n \n use error::{EvalError, EvalResult};\n-use eval_context::{EvalContext, IntegerExt, StackPopCleanup, monomorphize_field_ty};\n+use eval_context::{EvalContext, IntegerExt, StackPopCleanup, monomorphize_field_ty, is_inhabited};\n use lvalue::{Lvalue, LvalueExtra};\n use memory::Pointer;\n use value::PrimVal;\n@@ -155,7 +155,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             DropAndReplace { .. } => unimplemented!(),\n             Resume => unimplemented!(),\n-            Unreachable => unimplemented!(),\n+            Unreachable => return Err(EvalError::Unreachable),\n         }\n \n         Ok(())\n@@ -200,7 +200,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Abi::RustIntrinsic => {\n                 let ty = fn_ty.sig.0.output();\n                 let layout = self.type_layout(ty)?;\n-                let (ret, target) = destination.unwrap();\n+                let (ret, target) = match destination {\n+                    Some(dest) if is_inhabited(self.tcx, ty) => dest,\n+                    _ => return Err(EvalError::Unreachable),\n+                };\n                 self.call_intrinsic(def_id, substs, arg_operands, ret, ty, layout, target)?;\n                 Ok(())\n             }\n@@ -229,6 +232,33 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         (def_id, substs, Vec::new())\n                     };\n \n+                // FIXME(eddyb) Detect ADT constructors more efficiently.\n+                if let Some(adt_def) = fn_ty.sig.skip_binder().output().ty_adt_def() {\n+                    if let Some(v) = adt_def.variants.iter().find(|v| resolved_def_id == v.did) {\n+                        let (lvalue, target) = destination.expect(\"tuple struct constructors can't diverge\");\n+                        let dest_ty = self.tcx.item_type(adt_def.did);\n+                        let dest_layout = self.type_layout(dest_ty)?;\n+                        match *dest_layout {\n+                            Layout::Univariant { ref variant, .. } => {\n+                                assert_eq!(v.disr_val.to_u128_unchecked(), 0);\n+                                let offsets = variant.offsets.iter().map(|s| s.bytes());\n+\n+                                // FIXME: don't allocate for single or dual field structs\n+                                let dest = self.force_allocation(lvalue)?.to_ptr();\n+\n+                                for (offset, (value, value_ty)) in offsets.into_iter().zip(args) {\n+                                    let field_dest = dest.offset(offset);\n+                                    self.write_value_to_ptr(value, field_dest, value_ty)?;\n+                                }\n+                            },\n+                            // FIXME: enum variant constructors\n+                            _ => bug!(\"bad layout for tuple struct constructor: {:?}\", dest_layout),\n+                        }\n+                        self.goto_block(target);\n+                        return Ok(());\n+                    }\n+                }\n+\n                 let mir = self.load_mir(resolved_def_id)?;\n                 let (return_lvalue, return_to_block) = match destination {\n                     Some((lvalue, block)) => (lvalue, StackPopCleanup::Goto(block)),"}, {"sha": "5d7e9fec62c24b45ce349742e9ced2b39ad5a93a", "filename": "tests/compile-fail/never_say_never.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f3752220af78c43f8278b61bb8596081737b6a88/tests%2Fcompile-fail%2Fnever_say_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3752220af78c43f8278b61bb8596081737b6a88/tests%2Fcompile-fail%2Fnever_say_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_say_never.rs?ref=f3752220af78c43f8278b61bb8596081737b6a88", "patch": "@@ -0,0 +1,12 @@\n+#![feature(never_type)]\n+#![allow(unreachable_code)]\n+\n+fn main() {\n+    let y = &5;\n+    let x: ! = unsafe {\n+        *(y as *const _ as *const !) //~ ERROR entered unreachable code\n+    };\n+    f(x)\n+}\n+\n+fn f(x: !) -> ! { x }"}, {"sha": "38406eeb3fea61a1d651988535aa5db0c1c8e71a", "filename": "tests/compile-fail/never_transmute_humans.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3752220af78c43f8278b61bb8596081737b6a88/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3752220af78c43f8278b61bb8596081737b6a88/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_humans.rs?ref=f3752220af78c43f8278b61bb8596081737b6a88", "patch": "@@ -0,0 +1,14 @@\n+#![feature(never_type)]\n+#![allow(unreachable_code)]\n+#![allow(unused_variables)]\n+\n+struct Human;\n+\n+fn main() {\n+    let x: ! = unsafe {\n+        std::mem::transmute::<Human, !>(Human) //~ ERROR entered unreachable code\n+    };\n+    f(x)\n+}\n+\n+fn f(x: !) -> ! { x }"}, {"sha": "3fffacc55ea4773898b66410d38f16ecc9758f55", "filename": "tests/compile-fail/never_transmute_void.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3752220af78c43f8278b61bb8596081737b6a88/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3752220af78c43f8278b61bb8596081737b6a88/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_void.rs?ref=f3752220af78c43f8278b61bb8596081737b6a88", "patch": "@@ -0,0 +1,16 @@\n+#![feature(never_type)]\n+#![allow(unreachable_code)]\n+#![allow(unused_variables)]\n+\n+enum Void {}\n+\n+fn f(v: Void) -> ! {\n+    match v {}\n+}\n+\n+fn main() {\n+    let v: Void = unsafe {\n+        std::mem::transmute::<(), Void>(()) //~ ERROR entered unreachable code\n+    };\n+    f(v);\n+}"}, {"sha": "05e8893de178747782e2de4fdd4c56e6974e2003", "filename": "tests/run-pass/tuple_like_struct_constructor.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3752220af78c43f8278b61bb8596081737b6a88/tests%2Frun-pass%2Ftuple_like_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3752220af78c43f8278b61bb8596081737b6a88/tests%2Frun-pass%2Ftuple_like_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftuple_like_struct_constructor.rs?ref=f3752220af78c43f8278b61bb8596081737b6a88", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    #[derive(PartialEq, Eq, Debug)]\n+    struct A(i32);\n+    assert_eq!(Some(42).map(A), Some(A(42)));\n+}"}]}