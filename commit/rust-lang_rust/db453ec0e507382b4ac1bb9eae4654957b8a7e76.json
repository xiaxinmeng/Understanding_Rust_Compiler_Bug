{"sha": "db453ec0e507382b4ac1bb9eae4654957b8a7e76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNDUzZWMwZTUwNzM4MmI0YWMxYmI5ZWFlNDY1NDk1N2I4YTdlNzY=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-18T12:46:02Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-05-18T16:19:16Z"}, "message": "Replace Tuple{2..12} trait with CloneableTuple{2..12} and ImmutableTuple{2..12}\n\nMake n{0..11} methods return cloned values, and create n{0..12}_ref methods for returning references", "tree": {"sha": "dc17045c045b5bb8471f13f9715d8757bb4fe7b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc17045c045b5bb8471f13f9715d8757bb4fe7b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db453ec0e507382b4ac1bb9eae4654957b8a7e76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db453ec0e507382b4ac1bb9eae4654957b8a7e76", "html_url": "https://github.com/rust-lang/rust/commit/db453ec0e507382b4ac1bb9eae4654957b8a7e76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db453ec0e507382b4ac1bb9eae4654957b8a7e76/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee4d11f37ea3f1bff8103c0e6b369a972f4b1bf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee4d11f37ea3f1bff8103c0e6b369a972f4b1bf2", "html_url": "https://github.com/rust-lang/rust/commit/ee4d11f37ea3f1bff8103c0e6b369a972f4b1bf2"}], "stats": {"total": 265, "additions": 147, "deletions": 118}, "files": [{"sha": "684c4c7a271782be7d35522a5061caa71db4d270", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db453ec0e507382b4ac1bb9eae4654957b8a7e76/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db453ec0e507382b4ac1bb9eae4654957b8a7e76/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=db453ec0e507382b4ac1bb9eae4654957b8a7e76", "patch": "@@ -52,8 +52,12 @@ pub use from_str::{FromStr};\n pub use to_bytes::IterBytes;\n pub use to_str::{ToStr, ToStrConsume};\n pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n-pub use tuple::{Tuple2, Tuple3, Tuple4, Tuple5, Tuple6, Tuple7, Tuple8, Tuple9};\n-pub use tuple::{Tuple10, Tuple11, Tuple12};\n+pub use tuple::{CloneableTuple2, CloneableTuple3, CloneableTuple4, CloneableTuple5};\n+pub use tuple::{CloneableTuple6, CloneableTuple7, CloneableTuple8, CloneableTuple9};\n+pub use tuple::{CloneableTuple10, CloneableTuple11, CloneableTuple12};\n+pub use tuple::{ImmutableTuple2, ImmutableTuple3, ImmutableTuple4, ImmutableTuple5};\n+pub use tuple::{ImmutableTuple6, ImmutableTuple7, ImmutableTuple8, ImmutableTuple9};\n+pub use tuple::{ImmutableTuple10, ImmutableTuple11, ImmutableTuple12};\n pub use vec::{CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n pub use vec::{OwnedVector, OwnedCopyableVector, MutableVector};"}, {"sha": "dd42afe646ddcbdb806e66d291bd8f71e0af839a", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 141, "deletions": 116, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/db453ec0e507382b4ac1bb9eae4654957b8a7e76/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db453ec0e507382b4ac1bb9eae4654957b8a7e76/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=db453ec0e507382b4ac1bb9eae4654957b8a7e76", "patch": "@@ -93,7 +93,6 @@ impl<'self,A:Copy,B:Copy> ExtendedTupleOps<A,B> for (&'self [A], &'self [B]) {\n }\n \n impl<A:Copy,B:Copy> ExtendedTupleOps<A,B> for (~[A], ~[B]) {\n-\n     #[inline(always)]\n     fn zip(&self) -> ~[(A, B)] {\n         match *self {\n@@ -117,41 +116,54 @@ impl<A:Copy,B:Copy> ExtendedTupleOps<A,B> for (~[A], ~[B]) {\n \n macro_rules! tuple_impls(\n     ($(\n-        $name:ident {\n-            $(fn $get_fn:ident -> $T:ident { $get_pattern:pat => $ret:expr })+\n+        ($cloneable_trait:ident, $immutable_trait:ident) {\n+            $(($get_fn:ident, $get_ref_fn:ident) -> $T:ident {\n+                $get_pattern:pat => $ret:expr\n+            })+\n         }\n     )+) => (\n         pub mod inner {\n             use clone::Clone;\n             #[cfg(not(test))] use cmp::{Eq, Ord};\n \n             $(\n-                pub trait $name<$($T),+> {\n-                    $(fn $get_fn<'a>(&'a self) -> &'a $T;)+\n+                pub trait $cloneable_trait<$($T),+> {\n+                    $(fn $get_fn(&self) -> $T;)+\n+                }\n+\n+                impl<$($T:Clone),+> $cloneable_trait<$($T),+> for ($($T),+) {\n+                    $(\n+                        #[inline(always)]\n+                        fn $get_fn(&self) -> $T {\n+                            self.$get_ref_fn().clone()\n+                        }\n+                    )+\n+                }\n+\n+                pub trait $immutable_trait<$($T),+> {\n+                    $(fn $get_ref_fn<'a>(&'a self) -> &'a $T;)+\n                 }\n \n-                impl<$($T),+> $name<$($T),+> for ($($T),+) {\n+                impl<$($T),+> $immutable_trait<$($T),+> for ($($T),+) {\n                     $(\n                         #[inline(always)]\n-                        fn $get_fn<'a>(&'a self) -> &'a $T {\n-                            match *self {\n-                                $get_pattern => $ret\n-                            }\n+                        fn $get_ref_fn<'a>(&'a self) -> &'a $T {\n+                            match *self { $get_pattern => $ret }\n                         }\n                     )+\n                 }\n \n                 impl<$($T:Clone),+> Clone for ($($T),+) {\n                     fn clone(&self) -> ($($T),+) {\n-                        ($(self.$get_fn().clone()),+)\n+                        ($(self.$get_ref_fn().clone()),+)\n                     }\n                 }\n \n                 #[cfg(not(test))]\n                 impl<$($T:Eq),+> Eq for ($($T),+) {\n                     #[inline(always)]\n                     fn eq(&self, other: &($($T),+)) -> bool {\n-                        $(*self.$get_fn() == *other.$get_fn())&&+\n+                        $(*self.$get_ref_fn() == *other.$get_ref_fn())&&+\n                     }\n \n                     #[inline(always)]\n@@ -164,22 +176,22 @@ macro_rules! tuple_impls(\n                 impl<$($T:Ord),+> Ord for ($($T),+) {\n                     #[inline(always)]\n                     fn lt(&self, other: &($($T),+)) -> bool {\n-                        $(*self.$get_fn() < *other.$get_fn())&&+\n+                        $(*self.$get_ref_fn() < *other.$get_ref_fn())&&+\n                     }\n \n                     #[inline(always)]\n                     fn le(&self, other: &($($T),+)) -> bool {\n-                        $(*self.$get_fn() <= *other.$get_fn())&&+\n+                        $(*self.$get_ref_fn() <= *other.$get_ref_fn())&&+\n                     }\n \n                     #[inline(always)]\n                     fn ge(&self, other: &($($T),+)) -> bool {\n-                        $(*self.$get_fn() >= *other.$get_fn())&&+\n+                        $(*self.$get_ref_fn() >= *other.$get_ref_fn())&&+\n                     }\n \n                     #[inline(always)]\n                     fn gt(&self, other: &($($T),+)) -> bool {\n-                        $(*self.$get_fn() > *other.$get_fn())&&+\n+                        $(*self.$get_ref_fn() > *other.$get_ref_fn())&&+\n                     }\n                 }\n             )+\n@@ -188,114 +200,114 @@ macro_rules! tuple_impls(\n )\n \n tuple_impls!(\n-    Tuple2 {\n-        fn n0 -> A { (ref a,_) => a }\n-        fn n1 -> B { (_,ref b) => b }\n+    (CloneableTuple2, ImmutableTuple2) {\n+        (n0, n0_ref) -> A { (ref a,_) => a }\n+        (n1, n1_ref) -> B { (_,ref b) => b }\n     }\n \n-    Tuple3 {\n-        fn n0 -> A { (ref a,_,_) => a }\n-        fn n1 -> B { (_,ref b,_) => b }\n-        fn n2 -> C { (_,_,ref c) => c }\n+    (CloneableTuple3, ImmutableTuple3) {\n+        (n0, n0_ref) -> A { (ref a,_,_) => a }\n+        (n1, n1_ref) -> B { (_,ref b,_) => b }\n+        (n2, n2_ref) -> C { (_,_,ref c) => c }\n     }\n \n-    Tuple4 {\n-        fn n0 -> A { (ref a,_,_,_) => a }\n-        fn n1 -> B { (_,ref b,_,_) => b }\n-        fn n2 -> C { (_,_,ref c,_) => c }\n-        fn n3 -> D { (_,_,_,ref d) => d }\n+    (CloneableTuple4, ImmutableTuple4) {\n+        (n0, n0_ref) -> A { (ref a,_,_,_) => a }\n+        (n1, n1_ref) -> B { (_,ref b,_,_) => b }\n+        (n2, n2_ref) -> C { (_,_,ref c,_) => c }\n+        (n3, n3_ref) -> D { (_,_,_,ref d) => d }\n     }\n \n-    Tuple5 {\n-        fn n0 -> A { (ref a,_,_,_,_) => a }\n-        fn n1 -> B { (_,ref b,_,_,_) => b }\n-        fn n2 -> C { (_,_,ref c,_,_) => c }\n-        fn n3 -> D { (_,_,_,ref d,_) => d }\n-        fn n4 -> E { (_,_,_,_,ref e) => e }\n+    (CloneableTuple5, ImmutableTuple5) {\n+        (n0, n0_ref) -> A { (ref a,_,_,_,_) => a }\n+        (n1, n1_ref) -> B { (_,ref b,_,_,_) => b }\n+        (n2, n2_ref) -> C { (_,_,ref c,_,_) => c }\n+        (n3, n3_ref) -> D { (_,_,_,ref d,_) => d }\n+        (n4, n4_ref) -> E { (_,_,_,_,ref e) => e }\n     }\n \n-    Tuple6 {\n-        fn n0 -> A { (ref a,_,_,_,_,_) => a }\n-        fn n1 -> B { (_,ref b,_,_,_,_) => b }\n-        fn n2 -> C { (_,_,ref c,_,_,_) => c }\n-        fn n3 -> D { (_,_,_,ref d,_,_) => d }\n-        fn n4 -> E { (_,_,_,_,ref e,_) => e }\n-        fn n5 -> F { (_,_,_,_,_,ref f) => f }\n+    (CloneableTuple6, ImmutableTuple6) {\n+        (n0, n0_ref) -> A { (ref a,_,_,_,_,_) => a }\n+        (n1, n1_ref) -> B { (_,ref b,_,_,_,_) => b }\n+        (n2, n2_ref) -> C { (_,_,ref c,_,_,_) => c }\n+        (n3, n3_ref) -> D { (_,_,_,ref d,_,_) => d }\n+        (n4, n4_ref) -> E { (_,_,_,_,ref e,_) => e }\n+        (n5, n5_ref) -> F { (_,_,_,_,_,ref f) => f }\n     }\n \n-    Tuple7 {\n-        fn n0 -> A { (ref a,_,_,_,_,_,_) => a }\n-        fn n1 -> B { (_,ref b,_,_,_,_,_) => b }\n-        fn n2 -> C { (_,_,ref c,_,_,_,_) => c }\n-        fn n3 -> D { (_,_,_,ref d,_,_,_) => d }\n-        fn n4 -> E { (_,_,_,_,ref e,_,_) => e }\n-        fn n5 -> F { (_,_,_,_,_,ref f,_) => f }\n-        fn n6 -> G { (_,_,_,_,_,_,ref g) => g }\n+    (CloneableTuple7, ImmutableTuple7) {\n+        (n0, n0_ref) -> A { (ref a,_,_,_,_,_,_) => a }\n+        (n1, n1_ref) -> B { (_,ref b,_,_,_,_,_) => b }\n+        (n2, n2_ref) -> C { (_,_,ref c,_,_,_,_) => c }\n+        (n3, n3_ref) -> D { (_,_,_,ref d,_,_,_) => d }\n+        (n4, n4_ref) -> E { (_,_,_,_,ref e,_,_) => e }\n+        (n5, n5_ref) -> F { (_,_,_,_,_,ref f,_) => f }\n+        (n6, n6_ref) -> G { (_,_,_,_,_,_,ref g) => g }\n     }\n \n-    Tuple8 {\n-        fn n0 -> A { (ref a,_,_,_,_,_,_,_) => a }\n-        fn n1 -> B { (_,ref b,_,_,_,_,_,_) => b }\n-        fn n2 -> C { (_,_,ref c,_,_,_,_,_) => c }\n-        fn n3 -> D { (_,_,_,ref d,_,_,_,_) => d }\n-        fn n4 -> E { (_,_,_,_,ref e,_,_,_) => e }\n-        fn n5 -> F { (_,_,_,_,_,ref f,_,_) => f }\n-        fn n6 -> G { (_,_,_,_,_,_,ref g,_) => g }\n-        fn n7 -> H { (_,_,_,_,_,_,_,ref h) => h }\n+    (CloneableTuple8, ImmutableTuple8) {\n+        (n0, n0_ref) -> A { (ref a,_,_,_,_,_,_,_) => a }\n+        (n1, n1_ref) -> B { (_,ref b,_,_,_,_,_,_) => b }\n+        (n2, n2_ref) -> C { (_,_,ref c,_,_,_,_,_) => c }\n+        (n3, n3_ref) -> D { (_,_,_,ref d,_,_,_,_) => d }\n+        (n4, n4_ref) -> E { (_,_,_,_,ref e,_,_,_) => e }\n+        (n5, n5_ref) -> F { (_,_,_,_,_,ref f,_,_) => f }\n+        (n6, n6_ref) -> G { (_,_,_,_,_,_,ref g,_) => g }\n+        (n7, n7_ref) -> H { (_,_,_,_,_,_,_,ref h) => h }\n     }\n \n-    Tuple9 {\n-        fn n0 -> A { (ref a,_,_,_,_,_,_,_,_) => a }\n-        fn n1 -> B { (_,ref b,_,_,_,_,_,_,_) => b }\n-        fn n2 -> C { (_,_,ref c,_,_,_,_,_,_) => c }\n-        fn n3 -> D { (_,_,_,ref d,_,_,_,_,_) => d }\n-        fn n4 -> E { (_,_,_,_,ref e,_,_,_,_) => e }\n-        fn n5 -> F { (_,_,_,_,_,ref f,_,_,_) => f }\n-        fn n6 -> G { (_,_,_,_,_,_,ref g,_,_) => g }\n-        fn n7 -> H { (_,_,_,_,_,_,_,ref h,_) => h }\n-        fn n8 -> I { (_,_,_,_,_,_,_,_,ref i) => i }\n+    (CloneableTuple9, ImmutableTuple9) {\n+        (n0, n0_ref) -> A { (ref a,_,_,_,_,_,_,_,_) => a }\n+        (n1, n1_ref) -> B { (_,ref b,_,_,_,_,_,_,_) => b }\n+        (n2, n2_ref) -> C { (_,_,ref c,_,_,_,_,_,_) => c }\n+        (n3, n3_ref) -> D { (_,_,_,ref d,_,_,_,_,_) => d }\n+        (n4, n4_ref) -> E { (_,_,_,_,ref e,_,_,_,_) => e }\n+        (n5, n5_ref) -> F { (_,_,_,_,_,ref f,_,_,_) => f }\n+        (n6, n6_ref) -> G { (_,_,_,_,_,_,ref g,_,_) => g }\n+        (n7, n7_ref) -> H { (_,_,_,_,_,_,_,ref h,_) => h }\n+        (n8, n8_ref) -> I { (_,_,_,_,_,_,_,_,ref i) => i }\n     }\n \n-    Tuple10 {\n-        fn n0 -> A { (ref a,_,_,_,_,_,_,_,_,_) => a }\n-        fn n1 -> B { (_,ref b,_,_,_,_,_,_,_,_) => b }\n-        fn n2 -> C { (_,_,ref c,_,_,_,_,_,_,_) => c }\n-        fn n3 -> D { (_,_,_,ref d,_,_,_,_,_,_) => d }\n-        fn n4 -> E { (_,_,_,_,ref e,_,_,_,_,_) => e }\n-        fn n5 -> F { (_,_,_,_,_,ref f,_,_,_,_) => f }\n-        fn n6 -> G { (_,_,_,_,_,_,ref g,_,_,_) => g }\n-        fn n7 -> H { (_,_,_,_,_,_,_,ref h,_,_) => h }\n-        fn n8 -> I { (_,_,_,_,_,_,_,_,ref i,_) => i }\n-        fn n9 -> J { (_,_,_,_,_,_,_,_,_,ref j) => j }\n+    (CloneableTuple10, ImmutableTuple10) {\n+        (n0, n0_ref) -> A { (ref a,_,_,_,_,_,_,_,_,_) => a }\n+        (n1, n1_ref) -> B { (_,ref b,_,_,_,_,_,_,_,_) => b }\n+        (n2, n2_ref) -> C { (_,_,ref c,_,_,_,_,_,_,_) => c }\n+        (n3, n3_ref) -> D { (_,_,_,ref d,_,_,_,_,_,_) => d }\n+        (n4, n4_ref) -> E { (_,_,_,_,ref e,_,_,_,_,_) => e }\n+        (n5, n5_ref) -> F { (_,_,_,_,_,ref f,_,_,_,_) => f }\n+        (n6, n6_ref) -> G { (_,_,_,_,_,_,ref g,_,_,_) => g }\n+        (n7, n7_ref) -> H { (_,_,_,_,_,_,_,ref h,_,_) => h }\n+        (n8, n8_ref) -> I { (_,_,_,_,_,_,_,_,ref i,_) => i }\n+        (n9, n9_ref) -> J { (_,_,_,_,_,_,_,_,_,ref j) => j }\n     }\n \n-    Tuple11 {\n-        fn n0 -> A { (ref a,_,_,_,_,_,_,_,_,_,_) => a }\n-        fn n1 -> B { (_,ref b,_,_,_,_,_,_,_,_,_) => b }\n-        fn n2 -> C { (_,_,ref c,_,_,_,_,_,_,_,_) => c }\n-        fn n3 -> D { (_,_,_,ref d,_,_,_,_,_,_,_) => d }\n-        fn n4 -> E { (_,_,_,_,ref e,_,_,_,_,_,_) => e }\n-        fn n5 -> F { (_,_,_,_,_,ref f,_,_,_,_,_) => f }\n-        fn n6 -> G { (_,_,_,_,_,_,ref g,_,_,_,_) => g }\n-        fn n7 -> H { (_,_,_,_,_,_,_,ref h,_,_,_) => h }\n-        fn n8 -> I { (_,_,_,_,_,_,_,_,ref i,_,_) => i }\n-        fn n9 -> J { (_,_,_,_,_,_,_,_,_,ref j,_) => j }\n-        fn n10 -> K { (_,_,_,_,_,_,_,_,_,_,ref k) => k }\n+    (CloneableTuple11, ImmutableTuple11) {\n+        (n0,  n0_ref)  -> A { (ref a,_,_,_,_,_,_,_,_,_,_) => a }\n+        (n1,  n1_ref)  -> B { (_,ref b,_,_,_,_,_,_,_,_,_) => b }\n+        (n2,  n2_ref)  -> C { (_,_,ref c,_,_,_,_,_,_,_,_) => c }\n+        (n3,  n3_ref)  -> D { (_,_,_,ref d,_,_,_,_,_,_,_) => d }\n+        (n4,  n4_ref)  -> E { (_,_,_,_,ref e,_,_,_,_,_,_) => e }\n+        (n5,  n5_ref)  -> F { (_,_,_,_,_,ref f,_,_,_,_,_) => f }\n+        (n6,  n6_ref)  -> G { (_,_,_,_,_,_,ref g,_,_,_,_) => g }\n+        (n7,  n7_ref)  -> H { (_,_,_,_,_,_,_,ref h,_,_,_) => h }\n+        (n8,  n8_ref)  -> I { (_,_,_,_,_,_,_,_,ref i,_,_) => i }\n+        (n9,  n9_ref)  -> J { (_,_,_,_,_,_,_,_,_,ref j,_) => j }\n+        (n10, n10_ref) -> K { (_,_,_,_,_,_,_,_,_,_,ref k) => k }\n     }\n \n-    Tuple12 {\n-        fn n0 -> A { (ref a,_,_,_,_,_,_,_,_,_,_,_) => a }\n-        fn n1 -> B { (_,ref b,_,_,_,_,_,_,_,_,_,_) => b }\n-        fn n2 -> C { (_,_,ref c,_,_,_,_,_,_,_,_,_) => c }\n-        fn n3 -> D { (_,_,_,ref d,_,_,_,_,_,_,_,_) => d }\n-        fn n4 -> E { (_,_,_,_,ref e,_,_,_,_,_,_,_) => e }\n-        fn n5 -> F { (_,_,_,_,_,ref f,_,_,_,_,_,_) => f }\n-        fn n6 -> G { (_,_,_,_,_,_,ref g,_,_,_,_,_) => g }\n-        fn n7 -> H { (_,_,_,_,_,_,_,ref h,_,_,_,_) => h }\n-        fn n8 -> I { (_,_,_,_,_,_,_,_,ref i,_,_,_) => i }\n-        fn n9 -> J { (_,_,_,_,_,_,_,_,_,ref j,_,_) => j }\n-        fn n10 -> K { (_,_,_,_,_,_,_,_,_,_,ref k,_) => k }\n-        fn n11 -> L { (_,_,_,_,_,_,_,_,_,_,_,ref l) => l }\n+    (CloneableTuple12, ImmutableTuple12) {\n+        (n0,  n0_ref)  -> A { (ref a,_,_,_,_,_,_,_,_,_,_,_) => a }\n+        (n1,  n1_ref)  -> B { (_,ref b,_,_,_,_,_,_,_,_,_,_) => b }\n+        (n2,  n2_ref)  -> C { (_,_,ref c,_,_,_,_,_,_,_,_,_) => c }\n+        (n3,  n3_ref)  -> D { (_,_,_,ref d,_,_,_,_,_,_,_,_) => d }\n+        (n4,  n4_ref)  -> E { (_,_,_,_,ref e,_,_,_,_,_,_,_) => e }\n+        (n5,  n5_ref)  -> F { (_,_,_,_,_,ref f,_,_,_,_,_,_) => f }\n+        (n6,  n6_ref)  -> G { (_,_,_,_,_,_,ref g,_,_,_,_,_) => g }\n+        (n7,  n7_ref)  -> H { (_,_,_,_,_,_,_,ref h,_,_,_,_) => h }\n+        (n8,  n8_ref)  -> I { (_,_,_,_,_,_,_,_,ref i,_,_,_) => i }\n+        (n9,  n9_ref)  -> J { (_,_,_,_,_,_,_,_,_,ref j,_,_) => j }\n+        (n10, n10_ref) -> K { (_,_,_,_,_,_,_,_,_,_,ref k,_) => k }\n+        (n11, n11_ref) -> L { (_,_,_,_,_,_,_,_,_,_,_,ref l) => l }\n     }\n )\n \n@@ -325,16 +337,29 @@ fn test_clone() {\n #[test]\n fn test_n_tuple() {\n     let t = (0u8, 1u16, 2u32, 3u64, 4u, 5i8, 6i16, 7i32, 8i64, 9i, 10f32, 11f64);\n-    assert_eq!(*t.n0(), 0u8);\n-    assert_eq!(*t.n1(), 1u16);\n-    assert_eq!(*t.n2(), 2u32);\n-    assert_eq!(*t.n3(), 3u64);\n-    assert_eq!(*t.n4(), 4u);\n-    assert_eq!(*t.n5(), 5i8);\n-    assert_eq!(*t.n6(), 6i16);\n-    assert_eq!(*t.n7(), 7i32);\n-    assert_eq!(*t.n8(), 8i64);\n-    assert_eq!(*t.n9(), 9i);\n-    assert_eq!(*t.n10(), 10f32);\n-    assert_eq!(*t.n11(), 11f64);\n+    assert_eq!(t.n0(), 0u8);\n+    assert_eq!(t.n1(), 1u16);\n+    assert_eq!(t.n2(), 2u32);\n+    assert_eq!(t.n3(), 3u64);\n+    assert_eq!(t.n4(), 4u);\n+    assert_eq!(t.n5(), 5i8);\n+    assert_eq!(t.n6(), 6i16);\n+    assert_eq!(t.n7(), 7i32);\n+    assert_eq!(t.n8(), 8i64);\n+    assert_eq!(t.n9(), 9i);\n+    assert_eq!(t.n10(), 10f32);\n+    assert_eq!(t.n11(), 11f64);\n+\n+    assert_eq!(t.n0_ref(), &0u8);\n+    assert_eq!(t.n1_ref(), &1u16);\n+    assert_eq!(t.n2_ref(), &2u32);\n+    assert_eq!(t.n3_ref(), &3u64);\n+    assert_eq!(t.n4_ref(), &4u);\n+    assert_eq!(t.n5_ref(), &5i8);\n+    assert_eq!(t.n6_ref(), &6i16);\n+    assert_eq!(t.n7_ref(), &7i32);\n+    assert_eq!(t.n8_ref(), &8i64);\n+    assert_eq!(t.n9_ref(), &9i);\n+    assert_eq!(t.n10_ref(), &10f32);\n+    assert_eq!(t.n11_ref(), &11f64);\n }"}]}