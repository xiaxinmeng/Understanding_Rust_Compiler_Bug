{"sha": "f97c38de9427b43a9afce37debd7c46cd184869d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5N2MzOGRlOTQyN2I0M2E5YWZjZTM3ZGViZDdjNDZjZDE4NDg2OWQ=", "commit": {"author": {"name": "Mikael Zayenz Lagerkvist", "email": "zayenz@gmail.com", "date": "2018-05-29T11:17:37Z"}, "committer": {"name": "Mikael Zayenz Lagerkvist", "email": "zayenz@gmail.com", "date": "2018-05-29T11:17:37Z"}, "message": "avoid op-ref in macros\n\nAvoid running op-ref inspection in macros since the macro\nmay be invoked in many different types of contexts.\n\nSolves #2818 and incidentally avoids #2689.", "tree": {"sha": "7d125b0e2b0624abf0856301ba6023afa404bf7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d125b0e2b0624abf0856301ba6023afa404bf7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f97c38de9427b43a9afce37debd7c46cd184869d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f97c38de9427b43a9afce37debd7c46cd184869d", "html_url": "https://github.com/rust-lang/rust/commit/f97c38de9427b43a9afce37debd7c46cd184869d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f97c38de9427b43a9afce37debd7c46cd184869d/comments", "author": {"login": "zayenz", "id": 245350, "node_id": "MDQ6VXNlcjI0NTM1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/245350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zayenz", "html_url": "https://github.com/zayenz", "followers_url": "https://api.github.com/users/zayenz/followers", "following_url": "https://api.github.com/users/zayenz/following{/other_user}", "gists_url": "https://api.github.com/users/zayenz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zayenz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zayenz/subscriptions", "organizations_url": "https://api.github.com/users/zayenz/orgs", "repos_url": "https://api.github.com/users/zayenz/repos", "events_url": "https://api.github.com/users/zayenz/events{/privacy}", "received_events_url": "https://api.github.com/users/zayenz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zayenz", "id": 245350, "node_id": "MDQ6VXNlcjI0NTM1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/245350?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zayenz", "html_url": "https://github.com/zayenz", "followers_url": "https://api.github.com/users/zayenz/followers", "following_url": "https://api.github.com/users/zayenz/following{/other_user}", "gists_url": "https://api.github.com/users/zayenz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zayenz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zayenz/subscriptions", "organizations_url": "https://api.github.com/users/zayenz/orgs", "repos_url": "https://api.github.com/users/zayenz/repos", "events_url": "https://api.github.com/users/zayenz/events{/privacy}", "received_events_url": "https://api.github.com/users/zayenz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce229b2025117812caf4b9da062aca4c8b35240e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce229b2025117812caf4b9da062aca4c8b35240e", "html_url": "https://github.com/rust-lang/rust/commit/ce229b2025117812caf4b9da062aca4c8b35240e"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "af372cfcbefe6b863c26fad5b737bed7d5483773", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f97c38de9427b43a9afce37debd7c46cd184869d/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97c38de9427b43a9afce37debd7c46cd184869d/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=f97c38de9427b43a9afce37debd7c46cd184869d", "patch": "@@ -53,7 +53,10 @@ impl LintPass for EqOp {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprBinary(ref op, ref left, ref right) = e.node {\n-            if is_valid_operator(op) && SpanlessEq::new(cx).ignore_fn().eq_expr(left, right) && !in_macro(e.span) {\n+            if in_macro(e.span) {\n+                return;\n+            }\n+            if is_valid_operator(op) && SpanlessEq::new(cx).ignore_fn().eq_expr(left, right) {\n                 span_lint(\n                     cx,\n                     EQ_OP,"}]}