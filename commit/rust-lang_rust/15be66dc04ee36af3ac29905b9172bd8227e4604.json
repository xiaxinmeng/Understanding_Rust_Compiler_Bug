{"sha": "15be66dc04ee36af3ac29905b9172bd8227e4604", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YmU2NmRjMDRlZTM2YWYzYWMyOTkwNWI5MTcyYmQ4MjI3ZTQ2MDQ=", "commit": {"author": {"name": "Cengiz Can", "email": "cengizIO@users.noreply.github.com", "date": "2016-08-04T00:11:50Z"}, "committer": {"name": "Cengiz Can", "email": "cengizIO@users.noreply.github.com", "date": "2016-08-04T00:11:50Z"}, "message": "Provide a cleaner documentation for 'write!'", "tree": {"sha": "1d6eda3bc29c947c5b96d38766cca47b603a7d1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d6eda3bc29c947c5b96d38766cca47b603a7d1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15be66dc04ee36af3ac29905b9172bd8227e4604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15be66dc04ee36af3ac29905b9172bd8227e4604", "html_url": "https://github.com/rust-lang/rust/commit/15be66dc04ee36af3ac29905b9172bd8227e4604", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15be66dc04ee36af3ac29905b9172bd8227e4604/comments", "author": null, "committer": null, "parents": [{"sha": "a0b4e6764809022433edbff275528ec2540bda73", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0b4e6764809022433edbff275528ec2540bda73", "html_url": "https://github.com/rust-lang/rust/commit/a0b4e6764809022433edbff275528ec2540bda73"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "1846ca83e05b4e9e34645d8f9aa7d393e3ce83b3", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/15be66dc04ee36af3ac29905b9172bd8227e4604/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15be66dc04ee36af3ac29905b9172bd8227e4604/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=15be66dc04ee36af3ac29905b9172bd8227e4604", "patch": "@@ -229,14 +229,26 @@ macro_rules! try {\n     })\n }\n \n-/// Use the `format!` syntax to write data into a buffer.\n+/// Calls `write_fmt` function on a writer\n ///\n-/// This macro is typically used with a buffer of `&mut `[`Write`][write].\n+/// This macro takes an implementer of [`std::fmt::Write`][fmt_write] or\n+/// [`std::io::Write`][io_write] trait, a precompiled format string, and a list of arguments.\n+///\n+/// Implementors of the `Write` trait are sometimes called 'writers'.\n+///\n+/// These arguments will be formatted according to the specified format string and\n+/// the resulting string will be passed to the writer.\n+///\n+/// Return value is either [`Result`][enum_result] or [`io::Result`][type_result] depending on\n+/// the writer.\n ///\n /// See [`std::fmt`][fmt] for more information on format syntax.\n ///\n /// [fmt]: ../std/fmt/index.html\n-/// [write]: ../std/io/trait.Write.html\n+/// [fmt_write]: ../std/fmt/trait.Write.html\n+/// [io_write]: ../std/io/trait.Write.html\n+/// [enum_result]: ../std/result/enum.Result.html\n+/// [type_result]: ../std/io/type.Result.html\n ///\n /// # Examples\n ///\n@@ -255,16 +267,29 @@ macro_rules! write {\n     ($dst:expr, $($arg:tt)*) => ($dst.write_fmt(format_args!($($arg)*)))\n }\n \n-/// Use the `format!` syntax to write data into a buffer, appending a newline.\n+/// Calls `write_fmt` function on a writer, with appending a newline.\n+///\n /// On all platforms, the newline is the LINE FEED character (`\\n`/`U+000A`)\n /// alone (no additional CARRIAGE RETURN (`\\r`/`U+000D`).\n ///\n-/// This macro is typically used with a buffer of `&mut `[`Write`][write].\n+/// This macro takes an implementer of [`std::fmt::Write`][fmt_write] or\n+/// [`std::io::Write`][io_write] trait, a precompiled format string, and a list of arguments.\n+///\n+/// Implementors of the `Write` trait are sometimes called 'writers'.\n+///\n+/// These arguments will be formatted according to the specified format string and\n+/// the resulting string will be passed to the writer.\n+///\n+/// Return value is either [`Result`][enum_result] or [`io::Result`][type_result] depending on\n+/// the writer.\n ///\n /// See [`std::fmt`][fmt] for more information on format syntax.\n ///\n /// [fmt]: ../std/fmt/index.html\n-/// [write]: ../std/io/trait.Write.html\n+/// [fmt_write]: ../std/fmt/trait.Write.html\n+/// [io_write]: ../std/io/trait.Write.html\n+/// [enum_result]: ../std/result/enum.Result.html\n+/// [type_result]: ../std/io/type.Result.html\n ///\n /// # Examples\n ///"}]}