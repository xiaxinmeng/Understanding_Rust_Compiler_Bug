{"sha": "effea9a2a0d501db5722d507690a1a66236933bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZmVhOWEyYTBkNTAxZGI1NzIyZDUwNzY5MGExYTY2MjM2OTMzYmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-02T02:33:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-02T02:33:16Z"}, "message": "Auto merge of #87689 - JohnTitor:rollup-ns38b56, r=JohnTitor\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #86183 (Change environment variable getters to error recoverably)\n - #86439 (Remove `Ipv4Addr::is_ietf_protocol_assignment`)\n - #86509 (Move `os_str_bytes` to `sys::unix`)\n - #86593 (Partially stabilize `const_slice_first_last`)\n - #86936 (Add documentation for `Ipv6MulticastScope`)\n - #87282 (Ensure `./x.py dist` adheres to `build.tools`)\n - #87468 (Update rustfmt)\n - #87504 (Update mdbook.)\n - #87608 (Remove unused field `Session.system_library_path`)\n - #87629 (Consistent spelling of \"adapter\" in the standard library)\n - #87633 (Update compiler_builtins to fix i128 shift/mul on thumbv6m)\n - #87644 (Recommend `swap_remove` in `Vec::remove` docs)\n - #87653 (mark a UB doctest as no_run)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e504e13021242bcf417a32729de4f8101471d6bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e504e13021242bcf417a32729de4f8101471d6bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/effea9a2a0d501db5722d507690a1a66236933bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/effea9a2a0d501db5722d507690a1a66236933bf", "html_url": "https://github.com/rust-lang/rust/commit/effea9a2a0d501db5722d507690a1a66236933bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/effea9a2a0d501db5722d507690a1a66236933bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24bbf7ac2fd6f5e71f5a4873baa4456e45bd648d", "url": "https://api.github.com/repos/rust-lang/rust/commits/24bbf7ac2fd6f5e71f5a4873baa4456e45bd648d", "html_url": "https://github.com/rust-lang/rust/commit/24bbf7ac2fd6f5e71f5a4873baa4456e45bd648d"}, {"sha": "0851841970f3bcc7616ff7f9c837e19d52c5e0dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0851841970f3bcc7616ff7f9c837e19d52c5e0dd", "html_url": "https://github.com/rust-lang/rust/commit/0851841970f3bcc7616ff7f9c837e19d52c5e0dd"}], "stats": {"total": 1150, "additions": 571, "deletions": 579}, "files": [{"sha": "ac2615a6979c329aaf52ec49021a80a5eff0593a", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -646,9 +646,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.47\"\n+version = \"0.1.49\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fd4ed89e0a5c3e50b15c0045fbe1ff8567b703bc07544faf935ddff0aaa7b65f\"\n+checksum = \"20b1438ef42c655665a8ab2c1c6d605a305f031d38d9be689ddfef41a20f3aa2\"\n dependencies = [\n  \"cc\",\n  \"rustc-std-workspace-core\",\n@@ -1495,9 +1495,9 @@ dependencies = [\n \n [[package]]\n name = \"handlebars\"\n-version = \"3.4.0\"\n+version = \"4.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5deefd4816fb852b1ff3cb48f6c41da67be2d0e1d20b26a7a3b076da11f064b1\"\n+checksum = \"72a0ffab8c36d0436114310c7e10b59b3307e650ddfabf6d006028e29a70c6e6\"\n dependencies = [\n  \"log\",\n  \"pest\",\n@@ -2100,9 +2100,9 @@ dependencies = [\n \n [[package]]\n name = \"mdbook\"\n-version = \"0.4.7\"\n+version = \"0.4.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"28f6a882f3880ec68e96f60d6b543c34941e2f307ad10e2992e4db9acfe96529\"\n+checksum = \"4ee73932975c44c485e541416d7c30abb31a053af7e49682f6e856f1e4d6ab2a\"\n dependencies = [\n  \"ammonia\",\n  \"anyhow\","}, {"sha": "9ab6dbb1ea9065e709bfa228fbf62f4bebc25318", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -198,10 +198,6 @@ pub struct Session {\n     /// exist under `std`. For example, wrote `str::from_utf8` instead of `std::str::from_utf8`.\n     pub confused_type_with_std_module: Lock<FxHashMap<Span, Span>>,\n \n-    /// Path for libraries that will take preference over libraries shipped by Rust.\n-    /// Used by windows-gnu targets to priortize system mingw-w64 libraries.\n-    pub system_library_path: OneThread<RefCell<Option<Option<PathBuf>>>>,\n-\n     /// Tracks the current behavior of the CTFE engine when an error occurs.\n     /// Options range from returning the error without a backtrace to returning an error\n     /// and immediately printing the backtrace to stderr.\n@@ -1375,7 +1371,6 @@ pub fn build_session(\n         driver_lint_caps,\n         trait_methods_not_found: Lock::new(Default::default()),\n         confused_type_with_std_module: Lock::new(Default::default()),\n-        system_library_path: OneThread::new(RefCell::new(Default::default())),\n         ctfe_backtrace,\n         miri_unleashed_features: Lock::new(Default::default()),\n         asm_arch,"}, {"sha": "0db06812a4cbe99be3e34c8807eb52b3ec03ef01", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -1360,6 +1360,12 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// Removes and returns the element at position `index` within the vector,\n     /// shifting all elements after it to the left.\n     ///\n+    /// Note: Because this shifts over the remaining elements, it has a\n+    /// worst-case performance of O(n). If you don't need the order of elements\n+    /// to be preserved, use [`swap_remove`] instead.\n+    ///\n+    /// [`swap_remove`]: Vec::swap_remove\n+    ///\n     /// # Panics\n     ///\n     /// Panics if `index` is out of bounds."}, {"sha": "1f1033b0437f861602be9745e0e0a1dcd9761f33", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -338,9 +338,9 @@ pub unsafe trait Allocator {\n         Ok(new_ptr)\n     }\n \n-    /// Creates a \"by reference\" adaptor for this instance of `Allocator`.\n+    /// Creates a \"by reference\" adapter for this instance of `Allocator`.\n     ///\n-    /// The returned adaptor also implements `Allocator` and will simply borrow this.\n+    /// The returned adapter also implements `Allocator` and will simply borrow this.\n     #[inline(always)]\n     fn by_ref(&self) -> &Self\n     where"}, {"sha": "537e42f66de1b7ffaf37becc528bedfd5678cfae", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -694,7 +694,7 @@ pub trait Iterator {\n     /// more idiomatic to use a `for` loop, but `for_each` may be more legible\n     /// when processing items at the end of longer iterator chains. In some\n     /// cases `for_each` may also be faster than a loop, because it will use\n-    /// internal iteration on adaptors like `Chain`.\n+    /// internal iteration on adapters like `Chain`.\n     ///\n     /// [`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n     ///\n@@ -1293,7 +1293,7 @@ pub trait Iterator {\n         Take::new(self, n)\n     }\n \n-    /// An iterator adaptor similar to [`fold`] that holds internal state and\n+    /// An iterator adapter similar to [`fold`] that holds internal state and\n     /// produces a new iterator.\n     ///\n     /// [`fold`]: Iterator::fold\n@@ -1604,7 +1604,7 @@ pub trait Iterator {\n \n     /// Borrows an iterator, rather than consuming it.\n     ///\n-    /// This is useful to allow applying iterator adaptors while still\n+    /// This is useful to allow applying iterator adapters while still\n     /// retaining ownership of the original iterator.\n     ///\n     /// # Examples"}, {"sha": "87c8674af0dc554842df367508ca4a21546a4a12", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -173,8 +173,14 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// let mut x = 0u32;\n     /// let ptr = unsafe { NonNull::new_unchecked(&mut x as *mut _) };\n+    /// ```\n+    ///\n+    /// *Incorrect* usage of this function:\n+    ///\n+    /// ```rust,no_run\n+    /// use std::ptr::NonNull;\n     ///\n-    /// // NEVER DO THAT!!!\n+    /// // NEVER DO THAT!!! This is undefined behavior. \u26a0\ufe0f\n     /// let ptr = unsafe { NonNull::<u32>::new_unchecked(std::ptr::null_mut()) };\n     /// ```\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]"}, {"sha": "67eecab99d89a8dfec860ff49c5def056022b41e", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -139,7 +139,7 @@ impl<T> [T] {\n     /// assert_eq!(None, w.first());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_first_last\", issue = \"83570\")]\n+    #[rustc_const_stable(feature = \"const_slice_first_last_not_mut\", since = \"1.56.0\")]\n     #[inline]\n     pub const fn first(&self) -> Option<&T> {\n         if let [first, ..] = self { Some(first) } else { None }\n@@ -177,7 +177,7 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_first_last\", issue = \"83570\")]\n+    #[rustc_const_stable(feature = \"const_slice_first_last_not_mut\", since = \"1.56.0\")]\n     #[inline]\n     pub const fn split_first(&self) -> Option<(&T, &[T])> {\n         if let [first, tail @ ..] = self { Some((first, tail)) } else { None }\n@@ -217,7 +217,7 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[stable(feature = \"slice_splits\", since = \"1.5.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_first_last\", issue = \"83570\")]\n+    #[rustc_const_stable(feature = \"const_slice_first_last_not_mut\", since = \"1.56.0\")]\n     #[inline]\n     pub const fn split_last(&self) -> Option<(&T, &[T])> {\n         if let [init @ .., last] = self { Some((last, init)) } else { None }\n@@ -256,7 +256,7 @@ impl<T> [T] {\n     /// assert_eq!(None, w.last());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_slice_first_last\", issue = \"83570\")]\n+    #[rustc_const_stable(feature = \"const_slice_first_last_not_mut\", since = \"1.56.0\")]\n     #[inline]\n     pub const fn last(&self) -> Option<&T> {\n         if let [.., last] = self { Some(last) } else { None }"}, {"sha": "567d9fe49cade270aa3edda0b38e27ea6fef252a", "filename": "library/core/tests/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -24,7 +24,7 @@ use core::cell::Cell;\n \n /// An iterator that panics whenever `next` or next_back` is called\n /// after `None` has already been returned. This does not violate\n-/// `Iterator`'s contract. Used to test that iterator adaptors don't\n+/// `Iterator`'s contract. Used to test that iterator adapters don't\n /// poll their inner iterators after exhausting them.\n pub struct NonFused<I> {\n     iter: I,"}, {"sha": "f9f14d0dc63b468b691e58334d962857c2d0cbad", "filename": "library/std/src/env.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -185,15 +185,9 @@ impl fmt::Debug for VarsOs {\n ///\n /// # Errors\n ///\n-/// Errors if the environment variable is not present.\n-/// Errors if the environment variable is not valid Unicode. If this is not desired, consider using\n-/// [`var_os`].\n-///\n-/// # Panics\n-///\n-/// This function may panic if `key` is empty, contains an ASCII equals sign\n-/// `'='` or the NUL character `'\\0'`, or when the value contains the NUL\n-/// character.\n+/// Returns `[None]` if the environment variable isn't set.\n+/// Returns `[None]` if the environment variable is not valid Unicode. If this is not\n+/// desired, consider using [`var_os`].\n ///\n /// # Examples\n ///\n@@ -219,18 +213,17 @@ fn _var(key: &OsStr) -> Result<String, VarError> {\n }\n \n /// Fetches the environment variable `key` from the current process, returning\n-/// [`None`] if the variable isn't set.\n-///\n-/// # Panics\n-///\n-/// This function may panic if `key` is empty, contains an ASCII equals sign\n-/// `'='` or the NUL character `'\\0'`, or when the value contains the NUL\n-/// character.\n+/// [`None`] if the variable isn't set or there's another error.\n ///\n /// Note that the method will not check if the environment variable\n /// is valid Unicode. If you want to have an error on invalid UTF-8,\n /// use the [`var`] function instead.\n ///\n+/// # Errors\n+///\n+/// Returns `[None]` if the variable isn't set.\n+/// May return `[None]` if the variable value contains the NUL character.\n+///\n /// # Examples\n ///\n /// ```\n@@ -249,7 +242,6 @@ pub fn var_os<K: AsRef<OsStr>>(key: K) -> Option<OsString> {\n \n fn _var_os(key: &OsStr) -> Option<OsString> {\n     os_imp::getenv(key)\n-        .unwrap_or_else(|e| panic!(\"failed to get environment variable `{:?}`: {}\", key, e))\n }\n \n /// The error type for operations interacting with environment variables."}, {"sha": "fa073d080c6edd6bce2637f57d7808f34ac5e663", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -810,9 +810,9 @@ pub trait Read {\n         default_read_exact(self, buf)\n     }\n \n-    /// Creates a \"by reference\" adaptor for this instance of `Read`.\n+    /// Creates a \"by reference\" adapter for this instance of `Read`.\n     ///\n-    /// The returned adaptor also implements `Read` and will simply borrow this\n+    /// The returned adapter also implements `Read` and will simply borrow this\n     /// current reader.\n     ///\n     /// # Examples\n@@ -889,7 +889,7 @@ pub trait Read {\n         Bytes { inner: self }\n     }\n \n-    /// Creates an adaptor which will chain this stream with another.\n+    /// Creates an adapter which will chain this stream with another.\n     ///\n     /// The returned `Read` instance will first read all bytes from this object\n     /// until EOF is encountered. Afterwards the output is equivalent to the\n@@ -927,7 +927,7 @@ pub trait Read {\n         Chain { first: self, second: next, done_first: false }\n     }\n \n-    /// Creates an adaptor which will read at most `limit` bytes from it.\n+    /// Creates an adapter which will read at most `limit` bytes from it.\n     ///\n     /// This function returns a new instance of `Read` which will read at most\n     /// `limit` bytes, after which it will always return EOF ([`Ok(0)`]). Any\n@@ -1326,7 +1326,7 @@ impl Initializer {\n /// * The [`write`] method will attempt to write some data into the object,\n ///   returning how many bytes were successfully written.\n ///\n-/// * The [`flush`] method is useful for adaptors and explicit buffers\n+/// * The [`flush`] method is useful for adapters and explicit buffers\n ///   themselves for ensuring that all buffered data has been pushed out to the\n ///   'true sink'.\n ///\n@@ -1646,12 +1646,12 @@ pub trait Write {\n     fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> Result<()> {\n         // Create a shim which translates a Write to a fmt::Write and saves\n         // off I/O errors. instead of discarding them\n-        struct Adaptor<'a, T: ?Sized + 'a> {\n+        struct Adapter<'a, T: ?Sized + 'a> {\n             inner: &'a mut T,\n             error: Result<()>,\n         }\n \n-        impl<T: Write + ?Sized> fmt::Write for Adaptor<'_, T> {\n+        impl<T: Write + ?Sized> fmt::Write for Adapter<'_, T> {\n             fn write_str(&mut self, s: &str) -> fmt::Result {\n                 match self.inner.write_all(s.as_bytes()) {\n                     Ok(()) => Ok(()),\n@@ -1663,7 +1663,7 @@ pub trait Write {\n             }\n         }\n \n-        let mut output = Adaptor { inner: self, error: Ok(()) };\n+        let mut output = Adapter { inner: self, error: Ok(()) };\n         match fmt::write(&mut output, fmt) {\n             Ok(()) => Ok(()),\n             Err(..) => {\n@@ -1677,9 +1677,9 @@ pub trait Write {\n         }\n     }\n \n-    /// Creates a \"by reference\" adaptor for this instance of `Write`.\n+    /// Creates a \"by reference\" adapter for this instance of `Write`.\n     ///\n-    /// The returned adaptor also implements `Write` and will simply borrow this\n+    /// The returned adapter also implements `Write` and will simply borrow this\n     /// current writer.\n     ///\n     /// # Examples\n@@ -2263,7 +2263,7 @@ pub trait BufRead: Read {\n     }\n }\n \n-/// Adaptor to chain together two readers.\n+/// Adapter to chain together two readers.\n ///\n /// This struct is generally created by calling [`chain`] on a reader.\n /// Please see the documentation of [`chain`] for more details.\n@@ -2414,7 +2414,7 @@ impl<T, U> SizeHint for Chain<T, U> {\n     }\n }\n \n-/// Reader adaptor which limits the bytes read from an underlying reader.\n+/// Reader adapter which limits the bytes read from an underlying reader.\n ///\n /// This struct is generally created by calling [`take`] on a reader.\n /// Please see the documentation of [`take`] for more details."}, {"sha": "a23e29c5c7622291a8d5ce3e8e8915de40cd4828", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 46, "deletions": 38, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -116,16 +116,58 @@ pub struct Ipv6Addr {\n     inner: c::in6_addr,\n }\n \n-#[allow(missing_docs)]\n+/// Scope of an [IPv6 multicast address] as defined in [IETF RFC 7346 section 2].\n+///\n+/// # Stability Guarantees\n+///\n+/// Not all possible values for a multicast scope have been assigned.\n+/// Future RFCs may introduce new scopes, which will be added as variants to this enum;\n+/// because of this the enum is marked as `#[non_exhaustive]`.\n+///\n+/// # Examples\n+/// ```\n+/// #![feature(ip)]\n+///\n+/// use std::net::Ipv6Addr;\n+/// use std::net::Ipv6MulticastScope::*;\n+///\n+/// // An IPv6 multicast address with global scope (`ff0e::`).\n+/// let address = Ipv6Addr::new(0xff0e, 0, 0, 0, 0, 0, 0, 0);\n+///\n+/// // Will print \"Global scope\".\n+/// match address.multicast_scope() {\n+///     Some(InterfaceLocal) => println!(\"Interface-Local scope\"),\n+///     Some(LinkLocal) => println!(\"Link-Local scope\"),\n+///     Some(RealmLocal) => println!(\"Realm-Local scope\"),\n+///     Some(AdminLocal) => println!(\"Admin-Local scope\"),\n+///     Some(SiteLocal) => println!(\"Site-Local scope\"),\n+///     Some(OrganizationLocal) => println!(\"Organization-Local scope\"),\n+///     Some(Global) => println!(\"Global scope\"),\n+///     Some(_) => println!(\"Unknown scope\"),\n+///     None => println!(\"Not a multicast address!\")\n+/// }\n+///\n+/// ```\n+///\n+/// [IPv6 multicast address]: Ipv6Addr\n+/// [IETF RFC 7346 section 2]: https://tools.ietf.org/html/rfc7346#section-2\n #[derive(Copy, PartialEq, Eq, Clone, Hash, Debug)]\n #[unstable(feature = \"ip\", issue = \"27709\")]\n+#[non_exhaustive]\n pub enum Ipv6MulticastScope {\n+    /// Interface-Local scope.\n     InterfaceLocal,\n+    /// Link-Local scope.\n     LinkLocal,\n+    /// Realm-Local scope.\n     RealmLocal,\n+    /// Admin-Local scope.\n     AdminLocal,\n+    /// Site-Local scope.\n     SiteLocal,\n+    /// Organization-Local scope.\n     OrganizationLocal,\n+    /// Global scope.\n     Global,\n }\n \n@@ -486,8 +528,7 @@ impl Ipv4Addr {\n     /// - addresses used for documentation (see [`Ipv4Addr::is_documentation()`])\n     /// - the unspecified address (see [`Ipv4Addr::is_unspecified()`]), and the whole\n     ///   `0.0.0.0/8` block\n-    /// - addresses reserved for future protocols (see\n-    /// [`Ipv4Addr::is_ietf_protocol_assignment()`], except\n+    /// - addresses reserved for future protocols, except\n     /// `192.0.0.9/32` and `192.0.0.10/32` which are globally routable\n     /// - addresses reserved for future use (see [`Ipv4Addr::is_reserved()`]\n     /// - addresses reserved for networking devices benchmarking (see\n@@ -560,7 +601,8 @@ impl Ipv4Addr {\n             && !self.is_broadcast()\n             && !self.is_documentation()\n             && !self.is_shared()\n-            && !self.is_ietf_protocol_assignment()\n+            // addresses reserved for future protocols (`192.0.0.0/24`)\n+            && !(self.octets()[0] == 192 && self.octets()[1] == 0 && self.octets()[2] == 0)\n             && !self.is_reserved()\n             && !self.is_benchmarking()\n             // Make sure the address is not in 0.0.0.0/8\n@@ -589,40 +631,6 @@ impl Ipv4Addr {\n         self.octets()[0] == 100 && (self.octets()[1] & 0b1100_0000 == 0b0100_0000)\n     }\n \n-    /// Returns [`true`] if this address is part of `192.0.0.0/24`, which is reserved to\n-    /// IANA for IETF protocol assignments, as documented in [IETF RFC 6890].\n-    ///\n-    /// Note that parts of this block are in use:\n-    ///\n-    /// - `192.0.0.8/32` is the \"IPv4 dummy address\" (see [IETF RFC 7600])\n-    /// - `192.0.0.9/32` is the \"Port Control Protocol Anycast\" (see [IETF RFC 7723])\n-    /// - `192.0.0.10/32` is used for NAT traversal (see [IETF RFC 8155])\n-    ///\n-    /// [IETF RFC 6890]: https://tools.ietf.org/html/rfc6890\n-    /// [IETF RFC 7600]: https://tools.ietf.org/html/rfc7600\n-    /// [IETF RFC 7723]: https://tools.ietf.org/html/rfc7723\n-    /// [IETF RFC 8155]: https://tools.ietf.org/html/rfc8155\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(ip)]\n-    /// use std::net::Ipv4Addr;\n-    ///\n-    /// assert_eq!(Ipv4Addr::new(192, 0, 0, 0).is_ietf_protocol_assignment(), true);\n-    /// assert_eq!(Ipv4Addr::new(192, 0, 0, 8).is_ietf_protocol_assignment(), true);\n-    /// assert_eq!(Ipv4Addr::new(192, 0, 0, 9).is_ietf_protocol_assignment(), true);\n-    /// assert_eq!(Ipv4Addr::new(192, 0, 0, 255).is_ietf_protocol_assignment(), true);\n-    /// assert_eq!(Ipv4Addr::new(192, 0, 1, 0).is_ietf_protocol_assignment(), false);\n-    /// assert_eq!(Ipv4Addr::new(191, 255, 255, 255).is_ietf_protocol_assignment(), false);\n-    /// ```\n-    #[rustc_const_unstable(feature = \"const_ipv4\", issue = \"76205\")]\n-    #[unstable(feature = \"ip\", issue = \"27709\")]\n-    #[inline]\n-    pub const fn is_ietf_protocol_assignment(&self) -> bool {\n-        self.octets()[0] == 192 && self.octets()[1] == 0 && self.octets()[2] == 0\n-    }\n-\n     /// Returns [`true`] if this address part of the `198.18.0.0/15` range, which is reserved for\n     /// network devices benchmarking. This range is defined in [IETF RFC 2544] as `192.18.0.0`\n     /// through `198.19.255.255` but [errata 423] corrects it to `198.18.0.0/15`."}, {"sha": "dbfab9dde404e26a58804412fbd1ff9ccc594094", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -339,7 +339,6 @@ fn ipv4_properties() {\n             let broadcast: u16 = 1 << 6;\n             let documentation: u16 = 1 << 7;\n             let benchmarking: u16 = 1 << 8;\n-            let ietf_protocol_assignment: u16 = 1 << 9;\n             let reserved: u16 = 1 << 10;\n             let shared: u16 = 1 << 11;\n \n@@ -397,12 +396,6 @@ fn ipv4_properties() {\n                 assert!(!ip!($s).is_benchmarking());\n             }\n \n-            if ($mask & ietf_protocol_assignment) == ietf_protocol_assignment {\n-                assert!(ip!($s).is_ietf_protocol_assignment());\n-            } else {\n-                assert!(!ip!($s).is_ietf_protocol_assignment());\n-            }\n-\n             if ($mask & reserved) == reserved {\n                 assert!(ip!($s).is_reserved());\n             } else {\n@@ -426,7 +419,6 @@ fn ipv4_properties() {\n     let broadcast: u16 = 1 << 6;\n     let documentation: u16 = 1 << 7;\n     let benchmarking: u16 = 1 << 8;\n-    let ietf_protocol_assignment: u16 = 1 << 9;\n     let reserved: u16 = 1 << 10;\n     let shared: u16 = 1 << 11;\n \n@@ -449,9 +441,9 @@ fn ipv4_properties() {\n     check!(\"198.18.0.0\", benchmarking);\n     check!(\"198.18.54.2\", benchmarking);\n     check!(\"198.19.255.255\", benchmarking);\n-    check!(\"192.0.0.0\", ietf_protocol_assignment);\n-    check!(\"192.0.0.255\", ietf_protocol_assignment);\n-    check!(\"192.0.0.100\", ietf_protocol_assignment);\n+    check!(\"192.0.0.0\");\n+    check!(\"192.0.0.255\");\n+    check!(\"192.0.0.100\");\n     check!(\"240.0.0.0\", reserved);\n     check!(\"251.54.1.76\", reserved);\n     check!(\"254.255.255.255\", reserved);\n@@ -823,9 +815,6 @@ fn ipv4_const() {\n     const IS_SHARED: bool = IP_ADDRESS.is_shared();\n     assert!(!IS_SHARED);\n \n-    const IS_IETF_PROTOCOL_ASSIGNMENT: bool = IP_ADDRESS.is_ietf_protocol_assignment();\n-    assert!(!IS_IETF_PROTOCOL_ASSIGNMENT);\n-\n     const IS_BENCHMARKING: bool = IP_ADDRESS.is_benchmarking();\n     assert!(!IS_BENCHMARKING);\n "}, {"sha": "185b68c0a7803598107d1ac5acfdc5cd548d56d3", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -32,6 +32,8 @@ pub mod memchr;\n pub mod mutex;\n pub mod net;\n pub mod os;\n+#[path = \"../unix/os_str.rs\"]\n+pub mod os_str;\n #[path = \"../unix/path.rs\"]\n pub mod path;\n #[path = \"../unsupported/pipe.rs\"]\n@@ -47,7 +49,6 @@ pub mod thread_local_key;\n pub mod time;\n \n use crate::io::ErrorKind;\n-pub use crate::sys_common::os_str_bytes as os_str;\n \n #[allow(unused_extern_crates)]\n pub extern crate hermit_abi as abi;"}, {"sha": "8f927df85be5df754cfc041cdb693d5d7cd5b966", "filename": "library/std/src/sys/hermit/os.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -140,13 +140,8 @@ pub fn env() -> Env {\n     }\n }\n \n-pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n-    unsafe {\n-        match ENV.as_ref().unwrap().lock().unwrap().get_mut(k) {\n-            Some(value) => Ok(Some(value.clone())),\n-            None => Ok(None),\n-        }\n-    }\n+pub fn getenv(k: &OsStr) -> Option<OsString> {\n+    unsafe { ENV.as_ref().unwrap().lock().unwrap().get_mut(k).cloned() }\n }\n \n pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {"}, {"sha": "a2a763c2b4e0f3f3c12e94525dcc3555fea9ad54", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -26,6 +26,8 @@ pub mod memchr;\n pub mod mutex;\n pub mod net;\n pub mod os;\n+#[path = \"../unix/os_str.rs\"]\n+pub mod os_str;\n pub mod path;\n #[path = \"../unsupported/pipe.rs\"]\n pub mod pipe;\n@@ -37,8 +39,6 @@ pub mod thread;\n pub mod thread_local_key;\n pub mod time;\n \n-pub use crate::sys_common::os_str_bytes as os_str;\n-\n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n pub unsafe fn init(argc: isize, argv: *const *const u8) {"}, {"sha": "5f8b8def7c6709522f54bbc7b6b03f9c2bd33e38", "filename": "library/std/src/sys/sgx/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -106,8 +106,8 @@ pub fn env() -> Env {\n     get_env_store().map(|env| clone_to_vec(&env.lock().unwrap())).unwrap_or_default().into_iter()\n }\n \n-pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n-    Ok(get_env_store().and_then(|s| s.lock().unwrap().get(k).cloned()))\n+pub fn getenv(k: &OsStr) -> Option<OsString> {\n+    get_env_store().and_then(|s| s.lock().unwrap().get(k).cloned())\n }\n \n pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {"}, {"sha": "f827a4bca53f0f35b85a44a4b97889e94c49b62f", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -30,6 +30,7 @@ pub mod net;\n #[cfg(target_os = \"l4re\")]\n pub use self::l4re::net;\n pub mod os;\n+pub mod os_str;\n pub mod path;\n pub mod pipe;\n pub mod process;\n@@ -42,8 +43,6 @@ pub mod thread_local_dtor;\n pub mod thread_local_key;\n pub mod time;\n \n-pub use crate::sys_common::os_str_bytes as os_str;\n-\n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n pub unsafe fn init(argc: isize, argv: *const *const u8) {"}, {"sha": "dfbd93c90e626d7ce4db0d03a9856cdacda9f82a", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -532,19 +532,18 @@ pub fn env() -> Env {\n     }\n }\n \n-pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n+pub fn getenv(k: &OsStr) -> Option<OsString> {\n     // environment variables with a nul byte can't be set, so their value is\n     // always None as well\n-    let k = CString::new(k.as_bytes())?;\n+    let k = CString::new(k.as_bytes()).ok()?;\n     unsafe {\n         let _guard = env_read_lock();\n         let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\n-        let ret = if s.is_null() {\n+        if s.is_null() {\n             None\n         } else {\n             Some(OsStringExt::from_vec(CStr::from_ptr(s).to_bytes().to_vec()))\n-        };\n-        Ok(ret)\n+        }\n     }\n }\n "}, {"sha": "ae96d6b4df44e349f6334173208808c212666968", "filename": "library/std/src/sys/unix/os_str.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -13,6 +13,7 @@ use crate::sys_common::{AsInner, IntoInner};\n use core::str::lossy::{Utf8Lossy, Utf8LossyChunk};\n \n #[cfg(test)]\n+#[path = \"../unix/os_str/tests.rs\"]\n mod tests;\n \n #[derive(Hash)]", "previous_filename": "library/std/src/sys_common/os_str_bytes.rs"}, {"sha": "379673781557389d37828b7431b05a080a12a954", "filename": "library/std/src/sys/unix/os_str/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str%2Ftests.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "previous_filename": "library/std/src/sys_common/os_str_bytes/tests.rs"}, {"sha": "a06b44e96a923ae6fbe6940151d706edda592fb6", "filename": "library/std/src/sys/unsupported/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -4,8 +4,6 @@ pub mod memchr {\n     pub use core::slice::memchr::{memchr, memrchr};\n }\n \n-pub use crate::sys_common::os_str_bytes as os_str;\n-\n // This is not necessarily correct. May want to consider making it part of the\n // spec definition?\n use crate::os::raw::c_char;"}, {"sha": "a1276193bda37e86a81522558e6b7825e458fe78", "filename": "library/std/src/sys/unsupported/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -11,6 +11,8 @@ pub mod io;\n pub mod mutex;\n pub mod net;\n pub mod os;\n+#[path = \"../unix/os_str.rs\"]\n+pub mod os_str;\n #[path = \"../unix/path.rs\"]\n pub mod path;\n pub mod pipe;"}, {"sha": "2886ec1180e54fab37ec126c6e0da7e0ac096092", "filename": "library/std/src/sys/unsupported/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -76,8 +76,8 @@ pub fn env() -> Env {\n     panic!(\"not supported on this platform\")\n }\n \n-pub fn getenv(_: &OsStr) -> io::Result<Option<OsString>> {\n-    Ok(None)\n+pub fn getenv(_: &OsStr) -> Option<OsString> {\n+    None\n }\n \n pub fn setenv(_: &OsStr, _: &OsStr) -> io::Result<()> {"}, {"sha": "8d62335aae5eb9d5aff765bc37545359a278a164", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -32,7 +32,8 @@ pub mod io;\n pub mod mutex;\n pub mod net;\n pub mod os;\n-pub use crate::sys_common::os_str_bytes as os_str;\n+#[path = \"../unix/os_str.rs\"]\n+pub mod os_str;\n #[path = \"../unix/path.rs\"]\n pub mod path;\n #[path = \"../unsupported/pipe.rs\"]"}, {"sha": "c5229a188342a3cb7811060c2998fdce238705f6", "filename": "library/std/src/sys/wasi/os.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -175,17 +175,16 @@ pub fn env() -> Env {\n     }\n }\n \n-pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n-    let k = CString::new(k.as_bytes())?;\n+pub fn getenv(k: &OsStr) -> Option<OsString> {\n+    let k = CString::new(k.as_bytes()).ok()?;\n     unsafe {\n         let _guard = env_lock();\n         let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\n-        let ret = if s.is_null() {\n+        if s.is_null() {\n             None\n         } else {\n             Some(OsStringExt::from_vec(CStr::from_ptr(s).to_bytes().to_vec()))\n-        };\n-        Ok(ret)\n+        }\n     }\n }\n "}, {"sha": "c81d653a5e38ffa876054ae476c33a5055220f30", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -30,6 +30,8 @@ pub mod io;\n pub mod net;\n #[path = \"../unsupported/os.rs\"]\n pub mod os;\n+#[path = \"../unix/os_str.rs\"]\n+pub mod os_str;\n #[path = \"../unix/path.rs\"]\n pub mod path;\n #[path = \"../unsupported/pipe.rs\"]\n@@ -45,8 +47,6 @@ pub mod thread_local_key;\n #[path = \"../unsupported/time.rs\"]\n pub mod time;\n \n-pub use crate::sys_common::os_str_bytes as os_str;\n-\n cfg_if::cfg_if! {\n     if #[cfg(target_feature = \"atomics\")] {\n         #[path = \"atomics/condvar.rs\"]"}, {"sha": "8db97ba50a81fa75a143e3d0ddbc12dd914aaa91", "filename": "library/std/src/sys/windows/os.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -253,22 +253,13 @@ pub fn chdir(p: &path::Path) -> io::Result<()> {\n     cvt(unsafe { c::SetCurrentDirectoryW(p.as_ptr()) }).map(drop)\n }\n \n-pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n-    let k = to_u16s(k)?;\n-    let res = super::fill_utf16_buf(\n+pub fn getenv(k: &OsStr) -> Option<OsString> {\n+    let k = to_u16s(k).ok()?;\n+    super::fill_utf16_buf(\n         |buf, sz| unsafe { c::GetEnvironmentVariableW(k.as_ptr(), buf, sz) },\n         |buf| OsStringExt::from_wide(buf),\n-    );\n-    match res {\n-        Ok(value) => Ok(Some(value)),\n-        Err(e) => {\n-            if e.raw_os_error() == Some(c::ERROR_ENVVAR_NOT_FOUND as i32) {\n-                Ok(None)\n-            } else {\n-                Err(e)\n-            }\n-        }\n-    }\n+    )\n+    .ok()\n }\n \n pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {"}, {"sha": "894440564b738d3772dd5c63bbf8a65ee2752c4d", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -26,10 +26,6 @@ pub mod fs;\n pub mod io;\n pub mod memchr;\n pub mod mutex;\n-// `doc` is required because `sys/mod.rs` imports `unix/ext/mod.rs` on Windows\n-// when generating documentation.\n-#[cfg(any(doc, not(windows)))]\n-pub mod os_str_bytes;\n pub mod process;\n pub mod remutex;\n #[macro_use]"}, {"sha": "f2d841cb335ab5a0316839fbaba9cef1883e2d73", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -163,14 +163,8 @@ impl StepDescription {\n     }\n \n     fn maybe_run(&self, builder: &Builder<'_>, pathset: &PathSet) {\n-        if builder.config.exclude.iter().any(|e| pathset.has(e)) {\n-            eprintln!(\"Skipping {:?} because it is excluded\", pathset);\n+        if self.is_excluded(builder, pathset) {\n             return;\n-        } else if !builder.config.exclude.is_empty() {\n-            eprintln!(\n-                \"{:?} not skipped for {:?} -- not in {:?}\",\n-                pathset, self.name, builder.config.exclude\n-            );\n         }\n \n         // Determine the targets participating in this rule.\n@@ -182,6 +176,21 @@ impl StepDescription {\n         }\n     }\n \n+    fn is_excluded(&self, builder: &Builder<'_>, pathset: &PathSet) -> bool {\n+        if builder.config.exclude.iter().any(|e| pathset.has(e)) {\n+            eprintln!(\"Skipping {:?} because it is excluded\", pathset);\n+            return true;\n+        }\n+\n+        if !builder.config.exclude.is_empty() {\n+            eprintln!(\n+                \"{:?} not skipped for {:?} -- not in {:?}\",\n+                pathset, self.name, builder.config.exclude\n+            );\n+        }\n+        false\n+    }\n+\n     fn run(v: &[StepDescription], builder: &Builder<'_>, paths: &[PathBuf]) {\n         let should_runs =\n             v.iter().map(|desc| (desc.should_run)(ShouldRun::new(builder))).collect::<Vec<_>>();\n@@ -1579,6 +1588,27 @@ impl<'a> Builder<'a> {\n         self.cache.put(step, out.clone());\n         out\n     }\n+\n+    /// Ensure that a given step is built *only if it's supposed to be built by default*, returning\n+    /// its output. This will cache the step, so it's safe (and good!) to call this as often as\n+    /// needed to ensure that all dependencies are build.\n+    pub(crate) fn ensure_if_default<T, S: Step<Output = Option<T>>>(\n+        &'a self,\n+        step: S,\n+    ) -> S::Output {\n+        let desc = StepDescription::from::<S>();\n+        let should_run = (desc.should_run)(ShouldRun::new(self));\n+\n+        // Avoid running steps contained in --exclude\n+        for pathset in &should_run.paths {\n+            if desc.is_excluded(self, pathset) {\n+                return None;\n+            }\n+        }\n+\n+        // Only execute if it's supposed to run as default\n+        if desc.default && should_run.is_really_default() { self.ensure(step) } else { None }\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "64075e18366bfbada2f733a93a2b7c3dc6c706c2", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 109, "deletions": 120, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -8,6 +8,7 @@\n //! out to `rust-installer` still. This may one day be replaced with bits and\n //! pieces of `rustup.rs`!\n \n+use std::collections::HashSet;\n use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n@@ -45,6 +46,13 @@ fn missing_tool(tool_name: &str, skip: bool) {\n     }\n }\n \n+fn should_build_extended_tool(builder: &Builder<'_>, tool: &str) -> bool {\n+    if !builder.config.extended {\n+        return false;\n+    }\n+    builder.config.tools.as_ref().map_or(true, |tools| tools.contains(tool))\n+}\n+\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Docs {\n     pub host: TargetSelection,\n@@ -55,7 +63,8 @@ impl Step for Docs {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/doc\")\n+        let default = run.builder.config.docs;\n+        run.path(\"src/doc\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -65,9 +74,6 @@ impl Step for Docs {\n     /// Builds the `rust-docs` installer component.\n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let host = self.host;\n-        if !builder.config.docs {\n-            return None;\n-        }\n         builder.default_doc(&[]);\n \n         let dest = \"share/doc/rust/html\";\n@@ -676,8 +682,8 @@ impl Step for Analysis {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        let builder = run.builder;\n-        run.path(\"analysis\").default_condition(builder.config.extended)\n+        let default = should_build_extended_tool(&run.builder, \"analysis\");\n+        run.path(\"analysis\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -698,7 +704,6 @@ impl Step for Analysis {\n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n-        assert!(builder.config.extended);\n         if compiler.host != builder.config.build {\n             return None;\n         }\n@@ -953,11 +958,13 @@ pub struct Cargo {\n }\n \n impl Step for Cargo {\n-    type Output = GeneratedTarball;\n+    type Output = Option<GeneratedTarball>;\n+    const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"cargo\")\n+        let default = should_build_extended_tool(&run.builder, \"cargo\");\n+        run.path(\"cargo\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -971,7 +978,7 @@ impl Step for Cargo {\n         });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> GeneratedTarball {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n \n@@ -996,7 +1003,7 @@ impl Step for Cargo {\n             }\n         }\n \n-        tarball.generate()\n+        Some(tarball.generate())\n     }\n }\n \n@@ -1009,9 +1016,11 @@ pub struct Rls {\n impl Step for Rls {\n     type Output = Option<GeneratedTarball>;\n     const ONLY_HOSTS: bool = true;\n+    const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"rls\")\n+        let default = should_build_extended_tool(&run.builder, \"rls\");\n+        run.path(\"rls\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1028,7 +1037,6 @@ impl Step for Rls {\n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n-        assert!(builder.config.extended);\n \n         let rls = builder\n             .ensure(tool::Rls { compiler, target, extra_features: Vec::new() })\n@@ -1054,10 +1062,12 @@ pub struct RustAnalyzer {\n \n impl Step for RustAnalyzer {\n     type Output = Option<GeneratedTarball>;\n+    const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"rust-analyzer\")\n+        let default = should_build_extended_tool(&run.builder, \"rust-analyzer\");\n+        run.path(\"rust-analyzer\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1080,7 +1090,6 @@ impl Step for RustAnalyzer {\n         }\n         let compiler = self.compiler;\n         let target = self.target;\n-        assert!(builder.config.extended);\n \n         if target.contains(\"riscv64\") {\n             // riscv64 currently has an LLVM bug that makes rust-analyzer unable\n@@ -1108,11 +1117,13 @@ pub struct Clippy {\n }\n \n impl Step for Clippy {\n-    type Output = GeneratedTarball;\n+    type Output = Option<GeneratedTarball>;\n+    const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"clippy\")\n+        let default = should_build_extended_tool(&run.builder, \"clippy\");\n+        run.path(\"clippy\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1126,10 +1137,9 @@ impl Step for Clippy {\n         });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> GeneratedTarball {\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n-        assert!(builder.config.extended);\n \n         // Prepare the image directory\n         // We expect clippy to build, because we've exited this step above if tool\n@@ -1147,7 +1157,7 @@ impl Step for Clippy {\n         tarball.add_file(clippy, \"bin\", 0o755);\n         tarball.add_file(cargoclippy, \"bin\", 0o755);\n         tarball.add_legal_and_readme_to(\"share/doc/clippy\");\n-        tarball.generate()\n+        Some(tarball.generate())\n     }\n }\n \n@@ -1159,10 +1169,12 @@ pub struct Miri {\n \n impl Step for Miri {\n     type Output = Option<GeneratedTarball>;\n+    const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"miri\")\n+        let default = should_build_extended_tool(&run.builder, \"miri\");\n+        run.path(\"miri\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1185,7 +1197,6 @@ impl Step for Miri {\n         }\n         let compiler = self.compiler;\n         let target = self.target;\n-        assert!(builder.config.extended);\n \n         let miri = builder\n             .ensure(tool::Miri { compiler, target, extra_features: Vec::new() })\n@@ -1218,10 +1229,12 @@ pub struct Rustfmt {\n \n impl Step for Rustfmt {\n     type Output = Option<GeneratedTarball>;\n+    const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"rustfmt\")\n+        let default = should_build_extended_tool(&run.builder, \"rustfmt\");\n+        run.path(\"rustfmt\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1270,10 +1283,17 @@ pub struct RustDemangler {\n \n impl Step for RustDemangler {\n     type Output = Option<GeneratedTarball>;\n+    const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"rust-demangler\")\n+        // While other tools use `should_build_extended_tool` to decide whether to be run by\n+        // default or not, `rust-demangler` must be build when *either* it's enabled as a tool like\n+        // the other ones or if `profiler = true`. Because we don't know the target at this stage\n+        // we run the step by default when only `extended = true`, and decide whether to actually\n+        // run it or not later.\n+        let default = run.builder.config.extended;\n+        run.path(\"rust-demangler\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -1290,11 +1310,11 @@ impl Step for RustDemangler {\n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let compiler = self.compiler;\n         let target = self.target;\n-        assert!(builder.config.extended);\n \n         // Only build this extended tool if explicitly included in `tools`, or if `profiler = true`\n-        let profiler = builder.config.profiler_enabled(target);\n-        if !builder.config.tools.as_ref().map_or(profiler, |t| t.contains(\"rust-demangler\")) {\n+        let condition = should_build_extended_tool(builder, \"rust-demangler\")\n+            || builder.config.profiler_enabled(target);\n+        if builder.config.extended && !condition {\n             return None;\n         }\n \n@@ -1345,51 +1365,44 @@ impl Step for Extended {\n \n         builder.info(&format!(\"Dist extended stage{} ({})\", compiler.stage, target));\n \n-        let rustc_installer = builder.ensure(Rustc { compiler: builder.compiler(stage, target) });\n-        let cargo_installer = builder.ensure(Cargo { compiler, target });\n-        let rustfmt_installer = builder.ensure(Rustfmt { compiler, target });\n-        let rust_demangler_installer = builder.ensure(RustDemangler { compiler, target });\n-        let rls_installer = builder.ensure(Rls { compiler, target });\n-        let rust_analyzer_installer = builder.ensure(RustAnalyzer { compiler, target });\n-        let llvm_tools_installer = builder.ensure(LlvmTools { target });\n-        let clippy_installer = builder.ensure(Clippy { compiler, target });\n-        let miri_installer = builder.ensure(Miri { compiler, target });\n-        let mingw_installer = builder.ensure(Mingw { host: target });\n-        let analysis_installer = builder.ensure(Analysis { compiler, target });\n-\n-        let docs_installer = builder.ensure(Docs { host: target });\n-        let std_installer = builder.ensure(Std { compiler, target });\n-\n-        let etc = builder.src.join(\"src/etc/installer\");\n-\n-        // Avoid producing tarballs during a dry run.\n-        if builder.config.dry_run {\n-            return;\n+        let mut tarballs = Vec::new();\n+        let mut built_tools = HashSet::new();\n+        macro_rules! add_component {\n+            ($name:expr => $step:expr) => {\n+                if let Some(tarball) = builder.ensure_if_default($step) {\n+                    tarballs.push(tarball);\n+                    built_tools.insert($name);\n+                }\n+            };\n         }\n \n         // When rust-std package split from rustc, we needed to ensure that during\n         // upgrades rustc was upgraded before rust-std. To avoid rustc clobbering\n         // the std files during uninstall. To do this ensure that rustc comes\n         // before rust-std in the list below.\n-        let mut tarballs = Vec::new();\n-        tarballs.push(rustc_installer);\n-        tarballs.push(cargo_installer);\n-        tarballs.push(clippy_installer);\n-        tarballs.extend(rust_demangler_installer.clone());\n-        tarballs.extend(rls_installer.clone());\n-        tarballs.extend(rust_analyzer_installer.clone());\n-        tarballs.extend(miri_installer.clone());\n-        tarballs.extend(rustfmt_installer.clone());\n-        tarballs.extend(llvm_tools_installer);\n-        if let Some(analysis_installer) = analysis_installer {\n-            tarballs.push(analysis_installer);\n-        }\n-        tarballs.push(std_installer.expect(\"missing std\"));\n-        if let Some(docs_installer) = docs_installer {\n-            tarballs.push(docs_installer);\n+        tarballs.push(builder.ensure(Rustc { compiler: builder.compiler(stage, target) }));\n+        tarballs.push(builder.ensure(Std { compiler, target }).expect(\"missing std\"));\n+\n+        if target.contains(\"windows-gnu\") {\n+            tarballs.push(builder.ensure(Mingw { host: target }).expect(\"missing mingw\"));\n         }\n-        if target.contains(\"pc-windows-gnu\") {\n-            tarballs.push(mingw_installer.unwrap());\n+\n+        add_component!(\"rust-docs\" => Docs { host: target });\n+        add_component!(\"rust-demangler\"=> RustDemangler { compiler, target });\n+        add_component!(\"cargo\" => Cargo { compiler, target });\n+        add_component!(\"rustfmt\" => Rustfmt { compiler, target });\n+        add_component!(\"rls\" => Rls { compiler, target });\n+        add_component!(\"rust-analyzer\" => RustAnalyzer { compiler, target });\n+        add_component!(\"llvm-components\" => LlvmTools { target });\n+        add_component!(\"clippy\" => Clippy { compiler, target });\n+        add_component!(\"miri\" => Miri { compiler, target });\n+        add_component!(\"analysis\" => Analysis { compiler, target });\n+\n+        let etc = builder.src.join(\"src/etc/installer\");\n+\n+        // Avoid producing tarballs during a dry run.\n+        if builder.config.dry_run {\n+            return;\n         }\n \n         let tarball = Tarball::new(builder, \"rust\", &target.triple);\n@@ -1434,20 +1447,10 @@ impl Step for Extended {\n \n         let xform = |p: &Path| {\n             let mut contents = t!(fs::read_to_string(p));\n-            if rust_demangler_installer.is_none() {\n-                contents = filter(&contents, \"rust-demangler\");\n-            }\n-            if rls_installer.is_none() {\n-                contents = filter(&contents, \"rls\");\n-            }\n-            if rust_analyzer_installer.is_none() {\n-                contents = filter(&contents, \"rust-analyzer\");\n-            }\n-            if miri_installer.is_none() {\n-                contents = filter(&contents, \"miri\");\n-            }\n-            if rustfmt_installer.is_none() {\n-                contents = filter(&contents, \"rustfmt\");\n+            for tool in &[\"rust-demangler\", \"rls\", \"rust-analyzer\", \"miri\", \"rustfmt\"] {\n+                if !built_tools.contains(tool) {\n+                    contents = filter(&contents, tool);\n+                }\n             }\n             let ret = tmp.join(p.file_name().unwrap());\n             t!(fs::write(&ret, &contents));\n@@ -1485,19 +1488,11 @@ impl Step for Extended {\n             prepare(\"rust-std\");\n             prepare(\"rust-analysis\");\n             prepare(\"clippy\");\n-            if rust_demangler_installer.is_some() {\n-                prepare(\"rust-demangler\");\n-            }\n-            if rls_installer.is_some() {\n-                prepare(\"rls\");\n-            }\n-            if rust_analyzer_installer.is_some() {\n-                prepare(\"rust-analyzer\");\n-            }\n-            if miri_installer.is_some() {\n-                prepare(\"miri\");\n+            for tool in &[\"rust-demangler\", \"rls\", \"rust-analyzer\", \"miri\"] {\n+                if built_tools.contains(tool) {\n+                    prepare(tool);\n+                }\n             }\n-\n             // create an 'uninstall' package\n             builder.install(&etc.join(\"pkg/postinstall\"), &pkg.join(\"uninstall\"), 0o755);\n             pkgbuild(\"uninstall\");\n@@ -1554,17 +1549,10 @@ impl Step for Extended {\n             prepare(\"rust-docs\");\n             prepare(\"rust-std\");\n             prepare(\"clippy\");\n-            if rust_demangler_installer.is_some() {\n-                prepare(\"rust-demangler\");\n-            }\n-            if rls_installer.is_some() {\n-                prepare(\"rls\");\n-            }\n-            if rust_analyzer_installer.is_some() {\n-                prepare(\"rust-analyzer\");\n-            }\n-            if miri_installer.is_some() {\n-                prepare(\"miri\");\n+            for tool in &[\"rust-demangler\", \"rls\", \"rust-analyzer\", \"miri\"] {\n+                if built_tools.contains(tool) {\n+                    prepare(tool);\n+                }\n             }\n             if target.contains(\"windows-gnu\") {\n                 prepare(\"rust-mingw\");\n@@ -1643,7 +1631,7 @@ impl Step for Extended {\n                     .arg(\"-out\")\n                     .arg(exe.join(\"StdGroup.wxs\")),\n             );\n-            if rls_installer.is_some() {\n+            if built_tools.contains(\"rls\") {\n                 builder.run(\n                     Command::new(&heat)\n                         .current_dir(&exe)\n@@ -1662,7 +1650,7 @@ impl Step for Extended {\n                         .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n                 );\n             }\n-            if rust_analyzer_installer.is_some() {\n+            if built_tools.contains(\"rust-analyzer\") {\n                 builder.run(\n                     Command::new(&heat)\n                         .current_dir(&exe)\n@@ -1698,7 +1686,7 @@ impl Step for Extended {\n                     .arg(\"-t\")\n                     .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n             );\n-            if rust_demangler_installer.is_some() {\n+            if built_tools.contains(\"rust-demangler\") {\n                 builder.run(\n                     Command::new(&heat)\n                         .current_dir(&exe)\n@@ -1717,7 +1705,7 @@ impl Step for Extended {\n                         .arg(etc.join(\"msi/remove-duplicates.xsl\")),\n                 );\n             }\n-            if miri_installer.is_some() {\n+            if built_tools.contains(\"miri\") {\n                 builder.run(\n                     Command::new(&heat)\n                         .current_dir(&exe)\n@@ -1790,16 +1778,16 @@ impl Step for Extended {\n                     .arg(&input);\n                 add_env(builder, &mut cmd, target);\n \n-                if rust_demangler_installer.is_some() {\n+                if built_tools.contains(\"rust-demangler\") {\n                     cmd.arg(\"-dRustDemanglerDir=rust-demangler\");\n                 }\n-                if rls_installer.is_some() {\n+                if built_tools.contains(\"rls\") {\n                     cmd.arg(\"-dRlsDir=rls\");\n                 }\n-                if rust_analyzer_installer.is_some() {\n+                if built_tools.contains(\"rust-analyzer\") {\n                     cmd.arg(\"-dRustAnalyzerDir=rust-analyzer\");\n                 }\n-                if miri_installer.is_some() {\n+                if built_tools.contains(\"miri\") {\n                     cmd.arg(\"-dMiriDir=miri\");\n                 }\n                 if target.contains(\"windows-gnu\") {\n@@ -1815,16 +1803,16 @@ impl Step for Extended {\n             candle(\"CargoGroup.wxs\".as_ref());\n             candle(\"StdGroup.wxs\".as_ref());\n             candle(\"ClippyGroup.wxs\".as_ref());\n-            if rust_demangler_installer.is_some() {\n+            if built_tools.contains(\"rust-demangler\") {\n                 candle(\"RustDemanglerGroup.wxs\".as_ref());\n             }\n-            if rls_installer.is_some() {\n+            if built_tools.contains(\"rls\") {\n                 candle(\"RlsGroup.wxs\".as_ref());\n             }\n-            if rust_analyzer_installer.is_some() {\n+            if built_tools.contains(\"rust-analyzer\") {\n                 candle(\"RustAnalyzerGroup.wxs\".as_ref());\n             }\n-            if miri_installer.is_some() {\n+            if built_tools.contains(\"miri\") {\n                 candle(\"MiriGroup.wxs\".as_ref());\n             }\n             candle(\"AnalysisGroup.wxs\".as_ref());\n@@ -1858,16 +1846,16 @@ impl Step for Extended {\n                 .arg(\"ClippyGroup.wixobj\")\n                 .current_dir(&exe);\n \n-            if rls_installer.is_some() {\n+            if built_tools.contains(\"rls\") {\n                 cmd.arg(\"RlsGroup.wixobj\");\n             }\n-            if rust_analyzer_installer.is_some() {\n+            if built_tools.contains(\"rust-analyzer\") {\n                 cmd.arg(\"RustAnalyzerGroup.wixobj\");\n             }\n-            if rust_demangler_installer.is_some() {\n+            if built_tools.contains(\"rust-demangler\") {\n                 cmd.arg(\"RustDemanglerGroup.wixobj\");\n             }\n-            if miri_installer.is_some() {\n+            if built_tools.contains(\"miri\") {\n                 cmd.arg(\"MiriGroup.wixobj\");\n             }\n \n@@ -2003,9 +1991,11 @@ pub struct LlvmTools {\n impl Step for LlvmTools {\n     type Output = Option<GeneratedTarball>;\n     const ONLY_HOSTS: bool = true;\n+    const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"llvm-tools\")\n+        let default = should_build_extended_tool(&run.builder, \"llvm-tools\");\n+        run.path(\"llvm-tools\").default_condition(default)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -2014,7 +2004,6 @@ impl Step for LlvmTools {\n \n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let target = self.target;\n-        assert!(builder.config.extended);\n \n         /* run only if llvm-config isn't used */\n         if let Some(config) = builder.config.target_config.get(&target) {"}, {"sha": "06acf1a9a008367bc2f85cabb20db0090ad06619", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -139,12 +139,8 @@ macro_rules! install {\n \n install!((self, builder, _config),\n     Docs, \"src/doc\", _config.docs, only_hosts: false, {\n-        if let Some(tarball) = builder.ensure(dist::Docs { host: self.target }) {\n-            install_sh(builder, \"docs\", self.compiler.stage, Some(self.target), &tarball);\n-        } else {\n-            panic!(\"docs are not available to install, \\\n-                check that `build.docs` is true in `config.toml`\");\n-        }\n+        let tarball = builder.ensure(dist::Docs { host: self.target }).expect(\"missing docs\");\n+        install_sh(builder, \"docs\", self.compiler.stage, Some(self.target), &tarball);\n     };\n     Std, \"library/std\", true, only_hosts: false, {\n         for target in &builder.targets {\n@@ -158,7 +154,9 @@ install!((self, builder, _config),\n         }\n     };\n     Cargo, \"cargo\", Self::should_build(_config), only_hosts: true, {\n-        let tarball = builder.ensure(dist::Cargo { compiler: self.compiler, target: self.target });\n+        let tarball = builder\n+            .ensure(dist::Cargo { compiler: self.compiler, target: self.target })\n+            .expect(\"missing cargo\");\n         install_sh(builder, \"cargo\", self.compiler.stage, Some(self.target), &tarball);\n     };\n     Rls, \"rls\", Self::should_build(_config), only_hosts: true, {\n@@ -182,7 +180,9 @@ install!((self, builder, _config),\n         }\n     };\n     Clippy, \"clippy\", Self::should_build(_config), only_hosts: true, {\n-        let tarball = builder.ensure(dist::Clippy { compiler: self.compiler, target: self.target });\n+        let tarball = builder\n+            .ensure(dist::Clippy { compiler: self.compiler, target: self.target })\n+            .expect(\"missing clippy\");\n         install_sh(builder, \"clippy\", self.compiler.stage, Some(self.target), &tarball);\n     };\n     Miri, \"miri\", Self::should_build(_config), only_hosts: true, {"}, {"sha": "b556b24d6aa6a3d67a503c54a447d7fd976021d2", "filename": "src/test/ui/macros/issue-86082-option-env-invalid-char.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftest%2Fui%2Fmacros%2Fissue-86082-option-env-invalid-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftest%2Fui%2Fmacros%2Fissue-86082-option-env-invalid-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-86082-option-env-invalid-char.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+//\n+// Regression test for issue #86082\n+//\n+// Checks that option_env! does not panic on receiving an invalid\n+// environment variable name.\n+\n+fn main() {\n+    option_env!(\"\\0=\");\n+}"}, {"sha": "d03d1190d345887edc7964921a495eab785e6989", "filename": "src/tools/rustbook/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustbook%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustbook%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2FCargo.toml?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -10,6 +10,6 @@ clap = \"2.25.0\"\n env_logger = \"0.7.1\"\n \n [dependencies.mdbook]\n-version = \"0.4.6\"\n+version = \"0.4.11\"\n default-features = false\n features = [\"search\"]"}, {"sha": "03bb5598007ce55779b26c9276be46586bc94425", "filename": "src/tools/rustfmt/Cargo.lock", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FCargo.lock?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -73,7 +73,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"924c76597f0d9ca25d762c25a4d369d51267536465dc5064bdf0eb073ed477ea\"\n dependencies = [\n  \"backtrace-sys\",\n- \"cfg-if\",\n+ \"cfg-if 0.1.10\",\n  \"libc\",\n  \"rustc-demangle\",\n ]\n@@ -162,6 +162,12 @@ version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \n+[[package]]\n+name = \"cfg-if\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n+\n [[package]]\n name = \"clap\"\n version = \"2.33.0\"\n@@ -207,7 +213,7 @@ version = \"0.6.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"04973fa96e96579258a5091af6003abde64af786b860f18622b82e026cca60e6\"\n dependencies = [\n- \"cfg-if\",\n+ \"cfg-if 0.1.10\",\n  \"lazy_static\",\n ]\n \n@@ -218,7 +224,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ce446db02cdc3165b94ae73111e570793400d0794e46125cc4056c81cbb039f4\"\n dependencies = [\n  \"autocfg\",\n- \"cfg-if\",\n+ \"cfg-if 0.1.10\",\n  \"lazy_static\",\n ]\n \n@@ -245,7 +251,7 @@ version = \"2.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"13aea89a5c93364a98e9b37b2fa237effbb694d5cfe01c5b70941f7eb087d5e3\"\n dependencies = [\n- \"cfg-if\",\n+ \"cfg-if 0.1.10\",\n  \"dirs-sys\",\n ]\n \n@@ -255,7 +261,7 @@ version = \"0.3.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"afa0b23de8fd801745c471deffa6e12d248f962c9fd4b4c33787b055599bde7b\"\n dependencies = [\n- \"cfg-if\",\n+ \"cfg-if 0.1.10\",\n  \"libc\",\n  \"redox_users\",\n  \"winapi\",\n@@ -401,11 +407,11 @@ checksum = \"f2f96b10ec2560088a8e76961b00d47107b3a625fecb76dedb29ee7ccbf98235\"\n \n [[package]]\n name = \"log\"\n-version = \"0.4.8\"\n+version = \"0.4.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"14b6052be84e6b71ab17edffc2eeabf5c2c3ae1fdb464aae35ac50c67a44e1f7\"\n+checksum = \"51b9bbe6c47d51fc3e1a9b945965946b4c44142ab8792c50835a980d362c2710\"\n dependencies = [\n- \"cfg-if\",\n+ \"cfg-if 1.0.0\",\n ]\n \n [[package]]\n@@ -426,7 +432,7 @@ version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"a85ea9fc0d4ac0deb6fe7911d38786b32fc11119afd9e9d38b84ff691ce64220\"\n dependencies = [\n- \"cfg-if\",\n+ \"cfg-if 0.1.10\",\n ]\n \n [[package]]"}, {"sha": "d2e5613eba964cc62a543864da940f7cc1bbb60b", "filename": "src/tools/rustfmt/Configurations.md", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2FConfigurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2FConfigurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FConfigurations.md?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -1475,7 +1475,9 @@ Copyright 2018 The Rust Project Developers.`, etc.:\n \n ## `match_arm_blocks`\n \n-Wrap the body of arms in blocks when it does not fit on the same line with the pattern of arms\n+Controls whether arm bodies are wrapped in cases where the first line of the body cannot fit on the same line as the `=>` operator.\n+\n+The Style Guide requires that bodies are block wrapped by default if a line break is required after the `=>`, but this option can be used to disable that behavior to prevent wrapping arm bodies in that event, so long as the body does not contain multiple statements nor line comments.\n \n - **Default value**: `true`\n - **Possible values**: `true`, `false`\n@@ -1486,10 +1488,16 @@ Wrap the body of arms in blocks when it does not fit on the same line with the p\n ```rust\n fn main() {\n     match lorem {\n-        true => {\n+        ipsum => {\n             foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x)\n         }\n-        false => println!(\"{}\", sit),\n+        dolor => println!(\"{}\", sit),\n+        sit => foo(\n+            \"foooooooooooooooooooooooo\",\n+            \"baaaaaaaaaaaaaaaaaaaaaaaarr\",\n+            \"baaaaaaaaaaaaaaaaaaaazzzzzzzzzzzzz\",\n+            \"qqqqqqqqquuuuuuuuuuuuuuuuuuuuuuuuuuxxx\",\n+        ),\n     }\n }\n ```\n@@ -1499,9 +1507,15 @@ fn main() {\n ```rust\n fn main() {\n     match lorem {\n-        true =>\n+        lorem =>\n             foooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo(x),\n-        false => println!(\"{}\", sit),\n+        ipsum => println!(\"{}\", sit),\n+        sit => foo(\n+            \"foooooooooooooooooooooooo\",\n+            \"baaaaaaaaaaaaaaaaaaaaaaaarr\",\n+            \"baaaaaaaaaaaaaaaaaaaazzzzzzzzzzzzz\",\n+            \"qqqqqqqqquuuuuuuuuuuuuuuuuuuuuuuuuuxxx\",\n+        ),\n     }\n }\n ```"}, {"sha": "e6dc6a220376db13aaea6aa795410a1c37a851c7", "filename": "src/tools/rustfmt/Contributing.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2FContributing.md", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2FContributing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FContributing.md?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -65,7 +65,7 @@ and get a better grasp on the execution flow.\n \n ## Hack!\n \n-Here are some [good starting issues](https://github.com/rust-lang/rustfmt/issues?q=is%3Aopen+is%3Aissue+label%3Agood-first-issue).\n+Here are some [good starting issues](https://github.com/rust-lang/rustfmt/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22).\n \n If you've found areas which need polish and don't have issues, please submit a\n PR, don't feel there needs to be an issue.\n@@ -138,8 +138,8 @@ format.\n \n There are different nodes for every kind of item and expression in Rust. For\n more details see the source code in the compiler -\n-[ast.rs](https://dxr.mozilla.org/rust/source/src/libsyntax/ast.rs) - and/or the\n-[docs](https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast/index.html).\n+[ast.rs](https://github.com/rust-lang/rust/blob/master/compiler/rustc_ast/src/ast.rs) - and/or the\n+[docs](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/index.html).\n \n Many nodes in the AST (but not all, annoyingly) have a `Span`. A `Span` is a\n range in the source code, it can easily be converted to a snippet of source"}, {"sha": "9c7a1c4bc341bed77ce3ee362a8eea5d01ad7974", "filename": "src/tools/rustfmt/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2FREADME.md?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -230,5 +230,5 @@ Apache License (Version 2.0).\n See [LICENSE-APACHE](LICENSE-APACHE) and [LICENSE-MIT](LICENSE-MIT) for details.\n \n [rust]: https://github.com/rust-lang/rust\n-[fmt rfcs]: https://github.com/rust-lang-nursery/fmt-rfcs\n-[style guide]: https://github.com/rust-lang-nursery/fmt-rfcs/blob/master/guide/guide.md\n+[fmt rfcs]: https://github.com/rust-dev-tools/fmt-rfcs\n+[style guide]: https://github.com/rust-dev-tools/fmt-rfcs/blob/master/guide/guide.md"}, {"sha": "5ac99fd71f8f87efcf51346e7f8f3fda43dc9d76", "filename": "src/tools/rustfmt/appveyor.yml", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fappveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fappveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fappveyor.yml?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -1,55 +1,55 @@\n-# This is based on https://github.com/japaric/rust-everywhere/blob/master/appveyor.yml\r\n-# and modified (mainly removal of deployment) to suit rustfmt.\r\n-\r\n-environment:\r\n-  global:\r\n-    PROJECT_NAME: rustfmt\r\n-  matrix:\r\n-    # Stable channel\r\n-    # - TARGET: i686-pc-windows-gnu\r\n-    #   CHANNEL: stable\r\n-    # - TARGET: i686-pc-windows-msvc\r\n-    #   CHANNEL: stable\r\n-    # - TARGET: x86_64-pc-windows-gnu\r\n-    #   CHANNEL: stable\r\n-    # - TARGET: x86_64-pc-windows-msvc\r\n-    #   CHANNEL: stable\r\n-    # Beta channel\r\n-    # - TARGET: i686-pc-windows-gnu\r\n-    #   CHANNEL: beta\r\n-    # - TARGET: i686-pc-windows-msvc\r\n-    #   CHANNEL: beta\r\n-    # - TARGET: x86_64-pc-windows-gnu\r\n-    #   CHANNEL: beta\r\n-    # - TARGET: x86_64-pc-windows-msvc\r\n-    #   CHANNEL: beta\r\n-    # Nightly channel\r\n-    - TARGET: i686-pc-windows-gnu\r\n-      CHANNEL: nightly\r\n-    - TARGET: i686-pc-windows-msvc\r\n-      CHANNEL: nightly\r\n-    - TARGET: x86_64-pc-windows-gnu\r\n-      CHANNEL: nightly\r\n-    - TARGET: x86_64-pc-windows-msvc\r\n-      CHANNEL: nightly\r\n-\r\n-# Install Rust and Cargo\r\n-# (Based on from https://github.com/rust-lang/libc/blob/master/appveyor.yml)\r\n-install:\r\n-  - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe\r\n-  - if \"%TARGET%\" == \"i686-pc-windows-gnu\" set PATH=%PATH%;C:\\msys64\\mingw32\\bin\r\n-  - if \"%TARGET%\" == \"x86_64-pc-windows-gnu\" set PATH=%PATH%;C:\\msys64\\mingw64\\bin\r\n-  - set PATH=%PATH%;C:\\Users\\appveyor\\.cargo\\bin\r\n-  - rustup-init.exe --default-host %TARGET% --default-toolchain %CHANNEL% -y\r\n-  - rustc -Vv\r\n-  - cargo -V\r\n-\r\n-# ???\r\n-build: false\r\n-\r\n-test_script:\r\n-  - set CFG_RELEASE_CHANNEL=nightly\r\n-  - set CFG_RELEASE=nightly\r\n-  - cargo build --verbose\r\n-  - cargo test\r\n-  - cargo test -- --ignored\r\n+# This is based on https://github.com/japaric/rust-everywhere/blob/master/appveyor.yml\n+# and modified (mainly removal of deployment) to suit rustfmt.\n+\n+environment:\n+  global:\n+    PROJECT_NAME: rustfmt\n+  matrix:\n+    # Stable channel\n+    # - TARGET: i686-pc-windows-gnu\n+    #   CHANNEL: stable\n+    # - TARGET: i686-pc-windows-msvc\n+    #   CHANNEL: stable\n+    # - TARGET: x86_64-pc-windows-gnu\n+    #   CHANNEL: stable\n+    # - TARGET: x86_64-pc-windows-msvc\n+    #   CHANNEL: stable\n+    # Beta channel\n+    # - TARGET: i686-pc-windows-gnu\n+    #   CHANNEL: beta\n+    # - TARGET: i686-pc-windows-msvc\n+    #   CHANNEL: beta\n+    # - TARGET: x86_64-pc-windows-gnu\n+    #   CHANNEL: beta\n+    # - TARGET: x86_64-pc-windows-msvc\n+    #   CHANNEL: beta\n+    # Nightly channel\n+    - TARGET: i686-pc-windows-gnu\n+      CHANNEL: nightly\n+    - TARGET: i686-pc-windows-msvc\n+      CHANNEL: nightly\n+    - TARGET: x86_64-pc-windows-gnu\n+      CHANNEL: nightly\n+    - TARGET: x86_64-pc-windows-msvc\n+      CHANNEL: nightly\n+\n+# Install Rust and Cargo\n+# (Based on from https://github.com/rust-lang/libc/blob/master/appveyor.yml)\n+install:\n+  - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe\n+  - if \"%TARGET%\" == \"i686-pc-windows-gnu\" set PATH=%PATH%;C:\\msys64\\mingw32\\bin\n+  - if \"%TARGET%\" == \"x86_64-pc-windows-gnu\" set PATH=%PATH%;C:\\msys64\\mingw64\\bin\n+  - set PATH=%PATH%;C:\\Users\\appveyor\\.cargo\\bin\n+  - rustup-init.exe --default-host %TARGET% --default-toolchain %CHANNEL% -y\n+  - rustc -Vv\n+  - cargo -V\n+\n+# ???\n+build: false\n+\n+test_script:\n+  - set CFG_RELEASE_CHANNEL=nightly\n+  - set CFG_RELEASE=nightly\n+  - cargo build --verbose\n+  - cargo test\n+  - cargo test -- --ignored"}, {"sha": "b0cd4464df8e5107f4e674ff8a6a403c9a01d5fe", "filename": "src/tools/rustfmt/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Frust-toolchain?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-05-13\"\n+channel = \"nightly-2021-07-23\"\n components = [\"rustc-dev\"]"}, {"sha": "315eb10a9dbc0eeb5f720949cf0b0d6b95d75f7a", "filename": "src/tools/rustfmt/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fattr.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -183,7 +183,7 @@ fn format_derive(\n     } else if let SeparatorTactic::Always = context.config.trailing_comma() {\n         // Retain the trailing comma.\n         result.push_str(&item_str);\n-    } else if item_str.ends_with(\",\") {\n+    } else if item_str.ends_with(',') {\n         // Remove the trailing comma.\n         result.push_str(&item_str[..item_str.len() - 1]);\n     } else {"}, {"sha": "4b4aa42d935960ab963b68fe172eb77f597cb6f5", "filename": "src/tools/rustfmt/src/bin/main.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fbin%2Fmain.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -178,12 +178,15 @@ fn make_opts() -> Options {\n     opts.optflag(\"v\", \"verbose\", \"Print verbose output\");\n     opts.optflag(\"q\", \"quiet\", \"Print less output\");\n     opts.optflag(\"V\", \"version\", \"Show version information\");\n-    opts.optflagopt(\n-        \"h\",\n-        \"help\",\n-        \"Show this message or help about a specific topic: `config` or `file-lines`\",\n-        \"=TOPIC\",\n-    );\n+    let help_topics = if is_nightly {\n+        \"`config` or `file-lines`\"\n+    } else {\n+        \"`config`\"\n+    };\n+    let mut help_topic_msg = \"Show this message or help about a specific topic: \".to_owned();\n+    help_topic_msg.push_str(help_topics);\n+\n+    opts.optflagopt(\"h\", \"help\", &help_topic_msg, \"=TOPIC\");\n \n     opts\n }\n@@ -437,7 +440,7 @@ fn determine_operation(matches: &Matches) -> Result<Operation, OperationError> {\n             return Ok(Operation::Help(HelpOp::None));\n         } else if topic == Some(\"config\".to_owned()) {\n             return Ok(Operation::Help(HelpOp::Config));\n-        } else if topic == Some(\"file-lines\".to_owned()) {\n+        } else if topic == Some(\"file-lines\".to_owned()) && is_nightly() {\n             return Ok(Operation::Help(HelpOp::FileLines));\n         } else {\n             return Err(OperationError::UnknownHelpTopic(topic.unwrap()));\n@@ -689,6 +692,7 @@ fn edition_from_edition_str(edition_str: &str) -> Result<Edition> {\n     match edition_str {\n         \"2015\" => Ok(Edition::Edition2015),\n         \"2018\" => Ok(Edition::Edition2018),\n+        \"2021\" => Ok(Edition::Edition2021),\n         _ => Err(format_err!(\"Invalid value for `--edition`\")),\n     }\n }"}, {"sha": "90ffad927e2c4dd861b7dba3291338072919f056", "filename": "src/tools/rustfmt/src/cargo-fmt/main.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fcargo-fmt%2Fmain.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -1,6 +1,7 @@\n // Inspired by Paul Woolcock's cargo-fmt (https://github.com/pwoolcoc/cargo-fmt/).\n \n #![deny(warnings)]\n+#![allow(clippy::match_like_matches_macro)]\n \n use std::cmp::Ordering;\n use std::collections::{BTreeMap, BTreeSet};\n@@ -405,8 +406,8 @@ fn get_targets_recursive(\n                 .packages\n                 .iter()\n                 .find(|p| p.name == dependency.name && p.source.is_none());\n-            let manifest_path = if dependency_package.is_some() {\n-                PathBuf::from(&dependency_package.unwrap().manifest_path)\n+            let manifest_path = if let Some(dep_pkg) = dependency_package {\n+                PathBuf::from(&dep_pkg.manifest_path)\n             } else {\n                 let mut package_manifest_path = PathBuf::from(&package.manifest_path);\n                 package_manifest_path.pop();"}, {"sha": "614638ea2abfbea7c4096c9cf5443bb7afe17041", "filename": "src/tools/rustfmt/src/chains.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -231,10 +231,7 @@ impl ChainItem {\n     }\n \n     fn is_comment(&self) -> bool {\n-        match self.kind {\n-            ChainItemKind::Comment(..) => true,\n-            _ => false,\n-        }\n+        matches!(self.kind, ChainItemKind::Comment(..))\n     }\n \n     fn rewrite_method_call("}, {"sha": "c9d46aef294a0df562df28960531048d9a431c66", "filename": "src/tools/rustfmt/src/closures.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -336,23 +336,23 @@ pub(crate) fn rewrite_last_closure(\n \n         // We force to use block for the body of the closure for certain kinds of expressions.\n         if is_block_closure_forced(context, body) {\n-            return rewrite_closure_with_block(body, &prefix, context, body_shape).and_then(\n+            return rewrite_closure_with_block(body, &prefix, context, body_shape).map(\n                 |body_str| {\n                     match fn_decl.output {\n                         ast::FnRetTy::Default(..) if body_str.lines().count() <= 7 => {\n                             // If the expression can fit in a single line, we need not force block\n                             // closure.  However, if the closure has a return type, then we must\n                             // keep the blocks.\n                             match rewrite_closure_expr(body, &prefix, context, shape) {\n-                                Some(ref single_line_body_str)\n+                                Some(single_line_body_str)\n                                     if !single_line_body_str.contains('\\n') =>\n                                 {\n-                                    Some(single_line_body_str.clone())\n+                                    single_line_body_str\n                                 }\n-                                _ => Some(body_str),\n+                                _ => body_str,\n                             }\n                         }\n-                        _ => Some(body_str),\n+                        _ => body_str,\n                     }\n                 },\n             );\n@@ -377,10 +377,7 @@ pub(crate) fn rewrite_last_closure(\n pub(crate) fn args_have_many_closure(args: &[OverflowableItem<'_>]) -> bool {\n     args.iter()\n         .filter_map(OverflowableItem::to_expr)\n-        .filter(|expr| match expr.kind {\n-            ast::ExprKind::Closure(..) => true,\n-            _ => false,\n-        })\n+        .filter(|expr| matches!(expr.kind, ast::ExprKind::Closure(..)))\n         .count()\n         > 1\n }"}, {"sha": "0f8118a408ec007efca529e03ffba4ff90aceeee", "filename": "src/tools/rustfmt/src/comment.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fcomment.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -67,10 +67,7 @@ impl<'a> CommentStyle<'a> {\n \n     /// Returns `true` if the commenting style is for documentation.\n     pub(crate) fn is_doc_comment(&self) -> bool {\n-        match *self {\n-            CommentStyle::TripleSlash | CommentStyle::Doc => true,\n-            _ => false,\n-        }\n+        matches!(*self, CommentStyle::TripleSlash | CommentStyle::Doc)\n     }\n \n     pub(crate) fn opener(&self) -> &'a str {\n@@ -689,8 +686,8 @@ impl<'a> CommentRewrite<'a> {\n \n         self.code_block_attr = None;\n         self.item_block = None;\n-        if line.starts_with(\"```\") {\n-            self.code_block_attr = Some(CodeBlockAttribute::new(&line[3..]))\n+        if let Some(stripped) = line.strip_prefix(\"```\") {\n+            self.code_block_attr = Some(CodeBlockAttribute::new(stripped))\n         } else if self.fmt.config.wrap_comments() && ItemizedBlock::is_itemized_line(&line) {\n             let ib = ItemizedBlock::new(&line);\n             self.item_block = Some(ib);\n@@ -948,8 +945,8 @@ fn left_trim_comment_line<'a>(line: &'a str, style: &CommentStyle<'_>) -> (&'a s\n     {\n         (&line[4..], true)\n     } else if let CommentStyle::Custom(opener) = *style {\n-        if line.starts_with(opener) {\n-            (&line[opener.len()..], true)\n+        if let Some(ref stripped) = line.strip_prefix(opener) {\n+            (stripped, true)\n         } else {\n             (&line[opener.trim_end().len()..], false)\n         }\n@@ -968,8 +965,8 @@ fn left_trim_comment_line<'a>(line: &'a str, style: &CommentStyle<'_>) -> (&'a s\n         || line.starts_with(\"**\")\n     {\n         (&line[2..], line.chars().nth(1).unwrap() == ' ')\n-    } else if line.starts_with('*') {\n-        (&line[1..], false)\n+    } else if let Some(stripped) = line.strip_prefix('*') {\n+        (stripped, false)\n     } else {\n         (line, line.starts_with(' '))\n     }\n@@ -1682,8 +1679,8 @@ impl<'a> Iterator for CommentReducer<'a> {\n fn remove_comment_header(comment: &str) -> &str {\n     if comment.starts_with(\"///\") || comment.starts_with(\"//!\") {\n         &comment[3..]\n-    } else if comment.starts_with(\"//\") {\n-        &comment[2..]\n+    } else if let Some(ref stripped) = comment.strip_prefix(\"//\") {\n+        stripped\n     } else if (comment.starts_with(\"/**\") && !comment.starts_with(\"/**/\"))\n         || comment.starts_with(\"/*!\")\n     {"}, {"sha": "7fc4486ddcd3df0a0850262b89ee48fdb87bbe96", "filename": "src/tools/rustfmt/src/config/config_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Fconfig_type.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -409,7 +409,7 @@ macro_rules! create_config {\n                 if self.was_set().merge_imports() {\n                     eprintln!(\n                         \"Warning: the `merge_imports` option is deprecated. \\\n-                        Use `imports_granularity=Crate` instead\"\n+                        Use `imports_granularity=\\\"Crate\\\"` instead\"\n                     );\n                     if !self.was_set().imports_granularity() {\n                         self.imports_granularity.2 = if self.merge_imports() {"}, {"sha": "4b799780d85d964e528246b4fe934e9da527ee84", "filename": "src/tools/rustfmt/src/config/file_lines.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Ffile_lines.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -305,7 +305,7 @@ impl str::FromStr for FileLines {\n         let mut m = HashMap::new();\n         for js in v {\n             let (s, r) = JsonSpan::into_tuple(js)?;\n-            m.entry(s).or_insert_with(|| vec![]).push(r);\n+            m.entry(s).or_insert_with(Vec::new).push(r);\n         }\n         Ok(FileLines::from_ranges(m))\n     }\n@@ -322,7 +322,7 @@ impl JsonSpan {\n     fn into_tuple(self) -> Result<(FileName, Range), FileLinesError> {\n         let (lo, hi) = self.range;\n         let canonical = canonicalize_path_string(&self.file)\n-            .ok_or_else(|| FileLinesError::CannotCanonicalize(self.file))?;\n+            .ok_or(FileLinesError::CannotCanonicalize(self.file))?;\n         Ok((canonical, Range::new(lo, hi)))\n     }\n }"}, {"sha": "c7feb502ea91e5786790aaf0c2f46d12eabd0207", "filename": "src/tools/rustfmt/src/config/license.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Flicense.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Flicense.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fconfig%2Flicense.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -3,7 +3,6 @@ use std::fs::File;\n use std::io;\n use std::io::Read;\n \n-use regex;\n use regex::Regex;\n \n #[derive(Debug)]"}, {"sha": "2fbbfedb566d13cbe1bb657685de4cd1fa6cd71e", "filename": "src/tools/rustfmt/src/emitter/diff.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fdiff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fdiff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Femitter%2Fdiff.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -45,7 +45,7 @@ impl Emitter for DiffEmitter {\n             return Ok(EmitterResult { has_diff: true });\n         }\n \n-        return Ok(EmitterResult { has_diff });\n+        Ok(EmitterResult { has_diff })\n     }\n }\n "}, {"sha": "6cfeb9977a966a4a1d2783662027f2a460826854", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -263,15 +263,12 @@ pub(crate) fn format_expr(\n             }\n \n             fn needs_space_after_range(rhs: &ast::Expr) -> bool {\n-                match rhs.kind {\n-                    // Don't format `.. ..` into `....`, which is invalid.\n-                    //\n-                    // This check is unnecessary for `lhs`, because a range\n-                    // starting from another range needs parentheses as `(x ..) ..`\n-                    // (`x .. ..` is a range from `x` to `..`).\n-                    ast::ExprKind::Range(None, _, _) => true,\n-                    _ => false,\n-                }\n+                // Don't format `.. ..` into `....`, which is invalid.\n+                //\n+                // This check is unnecessary for `lhs`, because a range\n+                // starting from another range needs parentheses as `(x ..) ..`\n+                // (`x .. ..` is a range from `x` to `..`).\n+                matches!(rhs.kind, ast::ExprKind::Range(None, _, _))\n             }\n \n             let default_sp_delim = |lhs: Option<&ast::Expr>, rhs: Option<&ast::Expr>| {\n@@ -531,7 +528,7 @@ pub(crate) fn rewrite_block_with_visitor(\n \n     let inner_attrs = attrs.map(inner_attributes);\n     let label_str = rewrite_label(label);\n-    visitor.visit_block(block, inner_attrs.as_ref().map(|a| &**a), has_braces);\n+    visitor.visit_block(block, inner_attrs.as_deref(), has_braces);\n     let visitor_context = visitor.get_context();\n     context\n         .skipped_range\n@@ -595,7 +592,7 @@ pub(crate) fn rewrite_cond(\n                 String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n             control_flow\n                 .rewrite_cond(context, shape, &alt_block_sep)\n-                .and_then(|rw| Some(rw.0))\n+                .map(|rw| rw.0)\n         }),\n     }\n }\n@@ -1157,18 +1154,11 @@ pub(crate) fn is_empty_block(\n }\n \n pub(crate) fn stmt_is_expr(stmt: &ast::Stmt) -> bool {\n-    match stmt.kind {\n-        ast::StmtKind::Expr(..) => true,\n-        _ => false,\n-    }\n+    matches!(stmt.kind, ast::StmtKind::Expr(..))\n }\n \n pub(crate) fn is_unsafe_block(block: &ast::Block) -> bool {\n-    if let ast::BlockCheckMode::Unsafe(..) = block.rules {\n-        true\n-    } else {\n-        false\n-    }\n+    matches!(block.rules, ast::BlockCheckMode::Unsafe(..))\n }\n \n pub(crate) fn rewrite_literal("}, {"sha": "97c4fc16d6f5d2aa382a41ff9a0e3f89dadb7580", "filename": "src/tools/rustfmt/src/formatting/newline_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fformatting%2Fnewline_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fformatting%2Fnewline_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fformatting%2Fnewline_style.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -77,7 +77,7 @@ fn convert_to_windows_newlines(formatted_text: &String) -> String {\n     transformed\n }\n \n-fn convert_to_unix_newlines(formatted_text: &String) -> String {\n+fn convert_to_unix_newlines(formatted_text: &str) -> String {\n     formatted_text.replace(WINDOWS_NEWLINE, UNIX_NEWLINE)\n }\n "}, {"sha": "64d78605f0c5f7be90d706fc43a40a25f2df57f5", "filename": "src/tools/rustfmt/src/imports.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fimports.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -374,7 +374,7 @@ impl UseTree {\n             UseTreeKind::Nested(ref list) => {\n                 // Extract comments between nested use items.\n                 // This needs to be done before sorting use items.\n-                let items: Vec<_> = itemize_list(\n+                let items = itemize_list(\n                     context.snippet_provider,\n                     list.iter().map(|(tree, _)| tree),\n                     \"}\",\n@@ -385,16 +385,16 @@ impl UseTree {\n                     context.snippet_provider.span_after(a.span, \"{\"),\n                     a.span.hi(),\n                     false,\n-                )\n-                .collect();\n+                );\n+\n                 // in case of a global path and the nested list starts at the root,\n                 // e.g., \"::{foo, bar}\"\n                 if a.prefix.segments.len() == 1 && leading_modsep {\n                     result.path.push(UseSegment::Ident(\"\".to_owned(), None));\n                 }\n                 result.path.push(UseSegment::List(\n                     list.iter()\n-                        .zip(items.into_iter())\n+                        .zip(items)\n                         .map(|(t, list_item)| {\n                             Self::from_ast(context, &t.0, Some(list_item), None, None, None)\n                         })\n@@ -466,11 +466,8 @@ impl UseTree {\n \n         // Normalise foo::self as bar -> foo as bar.\n         if let UseSegment::Slf(_) = last {\n-            match self.path.last() {\n-                Some(UseSegment::Ident(_, None)) => {\n-                    aliased_self = true;\n-                }\n-                _ => {}\n+            if let Some(UseSegment::Ident(_, None)) = self.path.last() {\n+                aliased_self = true;\n             }\n         }\n \n@@ -572,9 +569,8 @@ impl UseTree {\n         match self.path.clone().last().unwrap() {\n             UseSegment::List(list) => {\n                 if list.len() == 1 && list[0].path.len() == 1 {\n-                    match list[0].path[0] {\n-                        UseSegment::Slf(..) => return vec![self],\n-                        _ => (),\n+                    if let UseSegment::Slf(..) = list[0].path[0] {\n+                        return vec![self];\n                     };\n                 }\n                 let prefix = &self.path[..self.path.len() - 1];\n@@ -790,13 +786,9 @@ fn rewrite_nested_use_tree(\n         }\n     }\n     let has_nested_list = use_tree_list.iter().any(|use_segment| {\n-        use_segment\n-            .path\n-            .last()\n-            .map_or(false, |last_segment| match last_segment {\n-                UseSegment::List(..) => true,\n-                _ => false,\n-            })\n+        use_segment.path.last().map_or(false, |last_segment| {\n+            matches!(last_segment, UseSegment::List(..))\n+        })\n     });\n \n     let remaining_width = if has_nested_list {"}, {"sha": "33fb5522aeae53e757fd244592e9d90a678208fc", "filename": "src/tools/rustfmt/src/issues.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fissues.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -126,11 +126,7 @@ impl BadIssueSeeker {\n                     return Seeking::Number {\n                         issue: Issue {\n                             issue_type: IssueType::Todo,\n-                            missing_number: if let ReportTactic::Unnumbered = self.report_todo {\n-                                true\n-                            } else {\n-                                false\n-                            },\n+                            missing_number: matches!(self.report_todo, ReportTactic::Unnumbered),\n                         },\n                         part: NumberPart::OpenParen,\n                     };\n@@ -144,11 +140,7 @@ impl BadIssueSeeker {\n                     return Seeking::Number {\n                         issue: Issue {\n                             issue_type: IssueType::Fixme,\n-                            missing_number: if let ReportTactic::Unnumbered = self.report_fixme {\n-                                true\n-                            } else {\n-                                false\n-                            },\n+                            missing_number: matches!(self.report_fixme, ReportTactic::Unnumbered),\n                         },\n                         part: NumberPart::OpenParen,\n                     };\n@@ -196,7 +188,7 @@ impl BadIssueSeeker {\n                 }\n             }\n             NumberPart::Number => {\n-                if c >= '0' && c <= '9' {\n+                if ('0'..='9').contains(&c) {\n                     part = NumberPart::CloseParen;\n                 } else {\n                     return IssueClassification::Bad(issue);"}, {"sha": "0542358c6e7c5ebb40e15055364449df2caae79c", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -741,7 +741,7 @@ pub(crate) fn format_impl(\n                 // there is only one where-clause predicate\n                 // recover the suppressed comma in single line where_clause formatting\n                 if generics.where_clause.predicates.len() == 1 {\n-                    result.push_str(\",\");\n+                    result.push(',');\n                 }\n                 result.push_str(&format!(\"{}{{{}}}\", sep, sep));\n             } else {\n@@ -1207,7 +1207,7 @@ impl<'a> Rewrite for TraitAliasBounds<'a> {\n \n         let fits_single_line = !generic_bounds_str.contains('\\n')\n             && !where_str.contains('\\n')\n-            && generic_bounds_str.len() + where_str.len() + 1 <= shape.width;\n+            && generic_bounds_str.len() + where_str.len() < shape.width;\n         let space = if generic_bounds_str.is_empty() || where_str.is_empty() {\n             Cow::from(\"\")\n         } else if fits_single_line {\n@@ -1236,8 +1236,8 @@ pub(crate) fn format_trait_alias(\n     let lhs = format!(\"{}trait {} =\", vis_str, generics_str);\n     // 1 = \";\"\n     let trait_alias_bounds = TraitAliasBounds {\n-        generics,\n         generic_bounds,\n+        generics,\n     };\n     rewrite_assign_rhs(context, lhs, &trait_alias_bounds, shape.sub_width(1)?).map(|s| s + \";\")\n }\n@@ -1993,7 +1993,7 @@ impl Rewrite for ast::Param {\n             let num_attrs = self.attrs.len();\n             (\n                 mk_sp(self.attrs[num_attrs - 1].span.hi(), self.pat.span.lo()),\n-                param_attrs_result.contains(\"\\n\"),\n+                param_attrs_result.contains('\\n'),\n             )\n         } else {\n             (mk_sp(self.span.lo(), self.span.lo()), false)\n@@ -3265,22 +3265,16 @@ pub(crate) fn rewrite_extern_crate(\n \n /// Returns `true` for `mod foo;`, false for `mod foo { .. }`.\n pub(crate) fn is_mod_decl(item: &ast::Item) -> bool {\n-    match item.kind {\n-        ast::ItemKind::Mod(_, ast::ModKind::Loaded(_, ast::Inline::Yes, _)) => false,\n-        _ => true,\n-    }\n+    !matches!(\n+        item.kind,\n+        ast::ItemKind::Mod(_, ast::ModKind::Loaded(_, ast::Inline::Yes, _))\n+    )\n }\n \n pub(crate) fn is_use_item(item: &ast::Item) -> bool {\n-    match item.kind {\n-        ast::ItemKind::Use(_) => true,\n-        _ => false,\n-    }\n+    matches!(item.kind, ast::ItemKind::Use(_))\n }\n \n pub(crate) fn is_extern_crate(item: &ast::Item) -> bool {\n-    match item.kind {\n-        ast::ItemKind::ExternCrate(..) => true,\n-        _ => false,\n-    }\n+    matches!(item.kind, ast::ItemKind::ExternCrate(..))\n }"}, {"sha": "206d2f782909c9f0639398ce75044b7509ffdc49", "filename": "src/tools/rustfmt/src/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Flib.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -2,6 +2,7 @@\n #![deny(rust_2018_idioms)]\n #![warn(unreachable_pub)]\n #![recursion_limit = \"256\"]\n+#![allow(clippy::match_like_matches_macro)]\n \n #[macro_use]\n extern crate derive_new;\n@@ -30,7 +31,6 @@ use std::panic;\n use std::path::PathBuf;\n use std::rc::Rc;\n \n-use ignore;\n use rustc_ast::ast;\n use rustc_span::{symbol, DUMMY_SP};\n use thiserror::Error;\n@@ -149,10 +149,7 @@ pub enum ErrorKind {\n \n impl ErrorKind {\n     fn is_comment(&self) -> bool {\n-        match self {\n-            ErrorKind::LostComment => true,\n-            _ => false,\n-        }\n+        matches!(self, ErrorKind::LostComment)\n     }\n }\n "}, {"sha": "73e886c55637e1d01073409c361a0151349e85ab", "filename": "src/tools/rustfmt/src/lists.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Flists.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -194,10 +194,7 @@ impl ListItem {\n     // Returns `true` if the item causes something to be written.\n     fn is_substantial(&self) -> bool {\n         fn empty(s: &Option<String>) -> bool {\n-            match *s {\n-                Some(ref s) if !s.is_empty() => false,\n-                _ => true,\n-            }\n+            !matches!(*s, Some(ref s) if !s.is_empty())\n         }\n \n         !(empty(&self.pre_comment) && empty(&self.item) && empty(&self.post_comment))\n@@ -618,8 +615,8 @@ pub(crate) fn extract_post_comment(\n     let post_snippet = post_snippet[..comment_end].trim();\n     let post_snippet_trimmed = if post_snippet.starts_with(|c| c == ',' || c == ':') {\n         post_snippet[1..].trim_matches(white_space)\n-    } else if post_snippet.starts_with(separator) {\n-        post_snippet[separator.len()..].trim_matches(white_space)\n+    } else if let Some(stripped) = post_snippet.strip_prefix(separator) {\n+        stripped.trim_matches(white_space)\n     }\n     // not comment or over two lines\n     else if post_snippet.ends_with(',')\n@@ -823,7 +820,7 @@ where\n pub(crate) fn total_item_width(item: &ListItem) -> usize {\n     comment_len(item.pre_comment.as_ref().map(|x| &(*x)[..]))\n         + comment_len(item.post_comment.as_ref().map(|x| &(*x)[..]))\n-        + &item.item.as_ref().map_or(0, |s| unicode_str_width(&s))\n+        + item.item.as_ref().map_or(0, |s| unicode_str_width(&s))\n }\n \n fn comment_len(comment: Option<&str>) -> usize {"}, {"sha": "6c5e32716c017a61e12530f86826819fb693db83", "filename": "src/tools/rustfmt/src/macros.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -179,10 +179,10 @@ fn return_macro_parse_failure_fallback(\n         .lines()\n         .last()\n         .map(|closing_line| {\n-            closing_line.trim().chars().all(|ch| match ch {\n-                '}' | ')' | ']' => true,\n-                _ => false,\n-            })\n+            closing_line\n+                .trim()\n+                .chars()\n+                .all(|ch| matches!(ch, '}' | ')' | ']'))\n         })\n         .unwrap_or(false);\n     if is_like_block_indent_style {\n@@ -690,25 +690,22 @@ fn delim_token_to_str(\n \n impl MacroArgKind {\n     fn starts_with_brace(&self) -> bool {\n-        match *self {\n+        matches!(\n+            *self,\n             MacroArgKind::Repeat(DelimToken::Brace, _, _, _)\n-            | MacroArgKind::Delimited(DelimToken::Brace, _) => true,\n-            _ => false,\n-        }\n+                | MacroArgKind::Delimited(DelimToken::Brace, _)\n+        )\n     }\n \n     fn starts_with_dollar(&self) -> bool {\n-        match *self {\n-            MacroArgKind::Repeat(..) | MacroArgKind::MetaVariable(..) => true,\n-            _ => false,\n-        }\n+        matches!(\n+            *self,\n+            MacroArgKind::Repeat(..) | MacroArgKind::MetaVariable(..)\n+        )\n     }\n \n     fn ends_with_space(&self) -> bool {\n-        match *self {\n-            MacroArgKind::Separator(..) => true,\n-            _ => false,\n-        }\n+        matches!(*self, MacroArgKind::Separator(..))\n     }\n \n     fn has_meta_var(&self) -> bool {\n@@ -1162,10 +1159,10 @@ fn force_space_before(tok: &TokenKind) -> bool {\n }\n \n fn ident_like(tok: &Token) -> bool {\n-    match tok.kind {\n-        TokenKind::Ident(..) | TokenKind::Literal(..) | TokenKind::Lifetime(_) => true,\n-        _ => false,\n-    }\n+    matches!(\n+        tok.kind,\n+        TokenKind::Ident(..) | TokenKind::Literal(..) | TokenKind::Lifetime(_)\n+    )\n }\n \n fn next_space(tok: &TokenKind) -> SpaceState {\n@@ -1399,7 +1396,7 @@ impl MacroBranch {\n         // Undo our replacement of macro variables.\n         // FIXME: this could be *much* more efficient.\n         for (old, new) in &substs {\n-            if old_body.find(new).is_some() {\n+            if old_body.contains(new) {\n                 debug!(\"rewrite_macro_def: bailing matching variable: `{}`\", new);\n                 return None;\n             }"}, {"sha": "140ec226c02e5a072929ab318c477af93e2f5bb2", "filename": "src/tools/rustfmt/src/matches.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmatches.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -19,7 +19,7 @@ use crate::source_map::SpanUtils;\n use crate::spanned::Spanned;\n use crate::utils::{\n     contains_skip, extra_offset, first_line_width, inner_attributes, last_line_extendable, mk_sp,\n-    mk_sp_lo_plus_one, semicolon_for_expr, trimmed_last_line_width, unicode_str_width,\n+    semicolon_for_expr, trimmed_last_line_width, unicode_str_width,\n };\n \n /// A simple wrapper type against `ast::Arm`. Used inside `write_list()`.\n@@ -167,8 +167,9 @@ fn collect_beginning_verts(\n     arms.iter()\n         .map(|a| {\n             context\n-                .snippet_provider\n-                .opt_span_before(mk_sp_lo_plus_one(a.pat.span.lo()), \"|\")\n+                .snippet(a.pat.span)\n+                .starts_with(\"|\")\n+                .then(|| a.pat.span().lo())\n         })\n         .collect()\n }"}, {"sha": "263d840785a2953468f42a976058d8490c4a7f53", "filename": "src/tools/rustfmt/src/missed_spans.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmissed_spans.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -230,8 +230,7 @@ impl<'a> FmtVisitor<'a> {\n         let last_char = big_snippet\n             .chars()\n             .rev()\n-            .skip_while(|rev_c| [' ', '\\t'].contains(rev_c))\n-            .next();\n+            .find(|rev_c| ![' ', '\\t'].contains(rev_c));\n \n         let fix_indent = last_char.map_or(true, |rev_c| ['{', '\\n'].contains(&rev_c));\n         let mut on_same_line = false;\n@@ -262,7 +261,7 @@ impl<'a> FmtVisitor<'a> {\n         let comment_shape = Shape::legacy(comment_width, comment_indent);\n \n         if on_same_line {\n-            match subslice.find(\"\\n\") {\n+            match subslice.find('\\n') {\n                 None => {\n                     self.push_str(subslice);\n                 }\n@@ -299,8 +298,7 @@ impl<'a> FmtVisitor<'a> {\n             match snippet[status.line_start..]\n                 .chars()\n                 // skip trailing whitespaces\n-                .skip_while(|c| *c == ' ' || *c == '\\t')\n-                .next()\n+                .find(|c| !(*c == ' ' || *c == '\\t'))\n             {\n                 Some('\\n') | Some('\\r') => {\n                     if !is_last_comment_block(subslice) {"}, {"sha": "e32213467a51f8f2ee08053135a59e9c3c8c2c5a", "filename": "src/tools/rustfmt/src/overflow.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Foverflow.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -126,21 +126,19 @@ impl<'a> OverflowableItem<'a> {\n             OverflowableItem::MacroArg(MacroArg::Expr(expr)) => is_simple_expr(expr),\n             OverflowableItem::NestedMetaItem(nested_meta_item) => match nested_meta_item {\n                 ast::NestedMetaItem::Literal(..) => true,\n-                ast::NestedMetaItem::MetaItem(ref meta_item) => match meta_item.kind {\n-                    ast::MetaItemKind::Word => true,\n-                    _ => false,\n-                },\n+                ast::NestedMetaItem::MetaItem(ref meta_item) => {\n+                    matches!(meta_item.kind, ast::MetaItemKind::Word)\n+                }\n             },\n             _ => false,\n         }\n     }\n \n     pub(crate) fn is_expr(&self) -> bool {\n-        match self {\n-            OverflowableItem::Expr(..) => true,\n-            OverflowableItem::MacroArg(MacroArg::Expr(..)) => true,\n-            _ => false,\n-        }\n+        matches!(\n+            self,\n+            OverflowableItem::Expr(..) | OverflowableItem::MacroArg(MacroArg::Expr(..))\n+        )\n     }\n \n     pub(crate) fn is_nested_call(&self) -> bool {\n@@ -154,10 +152,7 @@ impl<'a> OverflowableItem<'a> {\n     pub(crate) fn to_expr(&self) -> Option<&'a ast::Expr> {\n         match self {\n             OverflowableItem::Expr(expr) => Some(expr),\n-            OverflowableItem::MacroArg(macro_arg) => match macro_arg {\n-                MacroArg::Expr(ref expr) => Some(expr),\n-                _ => None,\n-            },\n+            OverflowableItem::MacroArg(MacroArg::Expr(ref expr)) => Some(expr),\n             _ => None,\n         }\n     }\n@@ -178,10 +173,9 @@ impl<'a> OverflowableItem<'a> {\n                     ast::NestedMetaItem::MetaItem(..) => true,\n                 }\n             }\n-            OverflowableItem::SegmentParam(seg) => match seg {\n-                SegmentParam::Type(ty) => can_be_overflowed_type(context, ty, len),\n-                _ => false,\n-            },\n+            OverflowableItem::SegmentParam(SegmentParam::Type(ty)) => {\n+                can_be_overflowed_type(context, ty, len)\n+            }\n             OverflowableItem::TuplePatField(pat) => can_be_overflowed_pat(context, pat, len),\n             OverflowableItem::Ty(ty) => can_be_overflowed_type(context, ty, len),\n             _ => false,"}, {"sha": "062e9cef9bbd3382d0840de1ce984454daf3e139", "filename": "src/tools/rustfmt/src/patterns.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fpatterns.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -238,7 +238,7 @@ impl Rewrite for Pat {\n                         if let Some(rw) = p.rewrite(context, shape) {\n                             rw\n                         } else {\n-                            format!(\"{}\", context.snippet(p.span))\n+                            context.snippet(p.span).to_string()\n                         }\n                     })\n                     .collect();\n@@ -310,23 +310,22 @@ fn rewrite_struct_pat(\n         if fields_str.contains('\\n') || fields_str.len() > one_line_width {\n             // Add a missing trailing comma.\n             if context.config.trailing_comma() == SeparatorTactic::Never {\n-                fields_str.push_str(\",\");\n+                fields_str.push(',');\n             }\n-            fields_str.push_str(\"\\n\");\n+            fields_str.push('\\n');\n             fields_str.push_str(&nested_shape.indent.to_string(context.config));\n-            fields_str.push_str(\"..\");\n         } else {\n             if !fields_str.is_empty() {\n                 // there are preceding struct fields being matched on\n                 if tactic == DefinitiveListTactic::Vertical {\n                     // if the tactic is Vertical, write_list already added a trailing ,\n-                    fields_str.push_str(\" \");\n+                    fields_str.push(' ');\n                 } else {\n                     fields_str.push_str(\", \");\n                 }\n             }\n-            fields_str.push_str(\"..\");\n         }\n+        fields_str.push_str(\"..\");\n     }\n \n     // ast::Pat doesn't have attrs so use &[]\n@@ -411,10 +410,7 @@ impl<'a> Spanned for TuplePatField<'a> {\n impl<'a> TuplePatField<'a> {\n     fn is_dotdot(&self) -> bool {\n         match self {\n-            TuplePatField::Pat(pat) => match pat.kind {\n-                ast::PatKind::Rest => true,\n-                _ => false,\n-            },\n+            TuplePatField::Pat(pat) => matches!(pat.kind, ast::PatKind::Rest),\n             TuplePatField::Dotdot(_) => true,\n         }\n     }\n@@ -510,10 +506,11 @@ fn count_wildcard_suffix_len(\n     )\n     .collect();\n \n-    for item in items.iter().rev().take_while(|i| match i.item {\n-        Some(ref internal_string) if internal_string == \"_\" => true,\n-        _ => false,\n-    }) {\n+    for item in items\n+        .iter()\n+        .rev()\n+        .take_while(|i| matches!(i.item, Some(ref internal_string) if internal_string == \"_\"))\n+    {\n         suffix_len += 1;\n \n         if item.has_comment() {"}, {"sha": "a394ce07398efe24a80eeeec494af32f297b3e17", "filename": "src/tools/rustfmt/src/rustfmt_diff.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Frustfmt_diff.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -56,10 +56,7 @@ impl From<Vec<Mismatch>> for ModifiedLines {\n         let chunks = mismatches.into_iter().map(|mismatch| {\n             let lines = mismatch.lines.iter();\n             let num_removed = lines\n-                .filter(|line| match line {\n-                    DiffLine::Resulting(_) => true,\n-                    _ => false,\n-                })\n+                .filter(|line| matches!(line, DiffLine::Resulting(_)))\n                 .count();\n \n             let new_lines = mismatch.lines.into_iter().filter_map(|line| match line {\n@@ -94,7 +91,7 @@ impl fmt::Display for ModifiedLines {\n                 \"{} {} {}\",\n                 chunk.line_number_orig,\n                 chunk.lines_removed,\n-                chunk.lines.iter().count()\n+                chunk.lines.len()\n             )?;\n \n             for line in &chunk.lines {"}, {"sha": "0fdc097efc23fae6ce60d6faaa5a6461dc2aa1b0", "filename": "src/tools/rustfmt/src/skip.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fskip.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -32,8 +32,8 @@ impl SkipContext {\n     }\n }\n \n-static RUSTFMT: &'static str = \"rustfmt\";\n-static SKIP: &'static str = \"skip\";\n+static RUSTFMT: &str = \"rustfmt\";\n+static SKIP: &str = \"skip\";\n \n /// Say if you're playing with `rustfmt`'s skip attribute\n pub(crate) fn is_skip_attr(segments: &[ast::PathSegment]) -> bool {\n@@ -46,7 +46,7 @@ pub(crate) fn is_skip_attr(segments: &[ast::PathSegment]) -> bool {\n             segments[1].ident.to_string() == SKIP\n                 && [\"macros\", \"attributes\"]\n                     .iter()\n-                    .any(|&n| n == &pprust::path_segment_to_string(&segments[2]))\n+                    .any(|&n| n == pprust::path_segment_to_string(&segments[2]))\n         }\n         _ => false,\n     }"}, {"sha": "853336004d8b1a477c67d0adc75b792d5f1f9a05", "filename": "src/tools/rustfmt/src/source_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fsource_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fsource_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fsource_file.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::sync::Lrc;\n \n // Append a newline to the end of each file.\n pub(crate) fn append_newline(s: &mut String) {\n-    s.push_str(\"\\n\");\n+    s.push('\\n');\n }\n \n #[cfg(test)]"}, {"sha": "0cb9d817ca2d3dc7e1c36eeeb4ec57295bfa021c", "filename": "src/tools/rustfmt/src/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fstring.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -57,7 +57,7 @@ impl<'a> StringFormat<'a> {\n     /// This allows to fit more graphemes from the string on a line when\n     /// SnippetState::EndWithLineFeed.\n     fn max_width_without_indent(&self) -> Option<usize> {\n-        Some(self.config.max_width().checked_sub(self.line_end.len())?)\n+        self.config.max_width().checked_sub(self.line_end.len())\n     }\n }\n \n@@ -99,7 +99,7 @@ pub(crate) fn rewrite_string<'a>(\n                 if is_new_line(grapheme) {\n                     // take care of blank lines\n                     result = trim_end_but_line_feed(fmt.trim_end, result);\n-                    result.push_str(\"\\n\");\n+                    result.push('\\n');\n                     if !is_bareline_ok && cur_start + i + 1 < graphemes.len() {\n                         result.push_str(&indent_without_newline);\n                         result.push_str(fmt.line_start);"}, {"sha": "b5fe4335dd33dff97c682f1820ab14acd748dffc", "filename": "src/tools/rustfmt/src/syntux/parser.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fsyntux%2Fparser.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -79,7 +79,7 @@ impl<'a> ParserBuilder<'a> {\n                 rustc_span::FileName::Custom(\"stdin\".to_owned()),\n                 text,\n             )\n-            .map_err(|db| Some(db)),\n+            .map_err(Some),\n         }\n     }\n }\n@@ -196,8 +196,7 @@ impl<'a> Parser<'a> {\n         mac: &'a ast::MacCall,\n     ) -> Result<Vec<ast::Item>, &'static str> {\n         let token_stream = mac.args.inner_tokens();\n-        let mut parser =\n-            rustc_parse::stream_to_parser(sess.inner(), token_stream.clone(), Some(\"\"));\n+        let mut parser = rustc_parse::stream_to_parser(sess.inner(), token_stream, Some(\"\"));\n \n         let mut items = vec![];\n         let mut process_if_cfg = true;"}, {"sha": "c6f89c310650c93306adca00625e6e117f70bfcc", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -662,7 +662,7 @@ impl Rewrite for ast::Ty {\n                 let mut_str = format_mutability(mt.mutbl);\n                 let mut_len = mut_str.len();\n                 let mut result = String::with_capacity(128);\n-                result.push_str(\"&\");\n+                result.push('&');\n                 let ref_hi = context.snippet_provider.span_after(self.span(), \"&\");\n                 let mut cmnt_lo = ref_hi;\n \n@@ -685,7 +685,7 @@ impl Rewrite for ast::Ty {\n                     } else {\n                         result.push_str(&lt_str);\n                     }\n-                    result.push_str(\" \");\n+                    result.push(' ');\n                     cmnt_lo = lifetime.ident.span.hi();\n                 }\n \n@@ -1048,11 +1048,7 @@ fn join_bounds_inner(\n                     true,\n                 )\n                 .map(|v| (v, trailing_span, extendable)),\n-                _ => Some((\n-                    String::from(strs) + &trailing_str,\n-                    trailing_span,\n-                    extendable,\n-                )),\n+                _ => Some((strs + &trailing_str, trailing_span, extendable)),\n             }\n         },\n     )?;\n@@ -1089,10 +1085,7 @@ fn rewrite_lifetime_param(\n ) -> Option<String> {\n     let result = generic_params\n         .iter()\n-        .filter(|p| match p.kind {\n-            ast::GenericParamKind::Lifetime => true,\n-            _ => false,\n-        })\n+        .filter(|p| matches!(p.kind, ast::GenericParamKind::Lifetime))\n         .map(|lt| lt.rewrite(context, shape))\n         .collect::<Option<Vec<_>>>()?\n         .join(\", \");"}, {"sha": "06159a1b26e8698cdf0102b7c95514c7354e8ebc", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -191,7 +191,7 @@ pub(crate) fn outer_attributes(attrs: &[ast::Attribute]) -> Vec<ast::Attribute>\n \n #[inline]\n pub(crate) fn is_single_line(s: &str) -> bool {\n-    s.chars().find(|&c| c == '\\n').is_none()\n+    !s.chars().any(|c| c == '\\n')\n }\n \n #[inline]\n@@ -260,8 +260,7 @@ fn is_skip(meta_item: &MetaItem) -> bool {\n     match meta_item.kind {\n         MetaItemKind::Word => {\n             let path_str = pprust::path_to_string(&meta_item.path);\n-            path_str == &*skip_annotation().as_str()\n-                || path_str == &*depr_skip_annotation().as_str()\n+            path_str == *skip_annotation().as_str() || path_str == *depr_skip_annotation().as_str()\n         }\n         MetaItemKind::List(ref l) => {\n             meta_item.has_name(sym::cfg_attr) && l.len() == 2 && is_skip_nested(&l[1])"}, {"sha": "3f251bf7c16b30d31bed135f2030c671b3bdc52a", "filename": "src/tools/rustfmt/src/visitor.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -198,7 +198,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             let missing_span = self.next_span(hi);\n             let snippet = self.snippet(missing_span);\n             let len = CommentCodeSlices::new(snippet)\n-                .nth(0)\n+                .next()\n                 .and_then(|(kind, _, s)| {\n                     if kind == CodeCharKind::Normal {\n                         s.rfind('\\n')\n@@ -293,15 +293,15 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     }\n                     let span_in_between = mk_sp(last_hi, span.lo() + BytePos::from_usize(offset));\n                     let snippet_in_between = self.snippet(span_in_between);\n-                    let mut comment_on_same_line = !snippet_in_between.contains(\"\\n\");\n+                    let mut comment_on_same_line = !snippet_in_between.contains('\\n');\n \n                     let mut comment_shape =\n                         Shape::indented(self.block_indent, config).comment(config);\n                     if self.config.version() == Version::Two && comment_on_same_line {\n                         self.push_str(\" \");\n                         // put the first line of the comment on the same line as the\n                         // block's last line\n-                        match sub_slice.find(\"\\n\") {\n+                        match sub_slice.find('\\n') {\n                             None => {\n                                 self.push_str(&sub_slice);\n                             }\n@@ -764,7 +764,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 let hi = self.snippet_provider.span_before(search_span, \";\");\n                 let target_span = mk_sp(mac.span().lo(), hi + BytePos(1));\n                 let rewrite = rewrite.map(|rw| {\n-                    if !rw.ends_with(\";\") {\n+                    if !rw.ends_with(';') {\n                         format!(\"{};\", rw)\n                     } else {\n                         rw\n@@ -921,7 +921,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         !is_skip_attr(segments)\n     }\n \n-    fn walk_mod_items(&mut self, items: &Vec<rustc_ast::ptr::P<ast::Item>>) {\n+    fn walk_mod_items(&mut self, items: &[rustc_ast::ptr::P<ast::Item>]) {\n         self.visit_items_with_reordering(&ptr_vec_to_ref_vec(&items));\n     }\n \n@@ -953,10 +953,10 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             // break the Stability Guarantee\n             // N.B. This could be updated to utilize the version gates.\n             let include_next_empty = if stmts.len() > 1 {\n-                match (&stmts[0].as_ast_node().kind, &stmts[1].as_ast_node().kind) {\n-                    (ast::StmtKind::Item(_), ast::StmtKind::Empty) => true,\n-                    _ => false,\n-                }\n+                matches!(\n+                    (&stmts[0].as_ast_node().kind, &stmts[1].as_ast_node().kind),\n+                    (ast::StmtKind::Item(_), ast::StmtKind::Empty)\n+                )\n             } else {\n                 false\n             };"}, {"sha": "5486877bde1906dcdbf3b6cf7450a3ca16e0be47", "filename": "src/tools/rustfmt/tests/source/configs/match_arm_leading_pipes/preserve.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fmatch_arm_leading_pipes%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fmatch_arm_leading_pipes%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fconfigs%2Fmatch_arm_leading_pipes%2Fpreserve.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -26,3 +26,11 @@ fn bar() {\n         _ => {}\n     }\n }\n+\n+fn f(x: NonAscii) -> bool {\n+    match x {\n+      // foo\n+              |   \u00c9fgh => true,\n+        _ => false,\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "4775575842ab99dd1b85248709808ee2d5256d5f", "filename": "src/tools/rustfmt/tests/target/configs/match_arm_leading_pipes/preserve.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fmatch_arm_leading_pipes%2Fpreserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fmatch_arm_leading_pipes%2Fpreserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fconfigs%2Fmatch_arm_leading_pipes%2Fpreserve.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -25,3 +25,11 @@ fn bar() {\n         _ => {}\n     }\n }\n+\n+fn f(x: NonAscii) -> bool {\n+    match x {\n+        // foo\n+        | \u00c9fgh => true,\n+        _ => false,\n+    }\n+}"}, {"sha": "763a82c3231f14db2a1f5d0418342e1ef7f157b8", "filename": "src/tools/rustfmt/tests/target/issue_4868.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4868.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effea9a2a0d501db5722d507690a1a66236933bf/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4868.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue_4868.rs?ref=effea9a2a0d501db5722d507690a1a66236933bf", "patch": "@@ -0,0 +1,17 @@\n+enum NonAscii {\n+    Abcd,\n+    \u00c9fgh,\n+}\n+\n+use NonAscii::*;\n+\n+fn f(x: NonAscii) -> bool {\n+    match x {\n+        \u00c9fgh => true,\n+        _ => false,\n+    }\n+}\n+\n+fn main() {\n+    dbg!(f(Abcd));\n+}"}]}