{"sha": "58ab4a0064641ca5a27b0998ee7d0e33f9c677cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YWI0YTAwNjQ2NDFjYTVhMjdiMDk5OGVlN2QwZTMzZjljNjc3Y2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-29T00:17:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-29T17:29:00Z"}, "message": "rustc: Enable -f{function,data}-sections\n\nThe compiler has previously been producing binaries on the order of 1.8MB for\nhello world programs \"fn main() {}\". This is largely a result of the compilation\nmodel used by compiling entire libraries into a single object file and because\nstatic linking is favored by default.\n\nWhen linking, linkers will pull in the entire contents of an object file if any\nsymbol from the object file is used. This means that if any symbol from a rust\nlibrary is used, the entire library is pulled in unconditionally, regardless of\nwhether the library is used or not.\n\nTraditional C/C++ projects do not normally encounter these large executable\nproblems because their archives (rust's rlibs) are composed of many objects.\nBecause of this, linkers can eliminate entire objects from being in the final\nexecutable. With rustc, however, the linker does not have the opportunity to\nleave out entire object files.\n\nIn order to get similar benefits from dead code stripping at link time, this\ncommit enables the -ffunction-sections and -fdata-sections flags in LLVM, as\nwell as passing --gc-sections to the linker *by default*. This means that each\nfunction and each global will be placed into its own section, allowing the\nlinker to GC all unused functions and data symbols.\n\nBy enabling these flags, rust is able to generate much smaller binaries default.\nOn linux, a hello world binary went from 1.8MB to 597K (a 67% reduction in\nsize). The output size of dynamic libraries remained constant, but the output\nsize of rlibs increased, as seen below:\n\n    libarena         -  2.27% bigger (   292872 =>    299508)\n    libcollections   -  0.64% bigger (  6765884 =>   6809076)\n    libflate         -  0.83% bigger (   186516 =>    188060)\n    libfourcc        - 14.71% bigger (   307290 =>    352498)\n    libgetopts       -  4.42% bigger (   761468 =>    795102)\n    libglob          -  2.73% bigger (   899932 =>    924542)\n    libgreen         -  9.63% bigger (  1281718 =>   1405124)\n    libhexfloat      - 13.88% bigger (   333738 =>    380060)\n    liblibc          - 10.79% bigger (   551280 =>    610736)\n    liblog           - 10.93% bigger (   218208 =>    242060)\n    libnative        -  8.26% bigger (  1362096 =>   1474658)\n    libnum           -  2.34% bigger (  2583400 =>   2643916)\n    librand          -  1.72% bigger (  1608684 =>   1636394)\n    libregex         -  6.50% bigger (  1747768 =>   1861398)\n    librustc         -  4.21% bigger (151820192 => 158218924)\n    librustdoc       -  8.96% bigger ( 13142604 =>  14320544)\n    librustuv        -  4.13% bigger (  4366896 =>   4547304)\n    libsemver        -  2.66% bigger (   396166 =>    406686)\n    libserialize     -  1.91% bigger (  6878396 =>   7009822)\n    libstd           -  3.59% bigger ( 39485286 =>  40902218)\n    libsync          -  3.95% bigger (  1386390 =>   1441204)\n    libsyntax        -  4.96% bigger ( 35757202 =>  37530798)\n    libterm          - 13.99% bigger (   924580 =>   1053902)\n    libtest          -  6.04% bigger (  2455720 =>   2604092)\n    libtime          -  2.84% bigger (  1075708 =>   1106242)\n    liburl           -  6.53% bigger (   590458 =>    629004)\n    libuuid          -  4.63% bigger (   326350 =>    341466)\n    libworkcache     -  8.45% bigger (  1230702 =>   1334750)\n\nThis increase in size is a result of encoding many more section names into each\nobject file (rlib). These increases are moderate enough that this change seems\nworthwhile to me, due to the drastic improvements seen in the final artifacts.\nThe overall increase of the stage2 target folder (not the size of an install)\nwent from 337MB to 348MB (3% increase).\n\nAdditionally, linking is generally slower when executed with all these new\nsections plus the --gc-sections flag. The stage0 compiler takes 1.4s to link the\n`rustc` binary, where the stage1 compiler takes 1.9s to link the binary. Three\nmegabytes are shaved off the binary. I found this increase in link time to be\nacceptable relative to the benefits of code size gained.\n\nThis commit only enables --gc-sections for *executables*, not dynamic libraries.\nLLVM does all the heavy lifting when producing an object file for a dynamic\nlibrary, so there is little else for the linker to do (remember that we only\nhave one object file).\n\nI conducted similar experiments by putting a *module's* functions and data\nsymbols into its own section (granularity moved to a module level instead of a\nfunction/static level). The size benefits of a hello world were seen to be on\nthe order of 400K rather than 1.2MB. It seemed that enough benefit was gained\nusing ffunction-sections that this route was less desirable, despite the lesser\nincreases in binary rlib size.", "tree": {"sha": "415c260f4d5417bbc6b15c29238db6828482a514", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/415c260f4d5417bbc6b15c29238db6828482a514"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd", "html_url": "https://github.com/rust-lang/rust/commit/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1ad41b93d133aa4f3bda71475f8e41d9dfe704d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1ad41b93d133aa4f3bda71475f8e41d9dfe704d", "html_url": "https://github.com/rust-lang/rust/commit/a1ad41b93d133aa4f3bda71475f8e41d9dfe704d"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "3669ba0c2f5cc284a3c99715af71e645d3a87695", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=58ab4a0064641ca5a27b0998ee7d0e33f9c677cd", "patch": "@@ -152,6 +152,12 @@ pub mod write {\n                              (sess.targ_cfg.os == abi::OsMacos &&\n                               sess.targ_cfg.arch == abi::X86_64);\n \n+            // OSX has -dead_strip, which doesn't rely on ffunction_sections\n+            // FIXME(#13846) this should be enabled for windows\n+            let ffunction_sections = sess.targ_cfg.os != abi::OsMacos &&\n+                                     sess.targ_cfg.os != abi::OsWin32;\n+            let fdata_sections = ffunction_sections;\n+\n             let reloc_model = match sess.opts.cg.relocation_model.as_slice() {\n                 \"pic\" => lib::llvm::RelocPIC,\n                 \"static\" => lib::llvm::RelocStatic,\n@@ -173,9 +179,11 @@ pub mod write {\n                             lib::llvm::CodeModelDefault,\n                             reloc_model,\n                             opt_level,\n-                            true,\n+                            true /* EnableSegstk */,\n                             use_softfp,\n-                            no_fp_elim\n+                            no_fp_elim,\n+                            ffunction_sections,\n+                            fdata_sections,\n                         )\n                     })\n                 })\n@@ -1136,16 +1144,22 @@ fn link_args(sess: &Session,\n         args.push(\"-nodefaultlibs\".to_owned());\n     }\n \n+    // If we're building a dylib, we don't use --gc-sections because LLVM has\n+    // already done the best it can do, and we also don't want to eliminate the\n+    // metadata. If we're building an executable, however, --gc-sections drops\n+    // the size of hello world from 1.8MB to 597K, a 67% reduction.\n+    if !dylib && sess.targ_cfg.os != abi::OsMacos {\n+        args.push(\"-Wl,--gc-sections\".to_owned());\n+    }\n+\n     if sess.targ_cfg.os == abi::OsLinux {\n         // GNU-style linkers will use this to omit linking to libraries which\n         // don't actually fulfill any relocations, but only for libraries which\n         // follow this flag. Thus, use it before specifying libraries to link to.\n         args.push(\"-Wl,--as-needed\".to_owned());\n \n-        // GNU-style linkers support optimization with -O. --gc-sections\n-        // removes metadata and potentially other useful things, so don't\n-        // include it. GNU ld doesn't need a numeric argument, but other linkers\n-        // do.\n+        // GNU-style linkers support optimization with -O. GNU ld doesn't need a\n+        // numeric argument, but other linkers do.\n         if sess.opts.optimize == session::Default ||\n            sess.opts.optimize == session::Aggressive {\n             args.push(\"-Wl,-O1\".to_owned());"}, {"sha": "74e332a8db4562ce35cf3d7722f198d765cea31e", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=58ab4a0064641ca5a27b0998ee7d0e33f9c677cd", "patch": "@@ -1748,7 +1748,9 @@ pub mod llvm {\n                                            Level: CodeGenOptLevel,\n                                            EnableSegstk: bool,\n                                            UseSoftFP: bool,\n-                                           NoFramePointerElim: bool) -> TargetMachineRef;\n+                                           NoFramePointerElim: bool,\n+                                           FunctionSections: bool,\n+                                           DataSections: bool) -> TargetMachineRef;\n         pub fn LLVMRustDisposeTargetMachine(T: TargetMachineRef);\n         pub fn LLVMRustAddAnalysisPasses(T: TargetMachineRef,\n                                          PM: PassManagerRef,"}, {"sha": "1031f3c1570e98892444cc2a3d91d637ff565d21", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=58ab4a0064641ca5a27b0998ee7d0e33f9c677cd", "patch": "@@ -69,7 +69,9 @@ LLVMRustCreateTargetMachine(const char *triple,\n                             CodeGenOpt::Level OptLevel,\n                             bool EnableSegmentedStacks,\n                             bool UseSoftFloat,\n-                            bool NoFramePointerElim) {\n+                            bool NoFramePointerElim,\n+                            bool FunctionSections,\n+                            bool DataSections) {\n     std::string Error;\n     Triple Trip(Triple::normalize(triple));\n     const llvm::Target *TheTarget = TargetRegistry::lookupTarget(Trip.getTriple(),\n@@ -97,6 +99,8 @@ LLVMRustCreateTargetMachine(const char *triple,\n                                                        RM,\n                                                        CM,\n                                                        OptLevel);\n+    TM->setDataSections(DataSections);\n+    TM->setFunctionSections(FunctionSections);\n     return wrap(TM);\n }\n "}, {"sha": "bf6d63f2ca92fb631f6317a0293083d7507fbdd1", "filename": "src/test/debug-info/basic-types-globals-metadata.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Ftest%2Fdebug-info%2Fbasic-types-globals-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Ftest%2Fdebug-info%2Fbasic-types-globals-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types-globals-metadata.rs?ref=58ab4a0064641ca5a27b0998ee7d0e33f9c677cd", "patch": "@@ -66,6 +66,8 @@ static F64: f64 = 3.5;\n \n fn main() {\n     _zzz();\n+\n+    let a = (B, I, C, I8, I16, I32, I64, U, U8, U16, U32, U64, F32, F64);\n }\n \n fn _zzz() {()}"}, {"sha": "cdc3132ca60b258cb8b54167a510b2d4a1571e86", "filename": "src/test/debug-info/basic-types-globals.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Ftest%2Fdebug-info%2Fbasic-types-globals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Ftest%2Fdebug-info%2Fbasic-types-globals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types-globals.rs?ref=58ab4a0064641ca5a27b0998ee7d0e33f9c677cd", "patch": "@@ -70,6 +70,8 @@ static F64: f64 = 3.5;\n \n fn main() {\n     _zzz();\n+\n+    let a = (B, I, C, I8, I16, I32, I64, U, U8, U16, U32, U64, F32, F64);\n }\n \n fn _zzz() {()}"}, {"sha": "ae5d3a84b966a62354bca1cd5aa089bf4581d0a3", "filename": "src/test/debug-info/basic-types-metadata.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Ftest%2Fdebug-info%2Fbasic-types-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Ftest%2Fdebug-info%2Fbasic-types-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types-metadata.rs?ref=58ab4a0064641ca5a27b0998ee7d0e33f9c677cd", "patch": "@@ -67,6 +67,7 @@ fn main() {\n     let f32: f32 = 2.5;\n     let f64: f64 = 3.5;\n     _zzz();\n+    if 1 == 1 { _yyy(); }\n }\n \n fn _zzz() {()}"}, {"sha": "0a207881bd3b374fde6c9617952572567771876b", "filename": "src/test/debug-info/c-style-enum.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fc-style-enum.rs?ref=58ab4a0064641ca5a27b0998ee7d0e33f9c677cd", "patch": "@@ -121,6 +121,10 @@ fn main() {\n     };\n \n     zzz();\n+\n+    let a = SINGLE_VARIANT;\n+    let a = unsafe { AUTO_ONE };\n+    let a = unsafe { MANUAL_ONE };\n }\n \n fn zzz() {()}"}, {"sha": "51d9aa75e078eed7543e224b034b4c6a495e82a7", "filename": "src/test/debug-info/limited-debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Ftest%2Fdebug-info%2Flimited-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58ab4a0064641ca5a27b0998ee7d0e33f9c677cd/src%2Ftest%2Fdebug-info%2Flimited-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Flimited-debuginfo.rs?ref=58ab4a0064641ca5a27b0998ee7d0e33f9c677cd", "patch": "@@ -38,6 +38,7 @@ struct Struct {\n \n fn main() {\n     some_function(101, 202);\n+    some_other_function(1, 2);\n }\n \n "}]}