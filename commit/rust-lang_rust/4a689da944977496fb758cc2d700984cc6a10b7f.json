{"sha": "4a689da944977496fb758cc2d700984cc6a10b7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNjg5ZGE5NDQ5Nzc0OTZmYjc1OGNjMmQ3MDA5ODRjYzZhMTBiN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-14T05:23:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-14T05:23:45Z"}, "message": "Auto merge of #74313 - Manishearth:rollup-b55rn6t, r=Manishearth\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #73354 (Update RELEASES.md for 1.45.0)\n - #73852 (rustdoc: insert newlines between attributes)\n - #73867 (Document the union keyword)\n - #74046 (Fix caching issue when building tools.)\n - #74123 (clean up E0718 explanation)\n - #74147 (rustdoc: Allow linking from private items to private types)\n - #74285 (#71669: add ui, codegen tests for volatile + nearby int intrinsics)\n - #74286 (Added detailed error code explanation for issue E0688 in Rust compiler.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "a288820eaba278c687bb3f088e40c19ad999dd4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a288820eaba278c687bb3f088e40c19ad999dd4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a689da944977496fb758cc2d700984cc6a10b7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a689da944977496fb758cc2d700984cc6a10b7f", "html_url": "https://github.com/rust-lang/rust/commit/4a689da944977496fb758cc2d700984cc6a10b7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a689da944977496fb758cc2d700984cc6a10b7f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d09331e00b02f81c714b0c41ce3a38380dd36a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d09331e00b02f81c714b0c41ce3a38380dd36a2", "html_url": "https://github.com/rust-lang/rust/commit/9d09331e00b02f81c714b0c41ce3a38380dd36a2"}, {"sha": "9a1df31d5581811516874f24a2896ba682422bcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1df31d5581811516874f24a2896ba682422bcc", "html_url": "https://github.com/rust-lang/rust/commit/9a1df31d5581811516874f24a2896ba682422bcc"}], "stats": {"total": 520, "additions": 500, "deletions": 20}, "files": [{"sha": "977796c66132e938331b62bf88cc2bcbc3143611", "filename": "RELEASES.md", "status": "modified", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -1,3 +1,166 @@\n+Version 1.45.0 (2020-07-16)\n+==========================\n+\n+Language\n+--------\n+- [Out of range float to int conversions using `as` has been defined as a saturating\n+  conversion.][71269] This was previously undefined behaviour, but you can use the\n+   `{f64, f32}::to_int_unchecked` methods to continue using the current behaviour, which\n+   may be desirable in rare performance sensitive situations.\n+- [`mem::Discriminant<T>` now uses `T`'s discriminant type instead of always\n+  using `u64`.][70705]\n+- [Function like procedural macros can now be used in expression, pattern, and  statement\n+  positions.][68717] This means you can now use a function-like procedural macro\n+  anywhere you can use a declarative (`macro_rules!`) macro.\n+\n+Compiler\n+--------\n+- [You can now override individual target features through the `target-feature`\n+  flag.][72094] E.g. `-C target-feature=+avx2 -C target-feature=+fma` is now\n+  equivalent to `-C target-feature=+avx2,+fma`.\n+- [Added the `force-unwind-tables` flag.][69984] This option allows\n+  rustc to always generate unwind tables regardless of panic strategy.\n+- [Added the `embed-bitcode` flag.][71716] This codegen flag allows rustc\n+  to include LLVM bitcode into generated `rlib`s (this is on by default).\n+- [Added the `tiny` value to the `code-model` codegen flag.][72397]\n+- [Added tier 3 support\\* for the `mipsel-sony-psp` target.][72062]\n+- [Added tier 3 support for the `thumbv7a-uwp-windows-msvc` target.][72133]\n+\n+\\* Refer to Rust's [platform support page][forge-platform-support] for more\n+information on Rust's tiered platform support.\n+\n+\n+Libraries\n+---------\n+- [`net::{SocketAddr, SocketAddrV4, SocketAddrV6}` now implements `PartialOrd`\n+  and `Ord`.][72239]\n+- [`proc_macro::TokenStream` now implements `Default`.][72234]\n+- [You can now use `char` with\n+  `ops::{Range, RangeFrom, RangeFull, RangeInclusive, RangeTo}` to iterate over\n+  a range of codepoints.][72413] E.g.\n+  you can now write the following;\n+  ```rust\n+  for ch in 'a'..='z' {\n+      print!(\"{}\", ch);\n+  }\n+  println!();\n+  // Prints \"abcdefghijklmnopqrstuvwxyz\"\n+  ```\n+- [`OsString` now implements `FromStr`.][71662]\n+- [The `saturating_neg` method as been added to all signed integer primitive\n+  types, and the `saturating_abs` method has been added for all integer\n+  primitive types.][71886]\n+- [`Arc<T>`, `Rc<T>` now implement  `From<Cow<'_, T>>`, and `Box` now\n+  implements `From<Cow>` when `T` is `[T: Copy]`, `str`, `CStr`, `OsStr`,\n+  or `Path`.][71447]\n+- [`Box<[T]>` now implements `From<[T; N]>`.][71095]\n+- [`BitOr` and `BitOrAssign` are implemented for all `NonZero`\n+  integer types.][69813]\n+- [The `fetch_min`, and `fetch_max` methods have been added to all atomic\n+  integer types.][72324]\n+- [The `fetch_update` method has been added to all atomic integer types.][71843]\n+\n+Stabilized APIs\n+---------------\n+- [`Arc::as_ptr`]\n+- [`BTreeMap::remove_entry`]\n+- [`Rc::as_ptr`]\n+- [`rc::Weak::as_ptr`]\n+- [`rc::Weak::from_raw`]\n+- [`rc::Weak::into_raw`]\n+- [`str::strip_prefix`]\n+- [`str::strip_suffix`]\n+- [`sync::Weak::as_ptr`]\n+- [`sync::Weak::from_raw`]\n+- [`sync::Weak::into_raw`]\n+- [`char::UNICODE_VERSION`]\n+- [`Span::resolved_at`]\n+- [`Span::located_at`]\n+- [`Span::mixed_site`]\n+- [`unix::process::CommandExt::arg0`]\n+\n+Cargo\n+-----\n+\n+Misc\n+----\n+- [Rustdoc now supports strikethrough text in Markdown.][71928] E.g.\n+  `~~outdated information~~` becomes \"~~outdated information~~\".\n+- [Added an emoji to Rustdoc's deprecated API message.][72014]\n+\n+Compatibility Notes\n+-------------------\n+- [Trying to self initialize a static value (that is creating a value using\n+  itself) is unsound and now causes a compile error.][71140]\n+- [`{f32, f64}::powi` now returns a slightly different value on Windows.][73420]\n+  This is due to changes in LLVM's intrinsics which `{f32, f64}::powi` uses.\n+- [Rustdoc's CLI's extra error exit codes have been removed.][71900] These were\n+  previously undocumented and not intended for public use. Rustdoc still provides\n+  a non-zero exit code on errors.\n+\n+Internals Only\n+--------------\n+- [Make clippy a git subtree instead of a git submodule][70655]\n+- [Unify the undo log of all snapshot types][69464]\n+\n+[73420]: https://github.com/rust-lang/rust/issues/73420/\n+[72324]: https://github.com/rust-lang/rust/pull/72324/\n+[71843]: https://github.com/rust-lang/rust/pull/71843/\n+[71886]: https://github.com/rust-lang/rust/pull/71886/\n+[72234]: https://github.com/rust-lang/rust/pull/72234/\n+[72239]: https://github.com/rust-lang/rust/pull/72239/\n+[72397]: https://github.com/rust-lang/rust/pull/72397/\n+[72413]: https://github.com/rust-lang/rust/pull/72413/\n+[72014]: https://github.com/rust-lang/rust/pull/72014/\n+[72062]: https://github.com/rust-lang/rust/pull/72062/\n+[72094]: https://github.com/rust-lang/rust/pull/72094/\n+[72133]: https://github.com/rust-lang/rust/pull/72133/\n+[71900]: https://github.com/rust-lang/rust/pull/71900/\n+[71928]: https://github.com/rust-lang/rust/pull/71928/\n+[71662]: https://github.com/rust-lang/rust/pull/71662/\n+[71716]: https://github.com/rust-lang/rust/pull/71716/\n+[71447]: https://github.com/rust-lang/rust/pull/71447/\n+[71269]: https://github.com/rust-lang/rust/pull/71269/\n+[71095]: https://github.com/rust-lang/rust/pull/71095/\n+[71140]: https://github.com/rust-lang/rust/pull/71140/\n+[70655]: https://github.com/rust-lang/rust/pull/70655/\n+[70705]: https://github.com/rust-lang/rust/pull/70705/\n+[69984]: https://github.com/rust-lang/rust/pull/69984/\n+[69813]: https://github.com/rust-lang/rust/pull/69813/\n+[69464]: https://github.com/rust-lang/rust/pull/69464/\n+[68717]: https://github.com/rust-lang/rust/pull/68717/\n+[`Arc::as_ptr`]: https://doc.rust-lang.org/stable/std/sync/struct.Arc.html#method.as_ptr\n+[`BTreeMap::remove_entry`]: https://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html#method.remove_entry\n+[`Rc::as_ptr`]: https://doc.rust-lang.org/stable/std/rc/struct.Rc.html#method.as_ptr\n+[`rc::Weak::as_ptr`]: https://doc.rust-lang.org/stable/std/rc/struct.Weak.html#method.as_ptr\n+[`rc::Weak::from_raw`]: https://doc.rust-lang.org/stable/std/rc/struct.Weak.html#method.from_raw\n+[`rc::Weak::into_raw`]: https://doc.rust-lang.org/stable/std/rc/struct.Weak.html#method.into_raw\n+[`sync::Weak::as_ptr`]: https://doc.rust-lang.org/stable/std/sync/struct.Weak.html#method.as_ptr\n+[`sync::Weak::from_raw`]: https://doc.rust-lang.org/stable/std/sync/struct.Weak.html#method.from_raw\n+[`sync::Weak::into_raw`]: https://doc.rust-lang.org/stable/std/sync/struct.Weak.html#method.into_raw\n+[`str::strip_prefix`]: https://doc.rust-lang.org/stable/std/primitive.str.html#method.strip_prefix\n+[`str::strip_suffix`]: https://doc.rust-lang.org/stable/std/primitive.str.html#method.strip_suffix\n+[`char::UNICODE_VERSION`]: https://doc.rust-lang.org/stable/std/char/constant.UNICODE_VERSION.html\n+[`Span::resolved_at`]: https://doc.rust-lang.org/stable/proc_macro/struct.Span.html#method.resolved_at\n+[`Span::located_at`]: https://doc.rust-lang.org/stable/proc_macro/struct.Span.html#method.located_at\n+[`Span::mixed_site`]: https://doc.rust-lang.org/stable/proc_macro/struct.Span.html#method.mixed_site\n+[`unix::process::CommandExt::arg0`]: https://doc.rust-lang.org/std/os/unix/process/trait.CommandExt.html#tymethod.arg0\n+\n+\n+Version 1.44.1 (2020-06-18)\n+===========================\n+\n+* [rustfmt accepts rustfmt_skip in cfg_attr again.][73078]\n+* [Don't hash executable filenames on apple platforms, fixing backtraces.][cargo/8329]\n+* [Fix crashes when finding backtrace on macOS.][71397]\n+* [Clippy applies lint levels into different files.][clippy/5356]\n+\n+[71397]: https://github.com/rust-lang/rust/issues/71397\n+[73078]: https://github.com/rust-lang/rust/issues/73078\n+[cargo/8329]: https://github.com/rust-lang/cargo/pull/8329\n+[clippy/5356]: https://github.com/rust-lang/rust-clippy/issues/5356\n+\n+\n Version 1.44.0 (2020-06-04)\n ==========================\n "}, {"sha": "fd36cd9bd8bebf7d7b9744113df3b6ec6f93fc6e", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -76,6 +76,10 @@ fn main() {\n         cmd.env(\"RUST_BACKTRACE\", \"1\");\n     }\n \n+    if let Ok(lint_flags) = env::var(\"RUSTC_LINT_FLAGS\") {\n+        cmd.args(lint_flags.split_whitespace());\n+    }\n+\n     if target.is_some() {\n         // The stage0 compiler has a special sysroot distinct from what we\n         // actually downloaded, so we just always pass the `--sysroot` option,"}, {"sha": "557fb1aa550a5862b70910fd697b2978c3595d58", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -1130,22 +1130,32 @@ impl<'a> Builder<'a> {\n         cargo.env(\"RUSTC_VERBOSE\", self.verbosity.to_string());\n \n         if source_type == SourceType::InTree {\n+            let mut lint_flags = Vec::new();\n             // When extending this list, add the new lints to the RUSTFLAGS of the\n             // build_bootstrap function of src/bootstrap/bootstrap.py as well as\n             // some code doesn't go through this `rustc` wrapper.\n-            rustflags.arg(\"-Wrust_2018_idioms\");\n-            rustflags.arg(\"-Wunused_lifetimes\");\n+            lint_flags.push(\"-Wrust_2018_idioms\");\n+            lint_flags.push(\"-Wunused_lifetimes\");\n \n             if self.config.deny_warnings {\n-                rustflags.arg(\"-Dwarnings\");\n+                lint_flags.push(\"-Dwarnings\");\n             }\n \n             // FIXME(#58633) hide \"unused attribute\" errors in incremental\n             // builds of the standard library, as the underlying checks are\n             // not yet properly integrated with incremental recompilation.\n             if mode == Mode::Std && compiler.stage == 0 && self.config.incremental {\n-                rustflags.arg(\"-Aunused-attributes\");\n+                lint_flags.push(\"-Aunused-attributes\");\n             }\n+            // This does not use RUSTFLAGS due to caching issues with Cargo.\n+            // Clippy is treated as an \"in tree\" tool, but shares the same\n+            // cache as other \"submodule\" tools. With these options set in\n+            // RUSTFLAGS, that causes *every* shared dependency to be rebuilt.\n+            // By injecting this into the rustc wrapper, this circumvents\n+            // Cargo's fingerprint detection. This is fine because lint flags\n+            // are always ignored in dependencies. Eventually this should be\n+            // fixed via better support from Cargo.\n+            cargo.env(\"RUSTC_LINT_FLAGS\", lint_flags.join(\" \"));\n         }\n \n         if let Mode::Rustc | Mode::Codegen = mode {"}, {"sha": "136230d52d975d324f4988e816d4f10cb3e56cf4", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -383,6 +383,7 @@ E0669: include_str!(\"./error_codes/E0669.md\"),\n E0670: include_str!(\"./error_codes/E0670.md\"),\n E0671: include_str!(\"./error_codes/E0671.md\"),\n E0687: include_str!(\"./error_codes/E0687.md\"),\n+E0688: include_str!(\"./error_codes/E0688.md\"),\n E0689: include_str!(\"./error_codes/E0689.md\"),\n E0690: include_str!(\"./error_codes/E0690.md\"),\n E0691: include_str!(\"./error_codes/E0691.md\"),\n@@ -616,7 +617,6 @@ E0768: include_str!(\"./error_codes/E0768.md\"),\n     E0640, // infer outlives requirements\n //  E0645, // trait aliases not finished\n     E0667, // `impl Trait` in projections\n-    E0688, // in-band lifetimes cannot be mixed with explicit lifetime binders\n //  E0694, // an unknown tool name found in scoped attributes\n //  E0702, // replaced with a generic attribute input check\n //  E0707, // multiple elided lifetimes used in arguments of `async fn`"}, {"sha": "db50f490208f4afa3f28a3069095968474fa923b", "filename": "src/librustc_error_codes/error_codes/E0688.md", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0688.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0688.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0688.md?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -0,0 +1,36 @@\n+In-band lifetimes were mixed with explicit lifetime binders.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0688\n+#![feature(in_band_lifetimes)]\n+\n+fn foo<'a>(x: &'a u32, y: &'b u32) {}   // error!\n+\n+struct Foo<'a> { x: &'a u32 }\n+\n+impl Foo<'a> {\n+    fn bar<'b>(x: &'a u32, y: &'b u32, z: &'c u32) {}   // error!\n+}\n+\n+impl<'b> Foo<'a> {  // error!\n+    fn baz() {}\n+}\n+```\n+\n+In-band lifetimes cannot be mixed with explicit lifetime binders.\n+For example:\n+\n+```\n+fn foo<'a, 'b>(x: &'a u32, y: &'b u32) {}   // ok!\n+\n+struct Foo<'a> { x: &'a u32 }\n+\n+impl<'a> Foo<'a> {\n+    fn bar<'b,'c>(x: &'a u32, y: &'b u32, z: &'c u32) {}    // ok!\n+}\n+\n+impl<'a> Foo<'a> {  // ok!\n+    fn baz() {}\n+}\n+```"}, {"sha": "1fe62ecf1f4e007e69d473f3b6ddaa8fd4a21668", "filename": "src/librustc_error_codes/error_codes/E0718.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0718.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0718.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0718.md?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -1,7 +1,6 @@\n-This error indicates that a `#[lang = \"..\"]` attribute was placed\n-on the wrong type of item.\n+A `#[lang = \"..\"]` attribute was placed on the wrong item type.\n \n-Examples of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0718\n #![feature(lang_items)]"}, {"sha": "301896fd2c1ada0ae8aa85a9225f11f5d0de1401", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -42,6 +42,7 @@ use std::str;\n use std::string::ToString;\n use std::sync::Arc;\n \n+use itertools::Itertools;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::flock;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -3170,15 +3171,19 @@ const ALLOWED_ATTRIBUTES: &[Symbol] = &[\n //     bar: usize,\n // }\n fn render_attributes(w: &mut Buffer, it: &clean::Item, top: bool) {\n-    let mut attrs = String::new();\n-\n-    for attr in &it.attrs.other_attrs {\n-        if !ALLOWED_ATTRIBUTES.contains(&attr.name_or_empty()) {\n-            continue;\n-        }\n+    let attrs = it\n+        .attrs\n+        .other_attrs\n+        .iter()\n+        .filter_map(|attr| {\n+            if ALLOWED_ATTRIBUTES.contains(&attr.name_or_empty()) {\n+                Some(pprust::attribute_to_string(&attr))\n+            } else {\n+                None\n+            }\n+        })\n+        .join(\"\\n\");\n \n-        attrs.push_str(&pprust::attribute_to_string(&attr));\n-    }\n     if !attrs.is_empty() {\n         write!(\n             w,"}, {"sha": "f707c1a3e1a1086f8dd4de3430869a6927bb01cd", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -799,6 +799,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n \n                     let hir_id = self.cx.tcx.hir().as_local_hir_id(local);\n                     if !self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_id)\n+                        && (item.visibility == Visibility::Public)\n                         && !self.cx.render_options.document_private\n                     {\n                         let item_name = item.name.as_deref().unwrap_or(\"<unknown>\");"}, {"sha": "a53e7f5cf57aa15c2af6912db92921b7ceb91a5c", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -1732,8 +1732,72 @@ mod dyn_keyword {}\n //\n /// The [Rust equivalent of a C-style union][union].\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// A `union` looks like a [`struct`] in terms of declaration, but all of its\n+/// fields exist in the same memory, superimposed over one another. For instance,\n+/// if we wanted some bits in memory that we sometimes interpret as a `u32` and\n+/// sometimes as an `f32`, we could write:\n+///\n+/// ```rust\n+/// union IntOrFloat {\n+///     i: u32,\n+///     f: f32,\n+/// }\n+///\n+/// let mut u = IntOrFloat { f: 1.0 };\n+/// // Reading the fields of an union is always unsafe\n+/// assert_eq!(unsafe { u.i }, 1065353216);\n+/// // Updating through any of the field will modify all of them\n+/// u.i = 1073741824;\n+/// assert_eq!(unsafe { u.f }, 2.0);\n+/// ```\n+///\n+/// # Matching on unions\n+///\n+/// It is possible to use pattern matching on `union`s. A single field name must\n+/// be used and it must match the name of one of the `union`'s field.\n+/// Like reading from a `union`, pattern matching on a `union` requires `unsafe`.\n+///\n+/// ```rust\n+/// union IntOrFloat {\n+///     i: u32,\n+///     f: f32,\n+/// }\n+///\n+/// let u = IntOrFloat { f: 1.0 };\n+///\n+/// unsafe {\n+///     match u {\n+///         IntOrFloat { i: 10 } => println!(\"Found exactly ten!\"),\n+///         // Matching the field `f` provides an `f32`.\n+///         IntOrFloat { f } => println!(\"Found f = {} !\", f),\n+///     }\n+/// }\n+/// ```\n+///\n+/// # References to union fields\n+///\n+/// All fields in a `union` are all at the same place in memory which means\n+/// borrowing one borrows the entire `union`, for the same lifetime:\n+///\n+/// ```rust,compile_fail,E0502\n+/// union IntOrFloat {\n+///     i: u32,\n+///     f: f32,\n+/// }\n ///\n+/// let mut u = IntOrFloat { f: 1.0 };\n+///\n+/// let f = unsafe { &u.f };\n+/// // This will not compile because the field has already been borrowed, even\n+/// // if only immutably\n+/// let i = unsafe { &mut u.i };\n+///\n+/// *i = 10;\n+/// println!(\"f = {} and i = {}\", f, i);\n+/// ```\n+///\n+/// See the [Reference][union] for more informations on `union`s.\n+///\n+/// [`struct`]: keyword.struct.html\n /// [union]: ../reference/items/unions.html\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod union_keyword {}"}, {"sha": "520fe2f1886ebea54bd02293869c455da47f46ee", "filename": "src/test/codegen/intrinsics/nearby.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Fcodegen%2Fintrinsics%2Fnearby.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Fcodegen%2Fintrinsics%2Fnearby.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fintrinsics%2Fnearby.rs?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -0,0 +1,18 @@\n+#![crate_type = \"lib\"]\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics;\n+\n+// CHECK-LABEL: @nearbyintf32\n+#[no_mangle]\n+pub unsafe fn nearbyintf32(a: f32) -> f32 {\n+    // CHECK: llvm.nearbyint.f32\n+    intrinsics::nearbyintf32(a)\n+}\n+\n+// CHECK-LABEL: @nearbyintf64\n+#[no_mangle]\n+pub unsafe fn nearbyintf64(a: f64) -> f64 {\n+    // CHECK: llvm.nearbyint.f64\n+    intrinsics::nearbyintf64(a)\n+}"}, {"sha": "1970517e7326249069b1e5f3eff1ea4e012c20a0", "filename": "src/test/codegen/intrinsics/volatile.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Fcodegen%2Fintrinsics%2Fvolatile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Fcodegen%2Fintrinsics%2Fvolatile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fintrinsics%2Fvolatile.rs?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -0,0 +1,55 @@\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics;\n+\n+// CHECK-LABEL: @volatile_copy_memory\n+#[no_mangle]\n+pub unsafe fn volatile_copy_memory(a: *mut u8, b: *const u8) {\n+    // CHECK: llvm.memmove.p0i8.p0i8.{{\\w*(.*true)}}\n+    intrinsics::volatile_copy_memory(a, b, 1)\n+}\n+\n+// CHECK-LABEL: @volatile_copy_nonoverlapping_memory\n+#[no_mangle]\n+pub unsafe fn volatile_copy_nonoverlapping_memory(a: *mut u8, b: *const u8) {\n+    // CHECK: llvm.memcpy.p0i8.p0i8.{{\\w*(.*true)}}\n+    intrinsics::volatile_copy_nonoverlapping_memory(a, b, 1)\n+}\n+\n+// CHECK-LABEL: @volatile_set_memory\n+#[no_mangle]\n+pub unsafe fn volatile_set_memory(a: *mut u8, b: u8) {\n+    // CHECK: llvm.memset.p0i8.{{\\w*(.*true)}}\n+    intrinsics::volatile_set_memory(a, b, 1)\n+}\n+\n+// CHECK-LABEL: @volatile_load\n+#[no_mangle]\n+pub unsafe fn volatile_load(a: *const u8) -> u8 {\n+    // CHECK: load volatile\n+    intrinsics::volatile_load(a)\n+}\n+\n+// CHECK-LABEL: @volatile_store\n+#[no_mangle]\n+pub unsafe fn volatile_store(a: *mut u8, b: u8) {\n+    // CHECK: store volatile\n+    intrinsics::volatile_store(a, b)\n+}\n+\n+// CHECK-LABEL: @unaligned_volatile_load\n+#[no_mangle]\n+pub unsafe fn unaligned_volatile_load(a: *const u8) -> u8 {\n+    // CHECK: load volatile\n+    intrinsics::unaligned_volatile_load(a)\n+}\n+\n+// CHECK-LABEL: @unaligned_volatile_store\n+#[no_mangle]\n+pub unsafe fn unaligned_volatile_store(a: *mut u8, b: u8) {\n+    // CHECK: store volatile\n+    intrinsics::unaligned_volatile_store(a, b)\n+}"}, {"sha": "29331219ba6ee121e5a6273f332dad98f93ffd41", "filename": "src/test/codegen/intrinsics/volatile_order.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Fcodegen%2Fintrinsics%2Fvolatile_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Fcodegen%2Fintrinsics%2Fvolatile_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fintrinsics%2Fvolatile_order.rs?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -0,0 +1,18 @@\n+#![crate_type = \"lib\"]\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::*;\n+\n+pub unsafe fn test_volatile_order() {\n+    let mut a: Box<u8> = Box::new(0);\n+    // CHECK: load volatile\n+    let x = volatile_load(&*a);\n+    // CHECK: load volatile\n+    let x = volatile_load(&*a);\n+    // CHECK: store volatile\n+    volatile_store(&mut *a, 12);\n+    // CHECK: store volatile\n+    unaligned_volatile_store(&mut *a, 12);\n+    // CHECK: llvm.memset.p0i8\n+    volatile_set_memory(&mut *a, 12, 1)\n+}"}, {"sha": "03f95f19d326e7b531896f9e2fa56e59de9f6343", "filename": "src/test/rustdoc-ui/issue-74134.public.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.public.stderr?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -0,0 +1,10 @@\n+warning: `[PrivateType]` public documentation for `public_item` links to a private item\n+  --> $DIR/issue-74134.rs:19:10\n+   |\n+LL |     /// [`PrivateType`]\n+   |          ^^^^^^^^^^^^^ this item is private\n+   |\n+   = note: `#[warn(intra_doc_link_resolution_failure)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "d561c2dd8901502736ab1001b06b3f671b65724f", "filename": "src/test/rustdoc-ui/issue-74134.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Frustdoc-ui%2Fissue-74134.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Frustdoc-ui%2Fissue-74134.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fissue-74134.rs?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -0,0 +1,41 @@\n+// revisions: public private\n+// [private]compile-flags: --document-private-items\n+// check-pass\n+\n+// There are 4 cases here:\n+// 1. public item  -> public type:  no warning\n+// 2. public item  -> private type: warning, if --document-private-items is not passed\n+// 3. private item -> public type:  no warning\n+// 4. private item -> private type: no warning\n+// All 4 cases are tested with and without --document-private-items.\n+//\n+// Case 4 without --document-private-items is the one described in issue #74134.\n+\n+struct PrivateType;\n+pub struct PublicType;\n+\n+pub struct Public {\n+    /// [`PublicType`]\n+    /// [`PrivateType`]\n+    //[public]~^ WARNING public documentation for `public_item` links to a private\n+    pub public_item: u32,\n+\n+    /// [`PublicType`]\n+    /// [`PrivateType`]\n+    private_item: u32,\n+}\n+\n+// The following cases are identical to the ones above, except that they are in a private\n+// module. Thus they all fall into cases 3 and 4 and should not produce a warning.\n+\n+mod private {\n+    pub struct Public {\n+        /// [`super::PublicType`]\n+        /// [`super::PrivateType`]\n+        pub public_item: u32,\n+\n+        /// [`super::PublicType`]\n+        /// [`super::PrivateType`]\n+        private_item: u32,\n+    }\n+}"}, {"sha": "54c5939f908d422eabe291add61f9ed2251d6774", "filename": "src/test/rustdoc/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Frustdoc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Frustdoc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fattributes.rs?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -8,8 +8,8 @@ pub extern \"C\" fn f() {}\n #[export_name = \"bar\"]\n pub extern \"C\" fn g() {}\n \n-// @has foo/enum.Foo.html '//*[@class=\"docblock attributes top-attr\"]' '#[repr(i64)]'\n-// @has foo/enum.Foo.html '//*[@class=\"docblock attributes top-attr\"]' '#[must_use]'\n+// @matches foo/enum.Foo.html '//*[@class=\"docblock attributes top-attr\"]' \\\n+//      '(?m)\\A#\\[repr\\(i64\\)\\]\\n#\\[must_use\\]\\Z'\n #[repr(i64)]\n #[must_use]\n pub enum Foo {"}, {"sha": "afefcd9fc2c66f4aab96001385a38445c3bc6259", "filename": "src/test/ui/in-band-lifetimes/E0688.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0688.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0688.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2FE0688.stderr?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -24,3 +24,4 @@ LL | impl<'b> Foo<'a> {\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0688`."}, {"sha": "7b1d1eeaadbd0d69fe6e314f2402901fcc790ee2", "filename": "src/test/ui/intrinsics/intrinsic-nearby.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-nearby.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-nearby.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-nearby.rs?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::*;\n+\n+fn main() {\n+    unsafe {\n+        assert_eq!(nearbyintf32(5.234f32), 5f32);\n+        assert_eq!(nearbyintf64(6.777f64), 7f64);\n+    }\n+}"}, {"sha": "7b2c825a2084b400ca062abf6b33d622b322fbb9", "filename": "src/test/ui/intrinsics/intrinsic-volatile.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-volatile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a689da944977496fb758cc2d700984cc6a10b7f/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-volatile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsic-volatile.rs?ref=4a689da944977496fb758cc2d700984cc6a10b7f", "patch": "@@ -0,0 +1,44 @@\n+// run-pass\n+\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics::*;\n+\n+pub fn main() {\n+    unsafe {\n+        let mut x: Box<u8> = Box::new(0);\n+        let mut y: Box<u8> = Box::new(0);\n+\n+        // test volatile load\n+        assert_eq!(volatile_load(&*x), 0);\n+        *x = 1;\n+        assert_eq!(volatile_load(&*x), 1);\n+\n+        // test volatile store\n+        volatile_store(&mut *x, 2);\n+        assert_eq!(*x, 2);\n+\n+        // test volatile copy memory\n+        volatile_copy_memory(&mut *y, &*x, 1);\n+        assert_eq!(*y, 2);\n+\n+        // test volatile copy non-overlapping memory\n+        *x = 3;\n+        volatile_copy_nonoverlapping_memory(&mut *y, &*x, 1);\n+        assert_eq!(*y, 3);\n+\n+        // test volatile set memory\n+        volatile_set_memory(&mut *x, 4, 1);\n+        assert_eq!(*x, 4);\n+\n+        // test unaligned volatile load\n+        let arr: [u8; 3] = [1, 2, 3];\n+        let ptr = arr[1..].as_ptr() as *const u16;\n+        assert_eq!(unaligned_volatile_load(ptr), u16::from_ne_bytes([arr[1], arr[2]]));\n+\n+        // test unaligned volatile store\n+        let ptr = arr[1..].as_ptr() as *mut u16;\n+        unaligned_volatile_store(ptr, 0);\n+        assert_eq!(arr, [1, 0, 0]);\n+    }\n+}"}]}