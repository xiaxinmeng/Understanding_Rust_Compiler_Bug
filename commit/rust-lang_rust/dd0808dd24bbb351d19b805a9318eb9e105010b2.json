{"sha": "dd0808dd24bbb351d19b805a9318eb9e105010b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMDgwOGRkMjRiYmIzNTFkMTliODA1YTkzMThlYjllMTA1MDEwYjI=", "commit": {"author": {"name": "dylan_DPC", "email": "dylan.dpc@gmail.com", "date": "2018-04-07T10:20:36Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-07-17T16:33:41Z"}, "message": "added function to check if lints belong to an external macro", "tree": {"sha": "5ea6bd01e7140e70e06eb9c28a26be03660d6d74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ea6bd01e7140e70e06eb9c28a26be03660d6d74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd0808dd24bbb351d19b805a9318eb9e105010b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd0808dd24bbb351d19b805a9318eb9e105010b2", "html_url": "https://github.com/rust-lang/rust/commit/dd0808dd24bbb351d19b805a9318eb9e105010b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd0808dd24bbb351d19b805a9318eb9e105010b2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bff385fdadb999f19afb7b1482df7863034d742", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bff385fdadb999f19afb7b1482df7863034d742", "html_url": "https://github.com/rust-lang/rust/commit/4bff385fdadb999f19afb7b1482df7863034d742"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "a5517e85d444241348e14964e84ac89d575bdd94", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dd0808dd24bbb351d19b805a9318eb9e105010b2/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd0808dd24bbb351d19b805a9318eb9e105010b2/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=dd0808dd24bbb351d19b805a9318eb9e105010b2", "patch": "@@ -29,7 +29,7 @@ use self::TargetLint::*;\n use std::slice;\n use rustc_data_structures::sync::{RwLock, ReadGuard};\n use lint::{EarlyLintPassObject, LateLintPassObject};\n-use lint::{Level, Lint, LintId, LintPass, LintBuffer};\n+use lint::{self, Level, Lint, LintId, LintPass, LintBuffer};\n use lint::builtin::BuiltinLintDiagnostics;\n use lint::levels::{LintLevelSets, LintLevelsBuilder};\n use middle::privacy::AccessLevels;\n@@ -468,7 +468,14 @@ pub trait LintContext<'tcx>: Sized {\n \n     /// Emit a lint at the appropriate level, for a particular span.\n     fn span_lint<S: Into<MultiSpan>>(&self, lint: &'static Lint, span: S, msg: &str) {\n-        self.lookup_and_emit(lint, Some(span), msg);\n+        match self.lints().future_incompatible(LintId::of(lint)) {\n+            Some(_) => self.lookup_and_emit(lint, Some(span), msg),\n+            None => {\n+                if !lint::in_external_macro(lint, span) {\n+                    self.lookup_and_emit(lint, Some(span), msg);\n+                }\n+            }\n+        }\n     }\n \n     fn struct_span_lint<S: Into<MultiSpan>>(&self,"}, {"sha": "62a39873e7694d8d1f5651a7a6ed545becb034ce", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dd0808dd24bbb351d19b805a9318eb9e105010b2/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd0808dd24bbb351d19b805a9318eb9e105010b2/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=dd0808dd24bbb351d19b805a9318eb9e105010b2", "patch": "@@ -54,6 +54,8 @@ pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         check_crate, check_ast_crate,\n                         FutureIncompatibleInfo, BufferedEarlyLint};\n \n+use codemap::{ExpnFormat, ExpnInfo, Span };\n+\n /// Specification of a single lint.\n #[derive(Copy, Clone, Debug)]\n pub struct Lint {\n@@ -669,3 +671,30 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'a, 'tcx> {\n pub fn provide(providers: &mut Providers) {\n     providers.lint_levels = lint_levels;\n }\n+\n+pub fn in_external_macro<'a, T: LintContext<'a>>(cx: &T, span: Span) -> bool {\n+    /// Invokes `in_macro` with the expansion info of the given span slightly\n+    /// heavy, try to use\n+    /// this after other checks have already happened.\n+    fn in_macro_ext<'a, T: LintContext<'a>>(cx: &T, info: &ExpnInfo) -> bool {\n+        // no ExpnInfo = no macro\n+        if let ExpnFormat::MacroAttribute(..) = info.callee.format {\n+            // these are all plugins\n+            return true;\n+        }\n+        // no span for the callee = external macro\n+        info.callee.span.map_or(true, |span| {\n+            // no snippet = external macro or compiler-builtin expansion\n+            cx.sess()\n+                .codemap()\n+                .span_to_snippet(span)\n+                .ok()\n+                .map_or(true, |code| !code.starts_with(\"macro_rules\"))\n+        })\n+    }\n+\n+    span.ctxt()\n+        .outer()\n+        .expn_info()\n+        .map_or(false, |info| in_macro_ext(cx, &info))\n+}"}, {"sha": "9e53cbfb3adbe70d911efc615cb9e700ce94e56e", "filename": "src/test/ui/in-band-lifetimes/ellided-lifetimes-macro-checks.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dd0808dd24bbb351d19b805a9318eb9e105010b2/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fellided-lifetimes-macro-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd0808dd24bbb351d19b805a9318eb9e105010b2/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fellided-lifetimes-macro-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fellided-lifetimes-macro-checks.rs?ref=dd0808dd24bbb351d19b805a9318eb9e105010b2", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(nll)]\n+#![deny(elided_lifetime_in_path)]\n+\n+fn main() {\n+    format!(\"foo {}\", 22)\n+}"}]}