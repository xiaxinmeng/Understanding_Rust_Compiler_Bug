{"sha": "e02c475da5c7d942cac2e3cf9683ea4117d4fe46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMmM0NzVkYTVjN2Q5NDJjYWMyZTNjZjk2ODNlYTQxMTdkNGZlNDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-16T00:47:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-16T00:47:45Z"}, "message": "Auto merge of #67339 - CAD97:rc-provenance, r=sfackler\n\nUse pointer offset instead of deref for A/Rc::into_raw\n\nInternals thread: https://internals.rust-lang.org/t/rc-and-internal-mutability/11463/2?u=cad97\n\nThe current implementation of (`A`)`Rc::into_raw` uses the `Deref::deref` implementation to get the pointer-to-data that is returned. This is problematic in the proposed Stacked Borrow rules, as this only gets shared provenance over the data location. (Note that the strong/weak counts are `UnsafeCell` (`Cell`/`Atomic`) so shared provenance can still mutate them, but the data itself is not.) When promoted back to a real reference counted pointer, the restored pointer can be used for mutation through `::get_mut` (if it is the only surviving reference). However, this mutates through a pointer ultimately derived from a `&T` borrow, violating the Stacked Borrow rules.\n\nThere are three known potential solutions to this issue:\n\n- Stacked Borrows is wrong, liballoc is correct.\n- Fully admit (`A`)`Rc` as an \"internal mutability\" type and store the data payload in an `UnsafeCell` like the strong/weak counts are. (Note: this is not needed generally since the `RcBox`/`ArcInner` is stored behind a shared `NonNull` which maintains shared write provenance as a raw pointer.)\n- Adjust `into_raw` to do direct manipulation of the pointer (like `from_raw`) so that it maintains write provenance and doesn't derive the pointer from a reference.\n\nThis PR implements the third option, as recommended by @RalfJung.\n\nPotential future work: provide `as_raw` and `clone_raw` associated functions to allow the [`&T` -> (`A`)`Rc<T>` pattern](https://internals.rust-lang.org/t/rc-and-internal-mutability/11463/2?u=cad97) to be used soundly without creating (`A`)`Rc` from references.", "tree": {"sha": "3d4c105ed7145390297374b92272aa1b63a90dee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d4c105ed7145390297374b92272aa1b63a90dee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e02c475da5c7d942cac2e3cf9683ea4117d4fe46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e02c475da5c7d942cac2e3cf9683ea4117d4fe46", "html_url": "https://github.com/rust-lang/rust/commit/e02c475da5c7d942cac2e3cf9683ea4117d4fe46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e02c475da5c7d942cac2e3cf9683ea4117d4fe46/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3291ae33907f2a866ea6cea89113200555038d06", "url": "https://api.github.com/repos/rust-lang/rust/commits/3291ae33907f2a866ea6cea89113200555038d06", "html_url": "https://github.com/rust-lang/rust/commit/3291ae33907f2a866ea6cea89113200555038d06"}, {"sha": "eb77f7ec6e9460c1ca70fbb7bb655f1a0a1bacfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb77f7ec6e9460c1ca70fbb7bb655f1a0a1bacfc", "html_url": "https://github.com/rust-lang/rust/commit/eb77f7ec6e9460c1ca70fbb7bb655f1a0a1bacfc"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "b176e0f6e2a6890b59ccbf2b484eb2aa634fc7d3", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e02c475da5c7d942cac2e3cf9683ea4117d4fe46/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02c475da5c7d942cac2e3cf9683ea4117d4fe46/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=e02c475da5c7d942cac2e3cf9683ea4117d4fe46", "patch": "@@ -565,9 +565,19 @@ impl<T: ?Sized> Rc<T> {\n     /// ```\n     #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n     pub fn into_raw(this: Self) -> *const T {\n-        let ptr: *const T = &*this;\n+        let ptr: *mut RcBox<T> = NonNull::as_ptr(this.ptr);\n+        let fake_ptr = ptr as *mut T;\n         mem::forget(this);\n-        ptr\n+\n+        // SAFETY: This cannot go through Deref::deref.\n+        // Instead, we manually offset the pointer rather than manifesting a reference.\n+        // This is so that the returned pointer retains the same provenance as our pointer.\n+        // This is required so that e.g. `get_mut` can write through the pointer\n+        // after the Rc is recovered through `from_raw`.\n+        unsafe {\n+            let offset = data_offset(&(*ptr).value);\n+            set_data_ptr(fake_ptr, (ptr as *mut u8).offset(offset))\n+        }\n     }\n \n     /// Constructs an `Rc` from a raw pointer."}, {"sha": "4aa0190b149c108fc35af8f9c897b1908e9b73ac", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e02c475da5c7d942cac2e3cf9683ea4117d4fe46/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02c475da5c7d942cac2e3cf9683ea4117d4fe46/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=e02c475da5c7d942cac2e3cf9683ea4117d4fe46", "patch": "@@ -545,9 +545,19 @@ impl<T: ?Sized> Arc<T> {\n     /// ```\n     #[stable(feature = \"rc_raw\", since = \"1.17.0\")]\n     pub fn into_raw(this: Self) -> *const T {\n-        let ptr: *const T = &*this;\n+        let ptr: *mut ArcInner<T> = NonNull::as_ptr(this.ptr);\n+        let fake_ptr = ptr as *mut T;\n         mem::forget(this);\n-        ptr\n+\n+        // SAFETY: This cannot go through Deref::deref.\n+        // Instead, we manually offset the pointer rather than manifesting a reference.\n+        // This is so that the returned pointer retains the same provenance as our pointer.\n+        // This is required so that e.g. `get_mut` can write through the pointer\n+        // after the Arc is recovered through `from_raw`.\n+        unsafe {\n+            let offset = data_offset(&(*ptr).data);\n+            set_data_ptr(fake_ptr, (ptr as *mut u8).offset(offset))\n+        }\n     }\n \n     /// Constructs an `Arc` from a raw pointer."}]}