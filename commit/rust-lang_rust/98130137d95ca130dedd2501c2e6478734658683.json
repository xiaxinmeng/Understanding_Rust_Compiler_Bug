{"sha": "98130137d95ca130dedd2501c2e6478734658683", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MTMwMTM3ZDk1Y2ExMzBkZWRkMjUwMWMyZTY0Nzg3MzQ2NTg2ODM=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-15T12:19:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-15T12:19:11Z"}, "message": "Rollup merge of #86478 - ehuss:future-incompat-test, r=oli-obk\n\nAdd -Zfuture-incompat-test to assist with testing future-incompat reports.\n\nThis adds a `-Zfuture-incompat-test` cli flag to assist with testing future-incompatible reports. This flag causes all lints to be treated as a future-incompatible lint, and will emit a report for them. This is being added so that Cargo's testsuite can reliably test the reporting infrastructure.  Right now, Cargo relies on using array_into_iter as a test subject. Since the breaking \"future incompatible\" lints are never intended to last forever, this means Cargo's testsuite would always need to keep changing to choose different lints (for example, #86330 proposed dropping that moniker for array_into_iter). With this flag, Cargo's tests can trigger any lint and check for the report.", "tree": {"sha": "5655f45c6314740fd1755dc63416fc54e86ae3e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5655f45c6314740fd1755dc63416fc54e86ae3e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98130137d95ca130dedd2501c2e6478734658683", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg8Ce/CRBK7hj4Ov3rIwAAq48IAEfsSiV7/8oknqElyzsvMC7C\n35zDB8NCqPZiyrOd5Bhqqs1uZ7d9Nk99w1RoAuUEulS2IQomKUDRCgo9vUVgAMw3\nFxUMCRraB9ASLvB7yewpHVEy3HHSVIkBs4P+o5XxUCLfDqLvQJ/EM+0oKbst8jmr\ngE9d+Mpmdo7WDdwRlLFovUVjFRZdlfwRYF1tpWfNNhPhHmGu/MPTUldDvaDqI0Q3\n9JMciKGn6E1c7U0NVQd+FH0YPqIpbjyOglBQBxZahM/EjFzKe/YW9+fyuBt21CfM\ncNmpMPVVzmeCejriaRi9vghDNQSFqBDDYqeXEZD2CiVbhvMmGShAgbi9MCALOx4=\n=h/97\n-----END PGP SIGNATURE-----\n", "payload": "tree 5655f45c6314740fd1755dc63416fc54e86ae3e0\nparent 10f335fed17fb0ccbf0da903cffc7fd1aa57ec1b\nparent 636fcacb447c65df4d5eda363218b979f11ce057\nauthor Yuki Okushi <jtitor@2k36.org> 1626351551 +0900\ncommitter GitHub <noreply@github.com> 1626351551 +0900\n\nRollup merge of #86478 - ehuss:future-incompat-test, r=oli-obk\n\nAdd -Zfuture-incompat-test to assist with testing future-incompat reports.\n\nThis adds a `-Zfuture-incompat-test` cli flag to assist with testing future-incompatible reports. This flag causes all lints to be treated as a future-incompatible lint, and will emit a report for them. This is being added so that Cargo's testsuite can reliably test the reporting infrastructure.  Right now, Cargo relies on using array_into_iter as a test subject. Since the breaking \"future incompatible\" lints are never intended to last forever, this means Cargo's testsuite would always need to keep changing to choose different lints (for example, #86330 proposed dropping that moniker for array_into_iter). With this flag, Cargo's tests can trigger any lint and check for the report.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98130137d95ca130dedd2501c2e6478734658683", "html_url": "https://github.com/rust-lang/rust/commit/98130137d95ca130dedd2501c2e6478734658683", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98130137d95ca130dedd2501c2e6478734658683/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f335fed17fb0ccbf0da903cffc7fd1aa57ec1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f335fed17fb0ccbf0da903cffc7fd1aa57ec1b", "html_url": "https://github.com/rust-lang/rust/commit/10f335fed17fb0ccbf0da903cffc7fd1aa57ec1b"}, {"sha": "636fcacb447c65df4d5eda363218b979f11ce057", "url": "https://api.github.com/repos/rust-lang/rust/commits/636fcacb447c65df4d5eda363218b979f11ce057", "html_url": "https://github.com/rust-lang/rust/commit/636fcacb447c65df4d5eda363218b979f11ce057"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "5a362a37f2bed3d69396aecbd8cadf5ca0c5f49c", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98130137d95ca130dedd2501c2e6478734658683/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98130137d95ca130dedd2501c2e6478734658683/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=98130137d95ca130dedd2501c2e6478734658683", "patch": "@@ -633,6 +633,7 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(dump_mir_graphviz, true);\n     untracked!(emit_future_incompat_report, true);\n     untracked!(emit_stack_sizes, true);\n+    untracked!(future_incompat_test, true);\n     untracked!(hir_stats, true);\n     untracked!(identify_regions, true);\n     untracked!(incremental_ignore_spans, true);"}, {"sha": "848e60fe1342ebcd8c1448d5c08eb5a28a2b00c0", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/98130137d95ca130dedd2501c2e6478734658683/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98130137d95ca130dedd2501c2e6478734658683/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=98130137d95ca130dedd2501c2e6478734658683", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n-    FutureIncompatibilityReason, FutureIncompatibleInfo, Level, Lint, LintId,\n+    FutureIncompatibilityReason, Level, Lint, LintId,\n };\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n@@ -223,12 +223,12 @@ pub fn struct_lint_level<'s, 'd>(\n         let lint_id = LintId::of(lint);\n         let future_incompatible = lint.future_incompatible;\n \n-        let has_future_breakage = matches!(\n-            future_incompatible,\n-            Some(FutureIncompatibleInfo {\n-                reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n-                ..\n-            })\n+        let has_future_breakage = future_incompatible.map_or(\n+            // Default allow lints trigger too often for testing.\n+            sess.opts.debugging_opts.future_incompat_test && lint.default_level != Level::Allow,\n+            |incompat| {\n+                matches!(incompat.reason, FutureIncompatibilityReason::FutureReleaseErrorReportNow)\n+            },\n         );\n \n         let mut err = match (level, span) {"}, {"sha": "474cd86f43bea8204b8c860e3b324c5f0cb2bea3", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98130137d95ca130dedd2501c2e6478734658683/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98130137d95ca130dedd2501c2e6478734658683/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=98130137d95ca130dedd2501c2e6478734658683", "patch": "@@ -1084,6 +1084,8 @@ options! {\n         \"set the optimization fuel quota for a crate\"),\n     function_sections: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"whether each function should go in its own section\"),\n+    future_incompat_test: bool = (false, parse_bool, [UNTRACKED],\n+        \"forces all lints to be future incompatible, used for internal testing (default: no)\"),\n     gcc_ld: Option<LdImpl> = (None, parse_gcc_ld, [TRACKED], \"implementation of ld used by cc\"),\n     graphviz_dark_mode: bool = (false, parse_bool, [UNTRACKED],\n         \"use dark-themed colors in graphviz output (default: no)\"),"}, {"sha": "ce8c118dab2426de9ad8c22488234ad297bbe8e9", "filename": "src/test/ui/lint/future-incompat-test.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98130137d95ca130dedd2501c2e6478734658683/src%2Ftest%2Fui%2Flint%2Ffuture-incompat-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98130137d95ca130dedd2501c2e6478734658683/src%2Ftest%2Fui%2Flint%2Ffuture-incompat-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffuture-incompat-test.rs?ref=98130137d95ca130dedd2501c2e6478734658683", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Zfuture-incompat-test -Zemit-future-incompat-report\n+// check-pass\n+\n+// The `-Zfuture-incompat-test flag causes any normal warning to be included\n+// in the future-incompatible report. The stderr output here should mention\n+// the future incompatible report (as extracted by compiletest).\n+\n+fn main() {\n+    let x = 1;\n+}"}, {"sha": "52674a843847dfb8489b95c0fa269e254226ac00", "filename": "src/test/ui/lint/future-incompat-test.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/98130137d95ca130dedd2501c2e6478734658683/src%2Ftest%2Fui%2Flint%2Ffuture-incompat-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98130137d95ca130dedd2501c2e6478734658683/src%2Ftest%2Fui%2Flint%2Ffuture-incompat-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffuture-incompat-test.stderr?ref=98130137d95ca130dedd2501c2e6478734658683", "patch": "@@ -0,0 +1,9 @@\n+Future incompatibility report: Future breakage diagnostic:\n+warning: unused variable: `x`\n+  --> $DIR/future-incompat-test.rs:9:9\n+   |\n+LL |     let x = 1;\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n+   |\n+   = note: `-A unused-variables` implied by `-A unused`\n+"}, {"sha": "070b066721350956fb1c3fa83d6c3add1b43988f", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98130137d95ca130dedd2501c2e6478734658683/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98130137d95ca130dedd2501c2e6478734658683/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr?ref=98130137d95ca130dedd2501c2e6478734658683", "patch": "@@ -81,7 +81,7 @@ LL |     tuple_from_req!(Foo);\n \n warning: 5 warnings emitted\n \n-Future incompatibility report: Future breakage date: None, diagnostic:\n+Future incompatibility report: Future breakage diagnostic:\n warning: using an old version of `time-macros-impl`\n   --> $DIR/time-macros-impl/src/lib.rs:5:32\n    |\n@@ -99,7 +99,7 @@ LL |     impl_macros!(Foo);\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n    = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-Future breakage date: None, diagnostic:\n+Future breakage diagnostic:\n warning: using an old version of `time-macros-impl`\n   --> $DIR/time-macros-impl-0.1.0/src/lib.rs:5:32\n    |\n@@ -116,7 +116,7 @@ LL |     impl_macros!(Foo);\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n    = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-Future breakage date: None, diagnostic:\n+Future breakage diagnostic:\n warning: using an old version of `js-sys`\n   --> $DIR/js-sys-0.3.17/src/lib.rs:5:32\n    |\n@@ -133,7 +133,7 @@ LL |     arrays!(Foo);\n    = note: older versions of the `js-sys` crate will stop compiling in future versions of Rust; please update to `js-sys` v0.3.40 or above\n    = note: this warning originates in the macro `arrays` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-Future breakage date: None, diagnostic:\n+Future breakage diagnostic:\n warning: using an old version of `actix-web`\n   --> $DIR/actix-web/src/extract.rs:5:34\n    |\n@@ -150,7 +150,7 @@ LL |     tuple_from_req!(Foo);\n    = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n    = note: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-Future breakage date: None, diagnostic:\n+Future breakage diagnostic:\n warning: using an old version of `actix-web`\n   --> $DIR/actix-web-2.0.0/src/extract.rs:5:34\n    |"}, {"sha": "4d6edab08e2cf28b85f668ad55a2549780241bff", "filename": "src/test/ui/proc-macro/issue-73933-procedural-masquerade.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98130137d95ca130dedd2501c2e6478734658683/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98130137d95ca130dedd2501c2e6478734658683/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-73933-procedural-masquerade.stderr?ref=98130137d95ca130dedd2501c2e6478734658683", "patch": "@@ -11,7 +11,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n warning: 1 warning emitted\n \n-Future incompatibility report: Future breakage date: None, diagnostic:\n+Future incompatibility report: Future breakage diagnostic:\n warning: using `procedural-masquerade` crate\n   --> $DIR/issue-73933-procedural-masquerade.rs:8:6\n    |"}, {"sha": "dc6d67983c5d22da7932f17b07ea77f1e386ba0e", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98130137d95ca130dedd2501c2e6478734658683/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98130137d95ca130dedd2501c2e6478734658683/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=98130137d95ca130dedd2501c2e6478734658683", "patch": "@@ -43,7 +43,6 @@ struct FutureIncompatReport {\n \n #[derive(Deserialize)]\n struct FutureBreakageItem {\n-    future_breakage_date: Option<String>,\n     diagnostic: Diagnostic,\n }\n \n@@ -104,9 +103,7 @@ pub fn extract_rendered(output: &str) -> String {\n                                 .into_iter()\n                                 .map(|item| {\n                                     format!(\n-                                        \"Future breakage date: {}, diagnostic:\\n{}\",\n-                                        item.future_breakage_date\n-                                            .unwrap_or_else(|| \"None\".to_string()),\n+                                        \"Future breakage diagnostic:\\n{}\",\n                                         item.diagnostic\n                                             .rendered\n                                             .unwrap_or_else(|| \"Not rendered\".to_string())"}]}