{"sha": "11b45102024cbd77cc319fefbfaa21aa35ba8c31", "node_id": "C_kwDOAAsO6NoAKDExYjQ1MTAyMDI0Y2JkNzdjYzMxOWZlZmJmYWEyMWFhMzViYThjMzE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-25T07:32:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-25T07:32:08Z"}, "message": "Rollup merge of #102161 - compiler-errors:issue-102138, r=tmandry\n\nResolve async fn signature even without body (e.g., in trait)\n\nFixes #102138\n\nThis \"bail if no body\" behavior was introduced in #69539 to fix #69401, but that ICE does not reproduce any more. The error message changes a bit, but that's all, and I don't think it's a particularly diagnostic bad regression.", "tree": {"sha": "16d493b868ebf9b9f1a89142d6b9740d90c68aaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16d493b868ebf9b9f1a89142d6b9740d90c68aaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11b45102024cbd77cc319fefbfaa21aa35ba8c31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjMAP4CRBK7hj4Ov3rIwAAz9EIAIa+svEToskxeCGB7dxp2RLY\nR4zchlOAJNnfj/IcSvg3XkSX0KWh7EE54soNd04F6xK2Jx/jCMImn5mePjkX5RoP\nKGYk3WScPlndmT34hdka3hDVqWKnWjNOly7dKnPXsGrp/SP+PCzmz4PALSFyEE6m\nigm3mzoqEJTdBarS6/Mk8xrJpjcJ8wnB1L8dm71tujXfb0MTm/exFqKfvzz0vq6G\nj13WqR4L6LzUmZupKa/XDQ4xfqHgx88Bhffzib1w/dXHZ1B4lHkzA857C1CnUoDc\n/wV4FS26P8nmOqZoXWc72JAOsVxENITEXwNDkp5kCBVo5YnRSpH7kVb+by3gmDU=\n=oeQB\n-----END PGP SIGNATURE-----\n", "payload": "tree 16d493b868ebf9b9f1a89142d6b9740d90c68aaa\nparent 16de1fddee347c326dc4c7f07fa12dd714efd63e\nparent e87fcc026b4e31ffd352a035e58d78142c577dea\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664091128 +0200\ncommitter GitHub <noreply@github.com> 1664091128 +0200\n\nRollup merge of #102161 - compiler-errors:issue-102138, r=tmandry\n\nResolve async fn signature even without body (e.g., in trait)\n\nFixes #102138\n\nThis \"bail if no body\" behavior was introduced in #69539 to fix #69401, but that ICE does not reproduce any more. The error message changes a bit, but that's all, and I don't think it's a particularly diagnostic bad regression.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11b45102024cbd77cc319fefbfaa21aa35ba8c31", "html_url": "https://github.com/rust-lang/rust/commit/11b45102024cbd77cc319fefbfaa21aa35ba8c31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11b45102024cbd77cc319fefbfaa21aa35ba8c31/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16de1fddee347c326dc4c7f07fa12dd714efd63e", "url": "https://api.github.com/repos/rust-lang/rust/commits/16de1fddee347c326dc4c7f07fa12dd714efd63e", "html_url": "https://github.com/rust-lang/rust/commit/16de1fddee347c326dc4c7f07fa12dd714efd63e"}, {"sha": "e87fcc026b4e31ffd352a035e58d78142c577dea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e87fcc026b4e31ffd352a035e58d78142c577dea", "html_url": "https://github.com/rust-lang/rust/commit/e87fcc026b4e31ffd352a035e58d78142c577dea"}], "stats": {"total": 130, "additions": 94, "deletions": 36}, "files": [{"sha": "558db003867d29e8d42e526943a9f6f8b1dcd9d6", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 37, "deletions": 36, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/11b45102024cbd77cc319fefbfaa21aa35ba8c31/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b45102024cbd77cc319fefbfaa21aa35ba8c31/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=11b45102024cbd77cc319fefbfaa21aa35ba8c31", "patch": "@@ -805,7 +805,12 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             sig.decl.has_self(),\n                             sig.decl.inputs.iter().map(|Param { ty, .. }| (None, &**ty)),\n                             &sig.decl.output,\n-                        )\n+                        );\n+\n+                        this.record_lifetime_params_for_async(\n+                            fn_id,\n+                            sig.header.asyncness.opt_return_id(),\n+                        );\n                     },\n                 );\n                 return;\n@@ -847,41 +852,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             },\n                         );\n \n-                        // Construct the list of in-scope lifetime parameters for async lowering.\n-                        // We include all lifetime parameters, either named or \"Fresh\".\n-                        // The order of those parameters does not matter, as long as it is\n-                        // deterministic.\n-                        if let Some((async_node_id, _)) = async_node_id {\n-                            let mut extra_lifetime_params = this\n-                                .r\n-                                .extra_lifetime_params_map\n-                                .get(&fn_id)\n-                                .cloned()\n-                                .unwrap_or_default();\n-                            for rib in this.lifetime_ribs.iter().rev() {\n-                                extra_lifetime_params.extend(\n-                                    rib.bindings\n-                                        .iter()\n-                                        .map(|(&ident, &(node_id, res))| (ident, node_id, res)),\n-                                );\n-                                match rib.kind {\n-                                    LifetimeRibKind::Item => break,\n-                                    LifetimeRibKind::AnonymousCreateParameter {\n-                                        binder, ..\n-                                    } => {\n-                                        if let Some(earlier_fresh) =\n-                                            this.r.extra_lifetime_params_map.get(&binder)\n-                                        {\n-                                            extra_lifetime_params.extend(earlier_fresh);\n-                                        }\n-                                    }\n-                                    _ => {}\n-                                }\n-                            }\n-                            this.r\n-                                .extra_lifetime_params_map\n-                                .insert(async_node_id, extra_lifetime_params);\n-                        }\n+                        this.record_lifetime_params_for_async(fn_id, async_node_id);\n \n                         if let Some(body) = body {\n                             // Ignore errors in function bodies if this is rustdoc\n@@ -3926,6 +3897,36 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             Some((ident.name, ns)),\n         )\n     }\n+\n+    /// Construct the list of in-scope lifetime parameters for async lowering.\n+    /// We include all lifetime parameters, either named or \"Fresh\".\n+    /// The order of those parameters does not matter, as long as it is\n+    /// deterministic.\n+    fn record_lifetime_params_for_async(\n+        &mut self,\n+        fn_id: NodeId,\n+        async_node_id: Option<(NodeId, Span)>,\n+    ) {\n+        if let Some((async_node_id, _)) = async_node_id {\n+            let mut extra_lifetime_params =\n+                self.r.extra_lifetime_params_map.get(&fn_id).cloned().unwrap_or_default();\n+            for rib in self.lifetime_ribs.iter().rev() {\n+                extra_lifetime_params.extend(\n+                    rib.bindings.iter().map(|(&ident, &(node_id, res))| (ident, node_id, res)),\n+                );\n+                match rib.kind {\n+                    LifetimeRibKind::Item => break,\n+                    LifetimeRibKind::AnonymousCreateParameter { binder, .. } => {\n+                        if let Some(earlier_fresh) = self.r.extra_lifetime_params_map.get(&binder) {\n+                            extra_lifetime_params.extend(earlier_fresh);\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+            self.r.extra_lifetime_params_map.insert(async_node_id, extra_lifetime_params);\n+        }\n+    }\n }\n \n struct LifetimeCountVisitor<'a, 'b> {"}, {"sha": "f61b34ed99e00b56cad0c4ff3432fbe38bdbc3bf", "filename": "src/test/ui/async-await/in-trait/issue-102138.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/11b45102024cbd77cc319fefbfaa21aa35ba8c31/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fissue-102138.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b45102024cbd77cc319fefbfaa21aa35ba8c31/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fissue-102138.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fissue-102138.rs?ref=11b45102024cbd77cc319fefbfaa21aa35ba8c31", "patch": "@@ -0,0 +1,46 @@\n+// check-pass\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+async fn yield_now() {}\n+\n+trait AsyncIterator {\n+    type Item;\n+    async fn next(&mut self) -> Option<Self::Item>;\n+}\n+\n+struct YieldingRange {\n+    counter: u32,\n+    stop: u32,\n+}\n+\n+impl AsyncIterator for YieldingRange {\n+    type Item = u32;\n+\n+    async fn next(&mut self) -> Option<Self::Item> {\n+        if self.counter == self.stop {\n+            None\n+        } else {\n+            let c = self.counter;\n+            self.counter += 1;\n+            yield_now().await;\n+            Some(c)\n+        }\n+    }\n+}\n+\n+async fn async_main() {\n+    let mut x = YieldingRange { counter: 0, stop: 10 };\n+\n+    while let Some(v) = x.next().await {\n+        println!(\"Hi: {v}\");\n+    }\n+}\n+\n+fn main() {\n+    let _ = async_main();\n+}"}, {"sha": "fba4ffa1c6ed2fa7310abec52a133f3c7956b35d", "filename": "src/test/ui/resolve/name-collision-in-trait-fn-sig.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/11b45102024cbd77cc319fefbfaa21aa35ba8c31/src%2Ftest%2Fui%2Fresolve%2Fname-collision-in-trait-fn-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b45102024cbd77cc319fefbfaa21aa35ba8c31/src%2Ftest%2Fui%2Fresolve%2Fname-collision-in-trait-fn-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fname-collision-in-trait-fn-sig.rs?ref=11b45102024cbd77cc319fefbfaa21aa35ba8c31", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+// This is currently stable behavior, which was almost accidentally made an\n+// error in #102161 since there is no test exercising it. I am not sure if\n+// this _should_ be the desired behavior, but at least we should know if it\n+// changes.\n+\n+fn main() {}\n+\n+trait Foo {\n+    fn fn_with_type_named_same_as_local_in_param(b: i32, b: i32);\n+}"}]}