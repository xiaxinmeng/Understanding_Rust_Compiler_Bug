{"sha": "1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNzFlYmY2ZjEyN2NjOWMxY2EwZTUzN2ZkNDYwZDZmOTdlZjc2YjA=", "commit": {"author": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-03-06T16:03:33Z"}, "committer": {"name": "Sean Griffin", "email": "sean@seantheprogrammer.com", "date": "2018-03-23T19:18:50Z"}, "message": "Revert \"introduce `UniverseIndex` into `ParamEnv`\"\n\nThis reverts commit d4df52cacbee5d95e912a43188192a5054d36b4f.", "tree": {"sha": "06d574e153a388ca462cd8d8a6d7c2d8898881d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06d574e153a388ca462cd8d8a6d7c2d8898881d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0", "html_url": "https://github.com/rust-lang/rust/commit/1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0/comments", "author": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sgrif", "id": 1529387, "node_id": "MDQ6VXNlcjE1MjkzODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1529387?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sgrif", "html_url": "https://github.com/sgrif", "followers_url": "https://api.github.com/users/sgrif/followers", "following_url": "https://api.github.com/users/sgrif/following{/other_user}", "gists_url": "https://api.github.com/users/sgrif/gists{/gist_id}", "starred_url": "https://api.github.com/users/sgrif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sgrif/subscriptions", "organizations_url": "https://api.github.com/users/sgrif/orgs", "repos_url": "https://api.github.com/users/sgrif/repos", "events_url": "https://api.github.com/users/sgrif/events{/privacy}", "received_events_url": "https://api.github.com/users/sgrif/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26cebda208690a245a09ea939d97e0dbced0b2a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/26cebda208690a245a09ea939d97e0dbced0b2a0", "html_url": "https://github.com/rust-lang/rust/commit/26cebda208690a245a09ea939d97e0dbced0b2a0"}], "stats": {"total": 71, "additions": 9, "deletions": 62}, "files": [{"sha": "594adfca6b3c0ad3eefd8023bb28b1c447bdb15b", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0", "patch": "@@ -1111,7 +1111,6 @@ for ty::steal::Steal<T>\n \n impl_stable_hash_for!(struct ty::ParamEnv<'tcx> {\n     caller_bounds,\n-    universe,\n     reveal\n });\n \n@@ -1282,15 +1281,6 @@ for traits::VtableGeneratorData<'gcx, N> where N: HashStable<StableHashingContex\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>>\n-for ty::UniverseIndex {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a>,\n-                                          hasher: &mut StableHasher<W>) {\n-        self.depth().hash_stable(hcx, hasher);\n-    }\n-}\n-\n impl_stable_hash_for!(\n     impl<'tcx, V> for struct infer::canonical::Canonical<'tcx, V> {\n         variables, value"}, {"sha": "6716d27aa1c363c4cb190e4d4cfa9e2fbf3add52", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0", "patch": "@@ -610,8 +610,7 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n            predicates);\n \n     let elaborated_env = ty::ParamEnv::new(tcx.intern_predicates(&predicates),\n-                                           unnormalized_env.reveal,\n-                                           unnormalized_env.universe);\n+                                           unnormalized_env.reveal);\n \n     tcx.infer_ctxt().enter(|infcx| {\n         // FIXME. We should really... do something with these region\n@@ -685,9 +684,7 @@ pub fn normalize_param_env_or_error<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         debug!(\"normalize_param_env_or_error: resolved predicates={:?}\",\n                predicates);\n \n-        ty::ParamEnv::new(tcx.intern_predicates(&predicates),\n-                          unnormalized_env.reveal,\n-                          unnormalized_env.universe)\n+        ty::ParamEnv::new(tcx.intern_predicates(&predicates), unnormalized_env.reveal)\n     })\n }\n "}, {"sha": "0942fa2567b6bcbdcd6b86ca7ec91c0ff334e1a3", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0", "patch": "@@ -1338,7 +1338,9 @@ pub struct UniverseIndex(u32);\n impl UniverseIndex {\n     /// The root universe, where things that the user defined are\n     /// visible.\n-    pub const ROOT: UniverseIndex = UniverseIndex(0);\n+    pub fn root() -> UniverseIndex {\n+        UniverseIndex(0)\n+    }\n \n     /// A \"subuniverse\" corresponds to being inside a `forall` quantifier.\n     /// So, for example, suppose we have this type in universe `U`:\n@@ -1354,13 +1356,6 @@ impl UniverseIndex {\n     pub fn subuniverse(self) -> UniverseIndex {\n         UniverseIndex(self.0 + 1)\n     }\n-\n-    /// Gets the \"depth\" of this universe in the universe tree. This\n-    /// is not really useful except for e.g. the `HashStable`\n-    /// implementation\n-    pub fn depth(&self) -> u32 {\n-        self.0\n-    }\n }\n \n /// When type checking, we use the `ParamEnv` to track\n@@ -1377,17 +1372,6 @@ pub struct ParamEnv<'tcx> {\n     /// want `Reveal::All` -- note that this is always paired with an\n     /// empty environment. To get that, use `ParamEnv::reveal()`.\n     pub reveal: traits::Reveal,\n-\n-    /// What is the innermost universe we have created? Starts out as\n-    /// `UniverseIndex::root()` but grows from there as we enter\n-    /// universal quantifiers.\n-    ///\n-    /// NB: At present, we exclude the universal quantifiers on the\n-    /// item we are type-checking, and just consider those names as\n-    /// part of the root universe. So this would only get incremented\n-    /// when we enter into a higher-ranked (`for<..>`) type or trait\n-    /// bound.\n-    pub universe: UniverseIndex,\n }\n \n impl<'tcx> ParamEnv<'tcx> {\n@@ -2707,8 +2691,7 @@ fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // sure that this will succeed without errors anyway.\n \n     let unnormalized_env = ty::ParamEnv::new(tcx.intern_predicates(&predicates),\n-                                             traits::Reveal::UserFacing,\n-                                             ty::UniverseIndex::ROOT);\n+                                             traits::Reveal::UserFacing);\n \n     let body_id = tcx.hir.as_local_node_id(def_id).map_or(DUMMY_NODE_ID, |id| {\n         tcx.hir.maybe_body_owned_by(id).map_or(id, |body| body.node_id)"}, {"sha": "05818b578ecc7dcfc9f00a8d343b0417f2ca9466", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0", "patch": "@@ -279,7 +279,6 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n         tcx.lift(&self.caller_bounds).map(|caller_bounds| {\n             ty::ParamEnv {\n                 reveal: self.reveal,\n-                universe: self.universe,\n                 caller_bounds,\n             }\n         })\n@@ -737,29 +736,8 @@ impl<'tcx, T:TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::ParamEnv<'tcx> {\n-    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        ty::ParamEnv {\n-            reveal: self.reveal,\n-            caller_bounds: self.caller_bounds.fold_with(folder),\n-            universe: self.universe.fold_with(folder),\n-        }\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        let &ty::ParamEnv { reveal: _, ref universe, ref caller_bounds } = self;\n-        universe.super_visit_with(visitor) || caller_bounds.super_visit_with(visitor)\n-    }\n-}\n-\n-impl<'tcx> TypeFoldable<'tcx> for ty::UniverseIndex {\n-    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, _folder: &mut F) -> Self {\n-        *self\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n-        false\n-    }\n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for ty::ParamEnv<'tcx> { reveal, caller_bounds }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Slice<ty::ExistentialPredicate<'tcx>> {"}, {"sha": "e1e3dea9a2a11c83167f7e34dce34e5adcd7ad9d", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=1171ebf6f127cc9c1ca0e537fd460d6f97ef76b0", "patch": "@@ -218,8 +218,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // the new hybrid bounds we computed.\n     let normalize_cause = traits::ObligationCause::misc(impl_m_span, impl_m_node_id);\n     let param_env = ty::ParamEnv::new(tcx.intern_predicates(&hybrid_preds.predicates),\n-                                      Reveal::UserFacing,\n-                                      ty::UniverseIndex::ROOT);\n+                                      Reveal::UserFacing);\n     let param_env = traits::normalize_param_env_or_error(tcx,\n                                                          impl_m.def_id,\n                                                          param_env,"}]}