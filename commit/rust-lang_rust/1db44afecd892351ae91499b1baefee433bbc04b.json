{"sha": "1db44afecd892351ae91499b1baefee433bbc04b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYjQ0YWZlY2Q4OTIzNTFhZTkxNDk5YjFiYWVmZWU0MzNiYmMwNGI=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-06-17T01:48:46Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-06-17T01:48:46Z"}, "message": "Ensure profiling runtime for -Zinstrument-coverage\n\nIf config.toml `profiler = false`, the test/mir-opt/instrument_coverage\ntest is ignored. Otherwise, this patch ensures the profiler_runtime is\nloaded when -Zinstrument-coverage is enabled. Confirmed that this works\nfor MacOS.", "tree": {"sha": "b83a618d7c7ccb52af1063e65a5d7c8bc61751e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b83a618d7c7ccb52af1063e65a5d7c8bc61751e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1db44afecd892351ae91499b1baefee433bbc04b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1db44afecd892351ae91499b1baefee433bbc04b", "html_url": "https://github.com/rust-lang/rust/commit/1db44afecd892351ae91499b1baefee433bbc04b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1db44afecd892351ae91499b1baefee433bbc04b/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98685a4bf2ef50c6d6a64ef3867a29994d5a4a25", "url": "https://api.github.com/repos/rust-lang/rust/commits/98685a4bf2ef50c6d6a64ef3867a29994d5a4a25", "html_url": "https://github.com/rust-lang/rust/commit/98685a4bf2ef50c6d6a64ef3867a29994d5a4a25"}], "stats": {"total": 84, "additions": 44, "deletions": 40}, "files": [{"sha": "bc6760334170b5bd1bc63cdb1f507e2ab1acb5bb", "filename": "config.toml.example", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1db44afecd892351ae91499b1baefee433bbc04b/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/1db44afecd892351ae91499b1baefee433bbc04b/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=1db44afecd892351ae91499b1baefee433bbc04b", "patch": "@@ -209,7 +209,8 @@\n # Build the sanitizer runtimes\n #sanitizers = false\n \n-# Build the profiler runtime\n+# Build the profiler runtime (required when compiling with options that depend\n+# on this runtime, such as `-C profile-generate` or `-Z instrument-coverage`).\n #profiler = false\n \n # Indicates whether the native libraries linked into Cargo will be statically"}, {"sha": "f3e4f40bd5a187133afdff417cf939845a3182a7", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1db44afecd892351ae91499b1baefee433bbc04b/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db44afecd892351ae91499b1baefee433bbc04b/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=1db44afecd892351ae91499b1baefee433bbc04b", "patch": "@@ -698,7 +698,9 @@ impl<'a> CrateLoader<'a> {\n     }\n \n     fn inject_profiler_runtime(&mut self) {\n-        if (self.sess.opts.debugging_opts.profile || self.sess.opts.cg.profile_generate.enabled())\n+        if (self.sess.opts.debugging_opts.instrument_coverage\n+            || self.sess.opts.debugging_opts.profile\n+            || self.sess.opts.cg.profile_generate.enabled())\n             && !self.sess.opts.debugging_opts.no_profiler_runtime\n         {\n             info!(\"loading profiler\");"}, {"sha": "3fe010ef68fc351abe2709c2560fdcb5ddf5e3c3", "filename": "src/test/mir-opt/instrument_coverage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1db44afecd892351ae91499b1baefee433bbc04b/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db44afecd892351ae91499b1baefee433bbc04b/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage.rs?ref=1db44afecd892351ae91499b1baefee433bbc04b", "patch": "@@ -2,6 +2,7 @@\n // at the top of each function. The placeholders are later converted into LLVM instrprof.increment\n // intrinsics, during codegen.\n \n+// needs-profiler-support\n // compile-flags: -Zinstrument-coverage\n // EMIT_MIR rustc.main.InstrumentCoverage.diff\n // EMIT_MIR rustc.bar.InstrumentCoverage.diff"}, {"sha": "1e64379aa0e4b6a311e2a3aed3bd63de11cacde0", "filename": "src/test/mir-opt/instrument_coverage/rustc.bar.InstrumentCoverage.diff", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1db44afecd892351ae91499b1baefee433bbc04b/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.bar.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1db44afecd892351ae91499b1baefee433bbc04b/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.bar.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.bar.InstrumentCoverage.diff?ref=1db44afecd892351ae91499b1baefee433bbc04b", "patch": "@@ -2,40 +2,40 @@\n + // MIR for `bar` after InstrumentCoverage\n   \n   fn bar() -> bool {\n-      let mut _0: bool;                    // return place in scope 0 at $DIR/instrument_coverage.rs:17:13: 17:17\n-+     let mut _1: ();                      // in scope 0 at $DIR/instrument_coverage.rs:17:1: 19:2\n+      let mut _0: bool;                    // return place in scope 0 at $DIR/instrument_coverage.rs:18:13: 18:17\n++     let mut _1: ();                      // in scope 0 at $DIR/instrument_coverage.rs:18:1: 20:2\n   \n       bb0: {\n-+         StorageLive(_1);                 // scope 0 at $DIR/instrument_coverage.rs:17:1: 19:2\n-+         _1 = const std::intrinsics::count_code_region(const 0u32) -> bb2; // scope 0 at $DIR/instrument_coverage.rs:17:1: 19:2\n++         StorageLive(_1);                 // scope 0 at $DIR/instrument_coverage.rs:18:1: 20:2\n++         _1 = const std::intrinsics::count_code_region(const 0u32) -> bb2; // scope 0 at $DIR/instrument_coverage.rs:18:1: 20:2\n +                                          // ty::Const\n +                                          // + ty: unsafe extern \"rust-intrinsic\" fn(u32) {std::intrinsics::count_code_region}\n +                                          // + val: Value(Scalar(<ZST>))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/instrument_coverage.rs:17:1: 17:1\n++                                          // + span: $DIR/instrument_coverage.rs:18:1: 18:1\n +                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32) {std::intrinsics::count_code_region}, val: Value(Scalar(<ZST>)) }\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000000))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/instrument_coverage.rs:17:1: 17:1\n++                                          // + span: $DIR/instrument_coverage.rs:18:1: 18:1\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n +     }\n + \n +     bb1 (cleanup): {\n-+         resume;                          // scope 0 at $DIR/instrument_coverage.rs:17:1: 19:2\n++         resume;                          // scope 0 at $DIR/instrument_coverage.rs:18:1: 20:2\n +     }\n + \n +     bb2: {\n-+         StorageDead(_1);                 // scope 0 at $DIR/instrument_coverage.rs:18:5: 18:9\n-          _0 = const true;                 // scope 0 at $DIR/instrument_coverage.rs:18:5: 18:9\n++         StorageDead(_1);                 // scope 0 at $DIR/instrument_coverage.rs:19:5: 19:9\n+          _0 = const true;                 // scope 0 at $DIR/instrument_coverage.rs:19:5: 19:9\n                                            // ty::Const\n                                            // + ty: bool\n                                            // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n-                                           // + span: $DIR/instrument_coverage.rs:18:5: 18:9\n+                                           // + span: $DIR/instrument_coverage.rs:19:5: 19:9\n                                            // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-          return;                          // scope 0 at $DIR/instrument_coverage.rs:19:2: 19:2\n+          return;                          // scope 0 at $DIR/instrument_coverage.rs:20:2: 20:2\n       }\n   }\n   "}, {"sha": "82d21467827ebbcb1f35adbf7a2e57b11b3caf39", "filename": "src/test/mir-opt/instrument_coverage/rustc.main.InstrumentCoverage.diff", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1db44afecd892351ae91499b1baefee433bbc04b/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/1db44afecd892351ae91499b1baefee433bbc04b/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finstrument_coverage%2Frustc.main.InstrumentCoverage.diff?ref=1db44afecd892351ae91499b1baefee433bbc04b", "patch": "@@ -2,81 +2,81 @@\n + // MIR for `main` after InstrumentCoverage\n   \n   fn main() -> () {\n-      let mut _0: ();                      // return place in scope 0 at $DIR/instrument_coverage.rs:8:11: 8:11\n-      let mut _1: ();                      // in scope 0 at $DIR/instrument_coverage.rs:8:1: 14:2\n-      let mut _2: bool;                    // in scope 0 at $DIR/instrument_coverage.rs:10:12: 10:17\n-      let mut _3: !;                       // in scope 0 at $DIR/instrument_coverage.rs:10:18: 12:10\n-+     let mut _4: ();                      // in scope 0 at $DIR/instrument_coverage.rs:8:1: 14:2\n+      let mut _0: ();                      // return place in scope 0 at $DIR/instrument_coverage.rs:9:11: 9:11\n+      let mut _1: ();                      // in scope 0 at $DIR/instrument_coverage.rs:9:1: 15:2\n+      let mut _2: bool;                    // in scope 0 at $DIR/instrument_coverage.rs:11:12: 11:17\n+      let mut _3: !;                       // in scope 0 at $DIR/instrument_coverage.rs:11:18: 13:10\n++     let mut _4: ();                      // in scope 0 at $DIR/instrument_coverage.rs:9:1: 15:2\n   \n       bb0: {\n--         falseUnwind -> [real: bb1, cleanup: bb2]; // scope 0 at $DIR/instrument_coverage.rs:9:5: 13:6\n-+         StorageLive(_4);                 // scope 0 at $DIR/instrument_coverage.rs:8:1: 14:2\n-+         _4 = const std::intrinsics::count_code_region(const 0u32) -> bb7; // scope 0 at $DIR/instrument_coverage.rs:8:1: 14:2\n+-         falseUnwind -> [real: bb1, cleanup: bb2]; // scope 0 at $DIR/instrument_coverage.rs:10:5: 14:6\n++         StorageLive(_4);                 // scope 0 at $DIR/instrument_coverage.rs:9:1: 15:2\n++         _4 = const std::intrinsics::count_code_region(const 0u32) -> bb7; // scope 0 at $DIR/instrument_coverage.rs:9:1: 15:2\n +                                          // ty::Const\n +                                          // + ty: unsafe extern \"rust-intrinsic\" fn(u32) {std::intrinsics::count_code_region}\n +                                          // + val: Value(Scalar(<ZST>))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/instrument_coverage.rs:8:1: 8:1\n++                                          // + span: $DIR/instrument_coverage.rs:9:1: 9:1\n +                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32) {std::intrinsics::count_code_region}, val: Value(Scalar(<ZST>)) }\n +                                          // ty::Const\n +                                          // + ty: u32\n +                                          // + val: Value(Scalar(0x00000000))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/instrument_coverage.rs:8:1: 8:1\n++                                          // + span: $DIR/instrument_coverage.rs:9:1: 9:1\n +                                          // + literal: Const { ty: u32, val: Value(Scalar(0x00000000)) }\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 0 at $DIR/instrument_coverage.rs:10:12: 10:17\n-          _2 = const bar() -> [return: bb3, unwind: bb2]; // scope 0 at $DIR/instrument_coverage.rs:10:12: 10:17\n+          StorageLive(_2);                 // scope 0 at $DIR/instrument_coverage.rs:11:12: 11:17\n+          _2 = const bar() -> [return: bb3, unwind: bb2]; // scope 0 at $DIR/instrument_coverage.rs:11:12: 11:17\n                                            // ty::Const\n                                            // + ty: fn() -> bool {bar}\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n-                                           // + span: $DIR/instrument_coverage.rs:10:12: 10:15\n+                                           // + span: $DIR/instrument_coverage.rs:11:12: 11:15\n                                            // + literal: Const { ty: fn() -> bool {bar}, val: Value(Scalar(<ZST>)) }\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/instrument_coverage.rs:8:1: 14:2\n+          resume;                          // scope 0 at $DIR/instrument_coverage.rs:9:1: 15:2\n       }\n   \n       bb3: {\n-          FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/instrument_coverage.rs:10:12: 10:17\n-          switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/instrument_coverage.rs:10:9: 12:10\n+          FakeRead(ForMatchedPlace, _2);   // scope 0 at $DIR/instrument_coverage.rs:11:12: 11:17\n+          switchInt(_2) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/instrument_coverage.rs:11:9: 13:10\n       }\n   \n       bb4: {\n-          falseEdge -> [real: bb6, imaginary: bb5]; // scope 0 at $DIR/instrument_coverage.rs:10:9: 12:10\n+          falseEdge -> [real: bb6, imaginary: bb5]; // scope 0 at $DIR/instrument_coverage.rs:11:9: 13:10\n       }\n   \n       bb5: {\n-          _1 = const ();                   // scope 0 at $DIR/instrument_coverage.rs:10:9: 12:10\n+          _1 = const ();                   // scope 0 at $DIR/instrument_coverage.rs:11:9: 13:10\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n-                                           // + span: $DIR/instrument_coverage.rs:10:9: 12:10\n+                                           // + span: $DIR/instrument_coverage.rs:11:9: 13:10\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_2);                 // scope 0 at $DIR/instrument_coverage.rs:13:5: 13:6\n-          goto -> bb0;                     // scope 0 at $DIR/instrument_coverage.rs:9:5: 13:6\n+          StorageDead(_2);                 // scope 0 at $DIR/instrument_coverage.rs:14:5: 14:6\n+          goto -> bb0;                     // scope 0 at $DIR/instrument_coverage.rs:10:5: 14:6\n       }\n   \n       bb6: {\n-          _0 = const ();                   // scope 0 at $DIR/instrument_coverage.rs:11:13: 11:18\n+          _0 = const ();                   // scope 0 at $DIR/instrument_coverage.rs:12:13: 12:18\n                                            // ty::Const\n                                            // + ty: ()\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n-                                           // + span: $DIR/instrument_coverage.rs:11:13: 11:18\n+                                           // + span: $DIR/instrument_coverage.rs:12:13: 12:18\n                                            // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          StorageDead(_2);                 // scope 0 at $DIR/instrument_coverage.rs:13:5: 13:6\n-          return;                          // scope 0 at $DIR/instrument_coverage.rs:14:2: 14:2\n+          StorageDead(_2);                 // scope 0 at $DIR/instrument_coverage.rs:14:5: 14:6\n+          return;                          // scope 0 at $DIR/instrument_coverage.rs:15:2: 15:2\n +     }\n + \n +     bb7: {\n-+         StorageDead(_4);                 // scope 0 at $DIR/instrument_coverage.rs:9:5: 13:6\n-+         falseUnwind -> [real: bb1, cleanup: bb2]; // scope 0 at $DIR/instrument_coverage.rs:9:5: 13:6\n++         StorageDead(_4);                 // scope 0 at $DIR/instrument_coverage.rs:10:5: 14:6\n++         falseUnwind -> [real: bb1, cleanup: bb2]; // scope 0 at $DIR/instrument_coverage.rs:10:5: 14:6\n       }\n   }\n   "}]}