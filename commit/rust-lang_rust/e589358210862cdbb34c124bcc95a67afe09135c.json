{"sha": "e589358210862cdbb34c124bcc95a67afe09135c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ODkzNTgyMTA4NjJjZGJiMzRjMTI0YmNjOTVhNjdhZmUwOTEzNWM=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-01-03T00:02:06Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2020-01-03T22:57:23Z"}, "message": "improve generic `Drop` error messages\n\n- Use the span of the predicate\n- Use the def's description instead of \"struct/enum\" (notably incorrect\n  for unions)\n- Align formatting with other error messages", "tree": {"sha": "952b29c584b7b695baa24dbffc46b6259dbb15c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/952b29c584b7b695baa24dbffc46b6259dbb15c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e589358210862cdbb34c124bcc95a67afe09135c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAl4PxtMWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdIurCACYid1d60iOqy6FGsiAUoSX3Zp/\nIBn3wRjbktIoUPKJAf5mCN7Aih7T07YuCnWVwKEOekSulYVQKuFL+3Pw+cVZi9Je\nZJ8DQYUVSOXGoMWaIpg5ulklgLbu5AxVXfBXHbRGmbEKiXNAfJ9mlWa6kqyolFth\nnrgaBq/lYAcMqukElcPTV2Gq7Wj/MTPNB0PQz1GOYRgP+kAsoKDlwTFsfDW9wcGP\nw3i5M27nR/1+EdwJlpW3PJqesHFBf3Wspp9AXveboHRcRVS4wjTyCU6BgnN/sMtl\nnY1CDY07hznRA9zV2eu01OMiPOP9xgD3Ydvmt6prhMByc7+8ENKcaIoj0yjK\n=lGe6\n-----END PGP SIGNATURE-----", "payload": "tree 952b29c584b7b695baa24dbffc46b6259dbb15c4\nparent 0a58f5864659ddfe1d95c122abaa75c88220aed0\nauthor Andy Russell <arussell123@gmail.com> 1578009726 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1578092243 -0500\n\nimprove generic `Drop` error messages\n\n- Use the span of the predicate\n- Use the def's description instead of \"struct/enum\" (notably incorrect\n  for unions)\n- Align formatting with other error messages\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e589358210862cdbb34c124bcc95a67afe09135c", "html_url": "https://github.com/rust-lang/rust/commit/e589358210862cdbb34c124bcc95a67afe09135c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e589358210862cdbb34c124bcc95a67afe09135c/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a58f5864659ddfe1d95c122abaa75c88220aed0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a58f5864659ddfe1d95c122abaa75c88220aed0", "html_url": "https://github.com/rust-lang/rust/commit/0a58f5864659ddfe1d95c122abaa75c88220aed0"}], "stats": {"total": 179, "additions": 110, "deletions": 69}, "files": [{"sha": "004fce7e35b7098a67e787eb1f1ddb7dc46af9da", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e589358210862cdbb34c124bcc95a67afe09135c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e589358210862cdbb34c124bcc95a67afe09135c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=e589358210862cdbb34c124bcc95a67afe09135c", "patch": "@@ -47,7 +47,6 @@ pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), Erro\n \n             ensure_drop_predicates_are_implied_by_item_defn(\n                 tcx,\n-                drop_impl_did,\n                 dtor_predicates,\n                 adt_def.did,\n                 self_to_impl_substs,\n@@ -95,16 +94,23 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n             }\n             Err(_) => {\n                 let item_span = tcx.def_span(self_type_did);\n+                let self_descr = tcx\n+                    .def_kind(self_type_did)\n+                    .map(|kind| kind.descr(self_type_did))\n+                    .unwrap_or(\"type\");\n                 struct_span_err!(\n                     tcx.sess,\n                     drop_impl_span,\n                     E0366,\n-                    \"Implementations of Drop cannot be specialized\"\n+                    \"`Drop` impls cannot be specialized\"\n                 )\n                 .span_note(\n                     item_span,\n-                    \"Use same sequence of generic type and region \\\n-                     parameters that is on the struct/enum definition\",\n+                    &format!(\n+                        \"use the same sequence of generic type, lifetime and const parameters \\\n+                        as the {} definition\",\n+                        self_descr,\n+                    ),\n                 )\n                 .emit();\n                 return Err(ErrorReported);\n@@ -143,7 +149,6 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n /// implied by assuming the predicates attached to self_type_did.\n fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    drop_impl_did: DefId,\n     dtor_predicates: ty::GenericPredicates<'tcx>,\n     self_type_did: DefId,\n     self_to_impl_substs: SubstsRef<'tcx>,\n@@ -187,8 +192,6 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n \n     let self_type_hir_id = tcx.hir().as_local_hir_id(self_type_did).unwrap();\n \n-    let drop_impl_span = tcx.def_span(drop_impl_did);\n-\n     // We can assume the predicates attached to struct/enum definition\n     // hold.\n     let generic_assumptions = tcx.predicates_of(self_type_did);\n@@ -205,7 +208,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n     // just to look for all the predicates directly.\n \n     assert_eq!(dtor_predicates.parent, None);\n-    for (predicate, _) in dtor_predicates.predicates {\n+    for (predicate, predicate_sp) in dtor_predicates.predicates {\n         // (We do not need to worry about deep analysis of type\n         // expressions etc because the Drop impls are already forced\n         // to take on a structure that is roughly an alpha-renaming of\n@@ -241,18 +244,17 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n \n         if !assumptions_in_impl_context.iter().any(predicate_matches_closure) {\n             let item_span = tcx.hir().span(self_type_hir_id);\n+            let self_descr =\n+                tcx.def_kind(self_type_did).map(|kind| kind.descr(self_type_did)).unwrap_or(\"type\");\n             struct_span_err!(\n                 tcx.sess,\n-                drop_impl_span,\n+                *predicate_sp,\n                 E0367,\n-                \"The requirement `{}` is added only by the Drop impl.\",\n-                predicate\n-            )\n-            .span_note(\n-                item_span,\n-                \"The same requirement must be part of \\\n-                 the struct/enum definition\",\n+                \"`Drop` impl requires `{}` but the {} it is implemented for does not\",\n+                predicate,\n+                self_descr,\n             )\n+            .span_note(item_span, \"the implementor must specify the same requirement\")\n             .emit();\n             result = Err(ErrorReported);\n         }"}, {"sha": "01416a0d79e5f72d24d928b4f9166c43f09ec6d8", "filename": "src/test/ui/issues/issue-17959.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e589358210862cdbb34c124bcc95a67afe09135c/src%2Ftest%2Fui%2Fissues%2Fissue-17959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e589358210862cdbb34c124bcc95a67afe09135c/src%2Ftest%2Fui%2Fissues%2Fissue-17959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17959.rs?ref=e589358210862cdbb34c124bcc95a67afe09135c", "patch": "@@ -9,7 +9,7 @@ struct G<T: ?Sized> {\n }\n \n impl<T> Drop for G<T> {\n-//~^ ERROR: The requirement `T: std::marker::Sized` is added only by the Drop impl. [E0367]\n+//~^ ERROR `Drop` impl requires `T: std::marker::Sized`\n     fn drop(&mut self) {\n         if !self._ptr.is_null() {\n         }"}, {"sha": "29d32c1f3cec6975cfe11734fa2793241c5f6cae", "filename": "src/test/ui/issues/issue-17959.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e589358210862cdbb34c124bcc95a67afe09135c/src%2Ftest%2Fui%2Fissues%2Fissue-17959.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e589358210862cdbb34c124bcc95a67afe09135c/src%2Ftest%2Fui%2Fissues%2Fissue-17959.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17959.stderr?ref=e589358210862cdbb34c124bcc95a67afe09135c", "patch": "@@ -1,16 +1,10 @@\n-error[E0367]: The requirement `T: std::marker::Sized` is added only by the Drop impl.\n-  --> $DIR/issue-17959.rs:11:1\n+error[E0367]: `Drop` impl requires `T: std::marker::Sized` but the struct it is implemented for does not\n+  --> $DIR/issue-17959.rs:11:6\n    |\n-LL | / impl<T> Drop for G<T> {\n-LL | |\n-LL | |     fn drop(&mut self) {\n-LL | |         if !self._ptr.is_null() {\n-LL | |         }\n-LL | |     }\n-LL | | }\n-   | |_^\n+LL | impl<T> Drop for G<T> {\n+   |      ^\n    |\n-note: The same requirement must be part of the struct/enum definition\n+note: the implementor must specify the same requirement\n   --> $DIR/issue-17959.rs:7:1\n    |\n LL | / struct G<T: ?Sized> {"}, {"sha": "10d1e7c4e66dc20aa908f49e9e195030a3266ebe", "filename": "src/test/ui/issues/issue-38868.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e589358210862cdbb34c124bcc95a67afe09135c/src%2Ftest%2Fui%2Fissues%2Fissue-38868.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e589358210862cdbb34c124bcc95a67afe09135c/src%2Ftest%2Fui%2Fissues%2Fissue-38868.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38868.stderr?ref=e589358210862cdbb34c124bcc95a67afe09135c", "patch": "@@ -1,4 +1,4 @@\n-error[E0366]: Implementations of Drop cannot be specialized\n+error[E0366]: `Drop` impls cannot be specialized\n   --> $DIR/issue-38868.rs:5:1\n    |\n LL | / impl Drop for List<i32> {\n@@ -8,7 +8,7 @@ LL | |     }\n LL | | }\n    | |_^\n    |\n-note: Use same sequence of generic type and region parameters that is on the struct/enum definition\n+note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n   --> $DIR/issue-38868.rs:1:1\n    |\n LL | / pub struct List<T> {"}, {"sha": "d7fec8802f08bb8d1ac2a2cfb78eb8cd70f456cf", "filename": "src/test/ui/reject-specialized-drops-8142.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e589358210862cdbb34c124bcc95a67afe09135c/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e589358210862cdbb34c124bcc95a67afe09135c/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.rs?ref=e589358210862cdbb34c124bcc95a67afe09135c", "patch": "@@ -1,5 +1,5 @@\n // Issue 8142: Test that Drop impls cannot be specialized beyond the\n-// predicates attached to the struct/enum definition itself.\n+// predicates attached to the type definition itself.\n \n trait Bound { fn foo(&self) { } }\n struct K<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n@@ -16,12 +16,16 @@ struct U;\n struct V<Tva, Tvb> { x: *const Tva, y: *const Tvb }\n struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n \n+enum Enum<T> { Variant(T) }\n+struct TupleStruct<T>(T);\n+union Union<T: Copy> { f: T }\n+\n impl<'al,'adds_bnd:'al> Drop for K<'al,'adds_bnd> {                        // REJECT\n-    //~^ ERROR The requirement `'adds_bnd : 'al` is added only by the Drop impl.\n+    //~^ ERROR `Drop` impl requires `'adds_bnd : 'al`\n     fn drop(&mut self) { } }\n \n impl<'al,'adds_bnd>     Drop for L<'al,'adds_bnd> where 'adds_bnd:'al {    // REJECT\n-    //~^ ERROR The requirement `'adds_bnd : 'al` is added only by the Drop impl.\n+    //~^ ERROR `Drop` impl requires `'adds_bnd : 'al`\n     fn drop(&mut self) { } }\n \n impl<'ml>               Drop for M<'ml>         { fn drop(&mut self) { } } // ACCEPT\n@@ -34,13 +38,13 @@ impl                    Drop for N<'static>     { fn drop(&mut self) { } } // RE\n impl<COkNoBound> Drop for O<COkNoBound> { fn drop(&mut self) { } } // ACCEPT\n \n impl              Drop for P<i8>          { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR Implementations of Drop cannot be specialized\n+//~^ ERROR `Drop` impls cannot be specialized\n \n impl<AddsBnd:Bound> Drop for Q<AddsBnd> { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR The requirement `AddsBnd: Bound` is added only by the Drop impl.\n+//~^ ERROR `Drop` impl requires `AddsBnd: Bound`\n \n impl<'rbnd,AddsRBnd:'rbnd> Drop for R<AddsRBnd> { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR The requirement `AddsRBnd : 'rbnd` is added only by the Drop impl.\n+//~^ ERROR `Drop` impl requires `AddsRBnd : 'rbnd`\n \n impl<Bs:Bound>    Drop for S<Bs>          { fn drop(&mut self) { } } // ACCEPT\n \n@@ -49,9 +53,18 @@ impl<'t,Bt:'t>    Drop for T<'t,Bt>       { fn drop(&mut self) { } } // ACCEPT\n impl              Drop for U              { fn drop(&mut self) { } } // ACCEPT\n \n impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n-//~^ ERROR Implementations of Drop cannot be specialized\n+//~^ ERROR `Drop` impls cannot be specialized\n \n impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n //~^ ERROR cannot infer an appropriate lifetime for lifetime parameter `'lw`\n \n+impl<AddsBnd:Bound> Drop for Enum<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+//~^ ERROR `Drop` impl requires `AddsBnd: Bound`\n+\n+impl<AddsBnd:Bound> Drop for TupleStruct<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+//~^ ERROR `Drop` impl requires `AddsBnd: Bound`\n+\n+impl<AddsBnd:Copy + Bound> Drop for Union<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+//~^ ERROR `Drop` impl requires `AddsBnd: Bound`\n+\n pub fn main() { }"}, {"sha": "14618df90cb6292a0f2bba5d181804bd68f5050a", "filename": "src/test/ui/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 64, "deletions": 32, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/e589358210862cdbb34c124bcc95a67afe09135c/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e589358210862cdbb34c124bcc95a67afe09135c/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr?ref=e589358210862cdbb34c124bcc95a67afe09135c", "patch": "@@ -1,33 +1,41 @@\n-error[E0367]: The requirement `'adds_bnd : 'al` is added only by the Drop impl.\n-  --> $DIR/reject-specialized-drops-8142.rs:19:1\n+error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the union it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:67:21\n+   |\n+LL | impl<AddsBnd:Copy + Bound> Drop for Union<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+   |                     ^^^^^\n+   |\n+note: the implementor must specify the same requirement\n+  --> $DIR/reject-specialized-drops-8142.rs:21:1\n+   |\n+LL | union Union<T: Copy> { f: T }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0367]: `Drop` impl requires `'adds_bnd : 'al` but the struct it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:23:20\n    |\n-LL | / impl<'al,'adds_bnd:'al> Drop for K<'al,'adds_bnd> {                        // REJECT\n-LL | |\n-LL | |     fn drop(&mut self) { } }\n-   | |____________________________^\n+LL | impl<'al,'adds_bnd:'al> Drop for K<'al,'adds_bnd> {                        // REJECT\n+   |                    ^^^\n    |\n-note: The same requirement must be part of the struct/enum definition\n+note: the implementor must specify the same requirement\n   --> $DIR/reject-specialized-drops-8142.rs:5:1\n    |\n LL | struct K<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0367]: The requirement `'adds_bnd : 'al` is added only by the Drop impl.\n-  --> $DIR/reject-specialized-drops-8142.rs:23:1\n+error[E0367]: `Drop` impl requires `'adds_bnd : 'al` but the struct it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:27:67\n    |\n-LL | / impl<'al,'adds_bnd>     Drop for L<'al,'adds_bnd> where 'adds_bnd:'al {    // REJECT\n-LL | |\n-LL | |     fn drop(&mut self) { } }\n-   | |____________________________^\n+LL | impl<'al,'adds_bnd>     Drop for L<'al,'adds_bnd> where 'adds_bnd:'al {    // REJECT\n+   |                                                                   ^^^\n    |\n-note: The same requirement must be part of the struct/enum definition\n+note: the implementor must specify the same requirement\n   --> $DIR/reject-specialized-drops-8142.rs:6:1\n    |\n LL | struct L<'l1,'l2> { x: &'l1 i8, y: &'l2 u8 }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/reject-specialized-drops-8142.rs:29:1\n+  --> $DIR/reject-specialized-drops-8142.rs:33:1\n    |\n LL | impl                    Drop for N<'static>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n@@ -41,56 +49,56 @@ LL | struct N<'n> { x: &'n i8 }\n    |          ^^\n    = note: ...does not necessarily outlive the static lifetime\n \n-error[E0366]: Implementations of Drop cannot be specialized\n-  --> $DIR/reject-specialized-drops-8142.rs:36:1\n+error[E0366]: `Drop` impls cannot be specialized\n+  --> $DIR/reject-specialized-drops-8142.rs:40:1\n    |\n LL | impl              Drop for P<i8>          { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: Use same sequence of generic type and region parameters that is on the struct/enum definition\n+note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n   --> $DIR/reject-specialized-drops-8142.rs:10:1\n    |\n LL | struct P<Tp> { x: *const Tp }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0367]: The requirement `AddsBnd: Bound` is added only by the Drop impl.\n-  --> $DIR/reject-specialized-drops-8142.rs:39:1\n+error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the struct it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:43:14\n    |\n LL | impl<AddsBnd:Bound> Drop for Q<AddsBnd> { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^\n    |\n-note: The same requirement must be part of the struct/enum definition\n+note: the implementor must specify the same requirement\n   --> $DIR/reject-specialized-drops-8142.rs:11:1\n    |\n LL | struct Q<Tq> { x: *const Tq }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0367]: The requirement `AddsRBnd : 'rbnd` is added only by the Drop impl.\n-  --> $DIR/reject-specialized-drops-8142.rs:42:1\n+error[E0367]: `Drop` impl requires `AddsRBnd : 'rbnd` but the struct it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:46:21\n    |\n LL | impl<'rbnd,AddsRBnd:'rbnd> Drop for R<AddsRBnd> { fn drop(&mut self) { } } // REJECT\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^\n    |\n-note: The same requirement must be part of the struct/enum definition\n+note: the implementor must specify the same requirement\n   --> $DIR/reject-specialized-drops-8142.rs:12:1\n    |\n LL | struct R<Tr> { x: *const Tr }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0366]: Implementations of Drop cannot be specialized\n-  --> $DIR/reject-specialized-drops-8142.rs:51:1\n+error[E0366]: `Drop` impls cannot be specialized\n+  --> $DIR/reject-specialized-drops-8142.rs:55:1\n    |\n LL | impl<One>         Drop for V<One,One>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: Use same sequence of generic type and region parameters that is on the struct/enum definition\n+note: use the same sequence of generic type, lifetime and const parameters as the struct definition\n   --> $DIR/reject-specialized-drops-8142.rs:16:1\n    |\n LL | struct V<Tva, Tvb> { x: *const Tva, y: *const Tvb }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'lw` due to conflicting requirements\n-  --> $DIR/reject-specialized-drops-8142.rs:54:1\n+  --> $DIR/reject-specialized-drops-8142.rs:58:1\n    |\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -106,14 +114,38 @@ note: ...but the lifetime must also be valid for the lifetime `'l2` as defined o\n LL | struct W<'l1, 'l2> { x: &'l1 i8, y: &'l2 u8 }\n    |               ^^^\n note: ...so that the types are compatible\n-  --> $DIR/reject-specialized-drops-8142.rs:54:1\n+  --> $DIR/reject-specialized-drops-8142.rs:58:1\n    |\n LL | impl<'lw>         Drop for W<'lw,'lw>     { fn drop(&mut self) { } } // REJECT\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected  `W<'l1, 'l2>`\n               found  `W<'_, '_>`\n \n-error: aborting due to 8 previous errors\n+error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the enum it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:61:14\n+   |\n+LL | impl<AddsBnd:Bound> Drop for Enum<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+   |              ^^^^^\n+   |\n+note: the implementor must specify the same requirement\n+  --> $DIR/reject-specialized-drops-8142.rs:19:1\n+   |\n+LL | enum Enum<T> { Variant(T) }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the struct it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:64:14\n+   |\n+LL | impl<AddsBnd:Bound> Drop for TupleStruct<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+   |              ^^^^^\n+   |\n+note: the implementor must specify the same requirement\n+  --> $DIR/reject-specialized-drops-8142.rs:20:1\n+   |\n+LL | struct TupleStruct<T>(T);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 11 previous errors\n \n Some errors have detailed explanations: E0308, E0366, E0367, E0495.\n For more information about an error, try `rustc --explain E0308`."}]}