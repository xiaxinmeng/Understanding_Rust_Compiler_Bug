{"sha": "784713ec683c7cce0a1d4aa712a376317384d62c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NDcxM2VjNjgzYzdjY2UwYTFkNGFhNzEyYTM3NjMxNzM4NGQ2MmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-20T19:20:54Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-20T19:48:47Z"}, "message": "rt: Add a canary value to the end of every stack\n\nCheck it on upcall entry and exit, and on stack deletion", "tree": {"sha": "d8063109957b61abc274df5fda54c30273e45eb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8063109957b61abc274df5fda54c30273e45eb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/784713ec683c7cce0a1d4aa712a376317384d62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/784713ec683c7cce0a1d4aa712a376317384d62c", "html_url": "https://github.com/rust-lang/rust/commit/784713ec683c7cce0a1d4aa712a376317384d62c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/784713ec683c7cce0a1d4aa712a376317384d62c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4475ec863dd6c00eba67bc8111ce5fbe72409c9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4475ec863dd6c00eba67bc8111ce5fbe72409c9e", "html_url": "https://github.com/rust-lang/rust/commit/4475ec863dd6c00eba67bc8111ce5fbe72409c9e"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "125a2900ca02b8c1e9e035cc7fd725a4734bbc45", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/784713ec683c7cce0a1d4aa712a376317384d62c/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/784713ec683c7cce0a1d4aa712a376317384d62c/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=784713ec683c7cce0a1d4aa712a376317384d62c", "patch": "@@ -49,6 +49,12 @@\n #endif\n #endif\n \n+// A value that goes at the end of the stack and must not be touched\n+const uint8_t stack_canary[] = {0xAB, 0xCD, 0xAB, 0xCD,\n+                                0xAB, 0xCD, 0xAB, 0xCD,\n+                                0xAB, 0xCD, 0xAB, 0xCD,\n+                                0xAB, 0xCD, 0xAB, 0xCD};\n+\n // Stack size\n size_t g_custom_min_stack_size = 0;\n \n@@ -95,7 +101,8 @@ config_valgrind_stack(stk_seg *stk) {\n     // old stack segments, since the act of popping the stack previously\n     // caused valgrind to consider the whole thing inaccessible.\n     size_t sz = stk->end - (uintptr_t)&stk->data[0];\n-    VALGRIND_MAKE_MEM_UNDEFINED(stk->data, sz);\n+    VALGRIND_MAKE_MEM_UNDEFINED(stk->data + sizeof(stack_canary),\n+                                sz - sizeof(stack_canary));\n #endif\n }\n \n@@ -110,6 +117,18 @@ free_stk(rust_task *task, stk_seg *stk) {\n     task->free(stk);\n }\n \n+static void\n+add_stack_canary(stk_seg *stk) {\n+    memcpy(stk->data, stack_canary, sizeof(stack_canary));\n+    assert(sizeof(stack_canary) == 16 && \"Stack canary was not the expected size\");\n+}\n+\n+static void\n+check_stack_canary(stk_seg *stk) {\n+    assert(!memcmp(stk->data, stack_canary, sizeof(stack_canary))\n+      && \"Somebody killed the canary\");\n+}\n+\n static stk_seg*\n new_stk(rust_scheduler *sched, rust_task *task, size_t requested_sz)\n {\n@@ -151,6 +170,7 @@ new_stk(rust_scheduler *sched, rust_task *task, size_t requested_sz)\n     stk_seg *stk = (stk_seg *)task->malloc(sz, \"stack\");\n     LOGPTR(task->sched, \"new stk\", (uintptr_t)stk);\n     memset(stk, 0, sizeof(stk_seg));\n+    add_stack_canary(stk);\n     stk->prev = NULL;\n     stk->next = task->stk;\n     stk->end = (uintptr_t) &stk->data[rust_stk_sz + RED_ZONE_SIZE];\n@@ -165,6 +185,7 @@ static void\n del_stk(rust_task *task, stk_seg *stk)\n {\n     assert(stk == task->stk && \"Freeing stack segments out of order!\");\n+    check_stack_canary(stk);\n \n     task->stk = stk->next;\n \n@@ -784,6 +805,11 @@ rust_task::on_rust_stack() {\n     return sp_in_stk_seg(get_sp(), stk);\n }\n \n+void\n+rust_task::check_stack_canary() {\n+    ::check_stack_canary(stk);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "1f924793e3dd06624a26ec5b95f1c90a16d5d8cc", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/784713ec683c7cce0a1d4aa712a376317384d62c/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/784713ec683c7cce0a1d4aa712a376317384d62c/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=784713ec683c7cce0a1d4aa712a376317384d62c", "patch": "@@ -203,6 +203,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void record_stack_limit();\n     void reset_stack_limit();\n     bool on_rust_stack();\n+    void check_stack_canary();\n };\n \n //"}, {"sha": "f70f01ef983e04b0cec79c96c15c4b723497a1fc", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/784713ec683c7cce0a1d4aa712a376317384d62c/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/784713ec683c7cce0a1d4aa712a376317384d62c/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=784713ec683c7cce0a1d4aa712a376317384d62c", "patch": "@@ -27,14 +27,21 @@ check_stack_alignment() __attribute__ ((aligned (16)));\n static void check_stack_alignment() { }\n #endif\n \n+static inline void\n+do_sanity_check(rust_task *task) {\n+    check_stack_alignment();\n+    task->check_stack_canary();\n+}\n+\n #define UPCALL_SWITCH_STACK(A, F) call_upcall_on_c_stack((void*)A, (void*)F)\n \n inline void\n call_upcall_on_c_stack(void *args, void *fn_ptr) {\n-    check_stack_alignment();\n     rust_task *task = rust_scheduler::get_task();\n+    do_sanity_check(task);\n     rust_scheduler *sched = task->sched;\n     sched->c_context.call_shim_on_c_stack(args, fn_ptr);\n+    do_sanity_check(task);\n }\n \n extern \"C\" void record_sp(void *limit);\n@@ -48,8 +55,8 @@ extern \"C\" void record_sp(void *limit);\n  */\n extern \"C\" CDECL void\n upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n-    check_stack_alignment();\n     rust_task *task = rust_scheduler::get_task();\n+    do_sanity_check(task);\n \n     // FIXME (1226) - The shim functions generated by rustc contain the\n     // morestack prologue, so we need to let them know they have enough\n@@ -65,6 +72,7 @@ upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n \n     task = rust_scheduler::get_task();\n     task->record_stack_limit();\n+    do_sanity_check(task);\n }\n \n /**********************************************************************/\n@@ -634,9 +642,10 @@ upcall_del_stack() {\n // needs to acquire the value of the stack pointer\n extern \"C\" CDECL void\n upcall_reset_stack_limit() {\n-    check_stack_alignment();\n     rust_task *task = rust_scheduler::get_task();\n+    do_sanity_check(task);\n     task->reset_stack_limit();\n+    do_sanity_check(task);\n }\n \n //"}]}