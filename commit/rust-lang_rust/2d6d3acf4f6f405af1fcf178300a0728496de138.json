{"sha": "2d6d3acf4f6f405af1fcf178300a0728496de138", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNmQzYWNmNGY2ZjQwNWFmMWZjZjE3ODMwMGEwNzI4NDk2ZGUxMzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-21T18:16:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-21T18:16:43Z"}, "message": "Auto merge of #53444 - varkor:lib_features-conditional, r=michaelwoerister\n\nOnly fetch lib_features when there are unknown feature attributes\n\nAn attempt to win back some of the performance lost in https://github.com/rust-lang/rust/pull/52644#issuecomment-413761127.\n\ncc @nnethercote", "tree": {"sha": "5d83bd19ac95adbbc3f4684be5c9a77aacd9e5eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d83bd19ac95adbbc3f4684be5c9a77aacd9e5eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d6d3acf4f6f405af1fcf178300a0728496de138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d6d3acf4f6f405af1fcf178300a0728496de138", "html_url": "https://github.com/rust-lang/rust/commit/2d6d3acf4f6f405af1fcf178300a0728496de138", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d6d3acf4f6f405af1fcf178300a0728496de138/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f9f2c0095cd683b94adca133f2733aa1f88bb19", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f9f2c0095cd683b94adca133f2733aa1f88bb19", "html_url": "https://github.com/rust-lang/rust/commit/9f9f2c0095cd683b94adca133f2733aa1f88bb19"}, {"sha": "16958569af5c3dca9d1a46b0485254e2c095f022", "url": "https://api.github.com/repos/rust-lang/rust/commits/16958569af5c3dca9d1a46b0485254e2c095f022", "html_url": "https://github.com/rust-lang/rust/commit/16958569af5c3dca9d1a46b0485254e2c095f022"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "ec618de677318a613953bb3283ad4a7a9a35164d", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2d6d3acf4f6f405af1fcf178300a0728496de138/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6d3acf4f6f405af1fcf178300a0728496de138/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=2d6d3acf4f6f405af1fcf178300a0728496de138", "patch": "@@ -17,7 +17,7 @@\n use ty::TyCtxt;\n use syntax::symbol::Symbol;\n use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::Span;\n use hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use errors::DiagnosticId;\n@@ -152,11 +152,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LibFeatureCollector<'a, 'tcx> {\n \n pub fn collect<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> LibFeatures {\n     let mut collector = LibFeatureCollector::new(tcx);\n-    for &cnum in tcx.crates().iter() {\n-        for &(feature, since) in tcx.defined_lib_features(cnum).iter() {\n-            collector.collect_feature(feature, since, DUMMY_SP);\n-        }\n-    }\n     intravisit::walk_crate(&mut collector, tcx.hir.krate());\n     collector.lib_features\n }"}, {"sha": "85195b0f62e7cf58aeaaaaf3e8b55e4880c7f38f", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2d6d3acf4f6f405af1fcf178300a0728496de138/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6d3acf4f6f405af1fcf178300a0728496de138/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=2d6d3acf4f6f405af1fcf178300a0728496de138", "patch": "@@ -846,14 +846,34 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     remaining_lib_features.remove(&Symbol::intern(\"libc\"));\n     remaining_lib_features.remove(&Symbol::intern(\"test\"));\n \n-    for (feature, stable) in tcx.lib_features().to_vec() {\n-        if let Some(since) = stable {\n-            if let Some(span) = remaining_lib_features.get(&feature) {\n-                // Warn if the user has enabled an already-stable lib feature.\n-                unnecessary_stable_feature_lint(tcx, *span, feature, since);\n+    let check_features =\n+        |remaining_lib_features: &mut FxHashMap<_, _>, defined_features: &Vec<_>| {\n+            for &(feature, since) in defined_features {\n+                if let Some(since) = since {\n+                    if let Some(span) = remaining_lib_features.get(&feature) {\n+                        // Warn if the user has enabled an already-stable lib feature.\n+                        unnecessary_stable_feature_lint(tcx, *span, feature, since);\n+                    }\n+                }\n+                remaining_lib_features.remove(&feature);\n+                if remaining_lib_features.is_empty() {\n+                    break;\n+                }\n+            }\n+        };\n+\n+    // We always collect the lib features declared in the current crate, even if there are\n+    // no unknown features, because the collection also does feature attribute validation.\n+    let local_defined_features = tcx.lib_features().to_vec();\n+    if !remaining_lib_features.is_empty() {\n+        check_features(&mut remaining_lib_features, &local_defined_features);\n+\n+        for &cnum in &*tcx.crates() {\n+            if remaining_lib_features.is_empty() {\n+                break;\n             }\n+            check_features(&mut remaining_lib_features, &tcx.defined_lib_features(cnum));\n         }\n-        remaining_lib_features.remove(&feature);\n     }\n \n     for (feature, span) in remaining_lib_features {"}]}