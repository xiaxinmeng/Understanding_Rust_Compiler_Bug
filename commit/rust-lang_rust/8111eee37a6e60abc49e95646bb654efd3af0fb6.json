{"sha": "8111eee37a6e60abc49e95646bb654efd3af0fb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMTFlZWUzN2E2ZTYwYWJjNDllOTU2NDZiYjY1NGVmZDNhZjBmYjY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-30T18:14:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-30T18:14:56Z"}, "message": "Rustup to rustc 1.30.0-nightly (02cb8f2a4 2018-08-29)", "tree": {"sha": "a6e86d2f46bd7919d874f2a6fd477d2129a62821", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6e86d2f46bd7919d874f2a6fd477d2129a62821"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8111eee37a6e60abc49e95646bb654efd3af0fb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8111eee37a6e60abc49e95646bb654efd3af0fb6", "html_url": "https://github.com/rust-lang/rust/commit/8111eee37a6e60abc49e95646bb654efd3af0fb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8111eee37a6e60abc49e95646bb654efd3af0fb6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f58f94cdb12ba367c37a620e7f2f40228e691b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f58f94cdb12ba367c37a620e7f2f40228e691b1", "html_url": "https://github.com/rust-lang/rust/commit/6f58f94cdb12ba367c37a620e7f2f40228e691b1"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "8627cf66a83ee30585abe15c175df9a259e1d831", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8111eee37a6e60abc49e95646bb654efd3af0fb6/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8111eee37a6e60abc49e95646bb654efd3af0fb6/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=8111eee37a6e60abc49e95646bb654efd3af0fb6", "patch": "@@ -117,7 +117,9 @@ fn trans_fn<'a, 'tcx: 'a>(\n     // TODO: cranelift doesn't yet support some of the things needed\n     if should_codegen(tcx.sess) {\n         caches.context.func = func;\n-        module.define_function(func_id, &mut caches.context).unwrap();\n+        module\n+            .define_function(func_id, &mut caches.context)\n+            .unwrap();\n         caches.context.clear();\n     }\n }"}, {"sha": "b5ce5f198f41f3410b1fd58439bd04775f991c43", "filename": "src/constant.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8111eee37a6e60abc49e95646bb654efd3af0fb6/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8111eee37a6e60abc49e95646bb654efd3af0fb6/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=8111eee37a6e60abc49e95646bb654efd3af0fb6", "patch": "@@ -1,8 +1,10 @@\n use cranelift_module::*;\n use crate::prelude::*;\n-use rustc::mir::interpret::{read_target_uint, AllocId, AllocType, ConstValue, GlobalId};\n+use rustc::mir::interpret::{\n+    read_target_uint, AllocId, AllocType, Allocation, ConstValue, EvalResult, GlobalId,\n+};\n use rustc::ty::Const;\n-use rustc_mir::interpret::{CompileTimeEvaluator, Memory};\n+use rustc_mir::interpret::{CompileTimeEvaluator, EvalContext, Memory, MemoryKind};\n use syntax::ast::Mutability as AstMutability;\n \n #[derive(Default)]\n@@ -120,7 +122,22 @@ fn trans_const_place<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     const_: &'tcx Const<'tcx>,\n ) -> CPlace<'tcx> {\n-    let alloc = fx.tcx.const_to_allocation(const_);\n+    // Adapted from https://github.com/rust-lang/rust/pull/53671/files#diff-e0b58bb6712edaa8595ad7237542c958L551\n+    let result = || -> EvalResult<'tcx, &'tcx Allocation> {\n+        let mut ecx = EvalContext::new(\n+            fx.tcx.at(DUMMY_SP),\n+            ty::ParamEnv::reveal_all(),\n+            CompileTimeEvaluator,\n+            (),\n+        );\n+        let op = ecx.const_to_op(const_)?;\n+        let ptr = ecx.allocate(op.layout, MemoryKind::Stack)?;\n+        ecx.copy_op(op, ptr.into())?;\n+        let alloc = ecx.memory.get(ptr.to_ptr()?.alloc_id)?;\n+        Ok(fx.tcx.intern_const_alloc(alloc.clone()))\n+    };\n+    let alloc = result().expect(\"unable to convert ConstValue to Allocation\");\n+\n     //println!(\"const value: {:?} allocation: {:?}\", value, alloc);\n     let alloc_id = fx.tcx.alloc_map.lock().allocate(alloc);\n     fx.constants.todo.insert(TodoItem::Alloc(alloc_id));\n@@ -190,7 +207,7 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n                 let const_ = tcx.const_eval(ParamEnv::reveal_all().and(cid)).unwrap();\n \n                 let alloc = match const_.val {\n-                    ConstValue::ByRef(alloc, n) if n.bytes() == 0 => alloc,\n+                    ConstValue::ByRef(_alloc_id, alloc, n) if n.bytes() == 0 => alloc,\n                     _ => bug!(\"static const eval returned {:#?}\", const_),\n                 };\n \n@@ -208,7 +225,7 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a>(\n \n         data_ctx.define(\n             alloc.bytes.to_vec().into_boxed_slice(),\n-            match alloc.runtime_mutability {\n+            match alloc.mutability {\n                 AstMutability::Mutable => Writability::Writable,\n                 AstMutability::Immutable => Writability::Readonly,\n             },"}]}