{"sha": "3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63", "node_id": "C_kwDOAAsO6NoAKDNkNGMzMTI1YmViZGNjOGE0Y2M2ZGUyYTk5MjVjNzI1OWZkZTJiNjM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-01-23T06:22:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-23T06:22:04Z"}, "message": "Rollup merge of #104926 - spastorino:calculate_diverging_fallback-cleanups, r=lcnr\n\nMove relationships from FulfillmentContext to Inherited\n\nr? `@lcnr`", "tree": {"sha": "a17e6db1fcd19a296801e1eceefbe235740f61a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a17e6db1fcd19a296801e1eceefbe235740f61a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjzieMCRBK7hj4Ov3rIwAASHkIADtoRptrEu1zk8a/5Oqu7ZWq\nrEXAsoaC136KZ76aHlvNKKM3hhyhf0PWyRge5TuEsQXzhr0/lF9WkcdNa4G99TbU\n6n7gSr/EscneuPmIMxcDzealpXMPp43TTuOUvOIcNtWUylk3bzLRkZtqlHrvlyV9\nqtUsCXb/wd5G9HF6di9gwHbdFyL+C5oPjjsYgjyqKUw8sodAPyBZ9Yo1/Gye72Rz\nfxT0ak8Mocxt7H6A3uumtug58lsxNUJE4h692WMusFMhsAfEm7AxkS5STZoAKeLn\nmcx/J/mRf4Dm7L485Zr54orZwLNfiPSDjeqXN6+tdULRoX4gdMh/pF7IGKxvKzs=\n=Owl2\n-----END PGP SIGNATURE-----\n", "payload": "tree a17e6db1fcd19a296801e1eceefbe235740f61a8\nparent d3322e277311033bd6dd646b1ad7f2604db0c946\nparent b905f80036a886c359149934b0772edd2f556c2a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1674454924 +0530\ncommitter GitHub <noreply@github.com> 1674454924 +0530\n\nRollup merge of #104926 - spastorino:calculate_diverging_fallback-cleanups, r=lcnr\n\nMove relationships from FulfillmentContext to Inherited\n\nr? `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63", "html_url": "https://github.com/rust-lang/rust/commit/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3322e277311033bd6dd646b1ad7f2604db0c946", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3322e277311033bd6dd646b1ad7f2604db0c946", "html_url": "https://github.com/rust-lang/rust/commit/d3322e277311033bd6dd646b1ad7f2604db0c946"}, {"sha": "b905f80036a886c359149934b0772edd2f556c2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b905f80036a886c359149934b0772edd2f556c2a", "html_url": "https://github.com/rust-lang/rust/commit/b905f80036a886c359149934b0772edd2f556c2a"}], "stats": {"total": 174, "additions": 61, "deletions": 113}, "files": [{"sha": "943dc9b9646fc63131cd4f4394b0b530f7bbd978", "filename": "compiler/rustc_hir_typeck/src/fallback.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffallback.rs?ref=3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63", "patch": "@@ -196,8 +196,6 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n     ) -> FxHashMap<Ty<'tcx>, Ty<'tcx>> {\n         debug!(\"calculate_diverging_fallback({:?})\", unsolved_variables);\n \n-        let relationships = self.fulfillment_cx.borrow_mut().relationships().clone();\n-\n         // Construct a coercion graph where an edge `A -> B` indicates\n         // a type variable is that is coerced\n         let coercion_graph = self.create_coercion_graph();\n@@ -281,9 +279,7 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n             roots_reachable_from_non_diverging,\n         );\n \n-        debug!(\"inherited: {:#?}\", self.inh.fulfillment_cx.borrow_mut().pending_obligations());\n         debug!(\"obligations: {:#?}\", self.fulfillment_cx.borrow_mut().pending_obligations());\n-        debug!(\"relationships: {:#?}\", relationships);\n \n         // For each diverging variable, figure out whether it can\n         // reach a member of N. If so, it falls back to `()`. Else\n@@ -297,16 +293,16 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n                 .depth_first_search(root_vid)\n                 .any(|n| roots_reachable_from_non_diverging.visited(n));\n \n-            let mut relationship = ty::FoundRelationships { self_in_trait: false, output: false };\n+            let mut found_infer_var_info = ty::InferVarInfo { self_in_trait: false, output: false };\n \n-            for (vid, rel) in relationships.iter() {\n-                if self.root_var(*vid) == root_vid {\n-                    relationship.self_in_trait |= rel.self_in_trait;\n-                    relationship.output |= rel.output;\n+            for (vid, info) in self.inh.infer_var_info.borrow().iter() {\n+                if self.infcx.root_var(*vid) == root_vid {\n+                    found_infer_var_info.self_in_trait |= info.self_in_trait;\n+                    found_infer_var_info.output |= info.output;\n                 }\n             }\n \n-            if relationship.self_in_trait && relationship.output {\n+            if found_infer_var_info.self_in_trait && found_infer_var_info.output {\n                 // This case falls back to () to ensure that the code pattern in\n                 // tests/ui/never_type/fallback-closure-ret.rs continues to\n                 // compile when never_type_fallback is enabled."}, {"sha": "ba34f299453ecff0473190c130ccf5643542d351", "filename": "compiler/rustc_hir_typeck/src/inherited.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Finherited.rs?ref=3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63", "patch": "@@ -1,6 +1,6 @@\n use super::callee::DeferredCallResolution;\n \n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::HirIdMap;\n@@ -10,7 +10,8 @@ use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::LocalDefIdMap;\n use rustc_span::{self, Span};\n-use rustc_trait_selection::traits::{self, TraitEngine, TraitEngineExt as _};\n+use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n+use rustc_trait_selection::traits::{self, PredicateObligation, TraitEngine, TraitEngineExt as _};\n \n use std::cell::RefCell;\n use std::ops::Deref;\n@@ -63,6 +64,8 @@ pub struct Inherited<'tcx> {\n     /// we record that type variable here. This is later used to inform\n     /// fallback. See the `fallback` module for details.\n     pub(super) diverging_type_vars: RefCell<FxHashSet<Ty<'tcx>>>,\n+\n+    pub(super) infer_var_info: RefCell<FxHashMap<ty::TyVid, ty::InferVarInfo>>,\n }\n \n impl<'tcx> Deref for Inherited<'tcx> {\n@@ -128,6 +131,7 @@ impl<'tcx> Inherited<'tcx> {\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n             diverging_type_vars: RefCell::new(Default::default()),\n             body_id,\n+            infer_var_info: RefCell::new(Default::default()),\n         }\n     }\n \n@@ -136,6 +140,9 @@ impl<'tcx> Inherited<'tcx> {\n         if obligation.has_escaping_bound_vars() {\n             span_bug!(obligation.cause.span, \"escaping bound vars in predicate {:?}\", obligation);\n         }\n+\n+        self.update_infer_var_info(&obligation);\n+\n         self.fulfillment_cx.borrow_mut().register_predicate_obligation(self, obligation);\n     }\n \n@@ -152,4 +159,43 @@ impl<'tcx> Inherited<'tcx> {\n         self.register_predicates(infer_ok.obligations);\n         infer_ok.value\n     }\n+\n+    pub fn update_infer_var_info(&self, obligation: &PredicateObligation<'tcx>) {\n+        let infer_var_info = &mut self.infer_var_info.borrow_mut();\n+\n+        // (*) binder skipped\n+        if let ty::PredicateKind::Clause(ty::Clause::Trait(tpred)) = obligation.predicate.kind().skip_binder()\n+            && let Some(ty) = self.shallow_resolve(tpred.self_ty()).ty_vid().map(|t| self.root_var(t))\n+            && self.tcx.lang_items().sized_trait().map_or(false, |st| st != tpred.trait_ref.def_id)\n+        {\n+            let new_self_ty = self.tcx.types.unit;\n+\n+            // Then construct a new obligation with Self = () added\n+            // to the ParamEnv, and see if it holds.\n+            let o = obligation.with(self.tcx,\n+                obligation\n+                    .predicate\n+                    .kind()\n+                    .rebind(\n+                        // (*) binder moved here\n+                        ty::PredicateKind::Clause(ty::Clause::Trait(tpred.with_self_ty(self.tcx, new_self_ty)))\n+                    ),\n+            );\n+            // Don't report overflow errors. Otherwise equivalent to may_hold.\n+            if let Ok(result) = self.probe(|_| self.evaluate_obligation(&o)) && result.may_apply() {\n+                infer_var_info.entry(ty).or_default().self_in_trait = true;\n+            }\n+        }\n+\n+        if let ty::PredicateKind::Clause(ty::Clause::Projection(predicate)) =\n+            obligation.predicate.kind().skip_binder()\n+        {\n+            // If the projection predicate (Foo::Bar == X) has X as a non-TyVid,\n+            // we need to make it into one.\n+            if let Some(vid) = predicate.term.ty().and_then(|ty| ty.ty_vid()) {\n+                debug!(\"infer_var_info: {:?}.output = true\", vid);\n+                infer_var_info.entry(vid).or_default().output = true;\n+            }\n+        }\n+    }\n }"}, {"sha": "fcde00056cbf1c4cf4738e80e851497506a05dcf", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63", "patch": "@@ -1,6 +1,5 @@\n use crate::infer::InferCtxt;\n use crate::traits::Obligation;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, ToPredicate, Ty};\n \n@@ -42,8 +41,6 @@ pub trait TraitEngine<'tcx>: 'tcx {\n     fn select_where_possible(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>>;\n \n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>>;\n-\n-    fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships>;\n }\n \n pub trait TraitEngineExt<'tcx> {"}, {"sha": "f83bceca3b53ba27bdcab4885698a9ea0193c60d", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63", "patch": "@@ -2619,7 +2619,7 @@ impl<'tcx> fmt::Debug for SymbolName<'tcx> {\n }\n \n #[derive(Debug, Default, Copy, Clone)]\n-pub struct FoundRelationships {\n+pub struct InferVarInfo {\n     /// This is true if we identified that this Ty (`?T`) is found in a `?T: Foo`\n     /// obligation, where:\n     ///"}, {"sha": "40b9bedc84fd3afd8292c2c721bee97d1d8b62de", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63", "patch": "@@ -1,14 +1,12 @@\n use std::mem;\n \n-use rustc_data_structures::fx::FxHashMap;\n use rustc_infer::{\n     infer::InferCtxt,\n     traits::{\n         query::NoSolution, FulfillmentError, FulfillmentErrorCode, PredicateObligation,\n         SelectionError, TraitEngine,\n     },\n };\n-use rustc_middle::ty;\n \n use super::{search_graph, Certainty, EvalCtxt};\n \n@@ -102,8 +100,4 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n         self.obligations.clone()\n     }\n-\n-    fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships> {\n-        unimplemented!(\"Should be moved out of `TraitEngine`\")\n-    }\n }"}, {"sha": "61d09189798ea2d82eda6eff65546dde89c3adb2", "filename": "compiler/rustc_trait_selection/src/traits/chalk_fulfill.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fchalk_fulfill.rs?ref=3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63", "patch": "@@ -7,24 +7,18 @@ use crate::traits::{\n     ChalkEnvironmentAndGoal, FulfillmentError, FulfillmentErrorCode, PredicateObligation,\n     SelectionError, TraitEngine,\n };\n-use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n-use rustc_middle::ty::{self, TypeVisitable};\n+use rustc_data_structures::fx::FxIndexSet;\n+use rustc_middle::ty::TypeVisitable;\n \n pub struct FulfillmentContext<'tcx> {\n     obligations: FxIndexSet<PredicateObligation<'tcx>>,\n \n-    relationships: FxHashMap<ty::TyVid, ty::FoundRelationships>,\n-\n     usable_in_snapshot: bool,\n }\n \n impl FulfillmentContext<'_> {\n     pub(super) fn new() -> Self {\n-        FulfillmentContext {\n-            obligations: FxIndexSet::default(),\n-            relationships: FxHashMap::default(),\n-            usable_in_snapshot: false,\n-        }\n+        FulfillmentContext { obligations: FxIndexSet::default(), usable_in_snapshot: false }\n     }\n \n     pub(crate) fn new_in_snapshot() -> Self {\n@@ -43,8 +37,6 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         }\n         let obligation = infcx.resolve_vars_if_possible(obligation);\n \n-        super::relationships::update(self, infcx, &obligation);\n-\n         self.obligations.insert(obligation);\n     }\n \n@@ -154,8 +146,4 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n         self.obligations.iter().cloned().collect()\n     }\n-\n-    fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships> {\n-        &mut self.relationships\n-    }\n }"}, {"sha": "5a58d37e18362694dc1b5ec00ec16c22c20a15c7", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63", "patch": "@@ -1,5 +1,4 @@\n use crate::infer::{InferCtxt, TyOrConstInferVar};\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{Error, ForestObligation, Outcome};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n@@ -54,8 +53,6 @@ pub struct FulfillmentContext<'tcx> {\n     // fulfillment context.\n     predicates: ObligationForest<PendingPredicateObligation<'tcx>>,\n \n-    relationships: FxHashMap<ty::TyVid, ty::FoundRelationships>,\n-\n     // Is it OK to register obligations into this infcx inside\n     // an infcx snapshot?\n     //\n@@ -85,19 +82,11 @@ static_assert_size!(PendingPredicateObligation<'_>, 72);\n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     /// Creates a new fulfillment context.\n     pub(super) fn new() -> FulfillmentContext<'tcx> {\n-        FulfillmentContext {\n-            predicates: ObligationForest::new(),\n-            relationships: FxHashMap::default(),\n-            usable_in_snapshot: false,\n-        }\n+        FulfillmentContext { predicates: ObligationForest::new(), usable_in_snapshot: false }\n     }\n \n     pub(super) fn new_in_snapshot() -> FulfillmentContext<'tcx> {\n-        FulfillmentContext {\n-            predicates: ObligationForest::new(),\n-            relationships: FxHashMap::default(),\n-            usable_in_snapshot: true,\n-        }\n+        FulfillmentContext { predicates: ObligationForest::new(), usable_in_snapshot: true }\n     }\n \n     /// Attempts to select obligations using `selcx`.\n@@ -139,8 +128,6 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n \n         assert!(!infcx.is_in_snapshot() || self.usable_in_snapshot);\n \n-        super::relationships::update(self, infcx, &obligation);\n-\n         self.predicates\n             .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });\n     }\n@@ -164,10 +151,6 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n         self.predicates.map_pending_obligations(|o| o.obligation.clone())\n     }\n-\n-    fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships> {\n-        &mut self.relationships\n-    }\n }\n \n struct FulfillProcessor<'a, 'tcx> {"}, {"sha": "3c640cdc503ceba9010ffe62f5119be36868ff2f", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63", "patch": "@@ -14,7 +14,6 @@ mod object_safety;\n pub mod outlives_bounds;\n mod project;\n pub mod query;\n-pub(crate) mod relationships;\n mod select;\n mod specialize;\n mod structural_match;"}, {"sha": "34b5fc4891eb36643e65c2412e8ac70330559e55", "filename": "compiler/rustc_trait_selection/src/traits/relationships.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d3322e277311033bd6dd646b1ad7f2604db0c946/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3322e277311033bd6dd646b1ad7f2604db0c946/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs?ref=d3322e277311033bd6dd646b1ad7f2604db0c946", "patch": "@@ -1,48 +0,0 @@\n-use crate::infer::InferCtxt;\n-use crate::traits::query::evaluate_obligation::InferCtxtExt;\n-use crate::traits::PredicateObligation;\n-use rustc_infer::traits::TraitEngine;\n-use rustc_middle::ty;\n-\n-pub(crate) fn update<'tcx, T>(\n-    engine: &mut T,\n-    infcx: &InferCtxt<'tcx>,\n-    obligation: &PredicateObligation<'tcx>,\n-) where\n-    T: TraitEngine<'tcx>,\n-{\n-    // (*) binder skipped\n-    if let ty::PredicateKind::Clause(ty::Clause::Trait(tpred)) = obligation.predicate.kind().skip_binder()\n-        && let Some(ty) = infcx.shallow_resolve(tpred.self_ty()).ty_vid().map(|t| infcx.root_var(t))\n-        && infcx.tcx.lang_items().sized_trait().map_or(false, |st| st != tpred.trait_ref.def_id)\n-    {\n-        let new_self_ty = infcx.tcx.types.unit;\n-\n-        // Then construct a new obligation with Self = () added\n-        // to the ParamEnv, and see if it holds.\n-        let o = obligation.with(infcx.tcx,\n-            obligation\n-                .predicate\n-                .kind()\n-                .rebind(\n-                    // (*) binder moved here\n-                    ty::PredicateKind::Clause(ty::Clause::Trait(tpred.with_self_ty(infcx.tcx, new_self_ty)))\n-                ),\n-        );\n-        // Don't report overflow errors. Otherwise equivalent to may_hold.\n-        if let Ok(result) = infcx.probe(|_| infcx.evaluate_obligation(&o)) && result.may_apply() {\n-            engine.relationships().entry(ty).or_default().self_in_trait = true;\n-        }\n-    }\n-\n-    if let ty::PredicateKind::Clause(ty::Clause::Projection(predicate)) =\n-        obligation.predicate.kind().skip_binder()\n-    {\n-        // If the projection predicate (Foo::Bar == X) has X as a non-TyVid,\n-        // we need to make it into one.\n-        if let Some(vid) = predicate.term.ty().and_then(|ty| ty.ty_vid()) {\n-            debug!(\"relationship: {:?}.output = true\", vid);\n-            engine.relationships().entry(vid).or_default().output = true;\n-        }\n-    }\n-}"}, {"sha": "bd65737ee39895df9e33d39ee3717ba52dbbd06d", "filename": "tests/ui/traits/new-solver/fn-trait-closure.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait-closure.rs?ref=3d4c3125bebdcc8a4cc6de2a9925c7259fde2b63", "patch": "@@ -1,12 +1,5 @@\n // compile-flags: -Ztrait-solver=next\n-// known-bug: unknown\n-// failure-status: 101\n-// dont-check-compiler-stderr\n-\n-// This test will fail until we fix `FulfillmentCtxt::relationships`. That's\n-// because we create a type variable for closure upvar types, which is not\n-// constrained until after we try to do fallback on diverging type variables.\n-// Thus, we will call that function, which is unimplemented.\n+// check-pass\n \n fn require_fn(_: impl Fn() -> i32) {}\n "}]}