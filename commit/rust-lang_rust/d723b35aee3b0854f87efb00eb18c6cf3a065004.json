{"sha": "d723b35aee3b0854f87efb00eb18c6cf3a065004", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MjNiMzVhZWUzYjA4NTRmODdlZmIwMGViMThjNmNmM2EwNjUwMDQ=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-10-18T13:54:25Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-10-18T13:54:25Z"}, "message": "Omit proc macros from `must_use_candidate`", "tree": {"sha": "29a2e9bfcd11e8fbdc4c67fb528a3fef7e6522ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29a2e9bfcd11e8fbdc4c67fb528a3fef7e6522ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d723b35aee3b0854f87efb00eb18c6cf3a065004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d723b35aee3b0854f87efb00eb18c6cf3a065004", "html_url": "https://github.com/rust-lang/rust/commit/d723b35aee3b0854f87efb00eb18c6cf3a065004", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d723b35aee3b0854f87efb00eb18c6cf3a065004/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0b2411f06a417266baaac2f0ea431138da33bf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b2411f06a417266baaac2f0ea431138da33bf3", "html_url": "https://github.com/rust-lang/rust/commit/c0b2411f06a417266baaac2f0ea431138da33bf3"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "8e295af234c9a5beb5c5e8bf5dfebaa7c7b4f4fe", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d723b35aee3b0854f87efb00eb18c6cf3a065004/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d723b35aee3b0854f87efb00eb18c6cf3a065004/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=d723b35aee3b0854f87efb00eb18c6cf3a065004", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n-    iter_input_pats, match_def_path, qpath_res, return_ty, snippet, snippet_opt, span_help_and_lint, span_lint,\n-    span_lint_and_then, type_is_unsafe_function,\n+    attrs::is_proc_macro, iter_input_pats, match_def_path, qpath_res, return_ty, snippet, snippet_opt,\n+    span_help_and_lint, span_lint, span_lint_and_then, type_is_unsafe_function,\n };\n use matches::matches;\n use rustc::hir::{self, def::Res, def_id::DefId, intravisit};\n@@ -234,7 +234,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n                 check_needless_must_use(cx, decl, item.hir_id, item.span, fn_header_span, attr);\n                 return;\n             }\n-            if cx.access_levels.is_exported(item.hir_id) {\n+            if cx.access_levels.is_exported(item.hir_id) && !is_proc_macro(&item.attrs) {\n                 check_must_use_candidate(\n                     cx,\n                     decl,\n@@ -254,7 +254,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n             if let Some(attr) = attr {\n                 let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n                 check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n-            } else if cx.access_levels.is_exported(item.hir_id) {\n+            } else if cx.access_levels.is_exported(item.hir_id) && !is_proc_macro(&item.attrs) {\n                 check_must_use_candidate(\n                     cx,\n                     &sig.decl,\n@@ -284,7 +284,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n                 let body = cx.tcx.hir().body(eid);\n                 Self::check_raw_ptr(cx, sig.header.unsafety, &sig.decl, body, item.hir_id);\n \n-                if attr.is_none() && cx.access_levels.is_exported(item.hir_id) {\n+                if attr.is_none() && cx.access_levels.is_exported(item.hir_id) && !is_proc_macro(&item.attrs) {\n                     check_must_use_candidate(\n                         cx,\n                         &sig.decl,"}, {"sha": "2520f366b3270214b309d92032ddd4fa00fb495f", "filename": "clippy_lints/src/utils/attrs.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d723b35aee3b0854f87efb00eb18c6cf3a065004/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d723b35aee3b0854f87efb00eb18c6cf3a065004/clippy_lints%2Fsrc%2Futils%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fattrs.rs?ref=d723b35aee3b0854f87efb00eb18c6cf3a065004", "patch": "@@ -114,3 +114,16 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n         }\n     }\n }\n+\n+/// Return true if the attributes contain any of `proc_macro`,\n+/// `proc_macro_derive` or `proc_macro_attribute`, false otherwise\n+pub fn is_proc_macro(attrs: &[ast::Attribute]) -> bool {\n+    use syntax_pos::Symbol;\n+\n+    let syms = [\n+        Symbol::intern(\"proc_macro\"),\n+        Symbol::intern(\"proc_macro_derive\"),\n+        Symbol::intern(\"proc_macro_attribute\"),\n+    ];\n+    attrs.iter().any(|attr| syms.iter().any(move |&s| attr.check_name(s)))\n+}"}, {"sha": "59914b8b8f62729804879715e92d77c43a41a101", "filename": "tests/ui/proc_macro.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d723b35aee3b0854f87efb00eb18c6cf3a065004/tests%2Fui%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d723b35aee3b0854f87efb00eb18c6cf3a065004/tests%2Fui%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc_macro.rs?ref=d723b35aee3b0854f87efb00eb18c6cf3a065004", "patch": "@@ -1,8 +1,26 @@\n //! Check that we correctly lint procedural macros.\n-\n #![crate_type = \"proc-macro\"]\n \n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n #[allow(dead_code)]\n fn f() {\n     let _x = 3.14;\n }\n+\n+#[proc_macro]\n+pub fn mybangmacro(t: TokenStream) -> TokenStream {\n+    t\n+}\n+\n+#[proc_macro_derive(MyDerivedTrait)]\n+pub fn myderive(t: TokenStream) -> TokenStream {\n+    t\n+}\n+\n+#[proc_macro_attribute]\n+pub fn myattribute(t: TokenStream, a: TokenStream) -> TokenStream {\n+    t\n+}"}, {"sha": "872cbc66af622669d21daa5ae1883d0ac4b97c40", "filename": "tests/ui/proc_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d723b35aee3b0854f87efb00eb18c6cf3a065004/tests%2Fui%2Fproc_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d723b35aee3b0854f87efb00eb18c6cf3a065004/tests%2Fui%2Fproc_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc_macro.stderr?ref=d723b35aee3b0854f87efb00eb18c6cf3a065004", "patch": "@@ -1,5 +1,5 @@\n error: approximate value of `f{32, 64}::consts::PI` found. Consider using it directly\n-  --> $DIR/proc_macro.rs:7:14\n+  --> $DIR/proc_macro.rs:10:14\n    |\n LL |     let _x = 3.14;\n    |              ^^^^"}]}