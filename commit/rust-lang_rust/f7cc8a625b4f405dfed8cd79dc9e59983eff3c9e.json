{"sha": "f7cc8a625b4f405dfed8cd79dc9e59983eff3c9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3Y2M4YTYyNWI0ZjQwNWRmZWQ4Y2Q3OWRjOWU1OTk4M2VmZjNjOWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-19T23:31:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-19T23:31:57Z"}, "message": "auto merge of #11643 : kballard/rust/path-root-path, r=erickt", "tree": {"sha": "dddc37722f21b27e556132bd1b023735a4313e85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dddc37722f21b27e556132bd1b023735a4313e85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7cc8a625b4f405dfed8cd79dc9e59983eff3c9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7cc8a625b4f405dfed8cd79dc9e59983eff3c9e", "html_url": "https://github.com/rust-lang/rust/commit/f7cc8a625b4f405dfed8cd79dc9e59983eff3c9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7cc8a625b4f405dfed8cd79dc9e59983eff3c9e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18061e85b79915deb9f04c78aac7b63b837432dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/18061e85b79915deb9f04c78aac7b63b837432dd", "html_url": "https://github.com/rust-lang/rust/commit/18061e85b79915deb9f04c78aac7b63b837432dd"}, {"sha": "b3c93b34f3fa81e9e2ade0cd05e0516faa7150ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3c93b34f3fa81e9e2ade0cd05e0516faa7150ae", "html_url": "https://github.com/rust-lang/rust/commit/b3c93b34f3fa81e9e2ade0cd05e0516faa7150ae"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "3ba0878b0e657443b84ba07814d9978519393177", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7cc8a625b4f405dfed8cd79dc9e59983eff3c9e/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cc8a625b4f405dfed8cd79dc9e59983eff3c9e/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=f7cc8a625b4f405dfed8cd79dc9e59983eff3c9e", "patch": "@@ -400,7 +400,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n \n     /// Returns a Path that represents the filesystem root that `self` is rooted in.\n     ///\n-    /// If `self` is not absolute, or vol-relative in the case of Windows, this returns None.\n+    /// If `self` is not absolute, or vol/cwd-relative in the case of Windows, this returns None.\n     fn root_path(&self) -> Option<Self>;\n \n     /// Pushes a path (as a byte vector or string) onto `self`."}, {"sha": "0e5b7894e748cfb192d8af27ce3b39a9f7f6de53", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f7cc8a625b4f405dfed8cd79dc9e59983eff3c9e/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cc8a625b4f405dfed8cd79dc9e59983eff3c9e/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=f7cc8a625b4f405dfed8cd79dc9e59983eff3c9e", "patch": "@@ -432,9 +432,12 @@ impl GenericPath for Path {\n     }\n \n     fn root_path(&self) -> Option<Path> {\n-        if self.is_absolute() {\n+        if self.prefix.is_some() {\n             Some(Path::new(match self.prefix {\n-                Some(VerbatimDiskPrefix)|Some(DiskPrefix) => {\n+                Some(DiskPrefix) if self.is_absolute() => {\n+                    self.repr.slice_to(self.prefix_len()+1)\n+                }\n+                Some(VerbatimDiskPrefix) => {\n                     self.repr.slice_to(self.prefix_len()+1)\n                 }\n                 _ => self.repr.slice_to(self.prefix_len())\n@@ -1688,7 +1691,7 @@ mod tests {\n     fn test_root_path() {\n         assert_eq!(Path::new(\"a\\\\b\\\\c\").root_path(), None);\n         assert_eq!(Path::new(\"\\\\a\\\\b\\\\c\").root_path(), Some(Path::new(\"\\\\\")));\n-        assert_eq!(Path::new(\"C:a\").root_path(), None);\n+        assert_eq!(Path::new(\"C:a\").root_path(), Some(Path::new(\"C:\")));\n         assert_eq!(Path::new(\"C:\\\\a\").root_path(), Some(Path::new(\"C:\\\\\")));\n         assert_eq!(Path::new(\"\\\\\\\\a\\\\b\\\\c\").root_path(), Some(Path::new(\"\\\\\\\\a\\\\b\")));\n         assert_eq!(Path::new(\"\\\\\\\\?\\\\a\\\\b\").root_path(), Some(Path::new(\"\\\\\\\\?\\\\a\")));"}]}