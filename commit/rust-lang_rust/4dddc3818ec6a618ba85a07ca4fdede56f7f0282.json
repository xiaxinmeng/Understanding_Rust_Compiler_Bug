{"sha": "4dddc3818ec6a618ba85a07ca4fdede56f7f0282", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZGRjMzgxOGVjNmE2MThiYTg1YTA3Y2E0ZmRlZGU1NmY3ZjAyODI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-07T13:11:18Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-07T13:13:23Z"}, "message": "fix null pointer error messages", "tree": {"sha": "9d8288ed24c717d27524235f1a89cb8f16a92f76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d8288ed24c717d27524235f1a89cb8f16a92f76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dddc3818ec6a618ba85a07ca4fdede56f7f0282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dddc3818ec6a618ba85a07ca4fdede56f7f0282", "html_url": "https://github.com/rust-lang/rust/commit/4dddc3818ec6a618ba85a07ca4fdede56f7f0282", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dddc3818ec6a618ba85a07ca4fdede56f7f0282/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac888e8675182c703c2cd097957878faf88dad94", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac888e8675182c703c2cd097957878faf88dad94", "html_url": "https://github.com/rust-lang/rust/commit/ac888e8675182c703c2cd097957878faf88dad94"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "9c3bed6ec0ad8b8c618000eda597692e6526b5f6", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4dddc3818ec6a618ba85a07ca4fdede56f7f0282/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dddc3818ec6a618ba85a07ca4fdede56f7f0282/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=4dddc3818ec6a618ba85a07ca4fdede56f7f0282", "patch": "@@ -170,22 +170,25 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n /// Details of why a pointer had to be in-bounds.\n #[derive(Debug, Copy, Clone, TyEncodable, TyDecodable, HashStable)]\n pub enum CheckInAllocMsg {\n+    /// We are access memory.\n     MemoryAccessTest,\n+    /// We are doing pointer arithmetic.\n     PointerArithmeticTest,\n+    /// None of the above -- generic/unspecific inbounds test.\n     InboundsTest,\n }\n \n impl fmt::Display for CheckInAllocMsg {\n     /// When this is printed as an error the context looks like this\n-    /// \"{test name} failed: pointer must be in-bounds at offset...\"\n+    /// \"{msg}pointer must be in-bounds at offset...\"\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n             \"{}\",\n             match *self {\n-                CheckInAllocMsg::MemoryAccessTest => \"memory access\",\n-                CheckInAllocMsg::PointerArithmeticTest => \"pointer arithmetic\",\n-                CheckInAllocMsg::InboundsTest => \"inbounds test\",\n+                CheckInAllocMsg::MemoryAccessTest => \"memory access failed: \",\n+                CheckInAllocMsg::PointerArithmeticTest => \"pointer arithmetic failed: \",\n+                CheckInAllocMsg::InboundsTest => \"\",\n             }\n         )\n     }\n@@ -299,18 +302,18 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n             }\n             PointerOutOfBounds { ptr, msg, allocation_size } => write!(\n                 f,\n-                \"{} failed: pointer must be in-bounds at offset {}, \\\n+                \"{}pointer must be in-bounds at offset {}, \\\n                            but is outside bounds of {} which has size {}\",\n                 msg,\n                 ptr.offset.bytes(),\n                 ptr.alloc_id,\n                 allocation_size.bytes()\n             ),\n-            DanglingIntPointer(_, CheckInAllocMsg::InboundsTest) => {\n-                write!(f, \"null pointer is not allowed for this operation\")\n+            DanglingIntPointer(0, CheckInAllocMsg::InboundsTest) => {\n+                write!(f, \"null pointer is not a valid pointer for this operation\")\n             }\n             DanglingIntPointer(i, msg) => {\n-                write!(f, \"{} failed: 0x{:x} is not a valid pointer\", msg, i)\n+                write!(f, \"{}0x{:x} is not a valid pointer\", msg, i)\n             }\n             AlignmentCheckFailed { required, has } => write!(\n                 f,"}, {"sha": "bb95343a786a40056bcf471a8358432bd19cb2b3", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dddc3818ec6a618ba85a07ca4fdede56f7f0282/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4dddc3818ec6a618ba85a07ca4fdede56f7f0282/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=4dddc3818ec6a618ba85a07ca4fdede56f7f0282", "patch": "@@ -296,7 +296,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:135:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not allowed for this operation\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not a valid pointer for this operation\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:139:5"}, {"sha": "4254cda2a0084c4f81f8f53b943e2584e9483cfe", "filename": "src/test/ui/consts/offset_from_ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4dddc3818ec6a618ba85a07ca4fdede56f7f0282/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4dddc3818ec6a618ba85a07ca4fdede56f7f0282/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_from_ub.stderr?ref=4dddc3818ec6a618ba85a07ca4fdede56f7f0282", "patch": "@@ -74,7 +74,7 @@ error: any use of this value will cause an error\n LL |           unsafe { intrinsics::ptr_offset_from(self, origin) }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                    |\n-   |                    null pointer is not allowed for this operation\n+   |                    null pointer is not a valid pointer for this operation\n    |                    inside `ptr::const_ptr::<impl *const u8>::offset_from` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |                    inside `OFFSET_FROM_NULL` at $DIR/offset_from_ub.rs:36:14\n    | "}]}