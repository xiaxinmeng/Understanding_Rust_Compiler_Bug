{"sha": "39efb301ff7946592ac0d8a64749582daaa67b86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZWZiMzAxZmY3OTQ2NTkyYWMwZDhhNjQ3NDk1ODJkYWFhNjdiODY=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-24T22:48:44Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-24T22:48:44Z"}, "message": "vscode: create rust-analyzer-api.ts", "tree": {"sha": "ad58316b974b7dc696558a12d9c0fb25779ff25a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad58316b974b7dc696558a12d9c0fb25779ff25a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39efb301ff7946592ac0d8a64749582daaa67b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39efb301ff7946592ac0d8a64749582daaa67b86", "html_url": "https://github.com/rust-lang/rust/commit/39efb301ff7946592ac0d8a64749582daaa67b86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39efb301ff7946592ac0d8a64749582daaa67b86/comments", "author": null, "committer": null, "parents": [{"sha": "bd4ea87f7442541123e3bbd7e17bfecdfb3c18c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4ea87f7442541123e3bbd7e17bfecdfb3c18c6", "html_url": "https://github.com/rust-lang/rust/commit/bd4ea87f7442541123e3bbd7e17bfecdfb3c18c6"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "d2738fef32329db5c759bbdc955993cdedc66598", "filename": "editors/code/src/rust-analyzer-api.ts", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/39efb301ff7946592ac0d8a64749582daaa67b86/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "raw_url": "https://github.com/rust-lang/rust/raw/39efb301ff7946592ac0d8a64749582daaa67b86/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frust-analyzer-api.ts?ref=39efb301ff7946592ac0d8a64749582daaa67b86", "patch": "@@ -0,0 +1,117 @@\n+/**\n+ * This file mirrors `crates/rust-analyzer/src/req.rs` declarations.\n+ */\n+\n+import { RequestType, TextDocumentIdentifier, Position, Range, TextDocumentPositionParams, Location, NotificationType, WorkspaceEdit } from \"vscode-languageclient\";\n+\n+type Option<T> = null | T;\n+type Vec<T> = T[];\n+type FxHashMap<K extends PropertyKey, V> = Record<K, V>;\n+\n+function request<TParams, TResult>(method: string) {\n+    return new RequestType<TParams, TResult, unknown>(`rust-analyzer/${method}`);\n+}\n+function notification<TParam>(method: string) {\n+    return new NotificationType<TParam>(method);\n+}\n+\n+\n+export const analyzerStatus = request<null, string>(\"analyzerStatus\");\n+\n+\n+export const collectGarbage = request<null, null>(\"collectGarbage\");\n+\n+\n+export interface SyntaxTreeParams {\n+    textDocument: TextDocumentIdentifier;\n+    range: Option<Range>;\n+}\n+export const syntaxTree = request<SyntaxTreeParams, string>(\"syntaxTree\");\n+\n+\n+export interface ExpandMacroParams {\n+    textDocument: TextDocumentIdentifier;\n+    position: Option<Position>;\n+}\n+export interface ExpandedMacro {\n+    name: string;\n+    expansion: string;\n+}\n+export const expandMacro = request<ExpandMacroParams, Option<ExpandedMacro>>(\"expandMacro\");\n+\n+\n+export interface FindMatchingBraceParams {\n+    textDocument: TextDocumentIdentifier;\n+    offsets: Vec<Position>;\n+}\n+export const findMatchingBrace = request<FindMatchingBraceParams, Vec<Position>>(\"findMatchingBrace\");\n+\n+\n+export interface PublishDecorationsParams {\n+    uri: string;\n+    decorations: Vec<Decoration>;\n+}\n+export interface Decoration {\n+    range: Range;\n+    tag: string;\n+    bindingHash: Option<string>;\n+}\n+export const decorationsRequest = request<TextDocumentIdentifier, Vec<Decoration>>(\"decorationsRequest\");\n+\n+\n+export const parentModule = request<TextDocumentPositionParams, Vec<Location>>(\"parentModule\");\n+\n+\n+export interface JoinLinesParams {\n+    textDocument: TextDocumentIdentifier;\n+    range: Range;\n+}\n+export const joinLines = request<JoinLinesParams, SourceChange>(\"joinLines\");\n+\n+\n+export const onEnter = request<TextDocumentPositionParams, Option<SourceChange>>(\"onEnter\");\n+\n+export interface RunnablesParams {\n+    textDocument: TextDocumentIdentifier;\n+    position: Option<Position>;\n+}\n+export interface Runnable {\n+    range: Range;\n+    label: string;\n+    bin: string;\n+    args: Vec<string>;\n+    env: FxHashMap<string, string>;\n+    cwd: Option<string>;\n+}\n+export const runnables = request<RunnablesParams, Vec<Runnable>>(\"runnables\");\n+\n+\n+export const enum InlayKind {\n+    TypeHint = \"TypeHint\",\n+    ParameterHint = \"ParameterHint\",\n+}\n+export interface InlayHint {\n+    range: Range;\n+    kind: InlayKind;\n+    label: string;\n+}\n+export interface InlayHintsParams {\n+    textDocument: TextDocumentIdentifier;\n+}\n+export const inlayHints = request<InlayHintsParams, Vec<InlayHint>>(\"inlayHints\");\n+\n+\n+export interface SsrParams {\n+    arg: string;\n+}\n+export const ssr = request<SsrParams, SourceChange>(\"ssr\");\n+\n+\n+export const publishDecorations = notification<PublishDecorationsParams>(\"publishDecorations\");\n+\n+\n+export interface SourceChange {\n+    label: string;\n+    workspaceEdit: WorkspaceEdit;\n+    cursorPosition: Option<TextDocumentPositionParams>;\n+}"}]}