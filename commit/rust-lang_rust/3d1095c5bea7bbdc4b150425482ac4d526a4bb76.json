{"sha": "3d1095c5bea7bbdc4b150425482ac4d526a4bb76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMTA5NWM1YmVhN2JiZGM0YjE1MDQyNTQ4MmFjNGQ1MjZhNGJiNzY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-28T13:41:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T18:01:36Z"}, "message": "introduce `IntoKeyValues` trait to prepare for multi-queries\n\nThe idea is that such queries will return `FxHashMap`", "tree": {"sha": "435cf800fc3d9cf8b4149dd093512e15513c97df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/435cf800fc3d9cf8b4149dd093512e15513c97df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d1095c5bea7bbdc4b150425482ac4d526a4bb76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1095c5bea7bbdc4b150425482ac4d526a4bb76", "html_url": "https://github.com/rust-lang/rust/commit/3d1095c5bea7bbdc4b150425482ac4d526a4bb76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d1095c5bea7bbdc4b150425482ac4d526a4bb76/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecc8ff9199118b88e98c903c9117fa2f0cddf8ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecc8ff9199118b88e98c903c9117fa2f0cddf8ab", "html_url": "https://github.com/rust-lang/rust/commit/ecc8ff9199118b88e98c903c9117fa2f0cddf8ab"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "f2bfd23b189402960be824be529a23e58e6fdde0", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3d1095c5bea7bbdc4b150425482ac4d526a4bb76/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d1095c5bea7bbdc4b150425482ac4d526a4bb76/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=3d1095c5bea7bbdc4b150425482ac4d526a4bb76", "patch": "@@ -24,16 +24,20 @@ use ty::steal::Steal;\n use ty::subst::Substs;\n use util::nodemap::{DefIdSet, NodeSet};\n \n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::IndexVec;\n use std::cell::{RefCell, RefMut};\n+use std::fmt::Debug;\n+use std::hash::Hash;\n+use std::iter::{self, Once};\n use std::mem;\n use std::collections::BTreeMap;\n use std::ops::Deref;\n use std::rc::Rc;\n use syntax_pos::{Span, DUMMY_SP};\n use syntax::symbol::Symbol;\n \n-trait Key: Clone {\n+trait Key: Clone + Hash + Eq + Debug {\n     fn map_crate(&self) -> CrateNum;\n     fn default_span(&self, tcx: TyCtxt) -> Span;\n }\n@@ -156,6 +160,33 @@ impl<'tcx> Value<'tcx> for ty::SymbolName {\n     }\n }\n \n+trait IntoKeyValues<K: Key, V> {\n+    type KeyValues: IntoIterator<Item=(K, V)>;\n+\n+    fn into_key_values(tcx: TyCtxt, key: &K, value: Self) -> Self::KeyValues;\n+}\n+\n+impl<K: Key, V> IntoKeyValues<K, V> for V {\n+    type KeyValues = Once<(K, V)>;\n+\n+    fn into_key_values(_: TyCtxt, key: &K, value: Self) -> Self::KeyValues {\n+        iter::once((key.clone(), value))\n+    }\n+}\n+\n+impl<K: Key, V> IntoKeyValues<K, V> for FxHashMap<K, V> {\n+    type KeyValues = Self;\n+\n+    fn into_key_values(tcx: TyCtxt, key: &K, value: Self) -> Self {\n+        if !value.contains_key(key) {\n+            span_bug!(key.default_span(tcx),\n+                      \"multi-generation function for `{:?}` did not generate a value for `{:?}`\",\n+                      key, key)\n+        }\n+        value\n+    }\n+}\n+\n pub struct CycleError<'a, 'tcx: 'a> {\n     span: Span,\n     cycle: RefMut<'a, [(Span, Query<'tcx>)]>,\n@@ -437,7 +468,14 @@ macro_rules! define_maps {\n                     provider(tcx.global_tcx(), key)\n                 })?;\n \n-                Ok(f(&tcx.maps.$name.borrow_mut().entry(key).or_insert(result)))\n+                {\n+                    let map = &mut *tcx.maps.$name.borrow_mut();\n+                    for (k, v) in IntoKeyValues::<$K, $V>::into_key_values(tcx, &key, result) {\n+                        map.insert(k, v);\n+                    }\n+                }\n+\n+                Ok(f(tcx.maps.$name.borrow().get(&key).expect(\"value just generated\")))\n             }\n \n             pub fn try_get(tcx: TyCtxt<'a, $tcx, 'lcx>, span: Span, key: $K)"}]}