{"sha": "2e2951305d66feea833ec2b05af8102b1b5affa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMjk1MTMwNWQ2NmZlZWE4MzNlYzJiMDVhZjgxMDJiMWI1YWZmYTk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-13T20:43:35Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-13T20:43:35Z"}, "message": "Remove obsolete nargs counts from runtime.", "tree": {"sha": "7ff7cac039e705866069bcdbb1f2bb94e950b6c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ff7cac039e705866069bcdbb1f2bb94e950b6c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e2951305d66feea833ec2b05af8102b1b5affa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2951305d66feea833ec2b05af8102b1b5affa9", "html_url": "https://github.com/rust-lang/rust/commit/2e2951305d66feea833ec2b05af8102b1b5affa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e2951305d66feea833ec2b05af8102b1b5affa9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ba53c008a7f6f447f94f07570baab26d39d7df4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ba53c008a7f6f447f94f07570baab26d39d7df4", "html_url": "https://github.com/rust-lang/rust/commit/1ba53c008a7f6f447f94f07570baab26d39d7df4"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "5d4644cf5885bbff03457a22ceda9a1149e0c8eb", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2e2951305d66feea833ec2b05af8102b1b5affa9/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2e2951305d66feea833ec2b05af8102b1b5affa9/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=2e2951305d66feea833ec2b05af8102b1b5affa9", "patch": "@@ -29,7 +29,7 @@ last_os_error(rust_task *task) {\n     char cbuf[BUF_BYTES];\n     char *buf = strerror_r(errno, cbuf, sizeof(cbuf));\n     if (!buf) {\n-        task->fail(1);\n+        task->fail();\n         return NULL;\n     }\n #else\n@@ -44,7 +44,7 @@ last_os_error(rust_task *task) {\n     size_t alloc = next_power_of_two(sizeof(rust_str) + fill);\n     void *mem = task->malloc(alloc);\n     if (!mem) {\n-        task->fail(1);\n+        task->fail();\n         return NULL;\n     }\n     rust_str *st = new (mem) rust_str(sched, alloc, fill,\n@@ -68,15 +68,15 @@ rust_getcwd(rust_task *task) {\n #else\n         if (!getcwd(cbuf, sizeof(cbuf))) {\n #endif\n-        task->fail(1);\n+        task->fail();\n         return NULL;\n     }\n \n     size_t fill = strlen(cbuf) + 1;\n     size_t alloc = next_power_of_two(sizeof(rust_str) + fill);\n     void *mem = task->malloc(alloc);\n     if (!mem) {\n-        task->fail(1);\n+        task->fail();\n         return NULL;\n     }\n \n@@ -114,7 +114,7 @@ refcount(rust_task *task, type_desc *t, intptr_t *v) {\n \n extern \"C\" CDECL void\n do_gc(rust_task *task) {\n-    task->gc(1);\n+    task->gc();\n }\n \n extern \"C\" CDECL void\n@@ -132,7 +132,7 @@ vec_alloc(rust_task *task, type_desc *t, type_desc *elem_t, size_t n_elts)\n     size_t alloc = next_power_of_two(sizeof(rust_vec) + fill);\n     void *mem = task->malloc(alloc, t->is_stateful ? t : NULL);\n     if (!mem) {\n-        task->fail(4);\n+        task->fail();\n         return NULL;\n     }\n     rust_vec *vec = new (mem) rust_vec(sched, alloc, 0, NULL);\n@@ -230,7 +230,7 @@ str_alloc(rust_task *task, size_t n_bytes)\n                                        1, 1,\n                                        (void*)\"\");\n     if (!st) {\n-        task->fail(2);\n+        task->fail();\n         return NULL;\n     }\n     return st;\n@@ -244,7 +244,7 @@ str_push_byte(rust_task* task, rust_str* v, size_t byte)\n     if (v->ref_count > 1 || v->alloc < alloc) {\n         v = vec_alloc_with_data(task, fill + 1, fill, 1, (void*)&v->data[0]);\n         if (!v) {\n-            task->fail(2);\n+            task->fail();\n             return NULL;\n         }\n     }\n@@ -268,7 +268,7 @@ str_slice(rust_task* task, rust_str* v, size_t begin, size_t end)\n                             1,\n                             len ? v->data + begin : NULL);\n     if (!st) {\n-        task->fail(2);\n+        task->fail();\n         return NULL;\n     }\n     st->data[st->fill++] = '\\0';\n@@ -301,7 +301,7 @@ str_vec(rust_task *task, rust_str *s)\n                             1,\n                             (s->fill - 1) ? (void*)s->data : NULL);\n     if (!v) {\n-        task->fail(2);\n+        task->fail();\n         return NULL;\n     }\n     return v;\n@@ -326,7 +326,7 @@ str_from_ivec(rust_task *task, rust_ivec *v)\n                             1,\n                             fill ? data : NULL);\n     if (!st) {\n-        task->fail(2);\n+        task->fail();\n         return NULL;\n     }\n     st->data[st->fill++] = '\\0';\n@@ -343,7 +343,7 @@ str_from_vec(rust_task *task, rust_vec *v)\n                             1,\n                             v->fill ? (void*)v->data : NULL);\n     if (!st) {\n-        task->fail(2);\n+        task->fail();\n         return NULL;\n     }\n     st->data[st->fill++] = '\\0';\n@@ -356,7 +356,7 @@ str_from_cstr(rust_task *task, char *sbuf)\n     size_t len = strlen(sbuf) + 1;\n     rust_str *st = vec_alloc_with_data(task, len, len, 1, sbuf);\n     if (!st) {\n-        task->fail(2);\n+        task->fail();\n         return NULL;\n     }\n     return st;\n@@ -366,7 +366,7 @@ extern \"C\" CDECL rust_str *\n str_from_buf(rust_task *task, char *buf, unsigned int len) {\n     rust_str *st = vec_alloc_with_data(task, len + 1, len, 1, buf);\n     if (!st) {\n-        task->fail(2);\n+        task->fail();\n         return NULL;\n     }\n     st->data[st->fill++] = '\\0';\n@@ -379,7 +379,7 @@ rand_new(rust_task *task)\n     rust_scheduler *sched = task->sched;\n     randctx *rctx = (randctx *) task->malloc(sizeof(randctx));\n     if (!rctx) {\n-        task->fail(1);\n+        task->fail();\n         return NULL;\n     }\n     isaac_init(sched, rctx);\n@@ -777,7 +777,7 @@ ivec_copy_from_buf(rust_task *task, type_desc *ty, rust_ivec *v, void *ptr,\n {\n     size_t old_size = get_ivec_size(v);\n     if (old_size) {\n-        task->fail(1);\n+        task->fail();\n         return;\n     }\n \n@@ -806,7 +806,7 @@ ivec_copy_from_buf_shared(rust_task *task, type_desc *ty, rust_ivec *v,\n {\n     size_t old_size = get_ivec_size(v);\n     if (old_size) {\n-        task->fail(1);\n+        task->fail();\n         return;\n     }\n "}, {"sha": "a358b4a6ed36d64d8291953f2c88a16a1a111738", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2e2951305d66feea833ec2b05af8102b1b5affa9/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2e2951305d66feea833ec2b05af8102b1b5affa9/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=2e2951305d66feea833ec2b05af8102b1b5affa9", "patch": "@@ -177,17 +177,15 @@ rust_task::grow(size_t n_frame_bytes)\n }\n \n void\n-rust_task::yield(size_t nargs) {\n-    yield(nargs, 0);\n+rust_task::yield() {\n+    yield(0);\n }\n \n void\n-rust_task::yield(size_t nargs, size_t time_in_us) {\n+rust_task::yield(size_t time_in_us) {\n     LOG(this, task, \"task %s @0x%\" PRIxPTR \" yielding for %d us\",\n         name, this, time_in_us);\n \n-    // FIXME: what is nargs for, and is it safe to ignore?\n-\n     yield_timer.reset_us(time_in_us);\n \n     // Return to the scheduler.\n@@ -203,7 +201,7 @@ rust_task::kill() {\n \n     // Note the distinction here: kill() is when you're in an upcall\n     // from task A and want to force-fail task B, you do B->kill().\n-    // If you want to fail yourself you do self->fail(upcall_nargs).\n+    // If you want to fail yourself you do self->fail().\n     LOG(this, task, \"killing task %s @0x%\" PRIxPTR, name, this);\n     // Unblock the task so it can unwind.\n     unblock();\n@@ -216,15 +214,14 @@ rust_task::kill() {\n }\n \n void\n-rust_task::fail(size_t nargs) {\n+rust_task::fail() {\n     // See note in ::kill() regarding who should call this.\n     DLOG(sched, task, \"task %s @0x%\" PRIxPTR \" failing\", name, this);\n     backtrace();\n     // Unblock the task so it can unwind.\n     unblock();\n     if (this == sched->root_task)\n         sched->fail();\n-    // run_after_return(nargs, rust_unwind_glue);\n     if (supervisor) {\n         DLOG(sched, task,\n              \"task %s @0x%\" PRIxPTR\n@@ -237,7 +234,7 @@ rust_task::fail(size_t nargs) {\n }\n \n void\n-rust_task::gc(size_t nargs)\n+rust_task::gc()\n {\n     // FIXME: not presently implemented; was broken by rustc.\n     DLOG(sched, task,"}, {"sha": "4983fd8d00d179eff4fb9c06e18aa76b7f4c7c8e", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e2951305d66feea833ec2b05af8102b1b5affa9/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/2e2951305d66feea833ec2b05af8102b1b5affa9/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=2e2951305d66feea833ec2b05af8102b1b5affa9", "patch": "@@ -127,19 +127,19 @@ rust_task : public maybe_proxy<rust_task>,\n     void backtrace();\n \n     // Save callee-saved registers and return to the main loop.\n-    void yield(size_t nargs);\n+    void yield();\n \n     // Yields for a specified duration of time.\n-    void yield(size_t nargs, size_t time_in_ms);\n+    void yield(size_t time_in_ms);\n \n     // Fail this task (assuming caller-on-stack is different task).\n     void kill();\n \n     // Fail self, assuming caller-on-stack is this task.\n-    void fail(size_t nargs);\n+    void fail();\n \n     // Run the gc glue on the task stack.\n-    void gc(size_t nargs);\n+    void gc();\n \n     // Disconnect from our supervisor.\n     void unsupervise();"}, {"sha": "4d34ca78d25755ab73c1241b04e66b0ce1acac64", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e2951305d66feea833ec2b05af8102b1b5affa9/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2e2951305d66feea833ec2b05af8102b1b5affa9/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=2e2951305d66feea833ec2b05af8102b1b5affa9", "patch": "@@ -173,7 +173,7 @@ upcall_sleep(rust_task *task, size_t time_in_us) {\n     LOG(task, task, \"elapsed %\" PRIu64 \" us\",\n               task->yield_timer.elapsed_us());\n     LOG(task, task, \"sleep %d us\", time_in_us);\n-    task->yield(2, time_in_us);\n+    task->yield(time_in_us);\n }\n \n /**\n@@ -221,7 +221,7 @@ upcall_fail(rust_task *task,\n             size_t line) {\n     LOG_UPCALL_ENTRY(task);\n     LOG_ERR(task, upcall, \"upcall fail '%s', %s:%\" PRIdPTR, expr, file, line);\n-    task->fail(4);\n+    task->fail();\n }\n \n /**\n@@ -338,7 +338,7 @@ rust_str *make_str(rust_task *task, char const *s, size_t fill) {\n     size_t alloc = next_power_of_two(sizeof(rust_str) + fill);\n     void *mem = task->malloc(alloc);\n     if (!mem) {\n-        task->fail(3);\n+        task->fail();\n         return NULL;\n     }\n     rust_str *st = new (mem) rust_str(sched, alloc, fill,\n@@ -372,7 +372,7 @@ upcall_new_vec(rust_task *task, size_t fill, type_desc *td) {\n     size_t alloc = next_power_of_two(sizeof(rust_vec) + fill);\n     void *mem = task->malloc(alloc, td);\n     if (!mem) {\n-        task->fail(3);\n+        task->fail();\n         return NULL;\n     }\n     rust_vec *v = new (mem) rust_vec(sched, alloc, 0, NULL);\n@@ -410,7 +410,7 @@ vec_grow(rust_task *task,\n         LOG(task, mem, \"realloc path\");\n         v = (rust_vec*) task->realloc(v, alloc, td->is_stateful);\n         if (!v) {\n-            task->fail(4);\n+            task->fail();\n             return NULL;\n         }\n         v->alloc = alloc;\n@@ -432,7 +432,7 @@ vec_grow(rust_task *task,\n         LOG(task, mem, \"new vec path\");\n         void *mem = task->malloc(alloc, td);\n         if (!mem) {\n-            task->fail(4);\n+            task->fail();\n             return NULL;\n         }\n "}]}