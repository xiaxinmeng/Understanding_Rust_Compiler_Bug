{"sha": "abd7d8813995337ff28c123db37011ceffcb3b26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZDdkODgxMzk5NTMzN2ZmMjhjMTIzZGIzNzAxMWNlZmZjYjNiMjY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-10T19:59:17Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-04T13:51:12Z"}, "message": "move `free_regions_map` into `infer::outlives`", "tree": {"sha": "5b569f291fb3e5dee5a9d6910a1875aa6a68f04a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b569f291fb3e5dee5a9d6910a1875aa6a68f04a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abd7d8813995337ff28c123db37011ceffcb3b26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abd7d8813995337ff28c123db37011ceffcb3b26", "html_url": "https://github.com/rust-lang/rust/commit/abd7d8813995337ff28c123db37011ceffcb3b26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abd7d8813995337ff28c123db37011ceffcb3b26/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa51603870de8d22122a20c0c3f3b0569753e8f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa51603870de8d22122a20c0c3f3b0569753e8f9", "html_url": "https://github.com/rust-lang/rust/commit/aa51603870de8d22122a20c0c3f3b0569753e8f9"}], "stats": {"total": 289, "additions": 152, "deletions": 137}, "files": [{"sha": "72d8077b4c5edb6c7a30ba5604584c38223bb5e3", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=abd7d8813995337ff28c123db37011ceffcb3b26", "patch": "@@ -18,7 +18,7 @@ pub use ty::IntVarValue;\n pub use self::freshen::TypeFreshener;\n \n use hir::def_id::DefId;\n-use middle::free_region::{FreeRegionMap, RegionRelations};\n+use middle::free_region::RegionRelations;\n use middle::region;\n use middle::lang_items;\n use mir::tcx::PlaceTy;\n@@ -44,6 +44,7 @@ use self::higher_ranked::HrMatchResult;\n use self::region_constraints::{RegionConstraintCollector, RegionSnapshot};\n use self::region_constraints::{GenericKind, VerifyBound, RegionConstraintData, VarOrigins};\n use self::lexical_region_resolve::LexicalRegionResolutions;\n+use self::outlives::free_region_map::FreeRegionMap;\n use self::type_variable::TypeVariableOrigin;\n use self::unify_key::ToType;\n \n@@ -58,7 +59,7 @@ pub mod lattice;\n mod lub;\n pub mod region_constraints;\n mod lexical_region_resolve;\n-mod outlives;\n+pub mod outlives;\n pub mod resolve;\n mod freshen;\n mod sub;"}, {"sha": "67f19b2c50d058ad7e53a6241e1298c891c3c24b", "filename": "src/librustc/infer/outlives/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fenv.rs?ref=abd7d8813995337ff28c123db37011ceffcb3b26", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::free_region::FreeRegionMap;\n use infer::{InferCtxt, GenericKind};\n+use infer::outlives::free_region_map::FreeRegionMap;\n use infer::outlives::implied_bounds::ImpliedBound;\n use ty::{self, Ty};\n "}, {"sha": "1d235eb244d49b884d0b3a70c0e194066211c12b", "filename": "src/librustc/infer/outlives/free_region_map.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Ffree_region_map.rs?ref=abd7d8813995337ff28c123db37011ceffcb3b26", "patch": "@@ -0,0 +1,138 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use ty::{self, Lift, TyCtxt, Region};\n+use rustc_data_structures::transitive_relation::TransitiveRelation;\n+\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct FreeRegionMap<'tcx> {\n+    // Stores the relation `a < b`, where `a` and `b` are regions.\n+    //\n+    // Invariant: only free regions like `'x` or `'static` are stored\n+    // in this relation, not scopes.\n+    relation: TransitiveRelation<Region<'tcx>>\n+}\n+\n+impl<'tcx> FreeRegionMap<'tcx> {\n+    pub fn new() -> Self {\n+        FreeRegionMap { relation: TransitiveRelation::new() }\n+    }\n+\n+    pub fn is_empty(&self) -> bool {\n+        self.relation.is_empty()\n+    }\n+\n+    pub fn relate_free_regions_from_predicates(&mut self,\n+                                               predicates: &[ty::Predicate<'tcx>]) {\n+        debug!(\"relate_free_regions_from_predicates(predicates={:?})\", predicates);\n+        for predicate in predicates {\n+            match *predicate {\n+                ty::Predicate::Projection(..) |\n+                ty::Predicate::Trait(..) |\n+                ty::Predicate::Equate(..) |\n+                ty::Predicate::Subtype(..) |\n+                ty::Predicate::WellFormed(..) |\n+                ty::Predicate::ObjectSafe(..) |\n+                ty::Predicate::ClosureKind(..) |\n+                ty::Predicate::TypeOutlives(..) |\n+                ty::Predicate::ConstEvaluatable(..) => {\n+                    // No region bounds here\n+                }\n+                ty::Predicate::RegionOutlives(ty::Binder(ty::OutlivesPredicate(r_a, r_b))) => {\n+                    self.relate_regions(r_b, r_a);\n+                }\n+            }\n+        }\n+    }\n+\n+    /// Record that `'sup:'sub`. Or, put another way, `'sub <= 'sup`.\n+    /// (with the exception that `'static: 'x` is not notable)\n+    pub fn relate_regions(&mut self, sub: Region<'tcx>, sup: Region<'tcx>) {\n+        debug!(\"relate_regions(sub={:?}, sup={:?})\", sub, sup);\n+        if is_free_or_static(sub) && is_free(sup) {\n+            self.relation.add(sub, sup)\n+        }\n+    }\n+\n+    /// Tests whether `r_a <= sup`. Both must be free regions or\n+    /// `'static`.\n+    pub fn sub_free_regions<'a, 'gcx>(&self,\n+                                      r_a: Region<'tcx>,\n+                                      r_b: Region<'tcx>)\n+                                      -> bool {\n+        assert!(is_free_or_static(r_a) && is_free_or_static(r_b));\n+        if let ty::ReStatic = r_b {\n+            true // `'a <= 'static` is just always true, and not stored in the relation explicitly\n+        } else {\n+            r_a == r_b || self.relation.contains(&r_a, &r_b)\n+        }\n+    }\n+\n+    /// Compute the least-upper-bound of two free regions. In some\n+    /// cases, this is more conservative than necessary, in order to\n+    /// avoid making arbitrary choices. See\n+    /// `TransitiveRelation::postdom_upper_bound` for more details.\n+    pub fn lub_free_regions<'a, 'gcx>(&self,\n+                                      tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                                      r_a: Region<'tcx>,\n+                                      r_b: Region<'tcx>)\n+                                      -> Region<'tcx> {\n+        debug!(\"lub_free_regions(r_a={:?}, r_b={:?})\", r_a, r_b);\n+        assert!(is_free(r_a));\n+        assert!(is_free(r_b));\n+        let result = if r_a == r_b { r_a } else {\n+            match self.relation.postdom_upper_bound(&r_a, &r_b) {\n+                None => tcx.mk_region(ty::ReStatic),\n+                Some(r) => *r,\n+            }\n+        };\n+        debug!(\"lub_free_regions(r_a={:?}, r_b={:?}) = {:?}\", r_a, r_b, result);\n+        result\n+    }\n+\n+    /// Returns all regions that are known to outlive `r_a`. For\n+    /// example, in a function:\n+    ///\n+    /// ```\n+    /// fn foo<'a, 'b: 'a, 'c: 'b>() { .. }\n+    /// ```\n+    ///\n+    /// if `r_a` represents `'a`, this function would return `{'b, 'c}`.\n+    pub fn regions_that_outlive<'a, 'gcx>(&self, r_a: Region<'tcx>) -> Vec<&Region<'tcx>> {\n+        assert!(is_free(r_a) || *r_a == ty::ReStatic);\n+        self.relation.greater_than(&r_a)\n+    }\n+}\n+\n+fn is_free(r: Region) -> bool {\n+    match *r {\n+        ty::ReEarlyBound(_) | ty::ReFree(_) => true,\n+        _ => false\n+    }\n+}\n+\n+fn is_free_or_static(r: Region) -> bool {\n+    match *r {\n+        ty::ReStatic => true,\n+        _ => is_free(r),\n+    }\n+}\n+\n+impl_stable_hash_for!(struct FreeRegionMap<'tcx> {\n+    relation\n+});\n+\n+impl<'a, 'tcx> Lift<'tcx> for FreeRegionMap<'a> {\n+    type Lifted = FreeRegionMap<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<FreeRegionMap<'tcx>> {\n+        self.relation.maybe_map(|&fr| fr.lift_to_tcx(tcx))\n+                     .map(|relation| FreeRegionMap { relation })\n+    }\n+}"}, {"sha": "b20f274f0843a72b611ef0e6a4be21a419b69ad0", "filename": "src/librustc/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fmod.rs?ref=abd7d8813995337ff28c123db37011ceffcb3b26", "patch": "@@ -11,5 +11,6 @@\n //! Various code related to computing outlives relations.\n \n pub mod env;\n+pub mod free_region_map;\n pub mod implied_bounds;\n mod obligations;"}, {"sha": "ca6a5dd7f5b0b95ca42deaa9861c1655eefceee0", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 3, "deletions": 128, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=abd7d8813995337ff28c123db37011ceffcb3b26", "patch": "@@ -15,10 +15,10 @@\n //! `TransitiveRelation` type and use that to decide when one free\n //! region outlives another and so forth.\n \n+use infer::outlives::free_region_map::FreeRegionMap;\n use hir::def_id::DefId;\n use middle::region;\n-use ty::{self, Lift, TyCtxt, Region};\n-use rustc_data_structures::transitive_relation::TransitiveRelation;\n+use ty::{self, TyCtxt, Region};\n \n /// Combines a `region::ScopeTree` (which governs relationships between\n /// scopes) and a `FreeRegionMap` (which governs relationships between\n@@ -103,7 +103,7 @@ impl<'a, 'gcx, 'tcx> RegionRelations<'a, 'gcx, 'tcx> {\n             ty::ReStatic => true,\n             ty::ReEarlyBound(_) | ty::ReFree(_) => {\n                 let re_static = self.tcx.mk_region(ty::ReStatic);\n-                self.free_regions.relation.contains(&re_static, &super_region)\n+                self.free_regions.sub_free_regions(&re_static, &super_region)\n             }\n             _ => false\n         }\n@@ -117,128 +117,3 @@ impl<'a, 'gcx, 'tcx> RegionRelations<'a, 'gcx, 'tcx> {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct FreeRegionMap<'tcx> {\n-    // Stores the relation `a < b`, where `a` and `b` are regions.\n-    //\n-    // Invariant: only free regions like `'x` or `'static` are stored\n-    // in this relation, not scopes.\n-    relation: TransitiveRelation<Region<'tcx>>\n-}\n-\n-impl<'tcx> FreeRegionMap<'tcx> {\n-    pub fn new() -> Self {\n-        FreeRegionMap { relation: TransitiveRelation::new() }\n-    }\n-\n-    pub fn is_empty(&self) -> bool {\n-        self.relation.is_empty()\n-    }\n-\n-    pub fn relate_free_regions_from_predicates(&mut self,\n-                                               predicates: &[ty::Predicate<'tcx>]) {\n-        debug!(\"relate_free_regions_from_predicates(predicates={:?})\", predicates);\n-        for predicate in predicates {\n-            match *predicate {\n-                ty::Predicate::Projection(..) |\n-                ty::Predicate::Trait(..) |\n-                ty::Predicate::Equate(..) |\n-                ty::Predicate::Subtype(..) |\n-                ty::Predicate::WellFormed(..) |\n-                ty::Predicate::ObjectSafe(..) |\n-                ty::Predicate::ClosureKind(..) |\n-                ty::Predicate::TypeOutlives(..) |\n-                ty::Predicate::ConstEvaluatable(..) => {\n-                    // No region bounds here\n-                }\n-                ty::Predicate::RegionOutlives(ty::Binder(ty::OutlivesPredicate(r_a, r_b))) => {\n-                    self.relate_regions(r_b, r_a);\n-                }\n-            }\n-        }\n-    }\n-\n-    /// Record that `'sup:'sub`. Or, put another way, `'sub <= 'sup`.\n-    /// (with the exception that `'static: 'x` is not notable)\n-    pub fn relate_regions(&mut self, sub: Region<'tcx>, sup: Region<'tcx>) {\n-        debug!(\"relate_regions(sub={:?}, sup={:?})\", sub, sup);\n-        if is_free_or_static(sub) && is_free(sup) {\n-            self.relation.add(sub, sup)\n-        }\n-    }\n-\n-    /// Tests whether `r_a <= sup`. Both must be free regions or\n-    /// `'static`.\n-    pub fn sub_free_regions<'a, 'gcx>(&self,\n-                                      r_a: Region<'tcx>,\n-                                      r_b: Region<'tcx>)\n-                                      -> bool {\n-        assert!(is_free_or_static(r_a) && is_free_or_static(r_b));\n-        if let ty::ReStatic = r_b {\n-            true // `'a <= 'static` is just always true, and not stored in the relation explicitly\n-        } else {\n-            r_a == r_b || self.relation.contains(&r_a, &r_b)\n-        }\n-    }\n-\n-    /// Compute the least-upper-bound of two free regions. In some\n-    /// cases, this is more conservative than necessary, in order to\n-    /// avoid making arbitrary choices. See\n-    /// `TransitiveRelation::postdom_upper_bound` for more details.\n-    pub fn lub_free_regions<'a, 'gcx>(&self,\n-                                      tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                      r_a: Region<'tcx>,\n-                                      r_b: Region<'tcx>)\n-                                      -> Region<'tcx> {\n-        debug!(\"lub_free_regions(r_a={:?}, r_b={:?})\", r_a, r_b);\n-        assert!(is_free(r_a));\n-        assert!(is_free(r_b));\n-        let result = if r_a == r_b { r_a } else {\n-            match self.relation.postdom_upper_bound(&r_a, &r_b) {\n-                None => tcx.mk_region(ty::ReStatic),\n-                Some(r) => *r,\n-            }\n-        };\n-        debug!(\"lub_free_regions(r_a={:?}, r_b={:?}) = {:?}\", r_a, r_b, result);\n-        result\n-    }\n-\n-    /// Returns all regions that are known to outlive `r_a`. For\n-    /// example, in a function:\n-    ///\n-    /// ```\n-    /// fn foo<'a, 'b: 'a, 'c: 'b>() { .. }\n-    /// ```\n-    ///\n-    /// if `r_a` represents `'a`, this function would return `{'b, 'c}`.\n-    pub fn regions_that_outlive<'a, 'gcx>(&self, r_a: Region<'tcx>) -> Vec<&Region<'tcx>> {\n-        assert!(is_free(r_a) || *r_a == ty::ReStatic);\n-        self.relation.greater_than(&r_a)\n-    }\n-}\n-\n-fn is_free(r: Region) -> bool {\n-    match *r {\n-        ty::ReEarlyBound(_) | ty::ReFree(_) => true,\n-        _ => false\n-    }\n-}\n-\n-fn is_free_or_static(r: Region) -> bool {\n-    match *r {\n-        ty::ReStatic => true,\n-        _ => is_free(r),\n-    }\n-}\n-\n-impl_stable_hash_for!(struct FreeRegionMap<'tcx> {\n-    relation\n-});\n-\n-impl<'a, 'tcx> Lift<'tcx> for FreeRegionMap<'a> {\n-    type Lifted = FreeRegionMap<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<FreeRegionMap<'tcx>> {\n-        self.relation.maybe_map(|&fr| fr.lift_to_tcx(tcx))\n-                     .map(|relation| FreeRegionMap { relation })\n-    }\n-}"}, {"sha": "ac08ff34518ee790ae19483451ca83acd54239ab", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=abd7d8813995337ff28c123db37011ceffcb3b26", "patch": "@@ -17,9 +17,9 @@ pub use self::ObligationCauseCode::*;\n \n use hir;\n use hir::def_id::DefId;\n+use infer::outlives::free_region_map::FreeRegionMap;\n use middle::const_val::ConstEvalErr;\n use middle::region;\n-use middle::free_region::FreeRegionMap;\n use ty::subst::Substs;\n use ty::{self, AdtKind, Ty, TyCtxt, TypeFoldable, ToPredicate};\n use ty::error::{ExpectedFound, TypeError};"}, {"sha": "ce05acb01b001af9f5028045397da02206790f77", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=abd7d8813995337ff28c123db37011ceffcb3b26", "patch": "@@ -23,10 +23,10 @@ use hir::map as hir_map;\n use hir::map::DefPathHash;\n use lint::{self, Lint};\n use ich::{StableHashingContext, NodeIdHashingMode};\n+use infer::outlives::free_region_map::FreeRegionMap;\n use middle::const_val::ConstVal;\n use middle::cstore::{CrateStore, LinkMeta};\n use middle::cstore::EncodedMetadata;\n-use middle::free_region::FreeRegionMap;\n use middle::lang_items;\n use middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use middle::stability;"}, {"sha": "7f984c72ee6151006cd40617b42ea221b84c9f6f", "filename": "src/librustc_mir/borrow_check/nll/free_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffree_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffree_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffree_regions.rs?ref=abd7d8813995337ff28c123db37011ceffcb3b26", "patch": "@@ -24,7 +24,7 @@\n \n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n-use rustc::middle::free_region::FreeRegionMap;\n+use rustc::infer::outlives::free_region_map::FreeRegionMap;\n use rustc::ty::{self, RegionVid};\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::FxHashMap;"}, {"sha": "b304ea4f7149a1074b0f3ac5f46f8d2f341b8607", "filename": "src/librustc_mir/borrow_check/nll/region_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer.rs?ref=abd7d8813995337ff28c123db37011ceffcb3b26", "patch": "@@ -13,7 +13,7 @@ use rustc::infer::InferCtxt;\n use rustc::infer::RegionVariableOrigin;\n use rustc::infer::NLLRegionVariableOrigin;\n use rustc::infer::region_constraints::VarOrigins;\n-use rustc::middle::free_region::FreeRegionMap;\n+use rustc::infer::outlives::free_region_map::FreeRegionMap;\n use rustc::mir::{Location, Mir};\n use rustc::ty::{self, RegionVid};\n use rustc_data_structures::indexed_vec::IndexVec;"}, {"sha": "f150c7db9b14df9bdaa3cc79753fdd607ba20b8a", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=abd7d8813995337ff28c123db37011ceffcb3b26", "patch": "@@ -11,8 +11,8 @@\n use check::regionck::RegionCtxt;\n \n use hir::def_id::DefId;\n-use middle::free_region::FreeRegionMap;\n use rustc::infer::{self, InferOk};\n+use rustc::infer::outlives::free_region_map::FreeRegionMap;\n use rustc::middle::region;\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt};"}, {"sha": "01d0a7a3f857bb7ff3ccec111ea78f1e21125f80", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd7d8813995337ff28c123db37011ceffcb3b26/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=abd7d8813995337ff28c123db37011ceffcb3b26", "patch": "@@ -11,7 +11,7 @@\n //! Check properties that are required by built-in traits and set\n //! up data structures required by type-checking/translation.\n \n-use rustc::middle::free_region::FreeRegionMap;\n+use rustc::infer::outlives::free_region_map::FreeRegionMap;\n use rustc::middle::region;\n use rustc::middle::lang_items::UnsizeTraitLangItem;\n "}]}