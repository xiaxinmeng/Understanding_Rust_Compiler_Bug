{"sha": "2729665235d941e83876a3799defe76326a5b807", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3Mjk2NjUyMzVkOTQxZTgzODc2YTM3OTlkZWZlNzYzMjZhNWI4MDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-17T09:20:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-17T09:20:28Z"}, "message": "Continue non-doc comments with trailing space", "tree": {"sha": "558a5016a73d424e7b4409a8804a4fea1cdd0fec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/558a5016a73d424e7b4409a8804a4fea1cdd0fec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2729665235d941e83876a3799defe76326a5b807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2729665235d941e83876a3799defe76326a5b807", "html_url": "https://github.com/rust-lang/rust/commit/2729665235d941e83876a3799defe76326a5b807", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2729665235d941e83876a3799defe76326a5b807/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e932f33391bd78a43a06d275a4d2f93fe3d7e8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e932f33391bd78a43a06d275a4d2f93fe3d7e8d", "html_url": "https://github.com/rust-lang/rust/commit/7e932f33391bd78a43a06d275a4d2f93fe3d7e8d"}], "stats": {"total": 68, "additions": 59, "deletions": 9}, "files": [{"sha": "d3ce744b44cb731d1732439bb0cf490032b4cfc7", "filename": "crates/ra_ide/src/typing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2729665235d941e83876a3799defe76326a5b807/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2729665235d941e83876a3799defe76326a5b807/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping.rs?ref=2729665235d941e83876a3799defe76326a5b807", "patch": "@@ -39,7 +39,6 @@ pub(crate) const TRIGGER_CHARS: &str = \".=>\";\n // Some features trigger on typing certain characters:\n //\n // - typing `let =` tries to smartly add `;` if `=` is followed by an existing expression\n-// - Enter inside comments automatically inserts `///`\n // - typing `.` in a chain method call auto-indents\n pub(crate) fn on_char_typed(\n     db: &RootDatabase,"}, {"sha": "143b1ae413ed1ce380fd5fc0d968e1dfd01018d2", "filename": "crates/ra_ide/src/typing/on_enter.rs", "status": "modified", "additions": 59, "deletions": 8, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2729665235d941e83876a3799defe76326a5b807/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2729665235d941e83876a3799defe76326a5b807/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping%2Fon_enter.rs?ref=2729665235d941e83876a3799defe76326a5b807", "patch": "@@ -7,10 +7,31 @@ use ra_syntax::{\n     ast::{self, AstToken},\n     AstNode, SmolStr, SourceFile,\n     SyntaxKind::*,\n-    SyntaxToken, TextSize, TokenAtOffset,\n+    SyntaxToken, TextRange, TextSize, TokenAtOffset,\n };\n use ra_text_edit::TextEdit;\n+use test_utils::mark;\n \n+// Feature: On Enter\n+//\n+// rust-analyzer can override kbd:[Enter] key to make it smarter:\n+//\n+// - kbd:[Enter] inside triple-slash comments automatically inserts `///`\n+// - kbd:[Enter] in the middle or after a trailing space in `//` inserts `//`\n+//\n+// This action needs to be assigned to shortcut explicitly.\n+//\n+// VS Code::\n+//\n+// Add the following to `keybindings.json`:\n+// [source,json]\n+// ----\n+// {\n+//   \"key\": \"Enter\",\n+//   \"command\": \"rust-analyzer.onEnter\",\n+//   \"when\": \"editorTextFocus && !suggestWidgetVisible && editorLangId == rust\"\n+// }\n+// ----\n pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<TextEdit> {\n     let parse = db.parse(position.file_id);\n     let file = parse.tree();\n@@ -30,15 +51,25 @@ pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<Text\n         return None;\n     }\n \n+    let mut remove_last_space = false;\n     // Continuing single-line non-doc comments (like this one :) ) is annoying\n-    if prefix == \"//\" && comment_range.end() == position.offset && !followed_by_comment(&comment) {\n-        return None;\n+    if prefix == \"//\" && comment_range.end() == position.offset {\n+        if comment.text().ends_with(' ') {\n+            mark::hit!(continues_end_of_line_comment_with_space);\n+            remove_last_space = true;\n+        } else if !followed_by_comment(&comment) {\n+            return None;\n+        }\n     }\n \n     let indent = node_indent(&file, comment.syntax())?;\n     let inserted = format!(\"\\n{}{} $0\", indent, prefix);\n-    let edit = TextEdit::insert(position.offset, inserted);\n-\n+    let delete = if remove_last_space {\n+        TextRange::new(position.offset - TextSize::of(' '), position.offset)\n+    } else {\n+        TextRange::empty(position.offset)\n+    };\n+    let edit = TextEdit::replace(delete, inserted);\n     Some(edit)\n }\n \n@@ -75,10 +106,10 @@ fn node_indent(file: &SourceFile, token: &SyntaxToken) -> Option<SmolStr> {\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::assert_eq_text;\n+    use stdx::trim_indent;\n+    use test_utils::{assert_eq_text, mark};\n \n     use crate::mock_analysis::analysis_and_position;\n-    use stdx::trim_indent;\n \n     fn apply_on_enter(before: &str) -> Option<String> {\n         let (analysis, position) = analysis_and_position(&before);\n@@ -192,7 +223,7 @@ fn main() {\n     }\n \n     #[test]\n-    fn does_not_continue_end_of_code_comment() {\n+    fn does_not_continue_end_of_line_comment() {\n         do_check_noop(\n             r\"\n fn main() {\n@@ -202,4 +233,24 @@ fn main() {\n \",\n         );\n     }\n+\n+    #[test]\n+    fn continues_end_of_line_comment_with_space() {\n+        mark::check!(continues_end_of_line_comment_with_space);\n+        do_check(\n+            r#\"\n+fn main() {\n+    // Fix me <|>\n+    let x = 1 + 1;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    // Fix me\n+    // $0\n+    let x = 1 + 1;\n+}\n+\"#,\n+        );\n+    }\n }"}]}