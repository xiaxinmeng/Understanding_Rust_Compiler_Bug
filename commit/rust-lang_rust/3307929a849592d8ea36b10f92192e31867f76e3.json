{"sha": "3307929a849592d8ea36b10f92192e31867f76e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMDc5MjlhODQ5NTkyZDhlYTM2YjEwZjkyMTkyZTMxODY3Zjc2ZTM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-12T16:53:45Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-26T23:15:19Z"}, "message": "Store only the current depth\n\nPreviously we stored the entire current path which is a bit expensive\nand only ever accessed its length. This stores the length directly.", "tree": {"sha": "064fc5f2929478617dc78334f5185d534155f2ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/064fc5f2929478617dc78334f5185d534155f2ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3307929a849592d8ea36b10f92192e31867f76e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3307929a849592d8ea36b10f92192e31867f76e3", "html_url": "https://github.com/rust-lang/rust/commit/3307929a849592d8ea36b10f92192e31867f76e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3307929a849592d8ea36b10f92192e31867f76e3/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e079c2c689b6252154e9df04d067783bfc13224", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e079c2c689b6252154e9df04d067783bfc13224", "html_url": "https://github.com/rust-lang/rust/commit/0e079c2c689b6252154e9df04d067783bfc13224"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "54c0120e398c356e8b6d86fbcb9277ad2196cda5", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3307929a849592d8ea36b10f92192e31867f76e3/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3307929a849592d8ea36b10f92192e31867f76e3/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=3307929a849592d8ea36b10f92192e31867f76e3", "patch": "@@ -15,7 +15,7 @@ use rustc::hir;\n \n use crate::clean::{self, PrimitiveType};\n use crate::html::item_type::ItemType;\n-use crate::html::render::{self, cache, CURRENT_LOCATION_KEY};\n+use crate::html::render::{self, cache, CURRENT_DEPTH};\n \n /// Helper to render an optional visibility with a space after it (if the\n /// visibility is preset)\n@@ -407,16 +407,16 @@ pub fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n         return None\n     }\n \n-    let loc = CURRENT_LOCATION_KEY.with(|l| l.borrow().clone());\n+    let depth = CURRENT_DEPTH.with(|l| l.get());\n     let (fqp, shortty, mut url) = match cache.paths.get(&did) {\n         Some(&(ref fqp, shortty)) => {\n-            (fqp, shortty, \"../\".repeat(loc.len()))\n+            (fqp, shortty, \"../\".repeat(depth))\n         }\n         None => {\n             let &(ref fqp, shortty) = cache.external_paths.get(&did)?;\n             (fqp, shortty, match cache.extern_locations[&did.krate] {\n                 (.., render::Remote(ref s)) => s.to_string(),\n-                (.., render::Local) => \"../\".repeat(loc.len()),\n+                (.., render::Local) => \"../\".repeat(depth),\n                 (.., render::Unknown) => return None,\n             })\n         }\n@@ -479,7 +479,7 @@ fn primitive_link(f: &mut fmt::Formatter<'_>,\n     if !f.alternate() {\n         match m.primitive_locations.get(&prim) {\n             Some(&def_id) if def_id.is_local() => {\n-                let len = CURRENT_LOCATION_KEY.with(|s| s.borrow().len());\n+                let len = CURRENT_DEPTH.with(|s| s.get());\n                 let len = if len == 0 {0} else {len - 1};\n                 write!(f, \"<a class=\\\"primitive\\\" href=\\\"{}primitive.{}.html\\\">\",\n                        \"../\".repeat(len),\n@@ -492,7 +492,7 @@ fn primitive_link(f: &mut fmt::Formatter<'_>,\n                         Some((cname, s.to_string()))\n                     }\n                     (ref cname, _, render::Local) => {\n-                        let len = CURRENT_LOCATION_KEY.with(|s| s.borrow().len());\n+                        let len = CURRENT_DEPTH.with(|s| s.get());\n                         Some((cname, \"../\".repeat(len)))\n                     }\n                     (.., render::Unknown) => None,"}, {"sha": "67084991276b80bb5987a9960297d3df67cad0a6", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3307929a849592d8ea36b10f92192e31867f76e3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3307929a849592d8ea36b10f92192e31867f76e3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3307929a849592d8ea36b10f92192e31867f76e3", "patch": "@@ -28,7 +28,7 @@\n pub use self::ExternalLocation::*;\n \n use std::borrow::Cow;\n-use std::cell::RefCell;\n+use std::cell::{Cell, RefCell};\n use std::cmp::Ordering;\n use std::collections::{BTreeMap, VecDeque};\n use std::default::Default;\n@@ -479,7 +479,7 @@ impl ToJson for IndexItemFunctionType {\n }\n \n thread_local!(static CACHE_KEY: RefCell<Arc<Cache>> = Default::default());\n-thread_local!(pub static CURRENT_LOCATION_KEY: RefCell<Vec<String>> = RefCell::new(Vec::new()));\n+thread_local!(pub static CURRENT_DEPTH: Cell<usize> = Cell::new(0));\n \n pub fn initial_ids() -> Vec<String> {\n     [\n@@ -695,7 +695,7 @@ pub fn run(mut krate: clean::Crate,\n     // for future parallelization opportunities\n     let cache = Arc::new(cache);\n     CACHE_KEY.with(|v| *v.borrow_mut() = cache.clone());\n-    CURRENT_LOCATION_KEY.with(|s| s.borrow_mut().clear());\n+    CURRENT_DEPTH.with(|s| s.set(0));\n \n     // Write shared runs within a flock; disable thread dispatching of IO temporarily.\n     Arc::get_mut(&mut cx.shared).unwrap().fs.set_sync_only(true);\n@@ -2003,8 +2003,8 @@ impl Context {\n                    -> io::Result<()> {\n         // A little unfortunate that this is done like this, but it sure\n         // does make formatting *a lot* nicer.\n-        CURRENT_LOCATION_KEY.with(|slot| {\n-            *slot.borrow_mut() = self.current.clone();\n+        CURRENT_DEPTH.with(|slot| {\n+            slot.set(self.current.len());\n         });\n \n         let mut title = if it.is_primitive() || it.is_keyword() {"}]}