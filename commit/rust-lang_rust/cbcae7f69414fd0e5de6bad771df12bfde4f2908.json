{"sha": "cbcae7f69414fd0e5de6bad771df12bfde4f2908", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiY2FlN2Y2OTQxNGZkMGU1ZGU2YmFkNzcxZGYxMmJmZGU0ZjI5MDg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-03T15:55:41Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-05T22:34:01Z"}, "message": "improve conflict error reporting", "tree": {"sha": "b79a2bb5c29a51c741aa2e3ee3824f0221df9654", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b79a2bb5c29a51c741aa2e3ee3824f0221df9654"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbcae7f69414fd0e5de6bad771df12bfde4f2908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbcae7f69414fd0e5de6bad771df12bfde4f2908", "html_url": "https://github.com/rust-lang/rust/commit/cbcae7f69414fd0e5de6bad771df12bfde4f2908", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbcae7f69414fd0e5de6bad771df12bfde4f2908/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8c35d9e4171ea94b93dd7c6cacaab6c15da6dc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8c35d9e4171ea94b93dd7c6cacaab6c15da6dc0", "html_url": "https://github.com/rust-lang/rust/commit/f8c35d9e4171ea94b93dd7c6cacaab6c15da6dc0"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "61e7eb59339158ea7254c1f10c0bb77cbe00f051", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cbcae7f69414fd0e5de6bad771df12bfde4f2908/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcae7f69414fd0e5de6bad771df12bfde4f2908/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=cbcae7f69414fd0e5de6bad771df12bfde4f2908", "patch": "@@ -548,14 +548,13 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n \n                         if self.place_is_invalidated_at_exit(&borrow.place) {\n                             debug!(\"borrow conflicts at exit {:?}\", borrow);\n-                            let borrow_span = self.mir.source_info(borrow.location).span;\n                             // FIXME: should be talking about the region lifetime instead\n                             // of just a span here.\n                             let end_span = domain.opt_region_end_span(&borrow.region);\n \n                             self.report_borrowed_value_does_not_live_long_enough(\n                                 ContextKind::StorageDead.new(loc),\n-                                (&borrow.place, borrow_span),\n+                            (&borrow.place, end_span.unwrap_or(span)),\n                                 end_span,\n                             )\n                         }\n@@ -958,7 +957,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n     /// Returns whether a borrow of this place is invalidated when the function\n     /// exits\n-    fn place_is_invalidated_at_exit(&self, place: &Place<'tcx>) -> bool {\n+    fn place_is_invalidated_at_exit(&mut self, place: &Place<'tcx>) -> bool {\n         debug!(\"place_is_invalidated_at_exit({:?})\", place);\n         let root_place = self.prefixes(place, PrefixSet::All).last().unwrap();\n \n@@ -967,7 +966,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         // we'll have a memory leak) and assume that all statics have a destructor.\n         //\n         // FIXME: allow thread-locals to borrow other thread locals?x\n-        let (might_be_alive, will_be_dropped) = match root_place {\n+        let (might_be_alive, will_be_dropped, local) = match root_place {\n             Place::Static(statik) => {\n                 // Thread-locals might be dropped after the function exits, but\n                 // \"true\" statics will never be.\n@@ -976,12 +975,12 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     .iter()\n                     .any(|attr| attr.check_name(\"thread_local\"));\n \n-                (true, is_thread_local)\n+                (true, is_thread_local, None)\n             }\n-            Place::Local(_) => {\n+            Place::Local(local) => {\n                 // Locals are always dropped at function exit, and if they\n                 // have a destructor it would've been called already.\n-                (false, self.locals_are_invalidated_at_exit)\n+                (false, self.locals_are_invalidated_at_exit, Some(*local))\n             }\n             Place::Projection(..) => {\n                 bug!(\"root of {:?} is a projection ({:?})?\", place, root_place)\n@@ -1004,8 +1003,19 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             PrefixSet::Shallow\n         };\n \n-        self.prefixes(place, prefix_set)\n-            .any(|prefix| prefix == root_place)\n+        let result =\n+            self.prefixes(place, prefix_set).any(|prefix| prefix == root_place);\n+\n+        if result {\n+            if let Some(local) = local {\n+                if let Some(_) = self.storage_dead_or_drop_error_reported.replace(local) {\n+                    debug!(\"place_is_invalidated_at_exit({:?}) - suppressed\", place);\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        result\n     }\n }\n "}, {"sha": "fa80a2efdf83dab89815ce3e28f4a7704e5afc2a", "filename": "src/test/compile-fail/borrowck/borrowck-local-borrow-outlives-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbcae7f69414fd0e5de6bad771df12bfde4f2908/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcae7f69414fd0e5de6bad771df12bfde4f2908/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs?ref=cbcae7f69414fd0e5de6bad771df12bfde4f2908", "patch": "@@ -13,7 +13,7 @@\n \n fn cplusplus_mode(x: isize) -> &'static isize {\n     &x //[ast]~ ERROR `x` does not live long enough\n-       //[mir]~^ ERROR borrowed value does not live long enough\n }\n+//[mir]~^ ERROR borrowed value does not live long enough\n \n fn main() {}"}, {"sha": "78f0d321e0d3df7d88db773626de99327b03bba8", "filename": "src/test/compile-fail/borrowck/borrowck-local-borrow-with-panic-outlives-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbcae7f69414fd0e5de6bad771df12bfde4f2908/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbcae7f69414fd0e5de6bad771df12bfde4f2908/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-with-panic-outlives-fn.rs?ref=cbcae7f69414fd0e5de6bad771df12bfde4f2908", "patch": "@@ -14,9 +14,9 @@\n fn cplusplus_mode_exceptionally_unsafe(x: &mut Option<&'static mut isize>) {\n     let mut z = (0, 0);\n     *x = Some(&mut z.1); //[ast]~ ERROR [E0597]\n-                         //[mir]~^ ERROR [E0597]\n     panic!(\"catch me for a dangling pointer!\")\n }\n+//[mir]~^ ERROR [E0597]\n \n fn main() {\n     cplusplus_mode_exceptionally_unsafe(&mut None);"}]}