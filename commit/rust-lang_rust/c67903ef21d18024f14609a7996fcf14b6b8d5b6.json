{"sha": "c67903ef21d18024f14609a7996fcf14b6b8d5b6", "node_id": "C_kwDOAAsO6NoAKGM2NzkwM2VmMjFkMTgwMjRmMTQ2MDlhNzk5NmZjZjE0YjZiOGQ1YjY", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-01-14T08:52:46Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-01-14T09:11:04Z"}, "message": "fix issues in unused lint", "tree": {"sha": "657d3cc5b682f51ed8b50c6f2219997ddaed8669", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/657d3cc5b682f51ed8b50c6f2219997ddaed8669"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c67903ef21d18024f14609a7996fcf14b6b8d5b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c67903ef21d18024f14609a7996fcf14b6b8d5b6", "html_url": "https://github.com/rust-lang/rust/commit/c67903ef21d18024f14609a7996fcf14b6b8d5b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c67903ef21d18024f14609a7996fcf14b6b8d5b6/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d99866bfc43f34dbdd84f4bf982c48a51b70a99", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d99866bfc43f34dbdd84f4bf982c48a51b70a99", "html_url": "https://github.com/rust-lang/rust/commit/7d99866bfc43f34dbdd84f4bf982c48a51b70a99"}], "stats": {"total": 72, "additions": 50, "deletions": 22}, "files": [{"sha": "337a19dd024d2fec195601c77de253036df847bf", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c67903ef21d18024f14609a7996fcf14b6b8d5b6/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67903ef21d18024f14609a7996fcf14b6b8d5b6/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=c67903ef21d18024f14609a7996fcf14b6b8d5b6", "patch": "@@ -248,13 +248,9 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_where_predicate(&mut self, p: &'a ast::WherePredicate) {\n-        use rustc_ast::{WhereBoundPredicate, WherePredicate};\n-        if let WherePredicate::BoundPredicate(WhereBoundPredicate { bounded_ty, .. }) = p &&\n-            let ast::TyKind::BareFn(b) = &bounded_ty.kind &&\n-            b.generic_params.len() > 0 {\n-                return;\n-        }\n+        lint_callback!(self, enter_where_predicate, p);\n         ast_visit::walk_where_predicate(self, p);\n+        lint_callback!(self, exit_where_predicate, p);\n     }\n \n     fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef) {"}, {"sha": "d6be4da03286f75f1e4868e5bac454b345008a8b", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c67903ef21d18024f14609a7996fcf14b6b8d5b6/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67903ef21d18024f14609a7996fcf14b6b8d5b6/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=c67903ef21d18024f14609a7996fcf14b6b8d5b6", "patch": "@@ -145,7 +145,7 @@ early_lint_methods!(\n     [\n         pub BuiltinCombinedEarlyLintPass,\n         [\n-            UnusedParens: UnusedParens,\n+            UnusedParens: UnusedParens::new(),\n             UnusedBraces: UnusedBraces,\n             UnusedImportBraces: UnusedImportBraces,\n             UnsafeCode: UnsafeCode,"}, {"sha": "0bf01c4e567814f1f720de66362f310cf5c0f934", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c67903ef21d18024f14609a7996fcf14b6b8d5b6/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67903ef21d18024f14609a7996fcf14b6b8d5b6/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=c67903ef21d18024f14609a7996fcf14b6b8d5b6", "patch": "@@ -171,6 +171,9 @@ macro_rules! early_lint_methods {\n \n             /// Counterpart to `enter_lint_attrs`.\n             fn exit_lint_attrs(a: &[ast::Attribute]);\n+\n+            fn enter_where_predicate(a: &ast::WherePredicate);\n+            fn exit_where_predicate(a: &ast::WherePredicate);\n         ]);\n     )\n }"}, {"sha": "65f2644a858af4d06cb824b63d0089b53d9d2c7a", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c67903ef21d18024f14609a7996fcf14b6b8d5b6/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67903ef21d18024f14609a7996fcf14b6b8d5b6/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=c67903ef21d18024f14609a7996fcf14b6b8d5b6", "patch": "@@ -824,7 +824,17 @@ declare_lint! {\n     \"`if`, `match`, `while` and `return` do not need parentheses\"\n }\n \n-declare_lint_pass!(UnusedParens => [UNUSED_PARENS]);\n+pub struct UnusedParens {\n+    with_self_ty_parens: bool,\n+}\n+\n+impl UnusedParens {\n+    pub fn new() -> Self {\n+        Self { with_self_ty_parens: false }\n+    }\n+}\n+\n+impl_lint_pass!(UnusedParens => [UNUSED_PARENS]);\n \n impl UnusedDelimLint for UnusedParens {\n     const DELIM_STR: &'static str = \"parentheses\";\n@@ -999,20 +1009,22 @@ impl EarlyLintPass for UnusedParens {\n     }\n \n     fn check_ty(&mut self, cx: &EarlyContext<'_>, ty: &ast::Ty) {\n+        if let ast::TyKind::Array(_, len) = &ty.kind {\n+            self.check_unused_delims_expr(\n+                cx,\n+                &len.value,\n+                UnusedDelimsCtx::ArrayLenExpr,\n+                false,\n+                None,\n+                None,\n+            );\n+        }\n         if let ast::TyKind::Paren(r) = &ty.kind {\n             match &r.kind {\n                 ast::TyKind::TraitObject(..) => {}\n+                ast::TyKind::BareFn(b)\n+                    if self.with_self_ty_parens && b.generic_params.len() > 0 => {}\n                 ast::TyKind::ImplTrait(_, bounds) if bounds.len() > 1 => {}\n-                ast::TyKind::Array(_, len) => {\n-                    self.check_unused_delims_expr(\n-                        cx,\n-                        &len.value,\n-                        UnusedDelimsCtx::ArrayLenExpr,\n-                        false,\n-                        None,\n-                        None,\n-                    );\n-                }\n                 _ => {\n                     let spans = if let Some(r) = r.span.find_ancestor_inside(ty.span) {\n                         Some((ty.span.with_hi(r.lo()), ty.span.with_lo(r.hi())))\n@@ -1028,6 +1040,23 @@ impl EarlyLintPass for UnusedParens {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n         <Self as UnusedDelimLint>::check_item(self, cx, item)\n     }\n+\n+    fn enter_where_predicate(&mut self, _: &EarlyContext<'_>, pred: &ast::WherePredicate) {\n+        use rustc_ast::{WhereBoundPredicate, WherePredicate};\n+        if let WherePredicate::BoundPredicate(WhereBoundPredicate {\n+                bounded_ty,\n+                bound_generic_params,\n+                ..\n+            }) = pred &&\n+            let ast::TyKind::Paren(_) = &bounded_ty.kind &&\n+            bound_generic_params.is_empty() {\n+                self.with_self_ty_parens = true;\n+        }\n+    }\n+\n+    fn exit_where_predicate(&mut self, _: &EarlyContext<'_>, _: &ast::WherePredicate) {\n+        self.with_self_ty_parens = false;\n+    }\n }\n \n declare_lint! {"}, {"sha": "3581484050dd1a4e506574b46d99ce609c5ed996", "filename": "library/std/src/io/error/repr_bitpacked.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c67903ef21d18024f14609a7996fcf14b6b8d5b6/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67903ef21d18024f14609a7996fcf14b6b8d5b6/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Frepr_bitpacked.rs?ref=c67903ef21d18024f14609a7996fcf14b6b8d5b6", "patch": "@@ -374,10 +374,10 @@ static_assert!((TAG_MASK + 1).is_power_of_two());\n static_assert!(align_of::<SimpleMessage>() >= TAG_MASK + 1);\n static_assert!(align_of::<Custom>() >= TAG_MASK + 1);\n \n-static_assert!(@usize_eq: (TAG_MASK & TAG_SIMPLE_MESSAGE), TAG_SIMPLE_MESSAGE);\n-static_assert!(@usize_eq: (TAG_MASK & TAG_CUSTOM), TAG_CUSTOM);\n-static_assert!(@usize_eq: (TAG_MASK & TAG_OS), TAG_OS);\n-static_assert!(@usize_eq: (TAG_MASK & TAG_SIMPLE), TAG_SIMPLE);\n+static_assert!(@usize_eq: TAG_MASK & TAG_SIMPLE_MESSAGE, TAG_SIMPLE_MESSAGE);\n+static_assert!(@usize_eq: TAG_MASK & TAG_CUSTOM, TAG_CUSTOM);\n+static_assert!(@usize_eq: TAG_MASK & TAG_OS, TAG_OS);\n+static_assert!(@usize_eq: TAG_MASK & TAG_SIMPLE, TAG_SIMPLE);\n \n // This is obviously true (`TAG_CUSTOM` is `0b01`), but in `Repr::new_custom` we\n // offset a pointer by this value, and expect it to both be within the same"}]}