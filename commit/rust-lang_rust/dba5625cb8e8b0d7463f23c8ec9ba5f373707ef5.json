{"sha": "dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYTU2MjVjYjhlOGIwZDc0NjNmMjNjOGVjOWJhNWYzNzM3MDdlZjU=", "commit": {"author": {"name": "Piotr Zolnierek", "email": "pz@anixe.pl", "date": "2014-03-01T06:40:38Z"}, "committer": {"name": "Piotr Zolnierek", "email": "pz@anixe.pl", "date": "2014-03-13T11:23:24Z"}, "message": "Remove code duplication\n\nRemove whitespace\n\nUpdate documentation for to_uppercase, to_lowercase", "tree": {"sha": "1b1284c24d902b0fe59855ea678725a65d6bad5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b1284c24d902b0fe59855ea678725a65d6bad5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5", "html_url": "https://github.com/rust-lang/rust/commit/dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5/comments", "author": null, "committer": null, "parents": [{"sha": "04170b0a4166de0612d24bb3a22a133dbe99cc15", "url": "https://api.github.com/repos/rust-lang/rust/commits/04170b0a4166de0612d24bb3a22a133dbe99cc15", "html_url": "https://github.com/rust-lang/rust/commit/04170b0a4166de0612d24bb3a22a133dbe99cc15"}], "stats": {"total": 130, "additions": 51, "deletions": 79}, "files": [{"sha": "e32954c75d4fe8ad24bc51862de28f3b79338b58", "filename": "src/etc/unicode.py", "status": "modified", "additions": 19, "deletions": 27, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5", "patch": "@@ -160,23 +160,22 @@ def ch_prefix(ix):\n \n def emit_bsearch_range_table(f):\n     f.write(\"\"\"\n-    fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n-        use cmp::{Equal, Less, Greater};\n-        use vec::ImmutableVector;\n-        use option::None;\n-        r.bsearch(|&(lo,hi)| {\n-            if lo <= c && c <= hi { Equal }\n-            else if hi < c { Less }\n-            else { Greater }\n-        }) != None\n-    }\\n\\n\n+fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n+    use cmp::{Equal, Less, Greater};\n+    use vec::ImmutableVector;\n+    use option::None;\n+    r.bsearch(|&(lo,hi)| {\n+        if lo <= c && c <= hi { Equal }\n+        else if hi < c { Less }\n+        else { Greater }\n+    }) != None\n+}\\n\\n\n \"\"\");\n \n def emit_property_module(f, mod, tbl):\n     f.write(\"pub mod %s {\\n\" % mod)\n     keys = tbl.keys()\n     keys.sort()\n-    emit_bsearch_range_table(f);\n \n     for cat in keys:\n         if cat not in [\"Nd\", \"Nl\", \"No\", \"Cc\",\n@@ -192,7 +191,7 @@ def emit_property_module(f, mod, tbl):\n         f.write(\"\\n    ];\\n\\n\")\n \n         f.write(\"    pub fn %s(c: char) -> bool {\\n\" % cat)\n-        f.write(\"        bsearch_range_table(c, %s_table)\\n\" % cat)\n+        f.write(\"        super::bsearch_range_table(c, %s_table)\\n\" % cat)\n         f.write(\"    }\\n\\n\")\n     f.write(\"}\\n\")\n \n@@ -203,7 +202,7 @@ def emit_conversions_module(f, lowerupper, upperlower):\n     use cmp::{Equal, Less, Greater};\n     use vec::ImmutableVector;\n     use tuple::Tuple2;\n-    use option::{ Option, Some, None };\n+    use option::{Option, Some, None};\n \n     pub fn to_lower(c: char) -> char {\n         match bsearch_case_table(c, LuLl_table) {\n@@ -227,23 +226,15 @@ def emit_conversions_module(f, lowerupper, upperlower):\n         })\n     }\n \"\"\");\n-    emit_caseconversions(f, lowerupper, upperlower)\n+    emit_caseconversion_table(f, \"LuLl\", upperlower)\n+    emit_caseconversion_table(f, \"LlLu\", lowerupper)\n     f.write(\"}\\n\")\n \n-def emit_caseconversions(f, lowerupper, upperlower):\n-    f.write(\"   static LuLl_table : &'static [(char, char)] = &[\\n\")\n-    sorted_by_lu = sorted(upperlower.iteritems(), key=operator.itemgetter(0))\n-    ix = 0\n-    for key, value in sorted_by_lu:\n-        f.write(ch_prefix(ix))\n-        f.write(\"(%s, %s)\" % (escape_char(key), escape_char(value)))\n-        ix += 1\n-    f.write(\"\\n    ];\\n\\n\")\n-\n-    f.write(\"   static LlLu_table : &'static [(char, char)] = &[\\n\")\n-    sorted_by_ll = sorted(lowerupper.iteritems(), key=operator.itemgetter(0))\n+def emit_caseconversion_table(f, name, table):\n+    f.write(\"   static %s_table : &'static [(char, char)] = &[\\n\" % name)\n+    sorted_table = sorted(table.iteritems(), key=operator.itemgetter(0))\n     ix = 0\n-    for key, value in sorted_by_ll:\n+    for key, value in sorted_table:\n         f.write(ch_prefix(ix))\n         f.write(\"(%s, %s)\" % (escape_char(key), escape_char(value)))\n         ix += 1\n@@ -425,6 +416,7 @@ def emit_decomp_module(f, canon, compat, combine):\n \n ''')\n \n+emit_bsearch_range_table(rf);\n emit_property_module(rf, \"general_category\", gencats)\n \n emit_decomp_module(rf, canon_decomp, compat_decomp, combines)"}, {"sha": "52ca28c4ce890ae4a144e1757bb527ab6a0f552b", "filename": "src/libstd/char.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5", "patch": "@@ -228,20 +228,26 @@ pub fn to_digit(c: char, radix: uint) -> Option<uint> {\n /// Convert a char to its uppercase equivalent\n ///\n /// The case-folding performed is the common or simple mapping:\n-/// it only maps a codepoint to its equivalent if it is also a single codepoint\n+/// it maps one unicode codepoint (one char in Rust) to its uppercase equivalent according\n+/// to the Unicode database at ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt\n+/// The additional SpecialCasing.txt is not considered here, as it expands to multiple\n+/// codepoints in some cases.\n+///\n+/// A full reference can be found here\n+/// http://www.unicode.org/versions/Unicode4.0.0/ch03.pdf#G33992\n ///\n /// # Return value\n ///\n-/// Returns the char itself if no conversion if possible\n+/// Returns the char itself if no conversion was made\n #[inline]\n pub fn to_uppercase(c: char) -> char {\n     conversions::to_upper(c)\n }\n \n /// Convert a char to its lowercase equivalent\n ///\n-/// The case-folding performed is the common or simple mapping:\n-/// it only maps a codepoint to its equivalent if it is also a single codepoint\n+/// The case-folding performed is the common or simple mapping\n+/// see `to_uppercase` for references and more information\n ///\n /// # Return value\n ///"}, {"sha": "b43003f0de2edbcb8b63bab569fcf2a91de29c43", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 22, "deletions": 48, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=dba5625cb8e8b0d7463f23c8ec9ba5f373707ef5", "patch": "@@ -13,26 +13,26 @@\n #[allow(missing_doc)];\n #[allow(non_uppercase_statics)];\n \n-pub mod general_category {\n \n-    fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n-        use cmp::{Equal, Less, Greater};\n-        use vec::ImmutableVector;\n-        use option::None;\n-        r.bsearch(|&(lo,hi)| {\n-            if lo <= c && c <= hi { Equal }\n-            else if hi < c { Less }\n-            else { Greater }\n-        }) != None\n-    }\n+fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n+    use cmp::{Equal, Less, Greater};\n+    use vec::ImmutableVector;\n+    use option::None;\n+    r.bsearch(|&(lo,hi)| {\n+        if lo <= c && c <= hi { Equal }\n+        else if hi < c { Less }\n+        else { Greater }\n+    }) != None\n+}\n \n \n+pub mod general_category {\n     static Cc_table : &'static [(char,char)] = &[\n         ('\\x00', '\\x1f'), ('\\x7f', '\\x9f')\n     ];\n \n     pub fn Cc(c: char) -> bool {\n-        bsearch_range_table(c, Cc_table)\n+        super::bsearch_range_table(c, Cc_table)\n     }\n \n     static Nd_table : &'static [(char,char)] = &[\n@@ -60,7 +60,7 @@ pub mod general_category {\n     ];\n \n     pub fn Nd(c: char) -> bool {\n-        bsearch_range_table(c, Nd_table)\n+        super::bsearch_range_table(c, Nd_table)\n     }\n \n     static Nl_table : &'static [(char,char)] = &[\n@@ -73,7 +73,7 @@ pub mod general_category {\n     ];\n \n     pub fn Nl(c: char) -> bool {\n-        bsearch_range_table(c, Nl_table)\n+        super::bsearch_range_table(c, Nl_table)\n     }\n \n     static No_table : &'static [(char,char)] = &[\n@@ -101,7 +101,7 @@ pub mod general_category {\n     ];\n \n     pub fn No(c: char) -> bool {\n-        bsearch_range_table(c, No_table)\n+        super::bsearch_range_table(c, No_table)\n     }\n \n }\n@@ -2323,19 +2323,6 @@ pub mod decompose {\n }\n \n pub mod derived_property {\n-\n-    fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n-        use cmp::{Equal, Less, Greater};\n-        use vec::ImmutableVector;\n-        use option::None;\n-        r.bsearch(|&(lo,hi)| {\n-            if lo <= c && c <= hi { Equal }\n-            else if hi < c { Less }\n-            else { Greater }\n-        }) != None\n-    }\n-\n-\n     static Alphabetic_table : &'static [(char,char)] = &[\n         ('\\x41', '\\x5a'), ('\\x61', '\\x7a'),\n         ('\\xaa', '\\xaa'), ('\\xb5', '\\xb5'),\n@@ -2745,7 +2732,7 @@ pub mod derived_property {\n     ];\n \n     pub fn Alphabetic(c: char) -> bool {\n-        bsearch_range_table(c, Alphabetic_table)\n+        super::bsearch_range_table(c, Alphabetic_table)\n     }\n \n     static Lowercase_table : &'static [(char,char)] = &[\n@@ -3067,7 +3054,7 @@ pub mod derived_property {\n     ];\n \n     pub fn Lowercase(c: char) -> bool {\n-        bsearch_range_table(c, Lowercase_table)\n+        super::bsearch_range_table(c, Lowercase_table)\n     }\n \n     static Uppercase_table : &'static [(char,char)] = &[\n@@ -3379,7 +3366,7 @@ pub mod derived_property {\n     ];\n \n     pub fn Uppercase(c: char) -> bool {\n-        bsearch_range_table(c, Uppercase_table)\n+        super::bsearch_range_table(c, Uppercase_table)\n     }\n \n     static XID_Continue_table : &'static [(char,char)] = &[\n@@ -3863,7 +3850,7 @@ pub mod derived_property {\n     ];\n \n     pub fn XID_Continue(c: char) -> bool {\n-        bsearch_range_table(c, XID_Continue_table)\n+        super::bsearch_range_table(c, XID_Continue_table)\n     }\n \n     static XID_Start_table : &'static [(char,char)] = &[\n@@ -4147,24 +4134,11 @@ pub mod derived_property {\n     ];\n \n     pub fn XID_Start(c: char) -> bool {\n-        bsearch_range_table(c, XID_Start_table)\n+        super::bsearch_range_table(c, XID_Start_table)\n     }\n \n }\n pub mod property {\n-\n-    fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n-        use cmp::{Equal, Less, Greater};\n-        use vec::ImmutableVector;\n-        use option::None;\n-        r.bsearch(|&(lo,hi)| {\n-            if lo <= c && c <= hi { Equal }\n-            else if hi < c { Less }\n-            else { Greater }\n-        }) != None\n-    }\n-\n-\n     static White_Space_table : &'static [(char,char)] = &[\n         ('\\x09', '\\x0d'), ('\\x20', '\\x20'),\n         ('\\x85', '\\x85'), ('\\xa0', '\\xa0'),\n@@ -4175,7 +4149,7 @@ pub mod property {\n     ];\n \n     pub fn White_Space(c: char) -> bool {\n-        bsearch_range_table(c, White_Space_table)\n+        super::bsearch_range_table(c, White_Space_table)\n     }\n \n }\n@@ -4184,7 +4158,7 @@ pub mod conversions {\n     use cmp::{Equal, Less, Greater};\n     use vec::ImmutableVector;\n     use tuple::Tuple2;\n-    use option::{ Option, Some, None };\n+    use option::{Option, Some, None};\n \n     pub fn to_lower(c: char) -> char {\n         match bsearch_case_table(c, LuLl_table) {"}]}