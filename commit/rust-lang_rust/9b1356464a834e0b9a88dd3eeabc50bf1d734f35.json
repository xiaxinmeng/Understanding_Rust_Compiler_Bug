{"sha": "9b1356464a834e0b9a88dd3eeabc50bf1d734f35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMTM1NjQ2NGE4MzRlMGI5YTg4ZGQzZWVhYmM1MGJmMWQ3MzRmMzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-08T20:16:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-09T10:33:16Z"}, "message": "propagate deps to CrateGraph", "tree": {"sha": "880f693f1e800c263a08654456c3958cd6c650fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/880f693f1e800c263a08654456c3958cd6c650fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b1356464a834e0b9a88dd3eeabc50bf1d734f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b1356464a834e0b9a88dd3eeabc50bf1d734f35", "html_url": "https://github.com/rust-lang/rust/commit/9b1356464a834e0b9a88dd3eeabc50bf1d734f35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b1356464a834e0b9a88dd3eeabc50bf1d734f35/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32c067f8c9aec56bb502c5a569884679bae27af3", "url": "https://api.github.com/repos/rust-lang/rust/commits/32c067f8c9aec56bb502c5a569884679bae27af3", "html_url": "https://github.com/rust-lang/rust/commit/32c067f8c9aec56bb502c5a569884679bae27af3"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "a48d05b98a19059d19418a6dd1ccd8b04dd8d2f5", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b1356464a834e0b9a88dd3eeabc50bf1d734f35/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1356464a834e0b9a88dd3eeabc50bf1d734f35/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=9b1356464a834e0b9a88dd3eeabc50bf1d734f35", "patch": "@@ -48,6 +48,9 @@ impl CrateGraph {\n         assert!(prev.is_none());\n         crate_id\n     }\n+    //FIXME: check that we don't have cycles here.\n+    // Just a simple depth first search from `to` should work,\n+    // the graph is small.\n     pub fn add_dep(&mut self, from: CrateId, to: CrateId) {\n         self.arena.get_mut(&from).unwrap().add_dep(to)\n     }"}, {"sha": "5da71b9f54f4104d0f4a55e1479763e3d3af0e9f", "filename": "crates/ra_lsp_server/src/project_model.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b1356464a834e0b9a88dd3eeabc50bf1d734f35/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1356464a834e0b9a88dd3eeabc50bf1d734f35/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs?ref=9b1356464a834e0b9a88dd3eeabc50bf1d734f35", "patch": "@@ -1,6 +1,5 @@\n use std::path::{Path, PathBuf};\n \n-use serde_derive::Serialize;\n use cargo_metadata::{metadata_run, CargoOpt};\n use ra_syntax::SmolStr;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -11,15 +10,22 @@ use crate::{\n     thread_watcher::{ThreadWatcher, Worker},\n };\n \n+/// `CargoWorksapce` represents the logical structure of, well, a Cargo\n+/// workspace. It pretty closely mirrors `cargo metadata` output.\n+///\n+/// Note that internally, rust analyzer uses a differnet structure:\n+/// `CrateGraph`. `CrateGraph` is lower-level: it knows only about the crates,\n+/// while this knows about `Pacakges` & `Targets`: purely cargo-related\n+/// concepts.\n #[derive(Debug, Clone)]\n pub struct CargoWorkspace {\n     packages: Vec<PackageData>,\n     targets: Vec<TargetData>,\n }\n \n-#[derive(Clone, Copy, Debug, Serialize)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct Package(usize);\n-#[derive(Clone, Copy, Debug, Serialize)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct Target(usize);\n \n #[derive(Debug, Clone)]\n@@ -62,6 +68,9 @@ impl Package {\n     pub fn is_member(self, ws: &CargoWorkspace) -> bool {\n         ws.pkg(self).is_member\n     }\n+    pub fn dependencies<'a>(self, ws: &'a CargoWorkspace) -> impl Iterator<Item = Package> + 'a {\n+        ws.pkg(self).dependencies.iter().cloned()\n+    }\n }\n \n impl Target {"}, {"sha": "f2d602dc7856b6f8cb3880e96a5d9b37c4165bb3", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9b1356464a834e0b9a88dd3eeabc50bf1d734f35/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b1356464a834e0b9a88dd3eeabc50bf1d734f35/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=9b1356464a834e0b9a88dd3eeabc50bf1d734f35", "patch": "@@ -13,7 +13,7 @@ use failure::{bail, format_err};\n \n use crate::{\n     path_map::{PathMap, Root},\n-    project_model::CargoWorkspace,\n+    project_model::{CargoWorkspace, TargetKind},\n     vfs::{FileEvent, FileEventKind},\n     Result,\n };\n@@ -142,17 +142,34 @@ impl ServerWorldState {\n     }\n     pub fn set_workspaces(&mut self, ws: Vec<CargoWorkspace>) {\n         let mut crate_graph = CrateGraph::default();\n-        ws.iter()\n-            .flat_map(|ws| {\n-                ws.packages()\n-                    .flat_map(move |pkg| pkg.targets(ws))\n-                    .map(move |tgt| tgt.root(ws))\n-            })\n-            .for_each(|root| {\n-                if let Some(file_id) = self.path_map.get_id(root) {\n-                    crate_graph.add_crate_root(file_id);\n+        let mut pkg_to_lib_crate = FxHashMap::default();\n+        let mut pkg_crates = FxHashMap::default();\n+        for ws in ws.iter() {\n+            for pkg in ws.packages() {\n+                for tgt in pkg.targets(ws) {\n+                    let root = tgt.root(ws);\n+                    if let Some(file_id) = self.path_map.get_id(root) {\n+                        let crate_id = crate_graph.add_crate_root(file_id);\n+                        if tgt.kind(ws) == TargetKind::Lib {\n+                            pkg_to_lib_crate.insert(pkg, crate_id);\n+                        }\n+                        pkg_crates\n+                            .entry(pkg)\n+                            .or_insert_with(Vec::new)\n+                            .push(crate_id);\n+                    }\n+                }\n+            }\n+            for pkg in ws.packages() {\n+                for dep in pkg.dependencies(ws) {\n+                    if let Some(&to) = pkg_to_lib_crate.get(&dep) {\n+                        for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n+                            crate_graph.add_dep(from, to);\n+                        }\n+                    }\n                 }\n-            });\n+            }\n+        }\n         self.workspaces = Arc::new(ws);\n         let mut change = AnalysisChange::new();\n         change.set_crate_graph(crate_graph);"}]}