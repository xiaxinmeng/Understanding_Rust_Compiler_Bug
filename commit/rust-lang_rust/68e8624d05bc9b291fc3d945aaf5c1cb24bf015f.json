{"sha": "68e8624d05bc9b291fc3d945aaf5c1cb24bf015f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZTg2MjRkMDViYzliMjkxZmMzZDk0NWFhZjVjMWNiMjRiZjAxNWY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-09-08T01:40:31Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2016-09-16T03:06:29Z"}, "message": "Specify when type parameter shadows primitive type\n\nWhen a type parameter shadows a primitive type, the error message\nwas non obvious. For example, given the file `file.rs`:\n\n```rust\ntrait Parser<T> {\n    fn parse(text: &str) -> Option<T>;\n}\n\nimpl<bool> Parser<bool> for bool {\n    fn parse(text: &str) -> Option<bool> {\n        Some(true)\n    }\n}\n\nfn main() {\n    println!(\"{}\", bool::parse(\"ok\").unwrap_or(false));\n}\n```\n\nThe output was:\n\n```bash\n% rustc file.rs\nerror[E0308]: mismatched types\n --> file.rs:7:14\n  |\n7 |         Some(true)\n  |              ^^^^ expected type parameter, found bool\n  |\n  = note: expected type `bool`\n  = note:    found type `bool`\n\nerror: aborting due to previous error\n```\n\nWe now show extra information about the type:\n\n```bash\n% rustc file.rs\nerror[E0308]: mismatched types\n --> file.rs:7:14\n  |\n7 |         Some(true)\n  |              ^^^^ expected type parameter, found bool\n  |\n  = note: expected type `bool` (type parameter)\n  = note:    found type `bool` (bool)\n\nerror: aborting due to previous error\n```\n\nFixes #35030", "tree": {"sha": "4ab82df7b25b87e929bdd75af2b4c515a2499bf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ab82df7b25b87e929bdd75af2b4c515a2499bf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68e8624d05bc9b291fc3d945aaf5c1cb24bf015f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68e8624d05bc9b291fc3d945aaf5c1cb24bf015f", "html_url": "https://github.com/rust-lang/rust/commit/68e8624d05bc9b291fc3d945aaf5c1cb24bf015f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68e8624d05bc9b291fc3d945aaf5c1cb24bf015f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87ba3f1222ba20d491e8ed76a04977283280742", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87ba3f1222ba20d491e8ed76a04977283280742", "html_url": "https://github.com/rust-lang/rust/commit/c87ba3f1222ba20d491e8ed76a04977283280742"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "2792968d427aa95d39b99bf2e6e2202bd6800153", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/68e8624d05bc9b291fc3d945aaf5c1cb24bf015f/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e8624d05bc9b291fc3d945aaf5c1cb24bf015f/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=68e8624d05bc9b291fc3d945aaf5c1cb24bf015f", "patch": "@@ -547,7 +547,18 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             };\n \n             if !is_simple_error {\n-                diag.note_expected_found(&\"type\", &expected, &found);\n+                if expected == found {\n+                    if let &TypeError::Sorts(ref values) = terr {\n+                        diag.note_expected_found_extra(\n+                            &\"type\", &expected, &found,\n+                            &format!(\" ({})\", values.expected.sort_string(self.tcx)),\n+                            &format!(\" ({})\", values.found.sort_string(self.tcx)));\n+                    } else {\n+                        diag.note_expected_found(&\"type\", &expected, &found);\n+                    }\n+                } else {\n+                    diag.note_expected_found(&\"type\", &expected, &found);\n+                }\n             }\n         }\n "}, {"sha": "001f47af68c3bf67b0727f6425a2040eb5c0ef32", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68e8624d05bc9b291fc3d945aaf5c1cb24bf015f/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e8624d05bc9b291fc3d945aaf5c1cb24bf015f/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=68e8624d05bc9b291fc3d945aaf5c1cb24bf015f", "patch": "@@ -210,7 +210,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n }\n \n impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n-    fn sort_string(&self, tcx: TyCtxt<'a, 'gcx, 'lcx>) -> String {\n+    pub fn sort_string(&self, tcx: TyCtxt<'a, 'gcx, 'lcx>) -> String {\n         match self.sty {\n             ty::TyBool | ty::TyChar | ty::TyInt(_) |\n             ty::TyUint(_) | ty::TyFloat(_) | ty::TyStr | ty::TyNever => self.to_string(),"}, {"sha": "d2f3eea85f2285ea4e10e3ab26e4fe9b4ad854df", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/68e8624d05bc9b291fc3d945aaf5c1cb24bf015f/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e8624d05bc9b291fc3d945aaf5c1cb24bf015f/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=68e8624d05bc9b291fc3d945aaf5c1cb24bf015f", "patch": "@@ -273,10 +273,21 @@ impl<'a> DiagnosticBuilder<'a> {\n                                expected: &fmt::Display,\n                                found: &fmt::Display)\n                                -> &mut DiagnosticBuilder<'a>\n+    {\n+        self.note_expected_found_extra(label, expected, found, &\"\", &\"\")\n+    }\n+\n+    pub fn note_expected_found_extra(&mut self,\n+                                     label: &fmt::Display,\n+                                     expected: &fmt::Display,\n+                                     found: &fmt::Display,\n+                                     expected_extra: &fmt::Display,\n+                                     found_extra: &fmt::Display)\n+                                     -> &mut DiagnosticBuilder<'a>\n     {\n         // For now, just attach these as notes\n-        self.note(&format!(\"expected {} `{}`\", label, expected));\n-        self.note(&format!(\"   found {} `{}`\", label, found));\n+        self.note(&format!(\"expected {} `{}`{}\", label, expected, expected_extra));\n+        self.note(&format!(\"   found {} `{}`{}\", label, found, found_extra));\n         self\n     }\n \n@@ -764,4 +775,4 @@ pub fn expect<T, M>(diag: &Handler, opt: Option<T>, msg: M) -> T where\n         Some(t) => t,\n         None => diag.bug(&msg()),\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "006074ead13bdb8666156f483756a1a673ed46ed", "filename": "src/test/ui/mismatched_types/issue-35030.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/68e8624d05bc9b291fc3d945aaf5c1cb24bf015f/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68e8624d05bc9b291fc3d945aaf5c1cb24bf015f/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.rs?ref=68e8624d05bc9b291fc3d945aaf5c1cb24bf015f", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// rustc-env:RUST_NEW_ERROR_FORMAT\n+\n+trait Parser<T> {\n+    fn parse(text: &str) -> Option<T>;\n+}\n+\n+impl<bool> Parser<bool> for bool {\n+    fn parse(text: &str) -> Option<bool> {\n+        Some(true)\n+    }\n+}\n+\n+fn main() {\n+    println!(\"{}\", bool::parse(\"ok\").unwrap_or(false));\n+}"}, {"sha": "aa017297a4e154a8d2ec1626aaaa0f28803ce459", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/68e8624d05bc9b291fc3d945aaf5c1cb24bf015f/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/68e8624d05bc9b291fc3d945aaf5c1cb24bf015f/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=68e8624d05bc9b291fc3d945aaf5c1cb24bf015f", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-35030.rs:19:14\n+   |\n+19 |         Some(true)\n+   |              ^^^^ expected type parameter, found bool\n+   |\n+   = note: expected type `bool` (type parameter)\n+   = note:    found type `bool` (bool)\n+\n+error: aborting due to previous error\n+"}]}