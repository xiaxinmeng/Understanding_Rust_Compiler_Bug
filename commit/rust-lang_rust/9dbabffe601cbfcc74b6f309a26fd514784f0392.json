{"sha": "9dbabffe601cbfcc74b6f309a26fd514784f0392", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYmFiZmZlNjAxY2JmY2M3NGI2ZjMwOWEyNmZkNTE0Nzg0ZjAzOTI=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-02-10T08:44:49Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-02-10T08:48:31Z"}, "message": "UI test cleanup: Extract similar_names tests", "tree": {"sha": "1a787df9e395460bfdc260eab71edfb909ac3892", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a787df9e395460bfdc260eab71edfb909ac3892"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dbabffe601cbfcc74b6f309a26fd514784f0392", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlxf5WAACgkQtvoGpuDi\nZlv+nA//T/b0M5IZmo4aPAkwCegSNLqpAWl4KH/ugKu2Kmal1BmWStKQiaVZUtnM\n7ie6nUVWoGn+i8m/kp2gu6syf3XPGjDZI8Mi1kgfH3yDBTvMWFlsngeNfEvYyeov\nzADVhcPmrb67KHe87QIV8D8nlJGPa13nWos84MQekbjwbNwwzlKNjlyPwl2FiNbx\nhlQUvsJSuN8ioJiUOK7Uc71NkripNERKkRVWL+a5nPpLAV4HomaZR6c4zaNgqKlr\nxWmgMgElCZVlK+QWjlWUxTr2GN77EArm9Ox8ZzWb75cJitnANPUFTV19+bZN0ZyZ\nkkMFjudzXpzoXm0H+vJcgumkFG57dvbnrTDUvZIB5cnDC2qp6y4AiaeFsSLpAAoh\nsnFY33p2/kGexfCjgg2OOwXMeqU0KcQXdsYZm4JldgWoj/yHMcxeYAKqru80wp0/\nDMr4wdzwNTYjwr481zDVVxu/AP8haOACALt49Zx34c5YUsjjlIrwE8eT+ZlRuGWM\np5o8Nm5lAQwOvZpA7rl4prea+d7PnxISz3COqRnHuSdCg9Q7RUrxwGDHsC5230+Y\nkbIm6K34tVcKQj/xLNVCjO+blDOTlkLxxTArWpHsQsQVXV4kMthvFVFehhT3cHSJ\nLQiW9Xe/u2ud1q32vb5MnN2l2Xtc1qqm2mJbj7mk+Sb8vu9nwZw=\n=7yoR\n-----END PGP SIGNATURE-----", "payload": "tree 1a787df9e395460bfdc260eab71edfb909ac3892\nparent 5725726345039830677a0aeb8389ae78ce01ff97\nauthor Philipp Hansch <dev@phansch.net> 1549788289 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1549788511 +0100\n\nUI test cleanup: Extract similar_names tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dbabffe601cbfcc74b6f309a26fd514784f0392", "html_url": "https://github.com/rust-lang/rust/commit/9dbabffe601cbfcc74b6f309a26fd514784f0392", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dbabffe601cbfcc74b6f309a26fd514784f0392/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5725726345039830677a0aeb8389ae78ce01ff97", "url": "https://api.github.com/repos/rust-lang/rust/commits/5725726345039830677a0aeb8389ae78ce01ff97", "html_url": "https://github.com/rust-lang/rust/commit/5725726345039830677a0aeb8389ae78ce01ff97"}], "stats": {"total": 440, "additions": 223, "deletions": 217}, "files": [{"sha": "cd158287ff700c53f2fd98ef8758be90d4c513b1", "filename": "tests/ui/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 101, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/9dbabffe601cbfcc74b6f309a26fd514784f0392/tests%2Fui%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbabffe601cbfcc74b6f309a26fd514784f0392/tests%2Fui%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.rs?ref=9dbabffe601cbfcc74b6f309a26fd514784f0392", "patch": "@@ -1,87 +1,6 @@\n-#![warn(clippy::all, clippy::similar_names)]\n+#![warn(clippy::all)]\n #![allow(unused, clippy::println_empty_string)]\n \n-struct Foo {\n-    apple: i32,\n-    bpple: i32,\n-}\n-\n-fn main() {\n-    let specter: i32;\n-    let spectre: i32;\n-\n-    let apple: i32;\n-\n-    let bpple: i32;\n-\n-    let cpple: i32;\n-\n-    let a_bar: i32;\n-    let b_bar: i32;\n-    let c_bar: i32;\n-\n-    let items = [5];\n-    for item in &items {\n-        loop {}\n-    }\n-\n-    let foo_x: i32;\n-    let foo_y: i32;\n-\n-    let rhs: i32;\n-    let lhs: i32;\n-\n-    let bla_rhs: i32;\n-    let bla_lhs: i32;\n-\n-    let blubrhs: i32;\n-    let blublhs: i32;\n-\n-    let blubx: i32;\n-    let bluby: i32;\n-\n-    let cake: i32;\n-    let cakes: i32;\n-    let coke: i32;\n-\n-    match 5 {\n-        cheese @ 1 => {},\n-        rabbit => panic!(),\n-    }\n-    let cheese: i32;\n-    match (42, 43) {\n-        (cheese1, 1) => {},\n-        (cheese2, 2) => panic!(),\n-        _ => println!(\"\"),\n-    }\n-    let ipv4: i32;\n-    let ipv6: i32;\n-    let abcd1: i32;\n-    let abdc2: i32;\n-    let xyz1abc: i32;\n-    let xyz2abc: i32;\n-    let xyzeabc: i32;\n-\n-    let parser: i32;\n-    let parsed: i32;\n-    let parsee: i32;\n-\n-    let setter: i32;\n-    let getter: i32;\n-    let tx1: i32;\n-    let rx1: i32;\n-    let tx_cake: i32;\n-    let rx_cake: i32;\n-}\n-\n-fn foo() {\n-    let Foo { apple, bpple } = unimplemented!();\n-    let Foo {\n-        apple: spring,\n-        bpple: sprang,\n-    } = unimplemented!();\n-}\n-\n #[derive(Clone, Debug)]\n enum MaybeInst {\n     Split,\n@@ -160,22 +79,4 @@ impl Bar {\n     }\n }\n \n-// false positive similar_names (#3057, #2651)\n-// clippy claimed total_reg_src_size and total_size and\n-// numb_reg_src_checkouts and total_bin_size were similar\n-#[derive(Debug, Clone)]\n-pub(crate) struct DirSizes {\n-    pub(crate) total_size: u64,\n-    pub(crate) numb_bins: u64,\n-    pub(crate) total_bin_size: u64,\n-    pub(crate) total_reg_size: u64,\n-    pub(crate) total_git_db_size: u64,\n-    pub(crate) total_git_repos_bare_size: u64,\n-    pub(crate) numb_git_repos_bare_repos: u64,\n-    pub(crate) numb_git_checkouts: u64,\n-    pub(crate) total_git_chk_size: u64,\n-    pub(crate) total_reg_cache_size: u64,\n-    pub(crate) total_reg_src_size: u64,\n-    pub(crate) numb_reg_cache_entries: u64,\n-    pub(crate) numb_reg_src_checkouts: u64,\n-}\n+fn main() {}"}, {"sha": "a81ecdfe4de3180be102c0e5f7d18807574da423", "filename": "tests/ui/non_expressive_names.stderr", "status": "modified", "additions": 11, "deletions": 116, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/9dbabffe601cbfcc74b6f309a26fd514784f0392/tests%2Fui%2Fnon_expressive_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9dbabffe601cbfcc74b6f309a26fd514784f0392/tests%2Fui%2Fnon_expressive_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.stderr?ref=9dbabffe601cbfcc74b6f309a26fd514784f0392", "patch": "@@ -1,171 +1,66 @@\n-error: binding's name is too similar to existing binding\n-  --> $DIR/non_expressive_names.rs:15:9\n-   |\n-LL |     let bpple: i32;\n-   |         ^^^^^\n-   |\n-   = note: `-D clippy::similar-names` implied by `-D warnings`\n-note: existing binding defined here\n-  --> $DIR/non_expressive_names.rs:13:9\n-   |\n-LL |     let apple: i32;\n-   |         ^^^^^\n-help: separate the discriminating character by an underscore like: `b_pple`\n-  --> $DIR/non_expressive_names.rs:15:9\n-   |\n-LL |     let bpple: i32;\n-   |         ^^^^^\n-\n-error: binding's name is too similar to existing binding\n-  --> $DIR/non_expressive_names.rs:17:9\n-   |\n-LL |     let cpple: i32;\n-   |         ^^^^^\n-   |\n-note: existing binding defined here\n-  --> $DIR/non_expressive_names.rs:13:9\n-   |\n-LL |     let apple: i32;\n-   |         ^^^^^\n-help: separate the discriminating character by an underscore like: `c_pple`\n-  --> $DIR/non_expressive_names.rs:17:9\n-   |\n-LL |     let cpple: i32;\n-   |         ^^^^^\n-\n-error: binding's name is too similar to existing binding\n-  --> $DIR/non_expressive_names.rs:41:9\n-   |\n-LL |     let bluby: i32;\n-   |         ^^^^^\n-   |\n-note: existing binding defined here\n-  --> $DIR/non_expressive_names.rs:40:9\n-   |\n-LL |     let blubx: i32;\n-   |         ^^^^^\n-help: separate the discriminating character by an underscore like: `blub_y`\n-  --> $DIR/non_expressive_names.rs:41:9\n-   |\n-LL |     let bluby: i32;\n-   |         ^^^^^\n-\n-error: binding's name is too similar to existing binding\n-  --> $DIR/non_expressive_names.rs:45:9\n-   |\n-LL |     let coke: i32;\n-   |         ^^^^\n-   |\n-note: existing binding defined here\n-  --> $DIR/non_expressive_names.rs:43:9\n-   |\n-LL |     let cake: i32;\n-   |         ^^^^\n-\n-error: binding's name is too similar to existing binding\n-  --> $DIR/non_expressive_names.rs:63:9\n-   |\n-LL |     let xyzeabc: i32;\n-   |         ^^^^^^^\n-   |\n-note: existing binding defined here\n-  --> $DIR/non_expressive_names.rs:61:9\n-   |\n-LL |     let xyz1abc: i32;\n-   |         ^^^^^^^\n-\n-error: binding's name is too similar to existing binding\n-  --> $DIR/non_expressive_names.rs:67:9\n-   |\n-LL |     let parsee: i32;\n-   |         ^^^^^^\n-   |\n-note: existing binding defined here\n-  --> $DIR/non_expressive_names.rs:65:9\n-   |\n-LL |     let parser: i32;\n-   |         ^^^^^^\n-help: separate the discriminating character by an underscore like: `parse_e`\n-  --> $DIR/non_expressive_names.rs:67:9\n-   |\n-LL |     let parsee: i32;\n-   |         ^^^^^^\n-\n-error: binding's name is too similar to existing binding\n-  --> $DIR/non_expressive_names.rs:81:16\n-   |\n-LL |         bpple: sprang,\n-   |                ^^^^^^\n-   |\n-note: existing binding defined here\n-  --> $DIR/non_expressive_names.rs:80:16\n-   |\n-LL |         apple: spring,\n-   |                ^^^^^^\n-\n error: 5th binding whose name is just one char\n-  --> $DIR/non_expressive_names.rs:116:17\n+  --> $DIR/non_expressive_names.rs:35:17\n    |\n LL |             let e: i32;\n    |                 ^\n    |\n    = note: `-D clippy::many-single-char-names` implied by `-D warnings`\n \n error: 5th binding whose name is just one char\n-  --> $DIR/non_expressive_names.rs:119:17\n+  --> $DIR/non_expressive_names.rs:38:17\n    |\n LL |             let e: i32;\n    |                 ^\n \n error: 6th binding whose name is just one char\n-  --> $DIR/non_expressive_names.rs:120:17\n+  --> $DIR/non_expressive_names.rs:39:17\n    |\n LL |             let f: i32;\n    |                 ^\n \n error: 5th binding whose name is just one char\n-  --> $DIR/non_expressive_names.rs:124:13\n+  --> $DIR/non_expressive_names.rs:43:13\n    |\n LL |             e => panic!(),\n    |             ^\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:134:9\n+  --> $DIR/non_expressive_names.rs:53:9\n    |\n LL |     let _1 = 1; //~ERROR Consider a more descriptive name\n    |         ^^\n    |\n    = note: `-D clippy::just-underscores-and-digits` implied by `-D warnings`\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:135:9\n+  --> $DIR/non_expressive_names.rs:54:9\n    |\n LL |     let ____1 = 1; //~ERROR Consider a more descriptive name\n    |         ^^^^^\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:136:9\n+  --> $DIR/non_expressive_names.rs:55:9\n    |\n LL |     let __1___2 = 12; //~ERROR Consider a more descriptive name\n    |         ^^^^^^^\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:156:13\n+  --> $DIR/non_expressive_names.rs:75:13\n    |\n LL |         let _1 = 1;\n    |             ^^\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:157:13\n+  --> $DIR/non_expressive_names.rs:76:13\n    |\n LL |         let ____1 = 1;\n    |             ^^^^^\n \n error: consider choosing a more descriptive name\n-  --> $DIR/non_expressive_names.rs:158:13\n+  --> $DIR/non_expressive_names.rs:77:13\n    |\n LL |         let __1___2 = 12;\n    |             ^^^^^^^\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "6796b15289ecd08909049f5677c4712c2a387a8b", "filename": "tests/ui/similar_names.rs", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/9dbabffe601cbfcc74b6f309a26fd514784f0392/tests%2Fui%2Fsimilar_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dbabffe601cbfcc74b6f309a26fd514784f0392/tests%2Fui%2Fsimilar_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimilar_names.rs?ref=9dbabffe601cbfcc74b6f309a26fd514784f0392", "patch": "@@ -0,0 +1,103 @@\n+#![warn(clippy::similar_names)]\n+#![allow(unused, clippy::println_empty_string)]\n+\n+struct Foo {\n+    apple: i32,\n+    bpple: i32,\n+}\n+\n+fn main() {\n+    let specter: i32;\n+    let spectre: i32;\n+\n+    let apple: i32;\n+\n+    let bpple: i32;\n+\n+    let cpple: i32;\n+\n+    let a_bar: i32;\n+    let b_bar: i32;\n+    let c_bar: i32;\n+\n+    let items = [5];\n+    for item in &items {\n+        loop {}\n+    }\n+\n+    let foo_x: i32;\n+    let foo_y: i32;\n+\n+    let rhs: i32;\n+    let lhs: i32;\n+\n+    let bla_rhs: i32;\n+    let bla_lhs: i32;\n+\n+    let blubrhs: i32;\n+    let blublhs: i32;\n+\n+    let blubx: i32;\n+    let bluby: i32;\n+\n+    let cake: i32;\n+    let cakes: i32;\n+    let coke: i32;\n+\n+    match 5 {\n+        cheese @ 1 => {},\n+        rabbit => panic!(),\n+    }\n+    let cheese: i32;\n+    match (42, 43) {\n+        (cheese1, 1) => {},\n+        (cheese2, 2) => panic!(),\n+        _ => println!(\"\"),\n+    }\n+    let ipv4: i32;\n+    let ipv6: i32;\n+    let abcd1: i32;\n+    let abdc2: i32;\n+    let xyz1abc: i32;\n+    let xyz2abc: i32;\n+    let xyzeabc: i32;\n+\n+    let parser: i32;\n+    let parsed: i32;\n+    let parsee: i32;\n+\n+    let setter: i32;\n+    let getter: i32;\n+    let tx1: i32;\n+    let rx1: i32;\n+    let tx_cake: i32;\n+    let rx_cake: i32;\n+}\n+\n+fn foo() {\n+    let Foo { apple, bpple } = unimplemented!();\n+    let Foo {\n+        apple: spring,\n+        bpple: sprang,\n+    } = unimplemented!();\n+}\n+\n+// false positive similar_names (#3057, #2651)\n+// clippy claimed total_reg_src_size and total_size and\n+// numb_reg_src_checkouts and total_bin_size were similar\n+#[derive(Debug, Clone)]\n+pub(crate) struct DirSizes {\n+    pub(crate) total_size: u64,\n+    pub(crate) numb_bins: u64,\n+    pub(crate) total_bin_size: u64,\n+    pub(crate) total_reg_size: u64,\n+    pub(crate) total_git_db_size: u64,\n+    pub(crate) total_git_repos_bare_size: u64,\n+    pub(crate) numb_git_repos_bare_repos: u64,\n+    pub(crate) numb_git_checkouts: u64,\n+    pub(crate) total_git_chk_size: u64,\n+    pub(crate) total_reg_cache_size: u64,\n+    pub(crate) total_reg_src_size: u64,\n+    pub(crate) numb_reg_cache_entries: u64,\n+    pub(crate) numb_reg_src_checkouts: u64,\n+}"}, {"sha": "0256f126a94fc5d4a0e84ea06aa9ebb60d695e1d", "filename": "tests/ui/similar_names.stderr", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/9dbabffe601cbfcc74b6f309a26fd514784f0392/tests%2Fui%2Fsimilar_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9dbabffe601cbfcc74b6f309a26fd514784f0392/tests%2Fui%2Fsimilar_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsimilar_names.stderr?ref=9dbabffe601cbfcc74b6f309a26fd514784f0392", "patch": "@@ -0,0 +1,107 @@\n+error: binding's name is too similar to existing binding\n+  --> $DIR/similar_names.rs:15:9\n+   |\n+LL |     let bpple: i32;\n+   |         ^^^^^\n+   |\n+   = note: `-D clippy::similar-names` implied by `-D warnings`\n+note: existing binding defined here\n+  --> $DIR/similar_names.rs:13:9\n+   |\n+LL |     let apple: i32;\n+   |         ^^^^^\n+help: separate the discriminating character by an underscore like: `b_pple`\n+  --> $DIR/similar_names.rs:15:9\n+   |\n+LL |     let bpple: i32;\n+   |         ^^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/similar_names.rs:17:9\n+   |\n+LL |     let cpple: i32;\n+   |         ^^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/similar_names.rs:13:9\n+   |\n+LL |     let apple: i32;\n+   |         ^^^^^\n+help: separate the discriminating character by an underscore like: `c_pple`\n+  --> $DIR/similar_names.rs:17:9\n+   |\n+LL |     let cpple: i32;\n+   |         ^^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/similar_names.rs:41:9\n+   |\n+LL |     let bluby: i32;\n+   |         ^^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/similar_names.rs:40:9\n+   |\n+LL |     let blubx: i32;\n+   |         ^^^^^\n+help: separate the discriminating character by an underscore like: `blub_y`\n+  --> $DIR/similar_names.rs:41:9\n+   |\n+LL |     let bluby: i32;\n+   |         ^^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/similar_names.rs:45:9\n+   |\n+LL |     let coke: i32;\n+   |         ^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/similar_names.rs:43:9\n+   |\n+LL |     let cake: i32;\n+   |         ^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/similar_names.rs:63:9\n+   |\n+LL |     let xyzeabc: i32;\n+   |         ^^^^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/similar_names.rs:61:9\n+   |\n+LL |     let xyz1abc: i32;\n+   |         ^^^^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/similar_names.rs:67:9\n+   |\n+LL |     let parsee: i32;\n+   |         ^^^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/similar_names.rs:65:9\n+   |\n+LL |     let parser: i32;\n+   |         ^^^^^^\n+help: separate the discriminating character by an underscore like: `parse_e`\n+  --> $DIR/similar_names.rs:67:9\n+   |\n+LL |     let parsee: i32;\n+   |         ^^^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/similar_names.rs:81:16\n+   |\n+LL |         bpple: sprang,\n+   |                ^^^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/similar_names.rs:80:16\n+   |\n+LL |         apple: spring,\n+   |                ^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}]}