{"sha": "8d3469682681d5b206d5ae31fc63fb97d9cedb3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMzQ2OTY4MjY4MWQ1YjIwNmQ1YWUzMWZjNjNmYjk3ZDljZWRiM2E=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T19:12:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-27T19:12:09Z"}, "message": "Memoize impl resolutions", "tree": {"sha": "e575e72ac9a441b5f9d6112087dab201e9a506ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e575e72ac9a441b5f9d6112087dab201e9a506ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d3469682681d5b206d5ae31fc63fb97d9cedb3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3469682681d5b206d5ae31fc63fb97d9cedb3a", "html_url": "https://github.com/rust-lang/rust/commit/8d3469682681d5b206d5ae31fc63fb97d9cedb3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d3469682681d5b206d5ae31fc63fb97d9cedb3a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27b362b05910c81fd5b28f6cd5d2c075311032f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/27b362b05910c81fd5b28f6cd5d2c075311032f9", "html_url": "https://github.com/rust-lang/rust/commit/27b362b05910c81fd5b28f6cd5d2c075311032f9"}], "stats": {"total": 151, "additions": 76, "deletions": 75}, "files": [{"sha": "9ce154593980737874d4248022690e07a4b79757", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d3469682681d5b206d5ae31fc63fb97d9cedb3a/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3469682681d5b206d5ae31fc63fb97d9cedb3a/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=8d3469682681d5b206d5ae31fc63fb97d9cedb3a", "patch": "@@ -11,7 +11,7 @@ use ra_db::{salsa, CrateId};\n use crate::{\n     method_resolution::CrateImplBlocks,\n     traits::{AssocTyValue, Impl},\n-    CallableDef, FnSig, GenericPredicate, InferenceResult, Substs, Ty, TyDefId, TypeCtor,\n+    CallableDef, FnSig, GenericPredicate, ImplTy, InferenceResult, Substs, Ty, TyDefId, TypeCtor,\n     ValueTyDefId,\n };\n \n@@ -27,6 +27,9 @@ pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(crate::lower::value_ty_query)]\n     fn value_ty(&self, def: ValueTyDefId) -> Ty;\n \n+    #[salsa::invoke(crate::lower::impl_ty_query)]\n+    fn impl_ty(&self, def: ImplId) -> ImplTy;\n+\n     #[salsa::invoke(crate::lower::field_types_query)]\n     fn field_types(&self, var: VariantId) -> Arc<ArenaMap<LocalStructFieldId, Ty>>;\n "}, {"sha": "719a0f395753735f3b62eda1795e4de91d618380", "filename": "crates/ra_hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8d3469682681d5b206d5ae31fc63fb97d9cedb3a/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3469682681d5b206d5ae31fc63fb97d9cedb3a/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=8d3469682681d5b206d5ae31fc63fb97d9cedb3a", "patch": "@@ -4,16 +4,11 @@\n //!\n //! See: https://doc.rust-lang.org/nomicon/coercions.html\n \n-use hir_def::{\n-    lang_item::LangItemTarget,\n-    resolver::{HasResolver, Resolver},\n-    type_ref::Mutability,\n-    AdtId,\n-};\n+use hir_def::{lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutability, AdtId};\n use rustc_hash::FxHashMap;\n use test_utils::tested_by;\n \n-use crate::{autoderef, db::HirDatabase, Substs, TraitRef, Ty, TypeCtor, TypeWalk};\n+use crate::{autoderef, db::HirDatabase, ImplTy, Substs, Ty, TypeCtor, TypeWalk};\n \n use super::{InEnvironment, InferTy, InferenceContext, TypeVarValue};\n \n@@ -59,17 +54,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         impls\n             .iter()\n             .filter_map(|&impl_id| {\n-                let impl_data = db.impl_data(impl_id);\n-                let resolver = impl_id.resolver(db);\n-                let target_ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n+                let trait_ref = match db.impl_ty(impl_id) {\n+                    ImplTy::TraitRef(it) => it,\n+                    ImplTy::Inherent(_) => return None,\n+                };\n \n                 // `CoerseUnsized` has one generic parameter for the target type.\n-                let trait_ref = TraitRef::from_hir(\n-                    db,\n-                    &resolver,\n-                    impl_data.target_trait.as_ref()?,\n-                    Some(target_ty),\n-                )?;\n                 let cur_from_ty = trait_ref.substs.0.get(0)?;\n                 let cur_to_ty = trait_ref.substs.0.get(1)?;\n "}, {"sha": "14be668365038719ee37d1109d76ceb4a5412b38", "filename": "crates/ra_hir_ty/src/infer/path.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d3469682681d5b206d5ae31fc63fb97d9cedb3a/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3469682681d5b206d5ae31fc63fb97d9cedb3a/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=8d3469682681d5b206d5ae31fc63fb97d9cedb3a", "patch": "@@ -2,7 +2,7 @@\n \n use hir_def::{\n     path::{Path, PathKind, PathSegment},\n-    resolver::{HasResolver, ResolveValueResult, Resolver, TypeNs, ValueNs},\n+    resolver::{ResolveValueResult, Resolver, TypeNs, ValueNs},\n     AssocItemId, ContainerId, Lookup,\n };\n use hir_expand::name::Name;\n@@ -244,17 +244,15 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 ContainerId::ImplId(it) => it,\n                 _ => return None,\n             };\n-            let resolver = impl_id.resolver(self.db);\n-            let impl_data = self.db.impl_data(impl_id);\n-            let impl_block = Ty::from_hir(self.db, &resolver, &impl_data.target_type);\n-            let impl_block_substs = impl_block.substs()?;\n+            let self_ty = self.db.impl_ty(impl_id).self_type().clone();\n+            let self_ty_substs = self_ty.substs()?;\n             let actual_substs = actual_def_ty.substs()?;\n \n             let mut new_substs = vec![Ty::Unknown; gen.count_parent_params()];\n \n             // The following code *link up* the function actual parma type\n             // and impl_block type param index\n-            impl_block_substs.iter().zip(actual_substs.iter()).for_each(|(param, pty)| {\n+            self_ty_substs.iter().zip(actual_substs.iter()).for_each(|(param, pty)| {\n                 if let Ty::Param { idx, .. } = param {\n                     if let Some(s) = new_substs.get_mut(*idx as usize) {\n                         *s = pty.clone();"}, {"sha": "c9ee34008a06c6ed7b93a153bf0ccacdf8ddfb98", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8d3469682681d5b206d5ae31fc63fb97d9cedb3a/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3469682681d5b206d5ae31fc63fb97d9cedb3a/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=8d3469682681d5b206d5ae31fc63fb97d9cedb3a", "patch": "@@ -486,6 +486,21 @@ impl TypeWalk for TraitRef {\n     }\n }\n \n+#[derive(Clone, PartialEq, Eq, Debug)]\n+pub enum ImplTy {\n+    Inherent(Ty),\n+    TraitRef(TraitRef),\n+}\n+\n+impl ImplTy {\n+    pub(crate) fn self_type(&self) -> &Ty {\n+        match self {\n+            ImplTy::Inherent(it) => it,\n+            ImplTy::TraitRef(tr) => &tr.substs[0],\n+        }\n+    }\n+}\n+\n /// Like `generics::WherePredicate`, but with resolved types: A condition on the\n /// parameters of a generic item.\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}, {"sha": "f8331d2570d5b51938974c3fc67ab18751c907ac", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8d3469682681d5b206d5ae31fc63fb97d9cedb3a/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3469682681d5b206d5ae31fc63fb97d9cedb3a/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=8d3469682681d5b206d5ae31fc63fb97d9cedb3a", "patch": "@@ -14,21 +14,21 @@ use hir_def::{\n     path::{GenericArg, Path, PathKind, PathSegment},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, AstItemDef, ConstId, EnumId, EnumVariantId, FunctionId, GenericDefId, HasModule,\n+    AdtId, AstItemDef, ConstId, EnumId, EnumVariantId, FunctionId, GenericDefId, HasModule, ImplId,\n     LocalStructFieldId, Lookup, StaticId, StructId, TraitId, TypeAliasId, UnionId, VariantId,\n };\n use ra_arena::map::ArenaMap;\n use ra_db::CrateId;\n \n-use super::{\n-    FnSig, GenericPredicate, ProjectionPredicate, ProjectionTy, Substs, TraitEnvironment, TraitRef,\n-    Ty, TypeCtor, TypeWalk,\n-};\n use crate::{\n     db::HirDatabase,\n     primitive::{FloatTy, IntTy},\n-    utils::make_mut_slice,\n-    utils::{all_super_traits, associated_type_by_name_including_super_traits, variant_data},\n+    utils::{\n+        all_super_traits, associated_type_by_name_including_super_traits, make_mut_slice,\n+        variant_data,\n+    },\n+    FnSig, GenericPredicate, ImplTy, ProjectionPredicate, ProjectionTy, Substs, TraitEnvironment,\n+    TraitRef, Ty, TypeCtor, TypeWalk,\n };\n \n impl Ty {\n@@ -179,11 +179,7 @@ impl Ty {\n                 let name = resolved_segment.name.clone();\n                 Ty::Param { idx, name }\n             }\n-            TypeNs::SelfType(impl_id) => {\n-                let impl_data = db.impl_data(impl_id);\n-                let resolver = impl_id.resolver(db);\n-                Ty::from_hir(db, &resolver, &impl_data.target_type)\n-            }\n+            TypeNs::SelfType(impl_id) => db.impl_ty(impl_id).self_type().clone(),\n             TypeNs::AdtSelfType(adt) => db.ty(adt.into()),\n \n             TypeNs::AdtId(it) => Ty::from_hir_path_inner(db, resolver, resolved_segment, it.into()),\n@@ -751,3 +747,18 @@ pub(crate) fn value_ty_query(db: &impl HirDatabase, def: ValueTyDefId) -> Ty {\n         ValueTyDefId::StaticId(it) => type_for_static(db, it),\n     }\n }\n+\n+pub(crate) fn impl_ty_query(db: &impl HirDatabase, impl_id: ImplId) -> ImplTy {\n+    let impl_data = db.impl_data(impl_id);\n+    let resolver = impl_id.resolver(db);\n+    let self_ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n+    match impl_data.target_trait.as_ref() {\n+        Some(trait_ref) => {\n+            match TraitRef::from_hir(db, &resolver, trait_ref, Some(self_ty.clone())) {\n+                Some(it) => ImplTy::TraitRef(it),\n+                None => ImplTy::Inherent(self_ty),\n+            }\n+        }\n+        None => ImplTy::Inherent(self_ty),\n+    }\n+}"}, {"sha": "ee1936b0e5410d8e02c217b269eabe42cfaaaebd", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8d3469682681d5b206d5ae31fc63fb97d9cedb3a/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3469682681d5b206d5ae31fc63fb97d9cedb3a/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=8d3469682681d5b206d5ae31fc63fb97d9cedb3a", "patch": "@@ -6,23 +6,22 @@ use std::sync::Arc;\n \n use arrayvec::ArrayVec;\n use hir_def::{\n-    lang_item::LangItemTarget, resolver::HasResolver, resolver::Resolver, type_ref::Mutability,\n-    AssocItemId, AstItemDef, FunctionId, HasModule, ImplId, TraitId,\n+    lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutability, AssocItemId, AstItemDef,\n+    FunctionId, HasModule, ImplId, TraitId,\n };\n use hir_expand::name::Name;\n use ra_db::CrateId;\n use ra_prof::profile;\n use rustc_hash::FxHashMap;\n \n use crate::{\n+    autoderef,\n     db::HirDatabase,\n     primitive::{FloatBitness, Uncertain},\n     utils::all_super_traits,\n-    Ty, TypeCtor,\n+    Canonical, ImplTy, InEnvironment, TraitEnvironment, TraitRef, Ty, TypeCtor,\n };\n \n-use super::{autoderef, Canonical, InEnvironment, TraitEnvironment, TraitRef};\n-\n /// This is used as a key for indexing impls.\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub enum TyFingerprint {\n@@ -59,22 +58,13 @@ impl CrateImplBlocks {\n         let crate_def_map = db.crate_def_map(krate);\n         for (_module_id, module_data) in crate_def_map.modules.iter() {\n             for &impl_id in module_data.impls.iter() {\n-                let impl_data = db.impl_data(impl_id);\n-                let resolver = impl_id.resolver(db);\n-\n-                let target_ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n-\n-                match &impl_data.target_trait {\n-                    Some(trait_ref) => {\n-                        if let Some(tr) =\n-                            TraitRef::from_hir(db, &resolver, &trait_ref, Some(target_ty))\n-                        {\n-                            res.impls_by_trait.entry(tr.trait_).or_default().push(impl_id);\n-                        }\n+                match db.impl_ty(impl_id) {\n+                    ImplTy::TraitRef(tr) => {\n+                        res.impls_by_trait.entry(tr.trait_).or_default().push(impl_id);\n                     }\n-                    None => {\n-                        if let Some(target_ty_fp) = TyFingerprint::for_impl(&target_ty) {\n-                            res.impls.entry(target_ty_fp).or_default().push(impl_id);\n+                    ImplTy::Inherent(self_ty) => {\n+                        if let Some(self_ty_fp) = TyFingerprint::for_impl(&self_ty) {\n+                            res.impls.entry(self_ty_fp).or_default().push(impl_id);\n                         }\n                     }\n                 }"}, {"sha": "35de37e6b625688226d3a9799e5d45541c579b39", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8d3469682681d5b206d5ae31fc63fb97d9cedb3a/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d3469682681d5b206d5ae31fc63fb97d9cedb3a/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=8d3469682681d5b206d5ae31fc63fb97d9cedb3a", "patch": "@@ -11,18 +11,17 @@ use chalk_rust_ir::{AssociatedTyDatum, AssociatedTyValue, ImplDatum, StructDatum\n use ra_db::CrateId;\n \n use hir_def::{\n-    expr::Expr, lang_item::LangItemTarget, resolver::HasResolver, AssocItemId, AstItemDef,\n-    ContainerId, GenericDefId, ImplId, Lookup, TraitId, TypeAliasId,\n+    expr::Expr, lang_item::LangItemTarget, AssocItemId, AstItemDef, ContainerId, GenericDefId,\n+    ImplId, Lookup, TraitId, TypeAliasId,\n };\n use hir_expand::name;\n \n use ra_db::salsa::{InternId, InternKey};\n \n use super::{AssocTyValue, Canonical, ChalkContext, Impl, Obligation};\n use crate::{\n-    db::HirDatabase,\n-    display::HirDisplay,\n-    {ApplicationTy, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk},\n+    db::HirDatabase, display::HirDisplay, ApplicationTy, GenericPredicate, ImplTy, ProjectionTy,\n+    Substs, TraitRef, Ty, TypeCtor, TypeWalk,\n };\n \n /// This represents a trait whose name we could not resolve.\n@@ -631,13 +630,11 @@ fn impl_block_datum(\n     chalk_id: chalk_ir::ImplId,\n     impl_id: ImplId,\n ) -> Option<Arc<ImplDatum<ChalkIr>>> {\n+    let trait_ref = match db.impl_ty(impl_id) {\n+        ImplTy::TraitRef(it) => it,\n+        ImplTy::Inherent(_) => return None,\n+    };\n     let impl_data = db.impl_data(impl_id);\n-    let resolver = impl_id.resolver(db);\n-    let target_ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n-\n-    // `CoerseUnsized` has one generic parameter for the target type.\n-    let trait_ref =\n-        TraitRef::from_hir(db, &resolver, impl_data.target_trait.as_ref()?, Some(target_ty))?;\n \n     let generic_params = db.generic_params(impl_id.into());\n     let bound_vars = Substs::bound_vars(&generic_params);\n@@ -790,17 +787,14 @@ fn type_alias_associated_ty_value(\n         _ => panic!(\"assoc ty value should be in impl\"),\n     };\n \n-    let impl_data = db.impl_data(impl_id);\n-    let resolver = impl_id.resolver(db);\n-    let target_ty = Ty::from_hir(db, &resolver, &impl_data.target_type);\n-    let target_trait = impl_data\n-        .target_trait\n-        .as_ref()\n-        .and_then(|trait_ref| TraitRef::from_hir(db, &resolver, &trait_ref, Some(target_ty)))\n-        .expect(\"assoc ty value should not exist\"); // we don't return any assoc ty values if the impl'd trait can't be resolved\n+    let trait_ref = match db.impl_ty(impl_id) {\n+        ImplTy::TraitRef(it) => it,\n+        // we don't return any assoc ty values if the impl'd trait can't be resolved\n+        ImplTy::Inherent(_) => panic!(\"assoc ty value should not exist\"),\n+    };\n \n     let assoc_ty = db\n-        .trait_data(target_trait.trait_)\n+        .trait_data(trait_ref.trait_)\n         .associated_type_by_name(&type_alias_data.name)\n         .expect(\"assoc ty value should not exist\"); // validated when building the impl data as well\n     let generic_params = db.generic_params(impl_id.into());"}]}