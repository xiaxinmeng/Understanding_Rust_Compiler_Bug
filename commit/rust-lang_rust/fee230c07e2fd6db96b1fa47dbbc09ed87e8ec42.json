{"sha": "fee230c07e2fd6db96b1fa47dbbc09ed87e8ec42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZTIzMGMwN2UyZmQ2ZGI5NmIxZmE0N2RiYmMwOWVkODdlOGVjNDI=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-25T23:46:30Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-25T23:46:30Z"}, "message": "Merge pull request #70 from Manishearth/issue_69\n\nIssue #69 fixed", "tree": {"sha": "1218bc8e99ab03749e5dd6e580e042beabce4cbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1218bc8e99ab03749e5dd6e580e042beabce4cbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fee230c07e2fd6db96b1fa47dbbc09ed87e8ec42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fee230c07e2fd6db96b1fa47dbbc09ed87e8ec42", "html_url": "https://github.com/rust-lang/rust/commit/fee230c07e2fd6db96b1fa47dbbc09ed87e8ec42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fee230c07e2fd6db96b1fa47dbbc09ed87e8ec42/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62f0fe0cc0504217ffc23b2fb8b69d3bed648be9", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f0fe0cc0504217ffc23b2fb8b69d3bed648be9", "html_url": "https://github.com/rust-lang/rust/commit/62f0fe0cc0504217ffc23b2fb8b69d3bed648be9"}, {"sha": "73e3ef6d0e2c1da8b5eb8b5b13bdd6d2929bfa5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e3ef6d0e2c1da8b5eb8b5b13bdd6d2929bfa5f", "html_url": "https://github.com/rust-lang/rust/commit/73e3ef6d0e2c1da8b5eb8b5b13bdd6d2929bfa5f"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "b1e21def574678b3d6232d0cbaa694b633c590d1", "filename": "src/mut_mut.rs", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/fee230c07e2fd6db96b1fa47dbbc09ed87e8ec42/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee230c07e2fd6db96b1fa47dbbc09ed87e8ec42/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=fee230c07e2fd6db96b1fa47dbbc09ed87e8ec42", "patch": "@@ -2,6 +2,7 @@ use syntax::ptr::P;\n use syntax::ast::*;\n use rustc::lint::{Context, LintPass, LintArray, Lint};\n use rustc::middle::ty::{expr_ty, sty, ty_ptr, ty_rptr, mt};\n+use syntax::codemap::ExpnInfo;\n \n declare_lint!(pub MUT_MUT, Warn,\n               \"Warn on usage of double-mut refs, e.g. '&mut &mut ...'\");\n@@ -15,27 +16,8 @@ impl LintPass for MutMut {\n \t}\n \t\n \tfn check_expr(&mut self, cx: &Context, expr: &Expr) {\n-\t\t\n-\t\tfn unwrap_addr(expr : &Expr) -> Option<&Expr> {\n-\t\t\tmatch expr.node {\n-\t\t\t\tExprAddrOf(MutMutable, ref e) => Option::Some(e),\n-\t\t\t\t_ => Option::None\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tunwrap_addr(expr).map_or((), |e| {\n-\t\t\tunwrap_addr(e).map(|_| {\n-\t\t\t\tcx.span_lint(MUT_MUT, expr.span, \n-\t\t\t\t\t\"Generally you want to avoid &mut &mut _ if possible.\")\n-\t\t\t}).unwrap_or_else(|| {\n-\t\t\t\tif let ty_rptr(_, mt{ty: _, mutbl: MutMutable}) = \n-\t\t\t\t\t\texpr_ty(cx.tcx, e).sty {\n-\t\t\t\t\tcx.span_lint(MUT_MUT, expr.span,\n-\t\t\t\t\t\t\"This expression mutably borrows a mutable reference. \\\n-\t\t\t\t\t\tConsider reborrowing\")\n-\t\t\t\t}\n-\t\t\t})\n-\t\t})\n+\t\tcx.sess().codemap().with_expn_info(expr.span.expn_id, \n+\t\t\t|info| check_expr_expd(cx, expr, info))\n \t}\n \t\n \tfn check_ty(&mut self, cx: &Context, ty: &Ty) {\n@@ -44,6 +26,35 @@ impl LintPass for MutMut {\n \t}\n }\n \n+fn check_expr_expd(cx: &Context, expr: &Expr, info: Option<&ExpnInfo>) {\n+\tif in_external_macro(info) { return; }\n+\n+\tfn unwrap_addr(expr : &Expr) -> Option<&Expr> {\n+\t\tmatch expr.node {\n+\t\t\tExprAddrOf(MutMutable, ref e) => Option::Some(e),\n+\t\t\t_ => Option::None\n+\t\t}\n+\t}\n+\t\n+\tunwrap_addr(expr).map_or((), |e| {\n+\t\tunwrap_addr(e).map(|_| {\n+\t\t\tcx.span_lint(MUT_MUT, expr.span, \n+\t\t\t\t\"Generally you want to avoid &mut &mut _ if possible.\")\n+\t\t}).unwrap_or_else(|| {\n+\t\t\tif let ty_rptr(_, mt{ty: _, mutbl: MutMutable}) = \n+\t\t\t\t\texpr_ty(cx.tcx, e).sty {\n+\t\t\t\tcx.span_lint(MUT_MUT, expr.span,\n+\t\t\t\t\t\"This expression mutably borrows a mutable reference. \\\n+\t\t\t\t\tConsider reborrowing\")\n+\t\t\t}\n+\t\t})\n+\t})\n+}\n+\n+fn in_external_macro(info: Option<&ExpnInfo>) -> bool {\n+\tinfo.map_or(false, |i| i.callee.span.is_some())\n+}\n+\n fn unwrap_mut(ty : &Ty) -> Option<&Ty> {\n \tmatch ty.node {\n \t\tTyPtr(MutTy{ ty: ref pty, mutbl: MutMutable }) => Option::Some(pty),"}, {"sha": "64c3c84c7b6e9eea5b86d3c98272b206f0015d48", "filename": "src/ptr_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fee230c07e2fd6db96b1fa47dbbc09ed87e8ec42/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee230c07e2fd6db96b1fa47dbbc09ed87e8ec42/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=fee230c07e2fd6db96b1fa47dbbc09ed87e8ec42", "patch": "@@ -27,7 +27,7 @@ impl LintPass for PtrArg {\n     }\n     \n     fn check_item(&mut self, cx: &Context, item: &Item) {\n-\t\tif let &ItemFn(ref decl, _, _, _, _) = &item.node {\n+\t\tif let &ItemFn(ref decl, _, _, _, _, _) = &item.node {\n \t\t\tcheck_fn(cx, decl);\n \t\t}\n \t}"}]}