{"sha": "f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2OWUwOWFiMGUyY2RlNGE4NGViODQxM2YxNmZiMDMwOTRkYzdhMmE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-05T18:11:34Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-05T18:11:34Z"}, "message": "Merge branch 'pr-737'", "tree": {"sha": "bb17f8f37c733f96655c96389a6b6074e61514e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb17f8f37c733f96655c96389a6b6074e61514e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a", "html_url": "https://github.com/rust-lang/rust/commit/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98b29821d159661949ae2da2e64340ed7a322154", "url": "https://api.github.com/repos/rust-lang/rust/commits/98b29821d159661949ae2da2e64340ed7a322154", "html_url": "https://github.com/rust-lang/rust/commit/98b29821d159661949ae2da2e64340ed7a322154"}, {"sha": "e421a0f8a3aa8a28ef06d5b8892c5c32e7d39f89", "url": "https://api.github.com/repos/rust-lang/rust/commits/e421a0f8a3aa8a28ef06d5b8892c5c32e7d39f89", "html_url": "https://github.com/rust-lang/rust/commit/e421a0f8a3aa8a28ef06d5b8892c5c32e7d39f89"}], "stats": {"total": 89, "additions": 83, "deletions": 6}, "files": [{"sha": "ff875085da21a5161090fe9106f96d35f6cf83c1", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a", "patch": "@@ -8,7 +8,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 129 lints included in this crate:\n+There are 130 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -99,6 +99,7 @@ name\n [range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)                             | warn    | using Range::step_by(0), which produces an infinite iterator\n [range_zip_with_len](https://github.com/Manishearth/rust-clippy/wiki#range_zip_with_len)                             | warn    | zipping iterator with a range when enumerate() would do\n [redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)                               | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n+[redundant_closure_call](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure_call)                     | warn    | Closures should not be called in the expression they are defined\n [redundant_pattern](https://github.com/Manishearth/rust-clippy/wiki#redundant_pattern)                               | warn    | using `name @ _` in a pattern\n [regex_macro](https://github.com/Manishearth/rust-clippy/wiki#regex_macro)                                           | warn    | finds use of `regex!(_)`, suggests `Regex::new(_)` instead\n [result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)                             | allow   | using `Result.unwrap()`, which might be better handled"}, {"sha": "803a4c2345c36e94d3e98957463dd82ba692af4a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a", "patch": "@@ -272,6 +272,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         misc::TOPLEVEL_REF_ARG,\n         misc::USED_UNDERSCORE_BINDING,\n         misc_early::DUPLICATE_UNDERSCORE_ARGUMENT,\n+        misc_early::REDUNDANT_CLOSURE_CALL,\n         misc_early::UNNEEDED_FIELD_PATTERN,\n         mut_reference::UNNECESSARY_MUT_PASSED,\n         mutex_atomic::MUTEX_ATOMIC,"}, {"sha": "89a0763e2e32e74a86974f6480d3a5933b65b723", "filename": "src/misc_early.rs", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a/src%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a/src%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc_early.rs?ref=f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a", "patch": "@@ -3,8 +3,7 @@ use std::collections::HashMap;\n use syntax::ast::*;\n use syntax::codemap::Span;\n use syntax::visit::FnKind;\n-use utils::{span_lint, span_help_and_lint};\n-\n+use utils::{span_lint, span_help_and_lint, snippet, span_lint_and_then};\n /// **What it does:** This lint checks for structure field patterns bound to wildcards.\n ///\n /// **Why is this bad?** Using `..` instead is shorter and leaves the focus on the fields that are actually bound.\n@@ -29,12 +28,24 @@ declare_lint! {\n     \"Function arguments having names which only differ by an underscore\"\n }\n \n+/// **What it does:** This lint detects closures called in the same expression where they are defined.\n+///\n+/// **Why is this bad?** It is unnecessarily adding to the expression's complexity.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `(|| 42)()`\n+declare_lint! {\n+    pub REDUNDANT_CLOSURE_CALL, Warn,\n+    \"Closures should not be called in the expression they are defined\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct MiscEarly;\n \n impl LintPass for MiscEarly {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(UNNEEDED_FIELD_PATTERN, DUPLICATE_UNDERSCORE_ARGUMENT)\n+        lint_array!(UNNEEDED_FIELD_PATTERN, DUPLICATE_UNDERSCORE_ARGUMENT, REDUNDANT_CLOSURE_CALL)\n     }\n }\n \n@@ -105,12 +116,51 @@ impl EarlyLintPass for MiscEarly {\n                                   *correspondance,\n                                   &format!(\"`{}` already exists, having another argument having almost the same \\\n                                             name makes code comprehension and documentation more difficult\",\n-                                           arg_name[1..].to_owned()));\n+                                           arg_name[1..].to_owned()));;\n                     }\n                 } else {\n                     registered_names.insert(arg_name, arg.pat.span);\n                 }\n             }\n         }\n     }\n+\n+    fn check_expr(&mut self, cx: &EarlyContext, expr: &Expr) {\n+        if let ExprKind::Call(ref paren, _) = expr.node {\n+            if let ExprKind::Paren(ref closure) = paren.node {\n+                if let ExprKind::Closure(_, ref decl, ref block) = closure.node {\n+                    span_lint_and_then(cx,\n+                                       REDUNDANT_CLOSURE_CALL,\n+                                       expr.span,\n+                                       \"Try not to call a closure in the expression where it is declared.\",\n+                                       |db| {\n+                                            if decl.inputs.len() == 0 {\n+                                                let hint = format!(\"{}\", snippet(cx, block.span, \"..\"));\n+                                                db.span_suggestion(expr.span, \"Try doing something like: \", hint);\n+                                            }\n+                                        });\n+                }\n+            }\n+        }\n+    }\n+\n+    fn check_block(&mut self, cx: &EarlyContext, block: &Block) {\n+        for w in block.stmts.windows(2) {\n+            if_let_chain! {[\n+                let StmtKind::Decl(ref first, _) = w[0].node,\n+                let DeclKind::Local(ref local) = first.node,\n+                let Option::Some(ref t) = local.init,\n+                let ExprKind::Closure(_,_,_) = t.node,\n+                let PatKind::Ident(_,sp_ident,_) = local.pat.node,\n+                let StmtKind::Semi(ref second,_) = w[1].node,\n+                let ExprKind::Assign(_,ref call) = second.node,\n+                let ExprKind::Call(ref closure,_) = call.node,\n+                let ExprKind::Path(_,ref path) = closure.node\n+            ], {\n+                if sp_ident.node == (&path.segments[0]).identifier {\n+                    span_lint(cx, REDUNDANT_CLOSURE_CALL, second.span, \"Closure called just once immediately after it was declared\");\n+                }\n+            }}\n+        }\n+    }\n }"}, {"sha": "0e72efe654ee33b201da51d2edae6228df6f0e41", "filename": "tests/compile-fail/eta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a/tests%2Fcompile-fail%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a/tests%2Fcompile-fail%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Feta.rs?ref=f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a", "patch": "@@ -1,6 +1,6 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n-#![allow(unknown_lints, unused, no_effect)]\n+#![allow(unknown_lints, unused, no_effect, redundant_closure_call)]\n #![deny(redundant_closure)]\n \n fn main() {"}, {"sha": "73830ecc9f16427ce74fdfa4ce42d90e23a57c40", "filename": "tests/compile-fail/redundant_closure_call.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a/tests%2Fcompile-fail%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a/tests%2Fcompile-fail%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fredundant_closure_call.rs?ref=f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a", "patch": "@@ -0,0 +1,25 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(redundant_closure_call)]\n+\n+fn main() {\n+\tlet a = (|| 42)();\n+\t//~^ ERROR Try not to call a closure in the expression where it is declared.\n+\t//~| HELP Try doing something like:\n+\t//~| SUGGESTION let a = 42;\n+\n+\tlet mut i = 1;\n+\tlet k = (|m| m+1)(i); //~ERROR Try not to call a closure in the expression where it is declared.\n+\n+\tk = (|a,b| a*b)(1,5); //~ERROR Try not to call a closure in the expression where it is declared.\n+\n+\tlet closure = || 32;\n+\ti = closure(); //~ERROR Closure called just once immediately after it was declared\n+\n+\tlet closure = |i| i+1;\n+\ti = closure(3); //~ERROR Closure called just once immediately after it was declared\n+\n+\ti = closure(4);\n+}\n+"}]}