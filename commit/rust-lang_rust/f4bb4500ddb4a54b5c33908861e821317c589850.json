{"sha": "f4bb4500ddb4a54b5c33908861e821317c589850", "node_id": "C_kwDOAAsO6NoAKGY0YmI0NTAwZGRiNGE1NGI1YzMzOTA4ODYxZTgyMTMxN2M1ODk4NTA", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-02-09T22:37:10Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-02-14T15:57:20Z"}, "message": "Call the method fork instead of clone and add proper comments", "tree": {"sha": "699f26273a6081bee0eb94da6841d265faad34c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/699f26273a6081bee0eb94da6841d265faad34c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4bb4500ddb4a54b5c33908861e821317c589850", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmIKe+IACgkQgTGiTgx5\n76+hvg/+KGuRg8eIQ2NaHtJu8qiSrZO5Frc7jJm/l2ODxdHfHL7r1nWc1D1anu75\n0Mqc4cuYu4KFrCuTaWTEeVc2XnU+shjme4i8WbmSx/3DFh8CVu7uKLxvOwq1TGWc\npqyDGRWf/FonZCCp7pN/7v1oJt2ID0x6cgXT5PTmr76KnmaBu40qanxeX4hXwfKt\nZSLL6cKuKt6JHss1kAC1DVMzXkEoR9mCjYiDBXa6seBwe3xbmcI+w0vvMQ44RYOG\nl5WXMffsGN/oRoNB2Vt79wGlir4gX2158Wn3x2+vmXceEJvtEK91+1WRhAEACYwP\n1P5GM0Fjt742HuHueGmLHNe7h/96PQRLFDXuBoJK7/ITHUAJIAXTk3XWrX43n4dG\nO657s50qfbs/2vhCEScC70sMLwzD8NreFGhFZ7p6aZh/37oBe8hw9Py/T9O7WjK/\ni4bYMkG0Bkvm5uhqPWrhX+ZyHb82KxTqhzlxuornA3iYRagNmsvsdfAZqTG5nV5Y\nmE3C2cqv8ekxlc9gwYWjr10nL8I7K6qyF0nhL9KJhPH1oGfg+eYAkK/VxLKzPeoF\noosb6T1hy7K2+i8tN+XARun2Wm4Cn1uQPaZg9QEU0CZXk4E7Lhdni11NqEWBjJRZ\n+L6f5MF6MPx74zzZdTtwJHSNwif4d83nk98Pr2U96RzDAjsLuo8=\n=F3vl\n-----END PGP SIGNATURE-----", "payload": "tree 699f26273a6081bee0eb94da6841d265faad34c1\nparent 3fd89a662a8360bbcd64da1353be8bf3b8833af5\nauthor Santiago Pastorino <spastorino@gmail.com> 1644446230 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1644854240 -0300\n\nCall the method fork instead of clone and add proper comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4bb4500ddb4a54b5c33908861e821317c589850", "html_url": "https://github.com/rust-lang/rust/commit/f4bb4500ddb4a54b5c33908861e821317c589850", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4bb4500ddb4a54b5c33908861e821317c589850/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fd89a662a8360bbcd64da1353be8bf3b8833af5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd89a662a8360bbcd64da1353be8bf3b8833af5", "html_url": "https://github.com/rust-lang/rust/commit/3fd89a662a8360bbcd64da1353be8bf3b8833af5"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "8a50179cd3b642144113181bfe7d72ea8aad4cec", "filename": "compiler/rustc_data_structures/src/snapshot_map/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_data_structures%2Fsrc%2Fsnapshot_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_data_structures%2Fsrc%2Fsnapshot_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsnapshot_map%2Fmod.rs?ref=f4bb4500ddb4a54b5c33908861e821317c589850", "patch": "@@ -13,6 +13,7 @@ mod tests;\n pub type SnapshotMapStorage<K, V> = SnapshotMap<K, V, FxHashMap<K, V>, ()>;\n pub type SnapshotMapRef<'a, K, V, L> = SnapshotMap<K, V, &'a mut FxHashMap<K, V>, &'a mut L>;\n \n+#[derive(Clone)]\n pub struct SnapshotMap<K, V, M = FxHashMap<K, V>, L = VecLog<UndoLog<K, V>>> {\n     map: M,\n     undo_log: L,\n@@ -30,6 +31,7 @@ where\n     }\n }\n \n+#[derive(Clone)]\n pub enum UndoLog<K, V> {\n     Inserted(K),\n     Overwrite(K, V),"}, {"sha": "63871d428e149e59d685fd4d69347f91447c8a3c", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=f4bb4500ddb4a54b5c33908861e821317c589850", "patch": "@@ -51,6 +51,29 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     ) -> At<'a, 'tcx> {\n         At { infcx: self, cause, param_env }\n     }\n+\n+    /// Forks the inference context, creating a new inference context with the same inference\n+    /// variables in the same state. This can be used to \"branch off\" many tests from the same\n+    /// common state. Used in coherence.\n+    pub fn fork(&self) -> Self {\n+        Self {\n+            tcx: self.tcx.clone(),\n+            defining_use_anchor: self.defining_use_anchor.clone(),\n+            reveal_defining_opaque_types: self.reveal_defining_opaque_types,\n+            in_progress_typeck_results: self.in_progress_typeck_results.clone(),\n+            inner: self.inner.clone(),\n+            skip_leak_check: self.skip_leak_check.clone(),\n+            lexical_region_resolutions: self.lexical_region_resolutions.clone(),\n+            selection_cache: self.selection_cache.clone(),\n+            evaluation_cache: self.evaluation_cache.clone(),\n+            reported_trait_errors: self.reported_trait_errors.clone(),\n+            reported_closure_mismatch: self.reported_closure_mismatch.clone(),\n+            tainted_by_errors_flag: self.tainted_by_errors_flag.clone(),\n+            err_count_on_creation: self.err_count_on_creation,\n+            in_snapshot: self.in_snapshot.clone(),\n+            universe: self.universe.clone(),\n+        }\n+    }\n }\n \n pub trait ToTrace<'tcx>: Relate<'tcx> + Copy {"}, {"sha": "f5e61d28ac5e5a775d725ac463c665feb2132a79", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=f4bb4500ddb4a54b5c33908861e821317c589850", "patch": "@@ -61,6 +61,7 @@ pub(crate) fn resolve<'tcx>(\n \n /// Contains the result of lexical region resolution. Offers methods\n /// to lookup up the final value of a region variable.\n+#[derive(Clone)]\n pub struct LexicalRegionResolutions<'tcx> {\n     values: IndexVec<RegionVid, VarValue<'tcx>>,\n     error_region: ty::Region<'tcx>,"}, {"sha": "be38ace3bd2b851de8bf69257f667dab2f0edeaf", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=f4bb4500ddb4a54b5c33908861e821317c589850", "patch": "@@ -130,6 +130,7 @@ impl RegionckMode {\n /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot\n /// operations are hot enough that we want only one call to `borrow_mut` per\n /// call to `start_snapshot` and `rollback_to`.\n+#[derive(Clone)]\n pub struct InferCtxtInner<'tcx> {\n     /// Cache for projections. This cache is snapshotted along with the infcx.\n     ///"}, {"sha": "078575b537708c344a382f51f1ed8d6309482bc5", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=f4bb4500ddb4a54b5c33908861e821317c589850", "patch": "@@ -28,7 +28,7 @@ mod leak_check;\n \n pub use rustc_middle::infer::MemberConstraint;\n \n-#[derive(Default)]\n+#[derive(Clone, Default)]\n pub struct RegionConstraintStorage<'tcx> {\n     /// For each `RegionVid`, the corresponding `RegionVariableOrigin`.\n     var_infos: IndexVec<RegionVid, RegionVariableInfo>,"}, {"sha": "d320728a43f95c62ba7dbbb71dee418cbda7ed30", "filename": "compiler/rustc_infer/src/infer/type_variable.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ftype_variable.rs?ref=f4bb4500ddb4a54b5c33908861e821317c589850", "patch": "@@ -14,6 +14,7 @@ use std::ops::Range;\n use rustc_data_structures::undo_log::{Rollback, UndoLogs};\n \n /// Represents a single undo-able action that affects a type inference variable.\n+#[derive(Clone)]\n pub(crate) enum UndoLog<'tcx> {\n     EqRelation(sv::UndoLog<ut::Delegate<TyVidEqKey<'tcx>>>),\n     SubRelation(sv::UndoLog<ut::Delegate<ty::TyVid>>),\n@@ -58,6 +59,7 @@ impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {\n     }\n }\n \n+#[derive(Clone)]\n pub struct TypeVariableStorage<'tcx> {\n     values: sv::SnapshotVecStorage<Delegate>,\n \n@@ -137,6 +139,7 @@ pub enum TypeVariableOriginKind {\n     LatticeVariable,\n }\n \n+#[derive(Clone)]\n pub(crate) struct TypeVariableData {\n     origin: TypeVariableOrigin,\n }\n@@ -165,6 +168,7 @@ impl<'tcx> TypeVariableValue<'tcx> {\n     }\n }\n \n+#[derive(Clone)]\n pub(crate) struct Instantiate;\n \n pub(crate) struct Delegate;"}, {"sha": "ecd886b547834f3b86a7966c63fb8772f56fd2d4", "filename": "compiler/rustc_infer/src/infer/undo_log.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs?ref=f4bb4500ddb4a54b5c33908861e821317c589850", "patch": "@@ -17,6 +17,7 @@ pub struct Snapshot<'tcx> {\n }\n \n /// Records the \"undo\" data for a single operation that affects some form of inference variable.\n+#[derive(Clone)]\n pub(crate) enum UndoLog<'tcx> {\n     TypeVariables(type_variable::UndoLog<'tcx>),\n     ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),\n@@ -84,6 +85,7 @@ impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {\n \n /// The combined undo log for all the various unification tables. For each change to the storage\n /// for any kind of inference variable, we record an UndoLog entry in the vector here.\n+#[derive(Clone)]\n pub(crate) struct InferCtxtUndoLogs<'tcx> {\n     logs: Vec<UndoLog<'tcx>>,\n     num_open_snapshots: usize,"}, {"sha": "b84ed3dc689376c830a32a9e4064ab153a8d16e9", "filename": "compiler/rustc_infer/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs?ref=f4bb4500ddb4a54b5c33908861e821317c589850", "patch": "@@ -70,7 +70,7 @@ pub struct ProjectionCache<'a, 'tcx> {\n     undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n }\n \n-#[derive(Default)]\n+#[derive(Clone, Default)]\n pub struct ProjectionCacheStorage<'tcx> {\n     map: SnapshotMapStorage<ProjectionCacheKey<'tcx>, ProjectionCacheEntry<'tcx>>,\n }"}, {"sha": "7dd01f5b0b0e8af5806d72c4048802549c04f543", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bb4500ddb4a54b5c33908861e821317c589850/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=f4bb4500ddb4a54b5c33908861e821317c589850", "patch": "@@ -379,7 +379,7 @@ fn negative_impl_exists<'cx, 'tcx>(\n     region_context: DefId,\n     o: &PredicateObligation<'tcx>,\n ) -> bool {\n-    let infcx = selcx.infcx().clone();\n+    let infcx = &selcx.infcx().fork();\n     let tcx = infcx.tcx;\n     o.flip_polarity(tcx)\n         .map(|o| {"}]}