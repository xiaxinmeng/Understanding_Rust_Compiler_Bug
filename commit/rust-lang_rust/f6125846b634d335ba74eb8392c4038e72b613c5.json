{"sha": "f6125846b634d335ba74eb8392c4038e72b613c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MTI1ODQ2YjYzNGQzMzViYTc0ZWI4MzkyYzQwMzhlNzJiNjEzYzU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-06T18:36:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-06T18:36:06Z"}, "message": "Rollup merge of #47220 - nagisa:nonamellvm, r=rkruppe\n\nUse name-discarding LLVM context\n\nThis is only applicable when neither of --emit=llvm-ir or --emit=llvm-bc are not\nrequested.\n\nIn case either of these outputs are wanted, but the benefits of such context are\ndesired as well, -Zfewer_names option provides the same functionality regardless\nof the outputs requested.\n\nShould be a viable fix for https://github.com/rust-lang/rust/issues/46449", "tree": {"sha": "4c8569df17196b06d732d74b0affc722b9882fa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c8569df17196b06d732d74b0affc722b9882fa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6125846b634d335ba74eb8392c4038e72b613c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6125846b634d335ba74eb8392c4038e72b613c5", "html_url": "https://github.com/rust-lang/rust/commit/f6125846b634d335ba74eb8392c4038e72b613c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6125846b634d335ba74eb8392c4038e72b613c5/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7192c1a4b884ddeb54c32678da1687558d51e1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7192c1a4b884ddeb54c32678da1687558d51e1f", "html_url": "https://github.com/rust-lang/rust/commit/e7192c1a4b884ddeb54c32678da1687558d51e1f"}, {"sha": "b719578f48c06047aea5f5b307ec1e3affb8f4ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/b719578f48c06047aea5f5b307ec1e3affb8f4ff", "html_url": "https://github.com/rust-lang/rust/commit/b719578f48c06047aea5f5b307ec1e3affb8f4ff"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "05b1d584e9c4e2c08cb4fb006aced0b99f88a20a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f6125846b634d335ba74eb8392c4038e72b613c5", "patch": "@@ -1082,6 +1082,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"gather borrowck statistics\"),\n     no_landing_pads: bool = (false, parse_bool, [TRACKED],\n         \"omit landing pads for unwinding\"),\n+    fewer_names: bool = (false, parse_bool, [TRACKED],\n+        \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR)\"),\n     debug_llvm: bool = (false, parse_bool, [UNTRACKED],\n         \"enable debug output from LLVM\"),\n     meta_stats: bool = (false, parse_bool, [UNTRACKED],\n@@ -2811,6 +2813,10 @@ mod tests {\n         opts.debugging_opts.no_landing_pads = true;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+        opts = reference.clone();\n+        opts.debugging_opts.fewer_names = true;\n+        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n         opts = reference.clone();\n         opts.debugging_opts.no_trans = true;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "43dbb8d7e1375862e896ea8381b6fce0716d6d8c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=f6125846b634d335ba74eb8392c4038e72b613c5", "patch": "@@ -18,7 +18,7 @@ use lint;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n-use session::config::{BorrowckMode, DebugInfoLevel};\n+use session::config::{BorrowckMode, DebugInfoLevel, OutputType};\n use ty::tls;\n use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n@@ -504,6 +504,13 @@ impl Session {\n     pub fn linker_flavor(&self) -> LinkerFlavor {\n         self.opts.debugging_opts.linker_flavor.unwrap_or(self.target.target.linker_flavor)\n     }\n+\n+    pub fn fewer_names(&self) -> bool {\n+        let more_names = self.opts.output_types.contains_key(&OutputType::LlvmAssembly) ||\n+                         self.opts.output_types.contains_key(&OutputType::Bitcode);\n+        self.opts.debugging_opts.fewer_names || !more_names\n+    }\n+\n     pub fn no_landing_pads(&self) -> bool {\n         self.opts.debugging_opts.no_landing_pads || self.panic_strategy() == PanicStrategy::Abort\n     }"}, {"sha": "6cb1a2b53342bd2b05bd2e9dde66ea40bd68f9fe", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=f6125846b634d335ba74eb8392c4038e72b613c5", "patch": "@@ -514,7 +514,7 @@ pub enum ModuleBuffer {}\n #[link(name = \"rustllvm\", kind = \"static\")]\n extern \"C\" {\n     // Create and destroy contexts.\n-    pub fn LLVMContextCreate() -> ContextRef;\n+    pub fn LLVMRustContextCreate(shouldDiscardNames: bool) -> ContextRef;\n     pub fn LLVMContextDispose(C: ContextRef);\n     pub fn LLVMGetMDKindIDInContext(C: ContextRef, Name: *const c_char, SLen: c_uint) -> c_uint;\n "}, {"sha": "60b24a578c6b0052b77fce68a8043530d5ce3a65", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=f6125846b634d335ba74eb8392c4038e72b613c5", "patch": "@@ -607,7 +607,7 @@ impl ThinModule {\n         // into that context. One day, however, we may do this for upstream\n         // crates but for locally translated modules we may be able to reuse\n         // that LLVM Context and Module.\n-        let llcx = llvm::LLVMContextCreate();\n+        let llcx = llvm::LLVMRustContextCreate(cgcx.fewer_names);\n         let llmod = llvm::LLVMRustParseBitcodeForThinLTO(\n             llcx,\n             self.data().as_ptr(),"}, {"sha": "4d1bcd9bf467d8d046acfc8d49f210e17622fcde", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=f6125846b634d335ba74eb8392c4038e72b613c5", "patch": "@@ -323,6 +323,7 @@ pub struct CodegenContext {\n     pub thinlto: bool,\n     pub no_landing_pads: bool,\n     pub save_temps: bool,\n+    pub fewer_names: bool,\n     pub exported_symbols: Arc<ExportedSymbols>,\n     pub opts: Arc<config::Options>,\n     pub crate_types: Vec<config::CrateType>,\n@@ -1407,6 +1408,7 @@ fn start_executing_work(tcx: TyCtxt,\n             unsafe { llvm::LLVMRustThinLTOAvailable() },\n \n         no_landing_pads: sess.no_landing_pads(),\n+        fewer_names: sess.fewer_names(),\n         save_temps: sess.opts.cg.save_temps,\n         opts: Arc::new(sess.opts.clone()),\n         time_passes: sess.time_passes(),"}, {"sha": "248b37c43b42e2cb4991ac0a5c5d7daa2affc0a4", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=f6125846b634d335ba74eb8392c4038e72b613c5", "patch": "@@ -197,7 +197,7 @@ pub fn is_pie_binary(sess: &Session) -> bool {\n }\n \n pub unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (ContextRef, ModuleRef) {\n-    let llcx = llvm::LLVMContextCreate();\n+    let llcx = llvm::LLVMRustContextCreate(sess.fewer_names());\n     let mod_name = CString::new(mod_name).unwrap();\n     let llmod = llvm::LLVMModuleCreateWithNameInContext(mod_name.as_ptr(), llcx);\n "}, {"sha": "0fac7f7bf28b121d5cbdeead03aae6e6f65bb2a9", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=f6125846b634d335ba74eb8392c4038e72b613c5", "patch": "@@ -76,11 +76,17 @@ extern \"C\" char *LLVMRustGetLastError(void) {\n   return Ret;\n }\n \n-void LLVMRustSetLastError(const char *Err) {\n+extern \"C\" void LLVMRustSetLastError(const char *Err) {\n   free((void *)LastError);\n   LastError = strdup(Err);\n }\n \n+extern \"C\" LLVMContextRef LLVMRustContextCreate(bool shouldDiscardNames) {\n+  auto ctx = new LLVMContext();\n+  ctx->setDiscardValueNames(shouldDiscardNames);\n+  return wrap(ctx);\n+}\n+\n extern \"C\" void LLVMRustSetNormalizedTarget(LLVMModuleRef M,\n                                             const char *Triple) {\n   unwrap(M)->setTargetTriple(Triple::normalize(Triple));"}, {"sha": "714173f86020da25c53cc3648fa5adf075d35106", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/f6125846b634d335ba74eb8392c4038e72b613c5/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=f6125846b634d335ba74eb8392c4038e72b613c5", "patch": "@@ -71,7 +71,7 @@\n #include \"llvm/IR/IRPrintingPasses.h\"\n #include \"llvm/Linker/Linker.h\"\n \n-void LLVMRustSetLastError(const char *);\n+extern \"C\" void LLVMRustSetLastError(const char *);\n \n enum class LLVMRustResult { Success, Failure };\n "}]}