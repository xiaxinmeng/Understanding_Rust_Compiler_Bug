{"sha": "6b449b49bb52b6eb92dd7fc1611f5e0e2564f323", "node_id": "C_kwDOAAsO6NoAKDZiNDQ5YjQ5YmI1MmI2ZWI5MmRkN2ZjMTYxMWY1ZTBlMjU2NGYzMjM", "commit": {"author": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2021-10-26T03:22:17Z"}, "committer": {"name": "CAD97", "email": "cad97@cad97.com", "date": "2021-10-26T03:44:41Z"}, "message": "Remove fNN::lerp - consensus unlikely", "tree": {"sha": "57a094bb406f443662879f15b38f610b9bac1c40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57a094bb406f443662879f15b38f610b9bac1c40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b449b49bb52b6eb92dd7fc1611f5e0e2564f323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b449b49bb52b6eb92dd7fc1611f5e0e2564f323", "html_url": "https://github.com/rust-lang/rust/commit/6b449b49bb52b6eb92dd7fc1611f5e0e2564f323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b449b49bb52b6eb92dd7fc1611f5e0e2564f323/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffba4309241a7a21df4ec7b16f1357cbcd327d6e", "html_url": "https://github.com/rust-lang/rust/commit/ffba4309241a7a21df4ec7b16f1357cbcd327d6e"}], "stats": {"total": 191, "additions": 0, "deletions": 191}, "files": [{"sha": "d23f5244d88d4e4f9999509c23900fcec7515bc5", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6b449b49bb52b6eb92dd7fc1611f5e0e2564f323/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b449b49bb52b6eb92dd7fc1611f5e0e2564f323/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=6b449b49bb52b6eb92dd7fc1611f5e0e2564f323", "patch": "@@ -878,40 +878,4 @@ impl f32 {\n     pub fn atanh(self) -> f32 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n-\n-    /// Linear interpolation between `start` and `end`.\n-    ///\n-    /// This enables linear interpolation between `start` and `end`, where start is represented by\n-    /// `self == 0.0` and `end` is represented by `self == 1.0`. This is the basis of all\n-    /// \"transition\", \"easing\", or \"step\" functions; if you change `self` from 0.0 to 1.0\n-    /// at a given rate, the result will change from `start` to `end` at a similar rate.\n-    ///\n-    /// Values below 0.0 or above 1.0 are allowed, allowing you to extrapolate values outside the\n-    /// range from `start` to `end`. This also is useful for transition functions which might\n-    /// move slightly past the end or start for a desired effect. Mathematically, the values\n-    /// returned are equivalent to `start + self * (end - start)`, although we make a few specific\n-    /// guarantees that are useful specifically to linear interpolation.\n-    ///\n-    /// These guarantees are:\n-    ///\n-    /// * If `start` and `end` are [finite], the value at 0.0 is always `start` and the\n-    ///   value at 1.0 is always `end`. (exactness)\n-    /// * If `start` and `end` are [finite], the values will always move in the direction from\n-    ///   `start` to `end` (monotonicity)\n-    /// * If `self` is [finite] and `start == end`, the value at any point will always be\n-    ///   `start == end`. (consistency)\n-    ///\n-    /// [finite]: #method.is_finite\n-    #[must_use = \"method returns a new number and does not mutate the original value\"]\n-    #[unstable(feature = \"float_interpolation\", issue = \"86269\")]\n-    pub fn lerp(self, start: f32, end: f32) -> f32 {\n-        // consistent\n-        if start == end {\n-            start\n-\n-        // exact/monotonic\n-        } else {\n-            self.mul_add(end, (-self).mul_add(start, start))\n-        }\n-    }\n }"}, {"sha": "0d4b865f3392a66304e13e47e9fa652099428534", "filename": "library/std/src/f32/tests.rs", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6b449b49bb52b6eb92dd7fc1611f5e0e2564f323/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b449b49bb52b6eb92dd7fc1611f5e0e2564f323/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32%2Ftests.rs?ref=6b449b49bb52b6eb92dd7fc1611f5e0e2564f323", "patch": "@@ -757,66 +757,3 @@ fn test_total_cmp() {\n     assert_eq!(Ordering::Less, (-s_nan()).total_cmp(&f32::INFINITY));\n     assert_eq!(Ordering::Less, (-s_nan()).total_cmp(&s_nan()));\n }\n-\n-#[test]\n-fn test_lerp_exact() {\n-    // simple values\n-    assert_eq!(f32::lerp(0.0, 2.0, 4.0), 2.0);\n-    assert_eq!(f32::lerp(1.0, 2.0, 4.0), 4.0);\n-\n-    // boundary values\n-    assert_eq!(f32::lerp(0.0, f32::MIN, f32::MAX), f32::MIN);\n-    assert_eq!(f32::lerp(1.0, f32::MIN, f32::MAX), f32::MAX);\n-}\n-\n-#[test]\n-fn test_lerp_consistent() {\n-    assert_eq!(f32::lerp(f32::MAX, f32::MIN, f32::MIN), f32::MIN);\n-    assert_eq!(f32::lerp(f32::MIN, f32::MAX, f32::MAX), f32::MAX);\n-\n-    // as long as t is finite, a/b can be infinite\n-    assert_eq!(f32::lerp(f32::MAX, f32::NEG_INFINITY, f32::NEG_INFINITY), f32::NEG_INFINITY);\n-    assert_eq!(f32::lerp(f32::MIN, f32::INFINITY, f32::INFINITY), f32::INFINITY);\n-}\n-\n-#[test]\n-fn test_lerp_nan_infinite() {\n-    // non-finite t is not NaN if a/b different\n-    assert!(!f32::lerp(f32::INFINITY, f32::MIN, f32::MAX).is_nan());\n-    assert!(!f32::lerp(f32::NEG_INFINITY, f32::MIN, f32::MAX).is_nan());\n-}\n-\n-#[test]\n-fn test_lerp_values() {\n-    // just a few basic values\n-    assert_eq!(f32::lerp(0.25, 1.0, 2.0), 1.25);\n-    assert_eq!(f32::lerp(0.50, 1.0, 2.0), 1.50);\n-    assert_eq!(f32::lerp(0.75, 1.0, 2.0), 1.75);\n-}\n-\n-#[test]\n-fn test_lerp_monotonic() {\n-    // near 0\n-    let below_zero = f32::lerp(-f32::EPSILON, f32::MIN, f32::MAX);\n-    let zero = f32::lerp(0.0, f32::MIN, f32::MAX);\n-    let above_zero = f32::lerp(f32::EPSILON, f32::MIN, f32::MAX);\n-    assert!(below_zero <= zero);\n-    assert!(zero <= above_zero);\n-    assert!(below_zero <= above_zero);\n-\n-    // near 0.5\n-    let below_half = f32::lerp(0.5 - f32::EPSILON, f32::MIN, f32::MAX);\n-    let half = f32::lerp(0.5, f32::MIN, f32::MAX);\n-    let above_half = f32::lerp(0.5 + f32::EPSILON, f32::MIN, f32::MAX);\n-    assert!(below_half <= half);\n-    assert!(half <= above_half);\n-    assert!(below_half <= above_half);\n-\n-    // near 1\n-    let below_one = f32::lerp(1.0 - f32::EPSILON, f32::MIN, f32::MAX);\n-    let one = f32::lerp(1.0, f32::MIN, f32::MAX);\n-    let above_one = f32::lerp(1.0 + f32::EPSILON, f32::MIN, f32::MAX);\n-    assert!(below_one <= one);\n-    assert!(one <= above_one);\n-    assert!(below_one <= above_one);\n-}"}, {"sha": "55e17b471905d29dd293be5e2db9a494e9a55d5c", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6b449b49bb52b6eb92dd7fc1611f5e0e2564f323/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b449b49bb52b6eb92dd7fc1611f5e0e2564f323/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=6b449b49bb52b6eb92dd7fc1611f5e0e2564f323", "patch": "@@ -881,42 +881,6 @@ impl f64 {\n         0.5 * ((2.0 * self) / (1.0 - self)).ln_1p()\n     }\n \n-    /// Linear interpolation between `start` and `end`.\n-    ///\n-    /// This enables linear interpolation between `start` and `end`, where start is represented by\n-    /// `self == 0.0` and `end` is represented by `self == 1.0`. This is the basis of all\n-    /// \"transition\", \"easing\", or \"step\" functions; if you change `self` from 0.0 to 1.0\n-    /// at a given rate, the result will change from `start` to `end` at a similar rate.\n-    ///\n-    /// Values below 0.0 or above 1.0 are allowed, allowing you to extrapolate values outside the\n-    /// range from `start` to `end`. This also is useful for transition functions which might\n-    /// move slightly past the end or start for a desired effect. Mathematically, the values\n-    /// returned are equivalent to `start + self * (end - start)`, although we make a few specific\n-    /// guarantees that are useful specifically to linear interpolation.\n-    ///\n-    /// These guarantees are:\n-    ///\n-    /// * If `start` and `end` are [finite], the value at 0.0 is always `start` and the\n-    ///   value at 1.0 is always `end`. (exactness)\n-    /// * If `start` and `end` are [finite], the values will always move in the direction from\n-    ///   `start` to `end` (monotonicity)\n-    /// * If `self` is [finite] and `start == end`, the value at any point will always be\n-    ///   `start == end`. (consistency)\n-    ///\n-    /// [finite]: #method.is_finite\n-    #[must_use = \"method returns a new number and does not mutate the original value\"]\n-    #[unstable(feature = \"float_interpolation\", issue = \"86269\")]\n-    pub fn lerp(self, start: f64, end: f64) -> f64 {\n-        // consistent\n-        if start == end {\n-            start\n-\n-        // exact/monotonic\n-        } else {\n-            self.mul_add(end, (-self).mul_add(start, start))\n-        }\n-    }\n-\n     // Solaris/Illumos requires a wrapper around log, log2, and log10 functions\n     // because of their non-standard behavior (e.g., log(-n) returns -Inf instead\n     // of expected NaN)."}, {"sha": "5c163cfe90e0b2eff9030bc80dd0cfeb4c71532c", "filename": "library/std/src/f64/tests.rs", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/6b449b49bb52b6eb92dd7fc1611f5e0e2564f323/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b449b49bb52b6eb92dd7fc1611f5e0e2564f323/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64%2Ftests.rs?ref=6b449b49bb52b6eb92dd7fc1611f5e0e2564f323", "patch": "@@ -753,58 +753,3 @@ fn test_total_cmp() {\n     assert_eq!(Ordering::Less, (-s_nan()).total_cmp(&f64::INFINITY));\n     assert_eq!(Ordering::Less, (-s_nan()).total_cmp(&s_nan()));\n }\n-\n-#[test]\n-fn test_lerp_exact() {\n-    // simple values\n-    assert_eq!(f64::lerp(0.0, 2.0, 4.0), 2.0);\n-    assert_eq!(f64::lerp(1.0, 2.0, 4.0), 4.0);\n-\n-    // boundary values\n-    assert_eq!(f64::lerp(0.0, f64::MIN, f64::MAX), f64::MIN);\n-    assert_eq!(f64::lerp(1.0, f64::MIN, f64::MAX), f64::MAX);\n-}\n-\n-#[test]\n-fn test_lerp_consistent() {\n-    assert_eq!(f64::lerp(f64::MAX, f64::MIN, f64::MIN), f64::MIN);\n-    assert_eq!(f64::lerp(f64::MIN, f64::MAX, f64::MAX), f64::MAX);\n-\n-    // as long as t is finite, a/b can be infinite\n-    assert_eq!(f64::lerp(f64::MAX, f64::NEG_INFINITY, f64::NEG_INFINITY), f64::NEG_INFINITY);\n-    assert_eq!(f64::lerp(f64::MIN, f64::INFINITY, f64::INFINITY), f64::INFINITY);\n-}\n-\n-#[test]\n-fn test_lerp_nan_infinite() {\n-    // non-finite t is not NaN if a/b different\n-    assert!(!f64::lerp(f64::INFINITY, f64::MIN, f64::MAX).is_nan());\n-    assert!(!f64::lerp(f64::NEG_INFINITY, f64::MIN, f64::MAX).is_nan());\n-}\n-\n-#[test]\n-fn test_lerp_values() {\n-    // just a few basic values\n-    assert_eq!(f64::lerp(0.25, 1.0, 2.0), 1.25);\n-    assert_eq!(f64::lerp(0.50, 1.0, 2.0), 1.50);\n-    assert_eq!(f64::lerp(0.75, 1.0, 2.0), 1.75);\n-}\n-\n-#[test]\n-fn test_lerp_monotonic() {\n-    // near 0\n-    let below_zero = f64::lerp(-f64::EPSILON, f64::MIN, f64::MAX);\n-    let zero = f64::lerp(0.0, f64::MIN, f64::MAX);\n-    let above_zero = f64::lerp(f64::EPSILON, f64::MIN, f64::MAX);\n-    assert!(below_zero <= zero);\n-    assert!(zero <= above_zero);\n-    assert!(below_zero <= above_zero);\n-\n-    // near 1\n-    let below_one = f64::lerp(1.0 - f64::EPSILON, f64::MIN, f64::MAX);\n-    let one = f64::lerp(1.0, f64::MIN, f64::MAX);\n-    let above_one = f64::lerp(1.0 + f64::EPSILON, f64::MIN, f64::MAX);\n-    assert!(below_one <= one);\n-    assert!(one <= above_one);\n-    assert!(below_one <= above_one);\n-}"}, {"sha": "d7c0ffd476a59f8454020868b8cf0ab35014399c", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b449b49bb52b6eb92dd7fc1611f5e0e2564f323/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b449b49bb52b6eb92dd7fc1611f5e0e2564f323/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=6b449b49bb52b6eb92dd7fc1611f5e0e2564f323", "patch": "@@ -284,7 +284,6 @@\n #![feature(exact_size_is_empty)]\n #![feature(exhaustive_patterns)]\n #![feature(extend_one)]\n-#![feature(float_interpolation)]\n #![feature(fn_traits)]\n #![feature(format_args_nl)]\n #![feature(gen_future)]"}]}