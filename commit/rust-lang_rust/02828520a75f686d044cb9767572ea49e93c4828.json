{"sha": "02828520a75f686d044cb9767572ea49e93c4828", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyODI4NTIwYTc1ZjY4NmQwNDRjYjk3Njc1NzJlYTQ5ZTkzYzQ4Mjg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-28T11:53:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-28T11:53:16Z"}, "message": "Merge #2097\n\n2097: Be more precise with function signatures r=matklad a=kjeremy\n\nFinds the closest call expr.\r\n\r\nFixes #2093\n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>", "tree": {"sha": "c976d1e2346b59a4c7f29f673fc170196132afea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c976d1e2346b59a4c7f29f673fc170196132afea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02828520a75f686d044cb9767572ea49e93c4828", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdttasCRBK7hj4Ov3rIwAAdHIIAFVcJbZ3LLYgEetsrsZWYWay\nx5dtCZFRm0WEvm+LMGJN5DxrxWLS3Y16W4vrZiMxDlmtAs1gYkZGW+c9B9MX93TE\nMNuipXRSfBiM9frIDekannhGFzGYTGwkmNxXSlf3Q1KaPsIA6xSI8Dh99BRczAU7\nwnoCCXT1ASS2vsYG4UVa46SRXuh44xUG6/JWHW2gmMQcZ5Isy8IevmefBOC4uKvI\nelay99jxBEh5baf245bODPSxpDAGoGPDq497MMot1S9L0TRvXowPechlHgK4UgkX\n/gruGTEiObpRkzgy9Jd0Tt9rvn8LSc3baTwsi9ZiraA09XAoQYXZ7fUm7KyYV64=\n=VSpY\n-----END PGP SIGNATURE-----\n", "payload": "tree c976d1e2346b59a4c7f29f673fc170196132afea\nparent d9cbffe8a0fa3c05763719f2b6a72fec119fd12e\nparent a0d55edc3873c7788ab2f91e394e53a5a77c16b8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572263596 +0000\ncommitter GitHub <noreply@github.com> 1572263596 +0000\n\nMerge #2097\n\n2097: Be more precise with function signatures r=matklad a=kjeremy\n\nFinds the closest call expr.\r\n\r\nFixes #2093\n\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02828520a75f686d044cb9767572ea49e93c4828", "html_url": "https://github.com/rust-lang/rust/commit/02828520a75f686d044cb9767572ea49e93c4828", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02828520a75f686d044cb9767572ea49e93c4828/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9cbffe8a0fa3c05763719f2b6a72fec119fd12e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9cbffe8a0fa3c05763719f2b6a72fec119fd12e", "html_url": "https://github.com/rust-lang/rust/commit/d9cbffe8a0fa3c05763719f2b6a72fec119fd12e"}, {"sha": "a0d55edc3873c7788ab2f91e394e53a5a77c16b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d55edc3873c7788ab2f91e394e53a5a77c16b8", "html_url": "https://github.com/rust-lang/rust/commit/a0d55edc3873c7788ab2f91e394e53a5a77c16b8"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "c95133343d6132fc364e5ad2d3f5bad4de6594e9", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/02828520a75f686d044cb9767572ea49e93c4828/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02828520a75f686d044cb9767572ea49e93c4828/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=02828520a75f686d044cb9767572ea49e93c4828", "patch": "@@ -2,7 +2,7 @@\n \n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    algo::find_node_at_offset,\n+    algo::ancestors_at_offset,\n     ast::{self, ArgListOwner},\n     AstNode, SyntaxNode, TextUnit,\n };\n@@ -82,13 +82,15 @@ enum FnCallNode {\n \n impl FnCallNode {\n     fn with_node(syntax: &SyntaxNode, offset: TextUnit) -> Option<FnCallNode> {\n-        if let Some(expr) = find_node_at_offset::<ast::CallExpr>(syntax, offset) {\n-            return Some(FnCallNode::CallExpr(expr));\n-        }\n-        if let Some(expr) = find_node_at_offset::<ast::MethodCallExpr>(syntax, offset) {\n-            return Some(FnCallNode::MethodCallExpr(expr));\n-        }\n-        None\n+        ancestors_at_offset(syntax, offset).find_map(|node| {\n+            if let Some(expr) = ast::CallExpr::cast(node.clone()) {\n+                Some(FnCallNode::CallExpr(expr))\n+            } else if let Some(expr) = ast::MethodCallExpr::cast(node.clone()) {\n+                Some(FnCallNode::MethodCallExpr(expr))\n+            } else {\n+                None\n+            }\n+        })\n     }\n \n     fn name_ref(&self) -> Option<ast::NameRef> {\n@@ -438,4 +440,26 @@ By default this method stops actor's `Context`.\"#\n         let call_info = analysis.call_info(position).unwrap();\n         assert!(call_info.is_none());\n     }\n+\n+    #[test]\n+    fn test_nested_method_in_lamba() {\n+        let info = call_info(\n+            r#\"struct Foo;\n+\n+impl Foo {\n+    fn bar(&self, _: u32) { }\n+}\n+\n+fn bar(_: u32) { }\n+\n+fn main() {\n+    let foo = Foo;\n+    std::thread::spawn(move || foo.bar(<|>));\n+}\"#,\n+        );\n+\n+        assert_eq!(info.parameters(), [\"&self\", \"_: u32\"]);\n+        assert_eq!(info.active_parameter, Some(1));\n+        assert_eq!(info.label(), \"fn bar(&self, _: u32)\");\n+    }\n }"}]}