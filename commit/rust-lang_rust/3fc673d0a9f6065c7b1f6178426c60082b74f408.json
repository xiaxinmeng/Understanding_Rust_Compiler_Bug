{"sha": "3fc673d0a9f6065c7b1f6178426c60082b74f408", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYzY3M2QwYTlmNjA2NWM3YjFmNjE3ODQyNmM2MDA4MmI3NGY0MDg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-05T09:12:41Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-05T09:12:41Z"}, "message": "Rustup to rustc 1.49.0-nightly (beb5ae474 2020-10-04)", "tree": {"sha": "d5c5edcc18a35314ea644c83ee290aa91db835fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5c5edcc18a35314ea644c83ee290aa91db835fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fc673d0a9f6065c7b1f6178426c60082b74f408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc673d0a9f6065c7b1f6178426c60082b74f408", "html_url": "https://github.com/rust-lang/rust/commit/3fc673d0a9f6065c7b1f6178426c60082b74f408", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fc673d0a9f6065c7b1f6178426c60082b74f408/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab92638735b1902f7421b94d93826ac6921b9c10", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab92638735b1902f7421b94d93826ac6921b9c10", "html_url": "https://github.com/rust-lang/rust/commit/ab92638735b1902f7421b94d93826ac6921b9c10"}], "stats": {"total": 218, "additions": 53, "deletions": 165}, "files": [{"sha": "930f3054b039c1b44cf97135981eeeb1655a9acb", "filename": "build_sysroot/build_sysroot.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fc673d0a9f6065c7b1f6178426c60082b74f408/build_sysroot%2Fbuild_sysroot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3fc673d0a9f6065c7b1f6178426c60082b74f408/build_sysroot%2Fbuild_sysroot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Fbuild_sysroot.sh?ref=3fc673d0a9f6065c7b1f6178426c60082b74f408", "patch": "@@ -24,7 +24,8 @@ export RUSTFLAGS=\"$RUSTFLAGS -Zforce-unstable-if-unmarked -Cpanic=abort\"\n if [[ \"$1\" == \"--release\" ]]; then\n     sysroot_channel='release'\n     # FIXME Enable incremental again once rust-lang/rust#74946 is fixed\n-    CARGO_INCREMENTAL=0 RUSTFLAGS=\"$RUSTFLAGS -Zmir-opt-level=2\" cargo build --target $TARGET_TRIPLE --release\n+    # FIXME Enable -Zmir-opt-level=2 again once it doesn't ice anymore\n+    CARGO_INCREMENTAL=0 RUSTFLAGS=\"$RUSTFLAGS\" cargo build --target $TARGET_TRIPLE --release\n else\n     sysroot_channel='debug'\n     cargo build --target $TARGET_TRIPLE"}, {"sha": "c3184460138292aeced4bbdc916994a6dbbd15f0", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fc673d0a9f6065c7b1f6178426c60082b74f408/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/3fc673d0a9f6065c7b1f6178426c60082b74f408/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=3fc673d0a9f6065c7b1f6178426c60082b74f408", "patch": "@@ -1 +1 @@\n-nightly-2020-10-02\n+nightly-2020-10-05"}, {"sha": "2862a372dfe0196f57a7ed2d7d32a73aad645b02", "filename": "src/allocator.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3fc673d0a9f6065c7b1f6178426c60082b74f408/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc673d0a9f6065c7b1f6178426c60082b74f408/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=3fc673d0a9f6065c7b1f6178426c60082b74f408", "patch": "@@ -4,6 +4,7 @@\n use crate::prelude::*;\n \n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use rustc_span::symbol::sym;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -87,10 +88,9 @@ fn codegen_inner(\n                 .collect::<Vec<Value>>();\n \n             let callee_func_ref = module.declare_func_in_func(callee_func_id, &mut bcx.func);\n-\n             let call_inst = bcx.ins().call(callee_func_ref, &args);\n-\n             let results = bcx.inst_results(call_inst).to_vec(); // Clone to prevent borrow error\n+\n             bcx.ins().return_(&results);\n             bcx.seal_all_blocks();\n             bcx.finalize();\n@@ -104,4 +104,50 @@ fn codegen_inner(\n             .unwrap();\n         unwind_context.add_function(func_id, &ctx, module.isa());\n     }\n+\n+    let sig = Signature {\n+        call_conv: CallConv::triple_default(module.isa().triple()),\n+        params: vec![AbiParam::new(usize_ty), AbiParam::new(usize_ty)],\n+        returns: vec![],\n+    };\n+\n+    let callee_name = kind.fn_name(sym::oom);\n+    //eprintln!(\"Codegen allocator shim {} -> {} ({:?} -> {:?})\", caller_name, callee_name, sig.params, sig.returns);\n+\n+    let func_id = module\n+        .declare_function(\"__rust_alloc_error_handler\", Linkage::Export, &sig)\n+        .unwrap();\n+\n+    let callee_func_id = module\n+        .declare_function(&callee_name, Linkage::Import, &sig)\n+        .unwrap();\n+\n+    let mut ctx = Context::new();\n+    ctx.func = Function::with_name_signature(ExternalName::user(0, 0), sig.clone());\n+    {\n+        let mut func_ctx = FunctionBuilderContext::new();\n+        let mut bcx = FunctionBuilder::new(&mut ctx.func, &mut func_ctx);\n+\n+        let block = bcx.create_block();\n+        bcx.switch_to_block(block);\n+        let args = (&[usize_ty, usize_ty])\n+            .into_iter()\n+            .map(|&ty| bcx.append_block_param(block, ty))\n+            .collect::<Vec<Value>>();\n+\n+        let callee_func_ref = module.declare_func_in_func(callee_func_id, &mut bcx.func);\n+        bcx.ins().call(callee_func_ref, &args);\n+\n+        bcx.ins().trap(TrapCode::UnreachableCodeReached);\n+        bcx.seal_all_blocks();\n+        bcx.finalize();\n+    }\n+    module\n+        .define_function(\n+            func_id,\n+            &mut ctx,\n+            &mut cranelift_codegen::binemit::NullTrapSink {},\n+        )\n+        .unwrap();\n+    unwind_context.add_function(func_id, &ctx, module.isa());\n }"}, {"sha": "e3a632fc465f6eff6db8850a1f64ec6308555a6e", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fc673d0a9f6065c7b1f6178426c60082b74f408/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fc673d0a9f6065c7b1f6178426c60082b74f408/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3fc673d0a9f6065c7b1f6178426c60082b74f408", "patch": "@@ -72,7 +72,6 @@ mod num;\n mod optimize;\n mod pointer;\n mod pretty_clif;\n-mod target_features_whitelist;\n mod toolchain;\n mod trap;\n mod unsize;\n@@ -207,11 +206,11 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             if tcx.sess.opts.actually_rustdoc {\n                 // rustdoc needs to be able to document functions that use all the features, so\n                 // whitelist them all\n-                target_features_whitelist::all_known_features()\n+                rustc_codegen_ssa::target_features::all_known_features()\n                     .map(|(a, b)| (a.to_string(), b))\n                     .collect()\n             } else {\n-                target_features_whitelist::supported_target_features(tcx.sess)\n+                rustc_codegen_ssa::target_features::supported_target_features(tcx.sess)\n                     .iter()\n                     .map(|&(a, b)| (a.to_string(), b))\n                     .collect()"}, {"sha": "2710cb4aff77976b0ef594897d5fa6ffe06a65dd", "filename": "src/target_features_whitelist.rs", "status": "removed", "additions": 0, "deletions": 158, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/ab92638735b1902f7421b94d93826ac6921b9c10/src%2Ftarget_features_whitelist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab92638735b1902f7421b94d93826ac6921b9c10/src%2Ftarget_features_whitelist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftarget_features_whitelist.rs?ref=ab92638735b1902f7421b94d93826ac6921b9c10", "patch": "@@ -1,158 +0,0 @@\n-#![rustfmt::skip]\n-\n-use rustc_span::symbol::{sym, Symbol};\n-\n-use rustc_session::Session;\n-\n-// Copied from https://github.com/rust-lang/rust/blob/e7f6ed14d5de2199d0e8a3c1e41f80e43885cb5c/src/librustc_codegen_llvm/llvm_util.rs#L139-L275\n-\n-// WARNING: the features after applying `to_llvm_feature` must be known\n-// to LLVM or the feature detection code will walk past the end of the feature\n-// array, leading to crashes.\n-\n-const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"aclass\", Some(sym::arm_target_feature)),\n-    (\"mclass\", Some(sym::arm_target_feature)),\n-    (\"rclass\", Some(sym::arm_target_feature)),\n-    (\"dsp\", Some(sym::arm_target_feature)),\n-    (\"neon\", Some(sym::arm_target_feature)),\n-    (\"crc\", Some(sym::arm_target_feature)),\n-    (\"crypto\", Some(sym::arm_target_feature)),\n-    (\"v5te\", Some(sym::arm_target_feature)),\n-    (\"v6\", Some(sym::arm_target_feature)),\n-    (\"v6k\", Some(sym::arm_target_feature)),\n-    (\"v6t2\", Some(sym::arm_target_feature)),\n-    (\"v7\", Some(sym::arm_target_feature)),\n-    (\"v8\", Some(sym::arm_target_feature)),\n-    (\"vfp2\", Some(sym::arm_target_feature)),\n-    (\"vfp3\", Some(sym::arm_target_feature)),\n-    (\"vfp4\", Some(sym::arm_target_feature)),\n-    // This is needed for inline assembly, but shouldn't be stabilized as-is\n-    // since it should be enabled per-function using #[instruction_set], not\n-    // #[target_feature].\n-    (\"thumb-mode\", Some(sym::arm_target_feature)),\n-];\n-\n-const AARCH64_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"fp\", Some(sym::aarch64_target_feature)),\n-    (\"neon\", Some(sym::aarch64_target_feature)),\n-    (\"sve\", Some(sym::aarch64_target_feature)),\n-    (\"crc\", Some(sym::aarch64_target_feature)),\n-    (\"crypto\", Some(sym::aarch64_target_feature)),\n-    (\"ras\", Some(sym::aarch64_target_feature)),\n-    (\"lse\", Some(sym::aarch64_target_feature)),\n-    (\"rdm\", Some(sym::aarch64_target_feature)),\n-    (\"fp16\", Some(sym::aarch64_target_feature)),\n-    (\"rcpc\", Some(sym::aarch64_target_feature)),\n-    (\"dotprod\", Some(sym::aarch64_target_feature)),\n-    (\"tme\", Some(sym::aarch64_target_feature)),\n-    (\"v8.1a\", Some(sym::aarch64_target_feature)),\n-    (\"v8.2a\", Some(sym::aarch64_target_feature)),\n-    (\"v8.3a\", Some(sym::aarch64_target_feature)),\n-];\n-\n-const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"adx\", Some(sym::adx_target_feature)),\n-    (\"aes\", None),\n-    (\"avx\", None),\n-    (\"avx2\", None),\n-    (\"avx512bw\", Some(sym::avx512_target_feature)),\n-    (\"avx512cd\", Some(sym::avx512_target_feature)),\n-    (\"avx512dq\", Some(sym::avx512_target_feature)),\n-    (\"avx512er\", Some(sym::avx512_target_feature)),\n-    (\"avx512f\", Some(sym::avx512_target_feature)),\n-    (\"avx512ifma\", Some(sym::avx512_target_feature)),\n-    (\"avx512pf\", Some(sym::avx512_target_feature)),\n-    (\"avx512vbmi\", Some(sym::avx512_target_feature)),\n-    (\"avx512vl\", Some(sym::avx512_target_feature)),\n-    (\"avx512vpopcntdq\", Some(sym::avx512_target_feature)),\n-    (\"bmi1\", None),\n-    (\"bmi2\", None),\n-    (\"cmpxchg16b\", Some(sym::cmpxchg16b_target_feature)),\n-    (\"f16c\", Some(sym::f16c_target_feature)),\n-    (\"fma\", None),\n-    (\"fxsr\", None),\n-    (\"lzcnt\", None),\n-    (\"movbe\", Some(sym::movbe_target_feature)),\n-    (\"pclmulqdq\", None),\n-    (\"popcnt\", None),\n-    (\"rdrand\", None),\n-    (\"rdseed\", None),\n-    (\"rtm\", Some(sym::rtm_target_feature)),\n-    (\"sha\", None),\n-    (\"sse\", None),\n-    (\"sse2\", None),\n-    (\"sse3\", None),\n-    (\"sse4.1\", None),\n-    (\"sse4.2\", None),\n-    (\"sse4a\", Some(sym::sse4a_target_feature)),\n-    (\"ssse3\", None),\n-    (\"tbm\", Some(sym::tbm_target_feature)),\n-    (\"xsave\", None),\n-    (\"xsavec\", None),\n-    (\"xsaveopt\", None),\n-    (\"xsaves\", None),\n-];\n-\n-const HEXAGON_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"hvx\", Some(sym::hexagon_target_feature)),\n-    (\"hvx-length128b\", Some(sym::hexagon_target_feature)),\n-];\n-\n-const POWERPC_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"altivec\", Some(sym::powerpc_target_feature)),\n-    (\"power8-altivec\", Some(sym::powerpc_target_feature)),\n-    (\"power9-altivec\", Some(sym::powerpc_target_feature)),\n-    (\"power8-vector\", Some(sym::powerpc_target_feature)),\n-    (\"power9-vector\", Some(sym::powerpc_target_feature)),\n-    (\"vsx\", Some(sym::powerpc_target_feature)),\n-];\n-\n-const MIPS_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] =\n-    &[(\"fp64\", Some(sym::mips_target_feature)), (\"msa\", Some(sym::mips_target_feature))];\n-\n-const RISCV_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"m\", Some(sym::riscv_target_feature)),\n-    (\"a\", Some(sym::riscv_target_feature)),\n-    (\"c\", Some(sym::riscv_target_feature)),\n-    (\"f\", Some(sym::riscv_target_feature)),\n-    (\"d\", Some(sym::riscv_target_feature)),\n-    (\"e\", Some(sym::riscv_target_feature)),\n-];\n-\n-const WASM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n-    (\"simd128\", Some(sym::wasm_target_feature)),\n-    (\"atomics\", Some(sym::wasm_target_feature)),\n-    (\"nontrapping-fptoint\", Some(sym::wasm_target_feature)),\n-];\n-\n-/// When rustdoc is running, provide a list of all known features so that all their respective\n-/// primitives may be documented.\n-///\n-/// IMPORTANT: If you're adding another feature list above, make sure to add it to this iterator!\n-pub fn all_known_features() -> impl Iterator<Item = (&'static str, Option<Symbol>)> {\n-    std::iter::empty()\n-        .chain(ARM_ALLOWED_FEATURES.iter())\n-        .chain(AARCH64_ALLOWED_FEATURES.iter())\n-        .chain(X86_ALLOWED_FEATURES.iter())\n-        .chain(HEXAGON_ALLOWED_FEATURES.iter())\n-        .chain(POWERPC_ALLOWED_FEATURES.iter())\n-        .chain(MIPS_ALLOWED_FEATURES.iter())\n-        .chain(RISCV_ALLOWED_FEATURES.iter())\n-        .chain(WASM_ALLOWED_FEATURES.iter())\n-        .cloned()\n-}\n-\n-pub fn supported_target_features(sess: &Session) -> &'static [(&'static str, Option<Symbol>)] {\n-    match &*sess.target.target.arch {\n-        \"arm\" => ARM_ALLOWED_FEATURES,\n-        \"aarch64\" => AARCH64_ALLOWED_FEATURES,\n-        \"x86\" | \"x86_64\" => X86_ALLOWED_FEATURES,\n-        \"hexagon\" => HEXAGON_ALLOWED_FEATURES,\n-        \"mips\" | \"mips64\" => MIPS_ALLOWED_FEATURES,\n-        \"powerpc\" | \"powerpc64\" => POWERPC_ALLOWED_FEATURES,\n-        \"riscv32\" | \"riscv64\" => RISCV_ALLOWED_FEATURES,\n-        \"wasm32\" => WASM_ALLOWED_FEATURES,\n-        _ => &[],\n-    }\n-}"}]}