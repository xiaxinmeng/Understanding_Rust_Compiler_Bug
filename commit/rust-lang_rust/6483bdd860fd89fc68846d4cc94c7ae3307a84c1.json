{"sha": "6483bdd860fd89fc68846d4cc94c7ae3307a84c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ODNiZGQ4NjBmZDg5ZmM2ODg0NmQ0Y2M5NGM3YWUzMzA3YTg0YzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-12T17:31:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-12T17:31:48Z"}, "message": "Auto merge of #38243 - michaelwoerister:fix-debuginfo-namespace-edge, r=nikomatsakis\n\nincr.comp.: Avoid creating an edge to DepNode::Krate when generating debuginfo namespaces.\n\nr? @nikomatsakis\n\nFixes #38222", "tree": {"sha": "89e1915e993bafafd75c02fad6203a98a8f3635e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89e1915e993bafafd75c02fad6203a98a8f3635e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6483bdd860fd89fc68846d4cc94c7ae3307a84c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6483bdd860fd89fc68846d4cc94c7ae3307a84c1", "html_url": "https://github.com/rust-lang/rust/commit/6483bdd860fd89fc68846d4cc94c7ae3307a84c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6483bdd860fd89fc68846d4cc94c7ae3307a84c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4b1e5ece21fb497877350c3d6defa143c88076c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4b1e5ece21fb497877350c3d6defa143c88076c", "html_url": "https://github.com/rust-lang/rust/commit/b4b1e5ece21fb497877350c3d6defa143c88076c"}, {"sha": "271fb2292449848ba0259d52314d821f028cf374", "url": "https://api.github.com/repos/rust-lang/rust/commits/271fb2292449848ba0259d52314d821f028cf374", "html_url": "https://github.com/rust-lang/rust/commit/271fb2292449848ba0259d52314d821f028cf374"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "117edcf14a1d169a5e718eb70cfc91a2e60ee79d", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6483bdd860fd89fc68846d4cc94c7ae3307a84c1/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6483bdd860fd89fc68846d4cc94c7ae3307a84c1/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=6483bdd860fd89fc68846d4cc94c7ae3307a84c1", "patch": "@@ -310,8 +310,9 @@ impl<'ast> Map<'ast> {\n                         id = p;\n                     }\n \n-                    RootCrate =>\n-                        return DepNode::Krate,\n+                    RootCrate => {\n+                        return DepNode::Hir(DefId::local(CRATE_DEF_INDEX));\n+                    }\n \n                     RootInlinedParent(_) =>\n                         bug!(\"node {} has inlined ancestor but is not inlined\", id0),\n@@ -782,7 +783,7 @@ impl<'ast> Map<'ast> {\n             Some(EntryVisibility(_, &Visibility::Restricted { ref path, .. })) => path.span,\n             Some(EntryVisibility(_, v)) => bug!(\"unexpected Visibility {:?}\", v),\n \n-            Some(RootCrate) => self.krate().span,\n+            Some(RootCrate) => self.forest.krate.span,\n             Some(RootInlinedParent(parent)) => parent.body.span,\n             Some(NotPresent) | None => {\n                 bug!(\"hir::map::Map::span: id not in map: {:?}\", id)"}, {"sha": "df65c4d27947b68b27dc60b0af8f51dad58c2e03", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6483bdd860fd89fc68846d4cc94c7ae3307a84c1/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6483bdd860fd89fc68846d4cc94c7ae3307a84c1/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=6483bdd860fd89fc68846d4cc94c7ae3307a84c1", "patch": "@@ -112,8 +112,9 @@ pub fn compute_incremental_hashes_map<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n         hash_spans: hash_spans,\n     };\n     record_time(&tcx.sess.perf_stats.incr_comp_hashes_time, || {\n-        visitor.calculate_def_id(DefId::local(CRATE_DEF_INDEX),\n-                                 |v| visit::walk_crate(v, krate));\n+        visitor.calculate_def_id(DefId::local(CRATE_DEF_INDEX), |v| {\n+            v.hash_crate_root_module(krate);\n+        });\n         krate.visit_all_item_likes(&mut visitor.as_deep_visitor());\n \n         for macro_def in krate.exported_macros.iter() {"}, {"sha": "de52b70f1ec92d252f80a0f62d0fdb5c67ab93cf", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6483bdd860fd89fc68846d4cc94c7ae3307a84c1/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6483bdd860fd89fc68846d4cc94c7ae3307a84c1/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=6483bdd860fd89fc68846d4cc94c7ae3307a84c1", "patch": "@@ -619,9 +619,10 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n         visit::walk_item(self, i)\n     }\n \n-    fn visit_mod(&mut self, m: &'tcx Mod, _s: Span, n: NodeId) {\n+    fn visit_mod(&mut self, m: &'tcx Mod, span: Span, n: NodeId) {\n         debug!(\"visit_mod: st={:?}\", self.st);\n         SawMod.hash(self.st);\n+        hash_span!(self, span);\n         visit::walk_mod(self, m, n)\n     }\n \n@@ -1085,4 +1086,23 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n             token::Token::Shebang(val) => val.as_str().hash(self.st),\n         }\n     }\n+\n+    pub fn hash_crate_root_module(&mut self, krate: &'tcx Crate) {\n+        let hir::Crate {\n+            ref module,\n+            ref attrs,\n+            span,\n+\n+            // These fields are handled separately:\n+            exported_macros: _,\n+            items: _,\n+            impl_items: _,\n+            exprs: _,\n+        } = *krate;\n+\n+        visit::Visitor::visit_mod(self, module, span, ast::CRATE_NODE_ID);\n+        // Crate attributes are not copied over to the root `Mod`, so hash them\n+        // explicitly here.\n+        hash_attrs!(self, attrs);\n+    }\n }"}, {"sha": "d14b1cfd6c9ac041202e4645286bffbb6b9b5234", "filename": "src/test/incremental/issue-38222.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6483bdd860fd89fc68846d4cc94c7ae3307a84c1/src%2Ftest%2Fincremental%2Fissue-38222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6483bdd860fd89fc68846d4cc94c7ae3307a84c1/src%2Ftest%2Fincremental%2Fissue-38222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-38222.rs?ref=6483bdd860fd89fc68846d4cc94c7ae3307a84c1", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that debuginfo does not introduce a dependency edge to the Krate\n+// dep-node.\n+\n+// revisions:rpass1 rpass2\n+\n+#![feature(rustc_attrs)]\n+\n+\n+#![rustc_partition_translated(module=\"issue_38222-mod1\", cfg=\"rpass2\")]\n+\n+// If trans had added a dependency edge to the Krate dep-node, nothing would\n+// be re-used, so checking that this module was re-used is sufficient.\n+#![rustc_partition_reused(module=\"issue_38222\", cfg=\"rpass2\")]\n+\n+//[rpass1] compile-flags: -C debuginfo=1\n+//[rpass2] compile-flags: -C debuginfo=1\n+\n+pub fn main() {\n+    mod1::some_fn();\n+}\n+\n+mod mod1 {\n+    pub fn some_fn() {\n+        let _ = 1;\n+    }\n+\n+    #[cfg(rpass2)]\n+    fn _some_other_fn() {\n+    }\n+}"}]}