{"sha": "decc4cb084e7cfb9be845bf4b5ad06ff2c4c42c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlY2M0Y2IwODRlN2NmYjliZTg0NWJmNGI1YWQwNmZmMmM0YzQyYzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-07T18:14:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-07T18:15:52Z"}, "message": "Show type hints for & patterns", "tree": {"sha": "07893477b392b1ae9e119d3dce23fbf10b2d48c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07893477b392b1ae9e119d3dce23fbf10b2d48c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/decc4cb084e7cfb9be845bf4b5ad06ff2c4c42c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/decc4cb084e7cfb9be845bf4b5ad06ff2c4c42c2", "html_url": "https://github.com/rust-lang/rust/commit/decc4cb084e7cfb9be845bf4b5ad06ff2c4c42c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/decc4cb084e7cfb9be845bf4b5ad06ff2c4c42c2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bd9fb85255581cab7888965b464e462582bbb5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bd9fb85255581cab7888965b464e462582bbb5f", "html_url": "https://github.com/rust-lang/rust/commit/6bd9fb85255581cab7888965b464e462582bbb5f"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "3730121afe70dd34cb52a6f6c9af3df42954b8b5", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/decc4cb084e7cfb9be845bf4b5ad06ff2c4c42c2/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/decc4cb084e7cfb9be845bf4b5ad06ff2c4c42c2/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=decc4cb084e7cfb9be845bf4b5ad06ff2c4c42c2", "patch": "@@ -122,18 +122,11 @@ fn get_leaf_pats(root_pat: ast::Pat) -> Vec<ast::Pat> {\n \n     while let Some(maybe_leaf_pat) = pats_to_process.pop_front() {\n         match &maybe_leaf_pat {\n-            ast::Pat::BindPat(bind_pat) => {\n-                if let Some(pat) = bind_pat.pat() {\n-                    pats_to_process.push_back(pat);\n-                } else {\n-                    leaf_pats.push(maybe_leaf_pat);\n-                }\n-            }\n-            ast::Pat::TuplePat(tuple_pat) => {\n-                for arg_pat in tuple_pat.args() {\n-                    pats_to_process.push_back(arg_pat);\n-                }\n-            }\n+            ast::Pat::BindPat(bind_pat) => match bind_pat.pat() {\n+                Some(pat) => pats_to_process.push_back(pat),\n+                _ => leaf_pats.push(maybe_leaf_pat),\n+            },\n+            ast::Pat::TuplePat(tuple_pat) => pats_to_process.extend(tuple_pat.args()),\n             ast::Pat::RecordPat(record_pat) => {\n                 if let Some(pat_list) = record_pat.record_field_pat_list() {\n                     pats_to_process.extend(\n@@ -151,10 +144,9 @@ fn get_leaf_pats(root_pat: ast::Pat) -> Vec<ast::Pat> {\n                 }\n             }\n             ast::Pat::TupleStructPat(tuple_struct_pat) => {\n-                for arg_pat in tuple_struct_pat.args() {\n-                    pats_to_process.push_back(arg_pat);\n-                }\n+                pats_to_process.extend(tuple_struct_pat.args())\n             }\n+            ast::Pat::RefPat(ref_pat) => pats_to_process.extend(ref_pat.pat()),\n             _ => (),\n         }\n     }\n@@ -163,9 +155,10 @@ fn get_leaf_pats(root_pat: ast::Pat) -> Vec<ast::Pat> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::mock_analysis::single_file;\n     use insta::assert_debug_snapshot;\n \n+    use crate::mock_analysis::single_file;\n+\n     #[test]\n     fn let_statement() {\n         let (analysis, file_id) = single_file(\n@@ -202,6 +195,7 @@ fn main() {\n \n     let test = (42, 'a');\n     let (a, (b, c, (d, e), f)) = (2, (3, 4, (6.6, 7.7), 5));\n+    let &x = &92;\n }\"#,\n         );\n \n@@ -257,6 +251,11 @@ fn main() {\n                 kind: TypeHint,\n                 label: \"f64\",\n             },\n+            InlayHint {\n+                range: [627; 628),\n+                kind: TypeHint,\n+                label: \"i32\",\n+            },\n         ]\n         \"###\n         );"}]}