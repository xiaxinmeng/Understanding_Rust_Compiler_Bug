{"sha": "b0d535b2ba24cc90caddda53ba7378da378468eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZDUzNWIyYmEyNGNjOTBjYWRkZGE1M2JhNzM3OGRhMzc4NDY4ZWI=", "commit": {"author": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2015-06-08T18:04:22Z"}, "committer": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2015-06-08T18:04:22Z"}, "message": "OpenOptionsExt on Windows: i32 -> u32\nSince all those flags are u32 anyway, avoid unnecessary conversions\n[breaking change]\n\nSigned-off-by: Peter Atashian <retep998@gmail.com>", "tree": {"sha": "fa79420617ae5f466c4e09bf394531d190abe2dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa79420617ae5f466c4e09bf394531d190abe2dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0d535b2ba24cc90caddda53ba7378da378468eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d535b2ba24cc90caddda53ba7378da378468eb", "html_url": "https://github.com/rust-lang/rust/commit/b0d535b2ba24cc90caddda53ba7378da378468eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0d535b2ba24cc90caddda53ba7378da378468eb/comments", "author": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "committer": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61c43b47338b92c447c1f6af5cffec46718e750b", "url": "https://api.github.com/repos/rust-lang/rust/commits/61c43b47338b92c447c1f6af5cffec46718e750b", "html_url": "https://github.com/rust-lang/rust/commit/61c43b47338b92c447c1f6af5cffec46718e750b"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "28d9b3e047633fd53c83d0a2b78d529a200cbc37", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0d535b2ba24cc90caddda53ba7378da378468eb/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d535b2ba24cc90caddda53ba7378da378468eb/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=b0d535b2ba24cc90caddda53ba7378da378468eb", "patch": "@@ -25,41 +25,41 @@ use sys_common::{AsInnerMut, AsInner};\n pub trait OpenOptionsExt {\n     /// Overrides the `dwDesiredAccess` argument to the call to `CreateFile`\n     /// with the specified value.\n-    fn desired_access(&mut self, access: i32) -> &mut Self;\n+    fn desired_access(&mut self, access: u32) -> &mut Self;\n \n     /// Overrides the `dwCreationDisposition` argument to the call to\n     /// `CreateFile` with the specified value.\n     ///\n     /// This will override any values of the standard `create` flags, for\n     /// example.\n-    fn creation_disposition(&mut self, val: i32) -> &mut Self;\n+    fn creation_disposition(&mut self, val: u32) -> &mut Self;\n \n     /// Overrides the `dwFlagsAndAttributes` argument to the call to\n     /// `CreateFile` with the specified value.\n     ///\n     /// This will override any values of the standard flags on the\n     /// `OpenOptions` structure.\n-    fn flags_and_attributes(&mut self, val: i32) -> &mut Self;\n+    fn flags_and_attributes(&mut self, val: u32) -> &mut Self;\n \n     /// Overrides the `dwShareMode` argument to the call to `CreateFile` with\n     /// the specified value.\n     ///\n     /// This will override any values of the standard flags on the\n     /// `OpenOptions` structure.\n-    fn share_mode(&mut self, val: i32) -> &mut Self;\n+    fn share_mode(&mut self, val: u32) -> &mut Self;\n }\n \n impl OpenOptionsExt for OpenOptions {\n-    fn desired_access(&mut self, access: i32) -> &mut OpenOptions {\n+    fn desired_access(&mut self, access: u32) -> &mut OpenOptions {\n         self.as_inner_mut().desired_access(access); self\n     }\n-    fn creation_disposition(&mut self, access: i32) -> &mut OpenOptions {\n+    fn creation_disposition(&mut self, access: u32) -> &mut OpenOptions {\n         self.as_inner_mut().creation_disposition(access); self\n     }\n-    fn flags_and_attributes(&mut self, access: i32) -> &mut OpenOptions {\n+    fn flags_and_attributes(&mut self, access: u32) -> &mut OpenOptions {\n         self.as_inner_mut().flags_and_attributes(access); self\n     }\n-    fn share_mode(&mut self, access: i32) -> &mut OpenOptions {\n+    fn share_mode(&mut self, access: u32) -> &mut OpenOptions {\n         self.as_inner_mut().share_mode(access); self\n     }\n }"}, {"sha": "4401a52d71fff3c119c148706282c540bcad614e", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b0d535b2ba24cc90caddda53ba7378da378468eb/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0d535b2ba24cc90caddda53ba7378da378468eb/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=b0d535b2ba24cc90caddda53ba7378da378468eb", "patch": "@@ -158,17 +158,17 @@ impl OpenOptions {\n     pub fn append(&mut self, append: bool) { self.append = append; }\n     pub fn create(&mut self, create: bool) { self.create = create; }\n     pub fn truncate(&mut self, truncate: bool) { self.truncate = truncate; }\n-    pub fn creation_disposition(&mut self, val: i32) {\n-        self.creation_disposition = Some(val as libc::DWORD);\n+    pub fn creation_disposition(&mut self, val: u32) {\n+        self.creation_disposition = Some(val);\n     }\n-    pub fn flags_and_attributes(&mut self, val: i32) {\n-        self.flags_and_attributes = Some(val as libc::DWORD);\n+    pub fn flags_and_attributes(&mut self, val: u32) {\n+        self.flags_and_attributes = Some(val);\n     }\n-    pub fn desired_access(&mut self, val: i32) {\n-        self.desired_access = Some(val as libc::DWORD);\n+    pub fn desired_access(&mut self, val: u32) {\n+        self.desired_access = Some(val);\n     }\n-    pub fn share_mode(&mut self, val: i32) {\n-        self.share_mode = Some(val as libc::DWORD);\n+    pub fn share_mode(&mut self, val: u32) {\n+        self.share_mode = Some(val);\n     }\n     pub fn security_attributes(&mut self, attrs: libc::LPSECURITY_ATTRIBUTES) {\n         self.security_attributes = attrs as usize;\n@@ -221,7 +221,7 @@ impl File {\n     fn open_reparse_point(path: &Path) -> io::Result<File> {\n         let mut opts = OpenOptions::new();\n         opts.read(true);\n-        opts.flags_and_attributes(c::FILE_FLAG_OPEN_REPARSE_POINT as i32);\n+        opts.flags_and_attributes(c::FILE_FLAG_OPEN_REPARSE_POINT);\n         File::open(path, &opts)\n     }\n "}]}