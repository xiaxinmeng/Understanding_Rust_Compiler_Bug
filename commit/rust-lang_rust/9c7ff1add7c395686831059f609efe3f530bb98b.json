{"sha": "9c7ff1add7c395686831059f609efe3f530bb98b", "node_id": "C_kwDOAAsO6NoAKDljN2ZmMWFkZDdjMzk1Njg2ODMxMDU5ZjYwOWVmZTNmNTMwYmI5OGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-07T05:44:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-07T05:44:02Z"}, "message": "Rollup merge of #94636 - compiler-errors:issue-94599, r=davidtwco\n\nCheck extra function arg exprs even if the fn is not C-variadic\n\nWe should still call check_expr on the args that exceed the formal input ty count, so that we have expr types to emit during writeback.\n\nNot sure where this regressed, but it wasn't due to the same root cause as #94334 I think. I thought this might've regressed in #92360, but I think that is in stable, ad the test I provided (which minimizes #94599) passes on stable in playground. Maybe it regressed in #93118.\n\nAnywho, fixes #94599.", "tree": {"sha": "bff76caee916ef52940dfc5728e810c3aab84be5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bff76caee916ef52940dfc5728e810c3aab84be5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c7ff1add7c395686831059f609efe3f530bb98b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiJZuiCRBK7hj4Ov3rIwAA6LoIABW4Gj9XYrQckCt2/j23Up8o\n/Jlgr+xruzN/oYCi+7NMoUXsj2JeGhwaMWWHUaYzzEfuZM3k9I87qC1Dyw/4xCuv\nhyNHTSDahGG4sXHkzHY/ORnYnG3B0dPcJu7Rp3RLaqzdVmfqQ9USZ2D6dBL6aH9n\nZ5i30lnfjg09Y2Jggod9KA4NKgRW44VWxYKhAWD1FWw8B9eI4NR3J9EnMPXmvpc0\n7gsfsi7EM483O9zM2JYe4zrIFRHBTwyxnK5HUBvIMRAVpCcx2+fbu6XIcHEZBfMV\n381nk9SuSwci8MQxHy8aYk+wEadE1FzGQbUQYa8GmFZOMxJED2p6PhHNrLVEuc4=\n=ulQQ\n-----END PGP SIGNATURE-----\n", "payload": "tree bff76caee916ef52940dfc5728e810c3aab84be5\nparent 3d1eaf4b6203ab0168da5b99049942385aa753e0\nparent 3f17dae37d8829a03312340918a839f0bf8b6088\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646631842 +0100\ncommitter GitHub <noreply@github.com> 1646631842 +0100\n\nRollup merge of #94636 - compiler-errors:issue-94599, r=davidtwco\n\nCheck extra function arg exprs even if the fn is not C-variadic\n\nWe should still call check_expr on the args that exceed the formal input ty count, so that we have expr types to emit during writeback.\n\nNot sure where this regressed, but it wasn't due to the same root cause as #94334 I think. I thought this might've regressed in #92360, but I think that is in stable, ad the test I provided (which minimizes #94599) passes on stable in playground. Maybe it regressed in #93118.\n\nAnywho, fixes #94599.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c7ff1add7c395686831059f609efe3f530bb98b", "html_url": "https://github.com/rust-lang/rust/commit/9c7ff1add7c395686831059f609efe3f530bb98b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c7ff1add7c395686831059f609efe3f530bb98b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d1eaf4b6203ab0168da5b99049942385aa753e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1eaf4b6203ab0168da5b99049942385aa753e0", "html_url": "https://github.com/rust-lang/rust/commit/3d1eaf4b6203ab0168da5b99049942385aa753e0"}, {"sha": "3f17dae37d8829a03312340918a839f0bf8b6088", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f17dae37d8829a03312340918a839f0bf8b6088", "html_url": "https://github.com/rust-lang/rust/commit/3f17dae37d8829a03312340918a839f0bf8b6088"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "f165093c958dba28ffcfcd499828aadf6a9f4beb", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ff1add7c395686831059f609efe3f530bb98b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ff1add7c395686831059f609efe3f530bb98b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=9c7ff1add7c395686831059f609efe3f530bb98b", "patch": "@@ -281,6 +281,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.demand_suptype(provided_arg.span, formal_input_ty, coerced_ty);\n         };\n \n+        let minimum_input_count = formal_input_tys.len();\n+\n         // Check the arguments.\n         // We do this in a pretty awful way: first we type-check any arguments\n         // that are not closures, then we type-check the closures. This is so\n@@ -303,7 +305,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 })\n             }\n \n-            let minimum_input_count = formal_input_tys.len();\n             for (idx, arg) in provided_args.iter().enumerate() {\n                 // Warn only for the first loop (the \"no closures\" one).\n                 // Closure arguments themselves can't be diverging, but\n@@ -456,17 +457,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             err.emit();\n         }\n \n-        // We also need to make sure we at least write the ty of the other\n-        // arguments which we skipped above.\n-        if c_variadic {\n-            fn variadic_error<'tcx>(sess: &Session, span: Span, ty: Ty<'tcx>, cast_ty: &str) {\n-                use crate::structured_errors::MissingCastForVariadicArg;\n+        for arg in provided_args.iter().skip(minimum_input_count) {\n+            let arg_ty = self.check_expr(&arg);\n \n-                MissingCastForVariadicArg { sess, span, ty, cast_ty }.diagnostic().emit();\n-            }\n+            if c_variadic {\n+                // We also need to make sure we at least write the ty of the other\n+                // arguments which we skipped above, either because they were additional\n+                // c_variadic args, or because we had an argument count mismatch.\n+                fn variadic_error<'tcx>(sess: &Session, span: Span, ty: Ty<'tcx>, cast_ty: &str) {\n+                    use crate::structured_errors::MissingCastForVariadicArg;\n \n-            for arg in provided_args.iter().skip(expected_arg_count) {\n-                let arg_ty = self.check_expr(&arg);\n+                    MissingCastForVariadicArg { sess, span, ty, cast_ty }.diagnostic().emit();\n+                }\n \n                 // There are a few types which get autopromoted when passed via varargs\n                 // in C but we just error out instead and require explicit casts."}, {"sha": "479bd0d819fdb921b4a59fdb1e1cc737d544afca", "filename": "src/test/ui/tuple/wrong_argument_ice-4.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ff1add7c395686831059f609efe3f530bb98b/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ff1add7c395686831059f609efe3f530bb98b/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.rs?ref=9c7ff1add7c395686831059f609efe3f530bb98b", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    (|| {})(|| {\n+        //~^ ERROR this function takes 0 arguments but 1 argument was supplied\n+        let b = 1;\n+    });\n+}"}, {"sha": "fef5dca856db36592aad666b9a3cde8b603a3ffb", "filename": "src/test/ui/tuple/wrong_argument_ice-4.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ff1add7c395686831059f609efe3f530bb98b/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ff1add7c395686831059f609efe3f530bb98b/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fwrong_argument_ice-4.stderr?ref=9c7ff1add7c395686831059f609efe3f530bb98b", "patch": "@@ -0,0 +1,15 @@\n+error[E0057]: this function takes 0 arguments but 1 argument was supplied\n+  --> $DIR/wrong_argument_ice-4.rs:2:5\n+   |\n+LL |       (|| {})(|| {\n+   |  _____^^^^^^^_-\n+   | |     |\n+   | |     expected 0 arguments\n+LL | |\n+LL | |         let b = 1;\n+LL | |     });\n+   | |_____- supplied 1 argument\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0057`."}]}