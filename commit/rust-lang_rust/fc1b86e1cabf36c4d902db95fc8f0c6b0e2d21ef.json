{"sha": "fc1b86e1cabf36c4d902db95fc8f0c6b0e2d21ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMWI4NmUxY2FiZjM2YzRkOTAyZGI5NWZjOGYwYzZiMGUyZDIxZWY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-30T07:06:31Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-30T07:06:31Z"}, "message": "Wrap long lines.", "tree": {"sha": "c7d196af63980a98b9b8da16de6d64aa155f7305", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7d196af63980a98b9b8da16de6d64aa155f7305"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc1b86e1cabf36c4d902db95fc8f0c6b0e2d21ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc1b86e1cabf36c4d902db95fc8f0c6b0e2d21ef", "html_url": "https://github.com/rust-lang/rust/commit/fc1b86e1cabf36c4d902db95fc8f0c6b0e2d21ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc1b86e1cabf36c4d902db95fc8f0c6b0e2d21ef/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d4c1116f96463b8af222365d61d05bc42a78ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d4c1116f96463b8af222365d61d05bc42a78ac", "html_url": "https://github.com/rust-lang/rust/commit/c2d4c1116f96463b8af222365d61d05bc42a78ac"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "663ce9f5870d83777f784c4263df21891266ace5", "filename": "src/boot/me/dwarf.ml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc1b86e1cabf36c4d902db95fc8f0c6b0e2d21ef/src%2Fboot%2Fme%2Fdwarf.ml", "raw_url": "https://github.com/rust-lang/rust/raw/fc1b86e1cabf36c4d902db95fc8f0c6b0e2d21ef/src%2Fboot%2Fme%2Fdwarf.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdwarf.ml?ref=fc1b86e1cabf36c4d902db95fc8f0c6b0e2d21ef", "patch": "@@ -1311,9 +1311,10 @@ let (abbrev_alias_slot:abbrev) =\n ;;\n \n (* FIXME: Perverse, but given dwarf's vocabulary it seems at least plausible\n- * that a \"mutable const type\" is a correct way of saying \"mutable\". Or else we\n- * make up our own. Revisit perhaps.\n+ * that a \"mutable const type\" is a correct way of saying \"mutable\". \n+ * Or else we make up our own. Revisit perhaps.\n  *)\n+\n let (abbrev_mutable_type:abbrev) =\n   (DW_TAG_const_type, DW_CHILDREN_no,\n    [|"}, {"sha": "031f1b40525064c365b521419f27d4e0bb26777e", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc1b86e1cabf36c4d902db95fc8f0c6b0e2d21ef/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/fc1b86e1cabf36c4d902db95fc8f0c6b0e2d21ef/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=fc1b86e1cabf36c4d902db95fc8f0c6b0e2d21ef", "patch": "@@ -676,7 +676,10 @@ type ('ty, 'tys, 'slot, 'slots, 'tag) ty_fold =\n       ty_fold_constrained : ('ty * Ast.constrs) -> 'ty }\n ;;\n \n-let rec fold_ty (f:('ty, 'tys, 'slot, 'slots, 'tag) ty_fold) (ty:Ast.ty) : 'ty =\n+let rec fold_ty\n+    (f:('ty, 'tys, 'slot, 'slots, 'tag) ty_fold)\n+    (ty:Ast.ty)\n+    : 'ty =\n   let fold_slot (s:Ast.slot) : 'slot =\n     f.ty_fold_slot (s.Ast.slot_mode,\n                     fold_ty f (slot_ty s))"}, {"sha": "f25cc569ee5d30ef7d89a51e32cf4213392a6462", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc1b86e1cabf36c4d902db95fc8f0c6b0e2d21ef/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/fc1b86e1cabf36c4d902db95fc8f0c6b0e2d21ef/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=fc1b86e1cabf36c4d902db95fc8f0c6b0e2d21ef", "patch": "@@ -357,7 +357,8 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           | (TYSPEC_resolved (params_a, ty_a),\n              TYSPEC_resolved (params_b, ty_b)) ->\n               if params_a <> params_b then fail()\n-              else TYSPEC_resolved (params_a, (unify_resolved_types ty_a ty_b))\n+              else TYSPEC_resolved\n+                (params_a, (unify_resolved_types ty_a ty_b))\n \n           | (TYSPEC_resolved (params, ty),\n              TYSPEC_callable (out_tv, in_tvs))"}]}