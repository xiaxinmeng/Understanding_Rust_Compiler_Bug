{"sha": "121ad1cb7db6517ed2aabc9c1514a99f5eb95149", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMWFkMWNiN2RiNjUxN2VkMmFhYmM5YzE1MTRhOTlmNWViOTUxNDk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-10T02:59:46Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-10T23:58:18Z"}, "message": "rename `global_heap` -> `libc_heap`\n\nThis module only contains wrappers for malloc and realloc with\nout-of-memory checks.", "tree": {"sha": "b777b0213aecc150a7a18a7cb14643657cc62afb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b777b0213aecc150a7a18a7cb14643657cc62afb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/121ad1cb7db6517ed2aabc9c1514a99f5eb95149", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/121ad1cb7db6517ed2aabc9c1514a99f5eb95149", "html_url": "https://github.com/rust-lang/rust/commit/121ad1cb7db6517ed2aabc9c1514a99f5eb95149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87b658cf728b5d7e6b81012460454af634f6e6f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/87b658cf728b5d7e6b81012460454af634f6e6f8", "html_url": "https://github.com/rust-lang/rust/commit/87b658cf728b5d7e6b81012460454af634f6e6f8"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "1a222a27e4795dd5a0f76a6eb63c2d5d8debd61e", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=121ad1cb7db6517ed2aabc9c1514a99f5eb95149", "patch": "@@ -42,7 +42,7 @@ mod table {\n     use std::prelude::Drop;\n     use std::ptr;\n     use std::ptr::RawPtr;\n-    use std::rt::global_heap;\n+    use std::rt::libc_heap;\n     use std::intrinsics::{size_of, min_align_of, transmute};\n     use std::intrinsics::{move_val_init, set_memory};\n     use std::iter::{Iterator, range_step_inclusive};\n@@ -243,7 +243,7 @@ mod table {\n                     keys_size,   min_align_of::< K >(),\n                     vals_size,   min_align_of::< V >());\n \n-            let buffer = global_heap::malloc_raw(size) as *mut u8;\n+            let buffer = libc_heap::malloc_raw(size) as *mut u8;\n \n             // FIXME #13094: If malloc was not at as aligned as we expected,\n             // our offset calculations are just plain wrong. We could support"}, {"sha": "5fc9e506cf2677c4fb49d65deb9cd54a7189481a", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=121ad1cb7db6517ed2aabc9c1514a99f5eb95149", "patch": "@@ -339,7 +339,7 @@ pub fn mkdir(p: &CString, _mode: io::FilePermission) -> IoResult<()> {\n }\n \n pub fn readdir(p: &CString) -> IoResult<Vec<Path>> {\n-    use std::rt::global_heap::malloc_raw;\n+    use std::rt::libc_heap::malloc_raw;\n \n     fn prune(root: &CString, dirs: Vec<Path>) -> Vec<Path> {\n         let root = unsafe { CString::new(root.with_ref(|p| p), false) };"}, {"sha": "6236fd0e0e56345882a71eeebeb989586d75e645", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=121ad1cb7db6517ed2aabc9c1514a99f5eb95149", "patch": "@@ -32,7 +32,7 @@\n use libc::{size_t, c_int, c_uint, c_void, c_char, c_double};\n use libc::{ssize_t, sockaddr, free, addrinfo};\n use libc;\n-use std::rt::global_heap::malloc_raw;\n+use std::rt::libc_heap::malloc_raw;\n \n #[cfg(test)]\n use libc::uintptr_t;"}, {"sha": "b33d211aa192849bf258182bb3bab41239e51bc7", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=121ad1cb7db6517ed2aabc9c1514a99f5eb95149", "patch": "@@ -81,7 +81,7 @@ use str::StrSlice;\n use str;\n use slice::{ImmutableVector, MutableVector};\n use slice;\n-use rt::global_heap::malloc_raw;\n+use rt::libc_heap::malloc_raw;\n use raw::Slice;\n \n /// The representation of a C String."}, {"sha": "8c2c4fd1f0be7e416f3eba768798574609fd988e", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=121ad1cb7db6517ed2aabc9c1514a99f5eb95149", "patch": "@@ -160,7 +160,7 @@ mod tests {\n     use super::CVec;\n     use libc;\n     use ptr;\n-    use rt::global_heap::malloc_raw;\n+    use rt::libc_heap::malloc_raw;\n \n     fn malloc(n: uint) -> CVec<u8> {\n         unsafe {"}, {"sha": "ece51ab99893c9953eb5d4d9af897ba66cdd52be", "filename": "src/libstd/rt/libc_heap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibstd%2Frt%2Flibc_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibstd%2Frt%2Flibc_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flibc_heap.rs?ref=121ad1cb7db6517ed2aabc9c1514a99f5eb95149", "previous_filename": "src/libstd/rt/global_heap.rs"}, {"sha": "efc8072594bbfcf1d81a6275f0a6c4b412290875", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=121ad1cb7db6517ed2aabc9c1514a99f5eb95149", "patch": "@@ -18,7 +18,7 @@ use ops::Drop;\n use option::{Option, None, Some};\n use ptr;\n use ptr::RawPtr;\n-use rt::global_heap;\n+use rt::libc_heap;\n use rt::local::Local;\n use rt::task::Task;\n use raw;\n@@ -188,7 +188,7 @@ impl MemoryRegion {\n     fn malloc(&mut self, size: uint) -> *mut Box {\n         let total_size = size + AllocHeader::size();\n         let alloc: *AllocHeader = unsafe {\n-            global_heap::malloc_raw(total_size) as *AllocHeader\n+            libc_heap::malloc_raw(total_size) as *AllocHeader\n         };\n \n         let alloc: &mut AllocHeader = unsafe { cast::transmute(alloc) };\n@@ -207,8 +207,7 @@ impl MemoryRegion {\n \n         let total_size = size + AllocHeader::size();\n         let alloc: *AllocHeader = unsafe {\n-            global_heap::realloc_raw(orig_alloc as *mut u8,\n-                                     total_size) as *AllocHeader\n+            libc_heap::realloc_raw(orig_alloc as *mut u8, total_size) as *AllocHeader\n         };\n \n         let alloc: &mut AllocHeader = unsafe { cast::transmute(alloc) };"}, {"sha": "a04cbabedd6b4485165c0e116910641cf7128675", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=121ad1cb7db6517ed2aabc9c1514a99f5eb95149", "patch": "@@ -26,7 +26,7 @@ language and an implementation must be provided regardless of the\n execution environment.\n \n Of foremost importance is the global exchange heap, in the module\n-`global_heap`. Very little practical Rust code can be written without\n+`heap`. Very little practical Rust code can be written without\n access to the global heap. Unlike most of `rt` the global heap is\n truly a global resource and generally operates independently of the\n rest of the runtime.\n@@ -86,8 +86,8 @@ pub mod shouldnt_be_public {\n // Internal macros used by the runtime.\n mod macros;\n \n-// The global (exchange) heap.\n-pub mod global_heap;\n+/// Wrappers around malloc / realloc aborting on out-of-memory.\n+pub mod libc_heap;\n \n /// The low-level memory allocation API.\n pub mod heap;"}, {"sha": "c9d70915694e532ac4ee258f88bf66bd72df3e39", "filename": "src/libstd/unstable/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibstd%2Funstable%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121ad1cb7db6517ed2aabc9c1514a99f5eb95149/src%2Flibstd%2Funstable%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmutex.rs?ref=121ad1cb7db6517ed2aabc9c1514a99f5eb95149", "patch": "@@ -434,7 +434,7 @@ mod imp {\n \n #[cfg(windows)]\n mod imp {\n-    use rt::global_heap::malloc_raw;\n+    use rt::libc_heap::malloc_raw;\n     use libc::{HANDLE, BOOL, LPSECURITY_ATTRIBUTES, c_void, DWORD, LPCSTR};\n     use libc;\n     use ptr;"}]}