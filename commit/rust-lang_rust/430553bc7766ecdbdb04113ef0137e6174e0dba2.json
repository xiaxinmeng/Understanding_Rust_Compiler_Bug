{"sha": "430553bc7766ecdbdb04113ef0137e6174e0dba2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMDU1M2JjNzc2NmVjZGJkYjA0MTEzZWYwMTM3ZTYxNzRlMGRiYTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-08T15:50:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-10T22:03:06Z"}, "message": "introduce `trait_def_id` method\n\nCo-Authored-By: Alexander Regueiro <alexreg@me.com>", "tree": {"sha": "fa7814466a18c46f909dbf35ff5aec6f64ad5c83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa7814466a18c46f909dbf35ff5aec6f64ad5c83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/430553bc7766ecdbdb04113ef0137e6174e0dba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/430553bc7766ecdbdb04113ef0137e6174e0dba2", "html_url": "https://github.com/rust-lang/rust/commit/430553bc7766ecdbdb04113ef0137e6174e0dba2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/430553bc7766ecdbdb04113ef0137e6174e0dba2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ecad338381cc3b8d56e2df22e5971a598eddd6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ecad338381cc3b8d56e2df22e5971a598eddd6c", "html_url": "https://github.com/rust-lang/rust/commit/6ecad338381cc3b8d56e2df22e5971a598eddd6c"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "03a61dd03a9f550f79135d662169ba28a61750bb", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/430553bc7766ecdbdb04113ef0137e6174e0dba2/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430553bc7766ecdbdb04113ef0137e6174e0dba2/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=430553bc7766ecdbdb04113ef0137e6174e0dba2", "patch": "@@ -10,6 +10,7 @@ pub use self::PrimTy::*;\n pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n \n+use errors::FatalError;\n use hir::def::Def;\n use hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n use util::nodemap::{NodeMap, FxHashSet};\n@@ -2053,6 +2054,20 @@ pub struct TraitRef {\n     pub hir_ref_id: HirId,\n }\n \n+impl TraitRef {\n+    /// Get the `DefId` of the referenced trait. It _must_ actually be a trait or trait alias.\n+    pub fn trait_def_id(&self) -> DefId {\n+        match self.path.def {\n+            Def::Trait(did) => did,\n+            Def::TraitAlias(did) => did,\n+            Def::Err => {\n+                FatalError.raise();\n+            }\n+            _ => unreachable!(),\n+        }\n+    }\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct PolyTraitRef {\n     /// The `'a` in `<'a> Foo<&'a T>`"}, {"sha": "a841bbab5867bd51744a45556dd713da1190c97f", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/430553bc7766ecdbdb04113ef0137e6174e0dba2/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430553bc7766ecdbdb04113ef0137e6174e0dba2/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=430553bc7766ecdbdb04113ef0137e6174e0dba2", "patch": "@@ -2,7 +2,7 @@\n //! The main routine here is `ast_ty_to_ty()`; each use is parameterized by an\n //! instance of `AstConv`.\n \n-use errors::{Applicability, FatalError, DiagnosticId};\n+use errors::{Applicability, DiagnosticId};\n use hir::{self, GenericArg, GenericArgs};\n use hir::def::Def;\n use hir::def_id::DefId;\n@@ -689,35 +689,21 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     {\n         self.prohibit_generics(trait_ref.path.segments.split_last().unwrap().1);\n \n-        let trait_def_id = self.trait_def_id(trait_ref);\n         self.ast_path_to_mono_trait_ref(trait_ref.path.span,\n-                                        trait_def_id,\n+                                        trait_ref.trait_def_id(),\n                                         self_ty,\n                                         trait_ref.path.segments.last().unwrap())\n     }\n \n-    /// Get the `DefId` of the given trait ref. It _must_ actually be a trait.\n-    fn trait_def_id(&self, trait_ref: &hir::TraitRef) -> DefId {\n-        let path = &trait_ref.path;\n-        match path.def {\n-            Def::Trait(trait_def_id) => trait_def_id,\n-            Def::TraitAlias(alias_def_id) => alias_def_id,\n-            Def::Err => {\n-                FatalError.raise();\n-            }\n-            _ => unreachable!(),\n-        }\n-    }\n-\n-    /// The given trait ref must actually be a trait.\n+    /// The given trait-ref must actually be a trait.\n     pub(super) fn instantiate_poly_trait_ref_inner(&self,\n         trait_ref: &hir::TraitRef,\n         self_ty: Ty<'tcx>,\n         poly_projections: &mut Vec<(ty::PolyProjectionPredicate<'tcx>, Span)>,\n         speculative: bool)\n         -> (ty::PolyTraitRef<'tcx>, Option<Vec<Span>>)\n     {\n-        let trait_def_id = self.trait_def_id(trait_ref);\n+        let trait_def_id = trait_ref.trait_def_id();\n \n         debug!(\"instantiate_poly_trait_ref({:?}, def_id={:?})\", trait_ref, trait_def_id);\n "}]}