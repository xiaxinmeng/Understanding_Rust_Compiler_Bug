{"sha": "ae1ed4fd78273502153083f1514a1fcd7c929886", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMWVkNGZkNzgyNzM1MDIxNTMwODNmMTUxNGExZmNkN2M5Mjk4ODY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-05T20:10:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-07T22:40:27Z"}, "message": "std: Allow spawners to specify stack size", "tree": {"sha": "856842f3648b0c902d85f373b5a9867982334a28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/856842f3648b0c902d85f373b5a9867982334a28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae1ed4fd78273502153083f1514a1fcd7c929886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae1ed4fd78273502153083f1514a1fcd7c929886", "html_url": "https://github.com/rust-lang/rust/commit/ae1ed4fd78273502153083f1514a1fcd7c929886", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae1ed4fd78273502153083f1514a1fcd7c929886/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f82da818a7ea94f4bbb1a1ea15073b51805fd582", "url": "https://api.github.com/repos/rust-lang/rust/commits/f82da818a7ea94f4bbb1a1ea15073b51805fd582", "html_url": "https://github.com/rust-lang/rust/commit/f82da818a7ea94f4bbb1a1ea15073b51805fd582"}], "stats": {"total": 110, "additions": 61, "deletions": 49}, "files": [{"sha": "7154066e7b748f4e6196567301986c766755e2bd", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ae1ed4fd78273502153083f1514a1fcd7c929886/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1ed4fd78273502153083f1514a1fcd7c929886/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=ae1ed4fd78273502153083f1514a1fcd7c929886", "patch": "@@ -126,6 +126,7 @@ impl Local for IoFactoryObject {\n \n #[cfg(test)]\n mod test {\n+    use option::None;\n     use unstable::run_in_bare_thread;\n     use rt::test::*;\n     use super::*;\n@@ -137,7 +138,7 @@ mod test {\n         do run_in_bare_thread {\n             local_ptr::init_tls_key();\n             let mut sched = ~new_test_uv_sched();\n-            let task = ~Task::new_root(&mut sched.stack_pool, || {});\n+            let task = ~Task::new_root(&mut sched.stack_pool, None, || {});\n             Local::put(task);\n             let task: ~Task = Local::take();\n             cleanup_task(task);\n@@ -149,11 +150,11 @@ mod test {\n         do run_in_bare_thread {\n             local_ptr::init_tls_key();\n             let mut sched = ~new_test_uv_sched();\n-            let task = ~Task::new_root(&mut sched.stack_pool, || {});\n+            let task = ~Task::new_root(&mut sched.stack_pool, None, || {});\n             Local::put(task);\n             let task: ~Task = Local::take();\n             cleanup_task(task);\n-            let task = ~Task::new_root(&mut sched.stack_pool, || {});\n+            let task = ~Task::new_root(&mut sched.stack_pool, None, || {});\n             Local::put(task);\n             let task: ~Task = Local::take();\n             cleanup_task(task);\n@@ -166,7 +167,7 @@ mod test {\n         do run_in_bare_thread {\n             local_ptr::init_tls_key();\n             let mut sched = ~new_test_uv_sched();\n-            let task = ~Task::new_root(&mut sched.stack_pool, || {});\n+            let task = ~Task::new_root(&mut sched.stack_pool, None, || {});\n             Local::put(task);\n \n             unsafe {\n@@ -182,7 +183,7 @@ mod test {\n         do run_in_bare_thread {\n             local_ptr::init_tls_key();\n             let mut sched = ~new_test_uv_sched();\n-            let task = ~Task::new_root(&mut sched.stack_pool, || {});\n+            let task = ~Task::new_root(&mut sched.stack_pool, None, || {});\n             Local::put(task);\n \n             let res = do Local::borrow::<Task,bool> |_task| {"}, {"sha": "147c75e5c41ef1bc47fdc7a358799c9588acb3bf", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ae1ed4fd78273502153083f1514a1fcd7c929886/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1ed4fd78273502153083f1514a1fcd7c929886/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=ae1ed4fd78273502153083f1514a1fcd7c929886", "patch": "@@ -331,8 +331,7 @@ fn run_(main: ~fn(), use_main_sched: bool) -> int {\n         // In the case where we do not use a main_thread scheduler we\n         // run the main task in one of our threads.\n \n-        let mut main_task = ~Task::new_root(&mut scheds[0].stack_pool,\n-                                            main.take());\n+        let mut main_task = ~Task::new_root(&mut scheds[0].stack_pool, None, main.take());\n         main_task.death.on_exit = Some(on_exit.take());\n         let main_task_cell = Cell::new(main_task);\n \n@@ -352,7 +351,7 @@ fn run_(main: ~fn(), use_main_sched: bool) -> int {\n         let sched_cell = Cell::new(sched);\n         let thread = do Thread::start {\n             let mut sched = sched_cell.take();\n-            let bootstrap_task = ~do Task::new_root(&mut sched.stack_pool) || {\n+            let bootstrap_task = ~do Task::new_root(&mut sched.stack_pool, None) || {\n                 rtdebug!(\"boostraping a non-primary scheduler\");\n             };\n             sched.bootstrap(bootstrap_task);\n@@ -369,7 +368,7 @@ fn run_(main: ~fn(), use_main_sched: bool) -> int {\n         let mut main_sched = main_sched.unwrap();\n \n         let home = Sched(main_sched.make_handle());\n-        let mut main_task = ~Task::new_root_homed(&mut main_sched.stack_pool,\n+        let mut main_task = ~Task::new_root_homed(&mut main_sched.stack_pool, None,\n                                                   home, main.take());\n         main_task.death.on_exit = Some(on_exit.take());\n         rtdebug!(\"boostrapping main_task\");"}, {"sha": "990e1a4a3de9915cb65355119d555b7a9e55fe3f", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ae1ed4fd78273502153083f1514a1fcd7c929886/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1ed4fd78273502153083f1514a1fcd7c929886/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=ae1ed4fd78273502153083f1514a1fcd7c929886", "patch": "@@ -833,7 +833,7 @@ mod test {\n             let mut sched = ~new_test_uv_sched();\n             let sched_handle = sched.make_handle();\n \n-            let mut task = ~do Task::new_root_homed(&mut sched.stack_pool,\n+            let mut task = ~do Task::new_root_homed(&mut sched.stack_pool, None,\n                                                 Sched(sched_handle)) {\n                 unsafe { *task_ran_ptr = true };\n                 assert!(Task::on_appropriate_sched());\n@@ -893,21 +893,21 @@ mod test {\n             //   3) task not homed, sched requeues\n             //   4) task not home, send home\n \n-            let task1 = ~do Task::new_root_homed(&mut special_sched.stack_pool,\n+            let task1 = ~do Task::new_root_homed(&mut special_sched.stack_pool, None,\n                                                  Sched(t1_handle)) || {\n                 rtassert!(Task::on_appropriate_sched());\n             };\n             rtdebug!(\"task1 id: **%u**\", borrow::to_uint(task1));\n \n-            let task2 = ~do Task::new_root(&mut normal_sched.stack_pool) {\n+            let task2 = ~do Task::new_root(&mut normal_sched.stack_pool, None) {\n                 rtassert!(Task::on_appropriate_sched());\n             };\n \n-            let task3 = ~do Task::new_root(&mut normal_sched.stack_pool) {\n+            let task3 = ~do Task::new_root(&mut normal_sched.stack_pool, None) {\n                 rtassert!(Task::on_appropriate_sched());\n             };\n \n-            let task4 = ~do Task::new_root_homed(&mut special_sched.stack_pool,\n+            let task4 = ~do Task::new_root_homed(&mut special_sched.stack_pool, None,\n                                                  Sched(t4_handle)) {\n                 rtassert!(Task::on_appropriate_sched());\n             };\n@@ -923,7 +923,7 @@ mod test {\n             let port = Cell::new(port);\n             let chan = Cell::new(chan);\n \n-            let normal_task = ~do Task::new_root(&mut normal_sched.stack_pool) {\n+            let normal_task = ~do Task::new_root(&mut normal_sched.stack_pool, None) {\n                 rtdebug!(\"*about to submit task2*\");\n                 Scheduler::run_task(task2.take());\n                 rtdebug!(\"*about to submit task4*\");\n@@ -938,7 +938,7 @@ mod test {\n \n             rtdebug!(\"normal task: %u\", borrow::to_uint(normal_task));\n \n-            let special_task = ~do Task::new_root(&mut special_sched.stack_pool) {\n+            let special_task = ~do Task::new_root(&mut special_sched.stack_pool, None) {\n                 rtdebug!(\"*about to submit task1*\");\n                 Scheduler::run_task(task1.take());\n                 rtdebug!(\"*about to submit task3*\");"}, {"sha": "364439a452601e490e5f2580d629f21c6caeb40f", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ae1ed4fd78273502153083f1514a1fcd7c929886/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1ed4fd78273502153083f1514a1fcd7c929886/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=ae1ed4fd78273502153083f1514a1fcd7c929886", "patch": "@@ -86,38 +86,40 @@ impl Task {\n \n     // A helper to build a new task using the dynamically found\n     // scheduler and task. Only works in GreenTask context.\n-    pub fn build_homed_child(f: ~fn(), home: SchedHome) -> ~Task {\n+    pub fn build_homed_child(stack_size: Option<uint>, f: ~fn(), home: SchedHome) -> ~Task {\n         let f = Cell::new(f);\n         let home = Cell::new(home);\n         do Local::borrow::<Task, ~Task> |running_task| {\n             let mut sched = running_task.sched.take_unwrap();\n             let new_task = ~running_task.new_child_homed(&mut sched.stack_pool,\n+                                                         stack_size,\n                                                          home.take(),\n                                                          f.take());\n             running_task.sched = Some(sched);\n             new_task\n         }\n     }\n \n-    pub fn build_child(f: ~fn()) -> ~Task {\n-        Task::build_homed_child(f, AnySched)\n+    pub fn build_child(stack_size: Option<uint>, f: ~fn()) -> ~Task {\n+        Task::build_homed_child(stack_size, f, AnySched)\n     }\n \n-    pub fn build_homed_root(f: ~fn(), home: SchedHome) -> ~Task {\n+    pub fn build_homed_root(stack_size: Option<uint>, f: ~fn(), home: SchedHome) -> ~Task {\n         let f = Cell::new(f);\n         let home = Cell::new(home);\n         do Local::borrow::<Task, ~Task> |running_task| {\n             let mut sched = running_task.sched.take_unwrap();\n             let new_task = ~Task::new_root_homed(&mut sched.stack_pool,\n-                                                    home.take(),\n-                                                    f.take());\n+                                                 stack_size,\n+                                                 home.take(),\n+                                                 f.take());\n             running_task.sched = Some(sched);\n             new_task\n         }\n     }\n \n-    pub fn build_root(f: ~fn()) -> ~Task {\n-        Task::build_homed_root(f, AnySched)\n+    pub fn build_root(stack_size: Option<uint>, f: ~fn()) -> ~Task {\n+        Task::build_homed_root(stack_size, f, AnySched)\n     }\n \n     pub fn new_sched_task() -> Task {\n@@ -138,17 +140,20 @@ impl Task {\n     }\n \n     pub fn new_root(stack_pool: &mut StackPool,\n+                    stack_size: Option<uint>,\n                     start: ~fn()) -> Task {\n-        Task::new_root_homed(stack_pool, AnySched, start)\n+        Task::new_root_homed(stack_pool, stack_size, AnySched, start)\n     }\n \n     pub fn new_child(&mut self,\n                      stack_pool: &mut StackPool,\n+                     stack_size: Option<uint>,\n                      start: ~fn()) -> Task {\n-        self.new_child_homed(stack_pool, AnySched, start)\n+        self.new_child_homed(stack_pool, stack_size, AnySched, start)\n     }\n \n     pub fn new_root_homed(stack_pool: &mut StackPool,\n+                          stack_size: Option<uint>,\n                           home: SchedHome,\n                           start: ~fn()) -> Task {\n         Task {\n@@ -161,14 +166,15 @@ impl Task {\n             death: Death::new(),\n             destroyed: false,\n             name: None,\n-            coroutine: Some(Coroutine::new(stack_pool, start)),\n+            coroutine: Some(Coroutine::new(stack_pool, stack_size, start)),\n             sched: None,\n             task_type: GreenTask(Some(~home))\n         }\n     }\n \n     pub fn new_child_homed(&mut self,\n                            stack_pool: &mut StackPool,\n+                           stack_size: Option<uint>,\n                            home: SchedHome,\n                            start: ~fn()) -> Task {\n         Task {\n@@ -182,7 +188,7 @@ impl Task {\n             death: self.death.new_child(),\n             destroyed: false,\n             name: None,\n-            coroutine: Some(Coroutine::new(stack_pool, start)),\n+            coroutine: Some(Coroutine::new(stack_pool, stack_size, start)),\n             sched: None,\n             task_type: GreenTask(Some(~home))\n         }\n@@ -326,8 +332,11 @@ impl Drop for Task {\n \n impl Coroutine {\n \n-    pub fn new(stack_pool: &mut StackPool, start: ~fn()) -> Coroutine {\n-        let stack_size = env::min_stack();\n+    pub fn new(stack_pool: &mut StackPool, stack_size: Option<uint>, start: ~fn()) -> Coroutine {\n+        let stack_size = match stack_size {\n+            Some(size) => size,\n+            None => env::min_stack()\n+        };\n         let start = Coroutine::build_start_wrapper(start);\n         let mut stack = stack_pool.take_segment(stack_size);\n         let initial_context = Context::new(start, &mut stack);"}, {"sha": "792ea5eb33f5acfa138be4692e53222858c34c2a", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ae1ed4fd78273502153083f1514a1fcd7c929886/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1ed4fd78273502153083f1514a1fcd7c929886/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=ae1ed4fd78273502153083f1514a1fcd7c929886", "patch": "@@ -57,7 +57,7 @@ pub fn run_in_newsched_task_core(f: ~fn()) {\n         exit_handle.take().send(Shutdown);\n         rtassert!(exit_status);\n     };\n-    let mut task = ~Task::new_root(&mut sched.stack_pool, f);\n+    let mut task = ~Task::new_root(&mut sched.stack_pool, None, f);\n     task.death.on_exit = Some(on_exit);\n \n     sched.bootstrap(task);\n@@ -190,8 +190,7 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n \n             rtassert!(exit_status);\n         };\n-        let mut main_task = ~Task::new_root(&mut scheds[0].stack_pool,\n-                                        f.take());\n+        let mut main_task = ~Task::new_root(&mut scheds[0].stack_pool, None, f.take());\n         main_task.death.on_exit = Some(on_exit);\n \n         let mut threads = ~[];\n@@ -209,7 +208,7 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n \n         while !scheds.is_empty() {\n             let mut sched = scheds.pop();\n-            let bootstrap_task = ~do Task::new_root(&mut sched.stack_pool) || {\n+            let bootstrap_task = ~do Task::new_root(&mut sched.stack_pool, None) || {\n                 rtdebug!(\"bootstrapping non-primary scheduler\");\n             };\n             let bootstrap_task_cell = Cell::new(bootstrap_task);\n@@ -232,12 +231,12 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n \n /// Test tasks will abort on failure instead of unwinding\n pub fn spawntask(f: ~fn()) {\n-    Scheduler::run_task(Task::build_child(f));\n+    Scheduler::run_task(Task::build_child(None, f));\n }\n \n /// Create a new task and run it right now. Aborts on failure\n pub fn spawntask_later(f: ~fn()) {\n-    Scheduler::run_task_later(Task::build_child(f));\n+    Scheduler::run_task_later(Task::build_child(None, f));\n }\n \n pub fn spawntask_random(f: ~fn()) {\n@@ -259,7 +258,7 @@ pub fn spawntask_try(f: ~fn()) -> Result<(),()> {\n     let chan = Cell::new(chan);\n     let on_exit: ~fn(bool) = |exit_status| chan.take().send(exit_status);\n \n-    let mut new_task = Task::build_root(f);\n+    let mut new_task = Task::build_root(None, f);\n     new_task.death.on_exit = Some(on_exit);\n \n     Scheduler::run_task(new_task);\n@@ -285,7 +284,7 @@ pub fn spawntask_thread(f: ~fn()) -> Thread {\n pub fn with_test_task(blk: ~fn(~Task) -> ~Task) {\n     do run_in_bare_thread {\n         let mut sched = ~new_test_uv_sched();\n-        let task = blk(~Task::new_root(&mut sched.stack_pool, ||{}));\n+        let task = blk(~Task::new_root(&mut sched.stack_pool, None, ||{}));\n         cleanup_task(task);\n     }\n }"}, {"sha": "4b5543b81865d5c1fb5b6cbfd88f0ac7c31f7e5c", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae1ed4fd78273502153083f1514a1fcd7c929886/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1ed4fd78273502153083f1514a1fcd7c929886/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=ae1ed4fd78273502153083f1514a1fcd7c929886", "patch": "@@ -142,7 +142,8 @@ pub struct TaskOpts {\n     indestructible: bool,\n     notify_chan: Option<Chan<TaskResult>>,\n     name: Option<~str>,\n-    sched: SchedOpts\n+    sched: SchedOpts,\n+    stack_size: Option<uint>\n }\n \n /**\n@@ -197,7 +198,8 @@ impl TaskBuilder {\n                 indestructible: self.opts.indestructible,\n                 notify_chan: notify_chan,\n                 name: name,\n-                sched: self.opts.sched\n+                sched: self.opts.sched,\n+                stack_size: self.opts.stack_size\n             },\n             gen_body: gen_body,\n             can_not_copy: None,\n@@ -351,7 +353,8 @@ impl TaskBuilder {\n             indestructible: x.opts.indestructible,\n             notify_chan: notify_chan,\n             name: name,\n-            sched: x.opts.sched\n+            sched: x.opts.sched,\n+            stack_size: x.opts.stack_size\n         };\n         let f = match gen_body {\n             Some(gen) => {\n@@ -422,7 +425,8 @@ pub fn default_task_opts() -> TaskOpts {\n         name: None,\n         sched: SchedOpts {\n             mode: DefaultScheduler,\n-        }\n+        },\n+        stack_size: None\n     }\n }\n "}, {"sha": "2d0a2d98e9fc0780f0c090289b6c47512e4539fd", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ae1ed4fd78273502153083f1514a1fcd7c929886/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae1ed4fd78273502153083f1514a1fcd7c929886/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=ae1ed4fd78273502153083f1514a1fcd7c929886", "patch": "@@ -713,9 +713,9 @@ fn spawn_raw_newsched(mut opts: TaskOpts, f: ~fn()) {\n     let mut task = unsafe {\n         if opts.sched.mode != SingleThreaded {\n             if opts.watched {\n-                Task::build_child(child_wrapper)\n+                Task::build_child(opts.stack_size, child_wrapper)\n             } else {\n-                Task::build_root(child_wrapper)\n+                Task::build_root(opts.stack_size, child_wrapper)\n             }\n         } else {\n             // Creating a 1:1 task:thread ...\n@@ -736,16 +736,16 @@ fn spawn_raw_newsched(mut opts: TaskOpts, f: ~fn()) {\n \n             // Pin the new task to the new scheduler\n             let new_task = if opts.watched {\n-                Task::build_homed_child(child_wrapper, Sched(new_sched_handle))\n+                Task::build_homed_child(opts.stack_size, child_wrapper, Sched(new_sched_handle))\n             } else {\n-                Task::build_homed_root(child_wrapper, Sched(new_sched_handle))\n+                Task::build_homed_root(opts.stack_size, child_wrapper, Sched(new_sched_handle))\n             };\n \n             // Create a task that will later be used to join with the new scheduler\n             // thread when it is ready to terminate\n             let (thread_port, thread_chan) = oneshot();\n             let thread_port_cell = Cell::new(thread_port);\n-            let join_task = do Task::build_child() {\n+            let join_task = do Task::build_child(None) {\n                 rtdebug!(\"running join task\");\n                 let thread_port = thread_port_cell.take();\n                 let thread: Thread = thread_port.recv();\n@@ -762,8 +762,8 @@ fn spawn_raw_newsched(mut opts: TaskOpts, f: ~fn()) {\n                 let mut orig_sched_handle = orig_sched_handle_cell.take();\n                 let join_task = join_task_cell.take();\n \n-                let bootstrap_task = ~do Task::new_root(&mut new_sched.stack_pool) || {\n-                    rtdebug!(\"bootstrapping a 1:1 scheduler\");\n+                let bootstrap_task = ~do Task::new_root(&mut new_sched.stack_pool, None) || {\n+                    rtdebug!(\"boostrapping a 1:1 scheduler\");\n                 };\n                 new_sched.bootstrap(bootstrap_task);\n "}]}