{"sha": "bf5152f486a88ea106a820387d7d807ea99962af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNTE1MmY0ODZhODhlYTEwNmE4MjAzODdkN2Q4MDdlYTk5OTYyYWY=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-01-18T22:50:49Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-01-25T06:30:01Z"}, "message": "Fix zero-sized memory mapping", "tree": {"sha": "22774779486e84acd449da5fd0d8a669c64cdb31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22774779486e84acd449da5fd0d8a669c64cdb31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf5152f486a88ea106a820387d7d807ea99962af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf5152f486a88ea106a820387d7d807ea99962af", "html_url": "https://github.com/rust-lang/rust/commit/bf5152f486a88ea106a820387d7d807ea99962af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf5152f486a88ea106a820387d7d807ea99962af/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7499e2dd4596893980aaed0ca0558eec89ce47ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7499e2dd4596893980aaed0ca0558eec89ce47ad", "html_url": "https://github.com/rust-lang/rust/commit/7499e2dd4596893980aaed0ca0558eec89ce47ad"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "c001d40a2465dccb08d65b1e04c370a5afc1edc4", "filename": "src/libgreen/coroutine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf5152f486a88ea106a820387d7d807ea99962af/src%2Flibgreen%2Fcoroutine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5152f486a88ea106a820387d7d807ea99962af/src%2Flibgreen%2Fcoroutine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcoroutine.rs?ref=bf5152f486a88ea106a820387d7d807ea99962af", "patch": "@@ -49,7 +49,7 @@ impl Coroutine {\n \n     pub fn empty() -> Coroutine {\n         Coroutine {\n-            current_stack_segment: Stack::new(0),\n+            current_stack_segment: unsafe { Stack::dummy_stack() },\n             saved_context: Context::empty()\n         }\n     }"}, {"sha": "84c1572ad3535ef0f099743aa34162fca35eb08f", "filename": "src/libgreen/stack.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf5152f486a88ea106a820387d7d807ea99962af/src%2Flibgreen%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5152f486a88ea106a820387d7d807ea99962af/src%2Flibgreen%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fstack.rs?ref=bf5152f486a88ea106a820387d7d807ea99962af", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n use std::rt::env::max_cached_stacks;\n-use std::os::{errno, page_size, MemoryMap, MapReadable, MapWritable, MapNonStandardFlags};\n+use std::os::{errno, page_size, MemoryMap, MapReadable, MapWritable,\n+    MapNonStandardFlags, MapVirtual};\n #[cfg(not(windows))]\n use std::libc::{MAP_STACK, MAP_PRIVATE, MAP_ANON};\n use std::libc::{c_uint, c_int, c_void, uintptr_t};\n@@ -33,6 +34,8 @@ static STACK_FLAGS: c_int = MAP_PRIVATE | MAP_ANON;\n static STACK_FLAGS: c_int = 0;\n \n impl Stack {\n+    /// Allocate a new stack of `size`. If size = 0, this will fail. Use\n+    /// `dummy_stack` if you want a zero-sized stack.\n     pub fn new(size: uint) -> Stack {\n         // Map in a stack. Eventually we might be able to handle stack allocation failure, which\n         // would fail to spawn the task. But there's not many sensible things to do on OOM.\n@@ -62,12 +65,21 @@ impl Stack {\n         return stk;\n     }\n \n+    /// Create a 0-length stack which starts (and ends) at 0.\n+    pub unsafe fn dummy_stack() -> Stack {\n+        Stack {\n+            buf: MemoryMap { data: 0 as *mut u8, len: 0, kind: MapVirtual },\n+            min_size: 0,\n+            valgrind_id: 0\n+        }\n+    }\n+\n     /// Point to the low end of the allocated stack\n     pub fn start(&self) -> *uint {\n         self.buf.data as *uint\n     }\n \n-    /// Point one word beyond the high end of the allocated stack\n+    /// Point one uint beyond the high end of the allocated stack\n     pub fn end(&self) -> *uint {\n         unsafe {\n             self.buf.data.offset(self.buf.len as int) as *uint"}, {"sha": "004031937b0da03936b8568fe76b2e345a5ff9ef", "filename": "src/libstd/os.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bf5152f486a88ea106a820387d7d807ea99962af/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5152f486a88ea106a820387d7d807ea99962af/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=bf5152f486a88ea106a820387d7d807ea99962af", "patch": "@@ -891,6 +891,10 @@ pub enum MapError {\n     /// If using `MapAddr`, the address + `min_len` was outside of the process's address space. If\n     /// using `MapFd`, the target of the fd didn't have enough resources to fulfill the request.\n     ErrNoMem,\n+    /// A zero-length map was requested. This is invalid according to\n+    /// [POSIX](http://pubs.opengroup.org/onlinepubs/9699919799/functions/mmap.html). Not all\n+    /// platforms obey this, but this wrapper does.\n+    ErrZeroLength,\n     /// Unrecognized error. The inner value is the unrecognized errno.\n     ErrUnknown(int),\n     /// ## The following are win32-specific\n@@ -922,6 +926,7 @@ impl fmt::Default for MapError {\n             ErrUnsupProt => \"Protection mode unsupported\",\n             ErrUnsupOffset => \"Offset in virtual memory mode is unsupported\",\n             ErrAlreadyExists => \"File mapping for specified file already exists\",\n+            ErrZeroLength => \"Zero-length mapping not allowed\",\n             ErrUnknown(code) => { write!(out.buf, \"Unknown error = {}\", code); return },\n             ErrVirtualAlloc(code) => { write!(out.buf, \"VirtualAlloc failure = {}\", code); return },\n             ErrCreateFileMappingW(code) => {\n@@ -939,10 +944,14 @@ impl fmt::Default for MapError {\n \n #[cfg(unix)]\n impl MemoryMap {\n-    /// Create a new mapping with the given `options`, at least `min_len` bytes long.\n+    /// Create a new mapping with the given `options`, at least `min_len` bytes long. `min_len`\n+    /// must be greater than zero; see the note on `ErrZeroLength`.\n     pub fn new(min_len: uint, options: &[MapOption]) -> Result<MemoryMap, MapError> {\n         use libc::off_t;\n \n+        if min_len == 0 {\n+            return Err(ErrZeroLength)\n+        }\n         let mut addr: *u8 = ptr::null();\n         let mut prot = 0;\n         let mut flags = libc::MAP_PRIVATE;\n@@ -1005,6 +1014,8 @@ impl MemoryMap {\n impl Drop for MemoryMap {\n     /// Unmap the mapping. Fails the task if `munmap` fails.\n     fn drop(&mut self) {\n+        if self.len == 0 { /* workaround for dummy_stack */ return; }\n+\n         unsafe {\n             match libc::munmap(self.data as *c_void, self.len as libc::size_t) {\n                 0 => (),\n@@ -1442,7 +1453,7 @@ mod tests {\n             os::MapWritable\n         ]) {\n             Ok(chunk) => chunk,\n-            Err(msg) => fail!(msg.to_str())\n+            Err(msg) => fail!(\"{}\", msg)\n         };\n         assert!(chunk.len >= 16);\n "}]}