{"sha": "19c7885c2a197be4a14fb6ca4dcd8734ce17d399", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5Yzc4ODVjMmExOTdiZTRhMTRmYjZjYTRkY2Q4NzM0Y2UxN2QzOTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-22T10:23:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-22T10:23:57Z"}, "message": "Auto merge of #3570 - muth:master, r=phansch\n\npanic at map_unit_fn.rs:202 for map() without args\n\nmap_unit_fn.rs accessed map() arguments before type check which ensures type is Option or Result.\n\nBoiled it down to a simple test case.\n\nFWIW: Found this panic when running clippy against code which used a gtk::Window's map() fn inherited from gtk::WidgetExt   http://gtk-rs.org/docs/gtk/trait.WidgetExt.html#tymethod.map", "tree": {"sha": "4c899400c2701fb04f284b68d39136c7ac8f484e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c899400c2701fb04f284b68d39136c7ac8f484e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19c7885c2a197be4a14fb6ca4dcd8734ce17d399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19c7885c2a197be4a14fb6ca4dcd8734ce17d399", "html_url": "https://github.com/rust-lang/rust/commit/19c7885c2a197be4a14fb6ca4dcd8734ce17d399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19c7885c2a197be4a14fb6ca4dcd8734ce17d399/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c747c752ba6255848f29826bd8d46d4a075f18", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c747c752ba6255848f29826bd8d46d4a075f18", "html_url": "https://github.com/rust-lang/rust/commit/d3c747c752ba6255848f29826bd8d46d4a075f18"}, {"sha": "d395d45ca753099c2ff952604169a1602eae898a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d395d45ca753099c2ff952604169a1602eae898a", "html_url": "https://github.com/rust-lang/rust/commit/d395d45ca753099c2ff952604169a1602eae898a"}], "stats": {"total": 232, "additions": 21, "deletions": 211}, "files": [{"sha": "e5c17beb4041059c2bc595ee7ef19af47843a200", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19c7885c2a197be4a14fb6ca4dcd8734ce17d399/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c7885c2a197be4a14fb6ca4dcd8734ce17d399/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=19c7885c2a197be4a14fb6ca4dcd8734ce17d399", "patch": "@@ -199,7 +199,6 @@ fn suggestion_msg(function_type: &str, map_type: &str) -> String {\n \n fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr, map_args: &[hir::Expr]) {\n     let var_arg = &map_args[0];\n-    let fn_arg = &map_args[1];\n \n     let (map_type, variant, lint) = if match_type(cx, cx.tables.expr_ty(var_arg), &paths::OPTION) {\n         (\"Option\", \"Some\", OPTION_MAP_UNIT_FN)\n@@ -208,6 +207,7 @@ fn lint_map_unit_fn(cx: &LateContext<'_, '_>, stmt: &hir::Stmt, expr: &hir::Expr\n     } else {\n         return;\n     };\n+    let fn_arg = &map_args[1];\n \n     if is_unit_function(cx, fn_arg) {\n         let msg = suggestion_msg(\"function\", map_type);"}, {"sha": "1d203a147bae4448bf72a1c592493d069b0d54c4", "filename": "tests/ui/map_unit_fn.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/19c7885c2a197be4a14fb6ca4dcd8734ce17d399/tests%2Fui%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c7885c2a197be4a14fb6ca4dcd8734ce17d399/tests%2Fui%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unit_fn.rs?ref=19c7885c2a197be4a14fb6ca4dcd8734ce17d399", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+struct Mappable {}\n+\n+impl Mappable {\n+    pub fn map(&self) {}\n+}\n+\n+fn main() {\n+    let m = Mappable {};\n+    m.map();\n+}"}, {"sha": "c4ee0ce9238047830cce9f17dd8a34b81da5d764", "filename": "tests/ui/map_unit_fn.stderr", "status": "removed", "additions": 0, "deletions": 210, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/d3c747c752ba6255848f29826bd8d46d4a075f18/tests%2Fui%2Fmap_unit_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c747c752ba6255848f29826bd8d46d4a075f18/tests%2Fui%2Fmap_unit_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unit_fn.stderr?ref=d3c747c752ba6255848f29826bd8d46d4a075f18", "patch": "@@ -1,210 +0,0 @@\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/map_unit_fn.rs:33:5\n-   |\n-33 |     x.field.map(do_nothing);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(x_field) = x.field { do_nothing(...) }`\n-   |\n-   = note: `-D option-map-unit-fn` implied by `-D warnings`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/map_unit_fn.rs:35:5\n-   |\n-35 |     x.field.map(do_nothing);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(x_field) = x.field { do_nothing(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/map_unit_fn.rs:37:5\n-   |\n-37 |     x.field.map(diverge);\n-   |     ^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(x_field) = x.field { diverge(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:43:5\n-   |\n-43 |     x.field.map(|value| x.do_option_nothing(value + captured));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { x.do_option_nothing(value + captured) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:45:5\n-   |\n-45 |     x.field.map(|value| { x.do_option_plus_one(value + captured); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { x.do_option_plus_one(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:48:5\n-   |\n-48 |     x.field.map(|value| do_nothing(value + captured));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:50:5\n-   |\n-50 |     x.field.map(|value| { do_nothing(value + captured) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:52:5\n-   |\n-52 |     x.field.map(|value| { do_nothing(value + captured); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:54:5\n-   |\n-54 |     x.field.map(|value| { { do_nothing(value + captured); } });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:57:5\n-   |\n-57 |     x.field.map(|value| diverge(value + captured));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:59:5\n-   |\n-59 |     x.field.map(|value| { diverge(value + captured) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:61:5\n-   |\n-61 |     x.field.map(|value| { diverge(value + captured); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:63:5\n-   |\n-63 |     x.field.map(|value| { { diverge(value + captured); } });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:68:5\n-   |\n-68 |     x.field.map(|value| { let y = plus_one(value + captured); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { let y = plus_one(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:70:5\n-   |\n-70 |     x.field.map(|value| { plus_one(value + captured); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:72:5\n-   |\n-72 |     x.field.map(|value| { { plus_one(value + captured); } });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:75:5\n-   |\n-75 |     x.field.map(|ref value| { do_nothing(value + captured) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(ref value) = x.field { do_nothing(value + captured) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:78:5\n-   |\n-78 |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:80:5\n-   |\n-80 |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:84:5\n-   |\n-84 |        x.field.map(|value| {\n-   |   _____^\n-   |  |_____|\n-   | ||\n-85 | ||         do_nothing(value);\n-86 | ||         do_nothing(value)\n-87 | ||     });\n-   | ||______^- help: try this: `if let Some(value) = x.field { ... }`\n-   | |_______|\n-   | \n-\n-error: called `map(f)` on an Option value where `f` is a unit closure\n-  --> $DIR/map_unit_fn.rs:88:5\n-   |\n-88 |     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(value) = x.field { ... }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/map_unit_fn.rs:91:5\n-   |\n-91 |     Some(42).map(diverge);\n-   |     ^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_) = Some(42) { diverge(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/map_unit_fn.rs:92:5\n-   |\n-92 |     \"12\".parse::<i32>().ok().map(diverge);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_) = \"12\".parse::<i32>().ok() { diverge(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/map_unit_fn.rs:93:5\n-   |\n-93 |     Some(plus_one(1)).map(do_nothing);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_) = Some(plus_one(1)) { do_nothing(...) }`\n-\n-error: called `map(f)` on an Option value where `f` is a unit function\n-  --> $DIR/map_unit_fn.rs:97:5\n-   |\n-97 |     y.map(do_nothing);\n-   |     ^^^^^^^^^^^^^^^^^-\n-   |     |\n-   |     help: try this: `if let Some(_y) = y { do_nothing(...) }`\n-\n-error: aborting due to 25 previous errors\n-"}]}