{"sha": "8509dbbafe1a08ea5cee367bb1599e0bb09a2a2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MDlkYmJhZmUxYTA4ZWE1Y2VlMzY3YmIxNTk5ZTBiYjA5YTJhMmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-09-16T10:08:26Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-09-16T10:08:26Z"}, "message": "validation: allow undef integers and raw pointers, as a crude work-around", "tree": {"sha": "12860dcfc6e3b0214b4326d85c34b1e6a8b35e08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12860dcfc6e3b0214b4326d85c34b1e6a8b35e08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8509dbbafe1a08ea5cee367bb1599e0bb09a2a2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8509dbbafe1a08ea5cee367bb1599e0bb09a2a2d", "html_url": "https://github.com/rust-lang/rust/commit/8509dbbafe1a08ea5cee367bb1599e0bb09a2a2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8509dbbafe1a08ea5cee367bb1599e0bb09a2a2d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ea6663440b1a26396caf328aa36497224799abf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ea6663440b1a26396caf328aa36497224799abf", "html_url": "https://github.com/rust-lang/rust/commit/2ea6663440b1a26396caf328aa36497224799abf"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "9be9341ee239b9477045b1ec461bcaa7974ef644", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8509dbbafe1a08ea5cee367bb1599e0bb09a2a2d/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8509dbbafe1a08ea5cee367bb1599e0bb09a2a2d/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=8509dbbafe1a08ea5cee367bb1599e0bb09a2a2d", "patch": "@@ -493,26 +493,19 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             match query.ty.sty {\n                 TyInt(_) | TyUint(_) | TyRawPtr(_) => {\n                     if mode.acquiring() {\n-                        // Make sure there is no undef\n+                        // Make sure we can read this.\n                         let val = self.read_lvalue(query.lval.1)?;\n-                        // This is essentially value_to_primval with support for fat pointers\n-                        let has_undef = match self.follow_by_ref_value(val, query.ty)? {\n-                            Value::ByRef { .. } => bug!(\"follow_by_ref_value can't result in `ByRef`\"),\n-                            Value::ByVal(primval) => primval.is_undef(),\n-                            Value::ByValPair(primval1, primval2) =>\n-                                primval1.is_undef() || primval2.is_undef()\n-                        };\n-                        if has_undef {\n-                            return err!(ReadUndefBytes);\n-                        }\n+                        self.follow_by_ref_value(val, query.ty)?;\n+                        // FIXME: It would be great to rule out Undef here, but that doesn't actually work.\n+                        // Passing around undef data is a thing that e.g. Vec::extend_with does.\n                     }\n                     Ok(())\n                 }\n                 TyBool | TyFloat(_) | TyChar => {\n                     if mode.acquiring() {\n                         let val = self.read_lvalue(query.lval.1)?;\n                         let val = self.value_to_primval(ValTy { value: val, ty: query.ty })?;\n-                        let _val = val.to_bytes()?;\n+                        val.to_bytes()?;\n                         // TODO: Check if these are valid bool/float/codepoint/UTF-8\n                     }\n                     Ok(())"}]}