{"sha": "ec40181913b89006a0f071be75c109162de02fd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNDAxODE5MTNiODkwMDZhMGYwNzFiZTc1YzEwOTE2MmRlMDJmZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-13T06:33:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-13T06:33:52Z"}, "message": "Auto merge of #77639 - jagill:stabilize-slice_partition_at_index, r=Amanieu\n\nStabilize slice_partition_at_index\n\nThis stabilizes slice_partition_at_index, including renaming `partition_at_index*` -> `select_nth_unstable*`.\n\nCloses #55300\n\nr? `@Amanieu`", "tree": {"sha": "db6a2314234a199c3aa658f43b18a54529257252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db6a2314234a199c3aa658f43b18a54529257252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec40181913b89006a0f071be75c109162de02fd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec40181913b89006a0f071be75c109162de02fd2", "html_url": "https://github.com/rust-lang/rust/commit/ec40181913b89006a0f071be75c109162de02fd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec40181913b89006a0f071be75c109162de02fd2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d63435aaef3bdfec37ddf957b3f6e66e771ee2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c", "html_url": "https://github.com/rust-lang/rust/commit/4d63435aaef3bdfec37ddf957b3f6e66e771ee2c"}, {"sha": "01ac5a97c90c26ac35ca9d65f685dd6701edfa3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/01ac5a97c90c26ac35ca9d65f685dd6701edfa3b", "html_url": "https://github.com/rust-lang/rust/commit/01ac5a97c90c26ac35ca9d65f685dd6701edfa3b"}], "stats": {"total": 100, "additions": 69, "deletions": 31}, "files": [{"sha": "349c2cde274dd9b93ab0429dc70619331010eafe", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 53, "deletions": 15, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ec40181913b89006a0f071be75c109162de02fd2/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec40181913b89006a0f071be75c109162de02fd2/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=ec40181913b89006a0f071be75c109162de02fd2", "patch": "@@ -2034,6 +2034,50 @@ impl<T> [T] {\n         sort::quicksort(self, |a, b| f(a).lt(&f(b)));\n     }\n \n+    /// Reorder the slice such that the element at `index` is at its final sorted position.\n+    #[unstable(feature = \"slice_partition_at_index\", issue = \"55300\")]\n+    #[rustc_deprecated(since = \"1.49.0\", reason = \"use the select_nth_unstable() instead\")]\n+    #[inline]\n+    pub fn partition_at_index(&mut self, index: usize) -> (&mut [T], &mut T, &mut [T])\n+    where\n+        T: Ord,\n+    {\n+        self.select_nth_unstable(index)\n+    }\n+\n+    /// Reorder the slice with a comparator function such that the element at `index` is at its\n+    /// final sorted position.\n+    #[unstable(feature = \"slice_partition_at_index\", issue = \"55300\")]\n+    #[rustc_deprecated(since = \"1.49.0\", reason = \"use select_nth_unstable_by() instead\")]\n+    #[inline]\n+    pub fn partition_at_index_by<F>(\n+        &mut self,\n+        index: usize,\n+        compare: F,\n+    ) -> (&mut [T], &mut T, &mut [T])\n+    where\n+        F: FnMut(&T, &T) -> Ordering,\n+    {\n+        self.select_nth_unstable_by(index, compare)\n+    }\n+\n+    /// Reorder the slice with a key extraction function such that the element at `index` is at its\n+    /// final sorted position.\n+    #[unstable(feature = \"slice_partition_at_index\", issue = \"55300\")]\n+    #[rustc_deprecated(since = \"1.49.0\", reason = \"use the select_nth_unstable_by_key() instead\")]\n+    #[inline]\n+    pub fn partition_at_index_by_key<K, F>(\n+        &mut self,\n+        index: usize,\n+        f: F,\n+    ) -> (&mut [T], &mut T, &mut [T])\n+    where\n+        F: FnMut(&T) -> K,\n+        K: Ord,\n+    {\n+        self.select_nth_unstable_by_key(index, f)\n+    }\n+\n     /// Reorder the slice such that the element at `index` is at its final sorted position.\n     ///\n     /// This reordering has the additional property that any value at position `i < index` will be\n@@ -2058,12 +2102,10 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(slice_partition_at_index)]\n-    ///\n     /// let mut v = [-5i32, 4, 1, -3, 2];\n     ///\n     /// // Find the median\n-    /// v.partition_at_index(2);\n+    /// v.select_nth_unstable(2);\n     ///\n     /// // We are only guaranteed the slice will be one of the following, based on the way we sort\n     /// // about the specified index.\n@@ -2072,9 +2114,9 @@ impl<T> [T] {\n     ///         v == [-3, -5, 1, 4, 2] ||\n     ///         v == [-5, -3, 1, 4, 2]);\n     /// ```\n-    #[unstable(feature = \"slice_partition_at_index\", issue = \"55300\")]\n+    #[stable(feature = \"slice_select_nth_unstable\", since = \"1.49.0\")]\n     #[inline]\n-    pub fn partition_at_index(&mut self, index: usize) -> (&mut [T], &mut T, &mut [T])\n+    pub fn select_nth_unstable(&mut self, index: usize) -> (&mut [T], &mut T, &mut [T])\n     where\n         T: Ord,\n     {\n@@ -2108,12 +2150,10 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(slice_partition_at_index)]\n-    ///\n     /// let mut v = [-5i32, 4, 1, -3, 2];\n     ///\n     /// // Find the median as if the slice were sorted in descending order.\n-    /// v.partition_at_index_by(2, |a, b| b.cmp(a));\n+    /// v.select_nth_unstable_by(2, |a, b| b.cmp(a));\n     ///\n     /// // We are only guaranteed the slice will be one of the following, based on the way we sort\n     /// // about the specified index.\n@@ -2122,9 +2162,9 @@ impl<T> [T] {\n     ///         v == [4, 2, 1, -5, -3] ||\n     ///         v == [4, 2, 1, -3, -5]);\n     /// ```\n-    #[unstable(feature = \"slice_partition_at_index\", issue = \"55300\")]\n+    #[stable(feature = \"slice_select_nth_unstable\", since = \"1.49.0\")]\n     #[inline]\n-    pub fn partition_at_index_by<F>(\n+    pub fn select_nth_unstable_by<F>(\n         &mut self,\n         index: usize,\n         mut compare: F,\n@@ -2162,12 +2202,10 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(slice_partition_at_index)]\n-    ///\n     /// let mut v = [-5i32, 4, 1, -3, 2];\n     ///\n     /// // Return the median as if the array were sorted according to absolute value.\n-    /// v.partition_at_index_by_key(2, |a| a.abs());\n+    /// v.select_nth_unstable_by_key(2, |a| a.abs());\n     ///\n     /// // We are only guaranteed the slice will be one of the following, based on the way we sort\n     /// // about the specified index.\n@@ -2176,9 +2214,9 @@ impl<T> [T] {\n     ///         v == [2, 1, -3, 4, -5] ||\n     ///         v == [2, 1, -3, -5, 4]);\n     /// ```\n-    #[unstable(feature = \"slice_partition_at_index\", issue = \"55300\")]\n+    #[stable(feature = \"slice_select_nth_unstable\", since = \"1.49.0\")]\n     #[inline]\n-    pub fn partition_at_index_by_key<K, F>(\n+    pub fn select_nth_unstable_by_key<K, F>(\n         &mut self,\n         index: usize,\n         mut f: F,"}, {"sha": "ac5c9353ccb468568d0e201c4d7934e031740c14", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ec40181913b89006a0f071be75c109162de02fd2/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec40181913b89006a0f071be75c109162de02fd2/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=ec40181913b89006a0f071be75c109162de02fd2", "patch": "@@ -1571,7 +1571,7 @@ fn sort_unstable() {\n #[test]\n #[cfg(not(target_arch = \"wasm32\"))]\n #[cfg_attr(miri, ignore)] // Miri is too slow\n-fn partition_at_index() {\n+fn select_nth_unstable() {\n     use core::cmp::Ordering::{Equal, Greater, Less};\n     use rand::rngs::StdRng;\n     use rand::seq::SliceRandom;\n@@ -1597,7 +1597,7 @@ fn partition_at_index() {\n                 // Sort in default order.\n                 for pivot in 0..len {\n                     let mut v = orig.clone();\n-                    v.partition_at_index(pivot);\n+                    v.select_nth_unstable(pivot);\n \n                     assert_eq!(v_sorted[pivot], v[pivot]);\n                     for i in 0..pivot {\n@@ -1610,7 +1610,7 @@ fn partition_at_index() {\n                 // Sort in ascending order.\n                 for pivot in 0..len {\n                     let mut v = orig.clone();\n-                    let (left, pivot, right) = v.partition_at_index_by(pivot, |a, b| a.cmp(b));\n+                    let (left, pivot, right) = v.select_nth_unstable_by(pivot, |a, b| a.cmp(b));\n \n                     assert_eq!(left.len() + right.len(), len - 1);\n \n@@ -1633,7 +1633,7 @@ fn partition_at_index() {\n \n                 for pivot in 0..len {\n                     let mut v = orig.clone();\n-                    v.partition_at_index_by(pivot, sort_descending_comparator);\n+                    v.select_nth_unstable_by(pivot, sort_descending_comparator);\n \n                     assert_eq!(v_sorted_descending[pivot], v[pivot]);\n                     for i in 0..pivot {\n@@ -1654,36 +1654,36 @@ fn partition_at_index() {\n     }\n \n     for pivot in 0..v.len() {\n-        v.partition_at_index_by(pivot, |_, _| *[Less, Equal, Greater].choose(&mut rng).unwrap());\n+        v.select_nth_unstable_by(pivot, |_, _| *[Less, Equal, Greater].choose(&mut rng).unwrap());\n         v.sort();\n         for i in 0..v.len() {\n             assert_eq!(v[i], i as i32);\n         }\n     }\n \n     // Should not panic.\n-    [(); 10].partition_at_index(0);\n-    [(); 10].partition_at_index(5);\n-    [(); 10].partition_at_index(9);\n-    [(); 100].partition_at_index(0);\n-    [(); 100].partition_at_index(50);\n-    [(); 100].partition_at_index(99);\n+    [(); 10].select_nth_unstable(0);\n+    [(); 10].select_nth_unstable(5);\n+    [(); 10].select_nth_unstable(9);\n+    [(); 100].select_nth_unstable(0);\n+    [(); 100].select_nth_unstable(50);\n+    [(); 100].select_nth_unstable(99);\n \n     let mut v = [0xDEADBEEFu64];\n-    v.partition_at_index(0);\n+    v.select_nth_unstable(0);\n     assert!(v == [0xDEADBEEF]);\n }\n \n #[test]\n #[should_panic(expected = \"index 0 greater than length of slice\")]\n-fn partition_at_index_zero_length() {\n-    [0i32; 0].partition_at_index(0);\n+fn select_nth_unstable_zero_length() {\n+    [0i32; 0].select_nth_unstable(0);\n }\n \n #[test]\n #[should_panic(expected = \"index 20 greater than length of slice\")]\n-fn partition_at_index_past_length() {\n-    [0i32; 10].partition_at_index(20);\n+fn select_nth_unstable_past_length() {\n+    [0i32; 10].select_nth_unstable(20);\n }\n \n pub mod memchr {"}]}