{"sha": "c72be0f65a20c02dde25be66fa0a78c755a55530", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MmJlMGY2NWEyMGMwMmRkZTI1YmU2NmZhMGE3OGM3NTVhNTU1MzA=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-07-06T17:43:34Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-07-06T17:43:34Z"}, "message": "rustfmt", "tree": {"sha": "136a1575061ff916eb9ba2f203b28cbdcf5a2eff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/136a1575061ff916eb9ba2f203b28cbdcf5a2eff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c72be0f65a20c02dde25be66fa0a78c755a55530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c72be0f65a20c02dde25be66fa0a78c755a55530", "html_url": "https://github.com/rust-lang/rust/commit/c72be0f65a20c02dde25be66fa0a78c755a55530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c72be0f65a20c02dde25be66fa0a78c755a55530/comments", "author": null, "committer": null, "parents": [{"sha": "adcc02ed8ac1cdf040719d5b32574fb6fccb674a", "url": "https://api.github.com/repos/rust-lang/rust/commits/adcc02ed8ac1cdf040719d5b32574fb6fccb674a", "html_url": "https://github.com/rust-lang/rust/commit/adcc02ed8ac1cdf040719d5b32574fb6fccb674a"}], "stats": {"total": 4, "additions": 1, "deletions": 3}, "files": [{"sha": "02074c79b41e4f509085f186bddebfc1bc4023aa", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c72be0f65a20c02dde25be66fa0a78c755a55530/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72be0f65a20c02dde25be66fa0a78c755a55530/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=c72be0f65a20c02dde25be66fa0a78c755a55530", "patch": "@@ -483,9 +483,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Loops {\n         // check for never_loop\n         if let ExprKind::Loop(ref block, _, _) = expr.node {\n             match never_loop_block(block, expr.hir_id) {\n-                NeverLoopResult::AlwaysBreak => {\n-                    span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\")\n-                },\n+                NeverLoopResult::AlwaysBreak => span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\"),\n                 NeverLoopResult::MayContinueMainLoop | NeverLoopResult::Otherwise => (),\n             }\n         }"}]}