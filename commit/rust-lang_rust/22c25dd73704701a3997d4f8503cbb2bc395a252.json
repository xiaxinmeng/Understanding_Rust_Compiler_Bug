{"sha": "22c25dd73704701a3997d4f8503cbb2bc395a252", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYzI1ZGQ3MzcwNDcwMWEzOTk3ZDRmODUwM2NiYjJiYzM5NWEyNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-20T11:13:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-20T11:13:24Z"}, "message": "Auto merge of #50841 - oli-obk:promote_errors_to_panics, r=eddyb\n\nDon't lint numeric overflows in promoteds in release mode\n\nr? @eddyb\n\nmitigates #50814", "tree": {"sha": "3cf44001c6f9bfbe88f4528b9950a408f6203815", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cf44001c6f9bfbe88f4528b9950a408f6203815"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22c25dd73704701a3997d4f8503cbb2bc395a252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22c25dd73704701a3997d4f8503cbb2bc395a252", "html_url": "https://github.com/rust-lang/rust/commit/22c25dd73704701a3997d4f8503cbb2bc395a252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22c25dd73704701a3997d4f8503cbb2bc395a252/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c26e2e3fba61f18caca8bd43c57e1f1d799f07b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c26e2e3fba61f18caca8bd43c57e1f1d799f07b", "html_url": "https://github.com/rust-lang/rust/commit/4c26e2e3fba61f18caca8bd43c57e1f1d799f07b"}, {"sha": "8753d0f12f8fa44b5ace568c03b9bf59f7863e25", "url": "https://api.github.com/repos/rust-lang/rust/commits/8753d0f12f8fa44b5ace568c03b9bf59f7863e25", "html_url": "https://github.com/rust-lang/rust/commit/8753d0f12f8fa44b5ace568c03b9bf59f7863e25"}], "stats": {"total": 168, "additions": 134, "deletions": 34}, "files": [{"sha": "e096b5495e9a756750388730835d7d8b822db71e", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=22c25dd73704701a3997d4f8503cbb2bc395a252", "patch": "@@ -413,10 +413,10 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                     .unwrap_or_else(|err| {\n                         match constant.literal {\n                             mir::Literal::Promoted { .. } => {\n-                                // don't report errors inside promoteds, just warnings.\n+                                // FIXME: generate a panic here\n                             },\n                             mir::Literal::Value { .. } => {\n-                                err.report(bx.tcx(), constant.span, \"const operand\")\n+                                err.report(bx.tcx(), constant.span, \"const operand\");\n                             },\n                         }\n                         // We've errored, so we don't have to produce working code."}, {"sha": "97ea90bb4bf96b6142752ab442a5c31e936dbd4b", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=22c25dd73704701a3997d4f8503cbb2bc395a252", "patch": "@@ -521,21 +521,13 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n             BinaryOp(bin_op, ref left, ref right) => {\n                 let left = self.eval_operand(left)?;\n                 let right = self.eval_operand(right)?;\n-                if self.intrinsic_overflowing(\n+                self.intrinsic_overflowing(\n                     bin_op,\n                     left,\n                     right,\n                     dest,\n                     dest_ty,\n-                )?\n-                {\n-                    // There was an overflow in an unchecked binop.  Right now, we consider this an error and bail out.\n-                    // The rationale is that the reason rustc emits unchecked binops in release mode (vs. the checked binops\n-                    // it emits in debug mode) is performance, but it doesn't cost us any performance in miri.\n-                    // If, however, the compiler ever starts transforming unchecked intrinsics into unchecked binops,\n-                    // we have to go back to just ignoring the overflow here.\n-                    return err!(Overflow(bin_op));\n-                }\n+                )?;\n             }\n \n             CheckedBinaryOp(bin_op, ref left, ref right) => {"}, {"sha": "385fd5092328b89184bfb973a30584464219edb7", "filename": "src/test/run-fail/promoted_div_by_zero.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Ftest%2Frun-fail%2Fpromoted_div_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Ftest%2Frun-fail%2Fpromoted_div_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpromoted_div_by_zero.rs?ref=22c25dd73704701a3997d4f8503cbb2bc395a252", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(const_err)]\n+\n+// error-pattern: attempt to divide by zero\n+\n+fn main() {\n+    let x = &(1 / (1 - 1));\n+}"}, {"sha": "0e1b0117a8c521b410773b412f32926d6ebd7bae", "filename": "src/test/run-fail/promoted_overflow.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Ftest%2Frun-fail%2Fpromoted_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Ftest%2Frun-fail%2Fpromoted_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fpromoted_overflow.rs?ref=22c25dd73704701a3997d4f8503cbb2bc395a252", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(const_err)]\n+\n+// error-pattern: overflow\n+// compile-flags: -C overflow-checks=yes\n+\n+fn main() {\n+    let x: &'static u32 = &(0u32 - 1);\n+}"}, {"sha": "6b2f1c6d3c8a282c7fc817332be1396de87f549e", "filename": "src/test/run-pass/promoted_overflow_opt.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Ftest%2Frun-pass%2Fpromoted_overflow_opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Ftest%2Frun-pass%2Fpromoted_overflow_opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpromoted_overflow_opt.rs?ref=22c25dd73704701a3997d4f8503cbb2bc395a252", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(const_err)]\n+\n+// compile-flags: -O\n+\n+fn main() {\n+    let x = &(0u32 - 1);\n+    assert_eq!(*x, u32::max_value())\n+}"}, {"sha": "5ced2c9dd8f59861968732026fe866bdcf3e7adf", "filename": "src/test/ui/const-eval/promoted_const_fn_fail.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.rs?ref=22c25dd73704701a3997d4f8503cbb2bc395a252", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn)]\n+\n+#![deny(const_err)]\n+\n+union Bar {\n+    a: &'static u8,\n+    b: usize,\n+}\n+\n+const fn bar() -> u8 {\n+    unsafe {\n+        // this will error as long as this test\n+        // is run on a system whose pointers need more\n+        // than 8 bits\n+        Bar { a: &42 }.b as u8\n+        //~^ constant evaluation error\n+        //~| constant evaluation error\n+    }\n+}\n+\n+fn main() {\n+    // FIXME(oli-obk): this should compile but panic at runtime\n+    // if we change the `const_err` lint to allow this will actually compile, but then\n+    // continue with undefined values.\n+    let x: &'static u8 = &(bar() + 1);\n+    let y = *x;\n+    unreachable!();\n+}"}, {"sha": "f910705bb7b3ce02cabd42ef4fccbdc1fa6e75e5", "filename": "src/test/ui/const-eval/promoted_const_fn_fail.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_const_fn_fail.stderr?ref=22c25dd73704701a3997d4f8503cbb2bc395a252", "patch": "@@ -0,0 +1,31 @@\n+error: constant evaluation error\n+  --> $DIR/promoted_const_fn_fail.rs:25:9\n+   |\n+LL |         Bar { a: &42 }.b as u8\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ a raw memory access tried to access part of a pointer value as raw bytes\n+   |\n+note: lint level defined here\n+  --> $DIR/promoted_const_fn_fail.rs:13:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+note: inside call to `bar`\n+  --> $DIR/promoted_const_fn_fail.rs:35:28\n+   |\n+LL |     let x: &'static u8 = &(bar() + 1);\n+   |                            ^^^^^\n+\n+error: constant evaluation error\n+  --> $DIR/promoted_const_fn_fail.rs:25:9\n+   |\n+LL |         Bar { a: &42 }.b as u8\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ a raw memory access tried to access part of a pointer value as raw bytes\n+   |\n+note: inside call to `bar`\n+  --> $DIR/promoted_const_fn_fail.rs:35:28\n+   |\n+LL |     let x: &'static u8 = &(bar() + 1);\n+   |                            ^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a39afb9bdd4a477e3f14c5a741ee46e8182fb0c1", "filename": "src/test/ui/const-eval/promoted_errors.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.rs?ref=22c25dd73704701a3997d4f8503cbb2bc395a252", "patch": "@@ -14,8 +14,6 @@\n // compile-flags: -O\n fn main() {\n     println!(\"{}\", 0u32 - 1);\n-    //~^ WARN const_err\n-    //~| WARN const_err\n     let _x = 0u32 - 1;\n     //~^ WARN const_err\n     println!(\"{}\", 1/(1-1));"}, {"sha": "683ee5375fbf6eed3c56e8ad5787d86de59fb359", "filename": "src/test/ui/const-eval/promoted_errors.stderr", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22c25dd73704701a3997d4f8503cbb2bc395a252/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fpromoted_errors.stderr?ref=22c25dd73704701a3997d4f8503cbb2bc395a252", "patch": "@@ -1,53 +1,41 @@\n warning: constant evaluation error\n-  --> $DIR/promoted_errors.rs:16:20\n+  --> $DIR/promoted_errors.rs:17:14\n    |\n-LL |     println!(\"{}\", 0u32 - 1);\n-   |                    ^^^^^^^^ attempt to subtract with overflow\n+LL |     let _x = 0u32 - 1;\n+   |              ^^^^^^^^ attempt to subtract with overflow\n    |\n note: lint level defined here\n   --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n-warning: constant evaluation error\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 0u32 - 1);\n-   |                    ^^^^^^^^ attempt to subtract with overflow\n-\n-warning: constant evaluation error\n-  --> $DIR/promoted_errors.rs:19:14\n-   |\n-LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to subtract with overflow\n-\n warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:21:20\n+  --> $DIR/promoted_errors.rs:19:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^\n \n warning: constant evaluation error\n-  --> $DIR/promoted_errors.rs:21:20\n+  --> $DIR/promoted_errors.rs:19:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^ attempt to divide by zero\n \n warning: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:24:14\n+  --> $DIR/promoted_errors.rs:22:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^\n \n warning: constant evaluation error\n-  --> $DIR/promoted_errors.rs:24:14\n+  --> $DIR/promoted_errors.rs:22:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^ attempt to divide by zero\n \n warning: constant evaluation error\n-  --> $DIR/promoted_errors.rs:27:20\n+  --> $DIR/promoted_errors.rs:25:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero"}]}