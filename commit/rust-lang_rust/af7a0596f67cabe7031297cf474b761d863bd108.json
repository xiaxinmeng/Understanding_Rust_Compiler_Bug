{"sha": "af7a0596f67cabe7031297cf474b761d863bd108", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmN2EwNTk2ZjY3Y2FiZTcwMzEyOTdjZjQ3NGI3NjFkODYzYmQxMDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-28T13:25:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-28T13:25:56Z"}, "message": "remove useless test hooks", "tree": {"sha": "de4c214620f974b0aea58e4a55067e7f2e51fa5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de4c214620f974b0aea58e4a55067e7f2e51fa5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af7a0596f67cabe7031297cf474b761d863bd108", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af7a0596f67cabe7031297cf474b761d863bd108", "html_url": "https://github.com/rust-lang/rust/commit/af7a0596f67cabe7031297cf474b761d863bd108", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af7a0596f67cabe7031297cf474b761d863bd108/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d30bbfda74346c5007174d8bda93e9583c166a4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d30bbfda74346c5007174d8bda93e9583c166a4c", "html_url": "https://github.com/rust-lang/rust/commit/d30bbfda74346c5007174d8bda93e9583c166a4c"}], "stats": {"total": 43, "additions": 0, "deletions": 43}, "files": [{"sha": "df2ef293d16ceac68207e52f6e4e0278b6ca5378", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/af7a0596f67cabe7031297cf474b761d863bd108/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af7a0596f67cabe7031297cf474b761d863bd108/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=af7a0596f67cabe7031297cf474b761d863bd108", "patch": "@@ -1,6 +1,4 @@\n use std::sync::Arc;\n-#[cfg(test)]\n-use parking_lot::Mutex;\n use salsa::{self, Database};\n use ra_db::{LocationIntener, BaseDatabase};\n use hir::{self, DefId, DefLoc, FnId, SourceItemId};\n@@ -11,11 +9,6 @@ use crate::{\n \n #[derive(Debug)]\n pub(crate) struct RootDatabase {\n-    #[cfg(test)]\n-    events: Mutex<Option<Vec<salsa::Event<RootDatabase>>>>,\n-    #[cfg(not(test))]\n-    events: (),\n-\n     runtime: salsa::Runtime<RootDatabase>,\n     id_maps: Arc<IdMaps>,\n }\n@@ -30,23 +23,11 @@ impl salsa::Database for RootDatabase {\n     fn salsa_runtime(&self) -> &salsa::Runtime<RootDatabase> {\n         &self.runtime\n     }\n-\n-    #[allow(unused)]\n-    fn salsa_event(&self, event: impl Fn() -> salsa::Event<RootDatabase>) {\n-        #[cfg(test)]\n-        {\n-            let mut events = self.events.lock();\n-            if let Some(events) = &mut *events {\n-                events.push(event());\n-            }\n-        }\n-    }\n }\n \n impl Default for RootDatabase {\n     fn default() -> RootDatabase {\n         let mut db = RootDatabase {\n-            events: Default::default(),\n             runtime: salsa::Runtime::default(),\n             id_maps: Default::default(),\n         };\n@@ -63,7 +44,6 @@ impl Default for RootDatabase {\n impl salsa::ParallelDatabase for RootDatabase {\n     fn snapshot(&self) -> salsa::Snapshot<RootDatabase> {\n         salsa::Snapshot::new(RootDatabase {\n-            events: Default::default(),\n             runtime: self.runtime.snapshot(self),\n             id_maps: self.id_maps.clone(),\n         })\n@@ -84,29 +64,6 @@ impl AsRef<LocationIntener<hir::SourceItemId, FnId>> for RootDatabase {\n     }\n }\n \n-#[cfg(test)]\n-impl RootDatabase {\n-    pub(crate) fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event<RootDatabase>> {\n-        *self.events.lock() = Some(Vec::new());\n-        f();\n-        let events = self.events.lock().take().unwrap();\n-        events\n-    }\n-\n-    pub(crate) fn log_executed(&self, f: impl FnOnce()) -> Vec<String> {\n-        let events = self.log(f);\n-        events\n-            .into_iter()\n-            .filter_map(|e| match e.kind {\n-                // This pretty horrible, but `Debug` is the only way to inspect\n-                // QueryDescriptor at the moment.\n-                salsa::EventKind::WillExecute { descriptor } => Some(format!(\"{:?}\", descriptor)),\n-                _ => None,\n-            })\n-            .collect()\n-    }\n-}\n-\n salsa::database_storage! {\n     pub(crate) struct RootDatabaseStorage for RootDatabase {\n         impl ra_db::FilesDatabase {"}]}