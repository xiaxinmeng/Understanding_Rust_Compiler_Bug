{"sha": "10eaa5a0afc750ad4c009bc2f3276d3413c32b5f", "node_id": "C_kwDOAAsO6NoAKDEwZWFhNWEwYWZjNzUwYWQ0YzAwOWJjMmYzMjc2ZDM0MTNjMzJiNWY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-03T13:35:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-03T13:35:47Z"}, "message": "Merge #10441\n\n10441: feat: Hide type inlay hints for constructors r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/3022\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "dcf78cf89685e62fe9ecfe5363fa8ee13674b462", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcf78cf89685e62fe9ecfe5363fa8ee13674b462"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10eaa5a0afc750ad4c009bc2f3276d3413c32b5f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhWbGzCRBK7hj4Ov3rIwAAxb0IAJ+ozjMqnf91GBtcVjfPzGan\nFNJru+Ky/RWp7Frq529aIyIEqWHZrdg/zaOfcAg1nSBHNfNhs9QxdL1o93bnQhM+\nxVvP3q86PDKG4Zb0V8TZYMqNimCJ6CXzHcNINQI9SuO7b+SrbKR/hagNbWvdPTQ5\n2Y4ThnVRxtLPrI4LwSylSJSwT4dS5aUQLmwT7aKT5Euj2JhFMPPGJqSqBTFQKhLY\nkl2PbK2WxoDwITOeuzQjUpwQW4F32AV9Q3C+wMHe0HQ8Z3Q0/LnCA60FJRdLHeGK\nd7NlpoOKNroXJ7eEmxgAR4VjxX7Uxz06bK+08y8/ypU5ISOGWaG7pSISqsumJbM=\n=A1z0\n-----END PGP SIGNATURE-----\n", "payload": "tree dcf78cf89685e62fe9ecfe5363fa8ee13674b462\nparent e28aa1928b039720bea15c437b6d9885007ad69e\nparent a31bc668f50b7ad6f67028c80a8805457cc7ebdf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633268147 +0000\ncommitter GitHub <noreply@github.com> 1633268147 +0000\n\nMerge #10441\n\n10441: feat: Hide type inlay hints for constructors r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/3022\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10eaa5a0afc750ad4c009bc2f3276d3413c32b5f", "html_url": "https://github.com/rust-lang/rust/commit/10eaa5a0afc750ad4c009bc2f3276d3413c32b5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10eaa5a0afc750ad4c009bc2f3276d3413c32b5f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e28aa1928b039720bea15c437b6d9885007ad69e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e28aa1928b039720bea15c437b6d9885007ad69e", "html_url": "https://github.com/rust-lang/rust/commit/e28aa1928b039720bea15c437b6d9885007ad69e"}, {"sha": "a31bc668f50b7ad6f67028c80a8805457cc7ebdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a31bc668f50b7ad6f67028c80a8805457cc7ebdf", "html_url": "https://github.com/rust-lang/rust/commit/a31bc668f50b7ad6f67028c80a8805457cc7ebdf"}], "stats": {"total": 144, "additions": 136, "deletions": 8}, "files": [{"sha": "3dcb510ab05107ad12d9da493bc87e96a8987f48", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 125, "deletions": 8, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/10eaa5a0afc750ad4c009bc2f3276d3413c32b5f/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10eaa5a0afc750ad4c009bc2f3276d3413c32b5f/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=10eaa5a0afc750ad4c009bc2f3276d3413c32b5f", "patch": "@@ -2,6 +2,7 @@ use either::Either;\n use hir::{known, Callable, HasVisibility, HirDisplay, Semantics, TypeInfo};\n use ide_db::RootDatabase;\n use ide_db::{base_db::FileRange, helpers::FamousDefs};\n+use itertools::Itertools;\n use stdx::to_lower_snake_case;\n use syntax::{\n     ast::{self, AstNode, HasArgList, HasName},\n@@ -198,28 +199,95 @@ fn get_bind_pat_hints(\n \n     let descended = sema.descend_node_into_attributes(pat.clone()).pop();\n     let desc_pat = descended.as_ref().unwrap_or(pat);\n-    let krate = sema.scope(desc_pat.syntax()).module().map(|it| it.krate());\n-    let famous_defs = FamousDefs(sema, krate);\n-\n     let ty = sema.type_of_pat(&desc_pat.clone().into())?.original;\n \n     if should_not_display_type_hint(sema, &pat, &ty) {\n         return None;\n     }\n \n+    let krate = sema.scope(desc_pat.syntax()).module().map(|it| it.krate());\n+    let famous_defs = FamousDefs(sema, krate);\n+    let label = hint_iterator(sema, &famous_defs, config, &ty);\n+\n+    let label = match label {\n+        Some(label) => label,\n+        None => {\n+            let ty_name = ty.display_truncated(sema.db, config.max_length).to_string();\n+            if is_named_constructor(sema, pat, &ty_name).is_some() {\n+                return None;\n+            }\n+            ty_name.into()\n+        }\n+    };\n+\n     acc.push(InlayHint {\n         range: match pat.name() {\n             Some(name) => name.syntax().text_range(),\n             None => pat.syntax().text_range(),\n         },\n         kind: InlayKind::TypeHint,\n-        label: hint_iterator(sema, &famous_defs, config, &ty)\n-            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string().into()),\n+        label,\n     });\n \n     Some(())\n }\n \n+fn is_named_constructor(\n+    sema: &Semantics<RootDatabase>,\n+    pat: &ast::IdentPat,\n+    ty_name: &str,\n+) -> Option<()> {\n+    let let_node = pat.syntax().parent()?;\n+    let expr = match_ast! {\n+        match let_node {\n+            ast::LetStmt(it) => it.initializer(),\n+            ast::Condition(it) => it.expr(),\n+            _ => None,\n+        }\n+    }?;\n+\n+    let expr = sema.descend_node_into_attributes(expr.clone()).pop().unwrap_or(expr);\n+    // unwrap postfix expressions\n+    let expr = match expr {\n+        ast::Expr::TryExpr(it) => it.expr(),\n+        ast::Expr::AwaitExpr(it) => it.expr(),\n+        expr => Some(expr),\n+    }?;\n+    let expr = match expr {\n+        ast::Expr::CallExpr(call) => match call.expr()? {\n+            ast::Expr::PathExpr(p) => p,\n+            _ => return None,\n+        },\n+        _ => return None,\n+    };\n+    let path = expr.path()?;\n+\n+    // Check for tuple-struct or tuple-variant in which case we can check the last segment\n+    let callable = sema.type_of_expr(&ast::Expr::PathExpr(expr))?.original.as_callable(sema.db);\n+    let callable_kind = callable.map(|it| it.kind());\n+    if let Some(hir::CallableKind::TupleStruct(_) | hir::CallableKind::TupleEnumVariant(_)) =\n+        callable_kind\n+    {\n+        if let Some(ctor) = path.segment() {\n+            return (&ctor.to_string() == ty_name).then(|| ());\n+        }\n+    }\n+\n+    // otherwise use the qualifying segment as the constructor name\n+    let qual_seg = path.qualifier()?.segment()?;\n+    let ctor_name = match qual_seg.kind()? {\n+        ast::PathSegmentKind::Name(name_ref) => {\n+            match qual_seg.generic_arg_list().map(|it| it.generic_args()) {\n+                Some(generics) => format!(\"{}<{}>\", name_ref, generics.format(\", \")),\n+                None => name_ref.to_string(),\n+            }\n+        }\n+        ast::PathSegmentKind::Type { type_ref: Some(ty), trait_ref: None } => ty.to_string(),\n+        _ => return None,\n+    };\n+    (&ctor_name == ty_name).then(|| ())\n+}\n+\n /// Checks if the type is an Iterator from std::iter and replaces its hint with an `impl Iterator<Item = Ty>`.\n fn hint_iterator(\n     sema: &Semantics<RootDatabase>,\n@@ -470,10 +538,12 @@ mod tests {\n         max_length: None,\n     };\n \n+    #[track_caller]\n     fn check(ra_fixture: &str) {\n         check_with_config(TEST_CONFIG, ra_fixture);\n     }\n \n+    #[track_caller]\n     fn check_params(ra_fixture: &str) {\n         check_with_config(\n             InlayHintsConfig {\n@@ -486,6 +556,7 @@ mod tests {\n         );\n     }\n \n+    #[track_caller]\n     fn check_types(ra_fixture: &str) {\n         check_with_config(\n             InlayHintsConfig {\n@@ -498,6 +569,7 @@ mod tests {\n         );\n     }\n \n+    #[track_caller]\n     fn check_chains(ra_fixture: &str) {\n         check_with_config(\n             InlayHintsConfig {\n@@ -510,6 +582,7 @@ mod tests {\n         );\n     }\n \n+    #[track_caller]\n     fn check_with_config(config: InlayHintsConfig, ra_fixture: &str) {\n         let (analysis, file_id) = fixture::file(&ra_fixture);\n         let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n@@ -519,6 +592,7 @@ mod tests {\n         assert_eq!(expected, actual, \"\\nExpected:\\n{:#?}\\n\\nActual:\\n{:#?}\", expected, actual);\n     }\n \n+    #[track_caller]\n     fn check_expect(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = fixture::file(&ra_fixture);\n         let inlay_hints = analysis.inlay_hints(&config, file_id).unwrap();\n@@ -1191,11 +1265,12 @@ trait Display {}\n trait Sync {}\n \n fn main() {\n-    let _v = Vec::<Box<&(dyn Display + Sync)>>::new();\n+    // The block expression wrapping disables the constructor hint hiding logic\n+    let _v = { Vec::<Box<&(dyn Display + Sync)>>::new() };\n       //^^ Vec<Box<&(dyn Display + Sync)>>\n-    let _v = Vec::<Box<*const (dyn Display + Sync)>>::new();\n+    let _v = { Vec::<Box<*const (dyn Display + Sync)>>::new() };\n       //^^ Vec<Box<*const (dyn Display + Sync)>>\n-    let _v = Vec::<Box<dyn Display + Sync>>::new();\n+    let _v = { Vec::<Box<dyn Display + Sync>>::new() };\n       //^^ Vec<Box<dyn Display + Sync>>\n }\n \"#,\n@@ -1234,6 +1309,48 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn skip_constructor_type_hints() {\n+        check_types(\n+            r#\"\n+//- minicore: try\n+use core::ops::ControlFlow;\n+\n+struct Struct;\n+struct TupleStruct();\n+\n+impl Struct {\n+    fn new() -> Self {\n+        Struct\n+    }\n+    fn try_new() -> ControlFlow<(), Self> {\n+        ControlFlow::Continue(Struct)\n+    }\n+}\n+\n+struct Generic<T>(T);\n+impl Generic<i32> {\n+    fn new() -> Self {\n+        Generic(0)\n+    }\n+}\n+\n+fn main() {\n+    let strukt = Struct::new();\n+    let tuple_struct = TupleStruct();\n+    let generic0 = Generic::new();\n+     // ^^^^^^^^ Generic<i32>\n+    let generic1 = Generic::<i32>::new();\n+    let generic2 = <Generic<i32>>::new();\n+}\n+\n+fn fallible() -> ControlFlow<()> {\n+    let strukt = Struct::try_new()?;\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn closures() {\n         check("}, {"sha": "045b4898e508240c24488814d18642dca5de4921", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10eaa5a0afc750ad4c009bc2f3276d3413c32b5f/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10eaa5a0afc750ad4c009bc2f3276d3413c32b5f/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=10eaa5a0afc750ad4c009bc2f3276d3413c32b5f", "patch": "@@ -300,6 +300,17 @@ pub mod ops {\n             #[lang = \"branch\"]\n             fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n         }\n+\n+        impl<B, C> Try for ControlFlow<B, C> {\n+            type Output = C;\n+            type Residual = ControlFlow<B, convert::Infallible>;\n+            fn from_output(output: Self::Output) -> Self {}\n+            fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {}\n+        }\n+\n+        impl<B, C> FromResidual for ControlFlow<B, C> {\n+            fn from_residual(residual: ControlFlow<B, convert::Infallible>) -> Self {}\n+        }\n     }\n     pub use self::try_::{ControlFlow, FromResidual, Try};\n     // endregion:try"}]}