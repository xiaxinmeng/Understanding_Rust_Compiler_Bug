{"sha": "30a760dda293b6c7d7266252e22fc0887eb26ed7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYTc2MGRkYTI5M2I2YzdkNzI2NjI1MmUyMmZjMDg4N2ViMjZlZDc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-25T11:38:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-25T13:38:51Z"}, "message": "Make it possible it use value_field for SIMD values stored ByVal", "tree": {"sha": "9b65688c6d728f3fbe49e51598d823acb86765f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b65688c6d728f3fbe49e51598d823acb86765f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30a760dda293b6c7d7266252e22fc0887eb26ed7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30a760dda293b6c7d7266252e22fc0887eb26ed7", "html_url": "https://github.com/rust-lang/rust/commit/30a760dda293b6c7d7266252e22fc0887eb26ed7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30a760dda293b6c7d7266252e22fc0887eb26ed7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ebc14cc40ba01ffd7a12920f4582dd44a77a3ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ebc14cc40ba01ffd7a12920f4582dd44a77a3ed", "html_url": "https://github.com/rust-lang/rust/commit/0ebc14cc40ba01ffd7a12920f4582dd44a77a3ed"}], "stats": {"total": 64, "additions": 31, "deletions": 33}, "files": [{"sha": "4ba1ae5061677ae5e3db5e581416d474058538e8", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/30a760dda293b6c7d7266252e22fc0887eb26ed7/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a760dda293b6c7d7266252e22fc0887eb26ed7/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=30a760dda293b6c7d7266252e22fc0887eb26ed7", "patch": "@@ -272,8 +272,8 @@ macro simd_int_binop {\n     },\n     ($fx:expr, $op_u:ident|$op_s:ident($x:ident, $y:ident) -> $ret:ident) => {\n         let (lane_layout, lane_count) = lane_type_and_count($fx.tcx, $x.layout());\n-        let x_val = $x.load_vector($fx);\n-        let y_val = $y.load_vector($fx);\n+        let x_val = $x.load_scalar($fx);\n+        let y_val = $y.load_scalar($fx);\n \n         let res = match lane_layout.ty.kind {\n             ty::Uint(_) => $fx.bcx.ins().$op_u(x_val, y_val),\n@@ -290,8 +290,8 @@ macro simd_int_flt_binop {\n     },\n     ($fx:expr, $op_u:ident|$op_s:ident|$op_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n         let (lane_layout, lane_count) = lane_type_and_count($fx.tcx, $x.layout());\n-        let x_val = $x.load_vector($fx);\n-        let y_val = $y.load_vector($fx);\n+        let x_val = $x.load_scalar($fx);\n+        let y_val = $y.load_scalar($fx);\n \n         let res = match lane_layout.ty.kind {\n             ty::Uint(_) => $fx.bcx.ins().$op_u(x_val, y_val),\n@@ -305,8 +305,8 @@ macro simd_int_flt_binop {\n \n macro simd_flt_binop($fx:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) {\n     let (lane_layout, lane_count) = lane_type_and_count($fx.tcx, $x.layout());\n-    let x_val = $x.load_vector($fx);\n-    let y_val = $y.load_vector($fx);\n+    let x_val = $x.load_scalar($fx);\n+    let y_val = $y.load_scalar($fx);\n \n     let res = match lane_layout.ty.kind {\n         ty::Float(_) => $fx.bcx.ins().$op(x_val, y_val),"}, {"sha": "cb23c814b5d2d6bd038c6821a85da12de075e2eb", "filename": "src/value_and_place.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/30a760dda293b6c7d7266252e22fc0887eb26ed7/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30a760dda293b6c7d7266252e22fc0887eb26ed7/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=30a760dda293b6c7d7266252e22fc0887eb26ed7", "patch": "@@ -122,11 +122,14 @@ impl<'tcx> CValue<'tcx> {\n         let layout = self.1;\n         match self.0 {\n             CValueInner::ByRef(ptr) => {\n-                let scalar = match layout.abi {\n-                    layout::Abi::Scalar(ref scalar) => scalar.clone(),\n+                let clif_ty = match layout.abi {\n+                    layout::Abi::Scalar(ref scalar) => scalar_to_clif_type(fx.tcx, scalar.clone()),\n+                    layout::Abi::Vector { ref element, count } => {\n+                        scalar_to_clif_type(fx.tcx, element.clone())\n+                            .by(u16::try_from(count).unwrap()).unwrap()\n+                    }\n                     _ => unreachable!(),\n                 };\n-                let clif_ty = scalar_to_clif_type(fx.tcx, scalar);\n                 ptr.load(fx, clif_ty, MemFlags::new())\n             }\n             CValueInner::ByVal(value) => value,\n@@ -158,37 +161,32 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n-    /// Load a value with layout.abi of vector\n-    pub fn load_vector<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> Value {\n-        let layout = self.1;\n-        match self.0 {\n-            CValueInner::ByRef(ptr) => {\n-                let clif_ty = match layout.abi {\n-                    layout::Abi::Vector { ref element, count } => {\n-                        scalar_to_clif_type(fx.tcx, element.clone()).by(u16::try_from(count).unwrap()).unwrap()\n-                    }\n-                    _ => unreachable!(),\n-                };\n-                ptr.load(fx, clif_ty, MemFlags::new())\n-            }\n-            CValueInner::ByVal(value) => value,\n-            CValueInner::ByValPair(_, _) => bug!(\"Please use load_scalar_pair for ByValPair\"),\n-        }\n-    }\n-\n     pub fn value_field<'a>(\n         self,\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         field: mir::Field,\n     ) -> CValue<'tcx> {\n         let layout = self.1;\n-        let ptr = match self.0 {\n-            CValueInner::ByRef(ptr) => ptr,\n+        match self.0 {\n+            CValueInner::ByVal(val) => {\n+                match layout.abi {\n+                    layout::Abi::Vector { element: _, count } => {\n+                        let count = u8::try_from(count).expect(\"SIMD type with more than 255 lanes???\");\n+                        let field = u8::try_from(field.index()).unwrap();\n+                        assert!(field < count);\n+                        let lane = fx.bcx.ins().extractlane(val, field);\n+                        let field_layout = layout.field(&*fx, usize::from(field));\n+                        CValue::by_val(lane, field_layout)\n+                    }\n+                    _ => unreachable!(\"value_field for ByVal with abi {:?}\", layout.abi),\n+                }\n+            }\n+            CValueInner::ByRef(ptr) => {\n+                let (field_ptr, field_layout) = codegen_field(fx, ptr, None, layout, field);\n+                CValue::by_ref(field_ptr, field_layout)\n+            }\n             _ => bug!(\"place_field for {:?}\", self),\n-        };\n-\n-        let (field_ptr, field_layout) = codegen_field(fx, ptr, None, layout, field);\n-        CValue::by_ref(field_ptr, field_layout)\n+        }\n     }\n \n     pub fn unsize_value<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, dest: CPlace<'tcx>) {"}]}