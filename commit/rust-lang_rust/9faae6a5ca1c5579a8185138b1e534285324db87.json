{"sha": "9faae6a5ca1c5579a8185138b1e534285324db87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYWFlNmE1Y2ExYzU1NzlhODE4NTEzOGIxZTUzNDI4NTMyNGRiODc=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-30T09:18:03Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-30T09:41:40Z"}, "message": "Remove Typer and ClosureTyper\n\nThis commit finalizes the work of the past commits by fully moving the fulfillment context into\nthe InferCtxt, cleaning up related context interfaces, removing the Typer and ClosureTyper\ntraits and cleaning up related intefaces", "tree": {"sha": "f95bc230a387351b34733d3993fed851c2713f86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f95bc230a387351b34733d3993fed851c2713f86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9faae6a5ca1c5579a8185138b1e534285324db87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9faae6a5ca1c5579a8185138b1e534285324db87", "html_url": "https://github.com/rust-lang/rust/commit/9faae6a5ca1c5579a8185138b1e534285324db87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9faae6a5ca1c5579a8185138b1e534285324db87/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05c57e0e6a667422c8a9159febbf0476f039f4fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/05c57e0e6a667422c8a9159febbf0476f039f4fc", "html_url": "https://github.com/rust-lang/rust/commit/05c57e0e6a667422c8a9159febbf0476f039f4fc"}], "stats": {"total": 498, "additions": 194, "deletions": 304}, "files": [{"sha": "ad87643e550c9dd72e7b213254f0ab5fab763a6b", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -26,7 +26,6 @@ use metadata::tydecode::{RegionParameter, ClosureSource};\n use metadata::tyencode;\n use middle::cast;\n use middle::check_const::ConstQualif;\n-use middle::mem_categorization::Typer;\n use middle::privacy::{AllPublic, LastMod};\n use middle::subst;\n use middle::subst::VecPerParamSpace;"}, {"sha": "19b688e5ccfb48092a0f50de371efea8cb2dbe71", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -289,7 +289,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n         let cause = traits::ObligationCause::new(e.span, e.id, traits::SharedStatic);\n         let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n         fulfill_cx.register_builtin_bound(&infcx, ty, ty::BoundSync, cause);\n-        match fulfill_cx.select_all_or_error(&infcx, &infcx) {\n+        match fulfill_cx.select_all_or_error(&infcx) {\n             Ok(()) => { },\n             Err(ref errors) => {\n                 traits::report_fulfillment_errors(&infcx, errors);"}, {"sha": "8e315901db212e2fa0ec67528c1576edf1db0f81", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -21,7 +21,7 @@ use middle::expr_use_visitor::{JustWrite, LoanCause, MutateMode};\n use middle::expr_use_visitor::WriteAndRead;\n use middle::expr_use_visitor as euv;\n use middle::infer;\n-use middle::mem_categorization::{cmt, Typer};\n+use middle::mem_categorization::{cmt};\n use middle::pat_util::*;\n use middle::ty::*;\n use middle::ty;"}, {"sha": "7d54b8c284f1ff8137e4c186d923b6ac52712e47", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -1033,7 +1033,7 @@ fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n     tcx.populate_implementations_for_trait_if_necessary(trait_ref.def_id());\n     let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, false);\n \n-    let mut selcx = traits::SelectionContext::new(&infcx, &infcx);\n+    let mut selcx = traits::SelectionContext::new(&infcx);\n     let obligation = traits::Obligation::new(traits::ObligationCause::dummy(),\n                                              trait_ref.to_poly_trait_predicate());\n     let selection = match selcx.select(&obligation) {"}, {"sha": "3edf0490214b9ff41a8eff1dff7c3a0da02f5125", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -23,8 +23,7 @@ use self::OverloadedCallType::*;\n use middle::{def, region, pat_util};\n use middle::infer;\n use middle::mem_categorization as mc;\n-use middle::mem_categorization::Typer;\n-use middle::ty::{self, ClosureTyper};\n+use middle::ty::{self};\n use middle::ty::{MethodCall, MethodObject, MethodTraitObject};\n use middle::ty::{MethodOrigin, MethodParam, MethodTypeParam};\n use middle::ty::{MethodStatic, MethodStaticClosure};\n@@ -356,7 +355,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n     }\n \n     fn tcx(&self) -> &'t ty::ctxt<'tcx> {\n-        self.typer.tcx()\n+        self.typer.tcx\n     }\n \n     fn delegate_consume(&mut self,\n@@ -691,7 +690,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         match local.init {\n             None => {\n                 let delegate = &mut self.delegate;\n-                pat_util::pat_bindings(&self.typer.tcx().def_map, &*local.pat,\n+                pat_util::pat_bindings(&self.typer.tcx.def_map, &*local.pat,\n                                        |_, id, span, _| {\n                     delegate.decl_without_init(id, span);\n                 })\n@@ -1053,7 +1052,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         let delegate = &mut self.delegate;\n         return_if_err!(mc.cat_pattern(cmt_discr.clone(), pat, |mc, cmt_pat, pat| {\n             if pat_util::pat_is_binding(def_map, pat) {\n-                let tcx = typer.tcx();\n+                let tcx = typer.tcx;\n \n                 debug!(\"binding cmt_pat={:?} pat={:?} match_mode={:?}\",\n                        cmt_pat,\n@@ -1140,7 +1139,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         // the leaves of the pattern tree structure.\n         return_if_err!(mc.cat_pattern(cmt_discr, pat, |mc, cmt_pat, pat| {\n             let def_map = def_map.borrow();\n-            let tcx = typer.tcx();\n+            let tcx = typer.tcx;\n \n             match pat.node {\n                 ast::PatEnum(_, _) | ast::PatQPath(..) |\n@@ -1279,7 +1278,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n     }\n }\n \n-fn copy_or_move<'tcx>(typer: &mc::Typer<'tcx>,\n+fn copy_or_move<'a, 'tcx>(typer: &infer::InferCtxt<'a, 'tcx>,\n                       cmt: &mc::cmt<'tcx>,\n                       move_reason: MoveReason)\n                       -> ConsumeMode"}, {"sha": "3e097578857e94d4336079f378809762e1322eb2", "filename": "src/librustc/middle/implicator.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fimplicator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fimplicator.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -34,7 +34,6 @@ pub enum Implication<'tcx> {\n \n struct Implicator<'a, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a,'tcx>,\n-    closure_typer: &'a (ty::ClosureTyper<'tcx>+'a),\n     body_id: ast::NodeId,\n     stack: Vec<(ty::Region, Option<Ty<'tcx>>)>,\n     span: Span,\n@@ -46,7 +45,6 @@ struct Implicator<'a, 'tcx: 'a> {\n /// appear in a context with lifetime `outer_region`\n pub fn implications<'a,'tcx>(\n     infcx: &'a InferCtxt<'a,'tcx>,\n-    closure_typer: &ty::ClosureTyper<'tcx>,\n     body_id: ast::NodeId,\n     ty: Ty<'tcx>,\n     outer_region: ty::Region,\n@@ -60,8 +58,7 @@ pub fn implications<'a,'tcx>(\n \n     let mut stack = Vec::new();\n     stack.push((outer_region, None));\n-    let mut wf = Implicator { closure_typer: closure_typer,\n-                              infcx: infcx,\n+    let mut wf = Implicator { infcx: infcx,\n                               body_id: body_id,\n                               span: span,\n                               stack: stack,\n@@ -404,7 +401,6 @@ impl<'a, 'tcx> Implicator<'a, 'tcx> {\n     {\n         let value =\n             traits::fully_normalize(self.infcx,\n-                                    self.closure_typer,\n                                     traits::ObligationCause::misc(self.span, self.body_id),\n                                     value);\n         match value {"}, {"sha": "a64fe8b91282b86bee58397a08321c22d7430258", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 122, "deletions": 128, "changes": 250, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -19,7 +19,6 @@ pub use self::TypeOrigin::*;\n pub use self::ValuePairs::*;\n pub use self::fixup_err::*;\n pub use middle::ty::IntVarValue;\n-use middle::ty::ClosureTyper;\n pub use self::freshen::TypeFreshener;\n pub use self::region_inference::GenericKind;\n \n@@ -475,129 +474,6 @@ pub struct CombinedSnapshot {\n     region_vars_snapshot: RegionSnapshot,\n }\n \n-impl<'a, 'tcx> mc::Typer<'tcx> for InferCtxt<'a, 'tcx> {\n-    fn node_ty(&self, id: ast::NodeId) -> McResult<Ty<'tcx>> {\n-        let ty = self.node_type(id);\n-        self.resolve_type_vars_or_error(&ty)\n-    }\n-\n-    fn expr_ty_adjusted(&self, expr: &ast::Expr) -> McResult<Ty<'tcx>> {\n-        let ty = self.adjust_expr_ty(expr, self.tables.borrow().adjustments.get(&expr.id));\n-        self.resolve_type_vars_or_error(&ty)\n-    }\n-\n-    fn type_moves_by_default(&self, ty: Ty<'tcx>, span: Span) -> bool {\n-        let ty = self.resolve_type_vars_if_possible(&ty);\n-        !traits::type_known_to_meet_builtin_bound(self, self, ty, ty::BoundCopy, span)\n-    }\n-\n-    fn node_method_ty(&self, method_call: ty::MethodCall)\n-                      -> Option<Ty<'tcx>> {\n-        self.tables\n-            .borrow()\n-            .method_map\n-            .get(&method_call)\n-            .map(|method| method.ty)\n-            .map(|ty| self.resolve_type_vars_if_possible(&ty))\n-    }\n-\n-    fn node_method_origin(&self, method_call: ty::MethodCall)\n-                          -> Option<ty::MethodOrigin<'tcx>>\n-    {\n-        self.tables\n-            .borrow()\n-            .method_map\n-            .get(&method_call)\n-            .map(|method| method.origin.clone())\n-    }\n-\n-    fn adjustments(&self) -> Ref<NodeMap<ty::AutoAdjustment<'tcx>>> {\n-        fn project_adjustments<'a, 'tcx>(tables: &'a ty::Tables<'tcx>)\n-                                        -> &'a NodeMap<ty::AutoAdjustment<'tcx>> {\n-            &tables.adjustments\n-        }\n-\n-        Ref::map(self.tables.borrow(), project_adjustments)\n-    }\n-\n-    fn is_method_call(&self, id: ast::NodeId) -> bool {\n-        self.tables.borrow().method_map.contains_key(&ty::MethodCall::expr(id))\n-    }\n-\n-    fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<CodeExtent> {\n-        self.tcx.region_maps.temporary_scope(rvalue_id)\n-    }\n-\n-    fn upvar_capture(&self, upvar_id: ty::UpvarId) -> Option<ty::UpvarCapture> {\n-        self.tables.borrow().upvar_capture_map.get(&upvar_id).cloned()\n-    }\n-}\n-\n-impl<'a, 'tcx> ty::ClosureTyper<'tcx> for InferCtxt<'a, 'tcx> {\n-    fn param_env<'b>(&'b self) -> &'b ty::ParameterEnvironment<'b,'tcx> {\n-        &self.parameter_environment\n-    }\n-\n-    fn closure_kind(&self,\n-                    def_id: ast::DefId)\n-                    -> Option<ty::ClosureKind>\n-    {\n-        self.tables.borrow().closure_kinds.get(&def_id).cloned()\n-    }\n-\n-    fn closure_type(&self,\n-                    def_id: ast::DefId,\n-                    substs: &subst::Substs<'tcx>)\n-                    -> ty::ClosureTy<'tcx>\n-    {\n-\n-        let closure_ty = self.tables\n-                             .borrow()\n-                             .closure_tys\n-                             .get(&def_id)\n-                             .unwrap()\n-                             .subst(self.tcx, substs);\n-\n-        if self.normalize {\n-            // NOTE: this flag is currently *always* set to false, we are slowly folding\n-            // normalization into this trait and will come back to remove this in the near\n-            // future.\n-\n-            // code from NormalizingClosureTyper:\n-            // the substitutions in `substs` are already monomorphized,\n-            // but we still must normalize associated types\n-            // normalize_associated_type(self.param_env.tcx, &closure_ty)\n-            normalize_associated_type(&self.tcx, &closure_ty)\n-            // panic!(\"see issue 26597: fufillment context refactor must occur\")\n-        } else {\n-            closure_ty\n-        }\n-    }\n-\n-    fn closure_upvars(&self,\n-                      def_id: ast::DefId,\n-                      substs: &Substs<'tcx>)\n-                      -> Option<Vec<ty::ClosureUpvar<'tcx>>>\n-    {\n-        let result = ty::ctxt::closure_upvars(self, def_id, substs);\n-\n-        if self.normalize {\n-            // NOTE: this flag is currently *always* set to false, we are slowly folding\n-            // normalization into this trait and will come back to remove this in the near\n-            // future.\n-\n-            // code from NormalizingClosureTyper:\n-            // the substitutions in `substs` are already monomorphized,\n-            // but we still must normalize associated types\n-            // monomorphize::normalize_associated_type(self.param_env.tcx, &result)\n-            // panic!(\"see issue 26597: fufillment context refactor must occur\")\n-            normalize_associated_type(&self.tcx, &result)\n-        } else {\n-            result\n-        }\n-    }\n-}\n-\n pub fn normalize_associated_type<'tcx,T>(tcx: &ty::ctxt<'tcx>, value: &T) -> T\n     where T : TypeFoldable<'tcx> + HasTypeFlags\n {\n@@ -610,7 +486,7 @@ pub fn normalize_associated_type<'tcx,T>(tcx: &ty::ctxt<'tcx>, value: &T) -> T\n     }\n \n     let infcx = new_infer_ctxt(tcx, &tcx.tables, None, true);\n-    let mut selcx = traits::SelectionContext::new(&infcx, &infcx);\n+    let mut selcx = traits::SelectionContext::new(&infcx);\n     let cause = traits::ObligationCause::dummy();\n     let traits::Normalized { value: result, obligations } =\n         traits::normalize(&mut selcx, cause, &value);\n@@ -663,12 +539,11 @@ pub fn drain_fulfillment_cx<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n {\n     debug!(\"drain_fulfillment_cx(result={:?})\",\n            result);\n-    // this is stupid but temporary\n-    let typer: &ClosureTyper<'tcx> = infcx;\n+\n     // In principle, we only need to do this so long as `result`\n     // contains unbound type parameters. It could be a slight\n     // optimization to stop iterating early.\n-    match fulfill_cx.select_all_or_error(infcx, typer) {\n+    match fulfill_cx.select_all_or_error(infcx) {\n         Ok(()) => { }\n         Err(errors) => {\n             return Err(errors);\n@@ -1429,6 +1304,125 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             self.equate(true, trace).relate(a, b)\n         }).map(|_| ())\n     }\n+\n+    pub fn node_ty(&self, id: ast::NodeId) -> McResult<Ty<'tcx>> {\n+        let ty = self.node_type(id);\n+        self.resolve_type_vars_or_error(&ty)\n+    }\n+\n+    pub fn expr_ty_adjusted(&self, expr: &ast::Expr) -> McResult<Ty<'tcx>> {\n+        let ty = self.adjust_expr_ty(expr, self.tables.borrow().adjustments.get(&expr.id));\n+        self.resolve_type_vars_or_error(&ty)\n+    }\n+\n+    pub fn type_moves_by_default(&self, ty: Ty<'tcx>, span: Span) -> bool {\n+        let ty = self.resolve_type_vars_if_possible(&ty);\n+        !traits::type_known_to_meet_builtin_bound(self, ty, ty::BoundCopy, span)\n+    }\n+\n+    pub fn node_method_ty(&self, method_call: ty::MethodCall)\n+                      -> Option<Ty<'tcx>> {\n+        self.tables\n+            .borrow()\n+            .method_map\n+            .get(&method_call)\n+            .map(|method| method.ty)\n+            .map(|ty| self.resolve_type_vars_if_possible(&ty))\n+    }\n+\n+    pub fn node_method_origin(&self, method_call: ty::MethodCall)\n+                          -> Option<ty::MethodOrigin<'tcx>>\n+    {\n+        self.tables\n+            .borrow()\n+            .method_map\n+            .get(&method_call)\n+            .map(|method| method.origin.clone())\n+    }\n+\n+    pub fn adjustments(&self) -> Ref<NodeMap<ty::AutoAdjustment<'tcx>>> {\n+        fn project_adjustments<'a, 'tcx>(tables: &'a ty::Tables<'tcx>)\n+                                        -> &'a NodeMap<ty::AutoAdjustment<'tcx>> {\n+            &tables.adjustments\n+        }\n+\n+        Ref::map(self.tables.borrow(), project_adjustments)\n+    }\n+\n+    pub fn is_method_call(&self, id: ast::NodeId) -> bool {\n+        self.tables.borrow().method_map.contains_key(&ty::MethodCall::expr(id))\n+    }\n+\n+    pub fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<CodeExtent> {\n+        self.tcx.region_maps.temporary_scope(rvalue_id)\n+    }\n+\n+    pub fn upvar_capture(&self, upvar_id: ty::UpvarId) -> Option<ty::UpvarCapture> {\n+        self.tables.borrow().upvar_capture_map.get(&upvar_id).cloned()\n+    }\n+\n+    pub fn param_env<'b>(&'b self) -> &'b ty::ParameterEnvironment<'b,'tcx> {\n+        &self.parameter_environment\n+    }\n+\n+    pub fn closure_kind(&self,\n+                        def_id: ast::DefId)\n+                        -> Option<ty::ClosureKind>\n+    {\n+        self.tables.borrow().closure_kinds.get(&def_id).cloned()\n+    }\n+\n+    pub fn closure_type(&self,\n+                    def_id: ast::DefId,\n+                    substs: &subst::Substs<'tcx>)\n+                    -> ty::ClosureTy<'tcx>\n+    {\n+\n+        let closure_ty = self.tables\n+                             .borrow()\n+                             .closure_tys\n+                             .get(&def_id)\n+                             .unwrap()\n+                             .subst(self.tcx, substs);\n+\n+        if self.normalize {\n+            // NOTE: this flag is currently *always* set to false, we are slowly folding\n+            // normalization into this trait and will come back to remove this in the near\n+            // future.\n+\n+            // code from NormalizingClosureTyper:\n+            // the substitutions in `substs` are already monomorphized,\n+            // but we still must normalize associated types\n+            // normalize_associated_type(self.param_env.tcx, &closure_ty)\n+            normalize_associated_type(&self.tcx, &closure_ty)\n+            // panic!(\"see issue 26597: fufillment context refactor must occur\")\n+        } else {\n+            closure_ty\n+        }\n+    }\n+\n+    pub fn closure_upvars(&self,\n+                          def_id: ast::DefId,\n+                          substs: &Substs<'tcx>)\n+                          -> Option<Vec<ty::ClosureUpvar<'tcx>>>\n+    {\n+        let result = ty::ctxt::closure_upvars(self, def_id, substs);\n+\n+        if self.normalize {\n+            // NOTE: this flag is currently *always* set to false, we are slowly folding\n+            // normalization into this trait and will come back to remove this in the near\n+            // future.\n+\n+            // code from NormalizingClosureTyper:\n+            // the substitutions in `substs` are already monomorphized,\n+            // but we still must normalize associated types\n+            // monomorphize::normalize_associated_type(self.param_env.tcx, &result)\n+            // panic!(\"see issue 26597: fufillment context refactor must occur\")\n+            normalize_associated_type(&self.tcx, &result)\n+        } else {\n+            result\n+        }\n+    }\n }\n \n impl<'tcx> TypeTrace<'tcx> {"}, {"sha": "68001ae1564ab038d384111edbc2090e0bdb7b76", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -110,11 +110,9 @@ use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n use middle::def::*;\n-use middle::mem_categorization::Typer;\n use middle::pat_util;\n use middle::region;\n use middle::ty;\n-use middle::ty::ClosureTyper;\n use lint;\n use util::nodemap::NodeMap;\n "}, {"sha": "32fbd7739005ea36f5326c331d6777a4f3d200a0", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -77,14 +77,12 @@ use middle::infer;\n use middle::check_const;\n use middle::def;\n use middle::region;\n-use middle::ty::{self, Ty, ClosureTyper};\n-use util::nodemap::NodeMap;\n+use middle::ty::{self, Ty};\n \n use syntax::ast::{MutImmutable, MutMutable};\n use syntax::ast;\n use syntax::codemap::Span;\n \n-use std::cell::Ref;\n use std::fmt;\n use std::rc::Rc;\n \n@@ -264,35 +262,6 @@ pub struct MemCategorizationContext<'t, 'a: 't, 'tcx : 'a> {\n \n pub type McResult<T> = Result<T, ()>;\n \n-/// The `Typer` trait provides the interface for the mem-categorization\n-/// module to the results of the type check. It can be used to query\n-/// the type assigned to an expression node, to inquire after adjustments,\n-/// and so on.\n-///\n-/// This interface is needed because mem-categorization is used from\n-/// two places: `regionck` and `borrowck`. `regionck` executes before\n-/// type inference is complete, and hence derives types and so on from\n-/// intermediate tables.  This also implies that type errors can occur,\n-/// and hence `node_ty()` and friends return a `Result` type -- any\n-/// error will propagate back up through the mem-categorization\n-/// routines.\n-///\n-/// In the borrow checker, in contrast, type checking is complete and we\n-/// know that no errors have occurred, so we simply consult the tcx and we\n-/// can be sure that only `Ok` results will occur.\n-pub trait Typer<'tcx> : ty::ClosureTyper<'tcx> {\n-    fn node_ty(&self, id: ast::NodeId) -> McResult<Ty<'tcx>>;\n-    fn expr_ty_adjusted(&self, expr: &ast::Expr) -> McResult<Ty<'tcx>>;\n-    fn type_moves_by_default(&self, ty: Ty<'tcx>, span: Span) -> bool;\n-    fn node_method_ty(&self, method_call: ty::MethodCall) -> Option<Ty<'tcx>>;\n-    fn node_method_origin(&self, method_call: ty::MethodCall)\n-                          -> Option<ty::MethodOrigin<'tcx>>;\n-    fn adjustments(&self) -> Ref<NodeMap<ty::AutoAdjustment<'tcx>>>;\n-    fn is_method_call(&self, id: ast::NodeId) -> bool;\n-    fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<region::CodeExtent>;\n-    fn upvar_capture(&self, upvar_id: ty::UpvarId) -> Option<ty::UpvarCapture>;\n-}\n-\n impl MutabilityCategory {\n     pub fn from_mutbl(m: ast::Mutability) -> MutabilityCategory {\n         let ret = match m {"}, {"sha": "977d0577e480f47beb5d76851380dc6f38f6b96b", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -38,7 +38,7 @@ pub fn overlapping_impls(infcx: &InferCtxt,\n            impl1_def_id,\n            impl2_def_id);\n \n-    let selcx = &mut SelectionContext::intercrate(infcx, infcx);\n+    let selcx = &mut SelectionContext::intercrate(infcx);\n     infcx.probe(|_| {\n         overlap(selcx, impl1_def_id, impl2_def_id) || overlap(selcx, impl2_def_id, impl1_def_id)\n     })"}, {"sha": "08cb3e5701569d0ddefbe8121d21dbc545b336d2", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -132,7 +132,6 @@ impl<'tcx> FulfillmentContext<'tcx> {\n     /// `projection_ty` again.\n     pub fn normalize_projection_type<'a>(&mut self,\n                                          infcx: &InferCtxt<'a,'tcx>,\n-                                         typer: &ty::ClosureTyper<'tcx>,\n                                          projection_ty: ty::ProjectionTy<'tcx>,\n                                          cause: ObligationCause<'tcx>)\n                                          -> Ty<'tcx>\n@@ -144,7 +143,7 @@ impl<'tcx> FulfillmentContext<'tcx> {\n \n         // FIXME(#20304) -- cache\n \n-        let mut selcx = SelectionContext::new(infcx, typer);\n+        let mut selcx = SelectionContext::new(infcx);\n         let normalized = project::normalize_projection_type(&mut selcx, projection_ty, cause, 0);\n \n         for obligation in normalized.obligations {\n@@ -208,11 +207,10 @@ impl<'tcx> FulfillmentContext<'tcx> {\n     }\n \n     pub fn select_all_or_error<'a>(&mut self,\n-                                   infcx: &InferCtxt<'a,'tcx>,\n-                                   typer: &ty::ClosureTyper<'tcx>)\n+                                   infcx: &InferCtxt<'a,'tcx>)\n                                    -> Result<(),Vec<FulfillmentError<'tcx>>>\n     {\n-        try!(self.select_where_possible(infcx, typer));\n+        try!(self.select_where_possible(infcx));\n \n         // Anything left is ambiguous.\n         let errors: Vec<FulfillmentError> =\n@@ -233,20 +231,18 @@ impl<'tcx> FulfillmentContext<'tcx> {\n     /// gaining type information. It'd be equally valid to use `select_where_possible` but it\n     /// results in `O(n^2)` performance (#18208).\n     pub fn select_new_obligations<'a>(&mut self,\n-                                      infcx: &InferCtxt<'a,'tcx>,\n-                                      typer: &ty::ClosureTyper<'tcx>)\n+                                      infcx: &InferCtxt<'a,'tcx>)\n                                       -> Result<(),Vec<FulfillmentError<'tcx>>>\n     {\n-        let mut selcx = SelectionContext::new(infcx, typer);\n+        let mut selcx = SelectionContext::new(infcx);\n         self.select(&mut selcx, true)\n     }\n \n     pub fn select_where_possible<'a>(&mut self,\n-                                     infcx: &InferCtxt<'a,'tcx>,\n-                                     typer: &ty::ClosureTyper<'tcx>)\n+                                     infcx: &InferCtxt<'a,'tcx>)\n                                      -> Result<(),Vec<FulfillmentError<'tcx>>>\n     {\n-        let mut selcx = SelectionContext::new(infcx, typer);\n+        let mut selcx = SelectionContext::new(infcx);\n         self.select(&mut selcx, false)\n     }\n "}, {"sha": "a39fe453664360aff5c7f9963183d51c4b549bfe", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -312,7 +312,6 @@ pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,\n /// conservative towards *no impl*, which is the opposite of the\n /// `evaluate` methods).\n pub fn type_known_to_meet_builtin_bound<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n-                                                 typer: &ty::ClosureTyper<'tcx>,\n                                                  ty: Ty<'tcx>,\n                                                  bound: ty::BuiltinBound,\n                                                  span: Span)\n@@ -334,7 +333,7 @@ pub fn type_known_to_meet_builtin_bound<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n     // Note: we only assume something is `Copy` if we can\n     // *definitively* show that it implements `Copy`. Otherwise,\n     // assume it is move; linear is always ok.\n-    match fulfill_cx.select_all_or_error(infcx, typer) {\n+    match fulfill_cx.select_all_or_error(infcx) {\n         Ok(()) => {\n             debug!(\"type_known_to_meet_builtin_bound: ty={:?} bound={:?} success\",\n                    ty,\n@@ -398,7 +397,7 @@ pub fn normalize_param_env_or_error<'a,'tcx>(unnormalized_env: ty::ParameterEnvi\n     let elaborated_env = unnormalized_env.with_caller_bounds(predicates);\n \n     let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, Some(elaborated_env), false);\n-    let predicates = match fully_normalize(&infcx, &infcx, cause,\n+    let predicates = match fully_normalize(&infcx, cause,\n                                            &infcx.parameter_environment.caller_bounds) {\n         Ok(predicates) => predicates,\n         Err(errors) => {\n@@ -429,15 +428,14 @@ pub fn normalize_param_env_or_error<'a,'tcx>(unnormalized_env: ty::ParameterEnvi\n }\n \n pub fn fully_normalize<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n-                                  closure_typer: &ty::ClosureTyper<'tcx>,\n                                   cause: ObligationCause<'tcx>,\n                                   value: &T)\n                                   -> Result<T, Vec<FulfillmentError<'tcx>>>\n     where T : TypeFoldable<'tcx> + HasTypeFlags\n {\n     debug!(\"normalize_param_env(value={:?})\", value);\n \n-    let mut selcx = &mut SelectionContext::new(infcx, closure_typer);\n+    let mut selcx = &mut SelectionContext::new(infcx);\n     // FIXME (@jroesch): I'm not sure if this is a bug or not, needs\n     // further investigation. It appears that by reusing the fulfillment_cx\n     // here we incur more obligations and later trip an asssertion on\n@@ -458,7 +456,7 @@ pub fn fully_normalize<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n     for obligation in obligations {\n         fulfill_cx.register_predicate_obligation(selcx.infcx(), obligation);\n     }\n-    try!(fulfill_cx.select_all_or_error(infcx, closure_typer));\n+    try!(fulfill_cx.select_all_or_error(infcx));\n     let resolved_value = infcx.resolve_type_vars_if_possible(&normalized_value);\n     debug!(\"normalize_param_env: resolved_value={:?}\", resolved_value);\n     Ok(resolved_value)"}, {"sha": "3bc4fd0c0a14e8fc0fc35e20f35c9b63a6ffef14", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -55,8 +55,6 @@ use util::nodemap::FnvHashMap;\n pub struct SelectionContext<'cx, 'tcx:'cx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n \n-    closure_typer: &'cx (ty::ClosureTyper<'tcx>+'cx),\n-\n     /// Freshener used specifically for skolemizing entries on the\n     /// obligation stack. This ensures that all entries on the stack\n     /// at one time will have the same set of skolemized entries,\n@@ -244,23 +242,19 @@ enum EvaluationResult<'tcx> {\n }\n \n impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n-    pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>,\n-               closure_typer: &'cx ty::ClosureTyper<'tcx>)\n+    pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>)\n                -> SelectionContext<'cx, 'tcx> {\n         SelectionContext {\n             infcx: infcx,\n-            closure_typer: closure_typer,\n             freshener: infcx.freshener(),\n             intercrate: false,\n         }\n     }\n \n-    pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>,\n-                      closure_typer: &'cx ty::ClosureTyper<'tcx>)\n+    pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>)\n                       -> SelectionContext<'cx, 'tcx> {\n         SelectionContext {\n             infcx: infcx,\n-            closure_typer: closure_typer,\n             freshener: infcx.freshener(),\n             intercrate: true,\n         }\n@@ -275,11 +269,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     pub fn param_env(&self) -> &'cx ty::ParameterEnvironment<'cx, 'tcx> {\n-        self.closure_typer.param_env()\n+        self.infcx.param_env()\n     }\n \n-    pub fn closure_typer(&self) -> &'cx (ty::ClosureTyper<'tcx>+'cx) {\n-        self.closure_typer\n+    pub fn closure_typer(&self) -> &'cx InferCtxt<'cx, 'tcx> {\n+        self.infcx\n     }\n \n     ///////////////////////////////////////////////////////////////////////////\n@@ -1163,7 +1157,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                kind,\n                obligation);\n \n-        match self.closure_typer.closure_kind(closure_def_id) {\n+        match self.infcx.closure_kind(closure_def_id) {\n             Some(closure_kind) => {\n                 debug!(\"assemble_unboxed_candidates: closure_kind = {:?}\", closure_kind);\n                 if closure_kind.extends(kind) {\n@@ -1727,7 +1721,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     return ok_if(Vec::new());\n                 }\n \n-                match self.closure_typer.closure_upvars(def_id, substs) {\n+                match self.infcx.closure_upvars(def_id, substs) {\n                     Some(upvars) => ok_if(upvars.iter().map(|c| c.ty).collect()),\n                     None => {\n                         debug!(\"assemble_builtin_bound_candidates: no upvar types available yet\");\n@@ -1865,7 +1859,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::TyClosure(def_id, substs) => {\n                 assert_eq!(def_id.krate, ast::LOCAL_CRATE);\n \n-                match self.closure_typer.closure_upvars(def_id, substs) {\n+                match self.infcx.closure_upvars(def_id, substs) {\n                     Some(upvars) => {\n                         Some(upvars.iter().map(|c| c.ty).collect())\n                     }\n@@ -2844,7 +2838,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                       substs: &Substs<'tcx>)\n                                       -> ty::PolyTraitRef<'tcx>\n     {\n-        let closure_type = self.closure_typer.closure_type(closure_def_id, substs);\n+        let closure_type = self.infcx.closure_type(closure_def_id, substs);\n         let ty::Binder((trait_ref, _)) =\n             util::closure_trait_ref_and_return_type(self.tcx(),\n                                                     obligation.predicate.def_id(),"}, {"sha": "e20df807c8784fbf223552d38dc58c4a73b8aab7", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -52,7 +52,6 @@ use middle::dependency_format;\n use middle::fast_reject;\n use middle::free_region::FreeRegionMap;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n-use middle::mem_categorization::Typer;\n use middle::region;\n use middle::resolve_lifetime;\n use middle::infer;\n@@ -3179,35 +3178,6 @@ impl ClosureKind {\n     }\n }\n \n-pub trait ClosureTyper<'tcx> {\n-    fn tcx(&self) -> &ctxt<'tcx> {\n-        self.param_env().tcx\n-    }\n-\n-    fn param_env<'a>(&'a self) -> &'a ty::ParameterEnvironment<'a, 'tcx>;\n-\n-    /// Is this a `Fn`, `FnMut` or `FnOnce` closure? During typeck,\n-    /// returns `None` if the kind of this closure has not yet been\n-    /// inferred.\n-    fn closure_kind(&self,\n-                    def_id: ast::DefId)\n-                    -> Option<ty::ClosureKind>;\n-\n-    /// Returns the argument/return types of this closure.\n-    fn closure_type(&self,\n-                    def_id: ast::DefId,\n-                    substs: &subst::Substs<'tcx>)\n-                    -> ty::ClosureTy<'tcx>;\n-\n-    /// Returns the set of all upvars and their transformed\n-    /// types. During typeck, maybe return `None` if the upvar types\n-    /// have not yet been inferred.\n-    fn closure_upvars(&self,\n-                      def_id: ast::DefId,\n-                      substs: &Substs<'tcx>)\n-                      -> Option<Vec<ClosureUpvar<'tcx>>>;\n-}\n-\n impl<'tcx> CommonTypes<'tcx> {\n     fn new(arena: &'tcx TypedArena<TyS<'tcx>>,\n            interner: &mut FnvHashMap<InternedTy<'tcx>, Ty<'tcx>>)\n@@ -4406,7 +4376,7 @@ impl<'tcx> TyS<'tcx> {\n         let tcx = param_env.tcx;\n         let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, Some(param_env.clone()), false);\n \n-        let is_impld = traits::type_known_to_meet_builtin_bound(&infcx, &infcx,\n+        let is_impld = traits::type_known_to_meet_builtin_bound(&infcx,\n                                                                 self, bound, span);\n \n         debug!(\"Ty::impls_bound({:?}, {:?}) = {:?}\",\n@@ -6116,7 +6086,7 @@ impl<'tcx> ctxt<'tcx> {\n     }\n \n     // Returns a list of `ClosureUpvar`s for each upvar.\n-    pub fn closure_upvars(typer: &Typer<'tcx>,\n+    pub fn closure_upvars<'a>(typer: &infer::InferCtxt<'a, 'tcx>,\n                           closure_id: ast::DefId,\n                           substs: &Substs<'tcx>)\n                           -> Option<Vec<ClosureUpvar<'tcx>>>\n@@ -6127,7 +6097,7 @@ impl<'tcx> ctxt<'tcx> {\n         // This may change if abstract return types of some sort are\n         // implemented.\n         assert!(closure_id.krate == ast::LOCAL_CRATE);\n-        let tcx = typer.tcx();\n+        let tcx = typer.tcx;\n         match tcx.freevars.borrow().get(&closure_id.node) {\n             None => Some(vec![]),\n             Some(ref freevars) => {"}, {"sha": "3a4318527fb4036263d1c400ede0092bf2d26c7e", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -30,7 +30,6 @@ use rustc::middle::dataflow::KillFrom;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::free_region::FreeRegionMap;\n use rustc::middle::mem_categorization as mc;\n-use rustc::middle::mem_categorization::Typer;\n use rustc::middle::region;\n use rustc::middle::ty::{self, Ty};\n "}, {"sha": "2e812a0a78072b5ce624812768ebf871b1a42434", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -30,7 +30,6 @@\n \n use metadata::{csearch, decoder};\n use middle::def::*;\n-use middle::mem_categorization::Typer;\n use middle::subst::Substs;\n use middle::ty::{self, Ty};\n use middle::{def, pat_util, stability};"}, {"sha": "eca9891c57cb70e1611caea53efcc2fda3f16718", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -51,7 +51,7 @@ use llvm::{ValueRef, True, IntEQ, IntNE};\n use back::abi::FAT_PTR_ADDR;\n use middle::subst;\n use middle::infer;\n-use middle::ty::{self, Ty, ClosureTyper};\n+use middle::ty::{self, Ty};\n use middle::ty::Disr;\n use syntax::ast;\n use syntax::attr;"}, {"sha": "25cde149df109502a3d3db6d27fb96c20743e00f", "filename": "src/librustc_trans/trans/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -11,7 +11,7 @@\n \n use libc::{c_uint, c_ulonglong};\n use llvm::{self, ValueRef, AttrHelper};\n-use middle::ty::{self, ClosureTyper};\n+use middle::ty;\n use middle::infer;\n use session::config::NoDebugInfo;\n use syntax::abi;"}, {"sha": "156d591b909f440a463838a24ca28a3b27f2698f", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -41,7 +41,7 @@ use middle::infer;\n use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use middle::weak_lang_items;\n use middle::subst::Substs;\n-use middle::ty::{self, Ty, ClosureTyper, HasTypeFlags};\n+use middle::ty::{self, Ty, HasTypeFlags};\n use rustc::ast_map;\n use session::config::{self, NoDebugInfo};\n use session::Session;"}, {"sha": "5fd0f92400f843f10d260eee5f3fc23ce7fd8fc7", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -11,7 +11,6 @@\n use arena::TypedArena;\n use back::link::{self, mangle_internal_name_by_path_and_seq};\n use llvm::{ValueRef, get_params};\n-use middle::mem_categorization::Typer;\n use middle::infer;\n use trans::adt;\n use trans::attributes;\n@@ -26,7 +25,7 @@ use trans::declare;\n use trans::expr;\n use trans::monomorphize::{self, MonoId};\n use trans::type_of::*;\n-use middle::ty::{self, ClosureTyper};\n+use middle::ty;\n use middle::subst::Substs;\n use session::config::FullDebugInfo;\n "}, {"sha": "6dffb3fe2a71331deb274a5badc81e9d98894719", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -22,8 +22,6 @@ use middle::cfg;\n use middle::def;\n use middle::infer;\n use middle::lang_items::LangItem;\n-use middle::mem_categorization::Typer;\n-use middle::ty::ClosureTyper;\n use middle::region;\n use middle::subst::{self, Substs};\n use trans::base;\n@@ -872,7 +870,7 @@ pub fn fulfill_obligation<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // Do the initial selection for the obligation. This yields the\n     // shallow result we are looking for -- that is, what specific impl.\n     let infcx = infer::normalizing_infer_ctxt(tcx, &tcx.tables);\n-    let mut selcx = traits::SelectionContext::new(&infcx, &infcx);\n+    let mut selcx = traits::SelectionContext::new(&infcx);\n \n     let obligation =\n         traits::Obligation::new(traits::ObligationCause::misc(span, ast::DUMMY_NODE_ID),\n@@ -931,7 +929,7 @@ pub fn normalize_and_test_predicates<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     let tcx = ccx.tcx();\n     let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, true);\n-    let mut selcx = traits::SelectionContext::new(&infcx, &infcx);\n+    let mut selcx = traits::SelectionContext::new(&infcx);\n     let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n     let cause = traits::ObligationCause::dummy();\n     let traits::Normalized { value: predicates, obligations } =\n@@ -979,12 +977,11 @@ pub fn drain_fulfillment_cx<'a,'tcx,T>(infcx: &infer::InferCtxt<'a,'tcx>,\n {\n     debug!(\"drain_fulfillment_cx(result={:?})\",\n            result);\n-    // this is stupid but temporary\n-    let typer: &ClosureTyper<'tcx> = infcx;\n+\n     // In principle, we only need to do this so long as `result`\n     // contains unbound type parameters. It could be a slight\n     // optimization to stop iterating early.\n-    match fulfill_cx.select_all_or_error(infcx, typer) {\n+    match fulfill_cx.select_all_or_error(infcx) {\n         Ok(()) => { }\n         Err(errors) => {\n             return Err(errors);"}, {"sha": "f7b0f37c9ff78bbbb337417310adede676f60942", "filename": "src/librustc_trans/trans/debuginfo/gdb.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fgdb.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -16,7 +16,6 @@ use llvm::ValueRef;\n use trans::common::{C_bytes, CrateContext};\n use trans::declare;\n use trans::type_::Type;\n-use middle::ty::ClosureTyper;\n use session::config::NoDebugInfo;\n \n use std::ffi::CString;"}, {"sha": "45349969a0b3e33000f5570f3bfe36e8a3d5cd57", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -32,7 +32,7 @@ use trans::{type_of, adt, machine, monomorphize};\n use trans::common::{self, CrateContext, FunctionContext, Block};\n use trans::_match::{BindingInfo, TrByCopy, TrByMove, TrByRef};\n use trans::type_::Type;\n-use middle::ty::{self, Ty, ClosureTyper};\n+use middle::ty::{self, Ty};\n use session::config::{self, FullDebugInfo};\n use util::nodemap::FnvHashMap;\n use util::common::path2cstr;"}, {"sha": "ebe5e832e6fb288cfbb730601815841b4285ba3e", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -30,7 +30,7 @@ use rustc::ast_map;\n use trans::common::{NodeIdAndSpan, CrateContext, FunctionContext, Block};\n use trans;\n use trans::monomorphize;\n-use middle::ty::{Ty, ClosureTyper};\n+use middle::ty::Ty; \n use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use util::nodemap::{DefIdMap, NodeMap, FnvHashMap, FnvHashSet};\n "}, {"sha": "8b33acdee8e25db5e1517d2b409039aeeef41325", "filename": "src/librustc_trans/trans/debuginfo/namespace.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fnamespace.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -16,7 +16,6 @@ use llvm;\n use llvm::debuginfo::DIScope;\n use rustc::ast_map;\n use trans::common::CrateContext;\n-use middle::ty::ClosureTyper;\n \n use std::ffi::CString;\n use std::ptr;"}, {"sha": "f411688319981a72bc551ed8e6c317d8f9f5fb55", "filename": "src/librustc_trans/trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -14,7 +14,7 @@ use super::namespace::crate_root_namespace;\n \n use trans::common::CrateContext;\n use middle::subst::{self, Substs};\n-use middle::ty::{self, Ty, ClosureTyper};\n+use middle::ty::{self, Ty};\n \n use syntax::ast;\n use syntax::parse::token;\n@@ -225,4 +225,3 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         output.push('>');\n     }\n }\n-"}, {"sha": "b29da9d560fea89a6eda936982b4ab4f67f341f8", "filename": "src/librustc_trans/trans/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdeclare.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -20,7 +20,7 @@\n //! * Use define_* family of methods when you might be defining the ValueRef.\n //! * When in doubt, define.\n use llvm::{self, ValueRef};\n-use middle::ty::{self, ClosureTyper};\n+use middle::ty;\n use middle::infer;\n use syntax::abi;\n use trans::attributes;"}, {"sha": "39bb9b25be76ea135437a401eeafc1c90f85a01b", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -56,7 +56,6 @@ use llvm::{self, ValueRef, TypeKind};\n use middle::check_const;\n use middle::def;\n use middle::lang_items::CoerceUnsizedTraitLangItem;\n-use middle::mem_categorization::Typer;\n use middle::subst::{Substs, VecPerParamSpace};\n use middle::traits;\n use trans::{_match, adt, asm, base, callee, closure, consts, controlflow};"}, {"sha": "1b01fb6c7f86d903d06d45209f4fa43d96ff8a98", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -17,7 +17,6 @@ use middle::subst::{Subst, Substs};\n use middle::subst::VecPerParamSpace;\n use middle::subst;\n use middle::traits;\n-use middle::ty::ClosureTyper;\n use rustc::ast_map;\n use trans::base::*;\n use trans::build::*;"}, {"sha": "3ef72e2c4af3ab7218cf9e7f4e4c078f4f56a78c", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -322,10 +322,8 @@ pub fn normalize_associated_type<'tcx,T>(tcx: &ty::ctxt<'tcx>, value: &T) -> T\n     }\n \n     // FIXME(#20304) -- cache\n-    // NOTE: @jroesch\n-    // Here is of an example where we do not use a param_env but use a typer instead.\n     let infcx = infer::normalizing_infer_ctxt(tcx, &tcx.tables);\n-    let mut selcx = traits::SelectionContext::new(&infcx, &infcx);\n+    let mut selcx = traits::SelectionContext::new(&infcx);\n     let cause = traits::ObligationCause::dummy();\n     let traits::Normalized { value: result, obligations } =\n         traits::normalize(&mut selcx, cause, &value);"}, {"sha": "75263c35d595822f33562b7fe6613ef8071d2b90", "filename": "src/librustc_typeck/check/assoc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -11,13 +11,13 @@\n use middle::infer::InferCtxt;\n use middle::traits::{self, FulfillmentContext, Normalized, MiscObligation,\n                      SelectionContext, ObligationCause};\n-use middle::ty::{self, HasTypeFlags};\n+use middle::ty::HasTypeFlags;\n use middle::ty_fold::TypeFoldable;\n use syntax::ast;\n use syntax::codemap::Span;\n \n+//FIME(@jroesch): Refactor this\n pub fn normalize_associated_types_in<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n-                                                typer: &(ty::ClosureTyper<'tcx>+'a),\n                                                 fulfillment_cx: &mut FulfillmentContext<'tcx>,\n                                                 span: Span,\n                                                 body_id: ast::NodeId,\n@@ -26,7 +26,7 @@ pub fn normalize_associated_types_in<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n     where T : TypeFoldable<'tcx> + HasTypeFlags\n {\n     debug!(\"normalize_associated_types_in(value={:?})\", value);\n-    let mut selcx = SelectionContext::new(infcx, typer);\n+    let mut selcx = SelectionContext::new(infcx);\n     let cause = ObligationCause::new(span, body_id, MiscObligation);\n     let Normalized { value: result, obligations } = traits::normalize(&mut selcx, cause, value);\n     debug!(\"normalize_associated_types_in: result={:?} predicates={:?}\","}, {"sha": "f32a4fe43d6964da162e8a9835aa47350c1b9ac8", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -27,7 +27,7 @@ use super::write_call;\n \n use CrateCtxt;\n use middle::infer;\n-use middle::ty::{self, Ty, ClosureTyper};\n+use middle::ty::{self, Ty};\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::parse::token;"}, {"sha": "a0abef74907037156fb69f7567b939a5e98d0b3a", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -273,7 +273,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         };\n         let source = source.adjust_for_autoref(self.tcx(), reborrow);\n \n-        let mut selcx = traits::SelectionContext::new(self.fcx.infcx(), self.fcx.infcx());\n+        let mut selcx = traits::SelectionContext::new(self.fcx.infcx());\n \n         // Use a FIFO queue for this custom fulfillment procedure.\n         let mut queue = VecDeque::new();"}, {"sha": "7926394ebb5176cfe976064870d0e4813bc8f3f9", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -246,7 +246,7 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n     debug!(\"compare_impl_method: trait_bounds={:?}\",\n         infcx.parameter_environment.caller_bounds);\n \n-    let mut selcx = traits::SelectionContext::new(&infcx, &infcx);\n+    let mut selcx = traits::SelectionContext::new(&infcx);\n \n     for predicate in impl_pred.fns {\n         let traits::Normalized { value: predicate, .. } =\n@@ -293,7 +293,6 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n             impl_sig.subst(tcx, impl_to_skol_substs);\n         let impl_sig =\n             assoc::normalize_associated_types_in(&infcx,\n-                                                 &infcx,\n                                                  &mut fulfillment_cx,\n                                                  impl_m_span,\n                                                  impl_m_body_id,\n@@ -312,7 +311,6 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n             trait_sig.subst(tcx, &trait_to_skol_substs);\n         let trait_sig =\n             assoc::normalize_associated_types_in(&infcx,\n-                                                 &infcx,\n                                                  &mut fulfillment_cx,\n                                                  impl_m_span,\n                                                  impl_m_body_id,\n@@ -347,7 +345,7 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n     // Check that all obligations are satisfied by the implementation's\n     // version.\n-    match fulfillment_cx.select_all_or_error(&infcx, &infcx) {\n+    match fulfillment_cx.select_all_or_error(&infcx) {\n         Err(ref errors) => { traits::report_fulfillment_errors(&infcx, errors) }\n         Ok(_) => {}\n     }\n@@ -456,21 +454,21 @@ pub fn compare_const_impl<'tcx>(tcx: &ty::ctxt<'tcx>,\n         // There is no \"body\" here, so just pass dummy id.\n         let impl_ty =\n             assoc::normalize_associated_types_in(&infcx,\n-                                                 &infcx,\n                                                  &mut fulfillment_cx,\n                                                  impl_c_span,\n                                                  0,\n                                                  &impl_ty);\n+\n         debug!(\"compare_const_impl: impl_ty={:?}\",\n                impl_ty);\n \n         let trait_ty =\n             assoc::normalize_associated_types_in(&infcx,\n-                                                 &infcx,\n                                                  &mut fulfillment_cx,\n                                                  impl_c_span,\n                                                  0,\n                                                  &trait_ty);\n+\n         debug!(\"compare_const_impl: trait_ty={:?}\",\n                trait_ty);\n "}, {"sha": "7a887fac9d402b3d0a9a92e634899fe82bb7f569", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -12,7 +12,6 @@ use super::probe;\n \n use check::{self, FnCtxt, NoPreference, PreferMutLvalue, callee, demand};\n use check::UnresolvedTypeAction;\n-use middle::mem_categorization::Typer;\n use middle::subst::{self};\n use middle::traits;\n use middle::ty::{self, Ty};"}, {"sha": "7ed5c69ad61577ea02c93c69b0e0af14aa77afd0", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -195,7 +195,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                               poly_trait_ref.to_predicate());\n \n     // Now we want to know if this can be matched\n-    let mut selcx = traits::SelectionContext::new(fcx.infcx(), fcx.infcx());\n+    let mut selcx = traits::SelectionContext::new(fcx.infcx());\n     if !selcx.evaluate_obligation(&obligation) {\n         debug!(\"--> Cannot match obligation\");\n         return None; // Cannot be matched, no such method resolution is possible."}, {"sha": "8eb4716cb2a690ea13b251d027401fdcf155b9be", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -421,7 +421,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         // We can't use normalize_associated_types_in as it will pollute the\n         // fcx's fulfillment context after this probe is over.\n         let cause = traits::ObligationCause::misc(self.span, self.fcx.body_id);\n-        let mut selcx = &mut traits::SelectionContext::new(self.fcx.infcx(), self.fcx.infcx());\n+        let mut selcx = &mut traits::SelectionContext::new(self.fcx.infcx());\n         let traits::Normalized { value: xform_self_ty, obligations } =\n             traits::normalize(selcx, cause, &xform_self_ty);\n         debug!(\"assemble_inherent_impl_probe: xform_self_ty = {:?}\",\n@@ -681,7 +681,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             // as it will pollute the fcx's fulfillment context after this probe\n             // is over.\n             let cause = traits::ObligationCause::misc(self.span, self.fcx.body_id);\n-            let mut selcx = &mut traits::SelectionContext::new(self.fcx.infcx(), self.fcx.infcx());\n+            let mut selcx = &mut traits::SelectionContext::new(self.fcx.infcx());\n             let traits::Normalized { value: xform_self_ty, obligations } =\n                 traits::normalize(selcx, cause, &xform_self_ty);\n \n@@ -1076,7 +1076,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n             match probe.kind {\n                 InherentImplCandidate(impl_def_id, ref substs, ref ref_obligations) |\n                 ExtensionImplCandidate(impl_def_id, _, ref substs, _, ref ref_obligations) => {\n-                    let selcx = &mut traits::SelectionContext::new(self.infcx(), self.fcx.infcx());\n+                    let selcx = &mut traits::SelectionContext::new(self.infcx());\n                     let cause = traits::ObligationCause::misc(self.span, self.fcx.body_id);\n \n                     // Check whether the impl imposes obligations we have to worry about."}, {"sha": "d6a8b3583f8ca74ff54b5cce6eecf8a597529679", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -102,7 +102,7 @@ pub fn report_error<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                             let obligation = Obligation::misc(span,\n                                                               fcx.body_id,\n                                                               poly_trait_ref.to_predicate());\n-                            let mut selcx = SelectionContext::new(infcx, fcx.infcx());\n+                            let mut selcx = SelectionContext::new(infcx);\n \n                             if selcx.evaluate_obligation(&obligation) {\n                                 span_stored_function();"}, {"sha": "477b6e9825689e3dd21a6fcca0eb17af2dad211d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -305,7 +305,6 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n     }\n \n     fn normalize_associated_types_in<T>(&self,\n-                                        typer: &ty::ClosureTyper<'tcx>,\n                                         span: Span,\n                                         body_id: ast::NodeId,\n                                         value: &T)\n@@ -314,7 +313,6 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n     {\n         let mut fulfillment_cx = self.infcx.fulfillment_cx.borrow_mut();\n         assoc::normalize_associated_types_in(&self.infcx,\n-                                             typer,\n                                              &mut fulfillment_cx,\n                                              span,\n                                              body_id,\n@@ -431,8 +429,7 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                 ccx.tcx.liberate_late_bound_regions(region::DestructionScopeData::new(body.id),\n                                                     &fn_sig);\n             let fn_sig =\n-                inh.normalize_associated_types_in(&inh.infcx,\n-                                                  body.span,\n+                inh.normalize_associated_types_in(body.span,\n                                                   body.id,\n                                                   &fn_sig);\n \n@@ -1377,7 +1374,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn normalize_associated_types_in<T>(&self, span: Span, value: &T) -> T\n         where T : TypeFoldable<'tcx> + HasTypeFlags\n     {\n-        self.inh.normalize_associated_types_in(self.infcx(), span, self.body_id, value)\n+        self.inh.normalize_associated_types_in(span, self.body_id, value)\n     }\n \n     fn normalize_associated_type(&self,\n@@ -1394,7 +1391,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .fulfillment_cx\n             .borrow_mut()\n             .normalize_projection_type(self.infcx(),\n-                                       self.infcx(),\n                                        ty::ProjectionTy {\n                                            trait_ref: trait_ref,\n                                            item_name: item_name,\n@@ -1504,7 +1500,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                      -> bool\n     {\n         traits::type_known_to_meet_builtin_bound(self.infcx(),\n-                                                 self.infcx(),\n                                                  ty,\n                                                  ty::BoundSized,\n                                                  span)\n@@ -1750,7 +1745,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.select_all_obligations_and_apply_defaults();\n         let mut fulfillment_cx = self.inh.infcx.fulfillment_cx.borrow_mut();\n-        match fulfillment_cx.select_all_or_error(self.infcx(), self.infcx()) {\n+        match fulfillment_cx.select_all_or_error(self.infcx()) {\n             Ok(()) => { }\n             Err(errors) => { report_fulfillment_errors(self.infcx(), &errors); }\n         }\n@@ -1761,7 +1756,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match\n             self.inh.infcx.fulfillment_cx\n             .borrow_mut()\n-            .select_where_possible(self.infcx(), self.infcx())\n+            .select_where_possible(self.infcx())\n         {\n             Ok(()) => { }\n             Err(errors) => { report_fulfillment_errors(self.infcx(), &errors); }\n@@ -1776,7 +1771,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match\n             self.inh.infcx.fulfillment_cx\n             .borrow_mut()\n-            .select_new_obligations(self.infcx(), self.infcx())\n+            .select_new_obligations(self.infcx())\n         {\n             Ok(()) => { }\n             Err(errors) => { report_fulfillment_errors(self.infcx(), &errors); }"}, {"sha": "bb3c9f9fb542508d4818f075648abbded17cf733", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -86,13 +86,12 @@ use astconv::AstConv;\n use check::dropck;\n use check::FnCtxt;\n use middle::free_region::FreeRegionMap;\n-use middle::infer::InferCtxt;\n use middle::implicator;\n use middle::mem_categorization as mc;\n use middle::region::CodeExtent;\n use middle::subst::Substs;\n use middle::traits;\n-use middle::ty::{self, ClosureTyper, ReScope, Ty, MethodCall, HasTypeFlags};\n+use middle::ty::{self, ReScope, Ty, MethodCall, HasTypeFlags};\n use middle::infer::{self, GenericKind};\n use middle::pat_util;\n \n@@ -360,7 +359,7 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n             debug!(\"relate_free_regions(t={:?})\", ty);\n             let body_scope = CodeExtent::from_node_id(body_id);\n             let body_scope = ty::ReScope(body_scope);\n-            let implications = implicator::implications(self.fcx.infcx(), self.fcx.infcx(), body_id,\n+            let implications = implicator::implications(self.fcx.infcx(), body_id,\n                                                         ty, body_scope, span);\n \n             // Record any relations between free regions that we observe into the free-region-map.\n@@ -1409,7 +1408,7 @@ pub fn type_must_outlive<'a, 'tcx>(rcx: &mut Rcx<'a, 'tcx>,\n            ty,\n            region);\n \n-    let implications = implicator::implications(rcx.fcx.infcx(), rcx.fcx.infcx(), rcx.body_id,\n+    let implications = implicator::implications(rcx.fcx.infcx(), rcx.body_id,\n                                                 ty, region, origin.span());\n     for implication in implications {\n         debug!(\"implication: {:?}\", implication);"}, {"sha": "7cf7d73a5668c4e1a81a6b5fc5e84fbb5a7896ca", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -268,7 +268,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             let predicates = fcx.tcx().lookup_super_predicates(poly_trait_ref.def_id());\n             let predicates = predicates.instantiate_supertrait(fcx.tcx(), &poly_trait_ref);\n             let predicates = {\n-                let selcx = &mut traits::SelectionContext::new(fcx.infcx(), fcx.infcx());\n+                let selcx = &mut traits::SelectionContext::new(fcx.infcx());\n                 traits::normalize(selcx, cause.clone(), &predicates)\n             };\n             for predicate in predicates.value.predicates {"}, {"sha": "fca23a1b029a863343802e644eda80893007705c", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9faae6a5ca1c5579a8185138b1e534285324db87/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=9faae6a5ca1c5579a8185138b1e534285324db87", "patch": "@@ -540,8 +540,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n             fulfill_cx.register_predicate_obligation(&infcx, predicate);\n \n             // Check that all transitive obligations are satisfied.\n-            if let Err(errors) = fulfill_cx.select_all_or_error(&infcx,\n-                                                                &infcx) {\n+            if let Err(errors) = fulfill_cx.select_all_or_error(&infcx) {\n                 traits::report_fulfillment_errors(&infcx, &errors);\n             }\n "}]}