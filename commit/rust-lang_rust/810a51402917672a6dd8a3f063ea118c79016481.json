{"sha": "810a51402917672a6dd8a3f063ea118c79016481", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMGE1MTQwMjkxNzY3MmE2ZGQ4YTNmMDYzZWExMThjNzkwMTY0ODE=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-02-16T19:00:57Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-02-16T19:00:57Z"}, "message": "Add crates to search-index", "tree": {"sha": "4ad5ba3810baa1596dde9b57dba600ef0c32b4a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ad5ba3810baa1596dde9b57dba600ef0c32b4a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/810a51402917672a6dd8a3f063ea118c79016481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/810a51402917672a6dd8a3f063ea118c79016481", "html_url": "https://github.com/rust-lang/rust/commit/810a51402917672a6dd8a3f063ea118c79016481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/810a51402917672a6dd8a3f063ea118c79016481/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a7913786c2e1923e30faf7c6eb680546259653c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a7913786c2e1923e30faf7c6eb680546259653c", "html_url": "https://github.com/rust-lang/rust/commit/9a7913786c2e1923e30faf7c6eb680546259653c"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "2a97ac81ea9b6144ad94aa6e765642af2fd2c029", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/810a51402917672a6dd8a3f063ea118c79016481/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810a51402917672a6dd8a3f063ea118c79016481/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=810a51402917672a6dd8a3f063ea118c79016481", "patch": "@@ -52,7 +52,7 @@ use std::sync::Arc;\n \n use externalfiles::ExternalHtml;\n \n-use serialize::json::{self, ToJson};\n+use serialize::json::as_json;\n use syntax::{abi, ast};\n use syntax::feature_gate::UnstableFeatures;\n use rustc::middle::cstore::LOCAL_CRATE;\n@@ -534,8 +534,8 @@ pub fn run(mut krate: clean::Crate,\n     cx.krate(krate)\n }\n \n+/// Build the search index from the collected metadata\n fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n-    // Build the search index from the collected metadata\n     let mut nodeid_to_pathid = HashMap::new();\n     let mut pathid_to_nodeid = Vec::new();\n     {\n@@ -582,7 +582,13 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n \n     // Collect the index into a string\n     let mut w = io::Cursor::new(Vec::new());\n-    write!(&mut w, r#\"searchIndex['{}'] = {{\"items\":[\"#, krate.name).unwrap();\n+    let krate_doc = krate.module.as_ref().map(|module| {\n+        Escape(&shorter(module.doc_value())).to_string()\n+    }).unwrap_or(\"\".to_owned());\n+\n+    write!(&mut w, r#\"searchIndex[{}] = {{doc: {}, \"items\":[\"#,\n+                   as_json(&krate.name),\n+                   as_json(&krate_doc)).unwrap();\n \n     let mut lastpath = \"\".to_string();\n     for (i, item) in cache.search_index.iter().enumerate() {\n@@ -598,9 +604,9 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n         if i > 0 {\n             write!(&mut w, \",\").unwrap();\n         }\n-        write!(&mut w, r#\"[{},\"{}\",\"{}\",{}\"#,\n-               item.ty as usize, item.name, path,\n-               item.desc.to_json().to_string()).unwrap();\n+        write!(&mut w, \"[{},{},{},{}\",\n+               item.ty as usize,\n+               as_json(&item.name), as_json(&path), as_json(&item.desc)).unwrap();\n         match item.parent {\n             Some(nodeid) => {\n                 let pathid = *nodeid_to_pathid.get(&nodeid).unwrap();\n@@ -693,7 +699,7 @@ fn write_shared(cx: &Context,\n                 if !line.starts_with(key) {\n                     continue\n                 }\n-                if line.starts_with(&format!(\"{}['{}']\", key, krate)) {\n+                if line.starts_with(&format!(r#\"{}[\"{}\"]\"#, key, krate)) {\n                     continue\n                 }\n                 ret.push(line.to_string());\n@@ -1387,7 +1393,7 @@ impl Context {\n                         let js_dst = this.dst.join(\"sidebar-items.js\");\n                         let mut js_out = BufWriter::new(try_err!(File::create(&js_dst), &js_dst));\n                         try_err!(write!(&mut js_out, \"initSidebarItems({});\",\n-                                    json::as_json(&items)), &js_dst);\n+                                    as_json(&items)), &js_dst);\n                     }\n \n                     for item in m.items {"}, {"sha": "95fa2cac210a831102768b63ab8670a86a56eca6", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/810a51402917672a6dd8a3f063ea118c79016481/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/810a51402917672a6dd8a3f063ea118c79016481/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=810a51402917672a6dd8a3f063ea118c79016481", "patch": "@@ -580,6 +580,9 @@\n                         displayPath = \"\";\n                         href = rootPath + item.path.replace(/::/g, '/') +\n                                '/' + type + '.' + name + '.html';\n+                    } else if (type === \"externcrate\") {\n+                        displayPath = \"\";\n+                        href = rootPath + name + '/index.html';\n                     } else if (item.parent !== undefined) {\n                         var myparent = item.parent;\n                         var anchor = '#' + type + '.' + name;\n@@ -678,6 +681,16 @@\n             for (var crate in rawSearchIndex) {\n                 if (!rawSearchIndex.hasOwnProperty(crate)) { continue; }\n \n+                searchWords.push(crate);\n+                searchIndex.push({\n+                    crate: crate,\n+                    ty: 1, // == ExternCrate\n+                    name: crate,\n+                    path: \"\",\n+                    desc: rawSearchIndex[crate].doc,\n+                    type: null,\n+                });\n+\n                 // an array of [(Number) item type,\n                 //              (String) name,\n                 //              (String) full path or empty string for previous path,"}, {"sha": "5c073860f08ca78c5b6a3958e68fffe72ec5a3c1", "filename": "src/librustdoc/html/static/styles/main.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/810a51402917672a6dd8a3f063ea118c79016481/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/810a51402917672a6dd8a3f063ea118c79016481/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css?ref=810a51402917672a6dd8a3f063ea118c79016481", "patch": "@@ -82,7 +82,7 @@ pre {\n }\n \n .content a.primitive { color: #39a7bf; }\n-.content span.mod, .content a.mod, block a.current.mod { color: #4d76ae; }\n+.content span.externcrate, span.mod, .content a.mod, block a.current.mod { color: #4d76ae; }\n .content span.fn, .content a.fn, .block a.current.fn,\n .content span.method, .content a.method, .block a.current.method,\n .content span.tymethod, .content a.tymethod, .block a.current.tymethod,"}]}