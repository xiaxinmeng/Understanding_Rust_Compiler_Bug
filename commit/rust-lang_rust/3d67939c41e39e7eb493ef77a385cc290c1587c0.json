{"sha": "3d67939c41e39e7eb493ef77a385cc290c1587c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNjc5MzljNDFlMzllN2ViNDkzZWY3N2EzODVjYzI5MGMxNTg3YzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-02T23:17:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-02T23:17:27Z"}, "message": "rustdoc: Begin constructing indexes", "tree": {"sha": "9236088e07ff3b9a17981be042042160b6c70582", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9236088e07ff3b9a17981be042042160b6c70582"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d67939c41e39e7eb493ef77a385cc290c1587c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d67939c41e39e7eb493ef77a385cc290c1587c0", "html_url": "https://github.com/rust-lang/rust/commit/3d67939c41e39e7eb493ef77a385cc290c1587c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d67939c41e39e7eb493ef77a385cc290c1587c0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3923c8ee8936b2fc6f5a4e9df193f24adebf4703", "url": "https://api.github.com/repos/rust-lang/rust/commits/3923c8ee8936b2fc6f5a4e9df193f24adebf4703", "html_url": "https://github.com/rust-lang/rust/commit/3923c8ee8936b2fc6f5a4e9df193f24adebf4703"}], "stats": {"total": 153, "additions": 130, "deletions": 23}, "files": [{"sha": "ceca4cb5a72a77f1e0a500a434aef12a951408ff", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d67939c41e39e7eb493ef77a385cc290c1587c0/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d67939c41e39e7eb493ef77a385cc290c1587c0/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=3d67939c41e39e7eb493ef77a385cc290c1587c0", "patch": "@@ -122,14 +122,12 @@ Fields:\n \n * kind - The type of thing being indexed, e.g. 'Module'\n * name - The name of the thing\n-* brief - A description\n * link - A format-specific string representing the link target\n \n \"]\n type index_entry = {\n     kind: str,\n     name: str,\n-    brief: str,\n     link: str\n };\n "}, {"sha": "021274f60524dd0af08d292214836089f56ab0b1", "filename": "src/rustdoc/markdown_index_pass.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/3d67939c41e39e7eb493ef77a385cc290c1587c0/src%2Frustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d67939c41e39e7eb493ef77a385cc290c1587c0/src%2Frustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_index_pass.rs?ref=3d67939c41e39e7eb493ef77a385cc290c1587c0", "patch": "@@ -0,0 +1,92 @@\n+#[doc = \"Build indexes as appropriate for the markdown pass\"];\n+\n+export mk_pass;\n+\n+fn mk_pass() -> pass {\n+    {\n+        name: \"markdown_index\",\n+        f: run\n+    }\n+}\n+\n+fn run(_srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n+    let fold = fold::fold({\n+        fold_mod: fold_mod\n+            with *fold::default_any_fold(())\n+    });\n+    fold.fold_crate(fold, doc)\n+}\n+\n+fn fold_mod(fold: fold::fold<()>, doc: doc::moddoc) -> doc::moddoc {\n+\n+    let doc = fold::default_any_fold_mod(fold, doc);\n+\n+    {\n+        index: some(build_index(doc))\n+        with doc\n+    }\n+}\n+\n+fn build_index(doc: doc::moddoc) -> doc::index {\n+    {\n+        entries: par::anymap(doc.items, item_to_entry)\n+    }\n+}\n+\n+fn item_to_entry(doc: doc::itemtag) -> doc::index_entry {\n+    {\n+        kind: markdown_pass::header_kind(doc),\n+        name: markdown_pass::header_name(doc),\n+        link: pandoc_header_id(markdown_pass::header_text(doc))\n+    }\n+}\n+\n+fn pandoc_header_id(header: str) -> str {\n+\n+    // http://johnmacfarlane.net/pandoc/README.html#headers\n+\n+    let header = remove_formatting(header);\n+    let header = remove_punctuation(header);\n+    let header = replace_with_hyphens(header);\n+    let header = convert_to_lowercase(header);\n+    let header = remove_up_to_first_letter(header);\n+    let header = maybe_use_section_id(header);\n+    ret header;\n+\n+    fn remove_formatting(s: str) -> str { s }\n+    fn remove_punctuation(s: str) -> str {\n+        str::replace(s, \"`\", \"\")\n+    }\n+    fn replace_with_hyphens(s: str) -> str {\n+        str::replace(s, \" \", \"-\")\n+    }\n+    fn convert_to_lowercase(s: str) -> str { str::to_lower(s) }\n+    fn remove_up_to_first_letter(s: str) -> str { s }\n+    fn maybe_use_section_id(s: str) -> str { s }\n+}\n+\n+#[test]\n+fn should_index_mod_contents() {\n+    let doc = test::mk_doc(\"mod a { } fn b() { }\");\n+    assert option::get(doc.topmod.index).entries[0] == {\n+        kind: \"Module\",\n+        name: \"a\",\n+        link: \"module-a\"\n+    };\n+    assert option::get(doc.topmod.index).entries[1] == {\n+        kind: \"Function\",\n+        name: \"b\",\n+        link: \"function-b\"\n+    };\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    fn mk_doc(source: str) -> doc::cratedoc {\n+        astsrv::from_str(source) {|srv|\n+            let doc = extract::from_srv(srv, \"\");\n+            let doc = path_pass::mk_pass().f(srv, doc);\n+            run(srv, doc)\n+        }\n+    }\n+}"}, {"sha": "42d0681c35771f457a38281a0831ed6790a828c5", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3d67939c41e39e7eb493ef77a385cc290c1587c0/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d67939c41e39e7eb493ef77a385cc290c1587c0/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=3d67939c41e39e7eb493ef77a385cc290c1587c0", "patch": "@@ -4,6 +4,7 @@ import markdown_writer::writer;\n import markdown_writer::writer_util;\n \n export mk_pass;\n+export header_kind, header_name, header_text;\n \n fn mk_pass(config: config::config) -> pass {\n     mk_pass_(config, markdown_writer::make_writer(config))\n@@ -116,59 +117,73 @@ fn write_header_(ctxt: ctxt, lvl: hlvl, title: str) {\n     ctxt.w.write_line(\"\");\n }\n \n-fn header_text(doc: doc::itemtag) -> str {\n-    let fullpath = str::connect(doc.path() + [doc.name()], \"::\");\n+fn header_kind(doc: doc::itemtag) -> str {\n     alt doc {\n       doc::modtag(_) {\n         if doc.id() == rustc::syntax::ast::crate_node_id {\n-            header_text_(\"Crate\", doc.name())\n+            \"Crate\"\n         } else {\n-            header_text_(\"Module\", fullpath)\n+            \"Module\"\n         }\n       }\n       doc::nmodtag(_) {\n-        header_text_(\"Native module\", fullpath)\n+        \"Native module\"\n       }\n       doc::fntag(_) {\n-        header_text_(\"Function\", doc.name())\n+        \"Function\"\n       }\n       doc::consttag(_) {\n-        header_text_(\"Const\", doc.name())\n+        \"Const\"\n       }\n       doc::enumtag(_) {\n-        header_text_(\"Enum\", doc.name())\n+        \"Enum\"\n       }\n       doc::restag(_) {\n-        header_text_(\"Resource\", doc.name())\n+        \"Resource\"\n       }\n       doc::ifacetag(_) {\n-        header_text_(\"Interface\", doc.name())\n+        \"Interface\"\n+      }\n+      doc::impltag(doc) {\n+        \"Implementation\"\n+      }\n+      doc::tytag(_) {\n+        \"Type\"\n+      }\n+    }\n+}\n+\n+fn header_name(doc: doc::itemtag) -> str {\n+    let fullpath = str::connect(doc.path() + [doc.name()], \"::\");\n+    alt doc {\n+      doc::modtag(_) if doc.id() != rustc::syntax::ast::crate_node_id {\n+        fullpath\n+      }\n+      doc::nmodtag(_) {\n+        fullpath\n       }\n       doc::impltag(doc) {\n         assert option::is_some(doc.self_ty);\n         let self_ty = option::get(doc.self_ty);\n         alt doc.iface_ty {\n           some(iface_ty) {\n-            header_text_(\n-                \"Implementation\",\n-                #fmt(\"%s of %s for %s\",\n-                     doc.name(), iface_ty, self_ty)\n-            )\n+            #fmt(\"%s of %s for %s\", doc.name(), iface_ty, self_ty)\n           }\n           none {\n-            header_text_(\n-                \"Implementation\",\n-                #fmt(\"%s for %s\", doc.name(), self_ty)\n-            )\n+            #fmt(\"%s for %s\", doc.name(), self_ty)\n           }\n         }\n       }\n-      doc::tytag(_) {\n-        header_text_(\"Type\", doc.name())\n+      _ {\n+        doc.name()\n       }\n     }\n }\n \n+fn header_text(doc: doc::itemtag) -> str {\n+    header_text_(header_kind(doc), header_name(doc))\n+}\n+\n fn header_text_(kind: str, name: str) -> str {\n     #fmt(\"%s `%s`\", kind, name)\n }"}, {"sha": "69a95cfd24c93e8e18b95fe31c7af77a904b57f1", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d67939c41e39e7eb493ef77a385cc290c1587c0/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3d67939c41e39e7eb493ef77a385cc290c1587c0/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=3d67939c41e39e7eb493ef77a385cc290c1587c0", "patch": "@@ -17,6 +17,7 @@ mod parse;\n mod extract;\n mod attr_parser;\n mod doc;\n+mod markdown_index_pass;\n mod markdown_pass;\n mod markdown_writer;\n mod fold;"}, {"sha": "df0e014eb41cc0c61fbbd9dba505ba8c7d6ffdf9", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d67939c41e39e7eb493ef77a385cc290c1587c0/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d67939c41e39e7eb493ef77a385cc290c1587c0/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=3d67939c41e39e7eb493ef77a385cc290c1587c0", "patch": "@@ -147,6 +147,7 @@ fn run(config: config::config) {\n             unindent_pass::mk_pass(),\n             sort_item_name_pass::mk_pass(),\n             sort_item_type_pass::mk_pass(),\n+            markdown_index_pass::mk_pass(),\n             markdown_pass::mk_pass(config)\n         ]);\n     }"}]}