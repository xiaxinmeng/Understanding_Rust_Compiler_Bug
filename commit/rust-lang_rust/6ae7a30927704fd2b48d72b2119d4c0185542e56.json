{"sha": "6ae7a30927704fd2b48d72b2119d4c0185542e56", "node_id": "C_kwDOAAsO6NoAKDZhZTdhMzA5Mjc3MDRmZDJiNDhkNzJiMjExOWQ0YzAxODU1NDJlNTY", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-15T08:12:09Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-27T18:29:18Z"}, "message": "Migrate \"invalid literal suffix\" diagnostic to diagnostic structs", "tree": {"sha": "088d9620f632d88cc1c3db6496e8291bbd28fa35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/088d9620f632d88cc1c3db6496e8291bbd28fa35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ae7a30927704fd2b48d72b2119d4c0185542e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae7a30927704fd2b48d72b2119d4c0185542e56", "html_url": "https://github.com/rust-lang/rust/commit/6ae7a30927704fd2b48d72b2119d4c0185542e56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ae7a30927704fd2b48d72b2119d4c0185542e56/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab7c7dc7ce422bfa2cdaf8ddd41b6260736a2e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7c7dc7ce422bfa2cdaf8ddd41b6260736a2e9f", "html_url": "https://github.com/rust-lang/rust/commit/ab7c7dc7ce422bfa2cdaf8ddd41b6260736a2e9f"}], "stats": {"total": 148, "additions": 83, "deletions": 65}, "files": [{"sha": "b93c5e75913256f978259e600c79a8a012851f72", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6ae7a30927704fd2b48d72b2119d4c0185542e56/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/6ae7a30927704fd2b48d72b2119d4c0185542e56/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=6ae7a30927704fd2b48d72b2119d4c0185542e56", "patch": "@@ -215,6 +215,15 @@ parser_octal_float_literal_not_supported = octal float literal is not supported\n parser_binary_float_literal_not_supported = binary float literal is not supported\n parser_not_supported = not supported\n \n+parser_invalid_literal_suffix = suffixes on {$kind} literals are invalid\n+    .label = invalid suffix `{$suffix}`\n+\n+parser_invalid_literal_suffix_on_tuple_index = suffixes on a tuple index are invalid\n+    .label = invalid suffix `{$suffix}`\n+    .tuple_exception_line_1 = `{$suffix}` is *temporarily* accepted on tuple index fields as it was incorrectly accepted on stable for a few releases\n+    .tuple_exception_line_2 = on proc macros, you'll want to use `syn::Index::from` or `proc_macro::Literal::*_unsuffixed` for code that will desugar to tuple field access\n+    .tuple_exception_line_3 = see issue #60210 <https://github.com/rust-lang/rust/issues/60210> for more information\n+\n parser_non_string_abi_literal = non-string ABI literal\n     .suggestion = specify the ABI with a string literal\n "}, {"sha": "c50ca9a2933eef0a26beb2dd44374846a8530424", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6ae7a30927704fd2b48d72b2119d4c0185542e56/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae7a30927704fd2b48d72b2119d4c0185542e56/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=6ae7a30927704fd2b48d72b2119d4c0185542e56", "patch": "@@ -24,7 +24,7 @@ use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n-use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n+use rustc_span::{Span, SpanSnippetError, Symbol, DUMMY_SP};\n use std::ops::{Deref, DerefMut};\n \n use std::mem::take;\n@@ -975,6 +975,30 @@ pub(crate) struct BinaryFloatLiteralNotSupported {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parser::invalid_literal_suffix)]\n+pub(crate) struct InvalidLiteralSuffix {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    // FIXME(#100717)\n+    pub kind: String,\n+    pub suffix: Symbol,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(parser::invalid_literal_suffix_on_tuple_index)]\n+pub(crate) struct InvalidLiteralSuffixOnTupleIndex {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub suffix: Symbol,\n+    #[help(parser::tuple_exception_line_1)]\n+    #[help(parser::tuple_exception_line_2)]\n+    #[help(parser::tuple_exception_line_3)]\n+    pub exception: Option<()>,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parser::non_string_abi_literal)]\n pub(crate) struct NonStringAbiLiteral {"}, {"sha": "f954dff9394f10bbf1b001867da5381af97b1e39", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 28, "deletions": 45, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/6ae7a30927704fd2b48d72b2119d4c0185542e56/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae7a30927704fd2b48d72b2119d4c0185542e56/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=6ae7a30927704fd2b48d72b2119d4c0185542e56", "patch": "@@ -6,13 +6,13 @@ use super::diagnostics::{\n     FloatLiteralRequiresIntegerPart, FoundExprWouldBeStmt, IfExpressionMissingCondition,\n     IfExpressionMissingThenBlock, IfExpressionMissingThenBlockSub, InvalidBlockMacroSegment,\n     InvalidComparisonOperator, InvalidComparisonOperatorSub, InvalidInterpolatedExpression,\n-    InvalidLogicalOperator, InvalidLogicalOperatorSub, LabeledLoopInBreak, LeftArrowOperator,\n-    LifetimeInBorrowExpression, MacroInvocationWithQualifiedPath, MalformedLoopLabel,\n-    MatchArmBodyWithoutBraces, MissingInInForLoop, MissingInInForLoopSub,\n-    MissingSemicolonBeforeArray, NoFieldsForFnCall, NotAsNegationOperator,\n-    NotAsNegationOperatorSub, OuterAttributeNotAllowedOnIfElse, ParenthesesWithStructFields,\n-    RequireColonAfterLabeledExpression, ShiftInterpretedAsGeneric, SnapshotParser,\n-    StructLiteralNotAllowedHere, TildeAsUnaryOperator, UnexpectedTokenAfterLabel,\n+    InvalidLiteralSuffix, InvalidLiteralSuffixOnTupleIndex, InvalidLogicalOperator,\n+    InvalidLogicalOperatorSub, LabeledLoopInBreak, LeftArrowOperator, LifetimeInBorrowExpression,\n+    MacroInvocationWithQualifiedPath, MalformedLoopLabel, MatchArmBodyWithoutBraces,\n+    MissingInInForLoop, MissingInInForLoopSub, MissingSemicolonBeforeArray, NoFieldsForFnCall,\n+    NotAsNegationOperator, NotAsNegationOperatorSub, OuterAttributeNotAllowedOnIfElse,\n+    ParenthesesWithStructFields, RequireColonAfterLabeledExpression, ShiftInterpretedAsGeneric,\n+    SnapshotParser, StructLiteralNotAllowedHere, TildeAsUnaryOperator, UnexpectedTokenAfterLabel,\n     UnexpectedTokenAfterLabelSugg,\n };\n use super::pat::{CommaRecoveryMode, RecoverColon, RecoverComma, PARAM_EXPECTED};\n@@ -1158,7 +1158,9 @@ impl<'a> Parser<'a> {\n         }\n         let span = self.prev_token.span;\n         let field = ExprKind::Field(base, Ident::new(field, span));\n-        self.expect_no_suffix(span, \"a tuple index\", suffix);\n+        if let Some(suffix) = suffix {\n+            self.expect_no_tuple_index_suffix(span, suffix);\n+        }\n         self.mk_expr(lo.to(span), field)\n     }\n \n@@ -1829,11 +1831,13 @@ impl<'a> Parser<'a> {\n             // by lexer, so here we don't report it the second time.\n             LitError::LexerError => {}\n             LitError::InvalidSuffix => {\n-                self.expect_no_suffix(\n-                    span,\n-                    &format!(\"{} {} literal\", kind.article(), kind.descr()),\n-                    suffix,\n-                );\n+                if let Some(suffix) = suffix {\n+                    self.sess.emit_err(InvalidLiteralSuffix {\n+                        span,\n+                        kind: format!(\"{}\", kind.descr()),\n+                        suffix,\n+                    });\n+                }\n             }\n             LitError::InvalidIntSuffix => {\n                 let suf = suffix.expect(\"suffix error with no suffix\");\n@@ -1872,38 +1876,17 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    pub(super) fn expect_no_suffix(&self, sp: Span, kind: &str, suffix: Option<Symbol>) {\n-        if let Some(suf) = suffix {\n-            let mut err = if kind == \"a tuple index\"\n-                && [sym::i32, sym::u32, sym::isize, sym::usize].contains(&suf)\n-            {\n-                // #59553: warn instead of reject out of hand to allow the fix to percolate\n-                // through the ecosystem when people fix their macros\n-                let mut err = self\n-                    .sess\n-                    .span_diagnostic\n-                    .struct_span_warn(sp, &format!(\"suffixes on {kind} are invalid\"));\n-                err.note(&format!(\n-                    \"`{}` is *temporarily* accepted on tuple index fields as it was \\\n-                        incorrectly accepted on stable for a few releases\",\n-                    suf,\n-                ));\n-                err.help(\n-                    \"on proc macros, you'll want to use `syn::Index::from` or \\\n-                        `proc_macro::Literal::*_unsuffixed` for code that will desugar \\\n-                        to tuple field access\",\n-                );\n-                err.note(\n-                    \"see issue #60210 <https://github.com/rust-lang/rust/issues/60210> \\\n-                     for more information\",\n-                );\n-                err\n-            } else {\n-                self.struct_span_err(sp, &format!(\"suffixes on {kind} are invalid\"))\n-                    .forget_guarantee()\n-            };\n-            err.span_label(sp, format!(\"invalid suffix `{suf}`\"));\n-            err.emit();\n+    pub(super) fn expect_no_tuple_index_suffix(&self, span: Span, suffix: Symbol) {\n+        if [sym::i32, sym::u32, sym::isize, sym::usize].contains(&suffix) {\n+            // #59553: warn instead of reject out of hand to allow the fix to percolate\n+            // through the ecosystem when people fix their macros\n+            self.sess.emit_warning(InvalidLiteralSuffixOnTupleIndex {\n+                span,\n+                suffix,\n+                exception: Some(()),\n+            });\n+        } else {\n+            self.sess.emit_err(InvalidLiteralSuffixOnTupleIndex { span, suffix, exception: None });\n         }\n     }\n "}, {"sha": "123e6ce7ab5be91193a52e4a194a81a7b184a359", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ae7a30927704fd2b48d72b2119d4c0185542e56/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae7a30927704fd2b48d72b2119d4c0185542e56/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=6ae7a30927704fd2b48d72b2119d4c0185542e56", "patch": "@@ -1147,7 +1147,9 @@ impl<'a> Parser<'a> {\n     fn parse_field_name(&mut self) -> PResult<'a, Ident> {\n         if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind\n         {\n-            self.expect_no_suffix(self.token.span, \"a tuple index\", suffix);\n+            if let Some(suffix) = suffix {\n+                self.expect_no_tuple_index_suffix(self.token.span, suffix);\n+            }\n             self.bump();\n             Ok(Ident::new(symbol, self.prev_token.span))\n         } else {"}, {"sha": "b7533f41351da547ef1459befa9dfb057901e008", "filename": "src/test/ui/extenv/issue-55897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae7a30927704fd2b48d72b2119d4c0185542e56/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae7a30927704fd2b48d72b2119d4c0185542e56/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.rs?ref=6ae7a30927704fd2b48d72b2119d4c0185542e56", "patch": "@@ -14,7 +14,7 @@ mod nonexistent_env {\n \n mod erroneous_literal {\n     include!(concat!(\"NON_EXISTENT\"suffix, \"/data.rs\"));\n-    //~^ ERROR suffixes on a string literal are invalid\n+    //~^ ERROR suffixes on string literals are invalid\n }\n \n fn main() {}"}, {"sha": "e2afe6f34c1210b61a251db9b6839cab61123389", "filename": "src/test/ui/extenv/issue-55897.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ae7a30927704fd2b48d72b2119d4c0185542e56/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ae7a30927704fd2b48d72b2119d4c0185542e56/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr?ref=6ae7a30927704fd2b48d72b2119d4c0185542e56", "patch": "@@ -6,7 +6,7 @@ LL |     include!(concat!(env!(\"NON_EXISTENT\"), \"/data.rs\"));\n    |\n    = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: suffixes on a string literal are invalid\n+error: suffixes on string literals are invalid\n   --> $DIR/issue-55897.rs:16:22\n    |\n LL |     include!(concat!(\"NON_EXISTENT\"suffix, \"/data.rs\"));"}, {"sha": "9724533c420c28c4037d3bd22125796c6e9dfa99", "filename": "src/test/ui/parser/bad-lit-suffixes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ae7a30927704fd2b48d72b2119d4c0185542e56/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae7a30927704fd2b48d72b2119d4c0185542e56/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.rs?ref=6ae7a30927704fd2b48d72b2119d4c0185542e56", "patch": "@@ -1,18 +1,18 @@\n extern\n-    \"C\"suffix //~ ERROR suffixes on a string literal are invalid\n+    \"C\"suffix //~ ERROR suffixes on string literals are invalid\n     fn foo() {}\n \n extern\n-    \"C\"suffix //~ ERROR suffixes on a string literal are invalid\n+    \"C\"suffix //~ ERROR suffixes on string literals are invalid\n {}\n \n fn main() {\n-    \"\"suffix; //~ ERROR suffixes on a string literal are invalid\n-    b\"\"suffix; //~ ERROR suffixes on a byte string literal are invalid\n-    r#\"\"#suffix; //~ ERROR suffixes on a string literal are invalid\n-    br#\"\"#suffix; //~ ERROR suffixes on a byte string literal are invalid\n-    'a'suffix; //~ ERROR suffixes on a char literal are invalid\n-    b'a'suffix; //~ ERROR suffixes on a byte literal are invalid\n+    \"\"suffix; //~ ERROR suffixes on string literals are invalid\n+    b\"\"suffix; //~ ERROR suffixes on byte string literals are invalid\n+    r#\"\"#suffix; //~ ERROR suffixes on string literals are invalid\n+    br#\"\"#suffix; //~ ERROR suffixes on byte string literals are invalid\n+    'a'suffix; //~ ERROR suffixes on char literals are invalid\n+    b'a'suffix; //~ ERROR suffixes on byte literals are invalid\n \n     1234u1024; //~ ERROR invalid width `1024` for integer literal\n     1234i1024; //~ ERROR invalid width `1024` for integer literal"}, {"sha": "f74eef324450d1e74e3bc59b959dfe35e27c2d26", "filename": "src/test/ui/parser/bad-lit-suffixes.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ae7a30927704fd2b48d72b2119d4c0185542e56/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ae7a30927704fd2b48d72b2119d4c0185542e56/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr?ref=6ae7a30927704fd2b48d72b2119d4c0185542e56", "patch": "@@ -1,46 +1,46 @@\n-error: suffixes on a string literal are invalid\n+error: suffixes on string literals are invalid\n   --> $DIR/bad-lit-suffixes.rs:2:5\n    |\n LL |     \"C\"suffix\n    |     ^^^^^^^^^ invalid suffix `suffix`\n \n-error: suffixes on a string literal are invalid\n+error: suffixes on string literals are invalid\n   --> $DIR/bad-lit-suffixes.rs:6:5\n    |\n LL |     \"C\"suffix\n    |     ^^^^^^^^^ invalid suffix `suffix`\n \n-error: suffixes on a string literal are invalid\n+error: suffixes on string literals are invalid\n   --> $DIR/bad-lit-suffixes.rs:10:5\n    |\n LL |     \"\"suffix;\n    |     ^^^^^^^^ invalid suffix `suffix`\n \n-error: suffixes on a byte string literal are invalid\n+error: suffixes on byte string literals are invalid\n   --> $DIR/bad-lit-suffixes.rs:11:5\n    |\n LL |     b\"\"suffix;\n    |     ^^^^^^^^^ invalid suffix `suffix`\n \n-error: suffixes on a string literal are invalid\n+error: suffixes on string literals are invalid\n   --> $DIR/bad-lit-suffixes.rs:12:5\n    |\n LL |     r#\"\"#suffix;\n    |     ^^^^^^^^^^^ invalid suffix `suffix`\n \n-error: suffixes on a byte string literal are invalid\n+error: suffixes on byte string literals are invalid\n   --> $DIR/bad-lit-suffixes.rs:13:5\n    |\n LL |     br#\"\"#suffix;\n    |     ^^^^^^^^^^^^ invalid suffix `suffix`\n \n-error: suffixes on a char literal are invalid\n+error: suffixes on char literals are invalid\n   --> $DIR/bad-lit-suffixes.rs:14:5\n    |\n LL |     'a'suffix;\n    |     ^^^^^^^^^ invalid suffix `suffix`\n \n-error: suffixes on a byte literal are invalid\n+error: suffixes on byte literals are invalid\n   --> $DIR/bad-lit-suffixes.rs:15:5\n    |\n LL |     b'a'suffix;"}]}