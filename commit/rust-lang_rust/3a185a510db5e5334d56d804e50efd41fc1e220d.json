{"sha": "3a185a510db5e5334d56d804e50efd41fc1e220d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMTg1YTUxMGRiNWU1MzM0ZDU2ZDgwNGU1MGVmZDQxZmMxZTIyMGQ=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-12-12T20:29:37Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-20T19:38:10Z"}, "message": "Add three point error handling to borrowck\n\nCloses #45988", "tree": {"sha": "ca5d453b429db922d108767912958fe46d4365c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca5d453b429db922d108767912958fe46d4365c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a185a510db5e5334d56d804e50efd41fc1e220d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a185a510db5e5334d56d804e50efd41fc1e220d", "html_url": "https://github.com/rust-lang/rust/commit/3a185a510db5e5334d56d804e50efd41fc1e220d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a185a510db5e5334d56d804e50efd41fc1e220d/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d2987ca031e9ec63ad452c21ef302025d553c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2987ca031e9ec63ad452c21ef302025d553c6c", "html_url": "https://github.com/rust-lang/rust/commit/6d2987ca031e9ec63ad452c21ef302025d553c6c"}], "stats": {"total": 297, "additions": 274, "deletions": 23}, "files": [{"sha": "f410865a6cd7f37e1b21ab72db5925a92e8bb9c5", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -21,6 +21,7 @@ use rustc_data_structures::control_flow_graph::ControlFlowGraph;\n use rustc_serialize as serialize;\n use hir::def::CtorKind;\n use hir::def_id::DefId;\n+use mir::visit::MirVisitable;\n use ty::subst::{Subst, Substs};\n use ty::{self, AdtDef, ClosureSubsts, Region, Ty, TyCtxt, GeneratorInterior};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n@@ -868,6 +869,14 @@ impl<'tcx> BasicBlockData<'tcx> {\n             }\n         }\n     }\n+\n+    pub fn visitable(&self, index: usize) -> &dyn MirVisitable<'tcx> {\n+        if index < self.statements.len() {\n+            &self.statements[index]\n+        } else {\n+            &self.terminator\n+        }\n+    }\n }\n \n impl<'tcx> Debug for TerminatorKind<'tcx> {"}, {"sha": "bc1b3edbb6ad91fc2cc54fa0f7b956aa61cff32f", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -14,7 +14,6 @@ use rustc::mir::{BorrowKind, Field, Local, Location, Operand};\n use rustc::mir::{Place, ProjectionElem, Rvalue, Statement, StatementKind};\n use rustc::ty::{self, RegionKind};\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_errors::DiagnosticBuilder;\n \n use std::rc::Rc;\n \n@@ -134,19 +133,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err.emit();\n     }\n \n-    fn explain_why_borrow_contains_point(\n-        &self,\n-        context: Context,\n-        borrow: &BorrowData<'_>,\n-        err: &mut DiagnosticBuilder<'_>,\n-    ) {\n-        if let Some(regioncx) = &self.nonlexical_regioncx {\n-            if let Some(cause) = regioncx.why_region_contains_point(borrow.region, context.loc) {\n-                cause.label_diagnostic(self.mir, err);\n-            }\n-        }\n-    }\n-\n     /// Finds the span of arguments of a closure (within `maybe_closure_span`) and its usage of\n     /// the local assigned at `location`.\n     /// This is done by searching in statements succeeding `location`"}, {"sha": "bfb7e793eee0306069ff0917341778a39f2f53a5", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -0,0 +1,210 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use borrow_check::{Context, MirBorrowckCtxt};\n+use borrow_check::nll::region_infer::{Cause, RegionInferenceContext};\n+use dataflow::BorrowData;\n+use rustc::mir::{Local, Location, Mir};\n+use rustc::mir::visit::{MirVisitable, PlaceContext, Visitor};\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::DiagnosticBuilder;\n+use util::liveness::{self, DefUse, LivenessMode};\n+\n+impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n+    pub(in borrow_check) fn explain_why_borrow_contains_point(\n+        &self,\n+        context: Context,\n+        borrow: &BorrowData<'_>,\n+        err: &mut DiagnosticBuilder<'_>,\n+    ) {\n+        if let Some(regioncx) = &self.nonlexical_regioncx {\n+            if let Some(cause) = regioncx.why_region_contains_point(borrow.region, context.loc) {\n+                let mir = self.mir;\n+\n+                cause.label_diagnostic(mir, err);\n+\n+                match *cause.root_cause() {\n+                    Cause::LiveVar(local, location) => {\n+                        match find_regular_use(&mir, regioncx, borrow, location, local) {\n+                            Some(p) => {\n+                                err.span_label(\n+                                    mir.source_info(p).span,\n+                                    format!(\"borrow later used here\"),\n+                                );\n+                            }\n+\n+                            None => {\n+                                span_bug!(\n+                                    mir.source_info(context.loc).span,\n+                                    \"Cause should end in a LiveVar\"\n+                                );\n+                            }\n+                        }\n+                    }\n+\n+                    Cause::DropVar(local, location) => {\n+                        match find_drop_use(&mir, regioncx, borrow, location, local) {\n+                            Some(p) => {\n+                                let local_name = &mir.local_decls[local].name.unwrap();\n+\n+                                err.span_label(\n+                                    mir.source_info(p).span,\n+                                    format!(\n+                                        \"borrow later used here, when `{}` is dropped\",\n+                                        local_name\n+                                    ),\n+                                );\n+                            }\n+\n+                            None => {\n+                                span_bug!(\n+                                    mir.source_info(context.loc).span,\n+                                    \"Cause should end in a DropVar\"\n+                                );\n+                            }\n+                        }\n+                    }\n+\n+                    _ => (),\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn find_regular_use<'gcx, 'tcx>(\n+    mir: &'gcx Mir,\n+    regioncx: &'tcx RegionInferenceContext,\n+    borrow: &'tcx BorrowData,\n+    start_point: Location,\n+    local: Local,\n+) -> Option<Location> {\n+    let mut uf = UseFinder {\n+        mir,\n+        regioncx,\n+        borrow,\n+        start_point,\n+        local,\n+        liveness_mode: LivenessMode {\n+            include_regular_use: true,\n+            include_drops: false,\n+        },\n+    };\n+\n+    uf.find()\n+}\n+\n+fn find_drop_use<'gcx, 'tcx>(\n+    mir: &'gcx Mir,\n+    regioncx: &'tcx RegionInferenceContext,\n+    borrow: &'tcx BorrowData,\n+    start_point: Location,\n+    local: Local,\n+) -> Option<Location> {\n+    let mut uf = UseFinder {\n+        mir,\n+        regioncx,\n+        borrow,\n+        start_point,\n+        local,\n+        liveness_mode: LivenessMode {\n+            include_regular_use: false,\n+            include_drops: true,\n+        },\n+    };\n+\n+    uf.find()\n+}\n+\n+struct UseFinder<'gcx, 'tcx> {\n+    mir: &'gcx Mir<'gcx>,\n+    regioncx: &'tcx RegionInferenceContext<'tcx>,\n+    borrow: &'tcx BorrowData<'tcx>,\n+    start_point: Location,\n+    local: Local,\n+    liveness_mode: LivenessMode,\n+}\n+\n+impl<'gcx, 'tcx> UseFinder<'gcx, 'tcx> {\n+    fn find(&mut self) -> Option<Location> {\n+        let mut stack = vec![];\n+        let mut visited = FxHashSet();\n+\n+        stack.push(self.start_point);\n+        while let Some(p) = stack.pop() {\n+            if !self.regioncx.region_contains_point(self.borrow.region, p) {\n+                continue;\n+            }\n+\n+            if !visited.insert(p) {\n+                continue;\n+            }\n+\n+            let block_data = &self.mir[p.block];\n+            let (defined, used) = self.def_use(p, block_data.visitable(p.statement_index));\n+\n+            if used {\n+                return Some(p);\n+            } else if !defined {\n+                if p.statement_index < block_data.statements.len() {\n+                    stack.push(Location {\n+                        statement_index: p.statement_index + 1,\n+                        ..p\n+                    });\n+                } else {\n+                    stack.extend(\n+                        block_data\n+                            .terminator()\n+                            .successors()\n+                            .iter()\n+                            .map(|&basic_block| Location {\n+                                statement_index: 0,\n+                                block: basic_block,\n+                            }),\n+                    );\n+                }\n+            }\n+        }\n+\n+        None\n+    }\n+\n+    fn def_use(&self, location: Location, thing: &MirVisitable<'tcx>) -> (bool, bool) {\n+        let mut visitor = DefUseVisitor {\n+            defined: false,\n+            used: false,\n+            local: self.local,\n+            liveness_mode: self.liveness_mode,\n+        };\n+\n+        thing.apply(location, &mut visitor);\n+\n+        (visitor.defined, visitor.used)\n+    }\n+}\n+\n+struct DefUseVisitor {\n+    defined: bool,\n+    used: bool,\n+    local: Local,\n+    liveness_mode: LivenessMode,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for DefUseVisitor {\n+    fn visit_local(&mut self, &local: &Local, context: PlaceContext<'tcx>, _: Location) {\n+        if local == self.local {\n+            match liveness::categorize(context, self.liveness_mode) {\n+                Some(DefUse::Def) => self.defined = true,\n+                Some(DefUse::Use) => self.used = true,\n+                None => (),\n+            }\n+        }\n+    }\n+}"}, {"sha": "f96e107efa38fa76b374b3195908fec29072609f", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -27,6 +27,7 @@ use util::pretty::{self, ALIGN};\n use self::mir_util::PassWhere;\n \n mod constraint_generation;\n+pub mod explain_borrow;\n pub(crate) mod region_infer;\n mod renumber;\n mod subtype_constraint_generation;"}, {"sha": "5e921cc330d8bf3504248cdbbdab98fcd09875a2", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -1229,4 +1229,22 @@ impl Cause {\n             }\n         }\n     }\n+\n+    pub(crate) fn root_cause(&self) -> &Cause {\n+        match self {\n+            Cause::LiveVar(..) |\n+            Cause::DropVar(..) |\n+            Cause::LiveOther(..) |\n+            Cause::UniversalRegion(..) => {\n+                self\n+            }\n+\n+            Cause::Outlives {\n+                original_cause,\n+                ..\n+            } => {\n+                original_cause.root_cause()\n+            }\n+        }\n+    }\n }"}, {"sha": "a7efdaf08264a384e35345924ea997e253d5d6e9", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -23,6 +23,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(decl_macro)]\n+#![feature(dyn_trait)]\n #![feature(i128_type)]\n #![feature(inclusive_range_syntax)]\n #![feature(inclusive_range)]"}, {"sha": "6e234a966d14a66525d8d5c55dac87808299cf85", "filename": "src/test/ui/nll/capture-ref-in-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-Znll -Zborrowck=mir\n+// compile-flags:-Znll -Zborrowck=mir -Znll-dump-cause\n \n // Test that a structure which tries to store a pointer to `y` into\n // `p` (indirectly) fails to compile."}, {"sha": "7b3f7d25dd037c5fc1f47316cd8259f2c8fdfa8b", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -6,6 +6,9 @@ error[E0597]: `y` does not live long enough\n ...\n 37 |     }\n    |      - borrowed value only lives until here\n+38 | \n+39 |     deref(p);\n+   |           - borrow later used here\n    |\n    = note: borrowed value must be valid for lifetime '_#5r...\n "}, {"sha": "17fadf0a2978b4f235cb5ab0264de530e1183400", "filename": "src/test/ui/nll/closure-requirements/escape-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.rs?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -22,7 +22,7 @@\n // basically checking that the MIR type checker correctly enforces the\n // closure signature.\n \n-// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+// compile-flags:-Znll -Zborrowck=mir -Znll-dump-cause -Zverbose\n \n #![feature(rustc_attrs)]\n "}, {"sha": "09d5617b08ef564f20b134e4f44dd553862d7878", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -31,6 +31,9 @@ error[E0597]: `y` does not live long enough\n 38 |         //~^ ERROR `y` does not live long enough [E0597]\n 39 |     }\n    |      - borrowed value only lives until here\n+40 | \n+41 |     deref(p);\n+   |           - borrow later used here\n    |\n    = note: borrowed value must be valid for lifetime '_#6r...\n "}, {"sha": "984c9fe7c34bd3b92a9c28d852364503b5fc325e", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.rs?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -15,7 +15,7 @@\n //\n // except that the closure does so via a second closure.\n \n-// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+// compile-flags:-Znll -Zborrowck=mir -Znll-dump-cause -Zverbose\n \n #![feature(rustc_attrs)]\n "}, {"sha": "430fb711c635d8c7911e00757f67925ab87c14ea", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -58,6 +58,9 @@ error[E0597]: `y` does not live long enough\n ...\n 36 |       }\n    |        - borrowed value only lives until here\n+37 | \n+38 |       deref(p);\n+   |             - borrow later used here\n    |\n    = note: borrowed value must be valid for lifetime '_#4r...\n "}, {"sha": "499ebd659556ce57663b3b9322e984ac563bca44", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.rs?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -19,7 +19,7 @@\n // `'b`.  This relationship is propagated to the closure creator,\n // which reports an error.\n \n-// compile-flags:-Znll -Zborrowck=mir -Zverbose\n+// compile-flags:-Znll -Zborrowck=mir -Znll-dump-cause -Zverbose\n \n #![feature(rustc_attrs)]\n "}, {"sha": "090bacbc17d076a047baad94e434580ff575cba5", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -35,6 +35,9 @@ error[E0597]: `y` does not live long enough\n ...\n 36 |     }\n    |      - borrowed value only lives until here\n+37 | \n+38 |     deref(p);\n+   |           - borrow later used here\n    |\n    = note: borrowed value must be valid for lifetime '_#4r...\n "}, {"sha": "7c52a0c87af95d269ebc0b6e4aa8e8a1b75070c0", "filename": "src/test/ui/nll/get_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fget_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fget_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.rs?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -13,7 +13,7 @@\n // a variety of errors from the older, AST-based machinery (notably\n // borrowck), and then we get the NLL error at the end.\n \n-// compile-flags:-Znll -Zborrowck=compare\n+// compile-flags:-Znll -Zborrowck=compare -Znll-dump-cause\n \n struct Map {\n }"}, {"sha": "ed2c305090ccc0075317b033d4dd0161e91f764b", "filename": "src/test/ui/nll/get_default.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -42,6 +42,9 @@ error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as imm\n 43 |             Some(v) => {\n 44 |                 map.set(String::new()); // Both AST and MIR error here\n    |                 ^^^ mutable borrow occurs here\n+...\n+47 |                 return v;\n+   |                        - borrow later used here\n \n error: aborting due to 4 previous errors\n "}, {"sha": "184dfe320d33d7caedd0da90165d726d1bbdef71", "filename": "src/test/ui/nll/maybe-initialized-drop-implicit-fragment-drop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.rs?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//compile-flags: -Z emit-end-regions -Zborrowck=mir -Z nll\n+//compile-flags: -Z emit-end-regions -Zborrowck=mir -Z nll -Znll-dump-cause\n+\n \n #![allow(warnings)]\n "}, {"sha": "b161a068c040feaca7f5e803dc331877eed2e93a", "filename": "src/test/ui/nll/maybe-initialized-drop-implicit-fragment-drop.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.stderr?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -6,6 +6,9 @@ error[E0506]: cannot assign to `x` because it is borrowed\n ...\n 31 |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n+32 |     // FIXME ^ Should not error in the future with implicit dtors, only manually implemented ones\n+33 | }\n+   |  - borrow later used here, when `foo` is dropped\n \n error: aborting due to previous error\n "}, {"sha": "beb2c87f8f3bd4e6cea9be0f1b810442572a8d1a", "filename": "src/test/ui/nll/maybe-initialized-drop-with-fragment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.rs?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//compile-flags: -Z emit-end-regions -Zborrowck=mir -Z nll\n+//compile-flags: -Z emit-end-regions -Zborrowck=mir -Znll -Znll-dump-cause\n \n #![allow(warnings)]\n "}, {"sha": "072818c7ce17bc3fa146a59398c344894b0b2781", "filename": "src/test/ui/nll/maybe-initialized-drop-with-fragment.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.stderr?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -6,6 +6,8 @@ error[E0506]: cannot assign to `x` because it is borrowed\n ...\n 31 |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n+32 | }\n+   |  - borrow later used here, when `foo` is dropped\n \n error: aborting due to previous error\n "}, {"sha": "39cad8acee18117f190fc36732b53527d93ff535", "filename": "src/test/ui/nll/maybe-initialized-drop-with-uninitialized-fragments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.rs?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//compile-flags: -Z emit-end-regions -Zborrowck=mir -Z nll\n+//compile-flags: -Z emit-end-regions -Zborrowck=mir -Znll -Znll-dump-cause\n \n #![allow(warnings)]\n "}, {"sha": "89117c2bfeafead7730d16421c366822a7c3b001", "filename": "src/test/ui/nll/maybe-initialized-drop-with-uninitialized-fragments.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.stderr?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -6,6 +6,9 @@ error[E0506]: cannot assign to `x` because it is borrowed\n ...\n 32 |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n+33 |     // FIXME ^ This currently errors and it should not.\n+34 | }\n+   |  - borrow later used here, when `foo` is dropped\n \n error: aborting due to previous error\n "}, {"sha": "767c5b9b8be8dd1deb1f29d8230a313d735e0ebd", "filename": "src/test/ui/nll/maybe-initialized-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.rs?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//compile-flags: -Z emit-end-regions -Zborrowck=mir -Z nll\n+//compile-flags: -Z emit-end-regions -Zborrowck=mir -Znll -Znll-dump-cause\n \n #![allow(warnings)]\n "}, {"sha": "626307a80ed5783d74c9be1f5f0256a1445db6da", "filename": "src/test/ui/nll/maybe-initialized-drop.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a185a510db5e5334d56d804e50efd41fc1e220d/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.stderr?ref=3a185a510db5e5334d56d804e50efd41fc1e220d", "patch": "@@ -5,6 +5,8 @@ error[E0506]: cannot assign to `x` because it is borrowed\n    |                          ------ borrow of `x` occurs here\n 26 |     x = 1; //~ ERROR cannot assign to `x` because it is borrowed [E0506]\n    |     ^^^^^ assignment to borrowed `x` occurs here\n+27 | }\n+   |  - borrow later used here, when `wrap` is dropped\n \n error: aborting due to previous error\n "}]}