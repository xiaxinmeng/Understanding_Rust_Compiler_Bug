{"sha": "113f079a97ac3a1ab2fabbae274508cbcb248060", "node_id": "C_kwDOAAsO6NoAKDExM2YwNzlhOTdhYzNhMWFiMmZhYmJhZTI3NDUwOGNiY2IyNDgwNjA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-19T20:57:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-19T20:57:41Z"}, "message": "Rollup merge of #96029 - IsakNyberg:error-messages-fix, r=Dylan-DPC\n\nRefactor loop into iterator; simplify negation logic.\n\nis_dummy should return when a non-dummy is found, but instead is iterated until completion. With some inspiration from line 323 this was refactored to a single line that returns once a single counterexample is found.", "tree": {"sha": "239552716749204aa78f16dba1610c864ce10ddd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/239552716749204aa78f16dba1610c864ce10ddd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/113f079a97ac3a1ab2fabbae274508cbcb248060", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiXyJFCRBK7hj4Ov3rIwAAn6YIAFAhVGyt44K/jSKhRaXZW4tJ\nTXAdPj/rz/cZIZafspfGh8vke/sz4G0NPrZiGB5pdVTuRgoFqulFWpPSgEetNCOk\nR3YvLpI9J2Nj2ILYtqwbw8+bnltIqVDg4FU4AZupFxY1xruX58tLS5b941+i3bF5\nQ3vQd4BB6+LhkwDiOw9Yjklq+98xYExSoaQH0DlWUPdHkcuBWeoKAjjgkSHifVsH\nQfCHNSofj7bo0XSzj6XaNRhVFYAopzNmQlgyCFU9w6M7lQUiy2y923kYmhO4i/Nc\nuXFWuFjMAqSxyswRdaMbKdKZncbQXJRXXpnnrlw35vK/KTkxCuvljRE90Lj1bd8=\n=aC99\n-----END PGP SIGNATURE-----\n", "payload": "tree 239552716749204aa78f16dba1610c864ce10ddd\nparent a0ba15bfab46c987f910449f44ad8db9cdd0cea7\nparent 657ae03f603f137364bcbe97a17fc8cef3b18642\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650401861 +0200\ncommitter GitHub <noreply@github.com> 1650401861 +0200\n\nRollup merge of #96029 - IsakNyberg:error-messages-fix, r=Dylan-DPC\n\nRefactor loop into iterator; simplify negation logic.\n\nis_dummy should return when a non-dummy is found, but instead is iterated until completion. With some inspiration from line 323 this was refactored to a single line that returns once a single counterexample is found.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/113f079a97ac3a1ab2fabbae274508cbcb248060", "html_url": "https://github.com/rust-lang/rust/commit/113f079a97ac3a1ab2fabbae274508cbcb248060", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/113f079a97ac3a1ab2fabbae274508cbcb248060/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0ba15bfab46c987f910449f44ad8db9cdd0cea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ba15bfab46c987f910449f44ad8db9cdd0cea7", "html_url": "https://github.com/rust-lang/rust/commit/a0ba15bfab46c987f910449f44ad8db9cdd0cea7"}, {"sha": "657ae03f603f137364bcbe97a17fc8cef3b18642", "url": "https://api.github.com/repos/rust-lang/rust/commits/657ae03f603f137364bcbe97a17fc8cef3b18642", "html_url": "https://github.com/rust-lang/rust/commit/657ae03f603f137364bcbe97a17fc8cef3b18642"}], "stats": {"total": 10, "additions": 2, "deletions": 8}, "files": [{"sha": "e1e0ed7222d55fb39265197de0f449e32bf5d32d", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/113f079a97ac3a1ab2fabbae274508cbcb248060/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/113f079a97ac3a1ab2fabbae274508cbcb248060/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=113f079a97ac3a1ab2fabbae274508cbcb248060", "patch": "@@ -338,18 +338,12 @@ impl MultiSpan {\n \n     /// Returns `true` if any of the primary spans are displayable.\n     pub fn has_primary_spans(&self) -> bool {\n-        self.primary_spans.iter().any(|sp| !sp.is_dummy())\n+        !self.is_dummy()\n     }\n \n     /// Returns `true` if this contains only a dummy primary span with any hygienic context.\n     pub fn is_dummy(&self) -> bool {\n-        let mut is_dummy = true;\n-        for span in &self.primary_spans {\n-            if !span.is_dummy() {\n-                is_dummy = false;\n-            }\n-        }\n-        is_dummy\n+        self.primary_spans.iter().all(|sp| sp.is_dummy())\n     }\n \n     /// Replaces all occurrences of one Span with another. Used to move `Span`s in areas that don't"}]}