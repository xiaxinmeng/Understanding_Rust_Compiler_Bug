{"sha": "07f723f19bdf1054d140fc713f72f04a2f1b4258", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZjcyM2YxOWJkZjEwNTRkMTQwZmM3MTNmNzJmMDRhMmYxYjQyNTg=", "commit": {"author": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2015-01-13T18:56:10Z"}, "committer": {"name": "Chase Southwood", "email": "chase.southwood@gmail.com", "date": "2015-01-13T18:56:10Z"}, "message": "Remove unneeded box import in examples", "tree": {"sha": "be5367cde50aa732ddc8a147bba386d7c1b8d94d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be5367cde50aa732ddc8a147bba386d7c1b8d94d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07f723f19bdf1054d140fc713f72f04a2f1b4258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07f723f19bdf1054d140fc713f72f04a2f1b4258", "html_url": "https://github.com/rust-lang/rust/commit/07f723f19bdf1054d140fc713f72f04a2f1b4258", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07f723f19bdf1054d140fc713f72f04a2f1b4258/comments", "author": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csouth3", "id": 6758080, "node_id": "MDQ6VXNlcjY3NTgwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6758080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csouth3", "html_url": "https://github.com/csouth3", "followers_url": "https://api.github.com/users/csouth3/followers", "following_url": "https://api.github.com/users/csouth3/following{/other_user}", "gists_url": "https://api.github.com/users/csouth3/gists{/gist_id}", "starred_url": "https://api.github.com/users/csouth3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csouth3/subscriptions", "organizations_url": "https://api.github.com/users/csouth3/orgs", "repos_url": "https://api.github.com/users/csouth3/repos", "events_url": "https://api.github.com/users/csouth3/events{/privacy}", "received_events_url": "https://api.github.com/users/csouth3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94a9f033eb79b3b4fb037722366644650e8e16c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94a9f033eb79b3b4fb037722366644650e8e16c", "html_url": "https://github.com/rust-lang/rust/commit/e94a9f033eb79b3b4fb037722366644650e8e16c"}], "stats": {"total": 25, "additions": 0, "deletions": 25}, "files": [{"sha": "1e98c89383212196b28034108aa1a7ec65ce593f", "filename": "src/doc/reference.md", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07f723f19bdf1054d140fc713f72f04a2f1b4258/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/07f723f19bdf1054d140fc713f72f04a2f1b4258/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=07f723f19bdf1054d140fc713f72f04a2f1b4258", "patch": "@@ -1588,7 +1588,6 @@ pointer values (pointing to a type for which an implementation of the given\n trait is in scope) to pointers to the trait name, used as a type.\n \n ```\n-# use std::boxed::Box;\n # trait Shape { }\n # impl Shape for int { }\n # let mycircle = 0i;\n@@ -1647,7 +1646,6 @@ fn radius_times_area<T: Circle>(c: T) -> f64 {\n Likewise, supertrait methods may also be called on trait objects.\n \n ```{.ignore}\n-# use std::boxed::Box;\n # trait Shape { fn area(&self) -> f64; }\n # trait Circle : Shape { fn radius(&self) -> f64; }\n # impl Shape for int { fn area(&self) -> f64 { 0.0 } }\n@@ -3799,7 +3797,6 @@ enclosing `enum` or `struct` type itself. Such recursion has restrictions:\n An example of a *recursive* type and its use:\n \n ```\n-# use std::boxed::Box;\n enum List<T> {\n     Nil,\n     Cons(T, Box<List<T>>)\n@@ -3912,7 +3909,6 @@ implementation of `R`, and the pointer value of `E`.\n An example of an object type:\n \n ```\n-# use std::boxed::Box;\n trait Printable {\n   fn stringify(&self) -> String;\n }\n@@ -4120,7 +4116,6 @@ the type of a box is `std::owned::Box<T>`.\n An example of a box type and value:\n \n ```\n-# use std::boxed::Box;\n let x: Box<int> = Box::new(10);\n ```\n \n@@ -4130,7 +4125,6 @@ copy of a box to move ownership of the value. After a value has been moved,\n the source location cannot be used unless it is reinitialized.\n \n ```\n-# use std::boxed::Box;\n let x: Box<int> = Box::new(10);\n let y = x;\n // attempting to use `x` will result in an error here"}, {"sha": "ff3e4729ae97f78f76a798a2e9caf8bda1c32987", "filename": "src/doc/trpl/ffi.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07f723f19bdf1054d140fc713f72f04a2f1b4258/src%2Fdoc%2Ftrpl%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/07f723f19bdf1054d140fc713f72f04a2f1b4258/src%2Fdoc%2Ftrpl%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fffi.md?ref=07f723f19bdf1054d140fc713f72f04a2f1b4258", "patch": "@@ -262,8 +262,6 @@ referenced Rust object.\n Rust code:\n \n ~~~~no_run\n-# use std::boxed::Box;\n-\n #[repr(C)]\n struct RustObject {\n     a: i32,"}, {"sha": "674696089172c6bbc67dab67309dc54f733cc586", "filename": "src/doc/trpl/ownership.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07f723f19bdf1054d140fc713f72f04a2f1b4258/src%2Fdoc%2Ftrpl%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/07f723f19bdf1054d140fc713f72f04a2f1b4258/src%2Fdoc%2Ftrpl%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fownership.md?ref=07f723f19bdf1054d140fc713f72f04a2f1b4258", "patch": "@@ -81,7 +81,6 @@ therefore deallocates the memory for you. Here's the equivalent example in\n Rust:\n \n ```rust\n-# use std::boxed::Box;\n {\n     let x = Box::new(5);\n }\n@@ -101,7 +100,6 @@ This is pretty straightforward, but what happens when we want to pass our box\n to a function? Let's look at some code:\n \n ```rust\n-# use std::boxed::Box;\n fn main() {\n     let x = Box::new(5);\n \n@@ -117,7 +115,6 @@ This code works, but it's not ideal. For example, let's add one more line of\n code, where we print out the value of `x`:\n \n ```{rust,ignore}\n-# use std::boxed::Box;\n fn main() {\n     let x = Box::new(5);\n \n@@ -151,7 +148,6 @@ To fix this, we can have `add_one` give ownership back when it's done with the\n box:\n \n ```rust\n-# use std::boxed::Box;\n fn main() {\n     let x = Box::new(5);\n "}, {"sha": "67a4d64d3e84ee4deb9dbe856b2b78eb8f9e476e", "filename": "src/doc/trpl/pointers.md", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07f723f19bdf1054d140fc713f72f04a2f1b4258/src%2Fdoc%2Ftrpl%2Fpointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/07f723f19bdf1054d140fc713f72f04a2f1b4258/src%2Fdoc%2Ftrpl%2Fpointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fpointers.md?ref=07f723f19bdf1054d140fc713f72f04a2f1b4258", "patch": "@@ -455,7 +455,6 @@ fn rc_succ(x: Rc<int>) -> int { *x + 1 }\n Note that the caller of your function will have to modify their calls slightly:\n \n ```{rust}\n-# use std::boxed::Box;\n use std::rc::Rc;\n \n fn succ(x: &int) -> int { *x + 1 }\n@@ -478,15 +477,13 @@ those contents.\n heap allocation in Rust. Creating a box looks like this:\n \n ```{rust}\n-# use std::boxed::Box;\n let x = Box::new(5i);\n ```\n \n Boxes are heap allocated and they are deallocated automatically by Rust when\n they go out of scope:\n \n ```{rust}\n-# use std::boxed::Box;\n {\n     let x = Box::new(5i);\n \n@@ -507,7 +504,6 @@ You don't need to fully grok the theory of affine types or regions to grok\n boxes, though. As a rough approximation, you can treat this Rust code:\n \n ```{rust}\n-# use std::boxed::Box;\n {\n     let x = Box::new(5i);\n \n@@ -548,7 +544,6 @@ for more detail on how lifetimes work.\n Using boxes and references together is very common. For example:\n \n ```{rust}\n-# use std::boxed::Box;\n fn add_one(x: &int) -> int {\n     *x + 1\n }\n@@ -566,7 +561,6 @@ function, and since it's only reading the value, allows it.\n We can borrow `x` multiple times, as long as it's not simultaneous:\n \n ```{rust}\n-# use std::boxed::Box;\n fn add_one(x: &int) -> int {\n     *x + 1\n }\n@@ -583,7 +577,6 @@ fn main() {\n Or as long as it's not a mutable borrow. This will error:\n \n ```{rust,ignore}\n-# use std::boxed::Box;\n fn add_one(x: &mut int) -> int {\n     *x + 1\n }\n@@ -610,7 +603,6 @@ Sometimes, you need a recursive data structure. The simplest is known as a\n \n \n ```{rust}\n-# use std::boxed::Box;\n #[derive(Show)]\n enum List<T> {\n     Cons(T, Box<List<T>>),\n@@ -666,7 +658,6 @@ In many languages with pointers, you'd return a pointer from a function\n so as to avoid copying a large data structure. For example:\n \n ```{rust}\n-# use std::boxed::Box;\n struct BigStruct {\n     one: int,\n     two: int,\n@@ -695,7 +686,6 @@ than the hundred `int`s that make up the `BigStruct`.\n This is an antipattern in Rust. Instead, write this:\n \n ```{rust}\n-# use std::boxed::Box;\n struct BigStruct {\n     one: int,\n     two: int,"}, {"sha": "a285611dba915d8c20d2662c3455cebf81b5a5f2", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07f723f19bdf1054d140fc713f72f04a2f1b4258/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/07f723f19bdf1054d140fc713f72f04a2f1b4258/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=07f723f19bdf1054d140fc713f72f04a2f1b4258", "patch": "@@ -197,7 +197,6 @@ extern crate libc;\n use libc::{c_void, size_t, malloc, free};\n use std::mem;\n use std::ptr;\n-# use std::boxed::Box;\n \n // Define a wrapper around the handle returned by the foreign code.\n // Unique<T> has the same semantics as Box<T>"}, {"sha": "af7fc875389c07d4fdb416e6b77cfe7e0bee9ce3", "filename": "src/libcore/option.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07f723f19bdf1054d140fc713f72f04a2f1b4258/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f723f19bdf1054d140fc713f72f04a2f1b4258/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=07f723f19bdf1054d140fc713f72f04a2f1b4258", "patch": "@@ -66,7 +66,6 @@\n //! not (`None`).\n //!\n //! ```\n-//! # use std::boxed::Box;\n //! let optional: Option<Box<int>> = None;\n //! check_optional(&optional);\n //!"}, {"sha": "baf998d0828a27c7f7818c0aca169ee91794ee0f", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07f723f19bdf1054d140fc713f72f04a2f1b4258/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07f723f19bdf1054d140fc713f72f04a2f1b4258/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=07f723f19bdf1054d140fc713f72f04a2f1b4258", "patch": "@@ -46,7 +46,6 @@\n //! though unsafely, transformed from one type to the other.\n //!\n //! ```\n-//! # use std::boxed::Box;\n //! use std::mem;\n //!\n //! unsafe {"}]}