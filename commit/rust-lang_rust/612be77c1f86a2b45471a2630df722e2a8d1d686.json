{"sha": "612be77c1f86a2b45471a2630df722e2a8d1d686", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMmJlNzdjMWY4NmEyYjQ1NDcxYTI2MzBkZjcyMmUyYThkMWQ2ODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-04T21:36:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-04T21:36:39Z"}, "message": "Merge pull request #20500 from globin/fix/range-sugar\n\nFix range sugar\n\nReviewed-by: nick29581", "tree": {"sha": "bef279b47282565c1a935575ce97ba13543f3ec8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bef279b47282565c1a935575ce97ba13543f3ec8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/612be77c1f86a2b45471a2630df722e2a8d1d686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/612be77c1f86a2b45471a2630df722e2a8d1d686", "html_url": "https://github.com/rust-lang/rust/commit/612be77c1f86a2b45471a2630df722e2a8d1d686", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/612be77c1f86a2b45471a2630df722e2a8d1d686/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05164ba1e0ae62cffc4799db35bfb588969662f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/05164ba1e0ae62cffc4799db35bfb588969662f0", "html_url": "https://github.com/rust-lang/rust/commit/05164ba1e0ae62cffc4799db35bfb588969662f0"}, {"sha": "5cc17382d17ff2f9eb335c2e80e28089bb2d5810", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc17382d17ff2f9eb335c2e80e28089bb2d5810", "html_url": "https://github.com/rust-lang/rust/commit/5cc17382d17ff2f9eb335c2e80e28089bb2d5810"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "29077deb21de16a74c59819166414273c621e84b", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/612be77c1f86a2b45471a2630df722e2a8d1d686/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/612be77c1f86a2b45471a2630df722e2a8d1d686/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=612be77c1f86a2b45471a2630df722e2a8d1d686", "patch": "@@ -2726,10 +2726,10 @@ pub trait Step: Ord {\n     /// Change self to the previous object.\n     fn step_back(&mut self);\n     /// The steps_between two step objects.\n-    /// a should always be less than b, so the result should never be negative.\n+    /// start should always be less than end, so the result should never be negative.\n     /// Return None if it is not possible to calculate steps_between without\n     /// overflow.\n-    fn steps_between(a: &Self, b: &Self) -> Option<uint>;\n+    fn steps_between(start: &Self, end: &Self) -> Option<uint>;\n }\n \n macro_rules! step_impl {\n@@ -2741,9 +2741,9 @@ macro_rules! step_impl {\n             #[inline]\n             fn step_back(&mut self) { *self -= 1; }\n             #[inline]\n-            fn steps_between(a: &$t, b: &$t) -> Option<uint> {\n-                debug_assert!(a < b);\n-                Some((*a - *b) as uint)\n+            fn steps_between(start: &$t, end: &$t) -> Option<uint> {\n+                debug_assert!(end >= start);\n+                Some((*end - *start) as uint)\n             }\n         }\n     )*)\n@@ -2758,7 +2758,7 @@ macro_rules! step_impl_no_between {\n             #[inline]\n             fn step_back(&mut self) { *self -= 1; }\n             #[inline]\n-            fn steps_between(_a: &$t, _b: &$t) -> Option<uint> {\n+            fn steps_between(_start: &$t, _end: &$t) -> Option<uint> {\n                 None\n             }\n         }"}, {"sha": "c9b71092f9072597a8fddb8ad52c943dc30864a1", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/612be77c1f86a2b45471a2630df722e2a8d1d686/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/612be77c1f86a2b45471a2630df722e2a8d1d686/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=612be77c1f86a2b45471a2630df722e2a8d1d686", "patch": "@@ -943,7 +943,7 @@ impl<Idx: Clone + Step> Iterator for Range<Idx> {\n \n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) {\n-        if let Some(hint) = Step::steps_between(&self.end, &self.start) {\n+        if let Some(hint) = Step::steps_between(&self.start, &self.end) {\n             (hint, Some(hint))\n         } else {\n             (0, None)"}]}