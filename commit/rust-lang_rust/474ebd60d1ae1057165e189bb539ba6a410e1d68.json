{"sha": "474ebd60d1ae1057165e189bb539ba6a410e1d68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NGViZDYwZDFhZTEwNTcxNjVlMTg5YmI1MzliYTZhNDEwZTFkNjg=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-11-28T16:38:16Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-11-28T16:38:16Z"}, "message": "add let and letm postfix to turn expressions into variables\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "3a20cc535a4d2428e2eaed5030cc88b9a0b0df48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a20cc535a4d2428e2eaed5030cc88b9a0b0df48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/474ebd60d1ae1057165e189bb539ba6a410e1d68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/474ebd60d1ae1057165e189bb539ba6a410e1d68", "html_url": "https://github.com/rust-lang/rust/commit/474ebd60d1ae1057165e189bb539ba6a410e1d68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/474ebd60d1ae1057165e189bb539ba6a410e1d68/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "775c69183cd6c7a2a5c9f27e23e4f4b7bc67f06f", "url": "https://api.github.com/repos/rust-lang/rust/commits/775c69183cd6c7a2a5c9f27e23e4f4b7bc67f06f", "html_url": "https://github.com/rust-lang/rust/commit/775c69183cd6c7a2a5c9f27e23e4f4b7bc67f06f"}], "stats": {"total": 67, "additions": 56, "deletions": 11}, "files": [{"sha": "1785794cc5c7cdb796bec08bb8663f876a664fbf", "filename": "crates/completion/src/completions/postfix.rs", "status": "modified", "additions": 54, "deletions": 11, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/474ebd60d1ae1057165e189bb539ba6a410e1d68/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/474ebd60d1ae1057165e189bb539ba6a410e1d68/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=474ebd60d1ae1057165e189bb539ba6a410e1d68", "patch": "@@ -5,6 +5,7 @@ mod format_like;\n use ide_db::ty_filter::TryEnum;\n use syntax::{\n     ast::{self, AstNode, AstToken},\n+    SyntaxKind::BLOCK_EXPR,\n     TextRange, TextSize,\n };\n use text_edit::TextEdit;\n@@ -220,17 +221,29 @@ pub(crate) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n     )\n     .add_to(acc);\n \n-    postfix_snippet(ctx, cap, &dot_receiver, \"let\", \"let\", &format!(\"let $0 = {};\", receiver_text))\n-        .add_to(acc);\n-    postfix_snippet(\n-        ctx,\n-        cap,\n-        &dot_receiver,\n-        \"letm\",\n-        \"let mut\",\n-        &format!(\"let mut $0 = {};\", receiver_text),\n-    )\n-    .add_to(acc);\n+    let parent_node = dot_receiver.syntax().parent().and_then(|p| p.parent());\n+    if let Some(parent) = parent_node {\n+        if parent.kind() == BLOCK_EXPR {\n+            postfix_snippet(\n+                ctx,\n+                cap,\n+                &dot_receiver,\n+                \"let\",\n+                \"let\",\n+                &format!(\"let $0 = {};\", receiver_text),\n+            )\n+            .add_to(acc);\n+            postfix_snippet(\n+                ctx,\n+                cap,\n+                &dot_receiver,\n+                \"letm\",\n+                \"let mut\",\n+                &format!(\"let mut $0 = {};\", receiver_text),\n+            )\n+            .add_to(acc);\n+        }\n+    }\n \n     if let ast::Expr::Literal(literal) = dot_receiver.clone() {\n         if let Some(literal_text) = ast::String::cast(literal.token()) {\n@@ -321,6 +334,36 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn postfix_completion_works_for_function_calln() {\n+        check(\n+            r#\"\n+fn foo(elt: bool) -> bool {\n+    !elt\n+}\n+\n+fn main() {\n+    let bar = true;\n+    foo(bar.<|>)\n+}\n+\"#,\n+            expect![[r#\"\n+                sn box   Box::new(expr)\n+                sn call  function(expr)\n+                sn dbg   dbg!(expr)\n+                sn dbgr  dbg!(&expr)\n+                sn if    if expr {}\n+                sn match match expr {}\n+                sn not   !expr\n+                sn ok    Ok(expr)\n+                sn ref   &expr\n+                sn refm  &mut expr\n+                sn some  Some(expr)\n+                sn while while expr {}\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn postfix_type_filtering() {\n         check("}, {"sha": "ac57683fb71aef80c74f7b5ecc598bbdada072c8", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/474ebd60d1ae1057165e189bb539ba6a410e1d68/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/474ebd60d1ae1057165e189bb539ba6a410e1d68/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=474ebd60d1ae1057165e189bb539ba6a410e1d68", "patch": "@@ -44,6 +44,8 @@ pub use crate::{\n // - `expr.while` -> `while expr {}` or `while let ... {}` for `Option` or `Result`\n // - `expr.ref` -> `&expr`\n // - `expr.refm` -> `&mut expr`\n+// - `expr.let` -> `let <|> = expr;`\n+// - `expr.letm` -> `let mut <|> = expr;`\n // - `expr.not` -> `!expr`\n // - `expr.dbg` -> `dbg!(expr)`\n // - `expr.dbgr` -> `dbg!(&expr)`"}]}