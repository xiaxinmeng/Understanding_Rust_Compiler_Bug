{"sha": "bb6e1bf811bce09fdab115a4257e47cc0d5ddc82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNmUxYmY4MTFiY2UwOWZkYWIxMTVhNDI1N2U0N2NjMGQ1ZGRjODI=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-24T16:00:29Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-29T15:11:28Z"}, "message": "Lower traits to TraitRef instead of TypeRef", "tree": {"sha": "7fa2802e317177ef9da00a442fddb75528d9b56b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fa2802e317177ef9da00a442fddb75528d9b56b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82", "html_url": "https://github.com/rust-lang/rust/commit/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb1d925dab36372c6bd1fb5671bb68ce938ff009", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1d925dab36372c6bd1fb5671bb68ce938ff009", "html_url": "https://github.com/rust-lang/rust/commit/bb1d925dab36372c6bd1fb5671bb68ce938ff009"}], "stats": {"total": 90, "additions": 76, "deletions": 14}, "files": [{"sha": "99d858eb3c49ad48a4eb9d3b3939d483de908a27", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=bb6e1bf811bce09fdab115a4257e47cc0d5ddc82", "patch": "@@ -44,6 +44,7 @@ use hir_def::{\n     per_ns::PerNs,\n     resolver::{HasResolver, Resolver},\n     src::HasSource as _,\n+    type_ref::TraitRef,\n     AdtId, AssocContainerId, AssocItemId, AssocItemLoc, AttrDefId, ConstId, ConstParamId,\n     DefWithBodyId, EnumId, FunctionId, GenericDefId, HasModule, ImplId, LifetimeParamId,\n     LocalEnumVariantId, LocalFieldId, Lookup, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n@@ -1613,7 +1614,7 @@ impl Impl {\n \n     // FIXME: the return type is wrong. This should be a hir version of\n     // `TraitRef` (ie, resolved `TypeRef`).\n-    pub fn target_trait(self, db: &dyn HirDatabase) -> Option<TypeRef> {\n+    pub fn target_trait(self, db: &dyn HirDatabase) -> Option<TraitRef> {\n         db.impl_data(self.id).target_trait.clone()\n     }\n "}, {"sha": "7d35d70837c4730327c8464c2a8fac249be0e17a", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=bb6e1bf811bce09fdab115a4257e47cc0d5ddc82", "patch": "@@ -10,7 +10,7 @@ use crate::{\n     body::Expander,\n     db::DefDatabase,\n     item_tree::{AssocItem, FunctionQualifier, ItemTreeId, ModItem, Param},\n-    type_ref::{TypeBound, TypeRef},\n+    type_ref::{TraitRef, TypeBound, TypeRef},\n     visibility::RawVisibility,\n     AssocContainerId, AssocItemId, ConstId, ConstLoc, FunctionId, FunctionLoc, HasModule, ImplId,\n     Intern, Lookup, ModuleId, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n@@ -156,7 +156,7 @@ impl TraitData {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImplData {\n-    pub target_trait: Option<TypeRef>,\n+    pub target_trait: Option<TraitRef>,\n     pub target_type: TypeRef,\n     pub items: Vec<AssocItemId>,\n     pub is_negative: bool,"}, {"sha": "db94bb1efbd43fb0b943e449f4c30fe28bc918e7", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=bb6e1bf811bce09fdab115a4257e47cc0d5ddc82", "patch": "@@ -31,7 +31,7 @@ use crate::{\n     db::DefDatabase,\n     generics::GenericParams,\n     path::{path, AssociatedTypeBinding, GenericArgs, ImportAlias, ModPath, Path, PathKind},\n-    type_ref::{Mutability, TypeBound, TypeRef},\n+    type_ref::{Mutability, TraitRef, TypeBound, TypeRef},\n     visibility::RawVisibility,\n };\n \n@@ -147,6 +147,7 @@ impl ItemTree {\n                 vis,\n                 generics,\n                 type_refs,\n+                trait_refs,\n                 inner_items,\n             } = &mut **data;\n \n@@ -173,6 +174,7 @@ impl ItemTree {\n             generics.arena.shrink_to_fit();\n             type_refs.arena.shrink_to_fit();\n             type_refs.map.shrink_to_fit();\n+            trait_refs.map.shrink_to_fit();\n \n             inner_items.shrink_to_fit();\n         }\n@@ -295,6 +297,32 @@ impl TypeRefStorage {\n     }\n }\n \n+/// `TraitRef` interner.\n+#[derive(Default, Debug, Eq, PartialEq)]\n+struct TraitRefStorage {\n+    arena: Arena<Arc<TraitRef>>,\n+    map: FxHashMap<Arc<TraitRef>, Idx<Arc<TraitRef>>>,\n+}\n+\n+impl TraitRefStorage {\n+    // Note: We lie about the `Idx<TraitRef>` to hide the interner details.\n+\n+    fn intern(&mut self, ty: TraitRef) -> Idx<TraitRef> {\n+        if let Some(id) = self.map.get(&ty) {\n+            return Idx::from_raw(id.into_raw());\n+        }\n+\n+        let ty = Arc::new(ty);\n+        let idx = self.arena.alloc(ty.clone());\n+        self.map.insert(ty, idx);\n+        Idx::from_raw(idx.into_raw())\n+    }\n+\n+    fn lookup(&self, id: Idx<TraitRef>) -> &TraitRef {\n+        &self.arena[Idx::from_raw(id.into_raw())]\n+    }\n+}\n+\n #[derive(Default, Debug, Eq, PartialEq)]\n struct ItemTreeData {\n     imports: Arena<Import>,\n@@ -319,6 +347,7 @@ struct ItemTreeData {\n     vis: ItemVisibilities,\n     generics: GenericParamsStorage,\n     type_refs: TypeRefStorage,\n+    trait_refs: TraitRefStorage,\n \n     inner_items: FxHashMap<FileAstId<ast::BlockExpr>, SmallVec<[ModItem; 1]>>,\n }\n@@ -556,6 +585,14 @@ impl Index<Idx<TypeRef>> for ItemTree {\n     }\n }\n \n+impl Index<Idx<TraitRef>> for ItemTree {\n+    type Output = TraitRef;\n+\n+    fn index(&self, id: Idx<TraitRef>) -> &Self::Output {\n+        self.data().trait_refs.lookup(id)\n+    }\n+}\n+\n impl<N: ItemTreeNode> Index<FileItemTreeId<N>> for ItemTree {\n     type Output = N;\n     fn index(&self, id: FileItemTreeId<N>) -> &N {\n@@ -692,7 +729,7 @@ pub struct Trait {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Impl {\n     pub generic_params: GenericParamsId,\n-    pub target_trait: Option<Idx<TypeRef>>,\n+    pub target_trait: Option<Idx<TraitRef>>,\n     pub target_type: Idx<TypeRef>,\n     pub is_negative: bool,\n     pub items: Box<[AssocItem]>,"}, {"sha": "34af5c8d434d217e116f57e456204d083c9f5234", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=bb6e1bf811bce09fdab115a4257e47cc0d5ddc82", "patch": "@@ -11,7 +11,7 @@ use syntax::{\n \n use crate::{\n     generics::{GenericParams, TypeParamData, TypeParamProvenance},\n-    type_ref::LifetimeRef,\n+    type_ref::{LifetimeRef, TraitRef},\n };\n \n use super::*;\n@@ -536,7 +536,7 @@ impl Ctx {\n     fn lower_impl(&mut self, impl_def: &ast::Impl) -> Option<FileItemTreeId<Impl>> {\n         let generic_params =\n             self.lower_generic_params_and_inner_items(GenericsOwner::Impl, impl_def);\n-        let target_trait = impl_def.trait_().map(|tr| self.lower_type_ref(&tr));\n+        let target_trait = impl_def.trait_().map(|tr| self.lower_trait_ref(&tr));\n         let target_type = self.lower_type_ref(&impl_def.self_ty()?);\n         let is_negative = impl_def.excl_token().is_some();\n \n@@ -740,10 +740,16 @@ impl Ctx {\n         self.data().vis.alloc(vis)\n     }\n \n+    fn lower_trait_ref(&mut self, trait_ref: &ast::Type) -> Idx<TraitRef> {\n+        let trait_ref = TraitRef::from_ast(&self.body_ctx, trait_ref.clone());\n+        self.data().trait_refs.intern(trait_ref)\n+    }\n+\n     fn lower_type_ref(&mut self, type_ref: &ast::Type) -> Idx<TypeRef> {\n         let tyref = TypeRef::from_ast(&self.body_ctx, type_ref.clone());\n         self.data().type_refs.intern(tyref)\n     }\n+\n     fn lower_type_ref_opt(&mut self, type_ref: Option<ast::Type>) -> Idx<TypeRef> {\n         match type_ref.map(|ty| self.lower_type_ref(&ty)) {\n             Some(it) => it,"}, {"sha": "b7484ed0d3b00856d9e6eec3909e0c9bc30a8835", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=bb6e1bf811bce09fdab115a4257e47cc0d5ddc82", "patch": "@@ -51,6 +51,25 @@ impl Rawness {\n     }\n }\n \n+#[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+pub enum TraitRef {\n+    Path(Path),\n+    Error,\n+}\n+\n+impl TraitRef {\n+    /// Converts an `ast::PathType` to a `hir::TraitRef`.\n+    pub(crate) fn from_ast(ctx: &LowerCtx, node: ast::Type) -> Self {\n+        // FIXME: Use `Path::from_src`\n+        match node {\n+            ast::Type::PathType(path) => path\n+                .path()\n+                .and_then(|it| ctx.lower_path(it))\n+                .map_or(TraitRef::Error, TraitRef::Path),\n+            _ => TraitRef::Error,\n+        }\n+    }\n+}\n /// Compare ty::Ty\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub enum TypeRef {"}, {"sha": "9b99268e21e31265accd378105c8361816091349", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6e1bf811bce09fdab115a4257e47cc0d5ddc82/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=bb6e1bf811bce09fdab115a4257e47cc0d5ddc82", "patch": "@@ -15,7 +15,7 @@ use hir_def::{\n     generics::{TypeParamProvenance, WherePredicate, WherePredicateTypeTarget},\n     path::{GenericArg, Path, PathSegment, PathSegments},\n     resolver::{HasResolver, Resolver, TypeNs},\n-    type_ref::{TypeBound, TypeRef},\n+    type_ref::{TraitRef as HirTraitRef, TypeBound, TypeRef},\n     AdtId, AssocContainerId, AssocItemId, ConstId, ConstParamId, EnumId, EnumVariantId, FunctionId,\n     GenericDefId, HasModule, ImplId, LocalFieldId, Lookup, StaticId, StructId, TraitId,\n     TypeAliasId, TypeParamId, UnionId, VariantId,\n@@ -667,14 +667,13 @@ impl<'a> TyLoweringContext<'a> {\n \n     fn lower_trait_ref(\n         &self,\n-        type_ref: &TypeRef,\n+        trait_ref: &HirTraitRef,\n         explicit_self_ty: Option<Ty>,\n     ) -> Option<TraitRef> {\n-        let path = match type_ref {\n-            TypeRef::Path(path) => path,\n-            _ => return None,\n-        };\n-        self.lower_trait_ref_from_path(path, explicit_self_ty)\n+        match trait_ref {\n+            HirTraitRef::Path(path) => self.lower_trait_ref_from_path(path, explicit_self_ty),\n+            HirTraitRef::Error => None,\n+        }\n     }\n \n     fn trait_ref_substs_from_path("}]}