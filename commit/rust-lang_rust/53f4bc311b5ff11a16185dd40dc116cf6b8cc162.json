{"sha": "53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZjRiYzMxMWI1ZmYxMWExNjE4NWRkNDBkYzExNmNmNmI4Y2MxNjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-07T15:25:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-07T15:25:47Z"}, "message": "Auto merge of #41138 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 9 pull requests\n\n- Successful merges: #40797, #41047, #41056, #41061, #41075, #41080, #41120, #41130, #41131\n- Failed merges:", "tree": {"sha": "a53011ce53a42b7ce985f2cc53e76d8b56221de3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a53011ce53a42b7ce985f2cc53e76d8b56221de3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "html_url": "https://github.com/rust-lang/rust/commit/53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c438c1fb39337b7712afc58df4f1f9c5112e5cc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c438c1fb39337b7712afc58df4f1f9c5112e5cc1", "html_url": "https://github.com/rust-lang/rust/commit/c438c1fb39337b7712afc58df4f1f9c5112e5cc1"}, {"sha": "cd2310b93cb8feb84435157455743aec39b86d80", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd2310b93cb8feb84435157455743aec39b86d80", "html_url": "https://github.com/rust-lang/rust/commit/cd2310b93cb8feb84435157455743aec39b86d80"}], "stats": {"total": 543, "additions": 347, "deletions": 196}, "files": [{"sha": "9070c5d9edf1ec2e11f8436cb8c216e5d6582961", "filename": "appveyor.yml", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -141,15 +141,18 @@ install:\n   - set SCCACHE_ERROR_LOG=%CD%/sccache.log\n \n test_script:\n-  - appveyor-retry sh -c 'git submodule deinit -f . && git submodule update --init'\n+  - if not exist C:\\cache\\rustsrc\\NUL mkdir C:\\cache\\rustsrc\n+  - sh src/ci/init_repo.sh . /c/cache/rustsrc\n   - set SRC=.\n   - set NO_CCACHE=1\n   - sh src/ci/run.sh\n \n on_failure:\n-  - cat %CD%/sccache.log\n+  - cat %CD%\\sccache.log\n+  - cat C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\build-cache-logs\\*.log\n \n cache:\n+  - C:\\cache\\rustsrc\n   - \"build/i686-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\"\n   - \"build/x86_64-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\"\n   - \"i686-pc-windows-msvc/llvm -> src/rustllvm/llvm-rebuild-trigger\""}, {"sha": "6472b1a928cafd92cd9298da7ca0ef060ac3ad5f", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -433,29 +433,32 @@ pub fn rust_src(build: &Build) {\n         copy(&build.src.join(item), &dst_src.join(item));\n     }\n \n-    // Get cargo-vendor installed, if it isn't already.\n-    let mut has_cargo_vendor = false;\n-    let mut cmd = Command::new(&build.cargo);\n-    for line in output(cmd.arg(\"install\").arg(\"--list\")).lines() {\n-        has_cargo_vendor |= line.starts_with(\"cargo-vendor \");\n-    }\n-    if !has_cargo_vendor {\n+    // If we're building from git sources, we need to vendor a complete distribution.\n+    if build.src_is_git {\n+        // Get cargo-vendor installed, if it isn't already.\n+        let mut has_cargo_vendor = false;\n+        let mut cmd = Command::new(&build.cargo);\n+        for line in output(cmd.arg(\"install\").arg(\"--list\")).lines() {\n+            has_cargo_vendor |= line.starts_with(\"cargo-vendor \");\n+        }\n+        if !has_cargo_vendor {\n+            let mut cmd = Command::new(&build.cargo);\n+            cmd.arg(\"install\")\n+               .arg(\"--force\")\n+               .arg(\"--debug\")\n+               .arg(\"--vers\").arg(CARGO_VENDOR_VERSION)\n+               .arg(\"cargo-vendor\")\n+               .env(\"RUSTC\", &build.rustc);\n+            build.run(&mut cmd);\n+        }\n+\n+        // Vendor all Cargo dependencies\n         let mut cmd = Command::new(&build.cargo);\n-        cmd.arg(\"install\")\n-           .arg(\"--force\")\n-           .arg(\"--debug\")\n-           .arg(\"--vers\").arg(CARGO_VENDOR_VERSION)\n-           .arg(\"cargo-vendor\")\n-           .env(\"RUSTC\", &build.rustc);\n+        cmd.arg(\"vendor\")\n+           .current_dir(&dst_src.join(\"src\"));\n         build.run(&mut cmd);\n     }\n \n-    // Vendor all Cargo dependencies\n-    let mut cmd = Command::new(&build.cargo);\n-    cmd.arg(\"vendor\")\n-       .current_dir(&dst_src.join(\"src\"));\n-    build.run(&mut cmd);\n-\n     // Create source tarball in rust-installer format\n     let mut cmd = Command::new(SH_CMD);\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))"}, {"sha": "8303a40bb6965fffc48bfa7ce4e2f3c8a485dbce", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -162,6 +162,7 @@ pub struct Build {\n     cxx: HashMap<String, gcc::Tool>,\n     crates: HashMap<String, Crate>,\n     is_sudo: bool,\n+    src_is_git: bool,\n }\n \n #[derive(Debug)]\n@@ -233,6 +234,7 @@ impl Build {\n         };\n         let rust_info = channel::GitInfo::new(&src);\n         let cargo_info = channel::GitInfo::new(&src.join(\"cargo\"));\n+        let src_is_git = src.join(\".git\").exists();\n \n         Build {\n             flags: flags,\n@@ -251,6 +253,7 @@ impl Build {\n             lldb_version: None,\n             lldb_python_dir: None,\n             is_sudo: is_sudo,\n+            src_is_git: src_is_git,\n         }\n     }\n \n@@ -307,10 +310,7 @@ impl Build {\n             OutOfSync,\n         }\n \n-        if !self.config.submodules {\n-            return\n-        }\n-        if fs::metadata(self.src.join(\".git\")).is_err() {\n+        if !self.src_is_git || !self.config.submodules {\n             return\n         }\n         let git = || {"}, {"sha": "d1b235f4691dca7e476e4f862849b1f93bfe2c88", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -65,7 +65,7 @@ pub fn check(build: &mut Build) {\n \n     // If we've got a git directory we're gona need git to update\n     // submodules and learn about various other aspects.\n-    if fs::metadata(build.src.join(\".git\")).is_ok() {\n+    if build.src_is_git {\n         need_cmd(\"git\".as_ref());\n     }\n "}, {"sha": "6f3a7e091e1edb78ecf2feaa4afdbee02bb16a40", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -152,18 +152,13 @@ For targets: `powerpc-unknown-linux-gnu`\n - Path and misc options > Patches origin = Bundled, then local\n - Path and misc options > Local patch directory = /tmp/patches\n - Target options > Target Architecture = powerpc\n-- Target options > Emit assembly for CPU = power4 -- (+)\n-- Target options > Tune for CPU = power6 -- (+)\n+- Target options > Emit assembly for CPU = powerpc -- pure 32-bit PowerPC\n - Operating System > Target OS = linux\n - Operating System > Linux kernel version = 2.6.32.68 -- ~RHEL6 kernel\n - C-library > glibc version = 2.12.2 -- ~RHEL6 glibc\n - C compiler > gcc version = 4.9.3\n-- C compiler > Core gcc extra config = --with-cpu-32=power4 --with-cpu=default32 -- (+)\n-- C compiler > gcc extra config = --with-cpu-32=power4 --with-cpu=default32 -- (+)\n - C compiler > C++ = ENABLE -- to cross compile LLVM\n \n-(+) These CPU options match the configuration of the toolchains in RHEL6.\n-\n ## `powerpc64-linux-gnu.config`\n \n For targets: `powerpc64-unknown-linux-gnu`"}, {"sha": "4a401bbb3031fd1aa8240ee1f5e1ab84cd105c1c", "filename": "src/ci/docker/dist-fuchsia/Dockerfile", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -14,13 +14,14 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   xz-utils \\\n   swig \\\n   libedit-dev \\\n-  libncurses5-dev\n+  libncurses5-dev \\\n+  patch\n \n RUN curl -L https://cmake.org/files/v3.8/cmake-3.8.0-rc1-Linux-x86_64.tar.gz | \\\n       tar xzf - -C /usr/local --strip-components=1\n \n WORKDIR /tmp\n-COPY shared.sh build-toolchain.sh /tmp/\n+COPY shared.sh build-toolchain.sh compiler-rt-dso-handle.patch /tmp/\n RUN /tmp/build-toolchain.sh\n \n RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\"}, {"sha": "10b285a546655a8ba9c99b154d95f5e17c11f838", "filename": "src/ci/docker/dist-fuchsia/build-toolchain.sh", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fbuild-toolchain.sh?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -9,33 +9,43 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n+# ignore-tidy-linelength\n+\n set -ex\n source shared.sh\n \n # Download sources\n SRCS=(\n-  \"https://fuchsia.googlesource.com/magenta magenta ac69119\"\n-  \"https://fuchsia.googlesource.com/third_party/llvm llvm 5463083\"\n-  \"https://fuchsia.googlesource.com/third_party/clang llvm/tools/clang 4ff7b4b\"\n-  \"https://fuchsia.googlesource.com/third_party/lld llvm/tools/lld fd465a3\"\n-  \"https://fuchsia.googlesource.com/third_party/lldb llvm/tools/lldb 6bb11f8\"\n-  \"https://fuchsia.googlesource.com/third_party/compiler-rt llvm/runtimes/compiler-rt 52d4ecc\"\n-  \"https://fuchsia.googlesource.com/third_party/libcxx llvm/runtimes/libcxx e891cc8\"\n-  \"https://fuchsia.googlesource.com/third_party/libcxxabi llvm/runtimes/libcxxabi f0f0257\"\n-  \"https://fuchsia.googlesource.com/third_party/libunwind llvm/runtimes/libunwind 50bddc1\"\n+  \"https://fuchsia.googlesource.com/magenta magenta d17073dc8de344ead3b65e8cc6a12280dec38c84\"\n+  \"https://llvm.googlesource.com/llvm llvm 3f58a16d8eec385e2b3ebdfbb84ff9d3bf27e025\"\n+  \"https://llvm.googlesource.com/clang llvm/tools/clang 727ea63e6e82677f6e10e05e08bc7d6bdbae3111\"\n+  \"https://llvm.googlesource.com/lld llvm/tools/lld a31286c1366e5e89b8872803fded13805a1a084b\"\n+  \"https://llvm.googlesource.com/lldb llvm/tools/lldb 0b2384abec4cb99ad66687712e07dee4dd9d187e\"\n+  \"https://llvm.googlesource.com/compiler-rt llvm/runtimes/compiler-rt 9093a35c599fe41278606a20b51095ea8bd5a081\"\n+  \"https://llvm.googlesource.com/libcxx llvm/runtimes/libcxx 607e0c71ec4f7fd377ad3f6c47b08dbe89f66eaa\"\n+  \"https://llvm.googlesource.com/libcxxabi llvm/runtimes/libcxxabi 0a3a1a8a5ca5ef69e0f6b7d5b9d13e63e6fd2c19\"\n+  \"https://llvm.googlesource.com/libunwind llvm/runtimes/libunwind e128003563d99d9ee62247c4cee40f07d21c03e3\"\n )\n \n fetch() {\n   mkdir -p $2\n   pushd $2 > /dev/null\n-  curl -sL $1/+archive/$3.tar.gz | tar xzf -\n+  git init\n+  git remote add origin $1\n+  git fetch --depth=1 origin $3\n+  git reset --hard FETCH_HEAD\n   popd > /dev/null\n }\n \n for i in \"${SRCS[@]}\"; do\n   fetch $i\n done\n \n+# Remove this once https://reviews.llvm.org/D28791 is resolved\n+cd llvm/runtimes/compiler-rt\n+patch -Np1 < /tmp/compiler-rt-dso-handle.patch\n+cd ../../..\n+\n # Build toolchain\n cd llvm\n mkdir build"}, {"sha": "0b702894bb216481125219d51de73ce4fb69cf4d", "filename": "src/ci/docker/dist-fuchsia/compiler-rt-dso-handle.patch", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fcompiler-rt-dso-handle.patch", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fcompiler-rt-dso-handle.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fcompiler-rt-dso-handle.patch?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -0,0 +1,41 @@\n+diff --git a/lib/builtins/CMakeLists.txt b/lib/builtins/CMakeLists.txt\n+index fc4384af2..b442264c0 100644\n+--- a/lib/builtins/CMakeLists.txt\n++++ b/lib/builtins/CMakeLists.txt\n+@@ -194,6 +194,12 @@ if(APPLE)\n+     atomic_thread_fence.c)\n+ endif()\n+ \n++if(FUCHSIA)\n++  set(GENERIC_SOURCES\n++    ${GENERIC_SOURCES}\n++    dso_handle.c)\n++endif()\n++\n+ if(NOT WIN32 OR MINGW)\n+   set(GENERIC_SOURCES\n+       ${GENERIC_SOURCES}\n+diff --git a/lib/builtins/dso_handle.c b/lib/builtins/dso_handle.c\n+new file mode 100644\n+index 000000000..7766cd0aa\n+--- /dev/null\n++++ b/lib/builtins/dso_handle.c\n+@@ -0,0 +1,18 @@\n++/* ===-- dso_handle.c - Provide __dso_handle -------------------------------===\n++ *\n++ *               The LLVM Compiler Infrastructure\n++ *\n++ * This file is dual licensed under the MIT and the University of Illinois Open\n++ * Source Licenses. See LICENSE.TXT for details.\n++ *\n++ * ===----------------------------------------------------------------------===\n++ */\n++\n++/* __dso_handle symbol is mandated by C++ ABI with a value which is an address\n++ * in one of the object's segments, and as such this symbol has to be included\n++ * statically and cannot be a part of a shared library. Traditionally, it has\n++ * been defined in crtbegin.o but there's no principled reason for it to be\n++ * there. We defined this symbol in the builtin library which is built as a\n++ * static library and always included in the final link.\n++ */\n++__attribute__((visibility(\"hidden\"))) void *const __dso_handle;"}, {"sha": "984a0a0304e4754b3e16b0beb60c97e233088725", "filename": "src/ci/docker/dist-powerpc-linux/powerpc-linux-gnu.config", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.config", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-powerpc-linux%2Fpowerpc-linux-gnu.config?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -101,8 +101,8 @@ CT_ARCH_SUPPORTS_WITH_FLOAT=y\n CT_ARCH_DEFAULT_BE=y\n CT_ARCH_DEFAULT_32=y\n CT_ARCH_ABI=\"\"\n-CT_ARCH_CPU=\"power4\"\n-CT_ARCH_TUNE=\"power6\"\n+CT_ARCH_CPU=\"powerpc\"\n+CT_ARCH_TUNE=\"\"\n CT_ARCH_BE=y\n # CT_ARCH_LE is not set\n CT_ARCH_32=y\n@@ -391,8 +391,8 @@ CT_CC_GCC_HAS_LIBSANITIZER=y\n CT_CC_GCC_VERSION=\"4.9.3\"\n # CT_CC_LANG_FORTRAN is not set\n CT_CC_GCC_ENABLE_CXX_FLAGS=\"\"\n-CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"--with-cpu-32=power4 --with-cpu=default32\"\n-CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"--with-cpu-32=power4 --with-cpu=default32\"\n+CT_CC_GCC_CORE_EXTRA_CONFIG_ARRAY=\"\"\n+CT_CC_GCC_EXTRA_CONFIG_ARRAY=\"\"\n CT_CC_GCC_EXTRA_ENV_ARRAY=\"\"\n CT_CC_GCC_STATIC_LIBSTDCXX=y\n # CT_CC_GCC_SYSTEM_ZLIB is not set"}, {"sha": "c235681cddd0c5dac224280a0d67c25c6599c23b", "filename": "src/ci/init_repo.sh", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fci%2Finit_repo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Fci%2Finit_repo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finit_repo.sh?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -38,9 +38,20 @@ fi\n \n # Wipe the cache if it's not valid, or mark it as invalid while we update it\n if [ ! -f \"$cache_valid_file\" ]; then\n-    rm -rf \"$CACHE_DIR\" && mkdir \"$CACHE_DIR\"\n+    rm -rf \"$CACHE_DIR\"\n+    mkdir \"$CACHE_DIR\"\n else\n-    rm \"$cache_valid_file\"\n+    stat_lines=$(cd \"$cache_src_dir\" && git status --porcelain | wc -l)\n+    stat_ec=$(cd \"$cache_src_dir\" && git status >/dev/null 2>&1 && echo $?)\n+    if [ ! -d \"$cache_src_dir/.git\" -o $stat_lines != 0 -o $stat_ec != 0 ]; then\n+        # Something is badly wrong - the cache valid file is here, but something\n+        # about the git repo is fishy. Nuke it all, just in case\n+        echo \"WARNING: $cache_valid_file exists but bad repo: l:$stat_lines, ec:$stat_ec\"\n+        rm -rf \"$CACHE_DIR\"\n+        mkdir \"$CACHE_DIR\"\n+    else\n+        rm \"$cache_valid_file\"\n+    fi\n fi\n \n # Update the cache (a pristine copy of the rust source master)"}, {"sha": "3f4390536b0428298c1bf74b83c451de74b15ce7", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -2697,7 +2697,7 @@ impl<'a> LoweringContext<'a> {\n     fn pat_ident_binding_mode(&mut self, span: Span, name: Name, bm: hir::BindingMode)\n                               -> P<hir::Pat> {\n         let id = self.next_id();\n-        let parent_def = self.parent_def;\n+        let parent_def = self.parent_def.unwrap();\n         let def_id = {\n             let defs = self.resolver.definitions();\n             let def_path_data = DefPathData::Binding(name.as_str());"}, {"sha": "c1417f718b27abbecf88081040cf9a25adaab858", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -40,11 +40,9 @@ impl<'a> DefCollector<'a> {\n         }\n     }\n \n-    pub fn collect_root(&mut self) {\n-        let root = self.create_def_with_parent(None,\n-                                               CRATE_NODE_ID,\n-                                               DefPathData::CrateRoot,\n-                                               ITEM_LIKE_SPACE);\n+    pub fn collect_root(&mut self, crate_name: &str, crate_disambiguator: &str) {\n+        let root = self.definitions.create_root_def(crate_name,\n+                                                    crate_disambiguator);\n         assert_eq!(root, CRATE_DEF_INDEX);\n         self.parent_def = Some(root);\n     }\n@@ -54,20 +52,11 @@ impl<'a> DefCollector<'a> {\n                   data: DefPathData,\n                   address_space: DefIndexAddressSpace)\n                   -> DefIndex {\n-        let parent_def = self.parent_def;\n+        let parent_def = self.parent_def.unwrap();\n         debug!(\"create_def(node_id={:?}, data={:?}, parent_def={:?})\", node_id, data, parent_def);\n         self.definitions.create_def_with_parent(parent_def, node_id, data, address_space)\n     }\n \n-    fn create_def_with_parent(&mut self,\n-                              parent: Option<DefIndex>,\n-                              node_id: NodeId,\n-                              data: DefPathData,\n-                              address_space: DefIndexAddressSpace)\n-                              -> DefIndex {\n-        self.definitions.create_def_with_parent(parent, node_id, data, address_space)\n-    }\n-\n     pub fn with_parent<F: FnOnce(&mut Self)>(&mut self, parent_def: DefIndex, f: F) {\n         let parent = self.parent_def;\n         self.parent_def = Some(parent_def);"}, {"sha": "6118df2ddfc899a527cf60077e86fb47ddbeb453", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 93, "deletions": 22, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -21,7 +21,7 @@ use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::stable_hasher::StableHasher;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use std::fmt::Write;\n-use std::hash::{Hash, Hasher};\n+use std::hash::Hash;\n use syntax::ast;\n use syntax::symbol::{Symbol, InternedString};\n use ty::TyCtxt;\n@@ -34,6 +34,7 @@ use util::nodemap::NodeMap;\n pub struct DefPathTable {\n     index_to_key: [Vec<DefKey>; 2],\n     key_to_index: FxHashMap<DefKey, DefIndex>,\n+    def_path_hashes: [Vec<u64>; 2],\n }\n \n // Unfortunately we have to provide a manual impl of Clone because of the\n@@ -44,6 +45,8 @@ impl Clone for DefPathTable {\n             index_to_key: [self.index_to_key[0].clone(),\n                            self.index_to_key[1].clone()],\n             key_to_index: self.key_to_index.clone(),\n+            def_path_hashes: [self.def_path_hashes[0].clone(),\n+                              self.def_path_hashes[1].clone()],\n         }\n     }\n }\n@@ -52,6 +55,7 @@ impl DefPathTable {\n \n     fn allocate(&mut self,\n                 key: DefKey,\n+                def_path_hash: u64,\n                 address_space: DefIndexAddressSpace)\n                 -> DefIndex {\n         let index = {\n@@ -62,6 +66,9 @@ impl DefPathTable {\n             index\n         };\n         self.key_to_index.insert(key, index);\n+        self.def_path_hashes[address_space.index()].push(def_path_hash);\n+        debug_assert!(self.def_path_hashes[address_space.index()].len() ==\n+                      self.index_to_key[address_space.index()].len());\n         index\n     }\n \n@@ -71,6 +78,12 @@ impl DefPathTable {\n                          [index.as_array_index()].clone()\n     }\n \n+    #[inline(always)]\n+    pub fn def_path_hash(&self, index: DefIndex) -> u64 {\n+        self.def_path_hashes[index.address_space().index()]\n+                            [index.as_array_index()]\n+    }\n+\n     #[inline(always)]\n     pub fn def_index_for_def_key(&self, key: &DefKey) -> Option<DefIndex> {\n         self.key_to_index.get(key).cloned()\n@@ -116,17 +129,28 @@ impl DefPathTable {\n \n impl Encodable for DefPathTable {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        // Index to key\n         self.index_to_key[DefIndexAddressSpace::Low.index()].encode(s)?;\n-        self.index_to_key[DefIndexAddressSpace::High.index()].encode(s)\n+        self.index_to_key[DefIndexAddressSpace::High.index()].encode(s)?;\n+\n+        // DefPath hashes\n+        self.def_path_hashes[DefIndexAddressSpace::Low.index()].encode(s)?;\n+        self.def_path_hashes[DefIndexAddressSpace::High.index()].encode(s)?;\n+\n+        Ok(())\n     }\n }\n \n impl Decodable for DefPathTable {\n     fn decode<D: Decoder>(d: &mut D) -> Result<DefPathTable, D::Error> {\n         let index_to_key_lo: Vec<DefKey> = Decodable::decode(d)?;\n-        let index_to_key_high: Vec<DefKey> = Decodable::decode(d)?;\n+        let index_to_key_hi: Vec<DefKey> = Decodable::decode(d)?;\n \n-        let index_to_key = [index_to_key_lo, index_to_key_high];\n+        let def_path_hashes_lo: Vec<u64> = Decodable::decode(d)?;\n+        let def_path_hashes_hi: Vec<u64> = Decodable::decode(d)?;\n+\n+        let index_to_key = [index_to_key_lo, index_to_key_hi];\n+        let def_path_hashes = [def_path_hashes_lo, def_path_hashes_hi];\n \n         let mut key_to_index = FxHashMap();\n \n@@ -141,6 +165,7 @@ impl Decodable for DefPathTable {\n         Ok(DefPathTable {\n             index_to_key: index_to_key,\n             key_to_index: key_to_index,\n+            def_path_hashes: def_path_hashes,\n         })\n     }\n }\n@@ -184,6 +209,29 @@ pub struct DefKey {\n     pub disambiguated_data: DisambiguatedDefPathData,\n }\n \n+impl DefKey {\n+    fn compute_stable_hash(&self, parent_hash: u64) -> u64 {\n+        let mut hasher = StableHasher::new();\n+\n+        // We hash a 0u8 here to disambiguate between regular DefPath hashes,\n+        // and the special \"root_parent\" below.\n+        0u8.hash(&mut hasher);\n+        parent_hash.hash(&mut hasher);\n+        self.disambiguated_data.hash(&mut hasher);\n+        hasher.finish()\n+    }\n+\n+    fn root_parent_stable_hash(crate_name: &str, crate_disambiguator: &str) -> u64 {\n+        let mut hasher = StableHasher::new();\n+        // Disambiguate this from a regular DefPath hash,\n+        // see compute_stable_hash() above.\n+        1u8.hash(&mut hasher);\n+        crate_name.hash(&mut hasher);\n+        crate_disambiguator.hash(&mut hasher);\n+        hasher.finish()\n+    }\n+}\n+\n /// Pair of `DefPathData` and an integer disambiguator. The integer is\n /// normally 0, but in the event that there are multiple defs with the\n /// same `parent` and `data`, we use this field to disambiguate\n@@ -271,19 +319,6 @@ impl DefPath {\n \n         s\n     }\n-\n-    pub fn deterministic_hash(&self, tcx: TyCtxt) -> u64 {\n-        debug!(\"deterministic_hash({:?})\", self);\n-        let mut state = StableHasher::new();\n-        self.deterministic_hash_to(tcx, &mut state);\n-        state.finish()\n-    }\n-\n-    pub fn deterministic_hash_to<H: Hasher>(&self, tcx: TyCtxt, state: &mut H) {\n-        tcx.original_crate_name(self.krate).as_str().hash(state);\n-        tcx.crate_disambiguator(self.krate).as_str().hash(state);\n-        self.data.hash(state);\n-    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n@@ -338,6 +373,7 @@ impl Definitions {\n             table: DefPathTable {\n                 index_to_key: [vec![], vec![]],\n                 key_to_index: FxHashMap(),\n+                def_path_hashes: [vec![], vec![]],\n             },\n             node_to_def_index: NodeMap(),\n             def_index_to_node: [vec![], vec![]],\n@@ -359,6 +395,11 @@ impl Definitions {\n         self.table.def_key(index)\n     }\n \n+    #[inline(always)]\n+    pub fn def_path_hash(&self, index: DefIndex) -> u64 {\n+        self.table.def_path_hash(index)\n+    }\n+\n     pub fn def_index_for_def_key(&self, key: DefKey) -> Option<DefIndex> {\n         self.table.def_index_for_def_key(&key)\n     }\n@@ -398,12 +439,38 @@ impl Definitions {\n         self.node_to_hir_id[node_id]\n     }\n \n+    /// Add a definition with a parent definition.\n+    pub fn create_root_def(&mut self,\n+                           crate_name: &str,\n+                           crate_disambiguator: &str)\n+                           -> DefIndex {\n+        let key = DefKey {\n+            parent: None,\n+            disambiguated_data: DisambiguatedDefPathData {\n+                data: DefPathData::CrateRoot,\n+                disambiguator: 0\n+            }\n+        };\n+\n+        let parent_hash = DefKey::root_parent_stable_hash(crate_name,\n+                                                          crate_disambiguator);\n+        let def_path_hash = key.compute_stable_hash(parent_hash);\n+\n+        // Create the definition.\n+        let address_space = super::ITEM_LIKE_SPACE;\n+        let index = self.table.allocate(key, def_path_hash, address_space);\n+        assert!(self.def_index_to_node[address_space.index()].is_empty());\n+        self.def_index_to_node[address_space.index()].push(ast::CRATE_NODE_ID);\n+        self.node_to_def_index.insert(ast::CRATE_NODE_ID, index);\n+\n+        index\n+    }\n+\n     /// Add a definition with a parent definition.\n     pub fn create_def_with_parent(&mut self,\n-                                  parent: Option<DefIndex>,\n+                                  parent: DefIndex,\n                                   node_id: ast::NodeId,\n                                   data: DefPathData,\n-                                  // is_owner: bool)\n                                   address_space: DefIndexAddressSpace)\n                                   -> DefIndex {\n         debug!(\"create_def_with_parent(parent={:?}, node_id={:?}, data={:?})\",\n@@ -415,12 +482,13 @@ impl Definitions {\n                 data,\n                 self.table.def_key(self.node_to_def_index[&node_id]));\n \n-        assert_eq!(parent.is_some(), data != DefPathData::CrateRoot);\n+        // The root node must be created with create_root_def()\n+        assert!(data != DefPathData::CrateRoot);\n \n         // Find a unique DefKey. This basically means incrementing the disambiguator\n         // until we get no match.\n         let mut key = DefKey {\n-            parent: parent,\n+            parent: Some(parent),\n             disambiguated_data: DisambiguatedDefPathData {\n                 data: data,\n                 disambiguator: 0\n@@ -431,10 +499,13 @@ impl Definitions {\n             key.disambiguated_data.disambiguator += 1;\n         }\n \n+        let parent_hash = self.table.def_path_hash(parent);\n+        let def_path_hash = key.compute_stable_hash(parent_hash);\n+\n         debug!(\"create_def_with_parent: after disambiguation, key = {:?}\", key);\n \n         // Create the definition.\n-        let index = self.table.allocate(key, address_space);\n+        let index = self.table.allocate(key, def_path_hash, address_space);\n         assert_eq!(index.as_array_index(),\n                    self.def_index_to_node[address_space.index()].len());\n         self.def_index_to_node[address_space.index()].push(node_id);"}, {"sha": "03051dc0034204a7dde4cc65c3882432c3070ef2", "filename": "src/librustc/ich/def_path_hash.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c438c1fb39337b7712afc58df4f1f9c5112e5cc1/src%2Flibrustc%2Fich%2Fdef_path_hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c438c1fb39337b7712afc58df4f1f9c5112e5cc1/src%2Flibrustc%2Fich%2Fdef_path_hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fdef_path_hash.rs?ref=c438c1fb39337b7712afc58df4f1f9c5112e5cc1", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use hir::def_id::DefId;\n-use ty::TyCtxt;\n-use util::nodemap::DefIdMap;\n-\n-pub struct DefPathHashes<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    data: DefIdMap<u64>,\n-}\n-\n-impl<'a, 'tcx> DefPathHashes<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n-        DefPathHashes {\n-            tcx: tcx,\n-            data: DefIdMap()\n-        }\n-    }\n-\n-    pub fn hash(&mut self, def_id: DefId) -> u64 {\n-        let tcx = self.tcx;\n-        *self.data.entry(def_id)\n-                  .or_insert_with(|| {\n-                      let def_path = tcx.def_path(def_id);\n-                      def_path.deterministic_hash(tcx)\n-                  })\n-    }\n-}"}, {"sha": "5ef30550f1155ec017d1eb3b713d248a85560807", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -10,7 +10,7 @@\n \n use hir;\n use hir::def_id::DefId;\n-use ich::{self, CachingCodemapView, DefPathHashes};\n+use ich::{self, CachingCodemapView};\n use session::config::DebugInfoLevel::NoDebugInfo;\n use ty;\n \n@@ -32,7 +32,6 @@ use rustc_data_structures::accumulate_vec::AccumulateVec;\n /// things (e.g. each DefId/DefPath is only hashed once).\n pub struct StableHashingContext<'a, 'tcx: 'a> {\n     tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n-    def_path_hashes: DefPathHashes<'a, 'tcx>,\n     codemap: CachingCodemapView<'tcx>,\n     hash_spans: bool,\n     hash_bodies: bool,\n@@ -64,7 +63,6 @@ impl<'a, 'tcx: 'a> StableHashingContext<'a, 'tcx> {\n \n         StableHashingContext {\n             tcx: tcx,\n-            def_path_hashes: DefPathHashes::new(tcx),\n             codemap: CachingCodemapView::new(tcx),\n             hash_spans: hash_spans_initial,\n             hash_bodies: true,\n@@ -111,7 +109,7 @@ impl<'a, 'tcx: 'a> StableHashingContext<'a, 'tcx> {\n \n     #[inline]\n     pub fn def_path_hash(&mut self, def_id: DefId) -> u64 {\n-        self.def_path_hashes.hash(def_id)\n+        self.tcx.def_path_hash(def_id)\n     }\n \n     #[inline]"}, {"sha": "f932c90a331e145509f86322f3692ee8cefcdf4c", "filename": "src/librustc/ich/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fmod.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -11,12 +11,10 @@\n //! ICH - Incremental Compilation Hash\n \n pub use self::fingerprint::Fingerprint;\n-pub use self::def_path_hash::DefPathHashes;\n pub use self::caching_codemap_view::CachingCodemapView;\n pub use self::hcx::{StableHashingContext, NodeIdHashingMode};\n \n mod fingerprint;\n-mod def_path_hash;\n mod caching_codemap_view;\n mod hcx;\n "}, {"sha": "694321812836b2b943cebea312515ab54118ec5a", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -172,7 +172,7 @@ pub trait CrateStore {\n     fn stability(&self, def: DefId) -> Option<attr::Stability>;\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation>;\n     fn visibility(&self, def: DefId) -> ty::Visibility;\n-    fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>>;\n+    fn visible_parent_map<'a>(&'a self) -> ::std::cell::Ref<'a, DefIdMap<DefId>>;\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics;\n     fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>;\n     fn fn_arg_names(&self, did: DefId) -> Vec<ast::Name>;\n@@ -230,6 +230,7 @@ pub trait CrateStore {\n                     -> Option<DefId>;\n     fn def_key(&self, def: DefId) -> DefKey;\n     fn def_path(&self, def: DefId) -> hir_map::DefPath;\n+    fn def_path_hash(&self, def: DefId) -> u64;\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children(&self, did: DefId) -> Vec<def::Export>;\n     fn load_macro(&self, did: DefId, sess: &Session) -> LoadedMacro;\n@@ -302,7 +303,7 @@ impl CrateStore for DummyCrateStore {\n     fn stability(&self, def: DefId) -> Option<attr::Stability> { bug!(\"stability\") }\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> { bug!(\"deprecation\") }\n     fn visibility(&self, def: DefId) -> ty::Visibility { bug!(\"visibility\") }\n-    fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>> {\n+    fn visible_parent_map<'a>(&'a self) -> ::std::cell::Ref<'a, DefIdMap<DefId>> {\n         bug!(\"visible_parent_map\")\n     }\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics\n@@ -377,6 +378,9 @@ impl CrateStore for DummyCrateStore {\n     fn def_path(&self, def: DefId) -> hir_map::DefPath {\n         bug!(\"relative_def_path\")\n     }\n+    fn def_path_hash(&self, def: DefId) -> u64 {\n+        bug!(\"wa\")\n+    }\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { bug!(\"struct_field_names\") }\n     fn item_children(&self, did: DefId) -> Vec<def::Export> { bug!(\"item_children\") }\n     fn load_macro(&self, did: DefId, sess: &Session) -> LoadedMacro { bug!(\"load_macro\") }"}, {"sha": "292e30e3d41f19403353bfdd2a055ac4c1066daf", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -2227,6 +2227,15 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    #[inline]\n+    pub fn def_path_hash(self, def_id: DefId) -> u64 {\n+        if def_id.is_local() {\n+            self.hir.definitions().def_path_hash(def_id.index)\n+        } else {\n+            self.sess.cstore.def_path_hash(def_id)\n+        }\n+    }\n+\n     pub fn def_span(self, def_id: DefId) -> Span {\n         if let Some(id) = self.hir.as_local_node_id(def_id) {\n             self.hir.span(id)"}, {"sha": "fd8191303a9a60cb92e9f1bb9bd1340daba448f5", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -13,7 +13,7 @@\n use hir::def_id::{DefId, LOCAL_CRATE};\n use hir::map::DefPathData;\n use infer::InferCtxt;\n-use hir::map as hir_map;\n+// use hir::map as hir_map;\n use traits::{self, Reveal};\n use ty::{self, Ty, TyCtxt, TypeAndMut, TypeFlags, TypeFoldable};\n use ty::ParameterEnvironment;\n@@ -441,13 +441,11 @@ impl<'a, 'gcx, 'tcx, W> TypeIdHasher<'a, 'gcx, 'tcx, W>\n \n     fn def_id(&mut self, did: DefId) {\n         // Hash the DefPath corresponding to the DefId, which is independent\n-        // of compiler internal state.\n-        let path = self.tcx.def_path(did);\n-        self.def_path(&path)\n-    }\n-\n-    pub fn def_path(&mut self, def_path: &hir_map::DefPath) {\n-        def_path.deterministic_hash_to(self.tcx, &mut self.state);\n+        // of compiler internal state. We already have a stable hash value of\n+        // all DefPaths available via tcx.def_path_hash(), so we just feed that\n+        // into the hasher.\n+        let hash = self.tcx.def_path_hash(did);\n+        self.hash(hash);\n     }\n }\n "}, {"sha": "034b7cbadd9c64a20cde15f215d00d01ac4be3cb", "filename": "src/librustc_borrowck/borrowck/README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -347,7 +347,7 @@ ALIASABLE(*LV, MQ)                 // M-Deref-Unique\n   ALIASABLE(LV, MQ)\n ```\n \n-### Checking mutability of immutable pointer types\n+### Checking aliasability of immutable pointer types\n \n Immutable pointer types like `&T` are aliasable, and hence can only be\n borrowed immutably:\n@@ -357,7 +357,7 @@ ALIASABLE(*LV, imm)                // M-Deref-Borrowed-Imm\n   TYPE(LV) = &Ty\n ```\n \n-### Checking mutability of mutable pointer types\n+### Checking aliasability of mutable pointer types\n \n `&mut T` can be frozen, so it is acceptable to borrow it as either imm or mut:\n \n@@ -633,7 +633,7 @@ Here is a concrete example of a bug this rule prevents:\n \n ```rust\n // Test region-reborrow-from-shorter-mut-ref.rs:\n-fn copy_pointer<'a,'b,T>(x: &'a mut &'b mut T) -> &'b mut T {\n+fn copy_borrowed_ptr<'a,'b,T>(x: &'a mut &'b mut T) -> &'b mut T {\n     &mut **p // ERROR due to clause (1)\n }\n fn main() {"}, {"sha": "bdb05d06b0b10646b8b75769abe776043d0d9b7e", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -647,8 +647,12 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n     let mut crate_loader = CrateLoader::new(sess, &cstore, crate_name);\n     crate_loader.preprocess(&krate);\n     let resolver_arenas = Resolver::arenas();\n-    let mut resolver =\n-        Resolver::new(sess, &krate, make_glob_map, &mut crate_loader, &resolver_arenas);\n+    let mut resolver = Resolver::new(sess,\n+                                     &krate,\n+                                     crate_name,\n+                                     make_glob_map,\n+                                     &mut crate_loader,\n+                                     &resolver_arenas);\n     resolver.whitelisted_legacy_custom_derives = whitelisted_legacy_custom_derives;\n     syntax_ext::register_builtins(&mut resolver, syntax_exts, sess.features.borrow().quote);\n "}, {"sha": "c67866971e1990ac398308ada8ce5fb62f201a95", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -99,6 +99,13 @@ impl<'a, 'tcx: 'a> ComputeItemHashesVisitor<'a, 'tcx> {\n                                               item_like: T)\n         where T: HashStable<StableHashingContext<'a, 'tcx>>\n     {\n+        if !hash_bodies && !self.hcx.tcx().sess.opts.build_dep_graph() {\n+            // If we just need the hashes in order to compute the SVH, we don't\n+            // need have two hashes per item. Just the one containing also the\n+            // item's body is sufficient.\n+            return\n+        }\n+\n         let mut hasher = IchHasher::new();\n         self.hcx.while_hashing_hir_bodies(hash_bodies, |hcx| {\n             item_like.hash_stable(hcx, &mut hasher);\n@@ -143,7 +150,7 @@ impl<'a, 'tcx: 'a> ComputeItemHashesVisitor<'a, 'tcx> {\n                                (item_dep_node, item_hash)\n                            })\n                            .collect();\n-            item_hashes.sort(); // avoid artificial dependencies on item ordering\n+            item_hashes.sort_unstable(); // avoid artificial dependencies on item ordering\n             item_hashes.hash(&mut crate_state);\n         }\n "}, {"sha": "aa7eb36581f3ea549e3378aa8378a15a1d9f8394", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -23,6 +23,7 @@\n #![feature(staged_api)]\n #![feature(rand)]\n #![feature(conservative_impl_trait)]\n+#![feature(sort_unstable)]\n #![cfg_attr(stage0, feature(pub_restricted))]\n \n extern crate graphviz;"}, {"sha": "b9b860222968b7b232050ca1cd5d46b36b0afa25", "filename": "src/librustc_incremental/persist/directory.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirectory.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -186,10 +186,6 @@ impl<'a,'tcx> DefIdDirectoryBuilder<'a,'tcx> {\n                  .clone()\n     }\n \n-    pub fn lookup_def_path(&self, id: DefPathIndex) -> &DefPath {\n-        &self.directory.paths[id.index as usize]\n-    }\n-\n     pub fn map(&mut self, node: &DepNode<DefId>) -> DepNode<DefPathIndex> {\n         node.map_def(|&def_id| Some(self.add(def_id))).unwrap()\n     }"}, {"sha": "1591503865e817a6180a0ea86c884a9cbe3886ed", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -258,24 +258,13 @@ pub fn encode_metadata_hashes(tcx: TyCtxt,\n         index_map: FxHashMap()\n     };\n \n-    let mut def_id_hashes = FxHashMap();\n-\n     for (index, target) in preds.reduced_graph.all_nodes().iter().enumerate() {\n         let index = NodeIndex(index);\n         let def_id = match *target.data {\n             DepNode::MetaData(def_id) if def_id.is_local() => def_id,\n             _ => continue,\n         };\n \n-        let mut def_id_hash = |def_id: DefId| -> u64 {\n-            *def_id_hashes.entry(def_id)\n-                .or_insert_with(|| {\n-                    let index = builder.add(def_id);\n-                    let path = builder.lookup_def_path(index);\n-                    path.deterministic_hash(tcx)\n-                })\n-        };\n-\n         // To create the hash for each item `X`, we don't hash the raw\n         // bytes of the metadata (though in principle we\n         // could). Instead, we walk the predecessors of `MetaData(X)`\n@@ -295,7 +284,7 @@ pub fn encode_metadata_hashes(tcx: TyCtxt,\n                  .map(|index| preds.reduced_graph.node_data(index))\n                  .filter(|dep_node| HashContext::is_hashable(dep_node))\n                  .map(|dep_node| {\n-                     let hash_dep_node = dep_node.map_def(|&def_id| Some(def_id_hash(def_id)))\n+                     let hash_dep_node = dep_node.map_def(|&def_id| Some(tcx.def_path_hash(def_id)))\n                                                  .unwrap();\n                      let hash = preds.hashes[dep_node];\n                      (hash_dep_node, hash)"}, {"sha": "37984e4c3718fd96231832ea22bae1f8f47e409d", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -73,7 +73,7 @@ provide! { <'tcx> tcx, def_id, cdata\n     predicates => { cdata.get_predicates(def_id.index, tcx) }\n     super_predicates => { cdata.get_super_predicates(def_id.index, tcx) }\n     trait_def => {\n-        tcx.alloc_trait_def(cdata.get_trait_def(def_id.index, tcx))\n+        tcx.alloc_trait_def(cdata.get_trait_def(def_id.index))\n     }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n     adt_destructor => {\n@@ -370,6 +370,10 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(def.krate).def_path(def.index)\n     }\n \n+    fn def_path_hash(&self, def: DefId) -> u64 {\n+        self.get_crate_data(def.krate).def_path_hash(def.index)\n+    }\n+\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>\n     {\n         self.dep_graph.read(DepNode::MetaData(def));\n@@ -507,12 +511,19 @@ impl CrateStore for cstore::CStore {\n     /// Returns a map from a sufficiently visible external item (i.e. an external item that is\n     /// visible from at least one local module) to a sufficiently visible parent (considering\n     /// modules that re-export the external item to be parents).\n-    fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>> {\n-        let mut visible_parent_map = self.visible_parent_map.borrow_mut();\n-        if !visible_parent_map.is_empty() { return visible_parent_map; }\n+    fn visible_parent_map<'a>(&'a self) -> ::std::cell::Ref<'a, DefIdMap<DefId>> {\n+        {\n+            let visible_parent_map = self.visible_parent_map.borrow();\n+            if !visible_parent_map.is_empty() {\n+                return visible_parent_map;\n+            }\n+        }\n \n         use std::collections::vec_deque::VecDeque;\n         use std::collections::hash_map::Entry;\n+\n+        let mut visible_parent_map = self.visible_parent_map.borrow_mut();\n+\n         for cnum in (1 .. self.next_crate_num().as_usize()).map(CrateNum::new) {\n             let cdata = self.get_crate_data(cnum);\n \n@@ -556,6 +567,7 @@ impl CrateStore for cstore::CStore {\n             }\n         }\n \n-        visible_parent_map\n+        drop(visible_parent_map);\n+        self.visible_parent_map.borrow()\n     }\n }"}, {"sha": "cdbecb3ae2e428a2e8535dceafd73eef0d0db7f9", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -492,10 +492,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    pub fn get_trait_def(&self,\n-                         item_id: DefIndex,\n-                         tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                         -> ty::TraitDef {\n+    pub fn get_trait_def(&self, item_id: DefIndex) -> ty::TraitDef {\n         let data = match self.entry(item_id).kind {\n             EntryKind::Trait(data) => data.decode(self),\n             _ => bug!(),\n@@ -504,7 +501,7 @@ impl<'a, 'tcx> CrateMetadata {\n         let def = ty::TraitDef::new(self.local_def_id(item_id),\n                                     data.unsafety,\n                                     data.paren_sugar,\n-                                    self.def_path(item_id).deterministic_hash(tcx));\n+                                    self.def_path_table.def_path_hash(item_id));\n \n         if data.has_default_impl {\n             def.record_has_default_impl();\n@@ -1053,6 +1050,7 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n+    #[inline]\n     pub fn def_key(&self, index: DefIndex) -> DefKey {\n         self.def_path_table.def_key(index)\n     }\n@@ -1063,6 +1061,11 @@ impl<'a, 'tcx> CrateMetadata {\n         DefPath::make(self.cnum, id, |parent| self.def_path_table.def_key(parent))\n     }\n \n+    #[inline]\n+    pub fn def_path_hash(&self, index: DefIndex) -> u64 {\n+        self.def_path_table.def_path_hash(index)\n+    }\n+\n     /// Imports the codemap from an external crate into the codemap of the crate\n     /// currently being compiled (the \"local crate\").\n     ///"}, {"sha": "d9900340a2e9f35613f67e9cae28e062298b703a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -1289,6 +1289,7 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n impl<'a> Resolver<'a> {\n     pub fn new(session: &'a Session,\n                krate: &Crate,\n+               crate_name: &str,\n                make_glob_map: MakeGlobMap,\n                crate_loader: &'a mut CrateLoader,\n                arenas: &'a ResolverArenas<'a>)\n@@ -1303,7 +1304,8 @@ impl<'a> Resolver<'a> {\n         module_map.insert(DefId::local(CRATE_DEF_INDEX), graph_root);\n \n         let mut definitions = Definitions::new();\n-        DefCollector::new(&mut definitions).collect_root();\n+        DefCollector::new(&mut definitions)\n+            .collect_root(crate_name, &session.local_crate_disambiguator().as_str());\n \n         let mut invocations = FxHashMap();\n         invocations.insert(Mark::root(),"}, {"sha": "3568c1ba8f4c153257f60af8c860a51a207d4097", "filename": "src/librustc_trans/back/symbol_names.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_names.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -101,22 +101,22 @@ use common::SharedCrateContext;\n use monomorphize::Instance;\n \n use rustc::middle::weak_lang_items;\n-use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::hir::def_id::DefId;\n use rustc::hir::map as hir_map;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::fold::TypeVisitor;\n use rustc::ty::item_path::{self, ItemPathBuffer, RootMode};\n use rustc::ty::subst::Substs;\n-use rustc::hir::map::definitions::{DefPath, DefPathData};\n+use rustc::hir::map::definitions::DefPathData;\n use rustc::util::common::record_time;\n \n use syntax::attr;\n use syntax::symbol::{Symbol, InternedString};\n \n fn get_symbol_hash<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n \n-                             // path to the item this name is for\n-                             def_path: &DefPath,\n+                             // the DefId of the item this name is for\n+                             def_id: Option<DefId>,\n \n                              // type of the item, without any generic\n                              // parameters substituted; this is\n@@ -128,8 +128,7 @@ fn get_symbol_hash<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n                              // if any.\n                              substs: Option<&'tcx Substs<'tcx>>)\n                              -> String {\n-    debug!(\"get_symbol_hash(def_path={:?}, parameters={:?})\",\n-           def_path, substs);\n+    debug!(\"get_symbol_hash(def_id={:?}, parameters={:?})\", def_id, substs);\n \n     let tcx = scx.tcx();\n \n@@ -139,7 +138,7 @@ fn get_symbol_hash<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n         // the main symbol name is not necessarily unique; hash in the\n         // compiler's internal def-path, guaranteeing each symbol has a\n         // truly unique path\n-        hasher.def_path(def_path);\n+        hasher.hash(def_id.map(|def_id| tcx.def_path_hash(def_id)));\n \n         // Include the main item-type. Note that, in this case, the\n         // assertions about `needs_subst` may not hold, but this item-type\n@@ -224,8 +223,6 @@ pub fn symbol_name<'a, 'tcx>(instance: Instance<'tcx>,\n         return scx.tcx().item_name(def_id).as_str().to_string();\n     }\n \n-    let def_path = scx.tcx().def_path(def_id);\n-\n     // We want to compute the \"type\" of this item. Unfortunately, some\n     // kinds of items (e.g., closures) don't have an entry in the\n     // item-type array. So walk back up the find the closest parent\n@@ -256,10 +253,10 @@ pub fn symbol_name<'a, 'tcx>(instance: Instance<'tcx>,\n     // and should not matter anyhow.\n     let instance_ty = scx.tcx().erase_regions(&instance_ty);\n \n-    let hash = get_symbol_hash(scx, &def_path, instance_ty, Some(substs));\n+    let hash = get_symbol_hash(scx, Some(def_id), instance_ty, Some(substs));\n \n     let mut buffer = SymbolPathBuffer {\n-        names: Vec::with_capacity(def_path.data.len())\n+        names: Vec::new()\n     };\n \n     item_path::with_forced_absolute_paths(|| {\n@@ -288,11 +285,7 @@ pub fn exported_name_from_type_and_prefix<'a, 'tcx>(scx: &SharedCrateContext<'a,\n                                                     t: Ty<'tcx>,\n                                                     prefix: &str)\n                                                     -> String {\n-    let empty_def_path = DefPath {\n-        data: vec![],\n-        krate: LOCAL_CRATE,\n-    };\n-    let hash = get_symbol_hash(scx, &empty_def_path, t, None);\n+    let hash = get_symbol_hash(scx, None, t, None);\n     let path = [Symbol::intern(prefix).as_str()];\n     mangle(path.iter().cloned(), &hash)\n }"}, {"sha": "77ab076eba38604f89bc5dc3775ea204ead4ecc3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -806,7 +806,7 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         err.emit();\n     }\n \n-    let def_path_hash = tcx.def_path(def_id).deterministic_hash(tcx);\n+    let def_path_hash = tcx.def_path_hash(def_id);\n     let def = ty::TraitDef::new(def_id, unsafety, paren_sugar, def_path_hash);\n \n     if tcx.hir.trait_is_auto(def_id) {"}, {"sha": "cf9408abf5e8953f7d2d634b1b7f95f409b2ef81", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -951,14 +951,21 @@\n         if (relatedDoc.is(\".docblock\")) {\n             if (relatedDoc.is(\":visible\")) {\n                 if (animate === true) {\n-                    relatedDoc.slideUp({duration: 'fast', easing: 'linear'});\n-                    toggle.children(\".toggle-label\").fadeIn();\n+                    relatedDoc.slideUp({\n+                        duration: 'fast',\n+                        easing: 'linear',\n+                        complete: function() {\n+                            toggle.children(\".toggle-label\").fadeIn();\n+                            toggle.parent(\".toggle-wrapper\").addClass(\"collapsed\");\n+                            toggle.children(\".inner\").text(labelForToggleButton(true));\n+                        },\n+                    });\n                 } else {\n                     relatedDoc.hide();\n                     toggle.children(\".toggle-label\").show();\n+                    toggle.parent(\".toggle-wrapper\").addClass(\"collapsed\");\n+                    toggle.children(\".inner\").text(labelForToggleButton(true));\n                 }\n-                toggle.parent(\".toggle-wrapper\").addClass(\"collapsed\");\n-                toggle.children(\".inner\").text(labelForToggleButton(true));\n             } else {\n                 relatedDoc.slideDown({duration: 'fast', easing: 'linear'});\n                 toggle.parent(\".toggle-wrapper\").removeClass(\"collapsed\");"}, {"sha": "fc1b9a976322ea50e4580380368cd437a39bcc08", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -356,7 +356,7 @@ impl ops::Deref for CString {\n     type Target = CStr;\n \n     fn deref(&self) -> &CStr {\n-        unsafe { mem::transmute(self.as_bytes_with_nul()) }\n+        unsafe { CStr::from_bytes_with_nul_unchecked(self.as_bytes_with_nul()) }\n     }\n }\n \n@@ -583,7 +583,8 @@ impl CStr {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {\n         let len = libc::strlen(ptr);\n-        mem::transmute(slice::from_raw_parts(ptr, len as usize + 1))\n+        let ptr = ptr as *const u8;\n+        CStr::from_bytes_with_nul_unchecked(slice::from_raw_parts(ptr, len as usize + 1))\n     }\n \n     /// Creates a C string wrapper from a byte slice."}, {"sha": "68e92b104298c0480d54229edc6acab0e2edda8e", "filename": "src/test/run-pass/auxiliary/issue_41053.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_41053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_41053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_41053.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Test;"}, {"sha": "769d841e364d78edb845a5678633e9b9491bb232", "filename": "src/test/run-pass/issue-41053.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Ftest%2Frun-pass%2Fissue-41053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f4bc311b5ff11a16185dd40dc116cf6b8cc162/src%2Ftest%2Frun-pass%2Fissue-41053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-41053.rs?ref=53f4bc311b5ff11a16185dd40dc116cf6b8cc162", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue_41053.rs\n+\n+pub trait Trait { fn foo(&self) {} }\n+\n+pub struct Foo;\n+\n+impl Iterator for Foo {\n+    type Item = Box<Trait>;\n+    fn next(&mut self) -> Option<Box<Trait>> {\n+        extern crate issue_41053;\n+        impl ::Trait for issue_41053::Test {\n+            fn foo(&self) {}\n+        }\n+        Some(Box::new(issue_41053::Test))\n+    }\n+}\n+\n+fn main() {\n+    Foo.next().unwrap().foo();\n+}"}]}