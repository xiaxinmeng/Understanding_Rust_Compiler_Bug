{"sha": "886613c91627606c885733d5f44da88597004a0c", "node_id": "C_kwDOAAsO6NoAKDg4NjYxM2M5MTYyNzYwNmM4ODU3MzNkNWY0NGRhODg1OTcwMDRhMGM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-08T20:51:44Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-12T17:52:58Z"}, "message": "Make the logic more explicit with let chains.", "tree": {"sha": "663da083d9b9f3c7dff8c347ccf6eec117fda2e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/663da083d9b9f3c7dff8c347ccf6eec117fda2e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/886613c91627606c885733d5f44da88597004a0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/886613c91627606c885733d5f44da88597004a0c", "html_url": "https://github.com/rust-lang/rust/commit/886613c91627606c885733d5f44da88597004a0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/886613c91627606c885733d5f44da88597004a0c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ee6f6e28a8d843df28b29bb70dd3dbb2267e39c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee6f6e28a8d843df28b29bb70dd3dbb2267e39c", "html_url": "https://github.com/rust-lang/rust/commit/3ee6f6e28a8d843df28b29bb70dd3dbb2267e39c"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "06b886aeca0585d7e52653763c6ebc4d8d1bf027", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/886613c91627606c885733d5f44da88597004a0c/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886613c91627606c885733d5f44da88597004a0c/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=886613c91627606c885733d5f44da88597004a0c", "patch": "@@ -1472,36 +1472,34 @@ impl<'a> Resolver<'a> {\n                         false,\n                         unusable_binding,\n                     )\n-                } else if ribs.is_none() || opt_ns.is_none() || opt_ns == Some(MacroNS) {\n-                    let scopes = ScopeSet::All(ns, opt_ns.is_none());\n-                    this.early_resolve_ident_in_lexical_scope(\n-                        ident,\n-                        scopes,\n-                        parent_scope,\n-                        finalize,\n-                        finalize.is_some(),\n-                        false,\n-                        unusable_binding,\n-                    )\n-                } else {\n+                } else if let Some(ribs) = ribs\n+                    && let Some(TypeNS | ValueNS) = opt_ns\n+                {\n                     match this.resolve_ident_in_lexical_scope(\n                         ident,\n                         ns,\n                         parent_scope,\n                         finalize_full,\n-                        &ribs.unwrap()[ns],\n+                        &ribs[ns],\n                         unusable_binding,\n                     ) {\n                         // we found a locally-imported or available item/module\n                         Some(LexicalScopeBinding::Item(binding)) => Ok(binding),\n                         // we found a local variable or type param\n-                        Some(LexicalScopeBinding::Res(res))\n-                            if opt_ns == Some(TypeNS) || opt_ns == Some(ValueNS) =>\n-                        {\n-                            return FindBindingResult::Res(res);\n-                        }\n+                        Some(LexicalScopeBinding::Res(res)) => return FindBindingResult::Res(res),\n                         _ => Err(Determinacy::determined(finalize.is_some())),\n                     }\n+                } else {\n+                    let scopes = ScopeSet::All(ns, opt_ns.is_none());\n+                    this.early_resolve_ident_in_lexical_scope(\n+                        ident,\n+                        scopes,\n+                        parent_scope,\n+                        finalize,\n+                        finalize.is_some(),\n+                        false,\n+                        unusable_binding,\n+                    )\n                 };\n                 FindBindingResult::Binding(binding)\n             };"}]}