{"sha": "9f7c5a80a38ea64ea49dd1a048e023c623a10acc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmN2M1YTgwYTM4ZWE2NGVhNDlkZDFhMDQ4ZTAyM2M2MjNhMTBhY2M=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-04-05T17:30:03Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-19T08:12:35Z"}, "message": "update libcore, add `discriminant_kind` lang-item", "tree": {"sha": "42d4c63ad64093cfaa0fd6f0d7c80f8b53d6c9e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42d4c63ad64093cfaa0fd6f0d7c80f8b53d6c9e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f7c5a80a38ea64ea49dd1a048e023c623a10acc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f7c5a80a38ea64ea49dd1a048e023c623a10acc", "html_url": "https://github.com/rust-lang/rust/commit/9f7c5a80a38ea64ea49dd1a048e023c623a10acc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f7c5a80a38ea64ea49dd1a048e023c623a10acc/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aab144f6d12101b202b42ceea329dc0ba5dcfe2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/aab144f6d12101b202b42ceea329dc0ba5dcfe2a", "html_url": "https://github.com/rust-lang/rust/commit/aab144f6d12101b202b42ceea329dc0ba5dcfe2a"}], "stats": {"total": 70, "additions": 58, "deletions": 12}, "files": [{"sha": "20c7d7dcec8d6a512f668a03ac55b65b391ee047", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f7c5a80a38ea64ea49dd1a048e023c623a10acc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f7c5a80a38ea64ea49dd1a048e023c623a10acc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=9f7c5a80a38ea64ea49dd1a048e023c623a10acc", "patch": "@@ -287,6 +287,7 @@ the source code.\n   - `unsize`: `libcore/marker.rs`\n   - `sync`: `libcore/marker.rs`\n   - `phantom_data`: `libcore/marker.rs`\n+  - `discriminant_kind`: `libcore/marker.rs`\n   - `freeze`: `libcore/marker.rs`\n   - `debug_trait`: `libcore/fmt/mod.rs`\n   - `non_zero`: `libcore/nonzero.rs`"}, {"sha": "9006e4cfaf7bbc0e70bb5a2dd6cf1ea901a51075", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f7c5a80a38ea64ea49dd1a048e023c623a10acc/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7c5a80a38ea64ea49dd1a048e023c623a10acc/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=9f7c5a80a38ea64ea49dd1a048e023c623a10acc", "patch": "@@ -54,6 +54,8 @@\n )]\n #![allow(missing_docs)]\n \n+#[cfg(not(bootstrap))]\n+use crate::marker::DiscriminantKind;\n use crate::mem;\n \n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n@@ -1912,6 +1914,10 @@ extern \"rust-intrinsic\" {\n     /// The stabilized version of this intrinsic is\n     /// [`std::mem::discriminant`](../../std/mem/fn.discriminant.html)\n     #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n+    #[cfg(not(bootstrap))]\n+    pub fn discriminant_value<T>(v: &T) -> <T as DiscriminantKind>::Discriminant;\n+    #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n+    #[cfg(bootstrap)]\n     pub fn discriminant_value<T>(v: &T) -> u64;\n \n     /// Rust's \"try catch\" construct which invokes the function pointer `try_fn`"}, {"sha": "c0c0f66aff90867f68b72cf073b120bb4bc8cb5d", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9f7c5a80a38ea64ea49dd1a048e023c623a10acc/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7c5a80a38ea64ea49dd1a048e023c623a10acc/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=9f7c5a80a38ea64ea49dd1a048e023c623a10acc", "patch": "@@ -8,6 +8,7 @@\n \n use crate::cell::UnsafeCell;\n use crate::cmp;\n+use crate::fmt::Debug;\n use crate::hash::Hash;\n use crate::hash::Hasher;\n \n@@ -679,6 +680,37 @@ mod impls {\n     unsafe impl<T: Send + ?Sized> Send for &mut T {}\n }\n \n+/// Compiler-internal trait used to indicate the type of enum discriminants.\n+///\n+/// This trait is automatically implemented for every type and does not add any\n+/// guarantees to [`mem::Discriminant`]. It is **undefined behavior** to transmute\n+/// between `DiscriminantKind::Discriminant` and `mem::Discriminant`.\n+///\n+/// [`mem::Discriminant`]: https://doc.rust-lang.org/stable/core/mem/struct.Discriminant.html\n+#[unstable(\n+    feature = \"discriminant_kind\",\n+    issue = \"none\",\n+    reason = \"this trait is unlikely to ever be stabilized, use `mem::discriminant` instead\"\n+)]\n+#[cfg_attr(not(bootstrap), lang = \"discriminant_kind\")]\n+pub trait DiscriminantKind {\n+    /// The type of the dicriminant, which must satisfy the trait\n+    /// bounds required by `mem::Discriminant`.\n+    type Discriminant: Clone + Copy + Debug + Eq + PartialEq + Hash + Send + Sync + Unpin;\n+}\n+\n+// Manually implement `DiscriminantKind` for all types during bootstrap\n+// to reduce the required amount of conditional compilation.\n+#[unstable(\n+    feature = \"discriminant_kind\",\n+    issue = \"none\",\n+    reason = \"this trait is unlikely to ever be stabilized, use `mem::discriminant` instead\"\n+)]\n+#[cfg(bootstrap)]\n+impl<T: ?Sized> DiscriminantKind for T {\n+    type Discriminant = u64;\n+}\n+\n /// Compiler-internal trait used to determine whether a type contains\n /// any `UnsafeCell` internally, but not through an indirection.\n /// This affects, for example, whether a `static` of that type is"}, {"sha": "010f2958e36b9ecd940b9ab4493762e5f589852e", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f7c5a80a38ea64ea49dd1a048e023c623a10acc/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7c5a80a38ea64ea49dd1a048e023c623a10acc/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=9f7c5a80a38ea64ea49dd1a048e023c623a10acc", "patch": "@@ -10,7 +10,7 @@ use crate::cmp;\n use crate::fmt;\n use crate::hash;\n use crate::intrinsics;\n-use crate::marker::{Copy, PhantomData, Sized};\n+use crate::marker::{Copy, DiscriminantKind, Sized};\n use crate::ptr;\n \n mod manually_drop;\n@@ -930,7 +930,7 @@ pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n ///\n /// [`discriminant`]: fn.discriminant.html\n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n-pub struct Discriminant<T>(u64, PhantomData<fn() -> T>);\n+pub struct Discriminant<T>(<T as DiscriminantKind>::Discriminant);\n \n // N.B. These trait implementations cannot be derived because we don't want any bounds on T.\n \n@@ -995,5 +995,5 @@ impl<T> fmt::Debug for Discriminant<T> {\n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n pub const fn discriminant<T>(v: &T) -> Discriminant<T> {\n-    Discriminant(intrinsics::discriminant_value(v), PhantomData)\n+    Discriminant(intrinsics::discriminant_value(v))\n }"}, {"sha": "04fe3b60b6a875cdaa439f3bbfa68107bbf63509", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f7c5a80a38ea64ea49dd1a048e023c623a10acc/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7c5a80a38ea64ea49dd1a048e023c623a10acc/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=9f7c5a80a38ea64ea49dd1a048e023c623a10acc", "patch": "@@ -163,6 +163,7 @@ language_item_table! {\n     CopyTraitLangItem,           \"copy\",               copy_trait,              Target::Trait;\n     CloneTraitLangItem,          \"clone\",              clone_trait,             Target::Trait;\n     SyncTraitLangItem,           \"sync\",               sync_trait,              Target::Trait;\n+    DiscriminantKindTraitLangItem,\"discriminant_kind\", discriminant_kind_trait, Target::Trait;\n     FreezeTraitLangItem,         \"freeze\",             freeze_trait,            Target::Trait;\n \n     DropTraitLangItem,           \"drop\",               drop_trait,              Target::Trait;"}, {"sha": "68f9025fd19e184ed6a9c797fc17c5d88aec6039", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9f7c5a80a38ea64ea49dd1a048e023c623a10acc/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7c5a80a38ea64ea49dd1a048e023c623a10acc/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=9f7c5a80a38ea64ea49dd1a048e023c623a10acc", "patch": "@@ -8,7 +8,7 @@ use rustc_hir as hir;\n use rustc_middle::traits::{ObligationCause, ObligationCauseCode};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_target::spec::abi::Abi;\n \n use std::iter;\n@@ -283,14 +283,20 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             \"likely\" => (0, vec![tcx.types.bool], tcx.types.bool),\n             \"unlikely\" => (0, vec![tcx.types.bool], tcx.types.bool),\n \n-            \"discriminant_value\" => (\n-                1,\n-                vec![tcx.mk_imm_ref(\n-                    tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BrAnon(0))),\n-                    param(0),\n-                )],\n-                tcx.types.u64,\n-            ),\n+            \"discriminant_value\" => {\n+                let assoc_items =\n+                    tcx.associated_items(tcx.lang_items().discriminant_kind_trait().unwrap());\n+                let discriminant_def_id = assoc_items.in_definition_order().next().unwrap().def_id;\n+\n+                (\n+                    1,\n+                    vec![tcx.mk_imm_ref(\n+                        tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BrAnon(0))),\n+                        param(0),\n+                    )],\n+                    tcx.mk_projection(discriminant_def_id, tcx.mk_substs([param(0).into()].iter())),\n+                )\n+            }\n \n             \"try\" => {\n                 let mut_u8 = tcx.mk_mut_ptr(tcx.types.u8);"}]}