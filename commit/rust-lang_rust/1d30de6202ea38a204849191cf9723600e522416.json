{"sha": "1d30de6202ea38a204849191cf9723600e522416", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMzBkZTYyMDJlYTM4YTIwNDg0OTE5MWNmOTcyMzYwMGU1MjI0MTY=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-30T14:57:12Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-08-25T06:00:49Z"}, "message": "append more test cases for issue 61076", "tree": {"sha": "b7910771c4b4ce0a0efabc365a3568e353d49c29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7910771c4b4ce0a0efabc365a3568e353d49c29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d30de6202ea38a204849191cf9723600e522416", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d30de6202ea38a204849191cf9723600e522416", "html_url": "https://github.com/rust-lang/rust/commit/1d30de6202ea38a204849191cf9723600e522416", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d30de6202ea38a204849191cf9723600e522416/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee541284bf5008bb0425fae02412352025099707", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee541284bf5008bb0425fae02412352025099707", "html_url": "https://github.com/rust-lang/rust/commit/ee541284bf5008bb0425fae02412352025099707"}], "stats": {"total": 62, "additions": 58, "deletions": 4}, "files": [{"sha": "e1753b280935db58628c386a65a92d455267210e", "filename": "src/test/ui/async-await/issue-61076.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1d30de6202ea38a204849191cf9723600e522416/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d30de6202ea38a204849191cf9723600e522416/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs?ref=1d30de6202ea38a204849191cf9723600e522416", "patch": "@@ -6,6 +6,16 @@ use core::task::{Context, Poll};\n \n struct T;\n \n+struct UnionStruct(i32);\n+\n+struct Struct {\n+    a: i32\n+}\n+\n+enum Enum {\n+    A\n+}\n+\n impl Future for T {\n     type Output = Result<(), ()>;\n \n@@ -26,7 +36,19 @@ async fn bar() -> Result<(), ()> {\n async fn baz() -> Result<(), ()> {\n     let t = T;\n     t?; //~ ERROR the `?` operator can only be applied to values that implement `std::ops::Try`\n+\n+    let _: i32 = async {\n+        UnionStruct(1i32)\n+    }.0; //~ ERROR no field `0`\n+\n+    let _: i32 = async {\n+        Struct { a: 1i32 }\n+    }.a; //~ ERROR no field `a`\n+\n+    if let Enum::A = async { Enum::A } {} //~ ERROR mismatched type\n+\n     Ok(())\n }\n \n+\n fn main() {}"}, {"sha": "af176a734e8097de699e52ef78c472d50b10439b", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1d30de6202ea38a204849191cf9723600e522416/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d30de6202ea38a204849191cf9723600e522416/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=1d30de6202ea38a204849191cf9723600e522416", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n-  --> $DIR/issue-61076.rs:22:5\n+  --> $DIR/issue-61076.rs:32:5\n    |\n LL |     foo()?;\n    |     ^^^^^^\n@@ -11,7 +11,7 @@ LL |     foo()?;\n    = note: required by `std::ops::Try::into_result`\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n-  --> $DIR/issue-61076.rs:28:5\n+  --> $DIR/issue-61076.rs:38:5\n    |\n LL |     t?;\n    |     ^^\n@@ -22,6 +22,38 @@ LL |     t?;\n    = help: the trait `std::ops::Try` is not implemented for `T`\n    = note: required by `std::ops::Try::into_result`\n \n-error: aborting due to 2 previous errors\n+error[E0609]: no field `0` on type `impl std::future::Future`\n+  --> $DIR/issue-61076.rs:42:7\n+   |\n+LL |     }.0;\n+   |       ^\n+\n+error[E0609]: no field `a` on type `impl std::future::Future`\n+  --> $DIR/issue-61076.rs:46:7\n+   |\n+LL |     }.a;\n+   |       ^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-61076.rs:48:12\n+   |\n+LL |     A\n+   |     - unit variant defined here\n+...\n+LL |     if let Enum::A = async { Enum::A } {}\n+   |            ^^^^^^^         ----------- the expected generator\n+   |            |\n+   |            expected opaque type, found enum `Enum`\n+   | \n+  ::: $SRC_DIR/libcore/future/mod.rs:LL:COL\n+   |\n+LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                           ------------------------------- the expected opaque type\n+   |\n+   = note: expected opaque type `impl std::future::Future`\n+                     found enum `Enum`\n+\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0308, E0609.\n+For more information about an error, try `rustc --explain E0277`."}]}