{"sha": "d5304737448b82e0535fa83e6d661f8740d8cdd3", "node_id": "C_kwDOAAsO6NoAKGQ1MzA0NzM3NDQ4YjgyZTA1MzVmYTgzZTZkNjYxZjg3NDBkOGNkZDM", "commit": {"author": {"name": "beetrees", "email": "b@beetr.ee", "date": "2023-03-30T14:15:42Z"}, "committer": {"name": "beetrees", "email": "b@beetr.ee", "date": "2023-04-08T18:33:28Z"}, "message": "Add 64-bit `time_t` support on 32-bit glibc Linux to `set_times`", "tree": {"sha": "6ea46d4adadc5c2f7dc38a9dc71ef9383e5f8253", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ea46d4adadc5c2f7dc38a9dc71ef9383e5f8253"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5304737448b82e0535fa83e6d661f8740d8cdd3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQT9oej+Slbzs/bk2IuHkb11QZHr1gUCZDGzeAAKCRCHkb11QZHr\n1hLZAQCPCDoLBfLULK1qWkf4Kk0EzpjyjM7FiGme5aGt41gfbAD9EROLp30PRE5M\ndTCcAqbZYbAyPAlMFewrXMEi89hm8Ac=\n=UbaK\n-----END PGP SIGNATURE-----", "payload": "tree 6ea46d4adadc5c2f7dc38a9dc71ef9383e5f8253\nparent 4f87a63edcef5c8c06229ff13e0f64f427537378\nauthor beetrees <b@beetr.ee> 1680185742 +0100\ncommitter beetrees <b@beetr.ee> 1680978808 +0100\n\nAdd 64-bit `time_t` support on 32-bit glibc Linux to `set_times`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5304737448b82e0535fa83e6d661f8740d8cdd3", "html_url": "https://github.com/rust-lang/rust/commit/d5304737448b82e0535fa83e6d661f8740d8cdd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5304737448b82e0535fa83e6d661f8740d8cdd3/comments", "author": {"login": "beetrees", "id": 107947675, "node_id": "U_kgDOBm8mmw", "avatar_url": "https://avatars.githubusercontent.com/u/107947675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beetrees", "html_url": "https://github.com/beetrees", "followers_url": "https://api.github.com/users/beetrees/followers", "following_url": "https://api.github.com/users/beetrees/following{/other_user}", "gists_url": "https://api.github.com/users/beetrees/gists{/gist_id}", "starred_url": "https://api.github.com/users/beetrees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beetrees/subscriptions", "organizations_url": "https://api.github.com/users/beetrees/orgs", "repos_url": "https://api.github.com/users/beetrees/repos", "events_url": "https://api.github.com/users/beetrees/events{/privacy}", "received_events_url": "https://api.github.com/users/beetrees/received_events", "type": "User", "site_admin": false}, "committer": {"login": "beetrees", "id": 107947675, "node_id": "U_kgDOBm8mmw", "avatar_url": "https://avatars.githubusercontent.com/u/107947675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beetrees", "html_url": "https://github.com/beetrees", "followers_url": "https://api.github.com/users/beetrees/followers", "following_url": "https://api.github.com/users/beetrees/following{/other_user}", "gists_url": "https://api.github.com/users/beetrees/gists{/gist_id}", "starred_url": "https://api.github.com/users/beetrees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beetrees/subscriptions", "organizations_url": "https://api.github.com/users/beetrees/orgs", "repos_url": "https://api.github.com/users/beetrees/repos", "events_url": "https://api.github.com/users/beetrees/events{/privacy}", "received_events_url": "https://api.github.com/users/beetrees/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f87a63edcef5c8c06229ff13e0f64f427537378", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f87a63edcef5c8c06229ff13e0f64f427537378", "html_url": "https://github.com/rust-lang/rust/commit/4f87a63edcef5c8c06229ff13e0f64f427537378"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "f01167bf2f3685aca82dee1db5117d4f49d88d6f", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d5304737448b82e0535fa83e6d661f8740d8cdd3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5304737448b82e0535fa83e6d661f8740d8cdd3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=d5304737448b82e0535fa83e6d661f8740d8cdd3", "patch": "@@ -1192,8 +1192,6 @@ impl File {\n                 None => Ok(libc::timespec { tv_sec: 0, tv_nsec: libc::UTIME_OMIT as _ }),\n             }\n         };\n-        #[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\")))]\n-        let times = [to_timespec(times.accessed)?, to_timespec(times.modified)?];\n         cfg_if::cfg_if! {\n             if #[cfg(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\"))] {\n                 // Redox doesn't appear to support `UTIME_OMIT`.\n@@ -1205,6 +1203,7 @@ impl File {\n                     \"setting file times not supported\",\n                 ))\n             } else if #[cfg(any(target_os = \"android\", target_os = \"macos\"))] {\n+                let times = [to_timespec(times.accessed)?, to_timespec(times.modified)?];\n                 // futimens requires macOS 10.13, and Android API level 19\n                 cvt(unsafe {\n                     weak!(fn futimens(c_int, *const libc::timespec) -> c_int);\n@@ -1231,6 +1230,22 @@ impl File {\n                 })?;\n                 Ok(())\n             } else {\n+                #[cfg(all(target_os = \"linux\", target_env = \"gnu\", target_pointer_width = \"32\", not(target_arch = \"riscv32\")))]\n+                {\n+                    use crate::sys::{time::__timespec64, weak::weak};\n+\n+                    // Added in glibc 2.34\n+                    weak!(fn __futimens64(libc::c_int, *const __timespec64) -> libc::c_int);\n+\n+                    if let Some(futimens64) = __futimens64.get() {\n+                        let to_timespec = |time: Option<SystemTime>| time.map(|time| time.t.to_timespec64())\n+                            .unwrap_or(__timespec64::new(0, libc::UTIME_OMIT as _));\n+                        let times = [to_timespec(times.accessed), to_timespec(times.modified)];\n+                        cvt(unsafe { futimens64(self.as_raw_fd(), times.as_ptr()) })?;\n+                        return Ok(());\n+                    }\n+                }\n+                let times = [to_timespec(times.accessed)?, to_timespec(times.modified)?];\n                 cvt(unsafe { libc::futimens(self.as_raw_fd(), times.as_ptr()) })?;\n                 Ok(())\n             }"}, {"sha": "a61d926ca8b3a4167eaeb54351ab0b874ce69e9e", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d5304737448b82e0535fa83e6d661f8740d8cdd3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5304737448b82e0535fa83e6d661f8740d8cdd3/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=d5304737448b82e0535fa83e6d661f8740d8cdd3", "patch": "@@ -166,6 +166,16 @@ impl Timespec {\n         }\n         self.to_timespec()\n     }\n+\n+    #[cfg(all(\n+        target_os = \"linux\",\n+        target_env = \"gnu\",\n+        target_pointer_width = \"32\",\n+        not(target_arch = \"riscv32\")\n+    ))]\n+    pub fn to_timespec64(&self) -> __timespec64 {\n+        __timespec64::new(self.tv_sec, self.tv_nsec.0 as _)\n+    }\n }\n \n impl From<libc::timespec> for Timespec {\n@@ -190,6 +200,18 @@ pub(in crate::sys::unix) struct __timespec64 {\n     _padding: i32,\n }\n \n+#[cfg(all(\n+    target_os = \"linux\",\n+    target_env = \"gnu\",\n+    target_pointer_width = \"32\",\n+    not(target_arch = \"riscv32\")\n+))]\n+impl __timespec64 {\n+    pub(in crate::sys::unix) fn new(tv_sec: i64, tv_nsec: i32) -> Self {\n+        Self { tv_sec, tv_nsec, _padding: 0 }\n+    }\n+}\n+\n #[cfg(all(\n     target_os = \"linux\",\n     target_env = \"gnu\","}]}