{"sha": "50d2e7e07e79f3f055832756469eb974fe719de1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZDJlN2UwN2U3OWYzZjA1NTgzMjc1NjQ2OWViOTc0ZmU3MTlkZTE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-05T21:17:16Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-05T22:06:33Z"}, "message": "Mostly change TODOs to FIXMEs and annotate them\n\nBut, one change in io to implement a TODO suggestion (using a\nconst u8)", "tree": {"sha": "c08a0f8054e34518055a496fcc8e06a8b48855cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c08a0f8054e34518055a496fcc8e06a8b48855cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50d2e7e07e79f3f055832756469eb974fe719de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50d2e7e07e79f3f055832756469eb974fe719de1", "html_url": "https://github.com/rust-lang/rust/commit/50d2e7e07e79f3f055832756469eb974fe719de1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50d2e7e07e79f3f055832756469eb974fe719de1/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0d4f092010a0867be8b396929a2428d5c44c6d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d4f092010a0867be8b396929a2428d5c44c6d4", "html_url": "https://github.com/rust-lang/rust/commit/b0d4f092010a0867be8b396929a2428d5c44c6d4"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "5116d75f6f59ca7a9d55337fff061b16467c8d5b", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/50d2e7e07e79f3f055832756469eb974fe719de1/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d2e7e07e79f3f055832756469eb974fe719de1/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=50d2e7e07e79f3f055832756469eb974fe719de1", "patch": "@@ -743,15 +743,15 @@ fn install_one_crate(c: cargo, path: str, cf: str) {\n             #debug(\"  bin: %s\", ct);\n             install_to_dir(ct, c.bindir);\n             if c.opts.mode == system_mode {\n-                // TODO: Put this file in PATH / symlink it so it can be\n-                // used as a generic executable\n+                // FIXME (#2662): Put this file in PATH / symlink it so it can\n+                // be used as a generic executable\n                 // `cargo install -G rustray` and `rustray file.obj`\n             }\n         } else {\n             #debug(\"  lib: %s\", ct);\n             install_to_dir(ct, c.libdir);\n         }\n-    }\n+  }\n }\n \n \n@@ -788,7 +788,9 @@ fn install_source(c: cargo, path: str) {\n             none { cont; }\n             some(crate) {\n               for crate.deps.each |query| {\n-                    // TODO: handle cyclic dependencies\n+                    // FIXME (#1356): handle cyclic dependencies\n+                    // (n.b. #1356 says \"Cyclic dependency is an error\n+                    // condition\")\n \n                     let wd_base = c.workdir + path::path_sep();\n                     let wd = alt tempfile::mkdtemp(wd_base, \"\") {\n@@ -797,7 +799,6 @@ fn install_source(c: cargo, path: str) {\n                     };\n \n                     install_query(c, wd, query);\n-                }\n \n                 os::change_dir(path);\n \n@@ -808,6 +809,7 @@ fn install_source(c: cargo, path: str) {\n             }\n         }\n     }\n+  }\n }\n \n fn install_git(c: cargo, wd: str, url: str, ref: option<str>) {"}, {"sha": "9d37ac14fbffd1a3f591adde67985797806b3b93", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d2e7e07e79f3f055832756469eb974fe719de1/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d2e7e07e79f3f055832756469eb974fe719de1/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=50d2e7e07e79f3f055832756469eb974fe719de1", "patch": "@@ -228,7 +228,7 @@ mod ct {\n        {ty: ty, next: uint} {\n         if i >= lim { error(\"missing type in conversion\"); }\n         let tstr = str::slice(s, i, i+1u);\n-        // TODO: Do we really want two signed types here?\n+        // FIXME (#2249): Do we really want two signed types here?\n         // How important is it to be printf compatible?\n         let t =\n             if str::eq(tstr, \"b\") {"}, {"sha": "14c5736120b24e446746ec7e0e75a8c48cdfe177", "filename": "src/libcore/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50d2e7e07e79f3f055832756469eb974fe719de1/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d2e7e07e79f3f055832756469eb974fe719de1/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=50d2e7e07e79f3f055832756469eb974fe719de1", "patch": "@@ -259,8 +259,7 @@ fn file_reader(path: str) -> result<reader, str> {\n \n // Byte buffer readers\n \n-// TODO: const u8, but this fails with rustboot.\n-type byte_buf = {buf: ~[u8], mut pos: uint, len: uint};\n+type byte_buf = {buf: ~[const u8], mut pos: uint, len: uint};\n \n impl of reader for byte_buf {\n     fn read_bytes(len: uint) -> ~[u8] {\n@@ -277,7 +276,8 @@ impl of reader for byte_buf {\n         self.pos += 1u;\n         ret b as int;\n     }\n-    fn unread_byte(_byte: int) { #error(\"TODO: unread_byte\"); fail; }\n+    // FIXME (#2738): implement this\n+    fn unread_byte(_byte: int) { #error(\"Unimplemented: unread_byte\"); fail; }\n     fn eof() -> bool { self.pos == self.len }\n     fn seek(offset: int, whence: seek_style) {\n         let pos = self.pos;"}, {"sha": "130b259c1dfd27566b0639bf8925b568216ec4ce", "filename": "src/libcore/num.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50d2e7e07e79f3f055832756469eb974fe719de1/src%2Flibcore%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d2e7e07e79f3f055832756469eb974fe719de1/src%2Flibcore%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum.rs?ref=50d2e7e07e79f3f055832756469eb974fe719de1", "patch": "@@ -11,6 +11,7 @@ iface num {\n     fn neg() -> self;\n \n     fn to_int() -> int;\n-    fn from_int(n: int) -> self;    // TODO: Static functions.\n+    fn from_int(n: int) -> self;    // FIXME (#2376) Static functions.\n+    // n.b. #2376 is for classes, not ifaces, but it could be generalized...\n }\n "}, {"sha": "395a411aeeaed0f5dc3db73bac014b36c9803b25", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/50d2e7e07e79f3f055832756469eb974fe719de1/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d2e7e07e79f3f055832756469eb974fe719de1/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=50d2e7e07e79f3f055832756469eb974fe719de1", "patch": "@@ -32,8 +32,8 @@ type ebml_tag = {id: uint, size: uint};\n \n type ebml_state = {ebml_tag: ebml_tag, tag_pos: uint, data_pos: uint};\n \n-// TODO: When we have module renaming, make \"reader\" and \"writer\" separate\n-// modules within this file.\n+// FIXME (#2739): When we have module renaming, make \"reader\" and \"writer\"\n+// separate modules within this file.\n \n // ebml reading\n type doc = {data: @~[u8], start: uint, end: uint};\n@@ -189,7 +189,7 @@ fn writer(w: io::writer) -> writer {\n     ret {writer: w, mut size_positions: size_positions};\n }\n \n-// TODO: Provide a function to write the standard ebml header.\n+// FIXME (#2741): Provide a function to write the standard ebml header.\n impl writer for writer {\n     fn start_tag(tag_id: uint) {\n         #debug[\"Start tag %u\", tag_id];\n@@ -291,8 +291,8 @@ impl writer for writer {\n     }\n }\n \n-// TODO: optionally perform \"relaxations\" on end_tag to more efficiently\n-// encode sizes; this is a fixed point iteration\n+// FIXME (#2743): optionally perform \"relaxations\" on end_tag to more\n+// efficiently encode sizes; this is a fixed point iteration\n \n // Set to true to generate more debugging in EBML serialization.\n // Totally lame approach.\n@@ -343,9 +343,10 @@ impl serializer of serialization::serializer for ebml::writer {\n \n     fn emit_bool(v: bool) { self.wr_tagged_u8(es_bool as uint, v as u8) }\n \n-    fn emit_f64(_v: f64) { fail \"TODO\"; }\n-    fn emit_f32(_v: f32) { fail \"TODO\"; }\n-    fn emit_float(_v: float) { fail \"TODO\"; }\n+    // FIXME (#2742): implement these\n+    fn emit_f64(_v: f64) { fail \"Unimplemented: serializing an f64\"; }\n+    fn emit_f32(_v: f32) { fail \"Unimplemented: serializing an f32\"; }\n+    fn emit_float(_v: float) { fail \"Unimplemented: serializing a float\"; }\n \n     fn emit_str(v: str) { self.wr_tagged_str(es_str as uint, v) }\n "}, {"sha": "4d13b8ac9a556ddb58756a0940a3ae5b902e16b9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50d2e7e07e79f3f055832756469eb974fe719de1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d2e7e07e79f3f055832756469eb974fe719de1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=50d2e7e07e79f3f055832756469eb974fe719de1", "patch": "@@ -2139,7 +2139,7 @@ class parser {\n           Is it strange for the parser to check this?\n           */\n           none {\n-            self.fatal(\"class with no ctor\");\n+            self.fatal(\"class with no constructor\");\n           }\n         }\n     }"}]}