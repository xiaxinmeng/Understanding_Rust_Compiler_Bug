{"sha": "1bd9573c1fb4753272254871c5a33d87328585bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZDk1NzNjMWZiNDc1MzI3MjI1NDg3MWM1YTMzZDg3MzI4NTg1YmQ=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-05-14T10:03:04Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-05-24T14:04:39Z"}, "message": "enable fast-math flags", "tree": {"sha": "e7d24a70ea94dbed321abe9a9c383652ff977550", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7d24a70ea94dbed321abe9a9c383652ff977550"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bd9573c1fb4753272254871c5a33d87328585bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd9573c1fb4753272254871c5a33d87328585bd", "html_url": "https://github.com/rust-lang/rust/commit/1bd9573c1fb4753272254871c5a33d87328585bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bd9573c1fb4753272254871c5a33d87328585bd/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "180342df0bbe074a003f797531664ab65b482973", "url": "https://api.github.com/repos/rust-lang/rust/commits/180342df0bbe074a003f797531664ab65b482973", "html_url": "https://github.com/rust-lang/rust/commit/180342df0bbe074a003f797531664ab65b482973"}], "stats": {"total": 204, "additions": 103, "deletions": 101}, "files": [{"sha": "18f940800d3bfd054c88aa63b7c96ea16c2f9d1f", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=1bd9573c1fb4753272254871c5a33d87328585bd", "patch": "@@ -1197,9 +1197,11 @@ fn generic_simd_intrinsic<'a, 'tcx>(\n \n         let llvm_name = &format!(\"llvm.{0}.v{1}{2}\", name, in_len, ety);\n         let intrinsic = bx.cx.get_intrinsic(&llvm_name);\n-        return Ok(bx.call(intrinsic,\n-                          &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(),\n-                          None));\n+        let c = bx.call(intrinsic,\n+                        &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(),\n+                        None);\n+        unsafe { llvm::LLVMRustSetHasUnsafeAlgebra(c) };\n+        return Ok(c);\n     }\n \n     if name == \"simd_fsqrt\" {"}, {"sha": "49f1f3e8565c633b2c834932ef2be0a83ee2b177", "filename": "src/test/codegen/simd-intrinsic-float-abs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-abs.rs?ref=1bd9573c1fb4753272254871c5a33d87328585bd", "patch": "@@ -44,28 +44,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @fabs_32x2\n #[no_mangle]\n pub unsafe fn fabs_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call <2 x float> @llvm.fabs.v2f32\n+    // CHECK: call fast <2 x float> @llvm.fabs.v2f32\n     simd_fabs(a)\n }\n \n // CHECK-LABEL: @fabs_32x4\n #[no_mangle]\n pub unsafe fn fabs_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call <4 x float> @llvm.fabs.v4f32\n+    // CHECK: call fast <4 x float> @llvm.fabs.v4f32\n     simd_fabs(a)\n }\n \n // CHECK-LABEL: @fabs_32x8\n #[no_mangle]\n pub unsafe fn fabs_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call <8 x float> @llvm.fabs.v8f32\n+    // CHECK: call fast <8 x float> @llvm.fabs.v8f32\n     simd_fabs(a)\n }\n \n // CHECK-LABEL: @fabs_32x16\n #[no_mangle]\n pub unsafe fn fabs_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call <16 x float> @llvm.fabs.v16f32\n+    // CHECK: call fast <16 x float> @llvm.fabs.v16f32\n     simd_fabs(a)\n }\n \n@@ -85,20 +85,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @fabs_64x4\n #[no_mangle]\n pub unsafe fn fabs_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call <4 x double> @llvm.fabs.v4f64\n+    // CHECK: call fast <4 x double> @llvm.fabs.v4f64\n     simd_fabs(a)\n }\n \n // CHECK-LABEL: @fabs_64x2\n #[no_mangle]\n pub unsafe fn fabs_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call <2 x double> @llvm.fabs.v2f64\n+    // CHECK: call fast <2 x double> @llvm.fabs.v2f64\n     simd_fabs(a)\n }\n \n // CHECK-LABEL: @fabs_64x8\n #[no_mangle]\n pub unsafe fn fabs_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call <8 x double> @llvm.fabs.v8f64\n+    // CHECK: call fast <8 x double> @llvm.fabs.v8f64\n     simd_fabs(a)\n }"}, {"sha": "4a6f162e16b1b23c3f0c741e7b524a15f1ee4951", "filename": "src/test/codegen/simd-intrinsic-float-ceil.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-ceil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-ceil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-ceil.rs?ref=1bd9573c1fb4753272254871c5a33d87328585bd", "patch": "@@ -44,28 +44,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @ceil_32x2\n #[no_mangle]\n pub unsafe fn ceil_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call <2 x float> @llvm.ceil.v2f32\n+    // CHECK: call fast <2 x float> @llvm.ceil.v2f32\n     simd_ceil(a)\n }\n \n // CHECK-LABEL: @ceil_32x4\n #[no_mangle]\n pub unsafe fn ceil_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call <4 x float> @llvm.ceil.v4f32\n+    // CHECK: call fast <4 x float> @llvm.ceil.v4f32\n     simd_ceil(a)\n }\n \n // CHECK-LABEL: @ceil_32x8\n #[no_mangle]\n pub unsafe fn ceil_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call <8 x float> @llvm.ceil.v8f32\n+    // CHECK: call fast <8 x float> @llvm.ceil.v8f32\n     simd_ceil(a)\n }\n \n // CHECK-LABEL: @ceil_32x16\n #[no_mangle]\n pub unsafe fn ceil_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call <16 x float> @llvm.ceil.v16f32\n+    // CHECK: call fast <16 x float> @llvm.ceil.v16f32\n     simd_ceil(a)\n }\n \n@@ -85,20 +85,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @ceil_64x4\n #[no_mangle]\n pub unsafe fn ceil_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call <4 x double> @llvm.ceil.v4f64\n+    // CHECK: call fast <4 x double> @llvm.ceil.v4f64\n     simd_ceil(a)\n }\n \n // CHECK-LABEL: @ceil_64x2\n #[no_mangle]\n pub unsafe fn ceil_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call <2 x double> @llvm.ceil.v2f64\n+    // CHECK: call fast <2 x double> @llvm.ceil.v2f64\n     simd_ceil(a)\n }\n \n // CHECK-LABEL: @ceil_64x8\n #[no_mangle]\n pub unsafe fn ceil_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call <8 x double> @llvm.ceil.v8f64\n+    // CHECK: call fast <8 x double> @llvm.ceil.v8f64\n     simd_ceil(a)\n }"}, {"sha": "6304c6c644f42aba93e9046a1060addec881b279", "filename": "src/test/codegen/simd-intrinsic-float-cos.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-cos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-cos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-cos.rs?ref=1bd9573c1fb4753272254871c5a33d87328585bd", "patch": "@@ -44,28 +44,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @fcos_32x2\n #[no_mangle]\n pub unsafe fn fcos_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call <2 x float> @llvm.cos.v2f32\n+    // CHECK: call fast <2 x float> @llvm.cos.v2f32\n     simd_fcos(a)\n }\n \n // CHECK-LABEL: @fcos_32x4\n #[no_mangle]\n pub unsafe fn fcos_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call <4 x float> @llvm.cos.v4f32\n+    // CHECK: call fast <4 x float> @llvm.cos.v4f32\n     simd_fcos(a)\n }\n \n // CHECK-LABEL: @fcos_32x8\n #[no_mangle]\n pub unsafe fn fcos_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call <8 x float> @llvm.cos.v8f32\n+    // CHECK: call fast <8 x float> @llvm.cos.v8f32\n     simd_fcos(a)\n }\n \n // CHECK-LABEL: @fcos_32x16\n #[no_mangle]\n pub unsafe fn fcos_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call <16 x float> @llvm.cos.v16f32\n+    // CHECK: call fast <16 x float> @llvm.cos.v16f32\n     simd_fcos(a)\n }\n \n@@ -85,20 +85,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @fcos_64x4\n #[no_mangle]\n pub unsafe fn fcos_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call <4 x double> @llvm.cos.v4f64\n+    // CHECK: call fast <4 x double> @llvm.cos.v4f64\n     simd_fcos(a)\n }\n \n // CHECK-LABEL: @fcos_64x2\n #[no_mangle]\n pub unsafe fn fcos_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call <2 x double> @llvm.cos.v2f64\n+    // CHECK: call fast <2 x double> @llvm.cos.v2f64\n     simd_fcos(a)\n }\n \n // CHECK-LABEL: @fcos_64x8\n #[no_mangle]\n pub unsafe fn fcos_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call <8 x double> @llvm.cos.v8f64\n+    // CHECK: call fast <8 x double> @llvm.cos.v8f64\n     simd_fcos(a)\n }"}, {"sha": "110031c645143165fa0ea13f14bf3cb8fcc30380", "filename": "src/test/codegen/simd-intrinsic-float-exp.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-exp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-exp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-exp.rs?ref=1bd9573c1fb4753272254871c5a33d87328585bd", "patch": "@@ -44,28 +44,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @exp_32x2\n #[no_mangle]\n pub unsafe fn exp_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call <2 x float> @llvm.exp.v2f32\n+    // CHECK: call fast <2 x float> @llvm.exp.v2f32\n     simd_fexp(a)\n }\n \n // CHECK-LABEL: @exp_32x4\n #[no_mangle]\n pub unsafe fn exp_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call <4 x float> @llvm.exp.v4f32\n+    // CHECK: call fast <4 x float> @llvm.exp.v4f32\n     simd_fexp(a)\n }\n \n // CHECK-LABEL: @exp_32x8\n #[no_mangle]\n pub unsafe fn exp_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call <8 x float> @llvm.exp.v8f32\n+    // CHECK: call fast <8 x float> @llvm.exp.v8f32\n     simd_fexp(a)\n }\n \n // CHECK-LABEL: @exp_32x16\n #[no_mangle]\n pub unsafe fn exp_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call <16 x float> @llvm.exp.v16f32\n+    // CHECK: call fast <16 x float> @llvm.exp.v16f32\n     simd_fexp(a)\n }\n \n@@ -85,20 +85,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @exp_64x4\n #[no_mangle]\n pub unsafe fn exp_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call <4 x double> @llvm.exp.v4f64\n+    // CHECK: call fast <4 x double> @llvm.exp.v4f64\n     simd_fexp(a)\n }\n \n // CHECK-LABEL: @exp_64x2\n #[no_mangle]\n pub unsafe fn exp_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call <2 x double> @llvm.exp.v2f64\n+    // CHECK: call fast <2 x double> @llvm.exp.v2f64\n     simd_fexp(a)\n }\n \n // CHECK-LABEL: @exp_64x8\n #[no_mangle]\n pub unsafe fn exp_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call <8 x double> @llvm.exp.v8f64\n+    // CHECK: call fast <8 x double> @llvm.exp.v8f64\n     simd_fexp(a)\n }"}, {"sha": "dc62c90822f0c54ecbaf11813a596d12cb648af3", "filename": "src/test/codegen/simd-intrinsic-float-exp2.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-exp2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-exp2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-exp2.rs?ref=1bd9573c1fb4753272254871c5a33d87328585bd", "patch": "@@ -44,28 +44,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @exp2_32x2\n #[no_mangle]\n pub unsafe fn exp2_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call <2 x float> @llvm.exp2.v2f32\n+    // CHECK: call fast <2 x float> @llvm.exp2.v2f32\n     simd_fexp2(a)\n }\n \n // CHECK-LABEL: @exp2_32x4\n #[no_mangle]\n pub unsafe fn exp2_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call <4 x float> @llvm.exp2.v4f32\n+    // CHECK: call fast <4 x float> @llvm.exp2.v4f32\n     simd_fexp2(a)\n }\n \n // CHECK-LABEL: @exp2_32x8\n #[no_mangle]\n pub unsafe fn exp2_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call <8 x float> @llvm.exp2.v8f32\n+    // CHECK: call fast <8 x float> @llvm.exp2.v8f32\n     simd_fexp2(a)\n }\n \n // CHECK-LABEL: @exp2_32x16\n #[no_mangle]\n pub unsafe fn exp2_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call <16 x float> @llvm.exp2.v16f32\n+    // CHECK: call fast <16 x float> @llvm.exp2.v16f32\n     simd_fexp2(a)\n }\n \n@@ -85,20 +85,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @exp2_64x4\n #[no_mangle]\n pub unsafe fn exp2_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call <4 x double> @llvm.exp2.v4f64\n+    // CHECK: call fast <4 x double> @llvm.exp2.v4f64\n     simd_fexp2(a)\n }\n \n // CHECK-LABEL: @exp2_64x2\n #[no_mangle]\n pub unsafe fn exp2_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call <2 x double> @llvm.exp2.v2f64\n+    // CHECK: call fast <2 x double> @llvm.exp2.v2f64\n     simd_fexp2(a)\n }\n \n // CHECK-LABEL: @exp2_64x8\n #[no_mangle]\n pub unsafe fn exp2_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call <8 x double> @llvm.exp2.v8f64\n+    // CHECK: call fast <8 x double> @llvm.exp2.v8f64\n     simd_fexp2(a)\n }"}, {"sha": "9bc8ca0d1527f145222090ec2cd7b43b71613527", "filename": "src/test/codegen/simd-intrinsic-float-floor.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-floor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-floor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-floor.rs?ref=1bd9573c1fb4753272254871c5a33d87328585bd", "patch": "@@ -44,28 +44,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @floor_32x2\n #[no_mangle]\n pub unsafe fn floor_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call <2 x float> @llvm.floor.v2f32\n+    // CHECK: call fast <2 x float> @llvm.floor.v2f32\n     simd_floor(a)\n }\n \n // CHECK-LABEL: @floor_32x4\n #[no_mangle]\n pub unsafe fn floor_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call <4 x float> @llvm.floor.v4f32\n+    // CHECK: call fast <4 x float> @llvm.floor.v4f32\n     simd_floor(a)\n }\n \n // CHECK-LABEL: @floor_32x8\n #[no_mangle]\n pub unsafe fn floor_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call <8 x float> @llvm.floor.v8f32\n+    // CHECK: call fast <8 x float> @llvm.floor.v8f32\n     simd_floor(a)\n }\n \n // CHECK-LABEL: @floor_32x16\n #[no_mangle]\n pub unsafe fn floor_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call <16 x float> @llvm.floor.v16f32\n+    // CHECK: call fast <16 x float> @llvm.floor.v16f32\n     simd_floor(a)\n }\n \n@@ -85,20 +85,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @floor_64x4\n #[no_mangle]\n pub unsafe fn floor_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call <4 x double> @llvm.floor.v4f64\n+    // CHECK: call fast <4 x double> @llvm.floor.v4f64\n     simd_floor(a)\n }\n \n // CHECK-LABEL: @floor_64x2\n #[no_mangle]\n pub unsafe fn floor_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call <2 x double> @llvm.floor.v2f64\n+    // CHECK: call fast <2 x double> @llvm.floor.v2f64\n     simd_floor(a)\n }\n \n // CHECK-LABEL: @floor_64x8\n #[no_mangle]\n pub unsafe fn floor_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call <8 x double> @llvm.floor.v8f64\n+    // CHECK: call fast <8 x double> @llvm.floor.v8f64\n     simd_floor(a)\n }"}, {"sha": "acd7f717214f1ff39259f7db2b584d51d19b4827", "filename": "src/test/codegen/simd-intrinsic-float-fma.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-fma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-fma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-fma.rs?ref=1bd9573c1fb4753272254871c5a33d87328585bd", "patch": "@@ -44,28 +44,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @fma_32x2\n #[no_mangle]\n pub unsafe fn fma_32x2(a: f32x2, b: f32x2, c: f32x2) -> f32x2 {\n-    // CHECK: call <2 x float> @llvm.fma.v2f32\n+    // CHECK: call fast <2 x float> @llvm.fma.v2f32\n     simd_fma(a, b, c)\n }\n \n // CHECK-LABEL: @fma_32x4\n #[no_mangle]\n pub unsafe fn fma_32x4(a: f32x4, b: f32x4, c: f32x4) -> f32x4 {\n-    // CHECK: call <4 x float> @llvm.fma.v4f32\n+    // CHECK: call fast <4 x float> @llvm.fma.v4f32\n     simd_fma(a, b, c)\n }\n \n // CHECK-LABEL: @fma_32x8\n #[no_mangle]\n pub unsafe fn fma_32x8(a: f32x8, b: f32x8, c: f32x8) -> f32x8 {\n-    // CHECK: call <8 x float> @llvm.fma.v8f32\n+    // CHECK: call fast <8 x float> @llvm.fma.v8f32\n     simd_fma(a, b, c)\n }\n \n // CHECK-LABEL: @fma_32x16\n #[no_mangle]\n pub unsafe fn fma_32x16(a: f32x16, b: f32x16, c: f32x16) -> f32x16 {\n-    // CHECK: call <16 x float> @llvm.fma.v16f32\n+    // CHECK: call fast <16 x float> @llvm.fma.v16f32\n     simd_fma(a, b, c)\n }\n \n@@ -85,20 +85,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @fma_64x4\n #[no_mangle]\n pub unsafe fn fma_64x4(a: f64x4, b: f64x4, c: f64x4) -> f64x4 {\n-    // CHECK: call <4 x double> @llvm.fma.v4f64\n+    // CHECK: call fast <4 x double> @llvm.fma.v4f64\n     simd_fma(a, b, c)\n }\n \n // CHECK-LABEL: @fma_64x2\n #[no_mangle]\n pub unsafe fn fma_64x2(a: f64x2, b: f64x2, c: f64x2) -> f64x2 {\n-    // CHECK: call <2 x double> @llvm.fma.v2f64\n+    // CHECK: call fast <2 x double> @llvm.fma.v2f64\n     simd_fma(a, b, c)\n }\n \n // CHECK-LABEL: @fma_64x8\n #[no_mangle]\n pub unsafe fn fma_64x8(a: f64x8, b: f64x8, c: f64x8) -> f64x8 {\n-    // CHECK: call <8 x double> @llvm.fma.v8f64\n+    // CHECK: call fast <8 x double> @llvm.fma.v8f64\n     simd_fma(a, b, c)\n }"}, {"sha": "2bad0bba48a78c05ca54bb0893edfd353307fecb", "filename": "src/test/codegen/simd-intrinsic-float-fsqrt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-fsqrt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-fsqrt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-fsqrt.rs?ref=1bd9573c1fb4753272254871c5a33d87328585bd", "patch": "@@ -44,28 +44,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @fsqrt_32x2\n #[no_mangle]\n pub unsafe fn fsqrt_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call <2 x float> @llvm.sqrt.v2f32\n+    // CHECK: call fast <2 x float> @llvm.sqrt.v2f32\n     simd_fsqrt(a)\n }\n \n // CHECK-LABEL: @fsqrt_32x4\n #[no_mangle]\n pub unsafe fn fsqrt_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call <4 x float> @llvm.sqrt.v4f32\n+    // CHECK: call fast <4 x float> @llvm.sqrt.v4f32\n     simd_fsqrt(a)\n }\n \n // CHECK-LABEL: @fsqrt_32x8\n #[no_mangle]\n pub unsafe fn fsqrt_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call <8 x float> @llvm.sqrt.v8f32\n+    // CHECK: call fast <8 x float> @llvm.sqrt.v8f32\n     simd_fsqrt(a)\n }\n \n // CHECK-LABEL: @fsqrt_32x16\n #[no_mangle]\n pub unsafe fn fsqrt_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call <16 x float> @llvm.sqrt.v16f32\n+    // CHECK: call fast <16 x float> @llvm.sqrt.v16f32\n     simd_fsqrt(a)\n }\n \n@@ -85,20 +85,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @fsqrt_64x4\n #[no_mangle]\n pub unsafe fn fsqrt_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call <4 x double> @llvm.sqrt.v4f64\n+    // CHECK: call fast <4 x double> @llvm.sqrt.v4f64\n     simd_fsqrt(a)\n }\n \n // CHECK-LABEL: @fsqrt_64x2\n #[no_mangle]\n pub unsafe fn fsqrt_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call <2 x double> @llvm.sqrt.v2f64\n+    // CHECK: call fast <2 x double> @llvm.sqrt.v2f64\n     simd_fsqrt(a)\n }\n \n // CHECK-LABEL: @fsqrt_64x8\n #[no_mangle]\n pub unsafe fn fsqrt_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call <8 x double> @llvm.sqrt.v8f64\n+    // CHECK: call fast <8 x double> @llvm.sqrt.v8f64\n     simd_fsqrt(a)\n }"}, {"sha": "d3829efe09b0e80579910eb6644a916bcad5e8bc", "filename": "src/test/codegen/simd-intrinsic-float-log.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-log.rs?ref=1bd9573c1fb4753272254871c5a33d87328585bd", "patch": "@@ -44,28 +44,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @log_32x2\n #[no_mangle]\n pub unsafe fn log_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call <2 x float> @llvm.log.v2f32\n+    // CHECK: call fast <2 x float> @llvm.log.v2f32\n     simd_flog(a)\n }\n \n // CHECK-LABEL: @log_32x4\n #[no_mangle]\n pub unsafe fn log_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call <4 x float> @llvm.log.v4f32\n+    // CHECK: call fast <4 x float> @llvm.log.v4f32\n     simd_flog(a)\n }\n \n // CHECK-LABEL: @log_32x8\n #[no_mangle]\n pub unsafe fn log_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call <8 x float> @llvm.log.v8f32\n+    // CHECK: call fast <8 x float> @llvm.log.v8f32\n     simd_flog(a)\n }\n \n // CHECK-LABEL: @log_32x16\n #[no_mangle]\n pub unsafe fn log_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call <16 x float> @llvm.log.v16f32\n+    // CHECK: call fast <16 x float> @llvm.log.v16f32\n     simd_flog(a)\n }\n \n@@ -85,20 +85,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @log_64x4\n #[no_mangle]\n pub unsafe fn log_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call <4 x double> @llvm.log.v4f64\n+    // CHECK: call fast <4 x double> @llvm.log.v4f64\n     simd_flog(a)\n }\n \n // CHECK-LABEL: @log_64x2\n #[no_mangle]\n pub unsafe fn log_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call <2 x double> @llvm.log.v2f64\n+    // CHECK: call fast <2 x double> @llvm.log.v2f64\n     simd_flog(a)\n }\n \n // CHECK-LABEL: @log_64x8\n #[no_mangle]\n pub unsafe fn log_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call <8 x double> @llvm.log.v8f64\n+    // CHECK: call fast <8 x double> @llvm.log.v8f64\n     simd_flog(a)\n }"}, {"sha": "47f19e499fa7dc0389d177d281d230fb72ab9fb1", "filename": "src/test/codegen/simd-intrinsic-float-log10.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-log10.rs?ref=1bd9573c1fb4753272254871c5a33d87328585bd", "patch": "@@ -44,28 +44,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @log10_32x2\n #[no_mangle]\n pub unsafe fn log10_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call <2 x float> @llvm.log10.v2f32\n+    // CHECK: call fast <2 x float> @llvm.log10.v2f32\n     simd_flog10(a)\n }\n \n // CHECK-LABEL: @log10_32x4\n #[no_mangle]\n pub unsafe fn log10_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call <4 x float> @llvm.log10.v4f32\n+    // CHECK: call fast <4 x float> @llvm.log10.v4f32\n     simd_flog10(a)\n }\n \n // CHECK-LABEL: @log10_32x8\n #[no_mangle]\n pub unsafe fn log10_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call <8 x float> @llvm.log10.v8f32\n+    // CHECK: call fast <8 x float> @llvm.log10.v8f32\n     simd_flog10(a)\n }\n \n // CHECK-LABEL: @log10_32x16\n #[no_mangle]\n pub unsafe fn log10_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call <16 x float> @llvm.log10.v16f32\n+    // CHECK: call fast <16 x float> @llvm.log10.v16f32\n     simd_flog10(a)\n }\n \n@@ -85,20 +85,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @log10_64x4\n #[no_mangle]\n pub unsafe fn log10_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call <4 x double> @llvm.log10.v4f64\n+    // CHECK: call fast <4 x double> @llvm.log10.v4f64\n     simd_flog10(a)\n }\n \n // CHECK-LABEL: @log10_64x2\n #[no_mangle]\n pub unsafe fn log10_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call <2 x double> @llvm.log10.v2f64\n+    // CHECK: call fast <2 x double> @llvm.log10.v2f64\n     simd_flog10(a)\n }\n \n // CHECK-LABEL: @log10_64x8\n #[no_mangle]\n pub unsafe fn log10_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call <8 x double> @llvm.log10.v8f64\n+    // CHECK: call fast <8 x double> @llvm.log10.v8f64\n     simd_flog10(a)\n }"}, {"sha": "e36a5887b61964c45cc114058650d43cdd626fc1", "filename": "src/test/codegen/simd-intrinsic-float-log2.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-log2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-log2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-log2.rs?ref=1bd9573c1fb4753272254871c5a33d87328585bd", "patch": "@@ -44,28 +44,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @log2_32x2\n #[no_mangle]\n pub unsafe fn log2_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call <2 x float> @llvm.log2.v2f32\n+    // CHECK: call fast <2 x float> @llvm.log2.v2f32\n     simd_flog2(a)\n }\n \n // CHECK-LABEL: @log2_32x4\n #[no_mangle]\n pub unsafe fn log2_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call <4 x float> @llvm.log2.v4f32\n+    // CHECK: call fast <4 x float> @llvm.log2.v4f32\n     simd_flog2(a)\n }\n \n // CHECK-LABEL: @log2_32x8\n #[no_mangle]\n pub unsafe fn log2_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call <8 x float> @llvm.log2.v8f32\n+    // CHECK: call fast <8 x float> @llvm.log2.v8f32\n     simd_flog2(a)\n }\n \n // CHECK-LABEL: @log2_32x16\n #[no_mangle]\n pub unsafe fn log2_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call <16 x float> @llvm.log2.v16f32\n+    // CHECK: call fast <16 x float> @llvm.log2.v16f32\n     simd_flog2(a)\n }\n \n@@ -85,20 +85,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @log2_64x4\n #[no_mangle]\n pub unsafe fn log2_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call <4 x double> @llvm.log2.v4f64\n+    // CHECK: call fast <4 x double> @llvm.log2.v4f64\n     simd_flog2(a)\n }\n \n // CHECK-LABEL: @log2_64x2\n #[no_mangle]\n pub unsafe fn log2_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call <2 x double> @llvm.log2.v2f64\n+    // CHECK: call fast <2 x double> @llvm.log2.v2f64\n     simd_flog2(a)\n }\n \n // CHECK-LABEL: @log2_64x8\n #[no_mangle]\n pub unsafe fn log2_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call <8 x double> @llvm.log2.v8f64\n+    // CHECK: call fast <8 x double> @llvm.log2.v8f64\n     simd_flog2(a)\n }"}, {"sha": "bb2ac362203025852c9c650bac40b8c8ab421af6", "filename": "src/test/codegen/simd-intrinsic-float-pow.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-pow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-pow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-pow.rs?ref=1bd9573c1fb4753272254871c5a33d87328585bd", "patch": "@@ -44,28 +44,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @fpow_32x2\n #[no_mangle]\n pub unsafe fn fpow_32x2(a: f32x2, b: f32x2) -> f32x2 {\n-    // CHECK: call <2 x float> @llvm.pow.v2f32\n+    // CHECK: call fast <2 x float> @llvm.pow.v2f32\n     simd_fpow(a, b)\n }\n \n // CHECK-LABEL: @fpow_32x4\n #[no_mangle]\n pub unsafe fn fpow_32x4(a: f32x4, b: f32x4) -> f32x4 {\n-    // CHECK: call <4 x float> @llvm.pow.v4f32\n+    // CHECK: call fast <4 x float> @llvm.pow.v4f32\n     simd_fpow(a, b)\n }\n \n // CHECK-LABEL: @fpow_32x8\n #[no_mangle]\n pub unsafe fn fpow_32x8(a: f32x8, b: f32x8) -> f32x8 {\n-    // CHECK: call <8 x float> @llvm.pow.v8f32\n+    // CHECK: call fast <8 x float> @llvm.pow.v8f32\n     simd_fpow(a, b)\n }\n \n // CHECK-LABEL: @fpow_32x16\n #[no_mangle]\n pub unsafe fn fpow_32x16(a: f32x16, b: f32x16) -> f32x16 {\n-    // CHECK: call <16 x float> @llvm.pow.v16f32\n+    // CHECK: call fast <16 x float> @llvm.pow.v16f32\n     simd_fpow(a, b)\n }\n \n@@ -85,20 +85,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @fpow_64x4\n #[no_mangle]\n pub unsafe fn fpow_64x4(a: f64x4, b: f64x4) -> f64x4 {\n-    // CHECK: call <4 x double> @llvm.pow.v4f64\n+    // CHECK: call fast <4 x double> @llvm.pow.v4f64\n     simd_fpow(a, b)\n }\n \n // CHECK-LABEL: @fpow_64x2\n #[no_mangle]\n pub unsafe fn fpow_64x2(a: f64x2, b: f64x2) -> f64x2 {\n-    // CHECK: call <2 x double> @llvm.pow.v2f64\n+    // CHECK: call fast <2 x double> @llvm.pow.v2f64\n     simd_fpow(a, b)\n }\n \n // CHECK-LABEL: @fpow_64x8\n #[no_mangle]\n pub unsafe fn fpow_64x8(a: f64x8, b: f64x8) -> f64x8 {\n-    // CHECK: call <8 x double> @llvm.pow.v8f64\n+    // CHECK: call fast <8 x double> @llvm.pow.v8f64\n     simd_fpow(a, b)\n }"}, {"sha": "6e28af262ace60188463b05cc0b9f16a4a436d7b", "filename": "src/test/codegen/simd-intrinsic-float-powi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-powi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-powi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-powi.rs?ref=1bd9573c1fb4753272254871c5a33d87328585bd", "patch": "@@ -44,28 +44,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @fpowi_32x2\n #[no_mangle]\n pub unsafe fn fpowi_32x2(a: f32x2, b: i32) -> f32x2 {\n-    // CHECK: call <2 x float> @llvm.powi.v2f32\n+    // CHECK: call fast <2 x float> @llvm.powi.v2f32\n     simd_fpowi(a, b)\n }\n \n // CHECK-LABEL: @fpowi_32x4\n #[no_mangle]\n pub unsafe fn fpowi_32x4(a: f32x4, b: i32) -> f32x4 {\n-    // CHECK: call <4 x float> @llvm.powi.v4f32\n+    // CHECK: call fast <4 x float> @llvm.powi.v4f32\n     simd_fpowi(a, b)\n }\n \n // CHECK-LABEL: @fpowi_32x8\n #[no_mangle]\n pub unsafe fn fpowi_32x8(a: f32x8, b: i32) -> f32x8 {\n-    // CHECK: call <8 x float> @llvm.powi.v8f32\n+    // CHECK: call fast <8 x float> @llvm.powi.v8f32\n     simd_fpowi(a, b)\n }\n \n // CHECK-LABEL: @fpowi_32x16\n #[no_mangle]\n pub unsafe fn fpowi_32x16(a: f32x16, b: i32) -> f32x16 {\n-    // CHECK: call <16 x float> @llvm.powi.v16f32\n+    // CHECK: call fast <16 x float> @llvm.powi.v16f32\n     simd_fpowi(a, b)\n }\n \n@@ -85,20 +85,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @fpowi_64x4\n #[no_mangle]\n pub unsafe fn fpowi_64x4(a: f64x4, b: i32) -> f64x4 {\n-    // CHECK: call <4 x double> @llvm.powi.v4f64\n+    // CHECK: call fast <4 x double> @llvm.powi.v4f64\n     simd_fpowi(a, b)\n }\n \n // CHECK-LABEL: @fpowi_64x2\n #[no_mangle]\n pub unsafe fn fpowi_64x2(a: f64x2, b: i32) -> f64x2 {\n-    // CHECK: call <2 x double> @llvm.powi.v2f64\n+    // CHECK: call fast <2 x double> @llvm.powi.v2f64\n     simd_fpowi(a, b)\n }\n \n // CHECK-LABEL: @fpowi_64x8\n #[no_mangle]\n pub unsafe fn fpowi_64x8(a: f64x8, b: i32) -> f64x8 {\n-    // CHECK: call <8 x double> @llvm.powi.v8f64\n+    // CHECK: call fast <8 x double> @llvm.powi.v8f64\n     simd_fpowi(a, b)\n }"}, {"sha": "26100ed5c3f03f79de41f06fb664c26c50912569", "filename": "src/test/codegen/simd-intrinsic-float-sin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-sin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd9573c1fb4753272254871c5a33d87328585bd/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-sin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-float-sin.rs?ref=1bd9573c1fb4753272254871c5a33d87328585bd", "patch": "@@ -44,28 +44,28 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @fsin_32x2\n #[no_mangle]\n pub unsafe fn fsin_32x2(a: f32x2) -> f32x2 {\n-    // CHECK: call <2 x float> @llvm.sin.v2f32\n+    // CHECK: call fast <2 x float> @llvm.sin.v2f32\n     simd_fsin(a)\n }\n \n // CHECK-LABEL: @fsin_32x4\n #[no_mangle]\n pub unsafe fn fsin_32x4(a: f32x4) -> f32x4 {\n-    // CHECK: call <4 x float> @llvm.sin.v4f32\n+    // CHECK: call fast <4 x float> @llvm.sin.v4f32\n     simd_fsin(a)\n }\n \n // CHECK-LABEL: @fsin_32x8\n #[no_mangle]\n pub unsafe fn fsin_32x8(a: f32x8) -> f32x8 {\n-    // CHECK: call <8 x float> @llvm.sin.v8f32\n+    // CHECK: call fast <8 x float> @llvm.sin.v8f32\n     simd_fsin(a)\n }\n \n // CHECK-LABEL: @fsin_32x16\n #[no_mangle]\n pub unsafe fn fsin_32x16(a: f32x16) -> f32x16 {\n-    // CHECK: call <16 x float> @llvm.sin.v16f32\n+    // CHECK: call fast <16 x float> @llvm.sin.v16f32\n     simd_fsin(a)\n }\n \n@@ -85,20 +85,20 @@ pub struct f64x8(pub f64, pub f64, pub f64, pub f64,\n // CHECK-LABEL: @fsin_64x4\n #[no_mangle]\n pub unsafe fn fsin_64x4(a: f64x4) -> f64x4 {\n-    // CHECK: call <4 x double> @llvm.sin.v4f64\n+    // CHECK: call fast <4 x double> @llvm.sin.v4f64\n     simd_fsin(a)\n }\n \n // CHECK-LABEL: @fsin_64x2\n #[no_mangle]\n pub unsafe fn fsin_64x2(a: f64x2) -> f64x2 {\n-    // CHECK: call <2 x double> @llvm.sin.v2f64\n+    // CHECK: call fast <2 x double> @llvm.sin.v2f64\n     simd_fsin(a)\n }\n \n // CHECK-LABEL: @fsin_64x8\n #[no_mangle]\n pub unsafe fn fsin_64x8(a: f64x8) -> f64x8 {\n-    // CHECK: call <8 x double> @llvm.sin.v8f64\n+    // CHECK: call fast <8 x double> @llvm.sin.v8f64\n     simd_fsin(a)\n }"}]}