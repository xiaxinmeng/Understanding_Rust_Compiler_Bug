{"sha": "fab202c0a82ea14e6fa4cde9080c789732f1213b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYjIwMmMwYTgyZWExNGU2ZmE0Y2RlOTA4MGM3ODk3MzJmMTIxM2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-21T17:23:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-28T14:11:58Z"}, "message": "store the visit order in the Crate", "tree": {"sha": "cb0ef0d036a11f153d3f568ba8698efdf8f50b60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb0ef0d036a11f153d3f568ba8698efdf8f50b60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fab202c0a82ea14e6fa4cde9080c789732f1213b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fab202c0a82ea14e6fa4cde9080c789732f1213b", "html_url": "https://github.com/rust-lang/rust/commit/fab202c0a82ea14e6fa4cde9080c789732f1213b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fab202c0a82ea14e6fa4cde9080c789732f1213b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bb1e16e920567f92f6d7ac147c1b51db5b686ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bb1e16e920567f92f6d7ac147c1b51db5b686ec", "html_url": "https://github.com/rust-lang/rust/commit/1bb1e16e920567f92f6d7ac147c1b51db5b686ec"}], "stats": {"total": 46, "additions": 20, "deletions": 26}, "files": [{"sha": "a34a3591c151d0e87e805a53d8b3c1cab9638d94", "filename": "src/librustc/dep_graph/visit.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fab202c0a82ea14e6fa4cde9080c789732f1213b/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab202c0a82ea14e6fa4cde9080c789732f1213b/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fvisit.rs?ref=fab202c0a82ea14e6fa4cde9080c789732f1213b", "patch": "@@ -11,7 +11,6 @@\n use hir;\n use hir::def_id::DefId;\n use hir::itemlikevisit::ItemLikeVisitor;\n-use hir::intravisit::{self, NestedVisitorMap, Visitor};\n use ty::TyCtxt;\n \n use super::dep_node::DepNode;\n@@ -79,30 +78,9 @@ pub fn visit_all_item_likes_in_krate<'a, 'tcx, V, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n pub fn visit_all_bodies_in_krate<'a, 'tcx, C>(tcx: TyCtxt<'a, 'tcx, 'tcx>, callback: C)\n     where C: Fn(/* body_owner */ DefId, /* body id */ hir::BodyId),\n {\n-    // NB: we use a visitor here rather than walking the keys of the\n-    // hashmap so as to ensure we visit the bodies \"in order\".\n-\n     let krate = tcx.hir.krate();\n-    intravisit::walk_crate(&mut V { tcx, callback }, krate);\n-\n-    struct V<'a, 'tcx: 'a, C> {\n-        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        callback: C\n-    }\n-\n-    impl<'a, 'tcx, C> Visitor<'tcx> for V<'a, 'tcx, C>\n-        where C: Fn(/* body_owner */ DefId, /* body id */ hir::BodyId),\n-    {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-            NestedVisitorMap::All(&self.tcx.hir)\n-        }\n-\n-        fn visit_body(&mut self, body: &'tcx hir::Body) {\n-            let body_id = body.id();\n-            let body_owner_def_id = self.tcx.hir.body_owner_def_id(body_id);\n-            (self.callback)(body_owner_def_id, body_id);\n-\n-            intravisit::walk_body(self, body);\n-        }\n+    for &body_id in &krate.body_ids {\n+        let body_owner_def_id = tcx.hir.body_owner_def_id(body_id);\n+        callback(body_owner_def_id, body_id);\n     }\n }"}, {"sha": "257cdb960d5293ba3e9c4fd4b7a1a21270916915", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fab202c0a82ea14e6fa4cde9080c789732f1213b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab202c0a82ea14e6fa4cde9080c789732f1213b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=fab202c0a82ea14e6fa4cde9080c789732f1213b", "patch": "@@ -196,6 +196,7 @@ impl<'a> LoweringContext<'a> {\n         let module = self.lower_mod(&c.module);\n         let attrs = self.lower_attrs(&c.attrs);\n         let exported_macros = c.exported_macros.iter().map(|m| self.lower_macro_def(m)).collect();\n+        let body_ids = body_ids(&self.bodies);\n \n         hir::Crate {\n             module: module,\n@@ -206,6 +207,7 @@ impl<'a> LoweringContext<'a> {\n             trait_items: self.trait_items,\n             impl_items: self.impl_items,\n             bodies: self.bodies,\n+            body_ids: body_ids,\n             trait_impls: self.trait_impls,\n             trait_default_impl: self.trait_default_impl,\n         }\n@@ -2524,3 +2526,11 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n }\n+\n+fn body_ids(bodies: &BTreeMap<hir::BodyId, hir::Body>) -> Vec<hir::BodyId> {\n+    // Sorting by span ensures that we get things in order within a\n+    // file, and also puts the files in a sensible order.\n+    let mut body_ids: Vec<_> = bodies.keys().cloned().collect();\n+    body_ids.sort_by_key(|b| bodies[b].value.span);\n+    body_ids\n+}"}, {"sha": "c1ba688974be88a2cc94badcd2dd850d865dcb27", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fab202c0a82ea14e6fa4cde9080c789732f1213b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab202c0a82ea14e6fa4cde9080c789732f1213b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=fab202c0a82ea14e6fa4cde9080c789732f1213b", "patch": "@@ -412,6 +412,12 @@ pub struct Crate {\n     pub bodies: BTreeMap<BodyId, Body>,\n     pub trait_impls: BTreeMap<DefId, Vec<NodeId>>,\n     pub trait_default_impl: BTreeMap<DefId, NodeId>,\n+\n+    /// A list of the body ids written out in the order in which they\n+    /// appear in the crate. If you're going to process all the bodies\n+    /// in the crate, you should iterate over this list rather than the keys\n+    /// of bodies.\n+    pub body_ids: Vec<BodyId>,\n }\n \n impl Crate {"}, {"sha": "041e966fa73a2be81f05b8022eac96e549a7c120", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fab202c0a82ea14e6fa4cde9080c789732f1213b/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fab202c0a82ea14e6fa4cde9080c789732f1213b/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=fab202c0a82ea14e6fa4cde9080c789732f1213b", "patch": "@@ -1167,9 +1167,9 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n             trait_items: _,\n             impl_items: _,\n             bodies: _,\n-\n             trait_impls: _,\n             trait_default_impl: _,\n+            body_ids: _,\n         } = *krate;\n \n         visit::Visitor::visit_mod(self, module, span, ast::CRATE_NODE_ID);"}]}