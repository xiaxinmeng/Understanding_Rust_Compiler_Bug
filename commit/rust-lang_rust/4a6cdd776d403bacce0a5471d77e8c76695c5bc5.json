{"sha": "4a6cdd776d403bacce0a5471d77e8c76695c5bc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNmNkZDc3NmQ0MDNiYWNjZTBhNTQ3MWQ3N2U4Yzc2Njk1YzViYzU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-23T14:59:23Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-23T16:24:21Z"}, "message": "Record method call substs and use them in call info", "tree": {"sha": "63f29d9de92697b522c6cc274324764c31ef904f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63f29d9de92697b522c6cc274324764c31ef904f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a6cdd776d403bacce0a5471d77e8c76695c5bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6cdd776d403bacce0a5471d77e8c76695c5bc5", "html_url": "https://github.com/rust-lang/rust/commit/4a6cdd776d403bacce0a5471d77e8c76695c5bc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96e5412f881608d703df129ed87f3488ad39a9e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/96e5412f881608d703df129ed87f3488ad39a9e1", "html_url": "https://github.com/rust-lang/rust/commit/96e5412f881608d703df129ed87f3488ad39a9e1"}], "stats": {"total": 170, "additions": 125, "deletions": 45}, "files": [{"sha": "d65dd7df08de2ef28e86f0474a0692cd3ae1ad73", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=4a6cdd776d403bacce0a5471d77e8c76695c5bc5", "patch": "@@ -11,7 +11,7 @@ use hir_def::{\n     AsMacroCall, FunctionId, TraitId, VariantId,\n };\n use hir_expand::{name::AsName, ExpansionInfo};\n-use hir_ty::associated_type_shorthand_candidates;\n+use hir_ty::{associated_type_shorthand_candidates, Interner};\n use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{\n@@ -501,14 +501,12 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn resolve_method_call(&self, call: &ast::MethodCallExpr) -> Option<FunctionId> {\n-        self.analyze(call.syntax()).resolve_method_call(self.db, call)\n+        self.analyze(call.syntax()).resolve_method_call(self.db, call).map(|(id, _)| id)\n     }\n \n     fn resolve_method_call_as_callable(&self, call: &ast::MethodCallExpr) -> Option<Callable> {\n-        // FIXME: this erases Substs, we should instead record the correct\n-        // substitution during inference and use that\n-        let func = self.resolve_method_call(call)?;\n-        let ty = hir_ty::TyBuilder::value_ty(self.db, func.into()).fill_with_unknown().build();\n+        let (func, subst) = self.analyze(call.syntax()).resolve_method_call(self.db, call)?;\n+        let ty = self.db.value_ty(func.into()).substitute(&Interner, &subst);\n         let resolver = self.analyze(call.syntax()).resolver;\n         let ty = Type::new_with_resolver(self.db, &resolver, ty)?;\n         let mut res = ty.as_callable(self.db)?;"}, {"sha": "a1a9c727a6788b90d9cdea1674da468701829d94", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=4a6cdd776d403bacce0a5471d77e8c76695c5bc5", "patch": "@@ -143,7 +143,7 @@ impl SourceAnalyzer {\n         &self,\n         db: &dyn HirDatabase,\n         call: &ast::MethodCallExpr,\n-    ) -> Option<FunctionId> {\n+    ) -> Option<(FunctionId, Substitution)> {\n         let expr_id = self.expr_id(db, &call.clone().into())?;\n         self.infer.as_ref()?.method_resolution(expr_id)\n     }"}, {"sha": "d1f113e7ff9789f2dec08e4b5b1d306f8f3ddfd7", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=4a6cdd776d403bacce0a5471d77e8c76695c5bc5", "patch": "@@ -181,7 +181,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         for (id, expr) in body.exprs.iter() {\n             if let Expr::MethodCall { receiver, .. } = expr {\n                 let function_id = match self.infer.method_resolution(id) {\n-                    Some(id) => id,\n+                    Some((id, _)) => id,\n                     None => continue,\n                 };\n \n@@ -239,15 +239,11 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                     return;\n                 }\n \n-                // FIXME: note that we erase information about substs here. This\n-                // is not right, but, luckily, doesn't matter as we care only\n-                // about the number of params\n-                let callee = match self.infer.method_resolution(call_id) {\n-                    Some(callee) => callee,\n+                let (callee, subst) = match self.infer.method_resolution(call_id) {\n+                    Some(it) => it,\n                     None => return,\n                 };\n-                let sig =\n-                    db.callable_item_signature(callee.into()).into_value_and_skipped_binders().0;\n+                let sig = db.callable_item_signature(callee.into()).substitute(&Interner, &subst);\n \n                 (sig, args)\n             }"}, {"sha": "5d13bddea3598e3720018347568e4cb95d8f4dfe", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=4a6cdd776d403bacce0a5471d77e8c76695c5bc5", "patch": "@@ -105,7 +105,7 @@ fn walk_unsafe(\n         Expr::MethodCall { .. } => {\n             if infer\n                 .method_resolution(current)\n-                .map(|func| db.function_data(func).is_unsafe())\n+                .map(|(func, _)| db.function_data(func).is_unsafe())\n                 .unwrap_or(false)\n             {\n                 unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });"}, {"sha": "db3c937ff5e780f576a6d59d119b7e73397cc82a", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=4a6cdd776d403bacce0a5471d77e8c76695c5bc5", "patch": "@@ -37,8 +37,8 @@ use syntax::SmolStr;\n use super::{DomainGoal, InEnvironment, ProjectionTy, TraitEnvironment, TraitRef, Ty};\n use crate::{\n     db::HirDatabase, fold_tys, infer::diagnostics::InferenceDiagnostic,\n-    lower::ImplTraitLoweringMode, to_assoc_type_id, AliasEq, AliasTy, Goal, Interner, TyBuilder,\n-    TyExt, TyKind,\n+    lower::ImplTraitLoweringMode, to_assoc_type_id, AliasEq, AliasTy, Goal, Interner, Substitution,\n+    TyBuilder, TyExt, TyKind,\n };\n \n // This lint has a false positive here. See the link below for details.\n@@ -132,7 +132,7 @@ impl Default for InternedStandardTypes {\n #[derive(Clone, PartialEq, Eq, Debug, Default)]\n pub struct InferenceResult {\n     /// For each method call expr, records the function it resolves to.\n-    method_resolutions: FxHashMap<ExprId, FunctionId>,\n+    method_resolutions: FxHashMap<ExprId, (FunctionId, Substitution)>,\n     /// For each field access expr, records the field it resolves to.\n     field_resolutions: FxHashMap<ExprId, FieldId>,\n     /// For each struct literal or pattern, records the variant it resolves to.\n@@ -152,8 +152,8 @@ pub struct InferenceResult {\n }\n \n impl InferenceResult {\n-    pub fn method_resolution(&self, expr: ExprId) -> Option<FunctionId> {\n-        self.method_resolutions.get(&expr).copied()\n+    pub fn method_resolution(&self, expr: ExprId) -> Option<(FunctionId, Substitution)> {\n+        self.method_resolutions.get(&expr).cloned()\n     }\n     pub fn field_resolution(&self, expr: ExprId) -> Option<FieldId> {\n         self.field_resolutions.get(&expr).copied()\n@@ -284,14 +284,17 @@ impl<'a> InferenceContext<'a> {\n         self.table.propagate_diverging_flag();\n         let mut result = std::mem::take(&mut self.result);\n         for ty in result.type_of_expr.values_mut() {\n-            *ty = self.table.resolve_ty_completely(ty.clone());\n+            *ty = self.table.resolve_completely(ty.clone());\n         }\n         for ty in result.type_of_pat.values_mut() {\n-            *ty = self.table.resolve_ty_completely(ty.clone());\n+            *ty = self.table.resolve_completely(ty.clone());\n         }\n         for mismatch in result.type_mismatches.values_mut() {\n-            mismatch.expected = self.table.resolve_ty_completely(mismatch.expected.clone());\n-            mismatch.actual = self.table.resolve_ty_completely(mismatch.actual.clone());\n+            mismatch.expected = self.table.resolve_completely(mismatch.expected.clone());\n+            mismatch.actual = self.table.resolve_completely(mismatch.actual.clone());\n+        }\n+        for (_, subst) in result.method_resolutions.values_mut() {\n+            *subst = self.table.resolve_completely(subst.clone());\n         }\n         result\n     }\n@@ -300,8 +303,8 @@ impl<'a> InferenceContext<'a> {\n         self.result.type_of_expr.insert(expr, ty);\n     }\n \n-    fn write_method_resolution(&mut self, expr: ExprId, func: FunctionId) {\n-        self.result.method_resolutions.insert(expr, func);\n+    fn write_method_resolution(&mut self, expr: ExprId, func: FunctionId, subst: Substitution) {\n+        self.result.method_resolutions.insert(expr, (func, subst));\n     }\n \n     fn write_field_resolution(&mut self, expr: ExprId, field: FieldId) {"}, {"sha": "eab8fac910ed42505279b3d6b55ce7fcbff017ed", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=4a6cdd776d403bacce0a5471d77e8c76695c5bc5", "patch": "@@ -891,17 +891,21 @@ impl<'a> InferenceContext<'a> {\n                 method_name,\n             )\n         });\n-        let (derefed_receiver_ty, method_ty, def_generics) = match resolved {\n+        let (derefed_receiver_ty, method_ty, substs) = match resolved {\n             Some((ty, func)) => {\n                 let ty = canonicalized_receiver.decanonicalize_ty(ty);\n-                self.write_method_resolution(tgt_expr, func);\n-                (ty, self.db.value_ty(func.into()), Some(generics(self.db.upcast(), func.into())))\n+                let generics = generics(self.db.upcast(), func.into());\n+                let substs = self.substs_for_method_call(generics, generic_args, &ty);\n+                self.write_method_resolution(tgt_expr, func, substs.clone());\n+                (ty, self.db.value_ty(func.into()), substs)\n             }\n-            None => (receiver_ty, Binders::empty(&Interner, self.err_ty()), None),\n+            None => (\n+                receiver_ty,\n+                Binders::empty(&Interner, self.err_ty()),\n+                Substitution::empty(&Interner),\n+            ),\n         };\n-        let substs = self.substs_for_method_call(def_generics, generic_args, &derefed_receiver_ty);\n         let method_ty = method_ty.substitute(&Interner, &substs);\n-        let method_ty = self.insert_type_vars(method_ty);\n         self.register_obligations_for_call(&method_ty);\n         let (expected_receiver_ty, param_tys, ret_ty) = match method_ty.callable_sig(self.db) {\n             Some(sig) => {\n@@ -950,23 +954,21 @@ impl<'a> InferenceContext<'a> {\n \n     fn substs_for_method_call(\n         &mut self,\n-        def_generics: Option<Generics>,\n+        def_generics: Generics,\n         generic_args: Option<&GenericArgs>,\n         receiver_ty: &Ty,\n     ) -> Substitution {\n         let (parent_params, self_params, type_params, impl_trait_params) =\n-            def_generics.as_ref().map_or((0, 0, 0, 0), |g| g.provenance_split());\n+            def_generics.provenance_split();\n         assert_eq!(self_params, 0); // method shouldn't have another Self param\n         let total_len = parent_params + type_params + impl_trait_params;\n         let mut substs = Vec::with_capacity(total_len);\n         // Parent arguments are unknown, except for the receiver type\n-        if let Some(parent_generics) = def_generics.as_ref().map(|p| p.iter_parent()) {\n-            for (_id, param) in parent_generics {\n-                if param.provenance == hir_def::generics::TypeParamProvenance::TraitSelf {\n-                    substs.push(receiver_ty.clone());\n-                } else {\n-                    substs.push(self.err_ty());\n-                }\n+        for (_id, param) in def_generics.iter_parent() {\n+            if param.provenance == hir_def::generics::TypeParamProvenance::TraitSelf {\n+                substs.push(receiver_ty.clone());\n+            } else {\n+                substs.push(self.table.new_type_var());\n             }\n         }\n         // handle provided type arguments\n@@ -989,7 +991,7 @@ impl<'a> InferenceContext<'a> {\n         };\n         let supplied_params = substs.len();\n         for _ in supplied_params..total_len {\n-            substs.push(self.err_ty());\n+            substs.push(self.table.new_type_var());\n         }\n         assert_eq!(substs.len(), total_len);\n         Substitution::from_iter(&Interner, substs)"}, {"sha": "ea5684229f0840e68312ed7ed9bb20a01afc92e5", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=4a6cdd776d403bacce0a5471d77e8c76695c5bc5", "patch": "@@ -295,8 +295,11 @@ impl<'a> InferenceTable<'a> {\n         .expect(\"fold failed unexpectedly\")\n     }\n \n-    pub(crate) fn resolve_ty_completely(&mut self, ty: Ty) -> Ty {\n-        self.resolve_with_fallback(ty, |_, _, d, _| d)\n+    pub(crate) fn resolve_completely<T>(&mut self, t: T) -> T::Result\n+    where\n+        T: HasInterner<Interner = Interner> + Fold<Interner>,\n+    {\n+        self.resolve_with_fallback(t, |_, _, d, _| d)\n     }\n \n     /// Unify two types and register new trait goals that arise from that."}, {"sha": "c929d73949369bfab5d22fa7f254e418c37a4668", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=4a6cdd776d403bacce0a5471d77e8c76695c5bc5", "patch": "@@ -784,6 +784,19 @@ fn foo() {\n         )\n     }\n \n+    #[test]\n+    fn expected_type_generic_struct_field() {\n+        check_expected_type_and_name(\n+            r#\"\n+struct Foo<T> { a: T }\n+fn foo() -> Foo<u32> {\n+    Foo { a: $0 }\n+}\n+\"#,\n+            expect![[r#\"ty: u32, name: a\"#]],\n+        )\n+    }\n+\n     #[test]\n     fn expected_type_struct_field_with_leading_char() {\n         cov_mark::check!(expected_type_struct_field_with_leading_char);\n@@ -895,4 +908,51 @@ fn foo() -> u32 {\n             expect![[r#\"ty: u32, name: ?\"#]],\n         )\n     }\n+\n+    #[test]\n+    fn expected_type_closure_param() {\n+        check_expected_type_and_name(\n+            r#\"\n+fn foo() {\n+    bar(|| $0);\n+}\n+\n+fn bar(f: impl FnOnce() -> u32) {}\n+#[lang = \"fn_once\"]\n+trait FnOnce { type Output; }\n+\"#,\n+            expect![[r#\"ty: u32, name: ?\"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn expected_type_generic_function() {\n+        check_expected_type_and_name(\n+            r#\"\n+fn foo() {\n+    bar::<u32>($0);\n+}\n+\n+fn bar<T>(t: T) {}\n+\"#,\n+            expect![[r#\"ty: u32, name: t\"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn expected_type_generic_method() {\n+        check_expected_type_and_name(\n+            r#\"\n+fn foo() {\n+    S(1u32).bar($0);\n+}\n+\n+struct S<T>(T);\n+impl<T> S<T> {\n+    fn bar(self, t: T) {}\n+}\n+\"#,\n+            expect![[r#\"ty: u32, name: t\"#]],\n+        );\n+    }\n }"}, {"sha": "1aeda08e5f58c5806489b774cc0ab669ca9eb7d3", "filename": "crates/ide_db/src/call_info/tests.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fide_db%2Fsrc%2Fcall_info%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6cdd776d403bacce0a5471d77e8c76695c5bc5/crates%2Fide_db%2Fsrc%2Fcall_info%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fcall_info%2Ftests.rs?ref=4a6cdd776d403bacce0a5471d77e8c76695c5bc5", "patch": "@@ -188,6 +188,24 @@ fn main() { S.foo($0); }\n     );\n }\n \n+#[test]\n+fn test_fn_signature_for_generic_method() {\n+    check(\n+        r#\"\n+struct S<T>(T);\n+impl<T> S<T> {\n+    fn foo(&self, x: T) {}\n+}\n+\n+fn main() { S(1u32).foo($0); }\n+\"#,\n+        expect![[r#\"\n+                fn foo(&self, x: u32)\n+                (<x: u32>)\n+            \"#]],\n+    );\n+}\n+\n #[test]\n fn test_fn_signature_for_method_with_arg_as_assoc_fn() {\n     check("}]}