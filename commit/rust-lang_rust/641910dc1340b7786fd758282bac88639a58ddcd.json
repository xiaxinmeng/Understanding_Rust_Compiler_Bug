{"sha": "641910dc1340b7786fd758282bac88639a58ddcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MTkxMGRjMTM0MGI3Nzg2ZmQ3NTgyODJiYWM4ODYzOWE1OGRkY2Q=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-12T16:56:09Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-13T00:19:34Z"}, "message": "std: make all strings Equiv-alent to each other, generalise Path.push_many to take any type of string.", "tree": {"sha": "a183dcf81a44a02ccc36116e463617b8350c012c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a183dcf81a44a02ccc36116e463617b8350c012c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/641910dc1340b7786fd758282bac88639a58ddcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/641910dc1340b7786fd758282bac88639a58ddcd", "html_url": "https://github.com/rust-lang/rust/commit/641910dc1340b7786fd758282bac88639a58ddcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/641910dc1340b7786fd758282bac88639a58ddcd/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84bed9769b5d15871481b657860ad6a7d0a62f42", "url": "https://api.github.com/repos/rust-lang/rust/commits/84bed9769b5d15871481b657860ad6a7d0a62f42", "html_url": "https://github.com/rust-lang/rust/commit/84bed9769b5d15871481b657860ad6a7d0a62f42"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "9c4e8f083584c542adcaa501d18dbb3f1bfc7f6e", "filename": "src/libstd/path.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/641910dc1340b7786fd758282bac88639a58ddcd/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641910dc1340b7786fd758282bac88639a58ddcd/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=641910dc1340b7786fd758282bac88639a58ddcd", "patch": "@@ -22,7 +22,7 @@ use iterator::IteratorUtil;\n use libc;\n use option::{None, Option, Some};\n use str;\n-use str::{StrSlice, StrVector};\n+use str::{Str, StrSlice, StrVector};\n use to_str::ToStr;\n use ascii::{AsciiCast, AsciiStr};\n use old_iter::BaseIter;\n@@ -102,7 +102,7 @@ pub trait GenericPath {\n     fn push_rel(&self, (&Self)) -> Self;\n     /// Returns a new Path consisting of the path given by the given vector\n     /// of strings, relative to `self`.\n-    fn push_many(&self, (&[~str])) -> Self;\n+    fn push_many<S: Str>(&self, (&[S])) -> Self;\n     /// Identical to `dir_path` except in the case where `self` has only one\n     /// component. In this case, `pop` returns the empty path.\n     fn pop(&self) -> Self;\n@@ -566,10 +566,10 @@ impl GenericPath for PosixPath {\n         false\n     }\n \n-    fn push_many(&self, cs: &[~str]) -> PosixPath {\n+    fn push_many<S: Str>(&self, cs: &[S]) -> PosixPath {\n         let mut v = copy self.components;\n         for cs.each |e| {\n-            for e.split_iter(windows::is_sep).advance |s| {\n+            for e.as_slice().split_iter(windows::is_sep).advance |s| {\n                 if !s.is_empty() {\n                     v.push(s.to_owned())\n                 }\n@@ -823,10 +823,10 @@ impl GenericPath for WindowsPath {\n         }\n     }\n \n-    fn push_many(&self, cs: &[~str]) -> WindowsPath {\n+    fn push_many<S: Str>(&self, cs: &[S]) -> WindowsPath {\n         let mut v = copy self.components;\n         for cs.each |e| {\n-            for e.split_iter(windows::is_sep).advance |s| {\n+            for e.as_slice().split_iter(windows::is_sep).advance |s| {\n                 if !s.is_empty() {\n                     v.push(s.to_owned())\n                 }"}, {"sha": "4400cb5de9833522788f52237b37fd03f548b1e1", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/641910dc1340b7786fd758282bac88639a58ddcd/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641910dc1340b7786fd758282bac88639a58ddcd/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=641910dc1340b7786fd758282bac88639a58ddcd", "patch": "@@ -64,7 +64,7 @@ pub use path::PosixPath;\n pub use path::WindowsPath;\n pub use ptr::RawPtr;\n pub use ascii::{Ascii, AsciiCast, OwnedAsciiCast, AsciiStr};\n-pub use str::{StrVector, StrSlice, OwnedStr, StrUtil, NullTerminatedStr};\n+pub use str::{Str, StrVector, StrSlice, OwnedStr, StrUtil, NullTerminatedStr};\n pub use from_str::{FromStr};\n pub use to_bytes::IterBytes;\n pub use to_str::{ToStr, ToStrConsume};"}, {"sha": "c928933f4a74ca10bedee563f259a17bd53bb2f9", "filename": "src/libstd/str.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/641910dc1340b7786fd758282bac88639a58ddcd/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641910dc1340b7786fd758282bac88639a58ddcd/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=641910dc1340b7786fd758282bac88639a58ddcd", "patch": "@@ -729,10 +729,22 @@ impl Ord for @str {\n }\n \n #[cfg(not(test))]\n-impl<'self> Equiv<~str> for &'self str {\n+impl<'self, S: Str> Equiv<S> for &'self str {\n     #[inline(always)]\n-    fn equiv(&self, other: &~str) -> bool { eq_slice(*self, *other) }\n+    fn equiv(&self, other: &S) -> bool { eq_slice(*self, other.as_slice()) }\n }\n+#[cfg(not(test))]\n+impl<'self, S: Str> Equiv<S> for @str {\n+    #[inline(always)]\n+    fn equiv(&self, other: &S) -> bool { eq_slice(*self, other.as_slice()) }\n+}\n+\n+#[cfg(not(test))]\n+impl<'self, S: Str> Equiv<S> for ~str {\n+    #[inline(always)]\n+    fn equiv(&self, other: &S) -> bool { eq_slice(*self, other.as_slice()) }\n+}\n+\n \n /*\n Section: Iterating through strings"}]}