{"sha": "4199a6c1ee42bb4b4f88fa3055ffd32bde99f673", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOTlhNmMxZWU0MmJiNGI0Zjg4ZmEzMDU1ZmZkMzJiZGU5OWY2NzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-05-10T16:35:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-10T16:35:24Z"}, "message": "Rollup merge of #50538 - michaelwoerister:atomic-cnums, r=Zoxc\n\n Make CrateNum allocation more thread-safe.\n\nThis PR makes sure that we can't have race conditions when assigning CrateNums. It's a slight improvement but a larger refactoring of the CrateStore/CrateLoader infrastructure would be good, I think.\n\nr? @Zoxc", "tree": {"sha": "4b6f4c34ca9e2b1dd90066a006251f0110165fa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b6f4c34ca9e2b1dd90066a006251f0110165fa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4199a6c1ee42bb4b4f88fa3055ffd32bde99f673", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa9HTMCRBK7hj4Ov3rIwAAdHIIABQ+FX0UzwMbY8554etVhhuY\nMO2S81z0hMx49RQYcEPVp07szWksIG7oixk/9lrZyrUyPndNjSJDE51JlxyW8sbx\nN2b2OXAuY8K6NoPaQCLhm8ztA4vZ2eDoNpl3BG8A6NWckeUP4d6qhWKcV+MvAOMp\n+nzA7HkdwEHpRhVZt3WKssM+oUMucyZUMjJOmdOAuWuS6TbarC5YgKOTxl5ex5fM\n1pz6gzzH7yBRkvLgv1XGUAih+p3R42iX/90THp9Mu/cD/KXGmdb22FHc+FB6kXyo\nk2HbwGHlhH2aABm+KFSsoyZbZ3vtscGnG0AJeFJW3N4W3tWuLekbFsigRCTZ+Os=\n=AD5G\n-----END PGP SIGNATURE-----\n", "payload": "tree 4b6f4c34ca9e2b1dd90066a006251f0110165fa1\nparent 296f9524f2a27458607529db3f785dc732d79136\nparent 4537025c7193b4f1412807ab15f723f51ff0b01e\nauthor Alex Crichton <alex@alexcrichton.com> 1525970124 -0500\ncommitter GitHub <noreply@github.com> 1525970124 -0500\n\nRollup merge of #50538 - michaelwoerister:atomic-cnums, r=Zoxc\n\n Make CrateNum allocation more thread-safe.\n\nThis PR makes sure that we can't have race conditions when assigning CrateNums. It's a slight improvement but a larger refactoring of the CrateStore/CrateLoader infrastructure would be good, I think.\n\nr? @Zoxc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4199a6c1ee42bb4b4f88fa3055ffd32bde99f673", "html_url": "https://github.com/rust-lang/rust/commit/4199a6c1ee42bb4b4f88fa3055ffd32bde99f673", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4199a6c1ee42bb4b4f88fa3055ffd32bde99f673/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "296f9524f2a27458607529db3f785dc732d79136", "url": "https://api.github.com/repos/rust-lang/rust/commits/296f9524f2a27458607529db3f785dc732d79136", "html_url": "https://github.com/rust-lang/rust/commit/296f9524f2a27458607529db3f785dc732d79136"}, {"sha": "4537025c7193b4f1412807ab15f723f51ff0b01e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4537025c7193b4f1412807ab15f723f51ff0b01e", "html_url": "https://github.com/rust-lang/rust/commit/4537025c7193b4f1412807ab15f723f51ff0b01e"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "87b3a2dc69ff91fc5f3bc4f5bb9b98ff7ecbb45d", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4199a6c1ee42bb4b4f88fa3055ffd32bde99f673/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4199a6c1ee42bb4b4f88fa3055ffd32bde99f673/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=4199a6c1ee42bb4b4f88fa3055ffd32bde99f673", "patch": "@@ -51,7 +51,6 @@ pub struct Library {\n pub struct CrateLoader<'a> {\n     pub sess: &'a Session,\n     cstore: &'a CStore,\n-    next_crate_num: CrateNum,\n     local_crate_name: Symbol,\n }\n \n@@ -102,7 +101,6 @@ impl<'a> CrateLoader<'a> {\n         CrateLoader {\n             sess,\n             cstore,\n-            next_crate_num: cstore.next_crate_num(),\n             local_crate_name: Symbol::intern(local_crate_name),\n         }\n     }\n@@ -198,8 +196,7 @@ impl<'a> CrateLoader<'a> {\n         self.verify_no_symbol_conflicts(span, &crate_root);\n \n         // Claim this crate number and cache it\n-        let cnum = self.next_crate_num;\n-        self.next_crate_num = CrateNum::from_u32(cnum.as_u32() + 1);\n+        let cnum = self.cstore.alloc_new_crate_num();\n \n         // Stash paths for top-most crate locally if necessary.\n         let crate_paths = if root.is_none() {"}, {"sha": "9bbce563b61dc15d145e32aea675d50f52f30581", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4199a6c1ee42bb4b4f88fa3055ffd32bde99f673/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4199a6c1ee42bb4b4f88fa3055ffd32bde99f673/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=4199a6c1ee42bb4b4f88fa3055ffd32bde99f673", "patch": "@@ -97,32 +97,34 @@ pub struct CStore {\n impl CStore {\n     pub fn new(metadata_loader: Box<MetadataLoader + Sync>) -> CStore {\n         CStore {\n-            metas: RwLock::new(IndexVec::new()),\n+            // We add an empty entry for LOCAL_CRATE (which maps to zero) in\n+            // order to make array indices in `metas` match with the\n+            // corresponding `CrateNum`. This first entry will always remain\n+            // `None`.\n+            metas: RwLock::new(IndexVec::from_elem_n(None, 1)),\n             extern_mod_crate_map: Lock::new(FxHashMap()),\n             metadata_loader,\n         }\n     }\n \n-    /// You cannot use this function to allocate a CrateNum in a thread-safe manner.\n-    /// It is currently only used in CrateLoader which is single-threaded code.\n-    pub fn next_crate_num(&self) -> CrateNum {\n-        CrateNum::new(self.metas.borrow().len() + 1)\n+    pub(super) fn alloc_new_crate_num(&self) -> CrateNum {\n+        let mut metas = self.metas.borrow_mut();\n+        let cnum = CrateNum::new(metas.len());\n+        metas.push(None);\n+        cnum\n     }\n \n-    pub fn get_crate_data(&self, cnum: CrateNum) -> Lrc<CrateMetadata> {\n+    pub(super) fn get_crate_data(&self, cnum: CrateNum) -> Lrc<CrateMetadata> {\n         self.metas.borrow()[cnum].clone().unwrap()\n     }\n \n-    pub fn set_crate_data(&self, cnum: CrateNum, data: Lrc<CrateMetadata>) {\n-        use rustc_data_structures::indexed_vec::Idx;\n-        let mut met = self.metas.borrow_mut();\n-        while met.len() <= cnum.index() {\n-            met.push(None);\n-        }\n-        met[cnum] = Some(data);\n+    pub(super) fn set_crate_data(&self, cnum: CrateNum, data: Lrc<CrateMetadata>) {\n+        let mut metas = self.metas.borrow_mut();\n+        assert!(metas[cnum].is_none(), \"Overwriting crate metadata entry\");\n+        metas[cnum] = Some(data);\n     }\n \n-    pub fn iter_crate_data<I>(&self, mut i: I)\n+    pub(super) fn iter_crate_data<I>(&self, mut i: I)\n         where I: FnMut(CrateNum, &Lrc<CrateMetadata>)\n     {\n         for (k, v) in self.metas.borrow().iter_enumerated() {\n@@ -132,14 +134,16 @@ impl CStore {\n         }\n     }\n \n-    pub fn crate_dependencies_in_rpo(&self, krate: CrateNum) -> Vec<CrateNum> {\n+    pub(super) fn crate_dependencies_in_rpo(&self, krate: CrateNum) -> Vec<CrateNum> {\n         let mut ordering = Vec::new();\n         self.push_dependencies_in_postorder(&mut ordering, krate);\n         ordering.reverse();\n         ordering\n     }\n \n-    pub fn push_dependencies_in_postorder(&self, ordering: &mut Vec<CrateNum>, krate: CrateNum) {\n+    pub(super) fn push_dependencies_in_postorder(&self,\n+                                                 ordering: &mut Vec<CrateNum>,\n+                                                 krate: CrateNum) {\n         if ordering.contains(&krate) {\n             return;\n         }\n@@ -154,7 +158,7 @@ impl CStore {\n         ordering.push(krate);\n     }\n \n-    pub fn do_postorder_cnums_untracked(&self) -> Vec<CrateNum> {\n+    pub(super) fn do_postorder_cnums_untracked(&self) -> Vec<CrateNum> {\n         let mut ordering = Vec::new();\n         for (num, v) in self.metas.borrow().iter_enumerated() {\n             if let &Some(_) = v {\n@@ -164,11 +168,11 @@ impl CStore {\n         return ordering\n     }\n \n-    pub fn add_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId, cnum: CrateNum) {\n+    pub(super) fn add_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId, cnum: CrateNum) {\n         self.extern_mod_crate_map.borrow_mut().insert(emod_id, cnum);\n     }\n \n-    pub fn do_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum> {\n+    pub(super) fn do_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum> {\n         self.extern_mod_crate_map.borrow().get(&emod_id).cloned()\n     }\n }"}]}