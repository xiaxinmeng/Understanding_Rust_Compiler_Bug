{"sha": "f7fab77102057b55202992c7e73d62d7123f6356", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZmFiNzcxMDIwNTdiNTUyMDI5OTJjN2U3M2Q2MmQ3MTIzZjYzNTY=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-01T20:41:01Z"}, "committer": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-04T03:41:49Z"}, "message": "Add testcase.", "tree": {"sha": "84198a27da9bae10b66a59ef147ceb94e9dd3e94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84198a27da9bae10b66a59ef147ceb94e9dd3e94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7fab77102057b55202992c7e73d62d7123f6356", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7fab77102057b55202992c7e73d62d7123f6356", "html_url": "https://github.com/rust-lang/rust/commit/f7fab77102057b55202992c7e73d62d7123f6356", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7fab77102057b55202992c7e73d62d7123f6356/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dcd12dc22eb891c726dbf5c1c4177d4e72874d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dcd12dc22eb891c726dbf5c1c4177d4e72874d8", "html_url": "https://github.com/rust-lang/rust/commit/6dcd12dc22eb891c726dbf5c1c4177d4e72874d8"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "247382b7f40156446e68bce3dff6723407354fee", "filename": "src/test/run-pass/qquote.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/f7fab77102057b55202992c7e73d62d7123f6356/src%2Ftest%2Frun-pass%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fab77102057b55202992c7e73d62d7123f6356/src%2Ftest%2Frun-pass%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fqquote.rs?ref=f7fab77102057b55202992c7e73d62d7123f6356", "patch": "@@ -0,0 +1,87 @@\n+// xfail-pretty\n+\n+use std;\n+use rustc;\n+\n+import rustc::*;\n+import std::io::*;\n+\n+import rustc::driver::diagnostic;\n+import rustc::syntax::ast;\n+import rustc::syntax::codemap;\n+import rustc::syntax::parse::parser;\n+import rustc::syntax::print::*;\n+\n+fn new_parse_sess() -> parser::parse_sess {\n+    let cm = codemap::new_codemap();\n+    let handler = diagnostic::mk_handler(option::none);\n+    let sess = @{\n+        cm: cm,\n+        mutable next_id: 1,\n+        span_diagnostic: diagnostic::mk_span_handler(handler, cm),\n+        mutable chpos: 0u,\n+        mutable byte_pos: 0u\n+    };\n+    ret sess;\n+}\n+\n+iface fake_ext_ctxt {\n+    fn session() -> fake_session;\n+}\n+\n+type fake_options = {cfg: ast::crate_cfg};\n+\n+type fake_session = {opts: @fake_options,\n+                     parse_sess: parser::parse_sess};\n+\n+impl of fake_ext_ctxt for fake_session {\n+    fn session() -> fake_session {self}\n+}\n+\n+fn mk_ctxt() -> fake_ext_ctxt {\n+    let opts : fake_options = {cfg: []};\n+    {opts: @opts, parse_sess: new_parse_sess()} as fake_ext_ctxt\n+}\n+\n+\n+fn main() {\n+    let ext_cx = mk_ctxt();\n+\n+    let abc = #ast{23};\n+    check_pp(abc,  pprust::print_expr, \"23\");\n+\n+    let expr = #ast{1 - $0 + 8};\n+    check_pp(expr,  pprust::print_expr, \"1 - $0 + 8\");\n+\n+    let expr2 = rustc::syntax::ext::qquote::replace(expr, [abc]);\n+    check_pp(expr2,  pprust::print_expr, \"1 - 23 + 8\");\n+\n+    let expr3 = #ast{2 - $(abc) + 7};\n+    check_pp(expr3,  pprust::print_expr, \"2 - 23 + 7\");\n+\n+    let expr4 = #ast{2 - $(#(3)) + 9};\n+    check_pp(expr4,  pprust::print_expr, \"2 - 3 + 9\");\n+\n+    let ty = #ast(ty){option<int>};\n+    check_pp(ty, pprust::print_type, \"option<int>\");\n+\n+    let item = #ast(item){const x : int = 10;};\n+    check_pp(item, pprust::print_item, \"const x: int = 10;\");\n+\n+    let stmt = #ast(stmt){let x = 20;};\n+    check_pp(*stmt, pprust::print_stmt, \"let x = 20;\");\n+\n+    let pat = #ast(pat){some(_)};\n+    check_pp(pat, pprust::print_pat, \"some(_)\");\n+}\n+\n+fn check_pp<T>(expr: T, f: fn(pprust::ps, T), expect: str) {\n+    let buf = mk_mem_buffer();\n+    let pp = pprust::rust_printer(buf as std::io::writer);\n+    f(pp, expr);\n+    pp::eof(pp.s);\n+    let str = mem_buffer_str(buf);\n+    stdout().write_line(str);\n+    if expect != \"\" {assert str == expect;}\n+}\n+"}]}