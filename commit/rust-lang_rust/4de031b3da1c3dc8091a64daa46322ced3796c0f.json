{"sha": "4de031b3da1c3dc8091a64daa46322ced3796c0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZTAzMWIzZGExYzNkYzgwOTFhNjRkYWE0NjMyMmNlZDM3OTZjMGY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-23T23:11:40Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-08T11:37:25Z"}, "message": "Move error reporting to its own module", "tree": {"sha": "9616745b224f7ead7175584142cbc5988c5d5c1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9616745b224f7ead7175584142cbc5988c5d5c1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4de031b3da1c3dc8091a64daa46322ced3796c0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4de031b3da1c3dc8091a64daa46322ced3796c0f", "html_url": "https://github.com/rust-lang/rust/commit/4de031b3da1c3dc8091a64daa46322ced3796c0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4de031b3da1c3dc8091a64daa46322ced3796c0f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2673ba99fd28abc8448159a51d288ec942e7a65e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2673ba99fd28abc8448159a51d288ec942e7a65e", "html_url": "https://github.com/rust-lang/rust/commit/2673ba99fd28abc8448159a51d288ec942e7a65e"}], "stats": {"total": 124, "additions": 64, "deletions": 60}, "files": [{"sha": "30be49ff770cde4876d61b4c44919d263228e58d", "filename": "src/diagnostics.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4de031b3da1c3dc8091a64daa46322ced3796c0f/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de031b3da1c3dc8091a64daa46322ced3796c0f/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=4de031b3da1c3dc8091a64daa46322ced3796c0f", "patch": "@@ -0,0 +1,62 @@\n+use rustc_mir::interpret::InterpErrorInfo;\n+\n+use crate::*;\n+\n+pub fn report_err<'tcx, 'mir>(\n+    ecx: &InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n+    mut e: InterpErrorInfo<'tcx>,\n+) -> Option<i64> {\n+    // Special treatment for some error kinds\n+    let msg = match e.kind {\n+        InterpError::MachineStop(ref info) => {\n+            let info = info.downcast_ref::<TerminationInfo>().expect(\"invalid MachineStop payload\");\n+            match info {\n+                TerminationInfo::Exit(code) => return Some(*code),\n+                TerminationInfo::PoppedTrackedPointerTag(item) =>\n+                    format!(\"popped tracked tag for item {:?}\", item),\n+                TerminationInfo::Abort => format!(\"the evaluated program aborted execution\"),\n+            }\n+        }\n+        err_unsup!(NoMirFor(..)) => format!(\n+            \"{}. Did you set `MIRI_SYSROOT` to a Miri-enabled sysroot? You can prepare one with `cargo miri setup`.\",\n+            e\n+        ),\n+        InterpError::InvalidProgram(_) => bug!(\"This error should be impossible in Miri: {}\", e),\n+        _ => e.to_string(),\n+    };\n+    e.print_backtrace();\n+    if let Some(frame) = ecx.stack().last() {\n+        let span = frame.current_source_info().unwrap().span;\n+\n+        let msg = format!(\"Miri evaluation error: {}\", msg);\n+        let mut err = ecx.tcx.sess.struct_span_err(span, msg.as_str());\n+        let frames = ecx.generate_stacktrace(None);\n+        err.span_label(span, msg);\n+        // We iterate with indices because we need to look at the next frame (the caller).\n+        for idx in 0..frames.len() {\n+            let frame_info = &frames[idx];\n+            let call_site_is_local = frames\n+                .get(idx + 1)\n+                .map_or(false, |caller_info| caller_info.instance.def_id().is_local());\n+            if call_site_is_local {\n+                err.span_note(frame_info.call_site, &frame_info.to_string());\n+            } else {\n+                err.note(&frame_info.to_string());\n+            }\n+        }\n+        err.emit();\n+    } else {\n+        ecx.tcx.sess.err(&msg);\n+    }\n+\n+    for (i, frame) in ecx.stack().iter().enumerate() {\n+        trace!(\"-------------------\");\n+        trace!(\"Frame {}\", i);\n+        trace!(\"    return: {:?}\", frame.return_place.map(|p| *p));\n+        for (i, local) in frame.locals.iter().enumerate() {\n+            trace!(\"    local {}: {:?}\", i, local.value);\n+        }\n+    }\n+    // Let the reported error determine the return code.\n+    return None;\n+}"}, {"sha": "e5dfbe32c12e07ba0760d068965870cd14c19843", "filename": "src/eval.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4de031b3da1c3dc8091a64daa46322ced3796c0f/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de031b3da1c3dc8091a64daa46322ced3796c0f/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=4de031b3da1c3dc8091a64daa46322ced3796c0f", "patch": "@@ -8,7 +8,6 @@ use rand::SeedableRng;\n use rustc_hir::def_id::DefId;\n use rustc::ty::layout::{LayoutOf, Size};\n use rustc::ty::{self, TyCtxt};\n-use rustc_mir::interpret::InterpErrorInfo;\n \n use crate::*;\n \n@@ -209,62 +208,3 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n         Err(e) => report_err(&ecx, e),\n     }\n }\n-\n-fn report_err<'tcx, 'mir>(\n-    ecx: &InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n-    mut e: InterpErrorInfo<'tcx>,\n-) -> Option<i64> {\n-    // Special treatment for some error kinds\n-    let msg = match e.kind {\n-        InterpError::MachineStop(ref info) => {\n-            let info = info.downcast_ref::<TerminationInfo>().expect(\"invalid MachineStop payload\");\n-            match info {\n-                TerminationInfo::Exit(code) => return Some(*code),\n-                TerminationInfo::PoppedTrackedPointerTag(item) =>\n-                    format!(\"popped tracked tag for item {:?}\", item),\n-                TerminationInfo::Abort => format!(\"the evaluated program aborted execution\"),\n-            }\n-        }\n-        err_unsup!(NoMirFor(..)) => format!(\n-            \"{}. Did you set `MIRI_SYSROOT` to a Miri-enabled sysroot? You can prepare one with `cargo miri setup`.\",\n-            e\n-        ),\n-        InterpError::InvalidProgram(_) => bug!(\"This error should be impossible in Miri: {}\", e),\n-        _ => e.to_string(),\n-    };\n-    e.print_backtrace();\n-    if let Some(frame) = ecx.stack().last() {\n-        let span = frame.current_source_info().unwrap().span;\n-\n-        let msg = format!(\"Miri evaluation error: {}\", msg);\n-        let mut err = ecx.tcx.sess.struct_span_err(span, msg.as_str());\n-        let frames = ecx.generate_stacktrace(None);\n-        err.span_label(span, msg);\n-        // We iterate with indices because we need to look at the next frame (the caller).\n-        for idx in 0..frames.len() {\n-            let frame_info = &frames[idx];\n-            let call_site_is_local = frames\n-                .get(idx + 1)\n-                .map_or(false, |caller_info| caller_info.instance.def_id().is_local());\n-            if call_site_is_local {\n-                err.span_note(frame_info.call_site, &frame_info.to_string());\n-            } else {\n-                err.note(&frame_info.to_string());\n-            }\n-        }\n-        err.emit();\n-    } else {\n-        ecx.tcx.sess.err(&msg);\n-    }\n-\n-    for (i, frame) in ecx.stack().iter().enumerate() {\n-        trace!(\"-------------------\");\n-        trace!(\"Frame {}\", i);\n-        trace!(\"    return: {:?}\", frame.return_place.map(|p| *p));\n-        for (i, local) in frame.locals.iter().enumerate() {\n-            trace!(\"    local {}: {:?}\", i, local.value);\n-        }\n-    }\n-    // Let the reported error determine the return code.\n-    return None;\n-}"}, {"sha": "b5925bb26c89781a3917bb7314383dc4ff6cfb2e", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4de031b3da1c3dc8091a64daa46322ced3796c0f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de031b3da1c3dc8091a64daa46322ced3796c0f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4de031b3da1c3dc8091a64daa46322ced3796c0f", "patch": "@@ -16,6 +16,7 @@ extern crate rustc_data_structures;\n extern crate rustc_mir;\n extern crate rustc_target;\n \n+mod diagnostics;\n mod eval;\n mod helpers;\n mod intptrcast;\n@@ -41,6 +42,7 @@ pub use crate::shims::time::EvalContextExt as TimeEvalContextExt;\n pub use crate::shims::tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n pub use crate::shims::EvalContextExt as ShimsEvalContextExt;\n \n+pub use crate::diagnostics::report_err;\n pub use crate::eval::{create_ecx, eval_main, MiriConfig, TerminationInfo};\n pub use crate::helpers::EvalContextExt as HelpersEvalContextExt;\n pub use crate::machine::{"}]}