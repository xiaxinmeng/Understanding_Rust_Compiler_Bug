{"sha": "b8be3162d734f3583b240977615f3e1bae6b364a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YmUzMTYyZDczNGYzNTgzYjI0MDk3NzYxNWYzZTFiYWU2YjM2NGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-22T17:34:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-22T17:34:55Z"}, "message": "Auto merge of #86045 - jsgf:fix-emit-path-hashing, r=bjorn3\n\nFix emit path hashing\n\nWith `--emit KIND=PATH`, the PATH should not affect hashes used for dependency tracking. It does not with other ways of specifying output paths (`-o` or `--out-dir`).\n\nAlso updates `rustc -Zls` to print more info about crates, which is used here to implement a `run-make` test.\n\nIt seems there was already a test explicitly checking that `OutputTypes` hash *is* affected by the path. I think this behaviour is wrong, so I updated the test.", "tree": {"sha": "2ec2e82248d3bd3ba7155285f6759bbe40feffdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ec2e82248d3bd3ba7155285f6759bbe40feffdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8be3162d734f3583b240977615f3e1bae6b364a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8be3162d734f3583b240977615f3e1bae6b364a", "html_url": "https://github.com/rust-lang/rust/commit/b8be3162d734f3583b240977615f3e1bae6b364a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8be3162d734f3583b240977615f3e1bae6b364a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80926fc409d671e7da13f08c90642b1e71f800d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/80926fc409d671e7da13f08c90642b1e71f800d9", "html_url": "https://github.com/rust-lang/rust/commit/80926fc409d671e7da13f08c90642b1e71f800d9"}, {"sha": "45146978e8d593d5ec713f54140407d64f620800", "url": "https://api.github.com/repos/rust-lang/rust/commits/45146978e8d593d5ec713f54140407d64f620800", "html_url": "https://github.com/rust-lang/rust/commit/45146978e8d593d5ec713f54140407d64f620800"}], "stats": {"total": 184, "additions": 151, "deletions": 33}, "files": [{"sha": "52b3076a443962007d7316d491e2aa73d555f83e", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b8be3162d734f3583b240977615f3e1bae6b364a/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8be3162d734f3583b240977615f3e1bae6b364a/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=b8be3162d734f3583b240977615f3e1bae6b364a", "patch": "@@ -96,6 +96,14 @@ fn assert_different_hash(x: &Options, y: &Options) {\n     assert_same_clone(y);\n }\n \n+fn assert_non_crate_hash_different(x: &Options, y: &Options) {\n+    assert_eq!(x.dep_tracking_hash(true), y.dep_tracking_hash(true));\n+    assert_ne!(x.dep_tracking_hash(false), y.dep_tracking_hash(false));\n+    // Check clone\n+    assert_same_clone(x);\n+    assert_same_clone(y);\n+}\n+\n // When the user supplies --test we should implicitly supply --cfg test\n #[test]\n fn test_switch_implies_cfg_test() {\n@@ -152,9 +160,9 @@ fn test_output_types_tracking_hash_different_paths() {\n     v2.output_types = OutputTypes::new(&[(OutputType::Exe, Some(PathBuf::from(\"/some/thing\")))]);\n     v3.output_types = OutputTypes::new(&[(OutputType::Exe, None)]);\n \n-    assert_different_hash(&v1, &v2);\n-    assert_different_hash(&v1, &v3);\n-    assert_different_hash(&v2, &v3);\n+    assert_non_crate_hash_different(&v1, &v2);\n+    assert_non_crate_hash_different(&v1, &v3);\n+    assert_non_crate_hash_different(&v2, &v3);\n }\n \n #[test]\n@@ -712,7 +720,6 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(mir_opt_level, Some(4));\n     tracked!(mutable_noalias, Some(true));\n     tracked!(new_llvm_pass_manager, Some(true));\n-    tracked!(no_codegen, true);\n     tracked!(no_generate_arange_section, true);\n     tracked!(no_link, true);\n     tracked!(osx_rpath_install_name, true);\n@@ -747,6 +754,16 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(use_ctors_section, Some(true));\n     tracked!(verify_llvm_ir, true);\n     tracked!(wasi_exec_model, Some(WasiExecModel::Reactor));\n+\n+    macro_rules! tracked_no_crate_hash {\n+        ($name: ident, $non_default_value: expr) => {\n+            opts = reference.clone();\n+            assert_ne!(opts.debugging_opts.$name, $non_default_value);\n+            opts.debugging_opts.$name = $non_default_value;\n+            assert_non_crate_hash_different(&reference, &opts);\n+        };\n+    }\n+    tracked_no_crate_hash!(no_codegen, true);\n }\n \n #[test]"}, {"sha": "45972c0a0cd024bc8473769c194c9a40636d7eeb", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b8be3162d734f3583b240977615f3e1bae6b364a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8be3162d734f3583b240977615f3e1bae6b364a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=b8be3162d734f3583b240977615f3e1bae6b364a", "patch": "@@ -601,10 +601,23 @@ impl MetadataBlob {\n     }\n \n     crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {\n-        write!(out, \"=External Dependencies=\\n\")?;\n         let root = self.get_root();\n+        writeln!(out, \"Crate info:\")?;\n+        writeln!(out, \"name {}{}\", root.name, root.extra_filename)?;\n+        writeln!(out, \"hash {} stable_crate_id {:?}\", root.hash, root.stable_crate_id)?;\n+        writeln!(out, \"proc_macro {:?}\", root.proc_macro_data.is_some())?;\n+        writeln!(out, \"=External Dependencies=\")?;\n         for (i, dep) in root.crate_deps.decode(self).enumerate() {\n-            write!(out, \"{} {}{}\\n\", i + 1, dep.name, dep.extra_filename)?;\n+            writeln!(\n+                out,\n+                \"{} {}{} hash {} host_hash {:?} kind {:?}\",\n+                i + 1,\n+                dep.name,\n+                dep.extra_filename,\n+                dep.hash,\n+                dep.host_hash,\n+                dep.kind\n+            )?;\n         }\n         write!(out, \"\\n\")?;\n         Ok(())"}, {"sha": "88eaa7fe329246a857dec29b79639bb4811acf0c", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 64, "deletions": 21, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/b8be3162d734f3583b240977615f3e1bae6b364a/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8be3162d734f3583b240977615f3e1bae6b364a/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=b8be3162d734f3583b240977615f3e1bae6b364a", "patch": "@@ -31,6 +31,7 @@ use std::collections::btree_map::{\n };\n use std::collections::{BTreeMap, BTreeSet};\n use std::fmt;\n+use std::hash::Hash;\n use std::iter::{self, FromIterator};\n use std::path::{Path, PathBuf};\n use std::str::{self, FromStr};\n@@ -325,12 +326,11 @@ impl Default for TrimmedDefPaths {\n \n /// Use tree-based collections to cheaply get a deterministic `Hash` implementation.\n /// *Do not* switch `BTreeMap` out for an unsorted container type! That would break\n-/// dependency tracking for command-line arguments.\n-#[derive(Clone, Hash, Debug)]\n+/// dependency tracking for command-line arguments. Also only hash keys, since tracking\n+/// should only depend on the output types, not the paths they're written to.\n+#[derive(Clone, Debug, Hash)]\n pub struct OutputTypes(BTreeMap<OutputType, Option<PathBuf>>);\n \n-impl_stable_hash_via_hash!(OutputTypes);\n-\n impl OutputTypes {\n     pub fn new(entries: &[(OutputType, Option<PathBuf>)]) -> OutputTypes {\n         OutputTypes(BTreeMap::from_iter(entries.iter().map(|&(k, ref v)| (k, v.clone()))))\n@@ -2426,8 +2426,8 @@ crate mod dep_tracking {\n     use super::LdImpl;\n     use super::{\n         CFGuard, CrateType, DebugInfo, ErrorOutputType, InstrumentCoverage, LinkerPluginLto,\n-        LtoCli, OptLevel, OutputTypes, Passes, SourceFileHashAlgorithm, SwitchWithOptPath,\n-        SymbolManglingVersion, TrimmedDefPaths,\n+        LtoCli, OptLevel, OutputType, OutputTypes, Passes, SourceFileHashAlgorithm,\n+        SwitchWithOptPath, SymbolManglingVersion, TrimmedDefPaths,\n     };\n     use crate::lint;\n     use crate::options::WasiExecModel;\n@@ -2443,25 +2443,35 @@ crate mod dep_tracking {\n     use std::path::PathBuf;\n \n     pub trait DepTrackingHash {\n-        fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType);\n+        fn hash(\n+            &self,\n+            hasher: &mut DefaultHasher,\n+            error_format: ErrorOutputType,\n+            for_crate_hash: bool,\n+        );\n     }\n \n     macro_rules! impl_dep_tracking_hash_via_hash {\n         ($($t:ty),+ $(,)?) => {$(\n             impl DepTrackingHash for $t {\n-                fn hash(&self, hasher: &mut DefaultHasher, _: ErrorOutputType) {\n+                fn hash(&self, hasher: &mut DefaultHasher, _: ErrorOutputType, _for_crate_hash: bool) {\n                     Hash::hash(self, hasher);\n                 }\n             }\n         )+};\n     }\n \n     impl<T: DepTrackingHash> DepTrackingHash for Option<T> {\n-        fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n+        fn hash(\n+            &self,\n+            hasher: &mut DefaultHasher,\n+            error_format: ErrorOutputType,\n+            for_crate_hash: bool,\n+        ) {\n             match self {\n                 Some(x) => {\n                     Hash::hash(&1, hasher);\n-                    DepTrackingHash::hash(x, hasher, error_format);\n+                    DepTrackingHash::hash(x, hasher, error_format, for_crate_hash);\n                 }\n                 None => Hash::hash(&0, hasher),\n             }\n@@ -2491,7 +2501,6 @@ crate mod dep_tracking {\n         LtoCli,\n         DebugInfo,\n         UnstableFeatures,\n-        OutputTypes,\n         NativeLib,\n         NativeLibKind,\n         SanitizerSet,\n@@ -2505,18 +2514,24 @@ crate mod dep_tracking {\n         SourceFileHashAlgorithm,\n         TrimmedDefPaths,\n         Option<LdImpl>,\n+        OutputType,\n     );\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)\n     where\n         T1: DepTrackingHash,\n         T2: DepTrackingHash,\n     {\n-        fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n+        fn hash(\n+            &self,\n+            hasher: &mut DefaultHasher,\n+            error_format: ErrorOutputType,\n+            for_crate_hash: bool,\n+        ) {\n             Hash::hash(&0, hasher);\n-            DepTrackingHash::hash(&self.0, hasher, error_format);\n+            DepTrackingHash::hash(&self.0, hasher, error_format, for_crate_hash);\n             Hash::hash(&1, hasher);\n-            DepTrackingHash::hash(&self.1, hasher, error_format);\n+            DepTrackingHash::hash(&self.1, hasher, error_format, for_crate_hash);\n         }\n     }\n \n@@ -2526,22 +2541,49 @@ crate mod dep_tracking {\n         T2: DepTrackingHash,\n         T3: DepTrackingHash,\n     {\n-        fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n+        fn hash(\n+            &self,\n+            hasher: &mut DefaultHasher,\n+            error_format: ErrorOutputType,\n+            for_crate_hash: bool,\n+        ) {\n             Hash::hash(&0, hasher);\n-            DepTrackingHash::hash(&self.0, hasher, error_format);\n+            DepTrackingHash::hash(&self.0, hasher, error_format, for_crate_hash);\n             Hash::hash(&1, hasher);\n-            DepTrackingHash::hash(&self.1, hasher, error_format);\n+            DepTrackingHash::hash(&self.1, hasher, error_format, for_crate_hash);\n             Hash::hash(&2, hasher);\n-            DepTrackingHash::hash(&self.2, hasher, error_format);\n+            DepTrackingHash::hash(&self.2, hasher, error_format, for_crate_hash);\n         }\n     }\n \n     impl<T: DepTrackingHash> DepTrackingHash for Vec<T> {\n-        fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n+        fn hash(\n+            &self,\n+            hasher: &mut DefaultHasher,\n+            error_format: ErrorOutputType,\n+            for_crate_hash: bool,\n+        ) {\n             Hash::hash(&self.len(), hasher);\n             for (index, elem) in self.iter().enumerate() {\n                 Hash::hash(&index, hasher);\n-                DepTrackingHash::hash(elem, hasher, error_format);\n+                DepTrackingHash::hash(elem, hasher, error_format, for_crate_hash);\n+            }\n+        }\n+    }\n+\n+    impl DepTrackingHash for OutputTypes {\n+        fn hash(\n+            &self,\n+            hasher: &mut DefaultHasher,\n+            error_format: ErrorOutputType,\n+            for_crate_hash: bool,\n+        ) {\n+            Hash::hash(&self.0.len(), hasher);\n+            for (key, val) in &self.0 {\n+                DepTrackingHash::hash(key, hasher, error_format, for_crate_hash);\n+                if !for_crate_hash {\n+                    DepTrackingHash::hash(val, hasher, error_format, for_crate_hash);\n+                }\n             }\n         }\n     }\n@@ -2551,13 +2593,14 @@ crate mod dep_tracking {\n         sub_hashes: BTreeMap<&'static str, &dyn DepTrackingHash>,\n         hasher: &mut DefaultHasher,\n         error_format: ErrorOutputType,\n+        for_crate_hash: bool,\n     ) {\n         for (key, sub_hash) in sub_hashes {\n             // Using Hash::hash() instead of DepTrackingHash::hash() is fine for\n             // the keys, as they are just plain strings\n             Hash::hash(&key.len(), hasher);\n             Hash::hash(key, hasher);\n-            sub_hash.hash(hasher, error_format);\n+            sub_hash.hash(hasher, error_format, for_crate_hash);\n         }\n     }\n }"}, {"sha": "f5dd8992c29f98c9b884b8df6a9c204ec4fb2c52", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b8be3162d734f3583b240977615f3e1bae6b364a/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8be3162d734f3583b240977615f3e1bae6b364a/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=b8be3162d734f3583b240977615f3e1bae6b364a", "patch": "@@ -48,7 +48,11 @@ macro_rules! hash_substruct {\n     ($opt_name:ident, $opt_expr:expr, $error_format:expr, $for_crate_hash:expr, $hasher:expr, [TRACKED_NO_CRATE_HASH]) => {{}};\n     ($opt_name:ident, $opt_expr:expr, $error_format:expr, $for_crate_hash:expr, $hasher:expr, [SUBSTRUCT]) => {\n         use crate::config::dep_tracking::DepTrackingHash;\n-        $opt_expr.dep_tracking_hash($for_crate_hash, $error_format).hash($hasher, $error_format);\n+        $opt_expr.dep_tracking_hash($for_crate_hash, $error_format).hash(\n+            $hasher,\n+            $error_format,\n+            $for_crate_hash,\n+        );\n     };\n }\n \n@@ -79,7 +83,8 @@ macro_rules! top_level_options {\n                 let mut hasher = DefaultHasher::new();\n                 dep_tracking::stable_hash(sub_hashes,\n                                           &mut hasher,\n-                                          self.error_format);\n+                                          self.error_format,\n+                                          for_crate_hash);\n                 $({\n                     hash_substruct!($opt,\n                         &self.$opt,\n@@ -236,19 +241,21 @@ macro_rules! options {\n             build_options(matches, $stat, $prefix, $outputname, error_format)\n         }\n \n-        fn dep_tracking_hash(&self, _for_crate_hash: bool, error_format: ErrorOutputType) -> u64 {\n+        fn dep_tracking_hash(&self, for_crate_hash: bool, error_format: ErrorOutputType) -> u64 {\n             let mut sub_hashes = BTreeMap::new();\n             $({\n                 hash_opt!($opt,\n                             &self.$opt,\n                             &mut sub_hashes,\n-                            _for_crate_hash,\n+                            for_crate_hash,\n                             [$dep_tracking_marker]);\n             })*\n             let mut hasher = DefaultHasher::new();\n             dep_tracking::stable_hash(sub_hashes,\n                                         &mut hasher,\n-                                        error_format);\n+                                        error_format,\n+                                        for_crate_hash\n+                                        );\n             hasher.finish()\n         }\n     }\n@@ -1148,7 +1155,7 @@ options! {\n         \"the directory the NLL facts are dumped into (default: `nll-facts`)\"),\n     no_analysis: bool = (false, parse_no_flag, [UNTRACKED],\n         \"parse and expand the source, but run no analysis\"),\n-    no_codegen: bool = (false, parse_no_flag, [TRACKED],\n+    no_codegen: bool = (false, parse_no_flag, [TRACKED_NO_CRATE_HASH],\n         \"run all passes except codegen; no output\"),\n     no_generate_arange_section: bool = (false, parse_no_flag, [TRACKED],\n         \"omit DWARF address ranges that give faster lookups\"),"}, {"sha": "b6b2d8af6480023d6732d2d5b4583162f6cc949b", "filename": "src/test/run-make/emit-path-unhashed/Makefile", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b8be3162d734f3583b240977615f3e1bae6b364a/src%2Ftest%2Frun-make%2Femit-path-unhashed%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b8be3162d734f3583b240977615f3e1bae6b364a/src%2Ftest%2Frun-make%2Femit-path-unhashed%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit-path-unhashed%2FMakefile?ref=b8be3162d734f3583b240977615f3e1bae6b364a", "patch": "@@ -0,0 +1,37 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+OUT=$(TMPDIR)/emit\n+\n+# --emit KIND=PATH should not affect crate hash vs --emit KIND\n+all: $(OUT)/a/libfoo.rlib $(OUT)/b/libfoo.rlib $(OUT)/c/libfoo.rlib \\\n+\t\t$(TMPDIR)/libfoo.rlib\n+\t$(RUSTC) -Zls $(TMPDIR)/libfoo.rlib > $(TMPDIR)/base.txt\n+\t$(RUSTC) -Zls $(OUT)/a/libfoo.rlib > $(TMPDIR)/a.txt\n+\t$(RUSTC) -Zls $(OUT)/b/libfoo.rlib > $(TMPDIR)/b.txt\n+\t$(RUSTC) -Zls $(OUT)/c/libfoo.rlib > $(TMPDIR)/c.txt\n+\n+\tdiff $(TMPDIR)/base.txt $(TMPDIR)/a.txt\n+\tdiff $(TMPDIR)/base.txt $(TMPDIR)/b.txt\n+\n+\t# Different KIND parameters do affect hash.\n+\t# diff exits 1 on difference, 2 on trouble\n+\tdiff $(TMPDIR)/base.txt $(TMPDIR)/c.txt ; test \"$$?\" -eq 1\n+\n+# Default output name\n+$(TMPDIR)/libfoo.rlib: foo.rs\n+\t$(RUSTC) --emit link foo.rs\n+\n+# Output named with -o\n+$(OUT)/a/libfoo.rlib: foo.rs\n+\tmkdir -p $(OUT)/a\n+\t$(RUSTC) --emit link -o $@ foo.rs\n+\n+# Output named with KIND=PATH\n+$(OUT)/b/libfoo.rlib: foo.rs\n+\tmkdir -p $(OUT)/b\n+\t$(RUSTC) --emit link=$@ foo.rs\n+\n+# Output multiple kinds\n+$(OUT)/c/libfoo.rlib: foo.rs\n+\tmkdir -p $(OUT)/c\n+\t$(RUSTC) --emit link=$@,metadata foo.rs"}, {"sha": "c1bfaa6cab5d9be9e67e4cfacc8eb4e6110f6358", "filename": "src/test/run-make/emit-path-unhashed/foo.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8be3162d734f3583b240977615f3e1bae6b364a/src%2Ftest%2Frun-make%2Femit-path-unhashed%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8be3162d734f3583b240977615f3e1bae6b364a/src%2Ftest%2Frun-make%2Femit-path-unhashed%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit-path-unhashed%2Ffoo.rs?ref=b8be3162d734f3583b240977615f3e1bae6b364a", "patch": "@@ -0,0 +1 @@\n+#![crate_type = \"rlib\"]"}]}