{"sha": "7ec00cd135a235d9c615bd862cd78b3c64c8ceda", "node_id": "C_kwDOAAsO6NoAKDdlYzAwY2QxMzVhMjM1ZDljNjE1YmQ4NjJjZDc4YjNjNjRjOGNlZGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-14T09:21:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-14T09:21:02Z"}, "message": "Rollup merge of #91529 - TennyZhuang:try_reserve_binary_heap, r=yaahc\n\nadd BinaryHeap::try_reserve and BinaryHeap::try_reserve_exact\n\n`try_reserve` of many collections were stablized in https://github.com/rust-lang/rust/pull/87993 in 1.57.0. Add `try_reserve` for the rest collections such as `BinaryHeap` should be not controversial.", "tree": {"sha": "48a16eaa3c40e501073c74deb28f7e8aae2621d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48a16eaa3c40e501073c74deb28f7e8aae2621d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ec00cd135a235d9c615bd862cd78b3c64c8ceda", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhuGH+CRBK7hj4Ov3rIwAA7XQIAELfpM6AtlcoyKHkWlq73FKW\nDeplh/aQYuDiHqnOYqjIUzd7vqjQiM06a5ToWyxgEsRGoAlj99op98T3pYjEDbEg\nUE9pE6ANNQPIBg2Gkbfi7ViOixUuGFZdWmvvPEdxrwt+Kdc2S2FW8nB43GqCSsUD\nXF3bzxMIgA9TRIFkIiHLdXX23do6XRBFa3ytEJSjbYoAVFKGyqPOGCqCrhwNsH2P\nLTQ2uOMCnd0meuKd2AJMpUD1fwWC87YurD3fMghUKD2jhUz6w3sBAFHl+6FYrC6Y\n46T1bMprJ+8XSKeYmcw2CI0M7oITiCgX8ZUiUV7QlvS6B8aiLEqKMwZdiaY1nN4=\n=U5bi\n-----END PGP SIGNATURE-----\n", "payload": "tree 48a16eaa3c40e501073c74deb28f7e8aae2621d1\nparent 7ca74ea0afe87b2cb173ea1fea190853c3c3d860\nparent 2235af1a689f739843b3728d6e958d057554be09\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639473662 +0100\ncommitter GitHub <noreply@github.com> 1639473662 +0100\n\nRollup merge of #91529 - TennyZhuang:try_reserve_binary_heap, r=yaahc\n\nadd BinaryHeap::try_reserve and BinaryHeap::try_reserve_exact\n\n`try_reserve` of many collections were stablized in https://github.com/rust-lang/rust/pull/87993 in 1.57.0. Add `try_reserve` for the rest collections such as `BinaryHeap` should be not controversial.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec00cd135a235d9c615bd862cd78b3c64c8ceda", "html_url": "https://github.com/rust-lang/rust/commit/7ec00cd135a235d9c615bd862cd78b3c64c8ceda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ec00cd135a235d9c615bd862cd78b3c64c8ceda/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ca74ea0afe87b2cb173ea1fea190853c3c3d860", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca74ea0afe87b2cb173ea1fea190853c3c3d860", "html_url": "https://github.com/rust-lang/rust/commit/7ca74ea0afe87b2cb173ea1fea190853c3c3d860"}, {"sha": "2235af1a689f739843b3728d6e958d057554be09", "url": "https://api.github.com/repos/rust-lang/rust/commits/2235af1a689f739843b3728d6e958d057554be09", "html_url": "https://github.com/rust-lang/rust/commit/2235af1a689f739843b3728d6e958d057554be09"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "6fc6002d551be633b48d8f2401531c09ef1efe3c", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/7ec00cd135a235d9c615bd862cd78b3c64c8ceda/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ec00cd135a235d9c615bd862cd78b3c64c8ceda/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=7ec00cd135a235d9c615bd862cd78b3c64c8ceda", "patch": "@@ -149,6 +149,7 @@ use core::mem::{self, swap, ManuallyDrop};\n use core::ops::{Deref, DerefMut};\n use core::ptr;\n \n+use crate::collections::TryReserveError;\n use crate::slice;\n use crate::vec::{self, AsIntoIter, Vec};\n \n@@ -953,6 +954,84 @@ impl<T> BinaryHeap<T> {\n         self.data.reserve(additional);\n     }\n \n+    /// Tries to reserve the minimum capacity for exactly `additional`\n+    /// elements to be inserted in the given `BinaryHeap<T>`. After calling\n+    /// `try_reserve_exact`, capacity will be greater than or equal to\n+    /// `self.len() + additional` if it returns `Ok(())`.\n+    /// Does nothing if the capacity is already sufficient.\n+    ///\n+    /// Note that the allocator may give the collection more space than it\n+    /// requests. Therefore, capacity can not be relied upon to be precisely\n+    /// minimal. Prefer [`try_reserve`] if future insertions are expected.\n+    ///\n+    /// [`try_reserve`]: BinaryHeap::try_reserve\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(try_reserve_2)]\n+    /// use std::collections::BinaryHeap;\n+    /// use std::collections::TryReserveError;\n+    ///\n+    /// fn find_max_slow(data: &[u32]) -> Result<Option<u32>, TryReserveError> {\n+    ///     let mut heap = BinaryHeap::new();\n+    ///\n+    ///     // Pre-reserve the memory, exiting if we can't\n+    ///     heap.try_reserve_exact(data.len())?;\n+    ///\n+    ///     // Now we know this can't OOM in the middle of our complex work\n+    ///     heap.extend(data.iter());\n+    ///\n+    ///     Ok(heap.pop())\n+    /// }\n+    /// # find_max_slow(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n+    /// ```\n+    #[unstable(feature = \"try_reserve_2\", issue = \"91789\")]\n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.data.try_reserve_exact(additional)\n+    }\n+\n+    /// Tries to reserve capacity for at least `additional` more elements to be inserted\n+    /// in the given `BinaryHeap<T>`. The collection may reserve more space to avoid\n+    /// frequent reallocations. After calling `try_reserve`, capacity will be\n+    /// greater than or equal to `self.len() + additional`. Does nothing if\n+    /// capacity is already sufficient.\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(try_reserve_2)]\n+    /// use std::collections::BinaryHeap;\n+    /// use std::collections::TryReserveError;\n+    ///\n+    /// fn find_max_slow(data: &[u32]) -> Result<Option<u32>, TryReserveError> {\n+    ///     let mut heap = BinaryHeap::new();\n+    ///\n+    ///     // Pre-reserve the memory, exiting if we can't\n+    ///     heap.try_reserve(data.len())?;\n+    ///\n+    ///     // Now we know this can't OOM in the middle of our complex work\n+    ///     heap.extend(data.iter());\n+    ///\n+    ///     Ok(heap.pop())\n+    /// }\n+    /// # find_max_slow(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n+    /// ```\n+    #[unstable(feature = \"try_reserve_2\", issue = \"91789\")]\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.data.try_reserve(additional)\n+    }\n+\n     /// Discards as much additional capacity as possible.\n     ///\n     /// # Examples"}]}