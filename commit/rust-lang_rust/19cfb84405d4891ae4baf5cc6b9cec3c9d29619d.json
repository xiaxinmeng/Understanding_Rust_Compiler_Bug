{"sha": "19cfb84405d4891ae4baf5cc6b9cec3c9d29619d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5Y2ZiODQ0MDVkNDg5MWFlNGJhZjVjYzZiOWNlYzNjOWQyOTYxOWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-05-11T06:36:49Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-05-11T06:43:58Z"}, "message": "Start handling desugarings in author lint", "tree": {"sha": "a618fe591066924cdc16ae2483a4b15b59a45bf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a618fe591066924cdc16ae2483a4b15b59a45bf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19cfb84405d4891ae4baf5cc6b9cec3c9d29619d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19cfb84405d4891ae4baf5cc6b9cec3c9d29619d", "html_url": "https://github.com/rust-lang/rust/commit/19cfb84405d4891ae4baf5cc6b9cec3c9d29619d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19cfb84405d4891ae4baf5cc6b9cec3c9d29619d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "049918420150fb42a7b774c1f4680ee7ab7f7627", "url": "https://api.github.com/repos/rust-lang/rust/commits/049918420150fb42a7b774c1f4680ee7ab7f7627", "html_url": "https://github.com/rust-lang/rust/commit/049918420150fb42a7b774c1f4680ee7ab7f7627"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "5b88494ae7b7186685e1572fd4902ca702582cbc", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/19cfb84405d4891ae4baf5cc6b9cec3c9d29619d/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cfb84405d4891ae4baf5cc6b9cec3c9d29619d/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=19cfb84405d4891ae4baf5cc6b9cec3c9d29619d", "patch": "@@ -1,7 +1,7 @@\n //! A group of attributes that can be attached to Rust code in order\n //! to generate a clippy lint detecting said code automatically.\n \n-use crate::utils::get_attr;\n+use crate::utils::{get_attr, higher};\n use rustc::hir;\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc::hir::{BindingAnnotation, Expr, ExprKind, Pat, PatKind, QPath, Stmt, StmtKind, TyKind};\n@@ -187,6 +187,32 @@ struct PrintVisitor {\n impl<'tcx> Visitor<'tcx> for PrintVisitor {\n     #[allow(clippy::too_many_lines)]\n     fn visit_expr(&mut self, expr: &Expr) {\n+        // handle if desugarings\n+        // TODO add more desugarings here\n+        if let Some((cond, then, opt_else)) = higher::if_block(&expr) {\n+            let cond_pat = self.next(\"cond\");\n+            let then_pat = self.next(\"then\");\n+            if let Some(else_) = opt_else {\n+                let else_pat = self.next(\"else_\");\n+                println!(\n+                    \"    if let Some((ref {}, ref {}, Some({}))) = higher::if_block(&{});\",\n+                    cond_pat, then_pat, else_pat, self.current\n+                );\n+                self.current = else_pat;\n+                self.visit_expr(else_);\n+            } else {\n+                println!(\n+                    \"    if let Some((ref {}, ref {}, None)) = higher::if_block(&{});\",\n+                    cond_pat, then_pat, self.current\n+                );\n+            }\n+            self.current = cond_pat;\n+            self.visit_expr(cond);\n+            self.current = then_pat;\n+            self.visit_expr(then);\n+            return;\n+        }\n+\n         print!(\"    if let ExprKind::\");\n         let current = format!(\"{}.node\", self.current);\n         match expr.node {"}, {"sha": "2e9cb1466d0b5616a85770274cff4b602e7b687d", "filename": "tests/ui/author/if.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19cfb84405d4891ae4baf5cc6b9cec3c9d29619d/tests%2Fui%2Fauthor%2Fif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19cfb84405d4891ae4baf5cc6b9cec3c9d29619d/tests%2Fui%2Fauthor%2Fif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fif.rs?ref=19cfb84405d4891ae4baf5cc6b9cec3c9d29619d", "patch": "@@ -0,0 +1,10 @@\n+#[allow(clippy::all)]\n+\n+fn main() {\n+    #[clippy::author]\n+    let _ = if true {\n+        1 == 1;\n+    } else {\n+        2 == 2;\n+    };\n+}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/author/if.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/19cfb84405d4891ae4baf5cc6b9cec3c9d29619d/tests%2Fui%2Fauthor%2Fif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19cfb84405d4891ae4baf5cc6b9cec3c9d29619d/tests%2Fui%2Fauthor%2Fif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fif.stderr?ref=19cfb84405d4891ae4baf5cc6b9cec3c9d29619d"}, {"sha": "bff6546a9314bf28c3e24203525f55a7ff1f6663", "filename": "tests/ui/author/if.stdout", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/19cfb84405d4891ae4baf5cc6b9cec3c9d29619d/tests%2Fui%2Fauthor%2Fif.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/19cfb84405d4891ae4baf5cc6b9cec3c9d29619d/tests%2Fui%2Fauthor%2Fif.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fif.stdout?ref=19cfb84405d4891ae4baf5cc6b9cec3c9d29619d", "patch": "@@ -0,0 +1,27 @@\n+if_chain! {\n+    if let StmtKind::Local(ref local) = stmt.node;\n+    if let Some(ref init) = local.init;\n+    if let Some((ref cond, ref then, Some(else_))) = higher::if_block(&init);\n+    if let ExprKind::Block(ref block) = else_.node;\n+    if let StmtKind::Semi(ref e, _) = block.node\n+    if let ExprKind::Binary(ref op, ref left, ref right) = e.node;\n+    if BinOpKind::Eq == op.node;\n+    if let ExprKind::Lit(ref lit) = left.node;\n+    if let LitKind::Int(2, _) = lit.node;\n+    if let ExprKind::Lit(ref lit1) = right.node;\n+    if let LitKind::Int(2, _) = lit1.node;\n+    if let ExprKind::Lit(ref lit2) = cond.node;\n+    if let LitKind::Bool(true) = lit2.node;\n+    if let ExprKind::Block(ref block1) = then.node;\n+    if let StmtKind::Semi(ref e1, _) = block1.node\n+    if let ExprKind::Binary(ref op1, ref left1, ref right1) = e1.node;\n+    if BinOpKind::Eq == op1.node;\n+    if let ExprKind::Lit(ref lit3) = left1.node;\n+    if let LitKind::Int(1, _) = lit3.node;\n+    if let ExprKind::Lit(ref lit4) = right1.node;\n+    if let LitKind::Int(1, _) = lit4.node;\n+    if let PatKind::Wild = local.pat.node;\n+    then {\n+        // report your lint here\n+    }\n+}"}]}