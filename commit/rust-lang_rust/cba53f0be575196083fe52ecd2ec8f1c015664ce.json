{"sha": "cba53f0be575196083fe52ecd2ec8f1c015664ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYTUzZjBiZTU3NTE5NjA4M2ZlNTJlY2QyZWM4ZjFjMDE1NjY0Y2U=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-08-13T16:53:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-09-23T10:54:53Z"}, "message": "Allow writing metadata without llvm", "tree": {"sha": "c2665c13bb9beb693ad0702801d3f22ba5fad069", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2665c13bb9beb693ad0702801d3f22ba5fad069"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cba53f0be575196083fe52ecd2ec8f1c015664ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cba53f0be575196083fe52ecd2ec8f1c015664ce", "html_url": "https://github.com/rust-lang/rust/commit/cba53f0be575196083fe52ecd2ec8f1c015664ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cba53f0be575196083fe52ecd2ec8f1c015664ce/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6a7dac5cf929b04deac235e511073b2e9640433", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6a7dac5cf929b04deac235e511073b2e9640433", "html_url": "https://github.com/rust-lang/rust/commit/a6a7dac5cf929b04deac235e511073b2e9640433"}], "stats": {"total": 109, "additions": 95, "deletions": 14}, "files": [{"sha": "309fbd95345a451fd9bcf6e04d65180ecf8229f4", "filename": ".gitignore", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cba53f0be575196083fe52ecd2ec8f1c015664ce/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/cba53f0be575196083fe52ecd2ec8f1c015664ce/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=cba53f0be575196083fe52ecd2ec8f1c015664ce", "patch": "@@ -103,3 +103,6 @@ version.texi\n .cargo\n !src/vendor/**\n /src/target/\n+\n+no_llvm_build\n+"}, {"sha": "9481032985477ab522e2c98af2e1175d0792c302", "filename": "src/Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=cba53f0be575196083fe52ecd2ec8f1c015664ce", "patch": "@@ -1778,7 +1778,9 @@ dependencies = [\n name = \"rustc_trans_utils\"\n version = \"0.0.0\"\n dependencies = [\n+ \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n+ \"rustc_incremental 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]"}, {"sha": "2e368ddf43f38e1a915386c55773d276f5f8611d", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=cba53f0be575196083fe52ecd2ec8f1c015664ce", "patch": "@@ -104,7 +104,11 @@ impl Step for Std {\n \n         let out_dir = build.cargo_out(compiler, Mode::Libstd, target);\n         build.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n-        let mut cargo = builder.cargo(compiler, Mode::Libstd, target, \"build\");\n+        let mut cargo = if compiler.stage == 0 {\n+            builder.cargo(compiler, Mode::Libstd, target, \"build\")\n+        }else{\n+            builder.cargo(compiler, Mode::Libstd, target, \"check\")\n+        };\n         std_cargo(build, &compiler, target, &mut cargo);\n         run_cargo(build,\n                 &mut cargo,\n@@ -161,6 +165,7 @@ pub fn std_cargo(build: &Build,\n         // missing\n         // We also only build the runtimes when --enable-sanitizers (or its\n         // config.toml equivalent) is used\n+        //cargo.env(\"RUST_FLAGS\", \"-Zno-trans\");\n         cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n     }\n "}, {"sha": "1520fc7def83936e5d663526ba4371f7cfd82725", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=cba53f0be575196083fe52ecd2ec8f1c015664ce", "patch": "@@ -77,6 +77,8 @@ pub fn compile_input(sess: &Session,\n                      addl_plugins: Option<Vec<String>>,\n                      control: &CompileController) -> CompileResult {\n     use rustc_trans::back::write::OngoingCrateTranslation;\n+    use rustc::session::config::CrateType;\n+\n     macro_rules! controller_entry_point {\n         ($point: ident, $tsess: expr, $make_state: expr, $phase_result: expr) => {{\n             let state = &mut $make_state;\n@@ -94,7 +96,6 @@ pub fn compile_input(sess: &Session,\n     }\n \n     if cfg!(not(feature=\"llvm\")) {\n-        use rustc::session::config::CrateType;\n         if !sess.opts.debugging_opts.no_trans && sess.opts.output_types.should_trans() {\n             sess.err(\"LLVM is not supported by this rustc. Please use -Z no-trans to compile\")\n         }"}, {"sha": "2e0193fc8a1ead4e3ff7b9921fc641afe09fb5d0", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=cba53f0be575196083fe52ecd2ec8f1c015664ce", "patch": "@@ -25,6 +25,8 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(set_stdio)]\n \n+#[cfg(not(feature=\"llvm\"))]\n+extern crate ar;\n extern crate arena;\n extern crate getopts;\n extern crate graphviz;\n@@ -157,7 +159,6 @@ pub use rustc_trans::LlvmMetadataLoader as MetadataLoader;\n \n #[cfg(not(feature=\"llvm\"))]\n mod no_llvm_metadata_loader {\n-    extern crate ar;\n     extern crate owning_ref;\n \n     use rustc::middle::cstore::MetadataLoader as MetadataLoaderTrait;\n@@ -166,7 +167,7 @@ mod no_llvm_metadata_loader {\n     use std::fs::File;\n     use std::path::Path;\n \n-    use self::ar::Archive;\n+    use ar::Archive;\n     use self::owning_ref::{OwningRef, ErasedBoxRef};\n \n     pub struct NoLLvmMetadataLoader;"}, {"sha": "e6ab46fa9311408bc2b94c235964f82dfbbeb8a7", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=cba53f0be575196083fe52ecd2ec8f1c015664ce", "patch": "@@ -89,15 +89,8 @@ pub const RLIB_BYTECODE_OBJECT_V1_DATA_OFFSET: usize =\n     RLIB_BYTECODE_OBJECT_V1_DATASIZE_OFFSET + 8;\n \n pub use self::rustc_trans_utils::link::{find_crate_name, filename_for_input,\n-                                        default_output_for_target, invalid_output_for_target};\n-\n-pub fn build_link_meta(crate_hash: Fingerprint) -> LinkMeta {\n-    let r = LinkMeta {\n-        crate_hash: Svh::new(crate_hash.to_smaller_hash()),\n-    };\n-    info!(\"{:?}\", r);\n-    return r;\n-}\n+                                        default_output_for_target, invalid_output_for_target,\n+                                        build_link_meta};\n \n // The third parameter is for env vars, used on windows to set up the\n // path for MSVC to find its DLLs, and gcc to find its bundled"}, {"sha": "91852630fa47a3536f1879403ff34b077bb350d3", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=cba53f0be575196083fe52ecd2ec8f1c015664ce", "patch": "@@ -938,6 +938,8 @@ pub fn find_exported_symbols(tcx: TyCtxt) -> NodeSet {\n pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              rx: mpsc::Receiver<Box<Any + Send>>)\n                              -> OngoingCrateTranslation {\n+    use back::link::rustc_trans_utils::find_exported_symbols;\n+\n     check_for_rustc_errors_attr(tcx);\n \n "}, {"sha": "b91a3977111400723377224a8c502ce12b2a1096", "filename": "src/librustc_trans_utils/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Flibrustc_trans_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Flibrustc_trans_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2FCargo.toml?ref=cba53f0be575196083fe52ecd2ec8f1c015664ce", "patch": "@@ -10,6 +10,8 @@ crate-type = [\"dylib\"]\n test = false\n \n [dependencies]\n+log = \"0.3\"\n rustc = { path = \"../librustc\" }\n+rustc_incremental = { path = \"../librustc_incremental\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "44f0f62d7082f4df05126d9d1914131dbf4f2d7e", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=cba53f0be575196083fe52ecd2ec8f1c015664ce", "patch": "@@ -29,8 +29,68 @@\n \n #![cfg_attr(stage0, feature(const_fn))]\n \n+#[macro_use]\n+extern crate log;\n extern crate rustc;\n+extern crate rustc_incremental;\n extern crate syntax;\n extern crate syntax_pos;\n \n+use rustc::ty::TyCtxt;\n+use rustc::hir;\n+use rustc::hir::map as hir_map;\n+use rustc::util::nodemap::NodeSet;\n+\n+use syntax::attr;\n+\n pub mod link;\n+\n+/// The context provided lists a set of reachable ids as calculated by\n+/// middle::reachable, but this contains far more ids and symbols than we're\n+/// actually exposing from the object file. This function will filter the set in\n+/// the context to the set of ids which correspond to symbols that are exposed\n+/// from the object file being generated.\n+///\n+/// This list is later used by linkers to determine the set of symbols needed to\n+/// be exposed from a dynamic library and it's also encoded into the metadata.\n+pub fn find_exported_symbols(tcx: TyCtxt, reachable: &NodeSet) -> NodeSet {\n+    reachable.iter().cloned().filter(|&id| {\n+        // Next, we want to ignore some FFI functions that are not exposed from\n+        // this crate. Reachable FFI functions can be lumped into two\n+        // categories:\n+        //\n+        // 1. Those that are included statically via a static library\n+        // 2. Those included otherwise (e.g. dynamically or via a framework)\n+        //\n+        // Although our LLVM module is not literally emitting code for the\n+        // statically included symbols, it's an export of our library which\n+        // needs to be passed on to the linker and encoded in the metadata.\n+        //\n+        // As a result, if this id is an FFI item (foreign item) then we only\n+        // let it through if it's included statically.\n+        match tcx.hir.get(id) {\n+            hir_map::NodeForeignItem(..) => {\n+                let def_id = tcx.hir.local_def_id(id);\n+                tcx.sess.cstore.is_statically_included_foreign_item(def_id)\n+            }\n+\n+            // Only consider nodes that actually have exported symbols.\n+            hir_map::NodeItem(&hir::Item {\n+                node: hir::ItemStatic(..), .. }) |\n+            hir_map::NodeItem(&hir::Item {\n+                node: hir::ItemFn(..), .. }) |\n+            hir_map::NodeImplItem(&hir::ImplItem {\n+                node: hir::ImplItemKind::Method(..), .. }) => {\n+                let def_id = tcx.hir.local_def_id(id);\n+                let generics = tcx.generics_of(def_id);\n+                let attributes = tcx.get_attrs(def_id);\n+                (generics.parent_types == 0 && generics.types.is_empty()) &&\n+                // Functions marked with #[inline] are only ever translated\n+                // with \"internal\" linkage and are never exported.\n+                !attr::requests_inline(&attributes)\n+            }\n+\n+            _ => false\n+        }\n+    }).collect()\n+}"}, {"sha": "36c3ddc178beba59864292a1e13dcbdf54e709c3", "filename": "src/librustc_trans_utils/link.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Flibrustc_trans_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba53f0be575196083fe52ecd2ec8f1c015664ce/src%2Flibrustc_trans_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flink.rs?ref=cba53f0be575196083fe52ecd2ec8f1c015664ce", "patch": "@@ -10,11 +10,23 @@\n \n use rustc::session::config::{self, OutputFilenames, Input, OutputType};\n use rustc::session::Session;\n-use rustc::middle::cstore;\n+use rustc::middle::cstore::{self, LinkMeta};\n+use rustc::dep_graph::{DepKind, DepNode};\n+use rustc::hir::svh::Svh;\n+use rustc_incremental::IncrementalHashesMap;\n use std::path::PathBuf;\n use syntax::ast;\n use syntax_pos::Span;\n \n+pub fn build_link_meta(incremental_hashes_map: &IncrementalHashesMap) -> LinkMeta {\n+    let krate_dep_node = &DepNode::new_no_params(DepKind::Krate);\n+    let r = LinkMeta {\n+        crate_hash: Svh::new(incremental_hashes_map[krate_dep_node].to_smaller_hash()),\n+    };\n+    info!(\"{:?}\", r);\n+    return r;\n+}\n+\n pub fn find_crate_name(sess: Option<&Session>,\n                        attrs: &[ast::Attribute],\n                        input: &Input) -> String {"}]}