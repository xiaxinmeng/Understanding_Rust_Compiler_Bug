{"sha": "4d7d9d422b90c81b9e1ca347a1c139622d950f11", "node_id": "C_kwDOAAsO6NoAKDRkN2Q5ZDQyMmI5MGM4MWI5ZTFjYTM0N2ExYzEzOTYyMmQ5NTBmMTE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-04T18:41:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-04T18:41:32Z"}, "message": "Rollup merge of #95438 - m-ou-se:sync-unsafe-cell, r=joshtriplett\n\nAdd SyncUnsafeCell.\n\nThis adds `SyncUnsafeCell`, which is just `UnsafeCell` except it implements `Sync`.\n\nThis was first proposed under the name `RacyUnsafeCell` here: https://github.com/rust-lang/rust/issues/53639#issuecomment-415515748 and here: https://github.com/rust-lang/rust/issues/53639#issuecomment-432741659 and here: https://github.com/rust-lang/rust/issues/53639#issuecomment-888435728\n\nIt allows you to create an UnsafeCell that is Sync without having to wrap it in a struct first (and then implement Sync for that struct).\n\nE.g. `static X: SyncUnsafeCell<i32>`. Using a regular `UnsafeCell` as `static` is not possible, because it isn't `Sync`. We have a language workaround for it called `static mut`, but it's nice to be able to use the proper type for such unsafety instead.\n\nIt also makes implementing synchronization primitives based on unsafe cells slightly less verbose, because by using `SyncUnsafeCell` for `UnsafeCell`s that are shared between threads, you don't need a separate `impl<..> Sync for ..`. Using this type also clearly documents that the cell is expected to be accessed from multiple threads.", "tree": {"sha": "31fa96263a6a9f26b6029936316acfe20d09091e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31fa96263a6a9f26b6029936316acfe20d09091e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d7d9d422b90c81b9e1ca347a1c139622d950f11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiSzvcCRBK7hj4Ov3rIwAAHmEIADXoqZzjTOwMII/p7YVEHg1G\nq1jtKcu9MDb3XfNyl2B1h3gUfiJBiepQkbGyYpZ+Jf0k1SehwHzTwYw78wQDQncm\ngfGYDzigwVnGzmrRxGhml6BuWR4Vsy3UvkcUEt20F0u1FncP7HPEWQ+nigtfjUbx\nV9yw5nfeXlKuM5ZKFhF2Pn1QBIgQJYQG2lHRGMqhqzcY/F+qie6WUteE8yXUXFQy\nKjv/XW0E5bCrvsB/KeMfPM2RjtFpPzhuRKIoiP22XhJgsSDTnab4XsirlgI+4dlg\n9iVWEptrRsbeFz8dxFdoYSgUTJspzM7IZFscbhNdDhHG0yhe54yaiTFQqoeOuLA=\n=43ea\n-----END PGP SIGNATURE-----\n", "payload": "tree 31fa96263a6a9f26b6029936316acfe20d09091e\nparent 73148eee31b14694272751c6ab52da06af8c7744\nparent f225808f4919b7c475354fb165fe941dab91abb5\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649097692 +0200\ncommitter GitHub <noreply@github.com> 1649097692 +0200\n\nRollup merge of #95438 - m-ou-se:sync-unsafe-cell, r=joshtriplett\n\nAdd SyncUnsafeCell.\n\nThis adds `SyncUnsafeCell`, which is just `UnsafeCell` except it implements `Sync`.\n\nThis was first proposed under the name `RacyUnsafeCell` here: https://github.com/rust-lang/rust/issues/53639#issuecomment-415515748 and here: https://github.com/rust-lang/rust/issues/53639#issuecomment-432741659 and here: https://github.com/rust-lang/rust/issues/53639#issuecomment-888435728\n\nIt allows you to create an UnsafeCell that is Sync without having to wrap it in a struct first (and then implement Sync for that struct).\n\nE.g. `static X: SyncUnsafeCell<i32>`. Using a regular `UnsafeCell` as `static` is not possible, because it isn't `Sync`. We have a language workaround for it called `static mut`, but it's nice to be able to use the proper type for such unsafety instead.\n\nIt also makes implementing synchronization primitives based on unsafe cells slightly less verbose, because by using `SyncUnsafeCell` for `UnsafeCell`s that are shared between threads, you don't need a separate `impl<..> Sync for ..`. Using this type also clearly documents that the cell is expected to be accessed from multiple threads.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7d9d422b90c81b9e1ca347a1c139622d950f11", "html_url": "https://github.com/rust-lang/rust/commit/4d7d9d422b90c81b9e1ca347a1c139622d950f11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d7d9d422b90c81b9e1ca347a1c139622d950f11/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73148eee31b14694272751c6ab52da06af8c7744", "url": "https://api.github.com/repos/rust-lang/rust/commits/73148eee31b14694272751c6ab52da06af8c7744", "html_url": "https://github.com/rust-lang/rust/commit/73148eee31b14694272751c6ab52da06af8c7744"}, {"sha": "f225808f4919b7c475354fb165fe941dab91abb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f225808f4919b7c475354fb165fe941dab91abb5", "html_url": "https://github.com/rust-lang/rust/commit/f225808f4919b7c475354fb165fe941dab91abb5"}], "stats": {"total": 113, "additions": 109, "deletions": 4}, "files": [{"sha": "2a49017de3cc87d4ef64c138adc361df3981377b", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 100, "deletions": 3, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/4d7d9d422b90c81b9e1ca347a1c139622d950f11/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7d9d422b90c81b9e1ca347a1c139622d950f11/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=4d7d9d422b90c81b9e1ca347a1c139622d950f11", "patch": "@@ -1990,9 +1990,106 @@ impl<T> const From<T> for UnsafeCell<T> {\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<UnsafeCell<U>> for UnsafeCell<T> {}\n \n+/// [`UnsafeCell`], but [`Sync`].\n+///\n+/// This is just an `UnsafeCell`, except it implements `Sync`\n+/// if `T` implements `Sync`.\n+///\n+/// `UnsafeCell` doesn't implement `Sync`, to prevent accidental mis-use.\n+/// You can use `SyncUnsafeCell` instead of `UnsafeCell` to allow it to be\n+/// shared between threads, if that's intentional.\n+/// Providing proper synchronization is still the task of the user,\n+/// making this type just as unsafe to use.\n+///\n+/// See [`UnsafeCell`] for details.\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+#[repr(transparent)]\n+pub struct SyncUnsafeCell<T: ?Sized> {\n+    value: UnsafeCell<T>,\n+}\n+\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+unsafe impl<T: ?Sized + Sync> Sync for SyncUnsafeCell<T> {}\n+\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+impl<T> SyncUnsafeCell<T> {\n+    /// Constructs a new instance of `SyncUnsafeCell` which will wrap the specified value.\n+    #[inline]\n+    pub const fn new(value: T) -> Self {\n+        Self { value: UnsafeCell { value } }\n+    }\n+\n+    /// Unwraps the value.\n+    #[inline]\n+    pub const fn into_inner(self) -> T {\n+        self.value.into_inner()\n+    }\n+}\n+\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+impl<T: ?Sized> SyncUnsafeCell<T> {\n+    /// Gets a mutable pointer to the wrapped value.\n+    ///\n+    /// This can be cast to a pointer of any kind.\n+    /// Ensure that the access is unique (no active references, mutable or not)\n+    /// when casting to `&mut T`, and ensure that there are no mutations\n+    /// or mutable aliases going on when casting to `&T`\n+    #[inline]\n+    pub const fn get(&self) -> *mut T {\n+        self.value.get()\n+    }\n+\n+    /// Returns a mutable reference to the underlying data.\n+    ///\n+    /// This call borrows the `SyncUnsafeCell` mutably (at compile-time) which\n+    /// guarantees that we possess the only reference.\n+    #[inline]\n+    pub const fn get_mut(&mut self) -> &mut T {\n+        self.value.get_mut()\n+    }\n+\n+    /// Gets a mutable pointer to the wrapped value.\n+    ///\n+    /// See [`UnsafeCell::get`] for details.\n+    #[inline]\n+    pub const fn raw_get(this: *const Self) -> *mut T {\n+        // We can just cast the pointer from `SyncUnsafeCell<T>` to `T` because\n+        // of #[repr(transparent)] on both SyncUnsafeCell and UnsafeCell.\n+        // See UnsafeCell::raw_get.\n+        this as *const T as *mut T\n+    }\n+}\n+\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+impl<T: Default> Default for SyncUnsafeCell<T> {\n+    /// Creates an `SyncUnsafeCell`, with the `Default` value for T.\n+    fn default() -> SyncUnsafeCell<T> {\n+        SyncUnsafeCell::new(Default::default())\n+    }\n+}\n+\n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T> const From<T> for SyncUnsafeCell<T> {\n+    /// Creates a new `SyncUnsafeCell<T>` containing the given value.\n+    fn from(t: T) -> SyncUnsafeCell<T> {\n+        SyncUnsafeCell::new(t)\n+    }\n+}\n+\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+//#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+impl<T: CoerceUnsized<U>, U> CoerceUnsized<SyncUnsafeCell<U>> for SyncUnsafeCell<T> {}\n+\n #[allow(unused)]\n-fn assert_coerce_unsized(a: UnsafeCell<&i32>, b: Cell<&i32>, c: RefCell<&i32>) {\n+fn assert_coerce_unsized(\n+    a: UnsafeCell<&i32>,\n+    b: SyncUnsafeCell<&i32>,\n+    c: Cell<&i32>,\n+    d: RefCell<&i32>,\n+) {\n     let _: UnsafeCell<&dyn Send> = a;\n-    let _: Cell<&dyn Send> = b;\n-    let _: RefCell<&dyn Send> = c;\n+    let _: SyncUnsafeCell<&dyn Send> = b;\n+    let _: Cell<&dyn Send> = c;\n+    let _: RefCell<&dyn Send> = d;\n }"}, {"sha": "fac959ac7347d86ea3ca9ccc472d6275996bf0c1", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4d7d9d422b90c81b9e1ca347a1c139622d950f11/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7d9d422b90c81b9e1ca347a1c139622d950f11/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=4d7d9d422b90c81b9e1ca347a1c139622d950f11", "patch": "@@ -2,7 +2,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use crate::cell::{Cell, Ref, RefCell, RefMut, UnsafeCell};\n+use crate::cell::{Cell, Ref, RefCell, RefMut, SyncUnsafeCell, UnsafeCell};\n use crate::char::EscapeDebugExtArgs;\n use crate::marker::PhantomData;\n use crate::mem;\n@@ -2400,6 +2400,13 @@ impl<T: ?Sized> Debug for UnsafeCell<T> {\n     }\n }\n \n+#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n+impl<T: ?Sized> Debug for SyncUnsafeCell<T> {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n+        f.debug_struct(\"SyncUnsafeCell\").finish_non_exhaustive()\n+    }\n+}\n+\n // If you expected tests to be here, look instead at the core/tests/fmt.rs file,\n // it's a lot easier than creating all of the rt::Piece structures here.\n // There are also tests in the alloc crate, for those that need allocations."}, {"sha": "e13f50b0d7a53a594978a986f1af80255374a488", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d7d9d422b90c81b9e1ca347a1c139622d950f11/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7d9d422b90c81b9e1ca347a1c139622d950f11/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=4d7d9d422b90c81b9e1ca347a1c139622d950f11", "patch": "@@ -139,6 +139,7 @@\n #![feature(const_type_id)]\n #![feature(const_type_name)]\n #![feature(const_default_impls)]\n+#![feature(const_unsafecell_get_mut)]\n #![feature(core_panic)]\n #![feature(duration_consts_float)]\n #![feature(maybe_uninit_uninit_array)]"}]}