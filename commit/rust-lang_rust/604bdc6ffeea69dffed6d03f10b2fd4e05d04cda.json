{"sha": "604bdc6ffeea69dffed6d03f10b2fd4e05d04cda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNGJkYzZmZmVlYTY5ZGZmZWQ2ZDAzZjEwYjJmZDRlMDVkMDRjZGE=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-04T18:09:16Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-04T18:09:16Z"}, "message": "Use macro_rules shift to map text ranges", "tree": {"sha": "c1bdf4142663cf259c026ae134fd32c254707db5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1bdf4142663cf259c026ae134fd32c254707db5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/604bdc6ffeea69dffed6d03f10b2fd4e05d04cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/604bdc6ffeea69dffed6d03f10b2fd4e05d04cda", "html_url": "https://github.com/rust-lang/rust/commit/604bdc6ffeea69dffed6d03f10b2fd4e05d04cda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/604bdc6ffeea69dffed6d03f10b2fd4e05d04cda/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e28924012409352bbacbfebf9fac4e4409f09b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e28924012409352bbacbfebf9fac4e4409f09b8", "html_url": "https://github.com/rust-lang/rust/commit/7e28924012409352bbacbfebf9fac4e4409f09b8"}], "stats": {"total": 77, "additions": 26, "deletions": 51}, "files": [{"sha": "72c728c938a281127c446e9cdd6569b62677d3c5", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/604bdc6ffeea69dffed6d03f10b2fd4e05d04cda/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604bdc6ffeea69dffed6d03f10b2fd4e05d04cda/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=604bdc6ffeea69dffed6d03f10b2fd4e05d04cda", "patch": "@@ -151,10 +151,15 @@ pub(crate) fn parse_macro_with_info(\n     let arg_start = arg_tt.map(|t| t.syntax().text_range().start());\n     let def_start = def_tt.map(|t| t.syntax().text_range().start());\n \n-    let arg_map =\n-        arg_start.map(|start| exp_map.ranges(&expand_info.arg_map, start)).unwrap_or_default();\n-    let def_map =\n-        def_start.map(|start| exp_map.ranges(&expand_info.def_map, start)).unwrap_or_default();\n+    let macro_rules = db.macro_def(loc.def).ok_or(\"Fail to find macro definition\").ok()?.0;\n+    let shift = macro_rules.shift();\n+\n+    let arg_map = arg_start\n+        .map(|start| exp_map.map_ranges(&expand_info.arg_map, start, shift))\n+        .unwrap_or_default();\n+    let def_map = def_start\n+        .map(|start| exp_map.map_ranges(&expand_info.def_map, start, 0))\n+        .unwrap_or_default();\n \n     let info = ExpansionInfo { arg_map, def_map };\n "}, {"sha": "a0f1a68813e8dd050a95b4b0d91f2f9320732d72", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/604bdc6ffeea69dffed6d03f10b2fd4e05d04cda/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604bdc6ffeea69dffed6d03f10b2fd4e05d04cda/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=604bdc6ffeea69dffed6d03f10b2fd4e05d04cda", "patch": "@@ -118,6 +118,10 @@ impl MacroRules {\n         shift_subtree(&mut tt, self.shift);\n         mbe_expander::expand(self, &tt)\n     }\n+\n+    pub fn shift(&self) -> u32 {\n+        self.shift\n+    }\n }\n \n impl Rule {"}, {"sha": "0c499cd03c30ba19b19ac9c4b8af34c7e8e30b9e", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 11, "deletions": 30, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/604bdc6ffeea69dffed6d03f10b2fd4e05d04cda/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604bdc6ffeea69dffed6d03f10b2fd4e05d04cda/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=604bdc6ffeea69dffed6d03f10b2fd4e05d04cda", "patch": "@@ -12,31 +12,12 @@ use tt::buffer::{Cursor, TokenBuffer};\n \n use crate::subtree_source::SubtreeTokenSource;\n use crate::ExpandError;\n-use std::sync::atomic::{AtomicU32, Ordering};\n \n /// Maps `tt::TokenId` to the relative range of the original token.\n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq, Default)]\n pub struct TokenMap {\n     /// Maps `tt::TokenId` to the *relative* source range.\n     tokens: Vec<TextRange>,\n-    map_id: u32,\n-}\n-\n-static TOKEN_MAP_COUNTER: AtomicU32 = AtomicU32::new(0);\n-\n-/// Generate an unique token map id for each instance\n-fn make_uniq_token_map_id() -> u32 {\n-    let res = TOKEN_MAP_COUNTER.fetch_add(1, Ordering::SeqCst);\n-    if res == std::u32::MAX {\n-        panic!(\"TOKEN_MAP_COUNTER is overflowed\");\n-    }\n-    res\n-}\n-\n-impl std::default::Default for TokenMap {\n-    fn default() -> TokenMap {\n-        TokenMap { tokens: Default::default(), map_id: make_uniq_token_map_id() }\n-    }\n }\n \n /// Maps relative range of the expanded syntax node to `tt::TokenId`\n@@ -140,17 +121,14 @@ pub fn token_tree_to_items(\n \n impl TokenMap {\n     pub fn relative_range_of(&self, tt: tt::TokenId) -> Option<TextRange> {\n-        if self.map_id != tt.map_id() {\n-            return None;\n-        }\n-        let idx = tt.token_id() as usize;\n+        let idx = tt.0 as usize;\n         self.tokens.get(idx).copied()\n     }\n \n     fn alloc(&mut self, relative_range: TextRange) -> tt::TokenId {\n         let id = self.tokens.len();\n         self.tokens.push(relative_range);\n-        tt::TokenId::new(id as u32, self.map_id)\n+        tt::TokenId(id as u32)\n     }\n }\n \n@@ -159,14 +137,17 @@ impl ExpandedRangeMap {\n         self.ranges.push((relative_range, token_id.clone()))\n     }\n \n-    pub fn ranges(&self, to: &TokenMap, start: TextUnit) -> Vec<(TextRange, TextRange)> {\n+    pub fn map_ranges(\n+        &self,\n+        to: &TokenMap,\n+        start: TextUnit,\n+        shift: u32,\n+    ) -> Vec<(TextRange, TextRange)> {\n         self.ranges\n             .iter()\n+            .filter_map(|(r, tid)| if shift <= tid.0 { Some((r, tid.0 - shift)) } else { None })\n             .filter_map(|(r, tid)| {\n-                if to.map_id != tid.map_id() {\n-                    return None;\n-                }\n-                if let Some(to_range) = to.relative_range_of(*tid) {\n+                if let Some(to_range) = to.relative_range_of(tt::TokenId(tid)) {\n                     Some((*r, TextRange::from_to(to_range.start() + start, to_range.end() + start)))\n                 } else {\n                     None"}, {"sha": "20c251ff45964d77a9dd57911518ff828a6665b8", "filename": "crates/ra_tt/src/lib.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/604bdc6ffeea69dffed6d03f10b2fd4e05d04cda/crates%2Fra_tt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604bdc6ffeea69dffed6d03f10b2fd4e05d04cda/crates%2Fra_tt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Flib.rs?ref=604bdc6ffeea69dffed6d03f10b2fd4e05d04cda", "patch": "@@ -25,26 +25,11 @@ use smol_str::SmolStr;\n /// source token and making sure that identities are preserved during macro\n /// expansion.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct TokenId {\n-    token_id: u32,\n-    map_id: u32,\n-}\n+pub struct TokenId(pub u32);\n \n impl TokenId {\n-    pub fn new(token_id: u32, map_id: u32) -> TokenId {\n-        TokenId { token_id, map_id }\n-    }\n-\n     pub const fn unspecified() -> TokenId {\n-        TokenId { token_id: !0, map_id: !0 }\n-    }\n-\n-    pub fn token_id(&self) -> u32 {\n-        self.token_id\n-    }\n-\n-    pub fn map_id(&self) -> u32 {\n-        self.map_id\n+        TokenId(!0)\n     }\n }\n "}]}