{"sha": "959b6e324ce2786a4adade6cef222ffbd20f3791", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OWI2ZTMyNGNlMjc4NmE0YWRhZGU2Y2VmMjIyZmZiZDIwZjM3OTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-25T11:12:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-25T11:12:43Z"}, "message": "Rollup merge of #64639 - davidtwco:rfc-2008-stabilization, r=Centril\n\nStabilize `#[non_exhaustive]` (RFC 2008)\n\nFixes #44109.\n\nThis pull request stabilizes the `#[non_exhaustive]` attribute, which is used to indicate that a type will have more fields / variants added in the future. It can be applied to `struct`s, `enum`s and `enum` variants. See https://github.com/rust-lang/rust/issues/44109#issuecomment-533356866 for the stabilization report.\n\nr? @Centril", "tree": {"sha": "1198254311edbbef1b757b0dbe9f7641dba75dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1198254311edbbef1b757b0dbe9f7641dba75dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/959b6e324ce2786a4adade6cef222ffbd20f3791", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdstirCRBK7hj4Ov3rIwAAdHIIAGqYcMctOjPqv0J8EQkEQyIG\nduKikcUoNY91HMLNDz3BQdZQEpVpc/twzT4Z3v7q80VD2xtyHWG6EIqRLkL9RxU1\nAb7mOi2V7PjZ1cP4Y0mriXeRGVeyjHbheKY3M53iyUqtxub1mmGUU8U+WAEf6Rzw\nTVMelRrWnBWy1umWqEKg9CIDhg3XJVOTd0RgyM630bIHbMs75dnVGZEoIQ6mRkUi\nwipXvQR7Q0GAxB4pXt0f7hbUYApa/Yhc3FrXWJ6f3zgC31nW08wYA6RlflaYf5c/\nbI+Q4AtehuIyVcqy5av/wlE1Rn7aSmdBrkr3dt2lSJxI+zfDLwPe9FN0ZJSG1EE=\n=Mmps\n-----END PGP SIGNATURE-----\n", "payload": "tree 1198254311edbbef1b757b0dbe9f7641dba75dd2\nparent 85943fd7c88ddf870b03afdd6cd6782721c348e1\nparent e0590ea76f528357add6fd6615a82cf49e44f271\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1572001963 +0200\ncommitter GitHub <noreply@github.com> 1572001963 +0200\n\nRollup merge of #64639 - davidtwco:rfc-2008-stabilization, r=Centril\n\nStabilize `#[non_exhaustive]` (RFC 2008)\n\nFixes #44109.\n\nThis pull request stabilizes the `#[non_exhaustive]` attribute, which is used to indicate that a type will have more fields / variants added in the future. It can be applied to `struct`s, `enum`s and `enum` variants. See https://github.com/rust-lang/rust/issues/44109#issuecomment-533356866 for the stabilization report.\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/959b6e324ce2786a4adade6cef222ffbd20f3791", "html_url": "https://github.com/rust-lang/rust/commit/959b6e324ce2786a4adade6cef222ffbd20f3791", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/959b6e324ce2786a4adade6cef222ffbd20f3791/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85943fd7c88ddf870b03afdd6cd6782721c348e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/85943fd7c88ddf870b03afdd6cd6782721c348e1", "html_url": "https://github.com/rust-lang/rust/commit/85943fd7c88ddf870b03afdd6cd6782721c348e1"}, {"sha": "e0590ea76f528357add6fd6615a82cf49e44f271", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0590ea76f528357add6fd6615a82cf49e44f271", "html_url": "https://github.com/rust-lang/rust/commit/e0590ea76f528357add6fd6615a82cf49e44f271"}], "stats": {"total": 185, "additions": 30, "deletions": 155}, "files": [{"sha": "907147c17ef8e500260577c1c637d7260bc7bd5b", "filename": "src/doc/unstable-book/src/language-features/non-exhaustive.md", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/85943fd7c88ddf870b03afdd6cd6782721c348e1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-exhaustive.md", "raw_url": "https://github.com/rust-lang/rust/raw/85943fd7c88ddf870b03afdd6cd6782721c348e1/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-exhaustive.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-exhaustive.md?ref=85943fd7c88ddf870b03afdd6cd6782721c348e1", "patch": "@@ -1,76 +0,0 @@\n-# `non_exhaustive`\n-\n-The tracking issue for this feature is: [#44109]\n-\n-[#44109]: https://github.com/rust-lang/rust/issues/44109\n-\n-------------------------\n-\n-The `non_exhaustive` gate allows you to use the `#[non_exhaustive]` attribute\n-on structs, enums and enum variants. When applied within a crate, users of the\n-crate will need to use the `_` pattern when matching enums and use the `..`\n-pattern when matching structs. Enum variants cannot be matched against.\n-Structs and enum variants marked as `non_exhaustive` will not be able to\n-be created normally outside of the defining crate. This is demonstrated\n-below:\n-\n-```rust,ignore (pseudo-Rust)\n-use std::error::Error as StdError;\n-\n-#[non_exhaustive]\n-pub enum Error {\n-    Message(String),\n-    Other,\n-}\n-impl StdError for Error {\n-    fn description(&self) -> &str {\n-        // This will not error, despite being marked as non_exhaustive, as this\n-        // enum is defined within the current crate, it can be matched\n-        // exhaustively.\n-        match *self {\n-            Message(ref s) => s,\n-            Other => \"other or unknown error\",\n-        }\n-    }\n-}\n-```\n-\n-```rust,ignore (pseudo-Rust)\n-use mycrate::Error;\n-\n-// This will not error as the non_exhaustive Error enum has been matched with\n-// a wildcard.\n-match error {\n-    Message(ref s) => ...,\n-    Other => ...,\n-    _ => ...,\n-}\n-```\n-\n-```rust,ignore (pseudo-Rust)\n-#[non_exhaustive]\n-pub struct Config {\n-    pub window_width: u16,\n-    pub window_height: u16,\n-}\n-\n-// We can create structs as normal within the defining crate when marked as\n-// non_exhaustive.\n-let config = Config { window_width: 640, window_height: 480 };\n-\n-// We can match structs exhaustively when within the defining crate.\n-if let Ok(Config { window_width, window_height }) = load_config() {\n-    // ...\n-}\n-```\n-\n-```rust,ignore (pseudo-Rust)\n-use mycrate::Config;\n-\n-// We cannot create a struct like normal if it has been marked as\n-// non_exhaustive.\n-let config = Config { window_width: 640, window_height: 480 };\n-// By adding the `..` we can match the config as below outside of the crate\n-// when marked non_exhaustive.\n-let &Config { window_width, window_height, .. } = config;\n-```"}, {"sha": "0819969b9336088b700d32aa800430e3d5a9ab89", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -121,7 +121,7 @@\n #![feature(hexagon_target_feature)]\n #![feature(const_int_conversion)]\n #![feature(const_transmute)]\n-#![feature(non_exhaustive)]\n+#![cfg_attr(bootstrap, feature(non_exhaustive))]\n #![feature(structural_match)]\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]"}, {"sha": "6166561d87f15a8ef4075a2338a49cd79ab091b3", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -25,7 +25,7 @@\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n #![feature(optin_builtin_traits)]\n-#![feature(non_exhaustive)]\n+#![cfg_attr(bootstrap, feature(non_exhaustive))]\n #![feature(rustc_attrs)]\n #![feature(specialization)]\n "}, {"sha": "cf268078a2c5dcb3b2c2fbb60a11889e09721672", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -2105,8 +2105,6 @@ on something other than a struct or enum.\n Examples of erroneous code:\n \n ```compile_fail,E0701\n-# #![feature(non_exhaustive)]\n-\n #[non_exhaustive]\n trait Foo { }\n ```"}, {"sha": "996f5b1241263e7397e29ee93cc2c95c0e5a9aac", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -41,7 +41,7 @@\n #![feature(overlapping_marker_traits)]\n #![feature(extern_types)]\n #![feature(nll)]\n-#![feature(non_exhaustive)]\n+#![cfg_attr(bootstrap, feature(non_exhaustive))]\n #![feature(optin_builtin_traits)]\n #![feature(option_expect_none)]\n #![feature(range_is_empty)]"}, {"sha": "c7adad896a51a11d84ecbff51486044a91050225", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -283,7 +283,7 @@\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n #![feature(nll)]\n-#![feature(non_exhaustive)]\n+#![cfg_attr(bootstrap, feature(non_exhaustive))]\n #![feature(on_unimplemented)]\n #![feature(optin_builtin_traits)]\n #![feature(panic_info_message)]"}, {"sha": "36fcab8450b85e9344c2772a4b93ed918a9c8fc9", "filename": "src/libsyntax/feature_gate/accepted.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -245,8 +245,10 @@ declare_features! (\n     (accepted, bind_by_move_pattern_guards, \"1.39.0\", Some(15287), None),\n     /// Allows attributes in formal function parameters.\n     (accepted, param_attrs, \"1.39.0\", Some(60406), None),\n-    // Allows macro invocations in `extern {}` blocks.\n+    /// Allows macro invocations in `extern {}` blocks.\n     (accepted, macros_in_extern, \"1.40.0\", Some(49476), None),\n+    /// Allows future-proofing enums/structs with the `#[non_exhaustive]` attribute (RFC 2008).\n+    (accepted, non_exhaustive, \"1.40.0\", Some(44109), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "f6e1d6c422499d8fe1ee5842d7edf5ef24a0ac23", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -383,9 +383,6 @@ declare_features! (\n     /// Allows `#[doc(include = \"some-file\")]`.\n     (active, external_doc, \"1.22.0\", Some(44732), None),\n \n-    /// Allows future-proofing enums/structs with the `#[non_exhaustive]` attribute (RFC 2008).\n-    (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n-\n     /// Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n     (active, crate_visibility_modifier, \"1.23.0\", Some(53120), None),\n "}, {"sha": "efe84238795a5739ab84251cf58b6ec4557f91c0", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -252,6 +252,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ungated!(path, Normal, template!(NameValueStr: \"file\")),\n     ungated!(no_std, CrateLevel, template!(Word)),\n     ungated!(no_implicit_prelude, Normal, template!(Word)),\n+    ungated!(non_exhaustive, Whitelisted, template!(Word)),\n \n     // Runtime\n     ungated!(windows_subsystem, Whitelisted, template!(NameValueStr: \"windows|console\")),\n@@ -314,9 +315,6 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         test_runner, CrateLevel, template!(List: \"path\"), custom_test_frameworks,\n         \"custom test frameworks are an unstable feature\",\n     ),\n-\n-    // RFC #2008\n-    gated!(non_exhaustive, Whitelisted, template!(Word), experimental!(non_exhaustive)),\n     // RFC #1268\n     gated!(marker, Normal, template!(Word), marker_trait_attr, experimental!(marker)),\n     gated!("}, {"sha": "a307a5c0b3757ad31be861c7ccd9980a47b3c66c", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -9,7 +9,7 @@\n #![feature(const_fn)]\n #![feature(crate_visibility_modifier)]\n #![feature(nll)]\n-#![feature(non_exhaustive)]\n+#![cfg_attr(bootstrap, feature(non_exhaustive))]\n #![feature(optin_builtin_traits)]\n #![feature(rustc_attrs)]\n #![cfg_attr(bootstrap, feature(proc_macro_hygiene))]"}, {"sha": "950f170f4fd4168bb0cfdd6ba52e25623c21b153", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85943fd7c88ddf870b03afdd6cd6782721c348e1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85943fd7c88ddf870b03afdd6cd6782721c348e1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive.rs?ref=85943fd7c88ddf870b03afdd6cd6782721c348e1", "patch": "@@ -1,10 +0,0 @@\n-//#![feature(non_exhaustive)]\n-\n-#[non_exhaustive] //~ERROR the `#[non_exhaustive]` attribute is an experimental feature\n-pub enum NonExhaustiveEnum {\n-    Unit,\n-    Tuple(u32),\n-    Struct { field: u32 }\n-}\n-\n-fn main() { }"}, {"sha": "482332b8d706c457e731ae7a7c831dc8ad0977d9", "filename": "src/test/ui/feature-gates/feature-gate-non_exhaustive.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85943fd7c88ddf870b03afdd6cd6782721c348e1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85943fd7c88ddf870b03afdd6cd6782721c348e1/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-non_exhaustive.stderr?ref=85943fd7c88ddf870b03afdd6cd6782721c348e1", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: the `#[non_exhaustive]` attribute is an experimental feature\n-  --> $DIR/feature-gate-non_exhaustive.rs:3:1\n-   |\n-LL | #[non_exhaustive]\n-   | ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/44109\n-   = help: add `#![feature(non_exhaustive)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "bbc25d40256ff3caf680c609700d80519dd0161c", "filename": "src/test/ui/rfc-2008-non-exhaustive/auxiliary/enums.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fenums.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,5 +1,4 @@\n #![crate_type = \"rlib\"]\n-#![feature(non_exhaustive)]\n \n #[non_exhaustive]\n pub enum NonExhaustiveEnum {"}, {"sha": "6bfe7bf923d0901e2cf5ddb92d31d86fc89d4604", "filename": "src/test/ui/rfc-2008-non-exhaustive/auxiliary/structs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fstructs.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,5 +1,3 @@\n-#![feature(non_exhaustive)]\n-\n #[non_exhaustive]\n pub struct NormalStruct {\n     pub first_field: u16,"}, {"sha": "02672d5454e57bf82cdb1c2c5d13852d1e2c90f2", "filename": "src/test/ui/rfc-2008-non-exhaustive/auxiliary/variants.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fvariants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fvariants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fauxiliary%2Fvariants.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,5 +1,4 @@\n #![crate_type = \"rlib\"]\n-#![feature(non_exhaustive)]\n \n pub enum NonExhaustiveVariants {\n     #[non_exhaustive] Unit,"}, {"sha": "54e42917f52d2357acf8c18c7313df514067a85d", "filename": "src/test/ui/rfc-2008-non-exhaustive/enum_same_crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fenum_same_crate.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(non_exhaustive)]\n-\n #[non_exhaustive]\n pub enum NonExhaustiveEnum {\n     Unit,"}, {"sha": "d6251fcb768f400271e8bf54d47964bc076ace6f", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/auxiliary/types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fauxiliary%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fauxiliary%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fauxiliary%2Ftypes.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,5 +1,3 @@\n-#![feature(non_exhaustive)]\n-\n #[non_exhaustive]\n #[repr(C)]\n pub enum NonExhaustiveEnum {"}, {"sha": "c09aa256e0e74f241b53fa6705c045140b311890", "filename": "src/test/ui/rfc-2008-non-exhaustive/improper_ctypes/same_crate_proper.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fsame_crate_proper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fsame_crate_proper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fimproper_ctypes%2Fsame_crate_proper.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,5 +1,4 @@\n // check-pass\n-#![feature(non_exhaustive)]\n #![deny(improper_ctypes)]\n \n // This test checks that non-exhaustive types with `#[repr(C)]` are considered proper within"}, {"sha": "3c4a09fafd2dbc8360979d6d74b91f6d7739a9a0", "filename": "src/test/ui/rfc-2008-non-exhaustive/invalid-attribute.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,5 +1,3 @@\n-#![feature(non_exhaustive)]\n-\n #[non_exhaustive(anything)]\n //~^ ERROR malformed `non_exhaustive` attribute\n struct Foo;"}, {"sha": "76d9e2d8205b74305431fd218a94718c4ec34638", "filename": "src/test/ui/rfc-2008-non-exhaustive/invalid-attribute.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Finvalid-attribute.stderr?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,11 +1,11 @@\n error: malformed `non_exhaustive` attribute input\n-  --> $DIR/invalid-attribute.rs:3:1\n+  --> $DIR/invalid-attribute.rs:1:1\n    |\n LL | #[non_exhaustive(anything)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[non_exhaustive]`\n \n error[E0701]: attribute can only be applied to a struct or enum\n-  --> $DIR/invalid-attribute.rs:7:1\n+  --> $DIR/invalid-attribute.rs:5:1\n    |\n LL | #[non_exhaustive]\n    | ^^^^^^^^^^^^^^^^^\n@@ -14,7 +14,7 @@ LL | trait Bar { }\n    | ------------- not a struct or enum\n \n error[E0701]: attribute can only be applied to a struct or enum\n-  --> $DIR/invalid-attribute.rs:11:1\n+  --> $DIR/invalid-attribute.rs:9:1\n    |\n LL |   #[non_exhaustive]\n    |   ^^^^^^^^^^^^^^^^^"}, {"sha": "04cfe51cab025776dfa203ba7e82b67edd7cc5cf", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -16,7 +16,7 @@ error[E0603]: tuple struct constructor `TupleStruct` is private\n LL |     let ts_explicit = structs::TupleStruct(640, 480);\n    |                                ^^^^^^^^^^^\n    | \n-  ::: $DIR/auxiliary/structs.rs:13:24\n+  ::: $DIR/auxiliary/structs.rs:11:24\n    |\n LL | pub struct TupleStruct(pub u16, pub u16);\n    |                        ---------------- a constructor is private if any of the fields is private"}, {"sha": "5f76b0cb2f4b6098f09e9596941baf4df0e556b1", "filename": "src/test/ui/rfc-2008-non-exhaustive/structs_same_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstructs_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstructs_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstructs_same_crate.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![allow(unused_variables)]\n-#![feature(non_exhaustive)]\n \n #[non_exhaustive]\n pub struct NormalStruct {"}, {"sha": "a2735d4cbfb2928c1e32eb3bb4a81d73e1411b3a", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/auxiliary/uninhabited.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fauxiliary%2Funinhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fauxiliary%2Funinhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fauxiliary%2Funinhabited.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,6 +1,5 @@\n #![crate_type = \"rlib\"]\n #![feature(never_type)]\n-#![feature(non_exhaustive)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "6b911dd989cc580f89170be9eb9eabdc673d3f37", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions_same_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,5 +1,4 @@\n #![feature(never_type)]\n-#![feature(non_exhaustive)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "a07473dade22cc4ed56d44c31980bcacb4fb1127", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/coercions_same_crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fcoercions_same_crate.stderr?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:31:5\n+  --> $DIR/coercions_same_crate.rs:30:5\n    |\n LL | fn cannot_coerce_empty_enum_to_anything(x: UninhabitedEnum) -> A {\n    |                                                                - expected `A` because of return type\n@@ -10,7 +10,7 @@ LL |     x\n               found type `UninhabitedEnum`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:35:5\n+  --> $DIR/coercions_same_crate.rs:34:5\n    |\n LL | fn cannot_coerce_empty_tuple_struct_to_anything(x: UninhabitedTupleStruct) -> A {\n    |                                                                               - expected `A` because of return type\n@@ -21,7 +21,7 @@ LL |     x\n               found type `UninhabitedTupleStruct`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:39:5\n+  --> $DIR/coercions_same_crate.rs:38:5\n    |\n LL | fn cannot_coerce_empty_struct_to_anything(x: UninhabitedStruct) -> A {\n    |                                                                    - expected `A` because of return type\n@@ -32,7 +32,7 @@ LL |     x\n               found type `UninhabitedStruct`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercions_same_crate.rs:43:5\n+  --> $DIR/coercions_same_crate.rs:42:5\n    |\n LL | fn cannot_coerce_enum_with_empty_variants_to_anything(x: UninhabitedVariants) -> A {\n    |                                                                                  - expected `A` because of return type"}, {"sha": "8f090fe886a00564ddfb51531fd67b01e747deb3", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_same_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,5 +1,4 @@\n #![feature(never_type)]\n-#![feature(non_exhaustive)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "c03018a523647c29f0c03276ecfcda6c0a99418a", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_same_crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_same_crate.stderr?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedEnum` of type `IndirectUninhabitedEnum` is not handled\n-  --> $DIR/indirect_match_same_crate.rs:35:11\n+  --> $DIR/indirect_match_same_crate.rs:34:11\n    |\n LL | pub struct IndirectUninhabitedEnum(UninhabitedEnum);\n    | ----------------------------------------------------\n@@ -13,7 +13,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedStruct` of type `IndirectUninhabitedStruct` is not handled\n-  --> $DIR/indirect_match_same_crate.rs:39:11\n+  --> $DIR/indirect_match_same_crate.rs:38:11\n    |\n LL | pub struct IndirectUninhabitedStruct(UninhabitedStruct);\n    | --------------------------------------------------------\n@@ -27,7 +27,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedTupleStruct` of type `IndirectUninhabitedTupleStruct` is not handled\n-  --> $DIR/indirect_match_same_crate.rs:43:11\n+  --> $DIR/indirect_match_same_crate.rs:42:11\n    |\n LL | pub struct IndirectUninhabitedTupleStruct(UninhabitedTupleStruct);\n    | ------------------------------------------------------------------\n@@ -41,7 +41,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `IndirectUninhabitedVariants` of type `IndirectUninhabitedVariants` is not handled\n-  --> $DIR/indirect_match_same_crate.rs:49:11\n+  --> $DIR/indirect_match_same_crate.rs:48:11\n    |\n LL | pub struct IndirectUninhabitedVariants(UninhabitedVariants);\n    | ------------------------------------------------------------"}, {"sha": "60289aa7803788be6724e7d4b0fc6f7f380b5aa0", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/indirect_match_with_exhaustive_patterns_same_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Findirect_match_with_exhaustive_patterns_same_crate.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -3,7 +3,6 @@\n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n #![feature(never_type)]\n-#![feature(non_exhaustive)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "230ac75298e726b850eb9d27c918c4e14bf5bdbe", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/issue-65157-repeated-match-arm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fissue-65157-repeated-match-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fissue-65157-repeated-match-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fissue-65157-repeated-match-arm.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,7 +1,6 @@\n // aux-build:uninhabited.rs\n #![deny(unreachable_patterns)]\n #![feature(never_type)]\n-#![feature(non_exhaustive)]\n \n extern crate uninhabited;\n "}, {"sha": "f2b9983af8602a04b039569b2507cc000e2d4005", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/issue-65157-repeated-match-arm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fissue-65157-repeated-match-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fissue-65157-repeated-match-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fissue-65157-repeated-match-arm.stderr?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,5 +1,5 @@\n error: unreachable pattern\n-  --> $DIR/issue-65157-repeated-match-arm.rs:16:9\n+  --> $DIR/issue-65157-repeated-match-arm.rs:15:9\n    |\n LL |         PartiallyInhabitedVariants::Struct { .. } => {},\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "ebbdfba15f3a3caf7d745f828dd85feed396dcee", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_same_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,5 +1,4 @@\n #![feature(never_type)]\n-#![feature(non_exhaustive)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "c39df05a8f74ee8a202fa410121421f42cf8acf1", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_same_crate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_same_crate.stderr?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: pattern `UninhabitedStruct` of type `UninhabitedStruct` is not handled\n-  --> $DIR/match_same_crate.rs:31:11\n+  --> $DIR/match_same_crate.rs:30:11\n    |\n LL |   pub struct UninhabitedStruct {\n    |   -          ----------------- variant not covered\n@@ -15,7 +15,7 @@ LL |       match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: pattern `UninhabitedTupleStruct` of type `UninhabitedTupleStruct` is not handled\n-  --> $DIR/match_same_crate.rs:35:11\n+  --> $DIR/match_same_crate.rs:34:11\n    |\n LL | pub struct UninhabitedTupleStruct(!);\n    | -------------------------------------\n@@ -29,7 +29,7 @@ LL |     match x {}\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: multiple patterns of type `UninhabitedVariants` are not handled\n-  --> $DIR/match_same_crate.rs:39:11\n+  --> $DIR/match_same_crate.rs:38:11\n    |\n LL | / pub enum UninhabitedVariants {\n LL | |     #[non_exhaustive] Tuple(!),"}, {"sha": "de5530485f3e69ea31af2d3a4aa10bc493b57f6b", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/match_with_exhaustive_patterns_same_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fmatch_with_exhaustive_patterns_same_crate.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -3,7 +3,6 @@\n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n #![feature(never_type)]\n-#![feature(non_exhaustive)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "ffc496a975ecf00b69f0faee7c7a42d807917243", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/patterns_same_crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,7 +1,6 @@\n #![deny(unreachable_patterns)]\n #![feature(exhaustive_patterns)]\n #![feature(never_type)]\n-#![feature(non_exhaustive)]\n \n #[non_exhaustive]\n pub enum UninhabitedEnum {"}, {"sha": "e3de94be1282e4d2511c262eeef595edb43e1b6e", "filename": "src/test/ui/rfc-2008-non-exhaustive/uninhabited/patterns_same_crate.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Funinhabited%2Fpatterns_same_crate.stderr?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,5 +1,5 @@\n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:53:9\n+  --> $DIR/patterns_same_crate.rs:52:9\n    |\n LL |         Some(_x) => (),\n    |         ^^^^^^^^\n@@ -11,25 +11,25 @@ LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:58:9\n+  --> $DIR/patterns_same_crate.rs:57:9\n    |\n LL |         Some(_x) => (),\n    |         ^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:62:15\n+  --> $DIR/patterns_same_crate.rs:61:15\n    |\n LL |     while let PartiallyInhabitedVariants::Struct { x } = partially_inhabited_variant() {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:66:15\n+  --> $DIR/patterns_same_crate.rs:65:15\n    |\n LL |     while let Some(_x) = uninhabited_struct() {\n    |               ^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/patterns_same_crate.rs:69:15\n+  --> $DIR/patterns_same_crate.rs:68:15\n    |\n LL |     while let Some(_x) = uninhabited_tuple_struct() {\n    |               ^^^^^^^^"}, {"sha": "5f2816ec621022e6468cdd393f865956c8bb01d2", "filename": "src/test/ui/rfc-2008-non-exhaustive/variants_same_crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_same_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/959b6e324ce2786a4adade6cef222ffbd20f3791/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_same_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariants_same_crate.rs?ref=959b6e324ce2786a4adade6cef222ffbd20f3791", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(non_exhaustive)]\n-\n pub enum NonExhaustiveVariants {\n     #[non_exhaustive] Unit,\n     #[non_exhaustive] Tuple(u32),"}]}