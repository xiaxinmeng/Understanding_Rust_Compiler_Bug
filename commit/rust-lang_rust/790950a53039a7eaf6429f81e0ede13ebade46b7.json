{"sha": "790950a53039a7eaf6429f81e0ede13ebade46b7", "node_id": "C_kwDOAAsO6NoAKDc5MDk1MGE1MzAzOWE3ZWFmNjQyOWY4MWUwZWRlMTNlYmFkZTQ2Yjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-21T07:33:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-21T07:33:39Z"}, "message": "Rollup merge of #91770 - TaKO8Ki:suggest-adding-cfg-test, r=joshtriplett\n\nSuggest adding a `#[cfg(test)]` to to a test module\n\ncloses #88138", "tree": {"sha": "18f2a8708a03c55c42f7226c498ffe064e451413", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18f2a8708a03c55c42f7226c498ffe064e451413"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/790950a53039a7eaf6429f81e0ede13ebade46b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhwYNTCRBK7hj4Ov3rIwAAo1MIAKnJQhaYY8XhcXxGVtNoNlvB\n/0000A1WYmNaJJ3pkplbz9lY9TMPPO+LY8FkVwaX5eDpyIYk+WLS2ReFJzGKp/zq\nJoI8nEd7nldj7hbyRG0CcPSSidYreZUqDPjvXLI5WN3/eqIP0g+ndIhXfyy6pv+K\nRuQT4FdXUCFyHEce59KccpW0rGk1wBLynYyToIb3zuVTRbOX2IKO/9WJ6HZXu1QO\nnug520YGcwPp4q2JDYVpJ2Gr1lVjQt8yNgPKoCm+58zNG3UaJ+7OmuHckTH8gmMy\nDsoY5mp9kv37xgaLFKrco1rMpuFmJyTGjmGSLkpTqL5LKpkThW19uB3t9p45QYI=\n=wpfh\n-----END PGP SIGNATURE-----\n", "payload": "tree 18f2a8708a03c55c42f7226c498ffe064e451413\nparent af09d24ff66b336c8bc76b66dce19c5a4507e881\nparent 6f8ad6d83ab8cc52769c6abae2b869540fe38d04\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1640072019 +0100\ncommitter GitHub <noreply@github.com> 1640072019 +0100\n\nRollup merge of #91770 - TaKO8Ki:suggest-adding-cfg-test, r=joshtriplett\n\nSuggest adding a `#[cfg(test)]` to to a test module\n\ncloses #88138\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/790950a53039a7eaf6429f81e0ede13ebade46b7", "html_url": "https://github.com/rust-lang/rust/commit/790950a53039a7eaf6429f81e0ede13ebade46b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/790950a53039a7eaf6429f81e0ede13ebade46b7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af09d24ff66b336c8bc76b66dce19c5a4507e881", "url": "https://api.github.com/repos/rust-lang/rust/commits/af09d24ff66b336c8bc76b66dce19c5a4507e881", "html_url": "https://github.com/rust-lang/rust/commit/af09d24ff66b336c8bc76b66dce19c5a4507e881"}, {"sha": "6f8ad6d83ab8cc52769c6abae2b869540fe38d04", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8ad6d83ab8cc52769c6abae2b869540fe38d04", "html_url": "https://github.com/rust-lang/rust/commit/6f8ad6d83ab8cc52769c6abae2b869540fe38d04"}], "stats": {"total": 268, "additions": 264, "deletions": 4}, "files": [{"sha": "69c376c6169ba3279d300efc544a09685628d9a8", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/790950a53039a7eaf6429f81e0ede13ebade46b7/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790950a53039a7eaf6429f81e0ede13ebade46b7/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=790950a53039a7eaf6429f81e0ede13ebade46b7", "patch": "@@ -661,14 +661,22 @@ pub trait LintContext: Sized {\n                 BuiltinLintDiagnostics::UnknownCrateTypes(span, note, sugg) => {\n                     db.span_suggestion(span, &note, sugg, Applicability::MaybeIncorrect);\n                 }\n-                BuiltinLintDiagnostics::UnusedImports(message, replaces) => {\n+                BuiltinLintDiagnostics::UnusedImports(message, replaces, in_test_module) => {\n                     if !replaces.is_empty() {\n                         db.tool_only_multipart_suggestion(\n                             &message,\n                             replaces,\n                             Applicability::MachineApplicable,\n                         );\n                     }\n+\n+                    if let Some(span) = in_test_module {\n+                        let def_span = self.sess().source_map().guess_head_span(span);\n+                        db.span_help(\n+                            span.shrink_to_lo().to(def_span),\n+                            \"consider adding a `#[cfg(test)]` to the containing module\",\n+                        );\n+                    }\n                 }\n                 BuiltinLintDiagnostics::RedundantImport(spans, ident) => {\n                     for (span, is_imported) in spans {"}, {"sha": "97f6df51f88dd1ee4918b3fe1f8741e8f902b727", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/790950a53039a7eaf6429f81e0ede13ebade46b7/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790950a53039a7eaf6429f81e0ede13ebade46b7/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=790950a53039a7eaf6429f81e0ede13ebade46b7", "patch": "@@ -289,7 +289,7 @@ pub enum BuiltinLintDiagnostics {\n     ProcMacroDeriveResolutionFallback(Span),\n     MacroExpandedMacroExportsAccessedByAbsolutePaths(Span),\n     UnknownCrateTypes(Span, String, String),\n-    UnusedImports(String, Vec<(Span, String)>),\n+    UnusedImports(String, Vec<(Span, String)>, Option<Span>),\n     RedundantImport(Vec<(Span, bool)>, Ident),\n     DeprecatedMacro(Option<Symbol>, Span),\n     MissingAbi(Span, Abi),"}, {"sha": "74edc3a2d5e6ff4aab7c25e957a171beafdb59f9", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/790950a53039a7eaf6429f81e0ede13ebade46b7/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790950a53039a7eaf6429f81e0ede13ebade46b7/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=790950a53039a7eaf6429f81e0ede13ebade46b7", "patch": "@@ -108,7 +108,7 @@ impl<'a> Resolver<'a> {\n     /// Reachable macros with block module parents exist due to `#[macro_export] macro_rules!`,\n     /// but they cannot use def-site hygiene, so the assumption holds\n     /// (<https://github.com/rust-lang/rust/pull/77984#issuecomment-712445508>).\n-    fn get_nearest_non_block_module(&mut self, mut def_id: DefId) -> Module<'a> {\n+    crate fn get_nearest_non_block_module(&mut self, mut def_id: DefId) -> Module<'a> {\n         loop {\n             match self.get_module(def_id) {\n                 Some(module) => return module,"}, {"sha": "601f2d96ff5eb5b1df61a7d502e78c0fb792475f", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/790950a53039a7eaf6429f81e0ede13ebade46b7/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790950a53039a7eaf6429f81e0ede13ebade46b7/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=790950a53039a7eaf6429f81e0ede13ebade46b7", "patch": "@@ -24,6 +24,7 @@\n //    in the last step\n \n use crate::imports::ImportKind;\n+use crate::module_to_string;\n use crate::Resolver;\n \n use rustc_ast as ast;\n@@ -314,12 +315,29 @@ impl Resolver<'_> {\n                 \"remove the unused import\"\n             };\n \n+            let parent_module = visitor.r.get_nearest_non_block_module(\n+                visitor.r.local_def_id(unused.use_tree_id).to_def_id(),\n+            );\n+            let test_module_span = match module_to_string(parent_module) {\n+                Some(module)\n+                    if module == \"test\"\n+                        || module == \"tests\"\n+                        || module.starts_with(\"test_\")\n+                        || module.starts_with(\"tests_\")\n+                        || module.ends_with(\"_test\")\n+                        || module.ends_with(\"_tests\") =>\n+                {\n+                    Some(parent_module.span)\n+                }\n+                _ => None,\n+            };\n+\n             visitor.r.lint_buffer.buffer_lint_with_diagnostic(\n                 UNUSED_IMPORTS,\n                 unused.use_tree_id,\n                 ms,\n                 &msg,\n-                BuiltinLintDiagnostics::UnusedImports(fix_msg.into(), fixes),\n+                BuiltinLintDiagnostics::UnusedImports(fix_msg.into(), fixes, test_module_span),\n             );\n         }\n     }"}, {"sha": "b003b99b6cff0e08d783d27cba298d98f59fc592", "filename": "src/test/ui/imports/unused-imports-in-test-module.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/790950a53039a7eaf6429f81e0ede13ebade46b7/src%2Ftest%2Fui%2Fimports%2Funused-imports-in-test-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790950a53039a7eaf6429f81e0ede13ebade46b7/src%2Ftest%2Fui%2Fimports%2Funused-imports-in-test-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funused-imports-in-test-module.rs?ref=790950a53039a7eaf6429f81e0ede13ebade46b7", "patch": "@@ -0,0 +1,64 @@\n+#![deny(unused_imports)]\n+\n+use std::io::BufRead; //~ ERROR unused import: `std::io::BufRead`\n+\n+fn a() {}\n+fn b() {}\n+\n+mod test {\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+mod tests {\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+mod test_a {\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+mod a_test {\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+mod tests_a {\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+mod a_tests {\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+mod fastest_search {\n+    use super::a;  //~ ERROR unused import: `super::a`\n+\n+    fn foo() {\n+        use crate::b;  //~ ERROR unused import: `crate::b`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "2efea5b3609e17badb57075b95b9649ed506da83", "filename": "src/test/ui/imports/unused-imports-in-test-module.stderr", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/790950a53039a7eaf6429f81e0ede13ebade46b7/src%2Ftest%2Fui%2Fimports%2Funused-imports-in-test-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/790950a53039a7eaf6429f81e0ede13ebade46b7/src%2Ftest%2Fui%2Fimports%2Funused-imports-in-test-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funused-imports-in-test-module.stderr?ref=790950a53039a7eaf6429f81e0ede13ebade46b7", "patch": "@@ -0,0 +1,170 @@\n+error: unused import: `std::io::BufRead`\n+  --> $DIR/unused-imports-in-test-module.rs:3:5\n+   |\n+LL | use std::io::BufRead;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unused-imports-in-test-module.rs:1:9\n+   |\n+LL | #![deny(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-module.rs:9:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+   |\n+help: consider adding a `#[cfg(test)]` to the containing module\n+  --> $DIR/unused-imports-in-test-module.rs:8:1\n+   |\n+LL | mod test {\n+   | ^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-module.rs:12:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+   |\n+help: consider adding a `#[cfg(test)]` to the containing module\n+  --> $DIR/unused-imports-in-test-module.rs:8:1\n+   |\n+LL | mod test {\n+   | ^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-module.rs:17:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+   |\n+help: consider adding a `#[cfg(test)]` to the containing module\n+  --> $DIR/unused-imports-in-test-module.rs:16:1\n+   |\n+LL | mod tests {\n+   | ^^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-module.rs:20:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+   |\n+help: consider adding a `#[cfg(test)]` to the containing module\n+  --> $DIR/unused-imports-in-test-module.rs:16:1\n+   |\n+LL | mod tests {\n+   | ^^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-module.rs:25:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+   |\n+help: consider adding a `#[cfg(test)]` to the containing module\n+  --> $DIR/unused-imports-in-test-module.rs:24:1\n+   |\n+LL | mod test_a {\n+   | ^^^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-module.rs:28:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+   |\n+help: consider adding a `#[cfg(test)]` to the containing module\n+  --> $DIR/unused-imports-in-test-module.rs:24:1\n+   |\n+LL | mod test_a {\n+   | ^^^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-module.rs:33:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+   |\n+help: consider adding a `#[cfg(test)]` to the containing module\n+  --> $DIR/unused-imports-in-test-module.rs:32:1\n+   |\n+LL | mod a_test {\n+   | ^^^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-module.rs:36:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+   |\n+help: consider adding a `#[cfg(test)]` to the containing module\n+  --> $DIR/unused-imports-in-test-module.rs:32:1\n+   |\n+LL | mod a_test {\n+   | ^^^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-module.rs:41:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+   |\n+help: consider adding a `#[cfg(test)]` to the containing module\n+  --> $DIR/unused-imports-in-test-module.rs:40:1\n+   |\n+LL | mod tests_a {\n+   | ^^^^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-module.rs:44:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+   |\n+help: consider adding a `#[cfg(test)]` to the containing module\n+  --> $DIR/unused-imports-in-test-module.rs:40:1\n+   |\n+LL | mod tests_a {\n+   | ^^^^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-module.rs:49:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+   |\n+help: consider adding a `#[cfg(test)]` to the containing module\n+  --> $DIR/unused-imports-in-test-module.rs:48:1\n+   |\n+LL | mod a_tests {\n+   | ^^^^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-module.rs:52:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+   |\n+help: consider adding a `#[cfg(test)]` to the containing module\n+  --> $DIR/unused-imports-in-test-module.rs:48:1\n+   |\n+LL | mod a_tests {\n+   | ^^^^^^^^^^^\n+\n+error: unused import: `super::a`\n+  --> $DIR/unused-imports-in-test-module.rs:57:9\n+   |\n+LL |     use super::a;\n+   |         ^^^^^^^^\n+\n+error: unused import: `crate::b`\n+  --> $DIR/unused-imports-in-test-module.rs:60:13\n+   |\n+LL |         use crate::b;\n+   |             ^^^^^^^^\n+\n+error: aborting due to 15 previous errors\n+"}]}