{"sha": "0b8ee700842019365a679921ebf82db83501ff60", "node_id": "C_kwDOAAsO6NoAKDBiOGVlNzAwODQyMDE5MzY1YTY3OTkyMWViZjgyZGI4MzUwMWZmNjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-12T18:13:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-12T18:13:13Z"}, "message": "Auto merge of #10191 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "fb6c63214ef9871d31f5f00c6280633086d776b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb6c63214ef9871d31f5f00c6280633086d776b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b8ee700842019365a679921ebf82db83501ff60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b8ee700842019365a679921ebf82db83501ff60", "html_url": "https://github.com/rust-lang/rust/commit/0b8ee700842019365a679921ebf82db83501ff60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b8ee700842019365a679921ebf82db83501ff60/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9ca9d4112f021fd73258e13ec9e353738ba0482", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ca9d4112f021fd73258e13ec9e353738ba0482", "html_url": "https://github.com/rust-lang/rust/commit/f9ca9d4112f021fd73258e13ec9e353738ba0482"}, {"sha": "cd76d574e444197d692d8652c27f869038430af1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd76d574e444197d692d8652c27f869038430af1", "html_url": "https://github.com/rust-lang/rust/commit/cd76d574e444197d692d8652c27f869038430af1"}], "stats": {"total": 128, "additions": 64, "deletions": 64}, "files": [{"sha": "e70488165b99bb2dec1fc07cb0e3d6d8ce800ff7", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -5,6 +5,9 @@\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n+// The `rustc_driver` crate seems to be required in order to use the `rust_lexer` crate.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n extern crate rustc_lexer;\n \n use std::path::PathBuf;"}, {"sha": "27cc5a1c3f04c5e53fc4008a18e611a2677035e2", "filename": "clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -68,7 +68,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: &Msrv\n fn is_child_of_cast(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let map = cx.tcx.hir();\n     if_chain! {\n-        if let Some(parent_id) = map.find_parent_node(expr.hir_id);\n+        if let Some(parent_id) = map.opt_parent_id(expr.hir_id);\n         if let Some(parent) = map.find(parent_id);\n         then {\n             let expr = match parent {"}, {"sha": "f327c9a71b3c1f420e98fe502841ac60f1f58df4", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -969,14 +969,14 @@ fn binding_ty_auto_deref_stability<'tcx>(\n     precedence: i8,\n     binder_args: &'tcx List<BoundVariableKind>,\n ) -> Position {\n-    let TyKind::Rptr(_, ty) = &ty.kind else {\n+    let TyKind::Ref(_, ty) = &ty.kind else {\n         return Position::Other(precedence);\n     };\n     let mut ty = ty;\n \n     loop {\n         break match ty.ty.kind {\n-            TyKind::Rptr(_, ref ref_ty) => {\n+            TyKind::Ref(_, ref ref_ty) => {\n                 ty = ref_ty;\n                 continue;\n             },"}, {"sha": "dfb43893326eb8a225ee72b7ef0ce5feaecd0886", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -131,7 +131,7 @@ fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n         _ => return false,\n     }\n \n-    matches!(map.find(map.get_parent_node(id)), Some(Node::Param(_)))\n+    matches!(map.find_parent(id), Some(Node::Param(_)))\n }\n \n impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n@@ -156,8 +156,8 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n             let map = &self.cx.tcx.hir();\n             if is_argument(*map, cmt.hir_id) {\n                 // Skip closure arguments\n-                let parent_id = map.get_parent_node(cmt.hir_id);\n-                if let Some(Node::Expr(..)) = map.find(map.get_parent_node(parent_id)) {\n+                let parent_id = map.parent_id(cmt.hir_id);\n+                if let Some(Node::Expr(..)) = map.find_parent(parent_id) {\n                     return;\n                 }\n "}, {"sha": "bdeddf44df7bd27839af48aa48ff7654794eb57b", "filename": "clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -251,15 +251,15 @@ impl<'a, 'tcx> Visitor<'tcx> for SliceIndexLintingVisitor<'a, 'tcx> {\n                 let map = cx.tcx.hir();\n \n                 // Checking for slice indexing\n-                let parent_id = map.get_parent_node(expr.hir_id);\n+                let parent_id = map.parent_id(expr.hir_id);\n                 if let Some(hir::Node::Expr(parent_expr)) = map.find(parent_id);\n                 if let hir::ExprKind::Index(_, index_expr) = parent_expr.kind;\n                 if let Some((Constant::Int(index_value), _)) = constant(cx, cx.typeck_results(), index_expr);\n                 if let Ok(index_value) = index_value.try_into();\n                 if index_value < max_suggested_slice;\n \n                 // Make sure that this slice index is read only\n-                let maybe_addrof_id = map.get_parent_node(parent_id);\n+                let maybe_addrof_id = map.parent_id(parent_id);\n                 if let Some(hir::Node::Expr(maybe_addrof_expr)) = map.find(maybe_addrof_id);\n                 if let hir::ExprKind::AddrOf(_kind, hir::Mutability::Not, _inner_expr) = maybe_addrof_expr.kind;\n                 then {"}, {"sha": "540656a2cd991d8f497e1531db137fd69bc2ed6d", "filename": "clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -63,7 +63,7 @@ pub(super) fn check<'tcx>(\n                                 if let Node::Pat(pat) = node;\n                                 if let PatKind::Binding(bind_ann, ..) = pat.kind;\n                                 if !matches!(bind_ann, BindingAnnotation(_, Mutability::Mut));\n-                                let parent_node = cx.tcx.hir().get_parent_node(hir_id);\n+                                let parent_node = cx.tcx.hir().parent_id(hir_id);\n                                 if let Some(Node::Local(parent_let_expr)) = cx.tcx.hir().find(parent_node);\n                                 if let Some(init) = parent_let_expr.init;\n                                 then {"}, {"sha": "63212beaa63dd6b584685baf4650f718f8d0df2e", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -152,7 +152,7 @@ fn captures_all_lifetimes(inputs: &[Ty<'_>], output_lifetimes: &[LifetimeName])\n     let input_lifetimes: Vec<LifetimeName> = inputs\n         .iter()\n         .filter_map(|ty| {\n-            if let TyKind::Rptr(lt, _) = ty.kind {\n+            if let TyKind::Ref(lt, _) = ty.kind {\n                 Some(lt.res)\n             } else {\n                 None"}, {"sha": "38f41d077c161f941764e897216d62c4fdd60b55", "filename": "clippy_lints/src/manual_rem_euclid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_rem_euclid.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -74,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualRemEuclid {\n             && let Some(hir_id) = path_to_local(expr3)\n             && let Some(Node::Pat(_)) = cx.tcx.hir().find(hir_id) {\n                 // Apply only to params or locals with annotated types\n-                match cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+                match cx.tcx.hir().find_parent(hir_id) {\n                     Some(Node::Param(..)) => (),\n                     Some(Node::Local(local)) => {\n                         let Some(ty) = local.ty else { return };"}, {"sha": "065a5c72621cd50e1617c767874a01f361a41dfb", "filename": "clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -140,8 +140,8 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n fn opt_parent_assign_span<'a>(cx: &LateContext<'a>, ex: &Expr<'a>) -> Option<AssignmentExpr> {\n     let map = &cx.tcx.hir();\n \n-    if let Some(Node::Expr(parent_arm_expr)) = map.find(map.get_parent_node(ex.hir_id)) {\n-        return match map.find(map.get_parent_node(parent_arm_expr.hir_id)) {\n+    if let Some(Node::Expr(parent_arm_expr)) = map.find_parent(ex.hir_id) {\n+        return match map.find_parent(parent_arm_expr.hir_id) {\n             Some(Node::Local(parent_let_expr)) => Some(AssignmentExpr::Local {\n                 span: parent_let_expr.span,\n                 pat_span: parent_let_expr.pat.span(),\n@@ -183,8 +183,7 @@ fn sugg_with_curlies<'a>(\n \n     // If the parent is already an arm, and the body is another match statement,\n     // we need curly braces around suggestion\n-    let parent_node_id = cx.tcx.hir().get_parent_node(match_expr.hir_id);\n-    if let Node::Arm(arm) = &cx.tcx.hir().get(parent_node_id) {\n+    if let Node::Arm(arm) = &cx.tcx.hir().get_parent(match_expr.hir_id) {\n         if let ExprKind::Match(..) = arm.body.kind {\n             cbrace_end = format!(\"\\n{indent}}}\");\n             // Fix body indent due to the match"}, {"sha": "77be61b4793403d2a9ba489df6daab12103b8841", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -3986,7 +3986,7 @@ impl OutType {\n             (Self::Unit, &hir::FnRetTy::Return(ty)) if is_unit(ty) => true,\n             (Self::Bool, &hir::FnRetTy::Return(ty)) if is_bool(ty) => true,\n             (Self::Any, &hir::FnRetTy::Return(ty)) if !is_unit(ty) => true,\n-            (Self::Ref, &hir::FnRetTy::Return(ty)) => matches!(ty.kind, hir::TyKind::Rptr(_, _)),\n+            (Self::Ref, &hir::FnRetTy::Return(ty)) => matches!(ty.kind, hir::TyKind::Ref(_, _)),\n             _ => false,\n         }\n     }"}, {"sha": "f0be7771bb1a6d6d44f2f7263915d251aa665d50", "filename": "clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -186,7 +186,7 @@ fn check_for_unsequenced_reads(vis: &mut ReadVisitor<'_, '_>) {\n     let map = &vis.cx.tcx.hir();\n     let mut cur_id = vis.write_expr.hir_id;\n     loop {\n-        let parent_id = map.get_parent_node(cur_id);\n+        let parent_id = map.parent_id(cur_id);\n         if parent_id == cur_id {\n             break;\n         }"}, {"sha": "64d8333a093b1143047981a19414a00cb4c33dd5", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -86,15 +86,15 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n             return;\n         }\n \n-        if let hir::TyKind::Rptr(\n+        if let hir::TyKind::Ref(\n             _,\n             hir::MutTy {\n                 ty: pty,\n                 mutbl: hir::Mutability::Mut,\n             },\n         ) = ty.kind\n         {\n-            if let hir::TyKind::Rptr(\n+            if let hir::TyKind::Ref(\n                 _,\n                 hir::MutTy {\n                     mutbl: hir::Mutability::Mut,"}, {"sha": "5457eeec4eacf249c2b1fef96d88f3e7a62da831", "filename": "clippy_lints/src/needless_arbitrary_self_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -124,7 +124,7 @@ impl EarlyLintPass for NeedlessArbitrarySelfType {\n                     check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Value, mutbl);\n                 }\n             },\n-            TyKind::Rptr(lifetime, mut_ty) => {\n+            TyKind::Ref(lifetime, mut_ty) => {\n                 if_chain! {\n                 if let TyKind::Path(None, path) = &mut_ty.ty.kind;\n                 if let PatKind::Ident(BindingAnnotation::NONE, _, _) = p.pat.kind;"}, {"sha": "1249db5dc4792307ed353ba64dfd959e8a7368b4", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -100,7 +100,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         }\n \n         // Exclude non-inherent impls\n-        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find_parent(hir_id) {\n             if matches!(\n                 item.kind,\n                 ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)"}, {"sha": "07fd321d69fced8a6ac11ebb3bb790a90fdf1bd3", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -366,7 +366,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n             let mut dereferenced_expr = expr;\n             let mut needs_check_adjustment = true;\n             loop {\n-                let parent_id = cx.tcx.hir().get_parent_node(cur_expr.hir_id);\n+                let parent_id = cx.tcx.hir().parent_id(cur_expr.hir_id);\n                 if parent_id == cur_expr.hir_id {\n                     break;\n                 }"}, {"sha": "870a1c7d88d532bd6eadbf148acde49fd64b58be", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -184,7 +184,7 @@ impl<'tcx> PassByRefOrValue {\n                     if is_copy(cx, ty)\n                         && let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes())\n                         && size <= self.ref_min_size\n-                        && let hir::TyKind::Rptr(_, MutTy { ty: decl_ty, .. }) = input.kind\n+                        && let hir::TyKind::Ref(_, MutTy { ty: decl_ty, .. }) = input.kind\n                     {\n                         if let Some(typeck) = cx.maybe_typeck_results() {\n                             // Don't lint if an unsafe pointer is created.\n@@ -299,7 +299,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByRefOrValue {\n         }\n \n         // Exclude non-inherent impls\n-        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find_parent(hir_id) {\n             if matches!(\n                 item.kind,\n                 ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)"}, {"sha": "262953042581ab5269cb97221a946830c14059ef", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -421,7 +421,7 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                 if let ty::Ref(_, ty, mutability) = *ty.kind();\n                 if let ty::Adt(adt, substs) = *ty.kind();\n \n-                if let TyKind::Rptr(lt, ref ty) = hir_ty.kind;\n+                if let TyKind::Ref(lt, ref ty) = hir_ty.kind;\n                 if let TyKind::Path(QPath::Resolved(None, path)) = ty.ty.kind;\n \n                 // Check that the name as typed matches the actual name of the type.\n@@ -503,14 +503,14 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n \n fn check_mut_from_ref<'tcx>(cx: &LateContext<'tcx>, sig: &FnSig<'_>, body: Option<&'tcx Body<'_>>) {\n     if let FnRetTy::Return(ty) = sig.decl.output\n-        && let Some((out, Mutability::Mut, _)) = get_rptr_lm(ty)\n+        && let Some((out, Mutability::Mut, _)) = get_ref_lm(ty)\n     {\n         let out_region = cx.tcx.named_region(out.hir_id);\n         let args: Option<Vec<_>> = sig\n             .decl\n             .inputs\n             .iter()\n-            .filter_map(get_rptr_lm)\n+            .filter_map(get_ref_lm)\n             .filter(|&(lt, _, _)| cx.tcx.named_region(lt.hir_id) == out_region)\n             .map(|(_, mutability, span)| (mutability == Mutability::Not).then_some(span))\n             .collect();\n@@ -704,8 +704,8 @@ fn matches_preds<'tcx>(\n     })\n }\n \n-fn get_rptr_lm<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability, Span)> {\n-    if let TyKind::Rptr(lt, ref m) = ty.kind {\n+fn get_ref_lm<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability, Span)> {\n+    if let TyKind::Ref(lt, ref m) = ty.kind {\n         Some((lt, m.mutbl, ty.span))\n     } else {\n         None"}, {"sha": "44bf824aa0e2d432688e90827af89090640484dc", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -59,7 +59,7 @@ impl RedundantStaticLifetimes {\n                 }\n             },\n             // This is what we are looking for !\n-            TyKind::Rptr(ref optional_lifetime, ref borrow_type) => {\n+            TyKind::Ref(ref optional_lifetime, ref borrow_type) => {\n                 // Match the 'static lifetime\n                 if let Some(lifetime) = *optional_lifetime {\n                     match borrow_type.ty.kind {"}, {"sha": "448a32b77c036d92d2d5768db876c95c9317cbb6", "filename": "clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fref_option_ref.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -39,7 +39,7 @@ declare_lint_pass!(RefOptionRef => [REF_OPTION_REF]);\n impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n     fn check_ty(&mut self, cx: &LateContext<'tcx>, ty: &'tcx Ty<'tcx>) {\n         if_chain! {\n-            if let TyKind::Rptr(_, ref mut_ty) = ty.kind;\n+            if let TyKind::Ref(_, ref mut_ty) = ty.kind;\n             if mut_ty.mutbl == Mutability::Not;\n             if let TyKind::Path(ref qpath) = &mut_ty.ty.kind;\n             let last = last_path_segment(qpath);\n@@ -52,7 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n                 GenericArg::Type(inner_ty) => Some(inner_ty),\n                 _ => None,\n             });\n-            if let TyKind::Rptr(_, ref inner_mut_ty) = inner_ty.kind;\n+            if let TyKind::Ref(_, ref inner_mut_ty) = inner_ty.kind;\n             if inner_mut_ty.mutbl == Mutability::Not;\n \n             then {"}, {"sha": "54ac04df1c12ab9bc96a5f1e8edf7aeb80ff60b5", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -71,7 +71,7 @@ pub(super) fn check<'tcx>(\n /// Gets the type `Bar` in `\u2026::transmute<Foo, &Bar>`.\n fn get_explicit_type<'tcx>(path: &'tcx Path<'tcx>) -> Option<&'tcx hir::Ty<'tcx>> {\n     if let GenericArg::Type(ty) = path.segments.last()?.args?.args.get(1)?\n-        && let TyKind::Rptr(_, ty) = &ty.kind\n+        && let TyKind::Ref(_, ty) = &ty.kind\n     {\n         Some(ty.ty)\n     } else {"}, {"sha": "229478b7ce3c9c2b72cf80617fa2f204f3fe38f2", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -539,7 +539,7 @@ impl Types {\n                     QPath::LangItem(..) => {},\n                 }\n             },\n-            TyKind::Rptr(lt, ref mut_ty) => {\n+            TyKind::Ref(lt, ref mut_ty) => {\n                 context.is_nested_call = true;\n                 if !borrowed_box::check(cx, hir_ty, lt, mut_ty) {\n                     self.check_ty(cx, mut_ty.ty, context);"}, {"sha": "0aa50c99c16904abed7bfd0c3ddb278a11877264", "filename": "clippy_lints/src/types/type_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -44,7 +44,7 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'_>) {\n         let (add_score, sub_nest) = match ty.kind {\n             // _, &x and *x have only small overhead; don't mess with nesting level\n-            TyKind::Infer | TyKind::Ptr(..) | TyKind::Rptr(..) => (1, 0),\n+            TyKind::Infer | TyKind::Ptr(..) | TyKind::Ref(..) => (1, 0),\n \n             // the \"normal\" components of a type: named types, arrays/tuples\n             TyKind::Path(..) | TyKind::Slice(..) | TyKind::Tup(..) | TyKind::Array(..) => (10 * self.nest, 1),"}, {"sha": "7f43b7841ff33d887668c2b321e686db081d9d76", "filename": "clippy_lints/src/types/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Ftypes%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Ftypes%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Futils.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -13,7 +13,7 @@ pub(super) fn match_borrows_parameter(_cx: &LateContext<'_>, qpath: &QPath<'_>)\n             GenericArg::Type(ty) => Some(ty),\n             _ => None,\n         });\n-        if let TyKind::Rptr(..) = ty.kind;\n+        if let TyKind::Ref(..) = ty.kind;\n         then {\n             return Some(ty.span);\n         }"}, {"sha": "dd120599c04e1b9c6f0175a4644e4c14dd1b00c8", "filename": "clippy_lints/src/unit_types/unit_arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_arg.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -21,7 +21,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n         return;\n     }\n     let map = &cx.tcx.hir();\n-    let opt_parent_node = map.find(map.get_parent_node(expr.hir_id));\n+    let opt_parent_node = map.find_parent(expr.hir_id);\n     if_chain! {\n         if let Some(hir::Node::Expr(parent_expr)) = opt_parent_node;\n         if is_questionmark_desugar_marked_call(parent_expr);\n@@ -192,7 +192,7 @@ fn fmt_stmts_and_call(\n \n     let mut stmts_and_call_snippet = stmts_and_call.join(&format!(\"{}{}\", \";\\n\", \" \".repeat(call_expr_indent)));\n     // expr is not in a block statement or result expression position, wrap in a block\n-    let parent_node = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(call_expr.hir_id));\n+    let parent_node = cx.tcx.hir().find_parent(call_expr.hir_id);\n     if !matches!(parent_node, Some(Node::Block(_))) && !matches!(parent_node, Some(Node::Stmt(_))) {\n         let block_indent = call_expr_indent + 4;\n         stmts_and_call_snippet ="}, {"sha": "84ec0d0fb1cf4ccf42e4bf43e8b4c34f84d192c1", "filename": "clippy_lints/src/unnecessary_wraps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Funnecessary_wraps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_wraps.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryWraps {\n         }\n \n         // Abort if the method is implementing a trait or of it a trait method.\n-        if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+        if let Some(Node::Item(item)) = cx.tcx.hir().find_parent(hir_id) {\n             if matches!(\n                 item.kind,\n                 ItemKind::Impl(Impl { of_trait: Some(_), .. }) | ItemKind::Trait(..)"}, {"sha": "4c3b1b131fd4caeea3f8d3951382f1a02defd374", "filename": "clippy_lints/src/utils/internal_lints/lint_without_lint_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -257,7 +257,7 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n }\n \n pub(super) fn is_lint_ref_type(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n-    if let TyKind::Rptr(\n+    if let TyKind::Ref(\n         _,\n         MutTy {\n             ty: inner,"}, {"sha": "c4d8c28f0606184bfee6ffd13299833935175681", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -1058,7 +1058,7 @@ fn get_parent_local<'hir>(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hir>) -\n fn get_parent_local_hir_id<'hir>(cx: &LateContext<'hir>, hir_id: hir::HirId) -> Option<&'hir hir::Local<'hir>> {\n     let map = cx.tcx.hir();\n \n-    match map.find(map.get_parent_node(hir_id)) {\n+    match map.find_parent(hir_id) {\n         Some(hir::Node::Local(local)) => Some(local),\n         Some(hir::Node::Pat(pattern)) => get_parent_local_hir_id(cx, pattern.hir_id),\n         _ => None,"}, {"sha": "7144363637a04a0d0213c7b9d696431605a61450", "filename": "clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -219,7 +219,7 @@ fn path_to_matched_type(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Ve\n     match peel_hir_expr_refs(expr).0.kind {\n         ExprKind::Path(ref qpath) => match cx.qpath_res(qpath, expr.hir_id) {\n             Res::Local(hir_id) => {\n-                let parent_id = cx.tcx.hir().get_parent_node(hir_id);\n+                let parent_id = cx.tcx.hir().parent_id(hir_id);\n                 if let Some(Node::Local(Local { init: Some(init), .. })) = cx.tcx.hir().find(parent_id) {\n                     path_to_matched_type(cx, init)\n                 } else {"}, {"sha": "9d0263e93be756939d9e7df6c36f50e7169f6d8e", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -625,7 +625,7 @@ pub fn eq_ty(l: &Ty, r: &Ty) -> bool {\n         (Slice(l), Slice(r)) => eq_ty(l, r),\n         (Array(le, ls), Array(re, rs)) => eq_ty(le, re) && eq_expr(&ls.value, &rs.value),\n         (Ptr(l), Ptr(r)) => l.mutbl == r.mutbl && eq_ty(&l.ty, &r.ty),\n-        (Rptr(ll, l), Rptr(rl, r)) => {\n+        (Ref(ll, l), Ref(rl, r)) => {\n             both(ll, rl, |l, r| eq_id(l.ident, r.ident)) && l.mutbl == r.mutbl && eq_ty(&l.ty, &r.ty)\n         },\n         (BareFn(l), BareFn(r)) => {"}, {"sha": "2bbe1a19b625a7e7eb19c77e88a8a8f2c8e566a5", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -430,7 +430,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&TyKind::Slice(l_vec), &TyKind::Slice(r_vec)) => self.eq_ty(l_vec, r_vec),\n             (&TyKind::Array(lt, ll), &TyKind::Array(rt, rl)) => self.eq_ty(lt, rt) && self.eq_array_length(ll, rl),\n             (TyKind::Ptr(l_mut), TyKind::Ptr(r_mut)) => l_mut.mutbl == r_mut.mutbl && self.eq_ty(l_mut.ty, r_mut.ty),\n-            (TyKind::Rptr(_, l_rmut), TyKind::Rptr(_, r_rmut)) => {\n+            (TyKind::Ref(_, l_rmut), TyKind::Ref(_, r_rmut)) => {\n                 l_rmut.mutbl == r_rmut.mutbl && self.eq_ty(l_rmut.ty, r_rmut.ty)\n             },\n             (TyKind::Path(l), TyKind::Path(r)) => self.eq_qpath(l, r),\n@@ -950,7 +950,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_ty(mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n-            TyKind::Rptr(lifetime, ref mut_ty) => {\n+            TyKind::Ref(lifetime, ref mut_ty) => {\n                 self.hash_lifetime(lifetime);\n                 self.hash_ty(mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);"}, {"sha": "7a4a9036dd3639ed82de815331ee68897ed37003", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -22,6 +22,9 @@ extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n extern crate rustc_data_structures;\n+// The `rustc_driver` crate seems to be required in order to use the `rust_ast` crate.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n extern crate rustc_errors;\n extern crate rustc_hir;\n extern crate rustc_hir_typeck;\n@@ -176,7 +179,7 @@ pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<\n     if_chain! {\n         if let Some(Node::Pat(pat)) = hir.find(hir_id);\n         if matches!(pat.kind, PatKind::Binding(BindingAnnotation::NONE, ..));\n-        let parent = hir.get_parent_node(hir_id);\n+        let parent = hir.parent_id(hir_id);\n         if let Some(Node::Local(local)) = hir.find(parent);\n         then {\n             return local.init;\n@@ -1300,7 +1303,7 @@ pub fn contains_return(expr: &hir::Expr<'_>) -> bool {\n \n /// Gets the parent node, if any.\n pub fn get_parent_node(tcx: TyCtxt<'_>, id: HirId) -> Option<Node<'_>> {\n-    tcx.hir().parent_iter(id).next().map(|(_, node)| node)\n+    tcx.hir().find_parent(id)\n }\n \n /// Gets the parent expression, if any \u2013- this is useful to constrain a lint.\n@@ -2089,7 +2092,7 @@ pub fn is_no_core_crate(cx: &LateContext<'_>) -> bool {\n /// }\n /// ```\n pub fn is_trait_impl_item(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n-    if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+    if let Some(Node::Item(item)) = cx.tcx.hir().find_parent(hir_id) {\n         matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n     } else {\n         false\n@@ -2290,7 +2293,7 @@ pub fn peel_hir_ty_refs<'a>(mut ty: &'a hir::Ty<'a>) -> (&'a hir::Ty<'a>, usize)\n     let mut count = 0;\n     loop {\n         match &ty.kind {\n-            TyKind::Rptr(_, ref_ty) => {\n+            TyKind::Ref(_, ref_ty) => {\n                 ty = ref_ty.ty;\n                 count += 1;\n             },"}, {"sha": "e7879bb196e428d3597b88d52d8d30fe83df6414", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -812,9 +812,9 @@ pub fn deref_closure_args(cx: &LateContext<'_>, closure: &hir::Expr<'_>) -> Opti\n         let closure_body = cx.tcx.hir().body(body);\n         // is closure arg a type annotated double reference (i.e.: `|x: &&i32| ...`)\n         // a type annotation is present if param `kind` is different from `TyKind::Infer`\n-        let closure_arg_is_type_annotated_double_ref = if let TyKind::Rptr(_, MutTy { ty, .. }) = fn_decl.inputs[0].kind\n+        let closure_arg_is_type_annotated_double_ref = if let TyKind::Ref(_, MutTy { ty, .. }) = fn_decl.inputs[0].kind\n         {\n-            matches!(ty.kind, TyKind::Rptr(_, MutTy { .. }))\n+            matches!(ty.kind, TyKind::Ref(_, MutTy { .. }))\n         } else {\n             false\n         };"}, {"sha": "c8d56a3be5cf356ca7c3723dd8cb29fbed2fbf79", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -496,7 +496,7 @@ pub fn type_is_unsafe_function<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bo\n /// Returns the base type for HIR references and pointers.\n pub fn walk_ptrs_hir_ty<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> &'tcx hir::Ty<'tcx> {\n     match ty.kind {\n-        TyKind::Ptr(ref mut_ty) | TyKind::Rptr(_, ref mut_ty) => walk_ptrs_hir_ty(mut_ty.ty),\n+        TyKind::Ptr(ref mut_ty) | TyKind::Ref(_, ref mut_ty) => walk_ptrs_hir_ty(mut_ty.ty),\n         _ => ty,\n     }\n }"}, {"sha": "40a6f47095ec2e59705f4f889ff1250a5af7065d", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-12-29\"\n+channel = \"nightly-2023-01-12\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "22ce1c6f6471b541dad4a7dda9b87aadb484db7c", "filename": "tests/ui/async_yields_async.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/tests%2Fui%2Fasync_yields_async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/tests%2Fui%2Fasync_yields_async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync_yields_async.stderr?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -3,8 +3,7 @@ error: an async construct yields a type which is itself awaitable\n    |\n LL |        let _h = async {\n    |  _____________________-\n-LL | |          async {\n-   | | _________^\n+LL | |/         async {\n LL | ||             3\n LL | ||         }\n    | ||_________^ awaitable value not awaited\n@@ -37,8 +36,7 @@ error: an async construct yields a type which is itself awaitable\n    |\n LL |        let _j = async || {\n    |  ________________________-\n-LL | |          async {\n-   | | _________^\n+LL | |/         async {\n LL | ||             3\n LL | ||         }\n    | ||_________^ awaitable value not awaited"}, {"sha": "8af60890390e79d7b48dd6fecd83045f93875e63", "filename": "tests/ui/crashes/ice-6254.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/tests%2Fui%2Fcrashes%2Fice-6254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/tests%2Fui%2Fcrashes%2Fice-6254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6254.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -1,4 +1,4 @@\n-// originally from ./src/test/ui/pattern/usefulness/consts-opaque.rs\n+// originally from ./tests/ui/pattern/usefulness/consts-opaque.rs\n // panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())',\n // compiler/rustc_mir_build/src/thir/pattern/_match.rs:2030:5\n "}, {"sha": "ccde6aa2b0f770147abb8cbae217bab9ff83e3b4", "filename": "tests/ui/crashes/ice-6255.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/tests%2Fui%2Fcrashes%2Fice-6255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/tests%2Fui%2Fcrashes%2Fice-6255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6255.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -1,4 +1,4 @@\n-// originally from rustc ./src/test/ui/macros/issue-78325-inconsistent-resolution.rs\n+// originally from rustc ./tests/ui/macros/issue-78325-inconsistent-resolution.rs\n // inconsistent resolution for a macro\n \n macro_rules! define_other_core {"}, {"sha": "f9ee3e058c111470ba38775b7780044ae245e75e", "filename": "tests/ui/crashes/ice-6256.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/tests%2Fui%2Fcrashes%2Fice-6256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/tests%2Fui%2Fcrashes%2Fice-6256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6256.rs?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -1,4 +1,4 @@\n-// originally from rustc ./src/test/ui/regions/issue-78262.rs\n+// originally from rustc ./tests/ui/regions/issue-78262.rs\n // ICE: to get the signature of a closure, use substs.as_closure().sig() not fn_sig()\n #![allow(clippy::upper_case_acronyms)]\n "}, {"sha": "d0e534f635682cefd2e12a4f3a390cb3ff7cc3ef", "filename": "tests/ui/result_map_unit_fn_unfixable.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0b8ee700842019365a679921ebf82db83501ff60/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b8ee700842019365a679921ebf82db83501ff60/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr?ref=0b8ee700842019365a679921ebf82db83501ff60", "patch": "@@ -19,10 +19,7 @@ LL |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value)\n error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_unfixable.rs:29:5\n    |\n-LL |        x.field.map(|value| {\n-   |  ______^\n-   | | _____|\n-   | ||\n+LL | //     x.field.map(|value| {\n LL | ||         do_nothing(value);\n LL | ||         do_nothing(value)\n LL | ||     });"}]}