{"sha": "dc9f5a205f3878410485783beb9de0ad6d6bfe31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjOWY1YTIwNWYzODc4NDEwNDg1NzgzYmViOWRlMGFkNmQ2YmZlMzE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-03T23:06:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-03T23:12:11Z"}, "message": "properly check for: double-free, use-after-reallocate", "tree": {"sha": "431760cf83565bdd1b71036cc363051b2473076a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/431760cf83565bdd1b71036cc363051b2473076a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc9f5a205f3878410485783beb9de0ad6d6bfe31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc9f5a205f3878410485783beb9de0ad6d6bfe31", "html_url": "https://github.com/rust-lang/rust/commit/dc9f5a205f3878410485783beb9de0ad6d6bfe31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc9f5a205f3878410485783beb9de0ad6d6bfe31/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff5d59efe5c08634646281e265fdbb8e64f05d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff5d59efe5c08634646281e265fdbb8e64f05d1", "html_url": "https://github.com/rust-lang/rust/commit/8ff5d59efe5c08634646281e265fdbb8e64f05d1"}], "stats": {"total": 176, "additions": 110, "deletions": 66}, "files": [{"sha": "46a3096930555e92a1746efd840a085b120b46f6", "filename": "src/error.rs", "status": "modified", "additions": 71, "deletions": 60, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/dc9f5a205f3878410485783beb9de0ad6d6bfe31/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9f5a205f3878410485783beb9de0ad6d6bfe31/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=dc9f5a205f3878410485783beb9de0ad6d6bfe31", "patch": "@@ -58,6 +58,9 @@ pub enum EvalError<'tcx> {\n     TypeNotPrimitive(Ty<'tcx>),\n     ReallocatedStaticMemory,\n     DeallocatedStaticMemory,\n+    ReallocateNonBasePtr,\n+    DeallocateNonBasePtr,\n+    IncorrectAllocationInformation,\n     Layout(layout::LayoutError<'tcx>),\n     HeapAllocZeroBytes,\n     HeapAllocNonPowerOfTwoAlignment(u64),\n@@ -72,98 +75,105 @@ pub type EvalResult<'tcx, T = ()> = Result<T, EvalError<'tcx>>;\n \n impl<'tcx> Error for EvalError<'tcx> {\n     fn description(&self) -> &str {\n+        use EvalError::*;\n         match *self {\n-            EvalError::FunctionPointerTyMismatch(..) =>\n+            FunctionPointerTyMismatch(..) =>\n                 \"tried to call a function through a function pointer of a different type\",\n-            EvalError::InvalidMemoryAccess =>\n+            InvalidMemoryAccess =>\n                 \"tried to access memory through an invalid pointer\",\n-            EvalError::DanglingPointerDeref =>\n+            DanglingPointerDeref =>\n                 \"dangling pointer was dereferenced\",\n-            EvalError::InvalidFunctionPointer =>\n+            InvalidFunctionPointer =>\n                 \"tried to use an integer pointer or a dangling pointer as a function pointer\",\n-            EvalError::InvalidBool =>\n+            InvalidBool =>\n                 \"invalid boolean value read\",\n-            EvalError::InvalidDiscriminant =>\n+            InvalidDiscriminant =>\n                 \"invalid enum discriminant value read\",\n-            EvalError::PointerOutOfBounds { .. } =>\n+            PointerOutOfBounds { .. } =>\n                 \"pointer offset outside bounds of allocation\",\n-            EvalError::InvalidNullPointerUsage =>\n+            InvalidNullPointerUsage =>\n                 \"invalid use of NULL pointer\",\n-            EvalError::ReadPointerAsBytes =>\n+            ReadPointerAsBytes =>\n                 \"a raw memory access tried to access part of a pointer value as raw bytes\",\n-            EvalError::ReadBytesAsPointer =>\n+            ReadBytesAsPointer =>\n                 \"a memory access tried to interpret some bytes as a pointer\",\n-            EvalError::InvalidPointerMath =>\n+            InvalidPointerMath =>\n                 \"attempted to do invalid arithmetic on pointers that would leak base addresses, e.g. comparing pointers into different allocations\",\n-            EvalError::ReadUndefBytes =>\n+            ReadUndefBytes =>\n                 \"attempted to read undefined bytes\",\n-            EvalError::DeadLocal =>\n+            DeadLocal =>\n                 \"tried to access a dead local variable\",\n-            EvalError::InvalidBoolOp(_) =>\n+            InvalidBoolOp(_) =>\n                 \"invalid boolean operation\",\n-            EvalError::Unimplemented(ref msg) => msg,\n-            EvalError::DerefFunctionPointer =>\n+            Unimplemented(ref msg) => msg,\n+            DerefFunctionPointer =>\n                 \"tried to dereference a function pointer\",\n-            EvalError::ExecuteMemory =>\n+            ExecuteMemory =>\n                 \"tried to treat a memory pointer as a function pointer\",\n-            EvalError::ArrayIndexOutOfBounds(..) =>\n+            ArrayIndexOutOfBounds(..) =>\n                 \"array index out of bounds\",\n-            EvalError::Math(..) =>\n+            Math(..) =>\n                 \"mathematical operation failed\",\n-            EvalError::Intrinsic(..) =>\n+            Intrinsic(..) =>\n                 \"intrinsic failed\",\n-            EvalError::OverflowingMath =>\n+            OverflowingMath =>\n                 \"attempted to do overflowing math\",\n-            EvalError::NoMirFor(..) =>\n+            NoMirFor(..) =>\n                 \"mir not found\",\n-            EvalError::InvalidChar(..) =>\n+            InvalidChar(..) =>\n                 \"tried to interpret an invalid 32-bit value as a char\",\n-            EvalError::OutOfMemory{..} =>\n+            OutOfMemory{..} =>\n                 \"could not allocate more memory\",\n-            EvalError::ExecutionTimeLimitReached =>\n+            ExecutionTimeLimitReached =>\n                 \"reached the configured maximum execution time\",\n-            EvalError::StackFrameLimitReached =>\n+            StackFrameLimitReached =>\n                 \"reached the configured maximum number of stack frames\",\n-            EvalError::OutOfTls =>\n+            OutOfTls =>\n                 \"reached the maximum number of representable TLS keys\",\n-            EvalError::TlsOutOfBounds =>\n+            TlsOutOfBounds =>\n                 \"accessed an invalid (unallocated) TLS key\",\n-            EvalError::AbiViolation(ref msg) => msg,\n-            EvalError::AlignmentCheckFailed{..} =>\n+            AbiViolation(ref msg) => msg,\n+            AlignmentCheckFailed{..} =>\n                 \"tried to execute a misaligned read or write\",\n-            EvalError::CalledClosureAsFunction =>\n+            CalledClosureAsFunction =>\n                 \"tried to call a closure through a function pointer\",\n-            EvalError::VtableForArgumentlessMethod =>\n+            VtableForArgumentlessMethod =>\n                 \"tried to call a vtable function without arguments\",\n-            EvalError::ModifiedConstantMemory =>\n+            ModifiedConstantMemory =>\n                 \"tried to modify constant memory\",\n-            EvalError::AssumptionNotHeld =>\n+            AssumptionNotHeld =>\n                 \"`assume` argument was false\",\n-            EvalError::InlineAsm =>\n+            InlineAsm =>\n                 \"miri does not support inline assembly\",\n-            EvalError::TypeNotPrimitive(_) =>\n+            TypeNotPrimitive(_) =>\n                 \"expected primitive type, got nonprimitive\",\n-            EvalError::ReallocatedStaticMemory =>\n+            ReallocatedStaticMemory =>\n                 \"tried to reallocate static memory\",\n-            EvalError::DeallocatedStaticMemory =>\n+            DeallocatedStaticMemory =>\n                 \"tried to deallocate static memory\",\n-            EvalError::Layout(_) =>\n+            ReallocateNonBasePtr =>\n+                \"tried to reallocate with a pointer not to the beginning of an existing object\",\n+            DeallocateNonBasePtr =>\n+                \"tried to deallocate with a pointer not to the beginning of an existing object\",\n+            IncorrectAllocationInformation =>\n+                \"tried to deallocate or reallocate using incorrect alignment or size\",\n+            Layout(_) =>\n                 \"rustc layout computation failed\",\n-            EvalError::UnterminatedCString(_) =>\n+            UnterminatedCString(_) =>\n                 \"attempted to get length of a null terminated string, but no null found before end of allocation\",\n-            EvalError::HeapAllocZeroBytes =>\n+            HeapAllocZeroBytes =>\n                 \"tried to re-, de- or allocate zero bytes on the heap\",\n-            EvalError::HeapAllocNonPowerOfTwoAlignment(_) =>\n+            HeapAllocNonPowerOfTwoAlignment(_) =>\n                 \"tried to re-, de-, or allocate heap memory with alignment that is not a power of two\",\n-            EvalError::Unreachable =>\n+            Unreachable =>\n                 \"entered unreachable code\",\n-            EvalError::Panic =>\n+            Panic =>\n                 \"the evaluated program panicked\",\n-            EvalError::NeedsRfc(_) =>\n+            NeedsRfc(_) =>\n                 \"this feature needs an rfc before being allowed inside constants\",\n-            EvalError::NotConst(_) =>\n+            NotConst(_) =>\n                 \"this feature is not compatible with constant evaluation\",\n-            EvalError::ReadFromReturnPointer =>\n+            ReadFromReturnPointer =>\n                 \"tried to read from the return pointer\",\n         }\n     }\n@@ -173,36 +183,37 @@ impl<'tcx> Error for EvalError<'tcx> {\n \n impl<'tcx> fmt::Display for EvalError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        use EvalError::*;\n         match *self {\n-            EvalError::PointerOutOfBounds { ptr, access, allocation_size } => {\n+            PointerOutOfBounds { ptr, access, allocation_size } => {\n                 write!(f, \"{} at offset {}, outside bounds of allocation {} which has size {}\",\n                        if access { \"memory access\" } else { \"pointer computed\" },\n                        ptr.offset, ptr.alloc_id, allocation_size)\n             },\n-            EvalError::NoMirFor(ref func) => write!(f, \"no mir for `{}`\", func),\n-            EvalError::FunctionPointerTyMismatch(sig, got) =>\n+            NoMirFor(ref func) => write!(f, \"no mir for `{}`\", func),\n+            FunctionPointerTyMismatch(sig, got) =>\n                 write!(f, \"tried to call a function with sig {} through a function pointer of type {}\", sig, got),\n-            EvalError::ArrayIndexOutOfBounds(span, len, index) =>\n+            ArrayIndexOutOfBounds(span, len, index) =>\n                 write!(f, \"index out of bounds: the len is {} but the index is {} at {:?}\", len, index, span),\n-            EvalError::Math(span, ref err) =>\n+            Math(span, ref err) =>\n                 write!(f, \"{:?} at {:?}\", err, span),\n-            EvalError::Intrinsic(ref err) =>\n+            Intrinsic(ref err) =>\n                 write!(f, \"{}\", err),\n-            EvalError::InvalidChar(c) =>\n+            InvalidChar(c) =>\n                 write!(f, \"tried to interpret an invalid 32-bit value as a char: {}\", c),\n-            EvalError::OutOfMemory { allocation_size, memory_size, memory_usage } =>\n+            OutOfMemory { allocation_size, memory_size, memory_usage } =>\n                 write!(f, \"tried to allocate {} more bytes, but only {} bytes are free of the {} byte memory\",\n                        allocation_size, memory_size - memory_usage, memory_size),\n-            EvalError::AlignmentCheckFailed { required, has } =>\n+            AlignmentCheckFailed { required, has } =>\n                write!(f, \"tried to access memory with alignment {}, but alignment {} is required\",\n                       has, required),\n-            EvalError::TypeNotPrimitive(ty) =>\n+            TypeNotPrimitive(ty) =>\n                 write!(f, \"expected primitive type, got {}\", ty),\n-            EvalError::Layout(ref err) =>\n+            Layout(ref err) =>\n                 write!(f, \"rustc layout computation failed: {:?}\", err),\n-            EvalError::NeedsRfc(ref msg) =>\n+            NeedsRfc(ref msg) =>\n                 write!(f, \"\\\"{}\\\" needs an rfc before being allowed inside constants\", msg),\n-            EvalError::NotConst(ref msg) =>\n+            NotConst(ref msg) =>\n                 write!(f, \"Cannot evaluate within constants: \\\"{}\\\"\", msg),\n             _ => write!(f, \"{}\", self.description()),\n         }"}, {"sha": "75d612d599c4b6e4c68cbcbbcd678df2ee8a147b", "filename": "src/memory.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dc9f5a205f3878410485783beb9de0ad6d6bfe31/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9f5a205f3878410485783beb9de0ad6d6bfe31/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=dc9f5a205f3878410485783beb9de0ad6d6bfe31", "patch": "@@ -227,7 +227,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         assert!(align.is_power_of_two());\n         // TODO(solson): Report error about non-__rust_allocate'd pointer.\n         if ptr.offset != 0 {\n-            return Err(EvalError::Unimplemented(format!(\"bad pointer offset: {}\", ptr.offset)));\n+            return Err(EvalError::ReallocateNonBasePtr);\n         }\n         if self.get(ptr.alloc_id).ok().map_or(false, |alloc| alloc.static_kind != StaticKind::NotStatic) {\n             return Err(EvalError::ReallocatedStaticMemory);\n@@ -254,14 +254,23 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             alloc.undef_mask.truncate(new_size);\n         }\n \n-        Ok(Pointer::new(ptr.alloc_id, 0))\n+        // Change allocation ID.  We do this after the above to be able to re-use methods like `clear_relocations`.\n+        let id = {\n+            let alloc = self.alloc_map.remove(&ptr.alloc_id).expect(\"We already used this pointer above\");\n+            let id = self.next_id;\n+            self.next_id.0 += 1;\n+            self.alloc_map.insert(id, alloc);\n+            id\n+        };\n+\n+        Ok(Pointer::new(id, 0))\n     }\n \n     // TODO(solson): See comment on `reallocate`.\n     pub fn deallocate(&mut self, ptr: Pointer) -> EvalResult<'tcx> {\n         if ptr.offset != 0 {\n             // TODO(solson): Report error about non-__rust_allocate'd pointer.\n-            return Err(EvalError::Unimplemented(format!(\"bad pointer offset: {}\", ptr.offset)));\n+            return Err(EvalError::DeallocateNonBasePtr);\n         }\n         if self.get(ptr.alloc_id).ok().map_or(false, |alloc| alloc.static_kind != StaticKind::NotStatic) {\n             return Err(EvalError::DeallocatedStaticMemory);\n@@ -271,9 +280,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             self.memory_usage -= alloc.bytes.len() as u64;\n         } else {\n             debug!(\"deallocated a pointer twice: {}\", ptr.alloc_id);\n-            // TODO(solson): Report error about erroneous free. This is blocked on properly tracking\n-            // already-dropped state since this if-statement is entered even in safe code without\n-            // it.\n+            return Err(EvalError::DeallocateNonBasePtr);\n         }\n         debug!(\"deallocated : {}\", ptr.alloc_id);\n "}, {"sha": "9f0f9369a803efc726b71c04de3ab067085ce384", "filename": "tests/compile-fail/deallocate-twice.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc9f5a205f3878410485783beb9de0ad6d6bfe31/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9f5a205f3878410485783beb9de0ad6d6bfe31/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-twice.rs?ref=dc9f5a205f3878410485783beb9de0ad6d6bfe31", "patch": "@@ -0,0 +1,14 @@\n+#![feature(alloc, heap_api)]\n+\n+extern crate alloc;\n+\n+// error-pattern: tried to deallocate with a pointer not to the beginning of an existing object\n+\n+use alloc::heap::*;\n+fn main() {\n+    unsafe {\n+        let x = allocate(1, 1);\n+        deallocate(x, 1, 1);\n+        deallocate(x, 1, 1);\n+    }\n+}"}, {"sha": "a63629388e7d600e968a464c6173e9ea69d845cd", "filename": "tests/compile-fail/reallocate-change-alloc.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc9f5a205f3878410485783beb9de0ad6d6bfe31/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc9f5a205f3878410485783beb9de0ad6d6bfe31/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-change-alloc.rs?ref=dc9f5a205f3878410485783beb9de0ad6d6bfe31", "patch": "@@ -0,0 +1,12 @@\n+#![feature(alloc, heap_api)]\n+\n+extern crate alloc;\n+\n+use alloc::heap::*;\n+fn main() {\n+    unsafe {\n+        let x = allocate(1, 1);\n+        let _y = reallocate(x, 1, 1, 1);\n+        let _z = *x; //~ ERROR: dangling pointer was dereferenced\n+    }\n+}"}]}