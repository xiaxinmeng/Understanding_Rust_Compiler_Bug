{"sha": "c98fc537e6d2c0d3c9a19582962a3db8bf2c1827", "node_id": "C_kwDOAAsO6NoAKGM5OGZjNTM3ZTZkMmMwZDNjOWExOTU4Mjk2MmEzZGI4YmYyYzE4Mjc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-04T16:11:15Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-04T20:53:23Z"}, "message": "Generalize reborrow hints as adjustment hints", "tree": {"sha": "841ab6c7bbfefe091723fbb1d6c91ccf45fafa5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/841ab6c7bbfefe091723fbb1d6c91ccf45fafa5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827", "html_url": "https://github.com/rust-lang/rust/commit/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd2603299c4ea2a82511e4dc4a876ff2a05fe26e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e", "html_url": "https://github.com/rust-lang/rust/commit/cd2603299c4ea2a82511e4dc4a876ff2a05fe26e"}], "stats": {"total": 260, "additions": 182, "deletions": 78}, "files": [{"sha": "ad33053ad095f5fe2d3d4475e9eb833fedbe3628", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=c98fc537e6d2c0d3c9a19582962a3db8bf2c1827", "patch": "@@ -53,7 +53,7 @@ pub use builder::{ParamKind, TyBuilder};\n pub use chalk_ext::*;\n pub use infer::{\n     could_coerce, could_unify, Adjust, Adjustment, AutoBorrow, BindingMode, InferenceDiagnostic,\n-    InferenceResult,\n+    InferenceResult, OverloadedDeref, PointerCast,\n };\n pub use interner::Interner;\n pub use lower::{"}, {"sha": "9d77f343bc5756b164eaef4bc4d64855feacc8d9", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c98fc537e6d2c0d3c9a19582962a3db8bf2c1827", "patch": "@@ -117,7 +117,7 @@ pub use {\n         name::{known, Name},\n         ExpandResult, HirFileId, InFile, MacroFile, Origin,\n     },\n-    hir_ty::display::HirDisplay,\n+    hir_ty::{display::HirDisplay, PointerCast, Safety},\n };\n \n // These are negative re-exports: pub using these names is forbidden, they\n@@ -3651,6 +3651,28 @@ impl From<ItemInNs> for ScopeDef {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum Adjust {\n+    /// Go from ! to any type.\n+    NeverToAny,\n+    /// Dereference once, producing a place.\n+    Deref(Option<OverloadedDeref>),\n+    /// Take the address and produce either a `&` or `*` pointer.\n+    Borrow(AutoBorrow),\n+    Pointer(PointerCast),\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum AutoBorrow {\n+    /// Converts from T to &T.\n+    Ref(Mutability),\n+    /// Converts from T to *T.\n+    RawPtr(Mutability),\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct OverloadedDeref(pub Mutability);\n+\n pub trait HasVisibility {\n     fn visibility(&self, db: &dyn HirDatabase) -> Visibility;\n     fn is_visible_from(&self, db: &dyn HirDatabase, module: Module) -> bool {"}, {"sha": "2e1f88ba09043e7b9d76bfbb2b1d1ec266302c13", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=c98fc537e6d2c0d3c9a19582962a3db8bf2c1827", "patch": "@@ -29,9 +29,10 @@ use crate::{\n     db::HirDatabase,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    Access, BindingMode, BuiltinAttr, Callable, ConstParam, Crate, DeriveHelper, Field, Function,\n-    HasSource, HirFileId, Impl, InFile, Label, LifetimeParam, Local, Macro, Module, ModuleDef,\n-    Name, Path, ScopeDef, ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n+    Access, Adjust, AutoBorrow, BindingMode, BuiltinAttr, Callable, ConstParam, Crate,\n+    DeriveHelper, Field, Function, HasSource, HirFileId, Impl, InFile, Label, LifetimeParam, Local,\n+    Macro, Module, ModuleDef, Name, OverloadedDeref, Path, ScopeDef, ToolModule, Trait, Type,\n+    TypeAlias, TypeParam, VariantDef,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -333,9 +334,8 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_trait(trait_)\n     }\n \n-    // FIXME: Figure out a nice interface to inspect adjustments\n-    pub fn is_implicit_reborrow(&self, expr: &ast::Expr) -> Option<Mutability> {\n-        self.imp.is_implicit_reborrow(expr)\n+    pub fn expr_adjustments(&self, expr: &ast::Expr) -> Option<Vec<Adjust>> {\n+        self.imp.expr_adjustments(expr)\n     }\n \n     pub fn type_of_expr(&self, expr: &ast::Expr) -> Option<TypeInfo> {\n@@ -1067,8 +1067,29 @@ impl<'db> SemanticsImpl<'db> {\n         }\n     }\n \n-    fn is_implicit_reborrow(&self, expr: &ast::Expr) -> Option<Mutability> {\n-        self.analyze(expr.syntax())?.is_implicit_reborrow(self.db, expr)\n+    fn expr_adjustments(&self, expr: &ast::Expr) -> Option<Vec<Adjust>> {\n+        let mutability = |m| match m {\n+            hir_ty::Mutability::Not => Mutability::Shared,\n+            hir_ty::Mutability::Mut => Mutability::Mut,\n+        };\n+        self.analyze(expr.syntax())?.expr_adjustments(self.db, expr).map(|it| {\n+            it.iter()\n+                .map(|adjust| match adjust.kind {\n+                    hir_ty::Adjust::NeverToAny => Adjust::NeverToAny,\n+                    hir_ty::Adjust::Deref(Some(hir_ty::OverloadedDeref(m))) => {\n+                        Adjust::Deref(Some(OverloadedDeref(mutability(m))))\n+                    }\n+                    hir_ty::Adjust::Deref(None) => Adjust::Deref(None),\n+                    hir_ty::Adjust::Borrow(hir_ty::AutoBorrow::RawPtr(m)) => {\n+                        Adjust::Borrow(AutoBorrow::RawPtr(mutability(m)))\n+                    }\n+                    hir_ty::Adjust::Borrow(hir_ty::AutoBorrow::Ref(m)) => {\n+                        Adjust::Borrow(AutoBorrow::Ref(mutability(m)))\n+                    }\n+                    hir_ty::Adjust::Pointer(pc) => Adjust::Pointer(pc),\n+                })\n+                .collect()\n+        })\n     }\n \n     fn type_of_expr(&self, expr: &ast::Expr) -> Option<TypeInfo> {"}, {"sha": "91ea1c24d14f83895c13c30a861bbe354f78919a", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=c98fc537e6d2c0d3c9a19582962a3db8bf2c1827", "patch": "@@ -38,8 +38,7 @@ use hir_ty::{\n         UnsafeExpr,\n     },\n     method_resolution::{self, lang_names_for_bin_op},\n-    Adjust, Adjustment, AutoBorrow, InferenceResult, Interner, Substitution, Ty, TyExt, TyKind,\n-    TyLoweringContext,\n+    Adjustment, InferenceResult, Interner, Substitution, Ty, TyExt, TyKind, TyLoweringContext,\n };\n use itertools::Itertools;\n use smallvec::SmallVec;\n@@ -156,21 +155,14 @@ impl SourceAnalyzer {\n         Some(res)\n     }\n \n-    pub(crate) fn is_implicit_reborrow(\n+    pub(crate) fn expr_adjustments(\n         &self,\n         db: &dyn HirDatabase,\n         expr: &ast::Expr,\n-    ) -> Option<Mutability> {\n+    ) -> Option<&[Adjustment]> {\n         let expr_id = self.expr_id(db, expr)?;\n         let infer = self.infer.as_ref()?;\n-        let adjustments = infer.expr_adjustments.get(&expr_id)?;\n-        adjustments.windows(2).find_map(|slice| match slice {\n-            &[Adjustment {kind: Adjust::Deref(None), ..}, Adjustment {kind: Adjust::Borrow(AutoBorrow::Ref(m)), ..}] => Some(match m {\n-                hir_ty::Mutability::Mut => Mutability::Mut,\n-                hir_ty::Mutability::Not => Mutability::Shared,\n-            }),\n-            _ => None,\n-        })\n+        infer.expr_adjustments.get(&expr_id).map(|v| &**v)\n     }\n \n     pub(crate) fn type_of_expr("}, {"sha": "a26ff1893c740458df00acf8a26333dc998db8b2", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 104, "deletions": 40, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=c98fc537e6d2c0d3c9a19582962a3db8bf2c1827", "patch": "@@ -1,7 +1,10 @@\n use std::fmt;\n \n use either::Either;\n-use hir::{known, Callable, HasVisibility, HirDisplay, Mutability, Semantics, TypeInfo};\n+use hir::{\n+    known, Adjust, AutoBorrow, Callable, HasVisibility, HirDisplay, Mutability, OverloadedDeref,\n+    PointerCast, Safety, Semantics, TypeInfo,\n+};\n use ide_db::{\n     base_db::FileRange, famous_defs::FamousDefs, syntax_helpers::node_ext::walk_ty, FxHashMap,\n     RootDatabase,\n@@ -22,7 +25,7 @@ pub struct InlayHintsConfig {\n     pub type_hints: bool,\n     pub parameter_hints: bool,\n     pub chaining_hints: bool,\n-    pub reborrow_hints: ReborrowHints,\n+    pub adjustment_hints: AdjustmentHints,\n     pub closure_return_type_hints: ClosureReturnTypeHints,\n     pub binding_mode_hints: bool,\n     pub lifetime_elision_hints: LifetimeElisionHints,\n@@ -48,7 +51,7 @@ pub enum LifetimeElisionHints {\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n-pub enum ReborrowHints {\n+pub enum AdjustmentHints {\n     Always,\n     MutableOnly,\n     Never,\n@@ -61,7 +64,8 @@ pub enum InlayKind {\n     ClosingBraceHint,\n     ClosureReturnTypeHint,\n     GenericParamListHint,\n-    ImplicitReborrowHint,\n+    AdjustmentHint,\n+    AdjustmentHintClosingParenthesis,\n     LifetimeHint,\n     ParameterHint,\n     TypeHint,\n@@ -115,6 +119,12 @@ impl From<String> for InlayHintLabel {\n     }\n }\n \n+impl From<&str> for InlayHintLabel {\n+    fn from(s: &str) -> Self {\n+        Self { parts: vec![InlayHintLabelPart { text: s.into(), linked_location: None }] }\n+    }\n+}\n+\n impl fmt::Display for InlayHintLabel {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", self.parts.iter().map(|part| &part.text).format(\"\"))\n@@ -221,6 +231,7 @@ fn hints(\n         match node {\n             ast::Expr(expr) => {\n                 chaining_hints(hints, sema, &famous_defs, config, file_id, &expr);\n+                adjustment_hints(hints, sema, config, &expr);\n                 match expr {\n                     ast::Expr::CallExpr(it) => param_name_hints(hints, sema, config, ast::Expr::from(it)),\n                     ast::Expr::MethodCallExpr(it) => {\n@@ -229,7 +240,7 @@ fn hints(\n                     ast::Expr::ClosureExpr(it) => closure_ret_hints(hints, sema, &famous_defs, config, file_id, it),\n                     // We could show reborrows for all expressions, but usually that is just noise to the user\n                     // and the main point here is to show why \"moving\" a mutable reference doesn't necessarily move it\n-                    ast::Expr::PathExpr(_) => reborrow_hints(hints, sema, config, &expr),\n+                    // ast::Expr::PathExpr(_) => reborrow_hints(hints, sema, config, &expr),\n                     _ => None,\n                 }\n             },\n@@ -617,30 +628,83 @@ fn closure_ret_hints(\n     Some(())\n }\n \n-fn reborrow_hints(\n+fn adjustment_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<'_, RootDatabase>,\n     config: &InlayHintsConfig,\n     expr: &ast::Expr,\n ) -> Option<()> {\n-    if config.reborrow_hints == ReborrowHints::Never {\n-        return None;\n+    if config.adjustment_hints == AdjustmentHints::Never {\n+        // return None;\n     }\n \n+    let parent = expr.syntax().parent().and_then(ast::Expr::cast);\n     let descended = sema.descend_node_into_attributes(expr.clone()).pop();\n     let desc_expr = descended.as_ref().unwrap_or(expr);\n-    let mutability = sema.is_implicit_reborrow(desc_expr)?;\n-    let label = match mutability {\n-        hir::Mutability::Shared if config.reborrow_hints != ReborrowHints::MutableOnly => \"&*\",\n-        hir::Mutability::Mut => \"&mut *\",\n-        _ => return None,\n+    let adjustments = sema.expr_adjustments(desc_expr).filter(|it| !it.is_empty())?;\n+    let needs_parens = match parent {\n+        Some(parent) => {\n+            match parent {\n+                ast::Expr::AwaitExpr(_)\n+                | ast::Expr::CallExpr(_)\n+                | ast::Expr::CastExpr(_)\n+                | ast::Expr::FieldExpr(_)\n+                | ast::Expr::MethodCallExpr(_)\n+                | ast::Expr::TryExpr(_) => true,\n+                // FIXME: shorthands need special casing, though not sure if adjustments are even valid there\n+                ast::Expr::RecordExpr(_) => false,\n+                ast::Expr::IndexExpr(index) => index.base().as_ref() == Some(expr),\n+                _ => false,\n+            }\n+        }\n+        None => false,\n     };\n-    acc.push(InlayHint {\n-        range: expr.syntax().text_range(),\n-        kind: InlayKind::ImplicitReborrowHint,\n-        label: label.to_string().into(),\n-        tooltip: Some(InlayTooltip::String(\"Compiler inserted reborrow\".into())),\n-    });\n+    if needs_parens {\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::AdjustmentHint,\n+            label: \"(\".into(),\n+            tooltip: None,\n+        });\n+    }\n+    for adjustment in adjustments.into_iter().rev() {\n+        // FIXME: Add some nicer tooltips to each of these\n+        let text = match adjustment {\n+            Adjust::NeverToAny => \"<never-to-any>\",\n+            Adjust::Deref(None) => \"*\",\n+            Adjust::Deref(Some(OverloadedDeref(Mutability::Mut))) => \"*\",\n+            Adjust::Deref(Some(OverloadedDeref(Mutability::Shared))) => \"*\",\n+            Adjust::Borrow(AutoBorrow::Ref(Mutability::Shared)) => \"&\",\n+            Adjust::Borrow(AutoBorrow::Ref(Mutability::Mut)) => \"&mut \",\n+            Adjust::Borrow(AutoBorrow::RawPtr(Mutability::Shared)) => \"&raw const \",\n+            Adjust::Borrow(AutoBorrow::RawPtr(Mutability::Mut)) => \"&raw mut \",\n+            // some of these could be represented via `as` casts, but that's not too nice and\n+            // handling everything as a prefix expr makes the `(` and `)` insertion easier\n+            Adjust::Pointer(cast) => match cast {\n+                PointerCast::ReifyFnPointer => \"<fn-item-to-fn-pointer>\",\n+                PointerCast::UnsafeFnPointer => \"<safe-fn-pointer-to-unsafe-fn-pointer>\",\n+                PointerCast::ClosureFnPointer(Safety::Unsafe) => \"<closure-to-unsafe-fn-pointer>\",\n+                PointerCast::ClosureFnPointer(Safety::Safe) => \"<closure-to-fn-pointer>\",\n+                PointerCast::MutToConstPointer => \"<mut-ptr-to-const-ptr>\",\n+                PointerCast::ArrayToPointer => \"<array-ptr-to-element-ptr>\",\n+                PointerCast::Unsize => \"<unsize>\",\n+            },\n+        };\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::AdjustmentHint,\n+            label: text.into(),\n+            tooltip: None,\n+        });\n+    }\n+    if needs_parens {\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::AdjustmentHintClosingParenthesis,\n+            label: \")\".into(),\n+            tooltip: None,\n+        });\n+    }\n     Some(())\n }\n \n@@ -785,23 +849,23 @@ fn binding_mode_hints(\n             tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n         });\n     });\n-    match pat {\n-        ast::Pat::IdentPat(pat) if pat.ref_token().is_none() && pat.mut_token().is_none() => {\n-            let bm = sema.binding_mode_of_pat(pat)?;\n-            let bm = match bm {\n-                hir::BindingMode::Move => return None,\n-                hir::BindingMode::Ref(Mutability::Mut) => \"ref mut\",\n-                hir::BindingMode::Ref(Mutability::Shared) => \"ref\",\n-            };\n-            acc.push(InlayHint {\n-                range,\n-                kind: InlayKind::BindingModeHint,\n-                label: bm.to_string().into(),\n-                tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n-            });\n-        }\n-        _ => (),\n-    }\n+    // match pat {\n+    //     ast::Pat::IdentPat(pat) if pat.ref_token().is_none() && pat.mut_token().is_none() => {\n+    //         let bm = sema.binding_mode_of_pat(pat)?;\n+    //         let bm = match bm {\n+    //             hir::BindingMode::Move => return None,\n+    //             hir::BindingMode::Ref(Mutability::Mut) => \"ref mut\",\n+    //             hir::BindingMode::Ref(Mutability::Shared) => \"ref\",\n+    //         };\n+    //         acc.push(InlayHint {\n+    //             range,\n+    //             kind: InlayKind::BindingModeHint,\n+    //             label: bm.to_string().into(),\n+    //             tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n+    //         });\n+    //     }\n+    //     _ => (),\n+    // }\n \n     Some(())\n }\n@@ -1218,7 +1282,7 @@ mod tests {\n     use syntax::{TextRange, TextSize};\n     use test_utils::extract_annotations;\n \n-    use crate::inlay_hints::ReborrowHints;\n+    use crate::inlay_hints::AdjustmentHints;\n     use crate::{fixture, inlay_hints::InlayHintsConfig, LifetimeElisionHints};\n \n     use super::ClosureReturnTypeHints;\n@@ -1230,7 +1294,7 @@ mod tests {\n         chaining_hints: false,\n         lifetime_elision_hints: LifetimeElisionHints::Never,\n         closure_return_type_hints: ClosureReturnTypeHints::Never,\n-        reborrow_hints: ReborrowHints::Always,\n+        adjustment_hints: AdjustmentHints::Always,\n         binding_mode_hints: false,\n         hide_named_constructor_hints: false,\n         hide_closure_initialization_hints: false,\n@@ -1242,7 +1306,7 @@ mod tests {\n         type_hints: true,\n         parameter_hints: true,\n         chaining_hints: true,\n-        reborrow_hints: ReborrowHints::Always,\n+        adjustment_hints: AdjustmentHints::Always,\n         closure_return_type_hints: ClosureReturnTypeHints::WithBlock,\n         binding_mode_hints: true,\n         lifetime_elision_hints: LifetimeElisionHints::Always,\n@@ -2849,7 +2913,7 @@ impl () {\n     fn hints_implicit_reborrow() {\n         check_with_config(\n             InlayHintsConfig {\n-                reborrow_hints: ReborrowHints::Always,\n+                adjustment_hints: AdjustmentHints::Always,\n                 parameter_hints: true,\n                 ..DISABLED_CONFIG\n             },"}, {"sha": "568c53f8bdbfa3cf63336150187e2240cf8b7b26", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=c98fc537e6d2c0d3c9a19582962a3db8bf2c1827", "patch": "@@ -81,8 +81,8 @@ pub use crate::{\n     highlight_related::{HighlightRelatedConfig, HighlightedRange},\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{\n-        ClosureReturnTypeHints, InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind,\n-        InlayTooltip, LifetimeElisionHints, ReborrowHints,\n+        AdjustmentHints, ClosureReturnTypeHints, InlayHint, InlayHintLabel, InlayHintsConfig,\n+        InlayKind, InlayTooltip, LifetimeElisionHints,\n     },\n     join_lines::JoinLinesConfig,\n     markup::Markup,"}, {"sha": "6ebd6f713fb71322b7a0943faa14b76b38bcb202", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=c98fc537e6d2c0d3c9a19582962a3db8bf2c1827", "patch": "@@ -111,7 +111,7 @@ impl StaticIndex<'_> {\n                     chaining_hints: true,\n                     closure_return_type_hints: crate::ClosureReturnTypeHints::WithBlock,\n                     lifetime_elision_hints: crate::LifetimeElisionHints::Never,\n-                    reborrow_hints: crate::ReborrowHints::Never,\n+                    adjustment_hints: crate::AdjustmentHints::Never,\n                     hide_named_constructor_hints: false,\n                     hide_closure_initialization_hints: false,\n                     param_names_for_lifetime_elision_hints: false,"}, {"sha": "12c59edf9af1061eec23fe225321ca0a43ae388b", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c98fc537e6d2c0d3c9a19582962a3db8bf2c1827", "patch": "@@ -261,6 +261,7 @@ config_data! {\n         files_excludeDirs: Vec<PathBuf> = \"[]\",\n         /// Controls file watching implementation.\n         files_watcher: FilesWatcherDef = \"\\\"client\\\"\",\n+\n         /// Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\n         highlightRelated_breakPoints_enable: bool = \"true\",\n         /// Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\n@@ -1200,10 +1201,10 @@ impl Config {\n             hide_closure_initialization_hints: self\n                 .data\n                 .inlayHints_typeHints_hideClosureInitialization,\n-            reborrow_hints: match self.data.inlayHints_reborrowHints_enable {\n-                ReborrowHintsDef::Always => ide::ReborrowHints::Always,\n-                ReborrowHintsDef::Never => ide::ReborrowHints::Never,\n-                ReborrowHintsDef::Mutable => ide::ReborrowHints::MutableOnly,\n+            adjustment_hints: match self.data.inlayHints_reborrowHints_enable {\n+                ReborrowHintsDef::Always => ide::AdjustmentHints::Always,\n+                ReborrowHintsDef::Never => ide::AdjustmentHints::Never,\n+                ReborrowHintsDef::Mutable => ide::AdjustmentHints::MutableOnly,\n             },\n             binding_mode_hints: self.data.inlayHints_bindingModeHints_enable,\n             param_names_for_lifetime_elision_hints: self"}, {"sha": "6f44a1de636d74674a312ee2358f9f3ac6ad46fe", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=c98fc537e6d2c0d3c9a19582962a3db8bf2c1827", "patch": "@@ -440,32 +440,35 @@ pub(crate) fn inlay_hint(\n     Ok(lsp_types::InlayHint {\n         position: match inlay_hint.kind {\n             // before annotated thing\n-            InlayKind::ParameterHint\n-            | InlayKind::ImplicitReborrowHint\n-            | InlayKind::BindingModeHint => position(line_index, inlay_hint.range.start()),\n+            InlayKind::ParameterHint | InlayKind::AdjustmentHint | InlayKind::BindingModeHint => {\n+                position(line_index, inlay_hint.range.start())\n+            }\n             // after annotated thing\n             InlayKind::ClosureReturnTypeHint\n             | InlayKind::TypeHint\n             | InlayKind::ChainingHint\n             | InlayKind::GenericParamListHint\n+            | InlayKind::AdjustmentHintClosingParenthesis\n             | InlayKind::LifetimeHint\n             | InlayKind::ClosingBraceHint => position(line_index, inlay_hint.range.end()),\n         },\n         padding_left: Some(match inlay_hint.kind {\n             InlayKind::TypeHint => !render_colons,\n             InlayKind::ChainingHint | InlayKind::ClosingBraceHint => true,\n-            InlayKind::BindingModeHint\n+            InlayKind::AdjustmentHintClosingParenthesis\n+            | InlayKind::BindingModeHint\n             | InlayKind::ClosureReturnTypeHint\n             | InlayKind::GenericParamListHint\n-            | InlayKind::ImplicitReborrowHint\n+            | InlayKind::AdjustmentHint\n             | InlayKind::LifetimeHint\n             | InlayKind::ParameterHint => false,\n         }),\n         padding_right: Some(match inlay_hint.kind {\n-            InlayKind::ChainingHint\n+            InlayKind::AdjustmentHintClosingParenthesis\n+            | InlayKind::ChainingHint\n             | InlayKind::ClosureReturnTypeHint\n             | InlayKind::GenericParamListHint\n-            | InlayKind::ImplicitReborrowHint\n+            | InlayKind::AdjustmentHint\n             | InlayKind::TypeHint\n             | InlayKind::ClosingBraceHint => false,\n             InlayKind::BindingModeHint => inlay_hint.label.as_simple_str() != Some(\"&\"),\n@@ -476,10 +479,11 @@ pub(crate) fn inlay_hint(\n             InlayKind::ClosureReturnTypeHint | InlayKind::TypeHint | InlayKind::ChainingHint => {\n                 Some(lsp_types::InlayHintKind::TYPE)\n             }\n-            InlayKind::BindingModeHint\n+            InlayKind::AdjustmentHintClosingParenthesis\n+            | InlayKind::BindingModeHint\n             | InlayKind::GenericParamListHint\n             | InlayKind::LifetimeHint\n-            | InlayKind::ImplicitReborrowHint\n+            | InlayKind::AdjustmentHint\n             | InlayKind::ClosingBraceHint => None,\n         },\n         text_edits: None,"}]}