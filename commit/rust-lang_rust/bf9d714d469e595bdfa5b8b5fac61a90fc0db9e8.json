{"sha": "bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmOWQ3MTRkNDY5ZTU5NWJkZmE1YjhiNWZhYzYxYTkwZmMwZGI5ZTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-25T04:24:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-25T04:38:43Z"}, "message": "Avoid unifying vars when possible; handle bot (more) correctly", "tree": {"sha": "a487726376304f6299767b17b09f7ce414f8e615", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a487726376304f6299767b17b09f7ce414f8e615"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8", "html_url": "https://github.com/rust-lang/rust/commit/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee5d0f5e3f1681a67452b5301958474343b90c51", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee5d0f5e3f1681a67452b5301958474343b90c51", "html_url": "https://github.com/rust-lang/rust/commit/ee5d0f5e3f1681a67452b5301958474343b90c51"}], "stats": {"total": 148, "additions": 116, "deletions": 32}, "files": [{"sha": "c6dfd326e03df843147edfdd7909412f72762945", "filename": "src/libcore/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8", "patch": "@@ -694,7 +694,7 @@ fn test_try_fail() {\n         fail\n     } {\n         result::err(()) { }\n-        _ { fail; }\n+        result::ok(()) { fail; }\n     }\n }\n "}, {"sha": "6a246f6d4bc3becd4d84ae5e53e73f3655e289a7", "filename": "src/rustc/middle/infer.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Frustc%2Fmiddle%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Frustc%2Fmiddle%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Finfer.rs?ref=bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8", "patch": "@@ -293,14 +293,32 @@ impl unify_methods for infer_ctxt {\n     }\n \n     fn vars(a_id: uint, b_id: uint) -> ures {\n-        #debug[\"vars(<T%u> <: <T%u>)\",\n-               a_id, b_id];\n-\n         // Need to make sub_id a subtype of sup_id.\n         let {root: a_id, bounds: a_bounds} = self.get(a_id);\n         let {root: b_id, bounds: b_bounds} = self.get(b_id);\n \n+        #debug[\"vars(<T%u>=%s <: <T%u>=%s)\",\n+               a_id, self.bounds_to_str(a_bounds),\n+               b_id, self.bounds_to_str(b_bounds)];\n+\n         if a_id == b_id { ret self.uok(); }\n+\n+        // If both A's UB and B's LB have already been bound to types,\n+        // see if we can make those types subtypes.\n+        alt (a_bounds.ub, b_bounds.lb) {\n+          (some(a_ub), some(b_lb)) {\n+            let r = self.try {|| self.tys(a_ub, b_lb) };\n+            alt r {\n+              result::ok(()) { ret result::ok(()); }\n+              result::err(_) { /*fallthrough */ }\n+            }\n+          }\n+          _ { /*fallthrough*/ }\n+        }\n+\n+        // Otherwise, we need to merge A and B so as to guarantee that\n+        // A remains a subtype of B.  Actually, there are other options,\n+        // but that's the route we choose to take.\n         self.merge(a_id, a_bounds, b_bounds).then {||\n             // For max perf, we should consider the rank here.\n             self.set(b_id, redirect(a_id));\n@@ -309,18 +327,20 @@ impl unify_methods for infer_ctxt {\n     }\n \n     fn varty(a_id: uint, b: ty::t) -> ures {\n-        #debug[\"varty(<T%u> <: %s)\",\n-               a_id, self.ty_to_str(b)];\n         let {root: a_id, bounds: a_bounds} = self.get(a_id);\n+        #debug[\"varty(<T%u>=%s <: %s)\",\n+               a_id, self.bounds_to_str(a_bounds),\n+               self.ty_to_str(b)];\n         let b_bounds = {lb: none, ub: some(b)};\n         self.merge(a_id, a_bounds, b_bounds)\n     }\n \n     fn tyvar(a: ty::t, b_id: uint) -> ures {\n-        #debug[\"tyvar(%s <: <T%u>)\",\n-               self.ty_to_str(a), b_id];\n         let a_bounds = {lb: some(a), ub: none};\n         let {root: b_id, bounds: b_bounds} = self.get(b_id);\n+        #debug[\"tyvar(%s <: <T%u>=%s)\",\n+               self.ty_to_str(a),\n+               b_id, self.bounds_to_str(b_bounds)];\n         self.merge(b_id, a_bounds, b_bounds)\n     }\n \n@@ -532,6 +552,8 @@ impl unify_methods for infer_ctxt {\n         if a == b { ret self.uok(); }\n \n         alt (ty::get(a).struct, ty::get(b).struct) {\n+          (ty::ty_bot, _) { self.uok() }\n+\n           (ty::ty_var(a_id), ty::ty_var(b_id)) {\n             self.vars(a_id as uint, b_id as uint)\n           }\n@@ -542,9 +564,6 @@ impl unify_methods for infer_ctxt {\n             self.tyvar(a, b_id as uint)\n           }\n \n-          (_, ty::ty_bot) { self.uok() }\n-          (ty::ty_bot, _) { self.uok() }\n-\n           (ty::ty_nil, _) |\n           (ty::ty_bool, _) |\n           (ty::ty_int(_), _) |"}, {"sha": "2dabc5b9faa3839dbe730c98cf10b8fdfb181c23", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8", "patch": "@@ -2483,15 +2483,11 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         let (if_t, if_bot) =\n             alt elsopt {\n               some(els) {\n+                let if_t = next_ty_var(fcx);\n                 let thn_bot = check_block(fcx, thn);\n                 let thn_t = block_ty(fcx.ccx.tcx, thn);\n-                let els_bot = check_expr_with(fcx, els, thn_t);\n-                let els_t = expr_ty(fcx.ccx.tcx, els);\n-                let if_t = if !ty::type_is_bot(els_t) {\n-                    els_t\n-                } else {\n-                    thn_t\n-                };\n+                demand::simple(fcx, thn.span, if_t, thn_t);\n+                let els_bot = check_expr_with(fcx, els, if_t);\n                 (if_t, thn_bot & els_bot)\n               }\n               none {\n@@ -2565,7 +2561,9 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n           }\n \n           (_, _) if ty::is_binopable(tcx, lhs_t, op) {\n-            let rhs_bot = check_expr_with(fcx, rhs, lhs_t);\n+            let tvar = next_ty_var(fcx);\n+            demand::simple(fcx, expr.span, tvar, lhs_t);\n+            let rhs_bot = check_expr_with(fcx, rhs, tvar);\n             let rhs_t = alt op {\n               ast::eq | ast::lt | ast::le | ast::ne | ast::ge |\n               ast::gt {\n@@ -2646,9 +2644,9 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n       ast::expr_binary(ast::gt, lhs, rhs) |\n       ast::expr_binary(ast::ge, lhs, rhs) {\n         let tcx = fcx.ccx.tcx;\n-        bot |= check_expr(fcx, lhs);\n-        let lhs_t = expr_ty(tcx, lhs);\n-        bot |= check_expr_with(fcx, rhs, lhs_t);\n+        let tvar = next_ty_var(fcx);\n+        bot |= check_expr_with(fcx, lhs, tvar);\n+        bot |= check_expr_with(fcx, rhs, tvar);\n         write_ty(tcx, id, ty::mk_bool(tcx));\n       }\n       ast::expr_binary(op, lhs, rhs) {\n@@ -2782,7 +2780,8 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n       }\n       ast::expr_log(_, lv, e) {\n         bot = check_expr_with(fcx, lv, ty::mk_mach_uint(tcx, ast::ty_u32));\n-        bot |= check_expr(fcx, e);\n+        // Note: this does not always execute, so do not propagate bot:\n+        check_expr(fcx, e);\n         write_nil(tcx, id);\n       }\n       ast::expr_check(_, e) {\n@@ -2850,13 +2849,14 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n           bot = !may_break(body);\n       }\n       ast::expr_alt(discrim, arms, _) {\n-        bot = check_expr(fcx, discrim);\n+        let pattern_ty = next_ty_var(fcx);\n+        bot = check_expr_with(fcx, discrim, pattern_ty);\n \n         let parent_block = tcx.region_map.rvalue_to_block.get(discrim.id);\n \n         // Typecheck the patterns first, so that we get types for all the\n         // bindings.\n-        let pattern_ty = ty::expr_ty(tcx, discrim);\n+        //let pattern_ty = ty::expr_ty(tcx, discrim);\n         for arm: ast::arm in arms {\n             let pcx = {\n                 fcx: fcx,\n@@ -3205,6 +3205,11 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n     }\n     if bot { write_ty(tcx, expr.id, ty::mk_bot(tcx)); }\n \n+    #debug(\"type of expr %s is %s, expected is %s\",\n+           syntax::print::pprust::expr_to_str(expr),\n+           ty_to_str(tcx, expr_ty(tcx, expr)),\n+           ty_to_str(tcx, expected));\n+\n     unify(fcx, expr.span, expected, expr_ty(tcx, expr));\n     ret bot;\n }"}, {"sha": "cb2dbde3d48f8afbab0f22b08a58a4bef66c320e", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8", "patch": "@@ -0,0 +1,17 @@\n+fn takes_mut(&&x: @mut int) { }\n+fn takes_const(&&x: @const int) { }\n+fn takes_imm(&&x: @int) { }\n+\n+fn apply<T>(t: T, f: fn(T)) {\n+    f(t)\n+}\n+\n+fn main() {\n+    apply(@3, takes_mut); //! ERROR (values differ in mutability)\n+    apply(@3, takes_const);\n+    apply(@3, takes_imm);\n+\n+    apply(@mut 3, takes_mut);\n+    apply(@mut 3, takes_const);\n+    apply(@mut 3, takes_imm); //! ERROR (values differ in mutability)\n+}"}, {"sha": "9d4254a708e2b2932df900aa410c38d2e36f31ef", "filename": "src/test/compile-fail/fn-variance-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-2.rs?ref=bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8", "patch": "@@ -0,0 +1,22 @@\n+fn reproduce<T:copy>(t: T) -> fn@() -> T {\n+    fn@() -> T { t }\n+}\n+\n+fn main() {\n+    // type of x is the variable X,\n+    // with the lower bound @mut int\n+    let x = @mut 3;\n+\n+    // type of r is fn@() -> X\n+    let r = reproduce(x);\n+\n+    // Requires that X be a subtype of\n+    // @mut int.\n+    let f: @mut int = r();\n+\n+    // OK.\n+    let g: @const int = r();\n+\n+    // Bad.\n+    let h: @int = r(); //! ERROR (values differ in mutability)\n+}"}, {"sha": "ab5b3b897a79089012678a0b012ac276e54ab96a", "filename": "src/test/compile-fail/fn-variance-3.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-3.rs?ref=bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8", "patch": "@@ -0,0 +1,21 @@\n+fn mk_identity<T:copy>() -> fn@(T) -> T {\n+    fn@(t: T) -> T { t }\n+}\n+\n+fn main() {\n+    // type of r is fn@(X) -> X\n+    // for some fresh X\n+    let r = mk_identity();\n+\n+    // @mut int <: X\n+    r(@mut 3);\n+\n+    // @int <: X\n+    //\n+    // Note: this is really an inference failure.\n+    // The correct answer would be to make X\n+    // equal to @const int, but we are not (yet)\n+    // smart enough.\n+    r(@3); //! ERROR (values differ in mutability)\n+\n+}"}, {"sha": "71f3fa6d3ef6bf9f61887edd0e338de40228f6fc", "filename": "src/test/run-pass/unreachable-code.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code.rs?ref=bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8", "patch": "@@ -35,9 +35,9 @@ fn ret_guard() {\n     }\n }\n \n-fn rec_ret() { let _r = {c: ret}; }\n+fn rec_ret() { let _r: {c: int} = {c: ret}; }\n \n-fn vec_ret() { let _v = [1, 2, ret, 4]; }\n+fn vec_ret() { let _v: [int] = [1, 2, ret, 4]; }\n \n fn fail_then_concat() {\n     let mut x = [], y = [3];"}, {"sha": "4e0c69cdbcc504f3a735d443df6fd0d06b24a4a8", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=bf9d714d469e595bdfa5b8b5fac61a90fc0db9e8", "patch": "@@ -1,6 +1,6 @@\n // Just a grab bag of stuff that you wouldn't want to actually write.\n \n-fn strange() -> bool { let _x = ret true; }\n+fn strange() -> bool { let _x: bool = ret true; }\n \n fn funny() {\n     fn f(_x: ()) { }\n@@ -19,8 +19,8 @@ fn zombiejesus() {\n     do  {\n         while (ret) {\n             if (ret) {\n-                alt (ret) {\n-                    _ {\n+                alt check (ret) {\n+                    1 {\n                         if (ret) {\n                             ret\n                         } else {\n@@ -51,13 +51,13 @@ fn canttouchthis() -> uint {\n     pure fn p() -> bool { true }\n     let _a = (assert (true)) == (check (p()));\n     let _c = (check (p())) == ();\n-    let _b = (log(debug, 0) == (ret 0u));\n+    let _b: bool = (log(debug, 0) == (ret 0u));\n }\n \n fn angrydome() {\n     loop { if break { } }\n     let mut i = 0;\n-    do  { i += 1; if i == 1 { alt cont { _ { } } } } while false\n+    do  { i += 1; if i == 1 { alt check cont { 1 { } } } } while false\n }\n \n fn evil_lincoln() { let evil <- #debug(\"lincoln\"); }"}]}