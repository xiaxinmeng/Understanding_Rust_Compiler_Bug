{"sha": "1bd8e04228d807c6ea0b7813c6c8689527f65252", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZDhlMDQyMjhkODA3YzZlYTBiNzgxM2M2Yzg2ODk1MjdmNjUyNTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-06T09:12:44Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-07-06T09:12:44Z"}, "message": "check alignment in various places", "tree": {"sha": "3d1649b3b63faf839dffaeaa56ed6ff6989686c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d1649b3b63faf839dffaeaa56ed6ff6989686c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bd8e04228d807c6ea0b7813c6c8689527f65252", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXfMuMAAoJEFbW7qD8Z6xGpJsP/1Lk1kCju5cpKlJFc6QPYDYW\nLjKP9iA5iEO2oX2UmzrlYVaXrolAfU/Beiq2Dj6apq4d5DRqngbpBmfc//iFPGY5\nU5cxCsyxYbCgYlGQ6wCr3ftF8CowfOFgH2jAM8KXvqzatRa51CK9KajJuEQXWkG1\nKI5W1KM87jcztg9JIdf9QHDYEnkyMai8rnhHkwEC56rminqe5aRf2xVAhBwiw6bU\nngt7wHP3O7ucol837LYbSvZrkCWcnKHPIYl8idlZWRxbDU9DJZwVZmeboAfLMVCb\n26isONoN6o3323m4XbB7AjocKL9OO1tUM3OyuKDb5zXy+TNOu0DZ608A7L5GQ2/F\nuB17H3xqk9LUb0F1lLEo75bC2fNvtzqi8ui1tpnPJAsxNYXG7TY5N6vjhb2aYgtW\n7aWGa46rZXTBQXyNUGvW/2/h9LR09dttTtu2GZSalpbm4ay2oVbgspYL7UEdTCYb\nflyIOOR9Ol/HxYWofB8WC8xBXXnK0UlTzd1Bhd43Mor/vnzGbniwlxmFCPIvvS3G\ngqi6cR1i2EEBDWGXYZwfC7J9U928gdfHnwmD+154NBux6UhEx1tsm/o5XaU5emkh\nnJ4L3dZB9Aa/7gyB9K91TEolpX3tXP+S4GMwwC++j04Y5k72O6QSbxCCHF5alXTb\ntDLXxVm+7Hjf34EVpmZs\n=2+yo\n-----END PGP SIGNATURE-----", "payload": "tree 3d1649b3b63faf839dffaeaa56ed6ff6989686c3\nparent 50987e3697d58a1d1e48a778d1e5875d6adea657\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467796364 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1467796364 +0200\n\ncheck alignment in various places"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd8e04228d807c6ea0b7813c6c8689527f65252", "html_url": "https://github.com/rust-lang/rust/commit/1bd8e04228d807c6ea0b7813c6c8689527f65252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bd8e04228d807c6ea0b7813c6c8689527f65252/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50987e3697d58a1d1e48a778d1e5875d6adea657", "url": "https://api.github.com/repos/rust-lang/rust/commits/50987e3697d58a1d1e48a778d1e5875d6adea657", "html_url": "https://github.com/rust-lang/rust/commit/50987e3697d58a1d1e48a778d1e5875d6adea657"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "c5ebd96cda6bf40146138ee3eea382365d73248e", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1bd8e04228d807c6ea0b7813c6c8689527f65252/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd8e04228d807c6ea0b7813c6c8689527f65252/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=1bd8e04228d807c6ea0b7813c6c8689527f65252", "patch": "@@ -520,12 +520,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Repeat(ref operand, _) => {\n-                let (elem_size, length) = match dest_ty.sty {\n-                    ty::TyArray(elem_ty, n) => (self.type_size(elem_ty), n),\n+                let (elem_size, elem_align, length) = match dest_ty.sty {\n+                    ty::TyArray(elem_ty, n) => (self.type_size(elem_ty), self.type_align(elem_ty), n),\n                     _ => panic!(\"tried to assign array-repeat to non-array type {:?}\", dest_ty),\n                 };\n \n                 let src = self.eval_operand(operand)?;\n+                src.check_align(elem_align)?;\n+                dest.check_align(elem_align)?;\n                 for i in 0..length {\n                     let elem_dest = dest.offset((i * elem_size) as isize);\n                     self.memory.copy(src, elem_dest, elem_size)?;\n@@ -592,6 +594,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let src = self.eval_operand(operand)?;\n                         let src_ty = self.operand_ty(operand);\n                         // FIXME(solson): Wrong for almost everything.\n+                        // FIXME: check alignment\n                         warn!(\"misc cast from {:?} to {:?}\", src_ty, dest_ty);\n                         let dest_size = self.type_size(dest_ty);\n                         let src_size = self.type_size(src_ty);\n@@ -845,6 +848,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     fn move_(&mut self, src: Pointer, dest: Pointer, ty: Ty<'tcx>) -> EvalResult<'tcx, ()> {\n         let size = self.type_size(ty);\n+        let align = self.type_align(ty);\n+        src.check_align(align)?;\n+        dest.check_align(align)?;\n         self.memory.copy(src, dest, size)?;\n         Ok(())\n     }"}, {"sha": "d5b7dbaf623868ecdba8dcbd3a05041e3599ac32", "filename": "src/interpreter/terminator.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1bd8e04228d807c6ea0b7813c6c8689527f65252/src%2Finterpreter%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd8e04228d807c6ea0b7813c6c8689527f65252/src%2Finterpreter%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator.rs?ref=1bd8e04228d807c6ea0b7813c6c8689527f65252", "patch": "@@ -289,8 +289,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"copy_nonoverlapping\" => {\n                 let elem_ty = *substs.types.get(subst::FnSpace, 0);\n                 let elem_size = self.type_size(elem_ty);\n+                let elem_align = self.type_align(elem_ty);\n                 let src = self.memory.read_ptr(args_ptrs[0])?;\n+                src.check_align(elem_align)?;\n                 let dest = self.memory.read_ptr(args_ptrs[1])?;\n+                dest.check_align(elem_align)?;\n                 let count = self.memory.read_isize(args_ptrs[2])?;\n                 self.memory.copy(src, dest, count as usize * elem_size)?;\n             }\n@@ -307,8 +310,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"init\" => self.memory.write_repeat(dest, 0, dest_layout.size(&self.tcx.data_layout).bytes() as usize)?,\n \n             \"min_align_of\" => {\n-                // FIXME: use correct value\n-                self.memory.write_int(dest, 1, pointer_size)?;\n+                let elem_ty = *substs.types.get(subst::FnSpace, 0);\n+                let elem_align = self.type_align(elem_ty);\n+                self.memory.write_uint(dest, elem_align as u64, pointer_size)?;\n             }\n \n             \"move_val_init\" => {"}, {"sha": "cac4a8bb7c1940caf7ee12cbd063318be5c66376", "filename": "src/memory.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1bd8e04228d807c6ea0b7813c6c8689527f65252/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bd8e04228d807c6ea0b7813c6c8689527f65252/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=1bd8e04228d807c6ea0b7813c6c8689527f65252", "patch": "@@ -463,6 +463,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     pub fn read_bool(&self, ptr: Pointer) -> EvalResult<'tcx, bool> {\n+        ptr.check_align(self.layout.i1_align.abi() as usize)?;\n         let bytes = self.get_bytes(ptr, 1)?;\n         match bytes[0] {\n             0 => Ok(false),\n@@ -472,25 +473,40 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     pub fn write_bool(&mut self, ptr: Pointer, b: bool) -> EvalResult<'tcx, ()> {\n+        ptr.check_align(self.layout.i1_align.abi() as usize)?;\n         self.get_bytes_mut(ptr, 1).map(|bytes| bytes[0] = b as u8)\n     }\n \n+    fn check_int_align(&self, ptr: Pointer, size: usize) -> EvalResult<'tcx, ()> {\n+        match size {\n+            1 => ptr.check_align(self.layout.i8_align.abi() as usize),\n+            2 => ptr.check_align(self.layout.i16_align.abi() as usize),\n+            4 => ptr.check_align(self.layout.i32_align.abi() as usize),\n+            8 => ptr.check_align(self.layout.i64_align.abi() as usize),\n+            _ => panic!(\"bad integer size\"),\n+        }\n+    }\n+\n     pub fn read_int(&self, ptr: Pointer, size: usize) -> EvalResult<'tcx, i64> {\n+        self.check_int_align(ptr, size)?;\n         self.get_bytes(ptr, size).map(|b| read_target_int(self.endianess(), b).unwrap())\n     }\n \n     pub fn write_int(&mut self, ptr: Pointer, n: i64, size: usize) -> EvalResult<'tcx, ()> {\n+        self.check_int_align(ptr, size)?;\n         let endianess = self.endianess();\n         let b = self.get_bytes_mut(ptr, size)?;\n         write_target_int(endianess, b, n).unwrap();\n         Ok(())\n     }\n \n     pub fn read_uint(&self, ptr: Pointer, size: usize) -> EvalResult<'tcx, u64> {\n+        self.check_int_align(ptr, size)?;\n         self.get_bytes(ptr, size).map(|b| read_target_uint(self.endianess(), b).unwrap())\n     }\n \n     pub fn write_uint(&mut self, ptr: Pointer, n: u64, size: usize) -> EvalResult<'tcx, ()> {\n+        self.check_int_align(ptr, size)?;\n         let endianess = self.endianess();\n         let b = self.get_bytes_mut(ptr, size)?;\n         write_target_uint(endianess, b, n).unwrap();"}]}