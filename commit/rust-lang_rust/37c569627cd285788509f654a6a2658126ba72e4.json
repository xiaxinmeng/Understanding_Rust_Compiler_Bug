{"sha": "37c569627cd285788509f654a6a2658126ba72e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YzU2OTYyN2NkMjg1Nzg4NTA5ZjY1NGE2YTI2NTgxMjZiYTcyZTQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-19T21:02:56Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-22T11:32:56Z"}, "message": "refactor constant evaluation error reporting\n\nRefactor constant evaluation to use a single error reporting function\nthat reports a type-error-like message.\n\nAlso, unify all error codes with the \"constant evaluation error\" message\nto just E0080, and similarly for a few other duplicate codes. The old\nsituation was a total mess, and now that we have *something* we can\nfurther iterate on the UX.", "tree": {"sha": "58075ace7051f4933c7ef992f1fbb94a518f4337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58075ace7051f4933c7ef992f1fbb94a518f4337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37c569627cd285788509f654a6a2658126ba72e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37c569627cd285788509f654a6a2658126ba72e4", "html_url": "https://github.com/rust-lang/rust/commit/37c569627cd285788509f654a6a2658126ba72e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37c569627cd285788509f654a6a2658126ba72e4/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa4eda8935cc902b0757815e774f11ee791af156", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa4eda8935cc902b0757815e774f11ee791af156", "html_url": "https://github.com/rust-lang/rust/commit/fa4eda8935cc902b0757815e774f11ee791af156"}], "stats": {"total": 882, "additions": 506, "deletions": 376}, "files": [{"sha": "8967672548b101b3b35a01f04b8207ab8b5d1198", "filename": "src/librustc_const_eval/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_const_eval%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_const_eval%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2FCargo.toml?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -14,6 +14,7 @@ serialize = { path = \"../libserialize\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n syntax = { path = \"../libsyntax\" }\n graphviz = { path = \"../libgraphviz\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n\\ No newline at end of file"}, {"sha": "915a0cf0bdc7301ecda143b9d51745a827453b37", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 23, "deletions": 32, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -17,6 +17,7 @@ use rustc::middle::const_val::ConstVal;\n use ::{eval_const_expr, eval_const_expr_partial, compare_const_vals};\n use ::{const_expr_to_pat, lookup_const_by_id};\n use ::EvalHint::ExprTypeChecked;\n+use eval::report_const_eval_err;\n use rustc::hir::def::*;\n use rustc::hir::def_id::{DefId};\n use rustc::middle::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor};\n@@ -42,6 +43,7 @@ use syntax_pos::{Span, DUMMY_SP};\n use rustc::hir::fold::{Folder, noop_fold_pat};\n use rustc::hir::print::pat_to_string;\n use syntax::ptr::P;\n+use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::FnvHashMap;\n \n pub const DUMMY_WILD_PAT: &'static Pat = &Pat {\n@@ -279,13 +281,7 @@ fn check_for_static_nan(cx: &MatchCheckCtxt, pat: &Pat) {\n                 Ok(_) => {}\n \n                 Err(err) => {\n-                    let mut diag = struct_span_err!(cx.tcx.sess, err.span, E0471,\n-                                                    \"constant evaluation error: {}\",\n-                                                    err.description());\n-                    if !p.span.contains(err.span) {\n-                        diag.span_note(p.span, \"in pattern here\");\n-                    }\n-                    diag.emit();\n+                    report_const_eval_err(cx.tcx, &err, p.span, \"pattern\").emit();\n                 }\n             }\n         }\n@@ -838,22 +834,19 @@ pub fn constructor_arity(_cx: &MatchCheckCtxt, ctor: &Constructor, ty: Ty) -> us\n     }\n }\n \n-fn range_covered_by_constructor(ctor: &Constructor,\n-                                from: &ConstVal, to: &ConstVal) -> Option<bool> {\n+fn range_covered_by_constructor(tcx: TyCtxt, span: Span,\n+                                ctor: &Constructor,\n+                                from: &ConstVal, to: &ConstVal)\n+                                -> Result<bool, ErrorReported> {\n     let (c_from, c_to) = match *ctor {\n         ConstantValue(ref value)        => (value, value),\n         ConstantRange(ref from, ref to) => (from, to),\n-        Single                          => return Some(true),\n+        Single                          => return Ok(true),\n         _                               => bug!()\n     };\n-    let cmp_from = compare_const_vals(c_from, from);\n-    let cmp_to = compare_const_vals(c_to, to);\n-    match (cmp_from, cmp_to) {\n-        (Some(cmp_from), Some(cmp_to)) => {\n-            Some(cmp_from != Ordering::Less && cmp_to != Ordering::Greater)\n-        }\n-        _ => None\n-    }\n+    let cmp_from = compare_const_vals(tcx, span, c_from, from)?;\n+    let cmp_to = compare_const_vals(tcx, span, c_to, to)?;\n+    Ok(cmp_from != Ordering::Less && cmp_to != Ordering::Greater)\n }\n \n fn wrap_pat<'a, 'b, 'tcx>(cx: &MatchCheckCtxt<'b, 'tcx>,\n@@ -965,27 +958,25 @@ pub fn specialize<'a, 'b, 'tcx>(\n                 Some(vec![(pat, Some(mt.ty))])\n             } else {\n                 let expr_value = eval_const_expr(cx.tcx, &expr);\n-                match range_covered_by_constructor(constructor, &expr_value, &expr_value) {\n-                    Some(true) => Some(vec![]),\n-                    Some(false) => None,\n-                    None => {\n-                        span_err!(cx.tcx.sess, pat_span, E0298, \"mismatched types between arms\");\n-                        None\n-                    }\n+                match range_covered_by_constructor(\n+                    cx.tcx, expr.span, constructor, &expr_value, &expr_value\n+                ) {\n+                    Ok(true) => Some(vec![]),\n+                    Ok(false) => None,\n+                    Err(ErrorReported) => None,\n                 }\n             }\n         }\n \n         PatKind::Range(ref from, ref to) => {\n             let from_value = eval_const_expr(cx.tcx, &from);\n             let to_value = eval_const_expr(cx.tcx, &to);\n-            match range_covered_by_constructor(constructor, &from_value, &to_value) {\n-                Some(true) => Some(vec![]),\n-                Some(false) => None,\n-                None => {\n-                    span_err!(cx.tcx.sess, pat_span, E0299, \"mismatched types between arms\");\n-                    None\n-                }\n+            match range_covered_by_constructor(\n+                cx.tcx, pat_span, constructor, &from_value, &to_value\n+            ) {\n+                Ok(true) => Some(vec![]),\n+                Ok(false) => None,\n+                Err(ErrorReported) => None,\n             }\n         }\n "}, {"sha": "45414c33c075448640ef116443fcaf58f23d4e0d", "filename": "src/librustc_const_eval/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fdiagnostics.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -551,44 +551,46 @@ The `op_string_ref` binding has type `&Option<&String>` in both cases.\n See also https://github.com/rust-lang/rust/issues/14587\n \"##,\n \n-E0306: r##\"\n-In an array literal `[x; N]`, `N` is the number of elements in the array. This\n-must be an unsigned integer. Erroneous code example:\n+E0080: r##\"\n+This error indicates that the compiler was unable to sensibly evaluate an\n+constant expression that had to be evaluated. Attempting to divide by 0\n+or causing integer overflow are two ways to induce this error. For example:\n \n ```compile_fail\n-let x = [0i32; true]; // error: expected positive integer for repeat count,\n-                      //        found boolean\n+enum Enum {\n+    X = (1 << 500),\n+    Y = (1 / 0)\n+}\n ```\n \n-Working example:\n+Ensure that the expressions given can be evaluated as the desired integer type.\n+See the FFI section of the Reference for more information about using a custom\n+integer type:\n \n-```\n-let x = [0i32; 2];\n-```\n+https://doc.rust-lang.org/reference.html#ffi-attributes\n \"##,\n \n-E0307: r##\"\n-The length of an array is part of its type. For this reason, this length must\n-be a compile-time constant. Erroneous code example:\n+\n+E0306: r##\"\n+In an array literal `[x; N]`, `N` is the number of elements in the array. This\n+must be an unsigned integer. Erroneous code example:\n \n ```compile_fail\n-    let len = 10;\n-    let x = [0i32; len]; // error: expected constant integer for repeat count,\n-                         //        found variable\n+let x = [0i32; true]; // error: expected positive integer for repeat count,\n+                      //        found boolean\n ```\n \n Working example:\n \n ```\n-let x = [0i32; 10];\n+let x = [0i32; 2];\n ```\n \"##,\n-\n }\n \n \n register_diagnostics! {\n-E0298, // mismatched types between arms\n-E0299, // mismatched types between arms\n-E0471, // constant evaluation error: ..\n+    E0298, // cannot compare constants\n+//  E0299, // mismatched types between arms\n+//  E0471, // constant evaluation error (in pattern)\n }"}, {"sha": "03d2f596e216544a0fb8835585125de039b3b153", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 191, "deletions": 67, "changes": 258, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -25,6 +25,7 @@ use rustc::hir::pat_util::def_to_path;\n use rustc::ty::{self, Ty, TyCtxt, subst};\n use rustc::ty::util::IntTypeExt;\n use rustc::traits::ProjectionMode;\n+use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::NodeMap;\n use rustc::lint;\n \n@@ -43,6 +44,7 @@ use std::cmp::Ordering;\n use std::collections::hash_map::Entry::Vacant;\n \n use rustc_const_math::*;\n+use rustc_errors::{DiagnosticBuilder, check_old_school};\n \n macro_rules! math {\n     ($e:expr, $op:expr) => {\n@@ -338,20 +340,80 @@ pub fn const_expr_to_pat<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     Ok(P(hir::Pat { id: expr.id, node: pat, span: span }))\n }\n \n+pub fn report_const_eval_err<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    err: &ConstEvalErr,\n+    primary_span: Span,\n+    primary_kind: &str)\n+    -> DiagnosticBuilder<'tcx>\n+{\n+    let mut err = err;\n+    while let &ConstEvalErr { kind: ErroneousReferencedConstant(box ref i_err), .. } = err {\n+        err = i_err;\n+    }\n+\n+    let mut diag = struct_span_err!(tcx.sess, err.span, E0080, \"constant evaluation error\");\n+    note_const_eval_err(tcx, err, primary_span, primary_kind, &mut diag);\n+    diag\n+}\n+\n+pub fn fatal_const_eval_err<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    err: &ConstEvalErr,\n+    primary_span: Span,\n+    primary_kind: &str)\n+    -> !\n+{\n+    report_const_eval_err(tcx, err, primary_span, primary_kind).emit();\n+    tcx.sess.abort_if_errors();\n+    unreachable!()\n+}\n+\n+pub fn note_const_eval_err<'a, 'tcx>(\n+    _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    err: &ConstEvalErr,\n+    primary_span: Span,\n+    primary_kind: &str,\n+    diag: &mut DiagnosticBuilder)\n+{\n+    match err.description() {\n+        ConstEvalErrDescription::Simple(message) => {\n+            if check_old_school() {\n+                diag.note(&message);\n+            } else {\n+                diag.span_label(err.span, &message);\n+            }\n+        }\n+        ConstEvalErrDescription::ExpectedFound { error, expected, found } => {\n+            if check_old_school() {\n+                diag.note(&error);\n+            } else {\n+                diag.span_label(err.span, &error);\n+            }\n+            diag.note(&format!(\"expected `{}`\", expected));\n+            diag.note(&format!(\"found `{}`\", found));\n+        }\n+    }\n+\n+    if !primary_span.contains(err.span) {\n+        diag.span_note(primary_span,\n+                       &format!(\"for {} here\", primary_kind));\n+    }\n+}\n+\n pub fn eval_const_expr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                  e: &Expr) -> ConstVal {\n     match eval_const_expr_partial(tcx, e, ExprTypeChecked, None) {\n         Ok(r) => r,\n         // non-const path still needs to be a fatal error, because enums are funky\n         Err(s) => {\n+            report_const_eval_err(tcx, &s, e.span, \"expression\").emit();\n             match s.kind {\n                 NonConstPath |\n-                UnimplementedConstVal(_) => tcx.sess.span_fatal(s.span, &s.description()),\n-                _ => {\n-                    tcx.sess.span_err(s.span, &s.description());\n-                    Dummy\n-                }\n+                UnimplementedConstVal(_) => tcx.sess.abort_if_errors(),\n+                _ => {}\n             }\n+            Dummy\n         },\n     }\n }\n@@ -400,6 +462,7 @@ pub enum ErrKind {\n     IntermediateUnsignedNegative,\n     /// Expected, Got\n     TypeMismatch(String, ConstInt),\n+\n     BadType(ConstVal),\n     ErroneousReferencedConstant(Box<ConstEvalErr>),\n     CharCast(ConstInt),\n@@ -411,57 +474,96 @@ impl From<ConstMathErr> for ErrKind {\n     }\n }\n \n+#[derive(Clone, Debug)]\n+pub enum ConstEvalErrDescription<'a> {\n+    Simple(Cow<'a, str>),\n+    ExpectedFound {\n+        error: Cow<'a, str>,\n+        expected: Cow<'a, str>,\n+        found: Cow<'a, str>\n+    }\n+}\n+\n+impl<'a> ConstEvalErrDescription<'a> {\n+    /// Return a one-line description of the error, for lints and such\n+    pub fn into_oneline(self) -> Cow<'a, str> {\n+        match self {\n+            ConstEvalErrDescription::Simple(simple) => simple,\n+            ConstEvalErrDescription::ExpectedFound {\n+                error,\n+                expected,\n+                found\n+            } => {\n+                format!(\"{}: expected `{}`, found `{}`\", error, expected, found)\n+                    .into_cow()\n+            }\n+        }\n+    }\n+}\n+\n impl ConstEvalErr {\n-    pub fn description(&self) -> Cow<str> {\n+    pub fn description(&self) -> ConstEvalErrDescription {\n         use self::ErrKind::*;\n+        use self::ConstEvalErrDescription::*;\n+\n+        macro_rules! simple {\n+            ($msg:expr) => ({ Simple($msg.into_cow()) });\n+            ($fmt:expr, $($arg:tt)+) => ({\n+                Simple(format!($fmt, $($arg)+).into_cow())\n+            })\n+        }\n \n         match self.kind {\n-            CannotCast => \"can't cast this type\".into_cow(),\n-            CannotCastTo(s) => format!(\"can't cast this type to {}\", s).into_cow(),\n-            InvalidOpForInts(_) =>  \"can't do this op on integrals\".into_cow(),\n-            InvalidOpForBools(_) =>  \"can't do this op on bools\".into_cow(),\n-            InvalidOpForFloats(_) => \"can't do this op on floats\".into_cow(),\n-            InvalidOpForIntUint(..) => \"can't do this op on an isize and usize\".into_cow(),\n-            InvalidOpForUintInt(..) => \"can't do this op on a usize and isize\".into_cow(),\n-            NegateOn(ref const_val) => format!(\"negate on {}\", const_val.description()).into_cow(),\n-            NotOn(ref const_val) => format!(\"not on {}\", const_val.description()).into_cow(),\n-            CallOn(ref const_val) => format!(\"call on {}\", const_val.description()).into_cow(),\n-\n-            MissingStructField  => \"nonexistent struct field\".into_cow(),\n-            NonConstPath        => \"non-constant path in constant expression\".into_cow(),\n+            CannotCast => simple!(\"can't cast this type\"),\n+            CannotCastTo(s) => simple!(\"can't cast this type to {}\", s),\n+            InvalidOpForInts(_) =>  simple!(\"can't do this op on integrals\"),\n+            InvalidOpForBools(_) =>  simple!(\"can't do this op on bools\"),\n+            InvalidOpForFloats(_) => simple!(\"can't do this op on floats\"),\n+            InvalidOpForIntUint(..) => simple!(\"can't do this op on an isize and usize\"),\n+            InvalidOpForUintInt(..) => simple!(\"can't do this op on a usize and isize\"),\n+            NegateOn(ref const_val) => simple!(\"negate on {}\", const_val.description()),\n+            NotOn(ref const_val) => simple!(\"not on {}\", const_val.description()),\n+            CallOn(ref const_val) => simple!(\"call on {}\", const_val.description()),\n+\n+            MissingStructField  => simple!(\"nonexistent struct field\"),\n+            NonConstPath        => simple!(\"non-constant path in constant expression\"),\n             UnimplementedConstVal(what) =>\n-                format!(\"unimplemented constant expression: {}\", what).into_cow(),\n-            UnresolvedPath => \"unresolved path in constant expression\".into_cow(),\n-            ExpectedConstTuple => \"expected constant tuple\".into_cow(),\n-            ExpectedConstStruct => \"expected constant struct\".into_cow(),\n-            TupleIndexOutOfBounds => \"tuple index out of bounds\".into_cow(),\n-            IndexedNonVec => \"indexing is only supported for arrays\".into_cow(),\n-            IndexNegative => \"indices must be non-negative integers\".into_cow(),\n-            IndexNotInt => \"indices must be integers\".into_cow(),\n+                simple!(\"unimplemented constant expression: {}\", what),\n+            UnresolvedPath => simple!(\"unresolved path in constant expression\"),\n+            ExpectedConstTuple => simple!(\"expected constant tuple\"),\n+            ExpectedConstStruct => simple!(\"expected constant struct\"),\n+            TupleIndexOutOfBounds => simple!(\"tuple index out of bounds\"),\n+            IndexedNonVec => simple!(\"indexing is only supported for arrays\"),\n+            IndexNegative => simple!(\"indices must be non-negative integers\"),\n+            IndexNotInt => simple!(\"indices must be integers\"),\n             IndexOutOfBounds { len, index } => {\n-                format!(\"index out of bounds: the len is {} but the index is {}\",\n-                        len, index).into_cow()\n+                simple!(\"index out of bounds: the len is {} but the index is {}\",\n+                        len, index)\n             }\n-            RepeatCountNotNatural => \"repeat count must be a natural number\".into_cow(),\n-            RepeatCountNotInt => \"repeat count must be integers\".into_cow(),\n+            RepeatCountNotNatural => simple!(\"repeat count must be a natural number\"),\n+            RepeatCountNotInt => simple!(\"repeat count must be integers\"),\n \n-            MiscBinaryOp => \"bad operands for binary\".into_cow(),\n-            MiscCatchAll => \"unsupported constant expr\".into_cow(),\n-            IndexOpFeatureGated => \"the index operation on const values is unstable\".into_cow(),\n-            Math(ref err) => err.description().into_cow(),\n+            MiscBinaryOp => simple!(\"bad operands for binary\"),\n+            MiscCatchAll => simple!(\"unsupported constant expr\"),\n+            IndexOpFeatureGated => simple!(\"the index operation on const values is unstable\"),\n+            Math(ref err) => Simple(err.description().into_cow()),\n \n-            IntermediateUnsignedNegative => \"during the computation of an unsigned a negative \\\n-                                             number was encountered. This is most likely a bug in\\\n-                                             the constant evaluator\".into_cow(),\n+            IntermediateUnsignedNegative => simple!(\n+                \"during the computation of an unsigned a negative \\\n+                 number was encountered. This is most likely a bug in\\\n+                 the constant evaluator\"),\n \n             TypeMismatch(ref expected, ref got) => {\n-                format!(\"mismatched types: expected `{}`, found `{}`\",\n-                        expected, got.description()).into_cow()\n+                ExpectedFound {\n+                    error: \"mismatched types\".into_cow(),\n+                    expected: <&str>::into_cow(expected),\n+                    found: got.description().into_cow()\n+                }\n             },\n-            BadType(ref i) => format!(\"value of wrong type: {:?}\", i).into_cow(),\n-            ErroneousReferencedConstant(_) => \"could not evaluate referenced constant\".into_cow(),\n+            BadType(ref i) => simple!(\"value of wrong type: {:?}\", i),\n+            ErroneousReferencedConstant(_) => simple!(\"could not evaluate referenced constant\"),\n             CharCast(ref got) => {\n-                format!(\"only `u8` can be cast as `char`, not `{}`\", got.description()).into_cow()\n+                simple!(\"only `u8` can be cast as `char`, not `{}`\", got.description())\n             },\n         }\n     }\n@@ -1185,71 +1287,93 @@ fn parse_float(num: &str, fty_hint: Option<ast::FloatTy>, span: Span) -> ConstFl\n     })\n }\n \n-pub fn compare_const_vals(a: &ConstVal, b: &ConstVal) -> Option<Ordering> {\n-    match (a, b) {\n+pub fn compare_const_vals(tcx: TyCtxt, span: Span, a: &ConstVal, b: &ConstVal)\n+                          -> Result<Ordering, ErrorReported>\n+{\n+    let result = match (a, b) {\n         (&Integral(a), &Integral(b)) => a.try_cmp(b).ok(),\n         (&Float(a), &Float(b)) => a.try_cmp(b).ok(),\n         (&Str(ref a), &Str(ref b)) => Some(a.cmp(b)),\n         (&Bool(a), &Bool(b)) => Some(a.cmp(&b)),\n         (&ByteStr(ref a), &ByteStr(ref b)) => Some(a.cmp(b)),\n         (&Char(a), &Char(ref b)) => Some(a.cmp(b)),\n         _ => None,\n+    };\n+\n+    match result {\n+        Some(result) => Ok(result),\n+        None => {\n+            // FIXME: can this ever be reached?\n+            span_err!(tcx.sess, span, E0298,\n+                      \"type mismatch comparing {} and {}\",\n+                      a.description(),\n+                      b.description());\n+            Err(ErrorReported)\n+        }\n     }\n }\n \n pub fn compare_lit_exprs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                   span: Span,\n                                    a: &Expr,\n-                                   b: &Expr) -> Option<Ordering> {\n+                                   b: &Expr) -> Result<Ordering, ErrorReported> {\n     let a = match eval_const_expr_partial(tcx, a, ExprTypeChecked, None) {\n         Ok(a) => a,\n         Err(e) => {\n-            tcx.sess.span_err(a.span, &e.description());\n-            return None;\n+            report_const_eval_err(tcx, &e, a.span, \"expression\").emit();\n+            return Err(ErrorReported);\n         }\n     };\n     let b = match eval_const_expr_partial(tcx, b, ExprTypeChecked, None) {\n         Ok(b) => b,\n         Err(e) => {\n-            tcx.sess.span_err(b.span, &e.description());\n-            return None;\n+            report_const_eval_err(tcx, &e, b.span, \"expression\").emit();\n+            return Err(ErrorReported);\n         }\n     };\n-    compare_const_vals(&a, &b)\n+    compare_const_vals(tcx, span, &a, &b)\n }\n \n \n-/// Returns the repeat count for a repeating vector expression.\n-pub fn eval_repeat_count<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                   count_expr: &hir::Expr) -> usize {\n+/// Returns the value of the length-valued expression\n+pub fn eval_length<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                             count_expr: &hir::Expr,\n+                             reason: &str)\n+                             -> Result<usize, ErrorReported>\n+{\n     let hint = UncheckedExprHint(tcx.types.usize);\n     match eval_const_expr_partial(tcx, count_expr, hint, None) {\n         Ok(Integral(Usize(count))) => {\n             let val = count.as_u64(tcx.sess.target.uint_type);\n             assert_eq!(val as usize as u64, val);\n-            val as usize\n+            Ok(val as usize)\n         },\n         Ok(const_val) => {\n             span_err!(tcx.sess, count_expr.span, E0306,\n-                      \"expected positive integer for repeat count, found {}\",\n+                      \"expected usize for {}, found {}\",\n+                      reason,\n                       const_val.description());\n-            0\n+            Err(ErrorReported)\n         }\n         Err(err) => {\n-            let err_msg = match count_expr.node {\n+            let mut diag = report_const_eval_err(\n+                tcx, &err, count_expr.span, reason);\n+\n+            match count_expr.node {\n                 hir::ExprPath(None, hir::Path {\n                     global: false,\n                     ref segments,\n                     ..\n-                }) if segments.len() == 1 =>\n-                    format!(\"found variable\"),\n-                _ => match err.kind {\n-                    MiscCatchAll => format!(\"but found {}\", err.description()),\n-                    _ => format!(\"but {}\", err.description())\n+                }) if segments.len() == 1 => {\n+                    if let Some(Def::Local(..)) = tcx.expect_def_or_none(count_expr.id) {\n+                        diag.note(&format!(\"`{}` is a variable\", segments[0].name));\n+                    }\n                 }\n-            };\n-            span_err!(tcx.sess, count_expr.span, E0307,\n-                \"expected constant integer for repeat count, {}\", err_msg);\n-            0\n+                _ => {}\n+            }\n+\n+            diag.emit();\n+            Err(ErrorReported)\n         }\n     }\n }"}, {"sha": "a6714c178e7cf68c46e750891dd39703f285c401", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -36,6 +36,7 @@\n #[macro_use] extern crate rustc;\n extern crate rustc_back;\n extern crate rustc_const_math;\n+extern crate rustc_errors;\n extern crate graphviz;\n extern crate syntax_pos;\n extern crate serialize as rustc_serialize; // used by deriving"}, {"sha": "b0ba38f1db67322d33aa51dac8e0d5fd41f26492", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -40,6 +40,7 @@ use rustc::middle::mem_categorization as mc;\n use rustc::middle::mem_categorization::Categorization;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::traits::ProjectionMode;\n+use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::NodeMap;\n use rustc::middle::const_qualif::ConstQualif;\n use rustc::lint::builtin::CONST_ERR;\n@@ -116,7 +117,7 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n                 _ => self.tcx.sess.add_lint(CONST_ERR, expr.id, expr.span,\n                                          format!(\"constant evaluation error: {}. This will \\\n                                                  become a HARD ERROR in the future\",\n-                                                 err.description())),\n+                                                 err.description().into_oneline())),\n             }\n         }\n         self.with_mode(mode, |this| {\n@@ -211,15 +212,6 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n             }\n         }\n     }\n-\n-    fn msg(&self) -> &'static str {\n-        match self.mode {\n-            Mode::Const => \"constant\",\n-            Mode::ConstFn => \"constant function\",\n-            Mode::StaticMut | Mode::Static => \"static\",\n-            Mode::Var => bug!(),\n-        }\n-    }\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n@@ -289,18 +281,14 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                 self.global_expr(Mode::Const, &start);\n                 self.global_expr(Mode::Const, &end);\n \n-                match compare_lit_exprs(self.tcx, start, end) {\n-                    Some(Ordering::Less) |\n-                    Some(Ordering::Equal) => {}\n-                    Some(Ordering::Greater) => {\n+                match compare_lit_exprs(self.tcx, p.span, start, end) {\n+                    Ok(Ordering::Less) |\n+                    Ok(Ordering::Equal) => {}\n+                    Ok(Ordering::Greater) => {\n                         span_err!(self.tcx.sess, start.span, E0030,\n                             \"lower range bound must be less than or equal to upper\");\n                     }\n-                    None => {\n-                        span_err!(self.tcx.sess, p.span, E0014,\n-                                  \"paths in {}s may only refer to constants\",\n-                                  self.msg());\n-                    }\n+                    Err(ErrorReported) => {}\n                 }\n             }\n             _ => intravisit::walk_pat(self, p)\n@@ -429,7 +417,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                 Err(msg) => {\n                     self.tcx.sess.add_lint(CONST_ERR, ex.id,\n                                            msg.span,\n-                                           msg.description().into_owned())\n+                                           msg.description().into_oneline().into_owned())\n                 }\n             }\n         }"}, {"sha": "a616b95ef7203ad312ba54a6a6af4c127d907aca", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -11,7 +11,7 @@\n #![allow(non_snake_case)]\n \n register_long_diagnostics! {\n-\n+/*\n E0014: r##\"\n Constants can only be initialized by a constant value or, in a future\n version of Rust, a call to a const function. This error indicates the use\n@@ -30,7 +30,7 @@ const FOO: i32 = { const X : i32 = 0; X };\n const FOO2: i32 = { 0 }; // but brackets are useless here\n ```\n \"##,\n-\n+*/\n E0030: r##\"\n When matching against a range, the compiler verifies that the range is\n non-empty.  Range patterns include both end-points, so this is equivalent to"}, {"sha": "f7fd970f37f2f89e1a4686f541ef9ea5984343bc", "filename": "src/librustc_trans/_match.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_trans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_trans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2F_match.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -190,7 +190,7 @@ use self::FailureHandler::*;\n \n use llvm::{ValueRef, BasicBlockRef};\n use rustc_const_eval::check_match::{self, Constructor, StaticInliner};\n-use rustc_const_eval::{compare_lit_exprs, eval_const_expr};\n+use rustc_const_eval::{compare_lit_exprs, eval_const_expr, fatal_const_eval_err};\n use rustc::hir::def::{Def, DefMap};\n use rustc::hir::def_id::DefId;\n use middle::expr_use_visitor as euv;\n@@ -239,9 +239,9 @@ struct ConstantExpr<'a>(&'a hir::Expr);\n \n impl<'a> ConstantExpr<'a> {\n     fn eq<'b, 'tcx>(self, other: ConstantExpr<'a>, tcx: TyCtxt<'b, 'tcx, 'tcx>) -> bool {\n-        match compare_lit_exprs(tcx, self.0, other.0) {\n-            Some(result) => result == Ordering::Equal,\n-            None => bug!(\"compare_list_exprs: type mismatch\"),\n+        match compare_lit_exprs(tcx, self.0.span, self.0, other.0) {\n+            Ok(result) => result == Ordering::Equal,\n+            Err(_) => bug!(\"compare_list_exprs: type mismatch\"),\n         }\n     }\n }\n@@ -288,7 +288,9 @@ impl<'a, 'b, 'tcx> Opt<'a, 'tcx> {\n                 let expr = consts::const_expr(ccx, &lit_expr, bcx.fcx.param_substs, None, Yes);\n                 let llval = match expr {\n                     Ok((llval, _)) => llval,\n-                    Err(err) => bcx.ccx().sess().span_fatal(lit_expr.span, &err.description()),\n+                    Err(err) => {\n+                        fatal_const_eval_err(bcx.tcx(), err.as_inner(), lit_expr.span, \"pattern\");\n+                    }\n                 };\n                 let lit_datum = immediate_rvalue(llval, lit_ty);\n                 let lit_datum = unpack_datum!(bcx, lit_datum.to_appropriate_datum(bcx));\n@@ -297,11 +299,11 @@ impl<'a, 'b, 'tcx> Opt<'a, 'tcx> {\n             ConstantRange(ConstantExpr(ref l1), ConstantExpr(ref l2), _) => {\n                 let l1 = match consts::const_expr(ccx, &l1, bcx.fcx.param_substs, None, Yes) {\n                     Ok((l1, _)) => l1,\n-                    Err(err) => bcx.ccx().sess().span_fatal(l1.span, &err.description()),\n+                    Err(err) => fatal_const_eval_err(bcx.tcx(), err.as_inner(), l1.span, \"pattern\"),\n                 };\n                 let l2 = match consts::const_expr(ccx, &l2, bcx.fcx.param_substs, None, Yes) {\n                     Ok((l2, _)) => l2,\n-                    Err(err) => bcx.ccx().sess().span_fatal(l2.span, &err.description()),\n+                    Err(err) => fatal_const_eval_err(bcx.tcx(), err.as_inner(), l2.span, \"pattern\"),\n                 };\n                 RangeResult(Result::new(bcx, l1), Result::new(bcx, l2))\n             }"}, {"sha": "f662ba75cc6fea7c5e4f014d30e4c69ba67171f8", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -14,7 +14,7 @@ use llvm::{ConstFCmp, ConstICmp, SetLinkage, SetUnnamedAddr};\n use llvm::{InternalLinkage, ValueRef, Bool, True};\n use middle::const_qualif::ConstQualif;\n use rustc_const_eval::{ConstEvalErr, lookup_const_fn_by_id, lookup_const_by_id, ErrKind};\n-use rustc_const_eval::eval_repeat_count;\n+use rustc_const_eval::{eval_length, report_const_eval_err, note_const_eval_err};\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map as hir_map;\n@@ -44,7 +44,6 @@ use rustc_const_math::{ConstInt, ConstUsize, ConstIsize};\n use rustc::hir;\n \n use std::ffi::{CStr, CString};\n-use std::borrow::Cow;\n use libc::c_uint;\n use syntax::ast::{self, LitKind};\n use syntax::attr::{self, AttrMetaMethods};\n@@ -250,10 +249,11 @@ impl ConstEvalFailure {\n             Compiletime(e) => e,\n         }\n     }\n-    pub fn description(&self) -> Cow<str> {\n+\n+    pub fn as_inner(&self) -> &ConstEvalErr {\n         match self {\n-            &Runtime(ref e) => e.description(),\n-            &Compiletime(ref e) => e.description(),\n+            &Runtime(ref e) => e,\n+            &Compiletime(ref e) => e,\n         }\n     }\n }\n@@ -274,7 +274,7 @@ fn get_const_val<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let empty_substs = ccx.tcx().mk_substs(Substs::empty());\n     match get_const_expr_as_global(ccx, expr, ConstQualif::empty(), empty_substs, TrueConst::Yes) {\n         Err(Runtime(err)) => {\n-            ccx.tcx().sess.span_err(expr.span, &err.description());\n+            report_const_eval_err(ccx.tcx(), &err, expr.span, \"expression\").emit();\n             Err(Compiletime(err))\n         },\n         other => other,\n@@ -526,12 +526,15 @@ pub fn const_err<T>(cx: &CrateContext,\n         (Ok(x), _) => Ok(x),\n         (Err(err), TrueConst::Yes) => {\n             let err = ConstEvalErr{ span: span, kind: err };\n-            cx.tcx().sess.span_err(span, &err.description());\n+            report_const_eval_err(cx.tcx(), &err, span, \"expression\").emit();\n             Err(Compiletime(err))\n         },\n         (Err(err), TrueConst::No) => {\n             let err = ConstEvalErr{ span: span, kind: err };\n-            cx.tcx().sess.span_warn(span, &err.description());\n+            let mut diag = cx.tcx().sess.struct_span_warn(\n+                span, \"this expression will panic at run-time\");\n+            note_const_eval_err(cx.tcx(), &err, span, \"expression\", &mut diag);\n+            diag.emit();\n             Err(Runtime(err))\n         },\n     }\n@@ -875,7 +878,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         hir::ExprRepeat(ref elem, ref count) => {\n             let unit_ty = ety.sequence_element_type(cx.tcx());\n             let llunitty = type_of::type_of(cx, unit_ty);\n-            let n = eval_repeat_count(cx.tcx(), count);\n+            let n = eval_length(cx.tcx(), count, \"repeat count\").unwrap();\n             let unit_val = const_expr(cx, &elem, param_substs, fn_args, trueconst)?.0;\n             let vs = vec![unit_val; n];\n             if val_ty(unit_val) != llunitty {"}, {"sha": "bc5f3a0f22e2aa725d51745b2dd10c262ccd2681", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -44,6 +44,7 @@ use syntax::ptr::P;\n use syntax::parse::token;\n \n use rustc::session::Session;\n+use rustc_const_eval::fatal_const_eval_err;\n use syntax_pos::{Span, DUMMY_SP};\n \n use std::cmp::Ordering;\n@@ -1408,7 +1409,10 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n                                          // this should probably help simd error reporting\n                                          consts::TrueConst::Yes) {\n                     Ok((vector, _)) => vector,\n-                    Err(err) => bcx.sess().span_fatal(span, &err.description()),\n+                    Err(err) => {\n+                        fatal_const_eval_err(bcx.tcx(), err.as_inner(), span,\n+                                             \"shuffle indices\");\n+                    }\n                 }\n             }\n             None => llargs[2]"}, {"sha": "1f3b13203163f7fbf6cbab2ea681e6fea84572f7", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -925,7 +925,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n             }\n             Err(ConstEvalFailure::Runtime(err)) => {\n                 span_bug!(constant.span,\n-                          \"MIR constant {:?} results in runtime panic: {}\",\n+                          \"MIR constant {:?} results in runtime panic: {:?}\",\n                           constant, err.description())\n             }\n         }"}, {"sha": "fc95d208f32ccdda8c926e2be3a03e1a6c11eb95", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -29,6 +29,7 @@ use rustc::hir::def_id::DefId;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::subst;\n use rustc::dep_graph::DepNode;\n+use rustc_const_eval::fatal_const_eval_err;\n use std::hash::{Hash, Hasher};\n use syntax::ast::{self, NodeId};\n use syntax::{attr,errors};\n@@ -81,7 +82,11 @@ impl<'a, 'tcx> TransItem<'tcx> {\n                 if let hir::ItemStatic(_, m, ref expr) = item.node {\n                     match consts::trans_static(&ccx, m, expr, item.id, &item.attrs) {\n                         Ok(_) => { /* Cool, everything's alright. */ },\n-                        Err(err) => ccx.tcx().sess.span_fatal(expr.span, &err.description()),\n+                        Err(err) => {\n+                            // FIXME: shouldn't this be a `span_err`?\n+                            fatal_const_eval_err(\n+                                ccx.tcx(), &err, expr.span, \"static\");\n+                        }\n                     };\n                 } else {\n                     span_bug!(item.span, \"Mismatch between hir::Item type and TransItem type\")"}, {"sha": "92a2d3787bfd6b60bc5184233f24893e10e91ab3", "filename": "src/librustc_trans/tvec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_trans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_trans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftvec.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -30,7 +30,7 @@ use value::Value;\n use rustc::ty::{self, Ty};\n \n use rustc::hir;\n-use rustc_const_eval::eval_repeat_count;\n+use rustc_const_eval::eval_length;\n \n use syntax::ast;\n use syntax::parse::token::InternedString;\n@@ -218,7 +218,7 @@ fn write_content<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     return expr::trans_into(bcx, &element, Ignore);\n                 }\n                 SaveIn(lldest) => {\n-                    match eval_repeat_count(bcx.tcx(), &count_expr) {\n+                    match eval_length(bcx.tcx(), &count_expr, \"repeat count\").unwrap() {\n                         0 => expr::trans_into(bcx, &element, Ignore),\n                         1 => expr::trans_into(bcx, &element, SaveIn(lldest)),\n                         count => {\n@@ -268,7 +268,7 @@ fn elements_required(bcx: Block, content_expr: &hir::Expr) -> usize {\n         },\n         hir::ExprVec(ref es) => es.len(),\n         hir::ExprRepeat(_, ref count_expr) => {\n-            eval_repeat_count(bcx.tcx(), &count_expr)\n+            eval_length(bcx.tcx(), &count_expr, \"repeat count\").unwrap()\n         }\n         _ => span_bug!(content_expr.span, \"unexpected vec content\")\n     }"}, {"sha": "b642a7122194de3059babc25f116b8725dbd31a1", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -48,10 +48,7 @@\n //! case but `&a` in the second.  Basically, defaults that appear inside\n //! an rptr (`&r.T`) use the region `r` that appears in the rptr.\n \n-use middle::const_val::ConstVal;\n-use rustc_const_eval::{eval_const_expr_partial, ConstEvalErr};\n-use rustc_const_eval::EvalHint::UncheckedExprHint;\n-use rustc_const_eval::ErrKind::ErroneousReferencedConstant;\n+use rustc_const_eval::eval_length;\n use hir::{self, SelfKind};\n use hir::def::{Def, PathResolution};\n use hir::def_id::DefId;\n@@ -70,7 +67,6 @@ use rscope::{self, UnelidableRscope, RegionScope, ElidableRscope,\n use util::common::{ErrorReported, FN_OUTPUT_NAME};\n use util::nodemap::{NodeMap, FnvHashSet};\n \n-use rustc_const_math::ConstInt;\n use std::cell::RefCell;\n use syntax::{abi, ast};\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n@@ -1741,33 +1737,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 ty\n             }\n             hir::TyFixedLengthVec(ref ty, ref e) => {\n-                let hint = UncheckedExprHint(tcx.types.usize);\n-                match eval_const_expr_partial(tcx.global_tcx(), &e, hint, None) {\n-                    Ok(ConstVal::Integral(ConstInt::Usize(i))) => {\n-                        let i = i.as_u64(tcx.sess.target.uint_type);\n-                        assert_eq!(i as usize as u64, i);\n-                        tcx.mk_array(self.ast_ty_to_ty(rscope, &ty), i as usize)\n-                    },\n-                    Ok(val) => {\n-                        span_err!(tcx.sess, ast_ty.span, E0249,\n-                                  \"expected usize value for array length, got {}\",\n-                                  val.description());\n-                        self.tcx().types.err\n-                    },\n-                    // array length errors happen before the global constant check\n-                    // so we need to report the real error\n-                    Err(ConstEvalErr { kind: ErroneousReferencedConstant(box r), ..}) |\n-                    Err(r) => {\n-                        let mut err = struct_span_err!(tcx.sess, r.span, E0250,\n-                                                       \"array length constant \\\n-                                                        evaluation error: {}\",\n-                                                       r.description());\n-                        if !ast_ty.span.contains(r.span) {\n-                            span_note!(&mut err, ast_ty.span, \"for array length here\")\n-                        }\n-                        err.emit();\n-                        self.tcx().types.err\n-                    }\n+                if let Ok(length) = eval_length(tcx.global_tcx(), &e, \"array length\") {\n+                    tcx.mk_array(self.ast_ty_to_ty(rscope, &ty), length)\n+                } else {\n+                    self.tcx().types.err\n                 }\n             }\n             hir::TyTypeof(ref _e) => {"}, {"sha": "c01edc568afd0547cfdb4ea71877e840ac7c1238", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -126,7 +126,7 @@ use rustc::hir::intravisit::{self, Visitor};\n use rustc::hir::{self, PatKind};\n use rustc::hir::print as pprust;\n use rustc_back::slice;\n-use rustc_const_eval::eval_repeat_count;\n+use rustc_const_eval::eval_length;\n \n mod assoc;\n mod autoderef;\n@@ -3539,7 +3539,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n           }\n           hir::ExprRepeat(ref element, ref count_expr) => {\n             self.check_expr_has_type(&count_expr, tcx.types.usize);\n-            let count = eval_repeat_count(self.tcx.global_tcx(), &count_expr);\n+            let count = eval_length(self.tcx.global_tcx(), &count_expr, \"repeat count\")\n+                  .unwrap_or(0);\n \n             let uty = match expected {\n                 ExpectHasType(uty) => {"}, {"sha": "57602b55cc96f10e5bb4110692cd481c361bdf95", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -66,8 +66,7 @@ use constrained_type_params as ctp;\n use middle::lang_items::SizedTraitLangItem;\n use middle::const_val::ConstVal;\n use rustc_const_eval::EvalHint::UncheckedExprHint;\n-use rustc_const_eval::{eval_const_expr_partial, ConstEvalErr};\n-use rustc_const_eval::ErrKind::ErroneousReferencedConstant;\n+use rustc_const_eval::{eval_const_expr_partial, report_const_eval_err};\n use rustc::ty::subst::{Substs, FnSpace, ParamSpace, SelfSpace, TypeSpace, VecPerParamSpace};\n use rustc::ty::{ToPredicate, ImplContainer, ImplOrTraitItemContainer, TraitContainer};\n use rustc::ty::{self, ToPolyTraitRef, Ty, TyCtxt, TypeScheme};\n@@ -1091,14 +1090,9 @@ fn convert_struct_def<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             },\n             // enum variant evaluation happens before the global constant check\n             // so we need to report the real error\n-            Err(ConstEvalErr { kind: ErroneousReferencedConstant(box err), ..}) |\n             Err(err) => {\n-                let mut diag = struct_span_err!(ccx.tcx.sess, err.span, E0080,\n-                                                \"constant evaluation error: {}\",\n-                                                err.description());\n-                if !e.span.contains(err.span) {\n-                    diag.span_note(e.span, \"for enum discriminant here\");\n-                }\n+                let mut diag = report_const_eval_err(\n+                    ccx.tcx, &err, e.span, \"enum discriminant\");\n                 diag.emit();\n                 None\n             }"}, {"sha": "38bf869119c6a742b04c365828bf8e616047fc13", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -1079,25 +1079,6 @@ impl Foo {\n ```\n \"##,\n \n-E0080: r##\"\n-This error indicates that the compiler was unable to sensibly evaluate an\n-integer expression provided as an enum discriminant. Attempting to divide by 0\n-or causing integer overflow are two ways to induce this error. For example:\n-\n-```compile_fail\n-enum Enum {\n-    X = (1 << 500),\n-    Y = (1 / 0)\n-}\n-```\n-\n-Ensure that the expressions given can be evaluated as the desired integer type.\n-See the FFI section of the Reference for more information about using a custom\n-integer type:\n-\n-https://doc.rust-lang.org/reference.html#ffi-attributes\n-\"##,\n-\n E0081: r##\"\n Enum discriminants are used to differentiate enum variants stored in memory.\n This error indicates that the same value was used for two or more variants,\n@@ -2970,38 +2951,6 @@ not a distinct static type. Likewise, it's not legal to attempt to\n behavior for specific enum variants.\n \"##,\n \n-E0249: r##\"\n-This error indicates a constant expression for the array length was found, but\n-it was not an integer (signed or unsigned) expression.\n-\n-Some examples of code that produces this error are:\n-\n-```compile_fail\n-const A: [u32; \"hello\"] = []; // error\n-const B: [u32; true] = []; // error\n-const C: [u32; 0.0] = []; // error\n-\"##,\n-\n-E0250: r##\"\n-There was an error while evaluating the expression for the length of a fixed-\n-size array type.\n-\n-Some examples of this error are:\n-\n-```compile_fail\n-// divide by zero in the length expression\n-const A: [u32; 1/0] = [];\n-\n-// Rust currently will not evaluate the function `foo` at compile time\n-fn foo() -> usize { 12 }\n-const B: [u32; foo()] = [];\n-\n-// it is an error to try to add `u8` and `f64`\n-use std::{f64, u8};\n-const C: [u32; u8::MAX + f64::EPSILON] = [];\n-```\n-\"##,\n-\n E0318: r##\"\n Default impls for a trait must be located in the same crate where the trait was\n defined. For more information see the [opt-in builtin traits RFC](https://github\n@@ -4088,6 +4037,7 @@ register_diagnostics! {\n     E0245, // not a trait\n //  E0246, // invalid recursive type\n //  E0247,\n+//  E0249,\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums\n     E0320, // recursive overflow during dropck\n     E0328, // cannot implement Unsize explicitly"}, {"sha": "0b2287cf233d15becbf9d5da283d62194d473483", "filename": "src/rustc/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Frustc%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Frustc%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FCargo.lock?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -105,6 +105,7 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n+ \"rustc_errors 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\","}, {"sha": "501c66e75cded115892fddfe02c0be9588b0c9c0", "filename": "src/test/compile-fail/array_const_index-0.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Farray_const_index-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Farray_const_index-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray_const_index-0.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -10,7 +10,8 @@\n \n const A: &'static [i32] = &[];\n const B: i32 = (&A)[1];\n-//~^ ERROR index out of bounds: the len is 0 but the index is 1\n+//~^ ERROR constant evaluation error\n+//~| index out of bounds: the len is 0 but the index is 1\n \n fn main() {\n     let _ = B;"}, {"sha": "d3b43e83bfe5218ac914584e6424f6fd4ee4a9d4", "filename": "src/test/compile-fail/array_const_index-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Farray_const_index-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Farray_const_index-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray_const_index-1.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -10,7 +10,8 @@\n \n const A: [i32; 0] = [];\n const B: i32 = A[1];\n-//~^ ERROR index out of bounds: the len is 0 but the index is 1\n+//~^ ERROR constant evaluation error\n+//~| index out of bounds: the len is 0 but the index is 1\n \n fn main() {\n     let _ = B;"}, {"sha": "0239986f5ad3aef5dfe5886ed2f142bc93c902e1", "filename": "src/test/compile-fail/associated-const-array-len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fassociated-const-array-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fassociated-const-array-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-array-len.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -14,7 +14,7 @@ trait Foo {\n     const ID: usize;\n }\n \n-const X: [i32; <i32 as Foo>::ID] = [0, 1, 2]; //~ ERROR E0250\n+const X: [i32; <i32 as Foo>::ID] = [0, 1, 2]; //~ ERROR E0080\n \n fn main() {\n     assert_eq!(1, X);"}, {"sha": "c3fa39659b968217fb83481c75edea49d0855a37", "filename": "src/test/compile-fail/associated-const-type-parameter-arrays-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arrays-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arrays-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-type-parameter-arrays-2.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -25,7 +25,8 @@ impl Foo for Def {\n }\n \n pub fn test<A: Foo, B: Foo>() {\n-    let _array = [4; <A as Foo>::Y]; //~ error: expected constant integer\n+    let _array = [4; <A as Foo>::Y]; //~ ERROR E0080\n+                                     //~| non-constant path in constant\n }\n \n fn main() {"}, {"sha": "b980bc02c85a24fb22a4d7cb0e161768a0b858fa", "filename": "src/test/compile-fail/const-array-oob.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-array-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-array-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-array-oob.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -16,7 +16,8 @@ const FOO: [u32; 3] = [1, 2, 3];\n const BAR: u32 = FOO[5]; // no error, because the error below occurs before regular const eval\n \n const BLUB: [u32; FOO[4]] = [5, 6];\n-//~^ ERROR array length constant evaluation error: index out of bounds: the len is 3 but the index is 4 [E0250]\n+//~^ ERROR constant evaluation error [E0080]\n+//~| index out of bounds: the len is 3 but the index is 4\n \n fn main() {\n     let _ = BAR;"}, {"sha": "7e2eabf412d6c2683646b19a0bdb27c4e65c4a21", "filename": "src/test/compile-fail/const-call.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-call.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -15,5 +15,6 @@ fn f(x: usize) -> usize {\n }\n \n fn main() {\n-    let _ = [0; f(2)]; //~ ERROR: non-constant path in constant expression [E0307]\n+    let _ = [0; f(2)]; //~ ERROR constant evaluation error [E0080]\n+                       //~| non-constant path in constant expression\n }"}, {"sha": "f2079800cad311e624ee9ca644603877889353d1", "filename": "src/test/compile-fail/const-err.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -22,21 +22,29 @@ fn black_box<T>(_: T) {\n \n // Make sure that the two uses get two errors.\n const FOO: u8 = [5u8][1];\n-//~^ ERROR index out of bounds: the len is 1 but the index is 1\n-//~^^ ERROR index out of bounds: the len is 1 but the index is 1\n+//~^ ERROR constant evaluation error\n+//~| index out of bounds: the len is 1 but the index is 1\n+//~^^^ ERROR constant evaluation error\n+//~| index out of bounds: the len is 1 but the index is 1\n \n fn main() {\n     let a = -std::i8::MIN;\n-    //~^ WARN attempted to negate with overflow\n+    //~^ WARN this expression will panic at run-time\n+    //~| attempted to negate with overflow\n     let b = 200u8 + 200u8 + 200u8;\n-    //~^ WARN attempted to add with overflow\n-    //~| WARN attempted to add with overflow\n+    //~^ WARN this expression will panic at run-time\n+    //~| attempted to add with overflow\n+    //~^^^ WARN this expression will panic at run-time\n+    //~| attempted to add with overflow\n     let c = 200u8 * 4;\n-    //~^ WARN attempted to multiply with overflow\n+    //~^ WARN this expression will panic at run-time\n+    //~| attempted to multiply with overflow\n     let d = 42u8 - (42u8 + 1);\n-    //~^ WARN attempted to subtract with overflow\n+    //~^ WARN this expression will panic at run-time\n+    //~| attempted to subtract with overflow\n     let _e = [5u8][1];\n-    //~^ WARN index out of bounds: the len is 1 but the index is 1\n+    //~^ WARN this expression will panic at run-time\n+    //~| index out of bounds: the len is 1 but the index is 1\n     black_box(a);\n     black_box(b);\n     black_box(c);"}, {"sha": "4749457da8814ba89b294c624f1397770bb495ae", "filename": "src/test/compile-fail/const-eval-overflow-2.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-2.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -19,13 +19,16 @@ use std::{u8, u16, u32, u64, usize};\n \n const NEG_128: i8 = -128;\n const NEG_NEG_128: i8 = -NEG_128;\n-//~^ ERROR constant evaluation error: attempted to negate with overflow\n-//~| ERROR attempted to negate with overflow\n-//~| ERROR attempted to negate with overflow\n+//~^ ERROR constant evaluation error\n+//~| attempted to negate with overflow\n+//~| ERROR constant evaluation error\n+//~| attempted to negate with overflow\n+//~| ERROR constant evaluation error\n+//~| attempted to negate with overflow\n \n fn main() {\n     match -128i8 {\n-        NEG_NEG_128 => println!(\"A\"), //~ NOTE in pattern here\n+        NEG_NEG_128 => println!(\"A\"), //~ NOTE for pattern here\n         _ => println!(\"B\"),\n     }\n }"}, {"sha": "c78c74e9e231b5d8ccfdfbf1b2b250c6e1e4afba", "filename": "src/test/compile-fail/const-eval-overflow-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-3.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -17,7 +17,7 @@\n // self-hosted and a cross-compiled setup; therefore resorting to\n // error-pattern for now.\n \n-// error-pattern: expected constant integer for repeat count, but attempted to add with overflow\n+// error-pattern: attempted to add with overflow\n \n #![allow(unused_imports)]\n "}, {"sha": "e7639a4ff70ab86c90cd8080007118dda94d2cff", "filename": "src/test/compile-fail/const-eval-overflow-4b.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -20,9 +20,10 @@ use std::{u8, u16, u32, u64, usize};\n \n const A_I8_T\n     : [u32; (i8::MAX as i8 + 1u8) as usize]\n-    //~^ ERROR mismatched types:\n-    //~| expected `i8`,\n-    //~| found `u8` [E0250]\n+    //~^ ERROR constant evaluation error [E0080]\n+    //~| mismatched types\n+    //~| expected `i8`\n+    //~| found `u8`\n     = [0; (i8::MAX as usize) + 1];\n \n \n@@ -33,7 +34,8 @@ const A_CHAR_USIZE\n \n const A_BAD_CHAR_USIZE\n     : [u32; 5i8 as char as usize]\n-    //~^ ERROR only `u8` can be cast as `char`, not `i8`\n+    //~^ ERROR constant evaluation error\n+    //~| only `u8` can be cast as `char`, not `i8`\n     = [0; 5];\n \n fn main() {}"}, {"sha": "c1c693544fa96e7fd224ebdeceb01341a3894d2e", "filename": "src/test/compile-fail/const-eval-overflow.rs", "status": "modified", "additions": 56, "deletions": 28, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -21,86 +21,114 @@ use std::{u8, u16, u32, u64, usize};\n \n const VALS_I8: (i8, i8, i8, i8) =\n     (-i8::MIN,\n-     //~^ ERROR attempted to negate with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to negate with overflow\n      i8::MIN - 1,\n-     //~^ ERROR attempted to subtract with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to subtract with overflow\n      i8::MAX + 1,\n-     //~^ ERROR attempted to add with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to add with overflow\n      i8::MIN * 2,\n-     //~^ ERROR attempted to multiply with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to multiply with overflow\n      );\n \n const VALS_I16: (i16, i16, i16, i16) =\n     (-i16::MIN,\n-     //~^ ERROR attempted to negate with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to negate with overflow\n      i16::MIN - 1,\n-     //~^ ERROR attempted to subtract with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to subtract with overflow\n      i16::MAX + 1,\n-     //~^ ERROR attempted to add with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to add with overflow\n      i16::MIN * 2,\n-     //~^ ERROR attempted to multiply with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to multiply with overflow\n      );\n \n const VALS_I32: (i32, i32, i32, i32) =\n     (-i32::MIN,\n-     //~^ ERROR attempted to negate with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to negate with overflow\n      i32::MIN - 1,\n-     //~^ ERROR attempted to subtract with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to subtract with overflow\n      i32::MAX + 1,\n-     //~^ ERROR attempted to add with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to add with overflow\n      i32::MIN * 2,\n-     //~^ ERROR attempted to multiply with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to multiply with overflow\n      );\n \n const VALS_I64: (i64, i64, i64, i64) =\n     (-i64::MIN,\n-     //~^ ERROR attempted to negate with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to negate with overflow\n      i64::MIN - 1,\n-     //~^ ERROR attempted to subtract with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to subtract with overflow\n      i64::MAX + 1,\n-     //~^ ERROR attempted to add with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to add with overflow\n      i64::MAX * 2,\n-     //~^ ERROR attempted to multiply with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to multiply with overflow\n      );\n \n const VALS_U8: (u8, u8, u8, u8) =\n     (-(u8::MIN as i8) as u8,\n      u8::MIN - 1,\n-     //~^ ERROR attempted to subtract with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to subtract with overflow\n      u8::MAX + 1,\n-     //~^ ERROR attempted to add with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to add with overflow\n      u8::MAX * 2,\n-     //~^ ERROR attempted to multiply with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to multiply with overflow\n      );\n \n const VALS_U16: (u16, u16, u16, u16) =\n     (-(u16::MIN as i16) as u16,\n      u16::MIN - 1,\n-     //~^ ERROR attempted to subtract with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to subtract with overflow\n      u16::MAX + 1,\n-     //~^ ERROR attempted to add with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to add with overflow\n      u16::MAX * 2,\n-     //~^ ERROR attempted to multiply with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to multiply with overflow\n      );\n \n const VALS_U32: (u32, u32, u32, u32) =\n     (-(u32::MIN as i32) as u32,\n      u32::MIN - 1,\n-     //~^ ERROR attempted to subtract with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to subtract with overflow\n      u32::MAX + 1,\n-     //~^ ERROR attempted to add with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to add with overflow\n      u32::MAX * 2,\n-     //~^ ERROR attempted to multiply with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to multiply with overflow\n      );\n \n const VALS_U64: (u64, u64, u64, u64) =\n     (-(u64::MIN as i64) as u64,\n      u64::MIN - 1,\n-     //~^ ERROR attempted to subtract with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to subtract with overflow\n      u64::MAX + 1,\n-     //~^ ERROR attempted to add with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to add with overflow\n      u64::MAX * 2,\n-     //~^ ERROR attempted to multiply with overflow\n+     //~^ ERROR constant evaluation error\n+     //~| attempted to multiply with overflow\n      );\n \n fn main() {"}, {"sha": "73351429b50608b770bb11571880aa364e46d666", "filename": "src/test/compile-fail/const-eval-span.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-eval-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-eval-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-span.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -14,7 +14,8 @@\n struct S(i32);\n \n const CONSTANT: S = S(0);\n-//~^ ERROR: unimplemented constant expression: tuple struct constructors [E0080]\n+//~^ ERROR E0080\n+//~| unimplemented constant expression: tuple struct constructors\n \n enum E {\n     V = CONSTANT,"}, {"sha": "dd0f058f2c95c06909e2132d64902b6a1d5c7970", "filename": "src/test/compile-fail/const-fn-error.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -17,10 +17,11 @@ const fn f(x: usize) -> usize {\n     for i in 0..x {\n         sum += i;\n     }\n-    sum //~ ERROR: E0250\n+    sum //~ ERROR E0080\n+        //~| non-constant path in constant\n }\n \n #[allow(unused_variables)]\n fn main() {\n-    let a : [i32; f(X)];\n+    let a : [i32; f(X)]; //~ NOTE for array length here\n }"}, {"sha": "4f92770df289c50c57c43c58e163158ddea6fdc7", "filename": "src/test/compile-fail/const-index-feature-gate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-index-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-index-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-index-feature-gate.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n const ARR: [usize; 1] = [2];\n-const ARR2: [i32; ARR[0]] = [5, 6]; //~ ERROR unstable\n+const ARR2: [i32; ARR[0]] = [5, 6]; //~ ERROR E0080\n+                                    //~| unstable\n \n fn main() {\n }"}, {"sha": "5dadd892f83520cca532436ce88986e7b4649476", "filename": "src/test/compile-fail/const-integer-bool-ops.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-integer-bool-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-integer-bool-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-integer-bool-ops.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -8,30 +8,34 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const X: usize = 42 && 39; //~ ERROR: can't do this op on integrals\n+const X: usize = 42 && 39; //~ ERROR E0080\n+                           //~| can't do this op on integrals\n const ARR: [i32; X] = [99; 34]; //~ NOTE: for array length here\n \n-const X1: usize = 42 || 39; //~ ERROR: can't do this op on integrals\n+const X1: usize = 42 || 39; //~ ERROR E0080\n+                            //~| can't do this op on integrals\n const ARR1: [i32; X1] = [99; 47]; //~ NOTE: for array length here\n \n-const X2: usize = -42 || -39; //~ ERROR: unary negation of unsigned integer\n+const X2: usize = -42 || -39; //~ ERROR E0080\n+                              //~| unary negation of unsigned integer\n const ARR2: [i32; X2] = [99; 18446744073709551607]; //~ NOTE: for array length here\n \n-const X3: usize = -42 && -39; //~ ERROR: unary negation of unsigned integer\n+const X3: usize = -42 && -39; //~ ERROR E0080\n+                              //~| unary negation of unsigned integer\n const ARR3: [i32; X3] = [99; 6]; //~ NOTE: for array length here\n \n const Y: usize = 42.0 == 42.0;\n-const ARRR: [i32; Y] = [99; 1]; //~ ERROR: expected usize value for array length\n+const ARRR: [i32; Y] = [99; 1]; //~ ERROR: expected usize for array length\n const Y1: usize = 42.0 >= 42.0;\n-const ARRR1: [i32; Y] = [99; 1]; //~ ERROR: expected usize value for array length\n+const ARRR1: [i32; Y] = [99; 1]; //~ ERROR: expected usize for array length\n const Y2: usize = 42.0 <= 42.0;\n-const ARRR2: [i32; Y] = [99; 1]; //~ ERROR: expected usize value for array length\n+const ARRR2: [i32; Y] = [99; 1]; //~ ERROR: expected usize for array length\n const Y3: usize = 42.0 > 42.0;\n-const ARRR3: [i32; Y] = [99; 0]; //~ ERROR: expected usize value for array length\n+const ARRR3: [i32; Y] = [99; 0]; //~ ERROR: expected usize for array length\n const Y4: usize = 42.0 < 42.0;\n-const ARRR4: [i32; Y] = [99; 0]; //~ ERROR: expected usize value for array length\n+const ARRR4: [i32; Y] = [99; 0]; //~ ERROR: expected usize for array length\n const Y5: usize = 42.0 != 42.0;\n-const ARRR5: [i32; Y] = [99; 0]; //~ ERROR: expected usize value for array length\n+const ARRR5: [i32; Y] = [99; 0]; //~ ERROR: expected usize for array length\n \n fn main() {\n     let _ = ARR;"}, {"sha": "43375ee3d18968e83645b150088189cdfef4a9ea", "filename": "src/test/compile-fail/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-separate-spans.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -15,7 +15,8 @@\n const ONE: usize = 1;\n const TWO: usize = 2;\n const LEN: usize = ONE - TWO;\n-//~^ ERROR array length constant evaluation error: attempted to subtract with overflow [E0250]\n+//~^ ERROR E0080\n+//~| attempted to subtract with overflow\n \n fn main() {\n     let a: [i8; LEN] = unimplemented!();"}, {"sha": "e338f206553b422110dc9086c5190878b02f91c5", "filename": "src/test/compile-fail/const-len-underflow-subspans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-subspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-subspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-subspans.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -16,5 +16,6 @@ const TWO: usize = 2;\n \n fn main() {\n     let a: [i8; ONE - TWO] = unimplemented!();\n-    //~^ ERROR array length constant evaluation error: attempted to subtract with overflow [E0250]\n+    //~^ ERROR constant evaluation error [E0080]\n+    //~| attempted to subtract with overflow\n }"}, {"sha": "d68d63683a79cc6b2db9beddf7f4ad236bb39ae0", "filename": "src/test/compile-fail/const-pattern-not-const-evaluable.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-pattern-not-const-evaluable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-pattern-not-const-evaluable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-pattern-not-const-evaluable.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -17,22 +17,26 @@ enum Cake {\n use Cake::*;\n \n const BOO: (Cake, Cake) = (Marmor, BlackForest);\n-//~^ ERROR: constant evaluation error: unimplemented constant expression: enum variants [E0471]\n+//~^ ERROR: constant evaluation error [E0080]\n+//~| unimplemented constant expression: enum variants\n const FOO: Cake = BOO.1;\n \n const fn foo() -> Cake {\n-    Marmor //~ ERROR: constant evaluation error: unimplemented constant expression: enum variants\n-    //~^ ERROR: unimplemented constant expression: enum variants\n+    Marmor\n+        //~^ ERROR: constant evaluation error [E0080]\n+        //~| unimplemented constant expression: enum variants\n+        //~^^^ ERROR: constant evaluation error [E0080]\n+        //~| unimplemented constant expression: enum variants\n }\n \n const WORKS: Cake = Marmor;\n \n-const GOO: Cake = foo();\n+const GOO: Cake = foo(); //~ NOTE for expression here\n \n fn main() {\n     match BlackForest {\n-        FOO => println!(\"hi\"), //~ NOTE: in pattern here\n-        GOO => println!(\"meh\"), //~ NOTE: in pattern here\n+        FOO => println!(\"hi\"), //~ NOTE: for pattern here\n+        GOO => println!(\"meh\"), //~ NOTE: for pattern here\n         WORKS => println!(\"m\u00f6p\"),\n         _ => println!(\"bye\"),\n     }"}, {"sha": "b1b4bfe2d1c39a1e2a08a9e76117699d1e1d854c", "filename": "src/test/compile-fail/const-slice-oob.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-slice-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-slice-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-slice-oob.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -10,7 +10,8 @@\n \n const FOO: &'static[u32] = &[1, 2, 3];\n const BAR: u32 = FOO[5];\n-//~^ ERROR index out of bounds: the len is 3 but the index is 5\n+//~^ ERROR constant evaluation error [E0080]\n+//~| index out of bounds: the len is 3 but the index is 5\n \n fn main() {\n     let _ = BAR;"}, {"sha": "6f095b3041ffedc833eef1b3ecc985f809ca60d9", "filename": "src/test/compile-fail/const-tup-index-span.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-tup-index-span.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -11,7 +11,8 @@\n // Test spans of errors\n \n const TUP: (usize,) = 5 << 64;\n-//~^ ERROR: attempted to shift left with overflow [E0250]\n+//~^ ERROR E0080\n+//~| attempted to shift left with overflow\n const ARR: [i32; TUP.0] = [];\n \n fn main() {"}, {"sha": "5af889cb23999ca2b01f0ce788c374021f06edc5", "filename": "src/test/compile-fail/discrim-ill-typed.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fdiscrim-ill-typed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fdiscrim-ill-typed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdiscrim-ill-typed.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -25,7 +25,8 @@ fn f_i8() {\n         Ok = i8::MAX - 1,\n         Ok2,\n         OhNo = 0_u8,\n-        //~^ ERROR mismatched types\n+        //~^ ERROR E0080\n+        //~| mismatched types\n     }\n \n     let x = A::Ok;\n@@ -37,7 +38,8 @@ fn f_u8() {\n         Ok = u8::MAX - 1,\n         Ok2,\n         OhNo = 0_i8,\n-        //~^  ERROR mismatched types\n+        //~^ ERROR E0080\n+        //~| mismatched types\n     }\n \n     let x = A::Ok;\n@@ -49,7 +51,8 @@ fn f_i16() {\n         Ok = i16::MAX - 1,\n         Ok2,\n         OhNo = 0_u16,\n-        //~^ ERROR mismatched types\n+        //~^ ERROR E0080\n+        //~| mismatched types\n     }\n \n     let x = A::Ok;\n@@ -61,7 +64,8 @@ fn f_u16() {\n         Ok = u16::MAX - 1,\n         Ok2,\n         OhNo = 0_i16,\n-        //~^ ERROR mismatched types\n+        //~^ ERROR E0080\n+        //~| mismatched types\n     }\n \n     let x = A::Ok;\n@@ -73,7 +77,8 @@ fn f_i32() {\n         Ok = i32::MAX - 1,\n         Ok2,\n         OhNo = 0_u32,\n-        //~^ ERROR mismatched types\n+        //~^ ERROR E0080\n+        //~| mismatched types\n     }\n \n     let x = A::Ok;\n@@ -85,7 +90,8 @@ fn f_u32() {\n         Ok = u32::MAX - 1,\n         Ok2,\n         OhNo = 0_i32,\n-        //~^ ERROR mismatched types\n+        //~^ ERROR E0080\n+        //~| mismatched types\n     }\n \n     let x = A::Ok;\n@@ -97,7 +103,8 @@ fn f_i64() {\n         Ok = i64::MAX - 1,\n         Ok2,\n         OhNo = 0_u64,\n-        //~^ ERROR mismatched types\n+        //~^ ERROR E0080\n+        //~| mismatched types\n     }\n \n     let x = A::Ok;\n@@ -109,7 +116,8 @@ fn f_u64() {\n         Ok = u64::MAX - 1,\n         Ok2,\n         OhNo = 0_i64,\n-        //~^ ERROR mismatched types\n+        //~^ ERROR E0080\n+        //~| mismatched types\n     }\n \n     let x = A::Ok;"}, {"sha": "bbdb3891d99807dbd989d231ddbcdfbb3805993c", "filename": "src/test/compile-fail/enum-discrim-too-small.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -13,28 +13,32 @@\n enum Eu8 {\n     Au8 = 23,\n     Bu8 = 223,\n-    Cu8 = -23, //~ ERROR unary negation of unsigned integer\n+    Cu8 = -23, //~ ERROR E0080\n+               //~| unary negation of unsigned integer\n }\n \n #[repr(u16)]\n enum Eu16 {\n     Au16 = 23,\n     Bu16 = 55555,\n-    Cu16 = -22333, //~ ERROR unary negation of unsigned integer\n+    Cu16 = -22333, //~ ERROR E0080\n+                   //~| unary negation of unsigned integer\n }\n \n #[repr(u32)]\n enum Eu32 {\n     Au32 = 23,\n     Bu32 = 3_000_000_000,\n-    Cu32 = -2_000_000_000, //~ ERROR unary negation of unsigned integer\n+    Cu32 = -2_000_000_000, //~ ERROR E0080\n+                           //~| unary negation of unsigned integer\n }\n \n #[repr(u64)]\n enum Eu64 {\n     Au32 = 23,\n     Bu32 = 3_000_000_000,\n-    Cu32 = -2_000_000_000, //~ ERROR unary negation of unsigned integer\n+    Cu32 = -2_000_000_000, //~ ERROR E0080\n+                           //~| unary negation of unsigned integer\n }\n \n // u64 currently allows negative numbers, and i64 allows numbers greater than `1<<63`.  This is a"}, {"sha": "57db583aefe2355cb46bde8df1027c98637b18e7", "filename": "src/test/compile-fail/eval-enum.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Feval-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Feval-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Feval-enum.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -9,9 +9,11 @@\n // except according to those terms.\n \n enum test {\n-    div_zero = 1/0, //~ERROR constant evaluation error: attempted to divide by zero\n+    div_zero = 1/0, //~ ERROR E0080\n+                    //~| attempted to divide by zero\n     rem_zero = 1%0,\n-//~^ ERROR constant evaluation error: attempted to calculate the remainder with a divisor of zero\n+    //~^ ERROR E0080\n+    //~| attempted to calculate the remainder with a divisor of zero\n }\n \n fn main() {}"}, {"sha": "89ae1a09bd3e47b2eca8b28e006031c79d1b5f72", "filename": "src/test/compile-fail/feature-gate-negate-unsigned0.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned0.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -18,14 +18,17 @@ impl std::ops::Neg for S {\n \n fn main() {\n     let a = -1;\n-    //~^ ERROR unary negation of unsigned integer\n+    //~^ ERROR E0080\n+    //~| unary negation of unsigned integer\n     let _b : u8 = a; // for infering variable a to u8.\n \n     let _d = -1u8;\n-    //~^ ERROR unary negation of unsigned integer\n+    //~^ ERROR E0080\n+    //~| unary negation of unsigned integer\n \n     for _ in -10..10u8 {}\n-    //~^ ERROR unary negation of unsigned integer\n+    //~^ ERROR E0080\n+    //~| unary negation of unsigned integer\n \n     -S; // should not trigger the gate; issue 26840\n }"}, {"sha": "9a9358b787f5386cbebd0231958212dc4c61fc4d", "filename": "src/test/compile-fail/invalid-path-in-const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Finvalid-path-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Finvalid-path-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finvalid-path-in-const.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -10,5 +10,6 @@\n \n fn main() {\n     fn f(a: [u8; u32::DOESNOTEXIST]) {}\n-    //~^ ERROR unresolved path in constant expression\n+    //~^ ERROR constant evaluation error\n+    //~| unresolved path in constant expression\n }"}, {"sha": "54a24089354614f05c4e90e04e1e3bdce16fba17", "filename": "src/test/compile-fail/issue-22933-2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-22933-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-22933-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22933-2.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -12,10 +12,12 @@ enum Delicious {\n     Pie      = 0x1,\n     Apple    = 0x2,\n     ApplePie = Delicious::Apple as isize | Delicious::PIE as isize,\n-    //~^ ERROR constant evaluation error: unresolved path in constant expression\n+    //~^ ERROR constant evaluation error\n+    //~| unresolved path in constant expression\n }\n \n const FOO: [u32; u8::MIN as usize] = [];\n-//~^ ERROR array length constant evaluation error: unresolved path in constant expression\n+//~^ ERROR constant evaluation error\n+//~| unresolved path in constant expression\n \n fn main() {}"}, {"sha": "c2bcbb9d54a9a447c1f5c0bf873d8a8542226f4a", "filename": "src/test/compile-fail/issue-23217.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-23217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-23217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23217.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -10,7 +10,8 @@\n \n pub enum SomeEnum {\n     B = SomeEnum::A,\n-    //~^ ERROR constant evaluation error: unresolved path in constant expression\n+    //~^ ERROR constant evaluation error\n+    //~| unresolved path in constant expression\n }\n \n fn main() {}"}, {"sha": "93f75e9bfed0dddc09f23fbcede1fcad238e351a", "filename": "src/test/compile-fail/issue-25145.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-25145.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-25145.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25145.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -17,6 +17,7 @@ impl S {\n }\n \n static STUFF: [u8; S::N] = [0; S::N];\n-//~^ ERROR array length constant evaluation error: unresolved path in constant expression\n+//~^ ERROR constant evaluation error\n+//~| unresolved path in constant expression\n \n fn main() {}"}, {"sha": "ee6ec52761266607887eef14302a41e2102c6278", "filename": "src/test/compile-fail/issue-27008.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-27008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-27008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27008.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     //~| expected type `usize`\n     //~| found type `S`\n     //~| expected usize, found struct `S`\n-    //~| ERROR expected positive integer for repeat count, found struct\n+    //~| ERROR expected usize for repeat count, found struct\n }"}, {"sha": "ca8d5a1f70473563b3badf884ffd97d5ae67111a", "filename": "src/test/compile-fail/issue-27895.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-27895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-27895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27895.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -14,7 +14,8 @@ fn main() {\n \n     match i {\n         0...index => println!(\"winner\"),\n-        //~^ ERROR non-constant path in constant expression\n+        //~^ ERROR constant evaluation error\n+        //~| non-constant path in constant expression\n         _ => println!(\"hello\"),\n     }\n }"}, {"sha": "1dfd146985ff48a8df17ee421986e27306637c67", "filename": "src/test/compile-fail/issue-28586.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-28586.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-28586.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28586.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -11,6 +11,6 @@\n // Regression test for issue #28586\n \n pub trait Foo {}\n-impl Foo for [u8; usize::BYTES] {} //~ ERROR E0250\n+impl Foo for [u8; usize::BYTES] {} //~ ERROR E0080\n \n fn main() { }"}, {"sha": "1b6e4b1d289e42d31c25c39983f188e578c87c18", "filename": "src/test/compile-fail/issue-3521.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -15,7 +15,8 @@ fn main() {\n     enum Stuff {\n         Bar = foo\n         //~^ ERROR attempt to use a non-constant value in a constant\n-        //~^^ ERROR constant evaluation error: non-constant path in constant expression\n+        //~^^ ERROR constant evaluation error\n+        //~| non-constant path in constant expression\n     }\n \n     println!(\"{}\", Stuff::Bar);"}, {"sha": "6352f4f6a0447d76b2bb91274869290fe6025abb", "filename": "src/test/compile-fail/issue-8761.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-8761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fissue-8761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8761.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -10,13 +10,13 @@\n \n enum Foo {\n     A = 1i64,\n-    //~^ ERROR mismatched types:\n-    //~| expected `isize`,\n-    //~| found `i64` [E0080]\n+    //~^ ERROR constant evaluation error\n+    //~| expected `isize`\n+    //~| found `i64`\n     B = 2u8\n-    //~^ ERROR mismatched types:\n-    //~| expected `isize`,\n-    //~| found `u8` [E0080]\n+    //~^ ERROR constant evaluation error\n+    //~| expected `isize`\n+    //~| found `u8`\n }\n \n fn main() {}"}, {"sha": "cadfec5a38d3d9fbdc27d1569013b31482708da2", "filename": "src/test/compile-fail/non-constant-enum-for-vec-repeat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-enum-for-vec-repeat.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -15,5 +15,6 @@ enum State { ST_NULL, ST_WHITESPACE }\n \n fn main() {\n     [State::ST_NULL; (State::ST_WHITESPACE as usize)];\n-    //~^ ERROR expected constant integer for repeat count, but unimplemented constant expression\n+    //~^ ERROR constant evaluation error\n+    //~| unimplemented constant expression: enum variants\n }"}, {"sha": "a6f88a57b9125846a8f5ba8b52a91b18f7157736", "filename": "src/test/compile-fail/non-constant-expr-for-vec-repeat.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-expr-for-vec-repeat.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -13,6 +13,8 @@\n fn main() {\n     fn bar(n: usize) {\n         let _x = [0; n];\n-        //~^ ERROR expected constant integer for repeat count, found variable\n+        //~^ ERROR constant evaluation error\n+        //~| non-constant path in constant expression\n+        //~| NOTE `n` is a variable\n     }\n }"}, {"sha": "737f80372debf55c8e99bba7cd5970b199dea579", "filename": "src/test/compile-fail/non-constant-in-const-path.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fnon-constant-in-const-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Fnon-constant-in-const-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-constant-in-const-path.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -12,6 +12,7 @@ fn main() {\n     let x = 0;\n     match 1 {\n         0 ... x => {}\n-        //~^ ERROR non-constant path in constant expression\n+        //~^ ERROR constant evaluation error\n+        //~| non-constant path in constant expression\n     };\n }"}, {"sha": "d68df97364169c40804d89e547631cdb67e8fd9d", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c569627cd285788509f654a6a2658126ba72e4/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=37c569627cd285788509f654a6a2658126ba72e4", "patch": "@@ -13,37 +13,38 @@\n fn main() {\n     let n = 1;\n     let a = [0; n];\n-    //~^ ERROR expected constant integer for repeat count, found variable [E0307]\n+    //~^ ERROR constant evaluation error\n+    //~| non-constant path in constant expression\n     let b = [0; ()];\n     //~^ ERROR mismatched types\n     //~| expected type `usize`\n     //~| found type `()`\n     //~| expected usize, found ()\n-    //~| ERROR expected positive integer for repeat count, found tuple [E0306]\n+    //~| ERROR expected usize for repeat count, found tuple [E0306]\n     let c = [0; true];\n     //~^ ERROR mismatched types\n     //~| expected usize, found bool\n-    //~| ERROR expected positive integer for repeat count, found boolean [E0306]\n+    //~| ERROR expected usize for repeat count, found boolean [E0306]\n     let d = [0; 0.5];\n     //~^ ERROR mismatched types\n     //~| expected type `usize`\n     //~| found type `_`\n     //~| expected usize, found floating-point variable\n-    //~| ERROR expected positive integer for repeat count, found float [E0306]\n+    //~| ERROR expected usize for repeat count, found float [E0306]\n     let e = [0; \"foo\"];\n     //~^ ERROR mismatched types\n     //~| expected type `usize`\n     //~| found type `&'static str`\n     //~| expected usize, found &-ptr\n-    //~| ERROR expected positive integer for repeat count, found string literal [E0306]\n+    //~| ERROR expected usize for repeat count, found string literal [E0306]\n     let f = [0; -4_isize];\n-    //~^ ERROR mismatched types\n+    //~^ ERROR constant evaluation error\n     //~| expected `usize`\n     //~| found `isize`\n-    //~| ERROR mismatched types:\n+    //~| ERROR mismatched types\n     //~| expected usize, found isize\n     let f = [0_usize; -1_isize];\n-    //~^ ERROR mismatched types\n+    //~^ ERROR constant evaluation error\n     //~| expected `usize`\n     //~| found `isize`\n     //~| ERROR mismatched types\n@@ -56,5 +57,5 @@ fn main() {\n     //~| expected type `usize`\n     //~| found type `main::G`\n     //~| expected usize, found struct `main::G`\n-    //~| ERROR expected positive integer for repeat count, found struct [E0306]\n+    //~| ERROR expected usize for repeat count, found struct [E0306]\n }"}]}