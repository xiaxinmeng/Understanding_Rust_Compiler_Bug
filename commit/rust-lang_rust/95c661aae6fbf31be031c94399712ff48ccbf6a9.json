{"sha": "95c661aae6fbf31be031c94399712ff48ccbf6a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YzY2MWFhZTZmYmYzMWJlMDMxYzk0Mzk5NzEyZmY0OGNjYmY2YTk=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-08-24T17:35:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-24T17:35:29Z"}, "message": "Rollup merge of #35876 - matthew-piziak:sub-examples, r=GuillaumeGomez\n\nmore evocative examples for `Sub` and `SubAssign`\n\nThese examples are exactly analogous to those in PRs #35709 and #35806. I'll probably remove the `fn main` wrappers for `Add` and `Sub` once this is merged in.\n\nPart of #29365.\n\nr? @steveklabnik", "tree": {"sha": "479064494878afcc29136c1b4041ad0e2643e289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/479064494878afcc29136c1b4041ad0e2643e289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95c661aae6fbf31be031c94399712ff48ccbf6a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95c661aae6fbf31be031c94399712ff48ccbf6a9", "html_url": "https://github.com/rust-lang/rust/commit/95c661aae6fbf31be031c94399712ff48ccbf6a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95c661aae6fbf31be031c94399712ff48ccbf6a9/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "308824acecf902f2b6a9c1538bde0324804ba68e", "url": "https://api.github.com/repos/rust-lang/rust/commits/308824acecf902f2b6a9c1538bde0324804ba68e", "html_url": "https://github.com/rust-lang/rust/commit/308824acecf902f2b6a9c1538bde0324804ba68e"}, {"sha": "eb6d44d697e00f561411a07f306702ddb2078b2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb6d44d697e00f561411a07f306702ddb2078b2d", "html_url": "https://github.com/rust-lang/rust/commit/eb6d44d697e00f561411a07f306702ddb2078b2d"}], "stats": {"total": 62, "additions": 43, "deletions": 19}, "files": [{"sha": "5d431230e9744cfeaaed9aaed96e7ee0cf1db62c", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/95c661aae6fbf31be031c94399712ff48ccbf6a9/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c661aae6fbf31be031c94399712ff48ccbf6a9/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=95c661aae6fbf31be031c94399712ff48ccbf6a9", "patch": "@@ -245,25 +245,38 @@ add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Sub`. When `Foo - Foo` happens, it ends up\n-/// calling `sub`, and therefore, `main` prints `Subtracting!`.\n+/// This example creates a `Point` struct that implements the `Sub` trait, and\n+/// then demonstrates subtracting two `Point`s.\n ///\n /// ```\n /// use std::ops::Sub;\n ///\n-/// struct Foo;\n+/// #[derive(Debug)]\n+/// struct Point {\n+///     x: i32,\n+///     y: i32,\n+/// }\n ///\n-/// impl Sub for Foo {\n-///     type Output = Foo;\n+/// impl Sub for Point {\n+///     type Output = Point;\n ///\n-///     fn sub(self, _rhs: Foo) -> Foo {\n-///         println!(\"Subtracting!\");\n-///         self\n+///     fn sub(self, other: Point) -> Point {\n+///         Point {\n+///             x: self.x - other.x,\n+///             y: self.y - other.y,\n+///         }\n+///     }\n+/// }\n+///\n+/// impl PartialEq for Point {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.x == other.x && self.y == other.y\n ///     }\n /// }\n ///\n /// fn main() {\n-///     Foo - Foo;\n+///     assert_eq!(Point { x: 3, y: 3 } - Point { x: 2, y: 3 },\n+///                Point { x: 1, y: 0 });\n /// }\n /// ```\n #[lang = \"sub\"]\n@@ -1156,25 +1169,36 @@ add_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `SubAssign`. When `Foo -= Foo` happens, it ends up\n-/// calling `sub_assign`, and therefore, `main` prints `Subtracting!`.\n+/// This example creates a `Point` struct that implements the `SubAssign`\n+/// trait, and then demonstrates sub-assigning to a mutable `Point`.\n ///\n /// ```\n /// use std::ops::SubAssign;\n ///\n-/// struct Foo;\n+/// #[derive(Debug)]\n+/// struct Point {\n+///     x: i32,\n+///     y: i32,\n+/// }\n ///\n-/// impl SubAssign for Foo {\n-///     fn sub_assign(&mut self, _rhs: Foo) {\n-///         println!(\"Subtracting!\");\n+/// impl SubAssign for Point {\n+///     fn sub_assign(&mut self, other: Point) {\n+///         *self = Point {\n+///             x: self.x - other.x,\n+///             y: self.y - other.y,\n+///         };\n ///     }\n /// }\n ///\n-/// # #[allow(unused_assignments)]\n-/// fn main() {\n-///     let mut foo = Foo;\n-///     foo -= Foo;\n+/// impl PartialEq for Point {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.x == other.x && self.y == other.y\n+///     }\n /// }\n+///\n+/// let mut point = Point { x: 3, y: 3 };\n+/// point -= Point { x: 2, y: 3 };\n+/// assert_eq!(point, Point {x: 1, y: 0});\n /// ```\n #[lang = \"sub_assign\"]\n #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]"}]}