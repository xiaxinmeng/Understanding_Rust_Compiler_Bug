{"sha": "55d4b06a53246c144be900877e6ac03237d6f8b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZDRiMDZhNTMyNDZjMTQ0YmU5MDA4NzdlNmFjMDMyMzdkNmY4YjQ=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-10-28T00:11:02Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-10-28T12:32:22Z"}, "message": "Add disciminant", "tree": {"sha": "e31953e2db157710932d3c689b6e691d92bee6da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e31953e2db157710932d3c689b6e691d92bee6da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55d4b06a53246c144be900877e6ac03237d6f8b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55d4b06a53246c144be900877e6ac03237d6f8b4", "html_url": "https://github.com/rust-lang/rust/commit/55d4b06a53246c144be900877e6ac03237d6f8b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55d4b06a53246c144be900877e6ac03237d6f8b4/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a59bc9fcbbacb3d214e5bb9490f66ccb0abf5cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a59bc9fcbbacb3d214e5bb9490f66ccb0abf5cb", "html_url": "https://github.com/rust-lang/rust/commit/5a59bc9fcbbacb3d214e5bb9490f66ccb0abf5cb"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "29ae2f5520eeeefd449f41c5d625e270a8cb27dc", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55d4b06a53246c144be900877e6ac03237d6f8b4/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d4b06a53246c144be900877e6ac03237d6f8b4/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=55d4b06a53246c144be900877e6ac03237d6f8b4", "patch": "@@ -29,8 +29,7 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n                     (CallInfo::with_fn(db, it), it.data(db).has_self_param())\n                 }\n                 hir::CallableDef::Struct(it) => (CallInfo::with_struct(db, it), false),\n-                //FIXME: handle other callables\n-                _ => return None,\n+                hir::CallableDef::EnumVariant(_it) => return None,\n             }\n         }\n         FnCallNode::MethodCallExpr(expr) => {\n@@ -476,14 +475,13 @@ fn main() {\n         let info = call_info(\n             r#\"\n /// A cool tuple struct\n-struct TS(String, i32);\n+struct TS(u32, i32);\n fn main() {\n-    let s = TS(\"\".into(), <|>);\n+    let s = TS(0, <|>);\n }\"#,\n         );\n \n-        //assert_eq!(info.label(), \"struct TS(String, i32)\");\n-        assert_eq!(info.label(), \"fn TS(0: {unknown}, 1: i32) -> TS\");\n+        assert_eq!(info.label(), \"struct TS(0: u32, 1: i32) -> TS\");\n         assert_eq!(info.doc().map(|it| it.into()), Some(\"A cool tuple struct\".to_string()));\n         assert_eq!(info.active_parameter, Some(1));\n     }"}, {"sha": "6555f8619ee8a1fcc0d31cc6fb2f8f3fbcb71756", "filename": "crates/ra_ide_api/src/display/function_signature.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/55d4b06a53246c144be900877e6ac03237d6f8b4/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55d4b06a53246c144be900877e6ac03237d6f8b4/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=55d4b06a53246c144be900877e6ac03237d6f8b4", "patch": "@@ -12,9 +12,16 @@ use crate::{\n     display::{generic_parameters, where_predicates},\n };\n \n+#[derive(Debug)]\n+pub enum SigKind {\n+    Function,\n+    Struct,\n+}\n+\n /// Contains information about a function signature\n #[derive(Debug)]\n pub struct FunctionSignature {\n+    pub kind: SigKind,\n     /// Optional visibility\n     pub visibility: Option<String>,\n     /// Name of the function\n@@ -59,6 +66,7 @@ impl FunctionSignature {\n             .collect();\n \n         FunctionSignature {\n+            kind: SigKind::Struct,\n             visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n             name: node.name().map(|n| n.text().to_string()),\n             ret_type: node.name().map(|n| n.text().to_string()),\n@@ -86,6 +94,7 @@ impl From<&'_ ast::FnDef> for FunctionSignature {\n         }\n \n         FunctionSignature {\n+            kind: SigKind::Function,\n             visibility: node.visibility().map(|n| n.syntax().text().to_string()),\n             name: node.name().map(|n| n.text().to_string()),\n             ret_type: node\n@@ -108,7 +117,10 @@ impl Display for FunctionSignature {\n         }\n \n         if let Some(name) = &self.name {\n-            write!(f, \"fn {}\", name)?;\n+            match self.kind {\n+                SigKind::Function => write!(f, \"fn {}\", name)?,\n+                SigKind::Struct => write!(f, \"struct {}\", name)?,\n+            }\n         }\n \n         if !self.generic_parameters.is_empty() {"}]}