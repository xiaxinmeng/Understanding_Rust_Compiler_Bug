{"sha": "e01ff775ae7a1c050b54668d74d4a4849e74592f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMWZmNzc1YWU3YTFjMDUwYjU0NjY4ZDc0ZDRhNDg0OWU3NDU5MmY=", "commit": {"author": {"name": "Jake", "email": "jh@discordapp.com", "date": "2021-08-04T06:07:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-04T06:07:46Z"}, "message": "Apply suggestions from code review\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "9705307cf440dab216ece9686e5592cc4ae3a7c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9705307cf440dab216ece9686e5592cc4ae3a7c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e01ff775ae7a1c050b54668d74d4a4849e74592f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhCi6yCRBK7hj4Ov3rIwAAAlQIAJAg3qaQCLPk/PdGuGuU/EWx\nq4tO823a8yMsvaI1tWLlVsP7/tt9oQiPxUZZgexdh5JrhhM22a9PbKP6qCrDS0Bf\nAKw2hCNg9lWy7+8HA5Ev4dNGg4zXvXkKV7ibOpkUyk7xlhHHEONl6pMdny38Cceb\nksMSiJqw49Np/5i3cmJwPdF1Cv0M/1MzgcOQAvh1F48PsvQfiZXt723bCy7fwzj/\naBvh+pysiYIlPZ3YNGOekeBbrDgGSpQpNry4hq1KyjCBRTOO2ROzCZTvLCTsa/Mu\nEn2K0pws46aEbHWr35jEyw23qgGGHGz4sv7b/xiKIODWU7bTXxM3+aqfOBOGrMM=\n=E4lT\n-----END PGP SIGNATURE-----\n", "payload": "tree 9705307cf440dab216ece9686e5592cc4ae3a7c2\nparent 28b6a30752c7c5b9ef188cbf308acb570be0e833\nauthor Jake <jh@discordapp.com> 1628057266 -0700\ncommitter GitHub <noreply@github.com> 1628057266 -0700\n\nApply suggestions from code review\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e01ff775ae7a1c050b54668d74d4a4849e74592f", "html_url": "https://github.com/rust-lang/rust/commit/e01ff775ae7a1c050b54668d74d4a4849e74592f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e01ff775ae7a1c050b54668d74d4a4849e74592f/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28b6a30752c7c5b9ef188cbf308acb570be0e833", "url": "https://api.github.com/repos/rust-lang/rust/commits/28b6a30752c7c5b9ef188cbf308acb570be0e833", "html_url": "https://github.com/rust-lang/rust/commit/28b6a30752c7c5b9ef188cbf308acb570be0e833"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "d9fea934b5f7400d70f5fe4e8a521a289a83b799", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e01ff775ae7a1c050b54668d74d4a4849e74592f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e01ff775ae7a1c050b54668d74d4a4849e74592f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=e01ff775ae7a1c050b54668d74d4a4849e74592f", "patch": "@@ -1842,7 +1842,7 @@ impl Local {\n \n     pub fn is_ref(self, db: &dyn HirDatabase) -> bool {\n         let body = db.body(self.parent);\n-        matches!(&body[self.pat_id], Pat::Bind { mode: BindingAnnotation::Ref, .. })\n+        matches!(&body[self.pat_id], Pat::Bind { mode: BindingAnnotation::Ref | BindingAnnotation::RefMut, .. })\n     }\n \n     pub fn parent(self, _db: &dyn HirDatabase) -> DefWithBody {\n@@ -2201,7 +2201,7 @@ impl Type {\n     }\n \n     pub fn is_reference(&self) -> bool {\n-        matches!(self.ty.kind(&Interner), TyKind::Ref(hir_ty::Mutability::Not, ..))\n+        matches!(self.ty.kind(&Interner), TyKind::Ref(..))\n     }\n \n     pub fn is_usize(&self) -> bool {"}, {"sha": "53cc3759a40da5dd579d1f95d560c128c84b5192", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e01ff775ae7a1c050b54668d74d4a4849e74592f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e01ff775ae7a1c050b54668d74d4a4849e74592f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=e01ff775ae7a1c050b54668d74d4a4849e74592f", "patch": "@@ -376,7 +376,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     h |= HlMod::Associated;\n                     match func.self_param(db) {\n                         Some(sp) => match sp.access(db) {\n-                            hir::Access::Exclusive => h |= HlMod::Mutable,\n+                            hir::Access::Exclusive => h = h | HlMod::Mutable | HlMod::Reference,\n                             hir::Access::Shared => h |= HlMod::Reference,\n                             _ => {}\n                         },\n@@ -555,7 +555,7 @@ fn highlight_method_call(\n     if let Some(self_param) = func.self_param(sema.db) {\n         match self_param.access(sema.db) {\n             hir::Access::Shared => h |= HlMod::Reference,\n-            hir::Access::Exclusive => h |= HlMod::Mutable,\n+            hir::Access::Exclusive => h | HlMod::Mutable | HlMod::Reference,\n             hir::Access::Owned => {\n                 if let Some(receiver_ty) =\n                     method_call.receiver().and_then(|it| sema.type_of_expr(&it))"}]}