{"sha": "174b73e3c9365c24291adf296e3b5d2ab113527e", "node_id": "C_kwDOAAsO6NoAKDE3NGI3M2UzYzkzNjVjMjQyOTFhZGYyOTZlM2I1ZDJhYjExMzUyN2U", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-27T16:50:04Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-27T16:50:04Z"}, "message": "Refactor write_cvalue_maybe_transmute to clarify code flow", "tree": {"sha": "49f17068beb2fc4e8792b9a57892c3b92edc4970", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49f17068beb2fc4e8792b9a57892c3b92edc4970"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/174b73e3c9365c24291adf296e3b5d2ab113527e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/174b73e3c9365c24291adf296e3b5d2ab113527e", "html_url": "https://github.com/rust-lang/rust/commit/174b73e3c9365c24291adf296e3b5d2ab113527e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/174b73e3c9365c24291adf296e3b5d2ab113527e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5f11c7aebabf2c9dab45a2555ba8d00f18f91e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f11c7aebabf2c9dab45a2555ba8d00f18f91e6", "html_url": "https://github.com/rust-lang/rust/commit/a5f11c7aebabf2c9dab45a2555ba8d00f18f91e6"}], "stats": {"total": 97, "additions": 47, "deletions": 50}, "files": [{"sha": "7fb93b3268ea823cc6c2ad6cd2044086f570b743", "filename": "src/value_and_place.rs", "status": "modified", "additions": 47, "deletions": 50, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/174b73e3c9365c24291adf296e3b5d2ab113527e/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/174b73e3c9365c24291adf296e3b5d2ab113527e/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=174b73e3c9365c24291adf296e3b5d2ab113527e", "patch": "@@ -565,12 +565,11 @@ impl<'tcx> CPlace<'tcx> {\n         }\n \n         let dst_layout = self.layout();\n-        let to_ptr = match self.inner {\n+        match self.inner {\n             CPlaceInner::Var(_local, var) => {\n                 let data = CValue(from.0, dst_layout).load_scalar(fx);\n                 let dst_ty = fx.clif_type(self.layout().ty).unwrap();\n                 transmute_value(fx, var, data, dst_ty);\n-                return;\n             }\n             CPlaceInner::VarPair(_local, var1, var2) => {\n                 let (data1, data2) = if from.layout().ty == dst_layout.ty {\n@@ -583,61 +582,59 @@ impl<'tcx> CPlace<'tcx> {\n                 let (dst_ty1, dst_ty2) = fx.clif_pair_type(self.layout().ty).unwrap();\n                 transmute_value(fx, var1, data1, dst_ty1);\n                 transmute_value(fx, var2, data2, dst_ty2);\n-                return;\n             }\n-            CPlaceInner::Addr(ptr, None) => {\n+            CPlaceInner::Addr(_, Some(_)) => bug!(\"Can't write value to unsized place {:?}\", self),\n+            CPlaceInner::Addr(to_ptr, None) => {\n                 if dst_layout.size == Size::ZERO || dst_layout.abi == Abi::Uninhabited {\n                     return;\n                 }\n-                ptr\n-            }\n-            CPlaceInner::Addr(_, Some(_)) => bug!(\"Can't write value to unsized place {:?}\", self),\n-        };\n \n-        let mut flags = MemFlags::new();\n-        flags.set_notrap();\n-        match from.layout().abi {\n-            Abi::Scalar(_) => {\n-                let val = from.load_scalar(fx);\n-                to_ptr.store(fx, val, flags);\n-                return;\n-            }\n-            Abi::ScalarPair(a_scalar, b_scalar) => {\n-                let (value, extra) = from.load_scalar_pair(fx);\n-                let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n-                to_ptr.store(fx, value, flags);\n-                to_ptr.offset(fx, b_offset).store(fx, extra, flags);\n-                return;\n-            }\n-            _ => {}\n-        }\n+                let mut flags = MemFlags::new();\n+                flags.set_notrap();\n+                match from.layout().abi {\n+                    Abi::Scalar(_) => {\n+                        let val = from.load_scalar(fx);\n+                        to_ptr.store(fx, val, flags);\n+                        return;\n+                    }\n+                    Abi::ScalarPair(a_scalar, b_scalar) => {\n+                        let (value, extra) = from.load_scalar_pair(fx);\n+                        let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n+                        to_ptr.store(fx, value, flags);\n+                        to_ptr.offset(fx, b_offset).store(fx, extra, flags);\n+                        return;\n+                    }\n+                    _ => {}\n+                }\n \n-        match from.0 {\n-            CValueInner::ByVal(val) => {\n-                to_ptr.store(fx, val, flags);\n-            }\n-            CValueInner::ByValPair(_, _) => {\n-                bug!(\"Non ScalarPair abi {:?} for ByValPair CValue\", dst_layout.abi);\n-            }\n-            CValueInner::ByRef(from_ptr, None) => {\n-                let from_addr = from_ptr.get_addr(fx);\n-                let to_addr = to_ptr.get_addr(fx);\n-                let src_layout = from.1;\n-                let size = dst_layout.size.bytes();\n-                let src_align = src_layout.align.abi.bytes() as u8;\n-                let dst_align = dst_layout.align.abi.bytes() as u8;\n-                fx.bcx.emit_small_memory_copy(\n-                    fx.target_config,\n-                    to_addr,\n-                    from_addr,\n-                    size,\n-                    dst_align,\n-                    src_align,\n-                    true,\n-                    flags,\n-                );\n+                match from.0 {\n+                    CValueInner::ByVal(val) => {\n+                        to_ptr.store(fx, val, flags);\n+                    }\n+                    CValueInner::ByValPair(_, _) => {\n+                        bug!(\"Non ScalarPair abi {:?} for ByValPair CValue\", dst_layout.abi);\n+                    }\n+                    CValueInner::ByRef(from_ptr, None) => {\n+                        let from_addr = from_ptr.get_addr(fx);\n+                        let to_addr = to_ptr.get_addr(fx);\n+                        let src_layout = from.1;\n+                        let size = dst_layout.size.bytes();\n+                        let src_align = src_layout.align.abi.bytes() as u8;\n+                        let dst_align = dst_layout.align.abi.bytes() as u8;\n+                        fx.bcx.emit_small_memory_copy(\n+                            fx.target_config,\n+                            to_addr,\n+                            from_addr,\n+                            size,\n+                            dst_align,\n+                            src_align,\n+                            true,\n+                            flags,\n+                        );\n+                    }\n+                    CValueInner::ByRef(_, Some(_)) => todo!(),\n+                }\n             }\n-            CValueInner::ByRef(_, Some(_)) => todo!(),\n         }\n     }\n "}]}