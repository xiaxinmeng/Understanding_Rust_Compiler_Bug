{"sha": "f57239729cb9d6f60eb09d8cfd8244066b5e182c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NzIzOTcyOWNiOWQ2ZjYwZWIwOWQ4Y2ZkODI0NDA2NmI1ZTE4MmM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-01-23T19:15:16Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-01-26T22:16:29Z"}, "message": "Remove unnecessary lifetime parameter", "tree": {"sha": "154410f9df8d13b824c947b7afab9c5f7aa088a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/154410f9df8d13b824c947b7afab9c5f7aa088a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f57239729cb9d6f60eb09d8cfd8244066b5e182c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f57239729cb9d6f60eb09d8cfd8244066b5e182c", "html_url": "https://github.com/rust-lang/rust/commit/f57239729cb9d6f60eb09d8cfd8244066b5e182c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f57239729cb9d6f60eb09d8cfd8244066b5e182c/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "316795e074dff8f627f8c70c85d236420ecfb3a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/316795e074dff8f627f8c70c85d236420ecfb3a6", "html_url": "https://github.com/rust-lang/rust/commit/316795e074dff8f627f8c70c85d236420ecfb3a6"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "ae216944b569c03d3744220f979557e708120ead", "filename": "crates/ra_assists/src/assists/auto_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f57239729cb9d6f60eb09d8cfd8244066b5e182c/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57239729cb9d6f60eb09d8cfd8244066b5e182c/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs?ref=f57239729cb9d6f60eb09d8cfd8244066b5e182c", "patch": "@@ -28,7 +28,7 @@ use crate::{\n //     let map = HashMap<|>::new();\n // }\n // ```\n-pub(crate) fn auto_import<'a, F: ImportsLocator<'a>>(\n+pub(crate) fn auto_import<F: ImportsLocator>(\n     ctx: AssistCtx<impl HirDatabase>,\n     imports_locator: &mut F,\n ) -> Option<Assist> {\n@@ -108,7 +108,7 @@ mod tests {\n         }\n     }\n \n-    impl<'a> ImportsLocator<'_> for TestImportsLocator<'_> {\n+    impl<'a> ImportsLocator for TestImportsLocator<'a> {\n         fn find_imports(\n             &mut self,\n             _: hir::InFile<&ast::NameRef>,"}, {"sha": "381a51df6e2ea0340e1e08097c04d5a66362a0e4", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f57239729cb9d6f60eb09d8cfd8244066b5e182c/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57239729cb9d6f60eb09d8cfd8244066b5e182c/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=f57239729cb9d6f60eb09d8cfd8244066b5e182c", "patch": "@@ -83,7 +83,7 @@ where\n /// due to the search functionality located there.\n /// Later, this trait should be removed completely and the search functionality moved to a separate crate,\n /// accessible from the ra_assists crate.\n-pub trait ImportsLocator<'a> {\n+pub trait ImportsLocator {\n     /// Finds all imports for the given name and the module that contains this name.\n     fn find_imports(\n         &mut self,\n@@ -97,14 +97,14 @@ pub trait ImportsLocator<'a> {\n ///\n /// Assists are returned in the \"resolved\" state, that is with edit fully\n /// computed.\n-pub fn assists_with_imports_locator<'a, H, F: 'a>(\n+pub fn assists_with_imports_locator<H, F>(\n     db: &H,\n     range: FileRange,\n     mut imports_locator: F,\n ) -> Vec<ResolvedAssist>\n where\n     H: HirDatabase + 'static,\n-    F: ImportsLocator<'a>,\n+    F: ImportsLocator,\n {\n     AssistCtx::with_ctx(db, range, true, |ctx| {\n         let mut assists = assists::all()\n@@ -222,7 +222,7 @@ mod assists {\n         ]\n     }\n \n-    pub(crate) fn all_with_imports_locator<'a, DB: HirDatabase, F: ImportsLocator<'a>>(\n+    pub(crate) fn all_with_imports_locator<'a, DB: HirDatabase, F: ImportsLocator>(\n     ) -> &'a [fn(AssistCtx<DB>, &mut F) -> Option<Assist>] {\n         &[auto_import::auto_import]\n     }\n@@ -264,7 +264,7 @@ mod helpers {\n         assert_eq_text!(after, &actual);\n     }\n \n-    pub(crate) fn check_assist_with_imports_locator<'a, F: ImportsLocator<'a>>(\n+    pub(crate) fn check_assist_with_imports_locator<F: ImportsLocator>(\n         assist: fn(AssistCtx<TestDB>, &mut F) -> Option<Assist>,\n         imports_locator: &mut F,\n         before: &str,\n@@ -366,7 +366,7 @@ mod helpers {\n         assert!(assist.is_none());\n     }\n \n-    pub(crate) fn check_assist_with_imports_locator_not_applicable<'a, F: ImportsLocator<'a>>(\n+    pub(crate) fn check_assist_with_imports_locator_not_applicable<F: ImportsLocator>(\n         assist: fn(AssistCtx<TestDB>, &mut F) -> Option<Assist>,\n         imports_locator: &mut F,\n         before: &str,"}, {"sha": "ab9cd7990be23f7b96d946c1ee81c980796d8b80", "filename": "crates/ra_ide/src/imports_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f57239729cb9d6f60eb09d8cfd8244066b5e182c/crates%2Fra_ide%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57239729cb9d6f60eb09d8cfd8244066b5e182c/crates%2Fra_ide%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fimports_locator.rs?ref=f57239729cb9d6f60eb09d8cfd8244066b5e182c", "patch": "@@ -82,7 +82,7 @@ impl<'a> ImportsLocatorIde<'a> {\n     }\n }\n \n-impl<'a> ImportsLocator<'a> for ImportsLocatorIde<'a> {\n+impl<'a> ImportsLocator for ImportsLocatorIde<'a> {\n     fn find_imports(\n         &mut self,\n         name_to_import: InFile<&NameRef>,"}]}