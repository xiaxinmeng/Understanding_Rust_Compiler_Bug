{"sha": "192e7c4b51ab35f4cfbbacde9eeffa8e12dba873", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MmU3YzRiNTFhYjM1ZjRjZmJiYWNkZTllZWZmYThlMTJkYmE4NzM=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2018-11-01T22:28:52Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2018-11-01T22:28:52Z"}, "message": "Add comments explaining how codegen works for `dyn Trait` methods", "tree": {"sha": "4a998fb1b96486f2384f078f088bc0b41308d04a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a998fb1b96486f2384f078f088bc0b41308d04a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/192e7c4b51ab35f4cfbbacde9eeffa8e12dba873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/192e7c4b51ab35f4cfbbacde9eeffa8e12dba873", "html_url": "https://github.com/rust-lang/rust/commit/192e7c4b51ab35f4cfbbacde9eeffa8e12dba873", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/192e7c4b51ab35f4cfbbacde9eeffa8e12dba873/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a468da9cfb98df126c0ba709816843115654e3dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a468da9cfb98df126c0ba709816843115654e3dc", "html_url": "https://github.com/rust-lang/rust/commit/a468da9cfb98df126c0ba709816843115654e3dc"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "e50534a4e1dc95fc7d19eaf5f3c6d4f0e691046c", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/192e7c4b51ab35f4cfbbacde9eeffa8e12dba873/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192e7c4b51ab35f4cfbbacde9eeffa8e12dba873/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=192e7c4b51ab35f4cfbbacde9eeffa8e12dba873", "patch": "@@ -315,6 +315,11 @@ impl<'tcx> FnTypeExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n                         _ => bug!(\"receiver type has unsupported layout: {:?}\", layout)\n                     }\n \n+                    // In the case of Rc<Self>, we need to explicitly pass a *mut RcBox<Self>\n+                    // with a Scalar (not ScalarPair) ABI. This is a hack that is understood\n+                    // elsewhere in the compiler as a method on a `dyn Trait`.\n+                    // To get the type `*mut RcBox<Self>`, we just keep unwrapping newtypes until we\n+                    // get a built-in pointer type\n                     let mut fat_pointer_layout = layout;\n                     'descend_newtypes: while !fat_pointer_layout.ty.is_unsafe_ptr()\n                         && !fat_pointer_layout.ty.is_region_ptr()"}, {"sha": "a7f4c48c89bd6c99ef8e7a559e702f14d0033b26", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/192e7c4b51ab35f4cfbbacde9eeffa8e12dba873/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192e7c4b51ab35f4cfbbacde9eeffa8e12dba873/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=192e7c4b51ab35f4cfbbacde9eeffa8e12dba873", "patch": "@@ -647,8 +647,12 @@ impl FunctionCx<'a, 'll, 'tcx> {\n \n                     if let (0, Some(ty::InstanceDef::Virtual(_, idx))) = (i, def) {\n                         if let Pair(..) = op.val {\n-                            // descend through newtype wrappers until `op` is a builtin pointer to\n-                            // `dyn Trait`, e.g. `*const dyn Trait`, `&mut dyn Trait`\n+                            // In the case of Rc<Self>, we need to explicitly pass a\n+                            // *mut RcBox<Self> with a Scalar (not ScalarPair) ABI. This is a hack\n+                            // that is understood elsewhere in the compiler as a method on\n+                            // `dyn Trait`.\n+                            // To get a `*mut RcBox<Self>`, we just keep unwrapping newtypes until\n+                            // we get a value of a built-in pointer type\n                             'descend_newtypes: while !op.layout.ty.is_unsafe_ptr()\n                                             && !op.layout.ty.is_region_ptr()\n                             {"}]}