{"sha": "51cd5a866728539c1d1db81c437c474ffbef7ccf", "node_id": "C_kwDOAAsO6NoAKDUxY2Q1YTg2NjcyODUzOWMxZDFkYjgxYzQzN2M0NzRmZmJlZjdjY2Y", "commit": {"author": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-07-14T19:58:38Z"}, "committer": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-07-26T02:35:28Z"}, "message": "Add `--type` flag to `dev new_lint`", "tree": {"sha": "dccf33d8b0c2c5f474e8b76fc61d892ac048aff8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dccf33d8b0c2c5f474e8b76fc61d892ac048aff8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51cd5a866728539c1d1db81c437c474ffbef7ccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51cd5a866728539c1d1db81c437c474ffbef7ccf", "html_url": "https://github.com/rust-lang/rust/commit/51cd5a866728539c1d1db81c437c474ffbef7ccf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51cd5a866728539c1d1db81c437c474ffbef7ccf/comments", "author": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d72e5f2e10d6b31bf2e3e26ecc389d1f53833655", "url": "https://api.github.com/repos/rust-lang/rust/commits/d72e5f2e10d6b31bf2e3e26ecc389d1f53833655", "html_url": "https://github.com/rust-lang/rust/commit/d72e5f2e10d6b31bf2e3e26ecc389d1f53833655"}], "stats": {"total": 355, "additions": 295, "deletions": 60}, "files": [{"sha": "2008942d0879ad49a575641017878b397d6768e9", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/51cd5a866728539c1d1db81c437c474ffbef7ccf/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cd5a866728539c1d1db81c437c474ffbef7ccf/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=51cd5a866728539c1d1db81c437c474ffbef7ccf", "patch": "@@ -37,6 +37,7 @@ fn main() {\n                 matches.get_one::<String>(\"pass\"),\n                 matches.get_one::<String>(\"name\"),\n                 matches.get_one::<String>(\"category\"),\n+                matches.get_one::<String>(\"type\"),\n                 matches.contains_id(\"msrv\"),\n             ) {\n                 Ok(_) => update_lints::update(update_lints::UpdateMode::Change),\n@@ -157,7 +158,8 @@ fn get_clap_config() -> ArgMatches {\n                         .help(\"Specify whether the lint runs during the early or late pass\")\n                         .takes_value(true)\n                         .value_parser([PossibleValue::new(\"early\"), PossibleValue::new(\"late\")])\n-                        .required(true),\n+                        .conflicts_with(\"type\")\n+                        .required_unless_present(\"type\"),\n                     Arg::new(\"name\")\n                         .short('n')\n                         .long(\"name\")\n@@ -183,6 +185,11 @@ fn get_clap_config() -> ArgMatches {\n                             PossibleValue::new(\"internal_warn\"),\n                         ])\n                         .takes_value(true),\n+                    Arg::new(\"type\")\n+                        .long(\"type\")\n+                        .help(\"What directory the lint belongs in\")\n+                        .takes_value(true)\n+                        .required(false),\n                     Arg::new(\"msrv\").long(\"msrv\").help(\"Add MSRV config code to the lint\"),\n                 ]),\n             Command::new(\"setup\")"}, {"sha": "af22cb899421d8bdcf3d70838998e9c8a23390e0", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 260, "deletions": 34, "changes": 294, "blob_url": "https://github.com/rust-lang/rust/blob/51cd5a866728539c1d1db81c437c474ffbef7ccf/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cd5a866728539c1d1db81c437c474ffbef7ccf/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=51cd5a866728539c1d1db81c437c474ffbef7ccf", "patch": "@@ -1,5 +1,5 @@\n use crate::clippy_project_root;\n-use indoc::indoc;\n+use indoc::{indoc, writedoc};\n use std::fmt::Write as _;\n use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n@@ -10,6 +10,7 @@ struct LintData<'a> {\n     pass: &'a str,\n     name: &'a str,\n     category: &'a str,\n+    ty: Option<&'a str>,\n     project_root: PathBuf,\n }\n \n@@ -38,25 +39,35 @@ pub fn create(\n     pass: Option<&String>,\n     lint_name: Option<&String>,\n     category: Option<&String>,\n+    ty: Option<&String>,\n     msrv: bool,\n ) -> io::Result<()> {\n     let lint = LintData {\n-        pass: pass.expect(\"`pass` argument is validated by clap\"),\n+        pass: pass.map_or(\"\", String::as_str),\n         name: lint_name.expect(\"`name` argument is validated by clap\"),\n         category: category.expect(\"`category` argument is validated by clap\"),\n+        ty: ty.map(String::as_str),\n         project_root: clippy_project_root(),\n     };\n \n     create_lint(&lint, msrv).context(\"Unable to create lint implementation\")?;\n     create_test(&lint).context(\"Unable to create a test for the new lint\")?;\n-    add_lint(&lint, msrv).context(\"Unable to add lint to clippy_lints/src/lib.rs\")\n+\n+    if lint.ty.is_none() {\n+        add_lint(&lint, msrv).context(\"Unable to add lint to clippy_lints/src/lib.rs\")?;\n+    }\n+\n+    Ok(())\n }\n \n fn create_lint(lint: &LintData<'_>, enable_msrv: bool) -> io::Result<()> {\n-    let lint_contents = get_lint_file_contents(lint, enable_msrv);\n-\n-    let lint_path = format!(\"clippy_lints/src/{}.rs\", lint.name);\n-    write_file(lint.project_root.join(&lint_path), lint_contents.as_bytes())\n+    if let Some(ty) = lint.ty {\n+        generate_from_ty(lint, enable_msrv, ty)\n+    } else {\n+        let lint_contents = get_lint_file_contents(lint, enable_msrv);\n+        let lint_path = format!(\"clippy_lints/src/{}.rs\", lint.name);\n+        write_file(lint.project_root.join(&lint_path), lint_contents.as_bytes())\n+    }\n }\n \n fn create_test(lint: &LintData<'_>) -> io::Result<()> {\n@@ -204,7 +215,6 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n         },\n     };\n \n-    let version = get_stabilization_version();\n     let lint_name = lint.name;\n     let category = lint.category;\n     let name_camel = to_camel_case(lint.name);\n@@ -238,32 +248,7 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n         )\n     });\n \n-    let _ = write!(\n-        result,\n-        indoc! {r#\"\n-            declare_clippy_lint! {{\n-                /// ### What it does\n-                ///\n-                /// ### Why is this bad?\n-                ///\n-                /// ### Example\n-                /// ```rust\n-                /// // example code where clippy issues a warning\n-                /// ```\n-                /// Use instead:\n-                /// ```rust\n-                /// // example code which does not raise clippy warning\n-                /// ```\n-                #[clippy::version = \"{version}\"]\n-                pub {name_upper},\n-                {category},\n-                \"default lint description\"\n-            }}\n-        \"#},\n-        version = version,\n-        name_upper = name_upper,\n-        category = category,\n-    );\n+    let _ = write!(result, \"{}\", get_lint_declaration(&name_upper, category));\n \n     result.push_str(&if enable_msrv {\n         format!(\n@@ -312,6 +297,247 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n     result\n }\n \n+fn get_lint_declaration(name_upper: &str, category: &str) -> String {\n+    format!(\n+        indoc! {r#\"\n+            declare_clippy_lint! {{\n+                /// ### What it does\n+                ///\n+                /// ### Why is this bad?\n+                ///\n+                /// ### Example\n+                /// ```rust\n+                /// // example code where clippy issues a warning\n+                /// ```\n+                /// Use instead:\n+                /// ```rust\n+                /// // example code which does not raise clippy warning\n+                /// ```\n+                #[clippy::version = \"{version}\"]\n+                pub {name_upper},\n+                {category},\n+                \"default lint description\"\n+            }}\n+        \"#},\n+        version = get_stabilization_version(),\n+        name_upper = name_upper,\n+        category = category,\n+    )\n+}\n+\n+fn generate_from_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::Result<()> {\n+    if ty == \"cargo\" {\n+        assert_eq!(\n+            lint.category, \"cargo\",\n+            \"Lints of type `cargo` must have the `cargo` category\"\n+        );\n+    }\n+\n+    let ty_dir = lint.project_root.join(format!(\"clippy_lints/src/{}\", ty));\n+    assert!(\n+        ty_dir.exists() && ty_dir.is_dir(),\n+        \"Directory `{}` does not exist!\",\n+        ty_dir.display()\n+    );\n+\n+    let lint_file_path = ty_dir.join(format!(\"{}.rs\", lint.name));\n+    assert!(\n+        !lint_file_path.exists(),\n+        \"File `{}` already exists\",\n+        lint_file_path.display()\n+    );\n+\n+    let mod_file_path = ty_dir.join(\"mod.rs\");\n+    let context_import = setup_mod_file(&mod_file_path, lint)?;\n+\n+    let name_upper = lint.name.to_uppercase();\n+    let mut lint_file_contents = String::new();\n+\n+    if enable_msrv {\n+        let _ = writedoc!(\n+            lint_file_contents,\n+            r#\"\n+                use clippy_utils::{{meets_msrv, msrvs}};\n+                use rustc_lint::{{{context_import}, LintContext}};\n+                use rustc_semver::RustcVersion;\n+\n+                use super::{name_upper};\n+\n+                // TODO: Adjust the parameters as necessary\n+                pub(super) fn check(cx: &{context_import}, msrv: Option<RustcVersion>) {{\n+                    if !meets_msrv(msrv, todo!(\"Add a new entry in `clippy_utils/src/msrvs`\")) {{\n+                        return;\n+                    }}\n+                    todo!();\n+                }}\n+           \"#,\n+            context_import = context_import,\n+            name_upper = name_upper,\n+        );\n+    } else {\n+        let _ = writedoc!(\n+            lint_file_contents,\n+            r#\"\n+                use rustc_lint::{{{context_import}, LintContext}};\n+\n+                use super::{name_upper};\n+\n+                // TODO: Adjust the parameters as necessary\n+                pub(super) fn check(cx: &{context_import}) {{\n+                    todo!();\n+                }}\n+           \"#,\n+            context_import = context_import,\n+            name_upper = name_upper,\n+        );\n+    }\n+\n+    write_file(lint_file_path, lint_file_contents)?;\n+\n+    Ok(())\n+}\n+\n+#[allow(clippy::too_many_lines)]\n+fn setup_mod_file(path: &Path, lint: &LintData<'_>) -> io::Result<&'static str> {\n+    use super::update_lints::{match_tokens, LintDeclSearchResult};\n+    use rustc_lexer::TokenKind;\n+\n+    let lint_name_upper = lint.name.to_uppercase();\n+\n+    let mut file_contents = fs::read_to_string(path)?;\n+    assert!(\n+        !file_contents.contains(&lint_name_upper),\n+        \"Lint `{}` already defined in `{}`\",\n+        lint.name,\n+        path.display()\n+    );\n+\n+    let mut offset = 0usize;\n+    let mut last_decl_curly_offset = None;\n+    let mut lint_context = None;\n+\n+    let mut iter = rustc_lexer::tokenize(&file_contents).map(|t| {\n+        let range = offset..offset + t.len;\n+        offset = range.end;\n+\n+        LintDeclSearchResult {\n+            token_kind: t.kind,\n+            content: &file_contents[range.clone()],\n+            range,\n+        }\n+    });\n+\n+    // Find both the last lint declaration (declare_clippy_lint!) and the lint pass impl\n+    while let Some(LintDeclSearchResult { content, .. }) = iter.find(|result| result.token_kind == TokenKind::Ident) {\n+        let mut iter = iter\n+            .by_ref()\n+            .filter(|t| !matches!(t.token_kind, TokenKind::Whitespace | TokenKind::LineComment { .. }));\n+\n+        match content {\n+            \"declare_clippy_lint\" => {\n+                // matches `!{`\n+                match_tokens!(iter, Bang OpenBrace);\n+                if let Some(LintDeclSearchResult { range, .. }) =\n+                    iter.find(|result| result.token_kind == TokenKind::CloseBrace)\n+                {\n+                    last_decl_curly_offset = Some(range.end);\n+                }\n+            },\n+            \"impl\" => {\n+                let mut token = iter.next();\n+                match token {\n+                    // matches <'foo>\n+                    Some(LintDeclSearchResult {\n+                        token_kind: TokenKind::Lt,\n+                        ..\n+                    }) => {\n+                        match_tokens!(iter, Lifetime { .. } Gt);\n+                        token = iter.next();\n+                    },\n+                    None => break,\n+                    _ => {},\n+                }\n+\n+                if let Some(LintDeclSearchResult {\n+                    token_kind: TokenKind::Ident,\n+                    content,\n+                    ..\n+                }) = token\n+                {\n+                    // Get the appropriate lint context struct\n+                    lint_context = match content {\n+                        \"LateLintPass\" => Some(\"LateContext\"),\n+                        \"EarlyLintPass\" => Some(\"EarlyContext\"),\n+                        _ => continue,\n+                    };\n+                }\n+            },\n+            _ => {},\n+        }\n+    }\n+\n+    drop(iter);\n+\n+    let last_decl_curly_offset =\n+        last_decl_curly_offset.unwrap_or_else(|| panic!(\"No lint declarations found in `{}`\", path.display()));\n+    let lint_context =\n+        lint_context.unwrap_or_else(|| panic!(\"No lint pass implementation found in `{}`\", path.display()));\n+\n+    // Add the lint declaration to `mod.rs`\n+    file_contents.replace_range(\n+        // Remove the trailing newline, which should always be present\n+        last_decl_curly_offset..=last_decl_curly_offset,\n+        &format!(\"\\n\\n{}\", get_lint_declaration(&lint_name_upper, lint.category)),\n+    );\n+\n+    // Add the lint to `impl_lint_pass`/`declare_lint_pass`\n+    let impl_lint_pass_start = file_contents.find(\"impl_lint_pass!\").unwrap_or_else(|| {\n+        file_contents\n+            .find(\"declare_lint_pass!\")\n+            .unwrap_or_else(|| panic!(\"failed to find `impl_lint_pass`/`declare_lint_pass`\"))\n+    });\n+\n+    let mut arr_start = file_contents[impl_lint_pass_start..].find('[').unwrap_or_else(|| {\n+        panic!(\"malformed `impl_lint_pass`/`declare_lint_pass`\");\n+    });\n+\n+    arr_start += impl_lint_pass_start;\n+\n+    let mut arr_end = file_contents[arr_start..]\n+        .find(']')\n+        .expect(\"failed to find `impl_lint_pass` terminator\");\n+\n+    arr_end += arr_start;\n+\n+    let mut arr_content = file_contents[arr_start + 1..arr_end].to_string();\n+    arr_content.retain(|c| !c.is_whitespace());\n+\n+    let mut new_arr_content = String::new();\n+    for ident in arr_content\n+        .split(',')\n+        .chain(std::iter::once(&*lint_name_upper))\n+        .filter(|s| !s.is_empty())\n+    {\n+        let _ = write!(new_arr_content, \"\\n    {},\", ident);\n+    }\n+    new_arr_content.push('\\n');\n+\n+    file_contents.replace_range(arr_start + 1..arr_end, &new_arr_content);\n+\n+    // Just add the mod declaration at the top, it'll be fixed by rustfmt\n+    file_contents.insert_str(0, &format!(\"mod {};\\n\", &lint.name));\n+\n+    let mut file = OpenOptions::new()\n+        .write(true)\n+        .truncate(true)\n+        .open(path)\n+        .context(format!(\"trying to open: `{}`\", path.display()))?;\n+    file.write_all(file_contents.as_bytes())\n+        .context(format!(\"writing to file: `{}`\", path.display()))?;\n+\n+    Ok(lint_context)\n+}\n+\n #[test]\n fn test_camel_case() {\n     let s = \"a_lint\";"}, {"sha": "aed38bc2817607266ed65679a74afed63a427069", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/51cd5a866728539c1d1db81c437c474ffbef7ccf/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cd5a866728539c1d1db81c437c474ffbef7ccf/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=51cd5a866728539c1d1db81c437c474ffbef7ccf", "patch": "@@ -824,10 +824,12 @@ macro_rules! match_tokens {\n     }\n }\n \n-struct LintDeclSearchResult<'a> {\n-    token_kind: TokenKind,\n-    content: &'a str,\n-    range: Range<usize>,\n+pub(crate) use match_tokens;\n+\n+pub(crate) struct LintDeclSearchResult<'a> {\n+    pub token_kind: TokenKind,\n+    pub content: &'a str,\n+    pub range: Range<usize>,\n }\n \n /// Parse a source file looking for `declare_clippy_lint` macro invocations."}, {"sha": "9f45db86a0913a236a425a7876e5979ac66a45c5", "filename": "clippy_lints/src/cargo/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/51cd5a866728539c1d1db81c437c474ffbef7ccf/clippy_lints%2Fsrc%2Fcargo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cd5a866728539c1d1db81c437c474ffbef7ccf/clippy_lints%2Fsrc%2Fcargo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo%2Fmod.rs?ref=51cd5a866728539c1d1db81c437c474ffbef7ccf", "patch": "@@ -1,3 +1,8 @@\n+mod common_metadata;\n+mod feature_name;\n+mod multiple_crate_versions;\n+mod wildcard_dependencies;\n+\n use cargo_metadata::MetadataCommand;\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::is_lint_allowed;\n@@ -6,11 +11,6 @@ use rustc_lint::{LateContext, LateLintPass, Lint};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::DUMMY_SP;\n \n-mod common_metadata;\n-mod feature_name;\n-mod multiple_crate_versions;\n-mod wildcard_dependencies;\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks to see if all common metadata is defined in"}, {"sha": "b638f2716028284ef20874c53cf1d6187f79ef5e", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/51cd5a866728539c1d1db81c437c474ffbef7ccf/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cd5a866728539c1d1db81c437c474ffbef7ccf/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=51cd5a866728539c1d1db81c437c474ffbef7ccf", "patch": "@@ -1,13 +1,3 @@\n-use clippy_utils::source::{snippet_opt, span_starts_with, walk_span_to_context};\n-use clippy_utils::{higher, in_constant, meets_msrv, msrvs};\n-use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat};\n-use rustc_lexer::{tokenize, TokenKind};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::lint::in_external_macro;\n-use rustc_semver::RustcVersion;\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{Span, SpanData, SyntaxContext};\n-\n mod collapsible_match;\n mod infallible_destructuring_match;\n mod manual_map;\n@@ -31,6 +21,16 @@ mod single_match;\n mod try_err;\n mod wild_in_or_pats;\n \n+use clippy_utils::source::{snippet_opt, span_starts_with, walk_span_to_context};\n+use clippy_utils::{higher, in_constant, meets_msrv, msrvs};\n+use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat};\n+use rustc_lexer::{tokenize, TokenKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{Span, SpanData, SyntaxContext};\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for matches with a single arm where an `if let`"}, {"sha": "bb6d99406b49376309e8e40d2f938686bbd0421f", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51cd5a866728539c1d1db81c437c474ffbef7ccf/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cd5a866728539c1d1db81c437c474ffbef7ccf/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=51cd5a866728539c1d1db81c437c474ffbef7ccf", "patch": "@@ -1,9 +1,3 @@\n-use rustc_hir::{Body, Expr, ExprKind, UnOp};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_tool_lint, impl_lint_pass};\n-\n-pub(crate) mod arithmetic;\n-\n mod absurd_extreme_comparisons;\n mod assign_op_pattern;\n mod bit_mask;\n@@ -27,6 +21,12 @@ mod ptr_eq;\n mod self_assignment;\n mod verbose_bit_mask;\n \n+pub(crate) mod arithmetic;\n+\n+use rustc_hir::{Body, Expr, ExprKind, UnOp};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for comparisons where one side of the relation is"}]}