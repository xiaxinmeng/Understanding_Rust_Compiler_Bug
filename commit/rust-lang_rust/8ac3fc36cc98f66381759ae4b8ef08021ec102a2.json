{"sha": "8ac3fc36cc98f66381759ae4b8ef08021ec102a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYzNmYzM2Y2M5OGY2NjM4MTc1OWFlNGI4ZWYwODAyMWVjMTAyYTI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-27T01:47:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-27T01:47:42Z"}, "message": "Merge pull request #1597 from topecongiro/comments-after-attributes\n\nAllow comments after attributes of struct fields", "tree": {"sha": "8abe31d565e8aa25f5ce8b3beb597dd021ce9bcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8abe31d565e8aa25f5ce8b3beb597dd021ce9bcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ac3fc36cc98f66381759ae4b8ef08021ec102a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac3fc36cc98f66381759ae4b8ef08021ec102a2", "html_url": "https://github.com/rust-lang/rust/commit/8ac3fc36cc98f66381759ae4b8ef08021ec102a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ac3fc36cc98f66381759ae4b8ef08021ec102a2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aad250e20e208f8db09355ad023d6eef356d7a78", "url": "https://api.github.com/repos/rust-lang/rust/commits/aad250e20e208f8db09355ad023d6eef356d7a78", "html_url": "https://github.com/rust-lang/rust/commit/aad250e20e208f8db09355ad023d6eef356d7a78"}, {"sha": "b6c503ac32511008ec59cb4a3ad1876a8b94fdb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6c503ac32511008ec59cb4a3ad1876a8b94fdb8", "html_url": "https://github.com/rust-lang/rust/commit/b6c503ac32511008ec59cb4a3ad1876a8b94fdb8"}], "stats": {"total": 85, "additions": 78, "deletions": 7}, "files": [{"sha": "31998c35d337c38474f82ac759584089f9ff1131", "filename": "src/items.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8ac3fc36cc98f66381759ae4b8ef08021ec102a2/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac3fc36cc98f66381759ae4b8ef08021ec102a2/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=8ac3fc36cc98f66381759ae4b8ef08021ec102a2", "patch": "@@ -18,7 +18,7 @@ use utils::{format_mutability, format_visibility, contains_skip, end_typaram, wr\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, list_helper,\n             DefinitiveListTactic, ListTactic, definitive_tactic, format_item_list};\n use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, type_annotation_separator};\n-use comment::{FindUncommented, contains_comment};\n+use comment::{FindUncommented, contains_comment, rewrite_comment};\n use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n use config::{Config, IndentStyle, Density, ReturnIndent, BraceStyle, Style, TypeDensity};\n@@ -1205,15 +1205,42 @@ impl Rewrite for ast::StructField {\n         let mut attr_str = try_opt!(self.attrs.rewrite(context,\n                                                        Shape::indented(shape.indent,\n                                                                        context.config)));\n-        if !attr_str.is_empty() {\n-            attr_str.push('\\n');\n-            attr_str.push_str(&shape.indent.to_string(context.config));\n-        }\n+        // Try format missing comments after attributes\n+        let missing_comment = if !self.attrs.is_empty() {\n+            let possibly_comment_snippet =\n+                context.snippet(mk_sp(self.attrs[self.attrs.len() - 1].span.hi, self.span.lo));\n+            let newline_index = possibly_comment_snippet.find('\\n');\n+            let comment_index = possibly_comment_snippet.find('/');\n+            match (newline_index, comment_index) {\n+                (Some(i), Some(j)) if i > j => attr_str.push(' '),\n+                _ => {\n+                    attr_str.push('\\n');\n+                    attr_str.push_str(&shape.indent.to_string(context.config));\n+                }\n+            }\n+            let trimmed = possibly_comment_snippet.trim();\n+            if trimmed.is_empty() {\n+                String::new()\n+            } else {\n+                rewrite_comment(trimmed, false, shape, context.config).map_or(String::new(), |s| {\n+                    format!(\"{}\\n{}\", s, shape.indent.to_string(context.config))\n+                })\n+            }\n+        } else {\n+            String::new()\n+        };\n \n         let type_annotation_spacing = type_annotation_spacing(context.config);\n         let mut result = match name {\n-            Some(name) => format!(\"{}{}{}{}:\", attr_str, vis, name, type_annotation_spacing.0),\n-            None => format!(\"{}{}\", attr_str, vis),\n+            Some(name) => {\n+                format!(\"{}{}{}{}{}:\",\n+                        attr_str,\n+                        missing_comment,\n+                        vis,\n+                        name,\n+                        type_annotation_spacing.0)\n+            }\n+            None => format!(\"{}{}{}\", attr_str, missing_comment, vis),\n         };\n \n         let type_offset = shape.indent.block_indent(context.config);"}, {"sha": "03847ec883f0f61acb286507414b1dca7f7fa376", "filename": "tests/source/structs.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8ac3fc36cc98f66381759ae4b8ef08021ec102a2/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac3fc36cc98f66381759ae4b8ef08021ec102a2/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=8ac3fc36cc98f66381759ae4b8ef08021ec102a2", "patch": "@@ -16,6 +16,28 @@ pub struct Foo {\n     pub i: TypeForPublicField\n }\n \n+// #1029\n+pub struct Foo {\n+    #[doc(hidden)]\n+    // This will NOT get deleted!\n+    bar: String, // hi\n+}\n+\n+// #1029\n+struct X {\n+    // `x` is an important number.\n+    #[allow(unused)] // TODO: use\n+    x: u32,\n+}\n+\n+// #410\n+#[allow(missing_docs)]\n+pub struct Writebatch<K: Key> {\n+    #[allow(dead_code)] //only used for holding the internal pointer\n+    writebatch: RawWritebatch,\n+    marker: PhantomData<K>,\n+}\n+\n struct Bar;\n \n struct NewType(Type,       OtherType);"}, {"sha": "2872750c20af706e6c7c25808f531405a700de8c", "filename": "tests/target/structs.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8ac3fc36cc98f66381759ae4b8ef08021ec102a2/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac3fc36cc98f66381759ae4b8ef08021ec102a2/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=8ac3fc36cc98f66381759ae4b8ef08021ec102a2", "patch": "@@ -16,6 +16,28 @@ pub struct Foo {\n     pub i: TypeForPublicField,\n }\n \n+// #1029\n+pub struct Foo {\n+    #[doc(hidden)]\n+    // This will NOT get deleted!\n+    bar: String, // hi\n+}\n+\n+// #1029\n+struct X {\n+    // `x` is an important number.\n+    #[allow(unused)] // TODO: use\n+    x: u32,\n+}\n+\n+// #410\n+#[allow(missing_docs)]\n+pub struct Writebatch<K: Key> {\n+    #[allow(dead_code)] // only used for holding the internal pointer\n+    writebatch: RawWritebatch,\n+    marker: PhantomData<K>,\n+}\n+\n struct Bar;\n \n struct NewType(Type, OtherType);"}]}