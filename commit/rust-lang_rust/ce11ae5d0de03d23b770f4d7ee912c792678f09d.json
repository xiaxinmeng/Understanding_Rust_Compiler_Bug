{"sha": "ce11ae5d0de03d23b770f4d7ee912c792678f09d", "node_id": "C_kwDOAAsO6NoAKGNlMTFhZTVkMGRlMDNkMjNiNzcwZjRkN2VlOTEyYzc5MjY3OGYwOWQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-27T15:40:30Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-27T15:43:33Z"}, "message": "Address some more nits", "tree": {"sha": "84e3b2b4cf1e9786636fa3c09e055dd04dd570c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84e3b2b4cf1e9786636fa3c09e055dd04dd570c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce11ae5d0de03d23b770f4d7ee912c792678f09d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce11ae5d0de03d23b770f4d7ee912c792678f09d", "html_url": "https://github.com/rust-lang/rust/commit/ce11ae5d0de03d23b770f4d7ee912c792678f09d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce11ae5d0de03d23b770f4d7ee912c792678f09d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d793d80cf7e60d1bdaefffb221dd45875ed9574a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d793d80cf7e60d1bdaefffb221dd45875ed9574a", "html_url": "https://github.com/rust-lang/rust/commit/d793d80cf7e60d1bdaefffb221dd45875ed9574a"}], "stats": {"total": 55, "additions": 26, "deletions": 29}, "files": [{"sha": "616472a1a3f0dc3fe941ae377e7d04f7c81129eb", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ce11ae5d0de03d23b770f4d7ee912c792678f09d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce11ae5d0de03d23b770f4d7ee912c792678f09d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=ce11ae5d0de03d23b770f4d7ee912c792678f09d", "patch": "@@ -290,10 +290,7 @@ fn compare_predicate_entailment<'tcx>(\n     // type would be more appropriate. In other places we have a `Vec<Span>`\n     // corresponding to their `Vec<Predicate>`, but we don't have that here.\n     // Fixing this would improve the output of test `issue-83765.rs`.\n-    let mut result = infcx\n-        .at(&cause, param_env)\n-        .sup(trait_fty, impl_fty)\n-        .map(|infer_ok| ocx.register_infer_ok_obligations(infer_ok));\n+    let mut result = ocx.sup_types(&cause, param_env, trait_fty, impl_fty);\n \n     // HACK(RPITIT): #101614. When we are trying to infer the hidden types for\n     // RPITITs, we need to equate the output tys instead of just subtyping. If\n@@ -302,10 +299,7 @@ fn compare_predicate_entailment<'tcx>(\n     // fixed up to `ReEmpty`, and which is certainly not what we want.\n     if trait_fty.has_infer_types() {\n         result = result.and_then(|()| {\n-            infcx\n-                .at(&cause, param_env)\n-                .eq(trait_sig.output(), impl_sig.output())\n-                .map(|infer_ok| ocx.register_infer_ok_obligations(infer_ok))\n+            ocx.equate_types(&cause, param_env, trait_sig.output(), impl_sig.output())\n         });\n     }\n \n@@ -1389,10 +1383,7 @@ pub(crate) fn raw_compare_const_impl<'tcx>(\n \n     debug!(\"compare_const_impl: trait_ty={:?}\", trait_ty);\n \n-    let err = infcx\n-        .at(&cause, param_env)\n-        .sup(trait_ty, impl_ty)\n-        .map(|ok| ocx.register_infer_ok_obligations(ok));\n+    let err = ocx.sup_types(&cause, param_env, trait_ty, impl_ty);\n \n     if let Err(terr) = err {\n         debug!("}, {"sha": "c760ce1fed9126cf635e08039bb5d5ce02cf271b", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ce11ae5d0de03d23b770f4d7ee912c792678f09d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce11ae5d0de03d23b770f4d7ee912c792678f09d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=ce11ae5d0de03d23b770f4d7ee912c792678f09d", "patch": "@@ -6,6 +6,7 @@ use super::{ChalkFulfillmentContext, FulfillmentContext};\n use crate::infer::InferCtxtExt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_infer::infer::at::ToTrace;\n use rustc_infer::infer::canonical::{\n     Canonical, CanonicalVarValues, CanonicalizedQueryResponse, QueryResponse,\n };\n@@ -111,12 +112,12 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         self.register_infer_ok_obligations(infer_ok)\n     }\n \n-    pub fn equate_types(\n+    pub fn equate_types<T: ToTrace<'tcx>>(\n         &self,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        expected: Ty<'tcx>,\n-        actual: Ty<'tcx>,\n+        expected: T,\n+        actual: T,\n     ) -> Result<(), TypeError<'tcx>> {\n         match self.infcx.at(cause, param_env).eq(expected, actual) {\n             Ok(InferOk { obligations, value: () }) => {\n@@ -127,6 +128,22 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub fn sup_types<T: ToTrace<'tcx>>(\n+        &self,\n+        cause: &ObligationCause<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        expected: T,\n+        actual: T,\n+    ) -> Result<(), TypeError<'tcx>> {\n+        match self.infcx.at(cause, param_env).sup(expected, actual) {\n+            Ok(InferOk { obligations, value: () }) => {\n+                self.register_obligations(obligations);\n+                Ok(())\n+            }\n+            Err(e) => Err(e),\n+        }\n+    }\n+\n     pub fn select_all_or_error(&self) -> Vec<FulfillmentError<'tcx>> {\n         self.engine.borrow_mut().select_all_or_error(self.infcx)\n     }"}, {"sha": "e0465121ad920ab89df0beac61e04ae6f6bb6209", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce11ae5d0de03d23b770f4d7ee912c792678f09d/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce11ae5d0de03d23b770f4d7ee912c792678f09d/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=ce11ae5d0de03d23b770f4d7ee912c792678f09d", "patch": "@@ -87,12 +87,7 @@ impl<'me, 'tcx> AscribeUserTypeCx<'me, 'tcx> {\n     where\n         T: ToTrace<'tcx>,\n     {\n-        Ok(self.ocx.register_infer_ok_obligations(\n-            self.ocx\n-                .infcx\n-                .at(&ObligationCause::dummy_with_span(self.span), self.param_env)\n-                .eq(a, b)?,\n-        ))\n+        Ok(self.ocx.equate_types(&ObligationCause::dummy_with_span(self.span), self.param_env, a, b)?)\n     }\n \n     fn prove_predicate(&self, predicate: Predicate<'tcx>, cause: ObligationCause<'tcx>) {\n@@ -181,10 +176,7 @@ fn type_op_eq<'tcx>(\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt().enter_canonical_trait_query(&canonicalized, |ocx, key| {\n         let (param_env, Eq { a, b }) = key.into_parts();\n-        ocx.register_infer_ok_obligations(\n-            ocx.infcx.at(&ObligationCause::dummy(), param_env).eq(a, b)?,\n-        );\n-        Ok(())\n+        Ok(ocx.equate_types(&ObligationCause::dummy(), param_env, a, b)?)\n     })\n }\n \n@@ -236,10 +228,7 @@ fn type_op_subtype<'tcx>(\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt().enter_canonical_trait_query(&canonicalized, |ocx, key| {\n         let (param_env, Subtype { sub, sup }) = key.into_parts();\n-        ocx.register_infer_ok_obligations(\n-            ocx.infcx.at(&ObligationCause::dummy(), param_env).sup(sup, sub)?,\n-        );\n-        Ok(())\n+        Ok(ocx.sup_types(&ObligationCause::dummy(), param_env, sup, sub)?)\n     })\n }\n "}]}