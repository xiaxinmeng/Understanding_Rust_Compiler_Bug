{"sha": "d35ebcb483722303d21882b369c315449457147f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNWViY2I0ODM3MjIzMDNkMjE4ODJiMzY5YzMxNTQ0OTQ1NzE0N2Y=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-23T19:21:14Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-12-26T16:26:33Z"}, "message": "Make Barrier and Condvar Sync/Send", "tree": {"sha": "5f794d327edfc2b52aac23fc80f88abec72dc0e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f794d327edfc2b52aac23fc80f88abec72dc0e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d35ebcb483722303d21882b369c315449457147f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d35ebcb483722303d21882b369c315449457147f", "html_url": "https://github.com/rust-lang/rust/commit/d35ebcb483722303d21882b369c315449457147f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d35ebcb483722303d21882b369c315449457147f/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "607f60712c7c9d3b96a162d2605a89ff2554fc7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/607f60712c7c9d3b96a162d2605a89ff2554fc7e", "html_url": "https://github.com/rust-lang/rust/commit/607f60712c7c9d3b96a162d2605a89ff2554fc7e"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "f4338815f759bcd7cd91eb1c30ec020ddf2e615e", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d35ebcb483722303d21882b369c315449457147f/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35ebcb483722303d21882b369c315449457147f/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=d35ebcb483722303d21882b369c315449457147f", "patch": "@@ -180,12 +180,12 @@ mod tests {\n \n     fn malloc(n: uint) -> CVec<u8> {\n         unsafe {\n-            let mem = libc::malloc(n as libc::size_t);\n-            if mem.is_null() { ::alloc::oom() }\n+            let mem = ptr::Unique(libc::malloc(n as libc::size_t));\n+            if mem.0.is_null() { ::alloc::oom() }\n \n-            CVec::new_with_dtor(mem as *mut u8,\n+            CVec::new_with_dtor(mem.0 as *mut u8,\n                                 n,\n-                                move|| { libc::free(mem as *mut libc::c_void); })\n+                                move|| { libc::free(mem.0 as *mut libc::c_void); })\n         }\n     }\n "}, {"sha": "6cdb199819aff60f61a996ad3426f503c621738f", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d35ebcb483722303d21882b369c315449457147f/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35ebcb483722303d21882b369c315449457147f/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=d35ebcb483722303d21882b369c315449457147f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use kinds::{Send, Sync};\n use sync::{Mutex, Condvar};\n \n /// A barrier enables multiple tasks to synchronize the beginning\n@@ -35,12 +36,18 @@ pub struct Barrier {\n     num_threads: uint,\n }\n \n+unsafe impl Send for Barrier {}\n+unsafe impl Sync for Barrier {}\n+\n // The inner state of a double barrier\n struct BarrierState {\n     count: uint,\n     generation_id: uint,\n }\n \n+unsafe impl Send for BarrierState {}\n+unsafe impl Sync for BarrierState {}\n+\n impl Barrier {\n     /// Create a new barrier that can block a given number of threads.\n     ///"}, {"sha": "f1940bfd829b769934d46c33068f2420f2634cf8", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d35ebcb483722303d21882b369c315449457147f/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35ebcb483722303d21882b369c315449457147f/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=d35ebcb483722303d21882b369c315449457147f", "patch": "@@ -58,6 +58,9 @@ use time::Duration;\n /// ```\n pub struct Condvar { inner: Box<StaticCondvar> }\n \n+unsafe impl Send for Condvar {}\n+unsafe impl Sync for Condvar {}\n+\n /// Statically allocated condition variables.\n ///\n /// This structure is identical to `Condvar` except that it is suitable for use\n@@ -75,6 +78,9 @@ pub struct StaticCondvar {\n     mutex: AtomicUint,\n }\n \n+unsafe impl Send for StaticCondvar {}\n+unsafe impl Sync for StaticCondvar {}\n+\n /// Constant initializer for a statically allocated condition variable.\n pub const CONDVAR_INIT: StaticCondvar = StaticCondvar {\n     inner: sys::CONDVAR_INIT,"}, {"sha": "4d2fbfc4055f4163b5df12e0f63b9b1f3517c7d0", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d35ebcb483722303d21882b369c315449457147f/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35ebcb483722303d21882b369c315449457147f/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=d35ebcb483722303d21882b369c315449457147f", "patch": "@@ -284,6 +284,11 @@ mod test {\n     use thread::Thread;\n     use sync::{Arc, Mutex, StaticMutex, MUTEX_INIT, Condvar};\n \n+    struct Packet<T>(Arc<(Mutex<T>, Condvar)>);\n+\n+    unsafe impl<T:'static+Send> Send for Packet<T> {}\n+    unsafe impl<T> Sync for Packet<T> {}\n+\n     #[test]\n     fn smoke() {\n         let m = Mutex::new(());\n@@ -343,19 +348,19 @@ mod test {\n \n     #[test]\n     fn test_mutex_arc_condvar() {\n-        let arc = Arc::new((Mutex::new(false), Condvar::new()));\n-        let arc2 = arc.clone();\n+        let packet = Packet(Arc::new((Mutex::new(false), Condvar::new())));\n+        let packet2 = Packet(packet.0.clone());\n         let (tx, rx) = channel();\n         spawn(move|| {\n             // wait until parent gets in\n             rx.recv();\n-            let &(ref lock, ref cvar) = &*arc2;\n+            let &(ref lock, ref cvar) = &*packet2.0;\n             let mut lock = lock.lock();\n             *lock = true;\n             cvar.notify_one();\n         });\n \n-        let &(ref lock, ref cvar) = &*arc;\n+        let &(ref lock, ref cvar) = &*packet.0;\n         let lock = lock.lock();\n         tx.send(());\n         assert!(!*lock);\n@@ -367,20 +372,20 @@ mod test {\n     #[test]\n     #[should_fail]\n     fn test_arc_condvar_poison() {\n-        let arc = Arc::new((Mutex::new(1i), Condvar::new()));\n-        let arc2 = arc.clone();\n+        let packet = Packet(Arc::new((Mutex::new(1i), Condvar::new())));\n+        let packet2 = Packet(packet.0.clone());\n         let (tx, rx) = channel();\n \n         spawn(move|| {\n             rx.recv();\n-            let &(ref lock, ref cvar) = &*arc2;\n+            let &(ref lock, ref cvar) = &*packet2.0;\n             let _g = lock.lock();\n             cvar.notify_one();\n             // Parent should fail when it wakes up.\n             panic!();\n         });\n \n-        let &(ref lock, ref cvar) = &*arc;\n+        let &(ref lock, ref cvar) = &*packet.0;\n         let lock = lock.lock();\n         tx.send(());\n         while *lock == 1 {"}, {"sha": "76d05d9bfd419ad796ffb8f4ad4d050c822b0a13", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d35ebcb483722303d21882b369c315449457147f/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d35ebcb483722303d21882b369c315449457147f/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=d35ebcb483722303d21882b369c315449457147f", "patch": "@@ -60,6 +60,9 @@ pub struct RWLock<T> {\n     data: UnsafeCell<T>,\n }\n \n+unsafe impl<T:'static+Send> Send for RWLock<T> {}\n+unsafe impl<T> Sync for RWLock<T> {}\n+\n /// Structure representing a statically allocated RWLock.\n ///\n /// This structure is intended to be used inside of a `static` and will provide\n@@ -88,6 +91,9 @@ pub struct StaticRWLock {\n     poison: UnsafeCell<poison::Flag>,\n }\n \n+unsafe impl Send for StaticRWLock {}\n+unsafe impl Sync for StaticRWLock {}\n+\n /// Constant initialization for a statically-initialized rwlock.\n pub const RWLOCK_INIT: StaticRWLock = StaticRWLock {\n     inner: sys::RWLOCK_INIT,"}]}