{"sha": "e5d9371b302ff0d368ea6e075769eb4b2709b2ba", "node_id": "C_kwDOAAsO6NoAKGU1ZDkzNzFiMzAyZmYwZDM2OGVhNmUwNzU3NjllYjRiMjcwOWIyYmE", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-27T04:43:36Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-29T01:12:10Z"}, "message": "macros: allow setting applicability in attribute\n\nIn the initial implementation of the `SessionSubdiagnostic`, the\n`Applicability` of a suggestion can be set both as a field and as part\nof the attribute, this commit adds the same support to the original\n`SessionDiagnostic` derive.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "6a5de85fdcd1e9a5286819c4d1b2bada3784cbb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a5de85fdcd1e9a5286819c4d1b2bada3784cbb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5d9371b302ff0d368ea6e075769eb4b2709b2ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d9371b302ff0d368ea6e075769eb4b2709b2ba", "html_url": "https://github.com/rust-lang/rust/commit/e5d9371b302ff0d368ea6e075769eb4b2709b2ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5d9371b302ff0d368ea6e075769eb4b2709b2ba/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8ee0d7a20432bafaa59c04a9ad99c3b040d395f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ee0d7a20432bafaa59c04a9ad99c3b040d395f", "html_url": "https://github.com/rust-lang/rust/commit/e8ee0d7a20432bafaa59c04a9ad99c3b040d395f"}], "stats": {"total": 174, "additions": 120, "deletions": 54}, "files": [{"sha": "c163f233b474d1fde7953ef79a91d711dd33ec39", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e5d9371b302ff0d368ea6e075769eb4b2709b2ba/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d9371b302ff0d368ea6e075769eb4b2709b2ba/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=e5d9371b302ff0d368ea6e075769eb4b2709b2ba", "patch": "@@ -5,12 +5,13 @@ use crate::diagnostics::error::{\n     SessionDiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n-    option_inner_ty, report_error_if_not_applied_to_span, type_matches_path, FieldInfo,\n-    HasFieldMap, SetOnce,\n+    option_inner_ty, report_error_if_not_applied_to_span, type_matches_path, Applicability,\n+    FieldInfo, HasFieldMap, SetOnce,\n };\n use proc_macro2::TokenStream;\n use quote::{format_ident, quote};\n use std::collections::HashMap;\n+use std::str::FromStr;\n use syn::{spanned::Spanned, Attribute, Meta, MetaList, MetaNameValue, Type};\n use synstructure::Structure;\n \n@@ -430,7 +431,7 @@ impl SessionDiagnosticDeriveBuilder {\n                     }),\n                 };\n \n-                let (span_, applicability) = self.span_and_applicability_of_ty(info)?;\n+                let (span_field, mut applicability) = self.span_and_applicability_of_ty(info)?;\n \n                 let mut msg = None;\n                 let mut code = None;\n@@ -445,6 +446,7 @@ impl SessionDiagnosticDeriveBuilder {\n                     let nested_name = nested_name.as_str();\n                     match meta {\n                         Meta::NameValue(MetaNameValue { lit: syn::Lit::Str(s), .. }) => {\n+                            let span = meta.span().unwrap();\n                             match nested_name {\n                                 \"message\" => {\n                                     msg = Some(s.value());\n@@ -453,9 +455,27 @@ impl SessionDiagnosticDeriveBuilder {\n                                     let formatted_str = self.build_format(&s.value(), s.span());\n                                     code = Some(formatted_str);\n                                 }\n+                                \"applicability\" => {\n+                                    applicability = match applicability {\n+                                        Some(v) => {\n+                                            span_err(\n+                                                span,\n+                                                \"applicability cannot be set in both the field and attribute\"\n+                                            ).emit();\n+                                            Some(v)\n+                                        }\n+                                        None => match Applicability::from_str(&s.value()) {\n+                                            Ok(v) => Some(quote! { #v }),\n+                                            Err(()) => {\n+                                                span_err(span, \"invalid applicability\").emit();\n+                                                None\n+                                            }\n+                                        },\n+                                    }\n+                                }\n                                 _ => throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n                                     diag.help(\n-                                        \"only `message` and `code` are valid field attributes\",\n+                                        \"only `message`, `code` and `applicability` are valid field attributes\",\n                                     )\n                                 }),\n                             }\n@@ -464,6 +484,9 @@ impl SessionDiagnosticDeriveBuilder {\n                     }\n                 }\n \n+                let applicability = applicability\n+                    .unwrap_or_else(|| quote!(rustc_errors::Applicability::Unspecified));\n+\n                 let method = format_ident!(\"span_{}\", name);\n \n                 let slug = self\n@@ -475,7 +498,7 @@ impl SessionDiagnosticDeriveBuilder {\n                 let msg = quote! { rustc_errors::DiagnosticMessage::fluent_attr(#slug, #msg) };\n                 let code = code.unwrap_or_else(|| quote! { String::new() });\n \n-                Ok(quote! { #diag.#method(#span_, #msg, #code, #applicability); })\n+                Ok(quote! { #diag.#method(#span_field, #msg, #code, #applicability); })\n             }\n             _ => throw_invalid_attr!(attr, &meta),\n         }\n@@ -505,12 +528,12 @@ impl SessionDiagnosticDeriveBuilder {\n     fn span_and_applicability_of_ty(\n         &self,\n         info: FieldInfo<'_>,\n-    ) -> Result<(TokenStream, TokenStream), SessionDiagnosticDeriveError> {\n+    ) -> Result<(TokenStream, Option<TokenStream>), SessionDiagnosticDeriveError> {\n         match &info.ty {\n             // If `ty` is `Span` w/out applicability, then use `Applicability::Unspecified`.\n             ty @ Type::Path(..) if type_matches_path(ty, &[\"rustc_span\", \"Span\"]) => {\n                 let binding = &info.binding.binding;\n-                Ok((quote!(*#binding), quote!(rustc_errors::Applicability::Unspecified)))\n+                Ok((quote!(*#binding), None))\n             }\n             // If `ty` is `(Span, Applicability)` then return tokens accessing those.\n             Type::Tuple(tup) => {\n@@ -546,7 +569,7 @@ impl SessionDiagnosticDeriveBuilder {\n                         .map(|applicability_idx| quote!(#binding.#applicability_idx))\n                         .unwrap_or_else(|| quote!(rustc_errors::Applicability::Unspecified));\n \n-                    return Ok((span, applicability));\n+                    return Ok((span, Some(applicability)));\n                 }\n \n                 throw_span_err!(info.span.unwrap(), \"wrong types for suggestion\", |diag| {"}, {"sha": "961b42f424fd138778e155d98181fade0bcf1388", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e5d9371b302ff0d368ea6e075769eb4b2709b2ba/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d9371b302ff0d368ea6e075769eb4b2709b2ba/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=e5d9371b302ff0d368ea6e075769eb4b2709b2ba", "patch": "@@ -6,7 +6,7 @@ use crate::diagnostics::error::{\n };\n use crate::diagnostics::utils::{\n     option_inner_ty, report_error_if_not_applied_to_applicability,\n-    report_error_if_not_applied_to_span, FieldInfo, HasFieldMap, SetOnce,\n+    report_error_if_not_applied_to_span, Applicability, FieldInfo, HasFieldMap, SetOnce,\n };\n use proc_macro2::TokenStream;\n use quote::{format_ident, quote};\n@@ -16,48 +16,6 @@ use std::str::FromStr;\n use syn::{spanned::Spanned, Meta, MetaList, MetaNameValue};\n use synstructure::{BindingInfo, Structure, VariantInfo};\n \n-/// `Applicability` of a suggestion - mirrors `rustc_errors::Applicability` - and used to represent\n-/// the user's selection of applicability if specified in an attribute.\n-enum Applicability {\n-    MachineApplicable,\n-    MaybeIncorrect,\n-    HasPlaceholders,\n-    Unspecified,\n-}\n-\n-impl FromStr for Applicability {\n-    type Err = ();\n-\n-    fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        match s {\n-            \"machine-applicable\" => Ok(Applicability::MachineApplicable),\n-            \"maybe-incorrect\" => Ok(Applicability::MaybeIncorrect),\n-            \"has-placeholders\" => Ok(Applicability::HasPlaceholders),\n-            \"unspecified\" => Ok(Applicability::Unspecified),\n-            _ => Err(()),\n-        }\n-    }\n-}\n-\n-impl quote::ToTokens for Applicability {\n-    fn to_tokens(&self, tokens: &mut TokenStream) {\n-        tokens.extend(match self {\n-            Applicability::MachineApplicable => {\n-                quote! { rustc_errors::Applicability::MachineApplicable }\n-            }\n-            Applicability::MaybeIncorrect => {\n-                quote! { rustc_errors::Applicability::MaybeIncorrect }\n-            }\n-            Applicability::HasPlaceholders => {\n-                quote! { rustc_errors::Applicability::HasPlaceholders }\n-            }\n-            Applicability::Unspecified => {\n-                quote! { rustc_errors::Applicability::Unspecified }\n-            }\n-        });\n-    }\n-}\n-\n /// Which kind of suggestion is being created?\n #[derive(Clone, Copy)]\n enum SubdiagnosticSuggestionKind {"}, {"sha": "1f36af0a20bcdfaae0d9c06df58208e8a89a3c47", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e5d9371b302ff0d368ea6e075769eb4b2709b2ba/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d9371b302ff0d368ea6e075769eb4b2709b2ba/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=e5d9371b302ff0d368ea6e075769eb4b2709b2ba", "patch": "@@ -3,6 +3,7 @@ use proc_macro::Span;\n use proc_macro2::TokenStream;\n use quote::{format_ident, quote};\n use std::collections::BTreeSet;\n+use std::str::FromStr;\n use syn::{spanned::Spanned, Attribute, Meta, Type, Visibility};\n use synstructure::BindingInfo;\n \n@@ -222,3 +223,45 @@ pub(crate) trait HasFieldMap {\n         }\n     }\n }\n+\n+/// `Applicability` of a suggestion - mirrors `rustc_errors::Applicability` - and used to represent\n+/// the user's selection of applicability if specified in an attribute.\n+pub(crate) enum Applicability {\n+    MachineApplicable,\n+    MaybeIncorrect,\n+    HasPlaceholders,\n+    Unspecified,\n+}\n+\n+impl FromStr for Applicability {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"machine-applicable\" => Ok(Applicability::MachineApplicable),\n+            \"maybe-incorrect\" => Ok(Applicability::MaybeIncorrect),\n+            \"has-placeholders\" => Ok(Applicability::HasPlaceholders),\n+            \"unspecified\" => Ok(Applicability::Unspecified),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl quote::ToTokens for Applicability {\n+    fn to_tokens(&self, tokens: &mut TokenStream) {\n+        tokens.extend(match self {\n+            Applicability::MachineApplicable => {\n+                quote! { rustc_errors::Applicability::MachineApplicable }\n+            }\n+            Applicability::MaybeIncorrect => {\n+                quote! { rustc_errors::Applicability::MaybeIncorrect }\n+            }\n+            Applicability::HasPlaceholders => {\n+                quote! { rustc_errors::Applicability::HasPlaceholders }\n+            }\n+            Applicability::Unspecified => {\n+                quote! { rustc_errors::Applicability::Unspecified }\n+            }\n+        });\n+    }\n+}"}, {"sha": "ddcaa05e1e42bd6e3b4b349a3ad996e8afa31473", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e5d9371b302ff0d368ea6e075769eb4b2709b2ba/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d9371b302ff0d368ea6e075769eb4b2709b2ba/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=e5d9371b302ff0d368ea6e075769eb4b2709b2ba", "patch": "@@ -433,3 +433,33 @@ struct ErrorWithNoteWrongOrder {\n struct ErrorWithNoteCustomWrongOrder {\n     val: String,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct ApplicabilityInBoth {\n+    #[suggestion(message = \"bar\", code = \"...\", applicability = \"maybe-incorrect\")]\n+    //~^ ERROR applicability cannot be set in both the field and attribute\n+    suggestion: (Span, Applicability),\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct InvalidApplicability {\n+    #[suggestion(message = \"bar\", code = \"...\", applicability = \"batman\")]\n+    //~^ ERROR invalid applicability\n+    suggestion: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct ValidApplicability {\n+    #[suggestion(message = \"bar\", code = \"...\", applicability = \"maybe-incorrect\")]\n+    suggestion: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(code = \"E0123\", slug = \"foo\")]\n+struct NoApplicability {\n+    #[suggestion(message = \"bar\", code = \"...\")]\n+    suggestion: Span,\n+}"}, {"sha": "b26e805718a95f4ac068d75267670f0aa9cccf30", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5d9371b302ff0d368ea6e075769eb4b2709b2ba/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5d9371b302ff0d368ea6e075769eb4b2709b2ba/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=e5d9371b302ff0d368ea6e075769eb4b2709b2ba", "patch": "@@ -257,15 +257,15 @@ error: `#[suggestion(nonsense = ...)]` is not a valid attribute\n LL |     #[suggestion(nonsense = \"bar\")]\n    |                  ^^^^^^^^^^^^^^^^\n    |\n-   = help: only `message` and `code` are valid field attributes\n+   = help: only `message`, `code` and `applicability` are valid field attributes\n \n error: `#[suggestion(msg = ...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:232:18\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |                  ^^^^^^^^^^^\n    |\n-   = help: only `message` and `code` are valid field attributes\n+   = help: only `message`, `code` and `applicability` are valid field attributes\n \n error: wrong field type for suggestion\n   --> $DIR/diagnostic-derive.rs:254:5\n@@ -325,6 +325,18 @@ error: `#[note = ...]` must come after `#[error(..)]` or `#[warn(..)]`\n LL | #[note = \"bar\"]\n    | ^^^^^^^^^^^^^^^\n \n+error: applicability cannot be set in both the field and attribute\n+  --> $DIR/diagnostic-derive.rs:440:49\n+   |\n+LL |     #[suggestion(message = \"bar\", code = \"...\", applicability = \"maybe-incorrect\")]\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: invalid applicability\n+  --> $DIR/diagnostic-derive.rs:448:49\n+   |\n+LL |     #[suggestion(message = \"bar\", code = \"...\", applicability = \"batman\")]\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: cannot find attribute `nonsense` in this scope\n   --> $DIR/diagnostic-derive.rs:51:3\n    |\n@@ -348,6 +360,6 @@ LL | #[derive(SessionDiagnostic)]\n    |\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 41 previous errors\n+error: aborting due to 43 previous errors\n \n For more information about this error, try `rustc --explain E0599`."}]}