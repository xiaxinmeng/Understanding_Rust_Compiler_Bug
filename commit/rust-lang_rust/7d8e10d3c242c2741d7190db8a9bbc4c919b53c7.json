{"sha": "7d8e10d3c242c2741d7190db8a9bbc4c919b53c7", "node_id": "C_kwDOAAsO6NoAKDdkOGUxMGQzYzI0MmMyNzQxZDcxOTBkYjhhOWJiYzRjOTE5YjUzYzc", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-04-17T19:27:03Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-07T03:35:44Z"}, "message": "Resolve vars before emitting coerce suggestions too", "tree": {"sha": "072ee6126725cbf7656b10500c05cea0adba5eec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/072ee6126725cbf7656b10500c05cea0adba5eec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d8e10d3c242c2741d7190db8a9bbc4c919b53c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d8e10d3c242c2741d7190db8a9bbc4c919b53c7", "html_url": "https://github.com/rust-lang/rust/commit/7d8e10d3c242c2741d7190db8a9bbc4c919b53c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d8e10d3c242c2741d7190db8a9bbc4c919b53c7/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62d0e4cba94713cd7e4149da73875654bedf75b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/62d0e4cba94713cd7e4149da73875654bedf75b7", "html_url": "https://github.com/rust-lang/rust/commit/62d0e4cba94713cd7e4149da73875654bedf75b7"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "fb0fcf5d7967265dac98e6837904a6218da92d3a", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d8e10d3c242c2741d7190db8a9bbc4c919b53c7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d8e10d3c242c2741d7190db8a9bbc4c919b53c7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=7d8e10d3c242c2741d7190db8a9bbc4c919b53c7", "patch": "@@ -504,6 +504,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 TupleMatchFound::Single => {\n                     let expected_ty = expected_input_tys[0];\n                     let provided_ty = final_arg_types[0].map(|ty| ty.0).unwrap();\n+                    let expected_ty = self.resolve_vars_if_possible(expected_ty);\n+                    let provided_ty = self.resolve_vars_if_possible(provided_ty);\n                     let cause = &self.misc(provided_args[0].span);\n                     let compatibility = demand_compatible(0, &mut final_arg_types);\n                     let type_error = match compatibility {\n@@ -565,6 +567,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 {\n                     let expected_ty = expected_input_tys[*input_idx];\n                     let provided_ty = final_arg_types[*input_idx].map(|ty| ty.0).unwrap();\n+                    let expected_ty = self.resolve_vars_if_possible(expected_ty);\n+                    let provided_ty = self.resolve_vars_if_possible(provided_ty);\n                     let cause = &self.misc(provided_args[*input_idx].span);\n                     let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n                     let mut err = self.report_and_explain_type_error(trace, error);\n@@ -634,6 +638,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .and_then(|x| x.as_ref())\n                             .map(|ty| ty.0)\n                             .unwrap_or(tcx.ty_error());\n+                        let expected_ty = self.resolve_vars_if_possible(expected_ty);\n+                        let provided_ty = self.resolve_vars_if_possible(provided_ty);\n                         if let Compatibility::Incompatible(error) = &compatibility {\n                             let cause = &self.misc(\n                                 provided_args.get(input_idx).map(|i| i.span).unwrap_or(call_span),"}, {"sha": "0a24855a6a79c96e648876a955934215533451bb", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d8e10d3c242c2741d7190db8a9bbc4c919b53c7/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8e10d3c242c2741d7190db8a9bbc4c919b53c7/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=7d8e10d3c242c2741d7190db8a9bbc4c919b53c7", "patch": "@@ -21,6 +21,10 @@ note: function defined here\n    |\n LL |     fn bar<T>(_: T) {}\n    |        ^^^    ----\n+help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n+   |\n+LL |     bar::<isize>(i.try_into().unwrap());  // i should not be re-coerced back to an isize\n+   |                   ++++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fef63680a86767e913c91cf8b787c018067eb193", "filename": "src/test/ui/issues/issue-13359.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d8e10d3c242c2741d7190db8a9bbc4c919b53c7/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8e10d3c242c2741d7190db8a9bbc4c919b53c7/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr?ref=7d8e10d3c242c2741d7190db8a9bbc4c919b53c7", "patch": "@@ -11,6 +11,10 @@ note: function defined here\n    |\n LL | fn foo(_s: i16) { }\n    |    ^^^ -------\n+help: you can convert an `isize` to an `i16` and panic if the converted value doesn't fit\n+   |\n+LL |     foo((1*(1 as isize)).try_into().unwrap());\n+   |         +              +++++++++++++++++++++\n \n error[E0308]: mismatched types\n   --> $DIR/issue-13359.rs:10:9\n@@ -25,6 +29,10 @@ note: function defined here\n    |\n LL | fn bar(_s: u32) { }\n    |    ^^^ -------\n+help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n+   |\n+LL |     bar((1*(1 as usize)).try_into().unwrap());\n+   |         +              +++++++++++++++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ae10a00671e61e3ce921204abacb22c701adb28f", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d8e10d3c242c2741d7190db8a9bbc4c919b53c7/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d8e10d3c242c2741d7190db8a9bbc4c919b53c7/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=7d8e10d3c242c2741d7190db8a9bbc4c919b53c7", "patch": "@@ -15,6 +15,10 @@ note: function defined here\n LL |     fn write(fildes: i32, buf: *const i8, nbyte: u64) -> i64;\n    |        ^^^^^\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n+   |\n+LL |                   ($arr.len() * size_of($arr[0])).try_into().unwrap());\n+   |                   +                             +++++++++++++++++++++\n \n error[E0605]: non-primitive cast: `{integer}` as `()`\n   --> $DIR/issue-26480.rs:22:19"}]}