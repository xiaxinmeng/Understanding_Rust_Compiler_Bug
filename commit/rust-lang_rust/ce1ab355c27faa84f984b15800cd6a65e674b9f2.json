{"sha": "ce1ab355c27faa84f984b15800cd6a65e674b9f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMWFiMzU1YzI3ZmFhODRmOTg0YjE1ODAwY2Q2YTY1ZTY3NGI5ZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-15T22:58:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-15T22:58:54Z"}, "message": "Auto merge of #71180 - Dylan-DPC:rollup-pscpg6q, r=Dylan-DPC\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #69903 (Do not ICE in the face of invalid enum discriminant)\n - #70354 (Update RELEASES.md for 1.43.0)\n - #70774 (End cleanup on rustdoc-js tools)\n - #70990 (Improve rustdoc source code a bit)\n - #71145 (Add illumos triple)\n - #71166 (Clean up E0518 explanation)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "7c2598a80324cd67ec6140f142d7dcdd37974d70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c2598a80324cd67ec6140f142d7dcdd37974d70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce1ab355c27faa84f984b15800cd6a65e674b9f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce1ab355c27faa84f984b15800cd6a65e674b9f2", "html_url": "https://github.com/rust-lang/rust/commit/ce1ab355c27faa84f984b15800cd6a65e674b9f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce1ab355c27faa84f984b15800cd6a65e674b9f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2230290f7220e740ec08f4d844bf5951e1b74b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2230290f7220e740ec08f4d844bf5951e1b74b8", "html_url": "https://github.com/rust-lang/rust/commit/d2230290f7220e740ec08f4d844bf5951e1b74b8"}, {"sha": "41dc51ead81c99764ee82a58fab1328e74fb4f08", "url": "https://api.github.com/repos/rust-lang/rust/commits/41dc51ead81c99764ee82a58fab1328e74fb4f08", "html_url": "https://github.com/rust-lang/rust/commit/41dc51ead81c99764ee82a58fab1328e74fb4f08"}], "stats": {"total": 1601, "additions": 1123, "deletions": 478}, "files": [{"sha": "62dadbd6c999a37b374d18b1a8a669955d0a6ddd", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -1808,9 +1808,9 @@ checksum = \"b294d6fa9ee409a054354afc4352b0b9ef7ca222c69b8812cbea9e7d2bf3783f\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.66\"\n+version = \"0.2.69\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d515b1f41455adea1313a4a2ac8a8a477634fbae63cc6100e3aebb207ce61558\"\n+checksum = \"99e85c08494b21a9054e7fe1374a732aeadaff3980b6990b94bfd3a70f690005\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -4683,9 +4683,9 @@ checksum = \"4ecf3b85f68e8abaa7555aa5abdb1153079387e60b718283d732f03897fcfc86\"\n \n [[package]]\n name = \"socket2\"\n-version = \"0.3.11\"\n+version = \"0.3.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e8b74de517221a2cb01a53349cf54182acdc31a074727d3079068448c0676d85\"\n+checksum = \"03088793f677dce356f3ccc2edb1b314ad191ab702a5de3faf49304f7e104918\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\","}, {"sha": "36597b1864f25097a54881389f3a1f8fc0db77cc", "filename": "RELEASES.md", "status": "modified", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -1,3 +1,152 @@\n+Version 1.43.0 (2020-04-23)\n+==========================\n+\n+Language\n+--------\n+- [Fixed using binary operations with `&{number}` (e.g. `&1.0`) not having\n+  the type inferred correctly.][68129]\n+- [Attributes such as `#[cfg()]` can now be used on `if` expressions.][69201]\n+\n+**Syntax only changes**\n+- [Allow `type Foo: Ord` syntactically.][69361]\n+- [Fuse associated and extern items up to defaultness.][69194]\n+- [Syntactically allow `self` in all `fn` contexts.][68764]\n+- [Merge `fn` syntax + cleanup item parsing.][68728]\n+- [`item` macro fragments can be interpolated into `trait`s, `impl`s, and `extern` blocks.][69366]\n+  For example, you may now write:\n+  ```rust \n+  macro_rules! mac_trait {\n+      ($i:item) => {\n+          trait T { $i }\n+      }\n+  }\n+  mac_trait! {\n+      fn foo() {}\n+  }\n+  ```\n+\n+These are still rejected *semantically*, so you will likely receive an error but\n+these changes can be seen and parsed by macros and\n+conditional compilation.\n+\n+\n+Compiler\n+--------\n+- [You can now pass multiple lint flags to rustc to override the previous\n+  flags.][67885] For example; `rustc -D unused -A unused-variables` denies\n+  everything in the `unused` lint group except `unused-variables` which\n+  is explicitly allowed. However, passing `rustc -A unused-variables -D unused` denies\n+  everything in the `unused` lint group **including** `unused-variables` since\n+  the allow flag is specified before the deny flag (and therefore overridden).\n+- [rustc will now prefer your system MinGW libraries over its bundled libraries\n+  if they are available on `windows-gnu`.][67429]\n+- [rustc now buffers errors/warnings printed in JSON.][69227]\n+\n+Libraries\n+---------\n+- [`Arc<[T; N]>`, `Box<[T; N]>`, and `Rc<[T; N]>`, now implement\n+  `TryFrom<Arc<[T]>>`,`TryFrom<Box<[T]>>`, and `TryFrom<Rc<[T]>>`\n+  respectively.][69538] **Note** These conversions are only available when `N`\n+  is `0..=32`.\n+- [You can now use associated constants on floats and integers directly, rather\n+  than having to import the module.][68952] e.g. You can now write `u32::MAX` or\n+  `f32::NAN` with no imports.\n+- [`u8::is_ascii` is now `const`.][68984]\n+- [`String` now implements `AsMut<str>`.][68742]\n+- [Added the `primitive` module to `std` and `core`.][67637] This module\n+  reexports Rust's primitive types. This is mainly useful in macros\n+  where you want avoid these types being shadowed.\n+- [Relaxed some of the trait bounds on `HashMap` and `HashSet`.][67642]\n+- [`string::FromUtf8Error` now implements `Clone + Eq`.][68738]\n+\n+Stabilized APIs\n+---------------\n+- [`Once::is_completed`]\n+- [`f32::LOG10_2`]\n+- [`f32::LOG2_10`]\n+- [`f64::LOG10_2`]\n+- [`f64::LOG2_10`]\n+- [`iter::once_with`]\n+\n+Cargo\n+-----\n+- [You can now set config `[profile]`s in your `.cargo/config`, or through\n+  your environment.][cargo/7823]\n+- [Cargo will now set `CARGO_BIN_EXE_<name>` pointing to a binary's\n+  executable path when running integration tests or benchmarks.][cargo/7697]\n+  `<name>` is the name of your binary as-is e.g. If you wanted the executable\n+  path for a binary named `my-program`you would use `env!(\"CARGO_BIN_EXE_my-program\")`.\n+\n+Misc\n+----\n+- [Certain checks in the `const_err` lint were deemed unrelated to const\n+  evaluation][69185], and have been moved to the `unconditional_panic` and\n+  `arithmetic_overflow` lints.\n+  \n+Compatibility Notes\n+-------------------\n+\n+- [Having trailing syntax in the `assert!` macro is now a hard error.][69548] This\n+  has been a warning since 1.36.0.\n+- [Fixed `Self` not having the correctly inferred type.][69340] This incorrectly\n+  led to some instances being accepted, and now correctly emits a hard error.\n+\n+[69340]: https://github.com/rust-lang/rust/pull/69340\n+\n+Internal Only\n+-------------\n+These changes provide no direct user facing benefits, but represent significant\n+improvements to the internals and overall performance of `rustc` and\n+related tools.\n+\n+- [All components are now built with `opt-level=3` instead of `2`.][67878]\n+- [Improved how rustc generates drop code.][67332]\n+- [Improved performance from `#[inline]`-ing certain hot functions.][69256]\n+- [traits: preallocate 2 Vecs of known initial size][69022]\n+- [Avoid exponential behaviour when relating types][68772]\n+- [Skip `Drop` terminators for enum variants without drop glue][68943]\n+- [Improve performance of coherence checks][68966]\n+- [Deduplicate types in the generator witness][68672]\n+- [Invert control in struct_lint_level.][68725]\n+\n+[67332]: https://github.com/rust-lang/rust/pull/67332/\n+[67429]: https://github.com/rust-lang/rust/pull/67429/\n+[67637]: https://github.com/rust-lang/rust/pull/67637/\n+[67642]: https://github.com/rust-lang/rust/pull/67642/\n+[67878]: https://github.com/rust-lang/rust/pull/67878/\n+[67885]: https://github.com/rust-lang/rust/pull/67885/\n+[68129]: https://github.com/rust-lang/rust/pull/68129/\n+[68672]: https://github.com/rust-lang/rust/pull/68672/\n+[68725]: https://github.com/rust-lang/rust/pull/68725/\n+[68728]: https://github.com/rust-lang/rust/pull/68728/\n+[68738]: https://github.com/rust-lang/rust/pull/68738/\n+[68742]: https://github.com/rust-lang/rust/pull/68742/\n+[68764]: https://github.com/rust-lang/rust/pull/68764/\n+[68772]: https://github.com/rust-lang/rust/pull/68772/\n+[68943]: https://github.com/rust-lang/rust/pull/68943/\n+[68952]: https://github.com/rust-lang/rust/pull/68952/\n+[68966]: https://github.com/rust-lang/rust/pull/68966/\n+[68984]: https://github.com/rust-lang/rust/pull/68984/\n+[69022]: https://github.com/rust-lang/rust/pull/69022/\n+[69185]: https://github.com/rust-lang/rust/pull/69185/\n+[69194]: https://github.com/rust-lang/rust/pull/69194/\n+[69201]: https://github.com/rust-lang/rust/pull/69201/\n+[69227]: https://github.com/rust-lang/rust/pull/69227/\n+[69548]: https://github.com/rust-lang/rust/pull/69548/\n+[69256]: https://github.com/rust-lang/rust/pull/69256/\n+[69361]: https://github.com/rust-lang/rust/pull/69361/\n+[69366]: https://github.com/rust-lang/rust/pull/69366/\n+[69538]: https://github.com/rust-lang/rust/pull/69538/\n+[cargo/7823]: https://github.com/rust-lang/cargo/pull/7823\n+[cargo/7697]: https://github.com/rust-lang/cargo/pull/7697\n+[`Once::is_completed`]: https://doc.rust-lang.org/std/sync/struct.Once.html#method.is_completed\n+[`f32::LOG10_2`]: https://doc.rust-lang.org/std/f32/consts/constant.LOG10_2.html\n+[`f32::LOG2_10`]: https://doc.rust-lang.org/std/f32/consts/constant.LOG2_10.html\n+[`f64::LOG10_2`]: https://doc.rust-lang.org/std/f64/consts/constant.LOG10_2.html\n+[`f64::LOG2_10`]: https://doc.rust-lang.org/std/f64/consts/constant.LOG2_10.html\n+[`iter::once_with`]: https://doc.rust-lang.org/std/iter/fn.once_with.html\n+\n+\n Version 1.42.0 (2020-03-12)\n ==========================\n "}, {"sha": "85c5d28bb8924690f7fad6ae7af5870f9dbd6659", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -627,8 +627,14 @@ impl Step for RustdocJSStd {\n         if let Some(ref nodejs) = builder.config.nodejs {\n             let mut command = Command::new(nodejs);\n             command\n-                .arg(builder.src.join(\"src/tools/rustdoc-js-std/tester.js\"))\n+                .arg(builder.src.join(\"src/tools/rustdoc-js/tester.js\"))\n+                .arg(\"--crate-name\")\n+                .arg(\"std\")\n+                .arg(\"--resource-suffix\")\n+                .arg(crate::channel::CFG_RELEASE_NUM)\n+                .arg(\"--doc-folder\")\n                 .arg(builder.doc_out(self.target))\n+                .arg(\"--test-folder\")\n                 .arg(builder.src.join(\"src/test/rustdoc-js-std\"));\n             builder.ensure(crate::doc::Std { target: self.target, stage: builder.top_stage });\n             builder.run(&mut command);"}, {"sha": "d9620a21d37cde4e4b9413ce6f9ea340caf8afeb", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -15,7 +15,7 @@ cc = \"1.0.1\"\n num_cpus = \"1.0\"\n memmap = \"0.7\"\n log = \"0.4.5\"\n-libc = \"0.2.44\"\n+libc = \"0.2.50\"\n jobserver = \"0.1.11\"\n tempfile = \"3.1\"\n "}, {"sha": "4c66d901e7a99bc7d548009f32115ebca953d9b5", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -761,7 +761,7 @@ fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n                         }\n                     }\n                     LinkerFlavor::Gcc => {\n-                        if cfg!(target_os = \"solaris\") {\n+                        if cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n                             // On historical Solaris systems, \"cc\" may have\n                             // been Sun Studio, which is not flag-compatible\n                             // with \"gcc\".  This history casts a long shadow,"}, {"sha": "f04329bc4e61886a595cac96e1924790f09d5a2f", "filename": "src/librustc_error_codes/error_codes/E0518.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0518.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0518.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0518.md?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -1,7 +1,7 @@\n-This error indicates that an `#[inline(..)]` attribute was incorrectly placed\n-on something other than a function or method.\n+An `#[inline(..)]` attribute was incorrectly placed on something other than a\n+function or method.\n \n-Examples of erroneous code:\n+Example of erroneous code:\n \n ```compile_fail,E0518\n #[inline(always)]"}, {"sha": "430ff67d56b68c027f63639029e28826708aaa25", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -2399,7 +2399,11 @@ impl<'tcx> AdtDef {\n                 None\n             }\n             Err(ErrorHandled::TooGeneric) => {\n-                span_bug!(tcx.def_span(expr_did), \"enum discriminant depends on generic arguments\",)\n+                tcx.sess.delay_span_bug(\n+                    tcx.def_span(expr_did),\n+                    \"enum discriminant depends on generic arguments\",\n+                );\n+                None\n             }\n         }\n     }"}, {"sha": "d2d99cf030d96bcdb574454b17f5ef1125bd7ce9", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AutoBorrow, AutoBorrowMutability, PointerCast,\n };\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n-use rustc_middle::ty::{self, AdtKind, Ty};\n+use rustc_middle::ty::{self, AdtKind, Ty, TypeFoldable};\n use rustc_span::Span;\n \n impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr<'tcx> {\n@@ -718,8 +718,7 @@ fn convert_path_expr<'a, 'tcx>(\n \n         Res::Def(DefKind::Ctor(_, CtorKind::Const), def_id) => {\n             let user_provided_types = cx.tables.user_provided_types();\n-            let user_provided_type = user_provided_types.get(expr.hir_id).copied();\n-            debug!(\"convert_path_expr: user_provided_type={:?}\", user_provided_type);\n+            let user_ty = user_provided_types.get(expr.hir_id).copied();\n             let ty = cx.tables().node_type(expr.hir_id);\n             match ty.kind {\n                 // A unit struct/variant which is used as a value.\n@@ -728,10 +727,17 @@ fn convert_path_expr<'a, 'tcx>(\n                     adt_def,\n                     variant_index: adt_def.variant_index_with_ctor_id(def_id),\n                     substs,\n-                    user_ty: user_provided_type,\n+                    user_ty,\n                     fields: vec![],\n                     base: None,\n                 },\n+                _ if ty.references_error() => {\n+                    // Handle degenerate input without ICE (#67377).\n+                    ExprKind::Literal {\n+                        literal: ty::Const::zero_sized(cx.tcx, cx.tcx.types.err),\n+                        user_ty: None,\n+                    }\n+                }\n                 _ => bug!(\"unexpected ty: {:?}\", ty),\n             }\n         }"}, {"sha": "35ac346fb3f6f1586d6f32167aa00b04a9c1be41", "filename": "src/librustc_target/spec/illumos_base.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_target%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_target%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fillumos_base.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -0,0 +1,48 @@\n+use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    let mut late_link_args = LinkArgs::new();\n+    late_link_args.insert(\n+        LinkerFlavor::Gcc,\n+        vec![\n+            // LLVM will insert calls to the stack protector functions\n+            // \"__stack_chk_fail\" and \"__stack_chk_guard\" into code in native\n+            // object files.  Some platforms include these symbols directly in\n+            // libc, but at least historically these have been provided in\n+            // libssp.so on illumos and Solaris systems.\n+            \"-lssp\".to_string(),\n+        ],\n+    );\n+\n+    TargetOptions {\n+        dynamic_linking: true,\n+        executables: true,\n+        has_rpath: true,\n+        target_family: Some(\"unix\".to_string()),\n+        is_like_solaris: true,\n+        limit_rdylib_exports: false, // Linker doesn't support this\n+        eliminate_frame_pointer: false,\n+        late_link_args,\n+\n+        // While we support ELF TLS, rust requires a way to register\n+        // cleanup handlers (in C, this would be something along the lines of:\n+        // void register_callback(void (*fn)(void *), void *arg);\n+        // (see src/libstd/sys/unix/fast_thread_local.rs) that is currently\n+        // missing in illumos.  For now at least, we must fallback to using\n+        // pthread_{get,set}specific.\n+        //has_elf_tls: true,\n+\n+        // FIXME: Currently, rust is invoking cc to link, which ends up\n+        // causing these to get included twice.  We should eventually transition\n+        // to having rustc invoke ld directly, in which case these will need to\n+        // be uncommented.\n+        //\n+        // We want XPG6 behavior from libc and libm.  See standards(5)\n+        //pre_link_objects_exe: vec![\n+        //    \"/usr/lib/amd64/values-Xc.o\".to_string(),\n+        //    \"/usr/lib/amd64/values-xpg6.o\".to_string(),\n+        //],\n+        ..Default::default()\n+    }\n+}"}, {"sha": "8f3097ad4233eb6796c072c28d6fbfbc2b24671c", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -55,6 +55,7 @@ mod fuchsia_base;\n mod haiku_base;\n mod hermit_base;\n mod hermit_kernel_base;\n+mod illumos_base;\n mod l4re_base;\n mod linux_base;\n mod linux_kernel_base;\n@@ -438,6 +439,8 @@ supported_targets! {\n     (\"x86_64-sun-solaris\", \"x86_64-pc-solaris\", x86_64_sun_solaris),\n     (\"sparcv9-sun-solaris\", sparcv9_sun_solaris),\n \n+    (\"x86_64-unknown-illumos\", x86_64_unknown_illumos),\n+\n     (\"x86_64-pc-windows-gnu\", x86_64_pc_windows_gnu),\n     (\"i686-pc-windows-gnu\", i686_pc_windows_gnu),\n     (\"i686-uwp-windows-gnu\", i686_uwp_windows_gnu),"}, {"sha": "8d461f67397f279b21665afa6df21189a695d34a", "filename": "src/librustc_target/spec/x86_64_unknown_illumos.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_illumos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_illumos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_illumos.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -0,0 +1,24 @@\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::illumos_base::opts();\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string(), \"-std=c99\".to_string()]);\n+    base.cpu = \"x86-64\".to_string();\n+    base.max_atomic_width = Some(64);\n+\n+    Ok(Target {\n+        // LLVM does not currently have a separate illumos target,\n+        // so we still pass Solaris to it\n+        llvm_target: \"x86_64-pc-solaris\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"illumos\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: base,\n+    })\n+}"}, {"sha": "57d499e38a77b83c15a82fc650dc62661222b055", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -360,6 +360,7 @@ impl<'a> fmt::Display for Html<'a> {\n                         \"fuchsia\" => \"Fuchsia\",\n                         \"haiku\" => \"Haiku\",\n                         \"hermit\" => \"HermitCore\",\n+                        \"illumos\" => \"illumos\",\n                         \"ios\" => \"iOS\",\n                         \"l4re\" => \"L4Re\",\n                         \"linux\" => \"Linux\","}, {"sha": "2626ca638e84186571f41ccf503cedf3c505b179", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -208,10 +208,10 @@ pub fn get_real_types(\n                             if !adds.is_empty() {\n                                 res.extend(adds);\n                             } else if !ty.is_full_generic() {\n-                                if let Some(did) = ty.def_id() {\n-                                    if let Some(kind) = cx.tcx.def_kind(did).clean(cx) {\n-                                        res.insert((ty, kind));\n-                                    }\n+                                if let Some(kind) =\n+                                    ty.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx))\n+                                {\n+                                    res.insert((ty, kind));\n                                 }\n                             }\n                         }\n@@ -226,20 +226,18 @@ pub fn get_real_types(\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     } else if !ty.is_full_generic() {\n-                        if let Some(did) = ty.def_id() {\n-                            if let Some(kind) = cx.tcx.def_kind(did).clean(cx) {\n-                                res.insert((ty.clone(), kind));\n-                            }\n+                        if let Some(kind) =\n+                            ty.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx))\n+                        {\n+                            res.insert((ty.clone(), kind));\n                         }\n                     }\n                 }\n             }\n         }\n     } else {\n-        if let Some(did) = arg.def_id() {\n-            if let Some(kind) = cx.tcx.def_kind(did).clean(cx) {\n-                res.insert((arg.clone(), kind));\n-            }\n+        if let Some(kind) = arg.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx)) {\n+            res.insert((arg.clone(), kind));\n         }\n         if let Some(gens) = arg.generics() {\n             for gen in gens.iter() {\n@@ -248,10 +246,10 @@ pub fn get_real_types(\n                     if !adds.is_empty() {\n                         res.extend(adds);\n                     }\n-                } else if let Some(did) = gen.def_id() {\n-                    if let Some(kind) = cx.tcx.def_kind(did).clean(cx) {\n-                        res.insert((gen.clone(), kind));\n-                    }\n+                } else if let Some(kind) =\n+                    gen.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx))\n+                {\n+                    res.insert((gen.clone(), kind));\n                 }\n             }\n         }\n@@ -277,10 +275,8 @@ pub fn get_all_types(\n         if !args.is_empty() {\n             all_types.extend(args);\n         } else {\n-            if let Some(did) = arg.type_.def_id() {\n-                if let Some(kind) = cx.tcx.def_kind(did).clean(cx) {\n-                    all_types.insert((arg.type_.clone(), kind));\n-                }\n+            if let Some(kind) = arg.type_.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx)) {\n+                all_types.insert((arg.type_.clone(), kind));\n             }\n         }\n     }\n@@ -289,10 +285,10 @@ pub fn get_all_types(\n         FnRetTy::Return(ref return_type) => {\n             let mut ret = get_real_types(generics, &return_type, cx, 0);\n             if ret.is_empty() {\n-                if let Some(did) = return_type.def_id() {\n-                    if let Some(kind) = cx.tcx.def_kind(did).clean(cx) {\n-                        ret.insert((return_type.clone(), kind));\n-                    }\n+                if let Some(kind) =\n+                    return_type.def_id().and_then(|did| cx.tcx.def_kind(did).clean(cx))\n+                {\n+                    ret.insert((return_type.clone(), kind));\n                 }\n             }\n             ret.into_iter().collect()"}, {"sha": "a8efb16a1d31e90abc4725ccb98f1e36ec91e534", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -697,11 +697,11 @@ fn get_generics(clean_type: &clean::Type) -> Option<Vec<Generic>> {\n         let r = types\n             .iter()\n             .filter_map(|t| {\n-                if let Some(name) = get_index_type_name(t, false) {\n-                    Some(Generic { name: name.to_ascii_lowercase(), defid: t.def_id(), idx: None })\n-                } else {\n-                    None\n-                }\n+                get_index_type_name(t, false).map(|name| Generic {\n+                    name: name.to_ascii_lowercase(),\n+                    defid: t.def_id(),\n+                    idx: None,\n+                })\n             })\n             .collect::<Vec<_>>();\n         if r.is_empty() { None } else { Some(r) }"}, {"sha": "743a1778fbda339c4675ebe94fa663473f869ad7", "filename": "src/libstd/build.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -25,6 +25,14 @@ fn main() {\n         println!(\"cargo:rustc-link-lib=posix4\");\n         println!(\"cargo:rustc-link-lib=pthread\");\n         println!(\"cargo:rustc-link-lib=resolv\");\n+    } else if target.contains(\"illumos\") {\n+        println!(\"cargo:rustc-link-lib=socket\");\n+        println!(\"cargo:rustc-link-lib=posix4\");\n+        println!(\"cargo:rustc-link-lib=pthread\");\n+        println!(\"cargo:rustc-link-lib=resolv\");\n+        println!(\"cargo:rustc-link-lib=nsl\");\n+        // Use libumem for the (malloc-compatible) allocator\n+        println!(\"cargo:rustc-link-lib=umem\");\n     } else if target.contains(\"apple-darwin\") {\n         println!(\"cargo:rustc-link-lib=System\");\n "}, {"sha": "5cf9cb73d4bf9c0743c7c7e63a5db4e0144a8458", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -919,7 +919,7 @@ impl f64 {\n     // because of their non-standard behavior (e.g., log(-n) returns -Inf instead\n     // of expected NaN).\n     fn log_wrapper<F: Fn(f64) -> f64>(self, log_fn: F) -> f64 {\n-        if !cfg!(target_os = \"solaris\") {\n+        if !cfg!(any(target_os = \"solaris\", target_os = \"illumos\")) {\n             log_fn(self)\n         } else {\n             if self.is_finite() {"}, {"sha": "2abbf1fa9fa16197ef270fd9e1bd50ae3c8ec73c", "filename": "src/libstd/os/illumos/fs.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fos%2Fillumos%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fos%2Fillumos%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fillumos%2Ffs.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -0,0 +1,118 @@\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use crate::os::illumos::raw;\n+\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(\n+        since = \"1.8.0\",\n+        reason = \"deprecated in favor of the accessor methods of this trait\"\n+    )]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+}"}, {"sha": "e61926f89356a6e2d39a8220279b16efd0ad80ac", "filename": "src/libstd/os/illumos/mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fos%2Fillumos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fos%2Fillumos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fillumos%2Fmod.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -0,0 +1,6 @@\n+//! illumos-specific definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+pub mod fs;\n+pub mod raw;"}, {"sha": "88c832ae7c77327ac70f3724d8049fa15d34092a", "filename": "src/libstd/os/illumos/raw.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fos%2Fillumos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fos%2Fillumos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fillumos%2Fraw.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -0,0 +1,74 @@\n+//! illumos-specific raw type definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(\n+    since = \"1.8.0\",\n+    reason = \"these type aliases are no longer supported by the standard library, the `libc` \\\n+    crate on crates.io should be used instead for the correct definitions\"\n+)]\n+#![allow(deprecated)]\n+\n+use crate::os::raw::c_long;\n+use crate::os::unix::raw::{gid_t, uid_t};\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blkcnt_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type blksize_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type fflags_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type ino_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type nlink_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type off_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type time_t = i64;\n+\n+#[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n+pub type pthread_t = u32;\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_dev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ino: ino_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mode: mode_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_nlink: nlink_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_uid: uid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_gid: gid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_rdev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_size: off_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blksize: blksize_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blocks: blkcnt_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub __unused: [u8; 16],\n+}"}, {"sha": "fd6ee088e961c123fc6521aa3164e1bdce249774", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -52,6 +52,8 @@ pub mod freebsd;\n pub mod fuchsia;\n #[cfg(target_os = \"haiku\")]\n pub mod haiku;\n+#[cfg(target_os = \"illumos\")]\n+pub mod illumos;\n #[cfg(target_os = \"ios\")]\n pub mod ios;\n #[cfg(target_os = \"macos\")]"}, {"sha": "8e193935460eb1f450ccb1cd9fd9ffcfb9ac66f3", "filename": "src/libstd/sys/unix/alloc.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Falloc.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -52,7 +52,12 @@ unsafe impl GlobalAlloc for System {\n     }\n }\n \n-#[cfg(any(target_os = \"android\", target_os = \"redox\", target_os = \"solaris\"))]\n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"illumos\",\n+    target_os = \"redox\",\n+    target_os = \"solaris\"\n+))]\n #[inline]\n unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n     // On android we currently target API level 9 which unfortunately\n@@ -75,7 +80,12 @@ unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n     libc::memalign(layout.align(), layout.size()) as *mut u8\n }\n \n-#[cfg(not(any(target_os = \"android\", target_os = \"redox\", target_os = \"solaris\")))]\n+#[cfg(not(any(\n+    target_os = \"android\",\n+    target_os = \"illumos\",\n+    target_os = \"redox\",\n+    target_os = \"solaris\"\n+)))]\n #[inline]\n unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {\n     let mut out = ptr::null_mut();"}, {"sha": "4c3e8542d576df350ae060b7a4744c8eb99a7485", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -65,6 +65,7 @@ impl DoubleEndedIterator for Args {\n     target_os = \"netbsd\",\n     target_os = \"openbsd\",\n     target_os = \"solaris\",\n+    target_os = \"illumos\",\n     target_os = \"emscripten\",\n     target_os = \"haiku\",\n     target_os = \"l4re\","}, {"sha": "7f5e9b04dba4b69b38f1cf1ade48f6096f7ba8b4", "filename": "src/libstd/sys/unix/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fenv.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -97,6 +97,17 @@ pub mod os {\n     pub const EXE_EXTENSION: &str = \"\";\n }\n \n+#[cfg(target_os = \"illumos\")]\n+pub mod os {\n+    pub const FAMILY: &str = \"unix\";\n+    pub const OS: &str = \"illumos\";\n+    pub const DLL_PREFIX: &str = \"lib\";\n+    pub const DLL_SUFFIX: &str = \".so\";\n+    pub const DLL_EXTENSION: &str = \"so\";\n+    pub const EXE_SUFFIX: &str = \"\";\n+    pub const EXE_EXTENSION: &str = \"\";\n+}\n+\n #[cfg(target_os = \"haiku\")]\n pub mod os {\n     pub const FAMILY: &str = \"unix\";"}, {"sha": "1bba56e334a2e86c8245cf376a548ad3b5d45d5e", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -153,6 +153,7 @@ impl FileDesc {\n     #[cfg(not(any(\n         target_env = \"newlib\",\n         target_os = \"solaris\",\n+        target_os = \"illumos\",\n         target_os = \"emscripten\",\n         target_os = \"fuchsia\",\n         target_os = \"l4re\",\n@@ -169,6 +170,7 @@ impl FileDesc {\n     #[cfg(any(\n         target_env = \"newlib\",\n         target_os = \"solaris\",\n+        target_os = \"illumos\",\n         target_os = \"emscripten\",\n         target_os = \"fuchsia\",\n         target_os = \"l4re\","}, {"sha": "a233aa47dff5807d777d2319c849f7ee7eabc850", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -22,6 +22,7 @@ use libc::fstatat64;\n     target_os = \"linux\",\n     target_os = \"emscripten\",\n     target_os = \"solaris\",\n+    target_os = \"illumos\",\n     target_os = \"l4re\",\n     target_os = \"fuchsia\",\n     target_os = \"redox\"\n@@ -200,7 +201,12 @@ pub struct DirEntry {\n     // on Solaris and Fuchsia because a) it uses a zero-length\n     // array to store the name, b) its lifetime between readdir\n     // calls is not guaranteed.\n-    #[cfg(any(target_os = \"solaris\", target_os = \"fuchsia\", target_os = \"redox\"))]\n+    #[cfg(any(\n+        target_os = \"solaris\",\n+        target_os = \"illumos\",\n+        target_os = \"fuchsia\",\n+        target_os = \"redox\"\n+    ))]\n     name: Box<[u8]>,\n }\n \n@@ -403,7 +409,12 @@ impl fmt::Debug for ReadDir {\n impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n \n-    #[cfg(any(target_os = \"solaris\", target_os = \"fuchsia\", target_os = \"redox\"))]\n+    #[cfg(any(\n+        target_os = \"solaris\",\n+        target_os = \"fuchsia\",\n+        target_os = \"redox\",\n+        target_os = \"illumos\"\n+    ))]\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n         use crate::slice;\n \n@@ -441,7 +452,12 @@ impl Iterator for ReadDir {\n         }\n     }\n \n-    #[cfg(not(any(target_os = \"solaris\", target_os = \"fuchsia\", target_os = \"redox\")))]\n+    #[cfg(not(any(\n+        target_os = \"solaris\",\n+        target_os = \"fuchsia\",\n+        target_os = \"redox\",\n+        target_os = \"illumos\"\n+    )))]\n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n         if self.end_of_stream {\n             return None;\n@@ -514,12 +530,12 @@ impl DirEntry {\n         lstat(&self.path())\n     }\n \n-    #[cfg(any(target_os = \"solaris\", target_os = \"haiku\"))]\n+    #[cfg(any(target_os = \"solaris\", target_os = \"illumos\", target_os = \"haiku\"))]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         lstat(&self.path()).map(|m| m.file_type())\n     }\n \n-    #[cfg(not(any(target_os = \"solaris\", target_os = \"haiku\")))]\n+    #[cfg(not(any(target_os = \"solaris\", target_os = \"illumos\", target_os = \"haiku\")))]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         match self.entry.d_type {\n             libc::DT_CHR => Ok(FileType { mode: libc::S_IFCHR }),\n@@ -540,6 +556,7 @@ impl DirEntry {\n         target_os = \"emscripten\",\n         target_os = \"android\",\n         target_os = \"solaris\",\n+        target_os = \"illumos\",\n         target_os = \"haiku\",\n         target_os = \"l4re\",\n         target_os = \"fuchsia\",\n@@ -586,7 +603,12 @@ impl DirEntry {\n     fn name_bytes(&self) -> &[u8] {\n         unsafe { CStr::from_ptr(self.entry.d_name.as_ptr()).to_bytes() }\n     }\n-    #[cfg(any(target_os = \"solaris\", target_os = \"fuchsia\", target_os = \"redox\"))]\n+    #[cfg(any(\n+        target_os = \"solaris\",\n+        target_os = \"illumos\",\n+        target_os = \"fuchsia\",\n+        target_os = \"redox\"\n+    ))]\n     fn name_bytes(&self) -> &[u8] {\n         &*self.name\n     }"}, {"sha": "0154609d939f3071f47fe184d5b1d610f92a7d5a", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -17,6 +17,8 @@ pub use crate::os::freebsd as platform;\n pub use crate::os::fuchsia as platform;\n #[cfg(all(not(doc), target_os = \"haiku\"))]\n pub use crate::os::haiku as platform;\n+#[cfg(all(not(doc), target_os = \"illumos\"))]\n+pub use crate::os::illumos as platform;\n #[cfg(all(not(doc), target_os = \"ios\"))]\n pub use crate::os::ios as platform;\n #[cfg(all(not(doc), target_os = \"l4re\"))]"}, {"sha": "d18c22b0573f375b9515eff8bbea4d3a77f70ee7", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -322,11 +322,19 @@ impl Socket {\n         Ok(raw != 0)\n     }\n \n+    #[cfg(not(any(target_os = \"solaris\", target_os = \"illumos\")))]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         let mut nonblocking = nonblocking as libc::c_int;\n         cvt(unsafe { libc::ioctl(*self.as_inner(), libc::FIONBIO, &mut nonblocking) }).map(drop)\n     }\n \n+    #[cfg(any(target_os = \"solaris\", target_os = \"illumos\"))]\n+    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n+        // FIONBIO is inadequate for sockets on illumos/Solaris, so use the\n+        // fcntl(F_[GS]ETFL)-based method provided by FileDesc instead.\n+        self.0.set_nonblocking(nonblocking)\n+    }\n+\n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n         let raw: c_int = getsockopt(self, libc::SOL_SOCKET, libc::SO_ERROR)?;\n         if raw == 0 { Ok(None) } else { Ok(Some(io::Error::from_raw_os_error(raw as i32))) }"}, {"sha": "a9cd5094997bd68b9e2ae6e675f0bcb61862777d", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -54,7 +54,7 @@ extern \"C\" {\n         ),\n         link_name = \"__errno\"\n     )]\n-    #[cfg_attr(target_os = \"solaris\", link_name = \"___errno\")]\n+    #[cfg_attr(any(target_os = \"solaris\", target_os = \"illumos\"), link_name = \"___errno\")]\n     #[cfg_attr(\n         any(target_os = \"macos\", target_os = \"ios\", target_os = \"freebsd\"),\n         link_name = \"__error\"\n@@ -357,7 +357,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     }\n }\n \n-#[cfg(any(target_os = \"solaris\"))]\n+#[cfg(any(target_os = \"solaris\", target_os = \"illumos\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n     extern \"C\" {\n         fn getexecname() -> *const c_char;"}, {"sha": "5e10357835056c59b2e5c5715f0c5552b9826c57", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -33,6 +33,7 @@ impl Drop for Handler {\n     target_os = \"dragonfly\",\n     target_os = \"freebsd\",\n     target_os = \"solaris\",\n+    target_os = \"illumos\",\n     all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n     target_os = \"openbsd\"\n ))]\n@@ -162,7 +163,8 @@ mod imp {\n         target_os = \"freebsd\",\n         target_os = \"netbsd\",\n         target_os = \"openbsd\",\n-        target_os = \"solaris\"\n+        target_os = \"solaris\",\n+        target_os = \"illumos\"\n     ))]\n     unsafe fn get_stack() -> libc::stack_t {\n         libc::stack_t { ss_sp: get_stackp(), ss_flags: 0, ss_size: SIGSTKSZ }\n@@ -214,6 +216,7 @@ mod imp {\n     target_os = \"dragonfly\",\n     target_os = \"freebsd\",\n     target_os = \"solaris\",\n+    target_os = \"illumos\",\n     all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n     target_os = \"openbsd\"\n )))]"}, {"sha": "895ea48e2b43e5e0d916e20da893793286647ac3", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -132,7 +132,7 @@ impl Thread {\n         }\n     }\n \n-    #[cfg(target_os = \"solaris\")]\n+    #[cfg(any(target_os = \"solaris\", target_os = \"illumos\"))]\n     pub fn set_name(name: &CStr) {\n         weak! {\n             fn pthread_setname_np(\n@@ -155,7 +155,7 @@ impl Thread {\n         target_os = \"redox\"\n     ))]\n     pub fn set_name(_name: &CStr) {\n-        // Newlib, Illumos, Haiku, and Emscripten have no way to set a thread name.\n+        // Newlib, Haiku, and Emscripten have no way to set a thread name.\n     }\n     #[cfg(target_os = \"fuchsia\")]\n     pub fn set_name(_name: &CStr) {"}, {"sha": "cdd3d2edf1fa1c5cd769a204ef5bc3f3fe40ef03", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -17,7 +17,7 @@ cfg_if::cfg_if! {\n     if #[cfg(any(\n         target_os = \"dragonfly\", target_os = \"freebsd\",\n         target_os = \"ios\", target_os = \"macos\",\n-        target_os = \"openbsd\", target_os = \"netbsd\",\n+        target_os = \"openbsd\", target_os = \"netbsd\", target_os = \"illumos\",\n         target_os = \"solaris\", target_os = \"haiku\", target_os = \"l4re\"))] {\n         use crate::sys::net::netc::IPV6_JOIN_GROUP as IPV6_ADD_MEMBERSHIP;\n         use crate::sys::net::netc::IPV6_LEAVE_GROUP as IPV6_DROP_MEMBERSHIP;\n@@ -43,7 +43,7 @@ cfg_if::cfg_if! {\n     if #[cfg(any(\n         target_os = \"dragonfly\", target_os = \"freebsd\",\n         target_os = \"openbsd\", target_os = \"netbsd\",\n-        target_os = \"solaris\"))] {\n+        target_os = \"solaris\", target_os = \"illumos\"))] {\n         use libc::c_uchar;\n         type IpV4MultiCastType = c_uchar;\n     } else {"}, {"sha": "e8f3820558a6d7936db86ff2bbb018eb0830e8db", "filename": "src/libtest/helpers/concurrency.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibtest%2Fhelpers%2Fconcurrency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibtest%2Fhelpers%2Fconcurrency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fhelpers%2Fconcurrency.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -77,6 +77,7 @@ pub fn get_concurrency() -> usize {\n         target_os = \"linux\",\n         target_os = \"macos\",\n         target_os = \"solaris\",\n+        target_os = \"illumos\",\n     ))]\n     fn num_cpus() -> usize {\n         unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as usize }"}, {"sha": "c8d2419ab4514d92c68628fc7ce9a7351d3e6eea", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -30,6 +30,8 @@ fn main() {\n         }\n     } else if target.contains(\"solaris\") {\n         println!(\"cargo:rustc-link-lib=gcc_s\");\n+    } else if target.contains(\"illumos\") {\n+        println!(\"cargo:rustc-link-lib=gcc_s\");\n     } else if target.contains(\"dragonfly\") {\n         println!(\"cargo:rustc-link-lib=gcc_pic\");\n     } else if target.contains(\"pc-windows-gnu\") {"}, {"sha": "87222ef4b59245f5931b2c26b8565efe947dace2", "filename": "src/test/ui/parser/issue-67377-invalid-syntax-in-enum-discriminant.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Ftest%2Fui%2Fparser%2Fissue-67377-invalid-syntax-in-enum-discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Ftest%2Fui%2Fparser%2Fissue-67377-invalid-syntax-in-enum-discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-67377-invalid-syntax-in-enum-discriminant.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -0,0 +1,35 @@\n+mod a {\n+    use std::marker::PhantomData;\n+\n+    enum Bug {\n+        V = [PhantomData; { [ () ].len() ].len() as isize,\n+        //~^ ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+    }\n+}\n+\n+mod b {\n+    enum Bug {\n+        V = [Vec::new; { [].len()  ].len() as isize,\n+        //~^ ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR type annotations needed\n+    }\n+}\n+\n+mod c {\n+    enum Bug {\n+        V = [Vec::new; { [0].len() ].len() as isize,\n+        //~^ ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR mismatched closing delimiter: `]`\n+        //~| ERROR type annotations needed\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f20ec75535354aec7a98c0ab439217eb64458cc7", "filename": "src/test/ui/parser/issue-67377-invalid-syntax-in-enum-discriminant.stderr", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Ftest%2Fui%2Fparser%2Fissue-67377-invalid-syntax-in-enum-discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Ftest%2Fui%2Fparser%2Fissue-67377-invalid-syntax-in-enum-discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-67377-invalid-syntax-in-enum-discriminant.stderr?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -0,0 +1,123 @@\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:5:42\n+   |\n+LL |         V = [PhantomData; { [ () ].len() ].len() as isize,\n+   |             -             -              ^ mismatched closing delimiter\n+   |             |             |\n+   |             |             unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:15:36\n+   |\n+LL |         V = [Vec::new; { [].len()  ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:26:36\n+   |\n+LL |         V = [Vec::new; { [0].len() ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:5:42\n+   |\n+LL |         V = [PhantomData; { [ () ].len() ].len() as isize,\n+   |             -             -              ^ mismatched closing delimiter\n+   |             |             |\n+   |             |             unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:15:36\n+   |\n+LL |         V = [Vec::new; { [].len()  ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:26:36\n+   |\n+LL |         V = [Vec::new; { [0].len() ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:5:42\n+   |\n+LL |         V = [PhantomData; { [ () ].len() ].len() as isize,\n+   |             -             -              ^ mismatched closing delimiter\n+   |             |             |\n+   |             |             unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:15:36\n+   |\n+LL |         V = [Vec::new; { [].len()  ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:26:36\n+   |\n+LL |         V = [Vec::new; { [0].len() ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:5:42\n+   |\n+LL |         V = [PhantomData; { [ () ].len() ].len() as isize,\n+   |             -             -              ^ mismatched closing delimiter\n+   |             |             |\n+   |             |             unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:15:36\n+   |\n+LL |         V = [Vec::new; { [].len()  ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error: mismatched closing delimiter: `]`\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:26:36\n+   |\n+LL |         V = [Vec::new; { [0].len() ].len() as isize,\n+   |             -          -           ^ mismatched closing delimiter\n+   |             |          |\n+   |             |          unclosed delimiter\n+   |             closing delimiter possibly meant for this\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:15:29\n+   |\n+LL |         V = [Vec::new; { [].len()  ].len() as isize,\n+   |                             ^^^ cannot infer type for type parameter `T`\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-67377-invalid-syntax-in-enum-discriminant.rs:26:14\n+   |\n+LL |         V = [Vec::new; { [0].len() ].len() as isize,\n+   |              ^^^^^^^^ cannot infer type for type parameter `T`\n+\n+error: aborting due to 14 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "6de07d3e5cfd8c285e109a5ded4389bbc50c9404", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -139,6 +139,7 @@ static TARGETS: &[&str] = &[\n     \"x86_64-pc-solaris\",\n     \"x86_64-unknown-cloudabi\",\n     \"x86_64-unknown-freebsd\",\n+    \"x86_64-unknown-illumos\",\n     \"x86_64-unknown-linux-gnu\",\n     \"x86_64-unknown-linux-gnux32\",\n     \"x86_64-unknown-linux-musl\","}, {"sha": "61a7d8ee5c948984940880f835795414dfa22829", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -2810,10 +2810,16 @@ impl<'test> TestCx<'test> {\n             self.document(&out_dir);\n \n             let root = self.config.find_rust_src_root().unwrap();\n+            let file_stem =\n+                self.testpaths.file.file_stem().and_then(|f| f.to_str()).expect(\"no file stem\");\n             let res = self.cmd2procres(\n                 Command::new(&nodejs)\n                     .arg(root.join(\"src/tools/rustdoc-js/tester.js\"))\n-                    .arg(out_dir.parent().expect(\"no parent\"))\n+                    .arg(\"--doc-folder\")\n+                    .arg(out_dir)\n+                    .arg(\"--crate-name\")\n+                    .arg(file_stem.replace(\"-\", \"_\"))\n+                    .arg(\"--test-file\")\n                     .arg(self.testpaths.file.with_extension(\"js\")),\n             );\n             if !res.status.success() {"}, {"sha": "c61bee0f8d9eacf67b12cfc1a204fd5f7e33c66c", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -21,6 +21,7 @@ const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"fuchsia\", \"fuchsia\"),\n     (\"haiku\", \"haiku\"),\n     (\"hermit\", \"hermit\"),\n+    (\"illumos\", \"illumos\"),\n     (\"ios\", \"ios\"),\n     (\"l4re\", \"l4re\"),\n     (\"linux\", \"linux\"),"}, {"sha": "81e64aec491a6e443698ee2fe752bcf0bf287f81", "filename": "src/tools/rustdoc-js-common/lib.js", "status": "removed", "additions": 0, "deletions": 319, "changes": 319, "blob_url": "https://github.com/rust-lang/rust/blob/d2230290f7220e740ec08f4d844bf5951e1b74b8/src%2Ftools%2Frustdoc-js-common%2Flib.js", "raw_url": "https://github.com/rust-lang/rust/raw/d2230290f7220e740ec08f4d844bf5951e1b74b8/src%2Ftools%2Frustdoc-js-common%2Flib.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js-common%2Flib.js?ref=d2230290f7220e740ec08f4d844bf5951e1b74b8", "patch": "@@ -1,319 +0,0 @@\n-const fs = require('fs');\n-\n-function getNextStep(content, pos, stop) {\n-    while (pos < content.length && content[pos] !== stop &&\n-           (content[pos] === ' ' || content[pos] === '\\t' || content[pos] === '\\n')) {\n-        pos += 1;\n-    }\n-    if (pos >= content.length) {\n-        return null;\n-    }\n-    if (content[pos] !== stop) {\n-        return pos * -1;\n-    }\n-    return pos;\n-}\n-\n-// Stupid function extractor based on indent. Doesn't support block\n-// comments. If someone puts a ' or an \" in a block comment this\n-// will blow up. Template strings are not tested and might also be\n-// broken.\n-function extractFunction(content, functionName) {\n-    var indent = 0;\n-    var splitter = \"function \" + functionName + \"(\";\n-\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = start;\n-        while (pos < content.length && content[pos] !== ')') {\n-            pos += 1;\n-        }\n-        if (pos >= content.length) {\n-            break;\n-        }\n-        pos = getNextStep(content, pos + 1, '{');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            // Eat single-line comments\n-            if (content[pos] === '/' && pos > 0 && content[pos-1] === '/') {\n-                do {\n-                    pos += 1;\n-                } while (pos < content.length && content[pos] !== '\\n');\n-\n-            // Eat quoted strings\n-            } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n-                var stop = content[pos];\n-                var is_escaped = false;\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-\n-            // Otherwise, check for indent\n-            } else if (content[pos] === '{') {\n-                indent += 1;\n-            } else if (content[pos] === '}') {\n-                indent -= 1;\n-                if (indent === 0) {\n-                    return content.slice(start, pos + 1);\n-                }\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-// Stupid function extractor for array.\n-function extractArrayVariable(content, arrayName) {\n-    var splitter = \"var \" + arrayName;\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = getNextStep(content, start, '=');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        pos = getNextStep(content, pos, '[');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            if (content[pos] === '\"' || content[pos] === \"'\") {\n-                var stop = content[pos];\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-            } else if (content[pos] === ']' &&\n-                       pos + 1 < content.length &&\n-                       content[pos + 1] === ';') {\n-                return content.slice(start, pos + 2);\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-// Stupid function extractor for variable.\n-function extractVariable(content, varName) {\n-    var splitter = \"var \" + varName;\n-    while (true) {\n-        var start = content.indexOf(splitter);\n-        if (start === -1) {\n-            break;\n-        }\n-        var pos = getNextStep(content, start, '=');\n-        if (pos === null) {\n-            break;\n-        } else if (pos < 0) {\n-            content = content.slice(-pos);\n-            continue;\n-        }\n-        while (pos < content.length) {\n-            if (content[pos] === '\"' || content[pos] === \"'\") {\n-                var stop = content[pos];\n-                do {\n-                    if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n-                        pos += 1;\n-                    }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n-            } else if (content[pos] === ';' || content[pos] === ',') {\n-                return content.slice(start, pos + 1);\n-            }\n-            pos += 1;\n-        }\n-        content = content.slice(start + 1);\n-    }\n-    return null;\n-}\n-\n-function loadContent(content) {\n-    var Module = module.constructor;\n-    var m = new Module();\n-    m._compile(content, \"tmp.js\");\n-    m.exports.ignore_order = content.indexOf(\"\\n// ignore-order\\n\") !== -1 ||\n-        content.startsWith(\"// ignore-order\\n\");\n-    m.exports.exact_check = content.indexOf(\"\\n// exact-check\\n\") !== -1 ||\n-        content.startsWith(\"// exact-check\\n\");\n-    m.exports.should_fail = content.indexOf(\"\\n// should-fail\\n\") !== -1 ||\n-        content.startsWith(\"// should-fail\\n\");\n-    return m.exports;\n-}\n-\n-function readFile(filePath) {\n-    return fs.readFileSync(filePath, 'utf8');\n-}\n-\n-function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n-    var content = '';\n-    for (var i = 0; i < thingsToLoad.length; ++i) {\n-        var tmp = funcToCall(fileContent, thingsToLoad[i]);\n-        if (tmp === null) {\n-            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n-            process.exit(1);\n-        }\n-        content += tmp;\n-        content += 'exports.' + thingsToLoad[i] + ' = ' + thingsToLoad[i] + ';';\n-    }\n-    return content;\n-}\n-\n-function lookForEntry(entry, data) {\n-    for (var i = 0; i < data.length; ++i) {\n-        var allGood = true;\n-        for (var key in entry) {\n-            if (!entry.hasOwnProperty(key)) {\n-                continue;\n-            }\n-            var value = data[i][key];\n-            // To make our life easier, if there is a \"parent\" type, we add it to the path.\n-            if (key === 'path' && data[i]['parent'] !== undefined) {\n-                if (value.length > 0) {\n-                    value += '::' + data[i]['parent']['name'];\n-                } else {\n-                    value = data[i]['parent']['name'];\n-                }\n-            }\n-            if (value !== entry[key]) {\n-                allGood = false;\n-                break;\n-            }\n-        }\n-        if (allGood === true) {\n-            return i;\n-        }\n-    }\n-    return null;\n-}\n-\n-function loadMainJsAndIndex(mainJs, aliases, searchIndex, crate) {\n-    if (searchIndex[searchIndex.length - 1].length === 0) {\n-        searchIndex.pop();\n-    }\n-    searchIndex.pop();\n-    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n-    finalJS = \"\";\n-\n-    var arraysToLoad = [\"itemTypes\"];\n-    var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\", \"NO_TYPE_FILTER\",\n-                           \"GENERICS_DATA\", \"NAME\", \"INPUTS_DATA\", \"OUTPUT_DATA\",\n-                           \"TY_PRIMITIVE\", \"TY_KEYWORD\",\n-                           \"levenshtein_row2\"];\n-    // execQuery first parameter is built in getQuery (which takes in the search input).\n-    // execQuery last parameter is built in buildIndex.\n-    // buildIndex requires the hashmap from search-index.\n-    var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n-                           \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n-\n-    finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n-    finalJS += 'var rootPath = \"../\";\\n';\n-    finalJS += aliases;\n-    finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n-    finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n-    finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n-\n-    var loaded = loadContent(finalJS);\n-    var index = loaded.buildIndex(searchIndex.searchIndex);\n-\n-    return [loaded, index];\n-}\n-\n-function runChecks(testFile, loaded, index) {\n-    var errors = 0;\n-    var loadedFile = loadContent(\n-        readFile(testFile) + 'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n-\n-    const expected = loadedFile.EXPECTED;\n-    const query = loadedFile.QUERY;\n-    const filter_crate = loadedFile.FILTER_CRATE;\n-    const ignore_order = loadedFile.ignore_order;\n-    const exact_check = loadedFile.exact_check;\n-    const should_fail = loadedFile.should_fail;\n-\n-    var results = loaded.execSearch(loaded.getQuery(query), index);\n-    var error_text = [];\n-\n-    for (var key in expected) {\n-        if (!expected.hasOwnProperty(key)) {\n-            continue;\n-        }\n-        if (!results.hasOwnProperty(key)) {\n-            error_text.push('==> Unknown key \"' + key + '\"');\n-            break;\n-        }\n-        var entry = expected[key];\n-        var prev_pos = -1;\n-        for (var i = 0; i < entry.length; ++i) {\n-            var entry_pos = lookForEntry(entry[i], results[key]);\n-            if (entry_pos === null) {\n-                error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n-                                JSON.stringify(entry[i]) + \"'\");\n-            } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n-                error_text.push(\"==> Exact check failed at position \" + (prev_pos + 1) + \": \" +\n-                                \"expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n-                                JSON.stringify(results[key][i]) + \"'\");\n-            } else if (ignore_order === false && entry_pos < prev_pos) {\n-                error_text.push(\"==> '\" + JSON.stringify(entry[i]) + \"' was supposed to be \" +\n-                                \" before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n-            } else {\n-                prev_pos = entry_pos;\n-            }\n-        }\n-    }\n-    if (error_text.length === 0 && should_fail === true) {\n-        errors += 1;\n-        console.error(\"FAILED\");\n-        console.error(\"==> Test was supposed to fail but all items were found...\");\n-    } else if (error_text.length !== 0 && should_fail === false) {\n-        errors += 1;\n-        console.error(\"FAILED\");\n-        console.error(error_text.join(\"\\n\"));\n-    } else {\n-        console.log(\"OK\");\n-    }\n-    return errors;\n-}\n-\n-module.exports = {\n-    'getNextStep': getNextStep,\n-    'extractFunction': extractFunction,\n-    'extractArrayVariable': extractArrayVariable,\n-    'extractVariable': extractVariable,\n-    'loadContent': loadContent,\n-    'readFile': readFile,\n-    'loadThings': loadThings,\n-    'lookForEntry': lookForEntry,\n-    'loadMainJsAndIndex': loadMainJsAndIndex,\n-    'runChecks': runChecks,\n-};"}, {"sha": "6f730b0fdbbaae5eec9982a9c995339e9e34221b", "filename": "src/tools/rustdoc-js-std/tester.js", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d2230290f7220e740ec08f4d844bf5951e1b74b8/src%2Ftools%2Frustdoc-js-std%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/d2230290f7220e740ec08f4d844bf5951e1b74b8/src%2Ftools%2Frustdoc-js-std%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js-std%2Ftester.js?ref=d2230290f7220e740ec08f4d844bf5951e1b74b8", "patch": "@@ -1,74 +0,0 @@\n-const fs = require('fs');\n-const path = require('path');\n-const tools = require('../rustdoc-js-common/lib.js');\n-\n-\n-function findFile(dir, name, extension) {\n-    var entries = fs.readdirSync(dir);\n-    var matches = [];\n-    for (var i = 0; i < entries.length; ++i) {\n-        var entry = entries[i];\n-        var file_type = fs.statSync(dir + entry);\n-        if (file_type.isDirectory()) {\n-            continue;\n-        }\n-        if (entry.startsWith(name) && entry.endsWith(extension)) {\n-            var version = entry.slice(name.length, entry.length - extension.length);\n-            version = version.split(\".\").map(function(x) {\n-                return parseInt(x);\n-            });\n-            var total = 0;\n-            var mult = 1;\n-            for (var j = version.length - 1; j >= 0; --j) {\n-                total += version[j] * mult;\n-                mult *= 1000;\n-            }\n-            matches.push([entry, total]);\n-        }\n-    }\n-    if (matches.length === 0) {\n-        return null;\n-    }\n-    // We make a reverse sort to have the \"highest\" file. Very useful in case you didn't clean up\n-    // you std doc folder...\n-    matches.sort(function(a, b) {\n-        return b[1] - a[1];\n-    });\n-    return matches[0][0];\n-}\n-\n-function readFileMatching(dir, name, extension) {\n-    if (dir.endsWith(\"/\") === false) {\n-        dir += \"/\";\n-    }\n-    var f = findFile(dir, name, extension);\n-    if (f === null) {\n-        return \"\";\n-    }\n-    return tools.readFile(dir + f);\n-}\n-\n-function main(argv) {\n-    if (argv.length !== 4) {\n-        console.error(\"USAGE: node tester.js STD_DOCS TEST_FOLDER\");\n-        return 1;\n-    }\n-    var std_docs = argv[2];\n-    var test_folder = argv[3];\n-\n-    var mainJs = readFileMatching(std_docs, \"main\", \".js\");\n-    var aliases = readFileMatching(std_docs, \"aliases\", \".js\");\n-    var searchIndex = readFileMatching(std_docs, \"search-index\", \".js\").split(\"\\n\");\n-\n-    var [loaded, index] = tools.loadMainJsAndIndex(mainJs, aliases, searchIndex, \"std\");\n-\n-    var errors = 0;\n-\n-    fs.readdirSync(test_folder).forEach(function(file) {\n-        process.stdout.write('Checking \"' + file + '\" ... ');\n-        errors += tools.runChecks(path.join(test_folder, file), loaded, index);\n-    });\n-    return errors > 0 ? 1 : 0;\n-}\n-\n-process.exit(main(process.argv));"}, {"sha": "03f06fc1c6c7113238a9114822038e9c42fe6fcc", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 389, "deletions": 24, "changes": 413, "blob_url": "https://github.com/rust-lang/rust/blob/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/ce1ab355c27faa84f984b15800cd6a65e674b9f2/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=ce1ab355c27faa84f984b15800cd6a65e674b9f2", "patch": "@@ -1,43 +1,408 @@\n const fs = require('fs');\n const path = require('path');\n-const tools = require('../rustdoc-js-common/lib.js');\n \n-function load_files(out_folder, crate) {\n-    var mainJs = tools.readFile(out_folder + \"/main.js\");\n-    var aliases = tools.readFile(out_folder + \"/aliases.js\");\n-    var searchIndex = tools.readFile(out_folder + \"/search-index.js\").split(\"\\n\");\n+function getNextStep(content, pos, stop) {\n+    while (pos < content.length && content[pos] !== stop &&\n+           (content[pos] === ' ' || content[pos] === '\\t' || content[pos] === '\\n')) {\n+        pos += 1;\n+    }\n+    if (pos >= content.length) {\n+        return null;\n+    }\n+    if (content[pos] !== stop) {\n+        return pos * -1;\n+    }\n+    return pos;\n+}\n+\n+// Stupid function extractor based on indent. Doesn't support block\n+// comments. If someone puts a ' or an \" in a block comment this\n+// will blow up. Template strings are not tested and might also be\n+// broken.\n+function extractFunction(content, functionName) {\n+    var indent = 0;\n+    var splitter = \"function \" + functionName + \"(\";\n \n-    return tools.loadMainJsAndIndex(mainJs, aliases, searchIndex, crate);\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = start;\n+        while (pos < content.length && content[pos] !== ')') {\n+            pos += 1;\n+        }\n+        if (pos >= content.length) {\n+            break;\n+        }\n+        pos = getNextStep(content, pos + 1, '{');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            // Eat single-line comments\n+            if (content[pos] === '/' && pos > 0 && content[pos-1] === '/') {\n+                do {\n+                    pos += 1;\n+                } while (pos < content.length && content[pos] !== '\\n');\n+\n+            // Eat quoted strings\n+            } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n+                var stop = content[pos];\n+                var is_escaped = false;\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+\n+            // Otherwise, check for indent\n+            } else if (content[pos] === '{') {\n+                indent += 1;\n+            } else if (content[pos] === '}') {\n+                indent -= 1;\n+                if (indent === 0) {\n+                    return content.slice(start, pos + 1);\n+                }\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n+    }\n+    return null;\n }\n \n-function main(argv) {\n-    if (argv.length < 4) {\n-        console.error(\"USAGE: node tester.js OUT_FOLDER [TESTS]\");\n-        return 1;\n+// Stupid function extractor for array.\n+function extractArrayVariable(content, arrayName) {\n+    var splitter = \"var \" + arrayName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        pos = getNextStep(content, pos, '[');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ']' &&\n+                       pos + 1 < content.length &&\n+                       content[pos + 1] === ';') {\n+                return content.slice(start, pos + 2);\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n     }\n-    if (argv[2].substr(-1) !== \"/\") {\n-        argv[2] += \"/\";\n+    return null;\n+}\n+\n+// Stupid function extractor for variable.\n+function extractVariable(content, varName) {\n+    var splitter = \"var \" + varName;\n+    while (true) {\n+        var start = content.indexOf(splitter);\n+        if (start === -1) {\n+            break;\n+        }\n+        var pos = getNextStep(content, start, '=');\n+        if (pos === null) {\n+            break;\n+        } else if (pos < 0) {\n+            content = content.slice(-pos);\n+            continue;\n+        }\n+        while (pos < content.length) {\n+            if (content[pos] === '\"' || content[pos] === \"'\") {\n+                var stop = content[pos];\n+                do {\n+                    if (content[pos] === '\\\\') {\n+                        pos += 2;\n+                    } else {\n+                        pos += 1;\n+                    }\n+                } while (pos < content.length &&\n+                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+            } else if (content[pos] === ';' || content[pos] === ',') {\n+                return content.slice(start, pos + 1);\n+            }\n+            pos += 1;\n+        }\n+        content = content.slice(start + 1);\n     }\n-    const out_folder = argv[2];\n+    return null;\n+}\n \n+function loadContent(content) {\n+    var Module = module.constructor;\n+    var m = new Module();\n+    m._compile(content, \"tmp.js\");\n+    m.exports.ignore_order = content.indexOf(\"\\n// ignore-order\\n\") !== -1 ||\n+        content.startsWith(\"// ignore-order\\n\");\n+    m.exports.exact_check = content.indexOf(\"\\n// exact-check\\n\") !== -1 ||\n+        content.startsWith(\"// exact-check\\n\");\n+    m.exports.should_fail = content.indexOf(\"\\n// should-fail\\n\") !== -1 ||\n+        content.startsWith(\"// should-fail\\n\");\n+    return m.exports;\n+}\n+\n+function readFile(filePath) {\n+    return fs.readFileSync(filePath, 'utf8');\n+}\n+\n+function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n+    var content = '';\n+    for (var i = 0; i < thingsToLoad.length; ++i) {\n+        var tmp = funcToCall(fileContent, thingsToLoad[i]);\n+        if (tmp === null) {\n+            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n+            process.exit(1);\n+        }\n+        content += tmp;\n+        content += 'exports.' + thingsToLoad[i] + ' = ' + thingsToLoad[i] + ';';\n+    }\n+    return content;\n+}\n+\n+function lookForEntry(entry, data) {\n+    for (var i = 0; i < data.length; ++i) {\n+        var allGood = true;\n+        for (var key in entry) {\n+            if (!entry.hasOwnProperty(key)) {\n+                continue;\n+            }\n+            var value = data[i][key];\n+            // To make our life easier, if there is a \"parent\" type, we add it to the path.\n+            if (key === 'path' && data[i]['parent'] !== undefined) {\n+                if (value.length > 0) {\n+                    value += '::' + data[i]['parent']['name'];\n+                } else {\n+                    value = data[i]['parent']['name'];\n+                }\n+            }\n+            if (value !== entry[key]) {\n+                allGood = false;\n+                break;\n+            }\n+        }\n+        if (allGood === true) {\n+            return i;\n+        }\n+    }\n+    return null;\n+}\n+\n+function loadMainJsAndIndex(mainJs, aliases, searchIndex, crate) {\n+    if (searchIndex[searchIndex.length - 1].length === 0) {\n+        searchIndex.pop();\n+    }\n+    searchIndex.pop();\n+    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n+    var finalJS = \"\";\n+\n+    var arraysToLoad = [\"itemTypes\"];\n+    var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\", \"NO_TYPE_FILTER\",\n+                           \"GENERICS_DATA\", \"NAME\", \"INPUTS_DATA\", \"OUTPUT_DATA\",\n+                           \"TY_PRIMITIVE\", \"TY_KEYWORD\",\n+                           \"levenshtein_row2\"];\n+    // execQuery first parameter is built in getQuery (which takes in the search input).\n+    // execQuery last parameter is built in buildIndex.\n+    // buildIndex requires the hashmap from search-index.\n+    var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n+                           \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n+\n+    finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n+    finalJS += 'var rootPath = \"../\";\\n';\n+    finalJS += aliases;\n+    finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n+    finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n+    finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n+\n+    var loaded = loadContent(finalJS);\n+    var index = loaded.buildIndex(searchIndex.searchIndex);\n+\n+    return [loaded, index];\n+}\n+\n+function runChecks(testFile, loaded, index) {\n     var errors = 0;\n+    var loadedFile = loadContent(\n+        readFile(testFile) + 'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n+\n+    const expected = loadedFile.EXPECTED;\n+    const query = loadedFile.QUERY;\n+    const filter_crate = loadedFile.FILTER_CRATE;\n+    const ignore_order = loadedFile.ignore_order;\n+    const exact_check = loadedFile.exact_check;\n+    const should_fail = loadedFile.should_fail;\n \n-    for (var j = 3; j < argv.length; ++j) {\n-        const test_file = argv[j];\n-        const test_name = path.basename(test_file, \".js\");\n+    var results = loaded.execSearch(loaded.getQuery(query), index);\n+    var error_text = [];\n \n-        process.stdout.write('Checking \"' + test_name + '\" ... ');\n-        if (!fs.existsSync(test_file)) {\n-            errors += 1;\n-            console.error(\"FAILED\");\n-            console.error(\"==> Missing '\" + test_name + \".js' file...\");\n+    for (var key in expected) {\n+        if (!expected.hasOwnProperty(key)) {\n             continue;\n         }\n+        if (!results.hasOwnProperty(key)) {\n+            error_text.push('==> Unknown key \"' + key + '\"');\n+            break;\n+        }\n+        var entry = expected[key];\n+        var prev_pos = -1;\n+        for (var i = 0; i < entry.length; ++i) {\n+            var entry_pos = lookForEntry(entry[i], results[key]);\n+            if (entry_pos === null) {\n+                error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n+                                JSON.stringify(entry[i]) + \"'\");\n+            } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n+                error_text.push(\"==> Exact check failed at position \" + (prev_pos + 1) + \": \" +\n+                                \"expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n+                                JSON.stringify(results[key][i]) + \"'\");\n+            } else if (ignore_order === false && entry_pos < prev_pos) {\n+                error_text.push(\"==> '\" + JSON.stringify(entry[i]) + \"' was supposed to be \" +\n+                                \" before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n+            } else {\n+                prev_pos = entry_pos;\n+            }\n+        }\n+    }\n+    if (error_text.length === 0 && should_fail === true) {\n+        errors += 1;\n+        console.error(\"FAILED\");\n+        console.error(\"==> Test was supposed to fail but all items were found...\");\n+    } else if (error_text.length !== 0 && should_fail === false) {\n+        errors += 1;\n+        console.error(\"FAILED\");\n+        console.error(error_text.join(\"\\n\"));\n+    } else {\n+        console.log(\"OK\");\n+    }\n+    return errors;\n+}\n \n-        const test_out_folder = out_folder + test_name;\n+function load_files(doc_folder, resource_suffix, crate) {\n+    var mainJs = readFile(path.join(doc_folder, \"main\" + resource_suffix + \".js\"));\n+    var aliases = readFile(path.join(doc_folder, \"aliases\" + resource_suffix + \".js\"));\n+    var searchIndex = readFile(\n+        path.join(doc_folder, \"search-index\" + resource_suffix + \".js\")).split(\"\\n\");\n+\n+    return loadMainJsAndIndex(mainJs, aliases, searchIndex, crate);\n+}\n \n-        var [loaded, index] = load_files(test_out_folder, test_name);\n-        errors += tools.runChecks(test_file, loaded, index);\n+function showHelp() {\n+    console.log(\"rustdoc-js options:\");\n+    console.log(\"  --doc-folder [PATH]        : location of the generated doc folder\");\n+    console.log(\"  --help                     : show this message then quit\");\n+    console.log(\"  --crate-name [STRING]      : crate name to be used\");\n+    console.log(\"  --test-file [PATH]         : location of the JS test file\");\n+    console.log(\"  --test-folder [PATH]       : location of the JS tests folder\");\n+    console.log(\"  --resource-suffix [STRING] : suffix to refer to the correct files\");\n+}\n+\n+function parseOptions(args) {\n+    var opts = {\n+        \"crate_name\": \"\",\n+        \"resource_suffix\": \"\",\n+        \"doc_folder\": \"\",\n+        \"test_folder\": \"\",\n+        \"test_file\": \"\",\n+    };\n+    var correspondances = {\n+        \"--resource-suffix\": \"resource_suffix\",\n+        \"--doc-folder\": \"doc_folder\",\n+        \"--test-folder\": \"test_folder\",\n+        \"--test-file\": \"test_file\",\n+        \"--crate-name\": \"crate_name\",\n+    };\n+\n+    for (var i = 0; i < args.length; ++i) {\n+        if (args[i] === \"--resource-suffix\"\n+            || args[i] === \"--doc-folder\"\n+            || args[i] === \"--test-folder\"\n+            || args[i] === \"--test-file\"\n+            || args[i] === \"--crate-name\") {\n+            i += 1;\n+            if (i >= args.length) {\n+                console.error(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n+                return null;\n+            }\n+            opts[correspondances[args[i - 1]]] = args[i];\n+        } else if (args[i] === \"--help\") {\n+            showHelp();\n+            process.exit(0);\n+        } else {\n+            console.error(\"Unknown option `\" + args[i] + \"`.\");\n+            console.error(\"Use `--help` to see the list of options\");\n+            return null;\n+        }\n+    }\n+    if (opts[\"doc_folder\"].length < 1) {\n+        console.error(\"Missing `--doc-folder` option.\");\n+    } else if (opts[\"crate_name\"].length < 1) {\n+        console.error(\"Missing `--crate-name` option.\");\n+    } else if (opts[\"test_folder\"].length < 1 && opts[\"test_file\"].length < 1) {\n+        console.error(\"At least one of `--test-folder` or `--test-file` option is required.\");\n+    } else {\n+        return opts;\n+    }\n+    return null;\n+}\n+\n+function checkFile(test_file, opts, loaded, index) {\n+    const test_name = path.basename(test_file, \".js\");\n+\n+    process.stdout.write('Checking \"' + test_name + '\" ... ');\n+    return runChecks(test_file, loaded, index);\n+}\n+\n+function main(argv) {\n+    var opts = parseOptions(argv.slice(2));\n+    if (opts === null) {\n+        return 1;\n+    }\n+\n+    var [loaded, index] = load_files(\n+        opts[\"doc_folder\"],\n+        opts[\"resource_suffix\"],\n+        opts[\"crate_name\"]);\n+    var errors = 0;\n+\n+    if (opts[\"test_file\"].length !== 0) {\n+        errors += checkFile(opts[\"test_file\"], opts, loaded, index);\n+    }\n+    if (opts[\"test_folder\"].length !== 0) {\n+        fs.readdirSync(opts[\"test_folder\"]).forEach(function(file) {\n+            if (!file.endsWith(\".js\")) {\n+                return;\n+            }\n+            errors += checkFile(path.join(opts[\"test_folder\"], file), opts, loaded, index);\n+        });\n     }\n     return errors > 0 ? 1 : 0;\n }"}]}