{"sha": "60a0688185b1412147a5b5f235597bc7618b104a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYTA2ODgxODViMTQxMjE0N2E1YjVmMjM1NTk3YmM3NjE4YjEwNGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-27T09:03:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-15T09:01:03Z"}, "message": "adjust tests for eager pointer checks on deref", "tree": {"sha": "40cd5ef4437cd9bebc22c1ee8f977149ef8c6f26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40cd5ef4437cd9bebc22c1ee8f977149ef8c6f26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60a0688185b1412147a5b5f235597bc7618b104a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60a0688185b1412147a5b5f235597bc7618b104a", "html_url": "https://github.com/rust-lang/rust/commit/60a0688185b1412147a5b5f235597bc7618b104a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60a0688185b1412147a5b5f235597bc7618b104a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "html_url": "https://github.com/rust-lang/rust/commit/1f504ea7be76c55bb3ba8d79599f161d65f5bb51"}], "stats": {"total": 54, "additions": 20, "deletions": 34}, "files": [{"sha": "2a8be87e1251eabb4db5f1b4cae3f33d701b8538", "filename": "tests/compile-fail/deref-invalid-ptr.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60a0688185b1412147a5b5f235597bc7618b104a/tests%2Fcompile-fail%2Fderef-invalid-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a0688185b1412147a5b5f235597bc7618b104a/tests%2Fcompile-fail%2Fderef-invalid-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderef-invalid-ptr.rs?ref=60a0688185b1412147a5b5f235597bc7618b104a", "patch": "@@ -0,0 +1,7 @@\n+// This should fail even without validation.\n+// compile-flags: -Zmiri-disable-validation\n+\n+fn main() {\n+    let x = 2usize as *const u32;\n+    let _y = unsafe { &*x as *const u32 }; //~ ERROR dangling pointer was dereferenced\n+}"}, {"sha": "221e585c5ff38a11c6f326c39580e249ce9b21d6", "filename": "tests/compile-fail/deref-partially-dangling.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60a0688185b1412147a5b5f235597bc7618b104a/tests%2Fcompile-fail%2Fderef-partially-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a0688185b1412147a5b5f235597bc7618b104a/tests%2Fcompile-fail%2Fderef-partially-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderef-partially-dangling.rs?ref=60a0688185b1412147a5b5f235597bc7618b104a", "patch": "@@ -0,0 +1,8 @@\n+// Deref a raw ptr to access a field of a large struct, where the field\n+// is allocated but not the entire struct is.\n+fn main() {\n+    let x = (1, 13);\n+    let xptr = &x as *const _ as *const (i32, i32, i32);\n+    let val = unsafe { (*xptr).1 }; //~ ERROR pointer must be in-bounds at offset 12, but is outside bounds of allocation\n+    assert_eq!(val, 13);\n+}"}, {"sha": "fcf613ace462709f5495473013366306c19be948", "filename": "tests/compile-fail/intptrcast_alignment_check.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/60a0688185b1412147a5b5f235597bc7618b104a/tests%2Fcompile-fail%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a0688185b1412147a5b5f235597bc7618b104a/tests%2Fcompile-fail%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintptrcast_alignment_check.rs?ref=60a0688185b1412147a5b5f235597bc7618b104a", "patch": "@@ -1,18 +1,12 @@\n-// Validation makes this fail in the wrong place\n-// compile-flags: -Zmiri-disable-validation\n-\n // Even with intptrcast and without validation, we want to be *sure* to catch bugs\n // that arise from pointers being insufficiently aligned. The only way to achieve\n // that is not not let programs exploit integer information for alignment, so here\n // we test that this is indeed the case.\n fn main() {\n     let x = &mut [0u8; 3];\n     let base_addr = x as *mut _ as usize;\n-    let u16_ref = unsafe { if base_addr % 2 == 0 {\n-        &mut *(base_addr as *mut u16)\n-    } else {\n-        &mut *((base_addr+1) as *mut u16)\n-    } };\n-    *u16_ref = 2; //~ ERROR tried to access memory with alignment 1, but alignment 2 is required\n+    let base_addr_aligned = if base_addr % 2 == 0 { base_addr } else { base_addr+1 };\n+    let u16_ptr = base_addr_aligned as *mut u16;\n+    unsafe { *u16_ptr = 2; } //~ ERROR tried to access memory with alignment 1, but alignment 2 is required\n     println!(\"{:?}\", x);\n }"}, {"sha": "5a5d79f1582e883c1250625cb272bc680edf2d6f", "filename": "tests/compile-fail/storage_dead_dangling.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60a0688185b1412147a5b5f235597bc7618b104a/tests%2Fcompile-fail%2Fstorage_dead_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a0688185b1412147a5b5f235597bc7618b104a/tests%2Fcompile-fail%2Fstorage_dead_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstorage_dead_dangling.rs?ref=60a0688185b1412147a5b5f235597bc7618b104a", "patch": "@@ -8,8 +8,8 @@ fn fill(v: &mut i32) {\n }\n \n fn evil() {\n-    let v = unsafe { &mut *(LEAK as *mut i32) };\n-    let _x = *v; //~ ERROR dangling pointer was dereferenced\n+    let v = unsafe { &mut *(LEAK as *mut i32) }; //~ ERROR dangling pointer was dereferenced\n+    let _x = *v;\n }\n \n fn main() {"}, {"sha": "e0e7d2afefc52ab255f0e4ce94abb855799cb532", "filename": "tests/run-pass/ref-invalid-ptr.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/tests%2Frun-pass%2Fref-invalid-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f504ea7be76c55bb3ba8d79599f161d65f5bb51/tests%2Frun-pass%2Fref-invalid-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fref-invalid-ptr.rs?ref=1f504ea7be76c55bb3ba8d79599f161d65f5bb51", "patch": "@@ -1,12 +0,0 @@\n-// FIXME: validation disabled because it checks these references too eagerly.\n-// compile-flags: -Zmiri-disable-validation\n-\n-fn main() {\n-    let x = 2usize as *const u32;\n-    // This is not aligned, but we immediately cast it to a raw ptr so that must be ok.\n-    let _y = unsafe { &*x as *const u32 };\n-\n-    let x = 0usize as *const u32;\n-    // This is NULL, but we immediately cast it to a raw ptr so that must be ok.\n-    let _y = unsafe { &*x as *const u32 };\n-}"}, {"sha": "afa364e8564381a910287d92f187474027169ffa", "filename": "tests/run-pass/stacked-borrows/stacked-borrows.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/60a0688185b1412147a5b5f235597bc7618b104a/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60a0688185b1412147a5b5f235597bc7618b104a/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstacked-borrows%2Fstacked-borrows.rs?ref=60a0688185b1412147a5b5f235597bc7618b104a", "patch": "@@ -1,6 +1,5 @@\n // Test various stacked-borrows-related things.\n fn main() {\n-    deref_partially_dangling_raw();\n     read_does_not_invalidate1();\n     read_does_not_invalidate2();\n     ref_raw_int_raw();\n@@ -14,16 +13,6 @@ fn main() {\n     shr_and_raw();\n }\n \n-// Deref a raw ptr to access a field of a large struct, where the field\n-// is allocated but not the entire struct is.\n-// For now, we want to allow this.\n-fn deref_partially_dangling_raw() {\n-    let x = (1, 13);\n-    let xptr = &x as *const _ as *const (i32, i32, i32);\n-    let val = unsafe { (*xptr).1 };\n-    assert_eq!(val, 13);\n-}\n-\n // Make sure that reading from an `&mut` does, like reborrowing to `&`,\n // NOT invalidate other reborrows.\n fn read_does_not_invalidate1() {"}]}