{"sha": "5efb0cbe046127d074fd2c85b7cafb5a4d5aea44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZmIwY2JlMDQ2MTI3ZDA3NGZkMmM4NWI3Y2FmYjVhNGQ1YWVhNDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-07-07T23:12:44Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2017-07-28T13:46:23Z"}, "message": "Add some generator pass/fail tests", "tree": {"sha": "6736bbaf8eac112a672735fcbb0106d1ecea624b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6736bbaf8eac112a672735fcbb0106d1ecea624b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44", "html_url": "https://github.com/rust-lang/rust/commit/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51bb31ad2551c0bf82a556792303ec1de5b76dbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/51bb31ad2551c0bf82a556792303ec1de5b76dbc", "html_url": "https://github.com/rust-lang/rust/commit/51bb31ad2551c0bf82a556792303ec1de5b76dbc"}], "stats": {"total": 508, "additions": 508, "deletions": 0}, "files": [{"sha": "c721ea04acf171a38ccabded25f93d5bc709bad3", "filename": "src/test/compile-fail/generator/borrowing.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fborrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fborrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fborrowing.rs?ref=5efb0cbe046127d074fd2c85b7cafb5a4d5aea44", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::{State, Generator};\n+use std::cell::Cell;\n+\n+fn main() {\n+    let _b = {\n+        let a = 3;\n+        (|| yield &a).resume(())\n+        //~^ ERROR: `a` does not live long enough\n+    };\n+\n+    let _b = {\n+        let a = 3;\n+        || {\n+            let _: () = gen arg; // TODO: shouldn't be needed for inference\n+            yield &a\n+            //~^ ERROR: `a` does not live long enough\n+        }\n+    };\n+}\n+"}, {"sha": "6cfc8dd333ef3515978069967656b1c36dd39293", "filename": "src/test/compile-fail/generator/not-send-sync.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fnot-send-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fnot-send-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgenerator%2Fnot-send-sync.rs?ref=5efb0cbe046127d074fd2c85b7cafb5a4d5aea44", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::{State, Generator};\n+use std::cell::Cell;\n+\n+fn main() {\n+    fn assert_sync<T: Sync>(_: T) {}\n+    fn assert_send<T: Send>(_: T) {}\n+\n+    assert_sync(|| {\n+        //~^ ERROR: Sync` is not satisfied\n+        let a = Cell::new(2);\n+        yield;\n+        let _: () = gen arg;\n+    });\n+\n+    let a = Cell::new(2);\n+    assert_send(|| {\n+        //~^ ERROR: Sync` is not satisfied\n+        drop(&a);\n+        yield;\n+        let _: () = gen arg;\n+    });\n+}"}, {"sha": "911bb96b5827ed75235060817fd610faa6b115d1", "filename": "src/test/run-pass/generator/control-flow.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Frun-pass%2Fgenerator%2Fcontrol-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Frun-pass%2Fgenerator%2Fcontrol-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fcontrol-flow.rs?ref=5efb0cbe046127d074fd2c85b7cafb5a4d5aea44", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::{State, Generator};\n+\n+fn finish<T>(mut amt: usize, mut t: T) -> T::Return\n+    where T: Generator<(), Yield = ()>\n+{\n+    loop {\n+        match t.resume(()) {\n+            State::Yielded(()) => amt = amt.checked_sub(1).unwrap(),\n+            State::Complete(ret) => {\n+                assert_eq!(amt, 0);\n+                return ret\n+            }\n+        }\n+    }\n+\n+}\n+\n+fn main() {\n+    finish(1, || yield);\n+    finish(8, || {\n+        for _ in 0..8 {\n+            yield;\n+        }\n+    });\n+    finish(1, || {\n+        if true {\n+            yield;\n+        } else {\n+        }\n+    });\n+    finish(1, || {\n+        if false {\n+        } else {\n+            yield;\n+        }\n+    });\n+    finish(2, || {\n+        if { yield; false } {\n+            yield;\n+            panic!()\n+        }\n+        yield\n+    });\n+}"}, {"sha": "43d0af7a073489bd36857e8473f9ae2a461b6337", "filename": "src/test/run-pass/generator/drop-env.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fdrop-env.rs?ref=5efb0cbe046127d074fd2c85b7cafb5a4d5aea44", "patch": "@@ -0,0 +1,73 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+\n+static A: AtomicUsize = ATOMIC_USIZE_INIT;\n+\n+struct B;\n+\n+impl Drop for B {\n+    fn drop(&mut self) {\n+        A.fetch_add(1, Ordering::SeqCst);\n+    }\n+}\n+\n+fn main() {\n+    t1();\n+    t2();\n+    t3();\n+}\n+\n+fn t1() {\n+    let b = B;\n+    let mut foo = || {\n+        yield;\n+        drop(b);\n+    };\n+\n+    let n = A.load(Ordering::SeqCst);\n+    drop(foo.resume(()));\n+    assert_eq!(A.load(Ordering::SeqCst), n);\n+    drop(foo);\n+    assert_eq!(A.load(Ordering::SeqCst), n + 1);\n+}\n+\n+fn t2() {\n+    let b = B;\n+    let mut foo = || {\n+        yield b;\n+    };\n+\n+    let n = A.load(Ordering::SeqCst);\n+    drop(foo.resume(()));\n+    assert_eq!(A.load(Ordering::SeqCst), n + 1);\n+    drop(foo);\n+    assert_eq!(A.load(Ordering::SeqCst), n + 1);\n+}\n+\n+fn t3() {\n+    let b = B;\n+    let mut foo = || {\n+        let _: () = gen arg; // TODO: this line should not be necessary\n+        yield;\n+        drop(b);\n+    };\n+\n+    let n = A.load(Ordering::SeqCst);\n+    assert_eq!(A.load(Ordering::SeqCst), n);\n+    drop(foo);\n+    // TODO: we should assert n+1 here, not n\n+    // assert_eq!(A.load(Ordering::SeqCst), n + 1);\n+    assert_eq!(A.load(Ordering::SeqCst), n);\n+}"}, {"sha": "6b9d7da197f10a1e3a3b0aeea395df1bbcc1e954", "filename": "src/test/run-pass/generator/panic-drops.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-drops.rs?ref=5efb0cbe046127d074fd2c85b7cafb5a4d5aea44", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+use std::panic;\n+use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+\n+static A: AtomicUsize = ATOMIC_USIZE_INIT;\n+\n+struct B;\n+\n+impl Drop for B {\n+    fn drop(&mut self) {\n+        A.fetch_add(1, Ordering::SeqCst);\n+    }\n+}\n+\n+fn main() {\n+    let b = B;\n+    let mut foo = || {\n+        if true {\n+            panic!();\n+        }\n+        drop(b);\n+        yield;\n+    };\n+\n+    assert_eq!(A.load(Ordering::SeqCst), 0);\n+    let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n+        foo.resume(())\n+    }));\n+    assert!(res.is_err());\n+    assert_eq!(A.load(Ordering::SeqCst), 1);\n+\n+    let mut foo = || {\n+        if true {\n+            panic!();\n+        }\n+        drop(B);\n+        yield;\n+    };\n+\n+    assert_eq!(A.load(Ordering::SeqCst), 1);\n+    let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n+        foo.resume(())\n+    }));\n+    assert!(res.is_err());\n+    assert_eq!(A.load(Ordering::SeqCst), 1);\n+}"}, {"sha": "7d86d7b6d94ae8c5d38af26b010e619c7bf78f9e", "filename": "src/test/run-pass/generator/panic-safe.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fpanic-safe.rs?ref=5efb0cbe046127d074fd2c85b7cafb5a4d5aea44", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::Generator;\n+use std::panic;\n+\n+fn main() {\n+    let mut foo = || {\n+        if true {\n+            panic!();\n+        }\n+        yield;\n+    };\n+\n+    let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n+        foo.resume(())\n+    }));\n+    assert!(res.is_err());\n+\n+    for _ in 0..10 {\n+        let res = panic::catch_unwind(panic::AssertUnwindSafe(|| {\n+            foo.resume(())\n+        }));\n+        assert!(res.is_err());\n+    }\n+}"}, {"sha": "ca85d2545c8224e2e510bfc0501ce13b41568403", "filename": "src/test/run-pass/generator/resume-after-return.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Frun-pass%2Fgenerator%2Fresume-after-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Frun-pass%2Fgenerator%2Fresume-after-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fresume-after-return.rs?ref=5efb0cbe046127d074fd2c85b7cafb5a4d5aea44", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::{State, Generator};\n+use std::panic;\n+\n+fn main() {\n+    let mut foo = || {\n+        if true {\n+            return\n+        }\n+        yield;\n+    };\n+\n+    match foo.resume(()) {\n+        State::Complete(()) => {}\n+        s => panic!(\"bad state: {:?}\", s),\n+    }\n+\n+    match panic::catch_unwind(move || foo.resume(())) {\n+        Ok(_) => panic!(\"generator successfully resumed\"),\n+        Err(_) => {}\n+    }\n+}"}, {"sha": "daa32aa3213e0010097f48d32bbe883d6a10ca38", "filename": "src/test/run-pass/generator/smoke.rs", "status": "added", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Frun-pass%2Fgenerator%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5efb0cbe046127d074fd2c85b7cafb5a4d5aea44/src%2Ftest%2Frun-pass%2Fgenerator%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fsmoke.rs?ref=5efb0cbe046127d074fd2c85b7cafb5a4d5aea44", "patch": "@@ -0,0 +1,187 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::ops::{State, Generator};\n+use std::thread;\n+\n+#[test]\n+fn simple() {\n+    let mut foo = || {\n+        if false {\n+            yield;\n+        }\n+    };\n+\n+    match foo.resume(()) {\n+        State::Complete(()) => {}\n+        s => panic!(\"bad state: {:?}\", s),\n+    }\n+}\n+\n+#[test]\n+fn return_capture() {\n+    let a = String::from(\"foo\");\n+    let mut foo = || {\n+        if false {\n+            yield;\n+        }\n+        a\n+    };\n+\n+    match foo.resume(()) {\n+        State::Complete(ref s) if *s == \"foo\" => {}\n+        s => panic!(\"bad state: {:?}\", s),\n+    }\n+}\n+\n+#[test]\n+fn simple_yield() {\n+    let mut foo = || {\n+        yield;\n+    };\n+\n+    match foo.resume(()) {\n+        State::Yielded(()) => {}\n+        s => panic!(\"bad state: {:?}\", s),\n+    }\n+    match foo.resume(()) {\n+        State::Complete(()) => {}\n+        s => panic!(\"bad state: {:?}\", s),\n+    }\n+}\n+\n+#[test]\n+fn yield_capture() {\n+    let b = String::from(\"foo\");\n+    let mut foo = || {\n+        yield b;\n+    };\n+\n+    match foo.resume(()) {\n+        State::Yielded(ref s) if *s == \"foo\" => {}\n+        s => panic!(\"bad state: {:?}\", s),\n+    }\n+    match foo.resume(()) {\n+        State::Complete(()) => {}\n+        s => panic!(\"bad state: {:?}\", s),\n+    }\n+}\n+\n+#[test]\n+fn simple_yield_value() {\n+    let mut foo = || {\n+        yield String::from(\"bar\");\n+        return String::from(\"foo\")\n+    };\n+\n+    match foo.resume(()) {\n+        State::Yielded(ref s) if *s == \"bar\" => {}\n+        s => panic!(\"bad state: {:?}\", s),\n+    }\n+    match foo.resume(()) {\n+        State::Complete(ref s) if *s == \"foo\" => {}\n+        s => panic!(\"bad state: {:?}\", s),\n+    }\n+}\n+\n+#[test]\n+fn return_after_yield() {\n+    let a = String::from(\"foo\");\n+    let mut foo = || {\n+        yield;\n+        return a\n+    };\n+\n+    match foo.resume(()) {\n+        State::Yielded(()) => {}\n+        s => panic!(\"bad state: {:?}\", s),\n+    }\n+    match foo.resume(()) {\n+        State::Complete(ref s) if *s == \"foo\" => {}\n+        s => panic!(\"bad state: {:?}\", s),\n+    }\n+}\n+\n+#[test]\n+fn send_and_sync() {\n+    assert_send_sync(|| {\n+        let _: () = gen arg;\n+        yield\n+    });\n+    assert_send_sync(|| {\n+        let _: () = gen arg;\n+        yield String::from(\"foo\");\n+    });\n+    assert_send_sync(|| {\n+        let _: () = gen arg;\n+        yield;\n+        return String::from(\"foo\");\n+    });\n+    let a = 3;\n+    assert_send_sync(|| {\n+        let _: () = gen arg;\n+        yield a;\n+        return\n+    });\n+    let a = 3;\n+    assert_send_sync(move || {\n+        let _: () = gen arg;\n+        yield a;\n+        return\n+    });\n+    let a = String::from(\"a\");\n+    assert_send_sync(|| {\n+        let _: () = gen arg;\n+        yield ;\n+        drop(a);\n+        return\n+    });\n+    let a = String::from(\"a\");\n+    assert_send_sync(move || {\n+        let _: () = gen arg;\n+        yield ;\n+        drop(a);\n+        return\n+    });\n+\n+    fn assert_send_sync<T: Send + Sync>(_: T) {}\n+}\n+\n+#[test]\n+fn send_over_threads() {\n+    let mut foo = || { yield };\n+    thread::spawn(move || {\n+        match foo.resume(()) {\n+            State::Yielded(()) => {}\n+            s => panic!(\"bad state: {:?}\", s),\n+        }\n+        match foo.resume(()) {\n+            State::Complete(()) => {}\n+            s => panic!(\"bad state: {:?}\", s),\n+        }\n+    }).join().unwrap();\n+\n+    let a = String::from(\"a\");\n+    let mut foo = || { yield a };\n+    thread::spawn(move || {\n+        match foo.resume(()) {\n+            State::Yielded(ref s) if *s == \"a\" => {}\n+            s => panic!(\"bad state: {:?}\", s),\n+        }\n+        match foo.resume(()) {\n+            State::Complete(()) => {}\n+            s => panic!(\"bad state: {:?}\", s),\n+        }\n+    }).join().unwrap();\n+}"}]}