{"sha": "296f9524f2a27458607529db3f785dc732d79136", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NmY5NTI0ZjJhMjc0NTg2MDc1MjlkYjNmNzg1ZGM3MzJkNzkxMzY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-05-10T16:35:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-10T16:35:23Z"}, "message": "Rollup merge of #50532 - michaelwoerister:lockless-cnum-map, r=Zoxc\n\nDon't use Lock for heavily accessed CrateMetadata::cnum_map.\n\nThe `cnum_map` in `CrateMetadata` is used for two things:\n1. to map `CrateNums` between crates (used a lot during decoding)\n2. to construct the (reverse) post order of the crate graph\n\nFor the second case, we need to modify the map after the fact, which is why the map is wrapped in a `Lock`. This is bad for the first case, which does not need the modification and does lots of small reads from the map.\n\nThis PR splits case (2) out into a separate `dependencies` field. This allows to make the `cnum_map` immutable (and shifts the interior mutability to a less busy data structure).\n\nFixes #50502\n\nr? @Zoxc", "tree": {"sha": "29ee18bf570f39e100414752abac3d75c2723ff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29ee18bf570f39e100414752abac3d75c2723ff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/296f9524f2a27458607529db3f785dc732d79136", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa9HTLCRBK7hj4Ov3rIwAAdHIIAKMXFDpkgfoxcjcuyhxfIOR0\n1vNeAcSHApqcZIwfVHEzGurBYOVb5eDfohwXiLwp+ztlLwJ4162TUvgSBqZ/8aTy\nyYcmRo2OVQylNqYSWC9XMYO5gEh/ANYLQkatYFGZkbvBbNNwpIn7+yFSHawf/RSf\n4J60bN27m1GPyp5viYUMf1HZphjH7O05NsaORkSzQ2CdIYS4LuH3SQ7Yc/Smu+UP\nsHkR5CVpI7hQWDSeZFABNbBFgTIYOZX+PcbPOmyjGk/iwegrrLbwJ+vlUudCyIgd\nGSWem1R1VPMGZmcTZeqVKY8gaJyfWNQkawLReErnkbBsmM/S/Do9+2XEbs51YIc=\n=hhtt\n-----END PGP SIGNATURE-----\n", "payload": "tree 29ee18bf570f39e100414752abac3d75c2723ff9\nparent bb130ce3cecec3079f78f50c79dd4b159fbfffa6\nparent ea4942835d607ffa87eb7f50552e6cf023d27403\nauthor Alex Crichton <alex@alexcrichton.com> 1525970123 -0500\ncommitter GitHub <noreply@github.com> 1525970123 -0500\n\nRollup merge of #50532 - michaelwoerister:lockless-cnum-map, r=Zoxc\n\nDon't use Lock for heavily accessed CrateMetadata::cnum_map.\n\nThe `cnum_map` in `CrateMetadata` is used for two things:\n1. to map `CrateNums` between crates (used a lot during decoding)\n2. to construct the (reverse) post order of the crate graph\n\nFor the second case, we need to modify the map after the fact, which is why the map is wrapped in a `Lock`. This is bad for the first case, which does not need the modification and does lots of small reads from the map.\n\nThis PR splits case (2) out into a separate `dependencies` field. This allows to make the `cnum_map` immutable (and shifts the interior mutability to a less busy data structure).\n\nFixes #50502\n\nr? @Zoxc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/296f9524f2a27458607529db3f785dc732d79136", "html_url": "https://github.com/rust-lang/rust/commit/296f9524f2a27458607529db3f785dc732d79136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/296f9524f2a27458607529db3f785dc732d79136/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb130ce3cecec3079f78f50c79dd4b159fbfffa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb130ce3cecec3079f78f50c79dd4b159fbfffa6", "html_url": "https://github.com/rust-lang/rust/commit/bb130ce3cecec3079f78f50c79dd4b159fbfffa6"}, {"sha": "ea4942835d607ffa87eb7f50552e6cf023d27403", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea4942835d607ffa87eb7f50552e6cf023d27403", "html_url": "https://github.com/rust-lang/rust/commit/ea4942835d607ffa87eb7f50552e6cf023d27403"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "7efcedd73eddff2ae7c4aa2a6c3b5d15b2106201", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/296f9524f2a27458607529db3f785dc732d79136/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296f9524f2a27458607529db3f785dc732d79136/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=296f9524f2a27458607529db3f785dc732d79136", "patch": "@@ -219,6 +219,8 @@ impl<'a> CrateLoader<'a> {\n \n         let cnum_map = self.resolve_crate_deps(root, &crate_root, &metadata, cnum, span, dep_kind);\n \n+        let dependencies: Vec<CrateNum> = cnum_map.iter().cloned().collect();\n+\n         let def_path_table = record_time(&self.sess.perf_stats.decode_def_path_tables_time, || {\n             crate_root.def_path_table.decode((&metadata, self.sess))\n         });\n@@ -239,8 +241,9 @@ impl<'a> CrateLoader<'a> {\n             }),\n             root: crate_root,\n             blob: metadata,\n-            cnum_map: Lock::new(cnum_map),\n+            cnum_map,\n             cnum,\n+            dependencies: Lock::new(dependencies),\n             codemap_import_info: RwLock::new(vec![]),\n             attribute_cache: Lock::new([Vec::new(), Vec::new()]),\n             dep_kind: Lock::new(dep_kind),\n@@ -392,7 +395,7 @@ impl<'a> CrateLoader<'a> {\n \n         // Propagate the extern crate info to dependencies.\n         extern_crate.direct = false;\n-        for &dep_cnum in cmeta.cnum_map.borrow().iter() {\n+        for &dep_cnum in cmeta.dependencies.borrow().iter() {\n             self.update_extern_crate(dep_cnum, extern_crate, visited);\n         }\n     }\n@@ -1040,7 +1043,7 @@ impl<'a> CrateLoader<'a> {\n             }\n \n             info!(\"injecting a dep from {} to {}\", cnum, krate);\n-            data.cnum_map.borrow_mut().push(krate);\n+            data.dependencies.borrow_mut().push(krate);\n         });\n     }\n }"}, {"sha": "f4d4bd3589398825b69179f6a47b124caea3b2ef", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/296f9524f2a27458607529db3f785dc732d79136/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296f9524f2a27458607529db3f785dc732d79136/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=296f9524f2a27458607529db3f785dc732d79136", "patch": "@@ -64,8 +64,9 @@ pub struct CrateMetadata {\n     pub extern_crate: Lock<Option<ExternCrate>>,\n \n     pub blob: MetadataBlob,\n-    pub cnum_map: Lock<CrateNumMap>,\n+    pub cnum_map: CrateNumMap,\n     pub cnum: CrateNum,\n+    pub dependencies: Lock<Vec<CrateNum>>,\n     pub codemap_import_info: RwLock<Vec<ImportedFileMap>>,\n     pub attribute_cache: Lock<[Vec<Option<Lrc<[ast::Attribute]>>>; 2]>,\n \n@@ -144,7 +145,7 @@ impl CStore {\n         }\n \n         let data = self.get_crate_data(krate);\n-        for &dep in data.cnum_map.borrow().iter() {\n+        for &dep in data.dependencies.borrow().iter() {\n             if dep != krate {\n                 self.push_dependencies_in_postorder(ordering, dep);\n             }"}, {"sha": "53d1ff156274e796c855541d2aeef35699ec8d94", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/296f9524f2a27458607529db3f785dc732d79136/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296f9524f2a27458607529db3f785dc732d79136/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=296f9524f2a27458607529db3f785dc732d79136", "patch": "@@ -246,7 +246,7 @@ impl<'a, 'tcx: 'a> TyDecoder<'a, 'tcx> for DecodeContext<'a, 'tcx> {\n         if cnum == LOCAL_CRATE {\n             self.cdata().cnum\n         } else {\n-            self.cdata().cnum_map.borrow()[cnum]\n+            self.cdata().cnum_map[cnum]\n         }\n     }\n }\n@@ -932,7 +932,7 @@ impl<'a, 'tcx> CrateMetadata {\n     // Translate a DefId from the current compilation environment to a DefId\n     // for an external crate.\n     fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {\n-        for (local, &global) in self.cnum_map.borrow().iter_enumerated() {\n+        for (local, &global) in self.cnum_map.iter_enumerated() {\n             if global == did.krate {\n                 return Some(DefId {\n                     krate: local,\n@@ -1007,7 +1007,7 @@ impl<'a, 'tcx> CrateMetadata {\n             .enumerate()\n             .flat_map(|(i, link)| {\n                 let cnum = CrateNum::new(i + 1);\n-                link.map(|link| (self.cnum_map.borrow()[cnum], link))\n+                link.map(|link| (self.cnum_map[cnum], link))\n             })\n             .collect()\n     }"}]}