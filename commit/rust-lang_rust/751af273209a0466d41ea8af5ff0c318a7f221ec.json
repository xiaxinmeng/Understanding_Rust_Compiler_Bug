{"sha": "751af273209a0466d41ea8af5ff0c318a7f221ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MWFmMjczMjA5YTA0NjZkNDFlYThhZjVmZjBjMzE4YTdmMjIxZWM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-31T23:28:43Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-01T22:59:01Z"}, "message": "libtest: Unconfigure tests during normal build", "tree": {"sha": "1722b8aefeaa9dc7d6ae81413d765e09b55f36c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1722b8aefeaa9dc7d6ae81413d765e09b55f36c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/751af273209a0466d41ea8af5ff0c318a7f221ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/751af273209a0466d41ea8af5ff0c318a7f221ec", "html_url": "https://github.com/rust-lang/rust/commit/751af273209a0466d41ea8af5ff0c318a7f221ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/751af273209a0466d41ea8af5ff0c318a7f221ec/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77eacaeabd834184761eb690650ccf6b078bdf9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/77eacaeabd834184761eb690650ccf6b078bdf9e", "html_url": "https://github.com/rust-lang/rust/commit/77eacaeabd834184761eb690650ccf6b078bdf9e"}], "stats": {"total": 185, "additions": 89, "deletions": 96}, "files": [{"sha": "b36c5be4c079555960fd43e7e15dcbc28133be09", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 15, "deletions": 59, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/751af273209a0466d41ea8af5ff0c318a7f221ec/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751af273209a0466d41ea8af5ff0c318a7f221ec/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=751af273209a0466d41ea8af5ff0c318a7f221ec", "patch": "@@ -70,6 +70,9 @@ use std::sync::{Arc, Mutex};\n use std::thread;\n use std::time::{Duration, Instant};\n \n+#[cfg(test)]\n+mod tests;\n+\n const TEST_WARN_TIMEOUT_S: u64 = 60;\n const QUIET_MODE_MAX_COLUMN: usize = 100; // insert a '\\n' after 100 tests in quiet mode\n \n@@ -495,18 +498,18 @@ environment variable to a value other than \"0\". Logging is not captured by defau\n \n Test Attributes:\n \n-    #[test]        - Indicates a function is a test to be run. This function\n-                     takes no arguments.\n-    #[bench]       - Indicates a function is a benchmark to be run. This\n-                     function takes one argument (test::Bencher).\n-    #[should_panic] - This function (also labeled with #[test]) will only pass if\n-                     the code causes a panic (an assertion failure or panic!)\n-                     A message may be provided, which the failure string must\n-                     contain: #[should_panic(expected = \"foo\")].\n-    #[ignore]      - When applied to a function which is already attributed as a\n-                     test, then the test runner will ignore these tests during\n-                     normal test runs. Running with --ignored or --include-ignored will run\n-                     these tests.\"#,\n+    `#[test]`        - Indicates a function is a test to be run. This function\n+                       takes no arguments.\n+    `#[bench]`       - Indicates a function is a benchmark to be run. This\n+                       function takes one argument (test::Bencher).\n+    `#[should_panic]` - This function (also labeled with `#[test]`) will only pass if\n+                        the code causes a panic (an assertion failure or panic!)\n+                        A message may be provided, which the failure string must\n+                        contain: #[should_panic(expected = \"foo\")].\n+    `#[ignore]`       - When applied to a function which is already attributed as a\n+                        test, then the test runner will ignore these tests during\n+                        normal test runs. Running with --ignored or --include-ignored will run\n+                        these tests.\"#,\n         usage = options.usage(&message)\n     );\n }\n@@ -974,50 +977,6 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n     return out.write_run_finish(&st);\n }\n \n-#[test]\n-fn should_sort_failures_before_printing_them() {\n-    let test_a = TestDesc {\n-        name: StaticTestName(\"a\"),\n-        ignore: false,\n-        should_panic: ShouldPanic::No,\n-        allow_fail: false,\n-    };\n-\n-    let test_b = TestDesc {\n-        name: StaticTestName(\"b\"),\n-        ignore: false,\n-        should_panic: ShouldPanic::No,\n-        allow_fail: false,\n-    };\n-\n-    let mut out = PrettyFormatter::new(Raw(Vec::new()), false, 10, false);\n-\n-    let st = ConsoleTestState {\n-        log_out: None,\n-        total: 0,\n-        passed: 0,\n-        failed: 0,\n-        ignored: 0,\n-        allowed_fail: 0,\n-        filtered_out: 0,\n-        measured: 0,\n-        metrics: MetricMap::new(),\n-        failures: vec![(test_b, Vec::new()), (test_a, Vec::new())],\n-        options: Options::new(),\n-        not_failures: Vec::new(),\n-    };\n-\n-    out.write_failures(&st).unwrap();\n-    let s = match out.output_location() {\n-        &Raw(ref m) => String::from_utf8_lossy(&m[..]),\n-        &Pretty(_) => unreachable!(),\n-    };\n-\n-    let apos = s.find(\"a\").unwrap();\n-    let bpos = s.find(\"b\").unwrap();\n-    assert!(apos < bpos);\n-}\n-\n fn use_color(opts: &TestOpts) -> bool {\n     match opts.color {\n         AutoColor => !opts.nocapture && stdout_isatty(),\n@@ -1775,6 +1734,3 @@ pub mod bench {\n         bs.bench(f);\n     }\n }\n-\n-#[cfg(test)]\n-mod tests;"}, {"sha": "6577ec8ad2391923dd918e45a294cedfa1346735", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/751af273209a0466d41ea8af5ff0c318a7f221ec/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751af273209a0466d41ea8af5ff0c318a7f221ec/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=751af273209a0466d41ea8af5ff0c318a7f221ec", "patch": "@@ -4,6 +4,9 @@\n use std::cmp::Ordering::{self, Equal, Greater, Less};\n use std::mem;\n \n+#[cfg(test)]\n+mod tests;\n+\n fn local_cmp(x: f64, y: f64) -> Ordering {\n     // arbitrarily decide that NaNs are larger than everything.\n     if y.is_nan() {\n@@ -314,34 +317,3 @@ pub fn winsorize(samples: &mut [f64], pct: f64) {\n         }\n     }\n }\n-\n-// Test vectors generated from R, using the script src/etc/stat-test-vectors.r.\n-\n-#[cfg(test)]\n-mod tests;\n-\n-#[cfg(test)]\n-mod bench {\n-    extern crate test;\n-    use self::test::Bencher;\n-    use crate::stats::Stats;\n-\n-    #[bench]\n-    pub fn sum_three_items(b: &mut Bencher) {\n-        b.iter(|| {\n-            [1e20f64, 1.5f64, -1e20f64].sum();\n-        })\n-    }\n-    #[bench]\n-    pub fn sum_many_f64(b: &mut Bencher) {\n-        let nums = [-1e30f64, 1e60, 1e30, 1.0, -1e60];\n-        let v = (0..500).map(|i| nums[i % 5]).collect::<Vec<_>>();\n-\n-        b.iter(|| {\n-            v.sum();\n-        })\n-    }\n-\n-    #[bench]\n-    pub fn no_iter(_: &mut Bencher) {}\n-}"}, {"sha": "7d1d635186fba1b3f3a25d3ac41eb5709e1c1347", "filename": "src/libtest/stats/tests.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/751af273209a0466d41ea8af5ff0c318a7f221ec/src%2Flibtest%2Fstats%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751af273209a0466d41ea8af5ff0c318a7f221ec/src%2Flibtest%2Fstats%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats%2Ftests.rs?ref=751af273209a0466d41ea8af5ff0c318a7f221ec", "patch": "@@ -1,8 +1,12 @@\n-use crate::stats::Stats;\n-use crate::stats::Summary;\n+use super::*;\n+\n+extern crate test;\n use std::f64;\n use std::io::prelude::*;\n use std::io;\n+use self::test::Bencher;\n+\n+// Test vectors generated from R, using the script src/etc/stat-test-vectors.r.\n \n macro_rules! assert_approx_eq {\n     ($a: expr, $b: expr) => {{\n@@ -572,3 +576,22 @@ fn test_sum_f64s() {\n fn test_sum_f64_between_ints_that_sum_to_0() {\n     assert_eq!([1e30f64, 1.2f64, -1e30f64].sum(), 1.2);\n }\n+\n+#[bench]\n+pub fn sum_three_items(b: &mut Bencher) {\n+    b.iter(|| {\n+        [1e20f64, 1.5f64, -1e20f64].sum();\n+    })\n+}\n+#[bench]\n+pub fn sum_many_f64(b: &mut Bencher) {\n+    let nums = [-1e30f64, 1e60, 1e30, 1.0, -1e60];\n+    let v = (0..500).map(|i| nums[i % 5]).collect::<Vec<_>>();\n+\n+    b.iter(|| {\n+        v.sum();\n+    })\n+}\n+\n+#[bench]\n+pub fn no_iter(_: &mut Bencher) {}"}, {"sha": "05b38f17e2b961394ee3201feee2bb883afec8d5", "filename": "src/libtest/tests.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/751af273209a0466d41ea8af5ff0c318a7f221ec/src%2Flibtest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751af273209a0466d41ea8af5ff0c318a7f221ec/src%2Flibtest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftests.rs?ref=751af273209a0466d41ea8af5ff0c318a7f221ec", "patch": "@@ -1,11 +1,10 @@\n-use crate::bench;\n+use super::*;\n+\n use crate::test::{\n     filter_tests, parse_opts, run_test, DynTestFn, DynTestName, MetricMap, RunIgnored,\n     ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts, TrFailed, TrFailedMsg,\n     TrIgnored, TrOk,\n };\n-use crate::Bencher;\n-use crate::Concurrent;\n use std::sync::mpsc::channel;\n \n fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n@@ -451,3 +450,47 @@ pub fn test_bench_iter() {\n     crate::bench::benchmark(desc, tx, true, f);\n     rx.recv().unwrap();\n }\n+\n+#[test]\n+fn should_sort_failures_before_printing_them() {\n+    let test_a = TestDesc {\n+        name: StaticTestName(\"a\"),\n+        ignore: false,\n+        should_panic: ShouldPanic::No,\n+        allow_fail: false,\n+    };\n+\n+    let test_b = TestDesc {\n+        name: StaticTestName(\"b\"),\n+        ignore: false,\n+        should_panic: ShouldPanic::No,\n+        allow_fail: false,\n+    };\n+\n+    let mut out = PrettyFormatter::new(Raw(Vec::new()), false, 10, false);\n+\n+    let st = ConsoleTestState {\n+        log_out: None,\n+        total: 0,\n+        passed: 0,\n+        failed: 0,\n+        ignored: 0,\n+        allowed_fail: 0,\n+        filtered_out: 0,\n+        measured: 0,\n+        metrics: MetricMap::new(),\n+        failures: vec![(test_b, Vec::new()), (test_a, Vec::new())],\n+        options: Options::new(),\n+        not_failures: Vec::new(),\n+    };\n+\n+    out.write_failures(&st).unwrap();\n+    let s = match out.output_location() {\n+        &Raw(ref m) => String::from_utf8_lossy(&m[..]),\n+        &Pretty(_) => unreachable!(),\n+    };\n+\n+    let apos = s.find(\"a\").unwrap();\n+    let bpos = s.find(\"b\").unwrap();\n+    assert!(apos < bpos);\n+}"}, {"sha": "06d26a46fb8c484ed8aeaeb485a296981ca10f56", "filename": "src/tools/tidy/src/unit_tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/751af273209a0466d41ea8af5ff0c318a7f221ec/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/751af273209a0466d41ea8af5ff0c318a7f221ec/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs?ref=751af273209a0466d41ea8af5ff0c318a7f221ec", "patch": "@@ -39,7 +39,6 @@ pub fn check(root_path: &Path, bad: &mut bool) {\n         \"libsyntax\",\n         \"libsyntax_pos\",\n         \"libterm/terminfo\",\n-        \"libtest\",\n     ];\n \n     let mut skip = |path: &Path| {"}]}