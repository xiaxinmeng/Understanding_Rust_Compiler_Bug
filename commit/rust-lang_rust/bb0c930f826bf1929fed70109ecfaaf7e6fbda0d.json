{"sha": "bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMGM5MzBmODI2YmYxOTI5ZmVkNzAxMDllY2ZhYWY3ZTZmYmRhMGQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-10-25T13:15:33Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-04T02:52:42Z"}, "message": "Migrate resolver over to internal lint buffer", "tree": {"sha": "51513d562fd415422a47e21875b152794151e2a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51513d562fd415422a47e21875b152794151e2a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "html_url": "https://github.com/rust-lang/rust/commit/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bd6b489143879ab5775d7a92627687c4b9b1857", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bd6b489143879ab5775d7a92627687c4b9b1857", "html_url": "https://github.com/rust-lang/rust/commit/1bd6b489143879ab5775d7a92627687c4b9b1857"}], "stats": {"total": 112, "additions": 73, "deletions": 39}, "files": [{"sha": "42f33740b23e1c7a3b8df4940739003b16c49490", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "patch": "@@ -646,6 +646,27 @@ impl LintBuffer {\n     fn take(&mut self, id: ast::NodeId) -> Vec<BufferedEarlyLint> {\n         self.map.remove(&id).unwrap_or_default()\n     }\n+\n+    pub fn buffer_lint<S: Into<MultiSpan>>(\n+        &mut self,\n+        lint: &'static Lint,\n+        id: ast::NodeId,\n+        sp: S,\n+        msg: &str,\n+    ) {\n+        self.add_lint(lint, id, sp.into(), msg, BuiltinLintDiagnostics::Normal)\n+    }\n+\n+    pub fn buffer_lint_with_diagnostic<S: Into<MultiSpan>>(\n+        &mut self,\n+        lint: &'static Lint,\n+        id: ast::NodeId,\n+        sp: S,\n+        msg: &str,\n+        diagnostic: BuiltinLintDiagnostics,\n+    ) {\n+        self.add_lint(lint, id, sp.into(), msg, diagnostic)\n+    }\n }\n \n pub fn struct_lint_level<'a>(sess: &'a Session,"}, {"sha": "93d0627ac6e401415c58d8a8e539c990121ea7dd", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "patch": "@@ -586,7 +586,7 @@ pub fn rustc_deprecation_message(depr: &RustcDeprecation, path: &str) -> (String\n }\n \n pub fn early_report_deprecation(\n-    sess: &Session,\n+    lint_buffer: &'a mut lint::LintBuffer,\n     message: &str,\n     suggestion: Option<Symbol>,\n     lint: &'static Lint,\n@@ -597,7 +597,7 @@ pub fn early_report_deprecation(\n     }\n \n     let diag = BuiltinLintDiagnostics::DeprecatedMacro(suggestion, span);\n-    sess.buffer_lint_with_diagnostic(lint, CRATE_NODE_ID, span, message, diag);\n+    lint_buffer.buffer_lint_with_diagnostic(lint, CRATE_NODE_ID, span, message, diag);\n }\n \n fn late_report_deprecation("}, {"sha": "a5b00568b53f5114b8e0841189c268a45788a669", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "patch": "@@ -270,12 +270,14 @@ fn configure_and_expand_inner<'a>(\n             rustc_lint::BuiltinCombinedPreExpansionLintPass::new());\n     });\n \n+    let lint_buffer = lint::LintBuffer::default();\n     let mut resolver = Resolver::new(\n         sess,\n         &krate,\n         crate_name,\n         metadata_loader,\n         &resolver_arenas,\n+        lint_buffer,\n     );\n     syntax_ext::register_builtin_macros(&mut resolver, sess.edition());\n \n@@ -366,7 +368,7 @@ fn configure_and_expand_inner<'a>(\n         for span in missing_fragment_specifiers {\n             let lint = lint::builtin::MISSING_FRAGMENT_SPECIFIER;\n             let msg = \"missing fragment specifier\";\n-            sess.buffer_lint(lint, ast::CRATE_NODE_ID, span, msg);\n+            resolver.lint_buffer.buffer_lint(lint, ast::CRATE_NODE_ID, span, msg);\n         }\n         if cfg!(windows) {\n             env::set_var(\"PATH\", &old_path);\n@@ -395,7 +397,7 @@ fn configure_and_expand_inner<'a>(\n     }\n \n     let has_proc_macro_decls = time(sess, \"AST validation\", || {\n-        ast_validation::check_crate(sess, &krate)\n+        ast_validation::check_crate(sess, &krate, &mut resolver.lint_buffer)\n     });\n \n \n@@ -464,7 +466,7 @@ fn configure_and_expand_inner<'a>(\n         info!(\"{} parse sess buffered_lints\", buffered_lints.len());\n         for BufferedEarlyLint{id, span, msg, lint_id} in buffered_lints.drain(..) {\n             let lint = lint::Lint::from_parser_lint_id(lint_id);\n-            sess.buffer_lint(lint, id, span, &msg);\n+            resolver.lint_buffer.buffer_lint(lint, id, span, &msg);\n         }\n     });\n "}, {"sha": "e625334040e0ab31f55fe28175f9902cd2137c4f", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "patch": "@@ -73,6 +73,8 @@ struct AstValidator<'a> {\n     /// these booleans.\n     warning_period_57979_didnt_record_next_impl_trait: bool,\n     warning_period_57979_impl_trait_in_proj: bool,\n+\n+    lint_buffer: &'a mut lint::LintBuffer,\n }\n \n impl<'a> AstValidator<'a> {\n@@ -229,7 +231,7 @@ impl<'a> AstValidator<'a> {\n         err.emit();\n     }\n \n-    fn check_decl_no_pat<ReportFn: Fn(Span, bool)>(&self, decl: &FnDecl, report_err: ReportFn) {\n+    fn check_decl_no_pat<F: FnMut(Span, bool)>(decl: &FnDecl, mut report_err: F) {\n         for arg in &decl.inputs {\n             match arg.pat.kind {\n                 PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), _, None) |\n@@ -460,7 +462,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         match ty.kind {\n             TyKind::BareFn(ref bfty) => {\n                 self.check_fn_decl(&bfty.decl);\n-                self.check_decl_no_pat(&bfty.decl, |span, _| {\n+                Self::check_decl_no_pat(&bfty.decl, |span, _| {\n                     struct_span_err!(self.session, span, E0561,\n                                      \"patterns aren't allowed in function pointer types\").emit();\n                 });\n@@ -483,7 +485,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             TyKind::ImplTrait(_, ref bounds) => {\n                 if self.is_impl_trait_banned {\n                     if self.warning_period_57979_impl_trait_in_proj {\n-                        self.session.buffer_lint(\n+                        self.lint_buffer.buffer_lint(\n                             NESTED_IMPL_TRAIT, ty.id, ty.span,\n                             \"`impl Trait` is not allowed in path parameters\");\n                     } else {\n@@ -494,7 +496,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n                 if let Some(outer_impl_trait) = self.outer_impl_trait {\n                     if outer_impl_trait.should_warn_instead_of_error() {\n-                        self.session.buffer_lint_with_diagnostic(\n+                        self.lint_buffer.buffer_lint_with_diagnostic(\n                             NESTED_IMPL_TRAIT, ty.id, ty.span,\n                             \"nested `impl Trait` is not allowed\",\n                             BuiltinLintDiagnostics::NestedImplTrait {\n@@ -634,9 +636,9 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         self.check_trait_fn_not_async(trait_item.span, sig.header.asyncness.node);\n                         self.check_trait_fn_not_const(sig.header.constness);\n                         if block.is_none() {\n-                            self.check_decl_no_pat(&sig.decl, |span, mut_ident| {\n+                            Self::check_decl_no_pat(&sig.decl, |span, mut_ident| {\n                                 if mut_ident {\n-                                    self.session.buffer_lint(\n+                                    self.lint_buffer.buffer_lint(\n                                         lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY,\n                                         trait_item.id, span,\n                                         \"patterns aren't allowed in methods without bodies\");\n@@ -655,7 +657,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 if attr::contains_name(&item.attrs, sym::warn_directory_ownership) {\n                     let lint = lint::builtin::LEGACY_DIRECTORY_OWNERSHIP;\n                     let msg = \"cannot declare a new module at this location\";\n-                    self.session.buffer_lint(lint, item.id, item.span, msg);\n+                    self.lint_buffer.buffer_lint(lint, item.id, item.span, msg);\n                 }\n             }\n             ItemKind::Union(ref vdata, _) => {\n@@ -686,7 +688,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         match fi.kind {\n             ForeignItemKind::Fn(ref decl, _) => {\n                 self.check_fn_decl(decl);\n-                self.check_decl_no_pat(decl, |span, _| {\n+                Self::check_decl_no_pat(decl, |span, _| {\n                     struct_span_err!(self.session, span, E0130,\n                                      \"patterns aren't allowed in foreign function declarations\")\n                         .span_label(span, \"pattern not allowed in foreign function\").emit();\n@@ -840,7 +842,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n }\n \n-pub fn check_crate(session: &Session, krate: &Crate) -> bool {\n+pub fn check_crate(session: &Session, krate: &Crate, lints: &mut lint::LintBuffer) -> bool {\n     let mut validator = AstValidator {\n         session,\n         has_proc_macro_decls: false,\n@@ -849,6 +851,7 @@ pub fn check_crate(session: &Session, krate: &Crate) -> bool {\n         is_assoc_ty_bound_banned: false,\n         warning_period_57979_didnt_record_next_impl_trait: false,\n         warning_period_57979_impl_trait_in_proj: false,\n+        lint_buffer: lints,\n     };\n     visit::walk_crate(&mut validator, krate);\n "}, {"sha": "44b7a9fa047c27499896aad1b81f3ed726ba1d06", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "patch": "@@ -232,7 +232,7 @@ impl Resolver<'_> {\n                     directive.span.is_dummy() => {\n                     if let ImportDirectiveSubclass::MacroUse = directive.subclass {\n                         if !directive.span.is_dummy() {\n-                            self.session.buffer_lint(\n+                            self.lint_buffer.buffer_lint(\n                                 lint::builtin::MACRO_USE_EXTERN_CRATE,\n                                 directive.id,\n                                 directive.span,\n@@ -250,7 +250,7 @@ impl Resolver<'_> {\n                 ImportDirectiveSubclass::MacroUse => {\n                     let lint = lint::builtin::UNUSED_IMPORTS;\n                     let msg = \"unused `#[macro_use]` import\";\n-                    self.session.buffer_lint(lint, directive.id, directive.span, msg);\n+                    self.lint_buffer.buffer_lint(lint, directive.id, directive.span, msg);\n                 }\n                 _ => {}\n             }\n@@ -312,7 +312,7 @@ impl Resolver<'_> {\n                 \"remove the unused import\"\n             };\n \n-            visitor.r.session.buffer_lint_with_diagnostic(\n+            visitor.r.lint_buffer.buffer_lint_with_diagnostic(\n                 lint::builtin::UNUSED_IMPORTS,\n                 unused.use_tree_id,\n                 ms,"}, {"sha": "004d86cee8ded00b520759ab5e5e1daa44f30585", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "patch": "@@ -1548,7 +1548,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                             if is_expected(ctor_res) &&\n                                self.r.is_accessible_from(ctor_vis, self.parent_scope.module) {\n                                 let lint = lint::builtin::LEGACY_CONSTRUCTOR_VISIBILITY;\n-                                self.r.session.buffer_lint(lint, id, span,\n+                                self.r.lint_buffer.buffer_lint(lint, id, span,\n                                     \"private struct constructors are not usable through \\\n                                      re-exports in outer modules\",\n                                 );\n@@ -1774,7 +1774,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n             };\n             if result.base_res() == unqualified_result {\n                 let lint = lint::builtin::UNUSED_QUALIFICATIONS;\n-                self.r.session.buffer_lint(lint, id, span, \"unnecessary qualification\")\n+                self.r.lint_buffer.buffer_lint(lint, id, span, \"unnecessary qualification\")\n             }\n         }\n \n@@ -2111,7 +2111,7 @@ impl<'a> Resolver<'a> {\n         let mut late_resolution_visitor = LateResolutionVisitor::new(self);\n         visit::walk_crate(&mut late_resolution_visitor, krate);\n         for (id, span) in late_resolution_visitor.diagnostic_metadata.unused_labels.iter() {\n-            self.session.buffer_lint(lint::builtin::UNUSED_LABELS, *id, *span, \"unused label\");\n+            self.lint_buffer.buffer_lint(lint::builtin::UNUSED_LABELS, *id, *span, \"unused label\");\n         }\n     }\n }"}, {"sha": "f012606a5ca3c45586272c105def000f78415652", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "patch": "@@ -962,6 +962,8 @@ pub struct Resolver<'a> {\n     /// Stores enum visibilities to properly build a reduced graph\n     /// when visiting the correspondent variants.\n     variant_vis: DefIdMap<ty::Visibility>,\n+\n+    pub lint_buffer: lint::LintBuffer,\n }\n \n /// Nothing really interesting here; it just provides memory for the rest of the crate.\n@@ -1088,7 +1090,8 @@ impl<'a> Resolver<'a> {\n                krate: &Crate,\n                crate_name: &str,\n                metadata_loader: &'a MetadataLoaderDyn,\n-               arenas: &'a ResolverArenas<'a>)\n+               arenas: &'a ResolverArenas<'a>,\n+               lint_buffer: lint::LintBuffer)\n                -> Resolver<'a> {\n         let root_def_id = DefId::local(CRATE_DEF_INDEX);\n         let root_module_kind = ModuleKind::Def(\n@@ -1227,7 +1230,8 @@ impl<'a> Resolver<'a> {\n                 features.declared_lib_features.iter().map(|(feat, ..)| *feat)\n                     .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))\n                     .collect(),\n-            variant_vis: Default::default()\n+            variant_vis: Default::default(),\n+            lint_buffer,\n         }\n     }\n \n@@ -1653,7 +1657,7 @@ impl<'a> Resolver<'a> {\n             match result {\n                 Ok(binding) => {\n                     if let Some(node_id) = poisoned {\n-                        self.session.buffer_lint_with_diagnostic(\n+                        self.lint_buffer.buffer_lint_with_diagnostic(\n                             lint::builtin::PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n                             node_id, ident.span,\n                             &format!(\"cannot find {} `{}` in this scope\", ns.descr(), ident),\n@@ -2118,7 +2122,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn lint_if_path_starts_with_module(\n-        &self,\n+        &mut self,\n         crate_lint: CrateLint,\n         path: &[Segment],\n         path_span: Span,\n@@ -2169,7 +2173,7 @@ impl<'a> Resolver<'a> {\n \n         let diag = lint::builtin::BuiltinLintDiagnostics\n             ::AbsPathWithModule(diag_span);\n-        self.session.buffer_lint_with_diagnostic(\n+        self.lint_buffer.buffer_lint_with_diagnostic(\n             lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n             diag_id, diag_span,\n             \"absolute paths must start with `self`, `super`, \\\n@@ -2419,7 +2423,7 @@ impl<'a> Resolver<'a> {\n         for &(span_use, span_def) in &self.macro_expanded_macro_export_errors {\n             let msg = \"macro-expanded `macro_export` macros from the current crate \\\n                        cannot be referred to by absolute paths\";\n-            self.session.buffer_lint_with_diagnostic(\n+            self.lint_buffer.buffer_lint_with_diagnostic(\n                 lint::builtin::MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,\n                 CRATE_NODE_ID, span_use, msg,\n                 lint::builtin::BuiltinLintDiagnostics::"}, {"sha": "84d3d3a48b03923410c3a53915a1e5d293ce334a", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "patch": "@@ -247,9 +247,9 @@ impl<'a> base::Resolver for Resolver<'a> {\n         Ok(InvocationRes::Single(ext))\n     }\n \n-    fn check_unused_macros(&self) {\n+    fn check_unused_macros(&mut self) {\n         for (&node_id, &span) in self.unused_macros.iter() {\n-            self.session.buffer_lint(\n+            self.lint_buffer.buffer_lint(\n                 lint::builtin::UNUSED_MACROS, node_id, span, \"unused macro definition\"\n             );\n         }\n@@ -789,15 +789,17 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn check_stability_and_deprecation(&self, ext: &SyntaxExtension, path: &ast::Path) {\n+    fn check_stability_and_deprecation(&mut self, ext: &SyntaxExtension, path: &ast::Path) {\n         let span = path.span;\n         if let Some(stability) = &ext.stability {\n             if let StabilityLevel::Unstable { reason, issue, is_soft } = stability.level {\n                 let feature = stability.feature;\n                 if !self.active_features.contains(&feature) && !span.allows_unstable(feature) {\n                     let node_id = ast::CRATE_NODE_ID;\n-                    let soft_handler =\n-                        |lint, span, msg: &_| self.session.buffer_lint(lint, node_id, span, msg);\n+                    let lint_buffer = &mut self.lint_buffer;\n+                    let soft_handler = |lint, span, msg: &_| {\n+                        lint_buffer.buffer_lint(lint, node_id, span, msg)\n+                    };\n                     stability::report_unstable(\n                         self.session, feature, reason, issue, is_soft, span, soft_handler\n                     );\n@@ -807,14 +809,14 @@ impl<'a> Resolver<'a> {\n                 let path = pprust::path_to_string(path);\n                 let (message, lint) = stability::rustc_deprecation_message(depr, &path);\n                 stability::early_report_deprecation(\n-                    self.session, &message, depr.suggestion, lint, span\n+                    &mut self.lint_buffer, &message, depr.suggestion, lint, span\n                 );\n             }\n         }\n         if let Some(depr) = &ext.deprecation {\n             let path = pprust::path_to_string(&path);\n             let (message, lint) = stability::deprecation_message(depr, &path);\n-            stability::early_report_deprecation(self.session, &message, None, lint, span);\n+            stability::early_report_deprecation(&mut self.lint_buffer, &message, None, lint, span);\n         }\n     }\n "}, {"sha": "c39f0c90f98a5e6de74ed3e2e1b31b74932093f5", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "patch": "@@ -496,7 +496,7 @@ impl<'a> Resolver<'a> {\n                         if let (&NameBindingKind::Res(_, true), &NameBindingKind::Res(_, true)) =\n                                (&old_binding.kind, &binding.kind) {\n \n-                            this.session.buffer_lint_with_diagnostic(\n+                            this.lint_buffer.buffer_lint_with_diagnostic(\n                                 DUPLICATE_MACRO_EXPORTS,\n                                 CRATE_NODE_ID,\n                                 binding.span,\n@@ -979,7 +979,9 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                    !max_vis.get().is_at_least(directive.vis.get(), &*self) {\n                     let msg =\n                     \"glob import doesn't reexport anything because no candidate is public enough\";\n-                    self.r.session.buffer_lint(UNUSED_IMPORTS, directive.id, directive.span, msg);\n+                    self.r.lint_buffer.buffer_lint(\n+                        UNUSED_IMPORTS, directive.id, directive.span, msg,\n+                    );\n                 }\n                 return None;\n             }\n@@ -1148,7 +1150,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                                    re-exported (error E0365), consider declaring with \\\n                                    `pub`\",\n                                    ident);\n-                self.r.session.buffer_lint(PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n+                self.r.lint_buffer.buffer_lint(PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n                                          directive.id,\n                                          directive.span,\n                                          &msg);\n@@ -1273,7 +1275,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             let mut redundant_spans: Vec<_> = redundant_span.present_items().collect();\n             redundant_spans.sort();\n             redundant_spans.dedup();\n-            self.r.session.buffer_lint_with_diagnostic(\n+            self.r.lint_buffer.buffer_lint_with_diagnostic(\n                 UNUSED_IMPORTS,\n                 directive.id,\n                 directive.span,"}, {"sha": "d79b691058790f58ed5444b73774de97b8a331a0", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c930f826bf1929fed70109ecfaaf7e6fbda0d/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=bb0c930f826bf1929fed70109ecfaaf7e6fbda0d", "patch": "@@ -858,7 +858,7 @@ pub trait Resolver {\n         &mut self, invoc: &Invocation, eager_expansion_root: ExpnId, force: bool\n     ) -> Result<InvocationRes, Indeterminate>;\n \n-    fn check_unused_macros(&self);\n+    fn check_unused_macros(&mut self);\n \n     fn has_derives(&self, expn_id: ExpnId, derives: SpecialDerives) -> bool;\n     fn add_derives(&mut self, expn_id: ExpnId, derives: SpecialDerives);\n@@ -1053,7 +1053,7 @@ impl<'a> ExtCtxt<'a> {\n         Symbol::intern(st)\n     }\n \n-    pub fn check_unused_macros(&self) {\n+    pub fn check_unused_macros(&mut self) {\n         self.resolver.check_unused_macros();\n     }\n "}]}