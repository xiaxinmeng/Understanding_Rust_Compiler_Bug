{"sha": "03d5f9b783149eb628015e3ba5cac0f651c3a702", "node_id": "C_kwDOAAsO6NoAKDAzZDVmOWI3ODMxNDllYjYyODAxNWUzYmE1Y2FjMGY2NTFjM2E3MDI", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-21T14:22:44Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-17T11:27:37Z"}, "message": "`rustc_mir_build`: drive-by-cleaup: replace nested ifs with a `match`", "tree": {"sha": "097f8ffc1aa20d3c4f381c7d3ddd77b3b735c93d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/097f8ffc1aa20d3c4f381c7d3ddd77b3b735c93d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03d5f9b783149eb628015e3ba5cac0f651c3a702", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03d5f9b783149eb628015e3ba5cac0f651c3a702", "html_url": "https://github.com/rust-lang/rust/commit/03d5f9b783149eb628015e3ba5cac0f651c3a702", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03d5f9b783149eb628015e3ba5cac0f651c3a702/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ae51d69a30dd4da863072582842df0678c8c083", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae51d69a30dd4da863072582842df0678c8c083", "html_url": "https://github.com/rust-lang/rust/commit/5ae51d69a30dd4da863072582842df0678c8c083"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "b01b6fbf22259f7447a5038ba654885b589f3bf0", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/03d5f9b783149eb628015e3ba5cac0f651c3a702/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03d5f9b783149eb628015e3ba5cac0f651c3a702/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=03d5f9b783149eb628015e3ba5cac0f651c3a702", "patch": "@@ -644,24 +644,27 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         };\n \n-        if let Some(destination) = destination {\n-            if let Some(value) = value {\n+        match (destination, value) {\n+            (Some(destination), Some(value)) => {\n                 debug!(\"stmt_expr Break val block_context.push(SubExpr)\");\n                 self.block_context.push(BlockFrame::SubExpr);\n                 unpack!(block = self.expr_into_dest(destination, block, value));\n                 self.block_context.pop();\n-            } else {\n+            }\n+            (Some(destination), None) => {\n                 self.cfg.push_assign_unit(block, source_info, destination, self.tcx)\n             }\n-        } else {\n-            assert!(value.is_none(), \"`return` and `break` should have a destination\");\n-            if self.tcx.sess.instrument_coverage() {\n+            (None, Some(_)) => {\n+                panic!(\"`return`, `become` and `break` with value and must have a destination\")\n+            }\n+            (None, None) if self.tcx.sess.instrument_coverage() => {\n                 // Unlike `break` and `return`, which push an `Assign` statement to MIR, from which\n                 // a Coverage code region can be generated, `continue` needs no `Assign`; but\n                 // without one, the `InstrumentCoverage` MIR pass cannot generate a code region for\n                 // `continue`. Coverage will be missing unless we add a dummy `Assign` to MIR.\n                 self.add_dummy_assignment(span, block, source_info);\n             }\n+            (None, None) => {}\n         }\n \n         let region_scope = self.scopes.breakable_scopes[break_index].region_scope;"}]}