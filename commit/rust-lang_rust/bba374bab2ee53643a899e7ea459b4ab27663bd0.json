{"sha": "bba374bab2ee53643a899e7ea459b4ab27663bd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYTM3NGJhYjJlZTUzNjQzYTg5OWU3ZWE0NTliNGFiMjc2NjNiZDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-05T13:07:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-05T13:07:30Z"}, "message": "More direct signature for resolve_path", "tree": {"sha": "77610cd5b460dba0c350a5a9504b813bb3e8be98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77610cd5b460dba0c350a5a9504b813bb3e8be98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bba374bab2ee53643a899e7ea459b4ab27663bd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bba374bab2ee53643a899e7ea459b4ab27663bd0", "html_url": "https://github.com/rust-lang/rust/commit/bba374bab2ee53643a899e7ea459b4ab27663bd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bba374bab2ee53643a899e7ea459b4ab27663bd0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e63c00f100e960f7b72997026b4b2cd3cd29774b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e63c00f100e960f7b72997026b4b2cd3cd29774b", "html_url": "https://github.com/rust-lang/rust/commit/e63c00f100e960f7b72997026b4b2cd3cd29774b"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "2e63cb46e96fa953543155c11d0dfc285c94b225", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bba374bab2ee53643a899e7ea459b4ab27663bd0/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba374bab2ee53643a899e7ea459b4ab27663bd0/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=bba374bab2ee53643a899e7ea459b4ab27663bd0", "patch": "@@ -89,7 +89,7 @@ pub const DEFAULT_LRU_CAP: usize = 128;\n pub trait FileLoader {\n     /// Text of the file.\n     fn file_text(&self, file_id: FileId) -> Arc<String>;\n-    fn resolve_path(&self, anchor: FileId, relative_path: &RelativePath) -> Option<FileId>;\n+    fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId>;\n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>>;\n \n     fn resolve_extern_path(\n@@ -154,16 +154,21 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n     fn file_text(&self, file_id: FileId) -> Arc<String> {\n         SourceDatabaseExt::file_text(self.0, file_id)\n     }\n-    fn resolve_path(&self, anchor: FileId, relative_path: &RelativePath) -> Option<FileId> {\n-        let path = {\n-            let mut path = self.0.file_relative_path(anchor);\n-            assert!(path.pop());\n-            path.push(relative_path);\n-            path.normalize()\n+    /// Note that we intentionally accept a `&str` and not a `&Path` here. This\n+    /// method exists to handle `#[path = \"/some/path.rs\"] mod foo;` and such,\n+    /// so the input is guaranteed to be utf-8 string. We might introduce\n+    /// `struct StrPath(str)` for clarity some day, but it's a bit messy, so we\n+    /// get by with a `&str` for the time being.\n+    fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n+        let rel_path = {\n+            let mut rel_path = self.0.file_relative_path(anchor);\n+            assert!(rel_path.pop());\n+            rel_path.push(path);\n+            rel_path.normalize()\n         };\n         let source_root = self.0.file_source_root(anchor);\n         let source_root = self.0.source_root(source_root);\n-        source_root.file_by_relative_path(&path)\n+        source_root.file_by_relative_path(&rel_path)\n     }\n \n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {"}, {"sha": "cede4a6fc9e363305c67a47aa6ed37eef660cb7e", "filename": "crates/ra_hir_def/src/nameres/mod_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba374bab2ee53643a899e7ea459b4ab27663bd0/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba374bab2ee53643a899e7ea459b4ab27663bd0/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs?ref=bba374bab2ee53643a899e7ea459b4ab27663bd0", "patch": "@@ -61,7 +61,7 @@ impl ModDir {\n         };\n \n         for candidate in candidate_files.iter() {\n-            if let Some(file_id) = db.resolve_path(file_id, candidate) {\n+            if let Some(file_id) = db.resolve_path(file_id, candidate.as_str()) {\n                 let mut root_non_dir_owner = false;\n                 let mut mod_path = RelativePathBuf::new();\n                 if !(candidate.ends_with(\"mod.rs\") || attr_path.is_some()) {"}, {"sha": "e7a5182f03c0abbea40d5b68d3d53256f79ee71e", "filename": "crates/ra_hir_def/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bba374bab2ee53643a899e7ea459b4ab27663bd0/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba374bab2ee53643a899e7ea459b4ab27663bd0/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs?ref=bba374bab2ee53643a899e7ea459b4ab27663bd0", "patch": "@@ -58,8 +58,8 @@ impl FileLoader for TestDB {\n     fn file_text(&self, file_id: FileId) -> Arc<String> {\n         FileLoaderDelegate(self).file_text(file_id)\n     }\n-    fn resolve_path(&self, anchor: FileId, relative_path: &RelativePath) -> Option<FileId> {\n-        FileLoaderDelegate(self).resolve_path(anchor, relative_path)\n+    fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_path(anchor, path)\n     }\n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)"}, {"sha": "eec5fb8ebf85da531227868568c613dddfb2bfa0", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bba374bab2ee53643a899e7ea459b4ab27663bd0/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba374bab2ee53643a899e7ea459b4ab27663bd0/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=bba374bab2ee53643a899e7ea459b4ab27663bd0", "patch": "@@ -8,7 +8,7 @@ use crate::{\n use crate::{quote, EagerMacroId, LazyMacroId, MacroCallId};\n use either::Either;\n use mbe::parse_to_token_tree;\n-use ra_db::{FileId, RelativePath};\n+use ra_db::FileId;\n use ra_parser::FragmentKind;\n \n macro_rules! register_builtin {\n@@ -297,7 +297,7 @@ fn relative_file(db: &dyn AstDatabase, call_id: MacroCallId, path: &str) -> Opti\n     let call_site = call_id.as_file().original_file(db);\n \n     // Handle trivial case\n-    if let Some(res) = db.resolve_path(call_site, &RelativePath::new(&path)) {\n+    if let Some(res) = db.resolve_path(call_site, path) {\n         // Prevent include itself\n         return if res == call_site { None } else { Some(res) };\n     }"}, {"sha": "765a2f6d18e9341995ea9604f9872f618267d0cd", "filename": "crates/ra_hir_expand/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bba374bab2ee53643a899e7ea459b4ab27663bd0/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba374bab2ee53643a899e7ea459b4ab27663bd0/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs?ref=bba374bab2ee53643a899e7ea459b4ab27663bd0", "patch": "@@ -41,8 +41,8 @@ impl FileLoader for TestDB {\n     fn file_text(&self, file_id: FileId) -> Arc<String> {\n         FileLoaderDelegate(self).file_text(file_id)\n     }\n-    fn resolve_path(&self, anchor: FileId, relative_path: &RelativePath) -> Option<FileId> {\n-        FileLoaderDelegate(self).resolve_path(anchor, relative_path)\n+    fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_path(anchor, path)\n     }\n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)"}, {"sha": "21a3bdfd154ff3bd39887637b3cd4c685d64d96f", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bba374bab2ee53643a899e7ea459b4ab27663bd0/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba374bab2ee53643a899e7ea459b4ab27663bd0/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=bba374bab2ee53643a899e7ea459b4ab27663bd0", "patch": "@@ -72,8 +72,8 @@ impl FileLoader for TestDB {\n     fn file_text(&self, file_id: FileId) -> Arc<String> {\n         FileLoaderDelegate(self).file_text(file_id)\n     }\n-    fn resolve_path(&self, anchor: FileId, relative_path: &RelativePath) -> Option<FileId> {\n-        FileLoaderDelegate(self).resolve_path(anchor, relative_path)\n+    fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_path(anchor, path)\n     }\n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)"}, {"sha": "93d5891a04b0f1dbd8515393fb603f748e74138e", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bba374bab2ee53643a899e7ea459b4ab27663bd0/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba374bab2ee53643a899e7ea459b4ab27663bd0/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=bba374bab2ee53643a899e7ea459b4ab27663bd0", "patch": "@@ -57,8 +57,8 @@ impl FileLoader for RootDatabase {\n     fn file_text(&self, file_id: FileId) -> Arc<String> {\n         FileLoaderDelegate(self).file_text(file_id)\n     }\n-    fn resolve_path(&self, anchor: FileId, relative_path: &RelativePath) -> Option<FileId> {\n-        FileLoaderDelegate(self).resolve_path(anchor, relative_path)\n+    fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_path(anchor, path)\n     }\n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)"}]}