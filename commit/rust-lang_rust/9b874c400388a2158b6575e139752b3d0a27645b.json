{"sha": "9b874c400388a2158b6575e139752b3d0a27645b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliODc0YzQwMDM4OGEyMTU4YjY1NzVlMTM5NzUyYjNkMGEyNzY0NWI=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-07-03T15:56:09Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-07-16T21:15:39Z"}, "message": "Check that const parameters of trait methods have compatible types", "tree": {"sha": "5a895dd02ed99a71015c257d08dc341fcc50e695", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a895dd02ed99a71015c257d08dc341fcc50e695"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b874c400388a2158b6575e139752b3d0a27645b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b874c400388a2158b6575e139752b3d0a27645b", "html_url": "https://github.com/rust-lang/rust/commit/9b874c400388a2158b6575e139752b3d0a27645b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b874c400388a2158b6575e139752b3d0a27645b/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8b8558f083d86247ef3260ebb4f97b276cdbf73", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b8558f083d86247ef3260ebb4f97b276cdbf73", "html_url": "https://github.com/rust-lang/rust/commit/a8b8558f083d86247ef3260ebb4f97b276cdbf73"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "d35868881558e31fafdbe338658060340af6035d", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9b874c400388a2158b6575e139752b3d0a27645b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b874c400388a2158b6575e139752b3d0a27645b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=9b874c400388a2158b6575e139752b3d0a27645b", "patch": "@@ -66,6 +66,10 @@ crate fn compare_impl_method<'tcx>(\n     {\n         return;\n     }\n+\n+    if let Err(ErrorReported) = compare_const_param_types(tcx, impl_m, trait_m, trait_item_span) {\n+        return;\n+    }\n }\n \n fn compare_predicate_entailment<'tcx>(\n@@ -929,6 +933,68 @@ fn compare_synthetic_generics<'tcx>(\n     if error_found { Err(ErrorReported) } else { Ok(()) }\n }\n \n+fn compare_const_param_types<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    impl_m: &ty::AssocItem,\n+    trait_m: &ty::AssocItem,\n+    trait_item_span: Option<Span>,\n+) -> Result<(), ErrorReported> {\n+    let const_params_of = |def_id| {\n+        tcx.generics_of(def_id).params.iter().filter_map(|param| match param.kind {\n+            GenericParamDefKind::Const { .. } => Some(param.def_id),\n+            _ => None,\n+        })\n+    };\n+    let const_params_impl = const_params_of(impl_m.def_id);\n+    let const_params_trait = const_params_of(trait_m.def_id);\n+\n+    for (const_param_impl, const_param_trait) in iter::zip(const_params_impl, const_params_trait) {\n+        let impl_ty = tcx.type_of(const_param_impl);\n+        let trait_ty = tcx.type_of(const_param_trait);\n+        if impl_ty != trait_ty {\n+            let (impl_span, impl_ident) = match tcx.hir().get_if_local(const_param_impl) {\n+                Some(hir::Node::GenericParam(hir::GenericParam { span, name, .. })) => (\n+                    span,\n+                    match name {\n+                        hir::ParamName::Plain(ident) => Some(ident),\n+                        _ => None,\n+                    },\n+                ),\n+                other => bug!(\n+                    \"expected GenericParam, found {:?}\",\n+                    other.map_or_else(|| \"nothing\".to_string(), |n| format!(\"{:?}\", n))\n+                ),\n+            };\n+            let trait_span = match tcx.hir().get_if_local(const_param_trait) {\n+                Some(hir::Node::GenericParam(hir::GenericParam { span, .. })) => Some(span),\n+                _ => None,\n+            };\n+            let mut err = struct_span_err!(\n+                tcx.sess,\n+                *impl_span,\n+                E0053,\n+                \"method `{}` has an incompatible const parameter type for trait\",\n+                trait_m.ident\n+            );\n+            err.span_note(\n+                trait_span.map_or_else(|| trait_item_span.unwrap_or(*impl_span), |span| *span),\n+                &format!(\n+                    \"the const parameter{} has type `{}`, but the declaration \\\n+                              in trait `{}` has type `{}`\",\n+                    &impl_ident.map_or_else(|| \"\".to_string(), |ident| format!(\" `{}`\", ident)),\n+                    impl_ty,\n+                    tcx.def_path_str(trait_m.def_id),\n+                    trait_ty\n+                ),\n+            );\n+            err.emit();\n+            return Err(ErrorReported);\n+        }\n+    }\n+\n+    Ok(())\n+}\n+\n crate fn compare_const_impl<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_c: &ty::AssocItem,"}, {"sha": "04650403c6bafe70b6b1c7c8be14ff44555d36c7", "filename": "src/test/ui/const-generics/issue-86820.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9b874c400388a2158b6575e139752b3d0a27645b/src%2Ftest%2Fui%2Fconst-generics%2Fissue-86820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b874c400388a2158b6575e139752b3d0a27645b/src%2Ftest%2Fui%2Fconst-generics%2Fissue-86820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-86820.rs?ref=9b874c400388a2158b6575e139752b3d0a27645b", "patch": "@@ -0,0 +1,25 @@\n+// Regression test for the ICE described in #86820.\n+\n+#![allow(unused,dead_code)]\n+use std::ops::BitAnd;\n+\n+const C: fn() = || is_set();\n+fn is_set() {\n+    0xffu8.bit::<0>();\n+}\n+\n+trait Bits {\n+    fn bit<const I : u8>(self) -> bool;\n+    //~^ NOTE: the const parameter `I` has type `usize`, but the declaration in trait `Bits::bit` has type `u8`\n+}\n+\n+impl Bits for u8 {\n+    fn bit<const I : usize>(self) -> bool {\n+    //~^ ERROR: method `bit` has an incompatible const parameter type for trait [E0053]\n+        let i = 1 << I;\n+        let mask = u8::from(i);\n+        mask & self == mask\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f4396f2f2b0a27599d09e23e60b012529c285b77", "filename": "src/test/ui/const-generics/issue-86820.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b874c400388a2158b6575e139752b3d0a27645b/src%2Ftest%2Fui%2Fconst-generics%2Fissue-86820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b874c400388a2158b6575e139752b3d0a27645b/src%2Ftest%2Fui%2Fconst-generics%2Fissue-86820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-86820.stderr?ref=9b874c400388a2158b6575e139752b3d0a27645b", "patch": "@@ -0,0 +1,15 @@\n+error[E0053]: method `bit` has an incompatible const parameter type for trait\n+  --> $DIR/issue-86820.rs:17:18\n+   |\n+LL |     fn bit<const I : usize>(self) -> bool {\n+   |                  ^\n+   |\n+note: the const parameter `I` has type `usize`, but the declaration in trait `Bits::bit` has type `u8`\n+  --> $DIR/issue-86820.rs:12:18\n+   |\n+LL |     fn bit<const I : u8>(self) -> bool;\n+   |                  ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}]}