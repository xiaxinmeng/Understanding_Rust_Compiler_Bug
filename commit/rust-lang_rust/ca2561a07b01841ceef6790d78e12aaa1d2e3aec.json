{"sha": "ca2561a07b01841ceef6790d78e12aaa1d2e3aec", "node_id": "C_kwDOAAsO6NoAKGNhMjU2MWEwN2IwMTg0MWNlZWY2NzkwZDc4ZTEyYWFhMWQyZTNhZWM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-16T23:51:40Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-18T21:09:40Z"}, "message": "Avoid cloning `RenderOptions`.\n\nBy moving `RenderOptions` out of `Option`, because the two structs' uses\nare almost entirely separate.\n\nThe only complication is that `unstable_features` is needed in both\nstructs, but it's a tiny `Copy` type so its duplication seems fine.", "tree": {"sha": "87c8e48616e64f4fe1790b7178a5feddb9b101b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87c8e48616e64f4fe1790b7178a5feddb9b101b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca2561a07b01841ceef6790d78e12aaa1d2e3aec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2561a07b01841ceef6790d78e12aaa1d2e3aec", "html_url": "https://github.com/rust-lang/rust/commit/ca2561a07b01841ceef6790d78e12aaa1d2e3aec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca2561a07b01841ceef6790d78e12aaa1d2e3aec/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38988e62bc7672e1e85b7db4e3a885608d9a3888", "url": "https://api.github.com/repos/rust-lang/rust/commits/38988e62bc7672e1e85b7db4e3a885608d9a3888", "html_url": "https://github.com/rust-lang/rust/commit/38988e62bc7672e1e85b7db4e3a885608d9a3888"}], "stats": {"total": 95, "additions": 48, "deletions": 47}, "files": [{"sha": "67ea39fb965798078c95b245c4e69d4255cc446b", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 43, "deletions": 37, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ca2561a07b01841ceef6790d78e12aaa1d2e3aec/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2561a07b01841ceef6790d78e12aaa1d2e3aec/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=ca2561a07b01841ceef6790d78e12aaa1d2e3aec", "patch": "@@ -142,8 +142,6 @@ pub(crate) struct Options {\n     // Options that alter generated documentation pages\n     /// Crate version to note on the sidebar of generated docs.\n     pub(crate) crate_version: Option<String>,\n-    /// Collected options specific to outputting final pages.\n-    pub(crate) render_options: RenderOptions,\n     /// The format that we output when rendering.\n     ///\n     /// Currently used only for the `--show-coverage` option.\n@@ -159,6 +157,10 @@ pub(crate) struct Options {\n     /// Configuration for scraping examples from the current crate. If this option is Some(..) then\n     /// the compiler will scrape examples and not generate documentation.\n     pub(crate) scrape_examples_options: Option<ScrapeExamplesOptions>,\n+\n+    /// Note: this field is duplicated in `RenderOptions` because it's useful\n+    /// to have it in both places.\n+    pub(crate) unstable_features: rustc_feature::UnstableFeatures,\n }\n \n impl fmt::Debug for Options {\n@@ -194,14 +196,14 @@ impl fmt::Debug for Options {\n             .field(\"persist_doctests\", &self.persist_doctests)\n             .field(\"show_coverage\", &self.show_coverage)\n             .field(\"crate_version\", &self.crate_version)\n-            .field(\"render_options\", &self.render_options)\n             .field(\"runtool\", &self.runtool)\n             .field(\"runtool_args\", &self.runtool_args)\n             .field(\"enable-per-target-ignores\", &self.enable_per_target_ignores)\n             .field(\"run_check\", &self.run_check)\n             .field(\"no_run\", &self.no_run)\n             .field(\"nocapture\", &self.nocapture)\n             .field(\"scrape_examples_options\", &self.scrape_examples_options)\n+            .field(\"unstable_features\", &self.unstable_features)\n             .finish()\n     }\n }\n@@ -267,6 +269,8 @@ pub(crate) struct RenderOptions {\n     pub(crate) generate_redirect_map: bool,\n     /// Show the memory layout of types in the docs.\n     pub(crate) show_type_layout: bool,\n+    /// Note: this field is duplicated in `Options` because it's useful to have\n+    /// it in both places.\n     pub(crate) unstable_features: rustc_feature::UnstableFeatures,\n     pub(crate) emit: Vec<EmitType>,\n     /// If `true`, HTML source pages will generate links for items to their definition.\n@@ -316,7 +320,7 @@ impl Options {\n     pub(crate) fn from_matches(\n         matches: &getopts::Matches,\n         args: Vec<String>,\n-    ) -> Result<Options, i32> {\n+    ) -> Result<(Options, RenderOptions), i32> {\n         let args = &args[1..];\n         // Check for unstable options.\n         nightly_options::check_nightly_options(matches, &opts());\n@@ -710,7 +714,9 @@ impl Options {\n         let with_examples = matches.opt_strs(\"with-examples\");\n         let call_locations = crate::scrape_examples::load_call_locations(with_examples, &diag)?;\n \n-        Ok(Options {\n+        let unstable_features =\n+            rustc_feature::UnstableFeatures::from_environment(crate_name.as_deref());\n+        let options = Options {\n             input,\n             proc_macro_crate,\n             error_format,\n@@ -744,42 +750,42 @@ impl Options {\n             run_check,\n             no_run,\n             nocapture,\n-            render_options: RenderOptions {\n-                output,\n-                external_html,\n-                id_map,\n-                playground_url,\n-                module_sorting,\n-                themes,\n-                extension_css,\n-                extern_html_root_urls,\n-                extern_html_root_takes_precedence,\n-                default_settings,\n-                resource_suffix,\n-                enable_minification,\n-                enable_index_page,\n-                index_page,\n-                static_root_path,\n-                markdown_no_toc,\n-                markdown_css,\n-                markdown_playground_url,\n-                document_private,\n-                document_hidden,\n-                generate_redirect_map,\n-                show_type_layout,\n-                unstable_features: rustc_feature::UnstableFeatures::from_environment(\n-                    crate_name.as_deref(),\n-                ),\n-                emit,\n-                generate_link_to_definition,\n-                call_locations,\n-                no_emit_shared: false,\n-            },\n             crate_name,\n             output_format,\n             json_unused_externs,\n             scrape_examples_options,\n-        })\n+            unstable_features,\n+        };\n+        let render_options = RenderOptions {\n+            output,\n+            external_html,\n+            id_map,\n+            playground_url,\n+            module_sorting,\n+            themes,\n+            extension_css,\n+            extern_html_root_urls,\n+            extern_html_root_takes_precedence,\n+            default_settings,\n+            resource_suffix,\n+            enable_minification,\n+            enable_index_page,\n+            index_page,\n+            static_root_path,\n+            markdown_no_toc,\n+            markdown_css,\n+            markdown_playground_url,\n+            document_private,\n+            document_hidden,\n+            generate_redirect_map,\n+            show_type_layout,\n+            unstable_features,\n+            emit,\n+            generate_link_to_definition,\n+            call_locations,\n+            no_emit_shared: false,\n+        };\n+        Ok((options, render_options))\n     }\n \n     /// Returns `true` if the file given as `self.input` is a Markdown file."}, {"sha": "cb216970c7c354f2d61c40a54b2b5407b842d1f4", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2561a07b01841ceef6790d78e12aaa1d2e3aec/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2561a07b01841ceef6790d78e12aaa1d2e3aec/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=ca2561a07b01841ceef6790d78e12aaa1d2e3aec", "patch": "@@ -79,7 +79,7 @@ pub(crate) fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n         lint_cap: Some(options.lint_cap.unwrap_or(lint::Forbid)),\n         cg: options.codegen_options.clone(),\n         externs: options.externs.clone(),\n-        unstable_features: options.render_options.unstable_features,\n+        unstable_features: options.unstable_features,\n         actually_rustdoc: true,\n         edition: options.edition,\n         target_triple: options.target.clone(),"}, {"sha": "5733d1f9c79d662aa3417d5f1dc0a1185b6d29b1", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca2561a07b01841ceef6790d78e12aaa1d2e3aec/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2561a07b01841ceef6790d78e12aaa1d2e3aec/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=ca2561a07b01841ceef6790d78e12aaa1d2e3aec", "patch": "@@ -430,7 +430,6 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             extension_css,\n             resource_suffix,\n             static_root_path,\n-            unstable_features,\n             generate_redirect_map,\n             show_type_layout,\n             generate_link_to_definition,\n@@ -511,7 +510,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             resource_suffix,\n             static_root_path,\n             fs: DocFS::new(sender),\n-            codes: ErrorCodes::from(unstable_features.is_nightly_build()),\n+            codes: ErrorCodes::from(options.unstable_features.is_nightly_build()),\n             playground,\n             all: RefCell::new(AllTypes::new()),\n             errors: receiver,"}, {"sha": "793061a9f7a06160595511cf9a94f59e776ff801", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca2561a07b01841ceef6790d78e12aaa1d2e3aec/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2561a07b01841ceef6790d78e12aaa1d2e3aec/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ca2561a07b01841ceef6790d78e12aaa1d2e3aec", "patch": "@@ -720,7 +720,7 @@ fn main_args(at_args: &[String]) -> MainResult {\n \n     // Note that we discard any distinction between different non-zero exit\n     // codes from `from_matches` here.\n-    let options = match config::Options::from_matches(&matches, args) {\n+    let (options, render_options) = match config::Options::from_matches(&matches, args) {\n         Ok(opts) => opts,\n         Err(code) => {\n             return if code == 0 {\n@@ -743,7 +743,6 @@ fn main_args(at_args: &[String]) -> MainResult {\n         (true, false) => return doctest::run(options),\n         (false, true) => {\n             let input = options.input.clone();\n-            let render_options = options.render_options.clone();\n             let edition = options.edition;\n             let config = core::create_config(options);\n \n@@ -775,11 +774,8 @@ fn main_args(at_args: &[String]) -> MainResult {\n     let crate_version = options.crate_version.clone();\n \n     let output_format = options.output_format;\n-    // FIXME: fix this clone (especially render_options)\n     let externs = options.externs.clone();\n-    let render_options = options.render_options.clone();\n     let scrape_examples_options = options.scrape_examples_options.clone();\n-    let document_private = options.render_options.document_private;\n \n     let config = core::create_config(options);\n \n@@ -815,7 +811,7 @@ fn main_args(at_args: &[String]) -> MainResult {\n                         sess,\n                         krate,\n                         externs,\n-                        document_private,\n+                        render_options.document_private,\n                     )\n                 });\n                 (resolver.clone(), resolver_caches)"}, {"sha": "044e051440c52bb9117416d75ca0a3fa52885b86", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2561a07b01841ceef6790d78e12aaa1d2e3aec/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2561a07b01841ceef6790d78e12aaa1d2e3aec/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=ca2561a07b01841ceef6790d78e12aaa1d2e3aec", "patch": "@@ -143,7 +143,7 @@ pub(crate) fn test(options: Options) -> Result<(), String> {\n         options.enable_per_target_ignores,\n     );\n     collector.set_position(DUMMY_SP);\n-    let codes = ErrorCodes::from(options.render_options.unstable_features.is_nightly_build());\n+    let codes = ErrorCodes::from(options.unstable_features.is_nightly_build());\n \n     find_testable_code(&input_str, &mut collector, codes, options.enable_per_target_ignores, None);\n "}]}