{"sha": "b412b46cf70de4e08cda3ac120ebfa349c1bc268", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MTJiNDZjZjcwZGU0ZTA4Y2RhM2FjMTIwZWJmYTM0OWMxYmMyNjg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-24T04:52:52Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-24T23:20:46Z"}, "message": "Do the hard part first\n\nThe only bit failing was the module, so change that before removing the\n`span` field.", "tree": {"sha": "084321fcb8806af60a207fc6efc368372b1ce45f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/084321fcb8806af60a207fc6efc368372b1ce45f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b412b46cf70de4e08cda3ac120ebfa349c1bc268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b412b46cf70de4e08cda3ac120ebfa349c1bc268", "html_url": "https://github.com/rust-lang/rust/commit/b412b46cf70de4e08cda3ac120ebfa349c1bc268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b412b46cf70de4e08cda3ac120ebfa349c1bc268/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4b62142799095a6426db6d873d1de173d20c445", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b62142799095a6426db6d873d1de173d20c445", "html_url": "https://github.com/rust-lang/rust/commit/a4b62142799095a6426db6d873d1de173d20c445"}], "stats": {"total": 53, "additions": 33, "deletions": 20}, "files": [{"sha": "91073ddfd943c5de26811b2775d8b180f936303a", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b412b46cf70de4e08cda3ac120ebfa349c1bc268", "patch": "@@ -487,7 +487,8 @@ fn build_module(\n         }\n     }\n \n-    clean::Module { items }\n+    let span = clean::Span::from_rustc_span(cx.tcx.def_span(did));\n+    clean::Module { items, span }\n }\n \n crate fn print_inlined_const(tcx: TyCtxt<'_>, did: DefId) -> String {"}, {"sha": "93d227e507fffc8bf0a985c2576df22dc45b5971", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b412b46cf70de4e08cda3ac120ebfa349c1bc268", "patch": "@@ -100,7 +100,7 @@ impl Clean<Item> for doctree::Module<'_> {\n \n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code.\n-        let span = {\n+        let span = Span::from_rustc_span({\n             let sm = cx.sess().source_map();\n             let outer = sm.lookup_char_pos(self.where_outer.lo());\n             let inner = sm.lookup_char_pos(self.where_inner.lo());\n@@ -111,11 +111,14 @@ impl Clean<Item> for doctree::Module<'_> {\n                 // mod foo; (and a separate SourceFile for the contents)\n                 self.where_inner\n             }\n-        };\n+        });\n \n-        let what_rustc_thinks =\n-            Item::from_hir_id_and_parts(self.id, Some(self.name), ModuleItem(Module { items }), cx);\n-        Item { span: span.clean(cx), ..what_rustc_thinks }\n+        Item::from_hir_id_and_parts(\n+            self.id,\n+            Some(self.name),\n+            ModuleItem(Module { items, span }),\n+            cx,\n+        )\n     }\n }\n "}, {"sha": "8d07a64360dc4051f021fe1a0143de31cd60865b", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=b412b46cf70de4e08cda3ac120ebfa349c1bc268", "patch": "@@ -232,7 +232,7 @@ impl fmt::Debug for Item {\n         let def_id: &dyn fmt::Debug = if self.is_fake() { &\"**FAKE**\" } else { &self.def_id };\n \n         fmt.debug_struct(\"Item\")\n-            .field(\"source\", &self.span)\n+            .field(\"source\", &self.span())\n             .field(\"name\", &self.name)\n             .field(\"attrs\", &self.attrs)\n             .field(\"kind\", &self.kind)\n@@ -255,8 +255,12 @@ impl Item {\n         if self.is_fake() { None } else { tcx.lookup_deprecation(self.def_id) }\n     }\n \n+    crate fn span(&self) -> Span {\n+        if let ItemKind::ModuleItem(Module { span, .. }) = &*self.kind { *span } else { self.span }\n+    }\n+\n     crate fn attr_span(&self, _tcx: TyCtxt<'_>) -> rustc_span::Span {\n-        crate::passes::span_of_attrs(&self.attrs).unwrap_or_else(|| self.span.inner())\n+        crate::passes::span_of_attrs(&self.attrs).unwrap_or_else(|| self.span().inner())\n     }\n \n     /// Finds the `doc` attribute as a NameValue and returns the corresponding\n@@ -609,6 +613,7 @@ impl ItemKind {\n #[derive(Clone, Debug)]\n crate struct Module {\n     crate items: Vec<Item>,\n+    crate span: Span,\n }\n \n crate struct ListAttributesIter<'a> {"}, {"sha": "37d11d4ed47c445a5fbbe0c904b63e2aab80903c", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=b412b46cf70de4e08cda3ac120ebfa349c1bc268", "patch": "@@ -80,7 +80,10 @@ crate trait DocFolder: Sized {\n     }\n \n     fn fold_mod(&mut self, m: Module) -> Module {\n-        Module { items: m.items.into_iter().filter_map(|i| self.fold_item(i)).collect() }\n+        Module {\n+            span: m.span,\n+            items: m.items.into_iter().filter_map(|i| self.fold_item(i)).collect(),\n+        }\n     }\n \n     fn fold_crate(&mut self, mut c: Crate) -> Crate {"}, {"sha": "089167a66730cb5ae5fd70ad1294f8cc536578ce", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=b412b46cf70de4e08cda3ac120ebfa349c1bc268", "patch": "@@ -281,15 +281,15 @@ impl<'tcx> Context<'tcx> {\n     /// may happen, for example, with externally inlined items where the source\n     /// of their crate documentation isn't known.\n     pub(super) fn src_href(&self, item: &clean::Item) -> Option<String> {\n-        if item.span.is_dummy() {\n+        if item.span().is_dummy() {\n             return None;\n         }\n         let mut root = self.root_path();\n         let mut path = String::new();\n-        let cnum = item.span.cnum(self.sess());\n+        let cnum = item.span().cnum(self.sess());\n \n         // We can safely ignore synthetic `SourceFile`s.\n-        let file = match item.span.filename(self.sess()) {\n+        let file = match item.span().filename(self.sess()) {\n             FileName::Real(ref path) => path.local_path().to_path_buf(),\n             _ => return None,\n         };\n@@ -323,8 +323,8 @@ impl<'tcx> Context<'tcx> {\n             (&*symbol, &path)\n         };\n \n-        let loline = item.span.lo(self.sess()).line;\n-        let hiline = item.span.hi(self.sess()).line;\n+        let loline = item.span().lo(self.sess()).line;\n+        let hiline = item.span().hi(self.sess()).line;\n         let lines =\n             if loline == hiline { loline.to_string() } else { format!(\"{}-{}\", loline, hiline) };\n         Some(format!("}, {"sha": "0fc1c7d60e7e2efa806e7cd20166b3516d5c090d", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=b412b46cf70de4e08cda3ac120ebfa349c1bc268", "patch": "@@ -1013,7 +1013,7 @@ fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Mac\n             Some(\"macro\"),\n             None,\n             None,\n-            it.span.inner().edition(),\n+            it.span().inner().edition(),\n         );\n     });\n     document(w, cx, it, None)"}, {"sha": "a22ff11b416017187dbdada46c91decc55a6f295", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=b412b46cf70de4e08cda3ac120ebfa349c1bc268", "patch": "@@ -41,11 +41,11 @@ impl DocFolder for SourceCollector<'_, '_> {\n         // then we need to render it out to the filesystem.\n         if self.scx.include_sources\n             // skip all synthetic \"files\"\n-            && item.span.filename(self.sess()).is_real()\n+            && item.span().filename(self.sess()).is_real()\n             // skip non-local files\n-            && item.span.cnum(self.sess()) == LOCAL_CRATE\n+            && item.span().cnum(self.sess()) == LOCAL_CRATE\n         {\n-            let filename = item.span.filename(self.sess());\n+            let filename = item.span().filename(self.sess());\n             // If it turns out that we couldn't read this file, then we probably\n             // can't read any of the files (generating html output from json or\n             // something like that), so just don't include sources for the"}, {"sha": "6e773f76059306e5a5944f2c1babde4f432b2789", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=b412b46cf70de4e08cda3ac120ebfa349c1bc268", "patch": "@@ -40,7 +40,8 @@ impl JsonRenderer<'_> {\n             .iter()\n             .map(rustc_ast_pretty::pprust::attribute_to_string)\n             .collect();\n-        let clean::Item { span, name, attrs: _, kind: _, visibility, def_id } = item;\n+        let span = item.span();\n+        let clean::Item { name, attrs: _, kind: _, span: _, visibility, def_id } = item;\n         let inner = match *item.kind {\n             clean::StrippedItem(_) => return None,\n             _ => from_clean_item(item, self.tcx),"}, {"sha": "559bf7d83038f89682908595791eee42fdf08a27", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b412b46cf70de4e08cda3ac120ebfa349c1bc268/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=b412b46cf70de4e08cda3ac120ebfa349c1bc268", "patch": "@@ -211,7 +211,7 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n                     None,\n                 );\n \n-                let filename = i.span.filename(self.ctx.sess());\n+                let filename = i.span().filename(self.ctx.sess());\n                 let has_doc_example = tests.found_tests != 0;\n                 let hir_id = self.ctx.tcx.hir().local_def_id_to_hir_id(i.def_id.expect_local());\n                 let (level, source) = self.ctx.tcx.lint_level_at_node(MISSING_DOCS, hir_id);"}]}