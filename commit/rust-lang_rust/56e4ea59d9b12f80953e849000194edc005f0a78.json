{"sha": "56e4ea59d9b12f80953e849000194edc005f0a78", "node_id": "C_kwDOAAsO6NoAKDU2ZTRlYTU5ZDliMTJmODA5NTNlODQ5MDAwMTk0ZWRjMDA1ZjBhNzg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-12T14:30:07Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-12T15:50:49Z"}, "message": "more clippy fixes:\n\nclippy::match_like_matches_macro\nclippy::to_string_in_format_args\nclippy::single_char_add_str\nclippy::filter_map_identity\nclippy::clone_on_copy\nclippy::useless_format\nclippy::unused_unit", "tree": {"sha": "48f961acc4b17373871596fe10d43c9d99866759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48f961acc4b17373871596fe10d43c9d99866759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56e4ea59d9b12f80953e849000194edc005f0a78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56e4ea59d9b12f80953e849000194edc005f0a78", "html_url": "https://github.com/rust-lang/rust/commit/56e4ea59d9b12f80953e849000194edc005f0a78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56e4ea59d9b12f80953e849000194edc005f0a78/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77790f2b8e6975abf31ef33007b217be5b0f011a", "url": "https://api.github.com/repos/rust-lang/rust/commits/77790f2b8e6975abf31ef33007b217be5b0f011a", "html_url": "https://github.com/rust-lang/rust/commit/77790f2b8e6975abf31ef33007b217be5b0f011a"}], "stats": {"total": 43, "additions": 18, "deletions": 25}, "files": [{"sha": "b45689ec377678146bd09f1bd8861af52aec2084", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=56e4ea59d9b12f80953e849000194edc005f0a78", "patch": "@@ -1812,14 +1812,12 @@ impl Macro {\n \n     pub fn is_builtin_derive(&self, db: &dyn HirDatabase) -> bool {\n         match self.id {\n-            MacroId::Macro2Id(it) => match it.lookup(db.upcast()).expander {\n-                MacroExpander::BuiltInDerive(_) => true,\n-                _ => false,\n-            },\n-            MacroId::MacroRulesId(it) => match it.lookup(db.upcast()).expander {\n-                MacroExpander::BuiltInDerive(_) => true,\n-                _ => false,\n-            },\n+            MacroId::Macro2Id(it) => {\n+                matches!(it.lookup(db.upcast()).expander, MacroExpander::BuiltInDerive(_))\n+            }\n+            MacroId::MacroRulesId(it) => {\n+                matches!(it.lookup(db.upcast()).expander, MacroExpander::BuiltInDerive(_))\n+            }\n             MacroId::ProcMacroId(_) => false,\n         }\n     }"}, {"sha": "8e6b5283f19b571ca604b5e7acd55124d1d07753", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=56e4ea59d9b12f80953e849000194edc005f0a78", "patch": "@@ -504,10 +504,8 @@ impl DefCollector<'_> {\n         } else {\n             PathKind::Abs\n         };\n-        let path = ModPath::from_segments(\n-            path_kind.clone(),\n-            [krate.clone(), name![prelude], edition].into_iter(),\n-        );\n+        let path =\n+            ModPath::from_segments(path_kind, [krate.clone(), name![prelude], edition].into_iter());\n         // Fall back to the older `std::prelude::v1` for compatibility with Rust <1.52.0\n         // FIXME remove this fallback\n         let fallback_path ="}, {"sha": "aea1e3ec34ba2361cd413566692396e8e3d3b4ed", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=56e4ea59d9b12f80953e849000194edc005f0a78", "patch": "@@ -120,7 +120,7 @@ impl Path {\n         let res = Path {\n             type_anchor: self.type_anchor.clone(),\n             mod_path: Interned::new(ModPath::from_segments(\n-                self.mod_path.kind.clone(),\n+                self.mod_path.kind,\n                 self.mod_path.segments()[..self.mod_path.segments().len() - 1].iter().cloned(),\n             )),\n             generic_args: self.generic_args[..self.generic_args.len() - 1].to_vec().into(),"}, {"sha": "c924478cecbc2b2786e272dbc1a15e6dcbc2ff40", "filename": "crates/hir_expand/src/fixup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fhir_expand%2Fsrc%2Ffixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fhir_expand%2Fsrc%2Ffixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Ffixup.rs?ref=56e4ea59d9b12f80953e849000194edc005f0a78", "patch": "@@ -176,7 +176,7 @@ mod tests {\n         );\n \n         let mut actual = tt.to_string();\n-        actual.push_str(\"\\n\");\n+        actual.push('\\n');\n \n         expect.indent(false);\n         expect.assert_eq(&actual);"}, {"sha": "676d4d51df9f9adffc52a28b8ef13fcd344e0cf5", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=56e4ea59d9b12f80953e849000194edc005f0a78", "patch": "@@ -79,7 +79,7 @@ pub(crate) fn annotations(\n                             .map(|variant| {\n                                 variant.source(db).and_then(|node| name_range(db, node, file_id))\n                             })\n-                            .filter_map(std::convert::identity)\n+                            .flatten()\n                             .for_each(|range| {\n                                 annotations.push(Annotation {\n                                     range,"}, {"sha": "68fd0952b48814a47f3d9223bdd1c6500f8c1bff", "filename": "crates/ide/src/file_structure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffile_structure.rs?ref=56e4ea59d9b12f80953e849000194edc005f0a78", "patch": "@@ -138,7 +138,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                     collapse_ws(param_list.syntax(), &mut detail);\n                 }\n                 if let Some(ret_type) = it.ret_type() {\n-                    detail.push_str(\" \");\n+                    detail.push(' ');\n                     collapse_ws(ret_type.syntax(), &mut detail);\n                 }\n "}, {"sha": "f6e0d619de8e88a450480bbf47b0e05591abb3ec", "filename": "crates/ide_assists/src/handlers/generate_delegate_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs?ref=56e4ea59d9b12f80953e849000194edc005f0a78", "patch": "@@ -156,7 +156,7 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext)\n                             }\n                             None => {\n                                 let offset = strukt.syntax().text_range().end();\n-                                let snippet = format!(\"\\n\\n{}\", impl_def.syntax().to_string());\n+                                let snippet = format!(\"\\n\\n{}\", impl_def.syntax());\n                                 builder.insert(offset, snippet);\n                             }\n                         }"}, {"sha": "c87bd7f1527e8a4f3a5c98f0799c7a7f88585040", "filename": "crates/ide_assists/src/handlers/merge_match_arms.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_match_arms.rs?ref=56e4ea59d9b12f80953e849000194edc005f0a78", "patch": "@@ -103,10 +103,7 @@ fn are_same_types(\n     for (other_arm_type_name, other_arm_type) in arm_types {\n         match (current_arm_types.get(&other_arm_type_name), other_arm_type) {\n             (Some(Some(current_arm_type)), Some(other_arm_type))\n-                if other_arm_type.original == current_arm_type.original =>\n-            {\n-                ()\n-            }\n+                if other_arm_type.original == current_arm_type.original => {}\n             _ => return false,\n         }\n     }"}, {"sha": "30b994806ba3a5fe50d130b6ac7c2ec598b920ed", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=56e4ea59d9b12f80953e849000194edc005f0a78", "patch": "@@ -206,7 +206,7 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n                             // => <expr>.field(field)\n                             let method_name = make::name_ref(\"field\");\n-                            let field_path = &format!(\"{}\", name);\n+                            let field_path = &name.to_string();\n                             let field_path = make::expr_path(make::ext::ident_path(field_path));\n                             let args = make::arg_list(vec![field_path]);\n                             expr = make::expr_method_call(expr, method_name, args);"}, {"sha": "cc9f2f9151d06b4f357bd2366dc493bcdc15819e", "filename": "crates/ide_db/src/famous_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fide_db%2Fsrc%2Ffamous_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Fide_db%2Fsrc%2Ffamous_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Ffamous_defs.rs?ref=56e4ea59d9b12f80953e849000194edc005f0a78", "patch": "@@ -108,7 +108,7 @@ impl FamousDefs<'_, '_> {\n             self.test(),\n             self.proc_macro(),\n         ])\n-        .filter_map(|it| it)\n+        .flatten()\n     }\n \n     fn find_trait(&self, path: &str) -> Option<Trait> {"}, {"sha": "eb7e73236ab452827c6f24c8beb575a0e8cd41eb", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=56e4ea59d9b12f80953e849000194edc005f0a78", "patch": "@@ -533,7 +533,7 @@ mod bar;\n \n fn main() {{}}\n \"#,\n-        PROJECT = project.to_string(),\n+        PROJECT = project,\n     );\n \n     let server ="}, {"sha": "922d24bc75499184aadde0fc1dba647816ecaf14", "filename": "crates/text_edit/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Ftext_edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56e4ea59d9b12f80953e849000194edc005f0a78/crates%2Ftext_edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext_edit%2Fsrc%2Flib.rs?ref=56e4ea59d9b12f80953e849000194edc005f0a78", "patch": "@@ -94,7 +94,7 @@ impl TextEdit {\n \n         let text_size = TextSize::of(&*text);\n         let mut total_len = text_size;\n-        let mut max_total_len = text_size.clone();\n+        let mut max_total_len = text_size;\n         for indel in &self.indels {\n             total_len += TextSize::of(&indel.insert);\n             total_len -= indel.delete.len();"}]}