{"sha": "072b7db56161ee4c7a4411d8398c90512c153e16", "node_id": "C_kwDOAAsO6NoAKDA3MmI3ZGI1NjE2MWVlNGM3YTQ0MTFkODM5OGM5MDUxMmMxNTNlMTY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-18T10:19:24Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-18T10:19:24Z"}, "message": "Make debug_triple depend on target json file content rather than file path\n\nThis ensures that changes to target json files will force a\nrecompilation. And more importantly that moving the files doesn't force\na recompilation.", "tree": {"sha": "6430f305d6e69dd3769f4bd671205e0d7e74c173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6430f305d6e69dd3769f4bd671205e0d7e74c173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/072b7db56161ee4c7a4411d8398c90512c153e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/072b7db56161ee4c7a4411d8398c90512c153e16", "html_url": "https://github.com/rust-lang/rust/commit/072b7db56161ee4c7a4411d8398c90512c153e16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/072b7db56161ee4c7a4411d8398c90512c153e16/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff86b27e7be1ffff9e00d80beb15560d5f301459", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff86b27e7be1ffff9e00d80beb15560d5f301459", "html_url": "https://github.com/rust-lang/rust/commit/ff86b27e7be1ffff9e00d80beb15560d5f301459"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "6670f3845c8bd4ab720d685cf9594f20e0deea76", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/072b7db56161ee4c7a4411d8398c90512c153e16/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/072b7db56161ee4c7a4411d8398c90512c153e16/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=072b7db56161ee4c7a4411d8398c90512c153e16", "patch": "@@ -2183,7 +2183,7 @@ impl Target {\n             TargetTriple::TargetTriple(ref target_triple) => {\n                 load_builtin(target_triple).expect(\"built-in target\")\n             }\n-            TargetTriple::TargetPath(..) => {\n+            TargetTriple::TargetJson { .. } => {\n                 panic!(\"built-in targets doens't support target-paths\")\n             }\n         }\n@@ -2248,11 +2248,9 @@ impl Target {\n \n                 Err(format!(\"Could not find specification for target {:?}\", target_triple))\n             }\n-            TargetTriple::TargetPath(ref target_path) => {\n-                if target_path.is_file() {\n-                    return load_file(&target_path);\n-                }\n-                Err(format!(\"Target path {:?} is not a valid file\", target_path))\n+            TargetTriple::TargetJson { triple: _, ref contents } => {\n+                let obj = serde_json::from_str(contents).map_err(|e| e.to_string())?;\n+                Target::from_json(obj)\n             }\n         }\n     }\n@@ -2424,7 +2422,7 @@ impl ToJson for Target {\n #[derive(PartialEq, Clone, Debug, Hash, Encodable, Decodable)]\n pub enum TargetTriple {\n     TargetTriple(String),\n-    TargetPath(PathBuf),\n+    TargetJson { triple: String, contents: String },\n }\n \n impl TargetTriple {\n@@ -2436,20 +2434,28 @@ impl TargetTriple {\n     /// Creates a target triple from the passed target path.\n     pub fn from_path(path: &Path) -> Result<Self, io::Error> {\n         let canonicalized_path = path.canonicalize()?;\n-        Ok(TargetTriple::TargetPath(canonicalized_path))\n+        let contents = std::fs::read_to_string(&canonicalized_path).map_err(|err| {\n+            io::Error::new(\n+                io::ErrorKind::InvalidInput,\n+                format!(\"Target path {:?} is not a valid file: {}\", canonicalized_path, err),\n+            )\n+        })?;\n+        let triple = canonicalized_path\n+            .file_stem()\n+            .expect(\"target path must not be empty\")\n+            .to_str()\n+            .expect(\"target path must be valid unicode\")\n+            .to_owned();\n+        Ok(TargetTriple::TargetJson { triple, contents })\n     }\n \n     /// Returns a string triple for this target.\n     ///\n     /// If this target is a path, the file name (without extension) is returned.\n     pub fn triple(&self) -> &str {\n         match *self {\n-            TargetTriple::TargetTriple(ref triple) => triple,\n-            TargetTriple::TargetPath(ref path) => path\n-                .file_stem()\n-                .expect(\"target path must not be empty\")\n-                .to_str()\n-                .expect(\"target path must be valid unicode\"),\n+            TargetTriple::TargetTriple(ref triple)\n+            | TargetTriple::TargetJson { ref triple, contents: _ } => triple,\n         }\n     }\n \n@@ -2461,14 +2467,14 @@ impl TargetTriple {\n         use std::collections::hash_map::DefaultHasher;\n         use std::hash::{Hash, Hasher};\n \n-        let triple = self.triple();\n-        if let TargetTriple::TargetPath(ref path) = *self {\n-            let mut hasher = DefaultHasher::new();\n-            path.hash(&mut hasher);\n-            let hash = hasher.finish();\n-            format!(\"{}-{}\", triple, hash)\n-        } else {\n-            triple.into()\n+        match self {\n+            TargetTriple::TargetTriple(triple) => triple.to_owned(),\n+            TargetTriple::TargetJson { triple, contents: content } => {\n+                let mut hasher = DefaultHasher::new();\n+                content.hash(&mut hasher);\n+                let hash = hasher.finish();\n+                format!(\"{}-{}\", triple, hash)\n+            }\n         }\n     }\n }"}]}