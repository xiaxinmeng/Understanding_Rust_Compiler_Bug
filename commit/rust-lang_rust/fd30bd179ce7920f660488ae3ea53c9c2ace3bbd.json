{"sha": "fd30bd179ce7920f660488ae3ea53c9c2ace3bbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMzBiZDE3OWNlNzkyMGY2NjA0ODhhZTNlYTUzYzljMmFjZTNiYmQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-04T14:04:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-04T14:04:30Z"}, "message": "Merge #10146\n\n10146: fix: use placeholder as default type in `Generate function` and `Extract into function`. r=matklad a=iDawer\n\nCloses #10123 \n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>", "tree": {"sha": "9729828414101d6d87527113505a950f72bcb863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9729828414101d6d87527113505a950f72bcb863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd30bd179ce7920f660488ae3ea53c9c2ace3bbd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhM3zuCRBK7hj4Ov3rIwAAVOoIAI3R975rTD5VX8UT4VJmIezv\nhZSJN9S6XsZOqpBGGn1VjNW6URyS/YgRkxX9b1QvrYRnKbf4WkkYlw+A5eCNlNeR\nA6g/NoIxT9udX+jn2f5aew4yLJwh1XTEpKVbMJAcNmV5iueV+qsEZobBG9/JZ/Xt\n/lCfBAya+X6G1EiGguIxOsO5QXH+4JFgOBaR29wHnK0SfcRhsjvfHFZeebrbMxwu\nItnOHH6KwRpH2IZAH4083q3X8D3p0bdrmWHnVqtAZX4q7Gmzbqr2Zh6Plyn6wlBf\n6+BLKtxHFIHohLTlU4vzEgiiUbkRJbuoygjwWDnbhQkPgjCf42K+Ivn4tetqIuc=\n=/O5i\n-----END PGP SIGNATURE-----\n", "payload": "tree 9729828414101d6d87527113505a950f72bcb863\nparent 5fb2eb23148afc109b6ea9c12d5627bbff4318f0\nparent 535761e63f6bb2c42f86d04c682ac10298086781\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630764270 +0000\ncommitter GitHub <noreply@github.com> 1630764270 +0000\n\nMerge #10146\n\n10146: fix: use placeholder as default type in `Generate function` and `Extract into function`. r=matklad a=iDawer\n\nCloses #10123 \n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd30bd179ce7920f660488ae3ea53c9c2ace3bbd", "html_url": "https://github.com/rust-lang/rust/commit/fd30bd179ce7920f660488ae3ea53c9c2ace3bbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd30bd179ce7920f660488ae3ea53c9c2ace3bbd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fb2eb23148afc109b6ea9c12d5627bbff4318f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb2eb23148afc109b6ea9c12d5627bbff4318f0", "html_url": "https://github.com/rust-lang/rust/commit/5fb2eb23148afc109b6ea9c12d5627bbff4318f0"}, {"sha": "535761e63f6bb2c42f86d04c682ac10298086781", "url": "https://api.github.com/repos/rust-lang/rust/commits/535761e63f6bb2c42f86d04c682ac10298086781", "html_url": "https://github.com/rust-lang/rust/commit/535761e63f6bb2c42f86d04c682ac10298086781"}], "stats": {"total": 92, "additions": 59, "deletions": 33}, "files": [{"sha": "1e21050911d7cc878b4b286f49c6772f0c335ed2", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fd30bd179ce7920f660488ae3ea53c9c2ace3bbd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd30bd179ce7920f660488ae3ea53c9c2ace3bbd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=fd30bd179ce7920f660488ae3ea53c9c2ace3bbd", "patch": "@@ -1319,23 +1319,23 @@ impl Function {\n                     .type_arguments()\n                     .nth(1)\n                     .map(|ty| make_ty(&ty, ctx, module))\n-                    .unwrap_or_else(make::ty_unit);\n+                    .unwrap_or_else(make::ty_placeholder);\n                 make::ext::ty_result(fun_ty.make_ty(ctx, module), handler_ty)\n             }\n             FlowHandler::If { .. } => make::ext::ty_bool(),\n             FlowHandler::IfOption { action } => {\n                 let handler_ty = action\n                     .expr_ty(ctx)\n                     .map(|ty| make_ty(&ty, ctx, module))\n-                    .unwrap_or_else(make::ty_unit);\n+                    .unwrap_or_else(make::ty_placeholder);\n                 make::ext::ty_option(handler_ty)\n             }\n             FlowHandler::MatchOption { .. } => make::ext::ty_option(fun_ty.make_ty(ctx, module)),\n             FlowHandler::MatchResult { err } => {\n                 let handler_ty = err\n                     .expr_ty(ctx)\n                     .map(|ty| make_ty(&ty, ctx, module))\n-                    .unwrap_or_else(make::ty_unit);\n+                    .unwrap_or_else(make::ty_placeholder);\n                 make::ext::ty_result(fun_ty.make_ty(ctx, module), handler_ty)\n             }\n         };\n@@ -1501,7 +1501,7 @@ fn with_tail_expr(block: ast::BlockExpr, tail_expr: ast::Expr) -> ast::BlockExpr\n }\n \n fn format_type(ty: &hir::Type, ctx: &AssistContext, module: hir::Module) -> String {\n-    ty.display_source_code(ctx.db(), module.into()).ok().unwrap_or_else(|| \"()\".to_string())\n+    ty.display_source_code(ctx.db(), module.into()).ok().unwrap_or_else(|| \"_\".to_string())\n }\n \n fn make_ty(ty: &hir::Type, ctx: &AssistContext, module: hir::Module) -> ast::Type {\n@@ -4191,6 +4191,29 @@ fn main() {\n fn $0fun_name(bar: &str) {\n     m!(bar);\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn unresolveable_types_default_to_placeholder() {\n+        check_assist(\n+            extract_function,\n+            r#\"\n+fn foo() {\n+    let a = __unresolved;\n+    let _ = $0{a}$0;\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+    let a = __unresolved;\n+    let _ = fun_name(a);\n+}\n+\n+fn $0fun_name(a: _) -> _ {\n+    a\n+}\n \"#,\n         );\n     }"}, {"sha": "8feae78126ff223440558585d3f8ccecadf1a54a", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fd30bd179ce7920f660488ae3ea53c9c2ace3bbd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd30bd179ce7920f660488ae3ea53c9c2ace3bbd/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=fd30bd179ce7920f660488ae3ea53c9c2ace3bbd", "patch": "@@ -37,7 +37,7 @@ use crate::{\n //     bar(\"\", baz());\n // }\n //\n-// fn bar(arg: &str, baz: Baz) ${0:-> ()} {\n+// fn bar(arg: &str, baz: Baz) ${0:-> _} {\n //     todo!()\n // }\n //\n@@ -342,7 +342,7 @@ impl FunctionBuilder {\n }\n \n /// Makes an optional return type along with whether the return type should be focused by the cursor.\n-/// If we cannot infer what the return type should be, we create unit as a placeholder.\n+/// If we cannot infer what the return type should be, we create a placeholder type.\n ///\n /// The rule for whether we focus a return type or not (and thus focus the function body),\n /// is rather simple:\n@@ -357,14 +357,14 @@ fn make_return_type(\n ) -> (Option<ast::RetType>, bool) {\n     let (ret_ty, should_focus_return_type) = {\n         match ctx.sema.type_of_expr(call).map(TypeInfo::original) {\n-            Some(ty) if ty.is_unknown() => (Some(make::ty_unit()), true),\n-            None => (Some(make::ty_unit()), true),\n+            Some(ty) if ty.is_unknown() => (Some(make::ty_placeholder()), true),\n+            None => (Some(make::ty_placeholder()), true),\n             Some(ty) if ty.is_unit() => (None, false),\n             Some(ty) => {\n                 let rendered = ty.display_source_code(ctx.db(), target_module.into());\n                 match rendered {\n                     Ok(rendered) => (Some(make::ty(&rendered)), false),\n-                    Err(_) => (Some(make::ty_unit()), true),\n+                    Err(_) => (Some(make::ty_placeholder()), true),\n                 }\n             }\n         }\n@@ -458,7 +458,7 @@ fn fn_args(\n                     ty\n                 }\n             }\n-            None => String::from(\"()\"),\n+            None => String::from(\"_\"),\n         });\n     }\n     deduplicate_arg_names(&mut arg_names);\n@@ -639,7 +639,7 @@ fn foo() {\n     bar();\n }\n \n-fn bar() ${0:-> ()} {\n+fn bar() ${0:-> _} {\n     todo!()\n }\n \",\n@@ -666,7 +666,7 @@ impl Foo {\n     }\n }\n \n-fn bar() ${0:-> ()} {\n+fn bar() ${0:-> _} {\n     todo!()\n }\n \",\n@@ -690,7 +690,7 @@ fn foo1() {\n     bar();\n }\n \n-fn bar() ${0:-> ()} {\n+fn bar() ${0:-> _} {\n     todo!()\n }\n \n@@ -716,7 +716,7 @@ mod baz {\n         bar();\n     }\n \n-    fn bar() ${0:-> ()} {\n+    fn bar() ${0:-> _} {\n         todo!()\n     }\n }\n@@ -740,7 +740,7 @@ fn foo() {\n     bar(BazBaz);\n }\n \n-fn bar(baz_baz: BazBaz) ${0:-> ()} {\n+fn bar(baz_baz: BazBaz) ${0:-> _} {\n     todo!()\n }\n \",\n@@ -763,7 +763,7 @@ fn foo() {\n     bar(&BazBaz as *const BazBaz);\n }\n \n-fn bar(baz_baz: *const BazBaz) ${0:-> ()} {\n+fn bar(baz_baz: *const BazBaz) ${0:-> _} {\n     todo!()\n }\n \",\n@@ -788,7 +788,7 @@ fn foo() {\n     bar(baz());\n }\n \n-fn bar(baz: Baz) ${0:-> ()} {\n+fn bar(baz: Baz) ${0:-> _} {\n     todo!()\n }\n \",\n@@ -1091,7 +1091,7 @@ fn foo() {\n     bar(Baz::new);\n }\n \n-fn bar(new: fn) ${0:-> ()} {\n+fn bar(new: fn) ${0:-> _} {\n     todo!()\n }\n \",\n@@ -1115,15 +1115,15 @@ fn foo() {\n     bar(closure)\n }\n \n-fn bar(closure: ()) {\n+fn bar(closure: _) {\n     ${0:todo!()}\n }\n \",\n         )\n     }\n \n     #[test]\n-    fn unresolveable_types_default_to_unit() {\n+    fn unresolveable_types_default_to_placeholder() {\n         check_assist(\n             generate_function,\n             r\"\n@@ -1136,7 +1136,7 @@ fn foo() {\n     bar(baz)\n }\n \n-fn bar(baz: ()) {\n+fn bar(baz: _) {\n     ${0:todo!()}\n }\n \",\n@@ -1400,7 +1400,7 @@ impl Foo {\n         self.bar();\n     }\n \n-    fn bar(&self) ${0:-> ()} {\n+    fn bar(&self) ${0:-> _} {\n         todo!()\n     }\n }\n@@ -1422,7 +1422,7 @@ fn foo() {\n     bar(42).await();\n }\n \n-async fn bar(arg: i32) ${0:-> ()} {\n+async fn bar(arg: i32) ${0:-> _} {\n     todo!()\n }\n \",\n@@ -1443,7 +1443,7 @@ fn foo() {S.bar();}\n impl S {\n \n \n-fn bar(&self) ${0:-> ()} {\n+fn bar(&self) ${0:-> _} {\n     todo!()\n }\n }\n@@ -1465,7 +1465,7 @@ impl S {}\n struct S;\n fn foo() {S.bar();}\n impl S {\n-    fn bar(&self) ${0:-> ()} {\n+    fn bar(&self) ${0:-> _} {\n         todo!()\n     }\n }\n@@ -1490,7 +1490,7 @@ mod s {\n impl S {\n \n \n-    pub(crate) fn bar(&self) ${0:-> ()} {\n+    pub(crate) fn bar(&self) ${0:-> _} {\n         todo!()\n     }\n }\n@@ -1523,7 +1523,7 @@ mod s {\n impl S {\n \n \n-fn bar(&self) ${0:-> ()} {\n+fn bar(&self) ${0:-> _} {\n     todo!()\n }\n }\n@@ -1546,7 +1546,7 @@ fn foo() {S.bar();}\n impl S {\n \n \n-fn bar(&self) ${0:-> ()} {\n+fn bar(&self) ${0:-> _} {\n     todo!()\n }\n }\n@@ -1568,7 +1568,7 @@ fn foo() {S::bar();}\n impl S {\n \n \n-fn bar() ${0:-> ()} {\n+fn bar() ${0:-> _} {\n     todo!()\n }\n }\n@@ -1590,7 +1590,7 @@ impl S {}\n struct S;\n fn foo() {S::bar();}\n impl S {\n-    fn bar() ${0:-> ()} {\n+    fn bar() ${0:-> _} {\n         todo!()\n     }\n }\n@@ -1615,7 +1615,7 @@ mod s {\n impl S {\n \n \n-    pub(crate) fn bar() ${0:-> ()} {\n+    pub(crate) fn bar() ${0:-> _} {\n         todo!()\n     }\n }\n@@ -1639,7 +1639,7 @@ fn foo() {S::bar();}\n impl S {\n \n \n-fn bar() ${0:-> ()} {\n+fn bar() ${0:-> _} {\n     todo!()\n }\n }"}, {"sha": "39ab8c7b74e0276bfe7e9b072d17ceddaa51e78c", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd30bd179ce7920f660488ae3ea53c9c2ace3bbd/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd30bd179ce7920f660488ae3ea53c9c2ace3bbd/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=fd30bd179ce7920f660488ae3ea53c9c2ace3bbd", "patch": "@@ -819,7 +819,7 @@ fn foo() {\n     bar(\"\", baz());\n }\n \n-fn bar(arg: &str, baz: Baz) ${0:-> ()} {\n+fn bar(arg: &str, baz: Baz) ${0:-> _} {\n     todo!()\n }\n "}, {"sha": "93eca19c309266641f5d34d9f911579114ab456a", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd30bd179ce7920f660488ae3ea53c9c2ace3bbd/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd30bd179ce7920f660488ae3ea53c9c2ace3bbd/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=fd30bd179ce7920f660488ae3ea53c9c2ace3bbd", "patch": "@@ -95,6 +95,9 @@ pub fn lifetime(text: &str) -> ast::Lifetime {\n pub fn ty(text: &str) -> ast::Type {\n     ty_from_text(text)\n }\n+pub fn ty_placeholder() -> ast::Type {\n+    ty_from_text(\"_\")\n+}\n pub fn ty_unit() -> ast::Type {\n     ty_from_text(\"()\")\n }"}]}