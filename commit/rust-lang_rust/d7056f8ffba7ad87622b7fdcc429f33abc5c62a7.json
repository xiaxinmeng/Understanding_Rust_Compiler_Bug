{"sha": "d7056f8ffba7ad87622b7fdcc429f33abc5c62a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MDU2ZjhmZmJhN2FkODc2MjJiN2ZkY2M0MjlmMzNhYmM1YzYyYTc=", "commit": {"author": {"name": "xiongmao86", "email": "xiongmao86dev@sina.com", "date": "2020-04-07T13:25:07Z"}, "committer": {"name": "xiongmao86", "email": "xiongmao86dev@sina.com", "date": "2020-04-07T13:25:07Z"}, "message": "Refine lint message.", "tree": {"sha": "99fc507998e03ffbf97c76405a121920c6e2e3ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99fc507998e03ffbf97c76405a121920c6e2e3ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7056f8ffba7ad87622b7fdcc429f33abc5c62a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7056f8ffba7ad87622b7fdcc429f33abc5c62a7", "html_url": "https://github.com/rust-lang/rust/commit/d7056f8ffba7ad87622b7fdcc429f33abc5c62a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7056f8ffba7ad87622b7fdcc429f33abc5c62a7/comments", "author": {"login": "xiongmao86", "id": 1770218, "node_id": "MDQ6VXNlcjE3NzAyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1770218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiongmao86", "html_url": "https://github.com/xiongmao86", "followers_url": "https://api.github.com/users/xiongmao86/followers", "following_url": "https://api.github.com/users/xiongmao86/following{/other_user}", "gists_url": "https://api.github.com/users/xiongmao86/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiongmao86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiongmao86/subscriptions", "organizations_url": "https://api.github.com/users/xiongmao86/orgs", "repos_url": "https://api.github.com/users/xiongmao86/repos", "events_url": "https://api.github.com/users/xiongmao86/events{/privacy}", "received_events_url": "https://api.github.com/users/xiongmao86/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xiongmao86", "id": 1770218, "node_id": "MDQ6VXNlcjE3NzAyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1770218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiongmao86", "html_url": "https://github.com/xiongmao86", "followers_url": "https://api.github.com/users/xiongmao86/followers", "following_url": "https://api.github.com/users/xiongmao86/following{/other_user}", "gists_url": "https://api.github.com/users/xiongmao86/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiongmao86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiongmao86/subscriptions", "organizations_url": "https://api.github.com/users/xiongmao86/orgs", "repos_url": "https://api.github.com/users/xiongmao86/repos", "events_url": "https://api.github.com/users/xiongmao86/events{/privacy}", "received_events_url": "https://api.github.com/users/xiongmao86/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f14826e091e08f1ee4ff06d3ca6d5015045cfb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5", "html_url": "https://github.com/rust-lang/rust/commit/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "0f331aad0682a75983efd9836fa00a05ecfe39cc", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7056f8ffba7ad87622b7fdcc429f33abc5c62a7/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7056f8ffba7ad87622b7fdcc429f33abc5c62a7/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d7056f8ffba7ad87622b7fdcc429f33abc5c62a7", "patch": "@@ -3222,17 +3222,17 @@ fn lint_option_as_ref_deref<'a, 'tcx>(\n \n     if is_deref {\n         let current_method = if is_mut {\n-            \".as_mut().map(DerefMut::deref_mut)\"\n+            format!(\".as_mut().map({})\", snippet(cx, map_args[1].span, \"..\"))\n         } else {\n-            \".as_ref().map(Deref::deref)\"\n+            format!(\".as_ref().map({})\", snippet(cx, map_args[1].span, \"..\"))\n         };\n         let method_hint = if is_mut { \"as_deref_mut\" } else { \"as_deref\" };\n         let hint = format!(\"{}.{}()\", snippet(cx, as_ref_args[0].span, \"..\"), method_hint);\n         let suggestion = format!(\"try using {} instead\", method_hint);\n \n         let msg = format!(\n-            \"called `{0}` (or with one of deref aliases) on an Option value. \\\n-             This can be done more directly by calling `{1}` instead\",\n+            \"called `{0}` on an Option value. This can be done more directly \\\n+            by calling `{1}` instead\",\n             current_method, hint\n         );\n         span_lint_and_sugg("}, {"sha": "a106582a633232b4bfcdc95c78308440d2480137", "filename": "tests/ui/option_as_ref_deref.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d7056f8ffba7ad87622b7fdcc429f33abc5c62a7/tests%2Fui%2Foption_as_ref_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7056f8ffba7ad87622b7fdcc429f33abc5c62a7/tests%2Fui%2Foption_as_ref_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.stderr?ref=d7056f8ffba7ad87622b7fdcc429f33abc5c62a7", "patch": "@@ -1,12 +1,12 @@\n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n+error: called `.as_ref().map(Deref::deref)` on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:13:13\n    |\n LL |     let _ = opt.clone().as_ref().map(Deref::deref).map(str::len);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.clone().as_deref()`\n    |\n    = note: `-D clippy::option-as-ref-deref` implied by `-D warnings`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n+error: called `.as_ref().map(Deref::deref)` on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:16:13\n    |\n LL |       let _ = opt.clone()\n@@ -16,85 +16,85 @@ LL | |             Deref::deref\n LL | |         )\n    | |_________^ help: try using as_deref instead: `opt.clone().as_deref()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+error: called `.as_mut().map(DerefMut::deref_mut)` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:22:13\n    |\n LL |     let _ = opt.as_mut().map(DerefMut::deref_mut);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+error: called `.as_ref().map(String::as_str)` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:24:13\n    |\n LL |     let _ = opt.as_ref().map(String::as_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+error: called `.as_ref().map(|x| x.as_str())` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:25:13\n    |\n LL |     let _ = opt.as_ref().map(|x| x.as_str());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+error: called `.as_mut().map(String::as_mut_str)` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:26:13\n    |\n LL |     let _ = opt.as_mut().map(String::as_mut_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+error: called `.as_mut().map(|x| x.as_mut_str())` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:27:13\n    |\n LL |     let _ = opt.as_mut().map(|x| x.as_mut_str());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(CString::new(vec![]).unwrap()).as_deref()` instead\n+error: called `.as_ref().map(CString::as_c_str)` on an Option value. This can be done more directly by calling `Some(CString::new(vec![]).unwrap()).as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:28:13\n    |\n LL |     let _ = Some(CString::new(vec![]).unwrap()).as_ref().map(CString::as_c_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(CString::new(vec![]).unwrap()).as_deref()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(OsString::new()).as_deref()` instead\n+error: called `.as_ref().map(OsString::as_os_str)` on an Option value. This can be done more directly by calling `Some(OsString::new()).as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:29:13\n    |\n LL |     let _ = Some(OsString::new()).as_ref().map(OsString::as_os_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(OsString::new()).as_deref()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(PathBuf::new()).as_deref()` instead\n+error: called `.as_ref().map(PathBuf::as_path)` on an Option value. This can be done more directly by calling `Some(PathBuf::new()).as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:30:13\n    |\n LL |     let _ = Some(PathBuf::new()).as_ref().map(PathBuf::as_path);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(PathBuf::new()).as_deref()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref()` instead\n+error: called `.as_ref().map(Vec::as_slice)` on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:31:13\n    |\n LL |     let _ = Some(Vec::<()>::new()).as_ref().map(Vec::as_slice);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(Vec::<()>::new()).as_deref()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref_mut()` instead\n+error: called `.as_mut().map(Vec::as_mut_slice)` on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:32:13\n    |\n LL |     let _ = Some(Vec::<()>::new()).as_mut().map(Vec::as_mut_slice);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `Some(Vec::<()>::new()).as_deref_mut()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+error: called `.as_ref().map(|x| x.deref())` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:34:13\n    |\n LL |     let _ = opt.as_ref().map(|x| x.deref());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.clone().as_deref_mut()` instead\n+error: called `.as_mut().map(|x| x.deref_mut())` on an Option value. This can be done more directly by calling `opt.clone().as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:35:13\n    |\n LL |     let _ = opt.clone().as_mut().map(|x| x.deref_mut()).map(|x| x.len());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.clone().as_deref_mut()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+error: called `.as_ref().map(|x| &**x)` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:42:13\n    |\n LL |     let _ = opt.as_ref().map(|x| &**x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+error: called `.as_mut().map(|x| &mut **x)` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:43:13\n    |\n LL |     let _ = opt.as_mut().map(|x| &mut **x);"}]}