{"sha": "9a19e7604436056fafe10dffc7214fc6adb88400", "node_id": "C_kwDOAAsO6NoAKDlhMTllNzYwNDQzNjA1NmZhZmUxMGRmZmM3MjE0ZmM2YWRiODg0MDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-15T21:35:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-15T21:35:50Z"}, "message": "Auto merge of #106914 - matthiaskrgr:rollup-yh0x4gq, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #106888 (Add tidy check to ensure that rustdoc GUI tests start with a small description)\n - #106896 (suggest `is_empty` for collections when casting to `bool`)\n - #106900 (Fix regression in `unused_braces` with macros)\n - #106906 (remove redundant clones)\n - #106909 (Only suggest adding type param if path being resolved was a type)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c030034dd4d85f1604b0ef7fd4889e1005c7e72d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c030034dd4d85f1604b0ef7fd4889e1005c7e72d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a19e7604436056fafe10dffc7214fc6adb88400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a19e7604436056fafe10dffc7214fc6adb88400", "html_url": "https://github.com/rust-lang/rust/commit/9a19e7604436056fafe10dffc7214fc6adb88400", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a19e7604436056fafe10dffc7214fc6adb88400/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e75dddf609c0201d03f9792e850f95d6a283d11", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e75dddf609c0201d03f9792e850f95d6a283d11", "html_url": "https://github.com/rust-lang/rust/commit/9e75dddf609c0201d03f9792e850f95d6a283d11"}, {"sha": "fc78b1e7f9e2823a99919e452d0e7635f4e049e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc78b1e7f9e2823a99919e452d0e7635f4e049e0", "html_url": "https://github.com/rust-lang/rust/commit/fc78b1e7f9e2823a99919e452d0e7635f4e049e0"}], "stats": {"total": 241, "additions": 213, "deletions": 28}, "files": [{"sha": "0a230fca107affea99ad03c0bd31a8316e59908c", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -31,7 +31,9 @@\n use super::FnCtxt;\n \n use crate::type_error_struct;\n-use rustc_errors::{struct_span_err, Applicability, DelayDm, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{\n+    struct_span_err, Applicability, DelayDm, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n+};\n use rustc_hir as hir;\n use rustc_macros::{TypeFoldable, TypeVisitable};\n use rustc_middle::mir::Mutability;\n@@ -270,6 +272,9 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                         }\n                     ));\n                 }\n+\n+                self.try_suggest_collection_to_bool(fcx, &mut err);\n+\n                 err.emit();\n             }\n             CastError::NeedViaInt => {\n@@ -517,6 +522,9 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 } else {\n                     err.span_label(self.span, \"invalid cast\");\n                 }\n+\n+                self.try_suggest_collection_to_bool(fcx, &mut err);\n+\n                 err.emit();\n             }\n             CastError::SizedUnsizedCast => {\n@@ -1080,4 +1088,40 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             },\n         );\n     }\n+\n+    /// Attempt to suggest using `.is_empty` when trying to cast from a\n+    /// collection type to a boolean.\n+    fn try_suggest_collection_to_bool(&self, fcx: &FnCtxt<'a, 'tcx>, err: &mut Diagnostic) {\n+        if self.cast_ty.is_bool() {\n+            let derefed = fcx\n+                .autoderef(self.expr_span, self.expr_ty)\n+                .silence_errors()\n+                .find(|t| matches!(t.0.kind(), ty::Str | ty::Slice(..)));\n+\n+            if let Some((deref_ty, _)) = derefed {\n+                // Give a note about what the expr derefs to.\n+                if deref_ty != self.expr_ty.peel_refs() {\n+                    err.span_note(\n+                        self.expr_span,\n+                        format!(\n+                            \"this expression `Deref`s to `{}` which implements `is_empty`\",\n+                            fcx.ty_to_string(deref_ty)\n+                        ),\n+                    );\n+                }\n+\n+                // Create a multipart suggestion: add `!` and `.is_empty()` in\n+                // place of the cast.\n+                let suggestion = vec![\n+                    (self.expr_span.shrink_to_lo(), \"!\".to_string()),\n+                    (self.span.with_lo(self.expr_span.hi()), \".is_empty()\".to_string()),\n+                ];\n+\n+                err.multipart_suggestion_verbose(format!(\n+                    \"consider using the `is_empty` method on `{}` to determine if it contains anything\",\n+                    fcx.ty_to_string(self.expr_ty),\n+                ),  suggestion, Applicability::MaybeIncorrect);\n+            }\n+        }\n+    }\n }"}, {"sha": "6cefaea2bc7da8af59508ff2cad32366ccce9d54", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -187,9 +187,9 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n                         },\n                         None => cx.emit_spanned_lint(USAGE_OF_TY_TYKIND, path.span, TykindDiag),\n                     }\n-                } else if !ty.span.from_expansion() && path.segments.len() > 1 && let Some(t) = is_ty_or_ty_ctxt(cx, &path) {\n+                } else if !ty.span.from_expansion() && path.segments.len() > 1 && let Some(ty) = is_ty_or_ty_ctxt(cx, &path) {\n                     cx.emit_spanned_lint(USAGE_OF_QUALIFIED_TY, path.span, TyQualified {\n-                        ty: t.clone(),\n+                        ty,\n                         suggestion: path.span,\n                     });\n                 }"}, {"sha": "392e13f2fa94165d802ac24c0913934dd5d43d1b", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -32,7 +32,7 @@ impl<'tcx> LateLintPass<'tcx> for PassByValue {\n                     cx.emit_spanned_lint(\n                         PASS_BY_VALUE,\n                         ty.span,\n-                        PassByValueDiag { ty: t.clone(), suggestion: ty.span },\n+                        PassByValueDiag { ty: t, suggestion: ty.span },\n                     );\n                 }\n             }"}, {"sha": "36791915964df75565cc6d3a1670fdc01b1e7f95", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -1095,17 +1095,21 @@ impl UnusedDelimLint for UnusedBraces {\n                 //      ```\n                 // - the block has no attribute and was not created inside a macro\n                 // - if the block is an `anon_const`, the inner expr must be a literal\n-                //      (do not lint `struct A<const N: usize>; let _: A<{ 2 + 3 }>;`)\n-                //\n+                //   not created by a macro, i.e. do not lint on:\n+                //      ```\n+                //      struct A<const N: usize>;\n+                //      let _: A<{ 2 + 3 }>;\n+                //      let _: A<{produces_literal!()}>;\n+                //      ```\n                 // FIXME(const_generics): handle paths when #67075 is fixed.\n                 if let [stmt] = inner.stmts.as_slice() {\n                     if let ast::StmtKind::Expr(ref expr) = stmt.kind {\n                         if !Self::is_expr_delims_necessary(expr, followed_by_block, false)\n                             && (ctx != UnusedDelimsCtx::AnonConst\n-                                || matches!(expr.kind, ast::ExprKind::Lit(_)))\n+                                || (matches!(expr.kind, ast::ExprKind::Lit(_))\n+                                    && !expr.span.from_expansion()))\n                             && !cx.sess().source_map().is_multiline(value.span)\n                             && value.attrs.is_empty()\n-                            && !expr.span.from_expansion()\n                             && !value.span.from_expansion()\n                             && !inner.span.from_expansion()\n                         {"}, {"sha": "6ca7cd3e71349e133fe079df1533211b89aa8c9b", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -3373,7 +3373,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         sugg.to_string(),\n                         Applicability::MaybeIncorrect,\n                     ))\n-                } else if res.is_none() {\n+                } else if res.is_none() && matches!(source, PathSource::Type) {\n                     this.report_missing_type_error(path)\n                 } else {\n                     None"}, {"sha": "97e56720b985260a6cfd1a04b87986339aea3deb", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -62,6 +62,7 @@ pub mod features;\n pub mod mir_opt_tests;\n pub mod pal;\n pub mod primitive_docs;\n+pub mod rustdoc_gui_tests;\n pub mod style;\n pub mod target_specific_tests;\n pub mod tests_placement;"}, {"sha": "0b9a1b37e947ec81b58a9c7f46aa1132e9994f27", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -80,6 +80,7 @@ fn main() {\n         check!(debug_artifacts, &tests_path);\n         check!(ui_tests, &tests_path);\n         check!(mir_opt_tests, &tests_path, bless);\n+        check!(rustdoc_gui_tests, &tests_path);\n \n         // Checks that only make sense for the compiler.\n         check!(error_codes, &root_path, &[&compiler_path, &librustdoc_path], verbose);"}, {"sha": "feb513df34bf71a09315227dc4f60fe635b30a64", "filename": "src/tools/tidy/src/rustdoc_gui_tests.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/src%2Ftools%2Ftidy%2Fsrc%2Frustdoc_gui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/src%2Ftools%2Ftidy%2Fsrc%2Frustdoc_gui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Frustdoc_gui_tests.rs?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -0,0 +1,33 @@\n+//! Tidy check to ensure that rustdoc GUI tests start with a small description.\n+\n+use std::path::Path;\n+\n+pub fn check(path: &Path, bad: &mut bool) {\n+    crate::walk::walk(\n+        &path.join(\"rustdoc-gui\"),\n+        &mut |p| {\n+            // If there is no extension, it's very likely a folder and we want to go into it.\n+            p.extension().map(|e| e != \"goml\").unwrap_or(false)\n+        },\n+        &mut |entry, content| {\n+            for line in content.lines() {\n+                if !line.starts_with(\"// \") {\n+                    tidy_error!(\n+                        bad,\n+                        \"{}: rustdoc-gui tests must start with a small description\",\n+                        entry.path().display(),\n+                    );\n+                    return;\n+                } else if line.starts_with(\"// \") {\n+                    let parts = line[2..].trim();\n+                    // We ignore tidy comments.\n+                    if parts.starts_with(\"// tidy-\") {\n+                        continue;\n+                    }\n+                    // All good!\n+                    return;\n+                }\n+            }\n+        },\n+    );\n+}"}, {"sha": "971c2f9480ea2fb00a6bb7f235af31d5865bec01", "filename": "tests/rustdoc-gui/basic-code.goml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Frustdoc-gui%2Fbasic-code.goml", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Frustdoc-gui%2Fbasic-code.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fbasic-code.goml?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -1,3 +1,5 @@\n+// Small test to ensure the \"src-line-numbers\" element is only present once on\n+// the page.\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n click: \".srclink\"\n wait-for: \".src-line-numbers\""}, {"sha": "fbebc80d91ced614a38fe76cf3acc64cf3313e9f", "filename": "tests/ui/cast/cast-as-bool.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Fcast%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Fcast%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast%2Fcast-as-bool.rs?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -2,8 +2,12 @@ fn main() {\n     let u = 5 as bool; //~ ERROR cannot cast as `bool`\n                        //~| HELP compare with zero instead\n                        //~| SUGGESTION 5 != 0\n+\n     let t = (1 + 2) as bool; //~ ERROR cannot cast as `bool`\n                              //~| HELP compare with zero instead\n                              //~| SUGGESTION (1 + 2) != 0\n-    let v = \"hello\" as bool; //~ ERROR casting `&'static str` as `bool` is invalid\n+\n+    let v = \"hello\" as bool;\n+    //~^ ERROR casting `&'static str` as `bool` is invalid\n+    //~| HELP consider using the `is_empty` method on `&'static str` to determine if it contains anything\n }"}, {"sha": "19ac8f10fec216abdaf92214f69d3086aeb1791b", "filename": "tests/ui/cast/cast-as-bool.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Fcast%2Fcast-as-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Fcast%2Fcast-as-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast%2Fcast-as-bool.stderr?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -5,16 +5,21 @@ LL |     let u = 5 as bool;\n    |             ^^^^^^^^^ help: compare with zero instead: `5 != 0`\n \n error[E0054]: cannot cast as `bool`\n-  --> $DIR/cast-as-bool.rs:5:13\n+  --> $DIR/cast-as-bool.rs:6:13\n    |\n LL |     let t = (1 + 2) as bool;\n    |             ^^^^^^^^^^^^^^^ help: compare with zero instead: `(1 + 2) != 0`\n \n error[E0606]: casting `&'static str` as `bool` is invalid\n-  --> $DIR/cast-as-bool.rs:8:13\n+  --> $DIR/cast-as-bool.rs:10:13\n    |\n LL |     let v = \"hello\" as bool;\n    |             ^^^^^^^^^^^^^^^\n+   |\n+help: consider using the `is_empty` method on `&'static str` to determine if it contains anything\n+   |\n+LL |     let v = !\"hello\".is_empty();\n+   |             +       ~~~~~~~~~~~\n \n error: aborting due to 3 previous errors\n "}, {"sha": "27e0816dd1c6a62336d4f2475b5acfc3a76226f2", "filename": "tests/ui/cast/issue-106883-is-empty.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Fcast%2Fissue-106883-is-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Fcast%2Fissue-106883-is-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast%2Fissue-106883-is-empty.rs?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -0,0 +1,27 @@\n+use std::ops::Deref;\n+\n+struct Foo;\n+\n+impl Deref for Foo {\n+    type Target = [u8];\n+\n+    fn deref(&self) -> &Self::Target {\n+        &[]\n+    }\n+}\n+\n+fn main() {\n+    let _ = \"foo\" as bool;\n+    //~^ ERROR casting `&'static str` as `bool` is invalid [E0606]\n+\n+    let _ = String::from(\"foo\") as bool;\n+    //~^ ERROR non-primitive cast: `String` as `bool` [E0605]\n+\n+    let _ = Foo as bool;\n+    //~^ ERROR non-primitive cast: `Foo` as `bool` [E0605]\n+}\n+\n+fn _slice(bar: &[i32]) -> bool {\n+    bar as bool\n+    //~^ ERROR casting `&[i32]` as `bool` is invalid [E0606]\n+}"}, {"sha": "7115c7704ca29dfd4af9160e2a748e6981767857", "filename": "tests/ui/cast/issue-106883-is-empty.stderr", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Fcast%2Fissue-106883-is-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Fcast%2Fissue-106883-is-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast%2Fissue-106883-is-empty.stderr?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -0,0 +1,58 @@\n+error[E0606]: casting `&'static str` as `bool` is invalid\n+  --> $DIR/issue-106883-is-empty.rs:14:13\n+   |\n+LL |     let _ = \"foo\" as bool;\n+   |             ^^^^^^^^^^^^^\n+   |\n+help: consider using the `is_empty` method on `&'static str` to determine if it contains anything\n+   |\n+LL |     let _ = !\"foo\".is_empty();\n+   |             +     ~~~~~~~~~~~\n+\n+error[E0605]: non-primitive cast: `String` as `bool`\n+  --> $DIR/issue-106883-is-empty.rs:17:13\n+   |\n+LL |     let _ = String::from(\"foo\") as bool;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+   |\n+note: this expression `Deref`s to `str` which implements `is_empty`\n+  --> $DIR/issue-106883-is-empty.rs:17:13\n+   |\n+LL |     let _ = String::from(\"foo\") as bool;\n+   |             ^^^^^^^^^^^^^^^^^^^\n+help: consider using the `is_empty` method on `String` to determine if it contains anything\n+   |\n+LL |     let _ = !String::from(\"foo\").is_empty();\n+   |             +                   ~~~~~~~~~~~\n+\n+error[E0605]: non-primitive cast: `Foo` as `bool`\n+  --> $DIR/issue-106883-is-empty.rs:20:13\n+   |\n+LL |     let _ = Foo as bool;\n+   |             ^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n+   |\n+note: this expression `Deref`s to `[u8]` which implements `is_empty`\n+  --> $DIR/issue-106883-is-empty.rs:20:13\n+   |\n+LL |     let _ = Foo as bool;\n+   |             ^^^\n+help: consider using the `is_empty` method on `Foo` to determine if it contains anything\n+   |\n+LL |     let _ = !Foo.is_empty();\n+   |             +   ~~~~~~~~~~~\n+\n+error[E0606]: casting `&[i32]` as `bool` is invalid\n+  --> $DIR/issue-106883-is-empty.rs:25:5\n+   |\n+LL |     bar as bool\n+   |     ^^^^^^^^^^^\n+   |\n+help: consider using the `is_empty` method on `&[i32]` to determine if it contains anything\n+   |\n+LL |     !bar.is_empty()\n+   |     +   ~~~~~~~~~~~\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0605, E0606.\n+For more information about an error, try `rustc --explain E0605`."}, {"sha": "e691fb37e6c43e51341367474a4fe12ac274edd0", "filename": "tests/ui/lint/unused_braces.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Flint%2Funused_braces.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Flint%2Funused_braces.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused_braces.fixed?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -50,4 +50,8 @@ fn main() {\n     if { return } {\n \n     }\n+\n+    // regression test for https://github.com/rust-lang/rust/issues/106899\n+    return println!(\"!\");\n+    //~^ WARN unnecessary braces\n }"}, {"sha": "0d260d2cbc93f5d82dcc96f0c1fee67871bbf273", "filename": "tests/ui/lint/unused_braces.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Flint%2Funused_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Flint%2Funused_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused_braces.rs?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -50,4 +50,8 @@ fn main() {\n     if { return } {\n \n     }\n+\n+    // regression test for https://github.com/rust-lang/rust/issues/106899\n+    return { println!(\"!\") };\n+    //~^ WARN unnecessary braces\n }"}, {"sha": "0b4a1c321805ddea51a8b4261d5794fd89b38efc", "filename": "tests/ui/lint/unused_braces.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Flint%2Funused_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Flint%2Funused_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Funused_braces.stderr?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -68,5 +68,17 @@ LL -     consume({ 7 });\n LL +     consume(7);\n    |\n \n-warning: 5 warnings emitted\n+warning: unnecessary braces around `return` value\n+  --> $DIR/unused_braces.rs:55:12\n+   |\n+LL |     return { println!(\"!\") };\n+   |            ^^             ^^\n+   |\n+help: remove these braces\n+   |\n+LL -     return { println!(\"!\") };\n+LL +     return println!(\"!\");\n+   |\n+\n+warning: 6 warnings emitted\n "}, {"sha": "2af7c2f6971484e925eafdc4d402dbf0de7be0c6", "filename": "tests/ui/suggestions/constrain-suggest-ice.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Fsuggestions%2Fconstrain-suggest-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Fsuggestions%2Fconstrain-suggest-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fconstrain-suggest-ice.stderr?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -24,16 +24,7 @@ error[E0425]: cannot find value `F` in this scope\n   --> $DIR/constrain-suggest-ice.rs:6:9\n    |\n LL |         F\n-   |         ^\n-   |\n-help: a local variable with a similar name exists\n-   |\n-LL |         x\n-   |         ~\n-help: you might be missing a type parameter\n-   |\n-LL | struct Bug<S, F>{\n-   |             +++\n+   |         ^ help: a local variable with a similar name exists: `x`\n \n error: generic `Self` types are currently not permitted in anonymous constants\n   --> $DIR/constrain-suggest-ice.rs:3:21"}, {"sha": "42cfe38aed888e0b8dd69e61f44a5f03c670c1ce", "filename": "tests/ui/typeck/issue-104513-ice.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a19e7604436056fafe10dffc7214fc6adb88400/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-104513-ice.stderr?ref=9a19e7604436056fafe10dffc7214fc6adb88400", "patch": "@@ -3,11 +3,6 @@ error[E0405]: cannot find trait `Oops` in this scope\n    |\n LL |     let _: S<impl Oops> = S;\n    |                   ^^^^ not found in this scope\n-   |\n-help: you might be missing a type parameter\n-   |\n-LL | fn f<Oops>() {\n-   |     ++++++\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in variable binding\n   --> $DIR/issue-104513-ice.rs:3:14"}]}