{"sha": "00b23e8d01cc5cc89b893c1d9072e0ebf1673ef4", "node_id": "C_kwDOAAsO6NoAKDAwYjIzZThkMDFjYzVjYzg5Yjg5M2MxZDkwNzJlMGViZjE2NzNlZjQ", "commit": {"author": {"name": "Albert Larsan", "email": "74931857+albertlarsan68@users.noreply.github.com", "date": "2022-12-14T17:02:58Z"}, "committer": {"name": "Albert Larsan", "email": "74931857+albertlarsan68@users.noreply.github.com", "date": "2022-12-27T13:54:37Z"}, "message": "Add rustfmt version check", "tree": {"sha": "367f86abc7793b95760b3c8ae4ef4f83c6df0dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/367f86abc7793b95760b3c8ae4ef4f83c6df0dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00b23e8d01cc5cc89b893c1d9072e0ebf1673ef4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQTou3NNtBmr78Wcak/5H7IMIOEwbAUCY6r5HQAKCRD5H7IMIOEw\nbLHPAP9KuLQUJshmkvXQbfmBnhKSG0N5g58rz6V8SBO1NITRmgEA/TKsGrJy5VG1\nd/luuS3YyM2XLVW8a5JG7Fq+6M7tcQU=\n=X1oa\n-----END PGP SIGNATURE-----", "payload": "tree 367f86abc7793b95760b3c8ae4ef4f83c6df0dd2\nparent 633a6c8b66a8a2e54d9545071312d4406fa195e5\nauthor Albert Larsan <74931857+albertlarsan68@users.noreply.github.com> 1671037378 +0100\ncommitter Albert Larsan <74931857+albertlarsan68@users.noreply.github.com> 1672149277 +0100\n\nAdd rustfmt version check\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00b23e8d01cc5cc89b893c1d9072e0ebf1673ef4", "html_url": "https://github.com/rust-lang/rust/commit/00b23e8d01cc5cc89b893c1d9072e0ebf1673ef4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00b23e8d01cc5cc89b893c1d9072e0ebf1673ef4/comments", "author": {"login": "albertlarsan68", "id": 74931857, "node_id": "MDQ6VXNlcjc0OTMxODU3", "avatar_url": "https://avatars.githubusercontent.com/u/74931857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertlarsan68", "html_url": "https://github.com/albertlarsan68", "followers_url": "https://api.github.com/users/albertlarsan68/followers", "following_url": "https://api.github.com/users/albertlarsan68/following{/other_user}", "gists_url": "https://api.github.com/users/albertlarsan68/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertlarsan68/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertlarsan68/subscriptions", "organizations_url": "https://api.github.com/users/albertlarsan68/orgs", "repos_url": "https://api.github.com/users/albertlarsan68/repos", "events_url": "https://api.github.com/users/albertlarsan68/events{/privacy}", "received_events_url": "https://api.github.com/users/albertlarsan68/received_events", "type": "User", "site_admin": false}, "committer": {"login": "albertlarsan68", "id": 74931857, "node_id": "MDQ6VXNlcjc0OTMxODU3", "avatar_url": "https://avatars.githubusercontent.com/u/74931857?v=4", "gravatar_id": "", "url": "https://api.github.com/users/albertlarsan68", "html_url": "https://github.com/albertlarsan68", "followers_url": "https://api.github.com/users/albertlarsan68/followers", "following_url": "https://api.github.com/users/albertlarsan68/following{/other_user}", "gists_url": "https://api.github.com/users/albertlarsan68/gists{/gist_id}", "starred_url": "https://api.github.com/users/albertlarsan68/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/albertlarsan68/subscriptions", "organizations_url": "https://api.github.com/users/albertlarsan68/orgs", "repos_url": "https://api.github.com/users/albertlarsan68/repos", "events_url": "https://api.github.com/users/albertlarsan68/events{/privacy}", "received_events_url": "https://api.github.com/users/albertlarsan68/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "633a6c8b66a8a2e54d9545071312d4406fa195e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/633a6c8b66a8a2e54d9545071312d4406fa195e5", "html_url": "https://github.com/rust-lang/rust/commit/633a6c8b66a8a2e54d9545071312d4406fa195e5"}], "stats": {"total": 85, "additions": 70, "deletions": 15}, "files": [{"sha": "985f34ff92f2c4ac1d57f456dd73f5e0b21813d1", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 70, "deletions": 15, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/00b23e8d01cc5cc89b893c1d9072e0ebf1673ef4/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00b23e8d01cc5cc89b893c1d9072e0ebf1673ef4/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=00b23e8d01cc5cc89b893c1d9072e0ebf1673ef4", "patch": "@@ -1,7 +1,7 @@\n //! Runs rustfmt on the repository.\n \n use crate::builder::Builder;\n-use crate::util::{output, t};\n+use crate::util::{output, program_out_of_date, t};\n use ignore::WalkBuilder;\n use std::collections::VecDeque;\n use std::path::{Path, PathBuf};\n@@ -44,6 +44,68 @@ fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> impl F\n     }\n }\n \n+fn verify_timestamp(build: &Builder<'_>) -> bool {\n+    let stamp_file = {\n+        let mut s = build.out.clone();\n+        s.push(\"rustfmt.stamp\");\n+        s\n+    };\n+\n+    let mut cmd = Command::new(match build.initial_rustfmt() {\n+        Some(p) => p,\n+        None => return false,\n+    });\n+    cmd.arg(\"--version\");\n+    let output = match cmd.output() {\n+        Ok(status) => status,\n+        Err(_) => return false,\n+    };\n+    if !output.status.success() {\n+        return false;\n+    }\n+    let version = String::from_utf8(output.stdout).unwrap();\n+    !program_out_of_date(&stamp_file, &version)\n+}\n+\n+fn update_timestamp(build: &Builder<'_>) {\n+    let stamp_file = {\n+        let mut s = build.out.clone();\n+        s.push(\"rustfmt.stamp\");\n+        s\n+    };\n+\n+    let mut cmd = Command::new(match build.initial_rustfmt() {\n+        Some(p) => p,\n+        None => return,\n+    });\n+    cmd.arg(\"--version\");\n+    let output = match cmd.output() {\n+        Ok(status) => status,\n+        Err(_) => return,\n+    };\n+    if !output.status.success() {\n+        return;\n+    }\n+    let version = String::from_utf8(output.stdout).unwrap();\n+\n+    t!(std::fs::write(stamp_file, version))\n+}\n+\n+fn get_modified_files(build: &Builder<'_>) -> Option<Vec<String>> {\n+    let Ok(remote) = get_rust_lang_rust_remote() else {return None;};\n+    if !verify_timestamp(build) {\n+        return None;\n+    }\n+    let base =\n+        output(build.config.git().arg(\"merge-base\").arg(\"HEAD\").arg(format!(\"{remote}/master\")));\n+    Some(\n+        output(build.config.git().arg(\"diff\").arg(\"--name-only\").arg(base.trim()))\n+            .lines()\n+            .map(|s| s.trim().to_owned())\n+            .collect(),\n+    )\n+}\n+\n /// Finds the remote for rust-lang/rust.\n /// For example for these remotes it will return `upstream`.\n /// ```text\n@@ -140,20 +202,11 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n                 ignore_fmt.add(&format!(\"!/{}\", untracked_path)).expect(&untracked_path);\n             }\n             if !check && paths.is_empty() {\n-                let remote = t!(get_rust_lang_rust_remote());\n-                let base = output(\n-                    build\n-                        .config\n-                        .git()\n-                        .arg(\"merge-base\")\n-                        .arg(\"HEAD\")\n-                        .arg(format!(\"{remote}/master\")),\n-                );\n-                let files =\n-                    output(build.config.git().arg(\"diff\").arg(\"--name-only\").arg(base.trim()));\n-                for file in files.lines() {\n-                    println!(\"formatting modified file {file}\");\n-                    ignore_fmt.add(&format!(\"/{file}\")).expect(file);\n+                if let Some(files) = get_modified_files(build) {\n+                    for file in files {\n+                        println!(\"formatting modified file {file}\");\n+                        ignore_fmt.add(&format!(\"/{file}\")).expect(&file);\n+                    }\n                 }\n             }\n         } else {\n@@ -233,4 +286,6 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n     drop(tx);\n \n     thread.join().unwrap();\n+\n+    update_timestamp(build);\n }"}]}