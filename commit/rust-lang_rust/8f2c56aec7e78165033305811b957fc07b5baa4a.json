{"sha": "8f2c56aec7e78165033305811b957fc07b5baa4a", "node_id": "C_kwDOAAsO6NoAKDhmMmM1NmFlYzdlNzgxNjUwMzMzMDU4MTFiOTU3ZmMwN2I1YmFhNGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-21T23:42:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-21T23:42:01Z"}, "message": "Auto merge of #103375 - matthiaskrgr:rollup-4xrs7f2, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #102635 (make `order_dependent_trait_objects` show up in future-breakage reports)\n - #103335 (Replaced wrong test with the correct mcve)\n - #103339 (Fix some typos)\n - #103340 (WinConsole::new is not actually fallible)\n - #103341 (Add test for issue 97607)\n - #103351 (Require Drop impls to have the same constness on its bounds as the bounds on the struct have)\n - #103359 (Remove incorrect comment in `Vec::drain`)\n - #103364 (rustdoc: clean up rustdoc-toggle CSS)\n - #103370 (rustdoc: remove unused CSS `.out-of-band { font-weight: normal }`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "95215c870eef4dd28e34b3df9aee174a79d5d368", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95215c870eef4dd28e34b3df9aee174a79d5d368"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f2c56aec7e78165033305811b957fc07b5baa4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f2c56aec7e78165033305811b957fc07b5baa4a", "html_url": "https://github.com/rust-lang/rust/commit/8f2c56aec7e78165033305811b957fc07b5baa4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f2c56aec7e78165033305811b957fc07b5baa4a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c8bff74bc1c52bef0c79f3689bb227f51f3e82d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c8bff74bc1c52bef0c79f3689bb227f51f3e82d", "html_url": "https://github.com/rust-lang/rust/commit/5c8bff74bc1c52bef0c79f3689bb227f51f3e82d"}, {"sha": "1d3aa7bce7192dad0c6686feb6ad41bd20fed935", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3aa7bce7192dad0c6686feb6ad41bd20fed935", "html_url": "https://github.com/rust-lang/rust/commit/1d3aa7bce7192dad0c6686feb6ad41bd20fed935"}], "stats": {"total": 456, "additions": 293, "deletions": 163}, "files": [{"sha": "6e5ba556ef0793570719f30e9dc54328d0551f99", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 49, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -252,20 +252,6 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn visit_struct_field_def(&mut self, field: &'a FieldDef) {\n-        if let Some(ident) = field.ident {\n-            if ident.name == kw::Underscore {\n-                self.visit_vis(&field.vis);\n-                self.visit_ident(ident);\n-                self.visit_ty_common(&field.ty);\n-                self.walk_ty(&field.ty);\n-                walk_list!(self, visit_attribute, &field.attrs);\n-                return;\n-            }\n-        }\n-        self.visit_field_def(field);\n-    }\n-\n     fn err_handler(&self) -> &rustc_errors::Handler {\n         &self.session.diagnostic()\n     }\n@@ -1006,8 +992,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_lifetime(self, lifetime);\n     }\n \n-    fn visit_field_def(&mut self, s: &'a FieldDef) {\n-        visit::walk_field_def(self, s)\n+    fn visit_field_def(&mut self, field: &'a FieldDef) {\n+        visit::walk_field_def(self, field)\n     }\n \n     fn visit_item(&mut self, item: &'a Item) {\n@@ -1195,42 +1181,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.check_mod_file_item_asciionly(item.ident);\n                 }\n             }\n-            ItemKind::Struct(ref vdata, ref generics) => match vdata {\n-                // Duplicating the `Visitor` logic allows catching all cases\n-                // of `Anonymous(Struct, Union)` outside of a field struct or union.\n-                //\n-                // Inside `visit_ty` the validator catches every `Anonymous(Struct, Union)` it\n-                // encounters, and only on `ItemKind::Struct` and `ItemKind::Union`\n-                // it uses `visit_ty_common`, which doesn't contain that specific check.\n-                VariantData::Struct(ref fields, ..) => {\n-                    self.visit_vis(&item.vis);\n-                    self.visit_ident(item.ident);\n-                    self.visit_generics(generics);\n-                    self.with_banned_assoc_ty_bound(|this| {\n-                        walk_list!(this, visit_struct_field_def, fields);\n-                    });\n-                    walk_list!(self, visit_attribute, &item.attrs);\n-                    return;\n-                }\n-                _ => {}\n-            },\n-            ItemKind::Union(ref vdata, ref generics) => {\n+            ItemKind::Union(ref vdata, ..) => {\n                 if vdata.fields().is_empty() {\n                     self.err_handler().span_err(item.span, \"unions cannot have zero fields\");\n                 }\n-                match vdata {\n-                    VariantData::Struct(ref fields, ..) => {\n-                        self.visit_vis(&item.vis);\n-                        self.visit_ident(item.ident);\n-                        self.visit_generics(generics);\n-                        self.with_banned_assoc_ty_bound(|this| {\n-                            walk_list!(this, visit_struct_field_def, fields);\n-                        });\n-                        walk_list!(self, visit_attribute, &item.attrs);\n-                        return;\n-                    }\n-                    _ => {}\n-                }\n             }\n             ItemKind::Const(def, .., None) => {\n                 self.check_defaultness(item.span, def);"}, {"sha": "406f0270dcc1b50587a35354ad677152f7287f47", "filename": "compiler/rustc_data_structures/src/sso/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Fset.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -27,7 +27,7 @@ pub struct SsoHashSet<T> {\n     map: SsoHashMap<T, ()>,\n }\n \n-/// Adapter function used ot return\n+/// Adapter function used to return\n /// result if SsoHashMap functions into\n /// result SsoHashSet should return.\n #[inline(always)]"}, {"sha": "3d55ffc595f5369b8df7752b5152ff18d684555b", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -184,13 +184,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n             let p = p.kind();\n             match (predicate.skip_binder(), p.skip_binder()) {\n                 (ty::PredicateKind::Trait(a), ty::PredicateKind::Trait(b)) => {\n-                    // Since struct predicates cannot have ~const, project the impl predicate\n-                    // onto one that ignores the constness. This is equivalent to saying that\n-                    // we match a `Trait` bound on the struct with a `Trait` or `~const Trait`\n-                    // in the impl.\n-                    let non_const_a =\n-                        ty::TraitPredicate { constness: ty::BoundConstness::NotConst, ..a };\n-                    relator.relate(predicate.rebind(non_const_a), p.rebind(b)).is_ok()\n+                    relator.relate(predicate.rebind(a), p.rebind(b)).is_ok()\n                 }\n                 (ty::PredicateKind::Projection(a), ty::PredicateKind::Projection(b)) => {\n                     relator.relate(predicate.rebind(a), p.rebind(b)).is_ok()"}, {"sha": "61ee467f595770942a2a92addcc400f2fff0e6e4", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -1427,6 +1427,7 @@ declare_lint! {\n     \"trait-object types were treated as different depending on marker-trait order\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #56484 <https://github.com/rust-lang/rust/issues/56484>\",\n+        reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,\n     };\n }\n "}, {"sha": "a7e86141a04ee3ff3f759684506361279c914377", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -51,7 +51,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         match ty::Instance::resolve_opt_const_arg(\n             self, param_env,\n-            // FIXME: maybe have a seperate version for resolving mir::UnevaluatedConst?\n+            // FIXME: maybe have a separate version for resolving mir::UnevaluatedConst?\n             ct.def, ct.substs,\n         ) {\n             Ok(Some(instance)) => {"}, {"sha": "c8276854016f0bc273fe044403fdd786f6b1a8f2", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -264,7 +264,7 @@ fn project_and_unify_type<'cx, 'tcx>(\n     };\n     debug!(?normalized, ?obligations, \"project_and_unify_type result\");\n     let actual = obligation.predicate.term;\n-    // For an example where this is neccessary see src/test/ui/impl-trait/nested-return-type2.rs\n+    // For an example where this is necessary see src/test/ui/impl-trait/nested-return-type2.rs\n     // This allows users to omit re-mentioning all bounds on an associated type and just use an\n     // `impl Trait` for the assoc type to add more bounds.\n     let InferOk { value: actual, obligations: new } ="}, {"sha": "6a71f08330ca9563bcc34b0522f5762fbebbe859", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -1999,9 +1999,7 @@ impl<T, A: Allocator> Vec<T, A> {\n         unsafe {\n             // set self.vec length's to start, to be safe in case Drain is leaked\n             self.set_len(start);\n-            // Use the borrow in the IterMut to indicate borrowing behavior of the\n-            // whole Drain iterator (like &mut T).\n-            let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);\n+            let range_slice = slice::from_raw_parts(self.as_ptr().add(start), end - start);\n             Drain {\n                 tail_start: end,\n                 tail_len: len - end,"}, {"sha": "a14b0d4f5a96233b18b1e1fe55700dcd41866a86", "filename": "library/test/src/term.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/library%2Ftest%2Fsrc%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/library%2Ftest%2Fsrc%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fterm.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn stdout() -> Option<Box<StdoutTerminal>> {\n pub(crate) fn stdout() -> Option<Box<StdoutTerminal>> {\n     TerminfoTerminal::new(io::stdout())\n         .map(|t| Box::new(t) as Box<StdoutTerminal>)\n-        .or_else(|| WinConsole::new(io::stdout()).ok().map(|t| Box::new(t) as Box<StdoutTerminal>))\n+        .or_else(|| Some(Box::new(WinConsole::new(io::stdout())) as Box<StdoutTerminal>))\n }\n \n /// Terminal color definitions"}, {"sha": "55020141a827db9481a720c80df7e3a6ccd0c267", "filename": "library/test/src/term/win.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/library%2Ftest%2Fsrc%2Fterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/library%2Ftest%2Fsrc%2Fterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fterm%2Fwin.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -113,8 +113,7 @@ impl<T: Write + Send + 'static> WinConsole<T> {\n         }\n     }\n \n-    /// Returns `None` whenever the terminal cannot be created for some reason.\n-    pub(crate) fn new(out: T) -> io::Result<WinConsole<T>> {\n+    pub(crate) fn new(out: T) -> WinConsole<T> {\n         use std::mem::MaybeUninit;\n \n         let fg;\n@@ -132,13 +131,13 @@ impl<T: Write + Send + 'static> WinConsole<T> {\n                 bg = color::BLACK;\n             }\n         }\n-        Ok(WinConsole {\n+        WinConsole {\n             buf: out,\n             def_foreground: fg,\n             def_background: bg,\n             foreground: fg,\n             background: bg,\n-        })\n+        }\n     }\n }\n "}, {"sha": "9785e1f54c1a42db42c15f5e570ac1e5fd994bca", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -634,7 +634,6 @@ pre.example-line-numbers {\n .out-of-band {\n \tflex-grow: 0;\n \tfont-size: 1.125rem;\n-\tfont-weight: normal;\n }\n \n .docblock code, .docblock-short code,\n@@ -1536,6 +1535,7 @@ details.dir-entry a {\n \thttps://developer.mozilla.org/en-US/docs/Web/CSS/contain */\n details.rustdoc-toggle {\n \tcontain: layout;\n+\tposition: relative;\n }\n \n /* The hideme class is used on summary tags that contain a span with\n@@ -1629,10 +1629,6 @@ details.rustdoc-toggle[open] > summary.hideme {\n \tposition: absolute;\n }\n \n-details.rustdoc-toggle {\n-\tposition: relative;\n-}\n-\n details.rustdoc-toggle[open] > summary.hideme > span {\n \tdisplay: none;\n }\n@@ -1983,8 +1979,8 @@ in storage.js\n \t}\n }\n \n-.method-toggle summary,\n-.implementors-toggle summary,\n+.method-toggle > summary,\n+.implementors-toggle > summary,\n .impl,\n #implementors-list > .docblock,\n .impl-items > section,\n@@ -1993,10 +1989,7 @@ in storage.js\n \tmargin-bottom: 0.75em;\n }\n \n-.method-toggle[open]:not(:last-child) {\n-\tmargin-bottom: 2em;\n-}\n-\n+.method-toggle[open]:not(:last-child),\n .implementors-toggle[open]:not(:last-child) {\n \tmargin-bottom: 2em;\n }"}, {"sha": "9ae571efbb587e64a604d98b04b28ba1b9845cb6", "filename": "src/test/rustdoc-gui/docblock-details.goml", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Frustdoc-gui%2Fdocblock-details.goml", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Frustdoc-gui%2Fdocblock-details.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-details.goml?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -21,3 +21,14 @@ assert-property: (\".top-doc .docblock summary h4\", {\"offsetHeight\": \"33\"})\n assert-css: (\".top-doc .docblock summary h4\", {\"margin-top\": \"15px\", \"margin-bottom\": \"5px\"})\n // So `33 + 15 + 5` == `53`\n assert-property: (\".top-doc .docblock summary\", {\"offsetHeight\": \"53\"})\n+\n+// We now check the `<summary>` on a method.\n+assert-css: (\n+    \".method-toggle .docblock summary h4\",\n+    {\"border-bottom-width\": \"0px\"},\n+)\n+// This allows to ensure that summary is on one line only!\n+assert-property: (\".method-toggle .docblock summary h4\", {\"offsetHeight\": \"30\"})\n+assert-css: (\".method-toggle .docblock summary h4\", {\"margin-top\": \"15px\", \"margin-bottom\": \"5px\"})\n+// So `30 + 15 + 5` == `50`\n+assert-property: (\".method-toggle .docblock summary\", {\"offsetHeight\": \"50\"})"}, {"sha": "fdf97e492aa2babfa90a77af89e0e9203e864c86", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -317,6 +317,18 @@ pub mod details {\n     /// <div>I'm the content of the details!</div>\n     /// </details>\n     pub struct Details;\n+\n+    impl Details {\n+        /// We check the appearance of the `<details>`/`<summary>` in here.\n+        ///\n+        /// ## Hello\n+        ///\n+        /// <details>\n+        /// <summary><h4>I'm a summary</h4></summary>\n+        /// <div>I'm the content of the details!</div>\n+        /// </details>\n+        pub fn method() {}\n+    }\n }\n \n pub mod doc_block_table {"}, {"sha": "74c910ad0bba6855b4ccfb7b2ae0be80236bf729", "filename": "src/test/ui/closures/issue-97607.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Fclosures%2Fissue-97607.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Fclosures%2Fissue-97607.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-97607.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+#[allow(unused)]\n+\n+fn test<T, F, U>(f: F) -> Box<dyn Fn(T) -> U + 'static>\n+where\n+    F: 'static + Fn(T) -> U,\n+    for<'a> U: 'a, // < This is the problematic line, see #97607\n+{\n+    Box::new(move |t| f(t))\n+}\n+\n+fn main() {}"}, {"sha": "3f72734efa1dce3535b610a4007e66b98a062b75", "filename": "src/test/ui/generic-associated-types/bugs/issue-89008.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5c8bff74bc1c52bef0c79f3689bb227f51f3e82d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c8bff74bc1c52bef0c79f3689bb227f51f3e82d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr?ref=5c8bff74bc1c52bef0c79f3689bb227f51f3e82d", "patch": "@@ -1,19 +0,0 @@\n-error[E0271]: type mismatch resolving `<Empty<_> as Stream>::Item == Repr`\n-  --> $DIR/issue-89008.rs:38:43\n-   |\n-LL |     fn line_stream<'a, Repr>(&'a self) -> Self::LineStreamFut<'a, Repr> {\n-   |                        ----               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Empty<_> as Stream>::Item == Repr`\n-   |                        |\n-   |                        this type parameter\n-   |\n-note: expected this to be `()`\n-  --> $DIR/issue-89008.rs:17:17\n-   |\n-LL |     type Item = ();\n-   |                 ^^\n-   = note:   expected unit type `()`\n-           found type parameter `Repr`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0271`."}, {"sha": "dec668bec10edd262f6b5133b62c89cbe154d646", "filename": "src/test/ui/generic-associated-types/bugs/issue-91762.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-91762.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -1,7 +1,7 @@\n // check-fail\n // known-bug\n \n-// We almost certaintly want this to pass, but\n+// We almost certainly want this to pass, but\n // it's particularly difficult currently, because we need a way of specifying\n // that `<Self::Base as Functor>::With<T> = Self` without using that when we have\n // a `U`. See `https://github.com/rust-lang/rust/pull/92728` for a (hacky)"}, {"sha": "669dbafb5d5deb038e23aa43b7d0ea5a13c6123c", "filename": "src/test/ui/generic-associated-types/issue-89008.rs", "status": "renamed", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-89008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-89008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-89008.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -1,42 +1,36 @@\n-// check-fail\n+// check-pass\n // edition:2021\n-// known-bug: #88908\n-\n-// This should pass, but seems to run into a TAIT bug.\n \n #![feature(type_alias_impl_trait)]\n \n use std::future::Future;\n+use std::marker::PhantomData;\n \n trait Stream {\n     type Item;\n }\n \n-struct Empty<T>(T);\n-impl<T> Stream for Empty<T> {\n-    type Item = ();\n+struct Empty<T> {\n+    _phantom: PhantomData<T>,\n }\n-fn empty<T>() -> Empty<T> {\n-    todo!()\n+\n+impl<T> Stream for Empty<T> {\n+    type Item = T;\n }\n \n trait X {\n     type LineStream<'a, Repr>: Stream<Item = Repr> where Self: 'a;\n-\n-    type LineStreamFut<'a,Repr>: Future<Output = Self::LineStream<'a, Repr>> where Self: 'a;\n-\n-    fn line_stream<'a,Repr>(&'a self) -> Self::LineStreamFut<'a,Repr>;\n+    type LineStreamFut<'a, Repr>: Future<Output = Self::LineStream<'a, Repr>> where Self: 'a;\n+    fn line_stream<'a, Repr>(&'a self) -> Self::LineStreamFut<'a, Repr>;\n }\n \n struct Y;\n \n impl X for Y {\n     type LineStream<'a, Repr> = impl Stream<Item = Repr>;\n-\n-    type LineStreamFut<'a, Repr> = impl Future<Output = Self::LineStream<'a, Repr>> ;\n-\n+    type LineStreamFut<'a, Repr> = impl Future<Output = Self::LineStream<'a, Repr>>;\n     fn line_stream<'a, Repr>(&'a self) -> Self::LineStreamFut<'a, Repr> {\n-        async {empty()}\n+        async { Empty { _phantom: PhantomData } }\n     }\n }\n ", "previous_filename": "src/test/ui/generic-associated-types/bugs/issue-89008.rs"}, {"sha": "a5442dd82f028171868e7ca89c238f40f212f0c2", "filename": "src/test/ui/let-else/let-else-non-diverging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -11,7 +11,7 @@ fn main() {\n \n     // Ensure that uninhabited types do not \"diverge\".\n     // This might be relaxed in the future, but when it is,\n-    // it should be an explicitly wanted descision.\n+    // it should be an explicitly wanted decision.\n     let Some(x) = Some(1) else { foo::<Uninhabited>() }; //~ ERROR does not diverge\n }\n "}, {"sha": "2cc4d382d9df939c3983bab516809376193a34c1", "filename": "src/test/ui/lint/lint-incoherent-auto-trait-objects.stderr", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -37,3 +37,45 @@ LL | impl Foo for dyn Send + Sync + Send {}\n \n error: aborting due to 3 previous errors\n \n+Future incompatibility report: Future breakage diagnostic:\n+error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + 'static)`: (E0119)\n+  --> $DIR/lint-incoherent-auto-trait-objects.rs:5:1\n+   |\n+LL | impl Foo for dyn Send {}\n+   | --------------------- first implementation here\n+LL |\n+LL | impl Foo for dyn Send + Send {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n+   = note: `#[deny(order_dependent_trait_objects)]` on by default\n+\n+Future breakage diagnostic:\n+error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+  --> $DIR/lint-incoherent-auto-trait-objects.rs:11:1\n+   |\n+LL | impl Foo for dyn Send + Sync {}\n+   | ---------------------------- first implementation here\n+LL |\n+LL | impl Foo for dyn Sync + Send {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n+   = note: `#[deny(order_dependent_trait_objects)]` on by default\n+\n+Future breakage diagnostic:\n+error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+  --> $DIR/lint-incoherent-auto-trait-objects.rs:15:1\n+   |\n+LL | impl Foo for dyn Sync + Send {}\n+   | ---------------------------- first implementation here\n+...\n+LL | impl Foo for dyn Send + Sync + Send {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n+   = note: `#[deny(order_dependent_trait_objects)]` on by default\n+"}, {"sha": "796c0d388eaf04226d67b1c94e4647bb9b751a05", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 43, "deletions": 22, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -45,34 +45,55 @@ note: required by a bound in `check`\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n \n-error[E0277]: the trait bound `ConstDropImplWithBounds<NonTrivialDrop>: ~const Destruct` is not satisfied\n+error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n+  --> $DIR/const-drop-fail.rs:48:47\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |     ----------------------------------------- ^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail.rs:48:47\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |                                               ^^^^^^^^^^^\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:35\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n+  --> $DIR/const-drop-fail.rs:48:5\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+   |\n+note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n   --> $DIR/const-drop-fail.rs:48:5\n    |\n-LL |         const _: () = check($exp);\n-   |                       ----- required by a bound introduced by this call\n-...\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `ConstDropImplWithBounds<NonTrivialDrop>`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:35\n    |\n-note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n-  --> $DIR/const-drop-fail.rs:29:25\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error[E0367]: `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n+  --> $DIR/const-drop-fail.rs:55:9\n    |\n-LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n-   |                         ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: 1 redundant requirement hidden\n-   = note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n-note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:35:19\n+LL | impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n+   |         ^^^^^^^^\n    |\n-LL | const fn check<T: ~const Destruct>(_: T) {}\n-   |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n-help: consider borrowing here\n+note: the implementor must specify the same requirement\n+  --> $DIR/const-drop-fail.rs:53:1\n    |\n-LL |     &ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     +\n-LL |     &mut ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ++++\n+LL | struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0367.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "d36c7f81ced8cf7b98c06760fffe88b71d564eb4", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -24,7 +24,7 @@ trait A { fn a() { } }\n \n impl A for NonTrivialDrop {}\n \n-struct ConstDropImplWithBounds<T: A>(PhantomData<T>);\n+struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n \n impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n     fn drop(&mut self) {\n@@ -47,6 +47,16 @@ check_all! {\n     //~^ ERROR can't drop\n     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n     //~^ ERROR the trait bound\n+    //~| ERROR the trait bound\n+}\n+\n+struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n+\n+impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n+//~^ ERROR `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n+    fn drop(&mut self) {\n+        T::a();\n+    }\n }\n \n fn main() {}"}, {"sha": "796c0d388eaf04226d67b1c94e4647bb9b751a05", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 43, "deletions": 22, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -45,34 +45,55 @@ note: required by a bound in `check`\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n \n-error[E0277]: the trait bound `ConstDropImplWithBounds<NonTrivialDrop>: ~const Destruct` is not satisfied\n+error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n+  --> $DIR/const-drop-fail.rs:48:47\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |     ----------------------------------------- ^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n+  --> $DIR/const-drop-fail.rs:48:47\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |                                               ^^^^^^^^^^^\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:35\n+   |\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error[E0277]: the trait bound `NonTrivialDrop: ~const A` is not satisfied\n+  --> $DIR/const-drop-fail.rs:48:5\n+   |\n+LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const A` is not implemented for `NonTrivialDrop`\n+   |\n+note: the trait `A` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n   --> $DIR/const-drop-fail.rs:48:5\n    |\n-LL |         const _: () = check($exp);\n-   |                       ----- required by a bound introduced by this call\n-...\n LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `ConstDropImplWithBounds<NonTrivialDrop>`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `ConstDropImplWithBounds`\n+  --> $DIR/const-drop-fail.rs:27:35\n    |\n-note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n-  --> $DIR/const-drop-fail.rs:29:25\n+LL | struct ConstDropImplWithBounds<T: ~const A>(PhantomData<T>);\n+   |                                   ^^^^^^^^ required by this bound in `ConstDropImplWithBounds`\n+\n+error[E0367]: `Drop` impl requires `T: ~const A` but the struct it is implemented for does not\n+  --> $DIR/const-drop-fail.rs:55:9\n    |\n-LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n-   |                         ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: 1 redundant requirement hidden\n-   = note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n-note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:35:19\n+LL | impl<T: ~const A> const Drop for ConstDropImplWithNonConstBounds<T> {\n+   |         ^^^^^^^^\n    |\n-LL | const fn check<T: ~const Destruct>(_: T) {}\n-   |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n-help: consider borrowing here\n+note: the implementor must specify the same requirement\n+  --> $DIR/const-drop-fail.rs:53:1\n    |\n-LL |     &ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     +\n-LL |     &mut ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n-   |     ++++\n+LL | struct ConstDropImplWithNonConstBounds<T: A>(PhantomData<T>);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0367.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "b0fc3adf984a48c240678357962e2f9bdcda22ff", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -60,7 +60,7 @@ mod t {\n         fn foo() {}\n     }\n \n-    pub struct ConstDropWithBound<T: SomeTrait>(pub core::marker::PhantomData<T>);\n+    pub struct ConstDropWithBound<T: ~const SomeTrait>(pub core::marker::PhantomData<T>);\n \n     impl<T: ~const SomeTrait> const Drop for ConstDropWithBound<T> {\n         fn drop(&mut self) {"}, {"sha": "285cef571f332329098c109b7f38f5d8acac8db2", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde_const_on_impl_bound.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde_const_on_impl_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde_const_on_impl_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde_const_on_impl_bound.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+#![feature(const_trait_impl)]\n+\n+#[const_trait]\n+trait Foo {\n+    fn foo(&self) {}\n+}\n+\n+struct Bar<T>(T);\n+\n+impl<T: ~const Foo> Bar<T> {\n+    const fn foo(&self) {\n+        self.0.foo()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "58286648d4feb403b968e5128689bea45c9746dc", "filename": "src/test/ui/traits/issue-33140-hack-boundaries.stderr", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Ftraits%2Fissue-33140-hack-boundaries.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Ftraits%2Fissue-33140-hack-boundaries.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-33140-hack-boundaries.stderr?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -66,3 +66,20 @@ error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0119, E0751.\n For more information about an error, try `rustc --explain E0119`.\n+Future incompatibility report: Future breakage diagnostic:\n+warning: conflicting implementations of trait `Trait0` for type `(dyn std::marker::Send + 'static)`: (E0119)\n+  --> $DIR/issue-33140-hack-boundaries.rs:10:1\n+   |\n+LL | impl Trait0 for dyn Send {}\n+   | ------------------------ first implementation here\n+LL | impl Trait0 for dyn Send {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n+note: the lint level is defined here\n+  --> $DIR/issue-33140-hack-boundaries.rs:2:10\n+   |\n+LL | #![allow(order_dependent_trait_objects)]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "0af4df2aecb28d393682e59d40dc482b0daa5ddf", "filename": "src/test/ui/traits/object/issue-33140-traitobject-crate.stderr", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-33140-traitobject-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-33140-traitobject-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fobject%2Fissue-33140-traitobject-crate.stderr?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -40,3 +40,56 @@ LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send + Sync { }\n \n warning: 3 warnings emitted\n \n+Future incompatibility report: Future breakage diagnostic:\n+warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+  --> $DIR/issue-33140-traitobject-crate.rs:86:1\n+   |\n+LL | unsafe impl Trait for dyn (::std::marker::Send) + Sync { }\n+   | ------------------------------------------------------ first implementation here\n+LL | unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n+note: the lint level is defined here\n+  --> $DIR/issue-33140-traitobject-crate.rs:3:9\n+   |\n+LL | #![warn(order_dependent_trait_objects)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Future breakage diagnostic:\n+warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+  --> $DIR/issue-33140-traitobject-crate.rs:89:1\n+   |\n+LL | unsafe impl Trait for dyn (::std::marker::Send) + Send + Sync { }\n+   | ------------------------------------------------------------- first implementation here\n+...\n+LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n+note: the lint level is defined here\n+  --> $DIR/issue-33140-traitobject-crate.rs:3:9\n+   |\n+LL | #![warn(order_dependent_trait_objects)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+Future breakage diagnostic:\n+warning: conflicting implementations of trait `Trait` for type `(dyn std::marker::Send + std::marker::Sync + 'static)`: (E0119)\n+  --> $DIR/issue-33140-traitobject-crate.rs:93:1\n+   |\n+LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send { }\n+   | ------------------------------------------------------ first implementation here\n+...\n+LL | unsafe impl Trait for dyn (::std::marker::Sync) + Send + Sync { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #56484 <https://github.com/rust-lang/rust/issues/56484>\n+note: the lint level is defined here\n+  --> $DIR/issue-33140-traitobject-crate.rs:3:9\n+   |\n+LL | #![warn(order_dependent_trait_objects)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "6986ad6217240423c3772114e11ddbb9fa3c943a", "filename": "src/test/ui/traits/trait-upcasting/multiple-occurrence-ambiguousity.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.rs?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "previous_filename": "src/test/ui/traits/trait-upcasting/multiple-occurence-ambiguousity.rs"}, {"sha": "9564813512c4af5bf9e8eb0c42a76a802efa43b9", "filename": "src/test/ui/traits/trait-upcasting/multiple-occurrence-ambiguousity.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f2c56aec7e78165033305811b957fc07b5baa4a/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple-occurrence-ambiguousity.stderr?ref=8f2c56aec7e78165033305811b957fc07b5baa4a", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/multiple-occurence-ambiguousity.rs:21:26\n+  --> $DIR/multiple-occurrence-ambiguousity.rs:21:26\n    |\n LL |     let t: &dyn Bar<_> = s;\n    |            -----------   ^ expected trait `Bar`, found trait `Foo`", "previous_filename": "src/test/ui/traits/trait-upcasting/multiple-occurence-ambiguousity.stderr"}]}