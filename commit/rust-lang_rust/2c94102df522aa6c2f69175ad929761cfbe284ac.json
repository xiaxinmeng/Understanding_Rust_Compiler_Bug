{"sha": "2c94102df522aa6c2f69175ad929761cfbe284ac", "node_id": "C_kwDOAAsO6NoAKDJjOTQxMDJkZjUyMmFhNmMyZjY5MTc1YWQ5Mjk3NjFjZmJlMjg0YWM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-08T02:34:22Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-08T02:52:57Z"}, "message": "Generator return doesn't need to be a lang item", "tree": {"sha": "07a46aa87b60b07a06ef0144ccd2f866b9401d63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07a46aa87b60b07a06ef0144ccd2f866b9401d63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c94102df522aa6c2f69175ad929761cfbe284ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c94102df522aa6c2f69175ad929761cfbe284ac", "html_url": "https://github.com/rust-lang/rust/commit/2c94102df522aa6c2f69175ad929761cfbe284ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c94102df522aa6c2f69175ad929761cfbe284ac/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2804e6ec2c29a5c7368600ea173b890e2655c3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2804e6ec2c29a5c7368600ea173b890e2655c3d", "html_url": "https://github.com/rust-lang/rust/commit/c2804e6ec2c29a5c7368600ea173b890e2655c3d"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "ea17c1de9b70037c48ce828ea917c16e0434f591", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c94102df522aa6c2f69175ad929761cfbe284ac/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c94102df522aa6c2f69175ad929761cfbe284ac/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=2c94102df522aa6c2f69175ad929761cfbe284ac", "patch": "@@ -238,7 +238,6 @@ language_item_table! {\n     Future,                  sym::future_trait,        future_trait,               Target::Trait,          GenericRequirement::Exact(0);\n     GeneratorState,          sym::generator_state,     gen_state,                  Target::Enum,           GenericRequirement::None;\n     Generator,               sym::generator,           gen_trait,                  Target::Trait,          GenericRequirement::Minimum(1);\n-    GeneratorReturn,         sym::generator_return,    generator_return,           Target::AssocTy,        GenericRequirement::None;\n     Unpin,                   sym::unpin,               unpin_trait,                Target::Trait,          GenericRequirement::None;\n     Pin,                     sym::pin,                 pin_type,                   Target::Struct,         GenericRequirement::None;\n "}, {"sha": "b46813e08f10e78679c420020133eb52f91d2f32", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c94102df522aa6c2f69175ad929761cfbe284ac/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c94102df522aa6c2f69175ad929761cfbe284ac/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=2c94102df522aa6c2f69175ad929761cfbe284ac", "patch": "@@ -916,8 +916,10 @@ pub trait PrettyPrinter<'tcx>:\n                         // Skip printing `<[generator@] as Generator<_>>::Return` from async blocks,\n                         // unless we can find out what generator return type it comes from.\n                         let term = if let Some(ty) = term.skip_binder().ty()\n-                            && let ty::Projection(ty::ProjectionTy { item_def_id, substs }) = ty.kind()\n-                            && Some(*item_def_id) == tcx.lang_items().generator_return()\n+                            && let ty::Projection(proj) = ty.kind()\n+                            && let assoc = tcx.associated_item(proj.item_def_id)\n+                            && assoc.trait_container(tcx) == tcx.lang_items().gen_trait()\n+                            && assoc.name == rustc_span::sym::Return\n                         {\n                             if let ty::Generator(_, substs, _) = substs.type_at(0).kind() {\n                                 let return_ty = substs.as_generator().return_ty();"}, {"sha": "363a2f53e10689b204dcde927148ea4760c87179", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c94102df522aa6c2f69175ad929761cfbe284ac/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c94102df522aa6c2f69175ad929761cfbe284ac/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=2c94102df522aa6c2f69175ad929761cfbe284ac", "patch": "@@ -763,7 +763,6 @@ symbols! {\n         gen_future,\n         gen_kill,\n         generator,\n-        generator_return,\n         generator_state,\n         generators,\n         generic_arg_infer,"}, {"sha": "3ebd6f8cdbdc03e598b2d2c0a1d55c2b05a1533f", "filename": "library/core/src/ops/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c94102df522aa6c2f69175ad929761cfbe284ac/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c94102df522aa6c2f69175ad929761cfbe284ac/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fgenerator.rs?ref=2c94102df522aa6c2f69175ad929761cfbe284ac", "patch": "@@ -83,7 +83,7 @@ pub trait Generator<R = ()> {\n     /// `return` statement or implicitly as the last expression of a generator\n     /// literal. For example futures would use this as `Result<T, E>` as it\n     /// represents a completed future.\n-    #[lang = \"generator_return\"]\n+    #[cfg_attr(bootstrap, lang = \"generator_return\")]\n     type Return;\n \n     /// Resumes the execution of this generator."}]}