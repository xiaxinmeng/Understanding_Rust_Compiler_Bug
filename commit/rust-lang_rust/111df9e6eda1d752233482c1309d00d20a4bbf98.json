{"sha": "111df9e6eda1d752233482c1309d00d20a4bbf98", "node_id": "C_kwDOAAsO6NoAKDExMWRmOWU2ZWRhMWQ3NTIyMzM0ODJjMTMwOWQwMGQyMGE0YmJmOTg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-03T13:28:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-07T14:01:43Z"}, "message": "Reword comments and rename HIR visiting methods.", "tree": {"sha": "2d75a6031c84a0d86b5d0513fbc60f342765b9f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d75a6031c84a0d86b5d0513fbc60f342765b9f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/111df9e6eda1d752233482c1309d00d20a4bbf98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/111df9e6eda1d752233482c1309d00d20a4bbf98", "html_url": "https://github.com/rust-lang/rust/commit/111df9e6eda1d752233482c1309d00d20a4bbf98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/111df9e6eda1d752233482c1309d00d20a4bbf98/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c461f7a16e8372216dbf7a54ab86ee958bec83b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c461f7a16e8372216dbf7a54ab86ee958bec83b5", "html_url": "https://github.com/rust-lang/rust/commit/c461f7a16e8372216dbf7a54ab86ee958bec83b5"}], "stats": {"total": 218, "additions": 113, "deletions": 105}, "files": [{"sha": "531d9f14040217c86c2580c1fe08ae187a561665", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -19,7 +19,7 @@\n //!    - Example: Examine each expression to look for its type and do some check or other.\n //!    - How: Implement `intravisit::Visitor` and override the `NestedFilter` type to\n //!      `nested_filter::OnlyBodies` (and implement `nested_visit_map`), and use\n-//!      `tcx.hir().deep_visit_all_item_likes(&mut visitor)`. Within your\n+//!      `tcx.hir().visit_all_item_likes_in_crate(&mut visitor)`. Within your\n //!      `intravisit::Visitor` impl, implement methods like `visit_expr()` (don't forget to invoke\n //!      `intravisit::walk_expr()` to keep walking the subparts).\n //!    - Pro: Visitor methods for any kind of HIR node, not just item-like things.\n@@ -190,7 +190,7 @@ use nested_filter::NestedFilter;\n /// (this is why the module is called `intravisit`, to distinguish it\n /// from the AST's `visit` module, which acts differently). If you\n /// simply want to visit all items in the crate in some order, you\n-/// should call `Crate::visit_all_items`. Otherwise, see the comment\n+/// should call `tcx.hir().visit_all_item_likes_in_crate`. Otherwise, see the comment\n /// on `visit_nested_item` for details on how to visit nested items.\n ///\n /// If you want to ensure that your code handles every variant"}, {"sha": "93528b4514b56ed250f5af5cbab4353a7dbda7a9", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -75,7 +75,7 @@ pub fn assert_dep_graph(tcx: TyCtxt<'_>) {\n             let mut visitor =\n                 IfThisChanged { tcx, if_this_changed: vec![], then_this_would_need: vec![] };\n             visitor.process_attrs(hir::CRATE_HIR_ID);\n-            tcx.hir().deep_visit_all_item_likes(&mut visitor);\n+            tcx.hir().visit_all_item_likes_in_crate(&mut visitor);\n             (visitor.if_this_changed, visitor.then_this_would_need)\n         };\n "}, {"sha": "0442cbc0c932ec46c830a2c71dd70b76073db11e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -419,7 +419,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             return;\n         }\n \n-        self.tcx.hir().deep_visit_all_item_likes(self);\n+        self.tcx.hir().visit_all_item_likes_in_crate(self);\n     }\n \n     fn encode_def_path_table(&mut self) {"}, {"sha": "419ce2996fb6014815221aa9babd752c8de6ecbe", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -568,7 +568,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    /// Walks the contents of a crate. See also `Crate::visit_all_items`.\n+    /// Walks the contents of the local crate. See also `visit_all_item_likes_in_crate`.\n     pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {\n         let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);\n         visitor.visit_mod(top_mod, span, hir_id);\n@@ -588,53 +588,61 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    /// Visits all items in the crate in some deterministic (but\n-    /// unspecified) order. If you need to process every item,\n-    /// and care about nesting -- usually because your algorithm\n-    /// follows lexical scoping rules -- then this method is the best choice.\n-    /// If you don't care about nesting, you should use the `tcx.hir_crate_items()` query\n-    /// or `items()` instead.\n+    /// Visits all item-likes in the crate in some deterministic (but unspecified) order. If you\n+    /// need to process every item-like, and don't care about visiting nested items in a particular\n+    /// order then this method is the best choice.  If you do care about this nesting, you should\n+    /// use the `tcx.hir().walk_toplevel_module`.\n+    ///\n+    /// Note that this function will access HIR for all the item-likes in the crate.  If you only\n+    /// need to access some of them, it is usually better to manually loop on the iterators\n+    /// provided by `tcx.hir_crate_items(())`.\n     ///\n     /// Please see the notes in `intravisit.rs` for more information.\n-    pub fn deep_visit_all_item_likes<V>(self, visitor: &mut V)\n+    pub fn visit_all_item_likes_in_crate<V>(self, visitor: &mut V)\n     where\n         V: Visitor<'hir>,\n     {\n-        let krate = self.krate();\n-        for owner in krate.owners.iter().filter_map(|i| i.as_owner()) {\n-            match owner.node() {\n-                OwnerNode::Item(item) => visitor.visit_item(item),\n-                OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),\n-                OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),\n-                OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),\n-                OwnerNode::Crate(_) => {}\n-            }\n+        let krate = self.tcx.hir_crate_items(());\n+\n+        for id in krate.items() {\n+            visitor.visit_item(self.item(id));\n+        }\n+\n+        for id in krate.trait_items() {\n+            visitor.visit_trait_item(self.trait_item(id));\n+        }\n+\n+        for id in krate.impl_items() {\n+            visitor.visit_impl_item(self.impl_item(id));\n+        }\n+\n+        for id in krate.foreign_items() {\n+            visitor.visit_foreign_item(self.foreign_item(id));\n         }\n     }\n \n-    /// If you don't care about nesting, you should use the\n-    /// `tcx.hir_module_items()` query or `module_items()` instead.\n-    /// Please see notes in `deep_visit_all_item_likes`.\n-    pub fn deep_visit_item_likes_in_module<V>(self, module: LocalDefId, visitor: &mut V)\n+    /// This method is the equivalent of `visit_all_item_likes_in_crate` but restricted to\n+    /// item-likes in a single module.\n+    pub fn visit_item_likes_in_module<V>(self, module: LocalDefId, visitor: &mut V)\n     where\n         V: Visitor<'hir>,\n     {\n         let module = self.tcx.hir_module_items(module);\n \n-        for id in module.items.iter() {\n-            visitor.visit_item(self.item(*id));\n+        for id in module.items() {\n+            visitor.visit_item(self.item(id));\n         }\n \n-        for id in module.trait_items.iter() {\n-            visitor.visit_trait_item(self.trait_item(*id));\n+        for id in module.trait_items() {\n+            visitor.visit_trait_item(self.trait_item(id));\n         }\n \n-        for id in module.impl_items.iter() {\n-            visitor.visit_impl_item(self.impl_item(*id));\n+        for id in module.impl_items() {\n+            visitor.visit_impl_item(self.impl_item(id));\n         }\n \n-        for id in module.foreign_items.iter() {\n-            visitor.visit_foreign_item(self.foreign_item(*id));\n+        for id in module.foreign_items() {\n+            visitor.visit_foreign_item(self.foreign_item(id));\n         }\n     }\n "}, {"sha": "6896837aa910966677d84e094b80954da807ee87", "filename": "compiler/rustc_middle/src/hir/nested_filter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fnested_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fnested_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fnested_filter.rs?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::intravisit::nested_filter::NestedFilter;\n /// constant arguments of types, e.g. in `let _: [(); /* HERE */];`.\n ///\n /// **This is the most common choice.** A very common pattern is\n-/// to use `deep_visit_all_item_likes()` as an outer loop,\n+/// to use `visit_all_item_likes_in_crate()` as an outer loop,\n /// and to have the visitor that visits the contents of each item\n /// using this setting.\n pub struct OnlyBodies(());"}, {"sha": "0887775aae5ede857061e273182d92cfa010fad8", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -173,7 +173,7 @@ fn mir_keys(tcx: TyCtxt<'_>, (): ()) -> FxIndexSet<LocalDefId> {\n             intravisit::walk_struct_def(self, v)\n         }\n     }\n-    tcx.hir().deep_visit_all_item_likes(&mut GatherCtors { tcx, set: &mut set });\n+    tcx.hir().visit_all_item_likes_in_crate(&mut GatherCtors { tcx, set: &mut set });\n \n     set\n }"}, {"sha": "d0723c68a77e8158269a0f0831359d9d7fea4804", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -2428,7 +2428,7 @@ fn check_non_exported_macro_for_invalid_attrs(tcx: TyCtxt<'_>, item: &Item<'_>)\n \n fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let check_attr_visitor = &mut CheckAttrVisitor { tcx };\n-    tcx.hir().deep_visit_item_likes_in_module(module_def_id, check_attr_visitor);\n+    tcx.hir().visit_item_likes_in_module(module_def_id, check_attr_visitor);\n     if module_def_id.is_top_level_module() {\n         check_attr_visitor.check_attributes(CRATE_HIR_ID, DUMMY_SP, Target::Mod, None);\n         check_invalid_crate_level_attr(tcx, tcx.hir().krate_attrs());"}, {"sha": "31c159c1f75621d3ab9bc8d2fad4f7f0f0a92bc3", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -56,7 +56,7 @@ impl NonConstExpr {\n \n fn check_mod_const_bodies(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let mut vis = CheckConstVisitor::new(tcx);\n-    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut vis);\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut vis);\n }\n \n pub(crate) fn provide(providers: &mut Providers) {"}, {"sha": "9deb0042ff3608c52053238212985fdda7d048dc", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -28,7 +28,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n                 errors: &errors,\n             };\n \n-            tcx.hir().deep_visit_item_likes_in_module(module_id, &mut v);\n+            tcx.hir().visit_item_likes_in_module(module_id, &mut v);\n         });\n \n         let errors = errors.into_inner();"}, {"sha": "0070c0699a4aa765365107733a509b17f1e8638e", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -140,7 +140,7 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_>) -> String {\n }\n \n fn check_mod_liveness(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut IrMaps::new(tcx));\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut IrMaps::new(tcx));\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "68b2a052391fa60e8cb0be0dfdaeb1bf04f186ed", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -31,7 +31,7 @@ struct CheckLoopVisitor<'a, 'hir> {\n }\n \n fn check_mod_loops(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().deep_visit_item_likes_in_module(\n+    tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut CheckLoopVisitor { sess: &tcx.sess, hir_map: tcx.hir(), cx: Normal },\n     );"}, {"sha": "20765abf392803f414e18093e03edfec990b1790", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -14,7 +14,7 @@ use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n fn check_mod_naked_functions(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut CheckNakedFunctions { tcx });\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckNakedFunctions { tcx });\n }\n \n pub(crate) fn provide(providers: &mut Providers) {"}, {"sha": "12050dceb60a60a84e8f950ed878a87422caba58", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -660,7 +660,7 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors.\n fn check_mod_unstable_api_usage(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut Checker { tcx });\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut Checker { tcx });\n }\n \n pub(crate) fn provide(providers: &mut Providers) {\n@@ -890,7 +890,7 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n         let mut missing = MissingStabilityAnnotations { tcx, access_levels };\n         missing.check_missing_stability(CRATE_DEF_ID, tcx.hir().span(CRATE_HIR_ID));\n         tcx.hir().walk_toplevel_module(&mut missing);\n-        tcx.hir().deep_visit_all_item_likes(&mut missing);\n+        tcx.hir().visit_all_item_likes_in_crate(&mut missing);\n     }\n \n     let declared_lang_features = &tcx.features().declared_lang_features;"}, {"sha": "44b9c8392f86bfb64cf7aefe0d2ee2a6e6898c20", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -59,7 +59,7 @@ struct OnlySelfBounds(bool);\n // Main entry point\n \n fn collect_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n-    tcx.hir().deep_visit_item_likes_in_module(module_def_id, &mut CollectItemTypesVisitor { tcx });\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut CollectItemTypesVisitor { tcx });\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "c0fe8b49cfd1ba1357f9b989b98aafb9259b18fb", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -303,7 +303,7 @@ pub(crate) fn run(\n         // Run call-finder on all items\n         let mut calls = FxHashMap::default();\n         let mut finder = FindCalls { calls: &mut calls, tcx, map: tcx.hir(), cx, target_crates };\n-        tcx.hir().deep_visit_all_item_likes(&mut finder);\n+        tcx.hir().visit_all_item_likes_in_crate(&mut finder);\n \n         // Sort call locations within a given file in document order\n         for fn_calls in calls.values_mut() {"}, {"sha": "cfe1e62d9318fd59b605b917215d27f02dfe6087", "filename": "src/test/ui/dep-graph/dep-graph-struct-signature.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-struct-signature.stderr?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -16,12 +16,6 @@ error: no path from `WillChange` to `trait_def`\n LL |     #[rustc_then_this_would_need(trait_def)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:32:9\n-   |\n-LL |         #[rustc_then_this_would_need(fn_sig)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: OK\n   --> $DIR/dep-graph-struct-signature.rs:36:5\n    |\n@@ -52,36 +46,12 @@ error: OK\n LL |     #[rustc_then_this_would_need(type_of)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:48:9\n-   |\n-LL |         #[rustc_then_this_would_need(fn_sig)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:49:9\n-   |\n-LL |         #[rustc_then_this_would_need(typeck)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: OK\n   --> $DIR/dep-graph-struct-signature.rs:53:5\n    |\n LL |     #[rustc_then_this_would_need(type_of)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:55:9\n-   |\n-LL |         #[rustc_then_this_would_need(fn_sig)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: OK\n-  --> $DIR/dep-graph-struct-signature.rs:56:9\n-   |\n-LL |         #[rustc_then_this_would_need(typeck)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: OK\n   --> $DIR/dep-graph-struct-signature.rs:61:9\n    |\n@@ -106,12 +76,6 @@ error: no path from `WillChange` to `type_of`\n LL |     #[rustc_then_this_would_need(type_of)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: no path from `WillChange` to `fn_sig`\n-  --> $DIR/dep-graph-struct-signature.rs:77:9\n-   |\n-LL |         #[rustc_then_this_would_need(fn_sig)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: no path from `WillChange` to `fn_sig`\n   --> $DIR/dep-graph-struct-signature.rs:81:5\n    |\n@@ -130,5 +94,41 @@ error: no path from `WillChange` to `typeck`\n LL |     #[rustc_then_this_would_need(typeck)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: OK\n+  --> $DIR/dep-graph-struct-signature.rs:32:9\n+   |\n+LL |         #[rustc_then_this_would_need(fn_sig)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: no path from `WillChange` to `fn_sig`\n+  --> $DIR/dep-graph-struct-signature.rs:77:9\n+   |\n+LL |         #[rustc_then_this_would_need(fn_sig)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: OK\n+  --> $DIR/dep-graph-struct-signature.rs:48:9\n+   |\n+LL |         #[rustc_then_this_would_need(fn_sig)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: OK\n+  --> $DIR/dep-graph-struct-signature.rs:49:9\n+   |\n+LL |         #[rustc_then_this_would_need(typeck)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: OK\n+  --> $DIR/dep-graph-struct-signature.rs:55:9\n+   |\n+LL |         #[rustc_then_this_would_need(fn_sig)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: OK\n+  --> $DIR/dep-graph-struct-signature.rs:56:9\n+   |\n+LL |         #[rustc_then_this_would_need(typeck)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to 22 previous errors\n "}, {"sha": "42ac803b22ece2b36eb37d65231a6320430da7f1", "filename": "src/test/ui/dep-graph/dep-graph-type-alias.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-type-alias.stderr?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -28,30 +28,12 @@ error: no path from `TypeAlias` to `type_of`\n LL | #[rustc_then_this_would_need(type_of)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: OK\n-  --> $DIR/dep-graph-type-alias.rs:36:5\n-   |\n-LL |     #[rustc_then_this_would_need(fn_sig)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: no path from `TypeAlias` to `type_of`\n   --> $DIR/dep-graph-type-alias.rs:42:1\n    |\n LL | #[rustc_then_this_would_need(type_of)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: OK\n-  --> $DIR/dep-graph-type-alias.rs:44:5\n-   |\n-LL |     #[rustc_then_this_would_need(fn_sig)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: OK\n-  --> $DIR/dep-graph-type-alias.rs:45:5\n-   |\n-LL |     #[rustc_then_this_would_need(typeck)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: OK\n   --> $DIR/dep-graph-type-alias.rs:49:1\n    |\n@@ -70,5 +52,23 @@ error: OK\n LL | #[rustc_then_this_would_need(typeck)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: OK\n+  --> $DIR/dep-graph-type-alias.rs:36:5\n+   |\n+LL |     #[rustc_then_this_would_need(fn_sig)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: OK\n+  --> $DIR/dep-graph-type-alias.rs:44:5\n+   |\n+LL |     #[rustc_then_this_would_need(fn_sig)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: OK\n+  --> $DIR/dep-graph-type-alias.rs:45:5\n+   |\n+LL |     #[rustc_then_this_would_need(typeck)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to 12 previous errors\n "}, {"sha": "10978728fa365bf766d55f63e94c6a077c38521c", "filename": "src/test/ui/stability-attribute/missing-const-stability.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/111df9e6eda1d752233482c1309d00d20a4bbf98/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/111df9e6eda1d752233482c1309d00d20a4bbf98/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr?ref=111df9e6eda1d752233482c1309d00d20a4bbf98", "patch": "@@ -4,12 +4,6 @@ error: function has missing const stability attribute\n LL | pub const fn foo() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: associated function has missing const stability attribute\n-  --> $DIR/missing-const-stability.rs:15:5\n-   |\n-LL |     pub const fn foo() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-\n error: implementation has missing const stability attribute\n   --> $DIR/missing-const-stability.rs:27:1\n    |\n@@ -19,5 +13,11 @@ LL | |     fn fun() {}\n LL | | }\n    | |_^\n \n+error: associated function has missing const stability attribute\n+  --> $DIR/missing-const-stability.rs:15:5\n+   |\n+LL |     pub const fn foo() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to 3 previous errors\n "}]}