{"sha": "04b8bda51582b06c5af8bf2fbacd58f264c9f6f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YjhiZGE1MTU4MmIwNmM1YWY4YmYyZmJhY2Q1OGYyNjRjOWY2ZjA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-01-16T10:59:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-16T10:59:03Z"}, "message": "Merge #2860\n\n2860: Minimize visibility r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b06e700f4a8a038252852618f4a5ada06ca69f5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b06e700f4a8a038252852618f4a5ada06ca69f5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04b8bda51582b06c5af8bf2fbacd58f264c9f6f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeIEH3CRBK7hj4Ov3rIwAAdHIIABJSaWBGSjCfqHXjHu5YasNc\nDK1i9DaCIqTBClGH0PFJhQuJOvaUI2BsOY5MRq9L7mZSBIwyUlIG5zBKzCi2r7rK\n9ICu4y5oSoS/gISrryagqCM1HtH+bPtfQlDkoC74D6QtKd/z4WVEXxEmgsNm4to5\nS+2hB9HEAx2yoZQh0S6nzuwGsjK3O+ERL3wTDCJ03s0X+/2i+A0hqzhp+NpDinsD\nq+5wimkcbt/vLWtmv+evctFEkgXY3fP+SPWL61DaTz/0FENYn+2nNTj+psFGs/AT\nZpaLOr1/KYUcvQQhETCLX1oDcrK371GLTip+Eu9TbpyrExV5nU0BITG8+Po6om4=\n=WsX/\n-----END PGP SIGNATURE-----\n", "payload": "tree b06e700f4a8a038252852618f4a5ada06ca69f5b\nparent c78d269b66dd7e02321bf447eef1375c81f66a1e\nparent bd96d0b258437cbfcaba5d0a6a79813eaa5f29fe\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1579172343 +0000\ncommitter GitHub <noreply@github.com> 1579172343 +0000\n\nMerge #2860\n\n2860: Minimize visibility r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04b8bda51582b06c5af8bf2fbacd58f264c9f6f0", "html_url": "https://github.com/rust-lang/rust/commit/04b8bda51582b06c5af8bf2fbacd58f264c9f6f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04b8bda51582b06c5af8bf2fbacd58f264c9f6f0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c78d269b66dd7e02321bf447eef1375c81f66a1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c78d269b66dd7e02321bf447eef1375c81f66a1e", "html_url": "https://github.com/rust-lang/rust/commit/c78d269b66dd7e02321bf447eef1375c81f66a1e"}, {"sha": "bd96d0b258437cbfcaba5d0a6a79813eaa5f29fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd96d0b258437cbfcaba5d0a6a79813eaa5f29fe", "html_url": "https://github.com/rust-lang/rust/commit/bd96d0b258437cbfcaba5d0a6a79813eaa5f29fe"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "594caffe2231cd10c142044f06c095912a4e4dcc", "filename": "crates/ra_lsp_server/src/cargo_target_spec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04b8bda51582b06c5af8bf2fbacd58f264c9f6f0/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b8bda51582b06c5af8bf2fbacd58f264c9f6f0/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs?ref=04b8bda51582b06c5af8bf2fbacd58f264c9f6f0", "patch": "@@ -63,7 +63,7 @@ impl CargoTargetSpec {\n             None => return Ok(None),\n         };\n         let file_id = world.analysis().crate_root(crate_id)?;\n-        let path = world.vfs.read().file2path(ra_vfs::VfsFile(file_id.0));\n+        let path = world.file_id_to_path(file_id);\n         let res = world.workspaces.iter().find_map(|ws| match ws {\n             ProjectWorkspace::Cargo { cargo, .. } => {\n                 let tgt = cargo.target_by_root(&path)?;"}, {"sha": "8e43f057577fb434e285aa573f262ba1df663c74", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04b8bda51582b06c5af8bf2fbacd58f264c9f6f0/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b8bda51582b06c5af8bf2fbacd58f264c9f6f0/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=04b8bda51582b06c5af8bf2fbacd58f264c9f6f0", "patch": "@@ -681,10 +681,12 @@ pub fn handle_code_action(\n             continue;\n         }\n \n-        let edits = vec![TextEdit::new(fix.location.range, fix.replacement.clone())];\n-        let mut edit_map = std::collections::HashMap::new();\n-        edit_map.insert(fix.location.uri.clone(), edits);\n-        let edit = WorkspaceEdit::new(edit_map);\n+        let edit = {\n+            let edits = vec![TextEdit::new(fix.location.range, fix.replacement.clone())];\n+            let mut edit_map = std::collections::HashMap::new();\n+            edit_map.insert(fix.location.uri.clone(), edits);\n+            WorkspaceEdit::new(edit_map)\n+        };\n \n         let action = CodeAction {\n             title: fix.title.clone(),"}, {"sha": "e7a0acfc7fa11258bfbe9b603889961ab7b2cd2f", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04b8bda51582b06c5af8bf2fbacd58f264c9f6f0/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04b8bda51582b06c5af8bf2fbacd58f264c9f6f0/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=04b8bda51582b06c5af8bf2fbacd58f264c9f6f0", "patch": "@@ -62,9 +62,9 @@ pub struct WorldSnapshot {\n     pub options: Options,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis: Analysis,\n-    pub vfs: Arc<RwLock<Vfs>>,\n     pub latest_requests: Arc<RwLock<LatestRequests>>,\n     pub check_watcher: Arc<RwLock<CheckState>>,\n+    vfs: Arc<RwLock<Vfs>>,\n }\n \n impl WorldState {\n@@ -265,6 +265,10 @@ impl WorldSnapshot {\n         Ok(url)\n     }\n \n+    pub fn file_id_to_path(&self, id: FileId) -> PathBuf {\n+        self.vfs.read().file2path(VfsFile(id.0))\n+    }\n+\n     pub fn file_line_endings(&self, id: FileId) -> LineEndings {\n         self.vfs.read().file_line_endings(VfsFile(id.0))\n     }"}]}