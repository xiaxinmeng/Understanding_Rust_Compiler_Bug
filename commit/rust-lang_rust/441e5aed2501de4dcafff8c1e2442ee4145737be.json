{"sha": "441e5aed2501de4dcafff8c1e2442ee4145737be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MWU1YWVkMjUwMWRlNGRjYWZmZjhjMWUyNDQyZWU0MTQ1NzM3YmU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-03T21:36:45Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-09T14:50:51Z"}, "message": "Remove `#[feature(custom_attribute)]`", "tree": {"sha": "ad8a31eb1cfc7296066acebba1e15df707360baf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad8a31eb1cfc7296066acebba1e15df707360baf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/441e5aed2501de4dcafff8c1e2442ee4145737be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/441e5aed2501de4dcafff8c1e2442ee4145737be", "html_url": "https://github.com/rust-lang/rust/commit/441e5aed2501de4dcafff8c1e2442ee4145737be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/441e5aed2501de4dcafff8c1e2442ee4145737be/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a223a917378f439fd9107e26ee7355f5f92c62d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a223a917378f439fd9107e26ee7355f5f92c62d", "html_url": "https://github.com/rust-lang/rust/commit/3a223a917378f439fd9107e26ee7355f5f92c62d"}], "stats": {"total": 121, "additions": 60, "deletions": 61}, "files": [{"sha": "9eb6baeb4ba8cbfacfb4b8386522f2ce5ccac1d3", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=441e5aed2501de4dcafff8c1e2442ee4145737be", "patch": "@@ -44,8 +44,6 @@ pub enum NonMacroAttrKind {\n     Registered,\n     /// Single-segment custom attribute registered by a legacy plugin (`register_attribute`).\n     LegacyPluginHelper,\n-    /// Single-segment custom attribute not registered in any way (`#[my_attr]`).\n-    Custom,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n@@ -333,7 +331,6 @@ impl NonMacroAttrKind {\n             NonMacroAttrKind::DeriveHelper => \"derive helper attribute\",\n             NonMacroAttrKind::Registered => \"explicitly registered attribute\",\n             NonMacroAttrKind::LegacyPluginHelper => \"legacy plugin helper attribute\",\n-            NonMacroAttrKind::Custom => \"custom attribute\",\n         }\n     }\n }"}, {"sha": "3f4b87a97c7736fc59452cec0578c3821e2808fa", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=441e5aed2501de4dcafff8c1e2442ee4145737be", "patch": "@@ -101,7 +101,6 @@ impl<'a> Registry<'a> {\n \n     /// Register an attribute with an attribute type.\n     ///\n-    /// Registered attributes will bypass the `custom_attribute` feature gate.\n     /// `Whitelisted` attributes will additionally not trigger the `unused_attribute`\n     /// lint. `CrateLevel` attributes will not be allowed on anything other than a crate.\n     pub fn register_attribute(&mut self, name: Symbol, ty: AttributeType) {"}, {"sha": "1138716d591c13827e7bb92ce7d364b5b1d5142f", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=441e5aed2501de4dcafff8c1e2442ee4145737be", "patch": "@@ -732,20 +732,7 @@ impl<'a> Resolver<'a> {\n             return Ok(binding);\n         }\n \n-        let determinacy = Determinacy::determined(determinacy == Determinacy::Determined || force);\n-        if determinacy == Determinacy::Determined && macro_kind == Some(MacroKind::Attr) &&\n-           self.session.features_untracked().custom_attribute {\n-            // For single-segment attributes interpret determinate \"no resolution\" as a custom\n-            // attribute. (Lexical resolution implies the first segment and attr kind should imply\n-            // the last segment, so we are certainly working with a single-segment attribute here.)\n-            assert!(ns == MacroNS);\n-            let binding = (Res::NonMacroAttr(NonMacroAttrKind::Custom),\n-                           ty::Visibility::Public, orig_ident.span, ExpnId::root())\n-                           .to_name_binding(self.arenas);\n-            Ok(binding)\n-        } else {\n-            Err(determinacy)\n-        }\n+        Err(Determinacy::determined(determinacy == Determinacy::Determined || force))\n     }\n \n     crate fn finalize_macro_resolutions(&mut self) {\n@@ -756,16 +743,7 @@ impl<'a> Resolver<'a> {\n                     // Make sure compilation does not succeed if preferred macro resolution\n                     // has changed after the macro had been expanded. In theory all such\n                     // situations should be reported as ambiguity errors, so this is a bug.\n-                    if initial_res == Res::NonMacroAttr(NonMacroAttrKind::Custom) {\n-                        // Yeah, legacy custom attributes are implemented using forced resolution\n-                        // (which is a best effort error recovery tool, basically), so we can't\n-                        // promise their resolution won't change later.\n-                        let msg = format!(\"inconsistent resolution for a macro: first {}, then {}\",\n-                                          initial_res.descr(), res.descr());\n-                        this.session.span_err(span, &msg);\n-                    } else {\n-                        span_bug!(span, \"inconsistent resolution for a macro\");\n-                    }\n+                    span_bug!(span, \"inconsistent resolution for a macro\");\n                 }\n             } else {\n                 // It's possible that the macro was unresolved (indeterminate) and silently"}, {"sha": "319ca5fd3e22011a2e209b9e6a0f8c0fac4dfa68", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=441e5aed2501de4dcafff8c1e2442ee4145737be", "patch": "@@ -265,9 +265,6 @@ declare_features! (\n     /// Allows the use of SIMD types in functions declared in `extern` blocks.\n     (active, simd_ffi, \"1.0.0\", Some(27731), None),\n \n-    /// Allows using custom attributes (RFC 572).\n-    (active, custom_attribute, \"1.0.0\", Some(29642), None),\n-\n     /// Allows using non lexical lifetimes (RFC 2094).\n     (active, nll, \"1.0.0\", Some(43234), None),\n "}, {"sha": "f0aa74c65df62e11e72499c2e63988b3dc98613b", "filename": "src/libsyntax/feature_gate/removed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs?ref=441e5aed2501de4dcafff8c1e2442ee4145737be", "patch": "@@ -67,6 +67,9 @@ declare_features! (\n      Some(\"merged into `#![feature(slice_patterns)]`\")),\n     (removed, macro_reexport, \"1.0.0\", Some(29638), None,\n      Some(\"subsumed by `pub use`\")),\n+    /// Allows using custom attributes (RFC 572).\n+    (removed, custom_attribute, \"1.0.0\", Some(29642), None,\n+     Some(\"removed in favor of `#![register_tool]` and `#![register_attr]`\")),\n     (removed, pushpop_unsafe, \"1.2.0\", None, None, None),\n     (removed, needs_allocator, \"1.4.0\", Some(27389), None,\n      Some(\"subsumed by `#![feature(allocator_internals)]`\")),"}, {"sha": "55f19ab4ee31c90b3954012fe21a9002e6702ebc", "filename": "src/test/ui-fulldeps/issue-15778-pass.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.rs?ref=441e5aed2501de4dcafff8c1e2442ee4145737be", "patch": "@@ -3,7 +3,15 @@\n // ignore-stage1\n // compile-flags: -D crate-not-okay\n \n-#![feature(plugin, custom_attribute, custom_inner_attributes, rustc_attrs)]\n+#![feature(plugin, register_attr, custom_inner_attributes, rustc_attrs)]\n+\n+#![register_attr(\n+    rustc_crate_okay,\n+    rustc_crate_blue,\n+    rustc_crate_red,\n+    rustc_crate_grey,\n+    rustc_crate_green,\n+)]\n \n #![plugin(lint_for_crate_rpass)]\n #![rustc_crate_okay]"}, {"sha": "48b42958489e7bc3aeed7d3001e376bb8cafdacc", "filename": "src/test/ui-fulldeps/issue-15778-pass.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.stderr?ref=441e5aed2501de4dcafff8c1e2442ee4145737be", "patch": "@@ -1,5 +1,5 @@\n warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/issue-15778-pass.rs:8:1\n+  --> $DIR/issue-15778-pass.rs:16:1\n    |\n LL | #![plugin(lint_for_crate_rpass)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version"}, {"sha": "724e53debeb01fbf1d5da5681b947743e63744be", "filename": "src/test/ui/feature-gates/feature-gate-custom_attribute2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.rs?ref=441e5aed2501de4dcafff8c1e2442ee4145737be", "patch": "@@ -1,8 +1,6 @@\n // This test ensures that attributes on formals in generic parameter\n // lists are included when we are checking for unstable attributes.\n \n-// gate-test-custom_attribute\n-\n struct StLt<#[lt_struct] 'a>(&'a u32);\n //~^ ERROR cannot find attribute `lt_struct` in this scope\n struct StTy<#[ty_struct] I>(I);"}, {"sha": "b33710ce04958da3e4902985d8595f78bb23626b", "filename": "src/test/ui/feature-gates/feature-gate-custom_attribute2.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-custom_attribute2.stderr?ref=441e5aed2501de4dcafff8c1e2442ee4145737be", "patch": "@@ -1,101 +1,101 @@\n error: cannot find attribute `lt_hof` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:53:21\n+  --> $DIR/feature-gate-custom_attribute2.rs:51:21\n    |\n LL |     where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n    |                     ^^^^^^\n \n error: cannot find attribute `ty_meth` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:48:15\n+  --> $DIR/feature-gate-custom_attribute2.rs:46:15\n    |\n LL |     fn m_ty<#[ty_meth] P>(_: P) { }\n    |               ^^^^^^^\n \n error: cannot find attribute `lt_meth` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:46:15\n+  --> $DIR/feature-gate-custom_attribute2.rs:44:15\n    |\n LL |     fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n    |               ^^^^^^^\n \n error: cannot find attribute `ty_fn` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:42:11\n+  --> $DIR/feature-gate-custom_attribute2.rs:40:11\n    |\n LL | fn f_ty<#[ty_fn] O>(_: O) { }\n    |           ^^^^^\n \n error: cannot find attribute `lt_fn` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:40:11\n+  --> $DIR/feature-gate-custom_attribute2.rs:38:11\n    |\n LL | fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n    |           ^^^^^\n \n error: cannot find attribute `ty_impl_for` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:35:8\n+  --> $DIR/feature-gate-custom_attribute2.rs:33:8\n    |\n LL | impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n    |        ^^^^^^^^^^^\n \n error: cannot find attribute `lt_impl_for` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:31:8\n+  --> $DIR/feature-gate-custom_attribute2.rs:29:8\n    |\n LL | impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n    |        ^^^^^^^^^^^\n \n error: cannot find attribute `ty_inherent` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:28:8\n+  --> $DIR/feature-gate-custom_attribute2.rs:26:8\n    |\n LL | impl<#[ty_inherent] M> StTy<M> { }\n    |        ^^^^^^^^^^^\n \n error: cannot find attribute `lt_inherent` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:26:8\n+  --> $DIR/feature-gate-custom_attribute2.rs:24:8\n    |\n LL | impl<#[lt_inherent] 'e> StLt<'e> { }\n    |        ^^^^^^^^^^^\n \n error: cannot find attribute `ty_type` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:23:13\n+  --> $DIR/feature-gate-custom_attribute2.rs:21:13\n    |\n LL | type TyTy<#[ty_type] L> = (L, );\n    |             ^^^^^^^\n \n error: cannot find attribute `lt_type` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:21:13\n+  --> $DIR/feature-gate-custom_attribute2.rs:19:13\n    |\n LL | type TyLt<#[lt_type] 'd> = &'d u32;\n    |             ^^^^^^^\n \n error: cannot find attribute `ty_trait` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:18:14\n+  --> $DIR/feature-gate-custom_attribute2.rs:16:14\n    |\n LL | trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n    |              ^^^^^^^^\n \n error: cannot find attribute `lt_trait` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:16:14\n+  --> $DIR/feature-gate-custom_attribute2.rs:14:14\n    |\n LL | trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n    |              ^^^^^^^^\n \n error: cannot find attribute `ty_enum` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:13:13\n+  --> $DIR/feature-gate-custom_attribute2.rs:11:13\n    |\n LL | enum EnTy<#[ty_enum] J> { A(J), B }\n    |             ^^^^^^^\n \n error: cannot find attribute `lt_enum` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:11:13\n+  --> $DIR/feature-gate-custom_attribute2.rs:9:13\n    |\n LL | enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n    |             ^^^^^^^\n \n error: cannot find attribute `ty_struct` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:8:15\n+  --> $DIR/feature-gate-custom_attribute2.rs:6:15\n    |\n LL | struct StTy<#[ty_struct] I>(I);\n    |               ^^^^^^^^^\n \n error: cannot find attribute `lt_struct` in this scope\n-  --> $DIR/feature-gate-custom_attribute2.rs:6:15\n+  --> $DIR/feature-gate-custom_attribute2.rs:4:15\n    |\n LL | struct StLt<#[lt_struct] 'a>(&'a u32);\n    |               ^^^^^^^^^"}, {"sha": "4160e5418b78a79bb488589aa2c9de7097baa437", "filename": "src/test/ui/proc-macro/expand-to-unstable-2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.rs?ref=441e5aed2501de4dcafff8c1e2442ee4145737be", "patch": "@@ -1,6 +1,8 @@\n // aux-build:derive-unstable-2.rs\n \n-#![feature(custom_attribute)]\n+#![feature(register_attr)]\n+\n+#![register_attr(rustc_foo)]\n \n #[macro_use]\n extern crate derive_unstable_2;"}, {"sha": "5b6184afacdd0aec801c4959ec2aa86289f5cd4e", "filename": "src/test/ui/proc-macro/expand-to-unstable-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr?ref=441e5aed2501de4dcafff8c1e2442ee4145737be", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n-  --> $DIR/expand-to-unstable-2.rs:8:10\n+  --> $DIR/expand-to-unstable-2.rs:10:10\n    |\n LL | #[derive(Unstable)]\n    |          ^^^^^^^^"}, {"sha": "072a63baf3a47ff519856e31f18c814b64ccebe4", "filename": "src/test/ui/proc-macro/issue-41211.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.rs?ref=441e5aed2501de4dcafff8c1e2442ee4145737be", "patch": "@@ -3,11 +3,13 @@\n // FIXME: https://github.com/rust-lang/rust/issues/41430\n // This is a temporary regression test for the ICE reported in #41211\n \n-#![feature(custom_attribute)]\n #![feature(custom_inner_attributes)]\n+#![feature(register_attr)]\n+\n+#![register_attr(identity_attr)]\n \n #![identity_attr]\n-//~^ ERROR inconsistent resolution for a macro: first custom attribute, then attribute macro\n+//~^ ERROR `identity_attr` is ambiguous\n extern crate test_macros;\n use test_macros::identity_attr;\n "}, {"sha": "22ad4aa147b66132be92f110bca81294deacfe91", "filename": "src/test/ui/proc-macro/issue-41211.stderr", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-41211.stderr?ref=441e5aed2501de4dcafff8c1e2442ee4145737be", "patch": "@@ -1,8 +1,21 @@\n-error: inconsistent resolution for a macro: first custom attribute, then attribute macro\n-  --> $DIR/issue-41211.rs:9:4\n+error[E0659]: `identity_attr` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n+  --> $DIR/issue-41211.rs:11:4\n    |\n LL | #![identity_attr]\n-   |    ^^^^^^^^^^^^^\n+   |    ^^^^^^^^^^^^^ ambiguous name\n+   |\n+note: `identity_attr` could refer to the attribute macro imported here\n+  --> $DIR/issue-41211.rs:14:5\n+   |\n+LL | use test_macros::identity_attr;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use `crate::identity_attr` to refer to this attribute macro unambiguously\n+note: `identity_attr` could also refer to the explicitly registered attribute defined here\n+  --> $DIR/issue-41211.rs:9:18\n+   |\n+LL | #![register_attr(identity_attr)]\n+   |                  ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0659`."}, {"sha": "4776740d8de9087e58e3af488837a11ba7a5c803", "filename": "src/test/ui/span/issue-36530.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Fspan%2Fissue-36530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Fspan%2Fissue-36530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36530.rs?ref=441e5aed2501de4dcafff8c1e2442ee4145737be", "patch": "@@ -1,6 +1,8 @@\n // gate-test-custom_inner_attributes\n \n-#![feature(custom_attribute)]\n+#![feature(register_attr)]\n+\n+#![register_attr(foo)]\n \n #[foo]\n mod foo {"}, {"sha": "2d3972917dfea7556c67f796db260de603854a8d", "filename": "src/test/ui/span/issue-36530.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/441e5aed2501de4dcafff8c1e2442ee4145737be/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36530.stderr?ref=441e5aed2501de4dcafff8c1e2442ee4145737be", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: non-builtin inner attributes are unstable\n-  --> $DIR/issue-36530.rs:7:5\n+  --> $DIR/issue-36530.rs:9:5\n    |\n LL |     #![foo]\n    |     ^^^^^^^"}]}