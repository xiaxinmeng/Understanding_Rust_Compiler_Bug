{"sha": "96dee2825e9d3a587243e700c7c27ff9cf123cdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZGVlMjgyNWU5ZDNhNTg3MjQzZTcwMGM3YzI3ZmY5Y2YxMjNjZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-12T23:49:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-12T23:49:24Z"}, "message": "Auto merge of #88839 - nbdd0121:alignof, r=nagisa\n\nIntroduce NullOp::AlignOf\n\nThis PR introduces `Rvalue::NullaryOp(NullOp::AlignOf, ty)`, which will be lowered from `align_of`, similar to `size_of` lowering to `Rvalue::NullaryOp(NullOp::SizeOf, ty)`.\n\nThe changes are originally part of #88700 but since it's not dependent on other changes and could have performance impact on its own, it's separated into its own PR.", "tree": {"sha": "c2fc8ea8dd67d3801a7e2c6bee0a22bdfbe0cddb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2fc8ea8dd67d3801a7e2c6bee0a22bdfbe0cddb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96dee2825e9d3a587243e700c7c27ff9cf123cdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96dee2825e9d3a587243e700c7c27ff9cf123cdf", "html_url": "https://github.com/rust-lang/rust/commit/96dee2825e9d3a587243e700c7c27ff9cf123cdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96dee2825e9d3a587243e700c7c27ff9cf123cdf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8", "html_url": "https://github.com/rust-lang/rust/commit/51e514c0fb4f9afcaae3b02dd9ccb93e15b30ef8"}, {"sha": "cdec87cafaa2d13ede2230ff430f909e67dbc751", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdec87cafaa2d13ede2230ff430f909e67dbc751", "html_url": "https://github.com/rust-lang/rust/commit/cdec87cafaa2d13ede2230ff430f909e67dbc751"}], "stats": {"total": 418, "additions": 234, "deletions": 184}, "files": [{"sha": "d29558a4e1f651d5b5f8274c9b53e09be11374fe", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -726,15 +726,20 @@ fn codegen_stmt<'tcx>(\n                     let ptr = fx.bcx.inst_results(call)[0];\n                     lval.write_cvalue(fx, CValue::by_val(ptr, box_layout));\n                 }\n-                Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n+                Rvalue::NullaryOp(null_op, ty) => {\n                     assert!(\n                         lval.layout()\n                             .ty\n                             .is_sized(fx.tcx.at(stmt.source_info.span), ParamEnv::reveal_all())\n                     );\n-                    let ty_size = fx.layout_of(fx.monomorphize(ty)).size.bytes();\n+                    let layout = fx.layout_of(fx.monomorphize(ty));\n+                    let val = match null_op {\n+                        NullOp::SizeOf => layout.size.bytes(),\n+                        NullOp::AlignOf => layout.align.abi.bytes(),\n+                        NullOp::Box => unreachable!(),\n+                    };\n                     let val =\n-                        CValue::const_val(fx, fx.layout_of(fx.tcx.types.usize), ty_size.into());\n+                        CValue::const_val(fx, fx.layout_of(fx.tcx.types.usize), val.into());\n                     lval.write_cvalue(fx, val);\n                 }\n                 Rvalue::Aggregate(ref kind, ref operands) => match kind.as_ref() {"}, {"sha": "48183b2d4f634ee8945c66aab6d66ec6f0adeda2", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -823,7 +823,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             dest.write_cvalue(fx, val);\n         };\n \n-        pref_align_of | min_align_of | needs_drop | type_id | type_name | variant_count, () {\n+        pref_align_of | needs_drop | type_id | type_name | variant_count, () {\n             let const_val =\n                 fx.tcx.const_eval_instance(ParamEnv::reveal_all(), instance, None).unwrap();\n             let val = crate::constant::codegen_const_value("}, {"sha": "f943157dc66fa200cd61315d87754c5e2a96b501", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -104,7 +104,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n             sym::pref_align_of\n-            | sym::min_align_of\n             | sym::needs_drop\n             | sym::type_id\n             | sym::type_name"}, {"sha": "7403c21a9060e0e17da08a9b325d87525970cf99", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -486,20 +486,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 )\n             }\n \n-            mir::Rvalue::NullaryOp(mir::NullOp::SizeOf, ty) => {\n-                let ty = self.monomorphize(ty);\n-                assert!(bx.cx().type_is_sized(ty));\n-                let val = bx.cx().const_usize(bx.cx().layout_of(ty).size.bytes());\n-                let tcx = self.cx.tcx();\n-                (\n-                    bx,\n-                    OperandRef {\n-                        val: OperandValue::Immediate(val),\n-                        layout: self.cx.layout_of(tcx.types.usize),\n-                    },\n-                )\n-            }\n-\n             mir::Rvalue::NullaryOp(mir::NullOp::Box, content_ty) => {\n                 let content_ty = self.monomorphize(content_ty);\n                 let content_layout = bx.cx().layout_of(content_ty);\n@@ -524,6 +510,27 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let operand = OperandRef { val: OperandValue::Immediate(val), layout: box_layout };\n                 (bx, operand)\n             }\n+\n+            mir::Rvalue::NullaryOp(null_op, ty) => {\n+                let ty = self.monomorphize(ty);\n+                assert!(bx.cx().type_is_sized(ty));\n+                let layout = bx.cx().layout_of(ty);\n+                let val = match null_op {\n+                    mir::NullOp::SizeOf => layout.size.bytes(),\n+                    mir::NullOp::AlignOf => layout.align.abi.bytes(),\n+                    mir::NullOp::Box => unreachable!(),\n+                };\n+                let val = bx.cx().const_usize(val);\n+                let tcx = self.cx.tcx();\n+                (\n+                    bx,\n+                    OperandRef {\n+                        val: OperandValue::Immediate(val),\n+                        layout: self.cx.layout_of(tcx.types.usize),\n+                    },\n+                )\n+            }\n+\n             mir::Rvalue::ThreadLocalRef(def_id) => {\n                 assert!(bx.cx().tcx().is_static(def_id));\n                 let static_ = bx.get_static(def_id);"}, {"sha": "b032ee96ce7b033a46f4db32cad8fc86e095ab5d", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -160,17 +160,14 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.write_scalar(Scalar::from_machine_usize(result, self), dest)?;\n             }\n \n-            sym::min_align_of\n-            | sym::pref_align_of\n+            sym::pref_align_of\n             | sym::needs_drop\n             | sym::type_id\n             | sym::type_name\n             | sym::variant_count => {\n                 let gid = GlobalId { instance, promoted: None };\n                 let ty = match intrinsic_name {\n-                    sym::min_align_of | sym::pref_align_of | sym::variant_count => {\n-                        self.tcx.types.usize\n-                    }\n+                    sym::pref_align_of | sym::variant_count => self.tcx.types.usize,\n                     sym::needs_drop => self.tcx.types.bool,\n                     sym::type_id => self.tcx.types.u64,\n                     sym::type_name => self.tcx.mk_static_str(),"}, {"sha": "6e35b33188cd238b858d1f3e696cebe86f49f364", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -270,18 +270,23 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 M::box_alloc(self, &dest)?;\n             }\n \n-            NullaryOp(mir::NullOp::SizeOf, ty) => {\n+            NullaryOp(null_op, ty) => {\n                 let ty = self.subst_from_current_frame_and_normalize_erasing_regions(ty);\n                 let layout = self.layout_of(ty)?;\n                 if layout.is_unsized() {\n                     // FIXME: This should be a span_bug (#80742)\n                     self.tcx.sess.delay_span_bug(\n                         self.frame().current_span(),\n-                        &format!(\"SizeOf nullary MIR operator called for unsized type {}\", ty),\n+                        &format!(\"Nullary MIR operator called for unsized type {}\", ty),\n                     );\n                     throw_inval!(SizeOfUnsizedType(ty));\n                 }\n-                self.write_scalar(Scalar::from_machine_usize(layout.size.bytes(), self), &dest)?;\n+                let val = match null_op {\n+                    mir::NullOp::SizeOf => layout.size.bytes(),\n+                    mir::NullOp::AlignOf => layout.align.abi.bytes(),\n+                    mir::NullOp::Box => unreachable!(),\n+                };\n+                self.write_scalar(Scalar::from_machine_usize(val, self), &dest)?;\n             }\n \n             Cast(cast_kind, ref operand, cast_ty) => {"}, {"sha": "02b317b89810620357e2d88e0ef298b198845063", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -648,7 +648,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                 }\n             }\n \n-            Rvalue::NullaryOp(NullOp::SizeOf, _) => {}\n+            Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => {}\n             Rvalue::NullaryOp(NullOp::Box, _) => self.check_op(ops::HeapAllocation),\n \n             Rvalue::UnaryOp(_, ref operand) => {"}, {"sha": "8c24c9fa9769cff229679c50544c1f126988a1e2", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -520,6 +520,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n             Rvalue::NullaryOp(op, _) => match op {\n                 NullOp::Box => return Err(Unpromotable),\n                 NullOp::SizeOf => {}\n+                NullOp::AlignOf => {}\n             },\n \n             Rvalue::UnaryOp(op, operand) => {"}, {"sha": "e8d30034dc4e6fdadb1cd82921a350db9a91a90c", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -2277,6 +2277,8 @@ impl BinOp {\n pub enum NullOp {\n     /// Returns the size of a value of that type\n     SizeOf,\n+    /// Returns the minimum alignment of a type\n+    AlignOf,\n     /// Creates a new uninitialized box for a value of that type\n     Box,\n }"}, {"sha": "b48e8a868efdb1cf01a0b9e9abf5cf93fbbad603", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -196,7 +196,7 @@ impl<'tcx> Rvalue<'tcx> {\n             Rvalue::UnaryOp(UnOp::Not | UnOp::Neg, ref operand) => operand.ty(local_decls, tcx),\n             Rvalue::Discriminant(ref place) => place.ty(local_decls, tcx).ty.discriminant_ty(tcx),\n             Rvalue::NullaryOp(NullOp::Box, t) => tcx.mk_box(t),\n-            Rvalue::NullaryOp(NullOp::SizeOf, _) => tcx.types.usize,\n+            Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => tcx.types.usize,\n             Rvalue::Aggregate(ref ak, ref ops) => match **ak {\n                 AggregateKind::Array(ty) => tcx.mk_array(ty, ops.len() as u64),\n                 AggregateKind::Tuple => tcx.mk_tup(ops.iter().map(|op| op.ty(local_decls, tcx))),"}, {"sha": "407ba739463013ddb2346298efcc0774134141d9", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -342,7 +342,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             | Rvalue::AddressOf(..)\n             | Rvalue::Discriminant(..)\n             | Rvalue::Len(..)\n-            | Rvalue::NullaryOp(NullOp::SizeOf, _)\n+            | Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _)\n             | Rvalue::NullaryOp(NullOp::Box, _) => {\n                 // This returns an rvalue with uninitialized contents. We can't\n                 // move out of it here because it is an rvalue - assignments always"}, {"sha": "5848163af72fc22b0cc2d09f56f5f308e445852d", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -92,14 +92,19 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         // since their semantics depend on the value of overflow-checks flag used\n                         // during codegen. Issue #35310.\n                     }\n-                    sym::size_of => {\n+                    sym::size_of | sym::min_align_of => {\n                         if let Some((destination, target)) = *destination {\n                             let tp_ty = substs.type_at(0);\n+                            let null_op = match intrinsic_name {\n+                                sym::size_of => NullOp::SizeOf,\n+                                sym::min_align_of => NullOp::AlignOf,\n+                                _ => bug!(\"unexpected intrinsic\"),\n+                            };\n                             block.statements.push(Statement {\n                                 source_info: terminator.source_info,\n                                 kind: StatementKind::Assign(Box::new((\n                                     destination,\n-                                    Rvalue::NullaryOp(NullOp::SizeOf, tp_ty),\n+                                    Rvalue::NullaryOp(null_op, tp_ty),\n                                 ))),\n                             });\n                             terminator.kind = TerminatorKind::Goto { target };"}, {"sha": "3f5f71f80825d3418ec3c3efe111503c8595cd44", "filename": "src/test/mir-opt/lower_intrinsics.align_of.LowerIntrinsics.diff", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -0,0 +1,24 @@\n+- // MIR for `align_of` before LowerIntrinsics\n++ // MIR for `align_of` after LowerIntrinsics\n+  \n+  fn align_of() -> usize {\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_intrinsics.rs:18:25: 18:30\n+  \n+      bb0: {\n+-         _0 = std::intrinsics::min_align_of::<T>() -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:19:5: 19:42\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:19:5: 19:40\n+-                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::min_align_of::<T>}, val: Value(Scalar(<ZST>)) }\n++         _0 = AlignOf(T);                 // scope 0 at $DIR/lower_intrinsics.rs:19:5: 19:42\n++         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:19:5: 19:42\n+      }\n+  \n+      bb1: {\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:20:2: 20:2\n+      }\n+  \n+      bb2 (cleanup): {\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:18:1: 20:2\n+      }\n+  }\n+  "}, {"sha": "d9b441a470c1ee921d9a1b1d51b0bf9699d3e853", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 81, "deletions": 81, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -2,127 +2,127 @@\n + // MIR for `discriminant` after LowerIntrinsics\n   \n   fn discriminant(_1: T) -> () {\n-      debug t => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:68:24: 68:25\n-      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:68:30: 68:30\n-      let _2: <T as std::marker::DiscriminantKind>::Discriminant; // in scope 0 at $DIR/lower_intrinsics.rs:69:5: 69:45\n-      let mut _3: &T;                      // in scope 0 at $DIR/lower_intrinsics.rs:69:42: 69:44\n-      let _4: &T;                          // in scope 0 at $DIR/lower_intrinsics.rs:69:42: 69:44\n-      let _5: u8;                          // in scope 0 at $DIR/lower_intrinsics.rs:70:5: 70:45\n-      let mut _6: &i32;                    // in scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n-      let _7: &i32;                        // in scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n-      let _8: i32;                         // in scope 0 at $DIR/lower_intrinsics.rs:70:43: 70:44\n-      let _9: u8;                          // in scope 0 at $DIR/lower_intrinsics.rs:71:5: 71:46\n-      let mut _10: &();                    // in scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n-      let _11: &();                        // in scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n-      let _12: ();                         // in scope 0 at $DIR/lower_intrinsics.rs:71:43: 71:45\n-      let _13: isize;                      // in scope 0 at $DIR/lower_intrinsics.rs:72:5: 72:48\n-      let mut _14: &E;                     // in scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n-      let _15: &E;                         // in scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n-      let _16: E;                          // in scope 0 at $DIR/lower_intrinsics.rs:72:43: 72:47\n-      let mut _17: &E;                     // in scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n-      let mut _18: &();                    // in scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n-      let mut _19: &i32;                   // in scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n+      debug t => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:73:24: 73:25\n+      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:73:30: 73:30\n+      let _2: <T as std::marker::DiscriminantKind>::Discriminant; // in scope 0 at $DIR/lower_intrinsics.rs:74:5: 74:45\n+      let mut _3: &T;                      // in scope 0 at $DIR/lower_intrinsics.rs:74:42: 74:44\n+      let _4: &T;                          // in scope 0 at $DIR/lower_intrinsics.rs:74:42: 74:44\n+      let _5: u8;                          // in scope 0 at $DIR/lower_intrinsics.rs:75:5: 75:45\n+      let mut _6: &i32;                    // in scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n+      let _7: &i32;                        // in scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n+      let _8: i32;                         // in scope 0 at $DIR/lower_intrinsics.rs:75:43: 75:44\n+      let _9: u8;                          // in scope 0 at $DIR/lower_intrinsics.rs:76:5: 76:46\n+      let mut _10: &();                    // in scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n+      let _11: &();                        // in scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n+      let _12: ();                         // in scope 0 at $DIR/lower_intrinsics.rs:76:43: 76:45\n+      let _13: isize;                      // in scope 0 at $DIR/lower_intrinsics.rs:77:5: 77:48\n+      let mut _14: &E;                     // in scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n+      let _15: &E;                         // in scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n+      let _16: E;                          // in scope 0 at $DIR/lower_intrinsics.rs:77:43: 77:47\n+      let mut _17: &E;                     // in scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n+      let mut _18: &();                    // in scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n+      let mut _19: &i32;                   // in scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:69:5: 69:45\n-          StorageLive(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:69:42: 69:44\n-          StorageLive(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:69:42: 69:44\n-          _4 = &_1;                        // scope 0 at $DIR/lower_intrinsics.rs:69:42: 69:44\n-          _3 = &(*_4);                     // scope 0 at $DIR/lower_intrinsics.rs:69:42: 69:44\n--         _2 = discriminant_value::<T>(move _3) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:69:5: 69:45\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:74:5: 74:45\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:74:42: 74:44\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:74:42: 74:44\n+          _4 = &_1;                        // scope 0 at $DIR/lower_intrinsics.rs:74:42: 74:44\n+          _3 = &(*_4);                     // scope 0 at $DIR/lower_intrinsics.rs:74:42: 74:44\n+-         _2 = discriminant_value::<T>(move _3) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:74:5: 74:45\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:69:5: 69:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:74:5: 74:41\n -                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r T) -> <T as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<T>}, val: Value(Scalar(<ZST>)) }\n-+         _2 = discriminant((*_3));        // scope 0 at $DIR/lower_intrinsics.rs:69:5: 69:45\n-+         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:69:5: 69:45\n++         _2 = discriminant((*_3));        // scope 0 at $DIR/lower_intrinsics.rs:74:5: 74:45\n++         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:74:5: 74:45\n       }\n   \n       bb1: {\n-          StorageDead(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:69:44: 69:45\n-          StorageDead(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:69:45: 69:46\n-          StorageDead(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:69:45: 69:46\n-          StorageLive(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:70:5: 70:45\n-          StorageLive(_6);                 // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n-          StorageLive(_7);                 // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n-          _19 = const discriminant::<T>::promoted[2]; // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:74:44: 74:45\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:74:45: 74:46\n+          StorageDead(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:74:45: 74:46\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:75:5: 75:45\n+          StorageLive(_6);                 // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n+          StorageLive(_7);                 // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n+          _19 = const discriminant::<T>::promoted[2]; // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n                                            // ty::Const\n                                            // + ty: &i32\n                                            // + val: Unevaluated(discriminant, [T], Some(promoted[2]))\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:70:42: 70:44\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[2872]::discriminant), const_param_did: None }, substs_: Some([T]), promoted: Some(promoted[2]) }) }\n-          _7 = &(*_19);                    // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n-          _6 = &(*_7);                     // scope 0 at $DIR/lower_intrinsics.rs:70:42: 70:44\n--         _5 = discriminant_value::<i32>(move _6) -> bb2; // scope 0 at $DIR/lower_intrinsics.rs:70:5: 70:45\n+                                           // + span: $DIR/lower_intrinsics.rs:75:42: 75:44\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[2872]::discriminant), const_param_did: None }, substs_: Some([T]), promoted: Some(promoted[2]) }) }\n+          _7 = &(*_19);                    // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n+          _6 = &(*_7);                     // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n+-         _5 = discriminant_value::<i32>(move _6) -> bb2; // scope 0 at $DIR/lower_intrinsics.rs:75:5: 75:45\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:70:5: 70:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:75:5: 75:41\n -                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r i32) -> <i32 as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<i32>}, val: Value(Scalar(<ZST>)) }\n-+         _5 = discriminant((*_6));        // scope 0 at $DIR/lower_intrinsics.rs:70:5: 70:45\n-+         goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:70:5: 70:45\n++         _5 = discriminant((*_6));        // scope 0 at $DIR/lower_intrinsics.rs:75:5: 75:45\n++         goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:75:5: 75:45\n       }\n   \n       bb2: {\n-          StorageDead(_6);                 // scope 0 at $DIR/lower_intrinsics.rs:70:44: 70:45\n-          StorageDead(_7);                 // scope 0 at $DIR/lower_intrinsics.rs:70:45: 70:46\n-          StorageDead(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:70:45: 70:46\n-          StorageLive(_9);                 // scope 0 at $DIR/lower_intrinsics.rs:71:5: 71:46\n-          StorageLive(_10);                // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n-          StorageLive(_11);                // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n-          _18 = const discriminant::<T>::promoted[1]; // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n+          StorageDead(_6);                 // scope 0 at $DIR/lower_intrinsics.rs:75:44: 75:45\n+          StorageDead(_7);                 // scope 0 at $DIR/lower_intrinsics.rs:75:45: 75:46\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:75:45: 75:46\n+          StorageLive(_9);                 // scope 0 at $DIR/lower_intrinsics.rs:76:5: 76:46\n+          StorageLive(_10);                // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n+          StorageLive(_11);                // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n+          _18 = const discriminant::<T>::promoted[1]; // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n                                            // ty::Const\n                                            // + ty: &()\n                                            // + val: Unevaluated(discriminant, [T], Some(promoted[1]))\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:71:42: 71:45\n-                                           // + literal: Const { ty: &(), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[2872]::discriminant), const_param_did: None }, substs_: Some([T]), promoted: Some(promoted[1]) }) }\n-          _11 = &(*_18);                   // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n-          _10 = &(*_11);                   // scope 0 at $DIR/lower_intrinsics.rs:71:42: 71:45\n--         _9 = discriminant_value::<()>(move _10) -> bb3; // scope 0 at $DIR/lower_intrinsics.rs:71:5: 71:46\n+                                           // + span: $DIR/lower_intrinsics.rs:76:42: 76:45\n+                                           // + literal: Const { ty: &(), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[2872]::discriminant), const_param_did: None }, substs_: Some([T]), promoted: Some(promoted[1]) }) }\n+          _11 = &(*_18);                   // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n+          _10 = &(*_11);                   // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n+-         _9 = discriminant_value::<()>(move _10) -> bb3; // scope 0 at $DIR/lower_intrinsics.rs:76:5: 76:46\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:71:5: 71:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:76:5: 76:41\n -                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r ()) -> <() as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<()>}, val: Value(Scalar(<ZST>)) }\n-+         _9 = discriminant((*_10));       // scope 0 at $DIR/lower_intrinsics.rs:71:5: 71:46\n-+         goto -> bb3;                     // scope 0 at $DIR/lower_intrinsics.rs:71:5: 71:46\n++         _9 = discriminant((*_10));       // scope 0 at $DIR/lower_intrinsics.rs:76:5: 76:46\n++         goto -> bb3;                     // scope 0 at $DIR/lower_intrinsics.rs:76:5: 76:46\n       }\n   \n       bb3: {\n-          StorageDead(_10);                // scope 0 at $DIR/lower_intrinsics.rs:71:45: 71:46\n-          StorageDead(_11);                // scope 0 at $DIR/lower_intrinsics.rs:71:46: 71:47\n-          StorageDead(_9);                 // scope 0 at $DIR/lower_intrinsics.rs:71:46: 71:47\n-          StorageLive(_13);                // scope 0 at $DIR/lower_intrinsics.rs:72:5: 72:48\n-          StorageLive(_14);                // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n-          StorageLive(_15);                // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n-          _17 = const discriminant::<T>::promoted[0]; // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n+          StorageDead(_10);                // scope 0 at $DIR/lower_intrinsics.rs:76:45: 76:46\n+          StorageDead(_11);                // scope 0 at $DIR/lower_intrinsics.rs:76:46: 76:47\n+          StorageDead(_9);                 // scope 0 at $DIR/lower_intrinsics.rs:76:46: 76:47\n+          StorageLive(_13);                // scope 0 at $DIR/lower_intrinsics.rs:77:5: 77:48\n+          StorageLive(_14);                // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n+          StorageLive(_15);                // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n+          _17 = const discriminant::<T>::promoted[0]; // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n                                            // ty::Const\n                                            // + ty: &E\n                                            // + val: Unevaluated(discriminant, [T], Some(promoted[0]))\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:72:42: 72:47\n-                                           // + literal: Const { ty: &E, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:27 ~ lower_intrinsics[2872]::discriminant), const_param_did: None }, substs_: Some([T]), promoted: Some(promoted[0]) }) }\n-          _15 = &(*_17);                   // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n-          _14 = &(*_15);                   // scope 0 at $DIR/lower_intrinsics.rs:72:42: 72:47\n--         _13 = discriminant_value::<E>(move _14) -> bb4; // scope 0 at $DIR/lower_intrinsics.rs:72:5: 72:48\n+                                           // + span: $DIR/lower_intrinsics.rs:77:42: 77:47\n+                                           // + literal: Const { ty: &E, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[2872]::discriminant), const_param_did: None }, substs_: Some([T]), promoted: Some(promoted[0]) }) }\n+          _15 = &(*_17);                   // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n+          _14 = &(*_15);                   // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n+-         _13 = discriminant_value::<E>(move _14) -> bb4; // scope 0 at $DIR/lower_intrinsics.rs:77:5: 77:48\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:72:5: 72:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:77:5: 77:41\n -                                          // + literal: Const { ty: for<'r> extern \"rust-intrinsic\" fn(&'r E) -> <E as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<E>}, val: Value(Scalar(<ZST>)) }\n-+         _13 = discriminant((*_14));      // scope 0 at $DIR/lower_intrinsics.rs:72:5: 72:48\n-+         goto -> bb4;                     // scope 0 at $DIR/lower_intrinsics.rs:72:5: 72:48\n++         _13 = discriminant((*_14));      // scope 0 at $DIR/lower_intrinsics.rs:77:5: 77:48\n++         goto -> bb4;                     // scope 0 at $DIR/lower_intrinsics.rs:77:5: 77:48\n       }\n   \n       bb4: {\n-          StorageDead(_14);                // scope 0 at $DIR/lower_intrinsics.rs:72:47: 72:48\n-          StorageDead(_15);                // scope 0 at $DIR/lower_intrinsics.rs:72:48: 72:49\n-          StorageDead(_13);                // scope 0 at $DIR/lower_intrinsics.rs:72:48: 72:49\n-          _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:68:30: 73:2\n-          drop(_1) -> bb5;                 // scope 0 at $DIR/lower_intrinsics.rs:73:1: 73:2\n+          StorageDead(_14);                // scope 0 at $DIR/lower_intrinsics.rs:77:47: 77:48\n+          StorageDead(_15);                // scope 0 at $DIR/lower_intrinsics.rs:77:48: 77:49\n+          StorageDead(_13);                // scope 0 at $DIR/lower_intrinsics.rs:77:48: 77:49\n+          _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:73:30: 78:2\n+          drop(_1) -> bb5;                 // scope 0 at $DIR/lower_intrinsics.rs:78:1: 78:2\n       }\n   \n       bb5: {\n-          return;                          // scope 0 at $DIR/lower_intrinsics.rs:73:2: 73:2\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:78:2: 78:2\n       }\n   \n       bb6 (cleanup): {\n-          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:68:1: 73:2\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:73:1: 78:2\n       }\n   }\n   "}, {"sha": "2f3fd9ad28565568944a25129191fe1b8b498438", "filename": "src/test/mir-opt/lower_intrinsics.f_u64.PreCodegen.before.mir", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_u64.PreCodegen.before.mir?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -1,32 +1,32 @@\n // MIR for `f_u64` before PreCodegen\n \n fn f_u64() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:34:16: 34:16\n-    let mut _1: u64;                     // in scope 0 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-    scope 1 (inlined f_dispatch::<u64>) { // at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        let mut _3: u64;                 // in scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        scope 2 (inlined std::mem::size_of::<u64>) { // at $DIR/lower_intrinsics.rs:35:5: 35:21\n+    let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:39:16: 39:16\n+    let mut _1: u64;                     // in scope 0 at $DIR/lower_intrinsics.rs:40:5: 40:21\n+    scope 1 (inlined f_dispatch::<u64>) { // at $DIR/lower_intrinsics.rs:40:5: 40:21\n+        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n+        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n+        let mut _3: u64;                 // in scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n+        scope 2 (inlined std::mem::size_of::<u64>) { // at $DIR/lower_intrinsics.rs:40:5: 40:21\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        _1 = const 0_u64;                // scope 0 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        _3 = move _1;                    // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        _2 = f_non_zst::<u64>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n+        StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:40:5: 40:21\n+        _1 = const 0_u64;                // scope 0 at $DIR/lower_intrinsics.rs:40:5: 40:21\n+        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n+        StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n+        _3 = move _1;                    // scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n+        _2 = f_non_zst::<u64>(move _3) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n                                          // mir::Constant\n-                                         // + span: $DIR/lower_intrinsics.rs:35:5: 35:21\n+                                         // + span: $DIR/lower_intrinsics.rs:40:5: 40:21\n                                          // + literal: Const { ty: fn(u64) {f_non_zst::<u64>}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:35:5: 35:21\n-        return;                          // scope 0 at $DIR/lower_intrinsics.rs:36:2: 36:2\n+        StorageDead(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n+        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:40:5: 40:21\n+        StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:40:5: 40:21\n+        return;                          // scope 0 at $DIR/lower_intrinsics.rs:41:2: 41:2\n     }\n }"}, {"sha": "690405c4748eee5c95874af4eab805865b1e4d74", "filename": "src/test/mir-opt/lower_intrinsics.f_unit.PreCodegen.before.mir", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_unit.PreCodegen.before.mir?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -1,27 +1,27 @@\n // MIR for `f_unit` before PreCodegen\n \n fn f_unit() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:28:17: 28:17\n-    let mut _1: ();                      // in scope 0 at $DIR/lower_intrinsics.rs:29:16: 29:18\n-    scope 1 (inlined f_dispatch::<()>) { // at $DIR/lower_intrinsics.rs:29:5: 29:19\n-        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:29:5: 29:19\n-        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:29:5: 29:19\n-        scope 2 (inlined std::mem::size_of::<()>) { // at $DIR/lower_intrinsics.rs:29:5: 29:19\n+    let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:33:17: 33:17\n+    let mut _1: ();                      // in scope 0 at $DIR/lower_intrinsics.rs:34:16: 34:18\n+    scope 1 (inlined f_dispatch::<()>) { // at $DIR/lower_intrinsics.rs:34:5: 34:19\n+        debug t => _1;                   // in scope 1 at $DIR/lower_intrinsics.rs:34:5: 34:19\n+        let _2: ();                      // in scope 1 at $DIR/lower_intrinsics.rs:34:5: 34:19\n+        scope 2 (inlined std::mem::size_of::<()>) { // at $DIR/lower_intrinsics.rs:34:5: 34:19\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:29:16: 29:18\n-        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:29:5: 29:19\n-        _2 = f_zst::<()>(const ()) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:29:5: 29:19\n+        StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:34:16: 34:18\n+        StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:34:5: 34:19\n+        _2 = f_zst::<()>(const ()) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:34:5: 34:19\n                                          // mir::Constant\n-                                         // + span: $DIR/lower_intrinsics.rs:29:5: 29:19\n+                                         // + span: $DIR/lower_intrinsics.rs:34:5: 34:19\n                                          // + literal: Const { ty: fn(()) {f_zst::<()>}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb1: {\n-        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:29:5: 29:19\n-        StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:29:18: 29:19\n-        return;                          // scope 0 at $DIR/lower_intrinsics.rs:30:2: 30:2\n+        StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:34:5: 34:19\n+        StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:34:18: 34:19\n+        return;                          // scope 0 at $DIR/lower_intrinsics.rs:35:2: 35:2\n     }\n }"}, {"sha": "7e1e066366c1151b651267536593065507143ed1", "filename": "src/test/mir-opt/lower_intrinsics.forget.LowerIntrinsics.diff", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -2,32 +2,32 @@\n + // MIR for `forget` after LowerIntrinsics\n   \n   fn forget(_1: T) -> () {\n-      debug t => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:18:18: 18:19\n-      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:18:24: 18:24\n-      let mut _2: T;                       // in scope 0 at $DIR/lower_intrinsics.rs:19:30: 19:31\n+      debug t => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:23:18: 23:19\n+      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:23:24: 23:24\n+      let mut _2: T;                       // in scope 0 at $DIR/lower_intrinsics.rs:24:30: 24:31\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:19:30: 19:31\n-          _2 = move _1;                    // scope 0 at $DIR/lower_intrinsics.rs:19:30: 19:31\n--         _0 = std::intrinsics::forget::<T>(move _2) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:19:5: 19:32\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:24:30: 24:31\n+          _2 = move _1;                    // scope 0 at $DIR/lower_intrinsics.rs:24:30: 24:31\n+-         _0 = std::intrinsics::forget::<T>(move _2) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:24:5: 24:32\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:19:5: 19:29\n+-                                          // + span: $DIR/lower_intrinsics.rs:24:5: 24:29\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T) {std::intrinsics::forget::<T>}, val: Value(Scalar(<ZST>)) }\n-+         _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:19:5: 19:32\n-+         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:19:5: 19:32\n++         _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:24:5: 24:32\n++         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:24:5: 24:32\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:19:31: 19:32\n-          goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:20:1: 20:2\n+          StorageDead(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:24:31: 24:32\n+          goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:25:1: 25:2\n       }\n   \n       bb2: {\n-          return;                          // scope 0 at $DIR/lower_intrinsics.rs:20:2: 20:2\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:25:2: 25:2\n       }\n   \n       bb3 (cleanup): {\n-          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:18:1: 20:2\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:23:1: 25:2\n       }\n   }\n   "}, {"sha": "276227d8c018a0c97387c6c477a8a5bc12329f25", "filename": "src/test/mir-opt/lower_intrinsics.non_const.LowerIntrinsics.diff", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -2,34 +2,34 @@\n + // MIR for `non_const` after LowerIntrinsics\n   \n   fn non_const() -> usize {\n-      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_intrinsics.rs:55:26: 55:31\n-      let _1: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}; // in scope 0 at $DIR/lower_intrinsics.rs:57:9: 57:18\n-      let mut _2: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}; // in scope 0 at $DIR/lower_intrinsics.rs:58:5: 58:14\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/lower_intrinsics.rs:60:26: 60:31\n+      let _1: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}; // in scope 0 at $DIR/lower_intrinsics.rs:62:9: 62:18\n+      let mut _2: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}; // in scope 0 at $DIR/lower_intrinsics.rs:63:5: 63:14\n       scope 1 {\n-          debug size_of_t => _1;           // in scope 1 at $DIR/lower_intrinsics.rs:57:9: 57:18\n+          debug size_of_t => _1;           // in scope 1 at $DIR/lower_intrinsics.rs:62:9: 62:18\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:57:9: 57:18\n-          _1 = std::intrinsics::size_of::<T>; // scope 0 at $DIR/lower_intrinsics.rs:57:21: 57:51\n+          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:62:9: 62:18\n+          _1 = std::intrinsics::size_of::<T>; // scope 0 at $DIR/lower_intrinsics.rs:62:21: 62:51\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:57:21: 57:51\n+                                           // + span: $DIR/lower_intrinsics.rs:62:21: 62:51\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:58:5: 58:14\n-          _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:58:5: 58:14\n--         _0 = move _2() -> bb1;           // scope 1 at $DIR/lower_intrinsics.rs:58:5: 58:16\n-+         _0 = SizeOf(T);                  // scope 1 at $DIR/lower_intrinsics.rs:58:5: 58:16\n-+         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:58:5: 58:16\n+          StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:63:5: 63:14\n+          _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:63:5: 63:14\n+-         _0 = move _2() -> bb1;           // scope 1 at $DIR/lower_intrinsics.rs:63:5: 63:16\n++         _0 = SizeOf(T);                  // scope 1 at $DIR/lower_intrinsics.rs:63:5: 63:16\n++         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:63:5: 63:16\n       }\n   \n       bb1: {\n-          StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:58:15: 58:16\n-          StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:59:1: 59:2\n-          return;                          // scope 0 at $DIR/lower_intrinsics.rs:59:2: 59:2\n+          StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:63:15: 63:16\n+          StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:64:1: 64:2\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:64:2: 64:2\n       }\n   \n       bb2 (cleanup): {\n-          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:55:1: 59:2\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:60:1: 64:2\n       }\n   }\n   "}, {"sha": "8a8880dad02e5032aab3b7bbad2422ee44f48c65", "filename": "src/test/mir-opt/lower_intrinsics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -14,6 +14,11 @@ pub fn size_of<T>() -> usize {\n     core::intrinsics::size_of::<T>()\n }\n \n+// EMIT_MIR lower_intrinsics.align_of.LowerIntrinsics.diff\n+pub fn align_of<T>() -> usize {\n+    core::intrinsics::min_align_of::<T>()\n+}\n+\n // EMIT_MIR lower_intrinsics.forget.LowerIntrinsics.diff\n pub fn forget<T>(t: T) {\n     core::intrinsics::forget(t)"}, {"sha": "50711f574f1c1e597ad88f97b6b033ee763fedcf", "filename": "src/test/mir-opt/lower_intrinsics.unreachable.LowerIntrinsics.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -2,25 +2,25 @@\n + // MIR for `unreachable` after LowerIntrinsics\n   \n   fn unreachable() -> ! {\n-      let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:23:25: 23:26\n-      let mut _1: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:23:27: 25:2\n-      let _2: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:24:14: 24:45\n-      let mut _3: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:24:14: 24:45\n+      let mut _0: !;                       // return place in scope 0 at $DIR/lower_intrinsics.rs:28:25: 28:26\n+      let mut _1: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:28:27: 30:2\n+      let _2: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:29:14: 29:45\n+      let mut _3: !;                       // in scope 0 at $DIR/lower_intrinsics.rs:29:14: 29:45\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:24:5: 24:47\n-          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:24:14: 24:45\n--         std::intrinsics::unreachable();  // scope 1 at $DIR/lower_intrinsics.rs:24:14: 24:45\n+          StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:29:5: 29:47\n+          StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:29:14: 29:45\n+-         std::intrinsics::unreachable();  // scope 1 at $DIR/lower_intrinsics.rs:29:14: 29:45\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:24:14: 24:43\n+-                                          // + span: $DIR/lower_intrinsics.rs:29:14: 29:43\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn() -> ! {std::intrinsics::unreachable}, val: Value(Scalar(<ZST>)) }\n-+         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:24:14: 24:45\n++         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:29:14: 29:45\n       }\n   \n       bb1 (cleanup): {\n-          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:23:1: 25:2\n+          resume;                          // scope 0 at $DIR/lower_intrinsics.rs:28:1: 30:2\n       }\n   }\n   "}, {"sha": "e9a9895cb746f39a6abece6de0aa7df4aa26ca92", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96dee2825e9d3a587243e700c7c27ff9cf123cdf/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=96dee2825e9d3a587243e700c7c27ff9cf123cdf", "patch": "@@ -192,7 +192,7 @@ fn check_rvalue(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, rvalue: &Rv\n                 ))\n             }\n         },\n-        Rvalue::NullaryOp(NullOp::SizeOf, _) => Ok(()),\n+        Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => Ok(()),\n         Rvalue::NullaryOp(NullOp::Box, _) => Err((span, \"heap allocations are not allowed in const fn\".into())),\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);"}]}