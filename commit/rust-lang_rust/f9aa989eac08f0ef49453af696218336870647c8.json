{"sha": "f9aa989eac08f0ef49453af696218336870647c8", "node_id": "C_kwDOAAsO6NoAKGY5YWE5ODllYWMwOGYwZWY0OTQ1M2FmNjk2MjE4MzM2ODcwNjQ3Yzg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-01T14:49:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-01T14:49:28Z"}, "message": "Rollup merge of #99629 - obeis:issue-99470, r=compiler-errors\n\nImprove `cannot move out of` error message\n\nCloses #99470\nr? `@bjorn3`", "tree": {"sha": "7434f87f31babda10169e32805168ea7ef42a1af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7434f87f31babda10169e32805168ea7ef42a1af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9aa989eac08f0ef49453af696218336870647c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5+f4CRBK7hj4Ov3rIwAAe4QIAGh23ppZxpPdycwO3YvcwkQ5\nLD5jBlAS1z7vYIwLg/LaOgYxPQ1i82gA7BAloccMKvXEB+1gDdcrtVaZtF0M9sP9\n5MJw8fHTdHvXb3060HfHXMSN8OWl92PzHT9BtddOMhcKgTFOJYuP3NbDfYghec4U\nZjK4cRlv76l+wQ6I1vwM4ZezpuYtKoVT5GOadwoMxWsqALE8nBRHT3aAuKOMGMlx\nRc+ps/s4smZ+6bXGsnyuJ8WsrN3a1LaNNF+F9rris3vJiWhv5Q0cmMJ7x3RLK2il\ntl5Qtsqi0WzXAkXPdcanzX44fmySZ7bBIEzzdsGubwjY30GgVaZJ8QtmgUFht9w=\n=pjn5\n-----END PGP SIGNATURE-----\n", "payload": "tree 7434f87f31babda10169e32805168ea7ef42a1af\nparent 58042bffaccb8df5e65c9f86f3b5eec8da193773\nparent 86dd457e6a595f7a7fd55ebfda530e20cca478f4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659365368 +0200\ncommitter GitHub <noreply@github.com> 1659365368 +0200\n\nRollup merge of #99629 - obeis:issue-99470, r=compiler-errors\n\nImprove `cannot move out of` error message\n\nCloses #99470\nr? `@bjorn3`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9aa989eac08f0ef49453af696218336870647c8", "html_url": "https://github.com/rust-lang/rust/commit/f9aa989eac08f0ef49453af696218336870647c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9aa989eac08f0ef49453af696218336870647c8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58042bffaccb8df5e65c9f86f3b5eec8da193773", "url": "https://api.github.com/repos/rust-lang/rust/commits/58042bffaccb8df5e65c9f86f3b5eec8da193773", "html_url": "https://github.com/rust-lang/rust/commit/58042bffaccb8df5e65c9f86f3b5eec8da193773"}, {"sha": "86dd457e6a595f7a7fd55ebfda530e20cca478f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/86dd457e6a595f7a7fd55ebfda530e20cca478f4", "html_url": "https://github.com/rust-lang/rust/commit/86dd457e6a595f7a7fd55ebfda530e20cca478f4"}], "stats": {"total": 215, "additions": 154, "deletions": 61}, "files": [{"sha": "5da260f980fbb3126046819a188e5843ab88d103", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f9aa989eac08f0ef49453af696218336870647c8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9aa989eac08f0ef49453af696218336870647c8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=f9aa989eac08f0ef49453af696218336870647c8", "patch": "@@ -39,7 +39,7 @@ use crate::{\n \n use super::{\n     explain_borrow::{BorrowExplanation, LaterUseKind},\n-    IncludingDowncast, RegionName, RegionNameSource, UseSpans,\n+    DescribePlaceOpt, RegionName, RegionNameSource, UseSpans,\n };\n \n #[derive(Debug)]\n@@ -137,7 +137,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 span,\n                 desired_action.as_noun(),\n                 partially_str,\n-                self.describe_place_with_options(moved_place, IncludingDowncast(true)),\n+                self.describe_place_with_options(\n+                    moved_place,\n+                    DescribePlaceOpt { including_downcast: true, including_tuple_field: true },\n+                ),\n             );\n \n             let reinit_spans = maybe_reinitialized_locations\n@@ -274,8 +277,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n             }\n \n-            let opt_name =\n-                self.describe_place_with_options(place.as_ref(), IncludingDowncast(true));\n+            let opt_name = self.describe_place_with_options(\n+                place.as_ref(),\n+                DescribePlaceOpt { including_downcast: true, including_tuple_field: true },\n+            );\n             let note_msg = match opt_name {\n                 Some(ref name) => format!(\"`{}`\", name),\n                 None => \"value\".to_owned(),\n@@ -341,12 +346,17 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n         }\n \n-        let (name, desc) =\n-            match self.describe_place_with_options(moved_place, IncludingDowncast(true)) {\n-                Some(name) => (format!(\"`{name}`\"), format!(\"`{name}` \")),\n-                None => (\"the variable\".to_string(), String::new()),\n-            };\n-        let path = match self.describe_place_with_options(used_place, IncludingDowncast(true)) {\n+        let (name, desc) = match self.describe_place_with_options(\n+            moved_place,\n+            DescribePlaceOpt { including_downcast: true, including_tuple_field: true },\n+        ) {\n+            Some(name) => (format!(\"`{name}`\"), format!(\"`{name}` \")),\n+            None => (\"the variable\".to_string(), String::new()),\n+        };\n+        let path = match self.describe_place_with_options(\n+            used_place,\n+            DescribePlaceOpt { including_downcast: true, including_tuple_field: true },\n+        ) {\n             Some(name) => format!(\"`{name}`\"),\n             None => \"value\".to_string(),\n         };"}, {"sha": "098e8de9420fb89ef02b228382f0654bdee29975", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 57, "deletions": 17, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f9aa989eac08f0ef49453af696218336870647c8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9aa989eac08f0ef49453af696218336870647c8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=f9aa989eac08f0ef49453af696218336870647c8", "patch": "@@ -4,7 +4,7 @@ use itertools::Itertools;\n use rustc_const_eval::util::{call_kind, CallDesugaringKind};\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n-use rustc_hir::def::Namespace;\n+use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::GeneratorKind;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::tcx::PlaceTy;\n@@ -16,7 +16,7 @@ use rustc_middle::ty::print::Print;\n use rustc_middle::ty::{self, DefIdTree, Instance, Ty, TyCtxt};\n use rustc_mir_dataflow::move_paths::{InitLocation, LookupResult};\n use rustc_span::def_id::LocalDefId;\n-use rustc_span::{symbol::sym, Span, DUMMY_SP};\n+use rustc_span::{symbol::sym, Span, Symbol, DUMMY_SP};\n use rustc_target::abi::VariantIdx;\n use rustc_trait_selection::traits::type_known_to_meet_bound_modulo_regions;\n \n@@ -43,7 +43,15 @@ pub(crate) use region_errors::{ErrorConstraintInfo, RegionErrorKind, RegionError\n pub(crate) use region_name::{RegionName, RegionNameSource};\n pub(crate) use rustc_const_eval::util::CallKind;\n \n-pub(super) struct IncludingDowncast(pub(super) bool);\n+pub(super) struct DescribePlaceOpt {\n+    pub including_downcast: bool,\n+\n+    /// Enable/Disable tuple fields.\n+    /// For example `x` tuple. if it's `true` `x.0`. Otherwise `x`\n+    pub including_tuple_field: bool,\n+}\n+\n+pub(super) struct IncludingTupleField(pub(super) bool);\n \n impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// Adds a suggestion when a closure is invoked twice with a moved variable or when a closure\n@@ -164,7 +172,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     /// End-user visible description of `place` if one can be found.\n     /// If the place is a temporary for instance, `None` will be returned.\n     pub(super) fn describe_place(&self, place_ref: PlaceRef<'tcx>) -> Option<String> {\n-        self.describe_place_with_options(place_ref, IncludingDowncast(false))\n+        self.describe_place_with_options(\n+            place_ref,\n+            DescribePlaceOpt { including_downcast: false, including_tuple_field: true },\n+        )\n     }\n \n     /// End-user visible description of `place` if one can be found. If the place is a temporary\n@@ -174,7 +185,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     pub(super) fn describe_place_with_options(\n         &self,\n         place: PlaceRef<'tcx>,\n-        including_downcast: IncludingDowncast,\n+        opt: DescribePlaceOpt,\n     ) -> Option<String> {\n         let local = place.local;\n         let mut autoderef_index = None;\n@@ -224,7 +235,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         }\n                     }\n                 }\n-                ProjectionElem::Downcast(..) if including_downcast.0 => return None,\n+                ProjectionElem::Downcast(..) if opt.including_downcast => return None,\n                 ProjectionElem::Downcast(..) => (),\n                 ProjectionElem::Field(field, _ty) => {\n                     // FIXME(project-rfc_2229#36): print capture precisely here.\n@@ -238,9 +249,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         let field_name = self.describe_field(\n                             PlaceRef { local, projection: place.projection.split_at(index).0 },\n                             *field,\n+                            IncludingTupleField(opt.including_tuple_field),\n                         );\n-                        buf.push('.');\n-                        buf.push_str(&field_name);\n+                        if let Some(field_name_str) = field_name {\n+                            buf.push('.');\n+                            buf.push_str(&field_name_str);\n+                        }\n                     }\n                 }\n                 ProjectionElem::Index(index) => {\n@@ -261,6 +275,18 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         ok.ok().map(|_| buf)\n     }\n \n+    fn describe_name(&self, place: PlaceRef<'tcx>) -> Option<Symbol> {\n+        for elem in place.projection.into_iter() {\n+            match elem {\n+                ProjectionElem::Downcast(Some(name), _) => {\n+                    return Some(*name);\n+                }\n+                _ => {}\n+            }\n+        }\n+        None\n+    }\n+\n     /// Appends end-user visible description of the `local` place to `buf`. If `local` doesn't have\n     /// a name, or its name was generated by the compiler, then `Err` is returned\n     fn append_local_to_string(&self, local: Local, buf: &mut String) -> Result<(), ()> {\n@@ -275,7 +301,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     }\n \n     /// End-user visible description of the `field`nth field of `base`\n-    fn describe_field(&self, place: PlaceRef<'tcx>, field: Field) -> String {\n+    fn describe_field(\n+        &self,\n+        place: PlaceRef<'tcx>,\n+        field: Field,\n+        including_tuple_field: IncludingTupleField,\n+    ) -> Option<String> {\n         let place_ty = match place {\n             PlaceRef { local, projection: [] } => PlaceTy::from_ty(self.body.local_decls[local].ty),\n             PlaceRef { local, projection: [proj_base @ .., elem] } => match elem {\n@@ -289,7 +320,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 ProjectionElem::Field(_, field_type) => PlaceTy::from_ty(*field_type),\n             },\n         };\n-        self.describe_field_from_ty(place_ty.ty, field, place_ty.variant_index)\n+        self.describe_field_from_ty(\n+            place_ty.ty,\n+            field,\n+            place_ty.variant_index,\n+            including_tuple_field,\n+        )\n     }\n \n     /// End-user visible description of the `field_index`nth field of `ty`\n@@ -298,10 +334,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         ty: Ty<'_>,\n         field: Field,\n         variant_index: Option<VariantIdx>,\n-    ) -> String {\n+        including_tuple_field: IncludingTupleField,\n+    ) -> Option<String> {\n         if ty.is_box() {\n             // If the type is a box, the field is described from the boxed type\n-            self.describe_field_from_ty(ty.boxed_ty(), field, variant_index)\n+            self.describe_field_from_ty(ty.boxed_ty(), field, variant_index, including_tuple_field)\n         } else {\n             match *ty.kind() {\n                 ty::Adt(def, _) => {\n@@ -311,14 +348,17 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     } else {\n                         def.non_enum_variant()\n                     };\n-                    variant.fields[field.index()].name.to_string()\n+                    if !including_tuple_field.0 && variant.ctor_kind == CtorKind::Fn {\n+                        return None;\n+                    }\n+                    Some(variant.fields[field.index()].name.to_string())\n                 }\n-                ty::Tuple(_) => field.index().to_string(),\n+                ty::Tuple(_) => Some(field.index().to_string()),\n                 ty::Ref(_, ty, _) | ty::RawPtr(ty::TypeAndMut { ty, .. }) => {\n-                    self.describe_field_from_ty(ty, field, variant_index)\n+                    self.describe_field_from_ty(ty, field, variant_index, including_tuple_field)\n                 }\n                 ty::Array(ty, _) | ty::Slice(ty) => {\n-                    self.describe_field_from_ty(ty, field, variant_index)\n+                    self.describe_field_from_ty(ty, field, variant_index, including_tuple_field)\n                 }\n                 ty::Closure(def_id, _) | ty::Generator(def_id, _, _) => {\n                     // We won't be borrowck'ing here if the closure came from another crate,\n@@ -335,7 +375,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         .unwrap()\n                         .get_root_variable();\n \n-                    self.infcx.tcx.hir().name(var_id).to_string()\n+                    Some(self.infcx.tcx.hir().name(var_id).to_string())\n                 }\n                 _ => {\n                     // Might need a revision when the fields in trait RFC is implemented"}, {"sha": "cb3cd479ae2b63dbe446495b3a115051d8516113", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f9aa989eac08f0ef49453af696218336870647c8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9aa989eac08f0ef49453af696218336870647c8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=f9aa989eac08f0ef49453af696218336870647c8", "patch": "@@ -6,7 +6,7 @@ use rustc_mir_dataflow::move_paths::{\n };\n use rustc_span::Span;\n \n-use crate::diagnostics::UseSpans;\n+use crate::diagnostics::{DescribePlaceOpt, UseSpans};\n use crate::prefixes::PrefixSet;\n use crate::MirBorrowckCtxt;\n \n@@ -368,13 +368,31 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             }\n             _ => {\n                 let source = self.borrowed_content_source(deref_base);\n-                match (self.describe_place(move_place.as_ref()), source.describe_for_named_place())\n-                {\n-                    (Some(place_desc), Some(source_desc)) => self.cannot_move_out_of(\n+                let move_place_ref = move_place.as_ref();\n+                match (\n+                    self.describe_place_with_options(\n+                        move_place_ref,\n+                        DescribePlaceOpt {\n+                            including_downcast: false,\n+                            including_tuple_field: false,\n+                        },\n+                    ),\n+                    self.describe_name(move_place_ref),\n+                    source.describe_for_named_place(),\n+                ) {\n+                    (Some(place_desc), Some(name), Some(source_desc)) => self.cannot_move_out_of(\n+                        span,\n+                        &format!(\"`{place_desc}` as enum variant `{name}` which is behind a {source_desc}\"),\n+                    ),\n+                    (Some(place_desc), Some(name), None) => self.cannot_move_out_of(\n+                        span,\n+                        &format!(\"`{place_desc}` as enum variant `{name}`\"),\n+                    ),\n+                    (Some(place_desc), _, Some(source_desc)) => self.cannot_move_out_of(\n                         span,\n                         &format!(\"`{place_desc}` which is behind a {source_desc}\"),\n                     ),\n-                    (_, _) => self.cannot_move_out_of(\n+                    (_, _, _) => self.cannot_move_out_of(\n                         span,\n                         &source.describe_for_unnamed_place(self.infcx.tcx),\n                     ),"}, {"sha": "13a6277da14c0898b95ab55ef527e3b4fe8fa72e", "filename": "src/test/ui/borrowck/access-mode-in-closures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9aa989eac08f0ef49453af696218336870647c8/src%2Ftest%2Fui%2Fborrowck%2Faccess-mode-in-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9aa989eac08f0ef49453af696218336870647c8/src%2Ftest%2Fui%2Fborrowck%2Faccess-mode-in-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Faccess-mode-in-closures.stderr?ref=f9aa989eac08f0ef49453af696218336870647c8", "patch": "@@ -1,4 +1,4 @@\n-error[E0507]: cannot move out of `s.0` which is behind a shared reference\n+error[E0507]: cannot move out of `s` which is behind a shared reference\n   --> $DIR/access-mode-in-closures.rs:8:15\n    |\n LL |         match *s { S(v) => v }"}, {"sha": "96246d9ae1a8909ce949a36ce288f00f3821828b", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9aa989eac08f0ef49453af696218336870647c8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9aa989eac08f0ef49453af696218336870647c8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=f9aa989eac08f0ef49453af696218336870647c8", "patch": "@@ -1,4 +1,4 @@\n-error[E0507]: cannot move out of `f.0` which is behind a shared reference\n+error[E0507]: cannot move out of `f` as enum variant `Foo1` which is behind a shared reference\n   --> $DIR/borrowck-move-error-with-note.rs:11:11\n    |\n LL |     match *f {"}, {"sha": "f404cd3cd71253f5f2bba9c0c1f1056636a8c100", "filename": "src/test/ui/moves/issue-99470-move-out-of-some.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f9aa989eac08f0ef49453af696218336870647c8/src%2Ftest%2Fui%2Fmoves%2Fissue-99470-move-out-of-some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9aa989eac08f0ef49453af696218336870647c8/src%2Ftest%2Fui%2Fmoves%2Fissue-99470-move-out-of-some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-99470-move-out-of-some.rs?ref=f9aa989eac08f0ef49453af696218336870647c8", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let x: &Option<Box<i32>> = &Some(Box::new(0));\n+\n+    match x {\n+    //~^ ERROR cannot move out of `x` as enum variant `Some` which is behind a shared reference\n+        &Some(_y) => (),\n+        &None => (),\n+    }\n+}"}, {"sha": "6e4a4e5ba22c100872731b44911e34d57d260fd1", "filename": "src/test/ui/moves/issue-99470-move-out-of-some.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f9aa989eac08f0ef49453af696218336870647c8/src%2Ftest%2Fui%2Fmoves%2Fissue-99470-move-out-of-some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9aa989eac08f0ef49453af696218336870647c8/src%2Ftest%2Fui%2Fmoves%2Fissue-99470-move-out-of-some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-99470-move-out-of-some.stderr?ref=f9aa989eac08f0ef49453af696218336870647c8", "patch": "@@ -0,0 +1,16 @@\n+error[E0507]: cannot move out of `x` as enum variant `Some` which is behind a shared reference\n+  --> $DIR/issue-99470-move-out-of-some.rs:4:11\n+   |\n+LL |     match x {\n+   |           ^\n+LL |\n+LL |         &Some(_y) => (),\n+   |         ---------\n+   |         |     |\n+   |         |     data moved here\n+   |         |     move occurs because `_y` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |         help: consider removing the `&`: `Some(_y)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "5ed91a0d5596340888162fbf5dcef12579104f49", "filename": "src/test/ui/moves/moves-based-on-type-block-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9aa989eac08f0ef49453af696218336870647c8/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9aa989eac08f0ef49453af696218336870647c8/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.stderr?ref=f9aa989eac08f0ef49453af696218336870647c8", "patch": "@@ -1,4 +1,4 @@\n-error[E0507]: cannot move out of `hellothere.x.0` which is behind a shared reference\n+error[E0507]: cannot move out of `hellothere.x` as enum variant `Bar` which is behind a shared reference\n   --> $DIR/moves-based-on-type-block-bad.rs:22:19\n    |\n LL |             match hellothere.x {"}, {"sha": "b03fcf70babe25850fcc3d068e15a4e282b63dda", "filename": "src/test/ui/nll/move-errors.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9aa989eac08f0ef49453af696218336870647c8/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9aa989eac08f0ef49453af696218336870647c8/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=f9aa989eac08f0ef49453af696218336870647c8", "patch": "@@ -45,7 +45,7 @@ LL |     let a = [A(\"\".to_string())][0];\n    |             move occurs because value has type `A`, which does not implement the `Copy` trait\n    |             help: consider borrowing here: `&[A(\"\".to_string())][0]`\n \n-error[E0507]: cannot move out of `a.0` which is behind a shared reference\n+error[E0507]: cannot move out of `a` which is behind a shared reference\n   --> $DIR/move-errors.rs:38:16\n    |\n LL |     let A(s) = *a;\n@@ -134,7 +134,7 @@ LL |         F(s, mut t) => (),\n    |\n    = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n-error[E0507]: cannot move out of `x.0` which is behind a shared reference\n+error[E0507]: cannot move out of `x` as enum variant `Err` which is behind a shared reference\n   --> $DIR/move-errors.rs:110:11\n    |\n LL |     match *x {"}, {"sha": "e5443290f9e7a603f60dec3ac74f75d5a3233c47", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f9aa989eac08f0ef49453af696218336870647c8/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9aa989eac08f0ef49453af696218336870647c8/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr?ref=f9aa989eac08f0ef49453af696218336870647c8", "patch": "@@ -1,4 +1,4 @@\n-error[E0507]: cannot move out of `s.0` which is behind a shared reference\n+error[E0507]: cannot move out of `s` which is behind a shared reference\n   --> $DIR/simple.rs:38:17\n    |\n LL |     let X(_t) = *s;\n@@ -7,7 +7,7 @@ LL |     let X(_t) = *s;\n    |           data moved here\n    |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of `r.0` which is behind a shared reference\n+error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n   --> $DIR/simple.rs:42:30\n    |\n LL |     if let Either::One(_t) = *r { }\n@@ -16,7 +16,7 @@ LL |     if let Either::One(_t) = *r { }\n    |                        data moved here\n    |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of `r.0` which is behind a shared reference\n+error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n   --> $DIR/simple.rs:46:33\n    |\n LL |     while let Either::One(_t) = *r { }\n@@ -25,7 +25,7 @@ LL |     while let Either::One(_t) = *r { }\n    |                           data moved here\n    |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of `r.0` which is behind a shared reference\n+error[E0507]: cannot move out of `r` as enum variant `Two` which is behind a shared reference\n   --> $DIR/simple.rs:50:11\n    |\n LL |     match *r {\n@@ -37,7 +37,7 @@ LL |         Either::One(_t)\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of `r.0` which is behind a shared reference\n+error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n   --> $DIR/simple.rs:57:11\n    |\n LL |     match *r {\n@@ -49,7 +49,7 @@ LL |         Either::One(_t) => (),\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of `sm.0` which is behind a mutable reference\n+error[E0507]: cannot move out of `sm` which is behind a mutable reference\n   --> $DIR/simple.rs:66:17\n    |\n LL |     let X(_t) = *sm;\n@@ -58,7 +58,7 @@ LL |     let X(_t) = *sm;\n    |           data moved here\n    |           move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n+error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n   --> $DIR/simple.rs:70:30\n    |\n LL |     if let Either::One(_t) = *rm { }\n@@ -67,7 +67,7 @@ LL |     if let Either::One(_t) = *rm { }\n    |                        data moved here\n    |                        move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n+error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n   --> $DIR/simple.rs:74:33\n    |\n LL |     while let Either::One(_t) = *rm { }\n@@ -76,7 +76,7 @@ LL |     while let Either::One(_t) = *rm { }\n    |                           data moved here\n    |                           move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n+error[E0507]: cannot move out of `rm` as enum variant `Two` which is behind a mutable reference\n   --> $DIR/simple.rs:78:11\n    |\n LL |     match *rm {\n@@ -88,7 +88,7 @@ LL |         Either::One(_t)\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n+error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n   --> $DIR/simple.rs:85:11\n    |\n LL |     match *rm {\n@@ -100,7 +100,7 @@ LL |         Either::One(_t) => (),\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n+error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n   --> $DIR/simple.rs:93:11\n    |\n LL |     match *rm {\n@@ -226,7 +226,7 @@ LL |         Either::One(_t) => (),\n    |                     data moved here\n    |                     move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n \n-error[E0507]: cannot move out of `s.0` which is behind a shared reference\n+error[E0507]: cannot move out of `s` which is behind a shared reference\n   --> $DIR/simple.rs:168:18\n    |\n LL |     let &X(_t) = s;\n@@ -236,7 +236,7 @@ LL |     let &X(_t) = s;\n    |         |  move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `X(_t)`\n \n-error[E0507]: cannot move out of `r.0` which is behind a shared reference\n+error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n   --> $DIR/simple.rs:172:31\n    |\n LL |     if let &Either::One(_t) = r { }\n@@ -246,7 +246,7 @@ LL |     if let &Either::One(_t) = r { }\n    |            |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |            help: consider removing the `&`: `Either::One(_t)`\n \n-error[E0507]: cannot move out of `r.0` which is behind a shared reference\n+error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n   --> $DIR/simple.rs:176:34\n    |\n LL |     while let &Either::One(_t) = r { }\n@@ -256,7 +256,7 @@ LL |     while let &Either::One(_t) = r { }\n    |               |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |               help: consider removing the `&`: `Either::One(_t)`\n \n-error[E0507]: cannot move out of `r.0` which is behind a shared reference\n+error[E0507]: cannot move out of `r` as enum variant `Two` which is behind a shared reference\n   --> $DIR/simple.rs:180:11\n    |\n LL |     match r {\n@@ -276,7 +276,7 @@ LL +\n LL ~         | &Either::Two(_t) => (),\n    |\n \n-error[E0507]: cannot move out of `r.0` which is behind a shared reference\n+error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n   --> $DIR/simple.rs:188:11\n    |\n LL |     match r {\n@@ -289,7 +289,7 @@ LL |         &Either::One(_t) => (),\n    |         |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `Either::One(_t)`\n \n-error[E0507]: cannot move out of `r.0` which is behind a shared reference\n+error[E0507]: cannot move out of `r` as enum variant `One` which is behind a shared reference\n   --> $DIR/simple.rs:195:11\n    |\n LL |     match r {\n@@ -302,7 +302,7 @@ LL |         &Either::One(_t) => (),\n    |         |            move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&`: `Either::One(_t)`\n \n-error[E0507]: cannot move out of `sm.0` which is behind a mutable reference\n+error[E0507]: cannot move out of `sm` which is behind a mutable reference\n   --> $DIR/simple.rs:207:22\n    |\n LL |     let &mut X(_t) = sm;\n@@ -312,7 +312,7 @@ LL |     let &mut X(_t) = sm;\n    |         |      move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n    |         help: consider removing the `&mut`: `X(_t)`\n \n-error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n+error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n   --> $DIR/simple.rs:211:35\n    |\n LL |     if let &mut Either::One(_t) = rm { }\n@@ -322,7 +322,7 @@ LL |     if let &mut Either::One(_t) = rm { }\n    |            |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |            help: consider removing the `&mut`: `Either::One(_t)`\n \n-error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n+error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n   --> $DIR/simple.rs:215:38\n    |\n LL |     while let &mut Either::One(_t) = rm { }\n@@ -332,7 +332,7 @@ LL |     while let &mut Either::One(_t) = rm { }\n    |               |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |               help: consider removing the `&mut`: `Either::One(_t)`\n \n-error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n+error[E0507]: cannot move out of `rm` as enum variant `Two` which is behind a mutable reference\n   --> $DIR/simple.rs:219:11\n    |\n LL |     match rm {\n@@ -354,7 +354,7 @@ help: consider removing the `&mut`\n LL |         Either::Two(_t) => (),\n    |         ~~~~~~~~~~~~~~~\n \n-error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n+error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n   --> $DIR/simple.rs:228:11\n    |\n LL |     match rm {\n@@ -367,7 +367,7 @@ LL |         &mut Either::One(_t) => (),\n    |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n \n-error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n+error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n   --> $DIR/simple.rs:235:11\n    |\n LL |     match rm {\n@@ -380,7 +380,7 @@ LL |         &mut Either::One(_t) => (),\n    |         |                move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n    |         help: consider removing the `&mut`: `Either::One(_t)`\n \n-error[E0507]: cannot move out of `rm.0` which is behind a mutable reference\n+error[E0507]: cannot move out of `rm` as enum variant `One` which is behind a mutable reference\n   --> $DIR/simple.rs:242:11\n    |\n LL |     match rm {"}]}