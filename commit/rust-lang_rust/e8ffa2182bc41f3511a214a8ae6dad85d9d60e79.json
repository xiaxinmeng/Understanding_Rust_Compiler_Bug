{"sha": "e8ffa2182bc41f3511a214a8ae6dad85d9d60e79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZmZhMjE4MmJjNDFmMzUxMWEyMTRhOGFlNmRhZDg1ZDlkNjBlNzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-28T21:48:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-28T21:48:22Z"}, "message": "better document const-pattern dynamic soundness checks, and fix a soundness hole", "tree": {"sha": "841a5d392cdc9ba6ecdacaa83c9b81254cd2825b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/841a5d392cdc9ba6ecdacaa83c9b81254cd2825b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8ffa2182bc41f3511a214a8ae6dad85d9d60e79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ffa2182bc41f3511a214a8ae6dad85d9d60e79", "html_url": "https://github.com/rust-lang/rust/commit/e8ffa2182bc41f3511a214a8ae6dad85d9d60e79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8ffa2182bc41f3511a214a8ae6dad85d9d60e79/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db98d32ea04438cf759b749d5cbeba4f77222664", "url": "https://api.github.com/repos/rust-lang/rust/commits/db98d32ea04438cf759b749d5cbeba4f77222664", "html_url": "https://github.com/rust-lang/rust/commit/db98d32ea04438cf759b749d5cbeba4f77222664"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "d97546e4391b536378203e772bb078526aee962c", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8ffa2182bc41f3511a214a8ae6dad85d9d60e79/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ffa2182bc41f3511a214a8ae6dad85d9d60e79/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=e8ffa2182bc41f3511a214a8ae6dad85d9d60e79", "patch": "@@ -193,7 +193,7 @@ fn validate_and_turn_into_const<'tcx>(\n                     mplace.into(),\n                     path,\n                     &mut ref_tracking,\n-                    /*may_ref_to_static*/ is_static,\n+                    /*may_ref_to_static*/ ecx.memory.extra.can_access_statics,\n                 )?;\n             }\n         }"}, {"sha": "ce9d25599ff9a5e0a3a7d5cfa2cbf5aedf88a047", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8ffa2182bc41f3511a214a8ae6dad85d9d60e79/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ffa2182bc41f3511a214a8ae6dad85d9d60e79/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=e8ffa2182bc41f3511a214a8ae6dad85d9d60e79", "patch": "@@ -99,7 +99,12 @@ pub struct CompileTimeInterpreter<'mir, 'tcx> {\n \n #[derive(Copy, Clone, Debug)]\n pub struct MemoryExtra {\n-    /// Whether this machine may read from statics\n+    /// We need to make sure consts never point to anything mutable, even recursively. That is\n+    /// relied on for pattern matching on consts with references.\n+    /// To achieve this, two pieces have to work together:\n+    /// * Interning makes everything outside of statics immutable.\n+    /// * Pointers to allocations inside of statics can never leak outside, to a non-static global.\n+    /// This boolean here controls the second part.\n     pub(super) can_access_statics: bool,\n }\n \n@@ -337,6 +342,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             } else if static_def_id.is_some() {\n                 // Machine configuration does not allow us to read statics\n                 // (e.g., `const` initializer).\n+                // See const_eval::machine::MemoryExtra::can_access_statics for why\n+                // this check is so important.\n                 Err(ConstEvalErrKind::ConstAccessesStatic.into())\n             } else {\n                 // Immutable global, this read is fine."}, {"sha": "df3c353220318bdd665946b662522b939f1a57ec", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e8ffa2182bc41f3511a214a8ae6dad85d9d60e79/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8ffa2182bc41f3511a214a8ae6dad85d9d60e79/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=e8ffa2182bc41f3511a214a8ae6dad85d9d60e79", "patch": "@@ -404,19 +404,27 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 // Skip validation entirely for some external statics\n                 let alloc_kind = self.ecx.tcx.alloc_map.lock().get(ptr.alloc_id);\n                 if let Some(GlobalAlloc::Static(did)) = alloc_kind {\n-                    // `extern static` cannot be validated as they have no body.\n-                    // FIXME: Statics from other crates are also skipped.\n-                    // They might be checked at a different type, but for now we\n-                    // want to avoid recursing too deeply.  This is not sound!\n-                    if !did.is_local() || self.ecx.tcx.is_foreign_item(did) {\n-                        return Ok(());\n-                    }\n+                    // See const_eval::machine::MemoryExtra::can_access_statics for why\n+                    // this check is so important.\n+                    // This check is reachable when the const just referenced the static,\n+                    // but never read it (so we never entered `before_access_global`).\n+                    // We also need to do it here instead of going on to avoid running\n+                    // into the `before_access_global` check during validation.\n                     if !self.may_ref_to_static && self.ecx.tcx.is_static(did) {\n                         throw_validation_failure!(\n                             format_args!(\"a {} pointing to a static variable\", kind),\n                             self.path\n                         );\n                     }\n+                    // `extern static` cannot be validated as they have no body.\n+                    // FIXME: Statics from other crates are also skipped.\n+                    // They might be checked at a different type, but for now we\n+                    // want to avoid recursing too deeply.  We might miss const-invalid data,\n+                    // but things are still sound otherwise (in particular re: consts\n+                    // referring to statics).\n+                    if !did.is_local() || self.ecx.tcx.is_foreign_item(did) {\n+                        return Ok(());\n+                    }\n                 }\n             }\n             // Proceed recursively even for ZST, no reason to skip them!"}]}