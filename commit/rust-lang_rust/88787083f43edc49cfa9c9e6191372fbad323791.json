{"sha": "88787083f43edc49cfa9c9e6191372fbad323791", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4Nzg3MDgzZjQzZWRjNDljZmE5YzllNjE5MTM3MmZiYWQzMjM3OTE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-24T15:40:28Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:06:36Z"}, "message": "this might be unqualified, but at least it's now quantified", "tree": {"sha": "9be3720247f081ed1d00a5d0b328fe43fe1867a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9be3720247f081ed1d00a5d0b328fe43fe1867a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88787083f43edc49cfa9c9e6191372fbad323791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88787083f43edc49cfa9c9e6191372fbad323791", "html_url": "https://github.com/rust-lang/rust/commit/88787083f43edc49cfa9c9e6191372fbad323791", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88787083f43edc49cfa9c9e6191372fbad323791/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfa1af20598da8eaeab979e3f38ad2c2cd80f719", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa1af20598da8eaeab979e3f38ad2c2cd80f719", "html_url": "https://github.com/rust-lang/rust/commit/dfa1af20598da8eaeab979e3f38ad2c2cd80f719"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "7eeb6a75ea7b06eb10cb40332b16b8efe702d7d3", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88787083f43edc49cfa9c9e6191372fbad323791/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88787083f43edc49cfa9c9e6191372fbad323791/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=88787083f43edc49cfa9c9e6191372fbad323791", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n                                     infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n-                                    if let Trait(trait_pred, _) = obligation.predicate.ignore_qualifiers().skip_binder().kind() {\n+                                    if let Trait(trait_pred, _) = obligation.predicate.ignore_quantifiers().skip_binder().kind() {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n                                             trait_pred.self_ty(),"}, {"sha": "a450d5f16f8cb5337590c951ed098d2509bef20c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88787083f43edc49cfa9c9e6191372fbad323791/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88787083f43edc49cfa9c9e6191372fbad323791/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=88787083f43edc49cfa9c9e6191372fbad323791", "patch": "@@ -1559,7 +1559,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let ty::Opaque(def_id, _) = ret_ty.kind {\n                 // one of the associated types must be Self\n                 for &(predicate, _span) in cx.tcx.predicates_of(def_id).predicates {\n-                    if let ty::PredicateKind::Projection(projection_predicate) = predicate.ignore_qualifiers().skip_binder().kind() {\n+                    if let ty::PredicateKind::Projection(projection_predicate) = predicate.ignore_quantifiers().skip_binder().kind() {\n                         // walk the associated type and check for Self\n                         if contains_self_ty(projection_predicate.ty) {\n                             return;"}, {"sha": "c4603418ee3c65287f392df70b72cdcf826df573", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88787083f43edc49cfa9c9e6191372fbad323791/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88787083f43edc49cfa9c9e6191372fbad323791/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=88787083f43edc49cfa9c9e6191372fbad323791", "patch": "@@ -1263,7 +1263,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Opaque(ref def_id, _) => {\n             for (predicate, _) in cx.tcx.predicates_of(*def_id).predicates {\n-                if let ty::PredicateKind::Trait(trait_predicate, _) = predicate.ignore_qualifiers().skip_binder().kind() {\n+                if let ty::PredicateKind::Trait(trait_predicate, _) = predicate.ignore_quantifiers().skip_binder().kind() {\n                     if must_use_attr(&cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some() {\n                         return true;\n                     }"}]}