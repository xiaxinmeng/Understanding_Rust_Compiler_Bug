{"sha": "6c9249f68935c789231b89c15986795dbc95511e", "node_id": "C_kwDOAAsO6NoAKDZjOTI0OWY2ODkzNWM3ODkyMzFiODljMTU5ODY3OTVkYmM5NTUxMWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-25T19:48:59Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-27T17:18:12Z"}, "message": "Don't call await a method", "tree": {"sha": "4dfcfd608abc4cf7a53f7a579d52f4c07db77ea4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dfcfd608abc4cf7a53f7a579d52f4c07db77ea4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c9249f68935c789231b89c15986795dbc95511e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9249f68935c789231b89c15986795dbc95511e", "html_url": "https://github.com/rust-lang/rust/commit/6c9249f68935c789231b89c15986795dbc95511e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c9249f68935c789231b89c15986795dbc95511e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6077fc1b885c525279d127fd78db4574f735900", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6077fc1b885c525279d127fd78db4574f735900", "html_url": "https://github.com/rust-lang/rust/commit/e6077fc1b885c525279d127fd78db4574f735900"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "4a616dc24641aae88d2fdf063f5b04ba70e6ebae", "filename": "compiler/rustc_borrowck/messages.ftl", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6c9249f68935c789231b89c15986795dbc95511e/compiler%2Frustc_borrowck%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/6c9249f68935c789231b89c15986795dbc95511e/compiler%2Frustc_borrowck%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fmessages.ftl?ref=6c9249f68935c789231b89c15986795dbc95511e", "patch": "@@ -203,6 +203,15 @@ borrowck_moved_due_to_method_call =\n         *[false] call\n     }\n \n+borrowck_moved_due_to_await =\n+    {$place_name} {$is_partial ->\n+        [true] partially moved\n+        *[false] moved\n+    } due to this {$is_loop_message ->\n+        [true] await, in previous iteration of loop\n+        *[false] await\n+    }\n+\n borrowck_value_moved_here =\n     value {$is_partial ->\n         [true] partially moved"}, {"sha": "a780255725e71c534fea07b9e27409042194b5df", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6c9249f68935c789231b89c15986795dbc95511e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9249f68935c789231b89c15986795dbc95511e/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=6c9249f68935c789231b89c15986795dbc95511e", "patch": "@@ -1085,12 +1085,21 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             }\n                         }\n                     } else {\n-                        err.subdiagnostic(CaptureReasonLabel::MethodCall {\n-                            fn_call_span,\n-                            place_name: &place_name,\n-                            is_partial,\n-                            is_loop_message,\n-                        });\n+                        if let Some((CallDesugaringKind::Await, _)) = desugaring {\n+                            err.subdiagnostic(CaptureReasonLabel::Await {\n+                                fn_call_span,\n+                                place_name: &place_name,\n+                                is_partial,\n+                                is_loop_message,\n+                            });\n+                        } else {\n+                            err.subdiagnostic(CaptureReasonLabel::MethodCall {\n+                                fn_call_span,\n+                                place_name: &place_name,\n+                                is_partial,\n+                                is_loop_message,\n+                            });\n+                        }\n                         // Erase and shadow everything that could be passed to the new infcx.\n                         let ty = moved_place.ty(self.body, tcx).ty;\n "}, {"sha": "fceae5bb3ffe030eccd9806c4b0b2909a767da4e", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c9249f68935c789231b89c15986795dbc95511e/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9249f68935c789231b89c15986795dbc95511e/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=6c9249f68935c789231b89c15986795dbc95511e", "patch": "@@ -338,6 +338,14 @@ pub(crate) enum CaptureReasonLabel<'a> {\n         is_partial: bool,\n         is_loop_message: bool,\n     },\n+    #[label(borrowck_moved_due_to_await)]\n+    Await {\n+        #[primary_span]\n+        fn_call_span: Span,\n+        place_name: &'a str,\n+        is_partial: bool,\n+        is_loop_message: bool,\n+    },\n     #[label(borrowck_value_moved_here)]\n     MovedHere {\n         #[primary_span]"}, {"sha": "4cef2fcec1bb7bba66d9077dab20a7715a479a67", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c9249f68935c789231b89c15986795dbc95511e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9249f68935c789231b89c15986795dbc95511e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=6c9249f68935c789231b89c15986795dbc95511e", "patch": "@@ -184,6 +184,9 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                     CallDesugaringKind::TryBlockFromOutput => {\n                         error!(\"`try` block cannot convert `{}` to the result in {}s\")\n                     }\n+                    CallDesugaringKind::Await => {\n+                        error!(\"cannot convert `{}` into a future in {}s\")\n+                    }\n                 };\n \n                 diag_trait(&mut err, self_ty, kind.trait_def_id(tcx));"}, {"sha": "98d55ea6d40253d0e31d236fa004651cbc96f0db", "filename": "compiler/rustc_middle/src/util/call_kind.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c9249f68935c789231b89c15986795dbc95511e/compiler%2Frustc_middle%2Fsrc%2Futil%2Fcall_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9249f68935c789231b89c15986795dbc95511e/compiler%2Frustc_middle%2Fsrc%2Futil%2Fcall_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Futil%2Fcall_kind.rs?ref=6c9249f68935c789231b89c15986795dbc95511e", "patch": "@@ -19,6 +19,8 @@ pub enum CallDesugaringKind {\n     QuestionFromResidual,\n     /// try { ..; x } calls type_of(x)::from_output(x)\n     TryBlockFromOutput,\n+    /// `.await` calls `IntoFuture::into_future`\n+    Await,\n }\n \n impl CallDesugaringKind {\n@@ -29,6 +31,7 @@ impl CallDesugaringKind {\n                 tcx.require_lang_item(LangItem::Try, None)\n             }\n             Self::QuestionFromResidual => tcx.get_diagnostic_item(sym::FromResidual).unwrap(),\n+            Self::Await => tcx.get_diagnostic_item(sym::IntoFuture).unwrap(),\n         }\n     }\n }\n@@ -129,6 +132,8 @@ pub fn call_kind<'tcx>(\n             && fn_call_span.desugaring_kind() == Some(DesugaringKind::TryBlock)\n         {\n             Some((CallDesugaringKind::TryBlockFromOutput, method_substs.type_at(0)))\n+        } else if fn_call_span.is_desugaring(DesugaringKind::Await) {\n+            Some((CallDesugaringKind::Await, method_substs.type_at(0)))\n         } else {\n             None\n         };"}, {"sha": "c905eea202d1ac78d22aa83acd60d5cd12548b43", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c9249f68935c789231b89c15986795dbc95511e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9249f68935c789231b89c15986795dbc95511e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6c9249f68935c789231b89c15986795dbc95511e", "patch": "@@ -208,6 +208,7 @@ symbols! {\n         Input,\n         Into,\n         IntoDiagnostic,\n+        IntoFuture,\n         IntoIterator,\n         IoRead,\n         IoWrite,"}, {"sha": "38c654e76b46c66212ae5ef26d3bfe67057fa29b", "filename": "library/core/src/future/into_future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c9249f68935c789231b89c15986795dbc95511e/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c9249f68935c789231b89c15986795dbc95511e/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs?ref=6c9249f68935c789231b89c15986795dbc95511e", "patch": "@@ -99,6 +99,7 @@ use crate::future::Future;\n /// }\n /// ```\n #[stable(feature = \"into_future\", since = \"1.64.0\")]\n+#[rustc_diagnostic_item = \"IntoFuture\"]\n pub trait IntoFuture {\n     /// The output that the future will produce on completion.\n     #[stable(feature = \"into_future\", since = \"1.64.0\")]"}, {"sha": "c02206f6f9bf0704f9c87458393e71b01e1f4d22", "filename": "tests/ui/async-await/clone-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c9249f68935c789231b89c15986795dbc95511e/tests%2Fui%2Fasync-await%2Fclone-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c9249f68935c789231b89c15986795dbc95511e/tests%2Fui%2Fasync-await%2Fclone-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fclone-suggestion.stderr?ref=6c9249f68935c789231b89c15986795dbc95511e", "patch": "@@ -4,7 +4,7 @@ error[E0382]: use of moved value: `f`\n LL |     let f = SharedFuture;\n    |         - move occurs because `f` has type `SharedFuture`, which does not implement the `Copy` trait\n LL |     f.await;\n-   |       ----- `f` moved due to this method call\n+   |       ----- `f` moved due to this await\n LL |     f.await;\n    |     ^ value used here after move\n    |"}]}