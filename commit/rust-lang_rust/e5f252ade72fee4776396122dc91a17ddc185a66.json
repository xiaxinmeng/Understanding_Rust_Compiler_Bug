{"sha": "e5f252ade72fee4776396122dc91a17ddc185a66", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZjI1MmFkZTcyZmVlNDc3NjM5NjEyMmRjOTFhMTdkZGMxODVhNjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-03T11:00:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-03T11:00:30Z"}, "message": "Merge #5997\n\n5997: Better inlay hints in 'for' loops r=popzxc a=popzxc\n\nFor #5206 (one part of the fix).\r\n\r\nThis PR refines the logic of spawning an inlay hints in `for` loops. We only must provide a hint if the following criteria are met:\r\n\r\n- User already typed `in` keyword.\r\n- Type of expression is known and it's not unit.\r\n\r\n**However:** I don't know why, but I was unable to make `complete_for_hint` test work. Either without or with my changes, I was always getting this test failed because no hint was spawned for the loop variable.\r\n\r\nThis change works locally, so I would really appreciate an explanation why this test isn't working now and how to fix it.\r\n\r\n![image](https://user-images.githubusercontent.com/12111581/93024580-41a53380-f600-11ea-9bb1-1f8ac141be95.png)\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>", "tree": {"sha": "a9d154c1920dd03e72d83f016e77eb8b652fbbc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9d154c1920dd03e72d83f016e77eb8b652fbbc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5f252ade72fee4776396122dc91a17ddc185a66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfeFnOCRBK7hj4Ov3rIwAAdHIIAI1EfnFyDnlBWf0nBGBlQEXG\nE7jcNoAzwoVKOKUQ3v0OgTqreqyxfo86UNdITrhcjyEhQ9ekXmnkuoflgf7Flb1+\nuQVu2lrizOFB9jGaCmvkZIO+/nGuOrwA+0b12a1h1VYD5pbI/hHP1G6o7PP/FsJF\nFLku/UidTNhh2E3rMbYwxoJPmKP9D0orS2IIsrJkbYqgHUNnJb1+cp5gL4HVd6Hb\nL1AJBB1b5BDAmgutaJ4z7MuGjQKyR6iU/FFANgi0GbCUlUc3+ZsAFFHmg20Zxe+P\nMbZX0ro4JhvcBhzHfAALrfOZ7ncJDYNE+IrXcPOqNWGY/AA8CHd0BCEN0l1LWQk=\n=LYn8\n-----END PGP SIGNATURE-----\n", "payload": "tree a9d154c1920dd03e72d83f016e77eb8b652fbbc4\nparent 03dcf5111ad23700335d25ef02749666bbd08cca\nparent 3cadba4956bf22759803024b69b6bb67e34da576\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1601722830 +0000\ncommitter GitHub <noreply@github.com> 1601722830 +0000\n\nMerge #5997\n\n5997: Better inlay hints in 'for' loops r=popzxc a=popzxc\n\nFor #5206 (one part of the fix).\r\n\r\nThis PR refines the logic of spawning an inlay hints in `for` loops. We only must provide a hint if the following criteria are met:\r\n\r\n- User already typed `in` keyword.\r\n- Type of expression is known and it's not unit.\r\n\r\n**However:** I don't know why, but I was unable to make `complete_for_hint` test work. Either without or with my changes, I was always getting this test failed because no hint was spawned for the loop variable.\r\n\r\nThis change works locally, so I would really appreciate an explanation why this test isn't working now and how to fix it.\r\n\r\n![image](https://user-images.githubusercontent.com/12111581/93024580-41a53380-f600-11ea-9bb1-1f8ac141be95.png)\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f252ade72fee4776396122dc91a17ddc185a66", "html_url": "https://github.com/rust-lang/rust/commit/e5f252ade72fee4776396122dc91a17ddc185a66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5f252ade72fee4776396122dc91a17ddc185a66/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03dcf5111ad23700335d25ef02749666bbd08cca", "url": "https://api.github.com/repos/rust-lang/rust/commits/03dcf5111ad23700335d25ef02749666bbd08cca", "html_url": "https://github.com/rust-lang/rust/commit/03dcf5111ad23700335d25ef02749666bbd08cca"}, {"sha": "3cadba4956bf22759803024b69b6bb67e34da576", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cadba4956bf22759803024b69b6bb67e34da576", "html_url": "https://github.com/rust-lang/rust/commit/3cadba4956bf22759803024b69b6bb67e34da576"}], "stats": {"total": 132, "additions": 117, "deletions": 15}, "files": [{"sha": "1d7e8de565903e44fd438955e550f34a71bef722", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 117, "deletions": 15, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/e5f252ade72fee4776396122dc91a17ddc185a66/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f252ade72fee4776396122dc91a17ddc185a66/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=e5f252ade72fee4776396122dc91a17ddc185a66", "patch": "@@ -189,7 +189,7 @@ fn get_bind_pat_hints(\n \n     let ty = sema.type_of_pat(&pat.clone().into())?;\n \n-    if should_not_display_type_hint(sema.db, &pat, &ty) {\n+    if should_not_display_type_hint(sema, &pat, &ty) {\n         return None;\n     }\n \n@@ -215,10 +215,12 @@ fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &Typ\n }\n \n fn should_not_display_type_hint(\n-    db: &RootDatabase,\n+    sema: &Semantics<RootDatabase>,\n     bind_pat: &ast::IdentPat,\n     pat_ty: &Type,\n ) -> bool {\n+    let db = sema.db;\n+\n     if pat_ty.is_unknown() {\n         return true;\n     }\n@@ -249,6 +251,15 @@ fn should_not_display_type_hint(\n                     return it.condition().and_then(|condition| condition.pat()).is_some()\n                         && pat_is_enum_variant(db, bind_pat, pat_ty);\n                 },\n+                ast::ForExpr(it) => {\n+                    // We *should* display hint only if user provided \"in {expr}\" and we know the type of expr (and it's not unit).\n+                    // Type of expr should be iterable.\n+                    return it.in_token().is_none() ||\n+                        it.iterable()\n+                            .and_then(|iterable_expr|sema.type_of_expr(&iterable_expr))\n+                            .map(|iterable_ty| iterable_ty.is_unknown() || iterable_ty.is_unit())\n+                            .unwrap_or(true)\n+                },\n                 _ => (),\n             }\n         }\n@@ -495,19 +506,6 @@ fn main() {\n         );\n     }\n \n-    #[test]\n-    fn for_expression() {\n-        check(\n-            r#\"\n-fn main() {\n-    let mut start = 0;\n-      //^^^^^^^^^ i32\n-    for increment in 0..2 { start += increment; }\n-      //^^^^^^^^^ i32\n-}\"#,\n-        );\n-    }\n-\n     #[test]\n     fn if_expr() {\n         check(\n@@ -924,4 +922,108 @@ fn main() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn incomplete_for_no_hint() {\n+        check(\n+            r#\"\n+fn main() {\n+    let data = &[1i32, 2, 3];\n+      //^^^^ &[i32; _]\n+    for i\n+}\"#,\n+        );\n+        check(\n+            r#\"\n+//- /main.rs crate:main deps:core\n+pub struct Vec<T> {}\n+\n+impl<T> Vec<T> {\n+    pub fn new() -> Self { Vec {} }\n+    pub fn push(&mut self, t: T) {}\n+}\n+\n+impl<T> IntoIterator for Vec<T> {\n+    type Item=T;\n+}\n+\n+fn main() {\n+    let mut data = Vec::new();\n+      //^^^^^^^^ Vec<&str>\n+    data.push(\"foo\");\n+    for i in\n+\n+    println!(\"Unit expr\");\n+}\n+\n+//- /core.rs crate:core\n+#[prelude_import] use iter::*;\n+mod iter {\n+    trait IntoIterator {\n+        type Item;\n+    }\n+}\n+//- /alloc.rs crate:alloc deps:core\n+mod collections {\n+    struct Vec<T> {}\n+    impl<T> Vec<T> {\n+        fn new() -> Self { Vec {} }\n+        fn push(&mut self, t: T) { }\n+    }\n+    impl<T> IntoIterator for Vec<T> {\n+        type Item=T;\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_for_hint() {\n+        check(\n+            r#\"\n+//- /main.rs crate:main deps:core\n+pub struct Vec<T> {}\n+\n+impl<T> Vec<T> {\n+    pub fn new() -> Self { Vec {} }\n+    pub fn push(&mut self, t: T) {}\n+}\n+\n+impl<T> IntoIterator for Vec<T> {\n+    type Item=T;\n+}\n+\n+fn main() {\n+    let mut data = Vec::new();\n+      //^^^^^^^^ Vec<&str>\n+    data.push(\"foo\");\n+    for i in data {\n+      //^ &str\n+      let z = i;\n+        //^ &str\n+    }\n+}\n+\n+//- /core.rs crate:core\n+#[prelude_import] use iter::*;\n+mod iter {\n+    trait IntoIterator {\n+        type Item;\n+    }\n+}\n+//- /alloc.rs crate:alloc deps:core\n+mod collections {\n+    struct Vec<T> {}\n+    impl<T> Vec<T> {\n+        fn new() -> Self { Vec {} }\n+        fn push(&mut self, t: T) { }\n+    }\n+    impl<T> IntoIterator for Vec<T> {\n+        type Item=T;\n+    }\n+}\n+\"#,\n+        );\n+    }\n }"}]}