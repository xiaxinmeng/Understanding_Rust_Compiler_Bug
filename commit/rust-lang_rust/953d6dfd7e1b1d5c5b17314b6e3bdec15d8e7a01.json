{"sha": "953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1M2Q2ZGZkN2UxYjFkNWM1YjE3MzE0YjZlM2JkZWMxNWQ4ZTdhMDE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-16T23:54:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-20T19:27:14Z"}, "message": "Make error code registration work again. #19624", "tree": {"sha": "9484471680b6a961392df1120297ed868795f77b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9484471680b6a961392df1120297ed868795f77b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01", "html_url": "https://github.com/rust-lang/rust/commit/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0f86de49748b472d4d189d9688b0d856c000914", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f86de49748b472d4d189d9688b0d856c000914", "html_url": "https://github.com/rust-lang/rust/commit/a0f86de49748b472d4d189d9688b0d856c000914"}], "stats": {"total": 208, "additions": 128, "deletions": 80}, "files": [{"sha": "7a7287a2fbfbb70fa3a6ff86783985586e23cda0", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01", "patch": "@@ -302,6 +302,7 @@ tidy:\n \t\t| grep '^$(S)src/libbacktrace' -v \\\n \t\t| grep '^$(S)src/rust-installer' -v \\\n \t\t| xargs $(CFG_PYTHON) $(S)src/etc/check-binaries.py\n+\t\t$(Q) $(CFG_PYTHON) $(S)src/etc/errorck.py $(S)src/\n \n \n endif"}, {"sha": "17659309d3b0d6822dcedb2b0f773e06d0b1187f", "filename": "src/etc/errorck.py", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Fetc%2Ferrorck.py", "raw_url": "https://github.com/rust-lang/rust/raw/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Fetc%2Ferrorck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ferrorck.py?ref=953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01", "patch": "@@ -0,0 +1,70 @@\n+# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# Digs error codes out of files named 'diagnostics.rs' across\n+# the tree, and ensures thare are no duplicates.\n+\n+import sys, os, re\n+\n+src_dir = sys.argv[1]\n+\n+errcode_map = { }\n+\n+for (dirpath, dirnames, filenames) in os.walk(src_dir):\n+\n+    if \"src/test\" in dirpath or \"src/llvm\" in dirpath:\n+        # Short circuit for fast\n+        continue\n+\n+    for filename in filenames:\n+        if filename != \"diagnostics.rs\":\n+            continue\n+\n+        path = os.path.join(dirpath, filename)\n+        line_num = 1\n+        with open(path, 'r') as f:\n+            for line in f:\n+\n+                p = re.compile(\"(E\\d\\d\\d\\d)\")\n+                m = p.search(line)\n+                if not m is None:\n+                    errcode = m.group(1)\n+\n+                    new_record = [(errcode, path, line_num, line)]\n+                    existing = errcode_map.get(errcode)\n+                    if existing is not None:\n+                        # This is a dupe\n+                        errcode_map[errcode] = existing + new_record\n+                    else:\n+                        errcode_map[errcode] = new_record\n+\n+                line_num += 1\n+\n+errors = False\n+all_errors = []\n+for errcode in errcode_map:\n+    entries = errcode_map[errcode]\n+    all_errors += [entries[0][0]]\n+    if len(entries) > 1:\n+        print \"error: duplicate error code \" + errcode\n+        for entry in entries:\n+            print entry[1] + \": \" + str(entry[2])\n+            print entry[3]\n+        errors = True\n+\n+print str(len(errcode_map)) + \" error codes\"\n+\n+all_errors.sort()\n+all_errors.reverse()\n+\n+print \"highest error code: \" + all_errors[0]\n+\n+if errors:\n+    sys.exit(1)"}, {"sha": "c3b87fdd8aaf6476c7de32ca3e270bbee7cf8cc9", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01", "patch": "@@ -31,7 +31,6 @@ register_diagnostics! {\n     E0010,\n     E0011,\n     E0012,\n-    E0013,\n     E0014,\n     E0015,\n     E0016,\n@@ -49,24 +48,13 @@ register_diagnostics! {\n     E0137,\n     E0138,\n     E0139,\n-    E0140,\n     E0152,\n-    E0153,\n-    E0157,\n     E0158,\n     E0161,\n     E0162,\n     E0165,\n-    E0166,\n-    E0167,\n-    E0168,\n-    E0169,\n-    E0170,\n-    E0171,\n-    E0172,\n-    E0173,\n-    E0174,\n-    E0177,\n-    E0178,\n-    E0179\n+    E0170\n }\n+\n+__build_diagnostic_array! { DIAGNOSTICS }\n+"}, {"sha": "377e5dd39ff57fe7ae0a4f033fffd8925ffa284d", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01", "patch": "@@ -54,7 +54,9 @@ extern crate test;\n \n pub use rustc_llvm as llvm;\n \n-mod diagnostics;\n+// NB: This module needs to be declared first so diagnostics are\n+// registered before they are used.\n+pub mod diagnostics;\n \n pub mod back {\n     pub use rustc_back::abi;\n@@ -132,8 +134,6 @@ pub mod lib {\n     pub use llvm;\n }\n \n-__build_diagnostic_array! { DIAGNOSTICS }\n-\n // A private module so that macro-expanded idents like\n // `::rustc::lint::Lint` will also work in `rustc` itself.\n //"}, {"sha": "f8e889fc7111b551a99be08c3cd0bfbdfd57ce65", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01", "patch": "@@ -61,7 +61,6 @@ use rustc::lint::Lint;\n use rustc::lint;\n use rustc::metadata;\n use rustc::metadata::creader::CrateOrString::Str;\n-use rustc::DIAGNOSTICS;\n use rustc::util::common::time;\n \n use std::cmp::Ordering::Equal;\n@@ -98,7 +97,7 @@ fn run_compiler(args: &[String]) {\n         None => return\n     };\n \n-    let descriptions = diagnostics::registry::Registry::new(&DIAGNOSTICS);\n+    let descriptions = diagnostics_registry();\n     match matches.opt_str(\"explain\") {\n         Some(ref code) => {\n             match descriptions.find_description(&code[]) {\n@@ -659,8 +658,20 @@ pub fn monitor<F:FnOnce()+Send>(f: F) {\n     }\n }\n \n+pub fn diagnostics_registry() -> diagnostics::registry::Registry {\n+    use syntax::diagnostics::registry::Registry;\n+\n+    let all_errors = Vec::new() +\n+        rustc::diagnostics::DIAGNOSTICS.as_slice() +\n+        rustc_typeck::diagnostics::DIAGNOSTICS.as_slice() +\n+        rustc_resolve::diagnostics::DIAGNOSTICS.as_slice();\n+\n+    Registry::new(&*all_errors)\n+}\n+\n pub fn main() {\n     let args = std::os::args();\n     let result = run(args);\n     std::os::set_exit_status(result);\n }\n+"}, {"sha": "eed808bcd777212f45f8df18bd9656f67f6dc31a", "filename": "src/librustc_resolve/diagnostics.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_snake_case)]\n+\n+register_diagnostics! {\n+    E0157,\n+    E0153\n+}\n+\n+__build_diagnostic_array! { DIAGNOSTICS }"}, {"sha": "19b93ab259954663cff06d3b5b88b0f8937fadce", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01", "patch": "@@ -97,6 +97,10 @@ use std::mem::replace;\n use std::rc::{Rc, Weak};\n use std::uint;\n \n+// NB: This module needs to be declared first so diagnostics are\n+// registered before they are used.\n+pub mod diagnostics;\n+\n mod check_unused;\n mod record_exports;\n mod build_reduced_graph;"}, {"sha": "68cf9ce07075fc4a6fb6189e9066d04fe154943f", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 58, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01", "patch": "@@ -10,38 +10,7 @@\n \n #![allow(non_snake_case)]\n \n-register_diagnostic! {\n-    E0001,\n-r##\"\n-    This error suggests that the expression arm corresponding to the noted pattern\n-    will never be reached as for all possible values of the expression being matched,\n-    one of the preceeding patterns will match.\n-\n-    This means that perhaps some of the preceeding patterns are too general, this\n-    one is too specific or the ordering is incorrect.\n-\"## }\n-\n register_diagnostics! {\n-    E0002,\n-    E0003,\n-    E0004,\n-    E0005,\n-    E0006,\n-    E0007,\n-    E0008,\n-    E0009,\n-    E0010,\n-    E0011,\n-    E0012,\n-    E0013,\n-    E0014,\n-    E0015,\n-    E0016,\n-    E0017,\n-    E0018,\n-    E0019,\n-    E0020,\n-    E0022,\n     E0023,\n     E0024,\n     E0025,\n@@ -61,12 +30,9 @@ register_diagnostics! {\n     E0046,\n     E0049,\n     E0050,\n-    E0051,\n-    E0052,\n     E0053,\n     E0054,\n     E0055,\n-    E0056,\n     E0057,\n     E0059,\n     E0060,\n@@ -101,16 +67,12 @@ register_diagnostics! {\n     E0092,\n     E0093,\n     E0094,\n-    E0100,\n     E0101,\n     E0102,\n     E0103,\n     E0104,\n     E0106,\n     E0107,\n-    E0108,\n-    E0109,\n-    E0110,\n     E0116,\n     E0117,\n     E0118,\n@@ -125,38 +87,21 @@ register_diagnostics! {\n     E0130,\n     E0131,\n     E0132,\n-    E0133,\n-    E0134,\n-    E0135,\n-    E0136,\n-    E0137,\n-    E0138,\n-    E0139,\n-    E0140,\n     E0141,\n-    E0152,\n-    E0153,\n-    E0157,\n-    E0158,\n     E0159,\n-    E0161,\n-    E0162,\n     E0163,\n     E0164,\n-    E0165,\n     E0166,\n     E0167,\n     E0168,\n-    E0169,\n-    E0171,\n     E0172,\n     E0173, // manual implementations of unboxed closure traits are experimental\n     E0174, // explicit use of unboxed closure methods are experimental\n-    E0177,\n     E0178,\n-    E0180,\n-    E0181,\n     E0182,\n     E0183,\n     E0184\n }\n+\n+__build_diagnostic_array! { DIAGNOSTICS }\n+"}, {"sha": "1fb292b86bfbdb2ff16e68ba396c608bf4e1fb19", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01", "patch": "@@ -111,6 +111,10 @@ use syntax::ast_util::local_def;\n \n use std::cell::RefCell;\n \n+// NB: This module needs to be declared first so diagnostics are\n+// registered before they are used.\n+pub mod diagnostics;\n+\n mod check;\n mod rscope;\n mod astconv;"}, {"sha": "0e99829fa1c66e477244b0cc9279164c6f0b2f51", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01", "patch": "@@ -65,6 +65,13 @@ pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt,\n         }\n         ()\n     });\n+    with_registered_diagnostics(|diagnostics| {\n+        if !diagnostics.contains_key(&code.name) {\n+            ecx.span_err(span, &format!(\n+                \"used diagnostic code {} not registered\", token::get_ident(code).get()\n+            )[]);\n+        }\n+    });\n     MacExpr::new(quote_expr!(ecx, ()))\n }\n "}, {"sha": "867008cd25917f75195f72b833ad69eaf2ed80e8", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=953d6dfd7e1b1d5c5b17314b6e3bdec15d8e7a01", "patch": "@@ -44,7 +44,7 @@ fn basic_sess(sysroot: Path) -> Session {\n     opts.output_types = vec![OutputTypeExe];\n     opts.maybe_sysroot = Some(sysroot);\n \n-    let descriptions = Registry::new(&rustc::DIAGNOSTICS);\n+    let descriptions = Registry::new(&rustc::diagnostics::DIAGNOSTICS);\n     let sess = build_session(opts, None, descriptions);\n     sess\n }"}]}