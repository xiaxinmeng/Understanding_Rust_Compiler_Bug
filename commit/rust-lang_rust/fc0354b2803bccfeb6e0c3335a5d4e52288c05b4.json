{"sha": "fc0354b2803bccfeb6e0c3335a5d4e52288c05b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMDM1NGIyODAzYmNjZmViNmUwYzMzMzVhNWQ0ZTUyMjg4YzA1YjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-26T20:30:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-26T20:30:16Z"}, "message": "Merge #6635\n\n6635: Complete struct in irrefutable let r=Veykril a=Veykril\n\nFixes #6210\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "a1dc3edd4b21b245eeb0a54e7509373942c39a3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1dc3edd4b21b245eeb0a54e7509373942c39a3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc0354b2803bccfeb6e0c3335a5d4e52288c05b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfwBBYCRBK7hj4Ov3rIwAAdHIIAEm0ShoBRMgSI4hiZzqpl9I3\nLbsjAVxE8mqESJMdxCpFPf44Qzk5ZtfeyaOEaaDRxTLXEGvw349+dI50HtBcFemB\nPMFcpBrIgcrGF9vWoCnrjW/h3xNs8QXMIlUwObPEGkUwETjW6tFrRFrwh0tAPgVe\nB9uvaX5NpqxpueVtgrkBHfaYxMwUqmT/CMlc7r7z5eCgkIHI4PA578WRqCO4MotG\ne8qq3O6B3hhNRYVPimw6uVDJpn9jHcT0b2JOYXZgFFDrMlllTOeyBgig2ojTbhmx\nFeUqg3iNcH5x/5kujWLsW4P43BKr8VlIhBXxkzLX1ZoRhHD5mQ/hJaOL3xWBXDA=\n=4Wtb\n-----END PGP SIGNATURE-----\n", "payload": "tree a1dc3edd4b21b245eeb0a54e7509373942c39a3a\nparent 38d595c36fda9dc62c78c860421144999612e64c\nparent ee06c07f50fe590c5185807daa19de1d5540e66b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606422616 +0000\ncommitter GitHub <noreply@github.com> 1606422616 +0000\n\nMerge #6635\n\n6635: Complete struct in irrefutable let r=Veykril a=Veykril\n\nFixes #6210\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc0354b2803bccfeb6e0c3335a5d4e52288c05b4", "html_url": "https://github.com/rust-lang/rust/commit/fc0354b2803bccfeb6e0c3335a5d4e52288c05b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc0354b2803bccfeb6e0c3335a5d4e52288c05b4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38d595c36fda9dc62c78c860421144999612e64c", "url": "https://api.github.com/repos/rust-lang/rust/commits/38d595c36fda9dc62c78c860421144999612e64c", "html_url": "https://github.com/rust-lang/rust/commit/38d595c36fda9dc62c78c860421144999612e64c"}, {"sha": "ee06c07f50fe590c5185807daa19de1d5540e66b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee06c07f50fe590c5185807daa19de1d5540e66b", "html_url": "https://github.com/rust-lang/rust/commit/ee06c07f50fe590c5185807daa19de1d5540e66b"}], "stats": {"total": 60, "additions": 46, "deletions": 14}, "files": [{"sha": "4f63ff0ef67f22e73a908aee2bf01e5f6826e89b", "filename": "crates/completion/src/completions/pattern.rs", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/fc0354b2803bccfeb6e0c3335a5d4e52288c05b4/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc0354b2803bccfeb6e0c3335a5d4e52288c05b4/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=fc0354b2803bccfeb6e0c3335a5d4e52288c05b4", "patch": "@@ -4,7 +4,7 @@ use crate::{CompletionContext, Completions};\n \n /// Completes constats and paths in patterns.\n pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.is_pat_binding_or_const {\n+    if !(ctx.is_pat_binding_or_const || ctx.is_irrefutable_let_pat_binding) {\n         return;\n     }\n     if ctx.record_pat_syntax.is_some() {\n@@ -14,20 +14,27 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n     // FIXME: ideally, we should look at the type we are matching against and\n     // suggest variants + auto-imports\n     ctx.scope.process_all_names(&mut |name, res| {\n-        match &res {\n-            hir::ScopeDef::ModuleDef(def) => match def {\n-                hir::ModuleDef::Adt(hir::Adt::Enum(..))\n-                | hir::ModuleDef::Adt(hir::Adt::Struct(..))\n-                | hir::ModuleDef::EnumVariant(..)\n-                | hir::ModuleDef::Const(..)\n-                | hir::ModuleDef::Module(..) => (),\n-                _ => return,\n-            },\n-            hir::ScopeDef::MacroDef(_) => (),\n-            _ => return,\n+        let add_resolution = match &res {\n+            hir::ScopeDef::ModuleDef(def) => {\n+                if ctx.is_irrefutable_let_pat_binding {\n+                    matches!(def, hir::ModuleDef::Adt(hir::Adt::Struct(_)))\n+                } else {\n+                    matches!(\n+                        def,\n+                        hir::ModuleDef::Adt(hir::Adt::Enum(..))\n+                            | hir::ModuleDef::Adt(hir::Adt::Struct(..))\n+                            | hir::ModuleDef::EnumVariant(..)\n+                            | hir::ModuleDef::Const(..)\n+                            | hir::ModuleDef::Module(..)\n+                    )\n+                }\n+            }\n+            hir::ScopeDef::MacroDef(_) => true,\n+            _ => false,\n         };\n-\n-        acc.add_resolution(ctx, name.to_string(), &res)\n+        if add_resolution {\n+            acc.add_resolution(ctx, name.to_string(), &res);\n+        }\n     });\n }\n \n@@ -85,4 +92,26 @@ fn foo() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn completes_in_irrefutable_let() {\n+        check(\n+            r#\"\n+enum E { X }\n+use self::E::X;\n+const Z: E = E::X;\n+mod m {}\n+\n+static FOO: E = E::X;\n+struct Bar { f: u32 }\n+\n+fn foo() {\n+   let <|>\n+}\n+\"#,\n+            expect![[r#\"\n+                st Bar\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "5cd11cf775c8a3f30ece34aad32ed37cd882e8f1", "filename": "crates/completion/src/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc0354b2803bccfeb6e0c3335a5d4e52288c05b4/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc0354b2803bccfeb6e0c3335a5d4e52288c05b4/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcontext.rs?ref=fc0354b2803bccfeb6e0c3335a5d4e52288c05b4", "patch": "@@ -51,6 +51,7 @@ pub(crate) struct CompletionContext<'a> {\n     /// If a name-binding or reference to a const in a pattern.\n     /// Irrefutable patterns (like let) are excluded.\n     pub(super) is_pat_binding_or_const: bool,\n+    pub(super) is_irrefutable_let_pat_binding: bool,\n     /// A single-indent path, like `foo`. `::foo` should not be considered a trivial path.\n     pub(super) is_trivial_path: bool,\n     /// If not a trivial path, the prefix (qualifier).\n@@ -146,6 +147,7 @@ impl<'a> CompletionContext<'a> {\n             active_parameter: ActiveParameter::at(db, position),\n             is_param: false,\n             is_pat_binding_or_const: false,\n+            is_irrefutable_let_pat_binding: false,\n             is_trivial_path: false,\n             path_qual: None,\n             after_if: false,\n@@ -330,6 +332,7 @@ impl<'a> CompletionContext<'a> {\n                         if pat.syntax().text_range().contains_range(bind_pat.syntax().text_range())\n                         {\n                             self.is_pat_binding_or_const = false;\n+                            self.is_irrefutable_let_pat_binding = true;\n                         }\n                     }\n                 }"}]}