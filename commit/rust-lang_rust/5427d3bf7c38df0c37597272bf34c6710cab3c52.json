{"sha": "5427d3bf7c38df0c37597272bf34c6710cab3c52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MjdkM2JmN2MzOGRmMGMzNzU5NzI3MmJmMzRjNjcxMGNhYjNjNTI=", "commit": {"author": {"name": "Dan Aloni", "email": "alonid@gmail.com", "date": "2020-06-29T18:51:32Z"}, "committer": {"name": "Dan Aloni", "email": "alonid@gmail.com", "date": "2020-06-29T20:40:27Z"}, "message": "Fix try_print_visible_def_path for Rust 2018\n\nThe recursive check of `try_print_visible_def_path` did not properly handle\nthe Rust 2018 case of crate-paths without 'extern crate'. Instead, it returned\na \"not found\" via (false, self).\n\nThis fixes issue #56175.", "tree": {"sha": "2847db91a11e6d560835c51ebba5ae40976c99fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2847db91a11e6d560835c51ebba5ae40976c99fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5427d3bf7c38df0c37597272bf34c6710cab3c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5427d3bf7c38df0c37597272bf34c6710cab3c52", "html_url": "https://github.com/rust-lang/rust/commit/5427d3bf7c38df0c37597272bf34c6710cab3c52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5427d3bf7c38df0c37597272bf34c6710cab3c52/comments", "author": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "committer": {"login": "da-x", "id": 321273, "node_id": "MDQ6VXNlcjMyMTI3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/321273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/da-x", "html_url": "https://github.com/da-x", "followers_url": "https://api.github.com/users/da-x/followers", "following_url": "https://api.github.com/users/da-x/following{/other_user}", "gists_url": "https://api.github.com/users/da-x/gists{/gist_id}", "starred_url": "https://api.github.com/users/da-x/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/da-x/subscriptions", "organizations_url": "https://api.github.com/users/da-x/orgs", "repos_url": "https://api.github.com/users/da-x/repos", "events_url": "https://api.github.com/users/da-x/events{/privacy}", "received_events_url": "https://api.github.com/users/da-x/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aab37fe52c0f142d116fee67d6eddedc7825dcc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/aab37fe52c0f142d116fee67d6eddedc7825dcc7", "html_url": "https://github.com/rust-lang/rust/commit/aab37fe52c0f142d116fee67d6eddedc7825dcc7"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "bbf9f550c03f4db8ba93d0fe872499eb365f6fae", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5427d3bf7c38df0c37597272bf34c6710cab3c52/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5427d3bf7c38df0c37597272bf34c6710cab3c52/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=5427d3bf7c38df0c37597272bf34c6710cab3c52", "patch": "@@ -282,26 +282,27 @@ pub trait PrettyPrinter<'tcx>:\n             //    where there is no explicit `extern crate`, we just prepend\n             //    the crate name.\n             match self.tcx().extern_crate(def_id) {\n-                Some(&ExternCrate {\n-                    src: ExternCrateSource::Extern(def_id),\n-                    dependency_of: LOCAL_CRATE,\n-                    span,\n-                    ..\n-                }) => {\n-                    debug!(\"try_print_visible_def_path: def_id={:?}\", def_id);\n-                    return Ok((\n-                        if !span.is_dummy() {\n-                            self.print_def_path(def_id, &[])?\n-                        } else {\n-                            self.path_crate(cnum)?\n-                        },\n-                        true,\n-                    ));\n-                }\n+                Some(&ExternCrate { src, dependency_of, span, .. }) => match (src, dependency_of) {\n+                    (ExternCrateSource::Extern(def_id), LOCAL_CRATE) => {\n+                        debug!(\"try_print_visible_def_path: def_id={:?}\", def_id);\n+                        return Ok((\n+                            if !span.is_dummy() {\n+                                self.print_def_path(def_id, &[])?\n+                            } else {\n+                                self.path_crate(cnum)?\n+                            },\n+                            true,\n+                        ));\n+                    }\n+                    (ExternCrateSource::Path, LOCAL_CRATE) if self.tcx().sess.rust_2018() => {\n+                        debug!(\"try_print_visible_def_path: def_id={:?}\", def_id);\n+                        return Ok((self.path_crate(cnum)?, true));\n+                    }\n+                    _ => {}\n+                },\n                 None => {\n                     return Ok((self.path_crate(cnum)?, true));\n                 }\n-                _ => {}\n             }\n         }\n "}, {"sha": "c0799db7c1286f28a3c22d3b40b2c4afa404c8b4", "filename": "src/test/ui/issues/issue-56175.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5427d3bf7c38df0c37597272bf34c6710cab3c52/src%2Ftest%2Fui%2Fissues%2Fissue-56175.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5427d3bf7c38df0c37597272bf34c6710cab3c52/src%2Ftest%2Fui%2Fissues%2Fissue-56175.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56175.stderr?ref=5427d3bf7c38df0c37597272bf34c6710cab3c52", "patch": "@@ -7,7 +7,7 @@ LL |     reexported_trait::FooStruct.trait_method();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use reexported_trait::private::Trait;\n+LL | use reexported_trait::Trait;\n    |\n \n error[E0599]: no method named `trait_method_b` found for struct `reexported_trait::FooStruct` in the current scope\n@@ -19,7 +19,7 @@ LL |     reexported_trait::FooStruct.trait_method_b();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use reexported_trait::private::TraitB;\n+LL | use reexported_trait::TraitBRename;\n    |\n \n error: aborting due to 2 previous errors"}]}