{"sha": "558956c84be5e8752986bae001c7fd3f06cbe86d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ODk1NmM4NGJlNWU4NzUyOTg2YmFlMDAxYzdmZDNmMDZjYmU4NmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-22T14:28:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-22T14:28:55Z"}, "message": "Remove import field", "tree": {"sha": "b3234f4895fa63b190a78c0e99679ee52c3df8db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3234f4895fa63b190a78c0e99679ee52c3df8db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/558956c84be5e8752986bae001c7fd3f06cbe86d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/558956c84be5e8752986bae001c7fd3f06cbe86d", "html_url": "https://github.com/rust-lang/rust/commit/558956c84be5e8752986bae001c7fd3f06cbe86d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/558956c84be5e8752986bae001c7fd3f06cbe86d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c60f42825e68d8133854d378d9550139c71d9b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c60f42825e68d8133854d378d9550139c71d9b4", "html_url": "https://github.com/rust-lang/rust/commit/2c60f42825e68d8133854d378d9550139c71d9b4"}], "stats": {"total": 27, "additions": 8, "deletions": 19}, "files": [{"sha": "81089554f0aa2549380aa1a8c2266c6f53007510", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/558956c84be5e8752986bae001c7fd3f06cbe86d/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558956c84be5e8752986bae001c7fd3f06cbe86d/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=558956c84be5e8752986bae001c7fd3f06cbe86d", "patch": "@@ -30,9 +30,7 @@ pub struct ItemScope {\n static BUILTIN_SCOPE: Lazy<FxHashMap<Name, Resolution>> = Lazy::new(|| {\n     BuiltinType::ALL\n         .iter()\n-        .map(|(name, ty)| {\n-            (name.clone(), Resolution { def: PerNs::types(ty.clone().into()), import: false })\n-        })\n+        .map(|(name, ty)| (name.clone(), Resolution { def: PerNs::types(ty.clone().into()) }))\n         .collect()\n });\n \n@@ -113,29 +111,23 @@ impl ItemScope {\n         self.legacy_macros.insert(name, mac);\n     }\n \n-    pub(crate) fn push_res(&mut self, name: Name, res: &Resolution, import: bool) -> bool {\n+    pub(crate) fn push_res(&mut self, name: Name, res: &Resolution, _import: bool) -> bool {\n         let mut changed = false;\n         let existing = self.visible.entry(name.clone()).or_default();\n \n         if existing.def.types.is_none() && res.def.types.is_some() {\n             existing.def.types = res.def.types;\n-            existing.import = import || res.import;\n             changed = true;\n         }\n         if existing.def.values.is_none() && res.def.values.is_some() {\n             existing.def.values = res.def.values;\n-            existing.import = import || res.import;\n             changed = true;\n         }\n         if existing.def.macros.is_none() && res.def.macros.is_some() {\n             existing.def.macros = res.def.macros;\n-            existing.import = import || res.import;\n             changed = true;\n         }\n \n-        if existing.def.is_none() && res.def.is_none() && !existing.import && res.import {\n-            existing.import = res.import;\n-        }\n         changed\n     }\n \n@@ -152,7 +144,6 @@ impl ItemScope {\n pub struct Resolution {\n     /// None for unresolved\n     pub def: PerNs,\n-    pub(crate) import: bool,\n }\n \n impl From<ModuleDefId> for PerNs {"}, {"sha": "3706c12233072a9b094b476d1795d524b65e52a0", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/558956c84be5e8752986bae001c7fd3f06cbe86d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558956c84be5e8752986bae001c7fd3f06cbe86d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=558956c84be5e8752986bae001c7fd3f06cbe86d", "patch": "@@ -218,7 +218,7 @@ where\n             self.update(\n                 self.def_map.root,\n                 None,\n-                &[(name, Resolution { def: PerNs::macros(macro_), import: false })],\n+                &[(name, Resolution { def: PerNs::macros(macro_) })],\n             );\n         }\n     }\n@@ -401,10 +401,8 @@ where\n                         .map(|(local_id, variant_data)| {\n                             let name = variant_data.name.clone();\n                             let variant = EnumVariantId { parent: e, local_id };\n-                            let res = Resolution {\n-                                def: PerNs::both(variant.into(), variant.into()),\n-                                import: true,\n-                            };\n+                            let res =\n+                                Resolution { def: PerNs::both(variant.into(), variant.into()) };\n                             (name, res)\n                         })\n                         .collect::<Vec<_>>();\n@@ -430,7 +428,7 @@ where\n                         }\n                     }\n \n-                    let resolution = Resolution { def, import: true };\n+                    let resolution = Resolution { def };\n                     self.update(module_id, Some(import_id), &[(name, resolution)]);\n                 }\n                 None => tested_by!(bogus_paths),\n@@ -717,7 +715,7 @@ where\n         let module = ModuleId { krate: self.def_collector.def_map.krate, local_id: res };\n         let def: ModuleDefId = module.into();\n         self.def_collector.def_map.modules[self.module_id].scope.define_def(def);\n-        let resolution = Resolution { def: def.into(), import: false };\n+        let resolution = Resolution { def: def.into() };\n         self.def_collector.update(self.module_id, None, &[(name, resolution)]);\n         res\n     }\n@@ -777,7 +775,7 @@ where\n             .into(),\n         };\n         self.def_collector.def_map.modules[self.module_id].scope.define_def(def);\n-        let resolution = Resolution { def: def.into(), import: false };\n+        let resolution = Resolution { def: def.into() };\n         self.def_collector.update(self.module_id, None, &[(name, resolution)])\n     }\n "}]}