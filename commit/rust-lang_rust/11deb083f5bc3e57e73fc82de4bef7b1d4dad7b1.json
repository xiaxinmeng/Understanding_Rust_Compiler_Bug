{"sha": "11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZGViMDgzZjViYzNlNTdlNzNmYzgyZGU0YmVmN2IxZDRkYWQ3YjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-06T19:11:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-06T19:11:17Z"}, "message": "Auto merge of #27296 - jroesch:type-macros, r=huonw\n\nThis pull request implements the functionality for [RFC 873](https://github.com/rust-lang/rfcs/blob/master/text/0873-type-macros.md). This is currently just an update of @freebroccolo's branch from January, the corresponding commits are linked in each commit message.\r\n\r\n@nikomatsakis and I had talked about updating the macro language to support a lifetime fragment specifier, and it is possible to do that work on this branch as well. If so we can (collectively) talk about it next week during the pre-RustCamp work week.", "tree": {"sha": "0f575e98b114fe6b854a1fd53ff1f7749ba3621c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f575e98b114fe6b854a1fd53ff1f7749ba3621c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "html_url": "https://github.com/rust-lang/rust/commit/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb92de75c1c4b7eaaf5d425fb2587407c00701fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb92de75c1c4b7eaaf5d425fb2587407c00701fc", "html_url": "https://github.com/rust-lang/rust/commit/fb92de75c1c4b7eaaf5d425fb2587407c00701fc"}, {"sha": "83e43bb728b95d52039824d63b1ba5bbde5c5d7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/83e43bb728b95d52039824d63b1ba5bbde5c5d7b", "html_url": "https://github.com/rust-lang/rust/commit/83e43bb728b95d52039824d63b1ba5bbde5c5d7b"}], "stats": {"total": 260, "additions": 250, "deletions": 10}, "files": [{"sha": "99f375c32868e295398c9b453ebc7b507ae569fe", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -1662,6 +1662,9 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n             // handled specially and will not descend into this routine.\n             this.ty_infer(None, None, None, ast_ty.span)\n         }\n+        ast::TyMac(_) => {\n+            tcx.sess.span_bug(ast_ty.span, \"unexpanded type macro found conversion\")\n+        }\n     };\n \n     tcx.ast_ty_to_ty_cache.borrow_mut().insert(ast_ty.id, typ);"}, {"sha": "64575e6856993fed492ab18c0029e513b1f69012", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -1611,6 +1611,9 @@ impl Clean<Type> for ast::Ty {\n             TyTypeof(..) => {\n                 panic!(\"Unimplemented type {:?}\", self.node)\n             },\n+            TyMac(ref m) => {\n+                cx.tcx().sess.span_bug(m.span, \"unexpanded type macro found during cleaning\")\n+            }\n         }\n     }\n }"}, {"sha": "eefd3da9f4af31734bb9d938efa9bf31844fccea", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -1471,6 +1471,8 @@ pub enum Ty_ {\n     /// TyInfer means the type should be inferred instead of it having been\n     /// specified. This can appear anywhere in a type.\n     TyInfer,\n+    // A macro in the type position.\n+    TyMac(Mac)\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]"}, {"sha": "d4b5e67eeb4928229b71e3a9534e257863a96633", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -290,6 +290,10 @@ pub trait MacResult {\n     fn make_stmts(self: Box<Self>) -> Option<SmallVector<P<ast::Stmt>>> {\n         make_stmts_default!(self)\n     }\n+\n+    fn make_ty(self: Box<Self>) -> Option<P<ast::Ty>> {\n+        None\n+    }\n }\n \n macro_rules! make_MacEager {\n@@ -322,6 +326,7 @@ make_MacEager! {\n     items: SmallVector<P<ast::Item>>,\n     impl_items: SmallVector<P<ast::ImplItem>>,\n     stmts: SmallVector<P<ast::Stmt>>,\n+    ty: P<ast::Ty>,\n }\n \n impl MacResult for MacEager {\n@@ -359,6 +364,10 @@ impl MacResult for MacEager {\n         }\n         None\n     }\n+\n+    fn make_ty(self: Box<Self>) -> Option<P<ast::Ty>> {\n+        self.ty\n+    }\n }\n \n /// Fill-in macro expansion result, to allow compilation to continue\n@@ -405,15 +414,24 @@ impl DummyResult {\n         }\n     }\n \n+    pub fn raw_ty(sp: Span) -> P<ast::Ty> {\n+        P(ast::Ty {\n+            id: ast::DUMMY_NODE_ID,\n+            node: ast::TyInfer,\n+            span: sp\n+        })\n+    }\n }\n \n impl MacResult for DummyResult {\n     fn make_expr(self: Box<DummyResult>) -> Option<P<ast::Expr>> {\n         Some(DummyResult::raw_expr(self.span))\n     }\n+\n     fn make_pat(self: Box<DummyResult>) -> Option<P<ast::Pat>> {\n         Some(P(DummyResult::raw_pat(self.span)))\n     }\n+\n     fn make_items(self: Box<DummyResult>) -> Option<SmallVector<P<ast::Item>>> {\n         // this code needs a comment... why not always just return the Some() ?\n         if self.expr_only {\n@@ -422,13 +440,15 @@ impl MacResult for DummyResult {\n             Some(SmallVector::zero())\n         }\n     }\n+\n     fn make_impl_items(self: Box<DummyResult>) -> Option<SmallVector<P<ast::ImplItem>>> {\n         if self.expr_only {\n             None\n         } else {\n             Some(SmallVector::zero())\n         }\n     }\n+\n     fn make_stmts(self: Box<DummyResult>) -> Option<SmallVector<P<ast::Stmt>>> {\n         Some(SmallVector::one(P(\n             codemap::respan(self.span,"}, {"sha": "cd60ee0691c13e5d649b2521aa0e0ca4868169a7", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -1542,6 +1542,45 @@ fn expand_and_rename_method(sig: ast::MethodSig, body: P<ast::Block>,\n     }, rewritten_body)\n }\n \n+pub fn expand_type(t: P<ast::Ty>, fld: &mut MacroExpander) -> P<ast::Ty> {\n+    let t = match t.node.clone() {\n+        ast::Ty_::TyMac(mac) => {\n+            if fld.cx.ecfg.features.unwrap().type_macros {\n+                let expanded_ty = match expand_mac_invoc(mac, t.span,\n+                                                         |r| r.make_ty(),\n+                                                         mark_ty,\n+                                                         fld) {\n+                    Some(ty) => ty,\n+                    None => {\n+                        return DummyResult::raw_ty(t.span);\n+                    }\n+                };\n+\n+                // Keep going, outside-in.\n+                let fully_expanded = fld.fold_ty(expanded_ty);\n+                fld.cx.bt_pop();\n+\n+                fully_expanded.map(|t| ast::Ty {\n+                    id: ast::DUMMY_NODE_ID,\n+                    node: t.node,\n+                    span: t.span,\n+                    })\n+            } else {\n+                feature_gate::emit_feature_err(\n+                    &fld.cx.parse_sess.span_diagnostic,\n+                    \"type_macros\",\n+                    t.span,\n+                    \"type macros are experimental (see issue: #27336)\");\n+\n+                DummyResult::raw_ty(t.span)\n+            }\n+        }\n+        _ => t\n+    };\n+\n+    fold::noop_fold_ty(t, fld)\n+}\n+\n /// A tree-folder that performs macro expansion\n pub struct MacroExpander<'a, 'b:'a> {\n     pub cx: &'a mut ExtCtxt<'b>,\n@@ -1592,6 +1631,10 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n             .into_iter().map(|i| i.expect_impl_item()).collect()\n     }\n \n+    fn fold_ty(&mut self, ty: P<ast::Ty>) -> P<ast::Ty> {\n+        expand_type(ty, self)\n+    }\n+\n     fn new_span(&mut self, span: Span) -> Span {\n         new_span(self.cx, span)\n     }\n@@ -1744,6 +1787,10 @@ fn mark_impl_item(ii: P<ast::ImplItem>, m: Mrk) -> P<ast::ImplItem> {\n         .expect_one(\"marking an impl item didn't return exactly one impl item\")\n }\n \n+fn mark_ty(ty: P<ast::Ty>, m: Mrk) -> P<ast::Ty> {\n+    Marker { mark: m }.fold_ty(ty)\n+}\n+\n /// Check that there are no macro invocations left in the AST:\n pub fn check_for_macros(sess: &parse::ParseSess, krate: &ast::Crate) {\n     visit::walk_crate(&mut MacroExterminator{sess:sess}, krate);"}, {"sha": "d16fde7bc394e44dc5ded3ca9a1dd2a2fbffb639", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -117,6 +117,12 @@ impl<'a> MacResult for ParserAnyMacro<'a> {\n         self.ensure_complete_parse(false);\n         Some(ret)\n     }\n+\n+    fn make_ty(self: Box<ParserAnyMacro<'a>>) -> Option<P<ast::Ty>> {\n+        let ret = self.parser.borrow_mut().parse_ty();\n+        self.ensure_complete_parse(true);\n+        Some(ret)\n+    }\n }\n \n struct MacroRulesMacroExpander {"}, {"sha": "dd6fc7ebd0c8d1a47374850579743a7af612bb61", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -172,6 +172,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n \n     // Allows associated type defaults\n     (\"associated_type_defaults\", \"1.2.0\", Active),\n+    // Allows macros to appear in the type position.\n+\n+    (\"type_macros\", \"1.3.0\", Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -354,6 +357,7 @@ pub struct Features {\n     pub const_fn: bool,\n     pub static_recursion: bool,\n     pub default_type_parameter_fallback: bool,\n+    pub type_macros: bool,\n }\n \n impl Features {\n@@ -380,6 +384,7 @@ impl Features {\n             const_fn: false,\n             static_recursion: false,\n             default_type_parameter_fallback: false,\n+            type_macros: false,\n         }\n     }\n }\n@@ -883,6 +888,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n         const_fn: cx.has_feature(\"const_fn\"),\n         static_recursion: cx.has_feature(\"static_recursion\"),\n         default_type_parameter_fallback: cx.has_feature(\"default_type_parameter_fallback\"),\n+        type_macros: cx.has_feature(\"type_macros\"),\n     }\n }\n "}, {"sha": "72fe9a7711d993d2de8d8fe99cc995d63dabb4f1", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -429,6 +429,9 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n             TyPolyTraitRef(bounds) => {\n                 TyPolyTraitRef(bounds.move_map(|b| fld.fold_ty_param_bound(b)))\n             }\n+            TyMac(mac) => {\n+                TyMac(fld.fold_mac(mac))\n+            }\n         },\n         span: fld.new_span(span)\n     })"}, {"sha": "7b8ad7d7af6836c15f329c19b6601c18543261a8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -51,6 +51,7 @@ use ast::{SelfExplicit, SelfRegion, SelfStatic, SelfValue};\n use ast::{Delimited, SequenceRepetition, TokenTree, TraitItem, TraitRef};\n use ast::{TtDelimited, TtSequence, TtToken};\n use ast::{TupleVariantKind, Ty, Ty_, TypeBinding};\n+use ast::{TyMac};\n use ast::{TyFixedLengthVec, TyBareFn, TyTypeof, TyInfer};\n use ast::{TyParam, TyParamBound, TyParen, TyPath, TyPolyTraitRef, TyPtr};\n use ast::{TyRptr, TyTup, TyU32, TyVec, UnUniq};\n@@ -1369,8 +1370,20 @@ impl<'a> Parser<'a> {\n         } else if self.check(&token::ModSep) ||\n                   self.token.is_ident() ||\n                   self.token.is_path() {\n-            // NAMED TYPE\n-            try!(self.parse_ty_path())\n+            let path = try!(self.parse_path(LifetimeAndTypesWithoutColons));\n+            if self.check(&token::Not) {\n+                // MACRO INVOCATION\n+                try!(self.bump());\n+                let delim = try!(self.expect_open_delim());\n+                let tts = try!(self.parse_seq_to_end(&token::CloseDelim(delim),\n+                                                     seq_sep_none(),\n+                                                     |p| p.parse_token_tree()));\n+                let hi = self.span.hi;\n+                TyMac(spanned(lo, hi, MacInvocTT(path, tts, EMPTY_CTXT)))\n+            } else {\n+                // NAMED TYPE\n+                TyPath(None, path)\n+            }\n         } else if try!(self.eat(&token::Underscore) ){\n             // TYPE TO BE INFERRED\n             TyInfer"}, {"sha": "3b8ee91374caeb1cae754cdb1fa47cbd4ef7bb6d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -734,6 +734,9 @@ impl<'a> State<'a> {\n             ast::TyInfer => {\n                 try!(word(&mut self.s, \"_\"));\n             }\n+            ast::TyMac(ref m) => {\n+                try!(self.print_mac(m, token::Paren));\n+            }\n         }\n         self.end()\n     }"}, {"sha": "b32ed15b50f9dc01e5fd838382fd284dcff82ad9", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -405,6 +405,9 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n             visitor.visit_expr(&**expression)\n         }\n         TyInfer => {}\n+        TyMac(ref mac) => {\n+            visitor.visit_mac(mac)\n+        }\n     }\n }\n "}, {"sha": "f854e540ee83de8449c5248786260b1e5ed71f4c", "filename": "src/test/compile-fail/type-macros-fail.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fcompile-fail%2Ftype-macros-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fcompile-fail%2Ftype-macros-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-macros-fail.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! Id {\n+    { $T:tt } => $T\n+}\n+\n+struct Foo<T> {\n+    x: Id!(T)\n+    //~^ ERROR: type macros are experimental (see issue: #27336)\n+}\n+\n+fn main() {\n+    let foo = Foo { x: i32 };\n+}"}, {"sha": "b60201c251dcc4ac73ccb74db6718d9495753157", "filename": "src/test/parse-fail/better-expected.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fbetter-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fbetter-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbetter-expected.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -11,5 +11,5 @@\n // compile-flags: -Z parse-only\n \n fn main() {\n-    let x: [isize 3]; //~ ERROR expected one of `(`, `+`, `::`, `;`, `<`, or `]`, found `3`\n+    let x: [isize 3]; //~ ERROR expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `]`, found `3`\n }"}, {"sha": "9939f1e36ea9dccc9a47437f5b01acc813e2006d", "filename": "src/test/parse-fail/empty-impl-semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fempty-impl-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fempty-impl-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fempty-impl-semicolon.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -10,4 +10,4 @@\n \n // compile-flags: -Z parse-only\n \n-impl Foo; //~ ERROR expected one of `(`, `+`, `::`, `<`, `for`, `where`, or `{`, found `;`\n+impl Foo; //~ ERROR expected one of `!`, `(`, `+`, `::`, `<`, `for`, `where`, or `{`, found `;`"}, {"sha": "b7c9b1658846627cc3d19b7fc55e209001334bd9", "filename": "src/test/parse-fail/multitrait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fmultitrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fmultitrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fmultitrait.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -15,7 +15,7 @@ struct S {\n }\n \n impl Cmp, ToString for S {\n-//~^ ERROR: expected one of `(`, `+`, `::`, `<`, `for`, `where`, or `{`, found `,`\n+//~^ ERROR: expected one of `!`, `(`, `+`, `::`, `<`, `for`, `where`, or `{`, found `,`\n   fn eq(&&other: S) { false }\n   fn to_string(&self) -> String { \"hi\".to_string() }\n }"}, {"sha": "b305b1894a810f94f2caf7f7778a4a587c2e728b", "filename": "src/test/parse-fail/removed-syntax-closure-lifetime.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fremoved-syntax-closure-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fremoved-syntax-closure-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fremoved-syntax-closure-lifetime.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -10,4 +10,5 @@\n \n // compile-flags: -Z parse-only\n \n-type closure = Box<lt/fn()>; //~ ERROR expected one of `(`, `+`, `,`, `::`, `<`, or `>`, found `/`\n+type closure = Box<lt/fn()>;\n+//~^ ERROR expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `/`"}, {"sha": "0f34db08852022a42f6b942635c17aa1408cb417", "filename": "src/test/parse-fail/removed-syntax-fixed-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fremoved-syntax-fixed-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fremoved-syntax-fixed-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fremoved-syntax-fixed-vec.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -10,4 +10,4 @@\n \n // compile-flags: -Z parse-only\n \n-type v = [isize * 3]; //~ ERROR expected one of `(`, `+`, `::`, `;`, `<`, or `]`, found `*`\n+type v = [isize * 3]; //~ ERROR expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `]`, found `*`"}, {"sha": "91918f01bb03e760f16e542d5f8a6fb243b65eb2", "filename": "src/test/parse-fail/removed-syntax-mut-vec-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fremoved-syntax-mut-vec-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fremoved-syntax-mut-vec-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fremoved-syntax-mut-vec-ty.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -12,4 +12,4 @@\n \n type v = [mut isize];\n     //~^  ERROR expected identifier, found keyword `mut`\n-    //~^^ ERROR expected one of `(`, `+`, `::`, `;`, `<`, or `]`, found `isize`\n+    //~^^ ERROR expected one of `!`, `(`, `+`, `::`, `;`, `<`, or `]`, found `isize`"}, {"sha": "ebef0e56e3e2b3862479a24bc9a77bec83ee46ef", "filename": "src/test/parse-fail/removed-syntax-ptr-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fremoved-syntax-ptr-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fremoved-syntax-ptr-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fremoved-syntax-ptr-lifetime.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -10,4 +10,4 @@\n \n // compile-flags: -Z parse-only\n \n-type bptr = &lifetime/isize; //~ ERROR expected one of `(`, `+`, `::`, `;`, or `<`, found `/`\n+type bptr = &lifetime/isize; //~ ERROR expected one of `!`, `(`, `+`, `::`, `;`, or `<`, found `/`"}, {"sha": "e1637901266e04ea4eace764054e65dd58dccac1", "filename": "src/test/parse-fail/removed-syntax-uniq-mut-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fremoved-syntax-uniq-mut-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Fparse-fail%2Fremoved-syntax-uniq-mut-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fremoved-syntax-uniq-mut-ty.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -12,4 +12,4 @@\n \n type mut_box = Box<mut isize>;\n     //~^  ERROR expected identifier, found keyword `mut`\n-    //~^^ ERROR expected one of `(`, `+`, `,`, `::`, `<`, or `>`, found `isize`\n+    //~^^ ERROR expected one of `!`, `(`, `+`, `,`, `::`, `<`, or `>`, found `isize`"}, {"sha": "803b0eae99e887f1ff72a0fdc86c8856354ab1e2", "filename": "src/test/run-pass/type-macros-hlist.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Frun-pass%2Ftype-macros-hlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Frun-pass%2Ftype-macros-hlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-macros-hlist.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -0,0 +1,89 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(type_macros)]\n+\n+use std::ops::*;\n+\n+#[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]\n+struct Nil;\n+ // empty HList\n+#[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]\n+struct Cons<H, T: HList>(H, T);\n+ // cons cell of HList\n+\n+ // trait to classify valid HLists\n+trait HList { }\n+impl HList for Nil { }\n+impl <H, T: HList> HList for Cons<H, T> { }\n+\n+// term-level macro for HLists\n+macro_rules! hlist({  } => { Nil } ; { $ head : expr } => {\n+                   Cons ( $ head , Nil ) } ; {\n+                   $ head : expr , $ ( $ tail : expr ) , * } => {\n+                   Cons ( $ head , hlist ! ( $ ( $ tail ) , * ) ) } ;);\n+\n+// type-level macro for HLists\n+macro_rules! HList({  } => { Nil } ; { $ head : ty } => {\n+                   Cons < $ head , Nil > } ; {\n+                   $ head : ty , $ ( $ tail : ty ) , * } => {\n+                   Cons < $ head , HList ! ( $ ( $ tail ) , * ) > } ;);\n+\n+// nil case for HList append\n+impl <Ys: HList> Add<Ys> for Nil {\n+    type\n+    Output\n+    =\n+    Ys;\n+\n+    fn add(self, rhs: Ys) -> Ys { rhs }\n+}\n+\n+// cons case for HList append\n+impl <Rec: HList + Sized, X, Xs: HList, Ys: HList> Add<Ys> for Cons<X, Xs>\n+ where Xs: Add<Ys, Output = Rec> {\n+    type\n+    Output\n+    =\n+    Cons<X, Rec>;\n+\n+    fn add(self, rhs: Ys) -> Cons<X, Rec> { Cons(self.0, self.1 + rhs) }\n+}\n+\n+// type macro Expr allows us to expand the + operator appropriately\n+macro_rules! Expr({ ( $ ( $ LHS : tt ) + ) } => { Expr ! ( $ ( $ LHS ) + ) } ;\n+                  { HList ! [ $ ( $ LHS : tt ) * ] + $ ( $ RHS : tt ) + } => {\n+                  < Expr ! ( HList ! [ $ ( $ LHS ) * ] ) as Add < Expr ! (\n+                  $ ( $ RHS ) + ) >> :: Output } ; {\n+                  $ LHS : tt + $ ( $ RHS : tt ) + } => {\n+                  < Expr ! ( $ LHS ) as Add < Expr ! ( $ ( $ RHS ) + ) >> ::\n+                  Output } ; { $ LHS : ty } => { $ LHS } ;);\n+\n+// test demonstrating term level `xs + ys` and type level `Expr!(Xs + Ys)`\n+fn main() {\n+    fn aux<Xs: HList, Ys: HList>(xs: Xs, ys: Ys) -> Expr!(Xs + Ys) where\n+     Xs: Add<Ys> {\n+        xs + ys\n+    }\n+\n+    let xs: HList!(& str , bool , Vec < u64 >) =\n+        hlist!(\"foo\" , false , vec ! [  ]);\n+    let ys: HList!(u64 , [ u8 ; 3 ] , (  )) =\n+        hlist!(0 , [ 0 , 1 , 2 ] , (  ));\n+\n+    // demonstrate recursive expansion of Expr!\n+    let zs:\n+            Expr!((\n+                  HList ! [ & str ] + HList ! [ bool ] + HList ! [ Vec < u64 >\n+                  ] ) + ( HList ! [ u64 ] + HList ! [ [ u8 ; 3 ] , (  ) ] ) +\n+                  HList ! [  ]) = aux(xs, ys);\n+    assert_eq!(zs , hlist ! [\n+               \"foo\" , false , vec ! [  ] , 0 , [ 0 , 1 , 2 ] , (  ) ])\n+}"}, {"sha": "22dfd507f7e2e6e0c2e65021b1a62f805f640e37", "filename": "src/test/run-pass/type-macros-simple.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Frun-pass%2Ftype-macros-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1/src%2Ftest%2Frun-pass%2Ftype-macros-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-macros-simple.rs?ref=11deb083f5bc3e57e73fc82de4bef7b1d4dad7b1", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(type_macros)]\n+\n+macro_rules! Tuple {\n+    { $A:ty,$B:ty } => { ($A, $B) }\n+}\n+\n+fn main() {\n+    let x: Tuple!(i32, i32) = (1, 2);\n+}"}]}