{"sha": "5f938342ce72816bb4e8bc6f6144ffaa0ca08b05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOTM4MzQyY2U3MjgxNmJiNGU4YmM2ZjYxNDRmZmFhMGNhMDhiMDU=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-05-16T22:10:52Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-05-16T22:10:52Z"}, "message": "Add entry-like methods to HashSet\n\n* `HashSet::get_or_insert`\n* `HashSet::get_or_insert_with`\n\nThese provide a simplification of the `Entry` API for `HashSet`, with\nnames chosen to match the similar methods on `Option`.", "tree": {"sha": "bfe9787be72e2978a8c17d5dee4139ebdca3fe27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfe9787be72e2978a8c17d5dee4139ebdca3fe27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f938342ce72816bb4e8bc6f6144ffaa0ca08b05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f938342ce72816bb4e8bc6f6144ffaa0ca08b05", "html_url": "https://github.com/rust-lang/rust/commit/5f938342ce72816bb4e8bc6f6144ffaa0ca08b05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f938342ce72816bb4e8bc6f6144ffaa0ca08b05/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d5aa43325ad7629766b1183011f5bf5b2a1ea26", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d5aa43325ad7629766b1183011f5bf5b2a1ea26", "html_url": "https://github.com/rust-lang/rust/commit/7d5aa43325ad7629766b1183011f5bf5b2a1ea26"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "ca694d2135e9c3816b1fffd293ee533fc6150678", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5f938342ce72816bb4e8bc6f6144ffaa0ca08b05/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f938342ce72816bb4e8bc6f6144ffaa0ca08b05/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=5f938342ce72816bb4e8bc6f6144ffaa0ca08b05", "patch": "@@ -618,6 +618,58 @@ impl<T, S> HashSet<T, S>\n         self.map.get_key_value(value).map(|(k, _)| k)\n     }\n \n+    /// Inserts the given `value` into the set if it is not present, then\n+    /// returns a reference to the value in the set.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(hash_set_entry)]\n+    ///\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n+    /// assert_eq!(set.len(), 3);\n+    /// assert_eq!(set.get_or_insert(2), &2);\n+    /// assert_eq!(set.get_or_insert(100), &100);\n+    /// assert_eq!(set.len(), 4); // 100 was inserted\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"hash_set_entry\", issue = \"0\")]\n+    pub fn get_or_insert(&mut self, value: T) -> &T {\n+        self.map.raw_entry_mut().from_key(&value).or_insert(value, ()).0\n+    }\n+\n+    /// Inserts a value computed from `f` into the set if the given `value` is\n+    /// not present, then returns a reference to the value in the set.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(hash_set_entry)]\n+    ///\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]\n+    ///     .iter().map(|&pet| pet.to_owned()).collect();\n+    ///\n+    /// assert_eq!(set.len(), 3);\n+    /// for &pet in &[\"cat\", \"dog\", \"fish\"] {\n+    ///     let value = set.get_or_insert_with(pet, str::to_owned);\n+    ///     assert_eq!(value, pet);\n+    /// }\n+    /// assert_eq!(set.len(), 4); // a new \"fish\" was inserted\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"hash_set_entry\", issue = \"0\")]\n+    pub fn get_or_insert_with<Q: ?Sized, F>(&mut self, value: &Q, f: F) -> &T\n+        where T: Borrow<Q>,\n+              Q: Hash + Eq,\n+              F: FnOnce(&Q) -> T\n+    {\n+        self.map.raw_entry_mut().from_key(value).or_insert_with(|| (f(value), ())).0\n+    }\n+\n     /// Returns `true` if `self` has no elements in common with `other`.\n     /// This is equivalent to checking for an empty intersection.\n     ///"}]}