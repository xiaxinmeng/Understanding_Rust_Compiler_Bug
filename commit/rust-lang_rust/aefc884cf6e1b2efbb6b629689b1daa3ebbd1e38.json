{"sha": "aefc884cf6e1b2efbb6b629689b1daa3ebbd1e38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZmM4ODRjZjZlMWIyZWZiYjZiNjI5Njg5YjFkYWEzZWJiZDFlMzg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-03T20:09:24Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-09-03T20:09:24Z"}, "message": "libcore: Add a from_str trait", "tree": {"sha": "bdb52c11011d42758486550e8f0d79bfcbee501e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdb52c11011d42758486550e8f0d79bfcbee501e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aefc884cf6e1b2efbb6b629689b1daa3ebbd1e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aefc884cf6e1b2efbb6b629689b1daa3ebbd1e38", "html_url": "https://github.com/rust-lang/rust/commit/aefc884cf6e1b2efbb6b629689b1daa3ebbd1e38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aefc884cf6e1b2efbb6b629689b1daa3ebbd1e38/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07ee2997e6d003d64fe12373faab1e8e9483b0ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/07ee2997e6d003d64fe12373faab1e8e9483b0ed", "html_url": "https://github.com/rust-lang/rust/commit/07ee2997e6d003d64fe12373faab1e8e9483b0ed"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "6cf9c82a51117460b9339ab3736e105f977c8fd6", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aefc884cf6e1b2efbb6b629689b1daa3ebbd1e38/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/aefc884cf6e1b2efbb6b629689b1daa3ebbd1e38/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=aefc884cf6e1b2efbb6b629689b1daa3ebbd1e38", "patch": "@@ -49,6 +49,7 @@ export extfmt;\n export rt;\n export tuple;\n export to_str, to_bytes;\n+export from_str;\n export util;\n export dvec, dvec_iter;\n export dlist, dlist_iter;\n@@ -188,6 +189,7 @@ mod option_iter {\n mod result;\n mod to_str;\n mod to_bytes;\n+mod from_str;\n mod util;\n \n // Data structure modules"}, {"sha": "6c972da7353b19c7d4ba97511a435b54ffbe732c", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aefc884cf6e1b2efbb6b629689b1daa3ebbd1e38/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefc884cf6e1b2efbb6b629689b1daa3ebbd1e38/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=aefc884cf6e1b2efbb6b629689b1daa3ebbd1e38", "patch": "@@ -4,6 +4,7 @@\n \n import T = inst::T;\n import cmp::{Eq, Ord};\n+import from_str::FromStr;\n import num::from_int;\n \n export min_value, max_value;\n@@ -162,6 +163,10 @@ fn parse_buf(buf: &[u8], radix: uint) -> Option<T> {\n /// Parse a string to an int\n fn from_str(s: &str) -> Option<T> { parse_buf(str::to_bytes(s), 10u) }\n \n+impl T : FromStr {\n+    static fn from_str(s: &str) -> Option<T> { from_str(s) }\n+}\n+\n /// Convert to a string in a given base\n fn to_str(n: T, radix: uint) -> ~str {\n     do to_str_bytes(n, radix) |slice| {"}, {"sha": "cf4abe4e16f1cc6d6328b765cf9b91aeb112d649", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aefc884cf6e1b2efbb6b629689b1daa3ebbd1e38/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefc884cf6e1b2efbb6b629689b1daa3ebbd1e38/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=aefc884cf6e1b2efbb6b629689b1daa3ebbd1e38", "patch": "@@ -4,6 +4,7 @@\n \n import T = inst::T;\n import cmp::{Eq, Ord};\n+import from_str::FromStr;\n \n export min_value, max_value;\n export min, max;\n@@ -145,6 +146,10 @@ fn parse_buf(buf: &[const u8], radix: uint) -> Option<T> {\n /// Parse a string to an int\n fn from_str(s: &str) -> Option<T> { parse_buf(str::to_bytes(s), 10u) }\n \n+impl T : FromStr {\n+    static fn from_str(s: &str) -> Option<T> { from_str(s) }\n+}\n+\n /// Parse a string as an unsigned integer.\n fn from_str_radix(buf: &str, radix: u64) -> Option<u64> {\n     if str::len(buf) == 0u { return None; }"}]}