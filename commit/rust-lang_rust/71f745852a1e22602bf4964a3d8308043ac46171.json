{"sha": "71f745852a1e22602bf4964a3d8308043ac46171", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZjc0NTg1MmExZTIyNjAyYmY0OTY0YTNkODMwODA0M2FjNDYxNzE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-26T16:36:54Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-27T18:20:29Z"}, "message": "Address review.", "tree": {"sha": "7b6a328604a9d2d1f26b5dd69dfc6e2405aa6754", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b6a328604a9d2d1f26b5dd69dfc6e2405aa6754"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71f745852a1e22602bf4964a3d8308043ac46171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71f745852a1e22602bf4964a3d8308043ac46171", "html_url": "https://github.com/rust-lang/rust/commit/71f745852a1e22602bf4964a3d8308043ac46171", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71f745852a1e22602bf4964a3d8308043ac46171/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36f95ab3fa654d64c1ba77bc494c5cecf29d7229", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f95ab3fa654d64c1ba77bc494c5cecf29d7229", "html_url": "https://github.com/rust-lang/rust/commit/36f95ab3fa654d64c1ba77bc494c5cecf29d7229"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "395ed54d3c6e1019f720b05162deefd3a210d88f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/71f745852a1e22602bf4964a3d8308043ac46171/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f745852a1e22602bf4964a3d8308043ac46171/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=71f745852a1e22602bf4964a3d8308043ac46171", "patch": "@@ -46,6 +46,7 @@ use crate::lint::builtin::{self, ELIDED_LIFETIMES_IN_PATHS};\n use crate::middle::cstore::CrateStore;\n use crate::session::config::nightly_options;\n use crate::session::Session;\n+use crate::util::captures::Captures;\n use crate::util::common::FN_OUTPUT_NAME;\n use crate::util::nodemap::{DefIdMap, NodeMap};\n use errors::Applicability;\n@@ -897,7 +898,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             });\n \n         let mut lowered_params: Vec<_> =\n-            lowered_generics.params.into_iter().chain(in_band_defs.into_iter()).collect();\n+            lowered_generics.params.into_iter().chain(in_band_defs).collect();\n \n         // FIXME(const_generics): the compiler doesn't always cope with\n         // unsorted generic parameters at the moment, so we make sure\n@@ -2489,9 +2490,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         add_bounds: &NodeMap<Vec<GenericBound>>,\n         mut itctx: ImplTraitContext<'_, 'hir>,\n     ) -> hir::GenericParam<'hir> {\n-        let mut bounds = self\n+        let mut bounds: Vec<_> = self\n             .with_anonymous_lifetime_mode(AnonymousLifetimeMode::ReportError, |this| {\n-                this.lower_param_bounds_mut(&param.bounds, itctx.reborrow())\n+                this.lower_param_bounds_mut(&param.bounds, itctx.reborrow()).collect()\n             });\n \n         let (name, kind) = match param.kind {\n@@ -2609,12 +2610,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.arena.alloc_from_iter(self.lower_param_bounds_mut(bounds, itctx))\n     }\n \n-    fn lower_param_bounds_mut(\n-        &mut self,\n-        bounds: &[GenericBound],\n-        mut itctx: ImplTraitContext<'_, 'hir>,\n-    ) -> Vec<hir::GenericBound<'hir>> {\n-        bounds.iter().map(|bound| self.lower_param_bound(bound, itctx.reborrow())).collect()\n+    fn lower_param_bounds_mut<'s>(\n+        &'s mut self,\n+        bounds: &'s [GenericBound],\n+        mut itctx: ImplTraitContext<'s, 'hir>,\n+    ) -> impl Iterator<Item = hir::GenericBound<'hir>> + Captures<'s> + Captures<'a> {\n+        bounds.iter().map(move |bound| self.lower_param_bound(bound, itctx.reborrow()))\n     }\n \n     fn lower_block(&mut self, b: &Block, targeted_by_break: bool) -> &'hir hir::Block<'hir> {"}]}