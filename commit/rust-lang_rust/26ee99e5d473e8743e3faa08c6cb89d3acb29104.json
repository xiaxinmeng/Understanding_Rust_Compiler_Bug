{"sha": "26ee99e5d473e8743e3faa08c6cb89d3acb29104", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZWU5OWU1ZDQ3M2U4NzQzZTNmYWEwOGM2Y2I4OWQzYWNiMjkxMDQ=", "commit": {"author": {"name": "Kevin Per", "email": "kevin.per@protonmail.com", "date": "2019-08-15T17:26:51Z"}, "committer": {"name": "Kevin Per", "email": "kevin.per@protonmail.com", "date": "2019-08-15T17:26:51Z"}, "message": "Duplicate `test-macros.rs` to fix test #62593", "tree": {"sha": "b8caf42cc513d7f9c22aa0a64be820c2cd718e99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8caf42cc513d7f9c22aa0a64be820c2cd718e99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26ee99e5d473e8743e3faa08c6cb89d3acb29104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26ee99e5d473e8743e3faa08c6cb89d3acb29104", "html_url": "https://github.com/rust-lang/rust/commit/26ee99e5d473e8743e3faa08c6cb89d3acb29104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26ee99e5d473e8743e3faa08c6cb89d3acb29104/comments", "author": {"login": "kper", "id": 10795807, "node_id": "MDQ6VXNlcjEwNzk1ODA3", "avatar_url": "https://avatars.githubusercontent.com/u/10795807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kper", "html_url": "https://github.com/kper", "followers_url": "https://api.github.com/users/kper/followers", "following_url": "https://api.github.com/users/kper/following{/other_user}", "gists_url": "https://api.github.com/users/kper/gists{/gist_id}", "starred_url": "https://api.github.com/users/kper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kper/subscriptions", "organizations_url": "https://api.github.com/users/kper/orgs", "repos_url": "https://api.github.com/users/kper/repos", "events_url": "https://api.github.com/users/kper/events{/privacy}", "received_events_url": "https://api.github.com/users/kper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kper", "id": 10795807, "node_id": "MDQ6VXNlcjEwNzk1ODA3", "avatar_url": "https://avatars.githubusercontent.com/u/10795807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kper", "html_url": "https://github.com/kper", "followers_url": "https://api.github.com/users/kper/followers", "following_url": "https://api.github.com/users/kper/following{/other_user}", "gists_url": "https://api.github.com/users/kper/gists{/gist_id}", "starred_url": "https://api.github.com/users/kper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kper/subscriptions", "organizations_url": "https://api.github.com/users/kper/orgs", "repos_url": "https://api.github.com/users/kper/repos", "events_url": "https://api.github.com/users/kper/events{/privacy}", "received_events_url": "https://api.github.com/users/kper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a8ff5bb7c31c90a5be3e4d6a2e7e7211b4c8745", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8ff5bb7c31c90a5be3e4d6a2e7e7211b4c8745", "html_url": "https://github.com/rust-lang/rust/commit/4a8ff5bb7c31c90a5be3e4d6a2e7e7211b4c8745"}], "stats": {"total": 112, "additions": 112, "deletions": 0}, "files": [{"sha": "27efa44f980323a5948d336d6e88a788d3bf7959", "filename": "src/test/ui/abi/proc-macro/auxiliary/test-macros.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/26ee99e5d473e8743e3faa08c6cb89d3acb29104/src%2Ftest%2Fui%2Fabi%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ee99e5d473e8743e3faa08c6cb89d3acb29104/src%2Ftest%2Fui%2Fabi%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=26ee99e5d473e8743e3faa08c6cb89d3acb29104", "patch": "@@ -0,0 +1,112 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+// Proc macros commonly used by tests.\n+// `panic`/`print` -> `panic_bang`/`print_bang` to avoid conflicts with standard macros.\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+// Macro that return empty token stream.\n+\n+#[proc_macro]\n+pub fn empty(_: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn empty_attr(_: TokenStream, _: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}\n+\n+#[proc_macro_derive(Empty, attributes(empty_helper))]\n+pub fn empty_derive(_: TokenStream) -> TokenStream {\n+    TokenStream::new()\n+}\n+\n+// Macro that panics.\n+\n+#[proc_macro]\n+pub fn panic_bang(_: TokenStream) -> TokenStream {\n+    panic!(\"panic-bang\");\n+}\n+\n+#[proc_macro_attribute]\n+pub fn panic_attr(_: TokenStream, _: TokenStream) -> TokenStream {\n+    panic!(\"panic-attr\");\n+}\n+\n+#[proc_macro_derive(Panic, attributes(panic_helper))]\n+pub fn panic_derive(_: TokenStream) -> TokenStream {\n+    panic!(\"panic-derive\");\n+}\n+\n+// Macros that return the input stream.\n+\n+#[proc_macro]\n+pub fn identity(input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_attribute]\n+pub fn identity_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+#[proc_macro_derive(Identity, attributes(identity_helper))]\n+pub fn identity_derive(input: TokenStream) -> TokenStream {\n+    input\n+}\n+\n+// Macros that iterate and re-collect the input stream.\n+\n+#[proc_macro]\n+pub fn recollect(input: TokenStream) -> TokenStream {\n+    input.into_iter().collect()\n+}\n+\n+#[proc_macro_attribute]\n+pub fn recollect_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n+    input.into_iter().collect()\n+}\n+\n+#[proc_macro_derive(Recollect, attributes(recollect_helper))]\n+pub fn recollect_derive(input: TokenStream) -> TokenStream {\n+    input.into_iter().collect()\n+}\n+\n+// Macros that print their input in the original and re-collected forms (if they differ).\n+\n+fn print_helper(input: TokenStream, kind: &str) -> TokenStream {\n+    let input_display = format!(\"{}\", input);\n+    let input_debug = format!(\"{:#?}\", input);\n+    let recollected = input.into_iter().collect();\n+    let recollected_display = format!(\"{}\", recollected);\n+    let recollected_debug = format!(\"{:#?}\", recollected);\n+    println!(\"PRINT-{} INPUT (DISPLAY): {}\", kind, input_display);\n+    if recollected_display != input_display {\n+        println!(\"PRINT-{} RE-COLLECTED (DISPLAY): {}\", kind, recollected_display);\n+    }\n+    println!(\"PRINT-{} INPUT (DEBUG): {}\", kind, input_debug);\n+    if recollected_debug != input_debug {\n+        println!(\"PRINT-{} RE-COLLECTED (DEBUG): {}\", kind, recollected_debug);\n+    }\n+    recollected\n+}\n+\n+#[proc_macro]\n+pub fn print_bang(input: TokenStream) -> TokenStream {\n+    print_helper(input, \"BANG\")\n+}\n+\n+#[proc_macro_attribute]\n+pub fn print_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n+    print_helper(input, \"ATTR\")\n+}\n+\n+#[proc_macro_derive(Print, attributes(print_helper))]\n+pub fn print_derive(input: TokenStream) -> TokenStream {\n+    print_helper(input, \"DERIVE\")\n+}"}]}