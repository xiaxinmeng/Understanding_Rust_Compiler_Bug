{"sha": "2843baaeb6e20c494b3b938b4d4024ead7bbdd1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NDNiYWFlYjZlMjBjNDk0YjNiOTM4YjRkNDAyNGVhZDdiYmRkMWI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-29T22:32:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-29T22:32:18Z"}, "message": "Rollup merge of #82331 - frol:feat/std-binary-heap-as-slice, r=Amanieu\n\nalloc: Added `as_slice` method to `BinaryHeap` collection\n\nI initially asked about whether it is useful addition on https://internals.rust-lang.org/t/should-i-add-as-slice-method-to-binaryheap/13816, and it seems there were no objections, so went ahead with this PR.\n\n> There is [`BinaryHeap::into_vec`](https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html#method.into_vec), but it consumes the value. I wonder if there is API design limitation that should be taken into account. Implementation-wise, the inner buffer is just a Vec, so it is trivial to expose as_slice from it.\n\nPlease, guide me through if I need to add tests or something else.\n\nUPD: Tracking issue #83659", "tree": {"sha": "903506aa3d82a267877caae41513a1bf19ec9238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/903506aa3d82a267877caae41513a1bf19ec9238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2843baaeb6e20c494b3b938b4d4024ead7bbdd1b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgYlVzCRBK7hj4Ov3rIwAAdHIIACFhMqOKC4qIqSYeF7urmSn0\nKBCpZt8rXSu40/Hxtv1yqcfiWFtgRj2P21Eeqxd84RNunlslasrurx/llciEEOwj\nU+FZF/i2T1Xq9vh+kc3ikFJVIQVcn5xhtSiCer91VR+LiY/zP47XIu0AbuJPus73\nBdgevoiqo1d7wgaLBvRji7xH98YMb1D3/Ekh0p15E9ZvdWXBffVAnRkjz1n4BkXq\nlryhOfKZJPAaYvfAnnSS8iaY97r0lDK0BxI3PLdL7WQf+iLkmcaWPc1dgHjteAn4\nWCulRVCb3A/E0i5f6isAdgwcwR1oOPJqulyYbVB/jhPYVD/L5rte4bb8YgnbwR8=\n=0XZh\n-----END PGP SIGNATURE-----\n", "payload": "tree 903506aa3d82a267877caae41513a1bf19ec9238\nparent 48691ea6e639640f110b43e33d4aba1f07e7415c\nparent 595f3f25fcc9e11598eb0de2b8bb01022386147c\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617057138 +0200\ncommitter GitHub <noreply@github.com> 1617057138 +0200\n\nRollup merge of #82331 - frol:feat/std-binary-heap-as-slice, r=Amanieu\n\nalloc: Added `as_slice` method to `BinaryHeap` collection\n\nI initially asked about whether it is useful addition on https://internals.rust-lang.org/t/should-i-add-as-slice-method-to-binaryheap/13816, and it seems there were no objections, so went ahead with this PR.\n\n> There is [`BinaryHeap::into_vec`](https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html#method.into_vec), but it consumes the value. I wonder if there is API design limitation that should be taken into account. Implementation-wise, the inner buffer is just a Vec, so it is trivial to expose as_slice from it.\n\nPlease, guide me through if I need to add tests or something else.\n\nUPD: Tracking issue #83659\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2843baaeb6e20c494b3b938b4d4024ead7bbdd1b", "html_url": "https://github.com/rust-lang/rust/commit/2843baaeb6e20c494b3b938b4d4024ead7bbdd1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2843baaeb6e20c494b3b938b4d4024ead7bbdd1b/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48691ea6e639640f110b43e33d4aba1f07e7415c", "url": "https://api.github.com/repos/rust-lang/rust/commits/48691ea6e639640f110b43e33d4aba1f07e7415c", "html_url": "https://github.com/rust-lang/rust/commit/48691ea6e639640f110b43e33d4aba1f07e7415c"}, {"sha": "595f3f25fcc9e11598eb0de2b8bb01022386147c", "url": "https://api.github.com/repos/rust-lang/rust/commits/595f3f25fcc9e11598eb0de2b8bb01022386147c", "html_url": "https://github.com/rust-lang/rust/commit/595f3f25fcc9e11598eb0de2b8bb01022386147c"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "bf9f7432fb5367ad306b743a6b6f2d7ce96b92d7", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2843baaeb6e20c494b3b938b4d4024ead7bbdd1b/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2843baaeb6e20c494b3b938b4d4024ead7bbdd1b/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=2843baaeb6e20c494b3b938b4d4024ead7bbdd1b", "patch": "@@ -958,6 +958,27 @@ impl<T> BinaryHeap<T> {\n         self.data.shrink_to(min_capacity)\n     }\n \n+    /// Returns a slice of all values in the underlying vector, in arbitrary\n+    /// order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(binary_heap_as_slice)]\n+    /// use std::collections::BinaryHeap;\n+    /// use std::io::{self, Write};\n+    ///\n+    /// let heap = BinaryHeap::from(vec![1, 2, 3, 4, 5, 6, 7]);\n+    ///\n+    /// io::sink().write(heap.as_slice()).unwrap();\n+    /// ```\n+    #[unstable(feature = \"binary_heap_as_slice\", issue = \"83659\")]\n+    pub fn as_slice(&self) -> &[T] {\n+        self.data.as_slice()\n+    }\n+\n     /// Consumes the `BinaryHeap` and returns the underlying vector\n     /// in arbitrary order.\n     ///"}, {"sha": "7e1194cc4aa20e3e66efa7d6d09f29155207b924", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2843baaeb6e20c494b3b938b4d4024ead7bbdd1b/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2843baaeb6e20c494b3b938b4d4024ead7bbdd1b/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=2843baaeb6e20c494b3b938b4d4024ead7bbdd1b", "patch": "@@ -14,6 +14,7 @@\n #![feature(binary_heap_drain_sorted)]\n #![feature(slice_ptr_get)]\n #![feature(binary_heap_retain)]\n+#![feature(binary_heap_as_slice)]\n #![feature(inplace_iteration)]\n #![feature(iter_map_while)]\n #![feature(vecdeque_binary_search)]"}]}