{"sha": "6871b3f240a800650f544892e75dc5e8fb47bc5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NzFiM2YyNDBhODAwNjUwZjU0NDg5MmU3NWRjNWU4ZmI0N2JjNWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-10T13:43:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-10T13:43:47Z"}, "message": "Auto merge of #34657 - oli-obk:no_needless_const_eval, r=eddyb\n\ndon't const eval constants during MIR creation\n\nthis didn't work very well anyway, because const_eval can't eval all kinds of constants.", "tree": {"sha": "bb452ee235dee8f7b3427a4269f9cecbd7b6160f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb452ee235dee8f7b3427a4269f9cecbd7b6160f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6871b3f240a800650f544892e75dc5e8fb47bc5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6871b3f240a800650f544892e75dc5e8fb47bc5b", "html_url": "https://github.com/rust-lang/rust/commit/6871b3f240a800650f544892e75dc5e8fb47bc5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6871b3f240a800650f544892e75dc5e8fb47bc5b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46e7f4b8c5a8c9f66d4d5795aa348307e30f4f0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/46e7f4b8c5a8c9f66d4d5795aa348307e30f4f0f", "html_url": "https://github.com/rust-lang/rust/commit/46e7f4b8c5a8c9f66d4d5795aa348307e30f4f0f"}, {"sha": "e7b083aeae0392bc1b79a7dcd71c002a2ac22a23", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b083aeae0392bc1b79a7dcd71c002a2ac22a23", "html_url": "https://github.com/rust-lang/rust/commit/e7b083aeae0392bc1b79a7dcd71c002a2ac22a23"}], "stats": {"total": 29, "additions": 1, "deletions": 28}, "files": [{"sha": "88fb65d8eea03569d41c13958d524a7e6cf5fe48", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6871b3f240a800650f544892e75dc5e8fb47bc5b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6871b3f240a800650f544892e75dc5e8fb47bc5b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=6871b3f240a800650f544892e75dc5e8fb47bc5b", "patch": "@@ -700,19 +700,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             ref sty => bug!(\"unexpected sty: {:?}\", sty)\n         },\n         Def::Const(def_id) |\n-        Def::AssociatedConst(def_id) => {\n-            let substs = Some(cx.tcx.node_id_item_substs(expr.id).substs);\n-            let tcx = cx.tcx.global_tcx();\n-            if let Some((e, _)) = const_eval::lookup_const_by_id(tcx, def_id, substs) {\n-                // FIXME ConstVal can't be yet used with adjustments, as they would be lost.\n-                if !cx.tcx.tables.borrow().adjustments.contains_key(&e.id) {\n-                    if let Some(v) = cx.try_const_eval_literal(e) {\n-                        return ExprKind::Literal { literal: v };\n-                    }\n-                }\n-            }\n-            def_id\n-        }\n+        Def::AssociatedConst(def_id) => def_id,\n \n         Def::Static(node_id, _) => return ExprKind::StaticRef {\n             id: node_id,"}, {"sha": "2438f43d24e0a42f8e87854af51e0ffe35c90ddb", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6871b3f240a800650f544892e75dc5e8fb47bc5b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6871b3f240a800650f544892e75dc5e8fb47bc5b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=6871b3f240a800650f544892e75dc5e8fb47bc5b", "patch": "@@ -129,21 +129,6 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn try_const_eval_literal(&mut self, e: &hir::Expr) -> Option<Literal<'tcx>> {\n-        let hint = const_eval::EvalHint::ExprTypeChecked;\n-        let tcx = self.tcx.global_tcx();\n-        const_eval::eval_const_expr_partial(tcx, e, hint, None).ok().and_then(|v| {\n-            match v {\n-                // All of these contain local IDs, unsuitable for storing in MIR.\n-                ConstVal::Struct(_) | ConstVal::Tuple(_) |\n-                ConstVal::Array(..) | ConstVal::Repeat(..) |\n-                ConstVal::Function(_) => None,\n-\n-                _ => Some(Literal::Value { value: v })\n-            }\n-        })\n-    }\n-\n     pub fn trait_method(&mut self,\n                         trait_def_id: DefId,\n                         method_name: &str,"}]}