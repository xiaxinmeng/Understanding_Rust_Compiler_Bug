{"sha": "adcc0d21687f642e3d947cd6d547bec1768c0941", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkY2MwZDIxNjg3ZjY0MmUzZDk0N2NkNmQ1NDdiZWMxNzY4YzA5NDE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-18T19:14:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-18T19:14:31Z"}, "message": "clarify swap", "tree": {"sha": "ddff10c3d01ec9d246f13c908d0c5deaaa4b58bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddff10c3d01ec9d246f13c908d0c5deaaa4b58bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adcc0d21687f642e3d947cd6d547bec1768c0941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adcc0d21687f642e3d947cd6d547bec1768c0941", "html_url": "https://github.com/rust-lang/rust/commit/adcc0d21687f642e3d947cd6d547bec1768c0941", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adcc0d21687f642e3d947cd6d547bec1768c0941/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ec87d0c928d04b57a3a073195f4095e64b8e867", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec87d0c928d04b57a3a073195f4095e64b8e867", "html_url": "https://github.com/rust-lang/rust/commit/0ec87d0c928d04b57a3a073195f4095e64b8e867"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "14f2148a64e0ef299e1cebf7e295b3a6e1d0bc2d", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/adcc0d21687f642e3d947cd6d547bec1768c0941/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adcc0d21687f642e3d947cd6d547bec1768c0941/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=adcc0d21687f642e3d947cd6d547bec1768c0941", "patch": "@@ -236,7 +236,7 @@ pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n ///\n /// * The two pointed-to values may overlap. If the values do overlap, then the\n ///   overlapping region of memory from `x` will be used. This is demonstrated\n-///   in the examples below.\n+///   in the second example below.\n ///\n /// [`mem::swap`]: ../mem/fn.swap.html\n ///\n@@ -261,8 +261,8 @@ pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n ///\n /// let mut array = [0, 1, 2, 3];\n ///\n-/// let x = array[0..].as_mut_ptr() as *mut [u32; 2];\n-/// let y = array[2..].as_mut_ptr() as *mut [u32; 2];\n+/// let x = array[0..].as_mut_ptr() as *mut [u32; 2]; // this is `array[0..2]`\n+/// let y = array[2..].as_mut_ptr() as *mut [u32; 2]; // this is `array[2..4]`\n ///\n /// unsafe {\n ///     ptr::swap(x, y);\n@@ -277,11 +277,16 @@ pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n ///\n /// let mut array = [0, 1, 2, 3];\n ///\n-/// let x = array[0..].as_mut_ptr() as *mut [u32; 3];\n-/// let y = array[1..].as_mut_ptr() as *mut [u32; 3];\n+/// let x = array[0..].as_mut_ptr() as *mut [u32; 3]; // this is `array[0..3]`\n+/// let y = array[1..].as_mut_ptr() as *mut [u32; 3]; // this is `array[1..4]`\n ///\n /// unsafe {\n ///     ptr::swap(x, y);\n+///     // The indices `1..3` of the slice overlap between `x` and `y`.\n+///     // Reasonable results would be for to them be `[2, 3]`, so that indices `0..3` are\n+///     // `[1, 2, 3]` (matching `y` before the `swap`); or for them to be `[0, 1]`\n+///     // so that indices `1..4` are `[0, 1, 2]` (matching `x` before the `swap`).\n+///     // This implementation is defined to make the latter choice.\n ///     assert_eq!([1, 0, 1, 2], array);\n /// }\n /// ```"}]}