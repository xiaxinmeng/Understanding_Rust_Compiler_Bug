{"sha": "fd771707187a505c826096fc62ced6ba9b65460e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNzcxNzA3MTg3YTUwNWM4MjYwOTZmYzYyY2VkNmJhOWI2NTQ2MGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T21:07:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-20T21:07:17Z"}, "message": "Snippetify introduce/inline var", "tree": {"sha": "16c4b911e3f9636decfed3ffeb1a52ada105e424", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16c4b911e3f9636decfed3ffeb1a52ada105e424"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd771707187a505c826096fc62ced6ba9b65460e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd771707187a505c826096fc62ced6ba9b65460e", "html_url": "https://github.com/rust-lang/rust/commit/fd771707187a505c826096fc62ced6ba9b65460e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd771707187a505c826096fc62ced6ba9b65460e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65fa5864105280267e6ccdaa61957cd9953e444e", "url": "https://api.github.com/repos/rust-lang/rust/commits/65fa5864105280267e6ccdaa61957cd9953e444e", "html_url": "https://github.com/rust-lang/rust/commit/65fa5864105280267e6ccdaa61957cd9953e444e"}], "stats": {"total": 163, "additions": 88, "deletions": 75}, "files": [{"sha": "d26e68847984a20b0e63fcfbb266986a9c8b9fa4", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fd771707187a505c826096fc62ced6ba9b65460e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd771707187a505c826096fc62ced6ba9b65460e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=fd771707187a505c826096fc62ced6ba9b65460e", "patch": "@@ -116,7 +116,6 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n             let replacement = if should_wrap { init_in_paren.clone() } else { init_str.clone() };\n             builder.replace(desc.file_range.range, replacement)\n         }\n-        builder.set_cursor(delete_range.start())\n     })\n }\n \n@@ -149,7 +148,7 @@ fn foo() {\n             r\"\n fn bar(a: usize) {}\n fn foo() {\n-    <|>1 + 1;\n+    1 + 1;\n     if 1 > 10 {\n     }\n \n@@ -183,7 +182,7 @@ fn foo() {\n             r\"\n fn bar(a: usize) {}\n fn foo() {\n-    <|>(1 + 1) + 1;\n+    (1 + 1) + 1;\n     if (1 + 1) > 10 {\n     }\n \n@@ -217,7 +216,7 @@ fn foo() {\n             r\"\n fn bar(a: usize) {}\n fn foo() {\n-    <|>bar(1) + 1;\n+    bar(1) + 1;\n     if bar(1) > 10 {\n     }\n \n@@ -251,7 +250,7 @@ fn foo() {\n             r\"\n fn bar(a: usize): usize { a }\n fn foo() {\n-    <|>(bar(1) as u64) + 1;\n+    (bar(1) as u64) + 1;\n     if (bar(1) as u64) > 10 {\n     }\n \n@@ -283,7 +282,7 @@ fn foo() {\n }\",\n             r\"\n fn foo() {\n-    <|>{ 10 + 1 } + 1;\n+    { 10 + 1 } + 1;\n     if { 10 + 1 } > 10 {\n     }\n \n@@ -315,7 +314,7 @@ fn foo() {\n }\",\n             r\"\n fn foo() {\n-    <|>( 10 + 1 ) + 1;\n+    ( 10 + 1 ) + 1;\n     if ( 10 + 1 ) > 10 {\n     }\n \n@@ -353,7 +352,7 @@ fn foo() {\n }\",\n             r\"\n fn foo() {\n-    <|>let b = bar(10 + 1) * 10;\n+    let b = bar(10 + 1) * 10;\n     let c = bar(10 + 1) as usize;\n }\",\n         );\n@@ -373,7 +372,7 @@ fn foo() {\n             r\"\n fn foo() {\n     let x = vec![1, 2, 3];\n-    <|>let b = x[0] * 10;\n+    let b = x[0] * 10;\n     let c = x[0] as usize;\n }\",\n         );\n@@ -393,7 +392,7 @@ fn foo() {\n             r\"\n fn foo() {\n     let bar = vec![1];\n-    <|>let b = bar.len() * 10;\n+    let b = bar.len() * 10;\n     let c = bar.len() as usize;\n }\",\n         );\n@@ -421,7 +420,7 @@ struct Bar {\n \n fn foo() {\n     let bar = Bar { foo: 1 };\n-    <|>let b = bar.foo * 10;\n+    let b = bar.foo * 10;\n     let c = bar.foo as usize;\n }\",\n         );\n@@ -442,7 +441,7 @@ fn foo() -> Option<usize> {\n             r\"\n fn foo() -> Option<usize> {\n     let bar = Some(1);\n-    <|>let b = bar? * 10;\n+    let b = bar? * 10;\n     let c = bar? as usize;\n     None\n }\",\n@@ -462,7 +461,7 @@ fn foo() {\n             r\"\n fn foo() {\n     let bar = 10;\n-    <|>let b = &bar * 10;\n+    let b = &bar * 10;\n }\",\n         );\n     }\n@@ -478,7 +477,7 @@ fn foo() {\n }\",\n             r\"\n fn foo() {\n-    <|>let b = (10, 20)[0];\n+    let b = (10, 20)[0];\n }\",\n         );\n     }\n@@ -494,7 +493,7 @@ fn foo() {\n }\",\n             r\"\n fn foo() {\n-    <|>let b = [1, 2, 3].len();\n+    let b = [1, 2, 3].len();\n }\",\n         );\n     }\n@@ -511,7 +510,7 @@ fn foo() {\n }\",\n             r\"\n fn foo() {\n-    <|>let b = (10 + 20) * 10;\n+    let b = (10 + 20) * 10;\n     let c = (10 + 20) as usize;\n }\",\n         );\n@@ -531,7 +530,7 @@ fn foo() {\n             r\"\n fn foo() {\n     let d = 10;\n-    <|>let b = d * 10;\n+    let b = d * 10;\n     let c = d as usize;\n }\",\n         );\n@@ -549,7 +548,7 @@ fn foo() {\n }\",\n             r\"\n fn foo() {\n-    <|>let b = { 10 } * 10;\n+    let b = { 10 } * 10;\n     let c = { 10 } as usize;\n }\",\n         );\n@@ -569,7 +568,7 @@ fn foo() {\n }\",\n             r\"\n fn foo() {\n-    <|>let b = (10 + 20) * 10;\n+    let b = (10 + 20) * 10;\n     let c = (10 + 20, 20);\n     let d = [10 + 20, 10];\n     let e = (10 + 20);\n@@ -588,7 +587,7 @@ fn foo() {\n }\",\n             r\"\n fn foo() {\n-    <|>for i in vec![10, 20] {}\n+    for i in vec![10, 20] {}\n }\",\n         );\n     }\n@@ -604,7 +603,7 @@ fn foo() {\n }\",\n             r\"\n fn foo() {\n-    <|>while 1 > 0 {}\n+    while 1 > 0 {}\n }\",\n         );\n     }\n@@ -622,7 +621,7 @@ fn foo() {\n }\",\n             r\"\n fn foo() {\n-    <|>loop {\n+    loop {\n         break 1 + 1;\n     }\n }\",\n@@ -640,7 +639,7 @@ fn foo() {\n }\",\n             r\"\n fn foo() {\n-    <|>return 1 > 0;\n+    return 1 > 0;\n }\",\n         );\n     }\n@@ -656,7 +655,7 @@ fn foo() {\n }\",\n             r\"\n fn foo() {\n-    <|>match 1 > 0 {}\n+    match 1 > 0 {}\n }\",\n         );\n     }"}, {"sha": "31d6539f7a77b46866102aefe0e553903aef6162", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 63, "deletions": 49, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/fd771707187a505c826096fc62ced6ba9b65460e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd771707187a505c826096fc62ced6ba9b65460e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=fd771707187a505c826096fc62ced6ba9b65460e", "patch": "@@ -4,7 +4,7 @@ use ra_syntax::{\n         BLOCK_EXPR, BREAK_EXPR, COMMENT, LAMBDA_EXPR, LOOP_EXPR, MATCH_ARM, PATH_EXPR, RETURN_EXPR,\n         WHITESPACE,\n     },\n-    SyntaxNode, TextSize,\n+    SyntaxNode,\n };\n use stdx::format_to;\n use test_utils::mark;\n@@ -23,7 +23,7 @@ use crate::{AssistContext, AssistId, Assists};\n // ->\n // ```\n // fn main() {\n-//     let var_name = (1 + 2);\n+//     let $0var_name = (1 + 2);\n //     var_name * 4;\n // }\n // ```\n@@ -46,14 +46,13 @@ pub(crate) fn introduce_variable(acc: &mut Assists, ctx: &AssistContext) -> Opti\n     acc.add(AssistId(\"introduce_variable\"), \"Extract into variable\", target, move |edit| {\n         let mut buf = String::new();\n \n-        let cursor_offset = if wrap_in_block {\n+        if wrap_in_block {\n             buf.push_str(\"{ let var_name = \");\n-            TextSize::of(\"{ let \")\n         } else {\n             buf.push_str(\"let var_name = \");\n-            TextSize::of(\"let \")\n         };\n         format_to!(buf, \"{}\", expr.syntax());\n+\n         let full_stmt = ast::ExprStmt::cast(anchor_stmt.clone());\n         let is_full_stmt = if let Some(expr_stmt) = &full_stmt {\n             Some(expr.syntax().clone()) == expr_stmt.expr().map(|e| e.syntax().clone())\n@@ -65,28 +64,43 @@ pub(crate) fn introduce_variable(acc: &mut Assists, ctx: &AssistContext) -> Opti\n             if full_stmt.unwrap().semicolon_token().is_none() {\n                 buf.push_str(\";\");\n             }\n-            edit.replace(expr.syntax().text_range(), buf);\n-        } else {\n-            buf.push_str(\";\");\n-\n-            // We want to maintain the indent level,\n-            // but we do not want to duplicate possible\n-            // extra newlines in the indent block\n-            let text = indent.text();\n-            if text.starts_with('\\n') {\n-                buf.push_str(\"\\n\");\n-                buf.push_str(text.trim_start_matches('\\n'));\n-            } else {\n-                buf.push_str(text);\n+            let offset = expr.syntax().text_range();\n+            match ctx.config.snippet_cap {\n+                Some(cap) => {\n+                    let snip = buf.replace(\"let var_name\", \"let $0var_name\");\n+                    edit.replace_snippet(cap, offset, snip)\n+                }\n+                None => edit.replace(offset, buf),\n             }\n+            return;\n+        }\n \n-            edit.replace(expr.syntax().text_range(), \"var_name\".to_string());\n-            edit.insert(anchor_stmt.text_range().start(), buf);\n-            if wrap_in_block {\n-                edit.insert(anchor_stmt.text_range().end(), \" }\");\n+        buf.push_str(\";\");\n+\n+        // We want to maintain the indent level,\n+        // but we do not want to duplicate possible\n+        // extra newlines in the indent block\n+        let text = indent.text();\n+        if text.starts_with('\\n') {\n+            buf.push_str(\"\\n\");\n+            buf.push_str(text.trim_start_matches('\\n'));\n+        } else {\n+            buf.push_str(text);\n+        }\n+\n+        edit.replace(expr.syntax().text_range(), \"var_name\".to_string());\n+        let offset = anchor_stmt.text_range().start();\n+        match ctx.config.snippet_cap {\n+            Some(cap) => {\n+                let snip = buf.replace(\"let var_name\", \"let $0var_name\");\n+                edit.insert_snippet(cap, offset, snip)\n             }\n+            None => edit.insert(offset, buf),\n+        }\n+\n+        if wrap_in_block {\n+            edit.insert(anchor_stmt.text_range().end(), \" }\");\n         }\n-        edit.set_cursor(anchor_stmt.text_range().start() + cursor_offset);\n     })\n }\n \n@@ -144,15 +158,15 @@ mod tests {\n     fn test_introduce_var_simple() {\n         check_assist(\n             introduce_variable,\n-            \"\n+            r#\"\n fn foo() {\n     foo(<|>1 + 1<|>);\n-}\",\n-            \"\n+}\"#,\n+            r#\"\n fn foo() {\n-    let <|>var_name = 1 + 1;\n+    let $0var_name = 1 + 1;\n     foo(var_name);\n-}\",\n+}\"#,\n         );\n     }\n \n@@ -167,14 +181,14 @@ fn foo() {\n         mark::check!(test_introduce_var_expr_stmt);\n         check_assist(\n             introduce_variable,\n-            \"\n+            r#\"\n fn foo() {\n     <|>1 + 1<|>;\n-}\",\n-            \"\n+}\"#,\n+            r#\"\n fn foo() {\n-    let <|>var_name = 1 + 1;\n-}\",\n+    let $0var_name = 1 + 1;\n+}\"#,\n         );\n         check_assist(\n             introduce_variable,\n@@ -185,7 +199,7 @@ fn foo() {\n }\",\n             \"\n fn foo() {\n-    let <|>var_name = { let x = 0; x };\n+    let $0var_name = { let x = 0; x };\n     something_else();\n }\",\n         );\n@@ -201,7 +215,7 @@ fn foo() {\n }\",\n             \"\n fn foo() {\n-    let <|>var_name = 1;\n+    let $0var_name = 1;\n     var_name + 1;\n }\",\n         );\n@@ -218,7 +232,7 @@ fn foo() {\n }\",\n             \"\n fn foo() {\n-    let <|>var_name = 1 + 1;\n+    let $0var_name = 1 + 1;\n     bar(var_name)\n }\",\n         );\n@@ -230,7 +244,7 @@ fn foo() {\n }\",\n             \"\n fn foo() {\n-    let <|>var_name = bar(1 + 1);\n+    let $0var_name = bar(1 + 1);\n     var_name\n }\",\n         )\n@@ -253,7 +267,7 @@ fn main() {\n fn main() {\n     let x = true;\n     let tuple = match x {\n-        true => { let <|>var_name = 2 + 2; (var_name, true) }\n+        true => { let $0var_name = 2 + 2; (var_name, true) }\n         _ => (0, false)\n     };\n }\n@@ -283,7 +297,7 @@ fn main() {\n     let tuple = match x {\n         true => {\n             let y = 1;\n-            let <|>var_name = 2 + y;\n+            let $0var_name = 2 + y;\n             (var_name, true)\n         }\n         _ => (0, false)\n@@ -304,7 +318,7 @@ fn main() {\n \",\n             \"\n fn main() {\n-    let lambda = |x: u32| { let <|>var_name = x * 2; var_name };\n+    let lambda = |x: u32| { let $0var_name = x * 2; var_name };\n }\n \",\n         );\n@@ -321,7 +335,7 @@ fn main() {\n \",\n             \"\n fn main() {\n-    let lambda = |x: u32| { let <|>var_name = x * 2; var_name };\n+    let lambda = |x: u32| { let $0var_name = x * 2; var_name };\n }\n \",\n         );\n@@ -338,7 +352,7 @@ fn main() {\n \",\n             \"\n fn main() {\n-    let <|>var_name = Some(true);\n+    let $0var_name = Some(true);\n     let o = var_name;\n }\n \",\n@@ -356,7 +370,7 @@ fn main() {\n \",\n             \"\n fn main() {\n-    let <|>var_name = bar.foo();\n+    let $0var_name = bar.foo();\n     let v = var_name;\n }\n \",\n@@ -374,7 +388,7 @@ fn foo() -> u32 {\n \",\n             \"\n fn foo() -> u32 {\n-    let <|>var_name = 2 + 2;\n+    let $0var_name = 2 + 2;\n     return var_name;\n }\n \",\n@@ -396,7 +410,7 @@ fn foo() -> u32 {\n fn foo() -> u32 {\n \n \n-    let <|>var_name = 2 + 2;\n+    let $0var_name = 2 + 2;\n     return var_name;\n }\n \",\n@@ -413,7 +427,7 @@ fn foo() -> u32 {\n             \"\n fn foo() -> u32 {\n \n-        let <|>var_name = 2 + 2;\n+        let $0var_name = 2 + 2;\n         return var_name;\n }\n \",\n@@ -438,7 +452,7 @@ fn foo() -> u32 {\n     // bar\n \n \n-    let <|>var_name = 2 + 2;\n+    let $0var_name = 2 + 2;\n     return var_name;\n }\n \",\n@@ -459,7 +473,7 @@ fn main() {\n             \"\n fn main() {\n     let result = loop {\n-        let <|>var_name = 2 + 2;\n+        let $0var_name = 2 + 2;\n         break var_name;\n     };\n }\n@@ -478,7 +492,7 @@ fn main() {\n \",\n             \"\n fn main() {\n-    let <|>var_name = 0f32 as u32;\n+    let $0var_name = 0f32 as u32;\n     let v = var_name;\n }\n \","}, {"sha": "0eeb5c19941019b29bcc465cff3a21134019dd84", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd771707187a505c826096fc62ced6ba9b65460e/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd771707187a505c826096fc62ced6ba9b65460e/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=fd771707187a505c826096fc62ced6ba9b65460e", "patch": "@@ -443,7 +443,7 @@ fn main() {\n \"#####,\n         r#####\"\n fn main() {\n-    let var_name = (1 + 2);\n+    let $0var_name = (1 + 2);\n     var_name * 4;\n }\n \"#####,"}, {"sha": "a6e27d67f3c34b2fe425a49798eade9a1d4fbc07", "filename": "docs/user/assists.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd771707187a505c826096fc62ced6ba9b65460e/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/fd771707187a505c826096fc62ced6ba9b65460e/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=fd771707187a505c826096fc62ced6ba9b65460e", "patch": "@@ -426,7 +426,7 @@ fn main() {\n \n // AFTER\n fn main() {\n-    let var_name = (1 + 2);\n+    let $0var_name = (1 + 2);\n     var_name * 4;\n }\n ```"}]}