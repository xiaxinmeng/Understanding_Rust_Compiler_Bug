{"sha": "2833976cccf6ce8e9740ac5f055435ba17a28b9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MzM5NzZjY2NmNmNlOGU5NzQwYWM1ZjA1NTQzNWJhMTdhMjhiOWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T10:11:34Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T12:03:18Z"}, "message": "Rollup merge of #22402 - nagisa:spring-cleanup-2, r=nikomatsakis\n\nThis commit mostly replaces some of the uses of os::args with env::args.\n\nThis, for obvious reasons is based on top of #22400. Do not r+ before that lands.", "tree": {"sha": "0eb68b5241edf8263063ce1534c22d722a28075b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0eb68b5241edf8263063ce1534c22d722a28075b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2833976cccf6ce8e9740ac5f055435ba17a28b9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2833976cccf6ce8e9740ac5f055435ba17a28b9e", "html_url": "https://github.com/rust-lang/rust/commit/2833976cccf6ce8e9740ac5f055435ba17a28b9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2833976cccf6ce8e9740ac5f055435ba17a28b9e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a", "html_url": "https://github.com/rust-lang/rust/commit/c0865dfe1c74a0720a2d53d3e2f5aa6fdfde852a"}, {"sha": "7d941fa61fa38f13347de8e0522e9084683795e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d941fa61fa38f13347de8e0522e9084683795e3", "html_url": "https://github.com/rust-lang/rust/commit/7d941fa61fa38f13347de8e0522e9084683795e3"}], "stats": {"total": 494, "additions": 239, "deletions": 255}, "files": [{"sha": "93dc3efe2c4fc7a1186811dc4e346c20db8fba85", "filename": "src/libstd/env.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -488,12 +488,20 @@ impl Iterator for Args {\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n \n+impl ExactSizeIterator for Args {\n+    fn len(&self) -> usize { self.inner.len() }\n+}\n+\n impl Iterator for ArgsOs {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> { self.inner.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n \n+impl ExactSizeIterator for ArgsOs {\n+    fn len(&self) -> usize { self.inner.len() }\n+}\n+\n /// Returns the page size of the current architecture in bytes.\n pub fn page_size() -> usize {\n     os_imp::page_size()"}, {"sha": "df03841276e9e483cf22444cd9e6cc4f1559f1f2", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -247,6 +247,10 @@ impl Iterator for Args {\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n }\n \n+impl ExactSizeIterator for Args {\n+    fn len(&self) -> usize { self.iter.len() }\n+}\n+\n /// Returns the command line arguments\n ///\n /// Returns a list of the command line arguments."}, {"sha": "6aa1ac04ca9ae8b3328e255e443b21ff22921c79", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -303,6 +303,10 @@ impl Iterator for Args {\n     fn size_hint(&self) -> (usize, Option<usize>) { self.range.size_hint() }\n }\n \n+impl ExactSizeIterator for Args {\n+    fn len(&self) -> usize { self.range.len() }\n+}\n+\n impl Drop for Args {\n     fn drop(&mut self) {\n         unsafe { c::LocalFree(self.cur as *mut c_void); }"}, {"sha": "6f5fc5c1969f0a8704e0f5b8fabb27b6610877c4", "filename": "src/rustbook/build.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Frustbook%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Frustbook%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fbuild.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -11,6 +11,7 @@\n //! Implementation of the `build` subcommand, used to compile a book.\n \n use std::os;\n+use std::env;\n use std::old_io;\n use std::old_io::{fs, File, BufferedWriter, TempDir, IoResult};\n \n@@ -80,10 +81,10 @@ fn render(book: &Book, tgt: &Path) -> CliResult<()> {\n         let out_path = tgt.join(item.path.dirname());\n \n         let src;\n-        if os::args().len() < 3 {\n+        if env::args().len() < 3 {\n             src = os::getcwd().unwrap().clone();\n         } else {\n-            src = Path::new(os::args()[2].clone());\n+            src = Path::new(env::args().nth(2).unwrap().clone());\n         }\n         // preprocess the markdown, rerouting markdown references to html references\n         let markdown_data = try!(File::open(&src.join(&item.path)).read_to_string());\n@@ -153,16 +154,16 @@ impl Subcommand for Build {\n         let src;\n         let tgt;\n \n-        if os::args().len() < 3 {\n+        if env::args().len() < 3 {\n             src = cwd.clone();\n         } else {\n-            src = Path::new(os::args()[2].clone());\n+            src = Path::new(env::args().nth(2).unwrap().clone());\n         }\n \n-        if os::args().len() < 4 {\n+        if env::args().len() < 4 {\n             tgt = cwd.join(\"_book\");\n         } else {\n-            tgt = Path::new(os::args()[3].clone());\n+            tgt = Path::new(env::args().nth(3).unwrap().clone());\n         }\n \n         try!(fs::mkdir(&tgt, old_io::USER_DIR));"}, {"sha": "cfd4379497a05e4de91f29cfc1a206b4abf307ee", "filename": "src/rustbook/main.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Frustbook%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Frustbook%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fmain.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -13,12 +13,13 @@\n #![feature(core)]\n #![feature(io)]\n #![feature(os)]\n+#![feature(env)]\n #![feature(path)]\n #![feature(rustdoc)]\n \n extern crate rustdoc;\n \n-use std::os;\n+use std::env;\n use subcommand::Subcommand;\n use term::Term;\n \n@@ -48,7 +49,7 @@ mod javascript;\n #[cfg(not(test))] // thanks #12327\n fn main() {\n     let mut term = Term::new();\n-    let cmd = os::args();\n+    let cmd: Vec<_> = env::args().collect();\n \n     if cmd.len() <= 1 {\n         help::usage()"}, {"sha": "98aa3fca184dca3f4c05e04fc9d09ba91641892d", "filename": "src/rustbook/term.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Frustbook%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Frustbook%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fterm.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -11,7 +11,7 @@\n //! An abstraction of the terminal. Eventually, provide color and\n //! verbosity support. For now, just a wrapper around stdout/stderr.\n \n-use std::os;\n+use std::env;\n use std::old_io::stdio;\n \n pub struct Term {\n@@ -28,6 +28,6 @@ impl Term {\n     pub fn err(&mut self, msg: &str) {\n         // swallow any errors\n         let _ = self.err.write_line(msg);\n-        os::set_exit_status(101);\n+        env::set_exit_status(101);\n     }\n }"}, {"sha": "4909d84a34f126960aadfb6e28343ceb275a34fd", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -11,7 +11,7 @@\n #![feature(unboxed_closures)]\n \n use std::collections::{BTreeMap, HashMap, HashSet};\n-use std::os;\n+use std::env;\n use std::rand::{Rng, IsaacRng, SeedableRng};\n use std::time::Duration;\n \n@@ -20,33 +20,33 @@ fn timed<F>(label: &str, f: F) where F: FnMut() {\n }\n \n trait MutableMap {\n-    fn insert(&mut self, k: uint, v: uint);\n-    fn remove(&mut self, k: &uint) -> bool;\n-    fn find(&self, k: &uint) -> Option<&uint>;\n+    fn insert(&mut self, k: usize, v: usize);\n+    fn remove(&mut self, k: &usize) -> bool;\n+    fn find(&self, k: &usize) -> Option<&usize>;\n }\n \n-impl MutableMap for BTreeMap<uint, uint> {\n-    fn insert(&mut self, k: uint, v: uint) { self.insert(k, v); }\n-    fn remove(&mut self, k: &uint) -> bool { self.remove(k).is_some() }\n-    fn find(&self, k: &uint) -> Option<&uint> { self.get(k) }\n+impl MutableMap for BTreeMap<usize, usize> {\n+    fn insert(&mut self, k: usize, v: usize) { self.insert(k, v); }\n+    fn remove(&mut self, k: &usize) -> bool { self.remove(k).is_some() }\n+    fn find(&self, k: &usize) -> Option<&usize> { self.get(k) }\n }\n-impl MutableMap for HashMap<uint, uint> {\n-    fn insert(&mut self, k: uint, v: uint) { self.insert(k, v); }\n-    fn remove(&mut self, k: &uint) -> bool { self.remove(k).is_some() }\n-    fn find(&self, k: &uint) -> Option<&uint> { self.get(k) }\n+impl MutableMap for HashMap<usize, usize> {\n+    fn insert(&mut self, k: usize, v: usize) { self.insert(k, v); }\n+    fn remove(&mut self, k: &usize) -> bool { self.remove(k).is_some() }\n+    fn find(&self, k: &usize) -> Option<&usize> { self.get(k) }\n }\n \n-fn ascending<M: MutableMap>(map: &mut M, n_keys: uint) {\n+fn ascending<M: MutableMap>(map: &mut M, n_keys: usize) {\n     println!(\" Ascending integers:\");\n \n     timed(\"insert\", || {\n-        for i in 0u..n_keys {\n+        for i in 0..n_keys {\n             map.insert(i, i + 1);\n         }\n     });\n \n     timed(\"search\", || {\n-        for i in 0u..n_keys {\n+        for i in 0..n_keys {\n             assert_eq!(map.find(&i).unwrap(), &(i + 1));\n         }\n     });\n@@ -58,7 +58,7 @@ fn ascending<M: MutableMap>(map: &mut M, n_keys: uint) {\n     });\n }\n \n-fn descending<M: MutableMap>(map: &mut M, n_keys: uint) {\n+fn descending<M: MutableMap>(map: &mut M, n_keys: usize) {\n     println!(\" Descending integers:\");\n \n     timed(\"insert\", || {\n@@ -80,32 +80,31 @@ fn descending<M: MutableMap>(map: &mut M, n_keys: uint) {\n     });\n }\n \n-fn vector<M: MutableMap>(map: &mut M, n_keys: uint, dist: &[uint]) {\n+fn vector<M: MutableMap>(map: &mut M, n_keys: usize, dist: &[usize]) {\n     timed(\"insert\", || {\n-        for i in 0u..n_keys {\n+        for i in 0..n_keys {\n             map.insert(dist[i], i + 1);\n         }\n     });\n \n     timed(\"search\", || {\n-        for i in 0u..n_keys {\n+        for i in 0..n_keys {\n             assert_eq!(map.find(&dist[i]).unwrap(), &(i + 1));\n         }\n     });\n \n     timed(\"remove\", || {\n-        for i in 0u..n_keys {\n+        for i in 0..n_keys {\n             assert!(map.remove(&dist[i]));\n         }\n     });\n }\n \n fn main() {\n-    let args = os::args();\n-    let args = args;\n+    let mut args = env::args();\n     let n_keys = {\n         if args.len() == 2 {\n-            args[1].parse::<uint>().unwrap()\n+            args.nth(1).unwrap().parse::<usize>().unwrap()\n         } else {\n             1000000\n         }\n@@ -131,37 +130,37 @@ fn main() {\n     println!(\"{}\", \"\\nBTreeMap:\");\n \n     {\n-        let mut map: BTreeMap<uint,uint> = BTreeMap::new();\n+        let mut map: BTreeMap<usize,usize> = BTreeMap::new();\n         ascending(&mut map, n_keys);\n     }\n \n     {\n-        let mut map: BTreeMap<uint,uint> = BTreeMap::new();\n+        let mut map: BTreeMap<usize,usize> = BTreeMap::new();\n         descending(&mut map, n_keys);\n     }\n \n     {\n         println!(\" Random integers:\");\n-        let mut map: BTreeMap<uint,uint> = BTreeMap::new();\n+        let mut map: BTreeMap<usize,usize> = BTreeMap::new();\n         vector(&mut map, n_keys, &rand);\n     }\n \n     // FIXME: #9970\n     println!(\"{}\", \"\\nHashMap:\");\n \n     {\n-        let mut map: HashMap<uint,uint> = HashMap::new();\n+        let mut map: HashMap<usize,usize> = HashMap::new();\n         ascending(&mut map, n_keys);\n     }\n \n     {\n-        let mut map: HashMap<uint,uint> = HashMap::new();\n+        let mut map: HashMap<usize,usize> = HashMap::new();\n         descending(&mut map, n_keys);\n     }\n \n     {\n         println!(\" Random integers:\");\n-        let mut map: HashMap<uint,uint> = HashMap::new();\n+        let mut map: HashMap<usize,usize> = HashMap::new();\n         vector(&mut map, n_keys, &rand);\n     }\n }"}, {"sha": "1d440c4540ca3e9a1110ac2fe01646659dd372c1", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -20,7 +20,7 @@ use std::collections::BitvSet;\n use std::collections::HashSet;\n use std::collections::hash_map::Hasher;\n use std::hash::Hash;\n-use std::os;\n+use std::env;\n use std::time::Duration;\n \n struct Results {\n@@ -53,29 +53,29 @@ impl<T: Ord> MutableSet<T> for BTreeSet<T> {\n     fn remove(&mut self, k: &T) -> bool { self.remove(k) }\n     fn contains(&self, k: &T) -> bool { self.contains(k) }\n }\n-impl MutableSet<uint> for BitvSet {\n-    fn insert(&mut self, k: uint) { self.insert(k); }\n-    fn remove(&mut self, k: &uint) -> bool { self.remove(k) }\n-    fn contains(&self, k: &uint) -> bool { self.contains(k) }\n+impl MutableSet<usize> for BitvSet {\n+    fn insert(&mut self, k: usize) { self.insert(k); }\n+    fn remove(&mut self, k: &usize) -> bool { self.remove(k) }\n+    fn contains(&self, k: &usize) -> bool { self.contains(k) }\n }\n \n impl Results {\n-    pub fn bench_int<T:MutableSet<uint>,\n+    pub fn bench_int<T:MutableSet<usize>,\n                      R:rand::Rng,\n                      F:FnMut() -> T>(\n                      &mut self,\n                      rng: &mut R,\n-                     num_keys: uint,\n-                     rand_cap: uint,\n+                     num_keys: usize,\n+                     rand_cap: usize,\n                      mut f: F) {\n         {\n             let mut set = f();\n             timed(&mut self.sequential_ints, || {\n-                for i in 0u..num_keys {\n+                for i in 0..num_keys {\n                     set.insert(i);\n                 }\n \n-                for i in 0u..num_keys {\n+                for i in 0..num_keys {\n                     assert!(set.contains(&i));\n                 }\n             })\n@@ -85,19 +85,19 @@ impl Results {\n             let mut set = f();\n             timed(&mut self.random_ints, || {\n                 for _ in 0..num_keys {\n-                    set.insert(rng.gen::<uint>() % rand_cap);\n+                    set.insert(rng.gen::<usize>() % rand_cap);\n                 }\n             })\n         }\n \n         {\n             let mut set = f();\n-            for i in 0u..num_keys {\n+            for i in 0..num_keys {\n                 set.insert(i);\n             }\n \n             timed(&mut self.delete_ints, || {\n-                for i in 0u..num_keys {\n+                for i in 0..num_keys {\n                     assert!(set.remove(&i));\n                 }\n             })\n@@ -109,16 +109,16 @@ impl Results {\n                      F:FnMut() -> T>(\n                      &mut self,\n                      rng: &mut R,\n-                     num_keys: uint,\n+                     num_keys: usize,\n                      mut f: F) {\n         {\n             let mut set = f();\n             timed(&mut self.sequential_strings, || {\n-                for i in 0u..num_keys {\n+                for i in 0..num_keys {\n                     set.insert(i.to_string());\n                 }\n \n-                for i in 0u..num_keys {\n+                for i in 0..num_keys {\n                     assert!(set.contains(&i.to_string()));\n                 }\n             })\n@@ -128,19 +128,19 @@ impl Results {\n             let mut set = f();\n             timed(&mut self.random_strings, || {\n                 for _ in 0..num_keys {\n-                    let s = rng.gen::<uint>().to_string();\n+                    let s = rng.gen::<usize>().to_string();\n                     set.insert(s);\n                 }\n             })\n         }\n \n         {\n             let mut set = f();\n-            for i in 0u..num_keys {\n+            for i in 0..num_keys {\n                 set.insert(i.to_string());\n             }\n             timed(&mut self.delete_strings, || {\n-                for i in 0u..num_keys {\n+                for i in 0..num_keys {\n                     assert!(set.remove(&i.to_string()));\n                 }\n             })\n@@ -179,11 +179,10 @@ fn empty_results() -> Results {\n }\n \n fn main() {\n-    let args = os::args();\n-    let args = args;\n+    let mut args = env::args();\n     let num_keys = {\n         if args.len() == 2 {\n-            args[1].parse::<uint>().unwrap()\n+            args.nth(1).unwrap().parse::<usize>().unwrap()\n         } else {\n             100 // woefully inadequate for any real measurement\n         }\n@@ -196,7 +195,7 @@ fn main() {\n         let mut rng: rand::IsaacRng = rand::SeedableRng::from_seed(seed);\n         let mut results = empty_results();\n         results.bench_int(&mut rng, num_keys, max, || {\n-            let s: HashSet<uint> = HashSet::new();\n+            let s: HashSet<usize> = HashSet::new();\n             s\n         });\n         results.bench_str(&mut rng, num_keys, || {\n@@ -210,7 +209,7 @@ fn main() {\n         let mut rng: rand::IsaacRng = rand::SeedableRng::from_seed(seed);\n         let mut results = empty_results();\n         results.bench_int(&mut rng, num_keys, max, || {\n-            let s: BTreeSet<uint> = BTreeSet::new();\n+            let s: BTreeSet<usize> = BTreeSet::new();\n             s\n         });\n         results.bench_str(&mut rng, num_keys, || {"}, {"sha": "2409487c04fc10072e225e0fe20676a67918ed52", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -16,7 +16,6 @@\n use std::old_io::File;\n use std::iter::repeat;\n use std::mem::swap;\n-use std::os;\n use std::env;\n use std::rand::Rng;\n use std::rand;\n@@ -25,8 +24,7 @@ use std::time::Duration;\n use std::vec;\n \n fn main() {\n-    let argv = os::args();\n-    let _tests = &argv[1..argv.len()];\n+    let argv: Vec<String> = env::args().collect();\n \n     macro_rules! bench {\n         ($id:ident) =>"}, {"sha": "57889053e3c1b7a4a751451dc48a00677f87cb66", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -8,17 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::os;\n use std::env;\n \n fn main() {\n-    let args = os::args();\n+    let args = env::args();\n     let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"10000000\".to_string())\n     } else if args.len() <= 1u {\n         vec!(\"\".to_string(), \"100000\".to_string())\n     } else {\n-        args.into_iter().collect()\n+        args.collect()\n     };\n \n     let n = args[1].parse().unwrap();"}, {"sha": "868202f71e10f5931310307be6ab2f469265513b", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -19,7 +19,6 @@\n // version.\n \n use std::sync::mpsc::{channel, Sender, Receiver};\n-use std::os;\n use std::env;\n use std::thread::Thread;\n use std::time::Duration;\n@@ -94,13 +93,13 @@ fn run(args: &[String]) {\n }\n \n fn main() {\n-    let args = os::args();\n+    let args = env::args();\n     let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"1000000\".to_string(), \"10000\".to_string())\n-    } else if args.len() <= 1u {\n+    } else if args.len() <= 1 {\n         vec!(\"\".to_string(), \"10000\".to_string(), \"4\".to_string())\n     } else {\n-        args.into_iter().map(|x| x.to_string()).collect()\n+        args.map(|x| x.to_string()).collect()\n     };\n \n     println!(\"{:?}\", args);"}, {"sha": "c6319ad65175c96d2dfed8a8a1cae16f0f770f8a", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -15,7 +15,6 @@\n // I *think* it's the same, more or less.\n \n use std::sync::mpsc::{channel, Sender, Receiver};\n-use std::os;\n use std::env;\n use std::thread::Thread;\n use std::time::Duration;\n@@ -101,13 +100,13 @@ fn run(args: &[String]) {\n }\n \n fn main() {\n-    let args = os::args();\n+    let args = env::args();\n     let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"1000000\".to_string(), \"8\".to_string())\n-    } else if args.len() <= 1u {\n+    } else if args.len() <= 1 {\n         vec!(\"\".to_string(), \"10000\".to_string(), \"4\".to_string())\n     } else {\n-        args.clone().into_iter().map(|x| x.to_string()).collect()\n+        args.map(|x| x.to_string()).collect()\n     };\n \n     println!(\"{:?}\", args);"}, {"sha": "168fe929e12542f79e4a27d5704097a96642f1e2", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -18,7 +18,6 @@\n // no-pretty-expanded FIXME #15189\n // ignore-lexer-test FIXME #15679\n \n-use std::os;\n use std::env;\n use std::sync::{Arc, Future, Mutex, Condvar};\n use std::time::Duration;\n@@ -64,13 +63,13 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n }\n \n fn main() {\n-    let args = os::args();\n+    let args = env::args();\n     let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"100\".to_string(), \"10000\".to_string())\n-    } else if args.len() <= 1u {\n+    } else if args.len() <= 1 {\n         vec!(\"\".to_string(), \"10\".to_string(), \"100\".to_string())\n     } else {\n-        args.clone().into_iter().collect()\n+        args.collect()\n     };\n \n     let num_tasks = args[1].parse::<uint>().unwrap();"}, {"sha": "4d0887f48b321d69e097dc34a25841eac20ae205", "filename": "src/test/bench/rt-messaging-ping-pong.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -18,18 +18,18 @@\n // except according to those terms.\n \n use std::sync::mpsc::channel;\n-use std::os;\n+use std::env;\n use std::thread::Thread;\n \n // This is a simple bench that creates M pairs of tasks. These\n // tasks ping-pong back and forth over a pair of streams. This is a\n // canonical message-passing benchmark as it heavily strains message\n // passing and almost nothing else.\n \n-fn ping_pong_bench(n: uint, m: uint) {\n+fn ping_pong_bench(n: usize, m: usize) {\n \n     // Create pairs of tasks that pingpong back and forth.\n-    fn run_pair(n: uint) {\n+    fn run_pair(n: usize) {\n         // Create a channel: A->B\n         let (atx, arx) = channel();\n         // Create a channel: B->A\n@@ -63,19 +63,13 @@ fn ping_pong_bench(n: uint, m: uint) {\n \n \n fn main() {\n-\n-    let args = os::args();\n-    let args = args;\n-    let n = if args.len() == 3 {\n-        args[1].parse::<uint>().unwrap()\n-    } else {\n-        10000\n-    };\n-\n-    let m = if args.len() == 3 {\n-        args[2].parse::<uint>().unwrap()\n+    let mut args = env::args();\n+    let (n, m) = if args.len() == 3 {\n+        let n = args.nth(1).unwrap().parse::<usize>().unwrap();\n+        let m = args.next().unwrap().parse::<usize>().unwrap();\n+        (n, m)\n     } else {\n-        4\n+        (10000, 4)\n     };\n \n     ping_pong_bench(n, m);"}, {"sha": "dadf1a3fd9a1d32b5d89d3a85fceaccfaee3ca46", "filename": "src/test/bench/rt-parfib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Frt-parfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Frt-parfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-parfib.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -9,14 +9,14 @@\n // except according to those terms.\n \n use std::sync::mpsc::channel;\n-use std::os;\n+use std::env;\n use std::thread::Thread;\n \n // A simple implementation of parfib. One subtree is found in a new\n // task and communicated over a oneshot pipe, the other is found\n // locally. There is no sequential-mode threshold.\n \n-fn parfib(n: uint) -> uint {\n+fn parfib(n: u64) -> u64 {\n     if n == 0 || n == 1 {\n         return 1;\n     }\n@@ -30,11 +30,9 @@ fn parfib(n: uint) -> uint {\n }\n \n fn main() {\n-\n-    let args = os::args();\n-    let args = args;\n+    let mut args = env::args();\n     let n = if args.len() == 2 {\n-        args[1].parse::<uint>().unwrap()\n+        args.nth(1).unwrap().parse::<u64>().unwrap()\n     } else {\n         10\n     };"}, {"sha": "d07aa8850aa8306c4ca22d200db5d3a385a3d7e2", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::os;\n use std::env;\n \n-fn ack(m: int, n: int) -> int {\n+fn ack(m: i64, n: i64) -> i64 {\n     if m == 0 {\n         return n + 1\n     } else {\n@@ -24,13 +23,13 @@ fn ack(m: int, n: int) -> int {\n }\n \n fn main() {\n-    let args = os::args();\n+    let mut args = env::args();\n     let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"12\".to_string())\n-    } else if args.len() <= 1u {\n+    } else if args.len() <= 1 {\n         vec!(\"\".to_string(), \"8\".to_string())\n     } else {\n-        args.into_iter().collect()\n+        args.collect()\n     };\n     let n = args[1].parse().unwrap();\n     println!(\"Ack(3,{}): {}\\n\", n, ack(3, n));"}, {"sha": "6762760ed56537aa600f8ae60194caf518acd5c1", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -84,14 +84,13 @@ fn inner(depth: i32, iterations: i32) -> String {\n }\n \n fn main() {\n-    let args = std::os::args();\n-    let args = args;\n+    let mut args = std::env::args();\n     let n = if std::env::var_os(\"RUST_BENCH\").is_some() {\n         17\n-    } else if args.len() <= 1u {\n+    } else if args.len() <= 1 {\n         8\n     } else {\n-        args[1].parse().unwrap()\n+        args.nth(1).unwrap().parse().unwrap()\n     };\n     let min_depth = 4;\n     let max_depth = if min_depth + 2 > n {min_depth + 2} else {n};"}, {"sha": "31c786c16446d1c77b159864e17f5167d0b8b804", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -230,10 +230,10 @@ fn main() {\n     let nn = if std::env::var_os(\"RUST_BENCH\").is_some() {\n         200000\n     } else {\n-        std::os::args()\n-                       .get(1)\n+        std::env::args()\n+                       .nth(1)\n                        .and_then(|arg| arg.parse().ok())\n-                       .unwrap_or(600u)\n+                       .unwrap_or(600us)\n     };\n \n     print_complements();"}, {"sha": "2c220ab95dd76cd768292ef7b53aa5b831d677f2", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -180,8 +180,8 @@ fn fannkuch(n: i32) -> (i32, i32) {\n }\n \n fn main() {\n-    let n = std::os::args()\n-        .get(1)\n+    let n = std::env::args()\n+        .nth(1)\n         .and_then(|arg| arg.parse().ok())\n         .unwrap_or(2i32);\n "}, {"sha": "277c3ee73dff1aa8693eb4154292a13d85c8822a", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -41,11 +41,11 @@\n use std::cmp::min;\n use std::old_io::{stdout, IoResult};\n use std::iter::repeat;\n-use std::os;\n+use std::env;\n use std::slice::bytes::copy_memory;\n \n-const LINE_LEN: uint = 60;\n-const LOOKUP_SIZE: uint = 4 * 1024;\n+const LINE_LEN: usize = 60;\n+const LOOKUP_SIZE: usize = 4 * 1024;\n const LOOKUP_SCALE: f32 = (LOOKUP_SIZE - 1) as f32;\n \n // Random number generator constants\n@@ -119,7 +119,7 @@ impl<'a, W: Writer> RepeatFasta<'a, W> {\n         RepeatFasta { alu: alu, out: w }\n     }\n \n-    fn make(&mut self, n: uint) -> IoResult<()> {\n+    fn make(&mut self, n: usize) -> IoResult<()> {\n         let alu_len = self.alu.len();\n         let mut buf = repeat(0u8).take(alu_len + LINE_LEN).collect::<Vec<_>>();\n         let alu: &[u8] = self.alu.as_bytes();\n@@ -188,30 +188,29 @@ impl<'a, W: Writer> RandomFasta<'a, W> {\n         0\n     }\n \n-    fn make(&mut self, n: uint) -> IoResult<()> {\n+    fn make(&mut self, n: usize) -> IoResult<()> {\n         let lines = n / LINE_LEN;\n         let chars_left = n % LINE_LEN;\n         let mut buf = [0;LINE_LEN + 1];\n \n         for _ in 0..lines {\n-            for i in 0u..LINE_LEN {\n+            for i in 0..LINE_LEN {\n                 buf[i] = self.nextc();\n             }\n             buf[LINE_LEN] = '\\n' as u8;\n             try!(self.out.write(&buf));\n         }\n-        for i in 0u..chars_left {\n+        for i in 0..chars_left {\n             buf[i] = self.nextc();\n         }\n         self.out.write(&buf[..chars_left])\n     }\n }\n \n fn main() {\n-    let args = os::args();\n-    let args = args;\n+    let mut args = env::args();\n     let n = if args.len() > 1 {\n-        args[1].parse::<uint>().unwrap()\n+        args.nth(1).unwrap().parse::<usize>().unwrap()\n     } else {\n         5\n     };"}, {"sha": "fd559608011afdcbb851eb7643b30e74386abf86", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -42,10 +42,9 @@ use std::cmp::min;\n use std::old_io::{BufferedWriter, File};\n use std::old_io;\n use std::num::Float;\n-use std::os;\n use std::env;\n \n-const LINE_LENGTH: uint = 60;\n+const LINE_LENGTH: usize = 60;\n const IM: u32 = 139968;\n \n struct MyRandom {\n@@ -86,7 +85,7 @@ impl<'a> Iterator for AAGen<'a> {\n }\n \n fn make_fasta<W: Writer, I: Iterator<Item=u8>>(\n-    wr: &mut W, header: &str, mut it: I, mut n: uint)\n+    wr: &mut W, header: &str, mut it: I, mut n: usize)\n     -> std::old_io::IoResult<()>\n {\n     try!(wr.write(header.as_bytes()));\n@@ -104,14 +103,13 @@ fn make_fasta<W: Writer, I: Iterator<Item=u8>>(\n }\n \n fn run<W: Writer>(writer: &mut W) -> std::old_io::IoResult<()> {\n-    let args = os::args();\n-    let args = args;\n+    let mut args = env::args();\n     let n = if env::var_os(\"RUST_BENCH\").is_some() {\n         25000000\n-    } else if args.len() <= 1u {\n+    } else if args.len() <= 1 {\n         1000\n     } else {\n-        args[1].parse().unwrap()\n+        args.nth(1).unwrap().parse().unwrap()\n     };\n \n     let rng = &mut MyRandom::new();"}, {"sha": "6f9c775609af5ee6a3fd03d484140fb9753420fc", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::os;\n use std::env;\n \n-fn fib(n: int) -> int {\n+fn fib(n: i64) -> i64 {\n     if n < 2 {\n         return 1;\n     } else {\n@@ -20,13 +19,13 @@ fn fib(n: int) -> int {\n }\n \n fn main() {\n-    let args = os::args();\n+    let args = env::args();\n     let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"40\".to_string())\n-    } else if args.len() <= 1u {\n+    } else if args.len() <= 1 {\n         vec!(\"\".to_string(), \"30\".to_string())\n     } else {\n-        args.into_iter().collect()\n+        args.collect()\n     };\n     let n = args[1].parse().unwrap();\n     println!(\"{}\\n\", fib(n));"}, {"sha": "c0951ccda6ca9736b34ceab312bb33530761e9bb", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -43,7 +43,7 @@\n // ignore-pretty very bad with line comments\n \n use std::old_io;\n-use std::os;\n+use std::env;\n use std::simd::f64x2;\n use std::sync::Arc;\n use std::thread::Thread;\n@@ -197,13 +197,13 @@ fn write_line(init_i: f64, vec_init_r: &[f64], res: &mut Vec<u8>) {\n }\n \n fn main() {\n-    let args = os::args();\n+    let mut args = env::args();\n     let res = if args.len() < 2 {\n         println!(\"Test mode: do not dump the image because it's not utf8, \\\n                   which interferes with the test runner.\");\n         mandelbrot(1000, old_io::util::NullWriter)\n     } else {\n-        mandelbrot(args[1].parse().unwrap(), old_io::stdout())\n+        mandelbrot(args.nth(1).unwrap().parse().unwrap(), old_io::stdout())\n     };\n     res.unwrap();\n }"}, {"sha": "534dfe9548c2f73a5275abc4205b6028c5623c6f", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -173,7 +173,7 @@ fn main() {\n     let n = if std::env::var_os(\"RUST_BENCH\").is_some() {\n         5000000\n     } else {\n-        std::os::args().get(1)\n+        std::env::args().nth(1)\n             .and_then(|arg| arg.parse().ok())\n             .unwrap_or(1000)\n     };"}, {"sha": "45163510a9400b92c3f6830337aa86dd2ab61bdc", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -21,14 +21,13 @@\n extern crate getopts;\n \n use std::sync::mpsc::{channel, Sender};\n-use std::os;\n use std::env;\n use std::result::Result::{Ok, Err};\n use std::thread::Thread;\n use std::time::Duration;\n \n-fn fib(n: int) -> int {\n-    fn pfib(tx: &Sender<int>, n: int) {\n+fn fib(n: isize) -> isize {\n+    fn pfib(tx: &Sender<isize>, n: isize) {\n         if n == 0 {\n             tx.send(0).unwrap();\n         } else if n <= 2 {\n@@ -66,7 +65,7 @@ fn parse_opts(argv: Vec<String> ) -> Config {\n     }\n }\n \n-fn stress_task(id: int) {\n+fn stress_task(id: isize) {\n     let mut i = 0;\n     loop {\n         let n = 15;\n@@ -89,26 +88,26 @@ fn stress(num_tasks: int) {\n }\n \n fn main() {\n-    let args = os::args();\n+    let args = env::args();\n     let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"20\".to_string())\n-    } else if args.len() <= 1u {\n+    } else if args.len() <= 1 {\n         vec!(\"\".to_string(), \"8\".to_string())\n     } else {\n-        args.into_iter().map(|x| x.to_string()).collect()\n+        args.map(|x| x.to_string()).collect()\n     };\n \n     let opts = parse_opts(args.clone());\n \n     if opts.stress {\n         stress(2);\n     } else {\n-        let max = args[1].parse::<int>().unwrap();\n+        let max = args[1].parse::<isize>().unwrap();\n \n         let num_trials = 10;\n \n         for n in 1..max + 1 {\n-            for _ in 0u..num_trials {\n+            for _ in 0..num_trials {\n                 let mut fibn = None;\n                 let dur = Duration::span(|| fibn = Some(fib(n)));\n                 let fibn = fibn.unwrap();"}, {"sha": "f7572b2045301deeb8d51d972075fd0306301228", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -53,13 +53,13 @@ use std::raw::Repr;\n use std::simd::f64x2;\n \n fn main() {\n-    let args = os::args();\n+    let mut args = env::args();\n     let answer = spectralnorm(if env::var_os(\"RUST_BENCH\").is_some() {\n         5500\n     } else if args.len() < 2 {\n         2000\n     } else {\n-        args[1].parse().unwrap()\n+        args.nth(1).unwrap().parse().unwrap()\n     });\n     println!(\"{:.9}\", answer);\n }"}, {"sha": "f68fb814b2113c44b068dcb3ddfe4428265abf1f", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -64,13 +64,13 @@ fn roundtrip(id: i32, tx: Sender<i32>, rx: Receiver<i32>) {\n }\n \n fn main() {\n-    let args = std::os::args();\n+    let mut args = std::env::args();\n     let token = if std::env::var_os(\"RUST_BENCH\").is_some() {\n         2000000\n     } else {\n-        args.get(1).and_then(|arg| arg.parse().ok()).unwrap_or(1000)\n+        args.nth(1).and_then(|arg| arg.parse().ok()).unwrap_or(1000)\n     };\n-    let n_tasks = args.get(2)\n+    let n_tasks = args.next()\n                       .and_then(|arg| arg.parse().ok())\n                       .unwrap_or(503);\n "}, {"sha": "a54a869412e35483529c1cd943cf6c423e7e298f", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -11,41 +11,40 @@\n // Microbenchmark for the smallintmap library\n \n use std::collections::VecMap;\n-use std::os;\n use std::env;\n use std::time::Duration;\n \n-fn append_sequential(min: uint, max: uint, map: &mut VecMap<uint>) {\n+fn append_sequential(min: usize, max: usize, map: &mut VecMap<usize>) {\n     for i in min..max {\n-        map.insert(i, i + 22u);\n+        map.insert(i, i + 22);\n     }\n }\n \n-fn check_sequential(min: uint, max: uint, map: &VecMap<uint>) {\n+fn check_sequential(min: usize, max: usize, map: &VecMap<usize>) {\n     for i in min..max {\n-        assert_eq!(map[i], i + 22u);\n+        assert_eq!(map[i], i + 22);\n     }\n }\n \n fn main() {\n-    let args = os::args();\n+    let args = env::args();\n     let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"100000\".to_string(), \"100\".to_string())\n-    } else if args.len() <= 1u {\n+    } else if args.len() <= 1 {\n         vec!(\"\".to_string(), \"10000\".to_string(), \"50\".to_string())\n     } else {\n-        args.into_iter().collect()\n+        args.collect()\n     };\n-    let max = args[1].parse::<uint>().unwrap();\n-    let rep = args[2].parse::<uint>().unwrap();\n+    let max = args[1].parse::<usize>().unwrap();\n+    let rep = args[2].parse::<usize>().unwrap();\n \n     let mut checkf = Duration::seconds(0);\n     let mut appendf = Duration::seconds(0);\n \n-    for _ in 0u..rep {\n+    for _ in 0..rep {\n         let mut map = VecMap::new();\n-        let d1 = Duration::span(|| append_sequential(0u, max, &mut map));\n-        let d2 = Duration::span(|| check_sequential(0u, max, &map));\n+        let d1 = Duration::span(|| append_sequential(0, max, &mut map));\n+        let d2 = Duration::span(|| check_sequential(0, max, &map));\n \n         checkf = checkf + d2;\n         appendf = appendf + d1;"}, {"sha": "ada8efcbf38e15a90090f64bc35e33b5932fac99", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -18,7 +18,7 @@ use std::old_io::stdio::StdReader;\n use std::old_io;\n use std::iter::repeat;\n use std::num::Int;\n-use std::os;\n+use std::env;\n \n // Computes a single solution to a given 9x9 sudoku\n //\n@@ -269,8 +269,8 @@ fn check_DEFAULT_SUDOKU_solution() {\n }\n \n fn main() {\n-    let args        = os::args();\n-    let use_default = args.len() == 1u;\n+    let args        = env::args();\n+    let use_default = args.len() == 1;\n     let mut sudoku = if use_default {\n         Sudoku::from_vec(&DEFAULT_SUDOKU)\n     } else {"}, {"sha": "a9848137e755a398794b595b6364ee34636bb178", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -18,7 +18,6 @@\n // ignore-pretty very bad with line comments\n \n use std::sync::mpsc::{channel, Sender};\n-use std::os;\n use std::env;\n use std::thread::Thread;\n \n@@ -39,13 +38,13 @@ fn child_generation(gens_left: uint, tx: Sender<()>) {\n }\n \n fn main() {\n-    let args = os::args();\n+    let args = env::args();\n     let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"100000\".to_string())\n     } else if args.len() <= 1 {\n         vec!(\"\".to_string(), \"100\".to_string())\n     } else {\n-        args.clone().into_iter().collect()\n+        args.collect()\n     };\n \n     let (tx, rx) = channel();"}, {"sha": "ba5e25634e8cded324ee9225cdb8fbd6fa8970c7", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::os;\n use std::env;\n use std::thread::Thread;\n \n-fn f(n: uint) {\n+fn f(n: usize) {\n     let mut i = 0u;\n     while i < n {\n         let _ = Thread::scoped(move|| g()).join();\n@@ -23,15 +22,15 @@ fn f(n: uint) {\n fn g() { }\n \n fn main() {\n-    let args = os::args();\n+    let args = env::args();\n     let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"400\".to_string())\n-    } else if args.len() <= 1u {\n+    } else if args.len() <= 1 {\n         vec!(\"\".to_string(), \"10\".to_string())\n     } else {\n-        args.into_iter().collect()\n+        args.collect()\n     };\n     let n = args[1].parse().unwrap();\n-    let mut i = 0u;\n+    let mut i = 0;\n     while i < n { Thread::spawn(move|| f(n) ); i += 1u; }\n }"}, {"sha": "be619e3a82cc6d3a4e50058e9b7f1d926e7433e9", "filename": "src/test/run-fail/tls-exit-status.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-fail%2Ftls-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-fail%2Ftls-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftls-exit-status.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -11,9 +11,9 @@\n // error-pattern:nonzero\n // exec-env:RUST_NEWRT=1\n \n-use std::os;\n+use std::env;\n \n fn main() {\n-    os::args();\n+    env::args();\n     panic!(\"please have a nonzero exit status\");\n }"}, {"sha": "89352a16d8ba2fe3792b017c9f66bebae9cd9020", "filename": "src/test/run-make/cannot-read-embedded-idents/create_and_compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcannot-read-embedded-idents%2Fcreate_and_compile.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::os;\n+use std::env;\n use std::old_io::{File, Command};\n \n // creates broken.rs, which has the Ident \\x00name_0,ctxt_0\\x00\n // embedded within it, and then attempts to compile broken.rs with the\n // provided `rustc`\n \n fn main() {\n-    let args = os::args();\n+    let args: Vec<String> = env::args().collect();\n     let rustc = &args[1];\n     let tmpdir = Path::new(&args[2]);\n "}, {"sha": "c96210896fd652c94296e47b38ff632c5db31271", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -22,7 +22,7 @@ fn main() {\n     fn main() {}\n     \"#;\n \n-    let args = std::os::args();\n+    let args: Vec<String> = std::env::args().collect();\n \n     if args.len() < 4 {\n         panic!(\"expected rustc path\");"}, {"sha": "759a1d4aff958fa110b46d34bcaf32d6a8cc76fc", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::{char, os};\n+use std::{char, env};\n use std::old_io::{File, Command};\n use std::rand::{thread_rng, Rng};\n \n@@ -33,7 +33,7 @@ fn random_char() -> char {\n }\n \n fn main() {\n-    let args = os::args();\n+    let args: Vec<String> = env::args().collect();\n     let rustc = &args[1];\n     let tmpdir = Path::new(&args[2]);\n "}, {"sha": "5dee9104b0f6989f5fb5f3954330bc0501baa10c", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -11,7 +11,7 @@\n use std::old_io::{File, Command};\n use std::iter::repeat;\n use std::rand::{thread_rng, Rng};\n-use std::{char, os};\n+use std::{char, env};\n \n // creates a file with `fn main() { <random ident> }` and checks the\n // compiler emits a span of the appropriate length (for the\n@@ -33,7 +33,7 @@ fn random_char() -> char {\n }\n \n fn main() {\n-    let args = os::args();\n+    let args: Vec<String> = env::args().collect();\n     let rustc = &args[1];\n     let tmpdir = Path::new(&args[2]);\n     let main_file = tmpdir.join(\"span_main.rs\");"}, {"sha": "6f76322cb778d57a0401c4a333619c5dace9418f", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -14,7 +14,6 @@\n #![feature(unboxed_closures)]\n #![feature(unsafe_destructor)]\n \n-use std::os;\n use std::env;\n use std::old_io::process::Command;\n use std::str;\n@@ -86,8 +85,7 @@ fn runtest(me: &str) {\n }\n \n fn main() {\n-    let args = os::args();\n-    let args = args;\n+    let args: Vec<String> = env::args().collect();\n     if args.len() >= 2 && args[1] == \"fail\" {\n         foo();\n     } else if args.len() >= 2 && args[1] == \"double-fail\" {"}, {"sha": "59f63a79c3ddf93ffb088eb06443566ba6f69aff", "filename": "src/test/run-pass/cleanup-shortcircuit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-shortcircuit.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -20,11 +20,10 @@\n \n // Test that cleanups for the RHS of shortcircuiting operators work.\n \n-use std::os;\n+use std::env;\n \n pub fn main() {\n-    let args = os::args();\n-    let args = args;\n+    let args: Vec<String> = env::args().collect();\n \n     // Here, the rvalue `\"signal\".to_string()` requires cleanup. Older versions\n     // of the code had a problem that the cleanup scope for this"}, {"sha": "29e4801d0a9aac66aed21b86449825d18234fd72", "filename": "src/test/run-pass/issue-10626.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-10626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10626.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -12,12 +12,11 @@\n // Make sure that if a process doesn't have its stdio/stderr descriptors set up\n // that we don't die in a large ball of fire\n \n-use std::os;\n+use std::env;\n use std::old_io::process;\n \n pub fn main () {\n-    let args = os::args();\n-    let args = args;\n+    let args: Vec<String> = env::args().collect();\n     if args.len() > 1 && args[1] == \"child\" {\n         for _ in 0..1000 {\n             println!(\"hello?\");"}, {"sha": "4a7d6be55a1625fa4730c38d3d43a8feaaf8e83b", "filename": "src/test/run-pass/issue-13304.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13304.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -10,13 +10,12 @@\n \n // ignore-fast\n \n-use std::os;\n+use std::env;\n use std::old_io;\n use std::str;\n \n fn main() {\n-    let args = os::args();\n-    let args = args;\n+    let args: Vec<String> = env::args().collect();\n     if args.len() > 1 && args[1] == \"child\" {\n         child();\n     } else {\n@@ -25,8 +24,7 @@ fn main() {\n }\n \n fn parent() {\n-    let args = os::args();\n-    let args = args;\n+    let args: Vec<String> = env::args().collect();\n     let mut p = old_io::process::Command::new(&args[0])\n                                      .arg(\"child\").spawn().unwrap();\n     p.stdin.as_mut().unwrap().write_str(\"test1\\ntest2\\ntest3\").unwrap();"}, {"sha": "723db9485ca6ee110b2ced81aad5f69b60f193ae", "filename": "src/test/run-pass/issue-14456.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-14456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14456.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -12,10 +12,10 @@\n use std::old_io::process;\n use std::old_io::Command;\n use std::old_io;\n-use std::os;\n+use std::env;\n \n fn main() {\n-    let args = os::args();\n+    let args: Vec<String> = env::args().collect();\n     if args.len() > 1 && args[1] == \"child\" {\n         return child()\n     }\n@@ -32,7 +32,7 @@ fn child() {\n }\n \n fn test() {\n-    let args = os::args();\n+    let args: Vec<String> = env::args().collect();\n     let mut p = Command::new(&args[0]).arg(\"child\")\n                                      .stdin(process::Ignored)\n                                      .stdout(process::Ignored)"}, {"sha": "ed0e3bddbe515b8d3a5b6abce07d2528ea72ac61", "filename": "src/test/run-pass/issue-14940.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14940.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::os;\n+use std::env;\n use std::old_io::{stdio, Command};\n \n fn main() {\n-    let args = os::args();\n+    let mut args = env::args();\n     if args.len() > 1 {\n         let mut out = stdio::stdout();\n         out.write(&['a' as u8; 128 * 1024]).unwrap();\n     } else {\n-        let out = Command::new(&args[0]).arg(\"child\").output();\n+        let out = Command::new(&args.next().unwrap()).arg(\"child\").output();\n         let out = out.unwrap();\n         assert!(out.status.success());\n     }"}, {"sha": "aa176d5b0f04197fa482b9a929f3df414a539fc4", "filename": "src/test/run-pass/issue-15149.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15149.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -11,29 +11,29 @@\n // except according to those terms.\n \n use std::slice::SliceExt;\n-use std::old_io::{Command, fs, USER_RWX};\n-use std::os;\n+use std::old_io::{fs, USER_RWX};\n+use std::process;\n use std::env;\n use std::old_path::BytesContainer;\n use std::rand::random;\n \n fn main() {\n     // If we're the child, make sure we were invoked correctly\n-    let args = os::args();\n+    let args: Vec<String> = env::args().collect();\n     if args.len() > 1 && args[1] == \"child\" {\n         // FIXME: This should check the whole `args[0]` instead of just\n         // checking that it ends_with the executable name. This\n         // is needed because of Windows, which has a different behavior.\n         // See #15149 for more info.\n-        return assert!(args[0].ends_with(&format!(\"mytest{}\", os::consts::EXE_SUFFIX)[]));\n+        return assert!(args[0].ends_with(&format!(\"mytest{}\", env::consts::EXE_SUFFIX)[]));\n     }\n \n     test();\n }\n \n fn test() {\n     // If we're the parent, copy our own binary to a new directory.\n-    let my_path = os::self_exe_name().unwrap();\n+    let my_path = env::current_exe().unwrap();\n     let my_dir  = my_path.dir_path();\n \n     let random_u32: u32 = random();\n@@ -42,22 +42,24 @@ fn test() {\n     fs::mkdir(&child_dir, USER_RWX).unwrap();\n \n     let child_path = child_dir.join(format!(\"mytest{}\",\n-                                            os::consts::EXE_SUFFIX));\n+                                            env::consts::EXE_SUFFIX));\n     fs::copy(&my_path, &child_path).unwrap();\n \n     // Append the new directory to our own PATH.\n-    let mut path = os::split_paths(env::var(\"PATH\").ok().unwrap_or(String::new()));\n-    path.push(child_dir.clone());\n-    let path = os::join_paths(&path).unwrap();\n+    let path = {\n+        let mut paths: Vec<_> = env::split_paths(&env::var_os(\"PATH\").unwrap()).collect();\n+        paths.push(child_dir.clone());\n+        env::join_paths(paths.iter()).unwrap()\n+    };\n \n-    let child_output = Command::new(\"mytest\").env(\"PATH\", path)\n-                                             .arg(\"child\")\n-                                             .output().unwrap();\n+    let child_output = process::Command::new(\"mytest\").env(\"PATH\", &path)\n+                                                      .arg(\"child\")\n+                                                      .output().unwrap();\n \n     assert!(child_output.status.success(),\n             format!(\"child assertion failed\\n child stdout:\\n {}\\n child stderr:\\n {}\",\n-                    child_output.output.container_as_str().unwrap(),\n-                    child_output.error.container_as_str().unwrap()));\n+                    child_output.stdout.container_as_str().unwrap(),\n+                    child_output.stderr.container_as_str().unwrap()));\n \n     fs::rmdir_recursive(&child_dir).unwrap();\n "}, {"sha": "3bab78ab0df9f0ca3959ff1ea010a0f9a5ff0b0b", "filename": "src/test/run-pass/issue-16272.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-16272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-16272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16272.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n use std::old_io::{process, Command};\n-use std::os;\n+use std::env;\n \n fn main() {\n-    let len = os::args().len();\n+    let len = env::args().len();\n \n     if len == 1 {\n         test();\n@@ -22,7 +22,7 @@ fn main() {\n }\n \n fn test() {\n-    let status = Command::new(os::self_exe_name().unwrap())\n+    let status = Command::new(env::current_exe().unwrap())\n                          .arg(\"foo\").arg(\"\")\n                          .stdout(process::InheritFd(1))\n                          .stderr(process::InheritFd(2))"}, {"sha": "4d20e6360ad4fdda2654b0047b475e37b2fcdaac", "filename": "src/test/run-pass/issue-20091.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-20091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-20091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20091.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -11,11 +11,11 @@\n // ignore-windows currently windows requires UTF-8 for spawning processes\n \n use std::old_io::Command;\n-use std::os;\n+use std::env;\n \n fn main() {\n-    if os::args().len() == 1 {\n-        assert!(Command::new(os::self_exe_name().unwrap()).arg(b\"\\xff\")\n+    if env::args().len() == 1 {\n+        assert!(Command::new(env::current_exe().unwrap()).arg(b\"\\xff\")\n                         .status().unwrap().success())\n     }\n }"}, {"sha": "1f090d8b622e05686fe7589b6db102ada1fa3de7", "filename": "src/test/run-pass/issue-4541.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4541.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n fn parse_args() -> String {\n-    let args = ::std::os::args();\n-    let args = args;\n+    let args: Vec<_> = ::std::env::args().collect();\n     let mut n = 0;\n \n     while n < args.len() {"}, {"sha": "521e1b40f992e5d1b305172840ee6aaa9257bad0", "filename": "src/test/run-pass/issue-4542.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-4542.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fissue-4542.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4542.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::os;\n+use std::env;\n \n pub fn main() {\n-    for arg in &os::args() {\n-        match (*arg).clone() {\n+    for arg in env::args() {\n+        match arg.clone() {\n             _s => { }\n         }\n     }"}, {"sha": "b90d881569917c054304355ea4cf2c3365ec0c34", "filename": "src/test/run-pass/logging-separate-lines.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -16,12 +16,11 @@\n extern crate log;\n \n use std::old_io::Command;\n-use std::os;\n+use std::env;\n use std::str;\n \n fn main() {\n-    let args = os::args();\n-    let args = args;\n+    let args: Vec<String> = env::args().collect();\n     if args.len() > 1 && args[1] == \"child\" {\n         debug!(\"foo\");\n         debug!(\"bar\");"}, {"sha": "f574259c375fc86886bda5882c28f1987479e760", "filename": "src/test/run-pass/out-of-stack-new-thread-no-split.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-new-thread-no-split.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -16,7 +16,7 @@\n #![feature(asm)]\n \n use std::old_io::process::Command;\n-use std::os;\n+use std::env;\n use std::thread::Thread;\n \n // lifted from the test module\n@@ -34,8 +34,7 @@ fn recurse() {\n }\n \n fn main() {\n-    let args = os::args();\n-    let args = args;\n+    let args: Vec<String> = env::args().collect();\n     if args.len() > 1 && args[1] == \"recurse\" {\n         let _t = Thread::scoped(recurse);\n     } else {"}, {"sha": "948c4d064d723ef7f9302e763324853c13a14b39", "filename": "src/test/run-pass/out-of-stack-no-split.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fout-of-stack-no-split.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fout-of-stack-no-split.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack-no-split.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -17,7 +17,7 @@\n #![feature(asm)]\n \n use std::old_io::process::Command;\n-use std::os;\n+use std::env;\n \n // lifted from the test module\n // Inlining to avoid llvm turning the recursive functions into tail calls,\n@@ -34,7 +34,7 @@ fn recurse() {\n }\n \n fn main() {\n-    let args = os::args();\n+    let args: Vec<String> = env::args().collect();\n     if args.len() > 1 && args[1] == \"recurse\" {\n         recurse();\n     } else {"}, {"sha": "cc5eb69bb87e39ced535bccb2618f5bf29af23da", "filename": "src/test/run-pass/out-of-stack.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -13,7 +13,7 @@\n #![feature(asm)]\n \n use std::old_io::process::Command;\n-use std::os;\n+use std::env;\n \n // lifted from the test module\n // Inlining to avoid llvm turning the recursive functions into tail calls,\n@@ -34,8 +34,7 @@ fn loud_recurse() {\n }\n \n fn main() {\n-    let args = os::args();\n-    let args = args;\n+    let args: Vec<String> = env::args().collect();\n     if args.len() > 1 && args[1] == \"silent\" {\n         silent_recurse();\n     } else if args.len() > 1 && args[1] == \"loud\" {"}, {"sha": "017784990f4178ece9fcc4dff70c6cbca120b35e", "filename": "src/test/run-pass/process-spawn-with-unicode-params.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-spawn-with-unicode-params.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -20,12 +20,13 @@ use std::old_io;\n use std::old_io::fs;\n use std::old_io::Command;\n use std::os;\n+use std::env;\n use std::old_path::Path;\n \n fn main() {\n-    let my_args = os::args();\n+    let my_args = env::args().collect::<Vec<_>>();\n     let my_cwd  = os::getcwd().unwrap();\n-    let my_env  = os::env();\n+    let my_env  = env::vars().collect::<Vec<_>>();\n     let my_path = Path::new(os::self_exe_name().unwrap());\n     let my_dir  = my_path.dir_path();\n     let my_ext  = my_path.extension_str().unwrap_or(\"\");"}, {"sha": "492736c2252a0148612a2e948a6ebb6ceb169bb2", "filename": "src/test/run-pass/segfault-no-out-of-stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n use std::old_io::process::Command;\n-use std::os;\n+use std::env;\n \n fn main() {\n-    let args = os::args();\n+    let args: Vec<String> = env::args().collect();\n     if args.len() > 1 && args[1] == \"segfault\" {\n         unsafe { *(0 as *mut int) = 1 }; // trigger a segfault\n     } else {"}, {"sha": "776d897938dd3c5ae556c8043430aae50cd0b90c", "filename": "src/test/run-pass/signal-exit-status.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -10,12 +10,11 @@\n \n // ignore-windows\n \n-use std::os;\n+use std::env;\n use std::old_io::process::{Command, ExitSignal, ExitStatus};\n \n pub fn main() {\n-    let args = os::args();\n-    let args = args;\n+    let args: Vec<String> = env::args().collect();\n     if args.len() >= 2 && args[1] == \"signal\" {\n         // Raise a segfault.\n         unsafe { *(0 as *mut int) = 0; }"}, {"sha": "d1428c6be19ef880f06645c74a59908b90dd7b04", "filename": "src/test/run-pass/sigpipe-should-be-ignored.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2833976cccf6ce8e9740ac5f055435ba17a28b9e/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsigpipe-should-be-ignored.rs?ref=2833976cccf6ce8e9740ac5f055435ba17a28b9e", "patch": "@@ -12,6 +12,7 @@\n // doesn't die in a ball of fire, but rather it's gracefully handled.\n \n use std::os;\n+use std::env;\n use std::old_io::PipeStream;\n use std::old_io::Command;\n \n@@ -25,8 +26,7 @@ fn test() {\n }\n \n fn main() {\n-    let args = os::args();\n-    let args = args;\n+    let args: Vec<String> = env::args().collect();\n     if args.len() > 1 && args[1] == \"test\" {\n         return test();\n     }"}]}