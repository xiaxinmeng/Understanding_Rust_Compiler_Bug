{"sha": "ed4186446492e141a4dc37829dc9599133d00dd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNDE4NjQ0NjQ5MmUxNDFhNGRjMzc4MjlkYzk1OTkxMzNkMDBkZDA=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-05-09T20:27:24Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-05-12T03:36:44Z"}, "message": "Warning police", "tree": {"sha": "b26e12beb4abead4e7dd3c0834c5e055a1fba478", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b26e12beb4abead4e7dd3c0834c5e055a1fba478"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed4186446492e141a4dc37829dc9599133d00dd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed4186446492e141a4dc37829dc9599133d00dd0", "html_url": "https://github.com/rust-lang/rust/commit/ed4186446492e141a4dc37829dc9599133d00dd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed4186446492e141a4dc37829dc9599133d00dd0/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2f10bdc7a2f1d1501abb04f3625356c0c251d92", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f10bdc7a2f1d1501abb04f3625356c0c251d92", "html_url": "https://github.com/rust-lang/rust/commit/f2f10bdc7a2f1d1501abb04f3625356c0c251d92"}], "stats": {"total": 187, "additions": 51, "deletions": 136}, "files": [{"sha": "7f691cc19956730f83d7759436358fdaf641ff7c", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -12,7 +12,6 @@\n \n #[allow(vecs_implicitly_copyable)];\n #[allow(non_camel_case_types)];\n-#[allow(deprecated_mode)];\n #[allow(deprecated_pattern)];\n \n extern mod std(vers = \"0.7-pre\");"}, {"sha": "b1f60ec469084d86272083e4f1010bbd7a0a8eee", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -13,7 +13,6 @@ Message passing\n */\n \n use cast::{transmute, transmute_mut};\n-use cast;\n use either::{Either, Left, Right};\n use kinds::Owned;\n use option::{Option, Some, None};\n@@ -150,7 +149,7 @@ impl<T: Owned> GenericChan<T> for Chan<T> {\n     #[inline(always)]\n     fn send(&self, x: T) {\n         unsafe {\n-            let mut self_endp = transmute_mut(&self.endp);\n+            let self_endp = transmute_mut(&self.endp);\n             let endp = replace(self_endp, None);\n             *self_endp = Some(streamp::client::data(endp.unwrap(), x))\n         }\n@@ -161,7 +160,7 @@ impl<T: Owned> GenericSmartChan<T> for Chan<T> {\n     #[inline(always)]\n     fn try_send(&self, x: T) -> bool {\n         unsafe {\n-            let mut self_endp = transmute_mut(&self.endp);\n+            let self_endp = transmute_mut(&self.endp);\n             let endp = replace(self_endp, None);\n             match streamp::client::try_data(endp.unwrap(), x) {\n                 Some(next) => {\n@@ -178,7 +177,7 @@ impl<T: Owned> GenericPort<T> for Port<T> {\n     #[inline(always)]\n     fn recv(&self) -> T {\n         unsafe {\n-            let mut self_endp = transmute_mut(&self.endp);\n+            let self_endp = transmute_mut(&self.endp);\n             let endp = replace(self_endp, None);\n             let streamp::data(x, endp) = recv(endp.unwrap());\n             *self_endp = Some(endp);\n@@ -189,7 +188,7 @@ impl<T: Owned> GenericPort<T> for Port<T> {\n     #[inline(always)]\n     fn try_recv(&self) -> Option<T> {\n         unsafe {\n-            let mut self_endp = transmute_mut(&self.endp);\n+            let self_endp = transmute_mut(&self.endp);\n             let endp = replace(self_endp, None);\n             match try_recv(endp.unwrap()) {\n                 Some(streamp::data(x, endp)) => {\n@@ -206,7 +205,7 @@ impl<T: Owned> Peekable<T> for Port<T> {\n     #[inline(always)]\n     fn peek(&self) -> bool {\n         unsafe {\n-            let mut self_endp = transmute_mut(&self.endp);\n+            let self_endp = transmute_mut(&self.endp);\n             let mut endp = replace(self_endp, None);\n             let peek = match endp {\n                 Some(ref mut endp) => peek(endp),\n@@ -220,12 +219,10 @@ impl<T: Owned> Peekable<T> for Port<T> {\n \n impl<T: Owned> Selectable for Port<T> {\n     fn header(&mut self) -> *mut PacketHeader {\n-        unsafe {\n             match self.endp {\n                 Some(ref mut endp) => endp.header(),\n                 None => fail!(~\"peeking empty stream\")\n             }\n-        }\n     }\n }\n \n@@ -259,7 +256,7 @@ pub impl<T: Owned> PortSet<T> {\n impl<T:Owned> GenericPort<T> for PortSet<T> {\n     fn try_recv(&self) -> Option<T> {\n         unsafe {\n-            let mut self_ports = transmute_mut(&self.ports);\n+            let self_ports = transmute_mut(&self.ports);\n             let mut result = None;\n             // we have to swap the ports array so we aren't borrowing\n             // aliasable mutable memory.\n@@ -351,7 +348,7 @@ pub mod oneshot {\n     pub fn init<T: Owned>() -> (client::Oneshot<T>, server::Oneshot<T>) {\n         pub use core::pipes::HasBuffer;\n \n-        let mut buffer = ~::core::pipes::Buffer {\n+        let buffer = ~::core::pipes::Buffer {\n             header: ::core::pipes::BufferHeader(),\n             data: __Buffer {\n                 Oneshot: ::core::pipes::mk_packet::<Oneshot<T>>()"}, {"sha": "d029fbc07f6fba24b7e3feee12b934b84672a2a6", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -61,7 +61,6 @@ they contained the following prologue:\n #[no_core];\n \n #[deny(non_camel_case_types)];\n-#[allow(deprecated_mutable_fields)];\n \n // Make core testable by not duplicating lang items. See #2912\n #[cfg(test)] extern mod realcore(name = \"core\", vers = \"0.7-pre\");"}, {"sha": "9b664b334ba36e7e60c3f81b43ba65b597effdc4", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -348,7 +348,7 @@ pub fn send<T,Tbuffer>(mut p: SendPacketBuffered<T,Tbuffer>,\n                        payload: T)\n                        -> bool {\n     let header = p.header();\n-    let mut p_ = p.unwrap();\n+    let p_ = p.unwrap();\n     let p = unsafe { &mut *p_ };\n     assert!(ptr::to_unsafe_ptr(&(p.header)) == header);\n     assert!(p.payload.is_none());\n@@ -405,10 +405,8 @@ a message, or `Some(T)` if a message was received.\n */\n pub fn try_recv<T:Owned,Tbuffer:Owned>(mut p: RecvPacketBuffered<T, Tbuffer>)\n                                        -> Option<T> {\n-    let mut p_ = p.unwrap();\n-    let mut p = unsafe {\n-        &mut *p_\n-    };\n+    let p_ = p.unwrap();\n+    let p = unsafe { &mut *p_ };\n \n     do (|| {\n         try_recv_(p)"}, {"sha": "30f60dce04113b1b46ab79b5d118e2968b9ddb82", "filename": "src/libcore/reflect.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibcore%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibcore%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Freflect.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -409,7 +409,6 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n                                 disr_val: int,\n                                 n_fields: uint,\n                                 name: &str) -> bool {\n-        self.inner.push_ptr(); // NOTE remove after next snapshot\n         if ! self.inner.visit_enter_enum_variant(variant, disr_val,\n                                                  n_fields, name) {\n             return false;\n@@ -433,7 +432,6 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n                                                  n_fields, name) {\n             return false;\n         }\n-        self.inner.pop_ptr(); // NOTE remove after next snapshot\n         true\n     }\n "}, {"sha": "068d6db2a43becac521120e17904c8851a05ab00", "filename": "src/libcore/rt/uv/net.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fnet.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -152,8 +152,7 @@ pub impl StreamWatcher {\n         extern fn close_cb(handle: *uvll::uv_stream_t) {\n             let mut stream_watcher: StreamWatcher = NativeHandle::from_native_handle(handle);\n             {\n-                let mut data = get_watcher_data(&mut stream_watcher);\n-                data.close_cb.swap_unwrap()();\n+                get_watcher_data(&mut stream_watcher).close_cb.swap_unwrap()();\n             }\n             drop_watcher_data(&mut stream_watcher);\n             unsafe { free_handle(handle as *c_void) }\n@@ -214,8 +213,7 @@ pub impl TcpWatcher {\n             assert!(get_watcher_data(self).connect_cb.is_none());\n             get_watcher_data(self).connect_cb = Some(cb);\n \n-            let mut connect_watcher = ConnectRequest::new();\n-            let connect_handle = connect_watcher.native_handle();\n+            let connect_handle = ConnectRequest::new().native_handle();\n             match address {\n                 Ipv4(*) => {\n                     do ip4_as_uv_ip4(address) |addr| {"}, {"sha": "62a165b6d7762937235b75438cf69a418183b5ac", "filename": "src/libcore/rt/uvio.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibcore%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibcore%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvio.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -46,8 +46,7 @@ impl Drop for UvEventLoop {\n         let self = unsafe {\n             transmute::<&UvEventLoop, &mut UvEventLoop>(self)\n         };\n-        let mut uv_loop = self.uvio.uv_loop();\n-        uv_loop.close();\n+        self.uvio.uv_loop().close();\n     }\n }\n \n@@ -189,9 +188,8 @@ impl TcpListener for UvTcpListener {\n                 let maybe_stream = if status.is_none() {\n                     let mut server_stream_watcher = server_stream_watcher;\n                     let mut loop_ = loop_from_watcher(&server_stream_watcher);\n-                    let mut client_tcp_watcher = TcpWatcher::new(&mut loop_);\n-                    let client_tcp_watcher = client_tcp_watcher.as_stream();\n-                    // XXX: Need's to be surfaced in interface\n+                    let client_tcp_watcher = TcpWatcher::new(&mut loop_).as_stream();\n+                    // XXX: Needs to be surfaced in interface\n                     server_stream_watcher.accept(client_tcp_watcher);\n                     Some(~UvStream::new(client_tcp_watcher))\n                 } else {"}, {"sha": "327b7a988aaa00c3f9c1244f13f27aa906e9ca82", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -472,7 +472,7 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n         /*##################################################################*\n          * Step 1. Get spawner's taskgroup info.\n          *##################################################################*/\n-        let mut spawner_group: @@mut TCB =\n+        let spawner_group: @@mut TCB =\n             match local_get(OldHandle(spawner), taskgroup_key!()) {\n                 None => {\n                     // Main task, doing first spawn ever. Lazily initialise"}, {"sha": "a61055340777f8154493e06a3a3cb29e2cf2c8f2", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -10,7 +10,6 @@\n \n /*! See doc.rs for a thorough explanation of the borrow checker */\n \n-use core;\n use core::prelude::*;\n \n use mc = middle::mem_categorization;\n@@ -22,6 +21,7 @@ use middle::dataflow::DataFlowOperator;\n use util::common::stmt_set;\n use util::ppaux::{note_and_explain_region, Repr};\n \n+use core;\n use core::hashmap::{HashSet, HashMap};\n use core::io;\n use core::result::{Result};"}, {"sha": "436905f9a53aab40bec011861545b7ad99667c5a", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -571,8 +571,6 @@ pub impl mem_categorization_ctxt {\n         }\n     }\n \n-    /// The `field_id` parameter is the ID of the enclosing expression or\n-    /// pattern. It is used to determine which variant of an enum is in use.\n     fn cat_field<N:ast_node>(&self,\n                              node: N,\n                              base_cmt: cmt,"}, {"sha": "515ebc0e8db1e3ae87e8fecc5edb1a7e45e4281f", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -60,7 +60,7 @@ use syntax::ast_util::{def_id_of_def, local_def};\n use syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n use syntax::ast_util::{Privacy, Public, Private};\n use syntax::ast_util::{variant_visibility_to_privacy, visibility_to_privacy};\n-use syntax::attr::{attr_metas, contains_name, attrs_contains_name};\n+use syntax::attr::{attr_metas, contains_name};\n use syntax::parse::token::ident_interner;\n use syntax::parse::token::special_idents;\n use syntax::print::pprust::path_to_str;"}, {"sha": "11a7aafe1cd41477c3172d2efda23b1e6d426f36", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -544,12 +544,12 @@ use middle::typeck::infer::cres;\n use util::common::indenter;\n use util::ppaux::note_and_explain_region;\n \n+use core;\n use core::cell::{Cell, empty_cell};\n use core::hashmap::{HashMap, HashSet};\n use core::to_bytes;\n use core::uint;\n use core::vec;\n-use core;\n use syntax::codemap::span;\n use syntax::ast;\n "}, {"sha": "98618e4928b0d1ab4be6e88bffc67876537c97d9", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -634,13 +634,6 @@ pub mod writer {\n     use core::vec;\n \n     // ebml writing\n-    #[cfg(stage0)]\n-    pub struct Encoder {\n-        writer: @io::Writer,\n-        priv mut size_positions: ~[uint],\n-    }\n-\n-    #[cfg(not(stage0))]\n     pub struct Encoder {\n         writer: @io::Writer,\n         priv size_positions: ~[uint],"}, {"sha": "4e205b50014ed4ee73bf66393a986067a394f158", "filename": "src/libstd/fileinput.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Ffileinput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Ffileinput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffileinput.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -94,8 +94,6 @@ total line count).\n     }\n */\n \n-#[allow(deprecated_mutable_fields)];\n-\n use core::io::ReaderUtil;\n \n /**\n@@ -212,8 +210,8 @@ impl FileInput {\n     pub fn next_file(&self) -> bool {\n         // No more files\n \n-        // Compiler whines about \"illegal borrow unless pure\" for\n-        // files.is_empty()\n+        // unsafe block can be removed after the next snapshot\n+        // (next one after 2013-05-03)\n         if unsafe { self.fi.files.is_empty() } {\n             self.fi.current_reader = None;\n             return false;\n@@ -337,7 +335,8 @@ impl io::Reader for FileInput {\n     fn eof(&self) -> bool {\n         // we've run out of files, and current_reader is either None or eof.\n \n-        // compiler whines about illegal borrows for files.is_empty()\n+        // unsafe block can be removed after the next snapshot\n+        // (next one after 2013-05-03)\n         (unsafe { self.fi.files.is_empty() }) &&\n             match self.fi.current_reader { None => true, Some(r) => r.eof() }\n \n@@ -380,8 +379,7 @@ Fails when attempting to read from a file that can't be opened.\n */\n #[cfg(stage0)]\n pub fn input(f: &fn(&str) -> bool) {\n-    let mut i = FileInput::from_args();\n-    i.each_line(f);\n+    FileInput::from_args().each_line(f);\n }\n /**\n Iterate directly over the command line arguments (no arguments implies\n@@ -404,8 +402,7 @@ Fails when attempting to read from a file that can't be opened.\n */\n #[cfg(stage0)]\n pub fn input_state(f: &fn(&str, FileInputState) -> bool) {\n-    let mut i = FileInput::from_args();\n-    i.each_line_state(f);\n+    FileInput::from_args().each_line_state(f);\n }\n /**\n Iterate directly over the command line arguments (no arguments\n@@ -427,8 +424,7 @@ Fails when attempting to read from a file that can't be opened.\n */\n #[cfg(stage0)]\n pub fn input_vec(files: ~[Option<Path>], f: &fn(&str) -> bool) {\n-    let mut i = FileInput::from_vec(files);\n-    i.each_line(f);\n+    FileInput::from_vec(files).each_line(f);\n }\n /**\n Iterate over a vector of files (an empty vector implies just `stdin`).\n@@ -450,8 +446,7 @@ Fails when attempting to read from a file that can't be opened.\n #[cfg(stage0)]\n pub fn input_vec_state(files: ~[Option<Path>],\n                        f: &fn(&str, FileInputState) -> bool) {\n-    let mut i = FileInput::from_vec(files);\n-    i.each_line_state(f);\n+    FileInput::from_vec(files).each_line_state(f);\n }\n /**\n Iterate over a vector of files (an empty vector implies just `stdin`)"}, {"sha": "9906be13cb9e5686feda438110ddbb48b324d5c1", "filename": "src/libstd/future.rs", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -29,17 +29,12 @@ use core::task;\n use core::util::replace;\n \n #[doc = \"The future type\"]\n-#[cfg(stage0)]\n-pub struct Future<A> {\n-    priv mut state: FutureState<A>,\n-}\n-\n-#[doc = \"The future type\"]\n-#[cfg(not(stage0))]\n pub struct Future<A> {\n     priv state: FutureState<A>,\n }\n \n+// n.b. It should be possible to get rid of this.\n+// Add a test, though -- tjc\n // FIXME(#2829) -- futures should not be copyable, because they close\n // over ~fn's that have pipes and so forth within!\n #[unsafe_destructor]\n@@ -62,37 +57,6 @@ pub impl<A:Copy> Future<A> {\n }\n \n pub impl<A> Future<A> {\n-    #[cfg(stage0)]\n-    fn get_ref<'a>(&'a self) -> &'a A {\n-        /*!\n-        * Executes the future's closure and then returns a borrowed\n-        * pointer to the result.  The borrowed pointer lasts as long as\n-        * the future.\n-        */\n-        unsafe {\n-            {\n-                match self.state {\n-                    Forced(ref mut v) => { return cast::transmute(v); }\n-                    Evaluating => fail!(~\"Recursive forcing of future!\"),\n-                    Pending(_) => {}\n-                }\n-            }\n-            {\n-                let state = replace(&mut self.state, Evaluating);\n-                match state {\n-                    Forced(_) | Evaluating => fail!(~\"Logic error.\"),\n-                    Pending(f) => {\n-                        self.state = Forced(f());\n-                        cast::transmute(self.get_ref())\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n-    #[cfg(stage3)]\n     fn get_ref<'a>(&'a mut self) -> &'a A {\n         /*!\n         * Executes the future's closure and then returns a borrowed"}, {"sha": "2acbcf5c7ec087538fc4b6fcda1d8605d80c3eab", "filename": "src/libstd/json.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -220,13 +220,6 @@ impl serialize::Encoder for Encoder {\n     }\n }\n \n-#[cfg(stage0)]\n-pub struct PrettyEncoder {\n-    priv wr: @io::Writer,\n-    priv mut indent: uint,\n-}\n-\n-#[cfg(not(stage0))]\n pub struct PrettyEncoder {\n     priv wr: @io::Writer,\n     priv indent: uint,\n@@ -845,12 +838,6 @@ pub fn from_str(s: &str) -> Result<Json, Error> {\n     }\n }\n \n-#[cfg(stage0)]\n-pub struct Decoder {\n-    priv mut stack: ~[Json],\n-}\n-\n-#[cfg(not(stage0))]\n pub struct Decoder {\n     priv stack: ~[Json],\n }"}, {"sha": "20e1a272910cc7b757a917c27a1259821ead8933", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -972,19 +972,17 @@ impl io::Reader for TcpSocketBuf {\n /// Implementation of `io::Reader` trait for a buffered `net::tcp::TcpSocket`\n impl io::Writer for TcpSocketBuf {\n     pub fn write(&self, data: &[u8]) {\n-        unsafe {\n-            let socket_data_ptr: *TcpSocketData =\n-                &(*((*(self.data)).sock).socket_data);\n-            let w_result = write_common_impl(socket_data_ptr,\n-                                             vec::slice(data,\n-                                                        0,\n-                                                        data.len()).to_vec());\n-            if w_result.is_err() {\n-                let err_data = w_result.get_err();\n-                debug!(\n-                    \"ERROR sock_buf as io::writer.writer err: %? %?\",\n-                         err_data.err_name, err_data.err_msg);\n-            }\n+        let socket_data_ptr: *TcpSocketData =\n+            &(*((*(self.data)).sock).socket_data);\n+        let w_result = write_common_impl(socket_data_ptr,\n+                                         vec::slice(data,\n+                                                    0,\n+                                                    data.len()).to_vec());\n+        if w_result.is_err() {\n+            let err_data = w_result.get_err();\n+            debug!(\n+                \"ERROR sock_buf as io::writer.writer err: %? %?\",\n+                err_data.err_name, err_data.err_msg);\n         }\n     }\n     fn seek(&self, dist: int, seek: io::SeekStyle) {"}, {"sha": "7b39b2000798ebd9f1101e5b0e23ce7215496345", "filename": "src/libstd/num/bigint.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fbigint.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -16,8 +16,6 @@ A BigUint is represented as an array of BigDigits.\n A BigInt is a combination of BigUint and Sign.\n */\n \n-#[deny(deprecated_mutable_fields)];\n-\n use core::cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use core::num::{IntConvertible, Zero, One, ToStrRadix, FromStrRadix};\n "}, {"sha": "915aab59a718a28d801be7401aad146548cd2c49", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -28,9 +28,6 @@ not required in or otherwise suitable for the core library.\n \n #[deny(non_camel_case_types)];\n \n-// Allow mutable fields only in stage0.\n-#[warn(deprecated_mutable_fields)];\n-\n pub mod uv_ll;\n \n // General io and system-services modules"}, {"sha": "bb90b7834447c6e4cf840a2e2950863225d99ea8", "filename": "src/libstd/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -410,9 +410,10 @@ type MonitorMsg = (TestDesc, TestResult);\n fn run_tests(opts: &TestOpts,\n              tests: ~[TestDescAndFn],\n              callback: @fn(e: TestEvent)) {\n-    let mut filtered_tests = filter_tests(opts, tests);\n \n-    let filtered_descs = filtered_tests.map(|t| copy t.desc);\n+    let filtered_tests = filter_tests(opts, tests);\n+    let filtered_descs = filtered_tests.map(|t| t.desc);\n+\n     callback(TeFiltered(filtered_descs));\n \n     let (filtered_tests, filtered_benchs) ="}, {"sha": "0fe28dadbc7088bd90a6b374259fca6cd04808e6", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -27,7 +27,6 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n                    fld: @ast_fold,\n                    orig: @fn(&expr_, span, @ast_fold) -> (expr_, span))\n                 -> (expr_, span) {\n-    let mut cx = cx;\n     match *e {\n         // expr_mac should really be expr_ext or something; it's the\n         // entry-point for all syntax extensions.\n@@ -113,7 +112,6 @@ pub fn expand_mod_items(extsbox: @mut SyntaxEnv,\n                         fld: @ast_fold,\n                         orig: @fn(&ast::_mod, @ast_fold) -> ast::_mod)\n                      -> ast::_mod {\n-    let mut cx = cx;\n \n     // Fold the contents first:\n     let module_ = orig(module_, fld);"}, {"sha": "642f22e97368064d6dd0dcfb29068bd63763a2e3", "filename": "src/libsyntax/ext/pipes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -74,7 +74,7 @@ pub fn expand_proto(cx: @ext_ctxt, _sp: span, id: ast::ident,\n     let rdr = tt_rdr as @reader;\n     let rust_parser = Parser(sess, cfg, rdr.dup());\n \n-    let mut proto = rust_parser.parse_proto(cx.str_of(id));\n+    let proto = rust_parser.parse_proto(cx.str_of(id));\n \n     // check for errors\n     visit(proto, cx);"}, {"sha": "46b09aca8b2980bccfd759e1a0e08610eb3f20e1", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -247,8 +247,8 @@ pub fn parse(\n         let TokenAndSpan {tok: tok, sp: sp} = rdr.peek();\n \n         /* we append new items to this while we go */\n-        while cur_eis.len() > 0u { /* for each Earley Item */\n-            let mut ei = cur_eis.pop();\n+        while !cur_eis.is_empty() { /* for each Earley Item */\n+            let ei = cur_eis.pop();\n \n             let idx = ei.idx;\n             let len = ei.elts.len();"}, {"sha": "acfd18c74de11321f893d4a62e6b4a86352d32eb", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed4186446492e141a4dc37829dc9599133d00dd0/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=ed4186446492e141a4dc37829dc9599133d00dd0", "patch": "@@ -202,15 +202,14 @@ fn all_whitespace(s: ~str, begin: uint, end: uint) -> bool {\n \n fn trim_whitespace_prefix_and_push_line(lines: &mut ~[~str],\n                                         s: ~str, col: CharPos) {\n-    let mut s1;\n-    let len = str::len(s);\n+    let len = s.len();\n     // FIXME #3961: Doing bytewise comparison and slicing with CharPos\n     let col = col.to_uint();\n-    if all_whitespace(s, 0u, uint::min(len, col)) {\n+    let s1 = if all_whitespace(s, 0, uint::min(len, col)) {\n         if col < len {\n-            s1 = str::slice(s, col, len).to_owned();\n-        } else { s1 = ~\"\"; }\n-    } else { s1 = s; }\n+            str::slice(s, col, len).to_owned()\n+        } else {  ~\"\" }\n+    } else { s };\n     debug!(\"pushing line: %s\", s1);\n     lines.push(s1);\n }"}]}