{"sha": "6d8a1739805fa81b6baa8c86efc3e79920ecb306", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOGExNzM5ODA1ZmE4MWI2YmFhOGM4NmVmYzNlNzk5MjBlY2IzMDY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-11T05:01:49Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-03-15T01:04:20Z"}, "message": "Reword E0044 and message for `!Send` types\n\n - Reword E0044 help.\n - Change error message for types that don't implement `Send`", "tree": {"sha": "8ca52590f0d3e738cc3d8ec277ab564653618e35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ca52590f0d3e738cc3d8ec277ab564653618e35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d8a1739805fa81b6baa8c86efc3e79920ecb306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d8a1739805fa81b6baa8c86efc3e79920ecb306", "html_url": "https://github.com/rust-lang/rust/commit/6d8a1739805fa81b6baa8c86efc3e79920ecb306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d8a1739805fa81b6baa8c86efc3e79920ecb306/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "883e74645d350b6752cb94d48f46363f6f8789e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/883e74645d350b6752cb94d48f46363f6f8789e9", "html_url": "https://github.com/rust-lang/rust/commit/883e74645d350b6752cb94d48f46363f6f8789e9"}], "stats": {"total": 121, "additions": 66, "deletions": 55}, "files": [{"sha": "fd57491fcc765e61c58fefba063d2ccb57fb23cc", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -343,7 +343,10 @@ pub trait Copy : Clone {\n /// [transmute]: ../../std/mem/fn.transmute.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"sync\"]\n-#[rustc_on_unimplemented = \"`{Self}` cannot be shared between threads safely\"]\n+#[rustc_on_unimplemented(\n+    message=\"`{Self}` cannot be shared between threads safely\",\n+    label=\"`{Self}` cannot be shared between threads safely\"\n+)]\n pub unsafe auto trait Sync {\n     // Empty\n }"}, {"sha": "92c6e3ffed2dbac8f7b1a5acff1e99c66036100d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -1222,9 +1222,10 @@ pub fn check_item_type<'a,'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, it: &'tcx hir::Item\n                 if !generics.types.is_empty() {\n                     let mut err = struct_span_err!(tcx.sess, item.span, E0044,\n                         \"foreign items may not have type parameters\");\n-                    span_help!(&mut err, item.span,\n-                        \"consider using specialization instead of \\\n-                        type parameters\");\n+                    // FIXME: once we start storing spans for type arguments, turn this into a\n+                    // suggestion.\n+                    err.help(\"use specialization instead of type parameters by replacing them \\\n+                              with concrete types like `u32`\");\n                     err.emit();\n                 }\n "}, {"sha": "261881d880bf9fcd8074f34c6d371cfa86046114", "filename": "src/test/compile-fail/builtin-superkinds-double-superkind.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -13,9 +13,11 @@\n \n trait Foo : Send+Sync { }\n \n-impl <T: Sync+'static> Foo for (T,) { } //~ ERROR `T: std::marker::Send` is not satisfied\n+impl <T: Sync+'static> Foo for (T,) { }\n+//~^ ERROR the trait bound `T: std::marker::Send` is not satisfied in `(T,)` [E0277]\n \n-impl <T: Send> Foo for (T,T) { } //~ ERROR `T: std::marker::Sync` is not satisfied\n+impl <T: Send> Foo for (T,T) { }\n+//~^ ERROR `T` cannot be shared between threads safely [E0277]\n \n impl <T: Send+Sync> Foo for (T,T,T) { } // (ok)\n "}, {"sha": "db26535b004acdb587276a0ce5798a53237cc28b", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -21,7 +21,7 @@ fn give_any<F>(f: F) where F: FnOnce() {\n \n fn give_owned<F>(f: F) where F: FnOnce() + Send {\n     take_any(f);\n-    take_const_owned(f); //~ ERROR `F: std::marker::Sync` is not satisfied\n+    take_const_owned(f); //~ ERROR `F` cannot be shared between threads safely [E0277]\n }\n \n fn main() {}"}, {"sha": "6a7a515ba5fbba41d5f773408bbef7d4f8300b92", "filename": "src/test/compile-fail/extern-types-not-sync-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fextern-types-not-sync-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fextern-types-not-sync-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-types-not-sync-send.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -21,7 +21,7 @@ fn assert_send<T: ?Sized + Send>() { }\n \n fn main() {\n     assert_sync::<A>();\n-    //~^ ERROR the trait bound `A: std::marker::Sync` is not satisfied\n+    //~^ ERROR `A` cannot be shared between threads safely [E0277]\n \n     assert_send::<A>();\n     //~^ ERROR the trait bound `A: std::marker::Send` is not satisfied"}, {"sha": "7df445c676c9cc586b2194511302e63d9b46dcdf", "filename": "src/test/compile-fail/issue-16538.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16538.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -21,7 +21,7 @@ mod Y {\n }\n \n static foo: *const Y::X = Y::foo(Y::x as *const Y::X);\n-//~^ ERROR `*const usize: std::marker::Sync` is not satisfied\n+//~^ ERROR `*const usize` cannot be shared between threads safely [E0277]\n //~| ERROR cannot refer to other statics by value, use the address-of operator or a constant instead\n //~| ERROR E0015\n "}, {"sha": "c5349d4e82b4b127b71943bdcbf03676edf8049c", "filename": "src/test/compile-fail/issue-17718-static-sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-static-sync.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -17,6 +17,6 @@ impl !Sync for Foo {}\n \n static FOO: usize = 3;\n static BAR: Foo = Foo;\n-//~^ ERROR: `Foo: std::marker::Sync` is not satisfied\n+//~^ ERROR: `Foo` cannot be shared between threads safely [E0277]\n \n fn main() {}"}, {"sha": "a5ba9ef9bd35dd844d1ea5d1ca2a30cd6b572823", "filename": "src/test/compile-fail/issue-43733-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43733-2.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -33,7 +33,7 @@ impl<T> Key<T> {\n use std::thread::__FastLocalKeyInner as Key;\n \n static __KEY: Key<()> = Key::new();\n-//~^ ERROR `std::cell::UnsafeCell<std::option::Option<()>>: std::marker::Sync` is not satisfied\n-//~| ERROR `std::cell::Cell<bool>: std::marker::Sync` is not satisfied\n+//~^ ERROR `std::cell::UnsafeCell<std::option::Option<()>>` cannot be shared between threads\n+//~| ERROR `std::cell::Cell<bool>` cannot be shared between threads safely [E0277]\n \n fn main() {}"}, {"sha": "801a1301ad77496fcdcf6fa9991ec4a95bf5e29f", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -15,6 +15,6 @@ use std::cell::RefCell;\n // Regression test for issue 7364\n static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n //~^ ERROR allocations are not allowed in statics\n-//~| ERROR `std::cell::RefCell<isize>: std::marker::Sync` is not satisfied\n+//~| ERROR `std::cell::RefCell<isize>` cannot be shared between threads safely [E0277]\n \n fn main() { }"}, {"sha": "a84eae0bfdae86c23b76bc403a58953f8ade4b48", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -20,7 +20,7 @@ trait Message : Send { }\n \n fn object_ref_with_static_bound_not_ok() {\n     assert_send::<&'static (Dummy+'static)>();\n-    //~^ ERROR : std::marker::Sync` is not satisfied\n+    //~^ ERROR `Dummy + 'static` cannot be shared between threads safely [E0277]\n }\n \n fn box_object_with_no_bound_not_ok<'a>() {"}, {"sha": "66865bbcc7ee12f162c7529f53bacd385e79b40f", "filename": "src/test/compile-fail/kindck-send-object1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -18,7 +18,7 @@ trait Dummy { }\n // careful with object types, who knows what they close over...\n fn test51<'a>() {\n     assert_send::<&'a Dummy>();\n-    //~^ ERROR : std::marker::Sync` is not satisfied\n+    //~^ ERROR `Dummy + 'a` cannot be shared between threads safely [E0277]\n }\n fn test52<'a>() {\n     assert_send::<&'a (Dummy+Sync)>();"}, {"sha": "51bc587d74ff83e5d84d179886a35fec57fcca2b", "filename": "src/test/compile-fail/kindck-send-object2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -14,7 +14,8 @@ fn assert_send<T:Send>() { }\n trait Dummy { }\n \n fn test50() {\n-    assert_send::<&'static Dummy>(); //~ ERROR : std::marker::Sync` is not satisfied\n+    assert_send::<&'static Dummy>();\n+    //~^ ERROR `Dummy + 'static` cannot be shared between threads safely [E0277]\n }\n \n fn test53() {"}, {"sha": "9107745b0e9c430d5d5ab5347ddfe2914a1e9975", "filename": "src/test/compile-fail/mutable-enum-indirect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -24,5 +24,6 @@ fn bar<T: Sync>(_: T) {}\n \n fn main() {\n     let x = Foo::A(NoSync);\n-    bar(&x); //~ ERROR `NoSync: std::marker::Sync` is not satisfied\n+    bar(&x);\n+    //~^ ERROR `NoSync` cannot be shared between threads safely [E0277]\n }"}, {"sha": "2d4b50eb7b23c5aee4bd840c445009d2db1b8ca2", "filename": "src/test/compile-fail/mutexguard-sync.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fmutexguard-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fmutexguard-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutexguard-sync.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -18,5 +18,6 @@ fn main()\n {\n     let m = Mutex::new(Cell::new(0i32));\n     let guard = m.lock().unwrap();\n-    test_sync(guard); //~ ERROR the trait bound\n+    test_sync(guard);\n+    //~^ ERROR `std::cell::Cell<i32>` cannot be shared between threads safely [E0277]\n }"}, {"sha": "77a7012b3b033cc5e2799f8337ef92691d8bf3fc", "filename": "src/test/compile-fail/no_share-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -22,5 +22,5 @@ fn bar<T: Sync>(_: T) {}\n fn main() {\n     let x = Foo::A(NoSync);\n     bar(x);\n-    //~^ ERROR `NoSync: std::marker::Sync` is not satisfied\n+    //~^ ERROR `NoSync` cannot be shared between threads safely [E0277]\n }"}, {"sha": "34e43e9f2aaec232d71b48a953806fb13bf73dfd", "filename": "src/test/compile-fail/no_share-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -20,5 +20,5 @@ fn bar<T: Sync>(_: T) {}\n fn main() {\n     let x = Foo { a: 5 };\n     bar(x);\n-    //~^ ERROR `Foo: std::marker::Sync` is not satisfied\n+    //~^ ERROR `Foo` cannot be shared between threads safely [E0277]\n }"}, {"sha": "a383244f415c8bf3a3695398bd176bfaaba4f00a", "filename": "src/test/compile-fail/not-sync.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -16,17 +16,17 @@ fn test<T: Sync>() {}\n \n fn main() {\n     test::<Cell<i32>>();\n-    //~^ ERROR `std::cell::Cell<i32>: std::marker::Sync` is not satisfied\n+    //~^ ERROR `std::cell::Cell<i32>` cannot be shared between threads safely [E0277]\n     test::<RefCell<i32>>();\n-    //~^ ERROR `std::cell::RefCell<i32>: std::marker::Sync` is not satisfied\n+    //~^ ERROR `std::cell::RefCell<i32>` cannot be shared between threads safely [E0277]\n \n     test::<Rc<i32>>();\n-    //~^ ERROR `std::rc::Rc<i32>: std::marker::Sync` is not satisfied\n+    //~^ ERROR `std::rc::Rc<i32>` cannot be shared between threads safely [E0277]\n     test::<Weak<i32>>();\n-    //~^ ERROR `std::rc::Weak<i32>: std::marker::Sync` is not satisfied\n+    //~^ ERROR `std::rc::Weak<i32>` cannot be shared between threads safely [E0277]\n \n     test::<Receiver<i32>>();\n-    //~^ ERROR `std::sync::mpsc::Receiver<i32>: std::marker::Sync` is not satisfied\n+    //~^ ERROR `std::sync::mpsc::Receiver<i32>` cannot be shared between threads safely [E0277]\n     test::<Sender<i32>>();\n-    //~^ ERROR `std::sync::mpsc::Sender<i32>: std::marker::Sync` is not satisfied\n+    //~^ ERROR `std::sync::mpsc::Sender<i32>` cannot be shared between threads safely [E0277]\n }"}, {"sha": "51e7d5da98f4bb5c535b6f48e963364799a8674f", "filename": "src/test/compile-fail/phantom-oibit.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -28,11 +28,13 @@ struct Nested<T>(T);\n fn is_zen<T: Zen>(_: T) {}\n \n fn not_sync<T>(x: Guard<T>) {\n-    is_zen(x)  //~ error: `T: std::marker::Sync` is not satisfied\n+    is_zen(x)\n+    //~^ ERROR `T` cannot be shared between threads safely [E0277]\n }\n \n fn nested_not_sync<T>(x: Nested<Guard<T>>) {\n-    is_zen(x)  //~ error: `T: std::marker::Sync` is not satisfied\n+    is_zen(x)\n+    //~^ ERROR `T` cannot be shared between threads safely [E0277]\n }\n \n fn main() {}"}, {"sha": "c829ba3dcc357fbd54bcf2ae5a6668550a027316", "filename": "src/test/compile-fail/typeck-default-trait-impl-negation-sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation-sync.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -43,11 +43,11 @@ fn is_sync<T: Sync>() {}\n fn main() {\n     is_sync::<MySync>();\n     is_sync::<MyNotSync>();\n-    //~^ ERROR `MyNotSync: std::marker::Sync` is not satisfied\n+    //~^ ERROR `MyNotSync` cannot be shared between threads safely [E0277]\n \n     is_sync::<MyTypeWUnsafe>();\n-    //~^ ERROR `std::cell::UnsafeCell<u8>: std::marker::Sync` is not satisfied\n+    //~^ ERROR `std::cell::UnsafeCell<u8>` cannot be shared between threads safely [E0277]\n \n     is_sync::<MyTypeManaged>();\n-    //~^ ERROR `Managed: std::marker::Sync` is not satisfied\n+    //~^ ERROR `Managed` cannot be shared between threads safely [E0277]\n }"}, {"sha": "fcfc8574b2135a97f37c6b0f20faef0eee61978f", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -27,16 +27,16 @@ fn test<T: Sync>(s: T) {}\n fn main() {\n     let us = UnsafeCell::new(MySync{u: UnsafeCell::new(0)});\n     test(us);\n-    //~^ ERROR `std::cell::UnsafeCell<MySync<{integer}>>: std::marker::Sync` is not satisfied\n+    //~^ ERROR `std::cell::UnsafeCell<MySync<{integer}>>` cannot be shared between threads safely\n \n     let uns = UnsafeCell::new(NoSync);\n     test(uns);\n-    //~^ ERROR `std::cell::UnsafeCell<NoSync>: std::marker::Sync` is not satisfied\n+    //~^ ERROR `std::cell::UnsafeCell<NoSync>` cannot be shared between threads safely [E0277]\n \n     let ms = MySync{u: uns};\n     test(ms);\n-    //~^ ERROR `std::cell::UnsafeCell<NoSync>: std::marker::Sync` is not satisfied\n+    //~^ ERROR `std::cell::UnsafeCell<NoSync>` cannot be shared between threads safely [E0277]\n \n     test(NoSync);\n-    //~^ ERROR `NoSync: std::marker::Sync` is not satisfied\n+    //~^ ERROR `NoSync` cannot be shared between threads safely [E0277]\n }"}, {"sha": "4d20edea5fe18931d7bff07e1b0f37f1a3f7e41c", "filename": "src/test/ui/error-codes/E0044.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fui%2Ferror-codes%2FE0044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fui%2Ferror-codes%2FE0044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0044.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern { fn some_func<T>(x: T); } //~ ERROR E0044\n+extern {\n+    fn sqrt<T>(f: T) -> T;\n+    //~^ ERROR foreign items may not have type parameters [E0044]\n+    //~| HELP use specialization instead of type parameters by replacing them with concrete types\n+}\n \n fn main() {\n }"}, {"sha": "12324e771d3abe451e351cba0b6b74468e3a5d18", "filename": "src/test/ui/error-codes/E0044.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fui%2Ferror-codes%2FE0044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fui%2Ferror-codes%2FE0044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0044.stderr?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -1,14 +1,10 @@\n error[E0044]: foreign items may not have type parameters\n-  --> $DIR/E0044.rs:11:10\n+  --> $DIR/E0044.rs:12:5\n    |\n-LL | extern { fn some_func<T>(x: T); } //~ ERROR E0044\n-   |          ^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn sqrt<T>(f: T) -> T;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: consider using specialization instead of type parameters\n-  --> $DIR/E0044.rs:11:10\n-   |\n-LL | extern { fn some_func<T>(x: T); } //~ ERROR E0044\n-   |          ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use specialization instead of type parameters by replacing them with concrete types like `u32`\n \n error: aborting due to previous error\n "}, {"sha": "424919a0eba678eb6731be695322f92278f4b947", "filename": "src/test/ui/fmt/send-sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -15,6 +15,6 @@ fn main() {\n     // `Cell` is not `Sync`, so `&Cell` is neither `Sync` nor `Send`,\n     // `std::fmt::Arguments` used to forget this...\n     let c = std::cell::Cell::new(42);\n-    send(format_args!(\"{:?}\", c)); //~ ERROR Sync` is not satisfied\n-    sync(format_args!(\"{:?}\", c)); //~ ERROR Sync` is not satisfied\n+    send(format_args!(\"{:?}\", c)); //~ ERROR E0277\n+    sync(format_args!(\"{:?}\", c)); //~ ERROR E0277\n }"}, {"sha": "113a2a480aaf7f24128f143e5d32848d2038e4cd", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -1,7 +1,7 @@\n-error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync` is not satisfied in `[std::fmt::ArgumentV1<'_>]`\n+error[E0277]: `*mut std::ops::Fn() + 'static` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:18:5\n    |\n-LL |     send(format_args!(\"{:?}\", c)); //~ ERROR Sync` is not satisfied\n+LL |     send(format_args!(\"{:?}\", c)); //~ ERROR E0277\n    |     ^^^^ `*mut std::ops::Fn() + 'static` cannot be shared between threads safely\n    |\n    = help: within `[std::fmt::ArgumentV1<'_>]`, the trait `std::marker::Sync` is not implemented for `*mut std::ops::Fn() + 'static`\n@@ -18,10 +18,10 @@ note: required by `send`\n LL | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync` is not satisfied in `std::fmt::Arguments<'_>`\n+error[E0277]: `*mut std::ops::Fn() + 'static` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:19:5\n    |\n-LL |     sync(format_args!(\"{:?}\", c)); //~ ERROR Sync` is not satisfied\n+LL |     sync(format_args!(\"{:?}\", c)); //~ ERROR E0277\n    |     ^^^^ `*mut std::ops::Fn() + 'static` cannot be shared between threads safely\n    |\n    = help: within `std::fmt::Arguments<'_>`, the trait `std::marker::Sync` is not implemented for `*mut std::ops::Fn() + 'static`"}, {"sha": "f0df05ebfdf80a8c52c66c7cd9b79aba011885fe", "filename": "src/test/ui/generator/not-send-sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.rs?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -17,14 +17,14 @@ fn main() {\n     fn assert_send<T: Send>(_: T) {}\n \n     assert_sync(|| {\n-        //~^ ERROR: Sync` is not satisfied\n+        //~^ ERROR: E0277\n         let a = Cell::new(2);\n         yield;\n     });\n \n     let a = Cell::new(2);\n     assert_send(|| {\n-        //~^ ERROR: Sync` is not satisfied\n+        //~^ ERROR: E0277\n         drop(&a);\n         yield;\n     });"}, {"sha": "669e0d26cf07ca6fc406ce62f8f9dccf2a5df2a6", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d8a1739805fa81b6baa8c86efc3e79920ecb306/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=6d8a1739805fa81b6baa8c86efc3e79920ecb306", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `std::cell::Cell<i32>: std::marker::Sync` is not satisfied\n+error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n   --> $DIR/not-send-sync.rs:26:5\n    |\n LL |     assert_send(|| {\n@@ -13,7 +13,7 @@ note: required by `main::assert_send`\n LL |     fn assert_send<T: Send>(_: T) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `std::cell::Cell<i32>: std::marker::Sync` is not satisfied in `[generator@$DIR/not-send-sync.rs:19:17: 23:6 {std::cell::Cell<i32>, ()}]`\n+error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n   --> $DIR/not-send-sync.rs:19:5\n    |\n LL |     assert_sync(|| {"}]}