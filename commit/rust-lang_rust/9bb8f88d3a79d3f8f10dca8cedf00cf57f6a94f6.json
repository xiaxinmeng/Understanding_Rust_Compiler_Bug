{"sha": "9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYjhmODhkM2E3OWQzZjhmMTBkY2E4Y2VkZjAwY2Y1N2Y2YTk0ZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-10T16:49:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-10T16:49:29Z"}, "message": "auto merge of #14696 : jakub-/rust/dead-struct-fields, r=alexcrichton\n\nThis uncovered some dead code, most notably in middle/liveness.rs, which I think suggests there must be something fishy with that part of the code.\r\n\r\nThe #[allow(dead_code)] annotations on some of the fields I am not super happy about but as I understand, marker type may disappear at some point.", "tree": {"sha": "6b900931014b0ea0ed76e2b6ee5ab2f78583b165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b900931014b0ea0ed76e2b6ee5ab2f78583b165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "html_url": "https://github.com/rust-lang/rust/commit/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c", "html_url": "https://github.com/rust-lang/rust/commit/0ee6a8e8a564ec0134ebdc0869fab5e4bb28024c"}, {"sha": "8e34f647ee5db795e1ea46715de61cee63f4f4a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e34f647ee5db795e1ea46715de61cee63f4f4a7", "html_url": "https://github.com/rust-lang/rust/commit/8e34f647ee5db795e1ea46715de61cee63f4f4a7"}], "stats": {"total": 371, "additions": 223, "deletions": 148}, "files": [{"sha": "6d39a332ad9bd5a3549c7475a9dafa4d0aeb64b8", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -44,7 +44,6 @@ use std::string::String;\n  * pattern - see the `glob` function for more details.\n  */\n pub struct Paths {\n-    root: Path,\n     dir_patterns: Vec<Pattern>,\n     require_dir: bool,\n     options: MatchOptions,\n@@ -108,7 +107,6 @@ pub fn glob_with(pattern: &str, options: MatchOptions) -> Paths {\n             // FIXME: How do we want to handle verbatim paths? I'm inclined to return nothing,\n             // since we can't very well find all UNC shares with a 1-letter server name.\n             return Paths {\n-                root: root,\n                 dir_patterns: Vec::new(),\n                 require_dir: false,\n                 options: options,\n@@ -134,7 +132,6 @@ pub fn glob_with(pattern: &str, options: MatchOptions) -> Paths {\n     }\n \n     Paths {\n-        root: root,\n         dir_patterns: dir_patterns,\n         require_dir: require_dir,\n         options: options,"}, {"sha": "e377c203e30737cffaa306dd168701bca0bcd89a", "filename": "src/libgreen/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibgreen%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibgreen%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcontext.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -143,6 +143,7 @@ extern {\n // stacks are disabled.\n \n #[cfg(target_arch = \"x86\")]\n+#[repr(C)]\n struct Registers {\n     eax: u32, ebx: u32, ecx: u32, edx: u32,\n     ebp: u32, esi: u32, edi: u32, esp: u32,"}, {"sha": "e855b8bd4f2647f6efa983d526eb21d3f106e1c2", "filename": "src/libnative/io/c_win32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibnative%2Fio%2Fc_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibnative%2Fio%2Fc_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_win32.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -20,6 +20,7 @@ pub static FIONBIO: libc::c_long = 0x8004667e;\n static FD_SETSIZE: uint = 64;\n pub static MSG_DONTWAIT: libc::c_int = 0;\n \n+#[repr(C)]\n pub struct WSADATA {\n     pub wVersion: libc::WORD,\n     pub wHighVersion: libc::WORD,\n@@ -32,6 +33,7 @@ pub struct WSADATA {\n \n pub type LPWSADATA = *mut WSADATA;\n \n+#[repr(C)]\n pub struct fd_set {\n     fd_count: libc::c_uint,\n     fd_array: [libc::SOCKET, ..FD_SETSIZE],"}, {"sha": "4158db7bb8ea1d902ef8fe40e67a1596f4d7d60c", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -152,13 +152,13 @@ fn keep_going(data: &[u8], f: |*u8, uint| -> i64) -> i64 {\n /// Implementation of rt::rtio's IoFactory trait to generate handles to the\n /// native I/O functionality.\n pub struct IoFactory {\n-    cannot_construct_outside_of_this_module: ()\n+    _cannot_construct_outside_of_this_module: ()\n }\n \n impl IoFactory {\n     pub fn new() -> IoFactory {\n         net::init();\n-        IoFactory { cannot_construct_outside_of_this_module: () }\n+        IoFactory { _cannot_construct_outside_of_this_module: () }\n     }\n }\n "}, {"sha": "e7effbd6bdbfb064ba935408f9cd0fc9a932b86d", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -254,7 +254,10 @@ pub struct TcpStream {\n \n struct Inner {\n     fd: sock_t,\n-    lock: mutex::NativeMutex,\n+\n+    // Unused on Linux, where this lock is not necessary.\n+    #[allow(dead_code)]\n+    lock: mutex::NativeMutex\n }\n \n pub struct Guard<'a> {"}, {"sha": "1458b475ae9598729e4cc700ae52f7ea515f8800", "filename": "src/libnative/io/pipe_unix.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibnative%2Fio%2Fpipe_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibnative%2Fio%2Fpipe_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_unix.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -58,7 +58,10 @@ fn addr_to_sockaddr_un(addr: &CString) -> IoResult<(libc::sockaddr_storage, uint\n \n struct Inner {\n     fd: fd_t,\n-    lock: mutex::NativeMutex,\n+\n+    // Unused on Linux, where this lock is not necessary.\n+    #[allow(dead_code)]\n+    lock: mutex::NativeMutex\n }\n \n impl Inner {"}, {"sha": "b1a951498309fca3c1efed3dc8c1f6aa4c7a2f03", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -81,7 +81,6 @@ struct GammaSmallShape {\n /// See `Gamma` for sampling from a Gamma distribution with general\n /// shape parameters.\n struct GammaLargeShape {\n-    shape: f64,\n     scale: f64,\n     c: f64,\n     d: f64\n@@ -118,7 +117,6 @@ impl GammaLargeShape {\n     fn new_raw(shape: f64, scale: f64) -> GammaLargeShape {\n         let d = shape - 1. / 3.;\n         GammaLargeShape {\n-            shape: shape,\n             scale: scale,\n             c: 1. / (9. * d).sqrt(),\n             d: d"}, {"sha": "0bb1481a4022572c6c0509e3201943af22e3568d", "filename": "src/librustc/front/std_inject.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Ffront%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fstd_inject.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -130,9 +130,7 @@ fn inject_crates_ref(sess: &Session, krate: ast::Crate) -> ast::Crate {\n     fold.fold_crate(krate)\n }\n \n-struct PreludeInjector<'a> {\n-    sess: &'a Session,\n-}\n+struct PreludeInjector<'a>;\n \n \n impl<'a> fold::Folder for PreludeInjector<'a> {\n@@ -223,9 +221,7 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n     }\n }\n \n-fn inject_prelude(sess: &Session, krate: ast::Crate) -> ast::Crate {\n-    let mut fold = PreludeInjector {\n-        sess: sess,\n-    };\n+fn inject_prelude(_: &Session, krate: ast::Crate) -> ast::Crate {\n+    let mut fold = PreludeInjector;\n     fold.fold_crate(krate)\n }"}, {"sha": "cfda97ad26fd77860573621c224ec92743bd548d", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -86,7 +86,7 @@ pub struct Library {\n }\n \n pub struct ArchiveMetadata {\n-    archive: ArchiveRO,\n+    _archive: ArchiveRO,\n     // See comments in ArchiveMetadata::new for why this is static\n     data: &'static [u8],\n }\n@@ -487,7 +487,7 @@ impl ArchiveMetadata {\n             unsafe { mem::transmute(data) }\n         };\n         Some(ArchiveMetadata {\n-            archive: ar,\n+            _archive: ar,\n             data: data,\n         })\n     }"}, {"sha": "363fcf79eb52129384083a38d87d9310f15f0cff", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -42,8 +42,6 @@ pub struct ctxt<'a> {\n // Extra parameters are for converting to/from def_ids in the string rep.\n // Whatever format you choose should not contain pipe characters.\n pub struct ty_abbrev {\n-    pos: uint,\n-    len: uint,\n     s: String\n }\n \n@@ -68,8 +66,6 @@ pub fn enc_ty(w: &mut MemWriter, cx: &ctxt, t: ty::t) {\n     if abbrev_len < len {\n         // I.e. it's actually an abbreviation.\n         cx.abbrevs.borrow_mut().insert(t, ty_abbrev {\n-            pos: pos as uint,\n-            len: len as uint,\n             s: format!(\"\\\\#{:x}:{:x}\\\\#\", pos, len)\n         });\n     }"}, {"sha": "dc8567af9edad9fb9727a8639815791ca6d86479", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -29,7 +29,7 @@ pub fn guarantee_lifetime(bccx: &BorrowckCtxt,\n                           cause: euv::LoanCause,\n                           cmt: mc::cmt,\n                           loan_region: ty::Region,\n-                          loan_kind: ty::BorrowKind)\n+                          _: ty::BorrowKind)\n                           -> Result<(),()> {\n     debug!(\"guarantee_lifetime(cmt={}, loan_region={})\",\n            cmt.repr(bccx.tcx), loan_region.repr(bccx.tcx));\n@@ -38,7 +38,6 @@ pub fn guarantee_lifetime(bccx: &BorrowckCtxt,\n                                          span: span,\n                                          cause: cause,\n                                          loan_region: loan_region,\n-                                         loan_kind: loan_kind,\n                                          cmt_original: cmt.clone()};\n     ctxt.check(&cmt, None)\n }\n@@ -55,7 +54,6 @@ struct GuaranteeLifetimeContext<'a> {\n     span: Span,\n     cause: euv::LoanCause,\n     loan_region: ty::Region,\n-    loan_kind: ty::BorrowKind,\n     cmt_original: mc::cmt\n }\n "}, {"sha": "ec362f924418c0ba77b8ea153a0ece57efbafdbb", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -310,7 +310,6 @@ impl<'a> GatherLoanCtxt<'a> {\n                 Loan {\n                     index: self.all_loans.len(),\n                     loan_path: loan_path,\n-                    cmt: cmt,\n                     kind: req_kind,\n                     gen_scope: gen_scope,\n                     kill_scope: kill_scope,\n@@ -481,8 +480,7 @@ impl<'a> GatherLoanCtxt<'a> {\n /// This visitor walks static initializer's expressions and makes\n /// sure the loans being taken are sound.\n struct StaticInitializerCtxt<'a> {\n-    bccx: &'a BorrowckCtxt<'a>,\n-    item_ub: ast::NodeId,\n+    bccx: &'a BorrowckCtxt<'a>\n }\n \n impl<'a> visit::Visitor<()> for StaticInitializerCtxt<'a> {\n@@ -509,8 +507,7 @@ pub fn gather_loans_in_static_initializer(bccx: &mut BorrowckCtxt, expr: &ast::E\n     debug!(\"gather_loans_in_static_initializer(expr={})\", expr.repr(bccx.tcx));\n \n     let mut sicx = StaticInitializerCtxt {\n-        bccx: bccx,\n-        item_ub: expr.id,\n+        bccx: bccx\n     };\n \n     sicx.visit_expr(expr, ());"}, {"sha": "7c1f5937472970f86af8903950c8a46b1fa13063", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -36,7 +36,6 @@ pub fn compute_restrictions(bccx: &BorrowckCtxt,\n         bccx: bccx,\n         span: span,\n         cause: cause,\n-        cmt_original: cmt.clone(),\n         loan_region: loan_region,\n     };\n \n@@ -49,7 +48,6 @@ pub fn compute_restrictions(bccx: &BorrowckCtxt,\n struct RestrictionsContext<'a> {\n     bccx: &'a BorrowckCtxt<'a>,\n     span: Span,\n-    cmt_original: mc::cmt,\n     loan_region: ty::Region,\n     cause: euv::LoanCause,\n }"}, {"sha": "7aaba22dd843584150e5e50bbdd2ea8379bb7a1e", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -180,7 +180,6 @@ pub enum PartialTotal {\n pub struct Loan {\n     index: uint,\n     loan_path: Rc<LoanPath>,\n-    cmt: mc::cmt,\n     kind: ty::BorrowKind,\n     restrictions: Vec<Restriction>,\n     gen_scope: ast::NodeId,"}, {"sha": "46899ae19ca095f84bed03c2c85fe211cca8f2de", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -124,6 +124,32 @@ impl<'a> MarkSymbolVisitor<'a> {\n         }\n     }\n \n+    fn handle_field_access(&mut self, lhs: &ast::Expr, name: &ast::Ident) {\n+        match ty::get(ty::expr_ty_adjusted(self.tcx, lhs)).sty {\n+            ty::ty_struct(id, _) => {\n+                let fields = ty::lookup_struct_fields(self.tcx, id);\n+                let field_id = fields.iter()\n+                    .find(|field| field.name == name.name).unwrap().id;\n+                self.live_symbols.insert(field_id.node);\n+            },\n+            _ => ()\n+        }\n+    }\n+\n+    fn handle_field_pattern_match(&mut self, lhs: &ast::Pat, pats: &[ast::FieldPat]) {\n+        match self.tcx.def_map.borrow().get(&lhs.id) {\n+            &def::DefStruct(id) | &def::DefVariant(_, id, _) => {\n+                let fields = ty::lookup_struct_fields(self.tcx, id);\n+                for pat in pats.iter() {\n+                    let field_id = fields.iter()\n+                        .find(|field| field.name == pat.ident.name).unwrap().id;\n+                    self.live_symbols.insert(field_id.node);\n+                }\n+            }\n+            _ => ()\n+        }\n+    }\n+\n     fn mark_live_symbols(&mut self) {\n         let mut scanned = HashSet::new();\n         while self.worklist.len() > 0 {\n@@ -147,10 +173,22 @@ impl<'a> MarkSymbolVisitor<'a> {\n         match *node {\n             ast_map::NodeItem(item) => {\n                 match item.node {\n+                    ast::ItemStruct(struct_def, _) => {\n+                        let has_extern_repr = item.attrs.iter().fold(attr::ReprAny, |acc, attr| {\n+                            attr::find_repr_attr(self.tcx.sess.diagnostic(), attr, acc)\n+                        }) == attr::ReprExtern;\n+                        let live_fields = struct_def.fields.iter().filter(|f| {\n+                            has_extern_repr || match f.node.kind {\n+                                ast::NamedField(_, ast::Public) => true,\n+                                _ => false\n+                            }\n+                        });\n+                        self.live_symbols.extend(live_fields.map(|f| f.node.id));\n+                        visit::walk_item(self, item, ());\n+                    }\n                     ast::ItemFn(..)\n                     | ast::ItemTy(..)\n                     | ast::ItemEnum(..)\n-                    | ast::ItemStruct(..)\n                     | ast::ItemStatic(..) => {\n                         visit::walk_item(self, item, ());\n                     }\n@@ -178,18 +216,32 @@ impl<'a> Visitor<()> for MarkSymbolVisitor<'a> {\n             ast::ExprMethodCall(..) => {\n                 self.lookup_and_handle_method(expr.id, expr.span);\n             }\n+            ast::ExprField(ref lhs, ref ident, _) => {\n+                self.handle_field_access(*lhs, ident);\n+            }\n             _ => ()\n         }\n \n         visit::walk_expr(self, expr, ())\n     }\n \n+    fn visit_pat(&mut self, pat: &ast::Pat, _: ()) {\n+        match pat.node {\n+            ast::PatStruct(_, ref fields, _) => {\n+                self.handle_field_pattern_match(pat, fields.as_slice());\n+            }\n+            _ => ()\n+        }\n+\n+        visit::walk_pat(self, pat, ())\n+    }\n+\n     fn visit_path(&mut self, path: &ast::Path, id: ast::NodeId, _: ()) {\n         self.lookup_and_handle_definition(&id);\n         visit::walk_path(self, path, ());\n     }\n \n-    fn visit_item(&mut self, _item: &ast::Item, _: ()) {\n+    fn visit_item(&mut self, _: &ast::Item, _: ()) {\n         // Do not recurse into items. These items will be added to the\n         // worklist and recursed into manually if necessary.\n     }\n@@ -317,6 +369,23 @@ struct DeadVisitor<'a> {\n }\n \n impl<'a> DeadVisitor<'a> {\n+    fn should_warn_about_field(&mut self, node: &ast::StructField_) -> bool {\n+        let (is_named, has_leading_underscore) = match node.ident() {\n+            Some(ref ident) => (true, token::get_ident(*ident).get()[0] == ('_' as u8)),\n+            _ => (false, false)\n+        };\n+        let field_type = ty::node_id_to_type(self.tcx, node.id);\n+        let is_marker_field = match ty::ty_to_def_id(field_type) {\n+            Some(def_id) => self.tcx.lang_items.items().any(|(_, item)| *item == Some(def_id)),\n+            _ => false\n+        };\n+        is_named\n+            && !self.symbol_is_live(node.id, None)\n+            && !has_leading_underscore\n+            && !is_marker_field\n+            && !has_allow_dead_code_or_lang_attr(node.attrs.as_slice())\n+    }\n+\n     // id := node id of an item's definition.\n     // ctor_id := `Some` if the item is a struct_ctor (tuple struct),\n     //            `None` otherwise.\n@@ -399,6 +468,14 @@ impl<'a> Visitor<()> for DeadVisitor<'a> {\n         visit::walk_block(self, block, ());\n     }\n \n+    fn visit_struct_field(&mut self, field: &ast::StructField, _: ()) {\n+        if self.should_warn_about_field(&field.node) {\n+            self.warn_dead_code(field.node.id, field.span, field.node.ident().unwrap());\n+        }\n+\n+        visit::walk_struct_field(self, field, ());\n+    }\n+\n     // Overwrite so that we don't warn the trait method itself.\n     fn visit_trait_method(&mut self, trait_method: &ast::TraitMethod, _: ()) {\n         match *trait_method {"}, {"sha": "a7fd81e9c9a83e84f2368831d9107fddf06392a2", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 44, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -226,21 +226,12 @@ fn invalid_node() -> LiveNode { LiveNode(uint::MAX) }\n \n struct CaptureInfo {\n     ln: LiveNode,\n-    is_move: bool,\n     var_nid: NodeId\n }\n \n-enum LocalKind {\n-    FromMatch(BindingMode),\n-    FromLetWithInitializer,\n-    FromLetNoInitializer\n-}\n-\n struct LocalInfo {\n     id: NodeId,\n-    ident: Ident,\n-    is_mutbl: bool,\n-    kind: LocalKind,\n+    ident: Ident\n }\n \n enum VarKind {\n@@ -406,23 +397,13 @@ fn visit_fn(ir: &mut IrMaps,\n }\n \n fn visit_local(ir: &mut IrMaps, local: &Local) {\n-    pat_util::pat_bindings(&ir.tcx.def_map, local.pat, |bm, p_id, sp, path| {\n+    pat_util::pat_bindings(&ir.tcx.def_map, local.pat, |_, p_id, sp, path| {\n         debug!(\"adding local variable {}\", p_id);\n         let name = ast_util::path_to_ident(path);\n         ir.add_live_node_for_node(p_id, VarDefNode(sp));\n-        let kind = match local.init {\n-          Some(_) => FromLetWithInitializer,\n-          None => FromLetNoInitializer\n-        };\n-        let mutbl = match bm {\n-            BindByValue(MutMutable) => true,\n-            _ => false\n-        };\n         ir.add_variable(Local(LocalInfo {\n           id: p_id,\n-          ident: name,\n-          is_mutbl: mutbl,\n-          kind: kind\n+          ident: name\n         }));\n     });\n     visit::walk_local(ir, local, ());\n@@ -434,16 +415,10 @@ fn visit_arm(ir: &mut IrMaps, arm: &Arm) {\n             debug!(\"adding local variable {} from match with bm {:?}\",\n                    p_id, bm);\n             let name = ast_util::path_to_ident(path);\n-            let mutbl = match bm {\n-                BindByValue(MutMutable) => true,\n-                _ => false\n-            };\n             ir.add_live_node_for_node(p_id, VarDefNode(sp));\n             ir.add_variable(Local(LocalInfo {\n                 id: p_id,\n-                ident: name,\n-                is_mutbl: mutbl,\n-                kind: FromMatch(bm)\n+                ident: name\n             }));\n         })\n     }\n@@ -481,27 +456,12 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n         // in better error messages than just pointing at the closure\n         // construction site.\n         let mut call_caps = Vec::new();\n-        let fv_mode = freevars::get_capture_mode(ir.tcx, expr.id);\n         freevars::with_freevars(ir.tcx, expr.id, |freevars| {\n             for fv in freevars.iter() {\n                 match moved_variable_node_id_from_def(fv.def) {\n                     Some(rv) => {\n                         let fv_ln = ir.add_live_node(FreeVarNode(fv.span));\n-                        let fv_id = fv.def.def_id().node;\n-                        let fv_ty = ty::node_id_to_type(ir.tcx, fv_id);\n-                        let is_move = match fv_mode {\n-                            // var must be dead afterwards\n-                            freevars::CaptureByValue => {\n-                                ty::type_moves_by_default(ir.tcx, fv_ty)\n-                            }\n-\n-                            // var can still be used\n-                            freevars::CaptureByRef => {\n-                                false\n-                            }\n-                        };\n                         call_caps.push(CaptureInfo {ln: fv_ln,\n-                                                    is_move: is_move,\n                                                     var_nid: rv});\n                     }\n                     None => {}"}, {"sha": "50cbf6bbaf0c58abd0933c6baaabf411f9f51414", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -353,7 +353,6 @@ impl<'a> Visitor<()> for EmbargoVisitor<'a> {\n struct PrivacyVisitor<'a> {\n     tcx: &'a ty::ctxt,\n     curitem: ast::NodeId,\n-    in_fn: bool,\n     in_foreign: bool,\n     parents: NodeMap<ast::NodeId>,\n     external_exports: resolve::ExternalExports,\n@@ -1445,7 +1444,6 @@ pub fn check_crate(tcx: &ty::ctxt,\n     // Use the parent map to check the privacy of everything\n     let mut visitor = PrivacyVisitor {\n         curitem: ast::DUMMY_NODE_ID,\n-        in_fn: false,\n         in_foreign: false,\n         tcx: tcx,\n         parents: visitor.parents,"}, {"sha": "b0a322a9eb7ed51c4ac7b1388b61dda36b1677c1", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -806,7 +806,6 @@ fn namespace_error_to_str(ns: NamespaceError) -> &'static str {\n /// The main resolver class.\n struct Resolver<'a> {\n     session: &'a Session,\n-    lang_items: &'a LanguageItems,\n \n     graph_root: NameBindings,\n \n@@ -843,9 +842,6 @@ struct Resolver<'a> {\n     // The idents for the primitive types.\n     primitive_type_table: PrimitiveTypeTable,\n \n-    // The four namespaces.\n-    namespaces: Vec<Namespace> ,\n-\n     def_map: DefMap,\n     export_map2: ExportMap2,\n     trait_map: TraitMap,\n@@ -902,7 +898,7 @@ impl<'a, 'b> Visitor<()> for UnusedImportCheckVisitor<'a, 'b> {\n }\n \n impl<'a> Resolver<'a> {\n-    fn new(session: &'a Session, lang_items: &'a LanguageItems, crate_span: Span) -> Resolver<'a> {\n+    fn new(session: &'a Session, crate_span: Span) -> Resolver<'a> {\n         let graph_root = NameBindings::new();\n \n         graph_root.define_module(NoParentLink,\n@@ -916,7 +912,6 @@ impl<'a> Resolver<'a> {\n \n         Resolver {\n             session: session,\n-            lang_items: lang_items,\n \n             // The outermost module has def ID 0; this is not reflected in the\n             // AST.\n@@ -941,8 +936,6 @@ impl<'a> Resolver<'a> {\n \n             primitive_type_table: PrimitiveTypeTable::new(),\n \n-            namespaces: vec!(TypeNS, ValueNS),\n-\n             def_map: RefCell::new(NodeMap::new()),\n             export_map2: RefCell::new(NodeMap::new()),\n             trait_map: NodeMap::new(),\n@@ -5582,10 +5575,10 @@ pub struct CrateMap {\n \n /// Entry point to crate resolution.\n pub fn resolve_crate(session: &Session,\n-                     lang_items: &LanguageItems,\n+                     _: &LanguageItems,\n                      krate: &Crate)\n                   -> CrateMap {\n-    let mut resolver = Resolver::new(session, lang_items, krate.span);\n+    let mut resolver = Resolver::new(session, krate.span);\n     resolver.resolve(krate);\n     let Resolver { def_map, export_map2, trait_map, last_private,\n                    external_exports, .. } = resolver;"}, {"sha": "1cc490bf8f8ac66079d5a969c88e5193b60d8513", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -106,7 +106,9 @@ pub fn init_insn_ctxt() {\n     task_local_insn_key.replace(Some(RefCell::new(Vec::new())));\n }\n \n-pub struct _InsnCtxt { _x: () }\n+pub struct _InsnCtxt {\n+    _cannot_construct_outside_of_this_module: ()\n+}\n \n #[unsafe_destructor]\n impl Drop for _InsnCtxt {\n@@ -124,7 +126,7 @@ pub fn push_ctxt(s: &'static str) -> _InsnCtxt {\n         Some(ctx) => ctx.borrow_mut().push(s),\n         None => {}\n     }\n-    _InsnCtxt { _x: () }\n+    _InsnCtxt { _cannot_construct_outside_of_this_module: () }\n }\n \n pub struct StatRecorder<'a> {"}, {"sha": "565fa88bf438e77cb0fdd2b0176b04d4a961eb48", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -64,9 +64,6 @@ struct LlvmSignature {\n     // function, because the foreign function may opt to return via an\n     // out pointer.\n     llret_ty: Type,\n-\n-    // True if *Rust* would use an outpointer for this function.\n-    sret: bool,\n }\n \n \n@@ -847,8 +844,7 @@ fn foreign_signature(ccx: &CrateContext, fn_sig: &ty::FnSig, arg_tys: &[ty::t])\n     let llret_ty = type_of::type_of(ccx, fn_sig.output);\n     LlvmSignature {\n         llarg_tys: llarg_tys,\n-        llret_ty: llret_ty,\n-        sret: type_of::return_uses_outptr(ccx, fn_sig.output),\n+        llret_ty: llret_ty\n     }\n }\n "}, {"sha": "2c0593184786e961ec20fad955d4df55666a92db", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -52,9 +52,7 @@ use std::cell::RefCell;\n use std::rc::Rc;\n \n struct UniversalQuantificationResult {\n-    monotype: t,\n-    type_variables: Vec<ty::t> ,\n-    type_param_defs: Rc<Vec<ty::TypeParameterDef> >\n+    monotype: t\n }\n \n fn get_base_type(inference_context: &InferCtxt,\n@@ -515,9 +513,7 @@ impl<'a> CoherenceChecker<'a> {\n         let monotype = polytype.ty.subst(self.crate_context.tcx, &substitutions);\n \n         UniversalQuantificationResult {\n-            monotype: monotype,\n-            type_variables: substitutions.tps,\n-            type_param_defs: polytype.generics.type_param_defs.clone()\n+            monotype: monotype\n         }\n     }\n "}, {"sha": "92ebf42c7af98088a4ba5e2164ebcda817e88de9", "filename": "src/librustc/middle/typeck/variance.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fvariance.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -271,7 +271,6 @@ enum ParamKind { TypeParam, RegionParam, SelfParam }\n struct InferredInfo<'a> {\n     item_id: ast::NodeId,\n     kind: ParamKind,\n-    index: uint,\n     param_id: ast::NodeId,\n     term: VarianceTermPtr<'a>,\n }\n@@ -310,7 +309,6 @@ impl<'a> TermsContext<'a> {\n         let term = self.arena.alloc(|| InferredTerm(inf_index));\n         self.inferred_infos.push(InferredInfo { item_id: item_id,\n                                                 kind: kind,\n-                                                index: index,\n                                                 param_id: param_id,\n                                                 term: term });\n         let newly_added = self.inferred_map.insert(param_id, inf_index);"}, {"sha": "08052c03de482e13091348b8e57bd07ebb27fe65", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -42,23 +42,17 @@ pub fn indent<R>(op: || -> R) -> R {\n     r\n }\n \n-pub struct _indenter {\n-    _i: (),\n+pub struct Indenter {\n+    _cannot_construct_outside_of_this_module: ()\n }\n \n-impl Drop for _indenter {\n+impl Drop for Indenter {\n     fn drop(&mut self) { debug!(\"<<\"); }\n }\n \n-pub fn _indenter(_i: ()) -> _indenter {\n-    _indenter {\n-        _i: ()\n-    }\n-}\n-\n-pub fn indenter() -> _indenter {\n+pub fn indenter() -> Indenter {\n     debug!(\">>\");\n-    _indenter(())\n+    Indenter { _cannot_construct_outside_of_this_module: () }\n }\n \n struct LoopQueryVisitor<'a> {"}, {"sha": "061c05058ae367d84871dcd504e06528741cc3ad", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -24,6 +24,7 @@\n //! // ... something using html\n //! ```\n \n+#![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n use libc;"}, {"sha": "eec19e9d5db86bf9cb5ad55587516b9a2b668d40", "filename": "src/librustrt/mutex.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustrt%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustrt%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fmutex.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -298,10 +298,12 @@ mod imp {\n         static _PTHREAD_MUTEX_SIG_init: libc::c_long = 0x32AAABA7;\n         static _PTHREAD_COND_SIG_init: libc::c_long = 0x3CB0B1BB;\n \n+        #[repr(C)]\n         pub struct pthread_mutex_t {\n             __sig: libc::c_long,\n             __opaque: [u8, ..__PTHREAD_MUTEX_SIZE__],\n         }\n+        #[repr(C)]\n         pub struct pthread_cond_t {\n             __sig: libc::c_long,\n             __opaque: [u8, ..__PTHREAD_COND_SIZE__],\n@@ -339,10 +341,12 @@ mod imp {\n         #[cfg(target_arch = \"mips\")]\n         static __SIZEOF_PTHREAD_COND_T: uint = 48 - 8;\n \n+        #[repr(C)]\n         pub struct pthread_mutex_t {\n             __align: libc::c_longlong,\n             size: [u8, ..__SIZEOF_PTHREAD_MUTEX_T],\n         }\n+        #[repr(C)]\n         pub struct pthread_cond_t {\n             __align: libc::c_longlong,\n             size: [u8, ..__SIZEOF_PTHREAD_COND_T],\n@@ -361,7 +365,9 @@ mod imp {\n     mod os {\n         use libc;\n \n+        #[repr(C)]\n         pub struct pthread_mutex_t { value: libc::c_int }\n+        #[repr(C)]\n         pub struct pthread_cond_t { value: libc::c_int }\n \n         pub static PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {"}, {"sha": "fe8935db2ec128278b9c7367ccce085e9513169c", "filename": "src/librustuv/idle.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustuv%2Fidle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustuv%2Fidle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fidle.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -18,7 +18,6 @@ use std::rt::rtio::{Callback, PausableIdleCallback};\n pub struct IdleWatcher {\n     handle: *uvll::uv_idle_t,\n     idle_flag: bool,\n-    closed: bool,\n     callback: Box<Callback:Send>,\n }\n \n@@ -31,7 +30,6 @@ impl IdleWatcher {\n         let me = box IdleWatcher {\n             handle: handle,\n             idle_flag: false,\n-            closed: false,\n             callback: cb,\n         };\n         return me.install();"}, {"sha": "47b321b068b36ae6046cd91107d38e428f3e51d0", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -165,7 +165,6 @@ pub struct TcpWatcher {\n pub struct TcpListener {\n     home: HomeHandle,\n     handle: *uvll::uv_pipe_t,\n-    closing_task: Option<BlockedTask>,\n     outgoing: Sender<Result<Box<rtio::RtioTcpStream:Send>, IoError>>,\n     incoming: Receiver<Result<Box<rtio::RtioTcpStream:Send>, IoError>>,\n }\n@@ -358,7 +357,6 @@ impl TcpListener {\n         let l = box TcpListener {\n             home: io.make_handle(),\n             handle: handle,\n-            closing_task: None,\n             outgoing: tx,\n             incoming: rx,\n         };"}, {"sha": "a6193dd9379c1636734f8428338848c8534e0b7a", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -136,6 +136,7 @@ pub struct uv_process_options_t {\n \n // These fields are private because they must be interfaced with through the\n // functions below.\n+#[repr(C)]\n pub struct uv_stdio_container_t {\n     flags: libc::c_int,\n     stream: *uv_stream_t,"}, {"sha": "34851265409ec495b8afbdb907ef75669056a226", "filename": "src/libstd/collections/hashmap.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibstd%2Fcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibstd%2Fcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -393,7 +393,7 @@ mod table {\n         }\n \n         pub fn move_iter(self) -> MoveEntries<K, V> {\n-            MoveEntries { table: self, idx: 0, elems_seen: 0 }\n+            MoveEntries { table: self, idx: 0 }\n         }\n     }\n \n@@ -428,8 +428,7 @@ mod table {\n     /// Iterator over the entries in a table, consuming the table.\n     pub struct MoveEntries<K, V> {\n         table: RawTable<K, V>,\n-        idx: uint,\n-        elems_seen: uint,\n+        idx: uint\n     }\n \n     impl<'a, K, V> Iterator<(&'a K, &'a V)> for Entries<'a, K, V> {"}, {"sha": "a1372b51d472a51e5e1b5bc8785d15ffd2e0451c", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -325,6 +325,7 @@ mod imp {\n     #[cfg(target_os = \"macos\")]\n     fn print(w: &mut Writer, idx: int, addr: *libc::c_void) -> IoResult<()> {\n         use intrinsics;\n+        #[repr(C)]\n         struct Dl_info {\n             dli_fname: *libc::c_char,\n             dli_fbase: *libc::c_void,"}, {"sha": "a4e1ad84252b1295a2154af3f65bac1ad747dd53", "filename": "src/libstd/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -84,7 +84,7 @@ pub struct TaskBuilder {\n     /// Options to spawn the new task with\n     pub opts: TaskOpts,\n     gen_body: Option<proc(v: proc():Send):Send -> proc():Send>,\n-    nocopy: Option<marker::NoCopy>,\n+    nocopy: marker::NoCopy,\n }\n \n impl TaskBuilder {\n@@ -94,7 +94,7 @@ impl TaskBuilder {\n         TaskBuilder {\n             opts: TaskOpts::new(),\n             gen_body: None,\n-            nocopy: None,\n+            nocopy: marker::NoCopy,\n         }\n     }\n "}, {"sha": "821afeaa1f2e4b487b57bf0a04578ed873fe6ec8", "filename": "src/libsync/raw.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fraw.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -355,7 +355,7 @@ pub struct Semaphore {\n /// dropped, this value will release the resource back to the semaphore.\n #[must_use]\n pub struct SemaphoreGuard<'a> {\n-    guard: SemGuard<'a, ()>,\n+    _guard: SemGuard<'a, ()>,\n }\n \n impl Semaphore {\n@@ -375,7 +375,7 @@ impl Semaphore {\n     /// Acquire a resource of this semaphore, returning an RAII guard which will\n     /// release the resource when dropped.\n     pub fn access<'a>(&'a self) -> SemaphoreGuard<'a> {\n-        SemaphoreGuard { guard: self.sem.access() }\n+        SemaphoreGuard { _guard: self.sem.access() }\n     }\n }\n \n@@ -398,7 +398,7 @@ pub struct Mutex {\n /// corresponding mutex is also unlocked.\n #[must_use]\n pub struct MutexGuard<'a> {\n-    guard: SemGuard<'a, Vec<WaitQueue>>,\n+    _guard: SemGuard<'a, Vec<WaitQueue>>,\n     /// Inner condition variable which is connected to the outer mutex, and can\n     /// be used for atomic-unlock-and-deschedule.\n     pub cond: Condvar<'a>,\n@@ -421,7 +421,7 @@ impl Mutex {\n     /// also be accessed through the returned guard.\n     pub fn lock<'a>(&'a self) -> MutexGuard<'a> {\n         let SemCondGuard { guard, cvar } = self.sem.access_cond();\n-        MutexGuard { guard: guard, cond: cvar }\n+        MutexGuard { _guard: guard, cond: cvar }\n     }\n }\n "}, {"sha": "2f5459b6f2e1b47801c1efcf6193f5495f95b26d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -1053,6 +1053,15 @@ pub struct StructField_ {\n     pub attrs: Vec<Attribute>,\n }\n \n+impl StructField_ {\n+    pub fn ident(&self) -> Option<Ident> {\n+        match self.kind {\n+            NamedField(ref ident, _) => Some(ident.clone()),\n+            UnnamedField(_) => None\n+        }\n+    }\n+}\n+\n pub type StructField = Spanned<StructField_>;\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]"}, {"sha": "14769e3e510673aceb3ff5bf3a04dd04a0ea3aad", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -21,11 +21,6 @@ use parse::token::special_idents;\n use parse::token::InternedString;\n use parse::token;\n \n-pub struct Field {\n-    ident: ast::Ident,\n-    ex: @ast::Expr\n-}\n-\n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {\n     pub use ext;\n@@ -1000,9 +995,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n }\n \n-struct Duplicator<'a> {\n-    cx: &'a ExtCtxt<'a>,\n-}\n+struct Duplicator<'a>;\n \n impl<'a> Folder for Duplicator<'a> {\n     fn new_id(&mut self, _: NodeId) -> NodeId {\n@@ -1021,10 +1014,8 @@ pub trait Duplicate {\n }\n \n impl Duplicate for @ast::Expr {\n-    fn duplicate(&self, cx: &ExtCtxt) -> @ast::Expr {\n-        let mut folder = Duplicator {\n-            cx: cx,\n-        };\n+    fn duplicate(&self, _: &ExtCtxt) -> @ast::Expr {\n+        let mut folder = Duplicator;\n         folder.fold_expr(*self)\n     }\n }"}, {"sha": "7cdc93c7314be097ea0475f6970136fdaf7a2b1d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -19,7 +19,6 @@ use codemap::{CodeMap, BytePos};\n use codemap;\n use diagnostic;\n use parse::classify::expr_is_simple_block;\n-use parse::token::IdentInterner;\n use parse::token;\n use parse::lexer::comments;\n use parse;\n@@ -30,7 +29,6 @@ use print::pp;\n use std::io::{IoResult, MemWriter};\n use std::io;\n use std::mem;\n-use std::rc::Rc;\n use std::str;\n use std::string::String;\n \n@@ -58,7 +56,6 @@ pub struct CurrentCommentAndLiteral {\n pub struct State<'a> {\n     pub s: pp::Printer,\n     cm: Option<&'a CodeMap>,\n-    intr: Rc<token::IdentInterner>,\n     comments: Option<Vec<comments::Comment> >,\n     literals: Option<Vec<comments::Literal> >,\n     cur_cmnt_and_lit: CurrentCommentAndLiteral,\n@@ -76,7 +73,6 @@ pub fn rust_printer_annotated<'a>(writer: Box<io::Writer>,\n     State {\n         s: pp::mk_printer(writer, default_columns),\n         cm: None,\n-        intr: token::get_ident_interner(),\n         comments: None,\n         literals: None,\n         cur_cmnt_and_lit: CurrentCommentAndLiteral {\n@@ -111,7 +107,6 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n     let mut s = State {\n         s: pp::mk_printer(out, default_columns),\n         cm: Some(cm),\n-        intr: token::get_ident_interner(),\n         comments: Some(cmnts),\n         // If the code is post expansion, don't use the table of\n         // literals, since it doesn't correspond with the literals"}, {"sha": "bca2a5d7edc864cb871726e4603157fbe8bdc424", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -39,7 +39,10 @@ static STATIC_USED_IN_ENUM_DISCRIMINANT: uint = 10;\n pub type typ = *UsedStruct4;\n pub struct PubStruct();\n struct PrivStruct; //~ ERROR: code is never used\n-struct UsedStruct1 { x: int }\n+struct UsedStruct1 {\n+    #[allow(dead_code)]\n+    x: int\n+}\n struct UsedStruct2(int);\n struct UsedStruct3;\n struct UsedStruct4;\n@@ -53,6 +56,7 @@ struct StructUsedAsField;\n struct StructUsedInEnum;\n struct StructUsedInGeneric;\n pub struct PubStruct2 {\n+    #[allow(dead_code)]\n     struct_used_as_field: *StructUsedAsField\n }\n "}, {"sha": "718af1841b6232fa4ad188a502fabc2c6c64dd5c", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(struct_variant)]\n+#![allow(unused_variable)]\n+#![allow(non_camel_case_types)]\n+#![deny(dead_code)]\n+\n+extern crate libc;\n+\n+use std::num;\n+\n+struct Foo {\n+    x: uint,\n+    b: bool, //~ ERROR: code is never used\n+    marker: std::kinds::marker::NoCopy\n+}\n+\n+fn field_read(f: Foo) -> uint {\n+    num::pow(f.x, 2)\n+}\n+\n+enum XYZ {\n+    X,\n+    Y {\n+        a: String,\n+        b: int //~ ERROR: code is never used\n+    },\n+    Z\n+}\n+\n+fn field_match_in_patterns(b: XYZ) -> String {\n+    match b {\n+        Y { a: a, .. } => a,\n+        _ => \"\".to_string()\n+    }\n+}\n+\n+struct Bar {\n+    x: uint, //~ ERROR: code is never used\n+    b: bool,\n+    _guard: ()\n+}\n+\n+#[repr(C)]\n+struct Baz {\n+    x: libc::c_uint\n+}\n+\n+fn field_match_in_let(f: Bar) -> bool {\n+    let Bar { b, .. } = f;\n+    b\n+}\n+\n+fn main() {\n+    field_read(Foo { x: 1, b: false, marker: std::kinds::marker::NoCopy });\n+    field_match_in_patterns(Z);\n+    field_match_in_let(Bar { x: 42u, b: true, _guard: () });\n+    let _ = Baz { x: 0 };\n+}"}, {"sha": "ff382cb46c7624ec123d956f592915110341a523", "filename": "src/test/compile-fail/lint-managed-heap-memory.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(dead_code)]\n #![feature(managed_boxes)]\n #![forbid(managed_heap_memory)]\n "}, {"sha": "8f20999a56c8d7064d6848bf29e8ed1e63da4539", "filename": "src/test/compile-fail/lint-owned-heap-memory.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(dead_code)]\n #![forbid(owned_heap_memory)]\n \n "}, {"sha": "f1b36d719e9591603450e80b089e4a3d031aa4ea", "filename": "src/test/compile-fail/lint-uppercase-variables.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs?ref=9bb8f88d3a79d3f8f10dca8cedf00cf57f6a94f6", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(dead_code)]\n #![deny(uppercase_variables)]\n \n use std::io::File;"}]}