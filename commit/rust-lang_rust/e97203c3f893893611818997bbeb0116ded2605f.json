{"sha": "e97203c3f893893611818997bbeb0116ded2605f", "node_id": "C_kwDOAAsO6NoAKGU5NzIwM2MzZjg5Mzg5MzYxMTgxODk5N2JiZWIwMTE2ZGVkMjYwNWY", "commit": {"author": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2022-12-21T14:01:18Z"}, "committer": {"name": "Sebastian Dr\u00f6ge", "email": "sebastian@centricular.com", "date": "2022-12-23T07:34:22Z"}, "message": "Stop at the first `NULL` argument when iterating `argv`\n\nSome C commandline parsers (e.g. GLib and Qt) are replacing already\nhandled arguments in `argv` with `NULL` and move them to the end. That\nmeans that `argc` might be bigger than the actual number of non-`NULL`\npointers in `argv` at this point.\n\nTo handle this we simply stop iterating at the first `NULL` argument.\n\n`argv` is also guaranteed to be `NULL`-terminated so any non-`NULL`\narguments after the first `NULL` can safely be ignored.\n\nFixes https://github.com/rust-lang/rust/issues/105999", "tree": {"sha": "2009cb0a2e7f4acd6a5fddda6a0d0e152ecc55af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2009cb0a2e7f4acd6a5fddda6a0d0e152ecc55af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e97203c3f893893611818997bbeb0116ded2605f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e97203c3f893893611818997bbeb0116ded2605f", "html_url": "https://github.com/rust-lang/rust/commit/e97203c3f893893611818997bbeb0116ded2605f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e97203c3f893893611818997bbeb0116ded2605f/comments", "author": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sdroege", "id": 301846, "node_id": "MDQ6VXNlcjMwMTg0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/301846?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sdroege", "html_url": "https://github.com/sdroege", "followers_url": "https://api.github.com/users/sdroege/followers", "following_url": "https://api.github.com/users/sdroege/following{/other_user}", "gists_url": "https://api.github.com/users/sdroege/gists{/gist_id}", "starred_url": "https://api.github.com/users/sdroege/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sdroege/subscriptions", "organizations_url": "https://api.github.com/users/sdroege/orgs", "repos_url": "https://api.github.com/users/sdroege/repos", "events_url": "https://api.github.com/users/sdroege/events{/privacy}", "received_events_url": "https://api.github.com/users/sdroege/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d12c3cea30b8ba4a09650a9e9c46fe9fbe25f0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d12c3cea30b8ba4a09650a9e9c46fe9fbe25f0b", "html_url": "https://github.com/rust-lang/rust/commit/1d12c3cea30b8ba4a09650a9e9c46fe9fbe25f0b"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "a5ce6d5120dad1fe88d312c359e500390d2fa54b", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e97203c3f893893611818997bbeb0116ded2605f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e97203c3f893893611818997bbeb0116ded2605f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=e97203c3f893893611818997bbeb0116ded2605f", "patch": "@@ -141,12 +141,28 @@ mod imp {\n             // list.\n             let argv = ARGV.load(Ordering::Relaxed);\n             let argc = if argv.is_null() { 0 } else { ARGC.load(Ordering::Relaxed) };\n-            (0..argc)\n-                .map(|i| {\n-                    let cstr = CStr::from_ptr(*argv.offset(i) as *const libc::c_char);\n-                    OsStringExt::from_vec(cstr.to_bytes().to_vec())\n-                })\n-                .collect()\n+            let mut args = Vec::with_capacity(argc as usize);\n+            for i in 0..argc {\n+                let ptr = *argv.offset(i) as *const libc::c_char;\n+\n+                // Some C commandline parsers (e.g. GLib and Qt) are replacing already\n+                // handled arguments in `argv` with `NULL` and move them to the end. That\n+                // means that `argc` might be bigger than the actual number of non-`NULL`\n+                // pointers in `argv` at this point.\n+                //\n+                // To handle this we simply stop iterating at the first `NULL` argument.\n+                //\n+                // `argv` is also guaranteed to be `NULL`-terminated so any non-`NULL` arguments\n+                // after the first `NULL` can safely be ignored.\n+                if ptr.is_null() {\n+                    break;\n+                }\n+\n+                let cstr = CStr::from_ptr(ptr);\n+                args.push(OsStringExt::from_vec(cstr.to_bytes().to_vec()));\n+            }\n+\n+            args\n         }\n     }\n }"}]}