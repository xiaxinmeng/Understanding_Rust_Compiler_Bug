{"sha": "44fb8b5e8834a89e0d9f925b8ff235eec10526e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZmI4YjVlODgzNGE4OWUwZDlmOTI1YjhmZjIzNWVlYzEwNTI2ZTM=", "commit": {"author": {"name": "ThibsG", "email": "thebaek1@hotmail.com", "date": "2020-01-10T16:14:17Z"}, "committer": {"name": "ThibsG", "email": "thebaek1@hotmail.com", "date": "2020-01-13T15:50:11Z"}, "message": "Extract visitor to utils", "tree": {"sha": "18a9cebaca8ae7832dc625624c5d6a6f5b682a9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18a9cebaca8ae7832dc625624c5d6a6f5b682a9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44fb8b5e8834a89e0d9f925b8ff235eec10526e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44fb8b5e8834a89e0d9f925b8ff235eec10526e3", "html_url": "https://github.com/rust-lang/rust/commit/44fb8b5e8834a89e0d9f925b8ff235eec10526e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44fb8b5e8834a89e0d9f925b8ff235eec10526e3/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c76b5b2a803030d9be4e66c540120d86e3868a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c76b5b2a803030d9be4e66c540120d86e3868a", "html_url": "https://github.com/rust-lang/rust/commit/d3c76b5b2a803030d9be4e66c540120d86e3868a"}], "stats": {"total": 150, "additions": 62, "deletions": 88}, "files": [{"sha": "b2d6c178b54ab76e96947e5f1f0eabd0217073f4", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 15, "deletions": 45, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/44fb8b5e8834a89e0d9f925b8ff235eec10526e3/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44fb8b5e8834a89e0d9f925b8ff235eec10526e3/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=44fb8b5e8834a89e0d9f925b8ff235eec10526e3", "patch": "@@ -1,37 +1,35 @@\n+use crate::consts::{constant, Constant};\n use crate::reexport::*;\n+use crate::utils::paths;\n+use crate::utils::usage::{is_unused, mutated_variables};\n+use crate::utils::{\n+    get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n+    is_integer_const, is_refutable, last_path_segment, match_trait_method, match_type, match_var, multispan_sugg,\n+    snippet, snippet_opt, snippet_with_applicability, span_help_and_lint, span_lint, span_lint_and_sugg,\n+    span_lint_and_then, SpanlessEq,\n+};\n+use crate::utils::{is_type_diagnostic_item, qpath_res, same_tys, sext, sugg};\n use if_chain::if_chain;\n use itertools::Itertools;\n+use rustc::hir::map::Map;\n use rustc::lint::in_external_macro;\n use rustc::middle::region;\n+use rustc::ty::{self, Ty};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id;\n use rustc_hir::intravisit::{walk_block, walk_expr, walk_pat, walk_stmt, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-// use rustc::middle::region::CodeExtent;\n-use crate::consts::{constant, Constant};\n-use crate::utils::usage::mutated_variables;\n-use crate::utils::{is_type_diagnostic_item, qpath_res, same_tys, sext, sugg};\n-use rustc::hir::map::Map;\n-use rustc::ty::{self, Ty};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::Applicability;\n use rustc_span::source_map::Span;\n use rustc_span::{BytePos, Symbol};\n use rustc_typeck::expr_use_visitor::*;\n use std::iter::{once, Iterator};\n use std::mem;\n use syntax::ast;\n \n-use crate::utils::paths;\n-use crate::utils::{\n-    get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n-    is_integer_const, is_refutable, last_path_segment, match_trait_method, match_type, match_var, multispan_sugg,\n-    snippet, snippet_opt, snippet_with_applicability, span_help_and_lint, span_lint, span_lint_and_sugg,\n-    span_lint_and_then, SpanlessEq,\n-};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for for-loops that manually copy items between\n     /// slices that could be optimized by having a memcpy.\n@@ -1689,39 +1687,11 @@ fn check_for_mutation(\n fn pat_is_wild<'tcx>(pat: &'tcx PatKind<'_>, body: &'tcx Expr<'_>) -> bool {\n     match *pat {\n         PatKind::Wild => true,\n-        PatKind::Binding(.., ident, None) if ident.as_str().starts_with('_') => {\n-            let mut visitor = UsedVisitor {\n-                var: ident.name,\n-                used: false,\n-            };\n-            walk_expr(&mut visitor, body);\n-            !visitor.used\n-        },\n+        PatKind::Binding(.., ident, None) if ident.as_str().starts_with('_') => is_unused(&ident, body),\n         _ => false,\n     }\n }\n \n-struct UsedVisitor {\n-    var: ast::Name, // var to look for\n-    used: bool,     // has the var been used otherwise?\n-}\n-\n-impl<'tcx> Visitor<'tcx> for UsedVisitor {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if match_var(expr, self.var) {\n-            self.used = true;\n-        } else {\n-            walk_expr(self, expr);\n-        }\n-    }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-}\n-\n struct LocalUsedVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n     local: HirId,"}, {"sha": "cddd479d7b7280b855a3b3c805c9a34aeecdcabf", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 43, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/44fb8b5e8834a89e0d9f925b8ff235eec10526e3/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44fb8b5e8834a89e0d9f925b8ff235eec10526e3/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=44fb8b5e8834a89e0d9f925b8ff235eec10526e3", "patch": "@@ -1,26 +1,24 @@\n use crate::consts::{constant, miri_to_const, Constant};\n use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n+use crate::utils::usage::is_unused;\n use crate::utils::{\n-    expr_block, is_allowed, is_expn_of, match_qpath, match_type, match_var, multispan_sugg, remove_blocks, snippet,\n+    expr_block, is_allowed, is_expn_of, is_wild, match_qpath, match_type, multispan_sugg, remove_blocks, snippet,\n     snippet_with_applicability, span_help_and_lint, span_lint_and_sugg, span_lint_and_then, span_note_and_lint,\n     walk_ptrs_ty,\n };\n use if_chain::if_chain;\n-use rustc::hir::map::Map;\n-use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc::lint::in_external_macro;\n use rustc::ty::{self, Ty};\n use rustc_errors::Applicability;\n use rustc_hir::def::CtorKind;\n-use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::Ident;\n use std::cmp::Ordering;\n use std::collections::Bound;\n-use syntax::ast::{self, LitKind};\n+use syntax::ast::LitKind;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for matches with a single arm where an `if let`\n@@ -464,43 +462,6 @@ fn check_overlapping_arms<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ex: &'tcx Expr<'\n     }\n }\n \n-fn is_wild<'tcx>(pat: &impl std::ops::Deref<Target = Pat<'tcx>>) -> bool {\n-    match pat.kind {\n-        PatKind::Wild => true,\n-        _ => false,\n-    }\n-}\n-\n-fn is_unused<'tcx>(ident: &'tcx Ident, body: &'tcx Expr<'_>) -> bool {\n-    let mut visitor = UsedVisitor {\n-        var: ident.name,\n-        used: false,\n-    };\n-    walk_expr(&mut visitor, body);\n-    !visitor.used\n-}\n-\n-struct UsedVisitor {\n-    var: ast::Name, // var to look for\n-    used: bool,     // has the var been used otherwise?\n-}\n-\n-impl<'tcx> Visitor<'tcx> for UsedVisitor {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if match_var(expr, self.var) {\n-            self.used = true;\n-        } else {\n-            walk_expr(self, expr);\n-        }\n-    }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-}\n-\n fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n     let ex_ty = walk_ptrs_ty(cx.tables.expr_ty(ex));\n     if match_type(cx, ex_ty, &paths::RESULT) {"}, {"sha": "eca2baa8c8098a97786b5034f744d41cd98412fa", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44fb8b5e8834a89e0d9f925b8ff235eec10526e3/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44fb8b5e8834a89e0d9f925b8ff235eec10526e3/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=44fb8b5e8834a89e0d9f925b8ff235eec10526e3", "patch": "@@ -127,6 +127,14 @@ pub fn is_present_in_source<T: LintContext>(cx: &T, span: Span) -> bool {\n     true\n }\n \n+/// Checks if given pattern is a wildcard (`_`)\n+pub fn is_wild<'tcx>(pat: &impl std::ops::Deref<Target = Pat<'tcx>>) -> bool {\n+    match pat.kind {\n+        PatKind::Wild => true,\n+        _ => false,\n+    }\n+}\n+\n /// Checks if type is struct, enum or union type with the given def path.\n pub fn match_type(cx: &LateContext<'_, '_>, ty: Ty<'_>, path: &[&str]) -> bool {\n     match ty.kind {"}, {"sha": "7939d7d0863c6a7cd6cd11427d2a3c0570d438f8", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/44fb8b5e8834a89e0d9f925b8ff235eec10526e3/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44fb8b5e8834a89e0d9f925b8ff235eec10526e3/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=44fb8b5e8834a89e0d9f925b8ff235eec10526e3", "patch": "@@ -1,9 +1,14 @@\n+use crate::utils::match_var;\n+use rustc::hir::map::Map;\n use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::Res;\n+use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::*;\n use rustc_lint::LateContext;\n+use rustc_span::symbol::Ident;\n use rustc_typeck::expr_use_visitor::*;\n+use syntax::ast;\n \n /// Returns a set of mutated local variable IDs, or `None` if mutations could not be determined.\n pub fn mutated_variables<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &'a LateContext<'a, 'tcx>) -> Option<FxHashSet<HirId>> {\n@@ -70,3 +75,33 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n         self.update(&cmt)\n     }\n }\n+\n+pub struct UsedVisitor {\n+    pub var: ast::Name, // var to look for\n+    pub used: bool,     // has the var been used otherwise?\n+}\n+\n+impl<'tcx> Visitor<'tcx> for UsedVisitor {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if match_var(expr, self.var) {\n+            self.used = true;\n+        } else {\n+            walk_expr(self, expr);\n+        }\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n+pub fn is_unused<'tcx>(ident: &'tcx Ident, body: &'tcx Expr<'_>) -> bool {\n+    let mut visitor = UsedVisitor {\n+        var: ident.name,\n+        used: false,\n+    };\n+    walk_expr(&mut visitor, body);\n+    !visitor.used\n+}"}]}