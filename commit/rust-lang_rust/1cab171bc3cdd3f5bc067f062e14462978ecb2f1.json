{"sha": "1cab171bc3cdd3f5bc067f062e14462978ecb2f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjYWIxNzFiYzNjZGQzZjViYzA2N2YwNjJlMTQ0NjI5NzhlY2IyZjE=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-04-10T22:57:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-10T22:57:16Z"}, "message": "Merge pull request #2605 from nrc/import-squelch\n\nCoalesce some of the import options", "tree": {"sha": "df68c4f485bbc7fa5d6c972c560679692a58ec16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df68c4f485bbc7fa5d6c972c560679692a58ec16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cab171bc3cdd3f5bc067f062e14462978ecb2f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJazUFMCRBK7hj4Ov3rIwAAdHIIAGw9rA92ywkCU0o5KFKZkxPD\nhEP40epLkpUUfKicS+SIAKDGkrzpnqrY4wKhg2ZZM8dYk3LH+KJT5I60JdG7c1J6\nL3q+UgHB2+NFo44mKyVgVPq/ZPegQ/XrWKAlt4sy/8nYSJqU9jhyc6dTLEuXYgk/\ncQFLwqk5Kck64fEFnv2PADUOw+NFBw/fSn4ozALDd2hx6G1oiQpfIfl9Y33Wky/M\nMlH2GEVa2krJqHd21iSg/nhy0uPNS7lDikDBkRtYlVUdggcoqLJ9JvUuiqk3asa5\n1oeSOE4sQT3FzCyUhlGzC1qggnJjaSbPddKiuWBhfPUH5L4IJ3mrN+p+aaikx/Q=\n=JFsk\n-----END PGP SIGNATURE-----\n", "payload": "tree df68c4f485bbc7fa5d6c972c560679692a58ec16\nparent 518ece227223cd6fc6d808c893b4404f450261f2\nparent 305c6405534f9b33f44ccb5b9de87bd00f006ef3\nauthor Nick Cameron <nrc@ncameron.org> 1523401036 +1200\ncommitter GitHub <noreply@github.com> 1523401036 +1200\n\nMerge pull request #2605 from nrc/import-squelch\n\nCoalesce some of the import options"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cab171bc3cdd3f5bc067f062e14462978ecb2f1", "html_url": "https://github.com/rust-lang/rust/commit/1cab171bc3cdd3f5bc067f062e14462978ecb2f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "518ece227223cd6fc6d808c893b4404f450261f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/518ece227223cd6fc6d808c893b4404f450261f2", "html_url": "https://github.com/rust-lang/rust/commit/518ece227223cd6fc6d808c893b4404f450261f2"}, {"sha": "305c6405534f9b33f44ccb5b9de87bd00f006ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/305c6405534f9b33f44ccb5b9de87bd00f006ef3", "html_url": "https://github.com/rust-lang/rust/commit/305c6405534f9b33f44ccb5b9de87bd00f006ef3"}], "stats": {"total": 340, "additions": 46, "deletions": 294}, "files": [{"sha": "26d540b70b5ddf02b58e342bc89f2d12e4edd36e", "filename": "Configurations.md", "status": "modified", "additions": 4, "deletions": 116, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=1cab171bc3cdd3f5bc067f062e14462978ecb2f1", "patch": "@@ -6,7 +6,7 @@ A possible content of `rustfmt.toml` or `.rustfmt.toml` might look like this:\n \n ```toml\n indent_style = \"Block\"\n-reorder_imported_names = true\n+reorder_imports = false\n ```\n \n Each configuration option is either stable or unstable.\n@@ -1240,33 +1240,13 @@ fn dolor() -> usize {}\n fn adipiscing() -> usize {}\n ```\n \n-## `reorder_imported_names`\n-\n-Reorder lists of names in import statements alphabetically\n-\n-- **Default value**: `false`\n-- **Possible values**: `true`, `false`\n-- **Stable**: No\n-\n-#### `false` (default):\n-\n-```rust\n-use super::{lorem, ipsum, dolor, sit};\n-```\n-\n-#### `true`:\n-\n-```rust\n-use super::{dolor, ipsum, lorem, sit};\n-```\n-\n-See also [`reorder_imports`](#reorder_imports).\n \n ## `reorder_imports`\n \n-Reorder import statements alphabetically\n+Reorder import and extern crate statements alphabetically in groups (a group is\n+separated by a newline).\n \n-- **Default value**: `false`\n+- **Default value**: `true`\n - **Possible values**: `true`, `false`\n - **Stable**: No\n \n@@ -1288,98 +1268,6 @@ use lorem;\n use sit;\n ```\n \n-See also [`reorder_imported_names`](#reorder_imported_names), [`reorder_imports_in_group`](#reorder_imports_in_group).\n-\n-## `reorder_imports_in_group`\n-\n-Reorder import statements in group\n-\n-- **Default value**: `false`\n-- **Possible values**: `true`, `false`\n-- **Stable**: No\n-\n-**Note:** This option takes effect only when [`reorder_imports`](#reorder_imports) is set to `true`.\n-\n-#### `true` (default):\n-\n-```rust\n-use std::io;\n-use std::mem;\n-\n-use dolor;\n-use ipsum;\n-use lorem;\n-use sit;\n-```\n-\n-#### `false`:\n-\n-\n-```rust\n-use dolor;\n-use ipsum;\n-use lorem;\n-use sit;\n-use std::io;\n-use std::mem;\n-```\n-\n-See also [`reorder_imports`](#reorder_imports).\n-\n-## `reorder_extern_crates`\n-\n-Reorder `extern crate` statements alphabetically\n-\n-- **Default value**: `true`\n-- **Possible values**: `true`, `false`\n-- **Stable**: No\n-\n-#### `true` (default):\n-\n-```rust\n-extern crate dolor;\n-extern crate ipsum;\n-extern crate lorem;\n-extern crate sit;\n-```\n-\n-#### `false`:\n-\n-```rust\n-extern crate lorem;\n-extern crate ipsum;\n-\n-extern crate dolor;\n-extern crate sit;\n-```\n-\n-See also [`reorder_extern_crates_in_group`](#reorder_extern_crates_in_group).\n-\n-## `reorder_extern_crates_in_group`\n-\n-Reorder `extern crate` statements in group\n-\n-- **Default value**: `true`\n-- **Possible values**: `true`, `false`\n-- **Stable**: No\n-\n-#### `false` (default):\n-\n-This value has no influence beyond the effect of the [`reorder_extern_crates`](#reorder_extern_crates) option. Set [`reorder_extern_crates`](#reorder_extern_crates) to `false` if you do not want `extern crate` groups to be collapsed and ordered.\n-\n-#### `true`:\n-\n-**Note:** This only takes effect when [`reorder_extern_crates`](#reorder_extern_crates) is set to `true`.\n-\n-```rust\n-extern crate a;\n-extern crate b;\n-\n-extern crate dolor;\n-extern crate ipsum;\n-extern crate lorem;\n-extern crate sit;\n-```\n \n ## `reorder_modules`\n "}, {"sha": "62d025ad5a12188fc4a3abbc901a19f36d9122ab", "filename": "src/config/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=1cab171bc3cdd3f5bc067f062e14462978ecb2f1", "patch": "@@ -68,13 +68,8 @@ create_config! {\n     imports_layout: ListTactic, ListTactic::Mixed, false, \"Item layout inside a import block\";\n \n     // Ordering\n-    reorder_extern_crates: bool, true, false, \"Reorder extern crate statements alphabetically\";\n-    reorder_extern_crates_in_group: bool, true, false, \"Reorder extern crate statements in group\";\n-    reorder_imports: bool, true, false, \"Reorder import statements alphabetically\";\n-    reorder_imports_in_group: bool, true, false, \"Reorder import statements in group\";\n-    reorder_imported_names: bool, true, false,\n-        \"Reorder lists of names in import statements alphabetically\";\n-    reorder_modules: bool, true, false, \"Reorder module statemtents alphabetically in group\";\n+    reorder_imports: bool, true, false, \"Reorder import and extern crate statements alphabetically\";\n+    reorder_modules: bool, true, false, \"Reorder module statements alphabetically in group\";\n     reorder_impl_items: bool, false, false, \"Reorder impl items\";\n \n     // Spaces around punctuation"}, {"sha": "48b6af7fd4624959168ee809ae0cc72c0a441287", "filename": "src/imports.rs", "status": "modified", "additions": 34, "deletions": 46, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=1cab171bc3cdd3f5bc067f062e14462978ecb2f1", "patch": "@@ -185,7 +185,7 @@ impl UseTree {\n                     } else {\n                         Some(item.attrs.clone())\n                     },\n-                ).normalize(context.config.reorder_imported_names()),\n+                ).normalize(),\n             ),\n             _ => None,\n         }\n@@ -271,7 +271,7 @@ impl UseTree {\n     }\n \n     // Do the adjustments that rustfmt does elsewhere to use paths.\n-    pub fn normalize(mut self, do_sort: bool) -> UseTree {\n+    pub fn normalize(mut self) -> UseTree {\n         let mut last = self.path.pop().expect(\"Empty use tree?\");\n         // Hack around borrow checker.\n         let mut normalize_sole_list = false;\n@@ -340,7 +340,7 @@ impl UseTree {\n                     for seg in &list[0].path {\n                         self.path.push(seg.clone());\n                     }\n-                    return self.normalize(do_sort);\n+                    return self.normalize();\n                 }\n                 _ => unreachable!(),\n             }\n@@ -349,11 +349,9 @@ impl UseTree {\n         // Recursively normalize elements of a list use (including sorting the list).\n         if let UseSegment::List(list) = last {\n             let mut list = list.into_iter()\n-                .map(|ut| ut.normalize(do_sort))\n+                .map(|ut| ut.normalize())\n                 .collect::<Vec<_>>();\n-            if do_sort {\n-                list.sort();\n-            }\n+            list.sort();\n             last = UseSegment::List(list);\n         }\n \n@@ -485,6 +483,7 @@ fn rewrite_nested_use_tree(\n         );\n         (tactic, remaining_width)\n     };\n+\n     let ends_with_newline = context.config.imports_indent() == IndentStyle::Block\n         && tactic != DefinitiveListTactic::Horizontal;\n     let fmt = ListFormatting {\n@@ -685,75 +684,64 @@ mod test {\n \n     #[test]\n     fn test_use_tree_normalize() {\n+        assert_eq!(parse_use_tree(\"a::self\").normalize(), parse_use_tree(\"a\"));\n         assert_eq!(\n-            parse_use_tree(\"a::self\").normalize(true),\n-            parse_use_tree(\"a\")\n-        );\n-        assert_eq!(\n-            parse_use_tree(\"a::self as foo\").normalize(true),\n+            parse_use_tree(\"a::self as foo\").normalize(),\n             parse_use_tree(\"a as foo\")\n         );\n+        assert_eq!(parse_use_tree(\"a::{self}\").normalize(), parse_use_tree(\"a\"));\n+        assert_eq!(parse_use_tree(\"a::{b}\").normalize(), parse_use_tree(\"a::b\"));\n         assert_eq!(\n-            parse_use_tree(\"a::{self}\").normalize(true),\n-            parse_use_tree(\"a\")\n-        );\n-        assert_eq!(\n-            parse_use_tree(\"a::{b}\").normalize(true),\n-            parse_use_tree(\"a::b\")\n-        );\n-        assert_eq!(\n-            parse_use_tree(\"a::{b, c::self}\").normalize(true),\n+            parse_use_tree(\"a::{b, c::self}\").normalize(),\n             parse_use_tree(\"a::{b, c}\")\n         );\n         assert_eq!(\n-            parse_use_tree(\"a::{b as bar, c::self}\").normalize(true),\n+            parse_use_tree(\"a::{b as bar, c::self}\").normalize(),\n             parse_use_tree(\"a::{b as bar, c}\")\n         );\n     }\n \n     #[test]\n     fn test_use_tree_ord() {\n-        assert!(parse_use_tree(\"a\").normalize(true) < parse_use_tree(\"aa\").normalize(true));\n-        assert!(parse_use_tree(\"a\").normalize(true) < parse_use_tree(\"a::a\").normalize(true));\n-        assert!(parse_use_tree(\"a\").normalize(true) < parse_use_tree(\"*\").normalize(true));\n-        assert!(parse_use_tree(\"a\").normalize(true) < parse_use_tree(\"{a, b}\").normalize(true));\n-        assert!(parse_use_tree(\"*\").normalize(true) < parse_use_tree(\"{a, b}\").normalize(true));\n+        assert!(parse_use_tree(\"a\").normalize() < parse_use_tree(\"aa\").normalize());\n+        assert!(parse_use_tree(\"a\").normalize() < parse_use_tree(\"a::a\").normalize());\n+        assert!(parse_use_tree(\"a\").normalize() < parse_use_tree(\"*\").normalize());\n+        assert!(parse_use_tree(\"a\").normalize() < parse_use_tree(\"{a, b}\").normalize());\n+        assert!(parse_use_tree(\"*\").normalize() < parse_use_tree(\"{a, b}\").normalize());\n \n         assert!(\n-            parse_use_tree(\"aaaaaaaaaaaaaaa::{bb, cc, dddddddd}\").normalize(true)\n-                < parse_use_tree(\"aaaaaaaaaaaaaaa::{bb, cc, ddddddddd}\").normalize(true)\n-        );\n-        assert!(\n-            parse_use_tree(\"serde::de::{Deserialize}\").normalize(true)\n-                < parse_use_tree(\"serde_json\").normalize(true)\n+            parse_use_tree(\"aaaaaaaaaaaaaaa::{bb, cc, dddddddd}\").normalize()\n+                < parse_use_tree(\"aaaaaaaaaaaaaaa::{bb, cc, ddddddddd}\").normalize()\n         );\n         assert!(\n-            parse_use_tree(\"a::b::c\").normalize(true) < parse_use_tree(\"a::b::*\").normalize(true)\n+            parse_use_tree(\"serde::de::{Deserialize}\").normalize()\n+                < parse_use_tree(\"serde_json\").normalize()\n         );\n+        assert!(parse_use_tree(\"a::b::c\").normalize() < parse_use_tree(\"a::b::*\").normalize());\n         assert!(\n-            parse_use_tree(\"foo::{Bar, Baz}\").normalize(true)\n-                < parse_use_tree(\"{Bar, Baz}\").normalize(true)\n+            parse_use_tree(\"foo::{Bar, Baz}\").normalize()\n+                < parse_use_tree(\"{Bar, Baz}\").normalize()\n         );\n \n         assert!(\n-            parse_use_tree(\"foo::{self as bar}\").normalize(true)\n-                < parse_use_tree(\"foo::{qux as bar}\").normalize(true)\n+            parse_use_tree(\"foo::{self as bar}\").normalize()\n+                < parse_use_tree(\"foo::{qux as bar}\").normalize()\n         );\n         assert!(\n-            parse_use_tree(\"foo::{qux as bar}\").normalize(true)\n-                < parse_use_tree(\"foo::{baz, qux as bar}\").normalize(true)\n+            parse_use_tree(\"foo::{qux as bar}\").normalize()\n+                < parse_use_tree(\"foo::{baz, qux as bar}\").normalize()\n         );\n         assert!(\n-            parse_use_tree(\"foo::{self as bar, baz}\").normalize(true)\n-                < parse_use_tree(\"foo::{baz, qux as bar}\").normalize(true)\n+            parse_use_tree(\"foo::{self as bar, baz}\").normalize()\n+                < parse_use_tree(\"foo::{baz, qux as bar}\").normalize()\n         );\n \n-        assert!(parse_use_tree(\"foo\").normalize(true) < parse_use_tree(\"Foo\").normalize(true));\n-        assert!(parse_use_tree(\"foo\").normalize(true) < parse_use_tree(\"foo::Bar\").normalize(true));\n+        assert!(parse_use_tree(\"foo\").normalize() < parse_use_tree(\"Foo\").normalize());\n+        assert!(parse_use_tree(\"foo\").normalize() < parse_use_tree(\"foo::Bar\").normalize());\n \n         assert!(\n-            parse_use_tree(\"std::cmp::{d, c, b, a}\").normalize(true)\n-                < parse_use_tree(\"std::cmp::{b, e, g, f}\").normalize(true)\n+            parse_use_tree(\"std::cmp::{d, c, b, a}\").normalize()\n+                < parse_use_tree(\"std::cmp::{b, e, g, f}\").normalize()\n         );\n     }\n }"}, {"sha": "ed307e679ddde16ffa8d937c5b9f052518ea18c9", "filename": "src/reorder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=1cab171bc3cdd3f5bc067f062e14462978ecb2f1", "patch": "@@ -198,18 +198,18 @@ impl ReorderableItemKind {\n \n     pub fn is_reorderable(&self, config: &Config) -> bool {\n         match *self {\n-            ReorderableItemKind::ExternCrate => config.reorder_extern_crates(),\n+            ReorderableItemKind::ExternCrate => config.reorder_imports(),\n             ReorderableItemKind::Mod => config.reorder_modules(),\n             ReorderableItemKind::Use => config.reorder_imports(),\n             ReorderableItemKind::Other => false,\n         }\n     }\n \n-    pub fn in_group(&self, config: &Config) -> bool {\n+    pub fn in_group(&self) -> bool {\n         match *self {\n-            ReorderableItemKind::ExternCrate => config.reorder_extern_crates_in_group(),\n-            ReorderableItemKind::Mod => config.reorder_modules(),\n-            ReorderableItemKind::Use => config.reorder_imports_in_group(),\n+            ReorderableItemKind::ExternCrate\n+            | ReorderableItemKind::Mod\n+            | ReorderableItemKind::Use => true,\n             ReorderableItemKind::Other => false,\n         }\n     }\n@@ -268,7 +268,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             let item_kind = ReorderableItemKind::from(items[0]);\n             if item_kind.is_reorderable(self.config) {\n                 let visited_items_num =\n-                    self.walk_reorderable_items(items, item_kind, item_kind.in_group(self.config));\n+                    self.walk_reorderable_items(items, item_kind, item_kind.in_group());\n                 let (_, rest) = items.split_at(visited_items_num);\n                 items = rest;\n             } else {"}, {"sha": "6bef132e5c322599cf2d4ccc52fb882316599853", "filename": "tests/source/configs/reorder_extern_crates/false.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Fsource%2Fconfigs%2Freorder_extern_crates%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Fsource%2Fconfigs%2Freorder_extern_crates%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_extern_crates%2Ffalse.rs?ref=518ece227223cd6fc6d808c893b4404f450261f2", "patch": "@@ -1,11 +0,0 @@\n-// rustfmt-reorder_extern_crates: false\n-\n-extern crate foo;\n-extern crate bar;\n-extern crate foobar;\n-\n-#[macro_use]\n-extern crate nom;\n-extern crate regex;\n-#[macro_use]\n-extern crate log;"}, {"sha": "bdf00f57cdada8dbb27d1dddb5dad45f164ec3ac", "filename": "tests/source/configs/reorder_extern_crates/true.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Fsource%2Fconfigs%2Freorder_extern_crates%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Fsource%2Fconfigs%2Freorder_extern_crates%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_extern_crates%2Ftrue.rs?ref=518ece227223cd6fc6d808c893b4404f450261f2", "patch": "@@ -1,11 +0,0 @@\n-// rustfmt-reorder_extern_crates: true\n-\n-extern crate foo;\n-extern crate bar;\n-extern crate foobar;\n-\n-#[macro_use]\n-extern crate nom;\n-extern crate regex;\n-#[macro_use]\n-extern crate log;"}, {"sha": "91db89ceeaa2238c43837b2e71979b871f2dd022", "filename": "tests/source/configs/reorder_imported_names/false.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Fsource%2Fconfigs%2Freorder_imported_names%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Fsource%2Fconfigs%2Freorder_imported_names%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_imported_names%2Ffalse.rs?ref=518ece227223cd6fc6d808c893b4404f450261f2", "patch": "@@ -1,4 +0,0 @@\n-// rustfmt-reorder_imported_names: false\n-// Reorder imported names\n-\n-use super::{lorem, ipsum, dolor, sit};"}, {"sha": "69da6186d5a0545288c8f958da720a57142517c6", "filename": "tests/source/configs/reorder_imported_names/true.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Fsource%2Fconfigs%2Freorder_imported_names%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Fsource%2Fconfigs%2Freorder_imported_names%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_imported_names%2Ftrue.rs?ref=518ece227223cd6fc6d808c893b4404f450261f2", "patch": "@@ -1,4 +0,0 @@\n-// rustfmt-reorder_imported_names: true\n-// Reorder imported names\n-\n-use super::{lorem, ipsum, dolor, sit};"}, {"sha": "87711bb142b4c418b3a491d2ed4c9d0c15cfd103", "filename": "tests/source/configs/reorder_imports_in_group/false.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Fsource%2Fconfigs%2Freorder_imports_in_group%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Fsource%2Fconfigs%2Freorder_imports_in_group%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_imports_in_group%2Ffalse.rs?ref=518ece227223cd6fc6d808c893b4404f450261f2", "patch": "@@ -1,13 +0,0 @@\n-// rustfmt-reorder_imports: true\n-// rustfmt-reorder_imports_in_group: false\n-// Reorder imports in group\n-\n-/// This comment should stay with `use std::mem;`\n-use std::mem;\n-use std::io;\n-\n-use lorem;\n-/// This comment should stay with `use ipsum;`\n-use ipsum;\n-use dolor;\n-use sit;"}, {"sha": "b5690b89cc0ef2075ef9e899b0ae644a558d5a2a", "filename": "tests/source/configs/reorder_imports_in_group/true.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Fsource%2Fconfigs%2Freorder_imports_in_group%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Fsource%2Fconfigs%2Freorder_imports_in_group%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Freorder_imports_in_group%2Ftrue.rs?ref=518ece227223cd6fc6d808c893b4404f450261f2", "patch": "@@ -1,13 +0,0 @@\n-// rustfmt-reorder_imports: true\n-// rustfmt-reorder_imports_in_group: true\n-// Reorder imports in group\n-\n-/// This comment should stay with `use std::mem;`\n-use std::mem;\n-use std::io;\n-\n-use lorem;\n-/// This comment should stay with `use ipsum;`\n-use ipsum;\n-use dolor;\n-use sit;"}, {"sha": "b6380f31c6104117067a1e72098389ef838d11d0", "filename": "tests/source/imports-reorder-lines-and-items.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/tests%2Fsource%2Fimports-reorder-lines-and-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/tests%2Fsource%2Fimports-reorder-lines-and-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports-reorder-lines-and-items.rs?ref=1cab171bc3cdd3f5bc067f062e14462978ecb2f1", "patch": "@@ -1,6 +1,3 @@\n-// rustfmt-reorder_imports: true\n-// rustfmt-reorder_imported_names: true\n-\n /// This comment should stay with `use std::str;`\n use std::str;\n use std::cmp::{d, c, b, a};"}, {"sha": "cbe9d6ca78ad7dbf8ce5152cba81ebd417a7946d", "filename": "tests/source/imports-reorder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/tests%2Fsource%2Fimports-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/tests%2Fsource%2Fimports-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports-reorder.rs?ref=1cab171bc3cdd3f5bc067f062e14462978ecb2f1", "patch": "@@ -1,5 +1,4 @@\n // rustfmt-normalize_comments: true\n-// rustfmt-reorder_imported_names: true\n \n use path::{C,/*A*/ A, B /* B */, self /* self */};\n "}, {"sha": "6bef132e5c322599cf2d4ccc52fb882316599853", "filename": "tests/target/configs/reorder_extern_crates/false.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Ftarget%2Fconfigs%2Freorder_extern_crates%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Ftarget%2Fconfigs%2Freorder_extern_crates%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_extern_crates%2Ffalse.rs?ref=518ece227223cd6fc6d808c893b4404f450261f2", "patch": "@@ -1,11 +0,0 @@\n-// rustfmt-reorder_extern_crates: false\n-\n-extern crate foo;\n-extern crate bar;\n-extern crate foobar;\n-\n-#[macro_use]\n-extern crate nom;\n-extern crate regex;\n-#[macro_use]\n-extern crate log;"}, {"sha": "86aba38b5d11c0114442f53635106edf649f7e0c", "filename": "tests/target/configs/reorder_extern_crates/true.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Ftarget%2Fconfigs%2Freorder_extern_crates%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Ftarget%2Fconfigs%2Freorder_extern_crates%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_extern_crates%2Ftrue.rs?ref=518ece227223cd6fc6d808c893b4404f450261f2", "patch": "@@ -1,11 +0,0 @@\n-// rustfmt-reorder_extern_crates: true\n-\n-extern crate bar;\n-extern crate foo;\n-extern crate foobar;\n-\n-#[macro_use]\n-extern crate nom;\n-extern crate regex;\n-#[macro_use]\n-extern crate log;"}, {"sha": "91db89ceeaa2238c43837b2e71979b871f2dd022", "filename": "tests/target/configs/reorder_imported_names/false.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Ftarget%2Fconfigs%2Freorder_imported_names%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Ftarget%2Fconfigs%2Freorder_imported_names%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_imported_names%2Ffalse.rs?ref=518ece227223cd6fc6d808c893b4404f450261f2", "patch": "@@ -1,4 +0,0 @@\n-// rustfmt-reorder_imported_names: false\n-// Reorder imported names\n-\n-use super::{lorem, ipsum, dolor, sit};"}, {"sha": "59f55f4718a2c7442950e683e4bb74285f6c4dcd", "filename": "tests/target/configs/reorder_imported_names/true.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Ftarget%2Fconfigs%2Freorder_imported_names%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Ftarget%2Fconfigs%2Freorder_imported_names%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_imported_names%2Ftrue.rs?ref=518ece227223cd6fc6d808c893b4404f450261f2", "patch": "@@ -1,4 +0,0 @@\n-// rustfmt-reorder_imported_names: true\n-// Reorder imported names\n-\n-use super::{dolor, ipsum, lorem, sit};"}, {"sha": "29460da50aaf230f88475ffd8cf05af95fd1eb72", "filename": "tests/target/configs/reorder_imports_in_group/false.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Ftarget%2Fconfigs%2Freorder_imports_in_group%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Ftarget%2Fconfigs%2Freorder_imports_in_group%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_imports_in_group%2Ffalse.rs?ref=518ece227223cd6fc6d808c893b4404f450261f2", "patch": "@@ -1,12 +0,0 @@\n-// rustfmt-reorder_imports: true\n-// rustfmt-reorder_imports_in_group: false\n-// Reorder imports in group\n-\n-use dolor;\n-/// This comment should stay with `use ipsum;`\n-use ipsum;\n-use lorem;\n-use sit;\n-use std::io;\n-/// This comment should stay with `use std::mem;`\n-use std::mem;"}, {"sha": "c5e353662b50190aae13d08efc1be89966f73c18", "filename": "tests/target/configs/reorder_imports_in_group/true.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Ftarget%2Fconfigs%2Freorder_imports_in_group%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518ece227223cd6fc6d808c893b4404f450261f2/tests%2Ftarget%2Fconfigs%2Freorder_imports_in_group%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Freorder_imports_in_group%2Ftrue.rs?ref=518ece227223cd6fc6d808c893b4404f450261f2", "patch": "@@ -1,13 +0,0 @@\n-// rustfmt-reorder_imports: true\n-// rustfmt-reorder_imports_in_group: true\n-// Reorder imports in group\n-\n-use std::io;\n-/// This comment should stay with `use std::mem;`\n-use std::mem;\n-\n-use dolor;\n-/// This comment should stay with `use ipsum;`\n-use ipsum;\n-use lorem;\n-use sit;"}, {"sha": "98a5afe43480a9e2ee85311a3ea1ed00f078bcdc", "filename": "tests/target/imports-reorder-lines-and-items.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/tests%2Ftarget%2Fimports-reorder-lines-and-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/tests%2Ftarget%2Fimports-reorder-lines-and-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports-reorder-lines-and-items.rs?ref=1cab171bc3cdd3f5bc067f062e14462978ecb2f1", "patch": "@@ -1,6 +1,3 @@\n-// rustfmt-reorder_imports: true\n-// rustfmt-reorder_imported_names: true\n-\n use std::cmp::{a, b, c, d};\n use std::ddd::aaa;\n use std::ddd::{a, b, c as g, d as p};"}, {"sha": "84e97c0224f831209afc9ca395cf4e3901ec31be", "filename": "tests/target/imports-reorder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/tests%2Ftarget%2Fimports-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cab171bc3cdd3f5bc067f062e14462978ecb2f1/tests%2Ftarget%2Fimports-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports-reorder.rs?ref=1cab171bc3cdd3f5bc067f062e14462978ecb2f1", "patch": "@@ -1,5 +1,4 @@\n // rustfmt-normalize_comments: true\n-// rustfmt-reorder_imported_names: true\n \n use path::{self /* self */, /* A */ A, B /* B */, C};\n "}]}