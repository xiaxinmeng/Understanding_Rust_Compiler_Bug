{"sha": "ee02661474abad0c91b8031c920904ab14f30c7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMDI2NjE0NzRhYmFkMGM5MWI4MDMxYzkyMDkwNGFiMTRmMzBjN2U=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-16T02:59:56Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-16T20:56:44Z"}, "message": "Split parser logic to its own method", "tree": {"sha": "e2828299db17c31df92cbc20a69550d2e6e47b7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2828299db17c31df92cbc20a69550d2e6e47b7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee02661474abad0c91b8031c920904ab14f30c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee02661474abad0c91b8031c920904ab14f30c7e", "html_url": "https://github.com/rust-lang/rust/commit/ee02661474abad0c91b8031c920904ab14f30c7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee02661474abad0c91b8031c920904ab14f30c7e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d763faf92198e3f0c851388c71d2bb8a2f04afd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d763faf92198e3f0c851388c71d2bb8a2f04afd9", "html_url": "https://github.com/rust-lang/rust/commit/d763faf92198e3f0c851388c71d2bb8a2f04afd9"}], "stats": {"total": 183, "additions": 96, "deletions": 87}, "files": [{"sha": "83bfd93d0664ab641c9e6b20600f6ce560dddf43", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 96, "deletions": 87, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/ee02661474abad0c91b8031c920904ab14f30c7e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee02661474abad0c91b8031c920904ab14f30c7e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ee02661474abad0c91b8031c920904ab14f30c7e", "patch": "@@ -2630,93 +2630,9 @@ impl<'a> Parser<'a> {\n                     return Err(db);\n                 } else if self.span.rust_2018() && self.eat_keyword(keywords::Await) {\n                     let await_sp = self.prev_span;\n-                    match self.token {\n-                        token::Not => {\n-                            // FIXME: make this an error when `await!` is no longer supported\n-                            // https://github.com/rust-lang/rust/issues/60610\n-                            self.expect(&token::Not)?;\n-                            self.expect(&token::OpenDelim(token::Paren))?;\n-                            let expr = self.parse_expr().map_err(|mut err| {\n-                                err.span_label(\n-                                    await_sp,\n-                                    \"while parsing this await macro call\",\n-                                );\n-                                err\n-                            })?;\n-                            self.expect(&token::CloseDelim(token::Paren))?;\n-                            ex = ExprKind::Await(ast::AwaitOrigin::MacroLike, expr);\n-                        }\n-                        token::Question => {\n-                            // Handle `await? <expr>`\n-                            self.bump(); // `?`\n-                            let expr = self.parse_expr().map_err(|mut err| {\n-                                err.span_label(\n-                                    await_sp,\n-                                    \"while parsing this incorrect await statement\",\n-                                );\n-                                err\n-                            })?;\n-                            let sp = lo.to(expr.span);\n-                            let expr_str = self.sess.source_map().span_to_snippet(expr.span)\n-                                .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n-                            let expr = self.mk_expr(\n-                                sp,\n-                                ExprKind::Await(ast::AwaitOrigin::FieldLike, expr),\n-                                ThinVec::new(),\n-                            );\n-                            hi = sp;\n-                            ex = ExprKind::Try(expr);\n-                            let mut err = self.struct_span_err(\n-                                await_sp,\n-                                \"incorrect use of `await`\",\n-                            );\n-                            err.span_suggestion(\n-                                sp,\n-                                \"`await` is not a statement\",\n-                                format!(\"{}.await?\", expr_str),\n-                                Applicability::MachineApplicable,\n-                            );\n-                            err.emit();\n-                        }\n-                        ref t => {\n-                            // Handle `await <expr>`\n-                            let expr = if t == &token::OpenDelim(token::Brace) {\n-                                // Handle `await { <expr> }`\n-                                // this needs to be handled separatedly from the next arm to avoid\n-                                // interpreting `await { <expr> }?` as `<expr>?.await`\n-                                self.parse_block_expr(\n-                                    None,\n-                                    self.span,\n-                                    BlockCheckMode::Default,\n-                                    ThinVec::new(),\n-                                )\n-                            } else {\n-                                self.parse_expr()\n-                            }.map_err(|mut err| {\n-                                err.span_label(\n-                                    await_sp,\n-                                    \"while parsing this incorrect await statement\",\n-                                );\n-                                err\n-                            })?;\n-                            let expr_str = self.sess.source_map().span_to_snippet(expr.span)\n-                                .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n-                            let sp = lo.to(expr.span);\n-                            hi = sp;\n-                            ex = ExprKind::Await(ast::AwaitOrigin::FieldLike, expr);\n-                            let mut err = self.struct_span_err(\n-                                await_sp,\n-                                \"incorrect use of `await`\",\n-                            );\n-                            err.span_suggestion(\n-                                sp,\n-                                \"`await` is not a statement\",\n-                                format!(\"{}.await\", expr_str),\n-                                Applicability::MachineApplicable,\n-                            );\n-                            err.emit();\n-                        }\n-                    }\n+                    let e = self.parse_async_macro_or_stmt(lo, await_sp)?;\n+                    hi = e.0;\n+                    ex = e.1;\n                 } else if self.token.is_path_start() {\n                     let path = self.parse_path(PathStyle::Expr)?;\n \n@@ -2781,6 +2697,99 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n+    fn parse_async_macro_or_stmt(\n+        &mut self,\n+        lo: Span,\n+        await_sp: Span,\n+    ) -> PResult<'a, (Span, ExprKind)> {\n+        Ok(match self.token {\n+            token::Not => {\n+                // Handle correct `await!(<expr>)`\n+                // FIXME: make this an error when `await!` is no longer supported\n+                // https://github.com/rust-lang/rust/issues/60610\n+                self.expect(&token::Not)?;\n+                self.expect(&token::OpenDelim(token::Paren))?;\n+                let expr = self.parse_expr().map_err(|mut err| {\n+                    err.span_label(\n+                        await_sp,\n+                        \"while parsing this await macro call\",\n+                    );\n+                    err\n+                })?;\n+                self.expect(&token::CloseDelim(token::Paren))?;\n+                (expr.span, ExprKind::Await(ast::AwaitOrigin::MacroLike, expr))\n+            }\n+            token::Question => {\n+                // Handle `await? <expr>`\n+                self.bump(); // `?`\n+                let expr = self.parse_expr().map_err(|mut err| {\n+                    err.span_label(\n+                        await_sp,\n+                        \"while parsing this incorrect await statement\",\n+                    );\n+                    err\n+                })?;\n+                let sp = lo.to(expr.span);\n+                let expr_str = self.sess.source_map().span_to_snippet(expr.span)\n+                    .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n+                let expr = self.mk_expr(\n+                    sp,\n+                    ExprKind::Await(ast::AwaitOrigin::FieldLike, expr),\n+                    ThinVec::new(),\n+                );\n+                let mut err = self.struct_span_err(\n+                    await_sp,\n+                    \"incorrect use of `await`\",\n+                );\n+                err.span_suggestion(\n+                    sp,\n+                    \"`await` is not a statement\",\n+                    format!(\"{}.await?\", expr_str),\n+                    Applicability::MachineApplicable,\n+                );\n+                err.emit();\n+                (sp, ExprKind::Try(expr))\n+            }\n+            ref t => {\n+                // Handle `await <expr>`\n+                let expr = if t == &token::OpenDelim(token::Brace) {\n+                    // Handle `await { <expr> }`\n+                    // this needs to be handled separatedly from the next arm to avoid\n+                    // interpreting `await { <expr> }?` as `<expr>?.await`\n+                    self.parse_block_expr(\n+                        None,\n+                        self.span,\n+                        BlockCheckMode::Default,\n+                        ThinVec::new(),\n+                    )\n+                } else {\n+                    self.parse_expr()\n+                }.map_err(|mut err| {\n+                    err.span_label(\n+                        await_sp,\n+                        \"while parsing this incorrect await statement\",\n+                    );\n+                    err\n+                })?;\n+                let expr_str = self.sess.source_map().span_to_snippet(expr.span)\n+                    .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n+                let sp = lo.to(expr.span);\n+                let mut err = self.struct_span_err(\n+                    await_sp,\n+                    \"incorrect use of `await`\",\n+                );\n+                err.span_suggestion(\n+                    sp,\n+                    \"`await` is not a statement\",\n+                    format!(\"{}.await\", expr_str),\n+                    Applicability::MachineApplicable,\n+                );\n+                err.emit();\n+                (sp, ExprKind::Await(ast::AwaitOrigin::FieldLike, expr))\n+            }\n+        })\n+    }\n+\n     fn maybe_parse_struct_expr(\n         &mut self,\n         lo: Span,"}]}