{"sha": "9c12c7c7f5462b56bad567112f8680dc81f9d68d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMTJjN2M3ZjU0NjJiNTZiYWQ1NjcxMTJmODY4MGRjODFmOWQ2OGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-21T21:11:40Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-29T20:51:07Z"}, "message": "basic builds function", "tree": {"sha": "0e008cd473fdd2d7a2d589701a1d6729aac3e554", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e008cd473fdd2d7a2d589701a1d6729aac3e554"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c12c7c7f5462b56bad567112f8680dc81f9d68d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c12c7c7f5462b56bad567112f8680dc81f9d68d", "html_url": "https://github.com/rust-lang/rust/commit/9c12c7c7f5462b56bad567112f8680dc81f9d68d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c12c7c7f5462b56bad567112f8680dc81f9d68d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "579399f92f991bb9cb9f9af55bfca523d66dec4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/579399f92f991bb9cb9f9af55bfca523d66dec4f", "html_url": "https://github.com/rust-lang/rust/commit/579399f92f991bb9cb9f9af55bfca523d66dec4f"}], "stats": {"total": 696, "additions": 372, "deletions": 324}, "files": [{"sha": "bca52e09885b1c925897b53d536aa6060a164c79", "filename": "Makefile.in", "status": "modified", "additions": 51, "deletions": 43, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/9c12c7c7f5462b56bad567112f8680dc81f9d68d/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/9c12c7c7f5462b56bad567112f8680dc81f9d68d/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=9c12c7c7f5462b56bad567112f8680dc81f9d68d", "patch": "@@ -42,6 +42,8 @@\n #\n # Admittedly this is a little convoluted.\n \n+STAGES = 0 1 2 3\n+\n ######################################################################\n # Residual auto-configuration\n ######################################################################\n@@ -243,51 +245,52 @@ export CFG_PREFIX\n ######################################################################\n \n define SREQ\n+# $(1) is the stage number\n+# $(2) is the target triple\n+# $(3) is the build triple\n \n # Destinations of artifacts for the host compiler\n-HOST_ROOT$(1) = stage$(1)\n-HOST_BIN$(1) = $$(HOST_ROOT$(1))/bin\n-HOST_LIB$(1) = $$(HOST_ROOT$(1))/lib\n+HROOT$(1)_H_$(3) = $(3)/stage$(1)\n+HBIN$(1)_H_$(3) = $$(HROOT$(1)_H_$(3))/bin\n+HLIB$(1)_H_$(3) = $$(HROOT$(1)_H_$(3))/lib\n \n # Destinations of artifacts for target architectures\n-TARGET_ROOT$(1)$(2) = $$(HOST_LIB$(1))/rustc/$(2)\n-TARGET_BIN$(1)$(2) = $$(TARGET_ROOT$(1)$(2))/bin\n-TARGET_LIB$(1)$(2) = $$(TARGET_ROOT$(1)$(2))/lib\n-\n-# The target locations of artifacts for the host architecture (used for\n-# promoting target binaries to host binaries)\n-TARGET_HOST_ROOT$(1) = $$(TARGET_ROOT$(1)$$(CFG_HOST_TRIPLE))\n-TARGET_HOST_BIN$(1) = $$(TARGET_BIN$(1)$$(CFG_HOST_TRIPLE))\n-TARGET_HOST_LIB$(1) = $$(TARGET_LIB$(1)$$(CFG_HOST_TRIPLE))\n+TROOT$(1)_T_$(2)_H_$(3) = $$(HLIB$(1)_H_$(3))/rustc/$(2)\n+TBIN$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/bin\n+TLIB$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/lib\n \n # The name of the standard library used by rustc\n ifdef CFG_DISABLE_SHAREDSTD\n-  HOST_STDLIB_DEFAULT$(1) = $$(HOST_LIB$(1))/libstd.rlib\n-  TARGET_STDLIB_DEFAULT$(1)$(2) = $$(TARGET_LIB$(1)$(2))/libstd.rlib\n+  HSTDLIB_DEFAULT$(1)_H_$(3) = \\\n+    $$(HLIB$(1)_H_$(3))/libstd.rlib\n+  TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n+    $$(TLIB$(1)_T_$(2)_H_$(3))/libstd.rlib\n else\n-  HOST_STDLIB_DEFAULT$(1) = $$(HOST_LIB$(1))/$(CFG_STDLIB)\n-  TARGET_STDLIB_DEFAULT$(1)$(2) = $$(TARGET_LIB$(1)$(2))/$(CFG_STDLIB)\n+  HSTDLIB_DEFAULT$(1)_H_$(3) = \\\n+    $$(HLIB$(1)_H_$(3))/$(CFG_STDLIB)\n+  TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3) = \\\n+    $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB)\n endif\n \n # Preqrequisites for using the stageN compiler\n-HOST_SREQ$(1) = \\\n-\t$$(HOST_BIN$(1))/rustc$$(X) \\\n-\t$$(HOST_LIB$(1))/$$(CFG_RUNTIME) \\\n-\t$$(HOST_LIB$(1))/$$(CFG_RUSTLLVM) \\\n-\t$$(HOST_STDLIB_DEFAULT$(1)) \\\n+HSREQ$(1)_H_$(3) = \\\n+\t$$(HBIN$(1)_H_$(3))/rustc$$(X) \\\n+\t$$(HLIB$(1)_H_$(3))/$$(CFG_RUNTIME) \\\n+\t$$(HLIB$(1)_H_$(3))/$$(CFG_RUSTLLVM) \\\n+\t$$(HSTDLIB_DEFAULT$(1)_H_$(3)) \\\n \t$$(MKFILES)\n \n # Prerequisites for using the stageN compiler to build target artifacts\n-TARGET_SREQ$(1)$(2) = \\\n-\t$$(HOST_SREQ$(1)) \\\n-\t$$(TARGET_LIB$(1)$(2))/$$(CFG_RUNTIME) \\\n-\t$$(TARGET_LIB$(1)$(2))/intrinsics.bc \\\n-\t$$(TARGET_LIB$(1)$(2))/libmorestack.a\n+TSREQ$(1)_T_$(2)_H_$(3) = \\\n+\t$$(HSREQ$(1)_H_$(3)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUNTIME) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/intrinsics.bc \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n \n # Prerequisites for complete stageN targets\n-SREQ$(1)$(2) = \\\n-\t$$(TARGET_SREQ$(1)$(2)) \\\n-\t$$(TARGET_LIB$(1)$(2))/$$(CFG_STDLIB)\n+SREQ$(1)_T_$(2)_H_$(3) = \\\n+\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB)\n \n ifeq ($(1),0)\n # Don't run the the stage0 compiler under valgrind - that ship has sailed\n@@ -296,21 +299,24 @@ else\n CFG_VALGRIND_COMPILE$(1) = $$(CFG_VALGRIND_COMPILE)\n endif\n \n-STAGE$(1)_$(2) := $$(Q)$$(call CFG_RUN_TARG,$(1), \\\n-                  $$(CFG_VALGRIND_COMPILE$(1)) $$(HOST_BIN$(1))/rustc$$(X) \\\n-                  $$(CFG_RUSTC_FLAGS) --target=$(2))\n+STAGE$(1)_T_$(2)_H_$(3) := \t\t\t\t\t\t\\\n+\t$$(Q)$$(call CFG_RUN_TARG,$(1),\t\t\t\t\\\n+\t\t$$(CFG_VALGRIND_COMPILE$(1)) \t\t\t\\\n+\t\t$$(HBIN$(1)_H_$(3))/rustc$$(X)\t\t\t\\\n+\t\t$$(CFG_RUSTC_FLAGS) --target=$(2))\n \n-PERF_STAGE$(1)_$(2) := $$(Q)$$(call CFG_RUN_TARG,$(1), \\\n-                       $$(CFG_PERF_TOOL) $$(HOST_BIN$(1))/rustc$$(X) \\\n-                       $$(CFG_RUSTC_FLAGS) --target=$(2))\n+PERF_STAGE$(1)_T_$(2)_H_$(3) := \t\t\t\t\\\n+\t$$(Q)$$(call CFG_RUN_TARG,$(1),\t\t\t\t\\\n+\t\t$$(CFG_PERF_TOOL) \t\t\t\t\t\t\\\n+\t\t$$(HBIN$(1)_H_$(3))/rustc$$(X)\t\t\t\\\n+\t\t$$(CFG_RUSTC_FLAGS) --target=$(2))\n \n endef\n \n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call SREQ,0,$(target))) \\\n- $(eval $(call SREQ,1,$(target))) \\\n- $(eval $(call SREQ,2,$(target))) \\\n- $(eval $(call SREQ,3,$(target))))\n+$(foreach build,$(CFG_TARGET_TRIPLES), \\\n+ $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n+  $(eval $(foreach stage,$(STAGES), \\\n+   $(eval $(call SREQ,$(stage),$(target),$(build))))))))\n \n ######################################################################\n # Entrypoint rule\n@@ -327,11 +333,13 @@ all: $(SREQ1$(CFG_HOST_TRIPLE)) $(GENERATED) $(DOCS)\n \n else\n \n-TARGET_SREQS := $(foreach target,$(CFG_TARGET_TRIPLES),$(SREQ3$(target)))\n-FUZZ := $(HOST_BIN3)/fuzzer$(X)\n+TSREQS :=\t\t\t\t\t\t\t\t\t\t\t\\\n+\t$(foreach target,$(CFG_TARGET_TRIPLES),\t\t\t\\\n+\t\t$(SREQ3_T_$(target)_H_$(CFG_HOST_TRIPLE)))\n+FUZZ := $(HBIN3_H_$(CFG_HOST_TRIPLE))/fuzzer$(X)\n \n #all: $(SREQ3$(CFG_HOST_TRIPLE)) $(GENERATED) $(DOCS) $(FUZZ)\n-all: $(TARGET_SREQS) $(GENERATED) $(DOCS) $(FUZZ)\n+all: $(TSREQS) $(GENERATED) $(DOCS) $(FUZZ)\n \n endif\n "}, {"sha": "96141cd400783546881c3400bcfdab3f0a53b592", "filename": "configure", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9c12c7c7f5462b56bad567112f8680dc81f9d68d/configure", "raw_url": "https://github.com/rust-lang/rust/raw/9c12c7c7f5462b56bad567112f8680dc81f9d68d/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=9c12c7c7f5462b56bad567112f8680dc81f9d68d", "patch": "@@ -380,25 +380,27 @@ do\n   done\n done\n \n-for t in $CFG_TARGET_TRIPLES\n+for h in $CFG_TARGET_TRIPLES\n do\n-    for i in 0 1 2 3\n+    for t in $CFG_TARGET_TRIPLES\n     do\n-        # host bin dir\n-        make_dir stage$i/bin\n+        for i in 0 1 2 3\n+        do\n+            # host bin dir\n+            make_dir $h/stage$i/bin\n \n-        # host lib dir\n-        make_dir stage$i/lib\n+            # host lib dir\n+            make_dir $h/stage$i/lib\n \n-        # target bin dir\n-        make_dir stage$i/lib/rustc/$t/bin\n+            # target bin dir\n+            make_dir $h/stage$i/lib/rustc/$t/bin\n \n-        # target lib dir\n-        make_dir stage$i/lib/rustc/$t/lib\n+            # target lib dir\n+            make_dir $h/stage$i/lib/rustc/$t/lib\n+        done\n     done\n done\n \n-\n # Configure submodules\n step_msg \"configuring submodules\"\n "}, {"sha": "c38bf4926676db855166ce2048e8819f0229bcd3", "filename": "mk/clean.mk", "status": "modified", "additions": 38, "deletions": 30, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=9c12c7c7f5462b56bad567112f8680dc81f9d68d", "patch": "@@ -2,12 +2,16 @@\n # Cleanup\n ######################################################################\n \n-CLEAN_STAGE_RULES = $(foreach target,$(CFG_TARGET_TRIPLES), \\\n- clean0$(target) clean1$(target) clean2$(target) clean3$(target)) \\\n- clean0 clean1 clean2 clean3\n+CLEAN_STAGE_RULES =\t\t\t\t\t\t\t\t\\\n+ $(foreach stage, $(STAGES),\t\t\t\t\t\\\n+  $(foreach host, $(CFG_TARGET_TRIPLES),\t\t\\\n+   clean$(stage)_H_$(host)\t\t\t\t\t\t\\\n+   $(foreach target, $(CFG_TARGET_TRIPLES),\t\t\\\n+    clean$(stage)_H_$(host)_T_$(target))))\n \n-CLEAN_LLVM_RULES = $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-                   clean-llvm$(target))\n+CLEAN_LLVM_RULES = \t\t\t\t\t\t\t\t\\\n+ $(foreach target, $(CFG_TARGET_TRIPLES),\t\t\\\n+  clean-llvm$(target))\n \n .PHONY: clean clean-all clean-misc\n \n@@ -45,41 +49,45 @@ clean-misc:\n \t$(Q)rm -Rf doc/version.texi\n \t$(Q)rm -rf libuv\n \n-define CLEAN_STAGE_N\n-\n-clean$(1):\n-\t$(Q)rm -f $$(HOST_BIN$(1))/rustc$(X)\n-\t$(Q)rm -f $$(HOST_BIN$(1))/fuzzer$(X)\n-\t$(Q)rm -f $$(HOST_LIB$(1))/$(CFG_RUNTIME)\n-\t$(Q)rm -f $$(HOST_LIB$(1))/$(CFG_STDLIB)\n-\t$(Q)rm -f $$(HOST_LIB$(1))/$(CFG_RUSTLLVM)\n-\t$(Q)rm -f $$(HOST_LIB$(1))/libstd.rlib\n-\n-clean$(1)$(2):\n-\t$(Q)rm -f $$(TARGET_BIN$(1)$(2))/rustc$(X)\n-\t$(Q)rm -f $$(TARGET_BIN$(1)$(2))/fuzzer$(X)\n-\t$(Q)rm -f $$(TARGET_LIB$(1)$(2))/$(CFG_RUNTIME)\n-\t$(Q)rm -f $$(TARGET_LIB$(1)$(2))/$(CFG_STDLIB)\n-\t$(Q)rm -f $$(TARGET_LIB$(1)$(2))/$(CFG_RUSTLLVM)\n-\t$(Q)rm -f $$(TARGET_LIB$(1)$(2))/libstd.rlib\n-\t$(Q)rm -f $$(TARGET_LIB$(1)$(2))/intrinsics.bc\n+define CLEAN_HOST_STAGE_N\n+\n+clean$(1)_H_$(2):\n+\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustc$(X)\n+\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/fuzzer$(X)\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUNTIME)\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_STDLIB)\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUSTLLVM)\n+\t$(Q)rm -f $$(HLIB$(1)_H_$(2))/libstd.rlib\n \n endef\n \n-$(foreach target, $(CFG_TARGET_TRIPLES), \\\n- $(eval $(call CLEAN_STAGE_N,0,$(target))) \\\n- $(eval $(call CLEAN_STAGE_N,1,$(target))) \\\n- $(eval $(call CLEAN_STAGE_N,2,$(target))) \\\n- $(eval $(call CLEAN_STAGE_N,3,$(target))))\n+$(foreach host, $(CFG_TARGET_TRIPLES), \\\n+ $(eval $(foreach stage, $(STAGES), \\\n+  $(eval $(call CLEAN_HOST_STAGE_N,$(stage),$(host))))))\n+\n+define CLEAN_TARGET_STAGE_N\n+\n+clean$(1)_T_$(2)_H$(3):\n+\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustc$(X)\n+\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/fuzzer$(X)\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME)\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB)\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM)\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libstd.rlib\n+\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/intrinsics.bc\n \n+endef\n+\n+$(foreach host, $(CFG_TARGET_TRIPLES), \\\n+ $(eval $(foreach target, $(CFG_TARGET_TRIPLES), \\\n+  $(eval $(foreach stage, $(STAGES), \\\n+   $(eval $(call CLEAN_TARGET_STAGE_N,$(stage),$(target),$(host))))))))\n \n define DEF_CLEAN_LLVM_TARGET\n ifeq ($(CFG_LLVM_ROOT),)\n-\n clean-llvm$(1):\n \t$$(Q)$$(MAKE) -C $$(CFG_LLVM_BUILD_DIR_$(1)) clean\n else\n-\n clean-llvm$(1): ;\n \n endif"}, {"sha": "eae38abc64ff022ee1d6e1b0c09ef8d125a22896", "filename": "mk/host.mk", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=9c12c7c7f5462b56bad567112f8680dc81f9d68d", "patch": "@@ -1,56 +1,59 @@\n-# HOST_STAGE_N template: arg 1 is the N we're promoting *from*, arg 2\n-# is N+1. Must be invoked to promote target artifacts to host artifacts\n-# for stage 1-3 (stage0 host artifacts come from the snapshot).\n+# CP_HOST_STAGE_N template: arg 1 is the N we're promoting *from*, arg\n+# 2 is N+1. Must be invoked to promote target artifacts to host\n+# artifacts for stage 1-3 (stage0 host artifacts come from the\n+# snapshot).  Arg 3 is the triple we're copying FROM and arg 4 is the\n+# triple we're copying TO.\n #\n # The easiest way to read this template is to assume we're promoting\n # stage1 to stage2 and mentally gloss $(1) as 1, $(2) as 2.\n \n-define HOST_STAGE_N\n+define CP_HOST_STAGE_N\n \n # Host libraries and executables (stage$(2)/bin/rustc and its runtime needs)\n \n-$$(HOST_BIN$(2))/rustc$$(X): \\\n-\t$$(TARGET_HOST_BIN$(1))/rustc$$(X) \\\n-\t$$(HOST_LIB$(2))/$$(CFG_RUNTIME) \\\n-\t$$(HOST_LIB$(2))/$$(CFG_RUSTLLVM) \\\n-\t$$(HOST_STDLIB_DEFAULT$(2))\n+$$(HBIN$(2)_H_$(4))/rustc$$(X): \\\n+\t$$(TBIN$(1)_T_$(4)_H_$(3))/rustc$$(X) \\\n+\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME) \\\n+\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUSTLLVM) \\\n+\t$$(HSTDLIB_DEFAULT$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n # FIXME: The fuzzer depends on this. Remove once it's rpathed to correctly\n # find it in the appropriate target directory\n-$$(HOST_LIB$(2))/$$(CFG_LIBRUSTC): \\\n-\t$$(TARGET_HOST_LIB$(1))/$$(CFG_LIBRUSTC) \\\n-\t$$(HOST_LIB$(2))/$$(CFG_RUNTIME) \\\n-\t$$(HOST_LIB$(2))/$$(CFG_RUSTLLVM) \\\n-\t$$(HOST_STDLIB_DEFAULT$(2))\n+$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC) \\\n+\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME) \\\n+\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUSTLLVM) \\\n+\t$$(HSTDLIB_DEFAULT$(2)_H_$(3))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HOST_LIB$(2))/$$(CFG_RUNTIME): \\\n-\t$$(TARGET_HOST_LIB$(1))/$$(CFG_RUNTIME)\n+$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HOST_LIB$(2))/$$(CFG_STDLIB): \\\n-\t$$(TARGET_HOST_LIB$(1))/$$(CFG_STDLIB) \\\n-\t$$(HOST_LIB$(2))/$$(CFG_RUNTIME)\n+$$(HLIB$(2)_H_$(4))/$$(CFG_STDLIB): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB) \\\n+\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HOST_LIB$(2))/libstd.rlib: \\\n-\t$$(TARGET_HOST_LIB$(1))/libstd.rlib \\\n-\t$$(HOST_LIB$(2))/$$(CFG_RUNTIME)\n+$$(HLIB$(2)_H_$(4))/libstd.rlib: \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/libstd.rlib \\\n+\t$$(HLIB$(2)_H_$(4))/$$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(HOST_LIB$(2))/$$(CFG_RUSTLLVM): \\\n-\t$$(TARGET_HOST_LIB$(1))/$$(CFG_RUSTLLVM)\n+$$(HLIB$(2)_H_$(4))/$$(CFG_RUSTLLVM): \\\n+\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_RUSTLLVM)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n endef\n \n-$(eval $(call HOST_STAGE_N,0,1))\n-$(eval $(call HOST_STAGE_N,1,2))\n-$(eval $(call HOST_STAGE_N,2,3))\n+$(foreach t,$(CFG_TARGET_TRIPLES),\t\t\t\t\t\\\n+\t$(eval $(call CP_HOST_STAGE_N,0,1,$(t),$(t)))\t\\\n+\t$(eval $(call CP_HOST_STAGE_N,1,2,$(t),$(t)))\t\\\n+\t$(eval $(call CP_HOST_STAGE_N,2,3,$(t),$(t))))"}, {"sha": "b5aeeaeb322f4d625c05683edc111a1c794c2587", "filename": "mk/install.mk", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=9c12c7c7f5462b56bad567112f8680dc81f9d68d", "patch": "@@ -17,43 +17,44 @@ PREFIX_ROOT = $(CFG_PREFIX)\n PREFIX_BIN = $(PREFIX_ROOT)/bin\n PREFIX_LIB = $(PREFIX_ROOT)/lib\n \n-# Shorthand for build/stageN/bin\n-HB = $(HOST_BIN$(ISTAGE))\n-# Shorthand for build/stageN/lib\n-HL = $(HOST_LIB$(ISTAGE))\n-# Shorthand for the prefix bin directory\n-PHB = $(PREFIX_BIN)\n-# Shorthand for the prefix bin directory\n-PHL = $(PREFIX_LIB)\n-\n define INSTALL_TARGET_N\n+  # $(1) is the target triple\n+  # $(2) is the host triple\n \n-PREFIX_TARGET_ROOT$(1) = $$(PREFIX_LIB)/rustc/$(1)\n-PREFIX_TARGET_BIN$(1) = $$(PREFIX_TARGET_ROOT$(1))/bin\n-PREFIX_TARGET_LIB$(1) = $$(PREFIX_TARGET_ROOT$(1))/lib\n+# T{B,L} == Target {Bin, Lib} for stage ${ISTAGE}\n+TB$(1)_H_$(2) = $$(TBIN$$(ISTAGE)_T_$(1)_H_$(2))\n+TL$(1)_H_$(2) = $$(TLIB$$(ISTAGE))_T_$(1)_H_$(2))\n \n-# Similar to the H* macros above but for each target triple\n-TB$(1) = $$(TARGET_BIN$$(ISTAGE)$(1))\n-TL$(1) = $$(TARGET_LIB$$(ISTAGE)$(1))\n-PTB$(1) = $$(PREFIX_TARGET_BIN$(1))\n-PTL$(1) = $$(PREFIX_TARGET_LIB$(1))\n+# PT{R,B,L} == Prefix Target {Root, Bin, Lib}\n+PTR_T_$(1)_H_$(2) = $$(PREFIX_LIB)/rustc/$(1)\n+PTB_T_$(1)_H_$(2) = $$(PTR_T_$(1)_H_$(2))/bin\n+PTL_T_$(1)_H_$(2) = $$(PTR_T_$(1)_H_$(2))/lib\n \n-install-target$(1): $$(SREQ$$(ISTAGE)$(1))\n-\t$(Q)mkdir -p $$(PREFIX_TARGET_LIB$(1))\n-\t$(Q)$(call INSTALL,$$(TL$(1)),$$(PTL$(1)),$$(CFG_RUNTIME))\n-\t$(Q)$(call INSTALL,$$(TL$(1)),$$(PTL$(1)),$$(CFG_STDLIB))\n-\t$(Q)$(call INSTALL,$$(TL$(1)),$$(PTL$(1)),intrinsics.bc)\n-\t$(Q)$(call INSTALL,$$(TL$(1)),$$(PTL$(1)),libmorestack.a)\n+install-target-$(1)-host-$(2): $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n+\t$(Q)mkdir -p $$(PTL_$(1)_H_$(2))\n+\t$(Q)$(call INSTALL,$$(TL$(1)_H_$(2)),$$(PTL$(1)_H_$(2)),$$(CFG_RUNTIME))\n+\t$(Q)$(call INSTALL,$$(TL$(1)_H_$(2)),$$(PTL$(1)_H_$(2)),$$(CFG_STDLIB))\n+\t$(Q)$(call INSTALL,$$(TL$(1)_H_$(2)),$$(PTL$(1)_H_$(2)),intrinsics.bc)\n+\t$(Q)$(call INSTALL,$$(TL$(1)_H_$(2)),$$(PTL$(1)_H_$(2)),libmorestack.a)\n endef\n \n $(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call INSTALL_TARGET_N,$(target))))\n+ $(eval $(call INSTALL_TARGET_N,$(target),$(CFG_HOST_TRIPLE))))\n \n INSTALL_TARGET_RULES = $(foreach target,$(CFG_TARGET_TRIPLES), \\\n- install-target$(target))\n+ install-target-$(target)-host-$(CFG_HOST_TRIPLE))\n \n install: install-host install-targets\n \n+# Shorthand for build/stageN/bin\n+HB = $(HBIN$(ISTAGE)_H_$(HT))\n+# Shorthand for build/stageN/lib\n+HL = $(HLIB$(ISTAGE)_H_$(HT))\n+# Shorthand for the prefix bin directory\n+PHB = $(PREFIX_BIN)\n+# Shorthand for the prefix bin directory\n+PHL = $(PREFIX_LIB)\n+\n install-host: $(SREQ$(ISTAGE)$(CFG_HOST_TRIPLE))\n \t$(Q)mkdir -p $(PREFIX_BIN)\n \t$(Q)mkdir -p $(PREFIX_LIB)"}, {"sha": "50ca32747537e53c76be5dd2da5532dd9a4d1bc1", "filename": "mk/perf.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Fperf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Fperf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fperf.mk?ref=9c12c7c7f5462b56bad567112f8680dc81f9d68d", "patch": "@@ -1,11 +1,11 @@\n \n ifdef CFG_PERF_TOOL\n-rustc-perf$(X): stage2/bin/rustc$(X)\n+rustc-perf$(X): $(CFG_HOST_TRIPLE)/stage2/bin/rustc$(X)\n \t@$(call E, perf compile: $@)\n \t$(PERF_STAGE2_$(CFG_HOST_TRIPLE)) -o $@ $(COMPILER_CRATE) >rustc-perf.err 2>&1\n \t$(Q)rm -f $@\n else\n-rustc-perf$(X): stage2/bin/rustc$(X)\n+rustc-perf$(X): $(CFG_HOST_TRIPLE)/stage2/bin/rustc$(X)\n \t$(Q)touch $@\n endif\n "}, {"sha": "2b790794072b242776dc9d4a096692f91fe44a5c", "filename": "mk/platform.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=9c12c7c7f5462b56bad567112f8680dc81f9d68d", "patch": "@@ -101,7 +101,7 @@ else\n   CFG_GCCISH_CFLAGS += -O2\n endif\n \n-CFG_TESTLIB=$(CFG_BUILD_DIR)/$(strip \\\n+CFG_TESTLIB=$(CFG_BUILD_DIR)/$(CFG_HOST_TRIPLE)/$(strip \\\n  $(if $(findstring stage0,$(1)), \\\n        stage0/lib, \\\n       $(if $(findstring stage1,$(1)), \\"}, {"sha": "15b537a58237e3719ab3dc68c59abb2423efc90a", "filename": "mk/pp.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Fpp.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Fpp.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fpp.mk?ref=9c12c7c7f5462b56bad567112f8680dc81f9d68d", "patch": "@@ -15,7 +15,7 @@ endif\n reformat: $(SREQ1$(CFG_HOST_TRIPLE))\n \t@$(call E, reformat [stage1]: $@)\n \tfor i in $(PP_INPUTS_FILTERED);  \\\n-    do $(call CFG_RUN_TARG,1,stage1/rustc$(X)) \\\n+    do $(call CFG_RUN_TARG,1,$(CFG_HOST_TRIPLE)/stage1/rustc$(X)) \\\n        --pretty normal $$i >$$i.tmp; \\\n     if [ $$? -ne 0 ]; \\\n         then echo failed to print $$i; rm $$i.tmp; \\"}, {"sha": "8fa0a43b3a77beed8753f9f9d8d86b3a4ad64f63", "filename": "mk/snap.mk", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Fsnap.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Fsnap.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fsnap.mk?ref=9c12c7c7f5462b56bad567112f8680dc81f9d68d", "patch": "@@ -1,9 +1,9 @@\n \n-snap-stage1: $(HOST_SREQ1)\n-\t$(S)src/etc/make-snapshot.py stage1\n+snap-stage1: $(HSREQ1_H_$(CFG_HOST_TRIPLE))\n+\t$(S)src/etc/make-snapshot.py $(CFG_HOST_TRIPLE)/stage1\n \n-snap-stage2: $(HOST_SREQ2)\n-\t$(S)src/etc/make-snapshot.py stage2\n+snap-stage2: $(HSREQ2_H_$(CFG_HOST_TRIPLE)\n+\t$(S)src/etc/make-snapshot.py $(CFG_HOST_TRIPLE)/stage2\n \n-snap-stage3: $(HOST_SREQ3)\n-\t$(S)src/etc/make-snapshot.py stage3\n+snap-stage3: $(HSREQ3_H_$(CFG_HOST_TRIPLE)\n+\t$(S)src/etc/make-snapshot.py $(CFG_HOST_TRIPLE)/stage3"}, {"sha": "b1a0f1eb3a095451740ff0450c4b630a8e07fdbe", "filename": "mk/stage0.mk", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=9c12c7c7f5462b56bad567112f8680dc81f9d68d", "patch": "@@ -1,19 +1,22 @@\n # Extract the snapshot host compiler\n \n-$(HOST_BIN0)/rustc$(X): \\\n-\t$(S)src/snapshots.txt \\\n-\t$(S)src/etc/get-snapshot.py $(MKFILES)\n+$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X):\t\t\\\n+\t\t$(S)src/snapshots.txt\t\t\t\t\t\\\n+\t\t$(S)src/etc/get-snapshot.py $(MKFILES)\n \t@$(call E, fetch: $@)\n-\t$(Q)$(S)src/etc/get-snapshot.py\n+\t$(Q)$(S)src/etc/get-snapshot.py $(CFG_HOST_TRIPLE)\n \t$(Q)touch $@\n \n # Host libs will be extracted by the above rule\n \n-$(HOST_LIB0)/$(CFG_RUNTIME): $(HOST_BIN0)/rustc$(X)\n+$(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_RUNTIME): \\\n+\t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n \t$(Q)touch $@\n \n-$(HOST_LIB0)/$(CFG_STDLIB): $(HOST_BIN0)/rustc$(X)\n+$(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_STDLIB): \\\n+\t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n \t$(Q)touch $@\n \n-$(HOST_LIB0)/$(CFG_RUSTLLVM): $(HOST_BIN0)/rustc$(X)\n+$(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_RUSTLLVM): \\\n+\t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n \t$(Q)touch $@"}, {"sha": "07c9fb03f165becffae6e0522a3cdb3cb69dcc00", "filename": "mk/target.mk", "status": "modified", "additions": 34, "deletions": 37, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=9c12c7c7f5462b56bad567112f8680dc81f9d68d", "patch": "@@ -1,67 +1,64 @@\n # TARGET_STAGE_N template: This defines how target artifacts are built\n-# for all stage/target architecture combinations. Argument 1 is the\n-# stage and arg 2 is the target triple\n-\n-# FIXME: We don't actually know how to build many of these when host\n-# and target architectures are not the same\n+# for all stage/target architecture combinations. The arguments:\n+# $(1) is the stage\n+# $(2) is the target triple\n+# $(3) is the host triple\n \n define TARGET_STAGE_N\n \n-$$(TARGET_LIB$(1)$(2))/intrinsics.ll: \\\n+$$(TLIB$(1)_T_$(2)_H_$(3))/intrinsics.ll: \\\n \t\t$$(S)src/rt/intrinsics/intrinsics.$(HOST_$(2)).ll.in\n \t@$$(call E, sed: $$@)\n \t$$(Q)sed s/@CFG_TARGET_TRIPLE@/$(2)/ $$< > $$@\n \n-$$(TARGET_LIB$(1)$(2))/intrinsics.bc: $$(TARGET_LIB$(1)$(2))/intrinsics.ll \\\n+$$(TLIB$(1)_T_$(2)_H_$(3))/intrinsics.bc: \\\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/intrinsics.ll \\\n \t\t$$(LLVM_CONFIG_$(2))\n \t@$$(call E, llvms-as: $$@)\n \t$$(Q)$$(LLVM_AS_$(2)) -o $$@ $$<\n \n-$$(TARGET_LIB$(1)$(2))/libmorestack.a: rt/$(2)/arch/$$(HOST_$(2))/libmorestack.a\n+$$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a: \\\n+\t\trt/$(2)/arch/$$(HOST_$(2))/libmorestack.a\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TARGET_LIB$(1)$(2))/$$(CFG_STDLIB): \\\n-\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-        $$(TARGET_SREQ$(1)$(2))\n-\t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_$(2))  --lib -o $$@ $$<\n-\n-$$(TARGET_LIB$(1)$(2))/libstd.rlib: \\\n-\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-        $$(TARGET_SREQ$(1)$(2))\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB): \\\n+\t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n+\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_$(2)) --lib --static -o $$@ $$<\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) --lib -o $$@ $$<\n \n-$$(TARGET_LIB$(1)$(2))/$$(CFG_RUNTIME): rt/$(2)/$$(CFG_RUNTIME)\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUNTIME): \\\n+\t\trt/$(2)/$$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TARGET_LIB$(1)$(2))/$$(CFG_RUSTLLVM): rustllvm/$(2)/$$(CFG_RUSTLLVM)\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM): \\\n+\t\trustllvm/$(2)/$$(CFG_RUSTLLVM)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TARGET_BIN$(1)$(2))/rustc$$(X): \\\n-\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n-\t$$(TARGET_SREQ$(1)$(2)) \\\n-\t$$(TARGET_LIB$(1)$(2))/$$(CFG_RUSTLLVM) \\\n-\t$$(TARGET_STDLIB_DEFAULT$(1)$(2))\n-\t@$$(call E, compile_and_link: $$@ for stage $(1) and target $(2))\n-\t$$(STAGE$(1)_$(2)) -o $$@ $$<\n+$$(TBIN$(1)_T_$(2)_H_$(3))/rustc$$(X):\t\t\t\t\\\n+\t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS)\t\t\\\n+\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM)\t\\\n+\t\t$$(TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3))\n+\t@$$(call E, compile_and_link: $$@)\n+\t$$(STAGE$(1)_T_$(2)_H_$(3))  -o $$@ $$<\n \n-$$(TARGET_LIB$(1)$(2))/$$(CFG_LIBRUSTC): \\\n-\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS) \\\n-\t$$(TARGET_SREQ$(1)$(2)) \\\n-\t$$(TARGET_LIB$(1)$(2))/$$(CFG_RUSTLLVM) \\\n-\t$$(TARGET_STDLIB_DEFAULT$(1)$(2))\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC):\t\t\\\n+\t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS)\t\t\\\n+\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM)\t\\\n+\t\t$$(TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_$(2)) --lib -o $$@ $$<\n+\t$$(STAGE$(1)_T_$(2)_H_$(3))  --lib -o $$@ $$<\n \n endef\n \n # Instantiate template for all stages\n $(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call TARGET_STAGE_N,0,$(target))) \\\n- $(eval $(call TARGET_STAGE_N,1,$(target))) \\\n- $(eval $(call TARGET_STAGE_N,2,$(target))) \\\n- $(eval $(call TARGET_STAGE_N,3,$(target))))\n+ $(eval $(call TARGET_STAGE_N,0,$(target),$(CFG_HOST_TRIPLE))) \\\n+ $(eval $(call TARGET_STAGE_N,1,$(target),$(CFG_HOST_TRIPLE))) \\\n+ $(eval $(call TARGET_STAGE_N,2,$(target),$(CFG_HOST_TRIPLE))) \\\n+ $(eval $(call TARGET_STAGE_N,3,$(target),$(CFG_HOST_TRIPLE))))"}, {"sha": "6966dcddb85e84b8f86808130e9257177aff63d0", "filename": "mk/tests.mk", "status": "modified", "additions": 135, "deletions": 111, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=9c12c7c7f5462b56bad567112f8680dc81f9d68d", "patch": "@@ -112,180 +112,204 @@ define TEST_STAGEN\n # command line.\n #\n # $(1) is the stage number\n-# $(2) is the target triple\n+# $(2) is the target triple to test\n+# $(3) is the host triple to test\n \n-check-stage$(1)-$(2): tidy \\\n-\tcheck-stage$(1)-$(2)-rustc \\\n-\tcheck-stage$(1)-$(2)-std \\\n-\tcheck-stage$(1)-$(2)-rpass \\\n-\tcheck-stage$(1)-$(2)-rfail \\\n-\tcheck-stage$(1)-$(2)-cfail \\\n-\tcheck-stage$(1)-$(2)-bench \\\n-\tcheck-stage$(1)-$(2)-pretty\n+check-stage$(1)-$(2)-H-$(3): tidy\t\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-rustc\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-std\t\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-rpass\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-rfail\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-cfail\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-bench\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-pretty\n \n-check-stage$(1)-$(2)-std: check-stage$(1)-$(2)-std-dummy\n+check-stage$(1)-$(2)-H-$(3)-std:\t\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-std-dummy\n \n-check-stage$(1)-$(2)-rustc: check-stage$(1)-$(2)-rustc-dummy\n+check-stage$(1)-$(2)-H-$(3)-rustc:\t\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-rustc-dummy\n \n-check-stage$(1)-$(2)-cfail: check-stage$(1)-$(2)-cfail-dummy\n+check-stage$(1)-$(2)-H-$(3)-cfail:\t\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-cfail-dummy\n \n-check-stage$(1)-$(2)-rfail: check-stage$(1)-$(2)-rfail-dummy\n+check-stage$(1)-$(2)-H-$(3)-rfail:\t\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-rfail-dummy\n \n-check-stage$(1)-$(2)-rpass: check-stage$(1)-$(2)-rpass-dummy\n+check-stage$(1)-$(2)-H-$(3)-rpass:\t\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-rpass-dummy\n \n-check-stage$(1)-$(2)-bench: check-stage$(1)-$(2)-bench-dummy\n+check-stage$(1)-$(2)-H-$(3)-bench:\t\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-bench-dummy\n \n-check-stage$(1)-$(2)-perf: check-stage$(1)-$(2)-perf-dummy\n+check-stage$(1)-$(2)-H-$(3)-perf:\t\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-perf-dummy\n \n-check-stage$(1)-$(2)-pretty: check-stage$(1)-$(2)-pretty-rpass \\\n-                        check-stage$(1)-$(2)-pretty-rfail \\\n-                        check-stage$(1)-$(2)-pretty-bench \\\n-                        check-stage$(1)-$(2)-pretty-pretty\n+check-stage$(1)-$(2)-H-$(3)-pretty:\t\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-pretty-rpass\t\\\n+    check-stage$(1)-$(2)-H-$(3)-pretty-rfail\t\\\n+    check-stage$(1)-$(2)-H-$(3)-pretty-bench\t\\\n+    check-stage$(1)-$(2)-H-$(3)-pretty-pretty\n \n-check-stage$(1)-$(2)-pretty-rpass: check-stage$(1)-$(2)-pretty-rpass-dummy\n+check-stage$(1)-$(2)-H-$(3)-pretty-rpass:\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-pretty-rpass-dummy\n \n-check-stage$(1)-$(2)-pretty-rfail: check-stage$(1)-$(2)-pretty-rfail-dummy\n+check-stage$(1)-$(2)-H-$(3)-pretty-rfail:\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-pretty-rfail-dummy\n \n-check-stage$(1)-$(2)-pretty-bench: check-stage$(1)-$(2)-pretty-bench-dummy\n-\n-check-stage$(1)-$(2)-pretty-pretty: check-stage$(1)-$(2)-pretty-pretty-dummy\n+check-stage$(1)-$(2)-H-$(3)-pretty-bench:\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-pretty-bench-dummy\n \n+check-stage$(1)-$(2)-H-$(3)-pretty-pretty:\t\t\t\t\\\n+\tcheck-stage$(1)-$(2)-H-$(3)-pretty-pretty-dummy\n \n # Rules for the standard library test runner\n \n-test/stdtest.stage$(1)-$(2)$$(X): $$(STDTEST_CRATE) $$(STDTEST_INPUTS) \\\n-                            $$(SREQ$(1)$(2))\n+$(3)/test/stdtest.stage$(1)-$(2)$$(X):\t\t\t\\\n+\t\t$$(STDTEST_CRATE) $$(STDTEST_INPUTS)\t\\\n+        $$(SREQ$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_$(2)) -o $$@ $$< --test\n \n-check-stage$(1)-$(2)-std-dummy: test/stdtest.stage$(1)-$(2)$$(X)\n+check-stage$(1)-$(2)-H-$(3)-std-dummy:\t\t\t\\\n+\t\t$(3)/test/stdtest.stage$(1)-$(2)$$(X)\n \t@$$(call E, run: $$<)\n \t$$(Q)$$(call CFG_RUN_TEST,$$<) $$(TESTARGS)\n \n-\n # Rules for the rustc test runner\n \n-test/rustctest.stage$(1)-$(2)$$(X): \\\n-\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS) $$(SREQ$(1)$(2)) \\\n-\t$$(TARGET_LIB$(1)$(2))/$$(CFG_RUSTLLVM)\n+$(3)/test/rustctest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n+\t\t$$(COMPILER_CRATE)\t\t\t\t\t\t\t\t\t\\\n+\t\t$$(COMPILER_INPUTS)\t\t\t\t\t\t\t\t\t\\\n+\t\t$$(SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\t\t\t\\\n+\t\t$$(TARGET_LIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM)\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_$(2)) -o $$@ $$< --test\n \n-check-stage$(1)-$(2)-rustc-dummy: test/rustctest.stage$(1)-$(2)$$(X)\n+check-stage$(1)-$(2)-H-$(3)-rustc-dummy:\t\t\\\n+\t\t$(3)/test/rustctest.stage$(1)-$(2)$$(X)\n \t@$$(call E, run: $$<)\n-\t$$(Q)$$(call CFG_RUN_TEST,$$<) \\\n-\t  $$(TESTARGS)\n-\n+\t$$(Q)$$(call CFG_RUN_TEST,$$<) $$(TESTARGS)\n \n # Rules for the cfail/rfail/rpass/bench/perf test runner\n \n-CTEST_COMMON_ARGS$(1)-$(2) := --compile-lib-path $$(HOST_LIB$(1)) \\\n-                         --run-lib-path $$(TARGET_LIB$(1)$$(CFG_HOST_TRIPLE)) \\\n-                         --rustc-path $$(HOST_BIN$(1))/rustc$$(X) \\\n-                         --stage-id stage$(1)-$(2) \\\n-                         --rustcflags \"$$(CFG_RUSTC_FLAGS) --target=$(2)\" \\\n-                         $$(CTEST_TESTARGS)\n-\n-CFAIL_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n-                  --src-base $$(S)src/test/compile-fail/ \\\n-                  --build-base test/compile-fail/ \\\n-                  --mode compile-fail\n-\n-RFAIL_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n-                  --src-base $$(S)src/test/run-fail/ \\\n-                  --build-base test/run-fail/ \\\n-                  --mode run-fail \\\n-                  $$(CTEST_RUNTOOL)\n-\n-RPASS_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n-                  --src-base $$(S)src/test/run-pass/ \\\n-                  --build-base test/run-pass/ \\\n-                  --mode run-pass \\\n-                  $$(CTEST_RUNTOOL)\n-\n-BENCH_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n-                  --src-base $$(S)src/test/bench/ \\\n-                  --build-base test/bench/ \\\n-                  --mode run-pass \\\n-                  $$(CTEST_RUNTOOL)\n-\n-PERF_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n-                  --src-base $$(S)src/test/bench/ \\\n-                  --build-base test/perf/ \\\n-                  --mode run-pass \\\n-                  $$(CTEST_PERF_RUNTOOL)\n-\n-PRETTY_RPASS_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n-                         --src-base $$(S)src/test/run-pass/ \\\n-                         --build-base test/run-pass/ \\\n+CTEST_COMMON_ARGS$(1)-$(2)-$(3) :=\t\t\t\t\t\t\t\\\n+\t\t--compile-lib-path $$(HLIB$(1)_H_$(3))\t\t\t\t\\\n+        --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3))\t\t\t\\\n+        --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X)\t\t\t\\\n+        --stage-id stage$(1)-$(2)\t\t\t\t\t\t\t\\\n+        --rustcflags \"$$(CFG_RUSTC_FLAGS) --target=$(2)\"\t\\\n+        $$(CTEST_TESTARGS)\n+\n+CFAIL_ARGS$(1)-$(2)-$(3) := $$(CTEST_COMMON_ARGS$(1)-$(2)-$(3))\t\\\n+        --src-base $$(S)src/test/compile-fail/\t\t\t\t\t\\\n+        --build-base test/compile-fail/\t\t\t\t\t\t\t\\\n+        --mode compile-fail\n+\n+RFAIL_ARGS$(1)-$(2)-$(3) := $$(CTEST_COMMON_ARGS$(1)-$(2)-$(3))\t\\\n+        --src-base $$(S)src/test/run-fail/\t\t\t\t\t\t\\\n+        --build-base test/run-fail/\t\t\t\t\t\t\t\t\\\n+        --mode run-fail\t\t\t\t\t\t\t\t\t\t\t\\\n+        $$(CTEST_RUNTOOL)\n+\n+RPASS_ARGS$(1)-$(2)-$(3) := $$(CTEST_COMMON_ARGS$(1)-$(2)-$(3))\t\\\n+        --src-base $$(S)src/test/run-pass/\t\t\t\t\t\t\\\n+        --build-base test/run-pass/\t\t\t\t\t\t\t\t\\\n+        --mode run-pass\t\t\t\t\t\t\t\t\t\t\t\\\n+        $$(CTEST_RUNTOOL)\n+\n+BENCH_ARGS$(1)-$(2)-$(3) := $$(CTEST_COMMON_ARGS$(1)-$(2)-$(3))\t\\\n+        --src-base $$(S)src/test/bench/\t\t\t\t\t\t\t\\\n+        --build-base test/bench/\t\t\t\t\t\t\t\t\\\n+        --mode run-pass\t\t\t\t\t\t\t\t\t\t\t\\\n+        $$(CTEST_RUNTOOL)\n+\n+PERF_ARGS$(1)-$(2)-$(3) := $$(CTEST_COMMON_ARGS$(1)-$(2)-$(3))\t\\\n+        --src-base $$(S)src/test/bench/\t\t\t\t\t\t\t\\\n+        --build-base test/perf/\t\t\t\t\t\t\t\t\t\\\n+        --mode run-pass\t\t\t\t\t\t\t\t\t\t\t\\\n+        $$(CTEST_PERF_RUNTOOL)\n+\n+PRETTY_RPASS_ARGS$(1)-$(2)-$(3) := $$(CTEST_COMMON_ARGS$(1)-$(2)-$(3))\t\\\n+                         --src-base $$(S)src/test/run-pass/\t\t\t\t\\\n+                         --build-base test/run-pass/\t\t\t\t\t\\\n                          --mode pretty\n \n-PRETTY_RFAIL_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n-                         --src-base $$(S)src/test/run-fail/ \\\n-                         --build-base test/run-fail/ \\\n+PRETTY_RFAIL_ARGS$(1)-$(2)-$(3) := $$(CTEST_COMMON_ARGS$(1)-$(2)-$(3))\t\\\n+                         --src-base $$(S)src/test/run-fail/\t\t\t\t\\\n+                         --build-base test/run-fail/\t\t\t\t\t\\\n                          --mode pretty\n \n-PRETTY_BENCH_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n-                         --src-base $$(S)src/test/bench/ \\\n-                         --build-base test/bench/ \\\n+PRETTY_BENCH_ARGS$(1)-$(2)-$(3) := $$(CTEST_COMMON_ARGS$(1)-$(2)-$(3))\t\\\n+                         --src-base $$(S)src/test/bench/\t\t\t\t\\\n+                         --build-base test/bench/\t\t\t\t\t\t\\\n                          --mode pretty\n \n-PRETTY_PRETTY_ARGS$(1)-$(2) := $$(CTEST_COMMON_ARGS$(1)-$(2)) \\\n-                          --src-base $$(S)src/test/pretty/ \\\n-                          --build-base test/pretty/ \\\n+PRETTY_PRETTY_ARGS$(1)-$(2)-$(3) := $$(CTEST_COMMON_ARGS$(1)-$(2)-$(3))\t\\\n+                          --src-base $$(S)src/test/pretty/\t\t\t\t\\\n+                          --build-base test/pretty/\t\t\t\t\t\t\\\n                           --mode pretty\n \n-check-stage$(1)-$(2)-cfail-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n-\t                              $$(SREQ$(1)$(2)) \\\n-                                  $$(CFAIL_TESTS)\n+check-stage$(1)-$(2)-$(3)-cfail-dummy:\t\t\t\\\n+\t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n+\t    $$(SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\\\n+        $$(CFAIL_TESTS)\n \t@$$(call E, run: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(CFAIL_ARGS$(1)-$(2))\n \n-check-stage$(1)-$(2)-rfail-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n-\t                              $$(SREQ$(1)$(2)) \\\n-                                  $$(RFAIL_TESTS)\n+check-stage$(1)-$(2)-$(3)-rfail-dummy:\t\t\t\\\n+\t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n+\t    $$(SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\\\n+        $$(RFAIL_TESTS)\n \t@$$(call E, run: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(RFAIL_ARGS$(1)-$(2))\n \n-check-stage$(1)-$(2)-rpass-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n-\t                              $$(SREQ$(1)$(2)) \\\n-                                  $$(RPASS_TESTS)\n+check-stage$(1)-$(2)-$(3)-rpass-dummy:\t\t\t\\\n+\t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n+\t    $$(SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\\\n+        $$(RPASS_TESTS)\n \t@$$(call E, run: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(RPASS_ARGS$(1)-$(2))\n \n-check-stage$(1)-$(2)-bench-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n-\t                              $$(SREQ$(1)$(2)) \\\n-                                  $$(BENCH_TESTS)\n+check-stage$(1)-$(2)-$(3)-bench-dummy:\t\t\t\\\n+\t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n+\t    $$(SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\\\n+        $$(BENCH_TESTS)\n \t@$$(call E, run: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(BENCH_ARGS$(1)-$(2))\n \n-check-stage$(1)-$(2)-perf-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n-                                 $$(SREQ$(1)$(2)) \\\n-                                 $$(BENCH_TESTS)\n+check-stage$(1)-$(2)-$(3)-perf-dummy:\t\t\t\\\n+\t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n+        $$(SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\\\n+        $$(BENCH_TESTS)\n \t@$$(call E, perf: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PERF_ARGS$(1)-$(2))\n \n-check-stage$(1)-$(2)-pretty-rpass-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n-                                         $$(SREQ$(1)$(2)) \\\n-                                         $$(RPASS_TESTS)\n+check-stage$(1)-$(2)-$(3)-pretty-rpass-dummy:\t\\\n+\t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n+        $$(SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\\\n+        $$(RPASS_TESTS)\n \t@$$(call E, run: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_RPASS_ARGS$(1)-$(2))\n \n-check-stage$(1)-$(2)-pretty-rfail-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n-                                         $$(SREQ$(1)$(2)) \\\n-                                         $$(RFAIL_TESTS)\n+check-stage$(1)-$(2)-pretty-rfail-dummy:\t\t\\\n+\t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n+        $$(SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\\\n+        $$(RFAIL_TESTS)\n \t@$$(call E, run: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_RFAIL_ARGS$(1)-$(2))\n \n-check-stage$(1)-$(2)-pretty-bench-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n-                                         $$(SREQ$(1)$(2)) \\\n-                                         $$(BENCH_TESTS)\n+check-stage$(1)-$(2)-pretty-bench-dummy:\t\t\\\n+\t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n+\t\t$$(SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\\\n+        $$(BENCH_TESTS)\n \t@$$(call E, run: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_BENCH_ARGS$(1)-$(2))\n \n-check-stage$(1)-$(2)-pretty-pretty-dummy: $$(HOST_BIN$(1))/compiletest$$(X) \\\n-                                          $$(SREQ$(1)$(2)) \\\n-                                          $$(PRETTY_TESTS)\n+check-stage$(1)-$(2)-pretty-pretty-dummy:\t\t\\\n+\t\t$$(HBIN$(1)_H_$(3))/compiletest$$(X)\t\\\n+        $$(SREQ$(1)_T_$(2)_H_$(3))\t\t\t\t\\\n+        $$(PRETTY_TESTS)\n \t@$$(call E, run: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST,$(1),$$<) $$(PRETTY_PRETTY_ARGS$(1)-$(2))\n "}, {"sha": "b87eb19e88584d761202b9cfe2b3158ca22dae78", "filename": "mk/tools.mk", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9c12c7c7f5462b56bad567112f8680dc81f9d68d/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=9c12c7c7f5462b56bad567112f8680dc81f9d68d", "patch": "@@ -12,39 +12,39 @@ COMPILETEST_INPUTS := $(wildcard $(S)src/compiletest/*rs)\n # have tools that need to built for other targets.\n define TOOLS_STAGE_N\n \n-$$(TARGET_BIN$(1)$(CFG_HOST_TRIPLE))/fuzzer$$(X): \\\n-\t$$(FUZZER_CRATE) $$(FUZZER_INPUTS) \\\n-\t$$(TARGET_SREQ$(1)$(CFG_HOST_TRIPLE)) \\\n-\t$$(TARGET_LIB$(1)$(CFG_HOST_TRIPLE))/$$(CFG_STDLIB) \\\n-\t$$(TARGET_LIB$(1)$(CFG_HOST_TRIPLE))/$$(CFG_LIBRUSTC)\n+$$(TBIN$(1)_T_$(4)_H_$(3))/fuzzer$$(X):\t\t\t\t\\\n+\t\t$$(FUZZER_CRATE) $$(FUZZER_INPUTS)\t\t\t\\\n+\t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_$$(CFG_HOST_TRIPLE)) -o $$@ $$<\n+\t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$<\n \n # Promote the stageN target to stageN+1 host\n # FIXME: Shouldn't need to depend on host/librustc.so once\n # rpath is working\n-$$(HOST_BIN$(2))/fuzzer$$(X): \\\n-\t$$(TARGET_BIN$(1)$(CFG_HOST_TRIPLE))/fuzzer$$(X) \\\n-\t$$(HOST_LIB$(2))/$$(CFG_LIBRUSTC) \\\n-\t$$(HOST_SREQ$(2))\n+$$(HBIN$(2)_H_$(4))/fuzzer$$(X):\t\t\t\t\\\n+\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/fuzzer$$(X)\t\\\n+\t\t$$(HLIB$(2)_H_$(4))/$$(CFG_LIBRUSTC)\t\\\n+\t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TARGET_BIN$(1)$(CFG_HOST_TRIPLE))/compiletest$$(X): \\\n-\t$$(COMPILETEST_CRATE) $$(COMPILETEST_INPUTS) \\\n-\t$$(TARGET_SREQ$(1)$(CFG_HOST_TRIPLE)) \\\n-\t$$(TARGET_LIB$(1)$(CFG_HOST_TRIPLE))/$$(CFG_STDLIB)\n+$$(TBIN$(1)_T_$(4)_H_$(3))/compiletest$$(X):\t\t\t\\\n+\t\t$$(COMPILETEST_CRATE) $$(COMPILETEST_INPUTS)\t\\\n+\t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_$$(CFG_HOST_TRIPLE)) -o $$@ $$<\n+\t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$<\n \n-$$(HOST_BIN$(2))/compiletest$$(X): \\\n-\t$$(TARGET_BIN$(1)$(CFG_HOST_TRIPLE))/compiletest$$(X) \\\n-\t$$(HOST_SREQ$(2))\n+$$(HBIN$(2)_H_$(4))/compiletest$$(X):\t\t\t\t\\\n+\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/compiletest$$(X)\t\\\n+\t\t$$(HSREQ$(2)_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n endef\n \n-$(eval $(call TOOLS_STAGE_N,0,1))\n-$(eval $(call TOOLS_STAGE_N,1,2))\n-$(eval $(call TOOLS_STAGE_N,2,3))\n+$(eval $(call TOOLS_STAGE_N,0,1,$(CFG_HOST_TRIPLE),$(CFG_HOST_TRIPLE)))\n+$(eval $(call TOOLS_STAGE_N,1,2,$(CFG_HOST_TRIPLE),$(CFG_HOST_TRIPLE)))\n+$(eval $(call TOOLS_STAGE_N,2,3,$(CFG_HOST_TRIPLE),$(CFG_HOST_TRIPLE)))"}, {"sha": "5c0dec8eb411f6a9c18d204e1fad6d07f5ae3bbb", "filename": "src/etc/get-snapshot.py", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c12c7c7f5462b56bad567112f8680dc81f9d68d/src%2Fetc%2Fget-snapshot.py", "raw_url": "https://github.com/rust-lang/rust/raw/9c12c7c7f5462b56bad567112f8680dc81f9d68d/src%2Fetc%2Fget-snapshot.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fget-snapshot.py?ref=9c12c7c7f5462b56bad567112f8680dc81f9d68d", "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env python\n \n-import os, tarfile, hashlib, re, shutil\n+import os, tarfile, hashlib, re, shutil, sys\n from snapshot import *\n \n \n@@ -11,7 +11,8 @@ def unpack_snapshot(snap):\n   kernel = get_kernel()\n   for name in snapshot_files[kernel]:\n     p = \"rust-stage0/\" + name\n-    fp = os.path.join(\"stage0\", name)\n+    stagep = os.path.join(triple, \"stage0\")\n+    fp = os.path.join(stagep, name)\n     print(\"extracting \" + fp)\n     tar.extract(p, download_unpack_base)\n     tp = os.path.join(download_unpack_base, p)\n@@ -57,6 +58,7 @@ def determine_curr_snapshot_for_platform():\n \n # Main\n \n+triple = sys.argv[1]\n snap = determine_curr_snapshot_for_platform()\n dl = os.path.join(download_dir_base, snap)\n url = download_url_base + \"/\" + snap"}]}