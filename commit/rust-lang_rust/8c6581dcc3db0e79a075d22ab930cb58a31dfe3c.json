{"sha": "8c6581dcc3db0e79a075d22ab930cb58a31dfe3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNjU4MWRjYzNkYjBlNzlhMDc1ZDIyYWI5MzBjYjU4YTMxZGZlM2M=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-24T22:55:48Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-24T22:55:48Z"}, "message": "vscode: migrate on_enter to rust-analyzer-api.ts", "tree": {"sha": "f57c36382db2653a9b210d16306b9e7aaf52b80a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f57c36382db2653a9b210d16306b9e7aaf52b80a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c6581dcc3db0e79a075d22ab930cb58a31dfe3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6581dcc3db0e79a075d22ab930cb58a31dfe3c", "html_url": "https://github.com/rust-lang/rust/commit/8c6581dcc3db0e79a075d22ab930cb58a31dfe3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c6581dcc3db0e79a075d22ab930cb58a31dfe3c/comments", "author": null, "committer": null, "parents": [{"sha": "56d1ff65324d59623e8483c7cbf03672611cbcdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/56d1ff65324d59623e8483c7cbf03672611cbcdf", "html_url": "https://github.com/rust-lang/rust/commit/56d1ff65324d59623e8483c7cbf03672611cbcdf"}], "stats": {"total": 21, "additions": 7, "deletions": 14}, "files": [{"sha": "285849db70749dce4516b52b39c4b192725c4661", "filename": "editors/code/src/commands/on_enter.ts", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8c6581dcc3db0e79a075d22ab930cb58a31dfe3c/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8c6581dcc3db0e79a075d22ab930cb58a31dfe3c/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fon_enter.ts?ref=8c6581dcc3db0e79a075d22ab930cb58a31dfe3c", "patch": "@@ -1,7 +1,7 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n-import { applySourceChange, SourceChange } from '../source_change';\n+import { applySourceChange } from '../source_change';\n import { Cmd, Ctx } from '../ctx';\n \n async function handleKeypress(ctx: Ctx) {\n@@ -10,22 +10,15 @@ async function handleKeypress(ctx: Ctx) {\n \n     if (!editor || !client) return false;\n \n-    const request: lc.TextDocumentPositionParams = {\n+    const change = await client.sendRequest(ra.onEnter, {\n         textDocument: { uri: editor.document.uri.toString() },\n         position: client.code2ProtocolConverter.asPosition(\n             editor.selection.active,\n         ),\n-    };\n-    const change = await client.sendRequest<undefined | SourceChange>(\n-        'rust-analyzer/onEnter',\n-        request,\n-    ).catch(\n-        (_error: any) => {\n-            // FIXME: switch to the more modern (?) typed request infrastructure\n-            // client.logFailedRequest(OnEnterRequest.type, error);\n-            return Promise.resolve(null);\n-        }\n-    );\n+    }).catch(_error => {\n+        // client.logFailedRequest(OnEnterRequest.type, error);\n+        return null;\n+    });\n     if (!change) return false;\n \n     await applySourceChange(ctx, change);"}]}