{"sha": "10d9ecda48f828e174d7a863fc43a155ad086efd", "node_id": "C_kwDOAAsO6NoAKDEwZDllY2RhNDhmODI4ZTE3NGQ3YTg2M2ZjNDNhMTU1YWQwODZlZmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-18T15:07:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-18T15:07:47Z"}, "message": "Auto merge of #96800 - nbdd0121:const, r=nagisa\n\nPermit `asm_const` and `asm_sym` to reference generic params\n\nRelated #96557\n\nThese constructs will be allowed:\n```rust\nfn foofoo<const N: usize>() {}\n\nunsafe fn foo<const N: usize>() {\n    asm!(\"/* {0} */\", const N);\n    asm!(\"/* {0} */\", const N + 1);\n    asm!(\"/* {0} */\", sym foofoo::<N>);\n}\n\nfn barbar<T>() {}\n\nunsafe fn bar<T>() {\n    asm!(\"/* {0} */\", const std::mem::size_of::<T>());\n    asm!(\"/* {0} */\", const std::mem::size_of::<(T, T)>());\n    asm!(\"/* {0} */\", sym barbar::<T>);\n    asm!(\"/* {0} */\", sym barbar::<(T, T)>);\n}\n```\n\n`@Amanieu,` I didn't switch inline asms to use `DefKind::InlineAsm`, as I see little value doing that; given that no type inference is needed, it will only make typecking slower and more complex but will have no real gains. I did switch them to follow the same code path as inline asm during symbol resolution, though.\nThe `error: unconstrained generic constant` you mentioned in #76001 is due to the fact that `to_const` will actually add a wfness obligation to the constant, which we don't need for `asm_const`, so I have that removed.\n\n`@rustbot` label: +A-inline-assembly +F-asm", "tree": {"sha": "5dd1a90b25a0b38adbb010617769206ac7ca374f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dd1a90b25a0b38adbb010617769206ac7ca374f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10d9ecda48f828e174d7a863fc43a155ad086efd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10d9ecda48f828e174d7a863fc43a155ad086efd", "html_url": "https://github.com/rust-lang/rust/commit/10d9ecda48f828e174d7a863fc43a155ad086efd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10d9ecda48f828e174d7a863fc43a155ad086efd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "936eba3b348e65b658b60218cc9237f02abdbeb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/936eba3b348e65b658b60218cc9237f02abdbeb4", "html_url": "https://github.com/rust-lang/rust/commit/936eba3b348e65b658b60218cc9237f02abdbeb4"}, {"sha": "441d98f1a426109dd4aecd4d214f7c4925c95aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/441d98f1a426109dd4aecd4d214f7c4925c95aa3", "html_url": "https://github.com/rust-lang/rust/commit/441d98f1a426109dd4aecd4d214f7c4925c95aa3"}], "stats": {"total": 174, "additions": 116, "deletions": 58}, "files": [{"sha": "42213cf69661b504dac2ef80db5adb7b4a8ec631", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10d9ecda48f828e174d7a863fc43a155ad086efd/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d9ecda48f828e174d7a863fc43a155ad086efd/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=10d9ecda48f828e174d7a863fc43a155ad086efd", "patch": "@@ -326,7 +326,7 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n         ItemKind::ForeignMod(ref foreign_module) => {\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n-        ItemKind::GlobalAsm(ref asm) => walk_inline_asm(visitor, asm),\n+        ItemKind::GlobalAsm(ref asm) => visitor.visit_inline_asm(asm),\n         ItemKind::TyAlias(box TyAlias { ref generics, ref bounds, ref ty, .. }) => {\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_param_bound, bounds, BoundKind::Bound);\n@@ -897,7 +897,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         }\n         ExprKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n         ExprKind::Paren(ref subexpression) => visitor.visit_expr(subexpression),\n-        ExprKind::InlineAsm(ref asm) => walk_inline_asm(visitor, asm),\n+        ExprKind::InlineAsm(ref asm) => visitor.visit_inline_asm(asm),\n         ExprKind::Yield(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);\n         }"}, {"sha": "7ac1bb441c68d04248a2eba6a064b622611c5de8", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/10d9ecda48f828e174d7a863fc43a155ad086efd/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d9ecda48f828e174d7a863fc43a155ad086efd/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=10d9ecda48f828e174d7a863fc43a155ad086efd", "patch": "@@ -1171,6 +1171,7 @@ impl<'a> Resolver<'a> {\n                         | AssocItemRibKind\n                         | ModuleRibKind(..)\n                         | MacroDefinition(..)\n+                        | InlineAsmSymRibKind\n                         | ForwardGenericParamBanRibKind => {\n                             // Nothing to do. Continue.\n                             continue;\n@@ -1216,22 +1217,6 @@ impl<'a> Resolver<'a> {\n                             }\n                             return Res::Err;\n                         }\n-                        InlineAsmSymRibKind => {\n-                            let features = self.session.features_untracked();\n-                            if !features.generic_const_exprs {\n-                                if let Some(span) = finalize {\n-                                    self.report_error(\n-                                        span,\n-                                        ResolutionError::ParamInNonTrivialAnonConst {\n-                                            name: rib_ident.name,\n-                                            is_type: true,\n-                                        },\n-                                    );\n-                                }\n-                                return Res::Err;\n-                            }\n-                            continue;\n-                        }\n                     };\n \n                     if let Some(span) = finalize {\n@@ -1262,6 +1247,7 @@ impl<'a> Resolver<'a> {\n                         | AssocItemRibKind\n                         | ModuleRibKind(..)\n                         | MacroDefinition(..)\n+                        | InlineAsmSymRibKind\n                         | ForwardGenericParamBanRibKind => continue,\n \n                         ConstantItemRibKind(trivial, _) => {\n@@ -1296,22 +1282,6 @@ impl<'a> Resolver<'a> {\n                             }\n                             return Res::Err;\n                         }\n-                        InlineAsmSymRibKind => {\n-                            let features = self.session.features_untracked();\n-                            if !features.generic_const_exprs {\n-                                if let Some(span) = finalize {\n-                                    self.report_error(\n-                                        span,\n-                                        ResolutionError::ParamInNonTrivialAnonConst {\n-                                            name: rib_ident.name,\n-                                            is_type: false,\n-                                        },\n-                                    );\n-                                }\n-                                return Res::Err;\n-                            }\n-                            continue;\n-                        }\n                     };\n \n                     // This was an attempt to use a const parameter outside its scope."}, {"sha": "2712bfeb7b311da06aeb036f76bd954453349632", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/10d9ecda48f828e174d7a863fc43a155ad086efd/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d9ecda48f828e174d7a863fc43a155ad086efd/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=10d9ecda48f828e174d7a863fc43a155ad086efd", "patch": "@@ -918,6 +918,29 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         self.diagnostic_metadata.current_where_predicate = previous_value;\n     }\n \n+    fn visit_inline_asm(&mut self, asm: &'ast InlineAsm) {\n+        for (op, _) in &asm.operands {\n+            match op {\n+                InlineAsmOperand::In { expr, .. }\n+                | InlineAsmOperand::Out { expr: Some(expr), .. }\n+                | InlineAsmOperand::InOut { expr, .. } => self.visit_expr(expr),\n+                InlineAsmOperand::Out { expr: None, .. } => {}\n+                InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n+                    self.visit_expr(in_expr);\n+                    if let Some(out_expr) = out_expr {\n+                        self.visit_expr(out_expr);\n+                    }\n+                }\n+                InlineAsmOperand::Const { anon_const, .. } => {\n+                    // Although this is `DefKind::AnonConst`, it is allowed to reference outer\n+                    // generic parameters like an inline const.\n+                    self.resolve_inline_const(anon_const);\n+                }\n+                InlineAsmOperand::Sym { sym } => self.visit_inline_asm_sym(sym),\n+            }\n+        }\n+    }\n+\n     fn visit_inline_asm_sym(&mut self, sym: &'ast InlineAsmSym) {\n         // This is similar to the code for AnonConst.\n         self.with_rib(ValueNS, InlineAsmSymRibKind, |this| {"}, {"sha": "20d7924d680349b32c500d9653c8512c535fd463", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10d9ecda48f828e174d7a863fc43a155ad086efd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d9ecda48f828e174d7a863fc43a155ad086efd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=10d9ecda48f828e174d7a863fc43a155ad086efd", "patch": "@@ -2641,10 +2641,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         self.check_expr_asm_operand(out_expr, false);\n                     }\n                 }\n-                hir::InlineAsmOperand::Const { anon_const }\n-                | hir::InlineAsmOperand::SymFn { anon_const } => {\n-                    self.to_const(anon_const);\n-                }\n+                // `AnonConst`s have their own body and is type-checked separately.\n+                // As they don't flow into the type system we don't need them to\n+                // be well-formed.\n+                hir::InlineAsmOperand::Const { .. } | hir::InlineAsmOperand::SymFn { .. } => {}\n                 hir::InlineAsmOperand::SymStatic { .. } => {}\n             }\n         }"}, {"sha": "7f43f96c9a2b14583bb495441bd8eec7412209cb", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10d9ecda48f828e174d7a863fc43a155ad086efd/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d9ecda48f828e174d7a863fc43a155ad086efd/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=10d9ecda48f828e174d7a863fc43a155ad086efd", "patch": "@@ -1556,6 +1556,18 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                     Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) => {\n                         Some(tcx.typeck_root_def_id(def_id))\n                     }\n+                    // Exclude `GlobalAsm` here which cannot have generics.\n+                    Node::Expr(&Expr { kind: ExprKind::InlineAsm(asm), .. })\n+                        if asm.operands.iter().any(|(op, _op_sp)| match op {\n+                            hir::InlineAsmOperand::Const { anon_const }\n+                            | hir::InlineAsmOperand::SymFn { anon_const } => {\n+                                anon_const.hir_id == hir_id\n+                            }\n+                            _ => false,\n+                        }) =>\n+                    {\n+                        Some(parent_def_id.to_def_id())\n+                    }\n                     _ => None,\n                 }\n             }"}, {"sha": "55c5587804b322059b20f95c1d562059c7a61f2b", "filename": "src/test/ui/asm/generic-const.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/10d9ecda48f828e174d7a863fc43a155ad086efd/src%2Ftest%2Fui%2Fasm%2Fgeneric-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d9ecda48f828e174d7a863fc43a155ad086efd/src%2Ftest%2Fui%2Fasm%2Fgeneric-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fgeneric-const.rs?ref=10d9ecda48f828e174d7a863fc43a155ad086efd", "patch": "@@ -0,0 +1,30 @@\n+// needs-asm-support\n+// build-pass\n+\n+#![feature(asm_const, asm_sym)]\n+\n+use std::arch::asm;\n+\n+fn foofoo<const N: usize>() {}\n+\n+unsafe fn foo<const N: usize>() {\n+    asm!(\"/* {0} */\", const N);\n+    asm!(\"/* {0} */\", const N + 1);\n+    asm!(\"/* {0} */\", sym foofoo::<N>);\n+}\n+\n+fn barbar<T>() {}\n+\n+unsafe fn bar<T>() {\n+    asm!(\"/* {0} */\", const std::mem::size_of::<T>());\n+    asm!(\"/* {0} */\", const std::mem::size_of::<(T, T)>());\n+    asm!(\"/* {0} */\", sym barbar::<T>);\n+    asm!(\"/* {0} */\", sym barbar::<(T, T)>);\n+}\n+\n+fn main() {\n+    unsafe {\n+        foo::<0>();\n+        bar::<usize>();\n+    }\n+}"}, {"sha": "367a035387bc8f785017077fd42a977363db4450", "filename": "src/test/ui/asm/type-check-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10d9ecda48f828e174d7a863fc43a155ad086efd/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d9ecda48f828e174d7a863fc43a155ad086efd/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs?ref=10d9ecda48f828e174d7a863fc43a155ad086efd", "patch": "@@ -63,7 +63,6 @@ fn main() {\n \n unsafe fn generic<T>() {\n     asm!(\"{}\", sym generic::<T>);\n-    //~^ generic parameters may not be used in const operations\n }\n \n // Const operands must be integers and must be constants."}, {"sha": "bf5ea1befb69e9ae918531b14e4a5b616be97e78", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/10d9ecda48f828e174d7a863fc43a155ad086efd/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10d9ecda48f828e174d7a863fc43a155ad086efd/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=10d9ecda48f828e174d7a863fc43a155ad086efd", "patch": "@@ -33,15 +33,6 @@ LL |         asm!(\"{}\", sym x);\n    |\n    = help: `sym` operands must refer to either a function or a static\n \n-error: generic parameters may not be used in const operations\n-  --> $DIR/type-check-1.rs:65:30\n-   |\n-LL |     asm!(\"{}\", sym generic::<T>);\n-   |                              ^ cannot perform const operation using `T`\n-   |\n-   = note: type parameters may not be used in const expressions\n-   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n-\n error[E0308]: mismatched types\n   --> $DIR/type-check-1.rs:55:26\n    |\n@@ -109,21 +100,21 @@ LL |         asm!(\"{}\", inout(reg) v[..]);\n    = note: all inline asm arguments must have a statically known size\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:74:25\n+  --> $DIR/type-check-1.rs:73:25\n    |\n LL | global_asm!(\"{}\", const 0f32);\n    |                         ^^^^ expected integer, found `f32`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:76:25\n+  --> $DIR/type-check-1.rs:75:25\n    |\n LL | global_asm!(\"{}\", const 0 as *mut u8);\n    |                         ^^^^^^^^^^^^ expected integer, found *-ptr\n    |\n    = note:     expected type `{integer}`\n            found raw pointer `*mut u8`\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 14 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0435.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "936918a3cfc864b542c94d3d59435a0bb9602726", "filename": "src/test/ui/feature-gates/feature-gate-asm_const.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10d9ecda48f828e174d7a863fc43a155ad086efd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d9ecda48f828e174d7a863fc43a155ad086efd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_const.rs?ref=10d9ecda48f828e174d7a863fc43a155ad086efd", "patch": "@@ -2,8 +2,14 @@\n \n use std::arch::asm;\n \n+unsafe fn foo<const N: usize>() {\n+    asm!(\"mov eax, {}\", const N + 1);\n+    //~^ ERROR const operands for inline assembly are unstable\n+}\n+\n fn main() {\n     unsafe {\n+        foo::<0>();\n         asm!(\"mov eax, {}\", const 123);\n         //~^ ERROR const operands for inline assembly are unstable\n     }"}, {"sha": "c248374ec4924cf2e742210620f8d371754e1438", "filename": "src/test/ui/feature-gates/feature-gate-asm_const.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/10d9ecda48f828e174d7a863fc43a155ad086efd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10d9ecda48f828e174d7a863fc43a155ad086efd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_const.stderr?ref=10d9ecda48f828e174d7a863fc43a155ad086efd", "patch": "@@ -1,12 +1,21 @@\n error[E0658]: const operands for inline assembly are unstable\n-  --> $DIR/feature-gate-asm_const.rs:7:29\n+  --> $DIR/feature-gate-asm_const.rs:6:25\n+   |\n+LL |     asm!(\"mov eax, {}\", const N + 1);\n+   |                         ^^^^^^^^^^^\n+   |\n+   = note: see issue #93332 <https://github.com/rust-lang/rust/issues/93332> for more information\n+   = help: add `#![feature(asm_const)]` to the crate attributes to enable\n+\n+error[E0658]: const operands for inline assembly are unstable\n+  --> $DIR/feature-gate-asm_const.rs:13:29\n    |\n LL |         asm!(\"mov eax, {}\", const 123);\n    |                             ^^^^^^^^^\n    |\n    = note: see issue #93332 <https://github.com/rust-lang/rust/issues/93332> for more information\n    = help: add `#![feature(asm_const)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "0de6b3abb18bb093faca77161f60ff29edac66db", "filename": "src/test/ui/feature-gates/feature-gate-asm_sym.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10d9ecda48f828e174d7a863fc43a155ad086efd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d9ecda48f828e174d7a863fc43a155ad086efd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.rs?ref=10d9ecda48f828e174d7a863fc43a155ad086efd", "patch": "@@ -2,9 +2,18 @@\n \n use std::arch::asm;\n \n+fn bar<const N: usize>() {}\n+\n+fn foo<const N: usize>() {\n+    unsafe {\n+        asm!(\"mov eax, {}\", sym bar::<N>);\n+        //~^ ERROR sym operands for inline assembly are unstable\n+    }\n+}\n+\n fn main() {\n     unsafe {\n-        asm!(\"mov eax, {}\", sym main);\n+        asm!(\"mov eax, {}\", sym foo::<0>);\n         //~^ ERROR sym operands for inline assembly are unstable\n     }\n }"}, {"sha": "d4b16f60b0b4196ffa862e44221794c70f2b4360", "filename": "src/test/ui/feature-gates/feature-gate-asm_sym.stderr", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/10d9ecda48f828e174d7a863fc43a155ad086efd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/10d9ecda48f828e174d7a863fc43a155ad086efd/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm_sym.stderr?ref=10d9ecda48f828e174d7a863fc43a155ad086efd", "patch": "@@ -1,12 +1,21 @@\n error[E0658]: sym operands for inline assembly are unstable\n-  --> $DIR/feature-gate-asm_sym.rs:7:29\n+  --> $DIR/feature-gate-asm_sym.rs:9:29\n    |\n-LL |         asm!(\"mov eax, {}\", sym main);\n-   |                             ^^^^^^^^\n+LL |         asm!(\"mov eax, {}\", sym bar::<N>);\n+   |                             ^^^^^^^^^^^^\n    |\n    = note: see issue #93333 <https://github.com/rust-lang/rust/issues/93333> for more information\n    = help: add `#![feature(asm_sym)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: sym operands for inline assembly are unstable\n+  --> $DIR/feature-gate-asm_sym.rs:16:29\n+   |\n+LL |         asm!(\"mov eax, {}\", sym foo::<0>);\n+   |                             ^^^^^^^^^^^^\n+   |\n+   = note: see issue #93333 <https://github.com/rust-lang/rust/issues/93333> for more information\n+   = help: add `#![feature(asm_sym)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}