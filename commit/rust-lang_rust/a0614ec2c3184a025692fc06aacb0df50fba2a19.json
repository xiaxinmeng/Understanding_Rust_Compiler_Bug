{"sha": "a0614ec2c3184a025692fc06aacb0df50fba2a19", "node_id": "C_kwDOAAsO6NoAKGEwNjE0ZWMyYzMxODRhMDI1NjkyZmMwNmFhY2IwZGY1MGZiYTJhMTk", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-10-04T21:54:47Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2023-01-09T22:07:25Z"}, "message": "fix: merge conflict", "tree": {"sha": "138ba84e6583a5d0ade7eeee3a883bfaf473c7a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/138ba84e6583a5d0ade7eeee3a883bfaf473c7a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0614ec2c3184a025692fc06aacb0df50fba2a19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0614ec2c3184a025692fc06aacb0df50fba2a19", "html_url": "https://github.com/rust-lang/rust/commit/a0614ec2c3184a025692fc06aacb0df50fba2a19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0614ec2c3184a025692fc06aacb0df50fba2a19/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc00aa31142199ac6901fd08e4e4fd2be9b22be3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc00aa31142199ac6901fd08e4e4fd2be9b22be3", "html_url": "https://github.com/rust-lang/rust/commit/dc00aa31142199ac6901fd08e4e4fd2be9b22be3"}], "stats": {"total": 84, "additions": 55, "deletions": 29}, "files": [{"sha": "391c4cb671d5cf6fa754467e41b1b562a910e72a", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 52, "deletions": 24, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a0614ec2c3184a025692fc06aacb0df50fba2a19/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0614ec2c3184a025692fc06aacb0df50fba2a19/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=a0614ec2c3184a025692fc06aacb0df50fba2a19", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::{fluent, AddToDiagnostic, Applicability, DecorateLint, EmissionGuarantee};\n+use rustc_errors::{fluent, AddToDiagnostic, Applicability, DecorateLint};\n use rustc_hir::def_id::DefId;\n use rustc_macros::{LintDiagnostic, Subdiagnostic};\n use rustc_middle::ty::{Predicate, Ty, TyCtxt};\n@@ -88,9 +88,11 @@ pub struct NonFmtPanicUnused {\n     pub suggestion: Option<Span>,\n }\n \n-impl<G: EmissionGuarantee> DecorateLint<'_, G> for NonFmtPanicUnused {\n-    fn decorate_lint(self, diag: rustc_errors::LintDiagnosticBuilder<'_, G>) {\n-        let mut diag = diag.build(fluent::lint_non_fmt_panic_unused);\n+impl<'a> DecorateLint<'a, ()> for NonFmtPanicUnused {\n+    fn decorate_lint<'b>(\n+        self,\n+        diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n+    ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n         diag.set_arg(\"count\", self.count);\n         diag.note(fluent::note);\n         if let Some(span) = self.suggestion {\n@@ -107,7 +109,11 @@ impl<G: EmissionGuarantee> DecorateLint<'_, G> for NonFmtPanicUnused {\n                 Applicability::MachineApplicable,\n             );\n         }\n-        diag.emit();\n+        diag\n+    }\n+\n+    fn msg(&self) -> rustc_errors::DiagnosticMessage {\n+        fluent::lint_non_fmt_panic_unused\n     }\n }\n \n@@ -202,7 +208,7 @@ impl AddToDiagnostic for NonSnakeCaseDiagSub {\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n-        };\n+        }\n     }\n }\n \n@@ -262,12 +268,17 @@ pub struct DropTraitConstraintsDiag<'a> {\n     pub def_id: DefId,\n }\n \n-impl<'a, G: EmissionGuarantee> DecorateLint<'_, G> for DropTraitConstraintsDiag<'a> {\n-    fn decorate_lint(self, diag: rustc_errors::LintDiagnosticBuilder<'_, G>) {\n-        let mut diag = diag.build(fluent::lint_drop_trait_constraints);\n+impl<'a> DecorateLint<'a, ()> for DropTraitConstraintsDiag<'_> {\n+    fn decorate_lint<'b>(\n+        self,\n+        diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n+    ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n         diag.set_arg(\"predicate\", self.predicate);\n-        diag.set_arg(\"needs_drop\", self.tcx.def_path_str(self.def_id));\n-        diag.emit();\n+        diag.set_arg(\"needs_drop\", self.tcx.def_path_str(self.def_id))\n+    }\n+\n+    fn msg(&self) -> rustc_errors::DiagnosticMessage {\n+        fluent::lint_drop_trait_constraints\n     }\n }\n \n@@ -276,11 +287,16 @@ pub struct DropGlue<'a> {\n     pub def_id: DefId,\n }\n \n-impl<'a, G: EmissionGuarantee> DecorateLint<'_, G> for DropGlue<'a> {\n-    fn decorate_lint(self, diag: rustc_errors::LintDiagnosticBuilder<'_, G>) {\n-        let mut diag = diag.build(fluent::lint_drop_glue);\n-        diag.set_arg(\"needs_drop\", self.tcx.def_path_str(self.def_id));\n-        diag.emit();\n+impl<'a> DecorateLint<'a, ()> for DropGlue<'_> {\n+    fn decorate_lint<'b>(\n+        self,\n+        diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n+    ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n+        diag.set_arg(\"needs_drop\", self.tcx.def_path_str(self.def_id))\n+    }\n+\n+    fn msg(&self) -> rustc_errors::DiagnosticMessage {\n+        fluent::lint_drop_glue\n     }\n }\n \n@@ -359,9 +375,11 @@ pub struct OverflowingInt<'a> {\n }\n \n // FIXME: refactor with `Option<&'a str>` in macro\n-impl<'a, G: EmissionGuarantee> DecorateLint<'_, G> for OverflowingInt<'a> {\n-    fn decorate_lint(self, diag: rustc_errors::LintDiagnosticBuilder<'_, G>) {\n-        let mut diag = diag.build(fluent::lint_overflowing_int);\n+impl<'a> DecorateLint<'a, ()> for OverflowingInt<'_> {\n+    fn decorate_lint<'b>(\n+        self,\n+        diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n+    ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n         diag.set_arg(\"ty\", self.ty);\n         diag.set_arg(\"lit\", self.lit);\n         diag.set_arg(\"min\", self.min);\n@@ -371,7 +389,11 @@ impl<'a, G: EmissionGuarantee> DecorateLint<'_, G> for OverflowingInt<'a> {\n             diag.set_arg(\"suggestion_ty\", suggestion_ty);\n             diag.help(fluent::help);\n         }\n-        diag.emit();\n+        diag\n+    }\n+\n+    fn msg(&self) -> rustc_errors::DiagnosticMessage {\n+        fluent::lint_overflowing_int\n     }\n }\n \n@@ -484,17 +506,23 @@ pub struct UnusedDef<'a, 'b> {\n }\n \n // FIXME: refactor with `Option<String>` in macro\n-impl<'a, 'b, G: EmissionGuarantee> DecorateLint<'_, G> for UnusedDef<'a, 'b> {\n-    fn decorate_lint(self, diag: rustc_errors::LintDiagnosticBuilder<'_, G>) {\n-        let mut diag = diag.build(fluent::lint_unused_def);\n+impl<'a> DecorateLint<'a, ()> for UnusedDef<'_, '_> {\n+    fn decorate_lint<'b>(\n+        self,\n+        diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n+    ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n         diag.set_arg(\"pre\", self.pre);\n         diag.set_arg(\"post\", self.post);\n         diag.set_arg(\"def\", self.cx.tcx.def_path_str(self.def_id));\n         // check for #[must_use = \"...\"]\n         if let Some(note) = self.note {\n             diag.note(note.as_str());\n         }\n-        diag.emit();\n+        diag\n+    }\n+\n+    fn msg(&self) -> rustc_errors::DiagnosticMessage {\n+        fluent::lint_unused_def\n     }\n }\n "}, {"sha": "ed796940b89df4d6f77b6cc2a3a1c858d9abf826", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0614ec2c3184a025692fc06aacb0df50fba2a19/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0614ec2c3184a025692fc06aacb0df50fba2a19/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=a0614ec2c3184a025692fc06aacb0df50fba2a19", "patch": "@@ -2,7 +2,6 @@\n #![deny(rustc::diagnostic_outside_of_impl)]\n use crate::context::LintContext;\n use crate::lints::NoopMethodCallDiag;\n-use crate::rustc_middle::ty::TypeVisitable;\n use crate::LateContext;\n use crate::LateLintPass;\n use rustc_hir::def::DefKind;"}, {"sha": "3d797d84c04f73b8dae081efb36638171d0ebc10", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a0614ec2c3184a025692fc06aacb0df50fba2a19/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0614ec2c3184a025692fc06aacb0df50fba2a19/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=a0614ec2c3184a025692fc06aacb0df50fba2a19", "patch": "@@ -1138,10 +1138,9 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 CItemKind::Definition => \"fn\",\n             };\n             #[allow(rustc::diagnostic_outside_of_impl)]\n-            let mut diag = lint.build(fluent::lint_improper_ctypes);\n-            diag.set_arg(\"ty\", ty);\n-            diag.set_arg(\"desc\", item_description);\n-            diag.span_label(sp, fluent::label);\n+            lint.set_arg(\"ty\", ty);\n+            lint.set_arg(\"desc\", item_description);\n+            lint.span_label(sp, fluent::label);\n             if let Some(help) = help {\n                 lint.help(help);\n             }"}]}