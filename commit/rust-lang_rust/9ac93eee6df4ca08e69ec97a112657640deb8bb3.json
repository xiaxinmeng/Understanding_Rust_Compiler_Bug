{"sha": "9ac93eee6df4ca08e69ec97a112657640deb8bb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYzkzZWVlNmRmNGNhMDhlNjllYzk3YTExMjY1NzY0MGRlYjhiYjM=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-10T20:51:07Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-03-17T18:15:40Z"}, "message": "Hold index of generator `self` arg in `const`", "tree": {"sha": "fbed58f15dc31b5d67a23ba9668c6be1e5b02703", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbed58f15dc31b5d67a23ba9668c6be1e5b02703"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ac93eee6df4ca08e69ec97a112657640deb8bb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac93eee6df4ca08e69ec97a112657640deb8bb3", "html_url": "https://github.com/rust-lang/rust/commit/9ac93eee6df4ca08e69ec97a112657640deb8bb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ac93eee6df4ca08e69ec97a112657640deb8bb3/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc4a5770fa7d059166dd01d45c0596641905c59a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4a5770fa7d059166dd01d45c0596641905c59a", "html_url": "https://github.com/rust-lang/rust/commit/cc4a5770fa7d059166dd01d45c0596641905c59a"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "a179cd310750225c9f1dda6853a7f72a43cdbb00", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9ac93eee6df4ca08e69ec97a112657640deb8bb3/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac93eee6df4ca08e69ec97a112657640deb8bb3/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=9ac93eee6df4ca08e69ec97a112657640deb8bb3", "patch": "@@ -107,15 +107,15 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor<'tcx> {\n     }\n \n     fn visit_local(&mut self, local: &mut Local, _: PlaceContext, _: Location) {\n-        assert_ne!(*local, self_arg());\n+        assert_ne!(*local, SELF_ARG);\n     }\n \n     fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {\n-        if place.local == self_arg() {\n+        if place.local == SELF_ARG {\n             replace_base(\n                 place,\n                 Place {\n-                    local: self_arg(),\n+                    local: SELF_ARG,\n                     projection: self.tcx().intern_place_elems(&[ProjectionElem::Deref]),\n                 },\n                 self.tcx,\n@@ -125,7 +125,7 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor<'tcx> {\n \n             for elem in place.projection.iter() {\n                 if let PlaceElem::Index(local) = elem {\n-                    assert_ne!(*local, self_arg());\n+                    assert_ne!(*local, SELF_ARG);\n                 }\n             }\n         }\n@@ -143,15 +143,15 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n     }\n \n     fn visit_local(&mut self, local: &mut Local, _: PlaceContext, _: Location) {\n-        assert_ne!(*local, self_arg());\n+        assert_ne!(*local, SELF_ARG);\n     }\n \n     fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {\n-        if place.local == self_arg() {\n+        if place.local == SELF_ARG {\n             replace_base(\n                 place,\n                 Place {\n-                    local: self_arg(),\n+                    local: SELF_ARG,\n                     projection: self.tcx().intern_place_elems(&[ProjectionElem::Field(\n                         Field::new(0),\n                         self.ref_gen_ty,\n@@ -164,7 +164,7 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n \n             for elem in place.projection.iter() {\n                 if let PlaceElem::Index(local) = elem {\n-                    assert_ne!(*local, self_arg());\n+                    assert_ne!(*local, SELF_ARG);\n                 }\n             }\n         }\n@@ -180,9 +180,7 @@ fn replace_base<'tcx>(place: &mut Place<'tcx>, new_base: Place<'tcx>, tcx: TyCtx\n     place.projection = tcx.intern_place_elems(&new_projection);\n }\n \n-fn self_arg() -> Local {\n-    Local::new(1)\n-}\n+const SELF_ARG: Local = Local::from_u32(1);\n \n /// Generator has not been resumed yet.\n const UNRESUMED: usize = GeneratorSubsts::UNRESUMED;\n@@ -237,7 +235,7 @@ impl TransformVisitor<'tcx> {\n \n     // Create a Place referencing a generator struct field\n     fn make_field(&self, variant_index: VariantIdx, idx: usize, ty: Ty<'tcx>) -> Place<'tcx> {\n-        let self_place = Place::from(self_arg());\n+        let self_place = Place::from(SELF_ARG);\n         let base = self.tcx.mk_place_downcast_unnamed(self_place, variant_index);\n         let mut projection = base.projection.to_vec();\n         projection.push(ProjectionElem::Field(Field::new(idx), ty));\n@@ -247,7 +245,7 @@ impl TransformVisitor<'tcx> {\n \n     // Create a statement which changes the discriminant\n     fn set_discr(&self, state_disc: VariantIdx, source_info: SourceInfo) -> Statement<'tcx> {\n-        let self_place = Place::from(self_arg());\n+        let self_place = Place::from(SELF_ARG);\n         Statement {\n             source_info,\n             kind: StatementKind::SetDiscriminant {\n@@ -263,7 +261,7 @@ impl TransformVisitor<'tcx> {\n         let local_decls_len = body.local_decls.push(temp_decl);\n         let temp = Place::from(local_decls_len);\n \n-        let self_place = Place::from(self_arg());\n+        let self_place = Place::from(SELF_ARG);\n         let assign = Statement {\n             source_info: source_info(body),\n             kind: StatementKind::Assign(box (temp, Rvalue::Discriminant(self_place))),\n@@ -540,7 +538,7 @@ fn locals_live_across_suspend_points(\n             live_locals_here.intersect(&liveness.outs[block]);\n \n             // The generator argument is ignored.\n-            live_locals_here.remove(self_arg());\n+            live_locals_here.remove(SELF_ARG);\n \n             debug!(\"loc = {:?}, live_locals_here = {:?}\", loc, live_locals_here);\n \n@@ -837,15 +835,14 @@ fn elaborate_generator_drops<'tcx>(\n     // generator's resume function.\n \n     let param_env = tcx.param_env(def_id);\n-    let gen = self_arg();\n \n     let mut elaborator = DropShimElaborator { body, patch: MirPatch::new(body), tcx, param_env };\n \n     for (block, block_data) in body.basic_blocks().iter_enumerated() {\n         let (target, unwind, source_info) = match block_data.terminator() {\n             Terminator { source_info, kind: TerminatorKind::Drop { location, target, unwind } } => {\n                 if let Some(local) = location.as_local() {\n-                    if local == gen {\n+                    if local == SELF_ARG {\n                         (target, unwind, source_info)\n                     } else {\n                         continue;\n@@ -864,7 +861,7 @@ fn elaborate_generator_drops<'tcx>(\n         elaborate_drop(\n             &mut elaborator,\n             *source_info,\n-            &Place::from(gen),\n+            &Place::from(SELF_ARG),\n             (),\n             *target,\n             unwind,\n@@ -918,7 +915,7 @@ fn create_generator_drop_shim<'tcx>(\n     make_generator_state_argument_indirect(tcx, def_id, &mut body);\n \n     // Change the generator argument from &mut to *mut\n-    body.local_decls[self_arg()] = LocalDecl {\n+    body.local_decls[SELF_ARG] = LocalDecl {\n         mutability: Mutability::Mut,\n         ty: tcx.mk_ptr(ty::TypeAndMut { ty: gen_ty, mutbl: hir::Mutability::Mut }),\n         user_ty: UserTypeProjections::none(),\n@@ -933,7 +930,7 @@ fn create_generator_drop_shim<'tcx>(\n             0,\n             Statement {\n                 source_info,\n-                kind: StatementKind::Retag(RetagKind::Raw, box Place::from(self_arg())),\n+                kind: StatementKind::Retag(RetagKind::Raw, box Place::from(SELF_ARG)),\n             },\n         )\n     }\n@@ -1042,7 +1039,7 @@ fn insert_clean_drop(body: &mut BodyAndCache<'_>) -> BasicBlock {\n     // Create a block to destroy an unresumed generators. This can only destroy upvars.\n     let drop_clean = BasicBlock::new(body.basic_blocks().len());\n     let term = TerminatorKind::Drop {\n-        location: Place::from(self_arg()),\n+        location: Place::from(SELF_ARG),\n         target: return_block,\n         unwind: None,\n     };"}]}