{"sha": "5567b8a63214ce9bf2d4fdd6b4a8bd9c2c3eded7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NjdiOGE2MzIxNGNlOWJmMmQ0ZmRkNmI0YThiZDljMmMzZWRlZDc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-21T13:59:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-21T13:59:29Z"}, "message": "Merge #9314\n\n9314: Fix extract_function with await r=sasurau4 a=sasurau4\n\nFix #9287 \n\nCo-authored-by: Daiki Ihara <sasurau4@gmail.com>", "tree": {"sha": "b67ddb5586f5bb486abf88b450737180a4bae88a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b67ddb5586f5bb486abf88b450737180a4bae88a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5567b8a63214ce9bf2d4fdd6b4a8bd9c2c3eded7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg0JtBCRBK7hj4Ov3rIwAAo3QIAI+5ACvvvO4uabpc/2ca5k69\nBApMUB1Kuc6m4sRd2HNHKntSzmvWmVs22mfukzRefgzea63xmVtiigfzgDPWrvbD\n59BD57sjhyBsFcCgS1QjF1emMXw6g7taXr1mpXkaIHObFUyph0kMOGXuEdKNRNKs\nBU1J+L+Z9m45w20XultAF3zRWIlxfcV1S8RBSZnl8bHM4kn2y/QsFZ3sLF2EnJWL\nD3JntzJJeyqGLV5VzPEjT91lZikzx+SZXRdwXV7clNdzUIt9nAq+a8jdZpmc25pv\n4/g/EjbOW5TEH841dCbOcfbAfIMlCDQWGPFqkRFRkNN7rqnKcwZophB7HNNkrSc=\n=Ems9\n-----END PGP SIGNATURE-----\n", "payload": "tree b67ddb5586f5bb486abf88b450737180a4bae88a\nparent b48aba009025701c4adb45e2042f0bcdb9d949a7\nparent 873aa904f253abc60ebb5b7f8ce4412f3c984604\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624283969 +0000\ncommitter GitHub <noreply@github.com> 1624283969 +0000\n\nMerge #9314\n\n9314: Fix extract_function with await r=sasurau4 a=sasurau4\n\nFix #9287 \n\nCo-authored-by: Daiki Ihara <sasurau4@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5567b8a63214ce9bf2d4fdd6b4a8bd9c2c3eded7", "html_url": "https://github.com/rust-lang/rust/commit/5567b8a63214ce9bf2d4fdd6b4a8bd9c2c3eded7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5567b8a63214ce9bf2d4fdd6b4a8bd9c2c3eded7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b48aba009025701c4adb45e2042f0bcdb9d949a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b48aba009025701c4adb45e2042f0bcdb9d949a7", "html_url": "https://github.com/rust-lang/rust/commit/b48aba009025701c4adb45e2042f0bcdb9d949a7"}, {"sha": "873aa904f253abc60ebb5b7f8ce4412f3c984604", "url": "https://api.github.com/repos/rust-lang/rust/commits/873aa904f253abc60ebb5b7f8ce4412f3c984604", "html_url": "https://github.com/rust-lang/rust/commit/873aa904f253abc60ebb5b7f8ce4412f3c984604"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "870d4f66563ee87c5c583fe6144157694b7e0caf", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5567b8a63214ce9bf2d4fdd6b4a8bd9c2c3eded7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5567b8a63214ce9bf2d4fdd6b4a8bd9c2c3eded7/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=5567b8a63214ce9bf2d4fdd6b4a8bd9c2c3eded7", "patch": "@@ -109,10 +109,15 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n \n             let new_indent = IndentLevel::from_node(&insert_after);\n             let old_indent = fun.body.indent_level();\n+            let body_contains_await = body_contains_await(&fun.body);\n \n-            builder.replace(target_range, format_replacement(ctx, &fun, old_indent));\n+            builder.replace(\n+                target_range,\n+                format_replacement(ctx, &fun, old_indent, body_contains_await),\n+            );\n \n-            let fn_def = format_function(ctx, module, &fun, old_indent, new_indent);\n+            let fn_def =\n+                format_function(ctx, module, &fun, old_indent, new_indent, body_contains_await);\n             let insert_offset = insert_after.text_range().end();\n             match ctx.config.snippet_cap {\n                 Some(cap) => builder.insert_snippet(cap, insert_offset, fn_def),\n@@ -954,7 +959,12 @@ fn scope_for_fn_insertion_node(node: &SyntaxNode, anchor: Anchor) -> Option<Synt\n     last_ancestor\n }\n \n-fn format_replacement(ctx: &AssistContext, fun: &Function, indent: IndentLevel) -> String {\n+fn format_replacement(\n+    ctx: &AssistContext,\n+    fun: &Function,\n+    indent: IndentLevel,\n+    body_contains_await: bool,\n+) -> String {\n     let ret_ty = fun.return_type(ctx);\n \n     let args = fun.params.iter().map(|param| param.to_arg(ctx));\n@@ -994,6 +1004,9 @@ fn format_replacement(ctx: &AssistContext, fun: &Function, indent: IndentLevel)\n         }\n     }\n     format_to!(buf, \"{}\", expr);\n+    if body_contains_await {\n+        buf.push_str(\".await\");\n+    }\n     if fun.ret_ty.is_unit()\n         && (!fun.vars_defined_in_body_and_outlive.is_empty() || !expr.is_block_like())\n     {\n@@ -1122,12 +1135,13 @@ fn format_function(\n     fun: &Function,\n     old_indent: IndentLevel,\n     new_indent: IndentLevel,\n+    body_contains_await: bool,\n ) -> String {\n     let mut fn_def = String::new();\n     let params = make_param_list(ctx, module, fun);\n     let ret_ty = make_ret_ty(ctx, module, fun);\n     let body = make_body(ctx, old_indent, new_indent, fun);\n-    let async_kw = if body_contains_await(&fun.body) { \"async \" } else { \"\" };\n+    let async_kw = if body_contains_await { \"async \" } else { \"\" };\n     match ctx.config.snippet_cap {\n         Some(_) => format_to!(fn_def, \"\\n\\n{}{}fn $0{}{}\", new_indent, async_kw, fun.name, params),\n         None => format_to!(fn_def, \"\\n\\n{}{}fn {}{}\", new_indent, async_kw, fun.name, params),\n@@ -3681,7 +3695,7 @@ async fn some_function() {\n \"#,\n             r#\"\n fn main() {\n-    fun_name();\n+    fun_name().await;\n }\n \n async fn $0fun_name() {\n@@ -3710,7 +3724,7 @@ async fn some_function() {\n \"#,\n             r#\"\n fn main() {\n-    fun_name();\n+    fun_name().await;\n }\n \n async fn $0fun_name() {"}]}