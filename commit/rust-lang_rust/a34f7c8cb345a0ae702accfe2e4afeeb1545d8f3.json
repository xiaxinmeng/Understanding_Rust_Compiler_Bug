{"sha": "a34f7c8cb345a0ae702accfe2e4afeeb1545d8f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNGY3YzhjYjM0NWEwYWU3MDJhY2NmZTJlNGFmZWViMTU0NWQ4ZjM=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-30T00:15:19Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-30T01:22:41Z"}, "message": "Switch the heap build and load environment functions to use GEP_tup_like.", "tree": {"sha": "46ca8b4e0675fcdeec096a6bbf4662cf1c0c92d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46ca8b4e0675fcdeec096a6bbf4662cf1c0c92d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a34f7c8cb345a0ae702accfe2e4afeeb1545d8f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a34f7c8cb345a0ae702accfe2e4afeeb1545d8f3", "html_url": "https://github.com/rust-lang/rust/commit/a34f7c8cb345a0ae702accfe2e4afeeb1545d8f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a34f7c8cb345a0ae702accfe2e4afeeb1545d8f3/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56f0fbeafcb42cf1b07a316e6d91895144a5043b", "url": "https://api.github.com/repos/rust-lang/rust/commits/56f0fbeafcb42cf1b07a316e6d91895144a5043b", "html_url": "https://github.com/rust-lang/rust/commit/56f0fbeafcb42cf1b07a316e6d91895144a5043b"}], "stats": {"total": 54, "additions": 29, "deletions": 25}, "files": [{"sha": "96431da3d5c93a3080a903e9c87dd2596f5d6e66", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a34f7c8cb345a0ae702accfe2e4afeeb1545d8f3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a34f7c8cb345a0ae702accfe2e4afeeb1545d8f3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a34f7c8cb345a0ae702accfe2e4afeeb1545d8f3", "patch": "@@ -3671,8 +3671,8 @@ fn build_environment_heap(bcx: @block_ctxt, lltydescs: ValueRef[],\n     // ourselves) into a vector.  The whole things ends up looking\n     // like:\n \n-    // closure_tys = [tydesc_ty, outgoing_fty, [bound_ty1, bound_ty2,\n-    // ...], [tydesc_ty, tydesc_ty, ...]]\n+    // closure_tys = [tydesc_ty, [bound_ty1, bound_ty2, ...], [tydesc_ty,\n+    // tydesc_ty, ...]]\n     let closure_tys: ty::t[] =\n         ~[tydesc_ty, bindings_ty, ty::mk_imm_tup(bcx_tcx(bcx), captured_tys)];\n \n@@ -3697,22 +3697,27 @@ fn build_environment_heap(bcx: @block_ctxt, lltydescs: ValueRef[],\n     // Copy expr values into boxed bindings.\n     let i = 0u;\n     let bindings =\n-        bcx.build.GEP(closure, ~[C_int(0), C_int(abi::closure_elt_bindings)]);\n+        GEP_tup_like(bcx, closure_ty, closure,\n+                     ~[0, abi::closure_elt_bindings]);\n+    bcx = bindings.bcx;\n     for lv: lval_result  in bound_vals {\n-        let bound = bcx.build.GEP(bindings, ~[C_int(0), C_int(i as int)]);\n-        bcx = move_val_if_temp(bcx, INIT, bound, lv, bound_tys.(i)).bcx;\n+        let bound = GEP_tup_like(bcx, bindings_ty, bindings.val,\n+                                 ~[0, i as int]);\n+        bcx = move_val_if_temp(bound.bcx, INIT,\n+                               bound.val, lv, bound_tys.(i)).bcx;\n         i += 1u;\n     }\n \n     // If necessary, copy tydescs describing type parameters into the\n     // appropriate slot in the closure.\n     let ty_params_slot =\n-        bcx.build.GEP(closure,\n-                      ~[C_int(0), C_int(abi::closure_elt_ty_params)]);\n+        GEP_tup_like(bcx, closure_ty, closure,\n+                     ~[0, abi::closure_elt_ty_params]);\n+    bcx = ty_params_slot.bcx;\n     i = 0u;\n     for td: ValueRef  in lltydescs {\n         let ty_param_slot =\n-            bcx.build.GEP(ty_params_slot, ~[C_int(0), C_int(i as int)]);\n+            bcx.build.GEP(ty_params_slot.val, ~[C_int(0), C_int(i as int)]);\n         bcx.build.Store(td, ty_param_slot);\n         i += 1u;\n     }\n@@ -3802,34 +3807,33 @@ fn load_environment_heap(enclosing_cx: &@block_ctxt, fcx: &@fn_ctxt,\n                          envty: &ty::t, upvars: &@ast::node_id[]) {\n     let bcx = new_raw_block_ctxt(fcx, fcx.llcopyargs);\n \n-    let llenvptr =\n-        bcx.build.GEP(fcx.llenv, ~[C_int(0), C_int(abi::box_rc_field_body)]);\n-    let llenvptrty = T_ptr(type_of(bcx_ccx(bcx), bcx.sp, envty));;\n-    llenvptr = bcx.build.PointerCast(llenvptr, llenvptrty);\n+    let ty = ty::mk_imm_box(bcx_tcx(bcx), envty);\n+    let llty = type_of(bcx_ccx(bcx), bcx.sp, ty);\n+    let llclosure = bcx.build.PointerCast(fcx.llenv, llty);\n+\n+    let path = ~[0, abi::box_rc_field_body];\n \n     // Populate the upvars from the environment.\n-    let llbindingsptr =\n-        bcx.build.GEP(llenvptr,\n-                      ~[C_int(0), C_int(abi::closure_elt_bindings)]);\n+    let bindings_path = path + ~[abi::closure_elt_bindings];\n     let i = 0u;\n     for upvar_id: ast::node_id  in *upvars {\n         let llupvarptr =\n-            bcx.build.GEP(llbindingsptr, ~[C_int(0), C_int(i as int)]);\n+            GEP_tup_like(bcx, ty, llclosure, bindings_path + ~[i as int]);\n+        bcx = llupvarptr.bcx;\n         let def_id = ast::def_id_of_def(bcx_tcx(bcx).def_map.get(upvar_id));\n-        fcx.llupvars.insert(def_id.node, llupvarptr);\n+        fcx.llupvars.insert(def_id.node, llupvarptr.val);\n         i += 1u;\n     }\n \n     // Populate the type parameters from the environment.\n-    let lltydescsptr =\n-        bcx.build.GEP(llenvptr,\n-                      ~[C_int(0), C_int(abi::closure_elt_ty_params)]);\n     let tydesc_count = std::ivec::len(enclosing_cx.fcx.lltydescs);\n+    let tydesc_path = path + ~[abi::closure_elt_ty_params];\n     i = 0u;\n     while i < tydesc_count {\n         let lltydescptr =\n-            bcx.build.GEP(lltydescsptr, ~[C_int(0), C_int(i as int)]);\n-        fcx.lltydescs += ~[bcx.build.Load(lltydescptr)];\n+            GEP_tup_like(bcx, ty, llclosure, tydesc_path + ~[i as int]);\n+        bcx = lltydescptr.bcx;\n+        fcx.lltydescs += ~[bcx.build.Load(lltydescptr.val)];\n         i += 1u;\n     }\n }\n@@ -4442,7 +4446,7 @@ fn trans_cast(cx: &@block_ctxt, e: &@ast::expr, id: ast::node_id) -> result {\n \n fn trans_bind_thunk(cx: &@local_ctxt, sp: &span, incoming_fty: &ty::t,\n                     outgoing_fty: &ty::t, args: &(option::t[@ast::expr])[],\n-                    closure_ty: &ty::t, bound_tys: &ty::t[],\n+                    env_ty: &ty::t, bound_tys: &ty::t[],\n                     ty_param_count: uint) -> {val: ValueRef, ty: TypeRef} {\n \n     // Here we're not necessarily constructing a thunk in the sense of\n@@ -4491,8 +4495,8 @@ fn trans_bind_thunk(cx: &@local_ctxt, sp: &span, incoming_fty: &ty::t,\n \n     // The llenv pointer needs to be the correct size.  That size is\n     // 'closure_ty', which was determined by trans_bind.\n-    let llclosure_ptr_ty =\n-        type_of(cx.ccx, sp, ty::mk_imm_box(cx.ccx.tcx, closure_ty));\n+    let closure_ty = ty::mk_imm_box(cx.ccx.tcx, env_ty);\n+    let llclosure_ptr_ty = type_of(cx.ccx, sp, closure_ty);\n     let llclosure =\n         copy_args_bcx.build.PointerCast(fcx.llenv, llclosure_ptr_ty);\n "}]}