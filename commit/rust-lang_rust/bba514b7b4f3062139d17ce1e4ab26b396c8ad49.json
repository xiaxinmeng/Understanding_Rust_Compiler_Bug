{"sha": "bba514b7b4f3062139d17ce1e4ab26b396c8ad49", "node_id": "C_kwDOAAsO6NoAKGJiYTUxNGI3YjRmMzA2MjEzOWQxN2NlMWU0YWIyNmIzOTZjOGFkNDk", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-16T13:01:28Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-16T13:01:28Z"}, "message": "Revert \"Use Predicate ConstraintCategory when normalizing\"\n\nThis reverts commit aae37f87632dd74856d55c0cd45d2c192379c990.", "tree": {"sha": "9ef5520b53828c4e6e63383023642ffc75ebaeaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ef5520b53828c4e6e63383023642ffc75ebaeaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bba514b7b4f3062139d17ce1e4ab26b396c8ad49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bba514b7b4f3062139d17ce1e4ab26b396c8ad49", "html_url": "https://github.com/rust-lang/rust/commit/bba514b7b4f3062139d17ce1e4ab26b396c8ad49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df34db9b032b15efd86df3544cc75e6d55dc492e", "url": "https://api.github.com/repos/rust-lang/rust/commits/df34db9b032b15efd86df3544cc75e6d55dc492e", "html_url": "https://github.com/rust-lang/rust/commit/df34db9b032b15efd86df3544cc75e6d55dc492e"}], "stats": {"total": 187, "additions": 15, "deletions": 172}, "files": [{"sha": "6d323b03cdaa3f1640e96cc74b004173e853ffb9", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=bba514b7b4f3062139d17ce1e4ab26b396c8ad49", "patch": "@@ -21,7 +21,10 @@ pub(crate) struct OutlivesConstraintSet<'tcx> {\n \n impl<'tcx> OutlivesConstraintSet<'tcx> {\n     pub(crate) fn push(&mut self, constraint: OutlivesConstraint<'tcx>) {\n-        debug!(\"OutlivesConstraintSet::push({:?})\", constraint);\n+        debug!(\n+            \"OutlivesConstraintSet::push({:?}: {:?} @ {:?}\",\n+            constraint.sup, constraint.sub, constraint.locations\n+        );\n         if constraint.sup == constraint.sub {\n             // 'a: 'a is pretty uninteresting\n             return;"}, {"sha": "c276719c227b011f91b8b4a3eb4e606541aa0011", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=bba514b7b4f3062139d17ce1e4ab26b396c8ad49", "patch": "@@ -31,7 +31,7 @@ use crate::session_diagnostics::{\n };\n \n use super::{OutlivesSuggestionBuilder, RegionName};\n-use crate::region_infer::{BlameConstraint, ExtraConstraintInfo};\n+use crate::region_infer::BlameConstraint;\n use crate::{\n     nll::ConstraintDescription,\n     region_infer::{values::RegionElement, TypeTest},\n@@ -354,11 +354,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     ) {\n         debug!(\"report_region_error(fr={:?}, outlived_fr={:?})\", fr, outlived_fr);\n \n-        let (blame_constraint, extra_info) =\n-            self.regioncx.best_blame_constraint(fr, fr_origin, |r| {\n+        let BlameConstraint { category, cause, variance_info, .. } = self\n+            .regioncx\n+            .best_blame_constraint(fr, fr_origin, |r| {\n                 self.regioncx.provides_universal_region(r, fr, outlived_fr)\n-            });\n-        let BlameConstraint { category, cause, variance_info, .. } = blame_constraint;\n+            })\n+            .0;\n \n         debug!(\"report_region_error: category={:?} {:?} {:?}\", category, cause, variance_info);\n \n@@ -467,14 +468,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             }\n         }\n \n-        for extra in extra_info {\n-            match extra {\n-                ExtraConstraintInfo::PlaceholderFromPredicate(span) => {\n-                    diag.span_note(span, format!(\"due to current limitations in the borrow checker, this implies a `'static` lifetime\"));\n-                }\n-            }\n-        }\n-\n         self.buffer_error(diag);\n     }\n \n@@ -566,7 +559,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     /// LL |     ref_obj(x)\n     ///    |     ^^^^^^^^^^ `x` escapes the function body here\n     /// ```\n-    #[instrument(level = \"debug\", skip(self))]\n     fn report_escaping_data_error(\n         &self,\n         errci: &ErrorConstraintInfo<'tcx>,"}, {"sha": "8a3972a12c5431cfbe2a189e99185e088fe0daf7", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=bba514b7b4f3062139d17ce1e4ab26b396c8ad49", "patch": "@@ -104,7 +104,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         );\n     }\n \n-    #[instrument(level = \"debug\", skip(self))]\n     pub(super) fn normalize_and_prove_instantiated_predicates(\n         &mut self,\n         // Keep this parameter for now, in case we start using\n@@ -119,9 +118,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             .zip(instantiated_predicates.spans.into_iter())\n         {\n             debug!(?predicate);\n-            let category = ConstraintCategory::Predicate(span);\n-            let predicate = self.normalize_with_category(predicate, locations, category);\n-            self.prove_predicate(predicate, locations, category);\n+            let predicate = self.normalize(predicate, locations);\n+            self.prove_predicate(predicate, locations, ConstraintCategory::Predicate(span));\n         }\n     }\n \n@@ -157,27 +155,15 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         })\n     }\n \n-    pub(super) fn normalize<T>(&mut self, value: T, location: impl NormalizeLocation) -> T\n-    where\n-        T: type_op::normalize::Normalizable<'tcx> + fmt::Display + Copy + 'tcx,\n-    {\n-        self.normalize_with_category(value, location, ConstraintCategory::Boring)\n-    }\n-\n     #[instrument(skip(self), level = \"debug\")]\n-    pub(super) fn normalize_with_category<T>(\n-        &mut self,\n-        value: T,\n-        location: impl NormalizeLocation,\n-        category: ConstraintCategory<'tcx>,\n-    ) -> T\n+    pub(super) fn normalize<T>(&mut self, value: T, location: impl NormalizeLocation) -> T\n     where\n         T: type_op::normalize::Normalizable<'tcx> + fmt::Display + Copy + 'tcx,\n     {\n         let param_env = self.param_env;\n         self.fully_perform_op(\n             location.to_locations(),\n-            category,\n+            ConstraintCategory::Boring,\n             param_env.and(type_op::normalize::Normalize::new(value)),\n         )\n         .unwrap_or_else(|NoSolution| {"}, {"sha": "5f714cf723ba236c631985e894359a669d7553ab", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=bba514b7b4f3062139d17ce1e4ab26b396c8ad49", "patch": "@@ -312,8 +312,6 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n     }\n \n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n-        debug!(?constant, ?location, \"visit_constant\");\n-\n         self.super_constant(constant, location);\n         let ty = self.sanitize_type(constant, constant.literal.ty());\n \n@@ -1813,8 +1811,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     }\n \n     fn check_operand(&mut self, op: &Operand<'tcx>, location: Location) {\n-        debug!(?op, ?location, \"check_operand\");\n-\n         if let Operand::Constant(constant) = op {\n             let maybe_uneval = match constant.literal {\n                 ConstantKind::Ty(ct) => match ct.kind() {"}, {"sha": "f65fc5bad0d9184144b37fa1fe0a3a41d2f6611d", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=bba514b7b4f3062139d17ce1e4ab26b396c8ad49", "patch": "@@ -48,11 +48,10 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n         T: TypeFoldable<'tcx>,\n     {\n         debug!(\n-            \"normalize::<{}>(value={:?}, param_env={:?}, cause={:?})\",\n+            \"normalize::<{}>(value={:?}, param_env={:?})\",\n             std::any::type_name::<T>(),\n             value,\n             self.param_env,\n-            self.cause,\n         );\n         if !needs_normalization(&value, self.param_env.reveal()) {\n             return Ok(Normalized { value, obligations: vec![] });"}, {"sha": "8e6c5348e71cab2194056bdb3d980a0ccc99fb8c", "filename": "src/test/ui/generic-associated-types/bugs/hrtb-implied-2.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/df34db9b032b15efd86df3544cc75e6d55dc492e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df34db9b032b15efd86df3544cc75e6d55dc492e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-2.rs?ref=df34db9b032b15efd86df3544cc75e6d55dc492e", "patch": "@@ -1,40 +0,0 @@\n-// check-fail\n-// known-bug\n-\n-// This gives us problems because `for<'a> I::Item<'a>: Debug` should mean \"for\n-// all 'a where I::Item<'a> is WF\", but really means \"for all 'a possible\"\n-\n-trait LendingIterator: Sized {\n-    type Item<'a>\n-    where\n-        Self: 'a;\n-    fn next(&mut self) -> Self::Item<'_>;\n-}\n-fn fails<I: LendingIterator, F>(iter: &mut I, f: F) -> bool\n-where\n-    F: FnMut(I::Item<'_>),\n-{\n-    let mut iter2 = Eat(iter, f);\n-    let _next = iter2.next();\n-    //~^ borrowed data escapes\n-    true\n-}\n-impl<I: LendingIterator> LendingIterator for &mut I {\n-    type Item<'a> = I::Item<'a> where Self:'a;\n-    fn next(&mut self) -> Self::Item<'_> {\n-        (**self).next()\n-    }\n-}\n-\n-struct Eat<I, F>(I, F);\n-impl<I: LendingIterator, F> Iterator for Eat<I, F>\n-where\n-    F: FnMut(I::Item<'_>),\n-{\n-    type Item = ();\n-    fn next(&mut self) -> Option<Self::Item> {\n-        None\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "1ee270398de4dcf16e1274793b6e4ffc610bcafc", "filename": "src/test/ui/generic-associated-types/bugs/hrtb-implied-2.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/df34db9b032b15efd86df3544cc75e6d55dc492e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df34db9b032b15efd86df3544cc75e6d55dc492e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-2.stderr?ref=df34db9b032b15efd86df3544cc75e6d55dc492e", "patch": "@@ -1,22 +0,0 @@\n-error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/hrtb-implied-2.rs:18:17\n-   |\n-LL | fn fails<I: LendingIterator, F>(iter: &mut I, f: F) -> bool\n-   |                                 ----  - let's call the lifetime of this reference `'1`\n-   |                                 |\n-   |                                 `iter` is a reference that is only valid in the function body\n-...\n-LL |     let _next = iter2.next();\n-   |                 ^^^^^^^^^^^^\n-   |                 |\n-   |                 `iter` escapes the function body here\n-   |                 argument requires that `'1` must outlive `'static`\n-   |\n-   = note: requirement occurs because of a mutable reference to `Eat<&mut I, F>`\n-   = note: mutable references are invariant over their type parameter\n-   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n-   = note: due to current limitations in the borrow checker, this implies a `'static` lifetime\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0521`."}, {"sha": "bc9e6c8aea85e59d40bf00efc7dc86b20f7eda9e", "filename": "src/test/ui/generic-associated-types/bugs/hrtb-implied-3.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/df34db9b032b15efd86df3544cc75e6d55dc492e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df34db9b032b15efd86df3544cc75e6d55dc492e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-3.rs?ref=df34db9b032b15efd86df3544cc75e6d55dc492e", "patch": "@@ -1,23 +0,0 @@\n-trait LendingIterator {\n-    type Item<'a>\n-    where\n-        Self: 'a;\n-}\n-\n-impl LendingIterator for &str {\n-    type Item<'a> = () where Self:'a;\n-}\n-\n-fn trivial_bound<I>(_: I)\n-where\n-    I: LendingIterator,\n-    for<'a> I::Item<'a>: Sized,\n-{\n-}\n-\n-fn fails(iter: &str) {\n-    trivial_bound(iter);\n-    //~^ borrowed data escapes\n-}\n-\n-fn main() {}"}, {"sha": "c67e02437cd8dcdbd5dce54305f40d2ae3ed8210", "filename": "src/test/ui/generic-associated-types/bugs/hrtb-implied-3.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/df34db9b032b15efd86df3544cc75e6d55dc492e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df34db9b032b15efd86df3544cc75e6d55dc492e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fhrtb-implied-3.stderr?ref=df34db9b032b15efd86df3544cc75e6d55dc492e", "patch": "@@ -1,22 +0,0 @@\n-error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/hrtb-implied-3.rs:19:5\n-   |\n-LL | fn fails(iter: &str) {\n-   |          ----  - let's call the lifetime of this reference `'1`\n-   |          |\n-   |          `iter` is a reference that is only valid in the function body\n-LL |     trivial_bound(iter);\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     `iter` escapes the function body here\n-   |     argument requires that `'1` must outlive `'static`\n-   |\n-note: due to current limitations in the borrow checker, this implies a `'static` lifetime\n-  --> $DIR/hrtb-implied-3.rs:14:26\n-   |\n-LL |     for<'a> I::Item<'a>: Sized,\n-   |                          ^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0521`."}, {"sha": "086177cc106dc224dfcdcd99dc42db122f22b250", "filename": "src/test/ui/generic-associated-types/trait-objects.extended.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr?ref=bba514b7b4f3062139d17ce1e4ab26b396c8ad49", "patch": "@@ -11,8 +11,6 @@ LL |     x.size_hint().0\n    |     |\n    |     `x` escapes the function body here\n    |     argument requires that `'1` must outlive `'static`\n-   |\n-   = note: due to current limitations in the borrow checker, this implies a `'static` lifetime\n \n error: aborting due to previous error\n "}, {"sha": "b4312091edb279f9a987b73efe3e97634be548aa", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-just-for-static.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-just-for-static.stderr?ref=bba514b7b4f3062139d17ce1e4ab26b396c8ad49", "patch": "@@ -14,12 +14,6 @@ LL | fn give_some<'a>() {\n    |              -- lifetime `'a` defined here\n LL |     want_hrtb::<&'a u32>()\n    |     ^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-note: due to current limitations in the borrow checker, this implies a `'static` lifetime\n-  --> $DIR/hrtb-just-for-static.rs:9:15\n-   |\n-LL |     where T : for<'a> Foo<&'a isize>\n-   |               ^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:30:5"}, {"sha": "1461e7fd2ddd7fbddddb647509cda2b91bfcfe72", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-perfect-forwarding.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-perfect-forwarding.stderr?ref=bba514b7b4f3062139d17ce1e4ab26b396c8ad49", "patch": "@@ -46,12 +46,6 @@ LL | fn foo_hrtb_bar_not<'b, T>(mut t: T)\n ...\n LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n-   |\n-note: due to current limitations in the borrow checker, this implies a `'static` lifetime\n-  --> $DIR/hrtb-perfect-forwarding.rs:37:8\n-   |\n-LL |     T: for<'a> Foo<&'a isize> + Bar<&'b isize>,\n-   |        ^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of `Bar` is not general enough\n   --> $DIR/hrtb-perfect-forwarding.rs:43:5"}, {"sha": "c7601caacdca3fb4e56bc147a45e82e0a05fb767", "filename": "src/test/ui/issues/issue-26217.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/src%2Ftest%2Fui%2Fissues%2Fissue-26217.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/src%2Ftest%2Fui%2Fissues%2Fissue-26217.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.stderr?ref=bba514b7b4f3062139d17ce1e4ab26b396c8ad49", "patch": "@@ -5,12 +5,6 @@ LL | fn bar<'a>() {\n    |        -- lifetime `'a` defined here\n LL |     foo::<&'a i32>();\n    |     ^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-note: due to current limitations in the borrow checker, this implies a `'static` lifetime\n-  --> $DIR/issue-26217.rs:1:30\n-   |\n-LL | fn foo<T>() where for<'a> T: 'a {}\n-   |                              ^^\n \n error: aborting due to previous error\n "}, {"sha": "242486c360a8090ea7f215d4448e6039250c8136", "filename": "src/test/ui/nll/type-test-universe.stderr", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/src%2Ftest%2Fui%2Fnll%2Ftype-test-universe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bba514b7b4f3062139d17ce1e4ab26b396c8ad49/src%2Ftest%2Fui%2Fnll%2Ftype-test-universe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-test-universe.stderr?ref=bba514b7b4f3062139d17ce1e4ab26b396c8ad49", "patch": "@@ -11,12 +11,6 @@ LL | fn test2<'a>() {\n    |          -- lifetime `'a` defined here\n LL |     outlives_forall::<Value<'a>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-   |\n-note: due to current limitations in the borrow checker, this implies a `'static` lifetime\n-  --> $DIR/type-test-universe.rs:6:16\n-   |\n-LL |     for<'u> T: 'u,\n-   |                ^^\n \n error: aborting due to 2 previous errors\n "}]}