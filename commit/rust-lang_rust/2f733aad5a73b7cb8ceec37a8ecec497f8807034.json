{"sha": "2f733aad5a73b7cb8ceec37a8ecec497f8807034", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNzMzYWFkNWE3M2I3Y2I4Y2VlYzM3YThlY2VjNDk3Zjg4MDcwMzQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-29T07:43:16Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-31T04:07:34Z"}, "message": "qualify_consts: extract remove_drop_and_storage_dead_on_promoted_locals.", "tree": {"sha": "64922dc8e41d3c612d8068d3e7629c25a6ad26b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64922dc8e41d3c612d8068d3e7629c25a6ad26b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f733aad5a73b7cb8ceec37a8ecec497f8807034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f733aad5a73b7cb8ceec37a8ecec497f8807034", "html_url": "https://github.com/rust-lang/rust/commit/2f733aad5a73b7cb8ceec37a8ecec497f8807034", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f733aad5a73b7cb8ceec37a8ecec497f8807034/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8af33b325377ea64fb9bbdc10073f9063293c9a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8af33b325377ea64fb9bbdc10073f9063293c9a6", "html_url": "https://github.com/rust-lang/rust/commit/8af33b325377ea64fb9bbdc10073f9063293c9a6"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "fe02e120f3b49dd7a70ff4f5ea0ec7464b2f11b0", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/2f733aad5a73b7cb8ceec37a8ecec497f8807034/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f733aad5a73b7cb8ceec37a8ecec497f8807034/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=2f733aad5a73b7cb8ceec37a8ecec497f8807034", "patch": "@@ -1656,35 +1656,7 @@ impl<'tcx> MirPass<'tcx> for QualifyAndPromoteConstants<'tcx> {\n                 Mode::Const => tcx.mir_const_qualif(def_id).1,\n                 _ => Checker::new(tcx, def_id, body, mode).check_const().1,\n             };\n-\n-            // In `const` and `static` everything without `StorageDead`\n-            // is `'static`, we don't have to create promoted MIR fragments,\n-            // just remove `Drop` and `StorageDead` on \"promoted\" locals.\n-            debug!(\"run_pass: promoted_temps={:?}\", promoted_temps);\n-            for block in body.basic_blocks_mut() {\n-                block.statements.retain(|statement| {\n-                    match statement.kind {\n-                        StatementKind::StorageDead(index) => {\n-                            !promoted_temps.contains(index)\n-                        }\n-                        _ => true\n-                    }\n-                });\n-                let terminator = block.terminator_mut();\n-                match terminator.kind {\n-                    TerminatorKind::Drop {\n-                        location: Place {\n-                            base: PlaceBase::Local(index),\n-                            projection: None,\n-                        },\n-                        target,\n-                        ..\n-                    } if promoted_temps.contains(index) => {\n-                        terminator.kind = TerminatorKind::Goto { target };\n-                    }\n-                    _ => {}\n-                }\n-            }\n+            remove_drop_and_storage_dead_on_promoted_locals(body, promoted_temps);\n         }\n \n         if let Mode::Static = mode {\n@@ -1738,6 +1710,39 @@ fn check_short_circuiting_in_const_local(tcx: TyCtxt<'_>, body: &mut Body<'tcx>,\n     }\n }\n \n+/// In `const` and `static` everything without `StorageDead`\n+/// is `'static`, we don't have to create promoted MIR fragments,\n+/// just remove `Drop` and `StorageDead` on \"promoted\" locals.\n+fn remove_drop_and_storage_dead_on_promoted_locals(\n+    body: &mut Body<'tcx>,\n+    promoted_temps: &BitSet<Local>,\n+) {\n+    debug!(\"run_pass: promoted_temps={:?}\", promoted_temps);\n+\n+    for block in body.basic_blocks_mut() {\n+        block.statements.retain(|statement| {\n+            match statement.kind {\n+                StatementKind::StorageDead(index) => !promoted_temps.contains(index),\n+                _ => true\n+            }\n+        });\n+        let terminator = block.terminator_mut();\n+        match terminator.kind {\n+            TerminatorKind::Drop {\n+                location: Place {\n+                    base: PlaceBase::Local(index),\n+                    projection: None,\n+                },\n+                target,\n+                ..\n+            } if promoted_temps.contains(index) => {\n+                terminator.kind = TerminatorKind::Goto { target };\n+            }\n+            _ => {}\n+        }\n+    }\n+}\n+\n fn check_non_thread_local_static_is_sync(\n     tcx: TyCtxt<'tcx>,\n     body: &mut Body<'tcx>,"}]}