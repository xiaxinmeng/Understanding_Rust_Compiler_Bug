{"sha": "5406f7ad49a08095724db5f3f3c4a92a760ce01b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MDZmN2FkNDlhMDgwOTU3MjRkYjVmM2YzYzRhOTJhNzYwY2UwMWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-27T15:46:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-27T15:46:54Z"}, "message": "Rollup merge of #65777 - matthewjasper:allow-impl-trait-expansion, r=davidtwco\n\nDon't ICE for completely unexpandable `impl Trait` types\n\nSave the resolution of these types (to themselves) to the typeck tables so that they will eventually reach E0720.\n\ncloses #65561", "tree": {"sha": "2ad5df50548023c5abf5ad02885c4590fbe34216", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ad5df50548023c5abf5ad02885c4590fbe34216"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5406f7ad49a08095724db5f3f3c4a92a760ce01b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdtbvuCRBK7hj4Ov3rIwAAdHIIAJUUJyHDr+MY6CuM68pi5q5y\nBdLv1pR0Za5N9P2mJ7r2YFWawxCK/2rdgopxmAV1ONvtqKxwZQqJlONkBI8707py\nAdEmD18qoOu2wBLDRsXtFSLgmznxktK2qnGiTbIcnzUa2zR6IdzcP1wcKG2tceb5\nMw8FA6wifIR0fM3b6odgjQxeNS6bcI0u2kjKd6rOtsWvyD5ZJ/gWthNy90wNmMCi\n8GyDl87cfg6AtMQ7iwlvErvGE05qz7SjVN1+0XW0ljp6ub7gmmwnkbytgBAzl/6j\ntfPIUHY8PlQ9WMr2d2xLO6t8BY0nk6/7YdYT7oqCRedoY6DirXXbeT88zai2fHg=\n=ja5a\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ad5df50548023c5abf5ad02885c4590fbe34216\nparent 53568f3fb34b20563ede4ffd792ea4564c08f3b8\nparent 0c05ed29fd26eb1a7cc5fa77c0fa41d940a78346\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1572191214 +0100\ncommitter GitHub <noreply@github.com> 1572191214 +0100\n\nRollup merge of #65777 - matthewjasper:allow-impl-trait-expansion, r=davidtwco\n\nDon't ICE for completely unexpandable `impl Trait` types\n\nSave the resolution of these types (to themselves) to the typeck tables so that they will eventually reach E0720.\n\ncloses #65561\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5406f7ad49a08095724db5f3f3c4a92a760ce01b", "html_url": "https://github.com/rust-lang/rust/commit/5406f7ad49a08095724db5f3f3c4a92a760ce01b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5406f7ad49a08095724db5f3f3c4a92a760ce01b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53568f3fb34b20563ede4ffd792ea4564c08f3b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/53568f3fb34b20563ede4ffd792ea4564c08f3b8", "html_url": "https://github.com/rust-lang/rust/commit/53568f3fb34b20563ede4ffd792ea4564c08f3b8"}, {"sha": "0c05ed29fd26eb1a7cc5fa77c0fa41d940a78346", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c05ed29fd26eb1a7cc5fa77c0fa41d940a78346", "html_url": "https://github.com/rust-lang/rust/commit/0c05ed29fd26eb1a7cc5fa77c0fa41d940a78346"}], "stats": {"total": 76, "additions": 48, "deletions": 28}, "files": [{"sha": "3d380a5f1826cf585f4829e0a8034fe052569c3f", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5406f7ad49a08095724db5f3f3c4a92a760ce01b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5406f7ad49a08095724db5f3f3c4a92a760ce01b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=5406f7ad49a08095724db5f3f3c4a92a760ce01b", "patch": "@@ -479,10 +479,12 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             let mut skip_add = false;\n \n             if let ty::Opaque(defin_ty_def_id, _substs) = definition_ty.kind {\n-                if def_id == defin_ty_def_id {\n-                    debug!(\"Skipping adding concrete definition for opaque type {:?} {:?}\",\n-                           opaque_defn, defin_ty_def_id);\n-                    skip_add = true;\n+                if let hir::OpaqueTyOrigin::TypeAlias = opaque_defn.origin {\n+                    if def_id == defin_ty_def_id {\n+                        debug!(\"Skipping adding concrete definition for opaque type {:?} {:?}\",\n+                               opaque_defn, defin_ty_def_id);\n+                        skip_add = true;\n+                    }\n                 }\n             }\n "}, {"sha": "2b4f5e0975ac3d8ed9ac83915dc22733b825f525", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-direct.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5406f7ad49a08095724db5f3f3c4a92a760ce01b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5406f7ad49a08095724db5f3f3c4a92a760ce01b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-direct.rs?ref=5406f7ad49a08095724db5f3f3c4a92a760ce01b", "patch": "@@ -0,0 +1,7 @@\n+// Test that an `impl Trait` type that expands to itself is an error.\n+\n+fn test() -> impl Sized { //~ ERROR E0720\n+    test()\n+}\n+\n+fn main() {}"}, {"sha": "1b5dbd814a481be35c175343e10dd2dd27eb396f", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-direct.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5406f7ad49a08095724db5f3f3c4a92a760ce01b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-direct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5406f7ad49a08095724db5f3f3c4a92a760ce01b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-direct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-direct.stderr?ref=5406f7ad49a08095724db5f3f3c4a92a760ce01b", "patch": "@@ -0,0 +1,11 @@\n+error[E0720]: opaque type expands to a recursive type\n+  --> $DIR/recursive-impl-trait-type-direct.rs:3:14\n+   |\n+LL | fn test() -> impl Sized {\n+   |              ^^^^^^^^^^ expands to a recursive type\n+   |\n+   = note: type resolves to itself\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0720`."}, {"sha": "2428b560b7001184fac39f554ad2c28188b8b68e", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-indirect.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5406f7ad49a08095724db5f3f3c4a92a760ce01b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5406f7ad49a08095724db5f3f3c4a92a760ce01b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.rs?ref=5406f7ad49a08095724db5f3f3c4a92a760ce01b", "previous_filename": "src/test/ui/impl-trait/recursive-impl-trait-type.rs"}, {"sha": "b7ba0d6ab177cee0d46ca1ba9f8484b6e9d2822b", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-indirect.stderr", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5406f7ad49a08095724db5f3f3c4a92a760ce01b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5406f7ad49a08095724db5f3f3c4a92a760ce01b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-indirect.stderr?ref=5406f7ad49a08095724db5f3f3c4a92a760ce01b", "patch": "@@ -1,109 +1,109 @@\n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:6:22\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:6:22\n    |\n LL | fn option(i: i32) -> impl Sized {\n    |                      ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `std::option::Option<(impl Sized, i32)>`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:14:15\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:14:15\n    |\n LL | fn tuple() -> impl Sized {\n    |               ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `(impl Sized,)`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:18:15\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:18:15\n    |\n LL | fn array() -> impl Sized {\n    |               ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `[impl Sized; 1]`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:22:13\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:22:13\n    |\n LL | fn ptr() -> impl Sized {\n    |             ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `*const impl Sized`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:26:16\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:26:16\n    |\n LL | fn fn_ptr() -> impl Sized {\n    |                ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `fn() -> impl Sized`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:30:25\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:30:25\n    |\n LL | fn closure_capture() -> impl Sized {\n    |                         ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type.rs:32:5: 32:19 x:impl Sized]`\n+   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type-indirect.rs:32:5: 32:19 x:impl Sized]`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:35:29\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:35:29\n    |\n LL | fn closure_ref_capture() -> impl Sized {\n    |                             ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type.rs:37:5: 37:20 x:impl Sized]`\n+   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type-indirect.rs:37:5: 37:20 x:impl Sized]`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:40:21\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:40:21\n    |\n LL | fn closure_sig() -> impl Sized {\n    |                     ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type.rs:41:5: 41:21]`\n+   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type-indirect.rs:41:5: 41:21]`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:44:23\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:44:23\n    |\n LL | fn generator_sig() -> impl Sized {\n    |                       ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type.rs:45:5: 45:23]`\n+   = note: expanded type is `[closure@$DIR/recursive-impl-trait-type-indirect.rs:45:5: 45:23]`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:48:27\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:48:27\n    |\n LL | fn generator_capture() -> impl Sized {\n    |                           ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type.rs:50:5: 50:26 x:impl Sized {()}]`\n+   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:50:5: 50:26 x:impl Sized {()}]`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:53:26\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:53:26\n    |\n LL | fn substs_change<T>() -> impl Sized {\n    |                          ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `(impl Sized,)`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:57:24\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:57:24\n    |\n LL | fn generator_hold() -> impl Sized {\n    |                        ^^^^^^^^^^ expands to a recursive type\n    |\n-   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type.rs:58:5: 62:6 {impl Sized, ()}]`\n+   = note: expanded type is `[generator@$DIR/recursive-impl-trait-type-indirect.rs:58:5: 62:6 {impl Sized, ()}]`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:69:26\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:69:26\n    |\n LL | fn mutual_recursion() -> impl Sync {\n    |                          ^^^^^^^^^ expands to a recursive type\n    |\n    = note: type resolves to itself\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type.rs:73:28\n+  --> $DIR/recursive-impl-trait-type-indirect.rs:73:28\n    |\n LL | fn mutual_recursion_b() -> impl Sized {\n    |                            ^^^^^^^^^^ expands to a recursive type", "previous_filename": "src/test/ui/impl-trait/recursive-impl-trait-type.stderr"}, {"sha": "cfd9c0ec5b45bab47c0813922f7ec11902452e3a", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-through-non-recursive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5406f7ad49a08095724db5f3f3c4a92a760ce01b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-through-non-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5406f7ad49a08095724db5f3f3c4a92a760ce01b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-through-non-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-through-non-recursive.rs?ref=5406f7ad49a08095724db5f3f3c4a92a760ce01b", "previous_filename": "src/test/ui/impl-trait/recursive-impl-trait-type--through-non-recursize.rs"}, {"sha": "73c12f6137d24bad6697f1b97d1fcc1ba5733a10", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-through-non-recursive.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5406f7ad49a08095724db5f3f3c4a92a760ce01b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-through-non-recursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5406f7ad49a08095724db5f3f3c4a92a760ce01b/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-through-non-recursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-through-non-recursive.stderr?ref=5406f7ad49a08095724db5f3f3c4a92a760ce01b", "patch": "@@ -1,29 +1,29 @@\n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:7:22\n+  --> $DIR/recursive-impl-trait-type-through-non-recursive.rs:7:22\n    |\n LL | fn recursive_id() -> impl Sized {\n    |                      ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: type resolves to itself\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:11:23\n+  --> $DIR/recursive-impl-trait-type-through-non-recursive.rs:11:23\n    |\n LL | fn recursive_id2() -> impl Sized {\n    |                       ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: type resolves to itself\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:17:24\n+  --> $DIR/recursive-impl-trait-type-through-non-recursive.rs:17:24\n    |\n LL | fn recursive_wrap() -> impl Sized {\n    |                        ^^^^^^^^^^ expands to a recursive type\n    |\n    = note: expanded type is `((impl Sized,),)`\n \n error[E0720]: opaque type expands to a recursive type\n-  --> $DIR/recursive-impl-trait-type--through-non-recursize.rs:21:25\n+  --> $DIR/recursive-impl-trait-type-through-non-recursive.rs:21:25\n    |\n LL | fn recursive_wrap2() -> impl Sized {\n    |                         ^^^^^^^^^^ expands to a recursive type", "previous_filename": "src/test/ui/impl-trait/recursive-impl-trait-type--through-non-recursize.stderr"}]}