{"sha": "39cb6c6d3f78b193f5873c3492e530bbd24d5dd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5Y2I2YzZkM2Y3OGIxOTNmNTg3M2MzNDkyZTUzMGJiZDI0ZDVkZDI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-16T12:24:26Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-16T12:24:26Z"}, "message": "Merge #128\n\n128: Add a test to verify if the generated codes are up-to-date. r=matklad a=mominul\n\nThis test checks if the generated codes are up-to-date every time during `cargo test`.\r\n\r\nI have confirmed that the test works by manually editing the `grammar.ron` file.\r\n\r\nCloses #126 \r\n\r\nThanks!\n\nCo-authored-by: Muhammad Mominul Huque <mominul2082@gmail.com>", "tree": {"sha": "3b588576a9645d958178c39925f22c291d8a0360", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b588576a9645d958178c39925f22c291d8a0360"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39cb6c6d3f78b193f5873c3492e530bbd24d5dd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39cb6c6d3f78b193f5873c3492e530bbd24d5dd2", "html_url": "https://github.com/rust-lang/rust/commit/39cb6c6d3f78b193f5873c3492e530bbd24d5dd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39cb6c6d3f78b193f5873c3492e530bbd24d5dd2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "8c74fd96192679525f985b9f6f85e9bdc011aa09", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c74fd96192679525f985b9f6f85e9bdc011aa09", "html_url": "https://github.com/rust-lang/rust/commit/8c74fd96192679525f985b9f6f85e9bdc011aa09"}, {"sha": "2c4cfb297ec59625310023796b65e3dd48f1e76a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4cfb297ec59625310023796b65e3dd48f1e76a", "html_url": "https://github.com/rust-lang/rust/commit/2c4cfb297ec59625310023796b65e3dd48f1e76a"}], "stats": {"total": 159, "additions": 93, "deletions": 66}, "files": [{"sha": "9a1b12a1644d067a661ddc1e616b56c492afa696", "filename": "crates/tools/src/lib.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/39cb6c6d3f78b193f5873c3492e530bbd24d5dd2/crates%2Ftools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39cb6c6d3f78b193f5873c3492e530bbd24d5dd2/crates%2Ftools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Flib.rs?ref=39cb6c6d3f78b193f5873c3492e530bbd24d5dd2", "patch": "@@ -1,6 +1,25 @@\n extern crate itertools;\n+#[macro_use]\n+extern crate failure;\n+extern crate ron;\n+extern crate tera;\n+extern crate heck;\n \n+use std::{\n+    collections::HashMap,\n+    fs,\n+    path::{Path, PathBuf},\n+};\n use itertools::Itertools;\n+use heck::{CamelCase, ShoutySnakeCase, SnakeCase};\n+\n+pub type Result<T> = ::std::result::Result<T, failure::Error>;\n+\n+const GRAMMAR: &str = \"ra_syntax/src/grammar.ron\";\n+pub const SYNTAX_KINDS: &str = \"ra_syntax/src/syntax_kinds/generated.rs\";\n+pub const SYNTAX_KINDS_TEMPLATE: &str = \"ra_syntax/src/syntax_kinds/generated.rs.tera\";\n+pub const AST: &str = \"ra_syntax/src/ast/generated.rs\";\n+pub const AST_TEMPLATE: &str = \"ra_syntax/src/ast/generated.rs.tera\";\n \n #[derive(Debug)]\n pub struct Test {\n@@ -41,3 +60,61 @@ pub fn collect_tests(s: &str) -> Vec<(usize, Test)> {\n     }\n     res\n }\n+\n+\n+pub fn update(path: &Path, contents: &str, verify: bool) -> Result<()> {\n+    match fs::read_to_string(path) {\n+        Ok(ref old_contents) if old_contents == contents => {\n+            return Ok(());\n+        }\n+        _ => (),\n+    }\n+    if verify {\n+        bail!(\"`{}` is not up-to-date\", path.display());\n+    }\n+    eprintln!(\"updating {}\", path.display());\n+    fs::write(path, contents)?;\n+    Ok(())\n+}\n+\n+pub fn render_template(template: &Path) -> Result<String> {\n+    let grammar: ron::value::Value = {\n+        let text = fs::read_to_string(project_root().join(GRAMMAR))?;\n+        ron::de::from_str(&text)?\n+    };\n+    let template = fs::read_to_string(template)?;\n+    let mut tera = tera::Tera::default();\n+    tera.add_raw_template(\"grammar\", &template)\n+        .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n+    tera.register_function(\"concat\", Box::new(concat));\n+    tera.register_filter(\"camel\", |arg, _| {\n+        Ok(arg.as_str().unwrap().to_camel_case().into())\n+    });\n+    tera.register_filter(\"snake\", |arg, _| {\n+        Ok(arg.as_str().unwrap().to_snake_case().into())\n+    });\n+    tera.register_filter(\"SCREAM\", |arg, _| {\n+        Ok(arg.as_str().unwrap().to_shouty_snake_case().into())\n+    });\n+    let ret = tera\n+        .render(\"grammar\", &grammar)\n+        .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n+    return Ok(ret);\n+\n+    fn concat(args: HashMap<String, tera::Value>) -> tera::Result<tera::Value> {\n+        let mut elements = Vec::new();\n+        for &key in [\"a\", \"b\", \"c\"].iter() {\n+            let val = match args.get(key) {\n+                Some(val) => val,\n+                None => continue,\n+            };\n+            let val = val.as_array().unwrap();\n+            elements.extend(val.iter().cloned());\n+        }\n+        Ok(tera::Value::Array(elements))\n+    }\n+}\n+\n+pub fn project_root() -> PathBuf {\n+    Path::new(&std::env::var(\"CARGO_MANIFEST_DIR\").unwrap()).parent().unwrap().to_path_buf()\n+}"}, {"sha": "6eacfc190c48148e881a1debec48d2c223afc42e", "filename": "crates/tools/src/main.rs", "status": "modified", "additions": 3, "deletions": 66, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/39cb6c6d3f78b193f5873c3492e530bbd24d5dd2/crates%2Ftools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39cb6c6d3f78b193f5873c3492e530bbd24d5dd2/crates%2Ftools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fmain.rs?ref=39cb6c6d3f78b193f5873c3492e530bbd24d5dd2", "patch": "@@ -1,31 +1,20 @@\n extern crate clap;\n #[macro_use]\n extern crate failure;\n-extern crate ron;\n-extern crate tera;\n extern crate tools;\n extern crate walkdir;\n-extern crate heck;\n \n use clap::{App, Arg, SubCommand};\n-use heck::{CamelCase, ShoutySnakeCase, SnakeCase};\n use std::{\n     collections::HashMap,\n     fs,\n     path::{Path, PathBuf},\n     process::Command,\n };\n-use tools::{collect_tests, Test};\n-\n-type Result<T> = ::std::result::Result<T, failure::Error>;\n+use tools::{AST, AST_TEMPLATE, Result, SYNTAX_KINDS, SYNTAX_KINDS_TEMPLATE, Test, collect_tests, render_template, update, project_root};\n \n const GRAMMAR_DIR: &str = \"./crates/ra_syntax/src/grammar\";\n const INLINE_TESTS_DIR: &str = \"./crates/ra_syntax/tests/data/parser/inline\";\n-const GRAMMAR: &str = \"./crates/ra_syntax/src/grammar.ron\";\n-const SYNTAX_KINDS: &str = \"./crates/ra_syntax/src/syntax_kinds/generated.rs\";\n-const SYNTAX_KINDS_TEMPLATE: &str = \"./crates/ra_syntax/src/syntax_kinds/generated.rs.tera\";\n-const AST: &str = \"./crates/ra_syntax/src/ast/generated.rs\";\n-const AST_TEMPLATE: &str = \"./crates/ra_syntax/src/ast/generated.rs.tera\";\n \n fn main() -> Result<()> {\n     let matches = App::new(\"tasks\")\n@@ -51,8 +40,8 @@ fn main() -> Result<()> {\n fn run_gen_command(name: &str, verify: bool) -> Result<()> {\n     match name {\n         \"gen-kinds\" => {\n-            update(Path::new(SYNTAX_KINDS), &render_template(SYNTAX_KINDS_TEMPLATE)?, verify)?;\n-            update(Path::new(AST), &render_template(AST_TEMPLATE)?, verify)?;\n+            update(&project_root().join(SYNTAX_KINDS), &render_template(&project_root().join(SYNTAX_KINDS_TEMPLATE))?, verify)?;\n+            update(&project_root().join(AST), &render_template(&project_root().join(AST_TEMPLATE))?, verify)?;\n         },\n         \"gen-tests\" => {\n             gen_tests(verify)?\n@@ -62,58 +51,6 @@ fn run_gen_command(name: &str, verify: bool) -> Result<()> {\n     Ok(())\n }\n \n-fn update(path: &Path, contents: &str, verify: bool) -> Result<()> {\n-    match fs::read_to_string(path) {\n-        Ok(ref old_contents) if old_contents == contents => {\n-            return Ok(());\n-        }\n-        _ => (),\n-    }\n-    if verify {\n-        bail!(\"`{}` is not up-to-date\", path.display());\n-    }\n-    eprintln!(\"updating {}\", path.display());\n-    fs::write(path, contents)?;\n-    Ok(())\n-}\n-\n-fn render_template(template: &str) -> Result<String> {\n-    let grammar: ron::value::Value = {\n-        let text = fs::read_to_string(GRAMMAR)?;\n-        ron::de::from_str(&text)?\n-    };\n-    let template = fs::read_to_string(template)?;\n-    let mut tera = tera::Tera::default();\n-    tera.add_raw_template(\"grammar\", &template)\n-        .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n-    tera.register_function(\"concat\", Box::new(concat));\n-    tera.register_filter(\"camel\", |arg, _| {\n-        Ok(arg.as_str().unwrap().to_camel_case().into())\n-    });\n-    tera.register_filter(\"snake\", |arg, _| {\n-        Ok(arg.as_str().unwrap().to_snake_case().into())\n-    });\n-    tera.register_filter(\"SCREAM\", |arg, _| {\n-        Ok(arg.as_str().unwrap().to_shouty_snake_case().into())\n-    });\n-    let ret = tera\n-        .render(\"grammar\", &grammar)\n-        .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n-    return Ok(ret);\n-\n-    fn concat(args: HashMap<String, tera::Value>) -> tera::Result<tera::Value> {\n-        let mut elements = Vec::new();\n-        for &key in [\"a\", \"b\", \"c\"].iter() {\n-            let val = match args.get(key) {\n-                Some(val) => val,\n-                None => continue,\n-            };\n-            let val = val.as_array().unwrap();\n-            elements.extend(val.iter().cloned());\n-        }\n-        Ok(tera::Value::Array(elements))\n-    }\n-}\n \n fn gen_tests(verify: bool) -> Result<()> {\n     let tests = tests_from_dir(Path::new(GRAMMAR_DIR))?;"}, {"sha": "f507d80a291e279df8ab30b35c9320d1b11f7219", "filename": "crates/tools/tests/cli.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/39cb6c6d3f78b193f5873c3492e530bbd24d5dd2/crates%2Ftools%2Ftests%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39cb6c6d3f78b193f5873c3492e530bbd24d5dd2/crates%2Ftools%2Ftests%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Ftests%2Fcli.rs?ref=39cb6c6d3f78b193f5873c3492e530bbd24d5dd2", "patch": "@@ -0,0 +1,13 @@\n+extern crate tools;\n+\n+use tools::{AST, AST_TEMPLATE, SYNTAX_KINDS, SYNTAX_KINDS_TEMPLATE, render_template, update, project_root};\n+\n+#[test]\n+fn verify_template_generation() {\n+    if let Err(error) = update(&project_root().join(SYNTAX_KINDS), &render_template(&project_root().join(SYNTAX_KINDS_TEMPLATE)).unwrap(), true) {\n+        panic!(\"{}. Please update it by running `cargo gen-kinds`\", error);\n+    }\n+    if let Err(error) = update(&project_root().join(AST), &render_template(&project_root().join(AST_TEMPLATE)).unwrap(), true) {\n+        panic!(\"{}. Please update it by running `cargo gen-kinds`\", error);\n+    }\n+}"}]}