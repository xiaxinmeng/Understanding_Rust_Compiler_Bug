{"sha": "1faa9559fe3d731856c4e7e83b40d186f1a21f9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmYWE5NTU5ZmUzZDczMTg1NmM0ZTdlODNiNDBkMTg2ZjFhMjFmOWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-06T19:41:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-06T19:41:13Z"}, "message": "Merge #6480\n\n6480: Support closure in change_return_type_to_result assist r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "1b75b83f45e50099578dfd69fc9f6726fffcd635", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b75b83f45e50099578dfd69fc9f6726fffcd635"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1faa9559fe3d731856c4e7e83b40d186f1a21f9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfpabZCRBK7hj4Ov3rIwAAdHIIALGZi4gyQNGjOmLX0TFyfqlm\n3Da0NRttygfoHhNM7Fng/bbrHpFrxDKEyDrIhp5tMjFp3dlcei5c6N0w/eUietJD\nYj1jMBUcjWF63GuRGt5zQxlJZNnt+8x2it0tZWZ8AuB4fU72qnvQoUUuyh7cEgJQ\nSr0mgkmKwXCIzwKZyuDS3hsnjirsNhe4/5MUx+M4h/J9wFnjYzmyt55N15PSmijI\nxA4CtR+1iso0PAQenc9LfjlnjXYb+2VFwKlKQa+L5yEXQdXnza5jrA3lFDrktnya\n+7NPtFOhQ6IU7v3yXt4HcyetgJIo8c41HXXcFNwnhBCokBZdLNrk08AoK73gxow=\n=AhTJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b75b83f45e50099578dfd69fc9f6726fffcd635\nparent 6a759e51608c690b2e1f83090208e301e3a5f475\nparent e95a65ccaf8831e03d4c18c7b742c4605b3034bc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1604691673 +0000\ncommitter GitHub <noreply@github.com> 1604691673 +0000\n\nMerge #6480\n\n6480: Support closure in change_return_type_to_result assist r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1faa9559fe3d731856c4e7e83b40d186f1a21f9e", "html_url": "https://github.com/rust-lang/rust/commit/1faa9559fe3d731856c4e7e83b40d186f1a21f9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1faa9559fe3d731856c4e7e83b40d186f1a21f9e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a759e51608c690b2e1f83090208e301e3a5f475", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a759e51608c690b2e1f83090208e301e3a5f475", "html_url": "https://github.com/rust-lang/rust/commit/6a759e51608c690b2e1f83090208e301e3a5f475"}, {"sha": "e95a65ccaf8831e03d4c18c7b742c4605b3034bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e95a65ccaf8831e03d4c18c7b742c4605b3034bc", "html_url": "https://github.com/rust-lang/rust/commit/e95a65ccaf8831e03d4c18c7b742c4605b3034bc"}], "stats": {"total": 121, "additions": 107, "deletions": 14}, "files": [{"sha": "76f33a5b6d3822b0450675471b72fac5b615f531", "filename": "crates/assists/src/handlers/change_return_type_to_result.rs", "status": "modified", "additions": 107, "deletions": 14, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/1faa9559fe3d731856c4e7e83b40d186f1a21f9e/crates%2Fassists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1faa9559fe3d731856c4e7e83b40d186f1a21f9e/crates%2Fassists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs?ref=1faa9559fe3d731856c4e7e83b40d186f1a21f9e", "patch": "@@ -2,7 +2,7 @@ use std::iter;\n \n use syntax::{\n     ast::{self, make, BlockExpr, Expr, LoopBodyOwner},\n-    AstNode, SyntaxNode,\n+    match_ast, AstNode, SyntaxNode,\n };\n use test_utils::mark;\n \n@@ -21,8 +21,18 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n pub(crate) fn change_return_type_to_result(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let ret_type = ctx.find_node_at_offset::<ast::RetType>()?;\n-    // FIXME: extend to lambdas as well\n-    let fn_def = ret_type.syntax().parent().and_then(ast::Fn::cast)?;\n+    let parent = ret_type.syntax().parent()?;\n+    let block_expr = match_ast! {\n+        match parent {\n+            ast::Fn(func) => func.body()?,\n+            ast::ClosureExpr(closure) => match closure.body()? {\n+                Expr::BlockExpr(block) => block,\n+                // closures require a block when a return type is specified\n+                _ => return None,\n+            },\n+            _ => return None,\n+        }\n+    };\n \n     let type_ref = &ret_type.ty()?;\n     let ret_type_str = type_ref.syntax().text().to_string();\n@@ -34,16 +44,14 @@ pub(crate) fn change_return_type_to_result(acc: &mut Assists, ctx: &AssistContex\n         }\n     }\n \n-    let block_expr = &fn_def.body()?;\n-\n     acc.add(\n         AssistId(\"change_return_type_to_result\", AssistKind::RefactorRewrite),\n         \"Wrap return type in Result\",\n         type_ref.syntax().text_range(),\n         |builder| {\n             let mut tail_return_expr_collector = TailReturnCollector::new();\n-            tail_return_expr_collector.collect_jump_exprs(block_expr, false);\n-            tail_return_expr_collector.collect_tail_exprs(block_expr);\n+            tail_return_expr_collector.collect_jump_exprs(&block_expr, false);\n+            tail_return_expr_collector.collect_tail_exprs(&block_expr);\n \n             for ret_expr_arg in tail_return_expr_collector.exprs_to_wrap {\n                 let ok_wrapped = make::expr_call(\n@@ -285,16 +293,20 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_return_type() {\n+    fn change_return_type_to_result_simple_closure() {\n         check_assist(\n             change_return_type_to_result,\n-            r#\"fn foo() -> i32<|> {\n-                let test = \"test\";\n-                return 42i32;\n+            r#\"fn foo() {\n+                || -> i32<|> {\n+                    let test = \"test\";\n+                    return 42i32;\n+                };\n             }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                let test = \"test\";\n-                return Ok(42i32);\n+            r#\"fn foo() {\n+                || -> Result<i32, ${0:_}> {\n+                    let test = \"test\";\n+                    return Ok(42i32);\n+                };\n             }\"#,\n         );\n     }\n@@ -310,6 +322,29 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn change_return_type_to_result_simple_return_type_bad_cursor_closure() {\n+        check_assist_not_applicable(\n+            change_return_type_to_result,\n+            r#\"fn foo() {\n+                || -> i32 {\n+                    let test = \"test\";<|>\n+                    return 42i32;\n+                };\n+            }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn change_return_type_to_result_closure_non_block() {\n+        check_assist_not_applicable(\n+            change_return_type_to_result,\n+            r#\"fn foo() {\n+                || -> i<|>32 3;\n+            }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn change_return_type_to_result_simple_return_type_already_result_std() {\n         check_assist_not_applicable(\n@@ -333,6 +368,19 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn change_return_type_to_result_simple_return_type_already_result_closure() {\n+        check_assist_not_applicable(\n+            change_return_type_to_result,\n+            r#\"fn foo() {\n+                || -> Result<i32<|>, String> {\n+                    let test = \"test\";\n+                    return 42i32;\n+                };\n+            }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn change_return_type_to_result_simple_with_cursor() {\n         check_assist(\n@@ -363,6 +411,25 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn change_return_type_to_result_simple_with_tail_closure() {\n+        check_assist(\n+            change_return_type_to_result,\n+            r#\"fn foo() {\n+                || -><|> i32 {\n+                    let test = \"test\";\n+                    42i32\n+                };\n+            }\"#,\n+            r#\"fn foo() {\n+                || -> Result<i32, ${0:_}> {\n+                    let test = \"test\";\n+                    Ok(42i32)\n+                };\n+            }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn change_return_type_to_result_simple_with_tail_only() {\n         check_assist(\n@@ -375,6 +442,7 @@ mod tests {\n             }\"#,\n         );\n     }\n+\n     #[test]\n     fn change_return_type_to_result_simple_with_tail_block_like() {\n         check_assist(\n@@ -396,6 +464,31 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn change_return_type_to_result_simple_without_block_closure() {\n+        check_assist(\n+            change_return_type_to_result,\n+            r#\"fn foo() {\n+                || -> i32<|> {\n+                    if true {\n+                        42i32\n+                    } else {\n+                        24i32\n+                    }\n+                };\n+            }\"#,\n+            r#\"fn foo() {\n+                || -> Result<i32, ${0:_}> {\n+                    if true {\n+                        Ok(42i32)\n+                    } else {\n+                        Ok(24i32)\n+                    }\n+                };\n+            }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn change_return_type_to_result_simple_with_nested_if() {\n         check_assist("}]}