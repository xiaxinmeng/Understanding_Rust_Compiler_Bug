{"sha": "de46bea66640d4e72833ab27a8658a0f117e74bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNDZiZWE2NjY0MGQ0ZTcyODMzYWIyN2E4NjU4YTBmMTE3ZTc0YmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-11T01:36:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-11T01:36:47Z"}, "message": "Auto merge of #37104 - luqmana:fixmes, r=eddyb\n\nClean up some FIXMEs.\n\nRemove some assorted FIXMEs in the codebase.", "tree": {"sha": "73f1a68b35bd7e6874eeee0b4e3781254e05472d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73f1a68b35bd7e6874eeee0b4e3781254e05472d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de46bea66640d4e72833ab27a8658a0f117e74bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de46bea66640d4e72833ab27a8658a0f117e74bb", "html_url": "https://github.com/rust-lang/rust/commit/de46bea66640d4e72833ab27a8658a0f117e74bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de46bea66640d4e72833ab27a8658a0f117e74bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1473007618e6ab85a994f86348acdaf125b7914f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1473007618e6ab85a994f86348acdaf125b7914f", "html_url": "https://github.com/rust-lang/rust/commit/1473007618e6ab85a994f86348acdaf125b7914f"}, {"sha": "c2f1e5d16455057f86c1e3051e77009d90b167fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f1e5d16455057f86c1e3051e77009d90b167fc", "html_url": "https://github.com/rust-lang/rust/commit/c2f1e5d16455057f86c1e3051e77009d90b167fc"}], "stats": {"total": 52, "additions": 11, "deletions": 41}, "files": [{"sha": "8f4a12e03975be8de592314fc5a5a56b6229db8c", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de46bea66640d4e72833ab27a8658a0f117e74bb/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de46bea66640d4e72833ab27a8658a0f117e74bb/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=de46bea66640d4e72833ab27a8658a0f117e74bb", "patch": "@@ -184,7 +184,6 @@ pub enum TypeOrigin {\n     MethodCompatCheck(Span),\n \n     // Checking that this expression can be assigned where it needs to be\n-    // FIXME(eddyb) #11161 is the original Expr required?\n     ExprAssignable(Span),\n \n     // Relating trait type parameters to those found in impl etc"}, {"sha": "fedf8c2ec7472cd57ef6823627c509e52c0ad8a0", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de46bea66640d4e72833ab27a8658a0f117e74bb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de46bea66640d4e72833ab27a8658a0f117e74bb/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=de46bea66640d4e72833ab27a8658a0f117e74bb", "patch": "@@ -945,9 +945,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 let ref_ty = self.overloaded_method_return_ty(method_ty);\n                 base_cmt = self.cat_rvalue_node(elt.id(), elt.span(), ref_ty);\n \n-                // FIXME(#20649) -- why are we using the `self_ty` as the element type...?\n-                let self_ty = method_ty.fn_sig().input(0);\n-                (self.tcx().no_late_bound_regions(&self_ty).unwrap(),\n+                (ref_ty.builtin_deref(false, ty::NoPreference).unwrap().ty,\n                  ElementKind::OtherElement)\n             }\n             None => {"}, {"sha": "d028dd7e7b5a04dc854388493f3c1f04d3041caa", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de46bea66640d4e72833ab27a8658a0f117e74bb/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de46bea66640d4e72833ab27a8658a0f117e74bb/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=de46bea66640d4e72833ab27a8658a0f117e74bb", "patch": "@@ -245,8 +245,6 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             // So we start with the discriminant, pad it up to the alignment with\n             // more of its own type, then use alignment-sized ints to get the rest\n             // of the size.\n-            //\n-            // FIXME #10604: this breaks when vector types are present.\n             let size = size.bytes();\n             let align = align.abi();\n             let discr_ty = Type::from_integer(cx, discr);"}, {"sha": "d238cf7bb4582850e13c916fde3883781f08c413", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de46bea66640d4e72833ab27a8658a0f117e74bb/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de46bea66640d4e72833ab27a8658a0f117e74bb/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=de46bea66640d4e72833ab27a8658a0f117e74bb", "patch": "@@ -815,7 +815,7 @@ pub fn C_cstr(cx: &CrateContext, s: InternedString, null_terminated: bool) -> Va\n pub fn C_str_slice(cx: &CrateContext, s: InternedString) -> ValueRef {\n     let len = s.len();\n     let cs = consts::ptrcast(C_cstr(cx, s, false), Type::i8p(cx));\n-    C_named_struct(cx.tn().find_type(\"str_slice\").unwrap(), &[cs, C_uint(cx, len)])\n+    C_named_struct(cx.str_slice_type(), &[cs, C_uint(cx, len)])\n }\n \n pub fn C_struct(cx: &CrateContext, elts: &[ValueRef], packed: bool) -> ValueRef {"}, {"sha": "3930bcbdd9aeab671583472b62ddf5b3aab74521", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/de46bea66640d4e72833ab27a8658a0f117e74bb/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de46bea66640d4e72833ab27a8658a0f117e74bb/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=de46bea66640d4e72833ab27a8658a0f117e74bb", "patch": "@@ -25,7 +25,7 @@ use monomorphize::Instance;\n \n use partitioning::CodegenUnit;\n use trans_item::TransItem;\n-use type_::{Type, TypeNames};\n+use type_::Type;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use session::config::NoDebugInfo;\n@@ -87,7 +87,6 @@ pub struct LocalCrateContext<'tcx> {\n     llmod: ModuleRef,\n     llcx: ContextRef,\n     previous_work_product: Option<WorkProduct>,\n-    tn: TypeNames, // FIXME: This seems to be largely unused.\n     codegen_unit: CodegenUnit<'tcx>,\n     needs_unwind_cleanup_cache: RefCell<FxHashMap<Ty<'tcx>, bool>>,\n     fn_pointer_shims: RefCell<FxHashMap<Ty<'tcx>, ValueRef>>,\n@@ -137,6 +136,7 @@ pub struct LocalCrateContext<'tcx> {\n     type_hashcodes: RefCell<FxHashMap<Ty<'tcx>, String>>,\n     int_type: Type,\n     opaque_vec_type: Type,\n+    str_slice_type: Type,\n     builder: BuilderRef_res,\n \n     /// Holds the LLVM values for closure IDs.\n@@ -611,7 +611,6 @@ impl<'tcx> LocalCrateContext<'tcx> {\n                 llcx: llcx,\n                 previous_work_product: previous_work_product,\n                 codegen_unit: codegen_unit,\n-                tn: TypeNames::new(),\n                 needs_unwind_cleanup_cache: RefCell::new(FxHashMap()),\n                 fn_pointer_shims: RefCell::new(FxHashMap()),\n                 drop_glues: RefCell::new(FxHashMap()),\n@@ -631,6 +630,7 @@ impl<'tcx> LocalCrateContext<'tcx> {\n                 type_hashcodes: RefCell::new(FxHashMap()),\n                 int_type: Type::from_ref(ptr::null_mut()),\n                 opaque_vec_type: Type::from_ref(ptr::null_mut()),\n+                str_slice_type: Type::from_ref(ptr::null_mut()),\n                 builder: BuilderRef_res(llvm::LLVMCreateBuilderInContext(llcx)),\n                 closure_vals: RefCell::new(FxHashMap()),\n                 dbg_cx: dbg_cx,\n@@ -662,7 +662,7 @@ impl<'tcx> LocalCrateContext<'tcx> {\n \n             local_ccx.int_type = int_type;\n             local_ccx.opaque_vec_type = opaque_vec_type;\n-            local_ccx.tn.associate_type(\"str_slice\", &str_slice_ty);\n+            local_ccx.str_slice_type = str_slice_ty;\n \n             if shared.tcx.sess.count_llvm_insns() {\n                 base::init_insn_ctxt()\n@@ -778,10 +778,6 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         unsafe { llvm::LLVMRustGetModuleDataLayout(self.llmod()) }\n     }\n \n-    pub fn tn<'a>(&'a self) -> &'a TypeNames {\n-        &self.local().tn\n-    }\n-\n     pub fn export_map<'a>(&'a self) -> &'a ExportMap {\n         &self.shared.export_map\n     }\n@@ -885,6 +881,10 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         self.local().opaque_vec_type\n     }\n \n+    pub fn str_slice_type(&self) -> Type {\n+        self.local().str_slice_type\n+    }\n+\n     pub fn closure_vals<'a>(&'a self) -> &'a RefCell<FxHashMap<Instance<'tcx>, ValueRef>> {\n         &self.local().closure_vals\n     }"}, {"sha": "2b2776acab869fde07e9b802f4d9cb587f4d9420", "filename": "src/librustc_trans/type_.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/de46bea66640d4e72833ab27a8658a0f117e74bb/src%2Flibrustc_trans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de46bea66640d4e72833ab27a8658a0f117e74bb/src%2Flibrustc_trans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_.rs?ref=de46bea66640d4e72833ab27a8658a0f117e74bb", "patch": "@@ -15,7 +15,6 @@ use llvm::{TypeRef, Bool, False, True, TypeKind};\n use llvm::{Float, Double, X86_FP80, PPC_FP128, FP128};\n \n use context::CrateContext;\n-use util::nodemap::FxHashMap;\n \n use syntax::ast;\n use rustc::ty::layout;\n@@ -24,7 +23,6 @@ use std::ffi::CString;\n use std::fmt;\n use std::mem;\n use std::ptr;\n-use std::cell::RefCell;\n \n use libc::c_uint;\n \n@@ -321,26 +319,3 @@ impl Type {\n         }\n     }\n }\n-\n-/* Memory-managed object interface to type handles. */\n-\n-pub struct TypeNames {\n-    named_types: RefCell<FxHashMap<String, TypeRef>>,\n-}\n-\n-impl TypeNames {\n-    pub fn new() -> TypeNames {\n-        TypeNames {\n-            named_types: RefCell::new(FxHashMap())\n-        }\n-    }\n-\n-    pub fn associate_type(&self, s: &str, t: &Type) {\n-        assert!(self.named_types.borrow_mut().insert(s.to_string(),\n-                                                     t.to_ref()).is_none());\n-    }\n-\n-    pub fn find_type(&self, s: &str) -> Option<Type> {\n-        self.named_types.borrow().get(s).map(|x| Type::from_ref(*x))\n-    }\n-}"}, {"sha": "dc794d5946a699367d1aefaea26eb62f477bad7c", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de46bea66640d4e72833ab27a8658a0f117e74bb/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de46bea66640d4e72833ab27a8658a0f117e74bb/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=de46bea66640d4e72833ab27a8658a0f117e74bb", "patch": "@@ -238,7 +238,7 @@ pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) ->\n               if let ty::TyStr = ty.sty {\n                   // This means we get a nicer name in the output (str is always\n                   // unsized).\n-                  cx.tn().find_type(\"str_slice\").unwrap()\n+                  cx.str_slice_type()\n               } else {\n                   let ptr_ty = in_memory_type_of(cx, ty).ptr_to();\n                   let info_ty = unsized_info_ty(cx, ty);"}]}