{"sha": "7d550445e2b650ec198ef1c6de19612f0dc6287e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNTUwNDQ1ZTJiNjUwZWMxOThlZjFjNmRlMTk2MTJmMGRjNjI4N2U=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-12-06T02:31:40Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-12-12T21:36:25Z"}, "message": "Move functions around.\n\nIn particular, it has bugged me for some time that `process_cycles` is\ncurrently located before `mark_still_waiting_nodes` despite being called\nafterwards.", "tree": {"sha": "e89a57329180571927c6905c2a44f09de2ae612a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e89a57329180571927c6905c2a44f09de2ae612a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d550445e2b650ec198ef1c6de19612f0dc6287e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d550445e2b650ec198ef1c6de19612f0dc6287e", "html_url": "https://github.com/rust-lang/rust/commit/7d550445e2b650ec198ef1c6de19612f0dc6287e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d550445e2b650ec198ef1c6de19612f0dc6287e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8207b195840fc664ffc4a9c033cd3ee0746ea2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8207b195840fc664ffc4a9c033cd3ee0746ea2e", "html_url": "https://github.com/rust-lang/rust/commit/a8207b195840fc664ffc4a9c033cd3ee0746ea2e"}], "stats": {"total": 118, "additions": 59, "deletions": 59}, "files": [{"sha": "54b014a0f28c29f052bdf09db96f535b4510ee86", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/7d550445e2b650ec198ef1c6de19612f0dc6287e/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d550445e2b650ec198ef1c6de19612f0dc6287e/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=7d550445e2b650ec198ef1c6de19612f0dc6287e", "patch": "@@ -520,57 +520,6 @@ impl<O: ForestObligation> ObligationForest<O> {\n         }\n     }\n \n-    /// Report cycles between all `Success` nodes that aren't still waiting.\n-    /// This must be called after `mark_still_waiting_nodes`.\n-    fn process_cycles<P>(&self, processor: &mut P)\n-        where P: ObligationProcessor<Obligation=O>\n-    {\n-        let mut stack = vec![];\n-\n-        debug!(\"process_cycles()\");\n-\n-        for (index, node) in self.nodes.iter().enumerate() {\n-            // For some benchmarks this state test is extremely hot. It's a win\n-            // to handle the no-op cases immediately to avoid the cost of the\n-            // function call.\n-            if let NodeState::Success(waiting) = node.state.get() {\n-                if !self.is_still_waiting(waiting) {\n-                    self.find_cycles_from_node(&mut stack, processor, index);\n-                }\n-            }\n-        }\n-\n-        debug!(\"process_cycles: complete\");\n-\n-        debug_assert!(stack.is_empty());\n-    }\n-\n-    fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)\n-        where P: ObligationProcessor<Obligation=O>\n-    {\n-        let node = &self.nodes[index];\n-        if let NodeState::Success(waiting) = node.state.get() {\n-            if !self.is_still_waiting(waiting) {\n-                match stack.iter().rposition(|&n| n == index) {\n-                    None => {\n-                        stack.push(index);\n-                        for &index in node.dependents.iter() {\n-                            self.find_cycles_from_node(stack, processor, index);\n-                        }\n-                        stack.pop();\n-                    }\n-                    Some(rpos) => {\n-                        // Cycle detected.\n-                        processor.process_backedge(\n-                            stack[rpos..].iter().map(GetObligation(&self.nodes)),\n-                            PhantomData\n-                        );\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n     /// Returns a vector of obligations for `p` and all of its\n     /// ancestors, putting them into the error state in the process.\n     fn error_at(&self, mut index: usize) -> Vec<O> {\n@@ -604,6 +553,18 @@ impl<O: ForestObligation> ObligationForest<O> {\n         trace\n     }\n \n+    /// Mark all `Success` nodes that depend on a pending node as still\n+    /// waiting. Upon completion, any `Success` nodes that aren't still waiting\n+    /// can be removed by `compress`.\n+    fn mark_still_waiting_nodes(&self) {\n+        for node in &self.nodes {\n+            if node.state.get() == NodeState::Pending {\n+                // This call site is hot.\n+                self.inlined_mark_dependents_as_still_waiting(node);\n+            }\n+        }\n+    }\n+\n     // This always-inlined function is for the hot call site.\n     #[inline(always)]\n     fn inlined_mark_dependents_as_still_waiting(&self, node: &Node<O>) {\n@@ -625,14 +586,53 @@ impl<O: ForestObligation> ObligationForest<O> {\n         self.inlined_mark_dependents_as_still_waiting(node)\n     }\n \n-    /// Mark all `Success` nodes that depend on a pending node as still\n-    /// waiting. Upon completion, any `Success` nodes that aren't still waiting\n-    /// can be removed by `compress`.\n-    fn mark_still_waiting_nodes(&self) {\n-        for node in &self.nodes {\n-            if node.state.get() == NodeState::Pending {\n-                // This call site is hot.\n-                self.inlined_mark_dependents_as_still_waiting(node);\n+    /// Report cycles between all `Success` nodes that aren't still waiting.\n+    /// This must be called after `mark_still_waiting_nodes`.\n+    fn process_cycles<P>(&self, processor: &mut P)\n+        where P: ObligationProcessor<Obligation=O>\n+    {\n+        let mut stack = vec![];\n+\n+        debug!(\"process_cycles()\");\n+\n+        for (index, node) in self.nodes.iter().enumerate() {\n+            // For some benchmarks this state test is extremely hot. It's a win\n+            // to handle the no-op cases immediately to avoid the cost of the\n+            // function call.\n+            if let NodeState::Success(waiting) = node.state.get() {\n+                if !self.is_still_waiting(waiting) {\n+                    self.find_cycles_from_node(&mut stack, processor, index);\n+                }\n+            }\n+        }\n+\n+        debug!(\"process_cycles: complete\");\n+\n+        debug_assert!(stack.is_empty());\n+    }\n+\n+    fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)\n+        where P: ObligationProcessor<Obligation=O>\n+    {\n+        let node = &self.nodes[index];\n+        if let NodeState::Success(waiting) = node.state.get() {\n+            if !self.is_still_waiting(waiting) {\n+                match stack.iter().rposition(|&n| n == index) {\n+                    None => {\n+                        stack.push(index);\n+                        for &index in node.dependents.iter() {\n+                            self.find_cycles_from_node(stack, processor, index);\n+                        }\n+                        stack.pop();\n+                    }\n+                    Some(rpos) => {\n+                        // Cycle detected.\n+                        processor.process_backedge(\n+                            stack[rpos..].iter().map(GetObligation(&self.nodes)),\n+                            PhantomData\n+                        );\n+                    }\n+                }\n             }\n         }\n     }"}]}