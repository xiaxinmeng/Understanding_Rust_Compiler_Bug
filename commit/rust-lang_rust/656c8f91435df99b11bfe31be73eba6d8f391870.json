{"sha": "656c8f91435df99b11bfe31be73eba6d8f391870", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NmM4ZjkxNDM1ZGY5OWIxMWJmZTMxYmU3M2ViYTZkOGYzOTE4NzA=", "commit": {"author": {"name": "Gareth Smith", "email": "garethdanielsmith@gmail.com", "date": "2013-07-03T21:16:08Z"}, "committer": {"name": "Gareth Smith", "email": "garethdanielsmith@gmail.com", "date": "2013-07-03T21:16:08Z"}, "message": "Make the error messages that result from referencing\nnonexistent traits consistent, and add a test.", "tree": {"sha": "edaa7084f70a140e25c40bc5d018b6fa2aa2bbfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edaa7084f70a140e25c40bc5d018b6fa2aa2bbfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/656c8f91435df99b11bfe31be73eba6d8f391870", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/656c8f91435df99b11bfe31be73eba6d8f391870", "html_url": "https://github.com/rust-lang/rust/commit/656c8f91435df99b11bfe31be73eba6d8f391870", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/656c8f91435df99b11bfe31be73eba6d8f391870/comments", "author": {"login": "Dretch", "id": 1428731, "node_id": "MDQ6VXNlcjE0Mjg3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1428731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dretch", "html_url": "https://github.com/Dretch", "followers_url": "https://api.github.com/users/Dretch/followers", "following_url": "https://api.github.com/users/Dretch/following{/other_user}", "gists_url": "https://api.github.com/users/Dretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dretch/subscriptions", "organizations_url": "https://api.github.com/users/Dretch/orgs", "repos_url": "https://api.github.com/users/Dretch/repos", "events_url": "https://api.github.com/users/Dretch/events{/privacy}", "received_events_url": "https://api.github.com/users/Dretch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dretch", "id": 1428731, "node_id": "MDQ6VXNlcjE0Mjg3MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1428731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dretch", "html_url": "https://github.com/Dretch", "followers_url": "https://api.github.com/users/Dretch/followers", "following_url": "https://api.github.com/users/Dretch/following{/other_user}", "gists_url": "https://api.github.com/users/Dretch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dretch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dretch/subscriptions", "organizations_url": "https://api.github.com/users/Dretch/orgs", "repos_url": "https://api.github.com/users/Dretch/repos", "events_url": "https://api.github.com/users/Dretch/events{/privacy}", "received_events_url": "https://api.github.com/users/Dretch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c6fc46c030ab0515a052fa99c9e10c75cfc8184", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6fc46c030ab0515a052fa99c9e10c75cfc8184", "html_url": "https://github.com/rust-lang/rust/commit/0c6fc46c030ab0515a052fa99c9e10c75cfc8184"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "6ddac371e0c6c287098500ddaef30943a14d166e", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/656c8f91435df99b11bfe31be73eba6d8f391870/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656c8f91435df99b11bfe31be73eba6d8f391870/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=656c8f91435df99b11bfe31be73eba6d8f391870", "patch": "@@ -510,6 +510,13 @@ pub struct NameBindings {\n     value_def: Option<ValueNsDef>,  //< Meaning in value namespace.\n }\n \n+/// Ways in which a trait can be referenced\n+enum TraitReferenceType {\n+    TraitImplementation,             // impl SomeTrait for T { ... }\n+    TraitDerivation,                 // trait T : SomeTrait { ... }\n+    TraitBoundingTypeParameter,      // fn f<T:SomeTrait>() { ... }\n+}\n+\n impl NameBindings {\n     /// Creates a new module in this set of name bindings.\n     pub fn define_module(@mut self,\n@@ -3554,23 +3561,7 @@ impl Resolver {\n \n                     // Resolve derived traits.\n                     for traits.iter().advance |trt| {\n-                        match self.resolve_path(trt.path, TypeNS, true,\n-                                                visitor) {\n-                            None =>\n-                                self.session.span_err(trt.path.span,\n-                                                      \"attempt to derive a \\\n-                                                      nonexistent trait\"),\n-                            Some(def) => {\n-                                // Write a mapping from the trait ID to the\n-                                // definition of the trait into the definition\n-                                // map.\n-\n-                                debug!(\"(resolving trait) found trait def: \\\n-                                       %?\", def);\n-\n-                                self.record_def(trt.ref_id, def);\n-                            }\n-                        }\n+                        self.resolve_trait_reference(*trt, visitor, TraitDerivation);\n                     }\n \n                     for (*methods).iter().advance |method| {\n@@ -3821,22 +3812,31 @@ impl Resolver {\n                                         visitor: ResolveVisitor) {\n         match *type_parameter_bound {\n             TraitTyParamBound(tref) => {\n-                self.resolve_trait_reference(tref, visitor)\n+                self.resolve_trait_reference(tref, visitor, TraitBoundingTypeParameter)\n             }\n             RegionTyParamBound => {}\n         }\n     }\n \n     pub fn resolve_trait_reference(@mut self,\n                                    trait_reference: &trait_ref,\n-                                   visitor: ResolveVisitor) {\n+                                   visitor: ResolveVisitor,\n+                                   reference_type: TraitReferenceType) {\n         match self.resolve_path(trait_reference.path, TypeNS, true, visitor) {\n             None => {\n-                let idents = self.idents_to_str(trait_reference.path.idents);\n-                self.session.span_err(trait_reference.path.span,\n-                                      fmt!(\"attempt to implement an unknown trait `%s`\", idents));\n+                let path_str = self.idents_to_str(trait_reference.path.idents);\n+\n+                let usage_str = match reference_type {\n+                    TraitBoundingTypeParameter => \"bound type parameter to\",\n+                    TraitImplementation        => \"implement\",\n+                    TraitDerivation            => \"derive\"\n+                };\n+\n+                let msg = fmt!(\"attempt to %s a nonexistent trait `%s`\", usage_str, path_str);\n+                self.session.span_err(trait_reference.path.span, msg);\n             }\n             Some(def) => {\n+                debug!(\"(resolving trait) found trait def: %?\", def);\n                 self.record_def(trait_reference.ref_id, def);\n             }\n         }\n@@ -3930,7 +3930,7 @@ impl Resolver {\n             let original_trait_refs;\n             match opt_trait_reference {\n                 Some(trait_reference) => {\n-                    self.resolve_trait_reference(trait_reference, visitor);\n+                    self.resolve_trait_reference(trait_reference, visitor, TraitImplementation);\n \n                     // Record the current set of trait references.\n                     let mut new_trait_refs = ~[];"}, {"sha": "be3b381663a7dcdba92d0dd719b81880f21dc50e", "filename": "src/test/compile-fail/resolve-unknown-trait.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/656c8f91435df99b11bfe31be73eba6d8f391870/src%2Ftest%2Fcompile-fail%2Fresolve-unknown-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656c8f91435df99b11bfe31be73eba6d8f391870/src%2Ftest%2Fcompile-fail%2Fresolve-unknown-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-unknown-trait.rs?ref=656c8f91435df99b11bfe31be73eba6d8f391870", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+trait NewTrait : SomeNonExistentTrait {}\n+//~^ ERROR attempt to derive a nonexistent trait `SomeNonExistentTrait`\n+\n+impl SomeNonExistentTrait for int {}\n+//~^ ERROR attempt to implement a nonexistent trait `SomeNonExistentTrait`\n+\n+fn f<T:SomeNonExistentTrait>() {}\n+//~^ ERROR attempt to bound type parameter to a nonexistent trait `SomeNonExistentTrait`\n+"}]}