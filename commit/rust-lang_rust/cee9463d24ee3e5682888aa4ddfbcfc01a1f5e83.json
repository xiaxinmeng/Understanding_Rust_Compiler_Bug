{"sha": "cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZTk0NjNkMjRlZTNlNTY4Mjg4OGFhNGRkZmJjZmMwMWExZjVlODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-15T23:26:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-15T23:26:38Z"}, "message": "Auto merge of #30878 - brson:raw-pointer-derive, r=brson\n\nThis adds back the raw_pointer_derive lint as a 'removed' lint, so that its removal does not cause errors (#30346) but warnings.\n\nIn the process I discovered regressions in the code for renamed and removed lints, which didn't appear to have any tests. The addition of a second lint pass (ast vs. hir) meant that attributes were being inspected twice, renamed and removed warnings printed twice. I restructured the code so these tests are only done once and added tests. Unfortunately it makes the patch more complicated for the needed beta backport.\n\nr? @nikomatsakis", "tree": {"sha": "8aee2b144b34ac5ef24ac994759aa77d5d8a9ec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8aee2b144b34ac5ef24ac994759aa77d5d8a9ec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83", "html_url": "https://github.com/rust-lang/rust/commit/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "683af0d9e09d799e74cef5f3d0dd1ed7c74c093b", "url": "https://api.github.com/repos/rust-lang/rust/commits/683af0d9e09d799e74cef5f3d0dd1ed7c74c093b", "html_url": "https://github.com/rust-lang/rust/commit/683af0d9e09d799e74cef5f3d0dd1ed7c74c093b"}, {"sha": "ca81d3dddc19d05aa731faeb888a68d8846441b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca81d3dddc19d05aa731faeb888a68d8846441b3", "html_url": "https://github.com/rust-lang/rust/commit/ca81d3dddc19d05aa731faeb888a68d8846441b3"}], "stats": {"total": 310, "additions": 272, "deletions": 38}, "files": [{"sha": "3676e2306468709c08ef183f1f09a001bf422c2f", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83", "patch": "@@ -136,6 +136,12 @@ declare_lint! {\n     \"unit struct or enum variant erroneously allowed to match via path::ident(..)\"\n }\n \n+declare_lint! {\n+    pub RAW_POINTER_DERIVE,\n+    Warn,\n+    \"uses of #[derive] with raw pointers are rarely correct\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -163,7 +169,8 @@ impl LintPass for HardwiredLints {\n             PRIVATE_IN_PUBLIC,\n             INVALID_TYPE_PARAM_DEFAULT,\n             MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n-            CONST_ERR\n+            CONST_ERR,\n+            RAW_POINTER_DERIVE\n         )\n     }\n }"}, {"sha": "c41a361fcc309338ea1b2c3c332636038372baa7", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 149, "deletions": 35, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83", "patch": "@@ -247,21 +247,10 @@ impl LintStore {\n     {\n         match self.by_name.get(lint_name) {\n             Some(&Id(lint_id)) => Ok(lint_id),\n-            Some(&Renamed(ref new_name, lint_id)) => {\n-                let warning = format!(\"lint {} has been renamed to {}\",\n-                                      lint_name, new_name);\n-                match span {\n-                    Some(span) => sess.span_warn(span, &warning[..]),\n-                    None => sess.warn(&warning[..]),\n-                };\n+            Some(&Renamed(_, lint_id)) => {\n                 Ok(lint_id)\n             },\n             Some(&Removed(ref reason)) => {\n-                let warning = format!(\"lint {} has been removed: {}\", lint_name, reason);\n-                match span {\n-                    Some(span) => sess.span_warn(span, &warning[..]),\n-                    None => sess.warn(&warning[..])\n-                }\n                 Err(FindLintError::Removed)\n             },\n             None => Err(FindLintError::NotFound)\n@@ -270,8 +259,12 @@ impl LintStore {\n \n     pub fn process_command_line(&mut self, sess: &Session) {\n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n+            check_lint_name_cmdline(sess, self,\n+                                    &lint_name[..], level);\n+\n             match self.find_lint(&lint_name[..], sess, None) {\n                 Ok(lint_id) => self.set_level(lint_id, (level, CommandLine)),\n+                Err(FindLintError::Removed) => { }\n                 Err(_) => {\n                     match self.lint_groups.iter().map(|(&x, pair)| (x, pair.0.clone()))\n                                                  .collect::<FnvHashMap<&'static str,\n@@ -283,8 +276,11 @@ impl LintStore {\n                                      self.set_level(*lint_id, (level, CommandLine)))\n                              .collect::<Vec<()>>();\n                         }\n-                        None => sess.err(&format!(\"unknown {} flag: {}\",\n-                                                 level.as_str(), lint_name)),\n+                        None => {\n+                            // The lint or lint group doesn't exist.\n+                            // This is an error, but it was handled\n+                            // by check_lint_name_cmdline.\n+                        }\n                     }\n                 }\n             }\n@@ -359,29 +355,39 @@ pub fn gather_attrs(attrs: &[ast::Attribute])\n                     -> Vec<Result<(InternedString, Level, Span), Span>> {\n     let mut out = vec!();\n     for attr in attrs {\n-        let level = match Level::from_str(&attr.name()) {\n-            None => continue,\n-            Some(lvl) => lvl,\n-        };\n+        let r = gather_attr(attr);\n+        out.extend(r.into_iter());\n+    }\n+    out\n+}\n \n-        attr::mark_used(attr);\n+pub fn gather_attr(attr: &ast::Attribute)\n+                   -> Vec<Result<(InternedString, Level, Span), Span>> {\n+    let mut out = vec!();\n \n-        let meta = &attr.node.value;\n-        let metas = match meta.node {\n-            ast::MetaList(_, ref metas) => metas,\n-            _ => {\n-                out.push(Err(meta.span));\n-                continue;\n-            }\n-        };\n+    let level = match Level::from_str(&attr.name()) {\n+        None => return out,\n+        Some(lvl) => lvl,\n+    };\n \n-        for meta in metas {\n-            out.push(match meta.node {\n-                ast::MetaWord(ref lint_name) => Ok((lint_name.clone(), level, meta.span)),\n-                _ => Err(meta.span),\n-            });\n+    attr::mark_used(attr);\n+\n+    let meta = &attr.node.value;\n+    let metas = match meta.node {\n+        ast::MetaList(_, ref metas) => metas,\n+        _ => {\n+            out.push(Err(meta.span));\n+            return out;\n         }\n+    };\n+\n+    for meta in metas {\n+        out.push(match meta.node {\n+            ast::MetaWord(ref lint_name) => Ok((lint_name.clone(), level, meta.span)),\n+            _ => Err(meta.span),\n+        });\n     }\n+\n     out\n }\n \n@@ -587,9 +593,9 @@ pub trait LintContext: Sized {\n                                                            (*lint_id, level, span))\n                                                       .collect(),\n                                 None => {\n-                                    self.span_lint(builtin::UNKNOWN_LINTS, span,\n-                                                   &format!(\"unknown `{}` attribute: `{}`\",\n-                                                            level.as_str(), lint_name));\n+                                    // The lint or lint group doesn't exist.\n+                                    // This is an error, but it was handled\n+                                    // by check_lint_name_attribute.\n                                     continue;\n                                 }\n                             }\n@@ -901,6 +907,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n     }\n \n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n+        check_lint_name_attribute(self, attr);\n         run_lints!(self, check_attribute, late_passes, attr);\n     }\n }\n@@ -1114,6 +1121,113 @@ impl LateLintPass for GatherNodeLevels {\n     }\n }\n \n+enum CheckLintNameResult<'a> {\n+    Ok,\n+    // Lint doesn't exist\n+    NoLint,\n+    // The lint is either renamed or removed and a warning was\n+    // generated in the DiagnosticBuilder\n+    Mentioned(DiagnosticBuilder<'a>)\n+}\n+\n+/// Checks the name of a lint for its existence, and whether it was\n+/// renamed or removed. Generates a DiagnosticBuilder containing a\n+/// warning for renamed and removed lints. This is over both lint\n+/// names from attributes and those passed on the command line. Since\n+/// it emits non-fatal warnings and there are *two* lint passes that\n+/// inspect attributes, this is only run from the late pass to avoid\n+/// printing duplicate warnings.\n+fn check_lint_name<'a>(sess: &'a Session,\n+                       lint_cx: &LintStore,\n+                       lint_name: &str,\n+                       span: Option<Span>) -> CheckLintNameResult<'a> {\n+    match lint_cx.by_name.get(lint_name) {\n+        Some(&Renamed(ref new_name, _)) => {\n+            let warning = format!(\"lint {} has been renamed to {}\",\n+                                  lint_name, new_name);\n+            let db = match span {\n+                Some(span) => sess.struct_span_warn(span, &warning[..]),\n+                None => sess.struct_warn(&warning[..]),\n+            };\n+            CheckLintNameResult::Mentioned(db)\n+        },\n+        Some(&Removed(ref reason)) => {\n+            let warning = format!(\"lint {} has been removed: {}\", lint_name, reason);\n+            let db = match span {\n+                Some(span) => sess.struct_span_warn(span, &warning[..]),\n+                None => sess.struct_warn(&warning[..])\n+            };\n+            CheckLintNameResult::Mentioned(db)\n+        },\n+        None => {\n+            match lint_cx.lint_groups.get(lint_name) {\n+                None => {\n+                    CheckLintNameResult::NoLint\n+                }\n+                Some(_) => {\n+                    /* lint group exists */\n+                    CheckLintNameResult::Ok\n+                }\n+            }\n+        }\n+        Some(_) => {\n+            /* lint exists */\n+            CheckLintNameResult::Ok\n+        }\n+    }\n+}\n+\n+// Checks the validity of lint names derived from attributes\n+fn check_lint_name_attribute(cx: &LateContext, attr: &ast::Attribute) {\n+    for result in gather_attr(attr) {\n+        match result {\n+            Err(_) => {\n+                // Malformed lint attr. Reported by with_lint_attrs\n+                continue;\n+            }\n+            Ok((lint_name, _, span)) => {\n+                match check_lint_name(&cx.tcx.sess, &cx.lints, &lint_name[..], Some(span)) {\n+                    CheckLintNameResult::Ok => (),\n+                    CheckLintNameResult::Mentioned(mut db) => {\n+                        db.emit();\n+                    }\n+                    CheckLintNameResult::NoLint => {\n+                        cx.span_lint(builtin::UNKNOWN_LINTS, span,\n+                                     &format!(\"unknown lint: `{}`\",\n+                                              lint_name));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+// Checks the validity of lint names derived from the command line\n+fn check_lint_name_cmdline(sess: &Session, lint_cx: &LintStore,\n+                           lint_name: &str, level: Level) {\n+    let db = match check_lint_name(sess, lint_cx, lint_name, None) {\n+        CheckLintNameResult::Ok => None,\n+        CheckLintNameResult::Mentioned(db) => Some(db),\n+        CheckLintNameResult::NoLint => {\n+            Some(sess.struct_err(&format!(\"unknown lint: `{}`\", lint_name)))\n+        }\n+    };\n+\n+    if let Some(mut db) = db {\n+        let msg = format!(\"requested on the command line with `{} {}`\",\n+                          match level {\n+                              Level::Allow => \"-A\",\n+                              Level::Warn => \"-W\",\n+                              Level::Deny => \"-D\",\n+                              Level::Forbid => \"-F\",\n+                          },\n+                          lint_name);\n+        db.note(&msg);\n+        db.emit();\n+    }\n+}\n+\n+\n /// Perform lint checking on a crate.\n ///\n /// Consumes the `lint_store` field of the `Session`."}, {"sha": "e0ed20d31ff11652158173d8137fe04714713f88", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83", "patch": "@@ -172,9 +172,12 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     // We have one lint pass defined specially\n     store.register_late_pass(sess, false, box lint::GatherNodeLevels);\n \n-    // Insert temporary renamings for a one-time deprecation\n+    // Register renamed and removed lints\n     store.register_renamed(\"unknown_features\", \"unused_features\");\n-\n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");\n     store.register_removed(\"negate_unsigned\", \"cast a signed value instead\");\n+    store.register_removed(\"raw_pointer_derive\", \"using derive with raw pointers is ok\");\n+    // This was renamed to raw_pointer_derive, which was then removed,\n+    // so it is also considered removed\n+    store.register_removed(\"raw_pointer_deriving\", \"using derive with raw pointers is ok\");\n }"}, {"sha": "592e2b11905b335797b7b416ad12fbf172a5b62e", "filename": "src/test/compile-fail/lint-malformed.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Ftest%2Fcompile-fail%2Flint-malformed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Ftest%2Fcompile-fail%2Flint-malformed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-malformed.rs?ref=cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny = \"foo\"] //~ ERR malformed lint attribute\n+#![allow(bar = \"baz\")] //~ ERR malformed lint attribute\n+\n+fn main() { }"}, {"sha": "d6bfd1eec39a6f2fbc782da28cd339a416bc3e30", "filename": "src/test/compile-fail/lint-removed-cmdline.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Ftest%2Fcompile-fail%2Flint-removed-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Ftest%2Fcompile-fail%2Flint-removed-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-removed-cmdline.rs?ref=cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// The raw_pointer_derived lint warns about its removal\n+// cc #30346\n+\n+// compile-flags:-D raw_pointer_derive\n+\n+// error-pattern:lint raw_pointer_derive has been removed\n+// error-pattern:requested on the command line with `-D raw_pointer_derive`\n+\n+#[deny(warnings)]\n+fn main() { let unused = (); }"}, {"sha": "e196e128b17128607d6ab5e3c2fed9b8bbd940ac", "filename": "src/test/compile-fail/lint-removed.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Ftest%2Fcompile-fail%2Flint-removed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Ftest%2Fcompile-fail%2Flint-removed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-removed.rs?ref=cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// The raw_pointer_derived lint only warns about its own removal\n+// cc #30346\n+\n+#[deny(raw_pointer_derive)] //~ WARN raw_pointer_derive has been removed\n+#[deny(warnings)]\n+fn main() { let unused = (); } //~ ERR unused"}, {"sha": "3b352b384ff99609e55386d3ac3015e2e7e16d98", "filename": "src/test/compile-fail/lint-renamed-cmdline.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Ftest%2Fcompile-fail%2Flint-renamed-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Ftest%2Fcompile-fail%2Flint-renamed-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-renamed-cmdline.rs?ref=cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-D unknown_features\n+\n+// error-pattern:lint unknown_features has been renamed to unused_features\n+// error-pattern:requested on the command line with `-D unknown_features`\n+// error-pattern:unused\n+\n+#[deny(unused)]\n+fn main() { let unused = (); }"}, {"sha": "2e85a323a1c414fffab214266913366a94a0ac1c", "filename": "src/test/compile-fail/lint-renamed.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Ftest%2Fcompile-fail%2Flint-renamed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Ftest%2Fcompile-fail%2Flint-renamed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-renamed.rs?ref=cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deny(unknown_features)] //~ WARN lint unknown_features has been renamed to unused_features\n+#[deny(unused)]\n+fn main() { let unused = (); } //~ ERR unused"}, {"sha": "0c41959f8a71074759677c4da484fc966f8c415b", "filename": "src/test/compile-fail/lint-unknown-lint-cmdline.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Ftest%2Fcompile-fail%2Flint-unknown-lint-cmdline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Ftest%2Fcompile-fail%2Flint-unknown-lint-cmdline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-lint-cmdline.rs?ref=cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-D bogus\n+\n+// error-pattern:unknown lint\n+// error-pattern:requested on the command line with `-D bogus`\n+\n+fn main() { }"}, {"sha": "8f20a2c8ab7588ee2f981dd325d5f7757a8bac29", "filename": "src/test/compile-fail/lint-unknown-lint.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Ftest%2Fcompile-fail%2Flint-unknown-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83/src%2Ftest%2Fcompile-fail%2Flint-unknown-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-lint.rs?ref=cee9463d24ee3e5682888aa4ddfbcfc01a1f5e83", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(not_a_real_lint)] //~ WARN unknown lint\n+#![deny(unused)]\n+fn main() { let unused = (); } //~ ERR unused variable"}]}