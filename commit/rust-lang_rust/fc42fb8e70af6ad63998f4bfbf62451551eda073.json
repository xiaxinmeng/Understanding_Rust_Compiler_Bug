{"sha": "fc42fb8e70af6ad63998f4bfbf62451551eda073", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNDJmYjhlNzBhZjZhZDYzOTk4ZjRiZmJmNjI0NTE1NTFlZGEwNzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-01T07:38:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-01T07:38:47Z"}, "message": "Auto merge of #77354 - ecstatic-morse:const-checking-moar-errors, r=oli-obk\n\nOverhaul const-checking diagnostics\n\nThe primary purpose of this PR was to remove `NonConstOp::STOPS_CONST_CHECKING`, which causes any additional errors found by the const-checker to be silenced. I used this flag to preserve diagnostic parity with `qualify_min_const_fn.rs`, which has since been removed.\n\nHowever, simply removing the flag caused a deluge of errors in some cases, since an error would be emitted any time a local or temporary had a wrong type. To remedy this, I added an alternative system (`DiagnosticImportance`) to silence additional error messages that were likely to distract the user from the underlying issue. When an error of the highest importance occurs, all less important errors are silenced. When no error of the highest importance occurs, all less important errors are emitted after checking is complete. Following the suggestions from the important error is usually enough to fix the less important errors, so this should lead to better UX most of the time.\n\nThere's also some unrelated diagnostics improvements in this PR isolated in their own commits. Splitting them out would be possible, but a bit of a pain. This isn't as tidy as some of my other PRs, but it should *only* affect diagnostics, never whether or not something passes const-checking. Note that there are a few trivial exceptions to this, like banning `Yield` in all const-contexts, not just `const fn`.\n\nAs always, meant to be reviewed commit-by-commit.\n\nr? `@oli-obk`", "tree": {"sha": "13a17a2ee45eb37c3e35980dfb9a6cfcaff70ca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13a17a2ee45eb37c3e35980dfb9a6cfcaff70ca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc42fb8e70af6ad63998f4bfbf62451551eda073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc42fb8e70af6ad63998f4bfbf62451551eda073", "html_url": "https://github.com/rust-lang/rust/commit/fc42fb8e70af6ad63998f4bfbf62451551eda073", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc42fb8e70af6ad63998f4bfbf62451551eda073/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00730fd0f1df0718f4e0f82298bff3bf1f44a98b", "url": "https://api.github.com/repos/rust-lang/rust/commits/00730fd0f1df0718f4e0f82298bff3bf1f44a98b", "html_url": "https://github.com/rust-lang/rust/commit/00730fd0f1df0718f4e0f82298bff3bf1f44a98b"}, {"sha": "1301f43119f8ae564a01abd3fa306e87d635e862", "url": "https://api.github.com/repos/rust-lang/rust/commits/1301f43119f8ae564a01abd3fa306e87d635e862", "html_url": "https://github.com/rust-lang/rust/commit/1301f43119f8ae564a01abd3fa306e87d635e862"}], "stats": {"total": 1191, "additions": 589, "deletions": 602}, "files": [{"sha": "81f65ac86900fca5eacf6f7bff0a411c8a9ea764", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -18,7 +18,6 @@ E0010: include_str!(\"./error_codes/E0010.md\"),\n E0013: include_str!(\"./error_codes/E0013.md\"),\n E0014: include_str!(\"./error_codes/E0014.md\"),\n E0015: include_str!(\"./error_codes/E0015.md\"),\n-E0019: include_str!(\"./error_codes/E0019.md\"),\n E0023: include_str!(\"./error_codes/E0023.md\"),\n E0025: include_str!(\"./error_codes/E0025.md\"),\n E0026: include_str!(\"./error_codes/E0026.md\"),\n@@ -463,6 +462,7 @@ E0776: include_str!(\"./error_codes/E0776.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard\n+//  E0019, merged into E0015\n //  E0035, merged into E0087/E0089\n //  E0036, merged into E0087/E0089\n //  E0068,"}, {"sha": "7832468a539d315c71cab09ebc1e936258fe616b", "filename": "compiler/rustc_error_codes/src/error_codes/E0019.md", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/00730fd0f1df0718f4e0f82298bff3bf1f44a98b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0019.md", "raw_url": "https://github.com/rust-lang/rust/raw/00730fd0f1df0718f4e0f82298bff3bf1f44a98b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0019.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0019.md?ref=00730fd0f1df0718f4e0f82298bff3bf1f44a98b", "patch": "@@ -1,36 +0,0 @@\n-A function call isn't allowed in the const's initialization expression\n-because the expression's value must be known at compile-time.\n-\n-Erroneous code example:\n-\n-```compile_fail,E0019\n-#![feature(box_syntax)]\n-\n-fn main() {\n-    struct MyOwned;\n-\n-    static STATIC11: Box<MyOwned> = box MyOwned; // error!\n-}\n-```\n-\n-Remember: you can't use a function call inside a const's initialization\n-expression! However, you can totally use it anywhere else:\n-\n-```\n-enum Test {\n-    V1\n-}\n-\n-impl Test {\n-    fn func(&self) -> i32 {\n-        12\n-    }\n-}\n-\n-fn main() {\n-    const FOO: Test = Test::V1;\n-\n-    FOO.func(); // here is good\n-    let x = FOO.func(); // or even here!\n-}\n-```"}, {"sha": "fee24f0bae8cad4cba13139d13bcdcd09a37622d", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -670,7 +670,7 @@ impl Atom for Local {\n }\n \n /// Classifies locals into categories. See `Body::local_kind`.\n-#[derive(PartialEq, Eq, Debug, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Debug, HashStable)]\n pub enum LocalKind {\n     /// User-declared variable binding.\n     Var,"}, {"sha": "8df134860a5da7a06c4661b94c7e2a7f52267f0a", "filename": "compiler/rustc_mir/src/transform/check_consts/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -57,6 +57,16 @@ impl ConstCx<'mir, 'tcx> {\n             && self.tcx.features().staged_api\n             && is_const_stable_const_fn(self.tcx, self.def_id.to_def_id())\n     }\n+\n+    /// Returns the function signature of the item being const-checked if it is a `fn` or `const fn`.\n+    pub fn fn_sig(&self) -> Option<&'tcx hir::FnSig<'tcx>> {\n+        // Get this from the HIR map instead of a query to avoid cycle errors.\n+        //\n+        // FIXME: Is this still an issue?\n+        let hir_map = self.tcx.hir();\n+        let hir_id = hir_map.local_def_id_to_hir_id(self.def_id);\n+        hir_map.fn_sig_by_hir_id(hir_id)\n+    }\n }\n \n /// Returns `true` if this `DefId` points to one of the official `panic` lang items."}, {"sha": "25ed7859d2187af64fa4a0016c6c3ed7b0cdcc36", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 127, "deletions": 183, "changes": 310, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -1,122 +1,61 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n-use rustc_errors::{struct_span_err, Applicability};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::mir;\n use rustc_session::config::nightly_options;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol};\n \n use super::ConstCx;\n \n-/// Emits an error and returns `true` if `op` is not allowed in the given const context.\n-pub fn non_const<O: NonConstOp>(ccx: &ConstCx<'_, '_>, op: O, span: Span) -> bool {\n-    debug!(\"illegal_op: op={:?}\", op);\n-\n-    let gate = match op.status_in_item(ccx) {\n-        Status::Allowed => return false,\n-\n-        Status::Unstable(gate) if ccx.tcx.features().enabled(gate) => {\n-            let unstable_in_stable = ccx.is_const_stable_const_fn()\n-                && !super::allow_internal_unstable(ccx.tcx, ccx.def_id.to_def_id(), gate);\n-\n-            if unstable_in_stable {\n-                ccx.tcx.sess\n-                    .struct_span_err(\n-                        span,\n-                        &format!(\"const-stable function cannot use `#[feature({})]`\", gate.as_str()),\n-                    )\n-                    .span_suggestion(\n-                        ccx.body.span,\n-                        \"if it is not part of the public API, make this function unstably const\",\n-                        concat!(r#\"#[rustc_const_unstable(feature = \"...\", issue = \"...\")]\"#, '\\n').to_owned(),\n-                        Applicability::HasPlaceholders,\n-                    )\n-                    .note(\"otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\")\n-                    .emit();\n-            }\n-\n-            return unstable_in_stable;\n-        }\n-\n-        Status::Unstable(gate) => Some(gate),\n-        Status::Forbidden => None,\n-    };\n-\n-    if ccx.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n-        ccx.tcx.sess.miri_unleashed_feature(span, gate);\n-        return false;\n-    }\n-\n-    op.emit_error(ccx, span);\n-    true\n-}\n-\n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum Status {\n     Allowed,\n     Unstable(Symbol),\n     Forbidden,\n }\n \n+#[derive(Clone, Copy)]\n+pub enum DiagnosticImportance {\n+    /// An operation that must be removed for const-checking to pass.\n+    Primary,\n+\n+    /// An operation that causes const-checking to fail, but is usually a side-effect of a `Primary` operation elsewhere.\n+    Secondary,\n+}\n+\n /// An operation that is not *always* allowed in a const context.\n pub trait NonConstOp: std::fmt::Debug {\n-    const STOPS_CONST_CHECKING: bool = false;\n-\n     /// Returns an enum indicating whether this operation is allowed within the given item.\n     fn status_in_item(&self, _ccx: &ConstCx<'_, '_>) -> Status {\n         Status::Forbidden\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        let mut err = struct_span_err!(\n-            ccx.tcx.sess,\n-            span,\n-            E0019,\n-            \"{} contains unimplemented expression type\",\n-            ccx.const_kind()\n-        );\n-\n-        if let Status::Unstable(gate) = self.status_in_item(ccx) {\n-            if !ccx.tcx.features().enabled(gate) && nightly_options::is_nightly_build() {\n-                err.help(&format!(\"add `#![feature({})]` to the crate attributes to enable\", gate));\n-            }\n-        }\n-\n-        if ccx.tcx.sess.teach(&err.get_code().unwrap()) {\n-            err.note(\n-                \"A function call isn't allowed in the const's initialization expression \\\n-                      because the expression's value must be known at compile-time.\",\n-            );\n-            err.note(\n-                \"Remember: you can't use a function call inside a const's initialization \\\n-                      expression! However, you can use it anywhere else.\",\n-            );\n-        }\n-        err.emit();\n+    fn importance(&self) -> DiagnosticImportance {\n+        DiagnosticImportance::Primary\n     }\n+\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx>;\n }\n \n #[derive(Debug)]\n pub struct Abort;\n impl NonConstOp for Abort {\n-    const STOPS_CONST_CHECKING: bool = true;\n-\n     fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n         mcf_status_in_item(ccx)\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        mcf_emit_error(ccx, span, \"abort is not stable in const fn\")\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        mcf_build_error(ccx, span, \"abort is not stable in const fn\")\n     }\n }\n \n #[derive(Debug)]\n pub struct FloatingPointOp;\n impl NonConstOp for FloatingPointOp {\n-    const STOPS_CONST_CHECKING: bool = true;\n-\n     fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n         if ccx.const_kind() == hir::ConstContext::ConstFn {\n             Status::Unstable(sym::const_fn_floating_point_arithmetic)\n@@ -125,56 +64,38 @@ impl NonConstOp for FloatingPointOp {\n         }\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_fn_floating_point_arithmetic,\n             span,\n             &format!(\"floating point arithmetic is not allowed in {}s\", ccx.const_kind()),\n         )\n-        .emit();\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct NonPrimitiveOp;\n-impl NonConstOp for NonPrimitiveOp {\n-    const STOPS_CONST_CHECKING: bool = true;\n-\n-    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        mcf_status_in_item(ccx)\n-    }\n-\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        mcf_emit_error(ccx, span, \"only int, `bool` and `char` operations are stable in const fn\")\n     }\n }\n \n /// A function call where the callee is a pointer.\n #[derive(Debug)]\n pub struct FnCallIndirect;\n impl NonConstOp for FnCallIndirect {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        let mut err =\n-            ccx.tcx.sess.struct_span_err(span, \"function pointers are not allowed in const fn\");\n-        err.emit();\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        ccx.tcx.sess.struct_span_err(span, \"function pointers are not allowed in const fn\")\n     }\n }\n \n /// A function call where the callee is not marked as `const`.\n #[derive(Debug)]\n pub struct FnCallNonConst(pub DefId);\n impl NonConstOp for FnCallNonConst {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        let mut err = struct_span_err!(\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        struct_span_err!(\n             ccx.tcx.sess,\n             span,\n             E0015,\n             \"calls in {}s are limited to constant functions, \\\n              tuple structs and tuple variants\",\n             ccx.const_kind(),\n-        );\n-        err.emit();\n+        )\n     }\n }\n \n@@ -185,7 +106,7 @@ impl NonConstOp for FnCallNonConst {\n pub struct FnCallUnstable(pub DefId, pub Option<Symbol>);\n \n impl NonConstOp for FnCallUnstable {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         let FnCallUnstable(def_id, feature) = *self;\n \n         let mut err = ccx.tcx.sess.struct_span_err(\n@@ -203,15 +124,14 @@ impl NonConstOp for FnCallUnstable {\n                 ));\n             }\n         }\n-        err.emit();\n+\n+        err\n     }\n }\n \n #[derive(Debug)]\n pub struct FnPtrCast;\n impl NonConstOp for FnPtrCast {\n-    const STOPS_CONST_CHECKING: bool = true;\n-\n     fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n         if ccx.const_kind() != hir::ConstContext::ConstFn {\n             Status::Allowed\n@@ -220,37 +140,32 @@ impl NonConstOp for FnPtrCast {\n         }\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_fn_fn_ptr_basics,\n             span,\n             &format!(\"function pointer casts are not allowed in {}s\", ccx.const_kind()),\n         )\n-        .emit()\n     }\n }\n \n #[derive(Debug)]\n pub struct Generator;\n impl NonConstOp for Generator {\n-    const STOPS_CONST_CHECKING: bool = true;\n-\n-    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        // FIXME: This means generator-only MIR is only forbidden in const fn. This is for\n-        // compatibility with the old code. Such MIR should be forbidden everywhere.\n-        mcf_status_in_item(ccx)\n+    fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n+        Status::Forbidden\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        mcf_emit_error(ccx, span, \"const fn generators are unstable\");\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        ccx.tcx.sess.struct_span_err(span, \"Generators and `async` functions cannot be `const`\")\n     }\n }\n \n #[derive(Debug)]\n pub struct HeapAllocation;\n impl NonConstOp for HeapAllocation {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -267,46 +182,55 @@ impl NonConstOp for HeapAllocation {\n                  be done at compile time.\",\n             );\n         }\n-        err.emit();\n+        err\n     }\n }\n \n #[derive(Debug)]\n pub struct InlineAsm;\n-impl NonConstOp for InlineAsm {}\n+impl NonConstOp for InlineAsm {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        struct_span_err!(\n+            ccx.tcx.sess,\n+            span,\n+            E0015,\n+            \"inline assembly is not allowed in {}s\",\n+            ccx.const_kind()\n+        )\n+    }\n+}\n \n #[derive(Debug)]\n pub struct LiveDrop {\n     pub dropped_at: Option<Span>,\n }\n impl NonConstOp for LiveDrop {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        let mut diagnostic = struct_span_err!(\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n             E0493,\n             \"destructors cannot be evaluated at compile-time\"\n         );\n-        diagnostic.span_label(span, format!(\"{}s cannot evaluate destructors\", ccx.const_kind()));\n+        err.span_label(span, format!(\"{}s cannot evaluate destructors\", ccx.const_kind()));\n         if let Some(span) = self.dropped_at {\n-            diagnostic.span_label(span, \"value is dropped here\");\n+            err.span_label(span, \"value is dropped here\");\n         }\n-        diagnostic.emit();\n+        err\n     }\n }\n \n #[derive(Debug)]\n pub struct CellBorrow;\n impl NonConstOp for CellBorrow {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         struct_span_err!(\n             ccx.tcx.sess,\n             span,\n             E0492,\n             \"cannot borrow a constant which may contain \\\n             interior mutability, create a static instead\"\n         )\n-        .emit();\n     }\n }\n \n@@ -322,7 +246,7 @@ impl NonConstOp for MutBorrow {\n         }\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         let mut err = if ccx.const_kind() == hir::ConstContext::ConstFn {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n@@ -353,7 +277,7 @@ impl NonConstOp for MutBorrow {\n                       static mut or a global UnsafeCell.\",\n             );\n         }\n-        err.emit();\n+        err\n     }\n }\n \n@@ -370,14 +294,13 @@ impl NonConstOp for MutAddressOf {\n         }\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_mut_refs,\n             span,\n             &format!(\"`&raw mut` is not allowed in {}s\", ccx.const_kind()),\n         )\n-        .emit();\n     }\n }\n \n@@ -387,6 +310,20 @@ impl NonConstOp for MutDeref {\n     fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n         Status::Unstable(sym::const_mut_refs)\n     }\n+\n+    fn importance(&self) -> DiagnosticImportance {\n+        // Usually a side-effect of a `MutBorrow` somewhere.\n+        DiagnosticImportance::Secondary\n+    }\n+\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        feature_err(\n+            &ccx.tcx.sess.parse_sess,\n+            sym::const_mut_refs,\n+            span,\n+            &format!(\"mutation through a reference is not allowed in {}s\", ccx.const_kind()),\n+        )\n+    }\n }\n \n #[derive(Debug)]\n@@ -396,21 +333,20 @@ impl NonConstOp for Panic {\n         Status::Unstable(sym::const_panic)\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_panic,\n             span,\n             &format!(\"panicking in {}s is unstable\", ccx.const_kind()),\n         )\n-        .emit();\n     }\n }\n \n #[derive(Debug)]\n pub struct RawPtrComparison;\n impl NonConstOp for RawPtrComparison {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         let mut err = ccx\n             .tcx\n             .sess\n@@ -419,7 +355,7 @@ impl NonConstOp for RawPtrComparison {\n             \"see issue #53020 <https://github.com/rust-lang/rust/issues/53020> \\\n             for more information\",\n         );\n-        err.emit();\n+        err\n     }\n }\n \n@@ -430,14 +366,13 @@ impl NonConstOp for RawPtrDeref {\n         Status::Unstable(sym::const_raw_ptr_deref)\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_raw_ptr_deref,\n             span,\n             &format!(\"dereferencing raw pointers in {}s is unstable\", ccx.const_kind(),),\n         )\n-        .emit();\n     }\n }\n \n@@ -448,14 +383,13 @@ impl NonConstOp for RawPtrToIntCast {\n         Status::Unstable(sym::const_raw_ptr_to_usize_cast)\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_raw_ptr_to_usize_cast,\n             span,\n             &format!(\"casting pointers to integers in {}s is unstable\", ccx.const_kind(),),\n         )\n-        .emit();\n     }\n }\n \n@@ -471,7 +405,7 @@ impl NonConstOp for StaticAccess {\n         }\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n@@ -489,31 +423,28 @@ impl NonConstOp for StaticAccess {\n             );\n             err.help(\"To fix this, the value can be extracted to a `const` and then used.\");\n         }\n-        err.emit();\n+        err\n     }\n }\n \n /// An access to a thread-local `static`.\n #[derive(Debug)]\n pub struct ThreadLocalAccess;\n impl NonConstOp for ThreadLocalAccess {\n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         struct_span_err!(\n             ccx.tcx.sess,\n             span,\n             E0625,\n             \"thread-local statics cannot be \\\n             accessed at compile-time\"\n         )\n-        .emit();\n     }\n }\n \n #[derive(Debug)]\n pub struct Transmute;\n impl NonConstOp for Transmute {\n-    const STOPS_CONST_CHECKING: bool = true;\n-\n     fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n         if ccx.const_kind() != hir::ConstContext::ConstFn {\n             Status::Allowed\n@@ -522,15 +453,15 @@ impl NonConstOp for Transmute {\n         }\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        feature_err(\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        let mut err = feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_fn_transmute,\n             span,\n             &format!(\"`transmute` is not allowed in {}s\", ccx.const_kind()),\n-        )\n-        .note(\"`transmute` is only allowed in constants and statics for now\")\n-        .emit();\n+        );\n+        err.note(\"`transmute` is only allowed in constants and statics for now\");\n+        err\n     }\n }\n \n@@ -546,14 +477,13 @@ impl NonConstOp for UnionAccess {\n         }\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n         feature_err(\n             &ccx.tcx.sess.parse_sess,\n             sym::const_fn_union,\n             span,\n             \"unions in const fn are unstable\",\n         )\n-        .emit();\n     }\n }\n \n@@ -567,12 +497,12 @@ impl NonConstOp for UnsizingCast {\n         mcf_status_in_item(ccx)\n     }\n \n-    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        mcf_emit_error(\n+    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        mcf_build_error(\n             ccx,\n             span,\n             \"unsizing casts to types besides slices are not allowed in const fn\",\n-        );\n+        )\n     }\n }\n \n@@ -581,29 +511,42 @@ pub mod ty {\n     use super::*;\n \n     #[derive(Debug)]\n-    pub struct MutRef;\n+    pub struct MutRef(pub mir::LocalKind);\n     impl NonConstOp for MutRef {\n-        const STOPS_CONST_CHECKING: bool = true;\n-\n         fn status_in_item(&self, _ccx: &ConstCx<'_, '_>) -> Status {\n             Status::Unstable(sym::const_mut_refs)\n         }\n \n-        fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+        fn importance(&self) -> DiagnosticImportance {\n+            match self.0 {\n+                mir::LocalKind::Var | mir::LocalKind::Temp => DiagnosticImportance::Secondary,\n+                mir::LocalKind::ReturnPointer | mir::LocalKind::Arg => {\n+                    DiagnosticImportance::Primary\n+                }\n+            }\n+        }\n+\n+        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_mut_refs,\n                 span,\n                 &format!(\"mutable references are not allowed in {}s\", ccx.const_kind()),\n             )\n-            .emit()\n         }\n     }\n \n     #[derive(Debug)]\n-    pub struct FnPtr;\n+    pub struct FnPtr(pub mir::LocalKind);\n     impl NonConstOp for FnPtr {\n-        const STOPS_CONST_CHECKING: bool = true;\n+        fn importance(&self) -> DiagnosticImportance {\n+            match self.0 {\n+                mir::LocalKind::Var | mir::LocalKind::Temp => DiagnosticImportance::Secondary,\n+                mir::LocalKind::ReturnPointer | mir::LocalKind::Arg => {\n+                    DiagnosticImportance::Primary\n+                }\n+            }\n+        }\n \n         fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n             if ccx.const_kind() != hir::ConstContext::ConstFn {\n@@ -613,67 +556,68 @@ pub mod ty {\n             }\n         }\n \n-        fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_fn_fn_ptr_basics,\n                 span,\n                 &format!(\"function pointers cannot appear in {}s\", ccx.const_kind()),\n             )\n-            .emit()\n         }\n     }\n \n     #[derive(Debug)]\n     pub struct ImplTrait;\n     impl NonConstOp for ImplTrait {\n-        const STOPS_CONST_CHECKING: bool = true;\n-\n         fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n             mcf_status_in_item(ccx)\n         }\n \n-        fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-            mcf_emit_error(ccx, span, \"`impl Trait` in const fn is unstable\");\n+        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+            mcf_build_error(ccx, span, \"`impl Trait` in const fn is unstable\")\n         }\n     }\n \n     #[derive(Debug)]\n-    pub struct TraitBound;\n+    pub struct TraitBound(pub mir::LocalKind);\n     impl NonConstOp for TraitBound {\n-        const STOPS_CONST_CHECKING: bool = true;\n+        fn importance(&self) -> DiagnosticImportance {\n+            match self.0 {\n+                mir::LocalKind::Var | mir::LocalKind::Temp => DiagnosticImportance::Secondary,\n+                mir::LocalKind::ReturnPointer | mir::LocalKind::Arg => {\n+                    DiagnosticImportance::Primary\n+                }\n+            }\n+        }\n \n         fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n             mcf_status_in_item(ccx)\n         }\n \n-        fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-            mcf_emit_error(\n+        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+            mcf_build_error(\n                 ccx,\n                 span,\n                 \"trait bounds other than `Sized` on const fn parameters are unstable\",\n-            );\n+            )\n         }\n     }\n \n     /// A trait bound with the `?const Trait` opt-out\n     #[derive(Debug)]\n     pub struct TraitBoundNotConst;\n     impl NonConstOp for TraitBoundNotConst {\n-        const STOPS_CONST_CHECKING: bool = true;\n-\n         fn status_in_item(&self, _: &ConstCx<'_, '_>) -> Status {\n             Status::Unstable(sym::const_trait_bound_opt_out)\n         }\n \n-        fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+        fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_trait_bound_opt_out,\n                 span,\n                 \"`?const Trait` syntax is unstable\",\n             )\n-            .emit()\n         }\n     }\n }\n@@ -686,12 +630,12 @@ fn mcf_status_in_item(ccx: &ConstCx<'_, '_>) -> Status {\n     }\n }\n \n-fn mcf_emit_error(ccx: &ConstCx<'_, '_>, span: Span, msg: &str) {\n-    struct_span_err!(ccx.tcx.sess, span, E0723, \"{}\", msg)\n-        .note(\n-            \"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> \\\n+fn mcf_build_error(ccx: &ConstCx<'_, 'tcx>, span: Span, msg: &str) -> DiagnosticBuilder<'tcx> {\n+    let mut err = struct_span_err!(ccx.tcx.sess, span, E0723, \"{}\", msg);\n+    err.note(\n+        \"see issue #57563 <https://github.com/rust-lang/rust/issues/57563> \\\n              for more information\",\n-        )\n-        .help(\"add `#![feature(const_fn)]` to the crate attributes to enable\")\n-        .emit();\n+    );\n+    err.help(\"add `#![feature(const_fn)]` to the crate attributes to enable\");\n+    err\n }"}, {"sha": "9b2568d5abb050a09558696cf808e6488f7428b6", "filename": "compiler/rustc_mir/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -4,7 +4,7 @@ use rustc_middle::mir::{self, BasicBlock, Location};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n \n-use super::ops;\n+use super::ops::{self, NonConstOp};\n use super::qualifs::{NeedsDrop, Qualif};\n use super::validation::Qualifs;\n use super::ConstCx;\n@@ -56,7 +56,7 @@ impl std::ops::Deref for CheckLiveDrops<'mir, 'tcx> {\n \n impl CheckLiveDrops<'mir, 'tcx> {\n     fn check_live_drop(&self, span: Span) {\n-        ops::non_const(self.ccx, ops::LiveDrop { dropped_at: None }, span);\n+        ops::LiveDrop { dropped_at: None }.build_error(self.ccx, span).emit();\n     }\n }\n "}, {"sha": "ab63fd03a336e5de79c40856b20537b1691c3ccd", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 103, "deletions": 24, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -1,8 +1,8 @@\n //! The `Visitor` responsible for actually checking a `mir::Body` for invalid operations.\n \n-use rustc_errors::struct_span_err;\n-use rustc_hir::{self as hir, LangItem};\n-use rustc_hir::{def_id::DefId, HirId};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{self as hir, HirId, LangItem};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n@@ -11,13 +11,14 @@ use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{\n     self, adjustment::PointerCast, Instance, InstanceDef, Ty, TyCtxt, TypeAndMut,\n };\n-use rustc_span::{sym, Span};\n+use rustc_span::{sym, Span, Symbol};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::{self, TraitEngine};\n \n+use std::mem;\n use std::ops::Deref;\n \n-use super::ops::{self, NonConstOp};\n+use super::ops::{self, NonConstOp, Status};\n use super::qualifs::{self, CustomEq, HasMutInterior, NeedsDrop};\n use super::resolver::FlowSensitiveAnalysis;\n use super::{is_lang_panic_fn, ConstCx, Qualif};\n@@ -180,7 +181,8 @@ pub struct Validator<'mir, 'tcx> {\n     /// The span of the current statement.\n     span: Span,\n \n-    const_checking_stopped: bool,\n+    error_emitted: bool,\n+    secondary_errors: Vec<Diagnostic>,\n }\n \n impl Deref for Validator<'mir, 'tcx> {\n@@ -197,13 +199,21 @@ impl Validator<'mir, 'tcx> {\n             span: ccx.body.span,\n             ccx,\n             qualifs: Default::default(),\n-            const_checking_stopped: false,\n+            error_emitted: false,\n+            secondary_errors: Vec::new(),\n         }\n     }\n \n     pub fn check_body(&mut self) {\n         let ConstCx { tcx, body, def_id, .. } = *self.ccx;\n \n+        // `async` functions cannot be `const fn`. This is checked during AST lowering, so there's\n+        // no need to emit duplicate errors here.\n+        if is_async_fn(self.ccx) || body.generator_kind.is_some() {\n+            tcx.sess.delay_span_bug(body.span, \"`async` functions cannot be `const fn`\");\n+            return;\n+        }\n+\n         // The local type and predicate checks are not free and only relevant for `const fn`s.\n         if self.const_kind() == hir::ConstContext::ConstFn {\n             // Prevent const trait methods from being annotated as `stable`.\n@@ -223,20 +233,21 @@ impl Validator<'mir, 'tcx> {\n \n             self.check_item_predicates();\n \n-            for local in &body.local_decls {\n-                if local.internal {\n+            for (idx, local) in body.local_decls.iter_enumerated() {\n+                // Handle the return place below.\n+                if idx == RETURN_PLACE || local.internal {\n                     continue;\n                 }\n \n                 self.span = local.source_info.span;\n-                self.check_local_or_return_ty(local.ty);\n+                self.check_local_or_return_ty(local.ty, idx);\n             }\n \n             // impl trait is gone in MIR, so check the return type of a const fn by its signature\n             // instead of the type of the return place.\n             self.span = body.local_decls[RETURN_PLACE].source_info.span;\n             let return_ty = tcx.fn_sig(def_id).output();\n-            self.check_local_or_return_ty(return_ty.skip_binder());\n+            self.check_local_or_return_ty(return_ty.skip_binder(), RETURN_PLACE);\n         }\n \n         self.visit_body(&body);\n@@ -250,6 +261,17 @@ impl Validator<'mir, 'tcx> {\n             let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n             check_return_ty_is_sync(tcx, &body, hir_id);\n         }\n+\n+        // If we got through const-checking without emitting any \"primary\" errors, emit any\n+        // \"secondary\" errors if they occurred.\n+        let secondary_errors = mem::take(&mut self.secondary_errors);\n+        if !self.error_emitted {\n+            for error in secondary_errors {\n+                self.tcx.sess.diagnostic().emit_diagnostic(&error);\n+            }\n+        } else {\n+            assert!(self.tcx.sess.has_errors());\n+        }\n     }\n \n     pub fn qualifs_in_return_place(&mut self) -> ConstQualifs {\n@@ -264,15 +286,38 @@ impl Validator<'mir, 'tcx> {\n     /// Emits an error at the given `span` if an expression cannot be evaluated in the current\n     /// context.\n     pub fn check_op_spanned<O: NonConstOp>(&mut self, op: O, span: Span) {\n-        // HACK: This is for strict equivalence with the old `qualify_min_const_fn` pass, which\n-        // only emitted one error per function. It should be removed and the test output updated.\n-        if self.const_checking_stopped {\n+        let gate = match op.status_in_item(self.ccx) {\n+            Status::Allowed => return,\n+\n+            Status::Unstable(gate) if self.tcx.features().enabled(gate) => {\n+                let unstable_in_stable = self.ccx.is_const_stable_const_fn()\n+                    && !super::allow_internal_unstable(self.tcx, self.def_id.to_def_id(), gate);\n+                if unstable_in_stable {\n+                    emit_unstable_in_stable_error(self.ccx, span, gate);\n+                }\n+\n+                return;\n+            }\n+\n+            Status::Unstable(gate) => Some(gate),\n+            Status::Forbidden => None,\n+        };\n+\n+        if self.tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you {\n+            self.tcx.sess.miri_unleashed_feature(span, gate);\n             return;\n         }\n \n-        let err_emitted = ops::non_const(self.ccx, op, span);\n-        if err_emitted && O::STOPS_CONST_CHECKING {\n-            self.const_checking_stopped = true;\n+        let mut err = op.build_error(self.ccx, span);\n+        assert!(err.is_error());\n+\n+        match op.importance() {\n+            ops::DiagnosticImportance::Primary => {\n+                self.error_emitted = true;\n+                err.emit();\n+            }\n+\n+            ops::DiagnosticImportance::Secondary => err.buffer(&mut self.secondary_errors),\n         }\n     }\n \n@@ -284,7 +329,9 @@ impl Validator<'mir, 'tcx> {\n         self.check_op_spanned(ops::StaticAccess, span)\n     }\n \n-    fn check_local_or_return_ty(&mut self, ty: Ty<'tcx>) {\n+    fn check_local_or_return_ty(&mut self, ty: Ty<'tcx>, local: Local) {\n+        let kind = self.body.local_kind(local);\n+\n         for ty in ty.walk() {\n             let ty = match ty.unpack() {\n                 GenericArgKind::Type(ty) => ty,\n@@ -295,20 +342,20 @@ impl Validator<'mir, 'tcx> {\n             };\n \n             match *ty.kind() {\n-                ty::Ref(_, _, hir::Mutability::Mut) => self.check_op(ops::ty::MutRef),\n+                ty::Ref(_, _, hir::Mutability::Mut) => self.check_op(ops::ty::MutRef(kind)),\n                 ty::Opaque(..) => self.check_op(ops::ty::ImplTrait),\n-                ty::FnPtr(..) => self.check_op(ops::ty::FnPtr),\n+                ty::FnPtr(..) => self.check_op(ops::ty::FnPtr(kind)),\n \n                 ty::Dynamic(preds, _) => {\n                     for pred in preds.iter() {\n                         match pred.skip_binder() {\n                             ty::ExistentialPredicate::AutoTrait(_)\n                             | ty::ExistentialPredicate::Projection(_) => {\n-                                self.check_op(ops::ty::TraitBound)\n+                                self.check_op(ops::ty::TraitBound(kind))\n                             }\n                             ty::ExistentialPredicate::Trait(trait_ref) => {\n                                 if Some(trait_ref.def_id) != self.tcx.lang_items().sized_trait() {\n-                                    self.check_op(ops::ty::TraitBound)\n+                                    self.check_op(ops::ty::TraitBound(kind))\n                                 }\n                             }\n                         }\n@@ -353,15 +400,19 @@ impl Validator<'mir, 'tcx> {\n                                 let def = generics.type_param(p, tcx);\n                                 let span = tcx.def_span(def.def_id);\n \n+                                // These are part of the function signature, so treat them like\n+                                // arguments when determining importance.\n+                                let kind = LocalKind::Arg;\n+\n                                 if constness == hir::Constness::Const {\n-                                    self.check_op_spanned(ops::ty::TraitBound, span);\n+                                    self.check_op_spanned(ops::ty::TraitBound(kind), span);\n                                 } else if !tcx.features().const_fn\n                                     || self.ccx.is_const_stable_const_fn()\n                                 {\n                                     // HACK: We shouldn't need the conditional above, but trait\n                                     // bounds on containing impl blocks are wrongly being marked as\n                                     // \"not-const\".\n-                                    self.check_op_spanned(ops::ty::TraitBound, span);\n+                                    self.check_op_spanned(ops::ty::TraitBound(kind), span);\n                                 }\n                             }\n                             // other kinds of bounds are either tautologies\n@@ -877,3 +928,31 @@ fn place_as_reborrow(\n fn is_int_bool_or_char(ty: Ty<'_>) -> bool {\n     ty.is_bool() || ty.is_integral() || ty.is_char()\n }\n+\n+fn is_async_fn(ccx: &ConstCx<'_, '_>) -> bool {\n+    ccx.fn_sig().map_or(false, |sig| sig.header.asyncness == hir::IsAsync::Async)\n+}\n+\n+fn emit_unstable_in_stable_error(ccx: &ConstCx<'_, '_>, span: Span, gate: Symbol) {\n+    let attr_span = ccx.fn_sig().map_or(ccx.body.span, |sig| sig.span.shrink_to_lo());\n+\n+    ccx.tcx\n+        .sess\n+        .struct_span_err(\n+            span,\n+            &format!(\"const-stable function cannot use `#[feature({})]`\", gate.as_str()),\n+        )\n+        .span_suggestion(\n+            attr_span,\n+            \"if it is not part of the public API, make this function unstably const\",\n+            concat!(r#\"#[rustc_const_unstable(feature = \"...\", issue = \"...\")]\"#, '\\n').to_owned(),\n+            Applicability::HasPlaceholders,\n+        )\n+        .span_suggestion(\n+            attr_span,\n+            \"otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\",\n+            format!(\"#[allow_internal_unstable({})]\\n\", gate),\n+            Applicability::MaybeIncorrect,\n+        )\n+        .emit();\n+}"}, {"sha": "68a4d414ff34eb55292b038fbfa2d86d66e1f10c", "filename": "src/test/compile-fail/consts/const-fn-error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-fn-error.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -6,6 +6,8 @@ const fn f(x: usize) -> usize {\n     let mut sum = 0;\n     for i in 0..x {\n         //~^ ERROR mutable references\n+        //~| ERROR calls in constant functions\n+        //~| ERROR calls in constant functions\n         //~| ERROR E0080\n         //~| ERROR E0744\n         sum += i;"}, {"sha": "b3c59734e036f7b0a57b729d99c3cd6f3026cc75", "filename": "src/test/ui/async-await/no-const-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -3,4 +3,3 @@\n \n pub const async fn x() {}\n //~^ ERROR functions cannot be both `const` and `async`\n-//~| ERROR `impl Trait` in const fn is unstable"}, {"sha": "90ec646c8c09cbb6a8e9477fdbb830e8ee313f6e", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -7,15 +7,5 @@ LL | pub const async fn x() {}\n    |     |     `async` because of this\n    |     `const` because of this\n \n-error[E0723]: `impl Trait` in const fn is unstable\n-  --> $DIR/no-const-async.rs:4:24\n-   |\n-LL | pub const async fn x() {}\n-   |                        ^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0723`."}, {"sha": "3d1b5a08227569652484309536d72ce709932b4b", "filename": "src/test/ui/check-static-values-constraints.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -78,7 +78,6 @@ struct MyOwned;\n \n static STATIC11: Box<MyOwned> = box MyOwned;\n //~^ ERROR allocations are not allowed in statics\n-//~| ERROR static contains unimplemented expression type\n \n static mut STATIC12: UnsafeStruct = UnsafeStruct;\n \n@@ -93,28 +92,22 @@ static mut STATIC14: SafeStruct = SafeStruct {\n \n static STATIC15: &'static [Box<MyOwned>] = &[\n     box MyOwned, //~ ERROR allocations are not allowed in statics\n-    //~| ERROR contains unimplemented expression\n     box MyOwned, //~ ERROR allocations are not allowed in statics\n-    //~| ERROR contains unimplemented expression\n ];\n \n static STATIC16: (&'static Box<MyOwned>, &'static Box<MyOwned>) = (\n     &box MyOwned, //~ ERROR allocations are not allowed in statics\n-    //~| ERROR contains unimplemented expression\n     &box MyOwned, //~ ERROR allocations are not allowed in statics\n-    //~| ERROR contains unimplemented expression\n );\n \n static mut STATIC17: SafeEnum = SafeEnum::Variant1;\n \n static STATIC19: Box<isize> =\n     box 3;\n //~^ ERROR allocations are not allowed in statics\n-    //~| ERROR contains unimplemented expression\n \n pub fn main() {\n     let y = { static x: Box<isize> = box 3; x };\n     //~^ ERROR allocations are not allowed in statics\n     //~| ERROR cannot move out of static item\n-    //~| ERROR contains unimplemented expression\n }"}, {"sha": "eb640c88e026f1c487225f5a90aeff19d88350b9", "filename": "src/test/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 10, "deletions": 66, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -15,92 +15,44 @@ error[E0010]: allocations are not allowed in statics\n LL | static STATIC11: Box<MyOwned> = box MyOwned;\n    |                                 ^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:79:37\n-   |\n-LL | static STATIC11: Box<MyOwned> = box MyOwned;\n-   |                                     ^^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/check-static-values-constraints.rs:90:32\n+  --> $DIR/check-static-values-constraints.rs:89:32\n    |\n LL |     field2: SafeEnum::Variant4(\"str\".to_string())\n    |                                ^^^^^^^^^^^^^^^^^\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:95:5\n+  --> $DIR/check-static-values-constraints.rs:94:5\n    |\n LL |     box MyOwned,\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:95:9\n-   |\n-LL |     box MyOwned,\n-   |         ^^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:97:5\n+  --> $DIR/check-static-values-constraints.rs:95:5\n    |\n LL |     box MyOwned,\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:97:9\n-   |\n-LL |     box MyOwned,\n-   |         ^^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:102:6\n+  --> $DIR/check-static-values-constraints.rs:99:6\n    |\n LL |     &box MyOwned,\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:102:10\n-   |\n-LL |     &box MyOwned,\n-   |          ^^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:104:6\n+  --> $DIR/check-static-values-constraints.rs:100:6\n    |\n LL |     &box MyOwned,\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:104:10\n-   |\n-LL |     &box MyOwned,\n-   |          ^^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:111:5\n+  --> $DIR/check-static-values-constraints.rs:106:5\n    |\n LL |     box 3;\n    |     ^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:111:9\n-   |\n-LL |     box 3;\n-   |         ^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n error[E0507]: cannot move out of static item `x`\n-  --> $DIR/check-static-values-constraints.rs:116:45\n+  --> $DIR/check-static-values-constraints.rs:110:45\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             ^\n@@ -109,20 +61,12 @@ LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             help: consider borrowing here: `&x`\n \n error[E0010]: allocations are not allowed in statics\n-  --> $DIR/check-static-values-constraints.rs:116:38\n+  --> $DIR/check-static-values-constraints.rs:110:38\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                      ^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/check-static-values-constraints.rs:116:42\n-   |\n-LL |     let y = { static x: Box<isize> = box 3; x };\n-   |                                          ^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n-error: aborting due to 17 previous errors\n+error: aborting due to 10 previous errors\n \n-Some errors have detailed explanations: E0010, E0015, E0019, E0493, E0507.\n+Some errors have detailed explanations: E0010, E0015, E0493, E0507.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "d11b91edb88578ed0ab10bbc4a528c508b746538", "filename": "src/test/ui/const-suggest-feature.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconst-suggest-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconst-suggest-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-suggest-feature.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -2,8 +2,6 @@ const WRITE: () = unsafe {\n     *std::ptr::null_mut() = 0;\n     //~^ ERROR dereferencing raw pointers in constants is unstable\n     //~| HELP add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n-    //~| ERROR constant contains unimplemented expression type\n-    //~| HELP add `#![feature(const_mut_refs)]` to the crate attributes to enable\n };\n \n fn main() {}"}, {"sha": "1ccc3d754ff00fda191e8aec7b83cf93cb453199", "filename": "src/test/ui/const-suggest-feature.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconst-suggest-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconst-suggest-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-suggest-feature.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -7,15 +7,6 @@ LL |     *std::ptr::null_mut() = 0;\n    = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const-suggest-feature.rs:2:5\n-   |\n-LL |     *std::ptr::null_mut() = 0;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0019, E0658.\n-For more information about an error, try `rustc --explain E0019`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "037c6f9f7e6626dffc461f13cb75d62abcb74332", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -1,7 +1,7 @@\n // New test for #53818: modifying static memory at compile-time is not allowed.\n // The test should never compile successfully\n \n-#![feature(const_raw_ptr_deref)]\n+#![feature(const_raw_ptr_deref, const_mut_refs)]\n \n use std::cell::UnsafeCell;\n \n@@ -13,7 +13,7 @@ unsafe impl Sync for Foo {}\n static FOO: Foo = Foo(UnsafeCell::new(42));\n \n static BAR: () = unsafe {\n-    *FOO.0.get() = 5; //~ ERROR contains unimplemented expression type\n+    *FOO.0.get() = 5; //~ ERROR\n };\n \n fn main() {}"}, {"sha": "296a6bf542163e9909116dd31fc662d4e5b40172", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -1,11 +1,9 @@\n-error[E0019]: static contains unimplemented expression type\n+error[E0080]: could not evaluate static initializer\n   --> $DIR/assign-to-static-within-other-static-2.rs:16:5\n    |\n LL |     *FOO.0.get() = 5;\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |     ^^^^^^^^^^^^^^^^ modifying a static's initial value from another static's initializer\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0019`.\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "481e04694634444e68d126e1026d4f74b9d4f25d", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -12,14 +12,9 @@ unsafe impl Sync for Foo {}\n \n static FOO: Foo = Foo(UnsafeCell::new(42));\n \n-fn foo() {}\n-\n static BAR: () = unsafe {\n     *FOO.0.get() = 5;\n-    //~^ contains unimplemented expression\n-\n-    foo();\n-    //~^ ERROR calls in statics are limited to constant functions, tuple structs and tuple variants\n+    //~^ mutation through a reference\n };\n \n fn main() {"}, {"sha": "38282c0e3005dabec9585d1b226c0241756858b4", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -1,18 +1,12 @@\n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/mod-static-with-const-fn.rs:18:5\n+error[E0658]: mutation through a reference is not allowed in statics\n+  --> $DIR/mod-static-with-const-fn.rs:16:5\n    |\n LL |     *FOO.0.get() = 5;\n    |     ^^^^^^^^^^^^^^^^\n    |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/mod-static-with-const-fn.rs:21:5\n-   |\n-LL |     foo();\n-   |     ^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0015, E0019.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "645a957949c41b1f47cba770ca828b2ba8165458", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -3,6 +3,7 @@\n const extern fn unsize(x: &[u8; 3]) -> &[u8] { x }\n const unsafe extern \"C\" fn closure() -> fn() { || {} }\n //~^ ERROR function pointer\n+//~| ERROR function pointer cast\n const unsafe extern fn use_float() { 1.0 + 1.0; }\n //~^ ERROR floating point arithmetic\n const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }"}, {"sha": "694e2290808701b84f9ca72231dd88addf238ca4", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -7,8 +7,17 @@ LL | const unsafe extern \"C\" fn closure() -> fn() { || {} }\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n+error[E0658]: function pointer casts are not allowed in constant functions\n+  --> $DIR/const-extern-fn-min-const-fn.rs:4:48\n+   |\n+LL | const unsafe extern \"C\" fn closure() -> fn() { || {} }\n+   |                                                ^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n+\n error[E0658]: floating point arithmetic is not allowed in constant functions\n-  --> $DIR/const-extern-fn-min-const-fn.rs:6:38\n+  --> $DIR/const-extern-fn-min-const-fn.rs:7:38\n    |\n LL | const unsafe extern fn use_float() { 1.0 + 1.0; }\n    |                                      ^^^^^^^^^\n@@ -17,14 +26,14 @@ LL | const unsafe extern fn use_float() { 1.0 + 1.0; }\n    = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/const-extern-fn-min-const-fn.rs:8:48\n+  --> $DIR/const-extern-fn-min-const-fn.rs:9:48\n    |\n LL | const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }\n    |                                                ^^^^^^^^^^^^\n    |\n    = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "2fd6e060678e912da2e43bfb4b8daa142d36a6c9", "filename": "src/test/ui/consts/const_let_assign3.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -6,23 +6,21 @@ struct S {\n \n impl S {\n     const fn foo(&mut self, x: u32) {\n-        //~^ ERROR mutable references\n+        //~^ ERROR mutable reference\n         self.state = x;\n     }\n }\n \n const FOO: S = {\n     let mut s = S { state: 42 };\n-    s.foo(3); //~ ERROR mutable references are not allowed in constants\n+    s.foo(3); //~ ERROR mutable reference\n     s\n };\n \n type Array = [u32; {\n     let mut x = 2;\n-    let y = &mut x;\n-//~^ ERROR mutable references are not allowed in constants\n+    let y = &mut x; //~ ERROR mutable reference\n     *y = 42;\n-//~^ ERROR constant contains unimplemented expression type\n     *y\n }];\n "}, {"sha": "dc86e178a42c3cb8affec5b011b3a67b4e01c2a6", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -19,15 +19,7 @@ error[E0764]: mutable references are not allowed in constants\n LL |     let y = &mut x;\n    |             ^^^^^^ `&mut` is only allowed in `const fn`\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/const_let_assign3.rs:24:5\n-   |\n-LL |     *y = 42;\n-   |     ^^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0019, E0658, E0764.\n-For more information about an error, try `rustc --explain E0019`.\n+Some errors have detailed explanations: E0658, E0764.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "b8b755018e61e7cc6dc87f8afa8fef5be3a6ff52", "filename": "src/test/ui/consts/inline_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finline_asm.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -1,6 +1,6 @@\n #![feature(llvm_asm)]\n \n const _: () = unsafe { llvm_asm!(\"nop\") };\n-//~^ ERROR contains unimplemented expression type\n+//~^ ERROR inline assembly\n \n fn main() {}"}, {"sha": "6fb6b69d220ca58538262b310cdc88570803ef1e", "filename": "src/test/ui/consts/inline_asm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finline_asm.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -1,4 +1,4 @@\n-error[E0019]: constant contains unimplemented expression type\n+error[E0015]: inline assembly is not allowed in constants\n   --> $DIR/inline_asm.rs:3:24\n    |\n LL | const _: () = unsafe { llvm_asm!(\"nop\") };\n@@ -8,4 +8,4 @@ LL | const _: () = unsafe { llvm_asm!(\"nop\") };\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0019`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "a08d57b6043d74dccbcd80c7e7924a3b561e0cbc", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -4,11 +4,14 @@ error: const-stable function cannot use `#[feature(const_fn_fn_ptr_basics)]`\n LL | const fn error(_: fn()) {}\n    |                ^\n    |\n-   = note: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n help: if it is not part of the public API, make this function unstably const\n    |\n LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n    |\n+help: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n+   |\n+LL | #[allow_internal_unstable(const_fn_fn_ptr_basics)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "4e1b7bf119c6d4b0398323a45de08b7a7672c2c7", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -1,7 +1,6 @@\n const fn foo(a: i32) -> Vec<i32> {\n     vec![1, 2, 3]\n     //~^ ERROR allocations are not allowed\n-    //~| ERROR unimplemented expression type\n     //~| ERROR calls in constant functions\n }\n "}, {"sha": "23697a8e1181167bf5a1c2773a67944f77c07b0a", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -6,15 +6,6 @@ LL |     vec![1, 2, 3]\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0019]: constant function contains unimplemented expression type\n-  --> $DIR/bad_const_fn_body_ice.rs:2:5\n-   |\n-LL |     vec![1, 2, 3]\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/bad_const_fn_body_ice.rs:2:5\n    |\n@@ -23,7 +14,7 @@ LL |     vec![1, 2, 3]\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0010, E0015, E0019.\n+Some errors have detailed explanations: E0010, E0015.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "b68f47f5cbcf12dd9082ee2faaa1c8e48eb9d26a", "filename": "src/test/ui/consts/min_const_fn/cast_errors.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -3,11 +3,15 @@ fn main() {}\n const fn unsize(x: &[u8; 3]) -> &[u8] { x }\n const fn closure() -> fn() { || {} }\n //~^ ERROR function pointer\n+//~| ERROR function pointer cast\n const fn closure2() {\n     (|| {}) as fn();\n //~^ ERROR function pointer\n }\n const fn reify(f: fn()) -> unsafe fn() { f }\n //~^ ERROR function pointer\n+//~| ERROR function pointer\n+//~| ERROR function pointer cast\n const fn reify2() { main as unsafe fn(); }\n //~^ ERROR function pointer\n+//~| ERROR function pointer cast"}, {"sha": "fb962bdf906c38774efe46658a761f5ba59a787b", "filename": "src/test/ui/consts/min_const_fn/cast_errors.stderr", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -7,33 +7,69 @@ LL | const fn closure() -> fn() { || {} }\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/cast_errors.rs:7:5\n+error[E0658]: function pointer casts are not allowed in constant functions\n+  --> $DIR/cast_errors.rs:4:30\n+   |\n+LL | const fn closure() -> fn() { || {} }\n+   |                              ^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n+\n+error[E0658]: function pointer casts are not allowed in constant functions\n+  --> $DIR/cast_errors.rs:8:5\n    |\n LL |     (|| {}) as fn();\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/cast_errors.rs:10:28\n+  --> $DIR/cast_errors.rs:11:16\n    |\n LL | const fn reify(f: fn()) -> unsafe fn() { f }\n-   |                            ^^^^^^^^^^^\n+   |                ^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/cast_errors.rs:12:21\n+  --> $DIR/cast_errors.rs:11:28\n+   |\n+LL | const fn reify(f: fn()) -> unsafe fn() { f }\n+   |                            ^^^^^^^^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n+\n+error[E0658]: function pointer casts are not allowed in constant functions\n+  --> $DIR/cast_errors.rs:11:42\n+   |\n+LL | const fn reify(f: fn()) -> unsafe fn() { f }\n+   |                                          ^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n+\n+error[E0658]: function pointer casts are not allowed in constant functions\n+  --> $DIR/cast_errors.rs:15:21\n+   |\n+LL | const fn reify2() { main as unsafe fn(); }\n+   |                     ^^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n+\n+error[E0658]: function pointer casts are not allowed in constant functions\n+  --> $DIR/cast_errors.rs:15:21\n    |\n LL | const fn reify2() { main as unsafe fn(); }\n-   |                     ^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "638ff1d8b9c1c6da948d0adb3479047fee9ee202", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -1,5 +1,8 @@\n-const fn cmp(x: fn(), y: fn()) -> bool { //~ ERROR function pointer\n+const fn cmp(x: fn(), y: fn()) -> bool {\n+    //~^ ERROR function pointer\n+    //~| ERROR function pointer\n     unsafe { x == y }\n+    //~^ ERROR pointers cannot be reliably compared\n }\n \n fn main() {}"}, {"sha": "04c2febeb97686fa67991cfea62f179152dae21d", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -7,6 +7,23 @@ LL | const fn cmp(x: fn(), y: fn()) -> bool {\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: function pointers cannot appear in constant functions\n+  --> $DIR/cmp_fn_pointers.rs:1:23\n+   |\n+LL | const fn cmp(x: fn(), y: fn()) -> bool {\n+   |                       ^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n+\n+error: pointers cannot be reliably compared during const eval.\n+  --> $DIR/cmp_fn_pointers.rs:4:14\n+   |\n+LL |     unsafe { x == y }\n+   |              ^^^^^^\n+   |\n+   = note: see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "e46127c36bf6a362e842063e759eb4fe938f2e74", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -38,25 +38,33 @@ impl<T> Foo<T> {\n     const fn get(&self) -> &T { &self.0 }\n     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n     //~^ mutable references\n+    //~| mutable references\n+    //~| mutable references\n }\n impl<'a, T> Foo<T> {\n     const fn new_lt(t: T) -> Self { Foo(t) }\n     const fn into_inner_lt(self) -> T { self.0 } //~ destructors cannot be evaluated\n     const fn get_lt(&'a self) -> &T { &self.0 }\n     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n     //~^ mutable references\n+    //~| mutable references\n+    //~| mutable references\n }\n impl<T: Sized> Foo<T> {\n     const fn new_s(t: T) -> Self { Foo(t) }\n     const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructors\n     const fn get_s(&self) -> &T { &self.0 }\n     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n     //~^ mutable references\n+    //~| mutable references\n+    //~| mutable references\n }\n impl<T: ?Sized> Foo<T> {\n     const fn get_sq(&self) -> &T { &self.0 }\n     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n     //~^ mutable references\n+    //~| mutable references\n+    //~| mutable references\n }\n \n \n@@ -117,17 +125,24 @@ impl<T: Sync + Sized> Foo<T> {\n struct AlanTuring<T>(T);\n const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n //~^ ERROR trait bounds other than `Sized`\n-const fn no_apit(_x: impl std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n-const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {} //~ ERROR trait bounds other than `Sized`\n+//~| ERROR destructor\n+const fn no_apit(_x: impl std::fmt::Debug) {}\n+//~^ ERROR trait bounds other than `Sized`\n+//~| ERROR destructor\n+const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n+//~^ ERROR trait bounds other than `Sized`\n const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n //~^ ERROR trait bounds other than `Sized`\n+//~| ERROR unsizing cast\n+//~| ERROR unsizing cast\n \n const fn no_unsafe() { unsafe {} }\n \n const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n-//~^ ERROR trait bounds other than `Sized`\n+//~^ ERROR unsizing cast\n \n const fn no_fn_ptrs(_x: fn()) {}\n //~^ ERROR function pointer\n const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n //~^ ERROR function pointer\n+//~| ERROR function pointer cast"}, {"sha": "ee5434b147b661c5163189dc1f820650859e5742", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 142, "deletions": 27, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -6,6 +6,15 @@ LL |     const fn into_inner(self) -> T { self.0 }\n    |                         |\n    |                         constant functions cannot evaluate destructors\n \n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:39:22\n+   |\n+LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n+   |                      ^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/min_const_fn.rs:39:36\n    |\n@@ -15,33 +24,69 @@ LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:39:45\n+   |\n+LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n+   |                                             ^^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:44:28\n+  --> $DIR/min_const_fn.rs:46:28\n    |\n LL |     const fn into_inner_lt(self) -> T { self.0 }\n    |                            ^^^^                - value is dropped here\n    |                            |\n    |                            constant functions cannot evaluate destructors\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/min_const_fn.rs:46:42\n+  --> $DIR/min_const_fn.rs:48:25\n+   |\n+LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n+   |                         ^^^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:48:42\n    |\n LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n    |                                          ^^^^^^\n    |\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:48:51\n+   |\n+LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n+   |                                                   ^^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/min_const_fn.rs:51:27\n+  --> $DIR/min_const_fn.rs:55:27\n    |\n LL |     const fn into_inner_s(self) -> T { self.0 }\n    |                           ^^^^                - value is dropped here\n    |                           |\n    |                           constant functions cannot evaluate destructors\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/min_const_fn.rs:53:38\n+  --> $DIR/min_const_fn.rs:57:24\n+   |\n+LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n+   |                        ^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:57:38\n    |\n LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n    |                                      ^^^^^^\n@@ -50,16 +95,43 @@ LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/min_const_fn.rs:58:39\n+  --> $DIR/min_const_fn.rs:57:47\n+   |\n+LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n+   |                                               ^^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:64:25\n+   |\n+LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n+   |                         ^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:64:39\n    |\n LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n    |                                       ^^^^^^\n    |\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n+error[E0658]: mutable references are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:64:48\n+   |\n+LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n+   |                                                ^^^^^^^^^^^\n+   |\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+\n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:76:16\n+  --> $DIR/min_const_fn.rs:84:16\n    |\n LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n    |                ^\n@@ -68,7 +140,7 @@ LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:78:18\n+  --> $DIR/min_const_fn.rs:86:18\n    |\n LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n    |                  ^\n@@ -77,23 +149,23 @@ LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0013]: constant functions cannot refer to statics\n-  --> $DIR/min_const_fn.rs:82:27\n+  --> $DIR/min_const_fn.rs:90:27\n    |\n LL | const fn foo25() -> u32 { BAR }\n    |                           ^^^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0013]: constant functions cannot refer to statics\n-  --> $DIR/min_const_fn.rs:83:37\n+  --> $DIR/min_const_fn.rs:91:37\n    |\n LL | const fn foo26() -> &'static u32 { &BAR }\n    |                                     ^^^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:84:42\n+  --> $DIR/min_const_fn.rs:92:42\n    |\n LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n@@ -102,7 +174,7 @@ LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:86:63\n+  --> $DIR/min_const_fn.rs:94:63\n    |\n LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n@@ -111,7 +183,7 @@ LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:88:42\n+  --> $DIR/min_const_fn.rs:96:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n@@ -120,7 +192,7 @@ LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:90:63\n+  --> $DIR/min_const_fn.rs:98:63\n    |\n LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n@@ -129,7 +201,7 @@ LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/min_const_fn.rs:93:14\n+  --> $DIR/min_const_fn.rs:101:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n@@ -138,7 +210,7 @@ LL | const fn inc(x: &mut i32) { *x += 1 }\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:102:6\n+  --> $DIR/min_const_fn.rs:110:6\n    |\n LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n@@ -147,7 +219,7 @@ LL | impl<T: std::fmt::Debug> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:107:6\n+  --> $DIR/min_const_fn.rs:115:6\n    |\n LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n@@ -156,7 +228,7 @@ LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:112:6\n+  --> $DIR/min_const_fn.rs:120:6\n    |\n LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n@@ -165,25 +237,41 @@ LL | impl<T: Sync + Sized> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:118:34\n+  --> $DIR/min_const_fn.rs:126:34\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/min_const_fn.rs:126:19\n+   |\n+LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n+   |                   ^^                                     - value is dropped here\n+   |                   |\n+   |                   constant functions cannot evaluate destructors\n+\n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:120:22\n+  --> $DIR/min_const_fn.rs:129:22\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n+error[E0493]: destructors cannot be evaluated at compile-time\n+  --> $DIR/min_const_fn.rs:129:18\n+   |\n+LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n+   |                  ^^                         - value is dropped here\n+   |                  |\n+   |                  constant functions cannot evaluate destructors\n+\n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:121:23\n+  --> $DIR/min_const_fn.rs:132:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    |                       ^^\n@@ -192,25 +280,43 @@ LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:122:32\n+  --> $DIR/min_const_fn.rs:134:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:127:41\n+error[E0723]: unsizing casts to types besides slices are not allowed in const fn\n+  --> $DIR/min_const_fn.rs:134:63\n+   |\n+LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n+   |                                                               ^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: unsizing casts to types besides slices are not allowed in const fn\n+  --> $DIR/min_const_fn.rs:134:63\n+   |\n+LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n+   |                                                               ^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+\n+error[E0723]: unsizing casts to types besides slices are not allowed in const fn\n+  --> $DIR/min_const_fn.rs:141:42\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                          ^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/min_const_fn.rs:130:21\n+  --> $DIR/min_const_fn.rs:144:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n@@ -219,15 +325,24 @@ LL | const fn no_fn_ptrs(_x: fn()) {}\n    = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error[E0658]: function pointers cannot appear in constant functions\n-  --> $DIR/min_const_fn.rs:132:27\n+  --> $DIR/min_const_fn.rs:146:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error: aborting due to 26 previous errors\n+error[E0658]: function pointer casts are not allowed in constant functions\n+  --> $DIR/min_const_fn.rs:146:46\n+   |\n+LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n+   |                                              ^^^\n+   |\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n+\n+error: aborting due to 39 previous errors\n \n Some errors have detailed explanations: E0013, E0493, E0658, E0723.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "4a22ef2dffddb004bea682c89b33d43c9746dcfe", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -10,6 +10,6 @@ const fn no_inner_dyn_trait2(x: Hide) {\n //~^ ERROR trait bounds other than `Sized`\n }\n const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n-//~^ ERROR trait bounds other than `Sized`\n+//~^ ERROR unsizing cast\n \n fn main() {}"}, {"sha": "1394db591cadd050523acbb56db21c298538c69e", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -7,7 +7,7 @@ LL |     x.0.field;\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n+error[E0723]: unsizing casts to types besides slices are not allowed in const fn\n   --> $DIR/min_const_fn_dyn.rs:12:66\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }"}, {"sha": "8d82674bbf2d9b0adfdb5dab72c99c8bf9350631", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -7,7 +7,7 @@ LL |     x.0.field;\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n-error[E0658]: function pointers cannot appear in constant functions\n+error[E0658]: function pointer casts are not allowed in constant functions\n   --> $DIR/min_const_fn_fn_ptr.rs:16:59\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasPtr { field }) }"}, {"sha": "de6a9a19269b1f3d18aa239ca6e15cb0d0b89a2d", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -20,11 +20,14 @@ error: const-stable function cannot use `#[feature(const_fn_floating_point_arith\n LL | const fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |                          ^^^^^^^^^^^^^\n    |\n-   = note: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n help: if it is not part of the public API, make this function unstably const\n    |\n LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n    |\n+help: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n+   |\n+LL | #[allow_internal_unstable(const_fn_floating_point_arithmetic)]\n+   |\n \n error: `foo2_gated` is not yet stable as a const fn\n   --> $DIR/min_const_fn_libstd_stability.rs:39:32"}, {"sha": "f258deb12a9d98ec7b66473d7fcedbc346dc9229", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -20,11 +20,14 @@ error: const-stable function cannot use `#[feature(const_fn_floating_point_arith\n LL | const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |                                 ^^^^^^^^^^^^^\n    |\n-   = note: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n help: if it is not part of the public API, make this function unstably const\n    |\n LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n    |\n+help: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n+   |\n+LL | #[allow_internal_unstable(const_fn_floating_point_arithmetic)]\n+   |\n \n error: `foo2_gated` is not yet stable as a const fn\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:39:48"}, {"sha": "8e95a4c68a2ad1c4e2054d50327087ea43dbd193", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -1,17 +1,17 @@\n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/mutable_borrow.rs:3:9\n+  --> $DIR/mutable_borrow.rs:3:13\n    |\n LL |     let b = &mut a;\n-   |         ^\n+   |             ^^^^^^\n    |\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/mutable_borrow.rs:12:13\n+  --> $DIR/mutable_borrow.rs:12:17\n    |\n LL |         let b = &mut a;\n-   |             ^\n+   |                 ^^^^^^\n    |\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable"}, {"sha": "5e2584a6e951a9d831a3257b54b9b9981c49290f", "filename": "src/test/ui/consts/projection_qualif.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -9,7 +9,6 @@ const FOO: &u32 = {\n     {\n         let b: *mut u32 = &mut a; //~ ERROR mutable references are not allowed in constants\n         unsafe { *b = 5; } //~ ERROR dereferencing raw pointers in constants\n-        //[stock]~^ contains unimplemented expression\n     }\n     &{a}\n };"}, {"sha": "fad8f011f75f55ba17f3926d9408a4641f05f4fb", "filename": "src/test/ui/consts/projection_qualif.stock.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fprojection_qualif.stock.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -13,15 +13,7 @@ LL |         unsafe { *b = 5; }\n    = note: see issue #51911 <https://github.com/rust-lang/rust/issues/51911> for more information\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/projection_qualif.rs:11:18\n-   |\n-LL |         unsafe { *b = 5; }\n-   |                  ^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0019, E0658, E0764.\n-For more information about an error, try `rustc --explain E0019`.\n+Some errors have detailed explanations: E0658, E0764.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "2821d1a015435b4a0cbb1a23ee3e12097112085f", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -6,6 +6,5 @@ static mut STDERR_BUFFER_SPACE: u8 = 0;\n \n pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n //~^ ERROR  mutable references are not allowed in statics\n-//[stock]~| ERROR static contains unimplemented expression type\n \n fn main() {}"}, {"sha": "36c280ca5c607bc33c5f1dbb9f00c67b9900ec10", "filename": "src/test/ui/consts/static_mut_containing_mut_ref2.stock.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstatic_mut_containing_mut_ref2.stock.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -4,15 +4,6 @@ error[E0764]: mutable references are not allowed in statics\n LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ `&mut` is only allowed in `const fn`\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/static_mut_containing_mut_ref2.rs:7:45\n-   |\n-LL | pub static mut STDERR_BUFFER: () = unsafe { *(&mut STDERR_BUFFER_SPACE) = 42; };\n-   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0019, E0764.\n-For more information about an error, try `rustc --explain E0019`.\n+For more information about this error, try `rustc --explain E0764`."}, {"sha": "fc5dffb37cfe743dac9c2c65c3301dc94f1ae91d", "filename": "src/test/ui/error-codes/E0010-teach.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -4,6 +4,5 @@\n #![allow(warnings)]\n \n const CON : Box<i32> = box 0; //~ ERROR E0010\n-//~^ ERROR constant contains unimplemented expression type\n \n fn main() {}"}, {"sha": "33de9fd685eb35fdbeb1a5956cd4f1ea0212d993", "filename": "src/test/ui/error-codes/E0010-teach.stderr", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010-teach.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -6,17 +6,6 @@ LL | const CON : Box<i32> = box 0;\n    |\n    = note: The value of statics and constants must be known at compile time, and they live for the entire lifetime of a program. Creating a boxed value allocates memory on the heap at runtime, and therefore cannot be done at compile time.\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/E0010-teach.rs:6:28\n-   |\n-LL | const CON : Box<i32> = box 0;\n-   |                            ^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-   = note: A function call isn't allowed in the const's initialization expression because the expression's value must be known at compile-time.\n-   = note: Remember: you can't use a function call inside a const's initialization expression! However, you can use it anywhere else.\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0010, E0019.\n-For more information about an error, try `rustc --explain E0010`.\n+For more information about this error, try `rustc --explain E0010`."}, {"sha": "e62997640f473e1ee2af953cdfc5a3542d7389be", "filename": "src/test/ui/error-codes/E0010.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -2,6 +2,5 @@\n #![allow(warnings)]\n \n const CON : Box<i32> = box 0; //~ ERROR E0010\n-//~^ ERROR constant contains unimplemented expression type\n \n fn main() {}"}, {"sha": "0042333b98ad1423a84351341ba41bbdcefeaeda", "filename": "src/test/ui/error-codes/E0010.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0010.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -4,15 +4,6 @@ error[E0010]: allocations are not allowed in constants\n LL | const CON : Box<i32> = box 0;\n    |                        ^^^^^ allocation not allowed in constants\n \n-error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/E0010.rs:4:28\n-   |\n-LL | const CON : Box<i32> = box 0;\n-   |                            ^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0010, E0019.\n-For more information about an error, try `rustc --explain E0010`.\n+For more information about this error, try `rustc --explain E0010`."}, {"sha": "262f7bc72c739906486cfb90e531fefe24192bf0", "filename": "src/test/ui/error-codes/E0017.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -5,8 +5,8 @@ static mut M: i32 = 3;\n const CR: &'static mut i32 = &mut C; //~ ERROR E0764\n                                      //~| WARN taking a mutable\n static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0764\n-                                              //~| ERROR E0019\n                                               //~| ERROR cannot borrow\n+\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0764\n                                               //~| WARN taking a mutable\n static STATIC_MUT_REF: &'static mut i32 = unsafe { &mut M }; //~ ERROR E0764"}, {"sha": "ea591587e6daa912f8eb37d43976d70cff782b97", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -19,14 +19,6 @@ error[E0764]: mutable references are not allowed in constants\n LL | const CR: &'static mut i32 = &mut C;\n    |                              ^^^^^^ `&mut` is only allowed in `const fn`\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/E0017.rs:7:39\n-   |\n-LL | static STATIC_REF: &'static mut i32 = &mut X;\n-   |                                       ^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n error[E0764]: mutable references are not allowed in statics\n   --> $DIR/E0017.rs:7:39\n    |\n@@ -65,7 +57,7 @@ error[E0764]: mutable references are not allowed in statics\n LL | static STATIC_MUT_REF: &'static mut i32 = unsafe { &mut M };\n    |                                                    ^^^^^^ `&mut` is only allowed in `const fn`\n \n-error: aborting due to 6 previous errors; 2 warnings emitted\n+error: aborting due to 5 previous errors; 2 warnings emitted\n \n-Some errors have detailed explanations: E0019, E0596, E0764.\n-For more information about an error, try `rustc --explain E0019`.\n+Some errors have detailed explanations: E0596, E0764.\n+For more information about an error, try `rustc --explain E0596`."}, {"sha": "bb0c4979b9ac980faee839c6337887c3b1869a6f", "filename": "src/test/ui/error-codes/E0388.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -3,9 +3,9 @@ const C: i32 = 2;\n \n const CR: &'static mut i32 = &mut C; //~ ERROR E0764\n                                      //~| WARN taking a mutable\n-static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0019\n-                                              //~| ERROR cannot borrow\n+static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR cannot borrow\n                                               //~| ERROR E0764\n+\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0764\n                                              //~| WARN taking a mutable\n "}, {"sha": "73e0b139cd056aa65c3b4c4dec91bd2036b02d01", "filename": "src/test/ui/error-codes/E0388.stderr", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -19,14 +19,6 @@ error[E0764]: mutable references are not allowed in constants\n LL | const CR: &'static mut i32 = &mut C;\n    |                              ^^^^^^ `&mut` is only allowed in `const fn`\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/E0388.rs:6:39\n-   |\n-LL | static STATIC_REF: &'static mut i32 = &mut X;\n-   |                                       ^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n error[E0764]: mutable references are not allowed in statics\n   --> $DIR/E0388.rs:6:39\n    |\n@@ -59,7 +51,7 @@ error[E0764]: mutable references are not allowed in statics\n LL | static CONST_REF: &'static mut i32 = &mut C;\n    |                                      ^^^^^^ `&mut` is only allowed in `const fn`\n \n-error: aborting due to 5 previous errors; 2 warnings emitted\n+error: aborting due to 4 previous errors; 2 warnings emitted\n \n-Some errors have detailed explanations: E0019, E0596, E0764.\n-For more information about an error, try `rustc --explain E0019`.\n+Some errors have detailed explanations: E0596, E0764.\n+For more information about an error, try `rustc --explain E0596`."}, {"sha": "29a1644673d4ec4ae652328f8be7b121251453bd", "filename": "src/test/ui/issues/issue-7364.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -6,6 +6,5 @@ use std::cell::RefCell;\n static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n //~^ ERROR allocations are not allowed in statics\n //~| ERROR `RefCell<isize>` cannot be shared between threads safely [E0277]\n-//~| ERROR static contains unimplemented expression type\n \n fn main() { }"}, {"sha": "8ceb3be7ec913110853456edc191c7e75fcf42ad", "filename": "src/test/ui/issues/issue-7364.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7364.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -4,14 +4,6 @@ error[E0010]: allocations are not allowed in statics\n LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n    |                                     ^^^^^^^^^^^^^^^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/issue-7364.rs:6:41\n-   |\n-LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n-   |                                         ^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n error[E0277]: `RefCell<isize>` cannot be shared between threads safely\n   --> $DIR/issue-7364.rs:6:1\n    |\n@@ -23,7 +15,7 @@ LL | static boxed: Box<RefCell<isize>> = box RefCell::new(0);\n    = note: required because it appears within the type `Box<RefCell<isize>>`\n    = note: shared static variables must have a type that implements `Sync`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0010, E0019, E0277.\n+Some errors have detailed explanations: E0010, E0277.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "c327667f4cdc7344f1ced7f0fbf8ac6c908c7c7f", "filename": "src/test/ui/parser/fn-header-semantic-fail.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -12,7 +12,6 @@ fn main() {\n     extern \"C\" fn ff4() {} // OK.\n     const async unsafe extern \"C\" fn ff5() {} // OK.\n     //~^ ERROR functions cannot be both `const` and `async`\n-    //~| ERROR `from_generator` is not yet stable as a const fn\n \n     trait X {\n         async fn ft1(); //~ ERROR functions in traits cannot be declared `async`\n@@ -35,7 +34,6 @@ fn main() {\n         const async unsafe extern \"C\" fn ft5() {}\n         //~^ ERROR functions in traits cannot be declared `async`\n         //~| ERROR functions in traits cannot be declared const\n-        //~| ERROR `from_generator` is not yet stable as a const fn\n         //~| ERROR method `ft5` has an incompatible type for trait\n         //~| ERROR functions cannot be both `const` and `async`\n     }\n@@ -47,7 +45,6 @@ fn main() {\n         extern \"C\" fn fi4() {} // OK.\n         const async unsafe extern \"C\" fn fi5() {}\n         //~^ ERROR functions cannot be both `const` and `async`\n-        //~| ERROR `from_generator` is not yet stable as a const fn\n     }\n \n     extern {"}, {"sha": "4193b3ee695bcfd8ed1d4aba67057af38c5c9c46", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 20, "deletions": 44, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -8,7 +8,7 @@ LL |     const async unsafe extern \"C\" fn ff5() {} // OK.\n    |     `const` because of this\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:18:9\n+  --> $DIR/fn-header-semantic-fail.rs:17:9\n    |\n LL |         async fn ft1();\n    |         -----^^^^^^^^^^\n@@ -19,19 +19,19 @@ LL |         async fn ft1();\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:20:9\n+  --> $DIR/fn-header-semantic-fail.rs:19:9\n    |\n LL |         const fn ft3();\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:22:9\n+  --> $DIR/fn-header-semantic-fail.rs:21:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:22:9\n+  --> $DIR/fn-header-semantic-fail.rs:21:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -42,7 +42,7 @@ LL |         const async unsafe extern \"C\" fn ft5();\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:22:9\n+  --> $DIR/fn-header-semantic-fail.rs:21:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |         ^^^^^-^^^^^----------------------------\n@@ -51,7 +51,7 @@ LL |         const async unsafe extern \"C\" fn ft5();\n    |         `const` because of this\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:30:9\n+  --> $DIR/fn-header-semantic-fail.rs:29:9\n    |\n LL |         async fn ft1() {}\n    |         -----^^^^^^^^^^^^\n@@ -62,19 +62,19 @@ LL |         async fn ft1() {}\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:33:9\n+  --> $DIR/fn-header-semantic-fail.rs:32:9\n    |\n LL |         const fn ft3() {}\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:35:9\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:35:9\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -85,7 +85,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:35:9\n+  --> $DIR/fn-header-semantic-fail.rs:34:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^-^^^^^------------------------------\n@@ -94,7 +94,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         `const` because of this\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:48:9\n+  --> $DIR/fn-header-semantic-fail.rs:46:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^-^^^^^------------------------------\n@@ -103,7 +103,7 @@ LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         `const` because of this\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:54:18\n+  --> $DIR/fn-header-semantic-fail.rs:51:18\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -113,7 +113,7 @@ LL |         async fn fe1();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:55:19\n+  --> $DIR/fn-header-semantic-fail.rs:52:19\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -124,7 +124,7 @@ LL |         unsafe fn fe2();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:56:18\n+  --> $DIR/fn-header-semantic-fail.rs:53:18\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -135,7 +135,7 @@ LL |         const fn fe3();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:57:23\n+  --> $DIR/fn-header-semantic-fail.rs:54:23\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -146,7 +146,7 @@ LL |         extern \"C\" fn fe4();\n    |         help: remove the qualifiers: `fn`\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:58:42\n+  --> $DIR/fn-header-semantic-fail.rs:55:42\n    |\n LL |     extern {\n    |     ------ in this `extern` block\n@@ -157,24 +157,16 @@ LL |         const async unsafe extern \"C\" fn fe5();\n    |         help: remove the qualifiers: `fn`\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:58:9\n+  --> $DIR/fn-header-semantic-fail.rs:55:9\n    |\n LL |         const async unsafe extern \"C\" fn fe5();\n    |         ^^^^^-^^^^^----------------------------\n    |         |     |\n    |         |     `async` because of this\n    |         `const` because of this\n \n-error: `from_generator` is not yet stable as a const fn\n-  --> $DIR/fn-header-semantic-fail.rs:13:44\n-   |\n-LL |     const async unsafe extern \"C\" fn ff5() {} // OK.\n-   |                                            ^^\n-   |\n-   = help: add `#![feature(gen_future)]` to the crate attributes to enable\n-\n error[E0053]: method `ft1` has an incompatible type for trait\n-  --> $DIR/fn-header-semantic-fail.rs:30:24\n+  --> $DIR/fn-header-semantic-fail.rs:29:24\n    |\n LL |         async fn ft1();\n    |                       - type in trait\n@@ -189,7 +181,7 @@ LL |         async fn ft1() {}\n               found fn pointer `fn() -> impl Future`\n \n error[E0053]: method `ft5` has an incompatible type for trait\n-  --> $DIR/fn-header-semantic-fail.rs:35:48\n+  --> $DIR/fn-header-semantic-fail.rs:34:48\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |                                               - type in trait\n@@ -203,23 +195,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    = note: expected fn pointer `unsafe extern \"C\" fn()`\n               found fn pointer `unsafe extern \"C\" fn() -> impl Future`\n \n-error: `from_generator` is not yet stable as a const fn\n-  --> $DIR/fn-header-semantic-fail.rs:35:48\n-   |\n-LL |         const async unsafe extern \"C\" fn ft5() {}\n-   |                                                ^^\n-   |\n-   = help: add `#![feature(gen_future)]` to the crate attributes to enable\n-\n-error: `from_generator` is not yet stable as a const fn\n-  --> $DIR/fn-header-semantic-fail.rs:48:48\n-   |\n-LL |         const async unsafe extern \"C\" fn fi5() {}\n-   |                                                ^^\n-   |\n-   = help: add `#![feature(gen_future)]` to the crate attributes to enable\n-\n-error: aborting due to 23 previous errors\n+error: aborting due to 20 previous errors\n \n Some errors have detailed explanations: E0053, E0379, E0706.\n For more information about an error, try `rustc --explain E0053`."}, {"sha": "2091fffd418ee68c3b315e16f01b5fbb0af6954b", "filename": "src/test/ui/static/static-mut-not-constant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.rs?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -2,6 +2,5 @@\n \n static mut a: Box<isize> = box 3;\n //~^ ERROR allocations are not allowed in statics\n-//~| ERROR static contains unimplemented expression type\n \n fn main() {}"}, {"sha": "a0fa245156f877e369cdaad136af48ff131bda5e", "filename": "src/test/ui/static/static-mut-not-constant.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-not-constant.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -4,15 +4,6 @@ error[E0010]: allocations are not allowed in statics\n LL | static mut a: Box<isize> = box 3;\n    |                            ^^^^^ allocation not allowed in statics\n \n-error[E0019]: static contains unimplemented expression type\n-  --> $DIR/static-mut-not-constant.rs:3:32\n-   |\n-LL | static mut a: Box<isize> = box 3;\n-   |                                ^\n-   |\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0010, E0019.\n-For more information about an error, try `rustc --explain E0010`.\n+For more information about this error, try `rustc --explain E0010`."}, {"sha": "5ce4296458e6d7ff273564f547da672d6c48223a", "filename": "src/test/ui/unsafe/ranged_ints2_const.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc42fb8e70af6ad63998f4bfbf62451551eda073/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr?ref=fc42fb8e70af6ad63998f4bfbf62451551eda073", "patch": "@@ -1,17 +1,17 @@\n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/ranged_ints2_const.rs:11:9\n+  --> $DIR/ranged_ints2_const.rs:11:13\n    |\n LL |     let y = &mut x.0;\n-   |         ^\n+   |             ^^^^^^^^\n    |\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/ranged_ints2_const.rs:18:9\n+  --> $DIR/ranged_ints2_const.rs:18:22\n    |\n LL |     let y = unsafe { &mut x.0 };\n-   |         ^\n+   |                      ^^^^^^^^\n    |\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable"}]}