{"sha": "23b8567a78bd3899dd963e83ed2d698c044c877f", "node_id": "C_kwDOAAsO6NoAKDIzYjg1NjdhNzhiZDM4OTlkZDk2M2U4M2VkMmQ2OThjMDQ0Yzg3N2Y", "commit": {"author": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-03-03T14:49:51Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-04-04T15:34:50Z"}, "message": "Migrate SuggestBoxingForReturnImplTrait, Fix typo in infer_fn_consider_casting", "tree": {"sha": "7b71b559b985d5c44df2d5ea26504a6b40ddaf12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b71b559b985d5c44df2d5ea26504a6b40ddaf12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23b8567a78bd3899dd963e83ed2d698c044c877f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23b8567a78bd3899dd963e83ed2d698c044c877f", "html_url": "https://github.com/rust-lang/rust/commit/23b8567a78bd3899dd963e83ed2d698c044c877f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23b8567a78bd3899dd963e83ed2d698c044c877f/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1", "html_url": "https://github.com/rust-lang/rust/commit/d56b304bc8bd603d5f4298793f33f1cbb6c9d0d1"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "2534c1cbdab50ef693658bb9d9b48bd952b3f9ef", "filename": "compiler/rustc_infer/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23b8567a78bd3899dd963e83ed2d698c044c877f/compiler%2Frustc_infer%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/23b8567a78bd3899dd963e83ed2d698c044c877f/compiler%2Frustc_infer%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fmessages.ftl?ref=23b8567a78bd3899dd963e83ed2d698c044c877f", "patch": "@@ -362,3 +362,6 @@ infer_sarwa_option = you can convert from `&Option<T>` to `Option<&T>` using `.a\n infer_sarwa_result = you can convert from `&Result<T, E>` to `Result<&T, &E>` using `.as_ref()`\n \n infer_suggest_accessing_field = you might have meant to use field `{$name}` whose type is `{$ty}`\n+\n+infer_sbfrit_change_return_type = you could change the return type to be a boxed trait object\n+infer_sbfrit_box_return_expr = if you change the return type to expect trait objects, box the returned expressions\n\\ No newline at end of file"}, {"sha": "5d72ad6fa055e9d838b0ef9d3c6681b0a16f1445", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/23b8567a78bd3899dd963e83ed2d698c044c877f/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b8567a78bd3899dd963e83ed2d698c044c877f/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=23b8567a78bd3899dd963e83ed2d698c044c877f", "patch": "@@ -1261,7 +1261,7 @@ pub struct FnItemsAreDistinct;\n pub struct FnUniqTypes;\n \n #[derive(Subdiagnostic)]\n-#[help(infer_fn_uniq_types)]\n+#[help(infer_fn_consider_casting)]\n pub struct FnConsiderCasting {\n     pub casting: String,\n }\n@@ -1317,3 +1317,21 @@ pub enum SuggestAccessingField<'a> {\n         ty: Ty<'a>,\n     },\n }\n+\n+#[derive(Subdiagnostic)]\n+pub enum SuggestBoxingForReturnImplTrait {\n+    #[multipart_suggestion(infer_sbfrit_change_return_type, applicability = \"maybe-incorrect\")]\n+    ChangeReturnType {\n+        #[suggestion_part(code = \"Box<dyn\")]\n+        start_sp: Span,\n+        #[suggestion_part(code = \">\")]\n+        end_sp: Span,\n+    },\n+    #[multipart_suggestion(infer_sbfrit_box_return_expr, applicability = \"maybe-incorrect\")]\n+    BoxReturnExpr {\n+        #[suggestion_part(code = \"Box::new(\")]\n+        starts: Vec<Span>,\n+        #[suggestion_part(code = \")\")]\n+        ends: Vec<Span>,\n+    },\n+}"}, {"sha": "82ee365f3a0960e84bdb980d3892bf0965c1a147", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/23b8567a78bd3899dd963e83ed2d698c044c877f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b8567a78bd3899dd963e83ed2d698c044c877f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=23b8567a78bd3899dd963e83ed2d698c044c877f", "patch": "@@ -15,7 +15,8 @@ use rustc_target::abi::FieldIdx;\n use crate::errors::{\n     ConsiderAddingAwait, DiagArg, FnConsiderCasting, FnItemsAreDistinct, FnUniqTypes,\n     FunctionPointerSuggestion, SuggAddLetForLetChains, SuggestAccessingField,\n-    SuggestAsRefWhereAppropriate, SuggestRemoveSemiOrReturnBinding,\n+    SuggestAsRefWhereAppropriate, SuggestBoxingForReturnImplTrait,\n+    SuggestRemoveSemiOrReturnBinding,\n };\n \n use super::TypeErrCtxt;\n@@ -80,25 +81,20 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         return_sp: Span,\n         arm_spans: impl Iterator<Item = Span>,\n     ) {\n-        err.multipart_suggestion(\n-            \"you could change the return type to be a boxed trait object\",\n-            vec![\n-                (return_sp.with_hi(return_sp.lo() + BytePos(4)), \"Box<dyn\".to_string()),\n-                (return_sp.shrink_to_hi(), \">\".to_string()),\n-            ],\n-            Applicability::MaybeIncorrect,\n-        );\n-        let sugg = arm_spans\n-            .flat_map(|sp| {\n-                [(sp.shrink_to_lo(), \"Box::new(\".to_string()), (sp.shrink_to_hi(), \")\".to_string())]\n-                    .into_iter()\n-            })\n-            .collect::<Vec<_>>();\n-        err.multipart_suggestion(\n-            \"if you change the return type to expect trait objects, box the returned expressions\",\n-            sugg,\n-            Applicability::MaybeIncorrect,\n-        );\n+        let sugg = SuggestBoxingForReturnImplTrait::ChangeReturnType {\n+            start_sp: return_sp.with_hi(return_sp.lo() + BytePos(4)),\n+            end_sp: return_sp.shrink_to_hi(),\n+        };\n+        err.subdiagnostic(sugg);\n+\n+        let mut starts = Vec::new();\n+        let mut ends = Vec::new();\n+        for span in arm_spans {\n+            starts.push(span.shrink_to_lo());\n+            ends.push(span.shrink_to_hi());\n+        }\n+        let sugg = SuggestBoxingForReturnImplTrait::BoxReturnExpr { starts, ends };\n+        err.subdiagnostic(sugg);\n     }\n \n     pub(super) fn suggest_tuple_pattern("}]}