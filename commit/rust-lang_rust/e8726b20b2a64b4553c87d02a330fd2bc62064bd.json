{"sha": "e8726b20b2a64b4553c87d02a330fd2bc62064bd", "node_id": "C_kwDOAAsO6NoAKGU4NzI2YjIwYjJhNjRiNDU1M2M4N2QwMmEzMzBmZDJiYzYyMDY0YmQ", "commit": {"author": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-04-23T19:34:42Z"}, "committer": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-04-23T19:34:42Z"}, "message": "also check for rest pat in `redundant_pattern_matching`", "tree": {"sha": "3e489974bcdf9e8ddecb3afbebe5b399f9f66b37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e489974bcdf9e8ddecb3afbebe5b399f9f66b37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8726b20b2a64b4553c87d02a330fd2bc62064bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8726b20b2a64b4553c87d02a330fd2bc62064bd", "html_url": "https://github.com/rust-lang/rust/commit/e8726b20b2a64b4553c87d02a330fd2bc62064bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8726b20b2a64b4553c87d02a330fd2bc62064bd/comments", "author": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a870aef1a0a599378eefb5253be479b82c1cc8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a870aef1a0a599378eefb5253be479b82c1cc8d", "html_url": "https://github.com/rust-lang/rust/commit/7a870aef1a0a599378eefb5253be479b82c1cc8d"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "924a361c0f6a8801bad390ef18906ca6482e582b", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8726b20b2a64b4553c87d02a330fd2bc62064bd/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8726b20b2a64b4553c87d02a330fd2bc62064bd/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=e8726b20b2a64b4553c87d02a330fd2bc62064bd", "patch": "@@ -170,7 +170,7 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n                         return;\n                     }\n                     // Index is a constant uint.\n-                    if let Some(..) = constant(cx, cx.typeck_results(), index) {\n+                    if constant(cx, cx.typeck_results(), index).is_some() {\n                         // Let rustc's `const_err` lint handle constant `usize` indexing on arrays.\n                         return;\n                     }"}, {"sha": "af121f317cd187d966d2973da91284ba23d425bb", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e8726b20b2a64b4553c87d02a330fd2bc62064bd/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8726b20b2a64b4553c87d02a330fd2bc62064bd/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=e8726b20b2a64b4553c87d02a330fd2bc62064bd", "patch": "@@ -63,8 +63,11 @@ fn find_sugg_for_if_let<'tcx>(\n     // Determine which function should be used, and the type contained by the corresponding\n     // variant.\n     let (good_method, inner_ty) = match check_pat.kind {\n-        PatKind::TupleStruct(ref qpath, [sub_pat], _) => {\n-            if let PatKind::Wild = sub_pat.kind {\n+        PatKind::TupleStruct(ref qpath, args, rest) => {\n+            let is_wildcard = matches!(args.first().map(|p| &p.kind), Some(PatKind::Wild));\n+            let is_rest = matches!((args, rest.as_opt_usize()), ([], Some(_)));\n+\n+            if is_wildcard || is_rest {\n                 let res = cx.typeck_results().qpath_res(qpath, check_pat.hir_id);\n                 let Some(id) = res.opt_def_id().map(|ctor_id| cx.tcx.parent(ctor_id)) else { return };\n                 let lang_items = cx.tcx.lang_items();"}, {"sha": "d62f7d26a35ccfeee7e723bf545ed68e2ef604e1", "filename": "tests/ui/redundant_pattern_matching_option.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8726b20b2a64b4553c87d02a330fd2bc62064bd/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e8726b20b2a64b4553c87d02a330fd2bc62064bd/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.fixed?ref=e8726b20b2a64b4553c87d02a330fd2bc62064bd", "patch": "@@ -54,6 +54,8 @@ fn main() {\n     } else {\n         3\n     };\n+\n+    if gen_opt().is_some() {}\n }\n \n fn gen_opt() -> Option<()> {"}, {"sha": "d64294265731bbc225fac437313bdd30160b5ad4", "filename": "tests/ui/redundant_pattern_matching_option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8726b20b2a64b4553c87d02a330fd2bc62064bd/tests%2Fui%2Fredundant_pattern_matching_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8726b20b2a64b4553c87d02a330fd2bc62064bd/tests%2Fui%2Fredundant_pattern_matching_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.rs?ref=e8726b20b2a64b4553c87d02a330fd2bc62064bd", "patch": "@@ -63,6 +63,8 @@ fn main() {\n     } else {\n         3\n     };\n+\n+    if let Some(..) = gen_opt() {}\n }\n \n fn gen_opt() -> Option<()> {"}, {"sha": "7c5a047e455cf4f7a919bb9b6285d3fdac96e7f6", "filename": "tests/ui/redundant_pattern_matching_option.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e8726b20b2a64b4553c87d02a330fd2bc62064bd/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8726b20b2a64b4553c87d02a330fd2bc62064bd/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.stderr?ref=e8726b20b2a64b4553c87d02a330fd2bc62064bd", "patch": "@@ -89,31 +89,37 @@ LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:80:12\n+  --> $DIR/redundant_pattern_matching_option.rs:67:12\n+   |\n+LL |     if let Some(..) = gen_opt() {}\n+   |     -------^^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:82:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:82:12\n+  --> $DIR/redundant_pattern_matching_option.rs:84:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:84:15\n+  --> $DIR/redundant_pattern_matching_option.rs:86:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:86:15\n+  --> $DIR/redundant_pattern_matching_option.rs:88:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:88:5\n+  --> $DIR/redundant_pattern_matching_option.rs:90:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -122,7 +128,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:93:5\n+  --> $DIR/redundant_pattern_matching_option.rs:95:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -131,16 +137,16 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:101:12\n+  --> $DIR/redundant_pattern_matching_option.rs:103:12\n    |\n LL |     if let None = *(&None::<()>) {}\n    |     -------^^^^----------------- help: try this: `if (&None::<()>).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:102:12\n+  --> $DIR/redundant_pattern_matching_option.rs:104:12\n    |\n LL |     if let None = *&None::<()> {}\n    |     -------^^^^--------------- help: try this: `if (&None::<()>).is_none()`\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 22 previous errors\n "}]}