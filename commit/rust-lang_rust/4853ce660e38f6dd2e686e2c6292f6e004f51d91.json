{"sha": "4853ce660e38f6dd2e686e2c6292f6e004f51d91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NTNjZTY2MGUzOGY2ZGQyZTY4NmUyYzYyOTJmNmUwMDRmNTFkOTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-10T14:27:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-10T14:35:47Z"}, "message": "it is okay not to use into_inner", "tree": {"sha": "f3d67ccd558899cdb8e447063b374547b8215dac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3d67ccd558899cdb8e447063b374547b8215dac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4853ce660e38f6dd2e686e2c6292f6e004f51d91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4853ce660e38f6dd2e686e2c6292f6e004f51d91", "html_url": "https://github.com/rust-lang/rust/commit/4853ce660e38f6dd2e686e2c6292f6e004f51d91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4853ce660e38f6dd2e686e2c6292f6e004f51d91/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3eede6870c817e2e22782ad08d31fcaa8c6b640", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3eede6870c817e2e22782ad08d31fcaa8c6b640", "html_url": "https://github.com/rust-lang/rust/commit/f3eede6870c817e2e22782ad08d31fcaa8c6b640"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "3e081b4f0a46af39c0cf0a941e7cd4c8a2a26dbe", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4853ce660e38f6dd2e686e2c6292f6e004f51d91/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4853ce660e38f6dd2e686e2c6292f6e004f51d91/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=4853ce660e38f6dd2e686e2c6292f6e004f51d91", "patch": "@@ -1147,6 +1147,7 @@ impl<T> MaybeUninit<T> {\n     /// Deprecated alternative to `into_initialized`.  Will never get stabilized.\n     /// Exists only to transition stdsimd to `into_initialized`.\n     #[inline(always)]\n+    #[allow(unused)]\n     pub(crate) unsafe fn into_inner(self) -> T {\n         self.into_initialized()\n     }"}]}