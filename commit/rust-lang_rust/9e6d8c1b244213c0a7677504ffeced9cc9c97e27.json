{"sha": "9e6d8c1b244213c0a7677504ffeced9cc9c97e27", "node_id": "C_kwDOAAsO6NoAKDllNmQ4YzFiMjQ0MjEzYzBhNzY3NzUwNGZmZWNlZDljYzljOTdlMjc", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T16:22:23Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T16:22:23Z"}, "message": "Remove the call_intrinsic_match macro", "tree": {"sha": "c6848e21bf0e77b88ffefc495c1097aaaba7469a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6848e21bf0e77b88ffefc495c1097aaaba7469a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e6d8c1b244213c0a7677504ffeced9cc9c97e27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6d8c1b244213c0a7677504ffeced9cc9c97e27", "html_url": "https://github.com/rust-lang/rust/commit/9e6d8c1b244213c0a7677504ffeced9cc9c97e27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e6d8c1b244213c0a7677504ffeced9cc9c97e27/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baad993daead9ddc127dd897035f6616f4e367f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/baad993daead9ddc127dd897035f6616f4e367f6", "html_url": "https://github.com/rust-lang/rust/commit/baad993daead9ddc127dd897035f6616f4e367f6"}], "stats": {"total": 136, "additions": 59, "deletions": 77}, "files": [{"sha": "bd6ef41ef66c048adaa26b102380d213cd991da6", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 59, "deletions": 77, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/9e6d8c1b244213c0a7677504ffeced9cc9c97e27/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6d8c1b244213c0a7677504ffeced9cc9c97e27/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=9e6d8c1b244213c0a7677504ffeced9cc9c97e27", "patch": "@@ -412,87 +412,69 @@ fn codegen_float_intrinsic_call<'tcx>(\n     args: &[mir::Operand<'tcx>],\n     ret: CPlace<'tcx>,\n ) -> bool {\n-    macro call_intrinsic_match {\n-        ($fx:expr, $intrinsic:expr, $ret:expr, $args:expr, $(\n-            $name:ident($arg_count:literal) -> $ty:ident => $func:ident,\n-        )*) => {\n-            let (name, arg_count, ty) = match $intrinsic {\n-                $(\n-                    sym::$name => (stringify!($func), $arg_count, $fx.tcx.types.$ty),\n-                )*\n-                _ => return false,\n-            };\n-\n-            if $args.len() != arg_count {\n-                bug!(\"wrong number of args for intrinsic {:?}\", $intrinsic);\n-            }\n-\n-            let (a, b, c);\n-            let args = match $args {\n-                [x] => {\n-                    a = [codegen_operand($fx, x)];\n-                    &a as &[_]\n-                }\n-                [x, y] => {\n-                    b = [codegen_operand($fx, x), codegen_operand($fx, y)];\n-                    &b\n-                }\n-                [x, y, z] => {\n-                    c = [codegen_operand($fx, x), codegen_operand($fx, y), codegen_operand($fx, z)];\n-                    &c\n-                }\n-                _ => unreachable!(),\n-            };\n+    let (name, arg_count, ty) = match intrinsic {\n+        sym::expf32 => (\"expf\", 1, fx.tcx.types.f32),\n+        sym::expf64 => (\"exp\", 1, fx.tcx.types.f64),\n+        sym::exp2f32 => (\"exp2f\", 1, fx.tcx.types.f32),\n+        sym::exp2f64 => (\"exp2\", 1, fx.tcx.types.f64),\n+        sym::sqrtf32 => (\"sqrtf\", 1, fx.tcx.types.f32),\n+        sym::sqrtf64 => (\"sqrt\", 1, fx.tcx.types.f64),\n+        sym::powif32 => (\"__powisf2\", 2, fx.tcx.types.f32), // compiler-builtins\n+        sym::powif64 => (\"__powidf2\", 2, fx.tcx.types.f64), // compiler-builtins\n+        sym::powf32 => (\"powf\", 2, fx.tcx.types.f32),\n+        sym::powf64 => (\"pow\", 2, fx.tcx.types.f64),\n+        sym::logf32 => (\"logf\", 1, fx.tcx.types.f32),\n+        sym::logf64 => (\"log\", 1, fx.tcx.types.f64),\n+        sym::log2f32 => (\"log2f\", 1, fx.tcx.types.f32),\n+        sym::log2f64 => (\"log2\", 1, fx.tcx.types.f64),\n+        sym::log10f32 => (\"log10f\", 1, fx.tcx.types.f32),\n+        sym::log10f64 => (\"log10\", 1, fx.tcx.types.f64),\n+        sym::fabsf32 => (\"fabsf\", 1, fx.tcx.types.f32),\n+        sym::fabsf64 => (\"fabs\", 1, fx.tcx.types.f64),\n+        sym::fmaf32 => (\"fmaf\", 3, fx.tcx.types.f32),\n+        sym::fmaf64 => (\"fma\", 3, fx.tcx.types.f64),\n+        sym::copysignf32 => (\"copysignf\", 2, fx.tcx.types.f32),\n+        sym::copysignf64 => (\"copysign\", 2, fx.tcx.types.f64),\n+        sym::floorf32 => (\"floorf\", 1, fx.tcx.types.f32),\n+        sym::floorf64 => (\"floor\", 1, fx.tcx.types.f64),\n+        sym::ceilf32 => (\"ceilf\", 1, fx.tcx.types.f32),\n+        sym::ceilf64 => (\"ceil\", 1, fx.tcx.types.f64),\n+        sym::truncf32 => (\"truncf\", 1, fx.tcx.types.f32),\n+        sym::truncf64 => (\"trunc\", 1, fx.tcx.types.f64),\n+        sym::roundf32 => (\"roundf\", 1, fx.tcx.types.f32),\n+        sym::roundf64 => (\"round\", 1, fx.tcx.types.f64),\n+        sym::sinf32 => (\"sinf\", 1, fx.tcx.types.f32),\n+        sym::sinf64 => (\"sin\", 1, fx.tcx.types.f64),\n+        sym::cosf32 => (\"cosf\", 1, fx.tcx.types.f32),\n+        sym::cosf64 => (\"cos\", 1, fx.tcx.types.f64),\n+        _ => return false,\n+    };\n \n-            let res = $fx.easy_call(name, &args, ty);\n-            $ret.write_cvalue($fx, res);\n+    if args.len() != arg_count {\n+        bug!(\"wrong number of args for intrinsic {:?}\", intrinsic);\n+    }\n \n-            true\n+    let (a, b, c);\n+    let args = match args {\n+        [x] => {\n+            a = [codegen_operand(fx, x)];\n+            &a as &[_]\n         }\n-    }\n+        [x, y] => {\n+            b = [codegen_operand(fx, x), codegen_operand(fx, y)];\n+            &b\n+        }\n+        [x, y, z] => {\n+            c = [codegen_operand(fx, x), codegen_operand(fx, y), codegen_operand(fx, z)];\n+            &c\n+        }\n+        _ => unreachable!(),\n+    };\n \n-    call_intrinsic_match! {\n-        fx, intrinsic, ret, args,\n-        expf32(1) -> f32 => expf,\n-        expf64(1) -> f64 => exp,\n-        exp2f32(1) -> f32 => exp2f,\n-        exp2f64(1) -> f64 => exp2,\n-        sqrtf32(1) -> f32 => sqrtf,\n-        sqrtf64(1) -> f64 => sqrt,\n-        powif32(2) -> f32 => __powisf2, // compiler-builtins\n-        powif64(2) -> f64 => __powidf2, // compiler-builtins\n-        powf32(2) -> f32 => powf,\n-        powf64(2) -> f64 => pow,\n-        logf32(1) -> f32 => logf,\n-        logf64(1) -> f64 => log,\n-        log2f32(1) -> f32 => log2f,\n-        log2f64(1) -> f64 => log2,\n-        log10f32(1) -> f32 => log10f,\n-        log10f64(1) -> f64 => log10,\n-        fabsf32(1) -> f32 => fabsf,\n-        fabsf64(1) -> f64 => fabs,\n-        fmaf32(3) -> f32 => fmaf,\n-        fmaf64(3) -> f64 => fma,\n-        copysignf32(2) -> f32 => copysignf,\n-        copysignf64(2) -> f64 => copysign,\n-\n-        // rounding variants\n-        // FIXME use clif insts\n-        floorf32(1) -> f32 => floorf,\n-        floorf64(1) -> f64 => floor,\n-        ceilf32(1) -> f32 => ceilf,\n-        ceilf64(1) -> f64 => ceil,\n-        truncf32(1) -> f32 => truncf,\n-        truncf64(1) -> f64 => trunc,\n-        roundf32(1) -> f32 => roundf,\n-        roundf64(1) -> f64 => round,\n-\n-        // trigonometry\n-        sinf32(1) -> f32 => sinf,\n-        sinf64(1) -> f64 => sin,\n-        cosf32(1) -> f32 => cosf,\n-        cosf64(1) -> f64 => cos,\n-    }\n+    let res = fx.easy_call(name, &args, ty);\n+    ret.write_cvalue(fx, res);\n+\n+    true\n }\n \n fn codegen_regular_intrinsic_call<'tcx>("}]}