{"sha": "6fefcee73a5dfee20281396e0f1418ceda81776b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZWZjZWU3M2E1ZGZlZTIwMjgxMzk2ZTBmMTQxOGNlZGE4MTc3NmI=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-01-05T19:17:51Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-01-06T06:27:33Z"}, "message": "use utf-8 throughout htmldocck\n\nThis commit improves compatibility with Python 3, which already uses\nUnicode throughout.\n\nIt also fixes a subtle incompatibility stemming from the use of\n`entitydefs`, which contains replacement text _encoded in latin-1_ for\nHTML entities. When using Python 3, this would cause `0xa0` to be\nincorrectly added to the element tree.\n\nThis meant that there was a rustdoc test that would pass under Python 2\nbut fail under Python 3, due to an incorrect regex match against the\nnon-breaking space character. This commit triggers that failure in both\nversions, and also fixes it.", "tree": {"sha": "67f89e609c06fbb15c0c68271cb550be1843aabf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67f89e609c06fbb15c0c68271cb550be1843aabf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fefcee73a5dfee20281396e0f1418ceda81776b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlwxn+8WHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdPUHCACJFgvzJuulNLDg+Gp85P3tNOqV\nasqBrAMKOHjgj6Fc8HbDKrHRDWsiEq2y9keLr+D1eUP40xrlzSBeJEb80VPe2fgE\nkJfPdJe45DWEr4sr4ZJZy0wkjeTUAmUQu6LHURJJ0WpZMCVwIDQnTpDlKR+Ibkx1\nPXrCRv4e+v8iEcOEgvqXIOI+S/9n/6CJOyaDr138ZjZPmkt751Tzbrm+mUSrf6hT\nzQ9FI9ab5QSUc9+qkgFiyEXTjGKAAxuuEFyqAwWAQvjPPHFKpjZ45Cf2cm7SFFdc\ndEo0fFFFis1P1SbLTacDysEGS2oJQtuOuCQDKJdaPeva+l93mhA1m5z4Xj5f\n=PJx3\n-----END PGP SIGNATURE-----", "payload": "tree 67f89e609c06fbb15c0c68271cb550be1843aabf\nparent 68614265d312fc2cbe8a696f7dabb9416eb6f221\nauthor Andy Russell <arussell123@gmail.com> 1546715871 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1546756053 -0500\n\nuse utf-8 throughout htmldocck\n\nThis commit improves compatibility with Python 3, which already uses\nUnicode throughout.\n\nIt also fixes a subtle incompatibility stemming from the use of\n`entitydefs`, which contains replacement text _encoded in latin-1_ for\nHTML entities. When using Python 3, this would cause `0xa0` to be\nincorrectly added to the element tree.\n\nThis meant that there was a rustdoc test that would pass under Python 2\nbut fail under Python 3, due to an incorrect regex match against the\nnon-breaking space character. This commit triggers that failure in both\nversions, and also fixes it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fefcee73a5dfee20281396e0f1418ceda81776b", "html_url": "https://github.com/rust-lang/rust/commit/6fefcee73a5dfee20281396e0f1418ceda81776b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fefcee73a5dfee20281396e0f1418ceda81776b/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68614265d312fc2cbe8a696f7dabb9416eb6f221", "url": "https://api.github.com/repos/rust-lang/rust/commits/68614265d312fc2cbe8a696f7dabb9416eb6f221", "html_url": "https://github.com/rust-lang/rust/commit/68614265d312fc2cbe8a696f7dabb9416eb6f221"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "e8be2b9b53710461734468252c8b1b9e4610e57c", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6fefcee73a5dfee20281396e0f1418ceda81776b/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/6fefcee73a5dfee20281396e0f1418ceda81776b/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=6fefcee73a5dfee20281396e0f1418ceda81776b", "patch": "@@ -1,3 +1,6 @@\n+#!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n+\n r\"\"\"\n htmldocck.py is a custom checker script for Rustdoc HTML outputs.\n \n@@ -98,7 +101,10 @@\n \n \"\"\"\n \n-from __future__ import print_function\n+from __future__ import absolute_import, print_function, unicode_literals\n+\n+import codecs\n+import io\n import sys\n import os.path\n import re\n@@ -110,14 +116,10 @@\n     from HTMLParser import HTMLParser\n from xml.etree import cElementTree as ET\n \n-# &larrb;/&rarrb; are not in HTML 4 but are in HTML 5\n try:\n-    from html.entities import entitydefs\n+    from html.entities import name2codepoint\n except ImportError:\n-    from htmlentitydefs import entitydefs\n-entitydefs['larrb'] = u'\\u21e4'\n-entitydefs['rarrb'] = u'\\u21e5'\n-entitydefs['nbsp'] = ' '\n+    from htmlentitydefs import name2codepoint\n \n # \"void elements\" (no closing tag) from the HTML Standard section 12.1.2\n VOID_ELEMENTS = set(['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',\n@@ -157,11 +159,11 @@ def handle_data(self, data):\n         self.__builder.data(data)\n \n     def handle_entityref(self, name):\n-        self.__builder.data(entitydefs[name])\n+        self.__builder.data(unichr(name2codepoint[name]))\n \n     def handle_charref(self, name):\n         code = int(name[1:], 16) if name.startswith(('x', 'X')) else int(name, 10)\n-        self.__builder.data(unichr(code).encode('utf-8'))\n+        self.__builder.data(unichr(code))\n \n     def close(self):\n         HTMLParser.close(self)\n@@ -210,11 +212,11 @@ def concat_multi_lines(f):\n     (?<=(?<!\\S)@)(?P<negated>!?)\n     (?P<cmd>[A-Za-z]+(?:-[A-Za-z]+)*)\n     (?P<args>.*)$\n-''', re.X)\n+''', re.X | re.UNICODE)\n \n \n def get_commands(template):\n-    with open(template, 'rU') as f:\n+    with io.open(template, encoding='utf-8') as f:\n         for lineno, line in concat_multi_lines(f):\n             m = LINE_PATTERN.search(line)\n             if not m:\n@@ -226,7 +228,10 @@ def get_commands(template):\n             if args and not args[:1].isspace():\n                 print_err(lineno, line, 'Invalid template syntax')\n                 continue\n-            args = shlex.split(args)\n+            try:\n+                args = shlex.split(args)\n+            except UnicodeEncodeError:\n+                args = [arg.decode('utf-8') for arg in shlex.split(args.encode('utf-8'))]\n             yield Command(negated=negated, cmd=cmd, args=args, lineno=lineno+1, context=line)\n \n \n@@ -280,7 +285,7 @@ def get_file(self, path):\n         if not(os.path.exists(abspath) and os.path.isfile(abspath)):\n             raise FailedCheck('File does not exist {!r}'.format(path))\n \n-        with open(abspath) as f:\n+        with io.open(abspath, encoding='utf-8') as f:\n             data = f.read()\n             self.files[path] = data\n             return data\n@@ -294,9 +299,9 @@ def get_tree(self, path):\n         if not(os.path.exists(abspath) and os.path.isfile(abspath)):\n             raise FailedCheck('File does not exist {!r}'.format(path))\n \n-        with open(abspath) as f:\n+        with io.open(abspath, encoding='utf-8') as f:\n             try:\n-                tree = ET.parse(f, CustomHTMLParser())\n+                tree = ET.fromstringlist(f.readlines(), CustomHTMLParser())\n             except Exception as e:\n                 raise RuntimeError('Cannot parse an HTML file {!r}: {}'.format(path, e))\n             self.trees[path] = tree\n@@ -313,7 +318,7 @@ def check_string(data, pat, regexp):\n     if not pat:\n         return True # special case a presence testing\n     elif regexp:\n-        return re.search(pat, data) is not None\n+        return re.search(pat, data, flags=re.UNICODE) is not None\n     else:\n         data = ' '.join(data.split())\n         pat = ' '.join(pat.split())\n@@ -350,7 +355,7 @@ def check_tree_text(tree, path, pat, regexp):\n                     break\n     except Exception as e:\n         print('Failed to get path \"{}\"'.format(path))\n-        raise e\n+        raise\n     return ret\n \n \n@@ -359,7 +364,12 @@ def get_tree_count(tree, path):\n     return len(tree.findall(path))\n \n def stderr(*args):\n-    print(*args, file=sys.stderr)\n+    if sys.version_info.major < 3:\n+        file = codecs.getwriter('utf-8')(sys.stderr)\n+    else:\n+        file = sys.stderr\n+\n+    print(*args, file=file)\n \n def print_err(lineno, context, err, message=None):\n     global ERR_COUNT"}, {"sha": "58876a1aa116277401614b8e40c831c3609210d9", "filename": "src/test/rustdoc/issue-32374.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fefcee73a5dfee20281396e0f1418ceda81776b/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fefcee73a5dfee20281396e0f1418ceda81776b/src%2Ftest%2Frustdoc%2Fissue-32374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-32374.rs?ref=6fefcee73a5dfee20281396e0f1418ceda81776b", "patch": "@@ -10,7 +10,7 @@\n //      'Deprecated since 1.0.0: text'\n // @has - '<code>test</code>&nbsp;<a href=\"http://issue_url/32374\">#32374</a>'\n // @matches issue_32374/struct.T.html '//*[@class=\"stab unstable\"]' \\\n-//      '\ud83d\udd2c This is a nightly-only experimental API. \\(test #32374\\)$'\n+//      '\ud83d\udd2c This is a nightly-only experimental API. \\(test\\s#32374\\)$'\n /// Docs\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n #[unstable(feature = \"test\", issue = \"32374\")]"}]}