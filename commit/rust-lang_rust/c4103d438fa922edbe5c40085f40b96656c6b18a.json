{"sha": "c4103d438fa922edbe5c40085f40b96656c6b18a", "node_id": "C_kwDOAAsO6NoAKGM0MTAzZDQzOGZhOTIyZWRiZTVjNDAwODVmNDBiOTY2NTZjNmIxOGE", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-06T20:01:35Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-11-07T04:00:34Z"}, "message": "Rename functions reflect that inline const is also \"typeck_child\"", "tree": {"sha": "bded6fb2603bb5d7b2bda64f2207126ae59db735", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bded6fb2603bb5d7b2bda64f2207126ae59db735"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4103d438fa922edbe5c40085f40b96656c6b18a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4103d438fa922edbe5c40085f40b96656c6b18a", "html_url": "https://github.com/rust-lang/rust/commit/c4103d438fa922edbe5c40085f40b96656c6b18a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4103d438fa922edbe5c40085f40b96656c6b18a/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0f59f6d6575e04d3e4d08e919ce01e29bc9e41e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f59f6d6575e04d3e4d08e919ce01e29bc9e41e", "html_url": "https://github.com/rust-lang/rust/commit/d0f59f6d6575e04d3e4d08e919ce01e29bc9e41e"}], "stats": {"total": 137, "additions": 64, "deletions": 73}, "files": [{"sha": "46a3c0fa1015248cfcc806148757693432b26c00", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -408,7 +408,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     let param = generics.type_param(&param_ty, tcx);\n                     if let Some(generics) = tcx\n                         .hir()\n-                        .get_generics(tcx.closure_base_def_id(self.mir_def_id().to_def_id()))\n+                        .get_generics(tcx.typeck_root_def_id(self.mir_def_id().to_def_id()))\n                     {\n                         suggest_constraining_type_param(\n                             tcx,"}, {"sha": "6ffab16577908fcbc747a0a4ff2d5b72620628fb", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -376,7 +376,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n     errors_buffer: &mut Vec<Diagnostic>,\n ) {\n     let tcx = infcx.tcx;\n-    let base_def_id = tcx.closure_base_def_id(body.source.def_id());\n+    let base_def_id = tcx.typeck_root_def_id(body.source.def_id());\n     if !tcx.has_attr(base_def_id, sym::rustc_regions) {\n         return;\n     }"}, {"sha": "b39a28f79aaddc3f2eda6882bf5bd7b934fb2f9b", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -569,8 +569,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // to store those. Otherwise, we'll pass in `None` to the\n         // functions below, which will trigger them to report errors\n         // eagerly.\n-        let mut outlives_requirements =\n-            infcx.tcx.is_closure_or_inline_const(mir_def_id).then(Vec::new);\n+        let mut outlives_requirements = infcx.tcx.is_typeck_child(mir_def_id).then(Vec::new);\n \n         self.check_type_tests(infcx, body, outlives_requirements.as_mut(), &mut errors_buffer);\n \n@@ -2230,7 +2229,7 @@ impl<'tcx> ClosureRegionRequirementsExt<'tcx> for ClosureRegionRequirements<'tcx\n             tcx,\n             closure_substs,\n             self.num_external_vids,\n-            tcx.closure_base_def_id(closure_def_id),\n+            tcx.typeck_root_def_id(closure_def_id),\n         );\n         debug!(\"apply_requirements: closure_mapping={:?}\", closure_mapping);\n "}, {"sha": "82f68605b281f26ab278155ebf83661b786813cb", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -1344,18 +1344,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // though.\n                 let category = match place.as_local() {\n                     Some(RETURN_PLACE) => {\n-                        if let BorrowCheckContext {\n-                            universal_regions:\n-                                UniversalRegions {\n-                                    defining_ty:\n-                                        DefiningTy::Const(def_id, _)\n-                                        | DefiningTy::InlineConst(def_id, _),\n-                                    ..\n-                                },\n-                            ..\n-                        } = self.borrowck_context\n-                        {\n-                            if tcx.is_static(*def_id) {\n+                        let defining_ty = &self.borrowck_context.universal_regions.defining_ty;\n+                        if defining_ty.is_const() {\n+                            if tcx.is_static(defining_ty.def_id()) {\n                                 ConstraintCategory::UseAsStatic\n                             } else {\n                                 ConstraintCategory::UseAsConst"}, {"sha": "b986df403f9f3f2c97789bad02c2b9720708bd71", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -247,15 +247,15 @@ impl<'tcx> UniversalRegions<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         closure_substs: SubstsRef<'tcx>,\n         expected_num_vars: usize,\n-        closure_base_def_id: DefId,\n+        typeck_root_def_id: DefId,\n     ) -> IndexVec<RegionVid, ty::Region<'tcx>> {\n         let mut region_mapping = IndexVec::with_capacity(expected_num_vars);\n         region_mapping.push(tcx.lifetimes.re_static);\n         tcx.for_each_free_region(&closure_substs, |fr| {\n             region_mapping.push(fr);\n         });\n \n-        for_each_late_bound_region_defined_on(tcx, closure_base_def_id, |r| {\n+        for_each_late_bound_region_defined_on(tcx, typeck_root_def_id, |r| {\n             region_mapping.push(r);\n         });\n \n@@ -349,8 +349,8 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 // tests, and the resulting print-outs include def-ids\n                 // and other things that are not stable across tests!\n                 // So we just include the region-vid. Annoying.\n-                let closure_base_def_id = tcx.closure_base_def_id(def_id);\n-                for_each_late_bound_region_defined_on(tcx, closure_base_def_id, |r| {\n+                let typeck_root_def_id = tcx.typeck_root_def_id(def_id);\n+                for_each_late_bound_region_defined_on(tcx, typeck_root_def_id, |r| {\n                     err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r),));\n                 });\n             }\n@@ -364,8 +364,8 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 // FIXME: As above, we'd like to print out the region\n                 // `r` but doing so is not stable across architectures\n                 // and so forth.\n-                let closure_base_def_id = tcx.closure_base_def_id(def_id);\n-                for_each_late_bound_region_defined_on(tcx, closure_base_def_id, |r| {\n+                let typeck_root_def_id = tcx.typeck_root_def_id(def_id);\n+                for_each_late_bound_region_defined_on(tcx, typeck_root_def_id, |r| {\n                     err.note(&format!(\"late-bound region is {:?}\", self.to_region_vid(r),));\n                 });\n             }\n@@ -422,15 +422,15 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         let mut indices = self.compute_indices(fr_static, defining_ty);\n         debug!(\"build: indices={:?}\", indices);\n \n-        let closure_base_def_id = self.infcx.tcx.closure_base_def_id(self.mir_def.did.to_def_id());\n+        let typeck_root_def_id = self.infcx.tcx.typeck_root_def_id(self.mir_def.did.to_def_id());\n \n         // If this is a closure or generator, then the late-bound regions from the enclosing\n         // function are actually external regions to us. For example, here, 'a is not local\n         // to the closure c (although it is local to the fn foo):\n         // fn foo<'a>() {\n         //     let c = || { let x: &'a u32 = ...; }\n         // }\n-        if self.mir_def.did.to_def_id() != closure_base_def_id {\n+        if self.mir_def.did.to_def_id() != typeck_root_def_id {\n             self.infcx\n                 .replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices)\n         }\n@@ -448,7 +448,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         );\n         // Converse of above, if this is a function then the late-bound regions declared on its\n         // signature are local to the fn.\n-        if self.mir_def.did.to_def_id() == closure_base_def_id {\n+        if self.mir_def.did.to_def_id() == typeck_root_def_id {\n             self.infcx\n                 .replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices);\n         }\n@@ -513,12 +513,12 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n     /// see `DefiningTy` for details.\n     fn defining_ty(&self) -> DefiningTy<'tcx> {\n         let tcx = self.infcx.tcx;\n-        let closure_base_def_id = tcx.closure_base_def_id(self.mir_def.did.to_def_id());\n+        let typeck_root_def_id = tcx.typeck_root_def_id(self.mir_def.did.to_def_id());\n \n         match tcx.hir().body_owner_kind(self.mir_hir_id) {\n             BodyOwnerKind::Closure | BodyOwnerKind::Fn => {\n-                let defining_ty = if self.mir_def.did.to_def_id() == closure_base_def_id {\n-                    tcx.type_of(closure_base_def_id)\n+                let defining_ty = if self.mir_def.did.to_def_id() == typeck_root_def_id {\n+                    tcx.type_of(typeck_root_def_id)\n                 } else {\n                     let tables = tcx.typeck(self.mir_def.did);\n                     tables.node_type(self.mir_hir_id)\n@@ -545,8 +545,8 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             }\n \n             BodyOwnerKind::Const | BodyOwnerKind::Static(..) => {\n-                let identity_substs = InternalSubsts::identity_for_item(tcx, closure_base_def_id);\n-                if self.mir_def.did.to_def_id() == closure_base_def_id {\n+                let identity_substs = InternalSubsts::identity_for_item(tcx, typeck_root_def_id);\n+                if self.mir_def.did.to_def_id() == typeck_root_def_id {\n                     let substs =\n                         self.infcx.replace_free_regions_with_nll_infer_vars(FR, identity_substs);\n                     DefiningTy::Const(self.mir_def.did.to_def_id(), substs)\n@@ -574,19 +574,19 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         defining_ty: DefiningTy<'tcx>,\n     ) -> UniversalRegionIndices<'tcx> {\n         let tcx = self.infcx.tcx;\n-        let closure_base_def_id = tcx.closure_base_def_id(self.mir_def.did.to_def_id());\n-        let identity_substs = InternalSubsts::identity_for_item(tcx, closure_base_def_id);\n+        let typeck_root_def_id = tcx.typeck_root_def_id(self.mir_def.did.to_def_id());\n+        let identity_substs = InternalSubsts::identity_for_item(tcx, typeck_root_def_id);\n         let fr_substs = match defining_ty {\n             DefiningTy::Closure(_, ref substs)\n             | DefiningTy::Generator(_, ref substs, _)\n             | DefiningTy::InlineConst(_, ref substs) => {\n                 // In the case of closures, we rely on the fact that\n                 // the first N elements in the ClosureSubsts are\n-                // inherited from the `closure_base_def_id`.\n+                // inherited from the `typeck_root_def_id`.\n                 // Therefore, when we zip together (below) with\n                 // `identity_substs`, we will get only those regions\n                 // that correspond to early-bound regions declared on\n-                // the `closure_base_def_id`.\n+                // the `typeck_root_def_id`.\n                 assert!(substs.len() >= identity_substs.len());\n                 assert_eq!(substs.regions().count(), identity_substs.regions().count());\n                 substs\n@@ -765,8 +765,8 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         indices: &mut UniversalRegionIndices<'tcx>,\n     ) {\n         debug!(\"replace_late_bound_regions_with_nll_infer_vars(mir_def_id={:?})\", mir_def_id);\n-        let closure_base_def_id = self.tcx.closure_base_def_id(mir_def_id.to_def_id());\n-        for_each_late_bound_region_defined_on(self.tcx, closure_base_def_id, |r| {\n+        let typeck_root_def_id = self.tcx.typeck_root_def_id(mir_def_id.to_def_id());\n+        for_each_late_bound_region_defined_on(self.tcx, typeck_root_def_id, |r| {\n             debug!(\"replace_late_bound_regions_with_nll_infer_vars: r={:?}\", r);\n             if !indices.indices.contains_key(&r) {\n                 let region_vid = self.next_nll_region_var(FR);"}, {"sha": "2a6bf7d9b1a4ddac535843a25a4c2e052bd79ac1", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -322,7 +322,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         type_names::push_item_name(self.tcx(), def_id, false, &mut name);\n \n         // Find the enclosing function, in case this is a closure.\n-        let enclosing_fn_def_id = self.tcx().closure_base_def_id(def_id);\n+        let enclosing_fn_def_id = self.tcx().typeck_root_def_id(def_id);\n \n         // Get_template_parameters() will append a `<...>` clause to the function\n         // name if necessary."}, {"sha": "3947282aa6217f4dba820c79d75c6596e4294262", "filename": "compiler/rustc_infer/src/infer/outlives/env.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> OutlivesEnvironment<'tcx> {\n     /// function. We can then add implied bounds and the like from the\n     /// closure arguments into the environment -- these should only\n     /// apply in the closure body, so once we exit, we invoke\n-    /// `pop_snapshot_post_closure` to remove them.\n+    /// `pop_snapshot_post_typeck_child` to remove them.\n     ///\n     /// Example:\n     ///\n@@ -129,12 +129,12 @@ impl<'a, 'tcx> OutlivesEnvironment<'tcx> {\n     /// seems like it'd be readily fixed if we wanted. There are\n     /// similar leaks around givens that seem equally suspicious, to\n     /// be honest. --nmatsakis\n-    pub fn push_snapshot_pre_closure(&self) -> usize {\n+    pub fn push_snapshot_pre_typeck_child(&self) -> usize {\n         self.region_bound_pairs_accum.len()\n     }\n \n-    /// See `push_snapshot_pre_closure`.\n-    pub fn pop_snapshot_post_closure(&mut self, len: usize) {\n+    /// See `push_snapshot_pre_typeck_child`.\n+    pub fn pop_snapshot_post_typeck_child(&mut self, len: usize) {\n         self.region_bound_pairs_accum.truncate(len);\n     }\n "}, {"sha": "a9f94b74c5efb2ade9d3fb13dbefe222f31f8386", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -797,7 +797,7 @@ rustc_queries! {\n     /// additional requirements that the closure's creator must verify.\n     query mir_borrowck(key: LocalDefId) -> &'tcx mir::BorrowCheckResult<'tcx> {\n         desc { |tcx| \"borrow-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n-        cache_on_disk_if(tcx) { tcx.is_closure_or_inline_const(key.to_def_id()) }\n+        cache_on_disk_if(tcx) { tcx.is_typeck_child(key.to_def_id()) }\n     }\n     query mir_borrowck_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::BorrowCheckResult<'tcx> {\n         desc {"}, {"sha": "27e22ccac02a7fb7c771700ada2318eeace3a841", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -56,7 +56,7 @@ impl<'tcx> Const<'tcx> {\n \n         let ty = tcx.type_of(def.def_id_for_type_of());\n \n-        match Self::try_eval_body_expr(tcx, ty, expr) {\n+        match Self::try_eval_lit_or_param(tcx, ty, expr) {\n             Some(v) => v,\n             None => tcx.mk_const(ty::Const {\n                 val: ty::ConstKind::Unevaluated(ty::Unevaluated {\n@@ -69,7 +69,7 @@ impl<'tcx> Const<'tcx> {\n         }\n     }\n \n-    fn try_eval_body_expr(\n+    fn try_eval_lit_or_param(\n         tcx: TyCtxt<'tcx>,\n         ty: Ty<'tcx>,\n         expr: &'tcx hir::Expr<'tcx>,\n@@ -141,12 +141,12 @@ impl<'tcx> Const<'tcx> {\n \n         let ty = tcx.typeck(def_id).node_type(hir_id);\n \n-        let ret = match Self::try_eval_body_expr(tcx, ty, expr) {\n+        let ret = match Self::try_eval_lit_or_param(tcx, ty, expr) {\n             Some(v) => v,\n             None => {\n-                let outer_def_id = tcx.closure_base_def_id(def_id.to_def_id());\n+                let typeck_root_def_id = tcx.typeck_root_def_id(def_id.to_def_id());\n                 let parent_substs =\n-                    tcx.erase_regions(InternalSubsts::identity_for_item(tcx, outer_def_id));\n+                    tcx.erase_regions(InternalSubsts::identity_for_item(tcx, typeck_root_def_id));\n                 let substs =\n                     InlineConstSubsts::new(tcx, InlineConstSubstsParts { parent_substs, ty })\n                         .substs;"}, {"sha": "6b287445ff032dade94803d5ba345326d7d7ac98", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -423,8 +423,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         matches!(self.def_kind(def_id), DefKind::Closure | DefKind::Generator)\n     }\n \n-    /// Returns `true` if `def_id` refers to a closure, generator or inline const.\n-    pub fn is_closure_or_inline_const(self, def_id: DefId) -> bool {\n+    /// Returns `true` if `def_id` refers to a definition that does not have its own\n+    /// type-checking context, i.e. closure, generator or inline const.\n+    pub fn is_typeck_child(self, def_id: DefId) -> bool {\n         matches!(\n             self.def_kind(def_id),\n             DefKind::Closure | DefKind::Generator | DefKind::InlineConst\n@@ -458,9 +459,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Therefore, when we fetch the\n     /// `typeck` the closure, for example, we really wind up\n     /// fetching the `typeck` the enclosing fn item.\n-    pub fn closure_base_def_id(self, def_id: DefId) -> DefId {\n+    pub fn typeck_root_def_id(self, def_id: DefId) -> DefId {\n         let mut def_id = def_id;\n-        while self.is_closure_or_inline_const(def_id) {\n+        while self.is_typeck_child(def_id) {\n             def_id = self.parent(def_id).unwrap_or_else(|| {\n                 bug!(\"closure {:?} has no parent\", def_id);\n             });"}, {"sha": "595080619da6faaac8be4cf5b91b93beb4cbf45a", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -196,7 +196,7 @@ fn emit_unused_generic_params_error<'tcx>(\n     generics: &'tcx ty::Generics,\n     unused_parameters: &FiniteBitSet<u32>,\n ) {\n-    let base_def_id = tcx.closure_base_def_id(def_id);\n+    let base_def_id = tcx.typeck_root_def_id(def_id);\n     if !tcx.get_attrs(base_def_id).iter().any(|a| a.has_name(sym::rustc_polymorphize_error)) {\n         return;\n     }"}, {"sha": "6a8feb041da19f5978c4cf6055f79e127bf61ffc", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -818,9 +818,9 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n }\n \n fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n-    let closure_base_def_id = tcx.closure_base_def_id(def_id);\n-    if closure_base_def_id != def_id {\n-        return tcx.region_scope_tree(closure_base_def_id);\n+    let typeck_root_def_id = tcx.typeck_root_def_id(def_id);\n+    if typeck_root_def_id != def_id {\n+        return tcx.region_scope_tree(typeck_root_def_id);\n     }\n \n     let id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());"}, {"sha": "b21936a00b04fae8c104dd81668dc4992de6af37", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -1474,7 +1474,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let span = self.tcx.def_span(generator_did);\n \n         let in_progress_typeck_results = self.in_progress_typeck_results.map(|t| t.borrow());\n-        let generator_did_root = self.tcx.closure_base_def_id(generator_did);\n+        let generator_did_root = self.tcx.typeck_root_def_id(generator_did);\n         debug!(\n             \"maybe_note_obligation_cause_for_async_await: generator_did={:?} \\\n              generator_did_root={:?} in_progress_typeck_results.hir_owner={:?} span={:?}\","}, {"sha": "f7accbb430caae8375fb5a6c318244009f0b15d7", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -92,7 +92,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let parent_substs = InternalSubsts::identity_for_item(\n             self.tcx,\n-            self.tcx.closure_base_def_id(expr_def_id.to_def_id()),\n+            self.tcx.typeck_root_def_id(expr_def_id.to_def_id()),\n         );\n \n         let tupled_upvars_ty = self.infcx.next_ty_var(TypeVariableOrigin {"}, {"sha": "d19e99606bcd8eec3f0d54d7e921de2ec1e463a9", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -297,9 +297,9 @@ fn primary_body_of(\n fn has_typeck_results(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     // Closures' typeck results come from their outermost function,\n     // as they are part of the same \"inference environment\".\n-    let outer_def_id = tcx.closure_base_def_id(def_id);\n-    if outer_def_id != def_id {\n-        return tcx.has_typeck_results(outer_def_id);\n+    let typeck_root_def_id = tcx.typeck_root_def_id(def_id);\n+    if typeck_root_def_id != def_id {\n+        return tcx.has_typeck_results(typeck_root_def_id);\n     }\n \n     if let Some(def_id) = def_id.as_local() {\n@@ -348,9 +348,9 @@ fn typeck_with_fallback<'tcx>(\n ) -> &'tcx ty::TypeckResults<'tcx> {\n     // Closures' typeck results come from their outermost function,\n     // as they are part of the same \"inference environment\".\n-    let outer_def_id = tcx.closure_base_def_id(def_id.to_def_id()).expect_local();\n-    if outer_def_id != def_id {\n-        return tcx.typeck(outer_def_id);\n+    let typeck_root_def_id = tcx.typeck_root_def_id(def_id.to_def_id()).expect_local();\n+    if typeck_root_def_id != def_id {\n+        return tcx.typeck(typeck_root_def_id);\n     }\n \n     let id = tcx.hir().local_def_id_to_hir_id(def_id);"}, {"sha": "d2d8b14dd9695e917bd27d2dc4a08d7683993991", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -347,7 +347,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         // Save state of current function. We will restore afterwards.\n         let old_body_id = self.body_id;\n         let old_body_owner = self.body_owner;\n-        let env_snapshot = self.outlives_environment.push_snapshot_pre_closure();\n+        let env_snapshot = self.outlives_environment.push_snapshot_pre_typeck_child();\n \n         let body_id = body.id();\n         self.body_id = body_id.hir_id;\n@@ -359,7 +359,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n         self.visit_region_obligations(body_id.hir_id);\n \n         // Restore state from previous function.\n-        self.outlives_environment.pop_snapshot_post_closure(env_snapshot);\n+        self.outlives_environment.pop_snapshot_post_typeck_child(env_snapshot);\n         self.body_id = old_body_id;\n         self.body_owner = old_body_owner;\n     }\n@@ -429,13 +429,13 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n         // `visit_fn_body`.  We will restore afterwards.\n         let old_body_id = self.body_id;\n         let old_body_owner = self.body_owner;\n-        let env_snapshot = self.outlives_environment.push_snapshot_pre_closure();\n+        let env_snapshot = self.outlives_environment.push_snapshot_pre_typeck_child();\n \n         let body = self.tcx.hir().body(body_id);\n         self.visit_fn_body(hir_id, body, span);\n \n         // Restore state from previous function.\n-        self.outlives_environment.pop_snapshot_post_closure(env_snapshot);\n+        self.outlives_environment.pop_snapshot_post_typeck_child(env_snapshot);\n         self.body_id = old_body_id;\n         self.body_owner = old_body_owner;\n     }"}, {"sha": "2274db76c05fb264be490cb2043398dbf23e575c", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -1495,14 +1495,14 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                         Some(parent_def_id.to_def_id())\n                     }\n                     Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) => {\n-                        Some(tcx.closure_base_def_id(def_id))\n+                        Some(tcx.typeck_root_def_id(def_id))\n                     }\n                     _ => None,\n                 }\n             }\n         }\n         Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {\n-            Some(tcx.closure_base_def_id(def_id))\n+            Some(tcx.typeck_root_def_id(def_id))\n         }\n         Node::Item(item) => match item.kind {\n             ItemKind::OpaqueTy(hir::OpaqueTy { impl_trait_fn, .. }) => {"}, {"sha": "3ed711c43e16dda16439c7dfad7bfb7eb5045d90", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4103d438fa922edbe5c40085f40b96656c6b18a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4103d438fa922edbe5c40085f40b96656c6b18a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c4103d438fa922edbe5c40085f40b96656c6b18a", "patch": "@@ -281,9 +281,9 @@ crate fn create_config(\n                 // Closures' tables come from their outermost function,\n                 // as they are part of the same \"inference environment\".\n                 // This avoids emitting errors for the parent twice (see similar code in `typeck_with_fallback`)\n-                let outer_def_id = tcx.closure_base_def_id(def_id.to_def_id()).expect_local();\n-                if outer_def_id != def_id {\n-                    return tcx.typeck(outer_def_id);\n+                let typeck_root_def_id = tcx.typeck_root_def_id(def_id.to_def_id()).expect_local();\n+                if typeck_root_def_id != def_id {\n+                    return tcx.typeck(typeck_root_def_id);\n                 }\n \n                 let hir = tcx.hir();"}]}