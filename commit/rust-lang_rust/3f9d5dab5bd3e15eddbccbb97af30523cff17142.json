{"sha": "3f9d5dab5bd3e15eddbccbb97af30523cff17142", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmOWQ1ZGFiNWJkM2UxNWVkZGJjY2JiOTdhZjMwNTIzY2ZmMTcxNDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-07T01:17:49Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-07T01:17:49Z"}, "message": "rustc: Run the verifier over LLVM modules before writing them out", "tree": {"sha": "bed17beb0d5785517dd31fe97f979ca85b987b31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bed17beb0d5785517dd31fe97f979ca85b987b31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f9d5dab5bd3e15eddbccbb97af30523cff17142", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f9d5dab5bd3e15eddbccbb97af30523cff17142", "html_url": "https://github.com/rust-lang/rust/commit/3f9d5dab5bd3e15eddbccbb97af30523cff17142", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f9d5dab5bd3e15eddbccbb97af30523cff17142/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c7d1983670fb86f8ace78a255e15b0e753e791", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c7d1983670fb86f8ace78a255e15b0e753e791", "html_url": "https://github.com/rust-lang/rust/commit/a1c7d1983670fb86f8ace78a255e15b0e753e791"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "c5236725d6d63a175c6dc4cf41501d9eecf267dd", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3f9d5dab5bd3e15eddbccbb97af30523cff17142/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9d5dab5bd3e15eddbccbb97af30523cff17142/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=3f9d5dab5bd3e15eddbccbb97af30523cff17142", "patch": "@@ -687,6 +687,16 @@ native mod llvm = llvm_lib {\n     fn LLVMPreferredAlignmentOfType(TargetDataRef TD, TypeRef Ty) -> uint;\n     /** Disposes target data. */\n     fn LLVMDisposeTargetData(TargetDataRef TD);\n+\n+    /** Creates a pass manager. */\n+    fn LLVMCreatePassManager() -> PassManagerRef;\n+    /** Disposes a pass manager. */\n+    fn LLVMDisposePassManager(PassManagerRef PM);\n+    /** Runs a pass manager on a module. */\n+    fn LLVMRunPassManager(PassManagerRef PM, ModuleRef M) -> Bool;\n+\n+    /** Adds a verification pass. */\n+    fn LLVMAddVerifierPass(PassManagerRef PM);\n }\n \n /* Slightly more terse object-interface to LLVM's 'builder' functions. */\n@@ -1209,6 +1219,19 @@ fn mk_target_data(str string_rep) -> target_data {\n     ret rec(lltd=lltd, dtor=target_data_dtor(lltd));\n }\n \n+/* Memory-managed interface to pass managers. */\n+\n+obj pass_manager_dtor(PassManagerRef PM) {\n+    drop { llvm.LLVMDisposePassManager(PM); }\n+}\n+\n+type pass_manager = rec(PassManagerRef llpm, pass_manager_dtor dtor);\n+\n+fn mk_pass_manager() -> pass_manager {\n+    auto llpm = llvm.LLVMCreatePassManager();\n+    ret rec(llpm=llpm, dtor=pass_manager_dtor(llpm));\n+}\n+\n \n //\n // Local Variables:"}, {"sha": "6f3705e86d07bf3998e1abceb997318a9c9b130c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3f9d5dab5bd3e15eddbccbb97af30523cff17142/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f9d5dab5bd3e15eddbccbb97af30523cff17142/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3f9d5dab5bd3e15eddbccbb97af30523cff17142", "patch": "@@ -23,8 +23,9 @@ import lib.llvm.llvm;\n import lib.llvm.builder;\n import lib.llvm.target_data;\n import lib.llvm.type_handle;\n-import lib.llvm.mk_type_handle;\n+import lib.llvm.mk_pass_manager;\n import lib.llvm.mk_target_data;\n+import lib.llvm.mk_type_handle;\n import lib.llvm.llvm.ModuleRef;\n import lib.llvm.llvm.ValueRef;\n import lib.llvm.llvm.TypeRef;\n@@ -2245,6 +2246,14 @@ fn declare_intrinsics(ModuleRef llmod) -> hashmap[str,ValueRef] {\n     ret intrinsics;\n }\n \n+fn check_module(ModuleRef llmod) {\n+    auto pm = mk_pass_manager();\n+    llvm.LLVMAddVerifierPass(pm.llpm);\n+    llvm.LLVMRunPassManager(pm.llpm, llmod);\n+\n+    // TODO: run the linter here also, once there are llvm-c bindings for it.\n+}\n+\n fn trans_crate(session.session sess, @ast.crate crate, str output) {\n     auto llmod =\n         llvm.LLVMModuleCreateWithNameInContext(_str.buf(\"rust_out\"),\n@@ -2302,6 +2311,8 @@ fn trans_crate(session.session sess, @ast.crate crate, str output) {\n     trans_exit_task_glue(cx);\n     trans_main_fn(cx, crate_constant(cx));\n \n+    check_module(llmod);\n+\n     llvm.LLVMWriteBitcodeToFile(llmod, _str.buf(output));\n     llvm.LLVMDisposeModule(llmod);\n }"}]}