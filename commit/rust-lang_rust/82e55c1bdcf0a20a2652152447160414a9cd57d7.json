{"sha": "82e55c1bdcf0a20a2652152447160414a9cd57d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZTU1YzFiZGNmMGEyMGEyNjUyMTUyNDQ3MTYwNDE0YTljZDU3ZDc=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2018-12-18T02:10:24Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2018-12-18T02:10:24Z"}, "message": "deny intra-doc link resolution failures in libstd", "tree": {"sha": "746605cd5a1f6b402d1fb947115eb33b151cafa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/746605cd5a1f6b402d1fb947115eb33b151cafa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82e55c1bdcf0a20a2652152447160414a9cd57d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlwYVyoWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdHNRB/sE3SNTpuZb2sXTEZuTuUclb63C\nHIuiitfmUqbXl1jZ8hkgtCyu//m8K8O0BH9M+IMR7O18Z4n94Pkndw0DfNnpgTMY\nXpKdgzIkTu/Bfj8NmIn2x0iEZiMFwdy2/F9ZdXhVqOPk1gFGgVcPs//0hsTDj2W4\nesnPweS+RisKHBsq3rGmt6MVkVPtZamHV1f0YqJZbEMaEUkQtCgWO/aP/pnCdsQ8\nv1/dGqDqu59A8+VhXSxB5w0fl6fmEVMU6mbw3r+uUvpuqXZIAotI7UxkOWoh2XR9\npxG2IAZF7exj28MxqGmvLVy4xnuIB+oKZFIxQhAUEJ2L8kirWTdKdg20LN6m\n=DI0W\n-----END PGP SIGNATURE-----", "payload": "tree 746605cd5a1f6b402d1fb947115eb33b151cafa7\nparent adbfec229ce07ff4b2a7bf2d6dec2d13cb224980\nauthor Andy Russell <arussell123@gmail.com> 1545099024 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1545099024 -0500\n\ndeny intra-doc link resolution failures in libstd\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82e55c1bdcf0a20a2652152447160414a9cd57d7", "html_url": "https://github.com/rust-lang/rust/commit/82e55c1bdcf0a20a2652152447160414a9cd57d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82e55c1bdcf0a20a2652152447160414a9cd57d7/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adbfec229ce07ff4b2a7bf2d6dec2d13cb224980", "url": "https://api.github.com/repos/rust-lang/rust/commits/adbfec229ce07ff4b2a7bf2d6dec2d13cb224980", "html_url": "https://github.com/rust-lang/rust/commit/adbfec229ce07ff4b2a7bf2d6dec2d13cb224980"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "31a4aeeab4be8705c15a461d87c4f733d7841ed4", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=82e55c1bdcf0a20a2652152447160414a9cd57d7", "patch": "@@ -72,6 +72,8 @@\n        test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n #![no_std]\n #![needs_allocator]\n+\n+#![deny(intra_doc_link_resolution_failure)]\n #![deny(missing_debug_implementations)]\n \n #![cfg_attr(not(test), feature(fn_traits))]"}, {"sha": "37204bc20c2722316f33469f37e6f7ff5e1c6661", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=82e55c1bdcf0a20a2652152447160414a9cd57d7", "patch": "@@ -840,6 +840,8 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {\n     /// drop(foo);    // Doesn't print anything\n     /// drop(foo2);   // Prints \"dropped!\"\n     /// ```\n+    ///\n+    /// [`Weak`]: ../../std/rc/struct.Weak.html\n     fn drop(&mut self) {\n         unsafe {\n             self.dec_strong();\n@@ -1381,9 +1383,10 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> {\n #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n impl<T> Default for Weak<T> {\n     /// Constructs a new `Weak<T>`, allocating memory for `T` without initializing\n-    /// it. Calling [`upgrade`][Weak::upgrade] on the return value always gives [`None`].\n+    /// it. Calling [`upgrade`] on the return value always gives [`None`].\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html\n+    /// [`upgrade`]: ../../std/rc/struct.Weak.html#method.upgrade\n     ///\n     /// # Examples\n     ///"}, {"sha": "5f72b232c64ced591257d4694e26f1a502429cda", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=82e55c1bdcf0a20a2652152447160414a9cd57d7", "patch": "@@ -952,6 +952,8 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> {\n     /// drop(foo);    // Doesn't print anything\n     /// drop(foo2);   // Prints \"dropped!\"\n     /// ```\n+    ///\n+    /// [`Weak`]: ../../std/sync/struct.Weak.html\n     #[inline]\n     fn drop(&mut self) {\n         // Because `fetch_sub` is already atomic, we do not need to synchronize\n@@ -1219,10 +1221,11 @@ impl<T: ?Sized> Clone for Weak<T> {\n #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n impl<T> Default for Weak<T> {\n     /// Constructs a new `Weak<T>`, without allocating memory.\n-    /// Calling [`upgrade`][Weak::upgrade] on the return value always\n+    /// Calling [`upgrade`] on the return value always\n     /// gives [`None`].\n     ///\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`upgrade`]: ../../std/sync/struct.Weak.html#method.upgrade\n     ///\n     /// # Examples\n     ///"}, {"sha": "258f499d4448179d059472c8afb9ffa91c29c8c8", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=82e55c1bdcf0a20a2652152447160414a9cd57d7", "patch": "@@ -71,6 +71,7 @@\n \n #![no_core]\n #![deny(missing_docs)]\n+#![deny(intra_doc_link_resolution_failure)]\n #![deny(missing_debug_implementations)]\n \n #![feature(allow_internal_unstable)]"}, {"sha": "0cde23cde40f1c8483dd9951ff53ea0bd1a8fd2b", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=82e55c1bdcf0a20a2652152447160414a9cd57d7", "patch": "@@ -984,6 +984,9 @@ impl<T> ManuallyDrop<T> {\n     ///\n     /// This function semantically moves out the contained value without preventing further usage.\n     /// It is up to the user of this method to ensure that this container is not used again.\n+    ///\n+    /// [`ManuallyDrop::drop`]: #method.drop\n+    /// [`ManuallyDrop::into_inner`]: #method.into_inner\n     #[must_use = \"if you don't need the value, you can use `ManuallyDrop::drop` instead\"]\n     #[unstable(feature = \"manually_drop_take\", issue = \"55422\")]\n     #[inline]"}, {"sha": "193061457b5cd8617dab130ca60576f6849a67c4", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=82e55c1bdcf0a20a2652152447160414a9cd57d7", "patch": "@@ -877,6 +877,7 @@ impl<T> [T] {\n     /// assert_eq!(iter.remainder(), &['l']);\n     /// ```\n     ///\n+    /// [`chunks`]: #method.chunks\n     /// [`rchunks`]: #method.rchunks\n     /// [`chunks_exact`]: #method.chunks_exact\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n@@ -921,6 +922,7 @@ impl<T> [T] {\n     /// assert_eq!(v, &[0, 2, 2, 1, 1]);\n     /// ```\n     ///\n+    /// [`chunks_mut`]: #method.chunks_mut\n     /// [`rchunks_mut`]: #method.rchunks_mut\n     /// [`chunks_exact_mut`]: #method.chunks_exact_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]"}, {"sha": "7aaf89cd0ff71dc502b8f8010a5581a6a3ed65af", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=82e55c1bdcf0a20a2652152447160414a9cd57d7", "patch": "@@ -294,7 +294,7 @@ impl<R: Seek> Seek for BufReader<R> {\n     /// `.into_inner()` immediately after a seek yields the underlying reader\n     /// at the same position.\n     ///\n-    /// To seek without discarding the internal buffer, use [`Seek::seek_relative`].\n+    /// To seek without discarding the internal buffer, use [`BufReader::seek_relative`].\n     ///\n     /// See [`std::io::Seek`] for more details.\n     ///\n@@ -303,6 +303,9 @@ impl<R: Seek> Seek for BufReader<R> {\n     /// seeks will be performed instead of one. If the second seek returns\n     /// `Err`, the underlying reader will be left at the same position it would\n     /// have if you called `seek` with `SeekFrom::Current(0)`.\n+    ///\n+    /// [`BufReader::seek_relative`]: struct.BufReader.html#method.seek_relative\n+    /// [`std::io::Seek`]: trait.Seek.html\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n         let result: u64;\n         if let SeekFrom::Current(n) = pos {"}, {"sha": "324852355b0d66847f125684e64ab5e13559de5e", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=82e55c1bdcf0a20a2652152447160414a9cd57d7", "patch": "@@ -225,6 +225,9 @@ impl From<ErrorKind> for Error {\n     /// let error = Error::from(not_found);\n     /// assert_eq!(\"entity not found\", format!(\"{}\", error));\n     /// ```\n+    ///\n+    /// [`ErrorKind`]: ../../std/io/enum.ErrorKind.html\n+    /// [`Error`]: ../../std/io/struct.Error.html\n     #[inline]\n     fn from(kind: ErrorKind) -> Error {\n         Error {"}, {"sha": "13de55a6a542f3788515886a4424a75ac6cc7d70", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82e55c1bdcf0a20a2652152447160414a9cd57d7/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=82e55c1bdcf0a20a2652152447160414a9cd57d7", "patch": "@@ -222,6 +222,7 @@\n #![no_std]\n \n #![deny(missing_docs)]\n+#![deny(intra_doc_link_resolution_failure)]\n #![deny(missing_debug_implementations)]\n \n // Tell the compiler to link to either panic_abort or panic_unwind"}]}