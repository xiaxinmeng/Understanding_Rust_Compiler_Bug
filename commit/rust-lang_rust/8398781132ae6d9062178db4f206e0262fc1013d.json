{"sha": "8398781132ae6d9062178db4f206e0262fc1013d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzOTg3ODExMzJhZTZkOTA2MjE3OGRiNGYyMDZlMDI2MmZjMTAxM2Q=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-01T12:33:37Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-01T16:50:20Z"}, "message": "remove one layer of indirection when interpreting const/static/main functions", "tree": {"sha": "78f26dae264b3c9dfd84117425b8cd58b57b9351", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78f26dae264b3c9dfd84117425b8cd58b57b9351"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8398781132ae6d9062178db4f206e0262fc1013d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXTxJMAAoJEFbW7qD8Z6xGYCUQAIBgDzY593mu+FkGKY7l0RgV\npRFzjre4zVbrIASGmudJvD3KeSrHmMpn0mbQLzwqnwyyFjIOHWV0fJRlw9lhvicH\npe8FL1Y1/3io8xYBmn197mnCyiWmPhsrOEHy8eQsBBYIgtJK57Gc3+cRPA0ugI+f\nfcxZovChO4TKHjhAsz94sHdMWBLhubfQX6bAhF7mLKFPschwTSC1o7Hgi3Gh0UTb\nM9josNjKk62KHJc0ADOTffueq+UoWI//rQ6Llp9+k6s7UsT1RhUTJpOOKO5T4/DS\nsS6Hl0hh3oEbNcco52Vea4k8shjbufr3oxvq68nNoHYJNF04DwG1HfxfP9VtwWu0\nbrPBh75lfVCZkBVYAZUg8ToITMRVCS6CdZHXn/NEDYuOiUoBTVvgF6PSMr9s+/N+\nXT//eGMsA2U0sza9m1QkFPbNqdt85pBunm4LmTyYUe4M202vAf2dasnIVgW1b5qU\naLkCRmPXQ92/p8/YX0PFdw1IWIAwpqR8UV0ubJ/f+l25qQ4YnkcQbO0jbo8pYANg\nH3vw4jbJdSMVPJTZfRGjEgln/7lS0p3TbBnzEV5uhrOugMfUvoypMw7YmAy7j86D\nE4K0odRQcqkjlh40UzCItBzH2difoMyKnQm0CTCrOGDE7hurPXgLiWpNLiTb/xyP\ntTLjCNt6JtybguU570WU\n=mPO/\n-----END PGP SIGNATURE-----", "payload": "tree 78f26dae264b3c9dfd84117425b8cd58b57b9351\nparent e73fa7733de466136d56dc8e184a176c9188e3f4\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464784417 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464799820 +0200\n\nremove one layer of indirection when interpreting const/static/main functions"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8398781132ae6d9062178db4f206e0262fc1013d", "html_url": "https://github.com/rust-lang/rust/commit/8398781132ae6d9062178db4f206e0262fc1013d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8398781132ae6d9062178db4f206e0262fc1013d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e73fa7733de466136d56dc8e184a176c9188e3f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e73fa7733de466136d56dc8e184a176c9188e3f4", "html_url": "https://github.com/rust-lang/rust/commit/e73fa7733de466136d56dc8e184a176c9188e3f4"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "bd51e2d2dbf14baec336dc367b8088d61f60398c", "filename": "src/interpreter.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8398781132ae6d9062178db4f206e0262fc1013d/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8398781132ae6d9062178db4f206e0262fc1013d/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=8398781132ae6d9062178db4f206e0262fc1013d", "patch": "@@ -135,6 +135,23 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n             name_stack: Vec::new(),\n         }\n     }\n+\n+    fn call(&mut self, mir: &mir::Mir<'tcx>) -> EvalResult<Option<Pointer>> {\n+        let mut nested_fecx = FnEvalContext::new(self);\n+\n+        let return_ptr = match mir.return_ty {\n+            ty::FnConverging(ty) => {\n+                let size = nested_fecx.type_size(ty);\n+                Some(nested_fecx.memory.allocate(size))\n+            }\n+            ty::FnDiverging => None,\n+        };\n+\n+        let substs = nested_fecx.substs();\n+        nested_fecx.push_stack_frame(CachedMir::Ref(mir), substs, return_ptr);\n+        nested_fecx.run()?;\n+        Ok(return_ptr)\n+    }\n }\n \n impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n@@ -201,23 +218,6 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n         Ok(())\n     }\n \n-    fn call_nested(&mut self, mir: &mir::Mir<'tcx>) -> EvalResult<Option<Pointer>> {\n-        let mut nested_fecx = FnEvalContext::new(self.gecx);\n-\n-        let return_ptr = match mir.return_ty {\n-            ty::FnConverging(ty) => {\n-                let size = nested_fecx.type_size(ty);\n-                Some(nested_fecx.memory.allocate(size))\n-            }\n-            ty::FnDiverging => None,\n-        };\n-\n-        let substs = nested_fecx.substs();\n-        nested_fecx.push_stack_frame(CachedMir::Ref(mir), substs, return_ptr);\n-        nested_fecx.run()?;\n-        Ok(return_ptr)\n-    }\n-\n     fn push_stack_frame(&mut self, mir: CachedMir<'mir, 'tcx>, substs: &'tcx Substs<'tcx>,\n         return_ptr: Option<Pointer>)\n     {\n@@ -1002,7 +1002,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                         // values.\n                         let current_mir = self.mir();\n                         let mir = &current_mir.promoted[index];\n-                        self.call_nested(mir).map(Option::unwrap)\n+                        self.gecx.call(mir).map(Option::unwrap)\n                     }\n                 }\n             }\n@@ -1021,7 +1021,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n             Static(def_id) => {\n                 // TODO(solson): Mark constants and statics as read-only and cache their values.\n                 let mir = self.load_mir(def_id);\n-                self.call_nested(&mir)?.unwrap()\n+                self.gecx.call(&mir)?.unwrap()\n             }\n \n             Projection(ref proj) => {\n@@ -1426,10 +1426,9 @@ pub fn interpret_start_points<'a, 'tcx>(\n                 debug!(\"Interpreting: {}\", item.name);\n \n                 let mut gecx = GlobalEvalContext::new(tcx, mir_map);\n-                let mut fecx = FnEvalContext::new(&mut gecx);\n-                match fecx.call_nested(mir) {\n+                match gecx.call(mir) {\n                     Ok(Some(return_ptr)) => if log_enabled!(::log::LogLevel::Debug) {\n-                        fecx.memory.dump(return_ptr.alloc_id);\n+                        gecx.memory.dump(return_ptr.alloc_id);\n                     },\n                     Ok(None) => warn!(\"diverging function returned\"),\n                     Err(_e) => {"}]}