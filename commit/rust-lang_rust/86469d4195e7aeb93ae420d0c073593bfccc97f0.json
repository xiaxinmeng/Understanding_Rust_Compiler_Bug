{"sha": "86469d4195e7aeb93ae420d0c073593bfccc97f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NDY5ZDQxOTVlN2FlYjkzYWU0MjBkMGMwNzM1OTNiZmNjYzk3ZjA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-15T20:15:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-15T20:15:29Z"}, "message": "Merge #2252\n\n2252: Fix parsing of \"postfix\" range expressions. r=matklad a=goffrie\n\nRight now they are handled in `postfix_dot_expr`, but that doesn't allow it to\r\ncorrectly handle precedence. Integrate it more tightly with the Pratt parser\r\ninstead.\r\n\r\nAlso includes a drive-by fix for parsing `match .. {}`.\r\n\r\nFixes #2242.\n\nCo-authored-by: Geoffry Song <goffrie@gmail.com>", "tree": {"sha": "a2fd2d9a7be1b3310b842020c489197ebf2683c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2fd2d9a7be1b3310b842020c489197ebf2683c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86469d4195e7aeb93ae420d0c073593bfccc97f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzwdhCRBK7hj4Ov3rIwAAdHIIAGEQfc5w1Wulz9pBJpXslGoM\nCmwXY/L9sAFsX7ckS/KDNwKLrzrFoSkvYyimTQGKWjSItMwP0Sm2bDOE0uDztR6U\nlreYtoSGsmFuMY66J8Bf73/H7Zim1O2PGD7SFOf7GYhg3+PdhZnKxSlbjkXVuv6s\nKnoE4emFl3PG+YUA+Cf2r3JrBACqK+Y/1Dj43LwZdRlEDKeLl/xJmlL30MxdJG43\ne66l+KyoqgHotiGFzX3naTJXqOf9uBP5dEMqgqLV14JR/HVnZE/YIR+mpUL9q3Wy\nWGbdEc3H3IvOvsgpscz9UBhB+1XaS+ztTNlh3TCITksOaj7wV47jMoLlzKTy0R4=\n=XMB/\n-----END PGP SIGNATURE-----\n", "payload": "tree a2fd2d9a7be1b3310b842020c489197ebf2683c3\nparent 9c3e35df3327e4798867a005d8d22daca99825a1\nparent 5645c153e0379874d1f44ab149c3ec9257812692\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573848929 +0000\ncommitter GitHub <noreply@github.com> 1573848929 +0000\n\nMerge #2252\n\n2252: Fix parsing of \"postfix\" range expressions. r=matklad a=goffrie\n\nRight now they are handled in `postfix_dot_expr`, but that doesn't allow it to\r\ncorrectly handle precedence. Integrate it more tightly with the Pratt parser\r\ninstead.\r\n\r\nAlso includes a drive-by fix for parsing `match .. {}`.\r\n\r\nFixes #2242.\n\nCo-authored-by: Geoffry Song <goffrie@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86469d4195e7aeb93ae420d0c073593bfccc97f0", "html_url": "https://github.com/rust-lang/rust/commit/86469d4195e7aeb93ae420d0c073593bfccc97f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86469d4195e7aeb93ae420d0c073593bfccc97f0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c3e35df3327e4798867a005d8d22daca99825a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3e35df3327e4798867a005d8d22daca99825a1", "html_url": "https://github.com/rust-lang/rust/commit/9c3e35df3327e4798867a005d8d22daca99825a1"}, {"sha": "5645c153e0379874d1f44ab149c3ec9257812692", "url": "https://api.github.com/repos/rust-lang/rust/commits/5645c153e0379874d1f44ab149c3ec9257812692", "html_url": "https://github.com/rust-lang/rust/commit/5645c153e0379874d1f44ab149c3ec9257812692"}], "stats": {"total": 238, "additions": 207, "deletions": 31}, "files": [{"sha": "81d4f75f99a4e4748225cd49e672452e4e6ea1af", "filename": "crates/ra_parser/src/grammar/expressions.rs", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=86469d4195e7aeb93ae420d0c073593bfccc97f0", "patch": "@@ -290,6 +290,22 @@ fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) -> (Option<CompletedMarker>,\n         let m = lhs.precede(p);\n         p.bump(op);\n \n+        if is_range {\n+            // test postfix_range\n+            // fn foo() {\n+            //     let x = 1..;\n+            //     match 1.. { _ => () };\n+            //     match a.b()..S { _ => () };\n+            // }\n+            let has_trailing_expression =\n+                p.at_ts(EXPR_FIRST) && !(r.forbid_structs && p.at(T!['{']));\n+            if !has_trailing_expression {\n+                // no RHS\n+                lhs = m.complete(p, RANGE_EXPR);\n+                break;\n+            }\n+        }\n+\n         expr_bp(p, r, op_bp + 1);\n         lhs = m.complete(p, if is_range { RANGE_EXPR } else { BIN_EXPR });\n     }\n@@ -330,7 +346,7 @@ fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)>\n                 if p.at(op) {\n                     m = p.start();\n                     p.bump(op);\n-                    if p.at_ts(EXPR_FIRST) {\n+                    if p.at_ts(EXPR_FIRST) && !(r.forbid_structs && p.at(T!['{'])) {\n                         expr_bp(p, r, 2);\n                     }\n                     return Some((m.complete(p, RANGE_EXPR), BlockLike::NotBlock));\n@@ -344,13 +360,7 @@ fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)>\n             // }\n             //\n             let (lhs, blocklike) = atom::atom_expr(p, r)?;\n-            return Some(postfix_expr(\n-                p,\n-                lhs,\n-                blocklike,\n-                !(r.prefer_stmt && blocklike.is_block()),\n-                r.forbid_structs,\n-            ));\n+            return Some(postfix_expr(p, lhs, blocklike, !(r.prefer_stmt && blocklike.is_block())));\n         }\n     };\n     // parse the interior of the unary expression\n@@ -366,7 +376,6 @@ fn postfix_expr(\n     // `while true {break}; ();`\n     mut block_like: BlockLike,\n     mut allow_calls: bool,\n-    forbid_structs: bool,\n ) -> (CompletedMarker, BlockLike) {\n     loop {\n         lhs = match p.current() {\n@@ -380,7 +389,7 @@ fn postfix_expr(\n             // }\n             T!['('] if allow_calls => call_expr(p, lhs),\n             T!['['] if allow_calls => index_expr(p, lhs),\n-            T![.] => match postfix_dot_expr(p, lhs, forbid_structs) {\n+            T![.] => match postfix_dot_expr(p, lhs) {\n                 Ok(it) => it,\n                 Err(it) => {\n                     lhs = it;\n@@ -398,7 +407,6 @@ fn postfix_expr(\n     fn postfix_dot_expr(\n         p: &mut Parser,\n         lhs: CompletedMarker,\n-        forbid_structs: bool,\n     ) -> Result<CompletedMarker, CompletedMarker> {\n         assert!(p.at(T![.]));\n         if p.nth(1) == IDENT && (p.nth(2) == T!['('] || p.nth_at(2, T![::])) {\n@@ -418,25 +426,8 @@ fn postfix_expr(\n             return Ok(m.complete(p, AWAIT_EXPR));\n         }\n \n-        // test postfix_range\n-        // fn foo() {\n-        //     let x = 1..;\n-        //     match 1.. { _ => () };\n-        //     match a.b()..S { _ => () };\n-        // }\n-        for &(op, la) in &[(T![..=], 3), (T![..], 2)] {\n-            if p.at(op) {\n-                let next_token = p.nth(la);\n-                let has_trailing_expression =\n-                    !(forbid_structs && next_token == T!['{']) && EXPR_FIRST.contains(next_token);\n-                return if has_trailing_expression {\n-                    Err(lhs)\n-                } else {\n-                    let m = lhs.precede(p);\n-                    p.bump(op);\n-                    Ok(m.complete(p, RANGE_EXPR))\n-                };\n-            }\n+        if p.at(T![..=]) || p.at(T![..]) {\n+            return Err(lhs);\n         }\n \n         Ok(field_expr(p, lhs))"}, {"sha": "277532a8cbf68fd705d28ec4c548abd9caac99d1", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=86469d4195e7aeb93ae420d0c073593bfccc97f0", "patch": "@@ -16,7 +16,7 @@ use crate::{\n };\n \n pub use self::{\n-    expr_extensions::{ArrayExprKind, BinOp, ElseBranch, LiteralKind, PrefixOp},\n+    expr_extensions::{ArrayExprKind, BinOp, ElseBranch, LiteralKind, PrefixOp, RangeOp},\n     extensions::{FieldKind, PathSegmentKind, SelfParamKind, StructKind, TypeBoundKind},\n     generated::*,\n     tokens::*,"}, {"sha": "7c53aa934400ae411849aa73d784a12bb83b546b", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=86469d4195e7aeb93ae420d0c073593bfccc97f0", "patch": "@@ -189,6 +189,52 @@ impl ast::BinExpr {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum RangeOp {\n+    /// `..`\n+    Exclusive,\n+    /// `..=`\n+    Inclusive,\n+}\n+\n+impl ast::RangeExpr {\n+    fn op_details(&self) -> Option<(usize, SyntaxToken, RangeOp)> {\n+        self.syntax().children_with_tokens().enumerate().find_map(|(ix, child)| {\n+            let token = child.into_token()?;\n+            let bin_op = match token.kind() {\n+                T![..] => RangeOp::Exclusive,\n+                T![..=] => RangeOp::Inclusive,\n+                _ => return None,\n+            };\n+            Some((ix, token, bin_op))\n+        })\n+    }\n+\n+    pub fn op_kind(&self) -> Option<RangeOp> {\n+        self.op_details().map(|t| t.2)\n+    }\n+\n+    pub fn op_token(&self) -> Option<SyntaxToken> {\n+        self.op_details().map(|t| t.1)\n+    }\n+\n+    pub fn start(&self) -> Option<ast::Expr> {\n+        let op_ix = self.op_details()?.0;\n+        self.syntax()\n+            .children_with_tokens()\n+            .take(op_ix)\n+            .find_map(|it| ast::Expr::cast(it.into_node()?))\n+    }\n+\n+    pub fn end(&self) -> Option<ast::Expr> {\n+        let op_ix = self.op_details()?.0;\n+        self.syntax()\n+            .children_with_tokens()\n+            .skip(op_ix + 1)\n+            .find_map(|it| ast::Expr::cast(it.into_node()?))\n+    }\n+}\n+\n impl ast::IndexExpr {\n     pub fn base(&self) -> Option<ast::Expr> {\n         children(self).nth(0)"}, {"sha": "6c171df8d5e323429e0bb6b7dd15c5d3ba986747", "filename": "crates/ra_syntax/src/syntax_error.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_error.rs?ref=86469d4195e7aeb93ae420d0c073593bfccc97f0", "patch": "@@ -83,6 +83,7 @@ pub enum SyntaxErrorKind {\n     InvalidMatchInnerAttr,\n     InvalidTupleIndexFormat,\n     VisibilityNotAllowed,\n+    InclusiveRangeMissingEnd,\n }\n \n impl fmt::Display for SyntaxErrorKind {\n@@ -103,6 +104,9 @@ impl fmt::Display for SyntaxErrorKind {\n             VisibilityNotAllowed => {\n                 write!(f, \"unnecessary visibility qualifier\")\n             }\n+            InclusiveRangeMissingEnd => {\n+                write!(f, \"An inclusive range must have an end expression\")\n+            }\n         }\n     }\n }"}, {"sha": "222ac15f871b2f08ada52b795e8a3fdf9cacc517", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=86469d4195e7aeb93ae420d0c073593bfccc97f0", "patch": "@@ -103,6 +103,7 @@ pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n                 ast::FieldExpr(it) => { validate_numeric_name(it.name_ref(), &mut errors) },\n                 ast::RecordField(it) => { validate_numeric_name(it.name_ref(), &mut errors) },\n                 ast::Visibility(it) => { validate_visibility(it, &mut errors) },\n+                ast::RangeExpr(it) => { validate_range_expr(it, &mut errors) },\n                 _ => (),\n             }\n         }\n@@ -227,3 +228,12 @@ fn validate_visibility(vis: ast::Visibility, errors: &mut Vec<SyntaxError>) {\n             .push(SyntaxError::new(SyntaxErrorKind::VisibilityNotAllowed, vis.syntax.text_range()))\n     }\n }\n+\n+fn validate_range_expr(expr: ast::RangeExpr, errors: &mut Vec<SyntaxError>) {\n+    if expr.op_kind() == Some(ast::RangeOp::Inclusive) && expr.end().is_none() {\n+        errors.push(SyntaxError::new(\n+            SyntaxErrorKind::InclusiveRangeMissingEnd,\n+            expr.syntax().text_range(),\n+        ));\n+    }\n+}"}, {"sha": "0b4ed7a2bc20595bcc63c59a9119f8e60afee18b", "filename": "crates/ra_syntax/test_data/parser/err/0038_endless_inclusive_range.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.rs?ref=86469d4195e7aeb93ae420d0c073593bfccc97f0", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    0..=;\n+    ..=;\n+}"}, {"sha": "3810b9680a309824016ba1f80b5edc783bec3498", "filename": "crates/ra_syntax/test_data/parser/err/0038_endless_inclusive_range.txt", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.txt", "raw_url": "https://github.com/rust-lang/rust/raw/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0038_endless_inclusive_range.txt?ref=86469d4195e7aeb93ae420d0c073593bfccc97f0", "patch": "@@ -0,0 +1,30 @@\n+SOURCE_FILE@[0; 33)\n+  FN_DEF@[0; 32)\n+    FN_KW@[0; 2) \"fn\"\n+    WHITESPACE@[2; 3) \" \"\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8) \"(\"\n+      R_PAREN@[8; 9) \")\"\n+    WHITESPACE@[9; 10) \" \"\n+    BLOCK_EXPR@[10; 32)\n+      BLOCK@[10; 32)\n+        L_CURLY@[10; 11) \"{\"\n+        WHITESPACE@[11; 16) \"\\n    \"\n+        EXPR_STMT@[16; 21)\n+          RANGE_EXPR@[16; 20)\n+            LITERAL@[16; 17)\n+              INT_NUMBER@[16; 17) \"0\"\n+            DOTDOTEQ@[17; 20) \"..=\"\n+          SEMI@[20; 21) \";\"\n+        WHITESPACE@[21; 26) \"\\n    \"\n+        EXPR_STMT@[26; 30)\n+          RANGE_EXPR@[26; 29)\n+            DOTDOTEQ@[26; 29) \"..=\"\n+          SEMI@[29; 30) \";\"\n+        WHITESPACE@[30; 31) \"\\n\"\n+        R_CURLY@[31; 32) \"}\"\n+  WHITESPACE@[32; 33) \"\\n\"\n+error [16; 20): An inclusive range must have an end expression\n+error [26; 29): An inclusive range must have an end expression"}, {"sha": "f063ffadb3db6a934fcebb7ad69bc2365928d57b", "filename": "crates/ra_syntax/test_data/parser/ok/0060_as_range.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.rs?ref=86469d4195e7aeb93ae420d0c073593bfccc97f0", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    0 as usize ..;\n+    1 + 2 as usize ..;\n+}"}, {"sha": "ad0c4a3fef0cd1a19b1d510e3558ec0eccb52779", "filename": "crates/ra_syntax/test_data/parser/ok/0060_as_range.txt", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.txt", "raw_url": "https://github.com/rust-lang/rust/raw/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0060_as_range.txt?ref=86469d4195e7aeb93ae420d0c073593bfccc97f0", "patch": "@@ -0,0 +1,56 @@\n+SOURCE_FILE@[0; 56)\n+  FN_DEF@[0; 55)\n+    FN_KW@[0; 2) \"fn\"\n+    WHITESPACE@[2; 3) \" \"\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8) \"(\"\n+      R_PAREN@[8; 9) \")\"\n+    WHITESPACE@[9; 10) \" \"\n+    BLOCK_EXPR@[10; 55)\n+      BLOCK@[10; 55)\n+        L_CURLY@[10; 11) \"{\"\n+        WHITESPACE@[11; 16) \"\\n    \"\n+        EXPR_STMT@[16; 30)\n+          RANGE_EXPR@[16; 29)\n+            CAST_EXPR@[16; 26)\n+              LITERAL@[16; 17)\n+                INT_NUMBER@[16; 17) \"0\"\n+              WHITESPACE@[17; 18) \" \"\n+              AS_KW@[18; 20) \"as\"\n+              WHITESPACE@[20; 21) \" \"\n+              PATH_TYPE@[21; 26)\n+                PATH@[21; 26)\n+                  PATH_SEGMENT@[21; 26)\n+                    NAME_REF@[21; 26)\n+                      IDENT@[21; 26) \"usize\"\n+            WHITESPACE@[26; 27) \" \"\n+            DOTDOT@[27; 29) \"..\"\n+          SEMI@[29; 30) \";\"\n+        WHITESPACE@[30; 35) \"\\n    \"\n+        EXPR_STMT@[35; 53)\n+          RANGE_EXPR@[35; 52)\n+            BIN_EXPR@[35; 49)\n+              LITERAL@[35; 36)\n+                INT_NUMBER@[35; 36) \"1\"\n+              WHITESPACE@[36; 37) \" \"\n+              PLUS@[37; 38) \"+\"\n+              WHITESPACE@[38; 39) \" \"\n+              CAST_EXPR@[39; 49)\n+                LITERAL@[39; 40)\n+                  INT_NUMBER@[39; 40) \"2\"\n+                WHITESPACE@[40; 41) \" \"\n+                AS_KW@[41; 43) \"as\"\n+                WHITESPACE@[43; 44) \" \"\n+                PATH_TYPE@[44; 49)\n+                  PATH@[44; 49)\n+                    PATH_SEGMENT@[44; 49)\n+                      NAME_REF@[44; 49)\n+                        IDENT@[44; 49) \"usize\"\n+            WHITESPACE@[49; 50) \" \"\n+            DOTDOT@[50; 52) \"..\"\n+          SEMI@[52; 53) \";\"\n+        WHITESPACE@[53; 54) \"\\n\"\n+        R_CURLY@[54; 55) \"}\"\n+  WHITESPACE@[55; 56) \"\\n\""}, {"sha": "2c4ed11e1e5dd438e51e62988ce6356b7bbf10b6", "filename": "crates/ra_syntax/test_data/parser/ok/0061_match_full_range.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.rs?ref=86469d4195e7aeb93ae420d0c073593bfccc97f0", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    match .. {\n+    }\n+}"}, {"sha": "bdfac9b76434f9f9dd906b70ce814d23800ee338", "filename": "crates/ra_syntax/test_data/parser/ok/0061_match_full_range.txt", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.txt", "raw_url": "https://github.com/rust-lang/rust/raw/86469d4195e7aeb93ae420d0c073593bfccc97f0/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0061_match_full_range.txt?ref=86469d4195e7aeb93ae420d0c073593bfccc97f0", "patch": "@@ -0,0 +1,27 @@\n+SOURCE_FILE@[0; 35)\n+  FN_DEF@[0; 34)\n+    FN_KW@[0; 2) \"fn\"\n+    WHITESPACE@[2; 3) \" \"\n+    NAME@[3; 7)\n+      IDENT@[3; 7) \"main\"\n+    PARAM_LIST@[7; 9)\n+      L_PAREN@[7; 8) \"(\"\n+      R_PAREN@[8; 9) \")\"\n+    WHITESPACE@[9; 10) \" \"\n+    BLOCK_EXPR@[10; 34)\n+      BLOCK@[10; 34)\n+        L_CURLY@[10; 11) \"{\"\n+        WHITESPACE@[11; 16) \"\\n    \"\n+        MATCH_EXPR@[16; 32)\n+          MATCH_KW@[16; 21) \"match\"\n+          WHITESPACE@[21; 22) \" \"\n+          RANGE_EXPR@[22; 24)\n+            DOTDOT@[22; 24) \"..\"\n+          WHITESPACE@[24; 25) \" \"\n+          MATCH_ARM_LIST@[25; 32)\n+            L_CURLY@[25; 26) \"{\"\n+            WHITESPACE@[26; 31) \"\\n    \"\n+            R_CURLY@[31; 32) \"}\"\n+        WHITESPACE@[32; 33) \"\\n\"\n+        R_CURLY@[33; 34) \"}\"\n+  WHITESPACE@[34; 35) \"\\n\""}]}