{"sha": "5c0656789dfde752ea7af001e3d04a2a916685cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMDY1Njc4OWRmZGU3NTJlYTdhZjAwMWUzZDA0YTJhOTE2Njg1Y2Y=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2018-12-06T12:50:04Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-03T16:22:18Z"}, "message": "Add internal lints default_hash_types and usage_of_ty_tykind", "tree": {"sha": "e04e63c9288e0d35f90b25e1438da9bdf0f771a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e04e63c9288e0d35f90b25e1438da9bdf0f771a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c0656789dfde752ea7af001e3d04a2a916685cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlyk3boACgkQaTCGhp1Q\nZjck8hAAhx3X1SBG8QKMvktzfE5HY+SimpjozlT5um0KRgItKfHjQlHhCqydomRe\nE1J+R80/HWcZdX/wMDmwonRHlCZ7VqTi6BtQVNk7MxcU2B2NvJ4bd/agKFgo1VbL\neMKUdD9euSz77CPmWn8xg7hNJB+ZqGW61LzaFUHNoPhT3TyAlRB52ZS0IEYufbTo\nVZU88uvCwnFkQSaGZ023X+t+aGTDzcDuJ01qK0dhj6rBhByNQ/aje4hTNePlW8TT\nxqW0AK25Z21BYsiMwMhuW4zyVAfAcw3P+7qI8heBMAT0VUkSEy5Rw8SWyt9iZwJW\ngDRGl/cVfxyl9K4mIEJoJk/QPIaQqrkZ9Pf8QOpK4PTg2FDZ8nmNSvfsGjynWW9A\n4sx+Ej7aZZTGWQIkLNcSakgj3Cq5VfEwrZerZAhVkYsUAwQVXnkur/x5Vh3mepbM\nujTwHvEWDXefPNIO9h/1kv0HNJggU8Gae89/GgvewGChZmm0b4SkqIeRwayEqPB+\nW5lNjvEu93IgYMJrm8l5dqahsuyZ5Nrg7P9JDexR+B53H+xmI4pqQrrdXmzjvBAl\nsiC22Qj0rBeiDc9/eAStX8cR4kHPAOUfsg3dIsiN0LcBiv/m3r85xBf0KgqMflnV\nQeuG0V9bnezXIcLQtDR3CXUGGE5fw5TqxlcwXmSyltTsz1Dn4CE=\n=eav1\n-----END PGP SIGNATURE-----", "payload": "tree e04e63c9288e0d35f90b25e1438da9bdf0f771a2\nparent c796b1f46aba25880942a461c3d1079250b9c8ac\nauthor flip1995 <hello@philkrones.com> 1544100604 +0100\ncommitter flip1995 <hello@philkrones.com> 1554308538 +0200\n\nAdd internal lints default_hash_types and usage_of_ty_tykind\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0656789dfde752ea7af001e3d04a2a916685cf", "html_url": "https://github.com/rust-lang/rust/commit/5c0656789dfde752ea7af001e3d04a2a916685cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c0656789dfde752ea7af001e3d04a2a916685cf/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c796b1f46aba25880942a461c3d1079250b9c8ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c796b1f46aba25880942a461c3d1079250b9c8ac", "html_url": "https://github.com/rust-lang/rust/commit/c796b1f46aba25880942a461c3d1079250b9c8ac"}], "stats": {"total": 166, "additions": 166, "deletions": 0}, "files": [{"sha": "d4cf18123c3e3cb1610d0f4947dfd2ce7aa29836", "filename": "src/librustc/lint/internal.rs", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/5c0656789dfde752ea7af001e3d04a2a916685cf/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0656789dfde752ea7af001e3d04a2a916685cf/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=5c0656789dfde752ea7af001e3d04a2a916685cf", "patch": "@@ -0,0 +1,165 @@\n+// Copyright 2012-2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Some lints that are only useful in the compiler or crates that use compiler internals, such as\n+//! Clippy.\n+\n+use errors::Applicability;\n+use hir::{Expr, ExprKind, PatKind, Path, QPath, Ty, TyKind};\n+use lint::{\n+    EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n+};\n+use rustc_data_structures::fx::FxHashMap;\n+use syntax::ast::Ident;\n+\n+declare_lint! {\n+    pub DEFAULT_HASH_TYPES,\n+    Warn,\n+    \"forbid HashMap and HashSet and suggest the FxHash* variants\"\n+}\n+\n+pub struct DefaultHashTypes {\n+    map: FxHashMap<String, String>,\n+}\n+\n+impl DefaultHashTypes {\n+    pub fn new() -> Self {\n+        let mut map = FxHashMap::default();\n+        map.insert(\"HashMap\".to_string(), \"FxHashMap\".to_string());\n+        map.insert(\"HashSet\".to_string(), \"FxHashSet\".to_string());\n+        Self { map }\n+    }\n+}\n+\n+impl LintPass for DefaultHashTypes {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DEFAULT_HASH_TYPES)\n+    }\n+}\n+\n+impl EarlyLintPass for DefaultHashTypes {\n+    fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n+        let ident_string = ident.to_string();\n+        if let Some(replace) = self.map.get(&ident_string) {\n+            let msg = format!(\n+                \"Prefer {} over {}, it has better performance\",\n+                replace, ident_string\n+            );\n+            let mut db = cx.struct_span_lint(DEFAULT_HASH_TYPES, ident.span, &msg);\n+            db.span_suggestion_with_applicability(\n+                ident.span,\n+                \"use\",\n+                replace.to_string(),\n+                Applicability::MaybeIncorrect, // FxHashMap, ... needs another import\n+            );\n+            db.note(&format!(\n+                \"a `use rustc_data_structures::fx::{}` may be necessary\",\n+                replace\n+            ))\n+            .emit();\n+        }\n+    }\n+}\n+\n+declare_lint! {\n+    pub USAGE_OF_TY_TYKIND,\n+    Warn,\n+    \"Usage of `ty::TyKind` outside of the `ty::sty` module\"\n+}\n+\n+pub struct TyKindUsage;\n+\n+impl LintPass for TyKindUsage {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(USAGE_OF_TY_TYKIND)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyKindUsage {\n+    fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &'tcx Expr) {\n+        let qpaths = match &expr.node {\n+            ExprKind::Match(_, arms, _) => {\n+                let mut qpaths = vec![];\n+                for arm in arms {\n+                    for pat in &arm.pats {\n+                        match &pat.node {\n+                            PatKind::Path(qpath) | PatKind::TupleStruct(qpath, ..) => {\n+                                qpaths.push(qpath)\n+                            }\n+                            _ => (),\n+                        }\n+                    }\n+                }\n+                qpaths\n+            }\n+            ExprKind::Path(qpath) => vec![qpath],\n+            _ => vec![],\n+        };\n+        for qpath in qpaths {\n+            if let QPath::Resolved(_, path) = qpath {\n+                let segments_iter = path.segments.iter().rev().skip(1).rev();\n+\n+                if let Some(last) = segments_iter.clone().last() {\n+                    if last.ident.as_str() == \"TyKind\" {\n+                        let path = Path {\n+                            span: path.span.with_hi(last.ident.span.hi()),\n+                            def: path.def,\n+                            segments: segments_iter.cloned().collect(),\n+                        };\n+\n+                        if let Some(def) = last.def {\n+                            if def\n+                                .def_id()\n+                                .match_path(cx.tcx, &[\"rustc\", \"ty\", \"sty\", \"TyKind\"])\n+                            {\n+                                cx.struct_span_lint(\n+                                    USAGE_OF_TY_TYKIND,\n+                                    path.span,\n+                                    \"usage of `ty::TyKind::<kind>`\",\n+                                )\n+                                .span_suggestion_with_applicability(\n+                                    path.span,\n+                                    \"try using ty::<kind> directly\",\n+                                    \"ty\".to_string(),\n+                                    Applicability::MaybeIncorrect, // ty maybe needs an import\n+                                ).emit();\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    fn check_ty(&mut self, cx: &LateContext<'_, '_>, ty: &'tcx Ty) {\n+        if let TyKind::Path(qpath) = &ty.node {\n+            if let QPath::Resolved(_, path) = qpath {\n+                if let Some(last) = path.segments.iter().last() {\n+                    if last.ident.as_str() == \"TyKind\" {\n+                        if let Some(def) = last.def {\n+                            if def\n+                                .def_id()\n+                                .match_path(cx.tcx, &[\"rustc\", \"ty\", \"sty\", \"TyKind\"])\n+                            {\n+                                cx.struct_span_lint(\n+                                    USAGE_OF_TY_TYKIND,\n+                                    path.span,\n+                                    \"usage of `ty::TyKind`\",\n+                                )\n+                                .help(\"try using `ty::Ty` instead\")\n+                                .emit();\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "b54d26054da1c46ed7c59795ab25e7504584f708", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c0656789dfde752ea7af001e3d04a2a916685cf/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0656789dfde752ea7af001e3d04a2a916685cf/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=5c0656789dfde752ea7af001e3d04a2a916685cf", "patch": "@@ -574,6 +574,7 @@ impl_stable_hash_for!(enum self::LintSource {\n pub type LevelSource = (Level, LintSource);\n \n pub mod builtin;\n+pub mod internal;\n mod context;\n mod levels;\n "}]}