{"sha": "9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "node_id": "C_kwDOAAsO6NoAKDlmMTVjNGQwOGI3ZDVlZWM3N2Y2YTZlNGNhYTJlZTcyMGZiYzUxYzI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-28T14:20:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-28T14:20:22Z"}, "message": "Rollup merge of #93158 - haraldh:wasi_sock_accept, r=dtolnay\n\nwasi: implement `sock_accept` and enable networking\n\nWith the addition of `sock_accept()` to snapshot1, simple networking via a passed `TcpListener` is possible. This PR implements the basics to make a simple server work.\n\nSee also:\n* [wasmtime tracking issue](https://github.com/bytecodealliance/wasmtime/issues/3730)\n* [wasmtime PR](https://github.com/bytecodealliance/wasmtime/pull/3711)\n\nTODO:\n* [ ] Discussion of `SocketAddr` return value for `::accept()`\n\n```rust\n        Ok((\n            TcpStream::from_inner(unsafe { Socket::from_raw_fd(fd as _) }),\n            // WASI has no concept of SocketAddr yet\n            // return an unspecified IPv4Addr\n            SocketAddr::new(Ipv4Addr::UNSPECIFIED.into(), 0),\n        ))\n```", "tree": {"sha": "12a423f1e03aa049bc6a990199b6d9c464260602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12a423f1e03aa049bc6a990199b6d9c464260602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh8/umCRBK7hj4Ov3rIwAAJKEIAJ39xgQTFJnNf5Pknz1/V5TM\njFdtxslSojdM3oKj1HqPQV61fW07Y9DtMQBQyspxEcdmr/31MfLKxr1Dm05T424l\n2LfKTzoEPal+yT7n3z/pM8joTMIydzO+KceRCbj885E1u1eia+Ri9vcSuREsuAn5\nOHaIlsPvgBL0dwmCMAFB/FEiI6OLJLXYlPONGXICcd97SuBXeHHCo/vM4U6pcE31\nWVHxAHD/Gk2EiohqfZ1g7EiWMvlK3y2SsvW6svnHkVnOicJj7+PQlKt8kDI+Gmnz\n9ZhycCfWBt2LNHqpmUzd6bbKhA47i3tkJKuMhYwub6UGmwGdHmmkI/yoVviDJVQ=\n=cetg\n-----END PGP SIGNATURE-----\n", "payload": "tree 12a423f1e03aa049bc6a990199b6d9c464260602\nparent db6ca2532579bb330366a1265856f3785b78e3a9\nparent d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643379622 +0100\ncommitter GitHub <noreply@github.com> 1643379622 +0100\n\nRollup merge of #93158 - haraldh:wasi_sock_accept, r=dtolnay\n\nwasi: implement `sock_accept` and enable networking\n\nWith the addition of `sock_accept()` to snapshot1, simple networking via a passed `TcpListener` is possible. This PR implements the basics to make a simple server work.\n\nSee also:\n* [wasmtime tracking issue](https://github.com/bytecodealliance/wasmtime/issues/3730)\n* [wasmtime PR](https://github.com/bytecodealliance/wasmtime/pull/3711)\n\nTODO:\n* [ ] Discussion of `SocketAddr` return value for `::accept()`\n\n```rust\n        Ok((\n            TcpStream::from_inner(unsafe { Socket::from_raw_fd(fd as _) }),\n            // WASI has no concept of SocketAddr yet\n            // return an unspecified IPv4Addr\n            SocketAddr::new(Ipv4Addr::UNSPECIFIED.into(), 0),\n        ))\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "html_url": "https://github.com/rust-lang/rust/commit/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db6ca2532579bb330366a1265856f3785b78e3a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/db6ca2532579bb330366a1265856f3785b78e3a9", "html_url": "https://github.com/rust-lang/rust/commit/db6ca2532579bb330366a1265856f3785b78e3a9"}, {"sha": "d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30", "html_url": "https://github.com/rust-lang/rust/commit/d2a13693c2858b6b0fe1feb2dfff604bc2b0aa30"}], "stats": {"total": 172, "additions": 131, "deletions": 41}, "files": [{"sha": "ab88bbe1491f0124ec5569ad775775c66f38fb94", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "patch": "@@ -1473,7 +1473,7 @@ checksum = \"7abc8dd8451921606d809ba32e95b6111925cd2906060d2dcc29c070220503eb\"\n dependencies = [\n  \"cfg-if 0.1.10\",\n  \"libc\",\n- \"wasi\",\n+ \"wasi 0.9.0+wasi-snapshot-preview1\",\n ]\n \n [[package]]\n@@ -1484,7 +1484,7 @@ checksum = \"ee8025cf36f917e6a52cce185b7c7177689b838b7ec138364e50cc2277a56cf4\"\n dependencies = [\n  \"cfg-if 0.1.10\",\n  \"libc\",\n- \"wasi\",\n+ \"wasi 0.9.0+wasi-snapshot-preview1\",\n ]\n \n [[package]]\n@@ -4854,7 +4854,7 @@ dependencies = [\n  \"rustc-demangle\",\n  \"std_detect\",\n  \"unwind\",\n- \"wasi\",\n+ \"wasi 0.11.0+wasi-snapshot-preview1\",\n ]\n \n [[package]]\n@@ -5612,6 +5612,12 @@ name = \"wasi\"\n version = \"0.9.0+wasi-snapshot-preview1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n+\n+[[package]]\n+name = \"wasi\"\n+version = \"0.11.0+wasi-snapshot-preview1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-alloc\","}, {"sha": "c54f38615c5801de3e7f97b18149df259c0bac9b", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "patch": "@@ -45,7 +45,7 @@ fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }\n hermit-abi = { version = \"0.1.19\", features = ['rustc-dep-of-std'] }\n \n [target.wasm32-wasi.dependencies]\n-wasi = { version = \"0.9.0\", features = ['rustc-dep-of-std'], default-features = false }\n+wasi = { version = \"0.11.0\", features = ['rustc-dep-of-std'], default-features = false }\n \n [features]\n backtrace = ["}, {"sha": "37126069f942b218d0f1f8bef319d8bab01f7b34", "filename": "library/std/src/os/wasi/fs.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs?ref=9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "patch": "@@ -250,6 +250,21 @@ impl FileExt for fs::File {\n     }\n \n     fn advise(&self, offset: u64, len: u64, advice: u8) -> io::Result<()> {\n+        let advice = match advice {\n+            a if a == wasi::ADVICE_NORMAL.raw() => wasi::ADVICE_NORMAL,\n+            a if a == wasi::ADVICE_SEQUENTIAL.raw() => wasi::ADVICE_SEQUENTIAL,\n+            a if a == wasi::ADVICE_RANDOM.raw() => wasi::ADVICE_RANDOM,\n+            a if a == wasi::ADVICE_WILLNEED.raw() => wasi::ADVICE_WILLNEED,\n+            a if a == wasi::ADVICE_DONTNEED.raw() => wasi::ADVICE_DONTNEED,\n+            a if a == wasi::ADVICE_NOREUSE.raw() => wasi::ADVICE_NOREUSE,\n+            _ => {\n+                return Err(io::Error::new_const(\n+                    io::ErrorKind::InvalidInput,\n+                    &\"invalid parameter 'advice'\",\n+                ));\n+            }\n+        };\n+\n         self.as_inner().as_inner().advise(offset, len, advice)\n     }\n "}, {"sha": "73c097d4a50abbe647490dc29c4072802f909156", "filename": "library/std/src/os/wasi/net/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fnet%2Fmod.rs?ref=9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "patch": "@@ -1,3 +1,23 @@\n //! WASI-specific networking functionality\n \n #![unstable(feature = \"wasi_ext\", issue = \"71213\")]\n+\n+use crate::io;\n+use crate::net;\n+use crate::sys_common::AsInner;\n+\n+/// WASI-specific extensions to [`std::net::TcpListener`].\n+///\n+/// [`std::net::TcpListener`]: crate::net::TcpListener\n+pub trait TcpListenerExt {\n+    /// Accept a socket.\n+    ///\n+    /// This corresponds to the `sock_accept` syscall.\n+    fn sock_accept(&self, flags: u16) -> io::Result<u32>;\n+}\n+\n+impl TcpListenerExt for net::TcpListener {\n+    fn sock_accept(&self, flags: u16) -> io::Result<u32> {\n+        self.as_inner().as_inner().as_inner().sock_accept(flags)\n+    }\n+}"}, {"sha": "0b9c8e61db84c4ec76c3017bd6d0b3b804148637", "filename": "library/std/src/sys/wasi/fd.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs?ref=9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "patch": "@@ -228,6 +228,10 @@ impl WasiFd {\n         unsafe { wasi::path_remove_directory(self.as_raw_fd() as wasi::Fd, path).map_err(err2io) }\n     }\n \n+    pub fn sock_accept(&self, flags: wasi::Fdflags) -> io::Result<wasi::Fd> {\n+        unsafe { wasi::sock_accept(self.as_raw_fd() as wasi::Fd, flags).map_err(err2io) }\n+    }\n+\n     pub fn sock_recv(\n         &self,\n         ri_data: &mut [IoSliceMut<'_>],"}, {"sha": "f878941939ce8915f60a760bb8f5eaf493f7ef6e", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "patch": "@@ -61,23 +61,26 @@ pub fn decode_error_kind(errno: i32) -> std_io::ErrorKind {\n     if errno > u16::MAX as i32 || errno < 0 {\n         return Uncategorized;\n     }\n-    match errno as u16 {\n-        wasi::ERRNO_CONNREFUSED => ConnectionRefused,\n-        wasi::ERRNO_CONNRESET => ConnectionReset,\n-        wasi::ERRNO_PERM | wasi::ERRNO_ACCES => PermissionDenied,\n-        wasi::ERRNO_PIPE => BrokenPipe,\n-        wasi::ERRNO_NOTCONN => NotConnected,\n-        wasi::ERRNO_CONNABORTED => ConnectionAborted,\n-        wasi::ERRNO_ADDRNOTAVAIL => AddrNotAvailable,\n-        wasi::ERRNO_ADDRINUSE => AddrInUse,\n-        wasi::ERRNO_NOENT => NotFound,\n-        wasi::ERRNO_INTR => Interrupted,\n-        wasi::ERRNO_INVAL => InvalidInput,\n-        wasi::ERRNO_TIMEDOUT => TimedOut,\n-        wasi::ERRNO_EXIST => AlreadyExists,\n-        wasi::ERRNO_AGAIN => WouldBlock,\n-        wasi::ERRNO_NOSYS => Unsupported,\n-        wasi::ERRNO_NOMEM => OutOfMemory,\n+\n+    match errno {\n+        e if e == wasi::ERRNO_CONNREFUSED.raw().into() => ConnectionRefused,\n+        e if e == wasi::ERRNO_CONNRESET.raw().into() => ConnectionReset,\n+        e if e == wasi::ERRNO_PERM.raw().into() || e == wasi::ERRNO_ACCES.raw().into() => {\n+            PermissionDenied\n+        }\n+        e if e == wasi::ERRNO_PIPE.raw().into() => BrokenPipe,\n+        e if e == wasi::ERRNO_NOTCONN.raw().into() => NotConnected,\n+        e if e == wasi::ERRNO_CONNABORTED.raw().into() => ConnectionAborted,\n+        e if e == wasi::ERRNO_ADDRNOTAVAIL.raw().into() => AddrNotAvailable,\n+        e if e == wasi::ERRNO_ADDRINUSE.raw().into() => AddrInUse,\n+        e if e == wasi::ERRNO_NOENT.raw().into() => NotFound,\n+        e if e == wasi::ERRNO_INTR.raw().into() => Interrupted,\n+        e if e == wasi::ERRNO_INVAL.raw().into() => InvalidInput,\n+        e if e == wasi::ERRNO_TIMEDOUT.raw().into() => TimedOut,\n+        e if e == wasi::ERRNO_EXIST.raw().into() => AlreadyExists,\n+        e if e == wasi::ERRNO_AGAIN.raw().into() => WouldBlock,\n+        e if e == wasi::ERRNO_NOSYS.raw().into() => Unsupported,\n+        e if e == wasi::ERRNO_NOMEM.raw().into() => OutOfMemory,\n         _ => Uncategorized,\n     }\n }\n@@ -96,6 +99,6 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n     return ret;\n }\n \n-fn err2io(err: wasi::Error) -> std_io::Error {\n-    std_io::Error::from_raw_os_error(err.raw_error().into())\n+fn err2io(err: wasi::Errno) -> std_io::Error {\n+    std_io::Error::from_raw_os_error(err.raw().into())\n }"}, {"sha": "c66e0e4d328ad09a3401fa7517419090d9be5604", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 53, "deletions": 13, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "patch": "@@ -1,5 +1,6 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n \n+use super::err2io;\n use super::fd::WasiFd;\n use crate::convert::TryFrom;\n use crate::fmt;\n@@ -87,24 +88,24 @@ impl TcpStream {\n         unsupported()\n     }\n \n-    pub fn read(&self, _: &mut [u8]) -> io::Result<usize> {\n-        unsupported()\n+    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n+        self.read_vectored(&mut [IoSliceMut::new(buf)])\n     }\n \n-    pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        unsupported()\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n+        self.socket().as_inner().read(bufs)\n     }\n \n     pub fn is_read_vectored(&self) -> bool {\n         true\n     }\n \n-    pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n-        unsupported()\n+    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n+        self.write_vectored(&[IoSlice::new(buf)])\n     }\n \n-    pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n-        unsupported()\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n+        self.socket().as_inner().write(bufs)\n     }\n \n     pub fn is_write_vectored(&self) -> bool {\n@@ -155,8 +156,23 @@ impl TcpStream {\n         unsupported()\n     }\n \n-    pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        unsupported()\n+    pub fn set_nonblocking(&self, state: bool) -> io::Result<()> {\n+        let fdstat = unsafe {\n+            wasi::fd_fdstat_get(self.socket().as_inner().as_raw_fd() as wasi::Fd).map_err(err2io)?\n+        };\n+\n+        let mut flags = fdstat.fs_flags;\n+\n+        if state {\n+            flags |= wasi::FDFLAGS_NONBLOCK;\n+        } else {\n+            flags &= !wasi::FDFLAGS_NONBLOCK;\n+        }\n+\n+        unsafe {\n+            wasi::fd_fdstat_set_flags(self.socket().as_inner().as_raw_fd() as wasi::Fd, flags)\n+                .map_err(err2io)\n+        }\n     }\n \n     pub fn socket(&self) -> &Socket {\n@@ -194,7 +210,16 @@ impl TcpListener {\n     }\n \n     pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {\n-        unsupported()\n+        let fd = unsafe {\n+            wasi::sock_accept(self.as_inner().as_inner().as_raw_fd() as _, 0).map_err(err2io)?\n+        };\n+\n+        Ok((\n+            TcpStream::from_inner(unsafe { Socket::from_raw_fd(fd as _) }),\n+            // WASI has no concept of SocketAddr yet\n+            // return an unspecified IPv4Addr\n+            SocketAddr::new(Ipv4Addr::UNSPECIFIED.into(), 0),\n+        ))\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpListener> {\n@@ -221,8 +246,23 @@ impl TcpListener {\n         unsupported()\n     }\n \n-    pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        unsupported()\n+    pub fn set_nonblocking(&self, state: bool) -> io::Result<()> {\n+        let fdstat = unsafe {\n+            wasi::fd_fdstat_get(self.socket().as_inner().as_raw_fd() as wasi::Fd).map_err(err2io)?\n+        };\n+\n+        let mut flags = fdstat.fs_flags;\n+\n+        if state {\n+            flags |= wasi::FDFLAGS_NONBLOCK;\n+        } else {\n+            flags &= !wasi::FDFLAGS_NONBLOCK;\n+        }\n+\n+        unsafe {\n+            wasi::fd_fdstat_set_flags(self.socket().as_inner().as_raw_fd() as wasi::Fd, flags)\n+                .map_err(err2io)\n+        }\n     }\n \n     pub fn socket(&self) -> &Socket {"}, {"sha": "4cc0e4ed5a45a775f2a9879153fcd31b4e2b526d", "filename": "library/std/src/sys/wasi/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs?ref=9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "patch": "@@ -104,7 +104,7 @@ impl io::Write for Stderr {\n pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn is_ebadf(err: &io::Error) -> bool {\n-    err.raw_os_error() == Some(wasi::ERRNO_BADF.into())\n+    err.raw_os_error() == Some(wasi::ERRNO_BADF.raw().into())\n }\n \n pub fn panic_output() -> Option<impl io::Write> {"}, {"sha": "e7a6ab4be826f5053982bed385347424b06fe66c", "filename": "library/std/src/sys/wasi/thread.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs?ref=9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "patch": "@@ -41,8 +41,7 @@ impl Thread {\n \n         let in_ = wasi::Subscription {\n             userdata: USERDATA,\n-            r#type: wasi::EVENTTYPE_CLOCK,\n-            u: wasi::SubscriptionU { clock },\n+            u: wasi::SubscriptionU { tag: 0, u: wasi::SubscriptionUU { clock } },\n         };\n         unsafe {\n             let mut event: wasi::Event = mem::zeroed();\n@@ -51,7 +50,10 @@ impl Thread {\n                 (\n                     Ok(1),\n                     wasi::Event {\n-                        userdata: USERDATA, error: 0, r#type: wasi::EVENTTYPE_CLOCK, ..\n+                        userdata: USERDATA,\n+                        error: wasi::ERRNO_SUCCESS,\n+                        type_: wasi::EVENTTYPE_CLOCK,\n+                        ..\n                     },\n                 ) => {}\n                 _ => panic!(\"thread::sleep(): unexpected result of poll_oneoff\"),"}, {"sha": "db0ddecf0c62942e30304e99d2445d9f98cb8b5d", "filename": "library/std/src/sys/wasi/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs?ref=9f15c4d08b7d5eec77f6a6e4caa2ee720fbc51c2", "patch": "@@ -10,7 +10,7 @@ pub struct SystemTime(Duration);\n \n pub const UNIX_EPOCH: SystemTime = SystemTime(Duration::from_secs(0));\n \n-fn current_time(clock: u32) -> Duration {\n+fn current_time(clock: wasi::Clockid) -> Duration {\n     let ts = unsafe {\n         wasi::clock_time_get(\n             clock, 1, // precision... seems ignored though?"}]}