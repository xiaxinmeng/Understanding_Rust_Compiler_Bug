{"sha": "f98210db074595c726f8a2913149cb536a893de3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ODIxMGRiMDc0NTk1YzcyNmY4YTI5MTMxNDljYjUzNmE4OTNkZTM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-01-27T02:14:27Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-01-28T17:18:34Z"}, "message": "core: Flesh out vec find functions.", "tree": {"sha": "93c324f06c612b5ea12e0fe08975c0b7618a4bf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93c324f06c612b5ea12e0fe08975c0b7618a4bf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f98210db074595c726f8a2913149cb536a893de3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f98210db074595c726f8a2913149cb536a893de3", "html_url": "https://github.com/rust-lang/rust/commit/f98210db074595c726f8a2913149cb536a893de3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f98210db074595c726f8a2913149cb536a893de3/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "025e6ff1586999caef7460a1884cbd9685ad2277", "url": "https://api.github.com/repos/rust-lang/rust/commits/025e6ff1586999caef7460a1884cbd9685ad2277", "html_url": "https://github.com/rust-lang/rust/commit/025e6ff1586999caef7460a1884cbd9685ad2277"}], "stats": {"total": 128, "additions": 125, "deletions": 3}, "files": [{"sha": "3e888008c68476d6f710f87a73ccac8ca7984275", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 125, "deletions": 3, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/f98210db074595c726f8a2913149cb536a893de3/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98210db074595c726f8a2913149cb536a893de3/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=f98210db074595c726f8a2913149cb536a893de3", "patch": "@@ -706,15 +706,55 @@ fn count<T>(x: T, v: [const T]) -> uint {\n /*\n Function: find\n \n-Search for an element that matches a given predicate\n+Search for the first element that matches a given predicate\n \n Apply function `f` to each element of `v`, starting from the first.\n When function `f` returns true then an option containing the element\n is returned. If `f` matches no elements then none is returned.\n */\n fn find<T: copy>(v: [T], f: fn(T) -> bool) -> option::t<T> {\n-    for elt: T in v { if f(elt) { ret some(elt); } }\n-    ret none;\n+    find_from(v, 0u, len(v), f)\n+}\n+\n+/*\n+Function: find_from\n+\n+Search for the first element that matches a given predicate within a range\n+\n+Apply function `f` to each element of `v` within the range [`start`, `end`).\n+When function `f` returns true then an option containing the element\n+is returned. If `f` matches no elements then none is returned.\n+*/\n+fn find_from<T: copy>(v: [T], start: uint, end: uint, f: fn(T) -> bool) ->\n+  option::t<T> {\n+    option::map(position_from(v, start, end, f)) { |i| v[i] }\n+}\n+\n+/*\n+Function: rfind\n+\n+Search for the last element that matches a given predicate\n+\n+Apply function `f` to each element of `v` in reverse order. When function `f`\n+returns true then an option containing the element is returned. If `f`\n+matches no elements then none is returned.\n+*/\n+fn rfind<T: copy>(v: [T], f: fn(T) -> bool) -> option::t<T> {\n+    rfind_from(v, 0u, len(v), f)\n+}\n+\n+/*\n+Function: rfind_from\n+\n+Search for the last element that matches a given predicate within a range\n+\n+Apply function `f` to each element of `v` in reverse order within the range\n+[`start`, `end`). When function `f` returns true then an option containing\n+the element is returned. If `f` matches no elements then none is returned.\n+*/\n+fn rfind_from<T: copy>(v: [T], start: uint, end: uint, f: fn(T) -> bool) ->\n+  option::t<T> {\n+    option::map(rposition_from(v, start, end, f)) { |i| v[i] }\n }\n \n /*\n@@ -1673,6 +1713,46 @@ mod tests {\n         assert position_from(v, 4u, 4u, f) == none;\n     }\n \n+    #[test]\n+    fn test_find() {\n+        assert find([], f) == none;\n+\n+        fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n+        fn g(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'd' }\n+        let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+\n+        assert find(v, f) == some((1, 'b'));\n+        assert find(v, g) == none;\n+    }\n+\n+    #[test]\n+    fn test_find_from() {\n+        assert find_from([], 0u, 0u, f) == none;\n+\n+        fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n+        let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+\n+        assert find_from(v, 0u, 0u, f) == none;\n+        assert find_from(v, 0u, 1u, f) == none;\n+        assert find_from(v, 0u, 2u, f) == some((1, 'b'));\n+        assert find_from(v, 0u, 3u, f) == some((1, 'b'));\n+        assert find_from(v, 0u, 4u, f) == some((1, 'b'));\n+\n+        assert find_from(v, 1u, 1u, f) == none;\n+        assert find_from(v, 1u, 2u, f) == some((1, 'b'));\n+        assert find_from(v, 1u, 3u, f) == some((1, 'b'));\n+        assert find_from(v, 1u, 4u, f) == some((1, 'b'));\n+\n+        assert find_from(v, 2u, 2u, f) == none;\n+        assert find_from(v, 2u, 3u, f) == none;\n+        assert find_from(v, 2u, 4u, f) == some((3, 'b'));\n+\n+        assert find_from(v, 3u, 3u, f) == none;\n+        assert find_from(v, 3u, 4u, f) == some((3, 'b'));\n+\n+        assert find_from(v, 4u, 4u, f) == none;\n+    }\n+\n     #[test]\n     fn test_rposition() {\n         assert find([], f) == none;\n@@ -1712,6 +1792,48 @@ mod tests {\n \n         assert rposition_from(v, 4u, 4u, f) == none;\n     }\n+\n+    #[test]\n+    fn test_rfind() {\n+        assert rfind([], f) == none;\n+\n+        fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n+        fn g(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'd' }\n+        let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+\n+        assert rfind(v, f) == some((3, 'b'));\n+        assert rfind(v, g) == none;\n+    }\n+\n+    #[test]\n+    fn test_rfind_from() {\n+        assert rfind_from([], 0u, 0u, f) == none;\n+\n+        fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n+        let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+\n+        assert rfind_from(v, 0u, 0u, f) == none;\n+        assert rfind_from(v, 0u, 1u, f) == none;\n+        assert rfind_from(v, 0u, 2u, f) == some((1, 'b'));\n+        assert rfind_from(v, 0u, 3u, f) == some((1, 'b'));\n+        assert rfind_from(v, 0u, 4u, f) == some((3, 'b'));\n+\n+        assert rfind_from(v, 1u, 1u, f) == none;\n+        assert rfind_from(v, 1u, 2u, f) == some((1, 'b'));\n+        assert rfind_from(v, 1u, 3u, f) == some((1, 'b'));\n+        assert rfind_from(v, 1u, 4u, f) == some((3, 'b'));\n+\n+        assert rfind_from(v, 2u, 2u, f) == none;\n+        assert rfind_from(v, 2u, 3u, f) == none;\n+        assert rfind_from(v, 2u, 4u, f) == some((3, 'b'));\n+\n+        assert rfind_from(v, 3u, 3u, f) == none;\n+        assert rfind_from(v, 3u, 4u, f) == some((3, 'b'));\n+\n+        assert rfind_from(v, 4u, 4u, f) == none;\n+    }\n+\n+    #[test]\n     fn reverse_and_reversed() {\n         let v: [mutable int] = [mutable 10, 20];\n         assert (v[0] == 10);"}]}