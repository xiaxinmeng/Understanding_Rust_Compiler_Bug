{"sha": "1d602d0f124904f91d6d934e83a8a687f314e110", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNjAyZDBmMTI0OTA0ZjkxZDZkOTM0ZTgzYThhNjg3ZjMxNGUxMTA=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-11-17T05:22:57Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-11-17T05:22:57Z"}, "message": "rustfmt a little", "tree": {"sha": "d76ae6bceb84ced7ade07f42b7673f9ce88e438c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d76ae6bceb84ced7ade07f42b7673f9ce88e438c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d602d0f124904f91d6d934e83a8a687f314e110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d602d0f124904f91d6d934e83a8a687f314e110", "html_url": "https://github.com/rust-lang/rust/commit/1d602d0f124904f91d6d934e83a8a687f314e110", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d602d0f124904f91d6d934e83a8a687f314e110/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51a25295fdd44b270f3ce4b8074bc756a12699c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/51a25295fdd44b270f3ce4b8074bc756a12699c7", "html_url": "https://github.com/rust-lang/rust/commit/51a25295fdd44b270f3ce4b8074bc756a12699c7"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "9eb8a030e15357e09f748b3846a2f352924917de", "filename": "src/minmax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d602d0f124904f91d6d934e83a8a687f314e110/src%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d602d0f124904f91d6d934e83a8a687f314e110/src%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fminmax.rs?ref=1d602d0f124904f91d6d934e83a8a687f314e110", "patch": "@@ -17,7 +17,7 @@ pub struct MinMaxPass;\n \n impl LintPass for MinMaxPass {\n     fn get_lints(&self) -> LintArray {\n-       lint_array!(MIN_MAX)\n+        lint_array!(MIN_MAX)\n     }\n }\n "}, {"sha": "a92338165dd34c0e1e9da7fb6e6eb891b364d130", "filename": "src/mut_mut.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d602d0f124904f91d6d934e83a8a687f314e110/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d602d0f124904f91d6d934e83a8a687f314e110/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=1d602d0f124904f91d6d934e83a8a687f314e110", "patch": "@@ -19,7 +19,7 @@ impl LintPass for MutMut {\n \n impl LateLintPass for MutMut {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n-       check_expr_mut(cx, expr)\n+        check_expr_mut(cx, expr)\n     }\n \n     fn check_ty(&mut self, cx: &LateContext, ty: &Ty) {\n@@ -31,7 +31,7 @@ impl LateLintPass for MutMut {\n fn check_expr_mut(cx: &LateContext, expr: &Expr) {\n     if in_external_macro(cx, expr.span) { return; }\n \n-    fn unwrap_addr(expr : &Expr) -> Option<&Expr> {\n+    fn unwrap_addr(expr: &Expr) -> Option<&Expr> {\n         match expr.node {\n             ExprAddrOf(MutMutable, ref e) => Option::Some(e),\n             _ => Option::None\n@@ -53,7 +53,7 @@ fn check_expr_mut(cx: &LateContext, expr: &Expr) {\n     })\n }\n \n-fn unwrap_mut(ty : &Ty) -> Option<&Ty> {\n+fn unwrap_mut(ty: &Ty) -> Option<&Ty> {\n     match ty.node {\n         TyRptr(_, MutTy{ ty: ref pty, mutbl: MutMutable }) => Option::Some(pty),\n         _ => Option::None"}, {"sha": "e4d3b00218ed3fcaa23b7d130f12273379a556db", "filename": "src/needless_bool.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d602d0f124904f91d6d934e83a8a687f314e110/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d602d0f124904f91d6d934e83a8a687f314e110/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=1d602d0f124904f91d6d934e83a8a687f314e110", "patch": "@@ -31,10 +31,12 @@ impl LateLintPass for NeedlessBool {\n             match (fetch_bool_block(then_block), fetch_bool_expr(else_expr)) {\n                 (Some(true), Some(true)) => {\n                     span_lint(cx, NEEDLESS_BOOL, e.span,\n-                              \"this if-then-else expression will always return true\"); }\n+                              \"this if-then-else expression will always return true\");\n+                }\n                 (Some(false), Some(false)) => {\n                     span_lint(cx, NEEDLESS_BOOL, e.span,\n-                              \"this if-then-else expression will always return false\"); }\n+                              \"this if-then-else expression will always return false\");\n+                }\n                 (Some(true), Some(false)) => {\n                     let pred_snip = snippet(cx, pred.span, \"..\");\n                     let hint = if pred_snip == \"..\" { \"its predicate\".into() } else {"}, {"sha": "44db5e922213ceb100832f9f74fbabb5a434a9a7", "filename": "src/needless_features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d602d0f124904f91d6d934e83a8a687f314e110/src%2Fneedless_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d602d0f124904f91d6d934e83a8a687f314e110/src%2Fneedless_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_features.rs?ref=1d602d0f124904f91d6d934e83a8a687f314e110", "patch": "@@ -5,7 +5,7 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n \n-use utils::{span_lint};\n+use utils::span_lint;\n use utils;\n \n declare_lint! {\n@@ -27,7 +27,7 @@ pub struct NeedlessFeaturesPass;\n \n impl LintPass for NeedlessFeaturesPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(UNSTABLE_AS_SLICE,UNSTABLE_AS_MUT_SLICE)\n+        lint_array!(UNSTABLE_AS_SLICE, UNSTABLE_AS_MUT_SLICE)\n     }\n }\n "}, {"sha": "b659bd647a7c527062023c257223780b2cc03eab", "filename": "src/precedence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d602d0f124904f91d6d934e83a8a687f314e110/src%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d602d0f124904f91d6d934e83a8a687f314e110/src%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprecedence.rs?ref=1d602d0f124904f91d6d934e83a8a687f314e110", "patch": "@@ -53,7 +53,7 @@ impl EarlyLintPass for Precedence {\n                                      method call. Consider adding parentheses \\\n                                      to clarify your intent: -({})\",\n                                      snippet(cx, rhs.span, \"..\"))),\n-                                _ => ()\n+                            _ => ()\n                         }\n                     }\n                 }\n@@ -62,21 +62,21 @@ impl EarlyLintPass for Precedence {\n     }\n }\n \n-fn is_arith_expr(expr : &Expr) -> bool {\n+fn is_arith_expr(expr: &Expr) -> bool {\n     match expr.node {\n         ExprBinary(Spanned { node: op, ..}, _, _) => is_arith_op(op),\n         _ => false\n     }\n }\n \n-fn is_bit_op(op : BinOp_) -> bool {\n+fn is_bit_op(op: BinOp_) -> bool {\n     match op {\n         BiBitXor | BiBitAnd | BiBitOr | BiShl | BiShr => true,\n         _ => false\n     }\n }\n \n-fn is_arith_op(op : BinOp_) -> bool {\n+fn is_arith_op(op: BinOp_) -> bool {\n     match op {\n         BiAdd | BiSub | BiMul | BiDiv | BiRem => true,\n         _ => false"}, {"sha": "0827465753822d88da876bbdc0e6b72897bba63b", "filename": "src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d602d0f124904f91d6d934e83a8a687f314e110/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d602d0f124904f91d6d934e83a8a687f314e110/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=1d602d0f124904f91d6d934e83a8a687f314e110", "patch": "@@ -51,7 +51,7 @@ impl LateLintPass for StringAdd {\n                     \"you added something to a string. \\\n                      Consider using `String::push_str()` instead\")\n             }\n-        } else if let &ExprAssign(ref target, ref  src) = &e.node {\n+        } else if let &ExprAssign(ref target, ref src) = &e.node {\n             if is_string(cx, target) && is_add(cx, src, target) {\n                 span_lint(cx, STRING_ADD_ASSIGN, e.span,\n                     \"you assigned the result of adding something to this string. \\"}, {"sha": "484348c5a37f0ac79cf24f148a12855458a5d871", "filename": "src/zero_div_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d602d0f124904f91d6d934e83a8a687f314e110/src%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d602d0f124904f91d6d934e83a8a687f314e110/src%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fzero_div_zero.rs?ref=1d602d0f124904f91d6d934e83a8a687f314e110", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n \n-use utils::{span_help_and_lint};\n+use utils::span_help_and_lint;\n use consts::{Constant, constant_simple, FloatWidth};\n \n /// ZeroDivZeroPass is a pass that checks for a binary expression that consists"}]}