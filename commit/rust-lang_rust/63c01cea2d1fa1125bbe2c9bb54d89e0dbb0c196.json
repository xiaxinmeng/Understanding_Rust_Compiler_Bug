{"sha": "63c01cea2d1fa1125bbe2c9bb54d89e0dbb0c196", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYzAxY2VhMmQxZmExMTI1YmJlMmM5YmI1NGQ4OWUwZGJiMGMxOTY=", "commit": {"author": {"name": "Gleb Kozyrev", "email": "gleb@gkoz.com", "date": "2015-04-02T15:50:09Z"}, "committer": {"name": "Gleb Kozyrev", "email": "gleb@gkoz.com", "date": "2015-04-02T15:52:53Z"}, "message": "Change PartialEq impls in collections::string to slice notation", "tree": {"sha": "b809232906e5b63623ec3bca5e7a089d676d8b62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b809232906e5b63623ec3bca5e7a089d676d8b62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63c01cea2d1fa1125bbe2c9bb54d89e0dbb0c196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63c01cea2d1fa1125bbe2c9bb54d89e0dbb0c196", "html_url": "https://github.com/rust-lang/rust/commit/63c01cea2d1fa1125bbe2c9bb54d89e0dbb0c196", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63c01cea2d1fa1125bbe2c9bb54d89e0dbb0c196/comments", "author": {"login": "gkoz", "id": 4260361, "node_id": "MDQ6VXNlcjQyNjAzNjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4260361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gkoz", "html_url": "https://github.com/gkoz", "followers_url": "https://api.github.com/users/gkoz/followers", "following_url": "https://api.github.com/users/gkoz/following{/other_user}", "gists_url": "https://api.github.com/users/gkoz/gists{/gist_id}", "starred_url": "https://api.github.com/users/gkoz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gkoz/subscriptions", "organizations_url": "https://api.github.com/users/gkoz/orgs", "repos_url": "https://api.github.com/users/gkoz/repos", "events_url": "https://api.github.com/users/gkoz/events{/privacy}", "received_events_url": "https://api.github.com/users/gkoz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gkoz", "id": 4260361, "node_id": "MDQ6VXNlcjQyNjAzNjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4260361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gkoz", "html_url": "https://github.com/gkoz", "followers_url": "https://api.github.com/users/gkoz/followers", "following_url": "https://api.github.com/users/gkoz/following{/other_user}", "gists_url": "https://api.github.com/users/gkoz/gists{/gist_id}", "starred_url": "https://api.github.com/users/gkoz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gkoz/subscriptions", "organizations_url": "https://api.github.com/users/gkoz/orgs", "repos_url": "https://api.github.com/users/gkoz/repos", "events_url": "https://api.github.com/users/gkoz/events{/privacy}", "received_events_url": "https://api.github.com/users/gkoz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e8a773bc51cc276fa53a07980566e816234a6bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e8a773bc51cc276fa53a07980566e816234a6bd", "html_url": "https://github.com/rust-lang/rust/commit/3e8a773bc51cc276fa53a07980566e816234a6bd"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "bce314b6e04a90ffc1460b65935623b18bebe603", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/63c01cea2d1fa1125bbe2c9bb54d89e0dbb0c196/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63c01cea2d1fa1125bbe2c9bb54d89e0dbb0c196/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=63c01cea2d1fa1125bbe2c9bb54d89e0dbb0c196", "patch": "@@ -796,27 +796,27 @@ impl<'a, 'b> Pattern<'a> for &'b String {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq for String {\n     #[inline]\n-    fn eq(&self, other: &String) -> bool { PartialEq::eq(&**self, &**other) }\n+    fn eq(&self, other: &String) -> bool { PartialEq::eq(&self[..], &other[..]) }\n     #[inline]\n-    fn ne(&self, other: &String) -> bool { PartialEq::ne(&**self, &**other) }\n+    fn ne(&self, other: &String) -> bool { PartialEq::ne(&self[..], &other[..]) }\n }\n \n macro_rules! impl_eq {\n     ($lhs:ty, $rhs: ty) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<'a> PartialEq<$rhs> for $lhs {\n             #[inline]\n-            fn eq(&self, other: &$rhs) -> bool { PartialEq::eq(&**self, &**other) }\n+            fn eq(&self, other: &$rhs) -> bool { PartialEq::eq(&self[..], &other[..]) }\n             #[inline]\n-            fn ne(&self, other: &$rhs) -> bool { PartialEq::ne(&**self, &**other) }\n+            fn ne(&self, other: &$rhs) -> bool { PartialEq::ne(&self[..], &other[..]) }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl<'a> PartialEq<$lhs> for $rhs {\n             #[inline]\n-            fn eq(&self, other: &$lhs) -> bool { PartialEq::eq(&**self, &**other) }\n+            fn eq(&self, other: &$lhs) -> bool { PartialEq::eq(&self[..], &other[..]) }\n             #[inline]\n-            fn ne(&self, other: &$lhs) -> bool { PartialEq::ne(&**self, &**other) }\n+            fn ne(&self, other: &$lhs) -> bool { PartialEq::ne(&self[..], &other[..]) }\n         }\n \n     }\n@@ -828,17 +828,17 @@ impl_eq! { Cow<'a, str>, String }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, 'b> PartialEq<&'b str> for Cow<'a, str> {\n     #[inline]\n-    fn eq(&self, other: &&'b str) -> bool { PartialEq::eq(&**self, &**other) }\n+    fn eq(&self, other: &&'b str) -> bool { PartialEq::eq(&self[..], &other[..]) }\n     #[inline]\n-    fn ne(&self, other: &&'b str) -> bool { PartialEq::ne(&**self, &**other) }\n+    fn ne(&self, other: &&'b str) -> bool { PartialEq::ne(&self[..], &other[..]) }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, 'b> PartialEq<Cow<'a, str>> for &'b str {\n     #[inline]\n-    fn eq(&self, other: &Cow<'a, str>) -> bool { PartialEq::eq(&**self, &**other) }\n+    fn eq(&self, other: &Cow<'a, str>) -> bool { PartialEq::eq(&self[..], &other[..]) }\n     #[inline]\n-    fn ne(&self, other: &Cow<'a, str>) -> bool { PartialEq::ne(&**self, &**other) }\n+    fn ne(&self, other: &Cow<'a, str>) -> bool { PartialEq::ne(&self[..], &other[..]) }\n }\n \n #[unstable(feature = \"collections\", reason = \"waiting on Str stabilization\")]"}]}