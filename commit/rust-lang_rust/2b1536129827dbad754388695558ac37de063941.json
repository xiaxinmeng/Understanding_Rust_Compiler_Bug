{"sha": "2b1536129827dbad754388695558ac37de063941", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMTUzNjEyOTgyN2RiYWQ3NTQzODg2OTU1NThhYzM3ZGUwNjM5NDE=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2015-12-11T18:19:19Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2015-12-15T00:00:10Z"}, "message": "Implement trans for the MIR Switch terminator\n\nFixes #29574", "tree": {"sha": "7fcfa7606eca96514d17d18932f48897b86908c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fcfa7606eca96514d17d18932f48897b86908c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b1536129827dbad754388695558ac37de063941", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b1536129827dbad754388695558ac37de063941", "html_url": "https://github.com/rust-lang/rust/commit/2b1536129827dbad754388695558ac37de063941", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b1536129827dbad754388695558ac37de063941/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe", "html_url": "https://github.com/rust-lang/rust/commit/f150c178ea8275fab158bc7fe2a3b5af9ab8f3fe"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "d7026b722af36a768de8d1fc285e7a62418407e1", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2b1536129827dbad754388695558ac37de063941/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b1536129827dbad754388695558ac37de063941/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=2b1536129827dbad754388695558ac37de063941", "patch": "@@ -10,6 +10,7 @@\n \n use llvm::BasicBlockRef;\n use rustc::mir::repr as mir;\n+use trans::adt;\n use trans::base;\n use trans::build;\n use trans::common::Block;\n@@ -46,8 +47,28 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 build::CondBr(bcx, cond.immediate(), lltrue, llfalse, DebugLoc::None);\n             }\n \n-            mir::Terminator::Switch { .. } => {\n-                unimplemented!()\n+            mir::Terminator::Switch { ref discr, ref adt_def, ref targets } => {\n+                let adt_ty = bcx.tcx().lookup_item_type(adt_def.did).ty;\n+                let represented_ty = adt::represent_type(bcx.ccx(), adt_ty);\n+\n+                let discr_lvalue = self.trans_lvalue(bcx, discr);\n+                let discr = adt::trans_get_discr(bcx, &represented_ty, discr_lvalue.llval, None);\n+\n+                // The else branch of the Switch can't be hit, so branch to an unreachable\n+                // instruction so LLVM knows that\n+                // FIXME it might be nice to have just one such block (created lazilly), we could\n+                // store it in the \"MIR trans\" state.\n+                let unreachable_blk = bcx.fcx.new_temp_block(\"enum-variant-unreachable\");\n+                build::Unreachable(unreachable_blk);\n+\n+                let switch = build::Switch(bcx, discr, unreachable_blk.llbb, targets.len());\n+                assert_eq!(adt_def.variants.len(), targets.len());\n+                for (adt_variant, target) in adt_def.variants.iter().zip(targets) {\n+                    let llval = adt::trans_case(bcx, &*represented_ty, adt_variant.disr_val);\n+                    let llbb = self.llblock(*target);\n+\n+                    build::AddCase(switch, llval, llbb)\n+                }\n             }\n \n             mir::Terminator::SwitchInt { ref discr, switch_ty, ref values, ref targets } => {"}, {"sha": "c32d9da724d05eab5bcd9a2be90b533412e0cbe7", "filename": "src/test/run-pass/mir_trans_switch.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2b1536129827dbad754388695558ac37de063941/src%2Ftest%2Frun-pass%2Fmir_trans_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b1536129827dbad754388695558ac37de063941/src%2Ftest%2Frun-pass%2Fmir_trans_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_switch.rs?ref=2b1536129827dbad754388695558ac37de063941", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+enum Abc {\n+    A(u8),\n+    B(i8),\n+    C,\n+    D,\n+}\n+\n+#[rustc_mir]\n+fn foo(x: Abc) -> i32 {\n+    match x {\n+        Abc::C => 3,\n+        Abc::D => 4,\n+        Abc::B(_) => 2,\n+        Abc::A(_) => 1,\n+    }\n+}\n+\n+#[rustc_mir]\n+fn foo2(x: Abc) -> bool {\n+    match x {\n+        Abc::D => true,\n+        _ => false\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(1, foo(Abc::A(42)));\n+    assert_eq!(2, foo(Abc::B(-100)));\n+    assert_eq!(3, foo(Abc::C));\n+    assert_eq!(4, foo(Abc::D));\n+\n+    assert_eq!(false, foo2(Abc::A(1)));\n+    assert_eq!(false, foo2(Abc::B(2)));\n+    assert_eq!(false, foo2(Abc::C));\n+    assert_eq!(true, foo2(Abc::D));\n+}"}]}