{"sha": "2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNzIwMjZmY2IwNDk0ZmU5YWU5OWMyOThlYTllMWFmYjJlYzI0YTI=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-05-30T06:23:47Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-05-30T06:31:09Z"}, "message": "Rustup to https://github.com/rust-lang/rust/pull/61203\n\nMigrates all trait objects to use `dyn`", "tree": {"sha": "e46d79f1dd91b49818e0106d6fe8ccff6b9c24ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e46d79f1dd91b49818e0106d6fe8ccff6b9c24ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEEj4U0bmbiMSg/mWqvgqphyqETl+YFAlzveK8QHGRldkBwaGFu\nc2NoLm5ldAAKCRCCqmHKoROX5qkHD/4ry8de4/62GMZw49l4fTzxUcIolKhyLyui\nRtmVANe0EYguzgjuXBb0+XabyP+a34FUbcj7TnwzFmhiW5pf34ZujjAALE0+zFct\nYSxXSahOD14EQAMO21JaNA4TaDbfn1egYFv+9R4ZBvhEFd5wXPHRed92N2WQQiw4\nGmiASqNkm1gKuGWG15MMbz2KISPOsaYarOV8f/IxNVSOq4kkFxE1sIu1yWbrDeWi\nzdKbRJStVuy+2xNJaUlOkqzu3wTFmObVF7lVANnakjAhul/ic47TMbWoXlgS9Z6K\nMXB1K+YZNVwOTU6kcpfAJ1jo/eddzD0QMUy/BFnwOe7Lhbjvxe7CE3HyXbQrhU1n\nmg42/vzdewYh/K3zwiSixUUcKymeMfT1Pu/hq+1VJcjbV9gtMuHbeY8GBnDJ5S0H\nWPnJnsAWP2EcbMAWGzJU00A3tvIeVBtR2jOhyOc062A0m7k7L5BHretoavnFRfzv\npeYjZogqMg11zErCGCUEP0EhfUIEQIrzfznT0XfDzCgrSKbgpuDupJXNNagJSDSo\nPyzvh9PHXYZB9MihNb+ioJEc4wB2DfO0DjCe6Zo7AtkJRJxRvSiAixRT2psqfiXL\niX3AfxnxuI+Y5EJi0AZu7gtVwQVJmwPDPxb0wGUzJzAh/qjELeyPqCuinVJBw8sP\njLFiNZTnqA==\n=5hAl\n-----END PGP SIGNATURE-----", "payload": "tree e46d79f1dd91b49818e0106d6fe8ccff6b9c24ee\nparent 018fa30c564a47669420d3d00e15abae49d6e32f\nauthor Philipp Hansch <dev@phansch.net> 1559197427 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1559197869 +0200\n\nRustup to https://github.com/rust-lang/rust/pull/61203\n\nMigrates all trait objects to use `dyn`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "html_url": "https://github.com/rust-lang/rust/commit/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "018fa30c564a47669420d3d00e15abae49d6e32f", "url": "https://api.github.com/repos/rust-lang/rust/commits/018fa30c564a47669420d3d00e15abae49d6e32f", "html_url": "https://github.com/rust-lang/rust/commit/018fa30c564a47669420d3d00e15abae49d6e32f"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "b30f7290ffea6bea3bbc811e7f7be9724b029c11", "filename": "tests/ui/borrow_box.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fborrow_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fborrow_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.rs?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -27,55 +27,55 @@ impl<'a> Test4 for Test3<'a> {\n \n use std::any::Any;\n \n-pub fn test5(foo: &mut Box<Any>) {\n+pub fn test5(foo: &mut Box<dyn Any>) {\n     println!(\"{:?}\", foo)\n }\n \n pub fn test6() {\n-    let foo: &Box<Any>;\n+    let foo: &Box<dyn Any>;\n }\n \n struct Test7<'a> {\n-    foo: &'a Box<Any>,\n+    foo: &'a Box<dyn Any>,\n }\n \n trait Test8 {\n-    fn test8(a: &Box<Any>);\n+    fn test8(a: &Box<dyn Any>);\n }\n \n impl<'a> Test8 for Test7<'a> {\n-    fn test8(a: &Box<Any>) {\n+    fn test8(a: &Box<dyn Any>) {\n         unimplemented!();\n     }\n }\n \n-pub fn test9(foo: &mut Box<Any + Send + Sync>) {\n+pub fn test9(foo: &mut Box<dyn Any + Send + Sync>) {\n     let _ = foo;\n }\n \n pub fn test10() {\n-    let foo: &Box<Any + Send + 'static>;\n+    let foo: &Box<dyn Any + Send + 'static>;\n }\n \n struct Test11<'a> {\n-    foo: &'a Box<Any + Send>,\n+    foo: &'a Box<dyn Any + Send>,\n }\n \n trait Test12 {\n-    fn test4(a: &Box<Any + 'static>);\n+    fn test4(a: &Box<dyn Any + 'static>);\n }\n \n impl<'a> Test12 for Test11<'a> {\n-    fn test4(a: &Box<Any + 'static>) {\n+    fn test4(a: &Box<dyn Any + 'static>) {\n         unimplemented!();\n     }\n }\n \n fn main() {\n     test1(&mut Box::new(false));\n     test2();\n-    test5(&mut (Box::new(false) as Box<Any>));\n+    test5(&mut (Box::new(false) as Box<dyn Any>));\n     test6();\n-    test9(&mut (Box::new(false) as Box<Any + Send + Sync>));\n+    test9(&mut (Box::new(false) as Box<dyn Any + Send + Sync>));\n     test10();\n }"}, {"sha": "87b67c23704c9e71ba4cec847a89cef943d8498e", "filename": "tests/ui/box_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.rs?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -15,7 +15,7 @@ pub fn test(foo: Box<Vec<bool>>) {\n     println!(\"{:?}\", foo.get(0))\n }\n \n-pub fn test2(foo: Box<Fn(Vec<u32>)>) {\n+pub fn test2(foo: Box<dyn Fn(Vec<u32>)>) {\n     // pass if #31 is fixed\n     foo(vec![1, 2, 3])\n }"}, {"sha": "78d332c7a31c9e48432fd98010f19afd11767ff9", "filename": "tests/ui/escape_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fescape_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fescape_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fescape_analysis.rs?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -21,7 +21,7 @@ impl Z for A {\n \n fn main() {}\n \n-fn ok_box_trait(boxed_trait: &Box<Z>) {\n+fn ok_box_trait(boxed_trait: &Box<dyn Z>) {\n     let boxed_local = boxed_trait;\n     // done\n }"}, {"sha": "1ad836d25ff6630a7fdd1f657f8e820c26b7b292", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -32,8 +32,8 @@ fn main() {\n     let e = Some(1u8).map(generic);\n     let e = Some(1u8).map(generic);\n     // See #515\n-    let a: Option<Box<::std::ops::Deref<Target = [i32]>>> =\n-        Some(vec![1i32, 2]).map(|v| -> Box<::std::ops::Deref<Target = [i32]>> { Box::new(v) });\n+    let a: Option<Box<dyn (::std::ops::Deref<Target = [i32]>)>> =\n+        Some(vec![1i32, 2]).map(|v| -> Box<dyn (::std::ops::Deref<Target = [i32]>)> { Box::new(v) });\n }\n \n trait TestTrait {\n@@ -108,7 +108,7 @@ fn test_redundant_closures_containing_method_calls() {\n     let _: Vec<_> = arr.iter().map(|x| x.map_err(some.take().unwrap())).collect();\n }\n \n-struct Thunk<T>(Box<FnMut() -> T>);\n+struct Thunk<T>(Box<dyn FnMut() -> T>);\n \n impl<T> Thunk<T> {\n     fn new<F: 'static + FnOnce() -> T>(f: F) -> Thunk<T> {"}, {"sha": "41a13d769a6771d0e3606bb9781d761b9d7518c3", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -32,8 +32,8 @@ fn main() {\n     let e = Some(1u8).map(|a| generic(a));\n     let e = Some(1u8).map(generic);\n     // See #515\n-    let a: Option<Box<::std::ops::Deref<Target = [i32]>>> =\n-        Some(vec![1i32, 2]).map(|v| -> Box<::std::ops::Deref<Target = [i32]>> { Box::new(v) });\n+    let a: Option<Box<dyn (::std::ops::Deref<Target = [i32]>)>> =\n+        Some(vec![1i32, 2]).map(|v| -> Box<dyn (::std::ops::Deref<Target = [i32]>)> { Box::new(v) });\n }\n \n trait TestTrait {\n@@ -108,7 +108,7 @@ fn test_redundant_closures_containing_method_calls() {\n     let _: Vec<_> = arr.iter().map(|x| x.map_err(|e| some.take().unwrap()(e))).collect();\n }\n \n-struct Thunk<T>(Box<FnMut() -> T>);\n+struct Thunk<T>(Box<dyn FnMut() -> T>);\n \n impl<T> Thunk<T> {\n     fn new<F: 'static + FnOnce() -> T>(f: F) -> Thunk<T> {"}, {"sha": "9f05f8c1ed026a28d2ae55346c389b5d7b601bc5", "filename": "tests/ui/extra_unused_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fextra_unused_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fextra_unused_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.rs?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -25,7 +25,7 @@ fn lt_return_only<'a>() -> &'a u8 {\n     panic!()\n }\n \n-fn unused_lt_blergh<'a>(x: Option<Box<Send + 'a>>) {}\n+fn unused_lt_blergh<'a>(x: Option<Box<dyn Send + 'a>>) {}\n \n trait Foo<'a> {\n     fn x(&self, a: &'a u8);"}, {"sha": "624e5ef8fcf13129184a1c5b1580ce50ad6c696c", "filename": "tests/ui/len_zero.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Flen_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Flen_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.fixed?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -70,7 +70,7 @@ fn main() {\n         println!(\"This should not happen either!\");\n     }\n \n-    let z: &TraitsToo = &y;\n+    let z: &dyn TraitsToo = &y;\n     if z.len() > 0 {\n         // No error; `TraitsToo` has no `.is_empty()` method.\n         println!(\"Nor should this!\");\n@@ -125,7 +125,7 @@ fn main() {\n     }\n     assert!(!has_is_empty.is_empty());\n \n-    let with_is_empty: &WithIsEmpty = &Wither;\n+    let with_is_empty: &dyn WithIsEmpty = &Wither;\n     if with_is_empty.is_empty() {\n         println!(\"Or this!\");\n     }"}, {"sha": "7fba971cfd8876ebb0e2713cdd09e492586b473c", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -70,7 +70,7 @@ fn main() {\n         println!(\"This should not happen either!\");\n     }\n \n-    let z: &TraitsToo = &y;\n+    let z: &dyn TraitsToo = &y;\n     if z.len() > 0 {\n         // No error; `TraitsToo` has no `.is_empty()` method.\n         println!(\"Nor should this!\");\n@@ -125,7 +125,7 @@ fn main() {\n     }\n     assert!(!has_is_empty.is_empty());\n \n-    let with_is_empty: &WithIsEmpty = &Wither;\n+    let with_is_empty: &dyn WithIsEmpty = &Wither;\n     if with_is_empty.len() == 0 {\n         println!(\"Or this!\");\n     }"}, {"sha": "d4ac2b89854df471f2f4a1e79706f894540eaae0", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -41,7 +41,7 @@ trait Trait {}\n \n impl<'a> Trait for &'a str {}\n \n-fn h(_: &Trait) {}\n+fn h(_: &dyn Trait) {}\n #[warn(clippy::needless_borrow)]\n #[allow(dead_code)]\n fn issue_1432() {"}, {"sha": "f585be2fd03ff41bdfc3ab9cc80e445e89285e82", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -166,16 +166,16 @@ fn struct_with_lt4<'a, 'b>(_foo: &'a Foo<'b>) -> &'a str {\n \n trait WithLifetime<'a> {}\n \n-type WithLifetimeAlias<'a> = WithLifetime<'a>;\n+type WithLifetimeAlias<'a> = dyn WithLifetime<'a>;\n \n // Should not warn because it won't build without the lifetime.\n-fn trait_obj_elided<'a>(_arg: &'a WithLifetime) -> &'a str {\n+fn trait_obj_elided<'a>(_arg: &'a dyn WithLifetime) -> &'a str {\n     unimplemented!()\n }\n \n // Should warn because there is no lifetime on `Drop`, so this would be\n // unambiguous if we elided the lifetime.\n-fn trait_obj_elided2<'a>(_arg: &'a Drop) -> &'a str {\n+fn trait_obj_elided2<'a>(_arg: &'a dyn Drop) -> &'a str {\n     unimplemented!()\n }\n \n@@ -226,7 +226,7 @@ struct Test {\n }\n \n impl Test {\n-    fn iter<'a>(&'a self) -> Box<Iterator<Item = usize> + 'a> {\n+    fn iter<'a>(&'a self) -> Box<dyn Iterator<Item = usize> + 'a> {\n         unimplemented!()\n     }\n }"}, {"sha": "bbb69aeda1c484b266bd2dc57432650fa0335f29", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -81,7 +81,7 @@ LL | | }\n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n   --> $DIR/needless_lifetimes.rs:178:1\n    |\n-LL | / fn trait_obj_elided2<'a>(_arg: &'a Drop) -> &'a str {\n+LL | / fn trait_obj_elided2<'a>(_arg: &'a dyn Drop) -> &'a str {\n LL | |     unimplemented!()\n LL | | }\n    | |_^"}, {"sha": "46cbb3fee35abeaa59a0ea42a19403abb1d3fdea", "filename": "tests/ui/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_copy_const.rs?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -27,7 +27,7 @@ const STR: &str = \"012345\";\n const COW: Cow<str> = Cow::Borrowed(\"abcdef\");\n //^ note: a const item of Cow is used in the `postgres` package.\n \n-const NO_ANN: &Display = &70;\n+const NO_ANN: &dyn Display = &70;\n \n static STATIC_TUPLE: (AtomicUsize, String) = (ATOMIC, STRING);\n //^ there should be no lints on this line"}, {"sha": "2e0fc122778191ccacd46317f734755d4ba236a3", "filename": "tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.rs?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -44,7 +44,7 @@ fn clone_on_ref_ptr() {\n     sync::Weak::clone(&arc_weak);\n \n     let x = Arc::new(SomeImpl);\n-    let _: Arc<SomeTrait> = x.clone();\n+    let _: Arc<dyn SomeTrait> = x.clone();\n }\n \n fn clone_on_copy_generic<T: Copy>(t: T) {"}, {"sha": "8d5d54e7de678798a5b6f56c37cf9a5026060d15", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -45,10 +45,10 @@ LL |     arc_weak.clone();\n    |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&arc_weak)`\n \n error: using '.clone()' on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:47:29\n+  --> $DIR/unnecessary_clone.rs:47:33\n    |\n-LL |     let _: Arc<SomeTrait> = x.clone();\n-   |                             ^^^^^^^^^ help: try this: `Arc::<SomeImpl>::clone(&x)`\n+LL |     let _: Arc<dyn SomeTrait> = x.clone();\n+   |                                 ^^^^^^^^^ help: try this: `Arc::<SomeImpl>::clone(&x)`\n \n error: using `clone` on a `Copy` type\n   --> $DIR/unnecessary_clone.rs:51:5"}, {"sha": "3c9e91a19f9af2c0f83ffb4837a68ce3c443356c", "filename": "tests/ui/unused_unit.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Funused_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Funused_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.fixed?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -17,7 +17,7 @@ impl Unitter {\n     #[allow(clippy::no_effect)]\n     pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) \n     where G: Fn() -> () {\n-        let _y: &Fn() -> () = &f;\n+        let _y: &dyn Fn() -> () = &f;\n         (); // this should not lint, as it's not in return type position\n     }\n }"}, {"sha": "1acd427be1eefd837070dcddd73762927cb08c06", "filename": "tests/ui/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2/tests%2Fui%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.rs?ref=2c72026fcb0494fe9ae99c298ea9e1afb2ec24a2", "patch": "@@ -18,7 +18,7 @@ impl Unitter {\n     pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) ->\n         ()\n     where G: Fn() -> () {\n-        let _y: &Fn() -> () = &f;\n+        let _y: &dyn Fn() -> () = &f;\n         (); // this should not lint, as it's not in return type position\n     }\n }"}]}