{"sha": "e7cedc9972ae753402fece658b5b9f580f4fc5f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3Y2VkYzk5NzJhZTc1MzQwMmZlY2U2NThiNWI5ZjU4MGY0ZmM1ZjM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-09-07T22:42:12Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-04T11:56:07Z"}, "message": "expand: Feature gate out-of-line modules in proc macro input", "tree": {"sha": "1a9b86a156544b097f67ee1ffa02178c17ad6195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a9b86a156544b097f67ee1ffa02178c17ad6195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7cedc9972ae753402fece658b5b9f580f4fc5f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7cedc9972ae753402fece658b5b9f580f4fc5f3", "html_url": "https://github.com/rust-lang/rust/commit/e7cedc9972ae753402fece658b5b9f580f4fc5f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7cedc9972ae753402fece658b5b9f580f4fc5f3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cba93685377bc74a2fde1eb8e7a086039b038e94", "url": "https://api.github.com/repos/rust-lang/rust/commits/cba93685377bc74a2fde1eb8e7a086039b038e94", "html_url": "https://github.com/rust-lang/rust/commit/cba93685377bc74a2fde1eb8e7a086039b038e94"}], "stats": {"total": 198, "additions": 182, "deletions": 16}, "files": [{"sha": "bdb50dbfb4f4700e463a0d91e452f9d54220ca38", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 50, "deletions": 16, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e7cedc9972ae753402fece658b5b9f580f4fc5f3/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7cedc9972ae753402fece658b5b9f580f4fc5f3/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=e7cedc9972ae753402fece658b5b9f580f4fc5f3", "patch": "@@ -17,9 +17,10 @@ use syntax::parse::token;\n use syntax::parse::parser::Parser;\n use syntax::print::pprust;\n use syntax::ptr::P;\n+use syntax::sess::ParseSess;\n use syntax::symbol::{sym, Symbol};\n use syntax::tokenstream::{TokenStream, TokenTree};\n-use syntax::visit::Visitor;\n+use syntax::visit::{self, Visitor};\n use syntax::util::map_in_place::MapInPlace;\n \n use errors::{Applicability, FatalError};\n@@ -615,6 +616,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             }\n             InvocationKind::Attr { attr, mut item, .. } => match ext {\n                 SyntaxExtensionKind::Attr(expander) => {\n+                    self.gate_proc_macro_input(&item);\n                     self.gate_proc_macro_attr_item(span, &item);\n                     let item_tok = TokenTree::token(token::Interpolated(Lrc::new(match item {\n                         Annotatable::Item(item) => token::NtItem(item),\n@@ -664,6 +666,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     if !item.derive_allowed() {\n                         return fragment_kind.dummy(span);\n                     }\n+                    if let SyntaxExtensionKind::Derive(..) = ext {\n+                        self.gate_proc_macro_input(&item);\n+                    }\n                     let meta = ast::MetaItem { kind: ast::MetaItemKind::Word, span, path };\n                     let items = expander.expand(self.cx, span, &meta, item);\n                     fragment_kind.expect_from_annotatables(items)\n@@ -692,21 +697,16 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n     }\n \n     fn gate_proc_macro_attr_item(&self, span: Span, item: &Annotatable) {\n-        let (kind, gate) = match *item {\n-            Annotatable::Item(ref item) => {\n-                match item.kind {\n-                    ItemKind::Mod(_) if self.cx.ecfg.proc_macro_hygiene() => return,\n-                    ItemKind::Mod(_) => (\"modules\", sym::proc_macro_hygiene),\n-                    _ => return,\n-                }\n+        let kind = match item {\n+            Annotatable::Item(item) => match &item.kind {\n+                ItemKind::Mod(m) if m.inline => \"modules\",\n+                _ => return,\n             }\n-            Annotatable::TraitItem(_) => return,\n-            Annotatable::ImplItem(_) => return,\n-            Annotatable::ForeignItem(_) => return,\n-            Annotatable::Stmt(_) |\n-            Annotatable::Expr(_) if self.cx.ecfg.proc_macro_hygiene() => return,\n-            Annotatable::Stmt(_) => (\"statements\", sym::proc_macro_hygiene),\n-            Annotatable::Expr(_) => (\"expressions\", sym::proc_macro_hygiene),\n+            Annotatable::TraitItem(_)\n+            | Annotatable::ImplItem(_)\n+            | Annotatable::ForeignItem(_) => return,\n+            Annotatable::Stmt(_) => \"statements\",\n+            Annotatable::Expr(_) => \"expressions\",\n             Annotatable::Arm(..)\n             | Annotatable::Field(..)\n             | Annotatable::FieldPat(..)\n@@ -716,15 +716,49 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             | Annotatable::Variant(..)\n             => panic!(\"unexpected annotatable\"),\n         };\n+        if self.cx.ecfg.proc_macro_hygiene() {\n+            return\n+        }\n         emit_feature_err(\n             self.cx.parse_sess,\n-            gate,\n+            sym::proc_macro_hygiene,\n             span,\n             GateIssue::Language,\n             &format!(\"custom attributes cannot be applied to {}\", kind),\n         );\n     }\n \n+    fn gate_proc_macro_input(&self, annotatable: &Annotatable) {\n+        struct GateProcMacroInput<'a> {\n+            parse_sess: &'a ParseSess,\n+        }\n+\n+        impl<'ast, 'a> Visitor<'ast> for GateProcMacroInput<'a> {\n+            fn visit_item(&mut self, item: &'ast ast::Item) {\n+                match &item.kind {\n+                    ast::ItemKind::Mod(module) if !module.inline => {\n+                        emit_feature_err(\n+                            self.parse_sess,\n+                            sym::proc_macro_hygiene,\n+                            item.span,\n+                            GateIssue::Language,\n+                            \"non-inline modules in proc macro input are unstable\",\n+                        );\n+                    }\n+                    _ => {}\n+                }\n+\n+                visit::walk_item(self, item);\n+            }\n+\n+            fn visit_mac(&mut self, _: &'ast ast::Mac) {}\n+        }\n+\n+        if !self.cx.ecfg.proc_macro_hygiene() {\n+            annotatable.visit_with(&mut GateProcMacroInput { parse_sess: self.cx.parse_sess });\n+        }\n+    }\n+\n     fn gate_proc_macro_expansion_kind(&self, span: Span, kind: AstFragmentKind) {\n         let kind = match kind {\n             AstFragmentKind::Expr |"}, {"sha": "c8bc0b34374362e63c580e892a586e00c194d6bc", "filename": "src/test/ui/proc-macro/attributes-on-modules-fail.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e7cedc9972ae753402fece658b5b9f580f4fc5f3/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7cedc9972ae753402fece658b5b9f580f4fc5f3/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.rs?ref=e7cedc9972ae753402fece658b5b9f580f4fc5f3", "patch": "@@ -0,0 +1,29 @@\n+// aux-build:test-macros.rs\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+#[identity_attr] //~ ERROR custom attributes cannot be applied to modules\n+mod m {\n+    pub struct X;\n+\n+    type A = Y; //~ ERROR cannot find type `Y` in this scope\n+}\n+\n+struct Y;\n+type A = X; //~ ERROR cannot find type `X` in this scope\n+\n+#[derive(Copy)] //~ ERROR `derive` may only be applied to structs, enums and unions\n+mod n {}\n+\n+#[empty_attr]\n+mod module; //~ ERROR non-inline modules in proc macro input are unstable\n+\n+#[empty_attr] //~ ERROR custom attributes cannot be applied to modules\n+mod outer {\n+    mod inner; //~ ERROR non-inline modules in proc macro input are unstable\n+\n+    mod inner_inline {} // OK\n+}\n+\n+fn main() {}"}, {"sha": "34a5a5aaa54fbddd98b239a5fe361b2bc6b125a1", "filename": "src/test/ui/proc-macro/attributes-on-modules-fail.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e7cedc9972ae753402fece658b5b9f580f4fc5f3/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7cedc9972ae753402fece658b5b9f580f4fc5f3/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr?ref=e7cedc9972ae753402fece658b5b9f580f4fc5f3", "patch": "@@ -0,0 +1,76 @@\n+error[E0658]: custom attributes cannot be applied to modules\n+  --> $DIR/attributes-on-modules-fail.rs:6:1\n+   |\n+LL | #[identity_attr]\n+   | ^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n+\n+error: `derive` may only be applied to structs, enums and unions\n+  --> $DIR/attributes-on-modules-fail.rs:16:1\n+   |\n+LL | #[derive(Copy)]\n+   | ^^^^^^^^^^^^^^^\n+\n+error[E0658]: non-inline modules in proc macro input are unstable\n+  --> $DIR/attributes-on-modules-fail.rs:20:1\n+   |\n+LL | mod module;\n+   | ^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n+\n+error[E0658]: non-inline modules in proc macro input are unstable\n+  --> $DIR/attributes-on-modules-fail.rs:24:5\n+   |\n+LL |     mod inner;\n+   |     ^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n+\n+error[E0658]: custom attributes cannot be applied to modules\n+  --> $DIR/attributes-on-modules-fail.rs:22:1\n+   |\n+LL | #[empty_attr]\n+   | ^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n+\n+error[E0412]: cannot find type `Y` in this scope\n+  --> $DIR/attributes-on-modules-fail.rs:10:14\n+   |\n+LL |     type A = Y;\n+   |     ---------^- similarly named type alias `A` defined here\n+   |\n+help: a type alias with a similar name exists\n+   |\n+LL |     type A = A;\n+   |              ^\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+LL |     use Y;\n+   |\n+\n+error[E0412]: cannot find type `X` in this scope\n+  --> $DIR/attributes-on-modules-fail.rs:14:10\n+   |\n+LL | type A = X;\n+   | ---------^- similarly named type alias `A` defined here\n+   |\n+help: a type alias with a similar name exists\n+   |\n+LL | type A = A;\n+   |          ^\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+LL | use m::X;\n+   |\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0412, E0658.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "12c3ac6d9475b62c936b80905867d4dbb87fd4c3", "filename": "src/test/ui/proc-macro/attributes-on-modules.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e7cedc9972ae753402fece658b5b9f580f4fc5f3/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7cedc9972ae753402fece658b5b9f580f4fc5f3/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules.rs?ref=e7cedc9972ae753402fece658b5b9f580f4fc5f3", "patch": "@@ -0,0 +1,13 @@\n+// aux-build:test-macros.rs\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+#[identity_attr] //~ ERROR custom attributes cannot be applied to modules\n+mod m {\n+    pub struct S;\n+}\n+\n+fn main() {\n+    let s = m::S;\n+}"}, {"sha": "df75f0bf4b149d10b0330c24154fbd74271a48e5", "filename": "src/test/ui/proc-macro/attributes-on-modules.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7cedc9972ae753402fece658b5b9f580f4fc5f3/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7cedc9972ae753402fece658b5b9f580f4fc5f3/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-on-modules.stderr?ref=e7cedc9972ae753402fece658b5b9f580f4fc5f3", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: custom attributes cannot be applied to modules\n+  --> $DIR/attributes-on-modules.rs:6:1\n+   |\n+LL | #[identity_attr]\n+   | ^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/54727\n+   = help: add `#![feature(proc_macro_hygiene)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "5777ed8998397b15399a0e8b22d5da4712302899", "filename": "src/test/ui/proc-macro/module.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7cedc9972ae753402fece658b5b9f580f4fc5f3/src%2Ftest%2Fui%2Fproc-macro%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7cedc9972ae753402fece658b5b9f580f4fc5f3/src%2Ftest%2Fui%2Fproc-macro%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmodule.rs?ref=e7cedc9972ae753402fece658b5b9f580f4fc5f3", "patch": "@@ -0,0 +1 @@\n+// ignore-test"}, {"sha": "5777ed8998397b15399a0e8b22d5da4712302899", "filename": "src/test/ui/proc-macro/outer/inner.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e7cedc9972ae753402fece658b5b9f580f4fc5f3/src%2Ftest%2Fui%2Fproc-macro%2Fouter%2Finner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7cedc9972ae753402fece658b5b9f580f4fc5f3/src%2Ftest%2Fui%2Fproc-macro%2Fouter%2Finner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fouter%2Finner.rs?ref=e7cedc9972ae753402fece658b5b9f580f4fc5f3", "patch": "@@ -0,0 +1 @@\n+// ignore-test"}]}