{"sha": "74b8868b5f74f35b375c2a0eb0995f1a6101a7fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0Yjg4NjhiNWY3NGYzNWIzNzVjMmEwZWIwOTk1ZjFhNjEwMWE3ZmE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-14T22:22:50Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-09-18T11:36:36Z"}, "message": "rustc: remove Gc<Def> and depth from DefUpvar.", "tree": {"sha": "93239585730fb5d69dd495c26b4e0076a7dd348f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93239585730fb5d69dd495c26b4e0076a7dd348f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa", "html_url": "https://github.com/rust-lang/rust/commit/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c5df404b0ba12302dd395d858bbce1b3b305ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c5df404b0ba12302dd395d858bbce1b3b305ca5", "html_url": "https://github.com/rust-lang/rust/commit/7c5df404b0ba12302dd395d858bbce1b3b305ca5"}], "stats": {"total": 31, "additions": 10, "deletions": 21}, "files": [{"sha": "2994954c3d72726c64a5e6788caecb0a34babf6f", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=74b8868b5f74f35b375c2a0eb0995f1a6101a7fa", "patch": "@@ -29,7 +29,7 @@ This API is completely unstable and subject to change.\n       html_root_url = \"http://doc.rust-lang.org/master/\")]\n \n #![allow(deprecated)]\n-#![feature(macro_rules, globs, struct_variant, managed_boxes, quote)]\n+#![feature(macro_rules, globs, struct_variant, quote)]\n #![feature(default_type_params, phase, unsafe_destructor)]\n \n #![allow(unknown_features)] // NOTE: Remove after next snapshot"}, {"sha": "feef7ffe847def1f9bedfc37deac0de1a09458d1", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=74b8868b5f74f35b375c2a0eb0995f1a6101a7fa", "patch": "@@ -41,7 +41,6 @@ use syntax;\n use libc;\n use std::io::Seek;\n use std::mem;\n-use std::gc::GC;\n use std::rc::Rc;\n \n use rbml::io::SeekableMemWriter;\n@@ -471,10 +470,8 @@ impl tr for def::Def {\n           def::DefPrimTy(p) => def::DefPrimTy(p),\n           def::DefTyParam(s, did, v) => def::DefTyParam(s, did.tr(dcx), v),\n           def::DefUse(did) => def::DefUse(did.tr(dcx)),\n-          def::DefUpvar(nid1, def, depth, nid2, nid3) => {\n+          def::DefUpvar(nid1, nid2, nid3) => {\n             def::DefUpvar(dcx.tr_id(nid1),\n-                           box(GC) (*def).tr(dcx),\n-                           depth,\n                            dcx.tr_id(nid2),\n                            dcx.tr_id(nid3))\n           }"}, {"sha": "1863a19b56d02ad462992580a00b7b1c49a423b4", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=74b8868b5f74f35b375c2a0eb0995f1a6101a7fa", "patch": "@@ -12,8 +12,6 @@ use middle::subst::ParamSpace;\n use syntax::ast;\n use syntax::ast_util::local_def;\n \n-use std::gc::Gc;\n-\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Def {\n     DefFn(ast::DefId, ast::FnStyle),\n@@ -31,8 +29,6 @@ pub enum Def {\n     DefTyParam(ParamSpace, ast::DefId, uint),\n     DefUse(ast::DefId),\n     DefUpvar(ast::NodeId,  // id of closed over local\n-             Gc<Def>,      // closed over def\n-             u32,          // number of closures implicitely capturing this local\n              ast::NodeId,  // expr node that creates the closure\n              ast::NodeId), // block node for the closest enclosing proc\n                            // or unboxed closure, DUMMY_NODE_ID otherwise\n@@ -70,7 +66,7 @@ impl Def {\n             }\n             DefLocal(id) |\n             DefSelfTy(id) |\n-            DefUpvar(id, _, _, _,  _) |\n+            DefUpvar(id, _, _) |\n             DefRegion(id) |\n             DefTyParamBinder(id) |\n             DefLabel(id) => {"}, {"sha": "653b24f02558a51467f3c2877de5290afbddcdde", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=74b8868b5f74f35b375c2a0eb0995f1a6101a7fa", "patch": "@@ -546,7 +546,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n               }))\n           }\n \n-          def::DefUpvar(var_id, _, _, fn_node_id, _) => {\n+          def::DefUpvar(var_id, fn_node_id, _) => {\n               let ty = if_ok!(self.node_ty(fn_node_id));\n               match ty::get(ty).sty {\n                   ty::ty_closure(ref closure_ty) => {"}, {"sha": "2e198d8afb0fa829ae63cfa95c595dabe7af3b78", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=74b8868b5f74f35b375c2a0eb0995f1a6101a7fa", "patch": "@@ -60,7 +60,6 @@ use syntax::visit::Visitor;\n \n use std::collections::{HashMap, HashSet};\n use std::cell::{Cell, RefCell};\n-use std::gc::GC;\n use std::mem::replace;\n use std::rc::{Rc, Weak};\n use std::uint;\n@@ -3849,7 +3848,6 @@ impl<'a> Resolver<'a> {\n             DlDef(d @ DefLocal(_)) => {\n                 let node_id = d.def_id().node;\n                 let mut def = d;\n-                let mut depth = 0;\n                 let mut last_proc_body_id = ast::DUMMY_NODE_ID;\n                 for rib in ribs.iter() {\n                     match rib.kind {\n@@ -3861,9 +3859,7 @@ impl<'a> Resolver<'a> {\n                             if maybe_proc_body != ast::DUMMY_NODE_ID {\n                                 last_proc_body_id = maybe_proc_body;\n                             }\n-                            def = DefUpvar(node_id, box(GC) def,\n-                                           depth, function_id, last_proc_body_id);\n-                            depth += 1;\n+                            def = DefUpvar(node_id, function_id, last_proc_body_id);\n \n                             let mut seen = self.freevars_seen.borrow_mut();\n                             let seen = seen.find_or_insert(function_id, NodeSet::new());"}, {"sha": "68d0bb2d8b49805220a6e796172a7d989c31eed6", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=74b8868b5f74f35b375c2a0eb0995f1a6101a7fa", "patch": "@@ -1226,7 +1226,7 @@ pub fn trans_match<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n fn is_discr_reassigned(bcx: Block, discr: &ast::Expr, body: &ast::Expr) -> bool {\n     match discr.node {\n         ast::ExprPath(..) => match bcx.def(discr.id) {\n-            def::DefLocal(vid) | def::DefUpvar(vid, _, _, _, _) => {\n+            def::DefLocal(vid) | def::DefUpvar(vid, _, _) => {\n                 let mut rc = ReassignmentChecker {\n                     node: vid,\n                     reassigned: false"}, {"sha": "fd063d79b0bb3fbb32f47681e14e3ea539ec32b9", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=74b8868b5f74f35b375c2a0eb0995f1a6101a7fa", "patch": "@@ -1176,7 +1176,7 @@ pub fn trans_local_var<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let _icx = push_ctxt(\"trans_local_var\");\n \n     match def {\n-        def::DefUpvar(nid, _, _, _, _) => {\n+        def::DefUpvar(nid, _, _) => {\n             // Can't move upvars, so this is never a ZeroMemLastUse.\n             let local_ty = node_id_type(bcx, nid);\n             match bcx.fcx.llupvars.borrow().find(&nid) {"}, {"sha": "9676e1515530e707a110b60c6f233128cff6a605", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=74b8868b5f74f35b375c2a0eb0995f1a6101a7fa", "patch": "@@ -5026,7 +5026,7 @@ pub fn polytype_for_def(fcx: &FnCtxt,\n                         defn: def::Def)\n                         -> Polytype {\n     match defn {\n-      def::DefLocal(nid) | def::DefUpvar(nid, _, _, _, _) => {\n+      def::DefLocal(nid) | def::DefUpvar(nid, _, _) => {\n           let typ = fcx.local_ty(sp, nid);\n           return no_params(typ);\n       }"}, {"sha": "2effff4767b02a6bdb4080e0031e155a029c7b8c", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b8868b5f74f35b375c2a0eb0995f1a6101a7fa/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=74b8868b5f74f35b375c2a0eb0995f1a6101a7fa", "patch": "@@ -244,7 +244,7 @@ fn region_of_def(fcx: &FnCtxt, def: def::Def) -> ty::Region {\n         def::DefLocal(node_id) => {\n             tcx.region_maps.var_region(node_id)\n         }\n-        def::DefUpvar(node_id, _, _, _, body_id) => {\n+        def::DefUpvar(node_id, _, body_id) => {\n             if body_id == ast::DUMMY_NODE_ID {\n                 tcx.region_maps.var_region(node_id)\n             } else {\n@@ -1029,7 +1029,7 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n             // determining the final borrow_kind) and propagate that as\n             // a constraint on the outer closure.\n             match freevar.def {\n-                def::DefUpvar(var_id, _, _, outer_closure_id, _) => {\n+                def::DefUpvar(var_id, outer_closure_id, _) => {\n                     // thing being captured is itself an upvar:\n                     let outer_upvar_id = ty::UpvarId {\n                         var_id: var_id,"}]}