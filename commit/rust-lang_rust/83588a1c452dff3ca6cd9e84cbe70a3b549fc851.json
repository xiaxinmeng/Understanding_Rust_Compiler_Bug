{"sha": "83588a1c452dff3ca6cd9e84cbe70a3b549fc851", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNTg4YTFjNDUyZGZmM2NhNmNkOWU4NGNiZTcwYTNiNTQ5ZmM4NTE=", "commit": {"author": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-01T23:19:58Z"}, "committer": {"name": "David Lattimore", "email": "dml@google.com", "date": "2020-07-01T23:19:58Z"}, "message": "SSR: Use T! instead of SyntaxKind::* where possible", "tree": {"sha": "8ccc5148d62675644e27ea41d73e7d0d0872d10a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ccc5148d62675644e27ea41d73e7d0d0872d10a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83588a1c452dff3ca6cd9e84cbe70a3b549fc851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83588a1c452dff3ca6cd9e84cbe70a3b549fc851", "html_url": "https://github.com/rust-lang/rust/commit/83588a1c452dff3ca6cd9e84cbe70a3b549fc851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83588a1c452dff3ca6cd9e84cbe70a3b549fc851/comments", "author": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidlattimore", "id": 8983542, "node_id": "MDQ6VXNlcjg5ODM1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/8983542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidlattimore", "html_url": "https://github.com/davidlattimore", "followers_url": "https://api.github.com/users/davidlattimore/followers", "following_url": "https://api.github.com/users/davidlattimore/following{/other_user}", "gists_url": "https://api.github.com/users/davidlattimore/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidlattimore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidlattimore/subscriptions", "organizations_url": "https://api.github.com/users/davidlattimore/orgs", "repos_url": "https://api.github.com/users/davidlattimore/repos", "events_url": "https://api.github.com/users/davidlattimore/events{/privacy}", "received_events_url": "https://api.github.com/users/davidlattimore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d9997889bfe536a96e70535ab208a6e7ff3bc12", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9997889bfe536a96e70535ab208a6e7ff3bc12", "html_url": "https://github.com/rust-lang/rust/commit/3d9997889bfe536a96e70535ab208a6e7ff3bc12"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "5ea1256165a8c538753a641fcd5e2d5055c0ec51", "filename": "crates/ra_ssr/src/parsing.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/83588a1c452dff3ca6cd9e84cbe70a3b549fc851/crates%2Fra_ssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83588a1c452dff3ca6cd9e84cbe70a3b549fc851/crates%2Fra_ssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ssr%2Fsrc%2Fparsing.rs?ref=83588a1c452dff3ca6cd9e84cbe70a3b549fc851", "patch": "@@ -6,7 +6,7 @@\n //! e.g. expressions, type references etc.\n \n use crate::{SsrError, SsrPattern, SsrRule};\n-use ra_syntax::{ast, AstNode, SmolStr, SyntaxKind};\n+use ra_syntax::{ast, AstNode, SmolStr, SyntaxKind, T};\n use rustc_hash::{FxHashMap, FxHashSet};\n use std::str::FromStr;\n \n@@ -161,7 +161,7 @@ fn parse_pattern(pattern_str: &str) -> Result<Vec<PatternElement>, SsrError> {\n     let mut placeholder_names = FxHashSet::default();\n     let mut tokens = tokenize(pattern_str)?.into_iter();\n     while let Some(token) = tokens.next() {\n-        if token.kind == SyntaxKind::DOLLAR {\n+        if token.kind == T![$] {\n             let placeholder = parse_placeholder(&mut tokens)?;\n             if !placeholder_names.insert(placeholder.ident.clone()) {\n                 bail!(\"Name `{}` repeats more than once\", placeholder.ident);\n@@ -226,7 +226,7 @@ fn parse_placeholder(tokens: &mut std::vec::IntoIter<Token>) -> Result<Placehold\n             SyntaxKind::IDENT => {\n                 name = Some(token.text);\n             }\n-            SyntaxKind::L_CURLY => {\n+            T!['{'] => {\n                 let token =\n                     tokens.next().ok_or_else(|| SsrError::new(\"Unexpected end of placeholder\"))?;\n                 if token.kind == SyntaxKind::IDENT {\n@@ -237,10 +237,10 @@ fn parse_placeholder(tokens: &mut std::vec::IntoIter<Token>) -> Result<Placehold\n                         .next()\n                         .ok_or_else(|| SsrError::new(\"Placeholder is missing closing brace '}'\"))?;\n                     match token.kind {\n-                        SyntaxKind::COLON => {\n+                        T![:] => {\n                             constraints.push(parse_constraint(tokens)?);\n                         }\n-                        SyntaxKind::R_CURLY => break,\n+                        T!['}'] => break,\n                         _ => bail!(\"Unexpected token while parsing placeholder: '{}'\", token.text),\n                     }\n                 }\n@@ -330,24 +330,24 @@ mod tests {\n             result.pattern.raw.tokens,\n             vec![\n                 token(SyntaxKind::IDENT, \"foo\"),\n-                token(SyntaxKind::L_PAREN, \"(\"),\n+                token(T!['('], \"(\"),\n                 placeholder(\"a\"),\n-                token(SyntaxKind::COMMA, \",\"),\n+                token(T![,], \",\"),\n                 token(SyntaxKind::WHITESPACE, \" \"),\n                 placeholder(\"b\"),\n-                token(SyntaxKind::R_PAREN, \")\"),\n+                token(T![')'], \")\"),\n             ]\n         );\n         assert_eq!(\n             result.template.tokens,\n             vec![\n                 token(SyntaxKind::IDENT, \"bar\"),\n-                token(SyntaxKind::L_PAREN, \"(\"),\n+                token(T!['('], \"(\"),\n                 placeholder(\"b\"),\n-                token(SyntaxKind::COMMA, \",\"),\n+                token(T![,], \",\"),\n                 token(SyntaxKind::WHITESPACE, \" \"),\n                 placeholder(\"a\"),\n-                token(SyntaxKind::R_PAREN, \")\"),\n+                token(T![')'], \")\"),\n             ]\n         );\n     }"}]}