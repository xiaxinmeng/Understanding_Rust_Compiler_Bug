{"sha": "d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwN2M2ZThhMGVkZTMxMTRlYmZkOGMzZWE2Y2MxNjFjZjAwOWYwNzI=", "commit": {"author": {"name": "Lenny222", "email": "github@kudling.de", "date": "2011-12-29T20:24:03Z"}, "committer": {"name": "Lenny222", "email": "github@kudling.de", "date": "2011-12-29T20:24:03Z"}, "message": "list: use predicate to enforce non-empty requirement", "tree": {"sha": "986f6ce8c40d0c363a470e03349c7a23088ec811", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/986f6ce8c40d0c363a470e03349c7a23088ec811"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072", "html_url": "https://github.com/rust-lang/rust/commit/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072/comments", "author": null, "committer": null, "parents": [{"sha": "816b0ac8ae3444a81e60e18a05430bb869ba4b3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/816b0ac8ae3444a81e60e18a05430bb869ba4b3b", "html_url": "https://github.com/rust-lang/rust/commit/816b0ac8ae3444a81e60e18a05430bb869ba4b3b"}], "stats": {"total": 88, "additions": 72, "deletions": 16}, "files": [{"sha": "75758c2cdf4d71494615838657530d4b02fa4e9b", "filename": "src/comp/middle/last_use.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072/src%2Fcomp%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072/src%2Fcomp%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flast_use.rs?ref=d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072", "patch": "@@ -1,7 +1,7 @@\n import syntax::{visit, ast_util};\n import syntax::ast::*;\n import syntax::codemap::span;\n-import std::list::{list, nil, cons, tail};\n+import std::list::{is_not_empty, list, nil, cons, tail};\n import core::{vec, option};\n import std::list;\n \n@@ -177,7 +177,9 @@ fn visit_block(tp: block_type, cx: ctx, visit: block()) {\n     visit();\n     local.second = true;\n     visit();\n-    cx.blocks = tail(cx.blocks);\n+    let cx_blocks = cx.blocks;\n+    check is_not_empty(cx_blocks);\n+    cx.blocks = tail(cx_blocks);\n     cx.current = join_branches(local.exits);\n }\n "}, {"sha": "ceb8e53f7cea83c9aed155b345dc2a3ce880ff1f", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072", "patch": "@@ -266,6 +266,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n             let imp = follow_import(*e, sc, *path, vi.span);\n             if option::is_some(imp) {\n                 let glob = {def: option::get(imp), item: vi};\n+                check list::is_not_empty(sc);\n                 alt list::head(sc) {\n                   scope_item(i) {\n                     e.mod_map.get(i.id).glob_imports += [glob];\n@@ -455,6 +456,7 @@ fn visit_block_with_scope(b: ast::blk, sc: scopes, v: vt<scopes>) {\n }\n \n fn visit_decl_with_scope(d: @decl, sc: scopes, v: vt<scopes>) {\n+    check list::is_not_empty(sc);\n     let loc_pos = alt list::head(sc) {\n       scope_block(_, _, pos) { pos }\n       _ { @mutable 0u }"}, {"sha": "f6b46ed7d2e86f4538e947445570da5cffa14912", "filename": "src/libstd/list.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072", "patch": "@@ -97,6 +97,27 @@ fn has<copy T>(ls: list<T>, elt: T) -> bool {\n     ret false;\n }\n \n+/*\n+Function: is_empty\n+\n+Returns true if the list is empty.\n+*/\n+pure fn is_empty<copy T>(ls: list<T>) -> bool {\n+    alt ls {\n+        nil. { true }\n+        _ { false }\n+    }\n+}\n+\n+/*\n+Function: is_not_empty\n+\n+Returns true if the list is not empty.\n+*/\n+pure fn is_not_empty<copy T>(ls: list<T>) -> bool {\n+    ret !is_empty(ls);\n+}\n+\n /*\n Function: len\n \n@@ -112,17 +133,23 @@ Function: tail\n \n Returns all but the first element of a list\n */\n-pure fn tail<copy T>(ls: list<T>) -> list<T> {\n-    alt ls { cons(_, tl) { ret *tl; } nil. { fail \"list empty\" } }\n+pure fn tail<copy T>(ls: list<T>) : is_not_empty(ls) -> list<T> {\n+    alt ls {\n+        cons(_, tl) { ret *tl; }\n+        nil. { fail \"list empty\" }\n+    }\n }\n \n /*\n Function: head\n \n Returns the first element of a list\n */\n-pure fn head<copy T>(ls: list<T>) -> T {\n-    alt ls { cons(hd, _) { ret hd; } nil. { fail \"list empty\" } }\n+pure fn head<copy T>(ls: list<T>) : is_not_empty(ls) -> T {\n+    alt ls {\n+        cons(hd, _) { ret hd; }\n+        nil. { fail \"list empty\" }\n+    }\n }\n \n /*"}, {"sha": "27f3b530154dbcd29d6e7881827f334bf798a60d", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072", "patch": "@@ -14,7 +14,10 @@ pure fn nonempty_list<copy T>(ls: list<T>) -> bool { pure_length(ls) > 0u }\n // knowledge that ls is a cons node. Future work.\n // Also, this is pretty contrived since nonempty_list\n // could be a \"tag refinement\", if we implement those.\n-fn safe_head<copy T>(ls: list<T>) : nonempty_list(ls) -> T { head(ls) }\n+fn safe_head<copy T>(ls: list<T>) : nonempty_list(ls) -> T {\n+    check is_not_empty(ls);\n+    ret head(ls);\n+}\n \n fn main() {\n     let mylist = cons(@1u, @nil);"}, {"sha": "035b18f805125e060a218c85cbfa1f57fe417c73", "filename": "src/test/run-pass/unchecked-predicates.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs?ref=d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072", "patch": "@@ -1,12 +1,17 @@\n // Uses foldl to exhibit the unchecked block syntax.\n+// TODO: since list's head/tail require the predicate \"is_not_empty\" now and\n+// we have unit tests for list, this test might me not necessary anymore?\n use std;\n \n import std::list::*;\n \n // Can't easily be written as a \"pure fn\" because there's\n // no syntax for specifying that f is pure.\n fn pure_foldl<copy T, copy U>(ls: list<T>, u: U, f: block(T, U) -> U) -> U {\n-    alt ls { nil. { u } cons(hd, tl) { f(hd, pure_foldl(*tl, f(hd, u), f)) } }\n+    alt ls {\n+        nil. { u }\n+        cons(hd, tl) { f(hd, pure_foldl(*tl, f(hd, u), f)) }\n+    }\n }\n \n // Shows how to use an \"unchecked\" block to call a general\n@@ -22,7 +27,10 @@ pure fn nonempty_list<copy T>(ls: list<T>) -> bool { pure_length(ls) > 0u }\n // knowledge that ls is a cons node. Future work.\n // Also, this is pretty contrived since nonempty_list\n // could be a \"tag refinement\", if we implement those.\n-fn safe_head<copy T>(ls: list<T>) : nonempty_list(ls) -> T { head(ls) }\n+fn safe_head<copy T>(ls: list<T>) : nonempty_list(ls) -> T {\n+    check is_not_empty(ls);\n+    ret head(ls)\n+}\n \n fn main() {\n     let mylist = cons(@1u, @nil);"}, {"sha": "d88e669378a75253a440898e693fe47b39452788", "filename": "src/test/stdtest/list.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072/src%2Ftest%2Fstdtest%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072/src%2Ftest%2Fstdtest%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Flist.rs?ref=d07c6e8a0ede3114ebfd8c3ea6cc161cf009f072", "patch": "@@ -2,17 +2,23 @@ import core::*;\n \n use std;\n import std::list;\n-import std::list::head;\n-import std::list::tail;\n-import std::list::from_vec;\n+import std::list::{from_vec, head, is_not_empty, tail};\n import option;\n \n #[test]\n fn test_from_vec() {\n     let l = from_vec([0, 1, 2]);\n+\n+    check is_not_empty(l);\n     assert (head(l) == 0);\n-    assert (head(tail(l)) == 1);\n-    assert (head(tail(tail(l))) == 2);\n+\n+    let tail_l = tail(l);\n+    check is_not_empty(tail_l);\n+    assert (head(tail_l) == 1);\n+\n+    let tail_tail_l = tail(tail_l);\n+    check is_not_empty(tail_tail_l);\n+    assert (head(tail_tail_l) == 2);\n }\n \n #[test]\n@@ -24,9 +30,17 @@ fn test_from_vec_empty() {\n #[test]\n fn test_from_vec_mut() {\n     let l = from_vec([mutable 0, 1, 2]);\n+\n+    check is_not_empty(l);\n     assert (head(l) == 0);\n-    assert (head(tail(l)) == 1);\n-    assert (head(tail(tail(l))) == 2);\n+\n+    let tail_l = tail(l);\n+    check is_not_empty(tail_l);\n+    assert (head(tail_l) == 1);\n+\n+    let tail_tail_l = tail(tail_l);\n+    check is_not_empty(tail_tail_l);\n+    assert (head(tail_tail_l) == 2);\n }\n \n #[test]"}]}