{"sha": "bbd060d85a8adb0f3df26cfb84629127a9b8561a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZDA2MGQ4NWE4YWRiMGYzZGYyNmNmYjg0NjI5MTI3YTliODU2MWE=", "commit": {"author": {"name": "JP-Ellis", "email": "coujellis@gmail.com", "date": "2015-02-28T03:29:54Z"}, "committer": {"name": "JP-Ellis", "email": "coujellis@gmail.com", "date": "2015-02-28T03:29:54Z"}, "message": "Update iter::order to be more generic.\n\nSigned-off-by: JP-Ellis <coujellis@gmail.com>", "tree": {"sha": "3f85a98a583f768433afd5e909c94e128dc2903b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f85a98a583f768433afd5e909c94e128dc2903b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbd060d85a8adb0f3df26cfb84629127a9b8561a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd060d85a8adb0f3df26cfb84629127a9b8561a", "html_url": "https://github.com/rust-lang/rust/commit/bbd060d85a8adb0f3df26cfb84629127a9b8561a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbd060d85a8adb0f3df26cfb84629127a9b8561a/comments", "author": null, "committer": null, "parents": [{"sha": "e233987ce1de88a48db2ce612019ba644d3cf5dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e233987ce1de88a48db2ce612019ba644d3cf5dd", "html_url": "https://github.com/rust-lang/rust/commit/e233987ce1de88a48db2ce612019ba644d3cf5dd"}], "stats": {"total": 54, "additions": 20, "deletions": 34}, "files": [{"sha": "4c9e8f47d0eb2f04d0279642a405f3345295e6d4", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 20, "deletions": 34, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bbd060d85a8adb0f3df26cfb84629127a9b8561a/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd060d85a8adb0f3df26cfb84629127a9b8561a/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=bbd060d85a8adb0f3df26cfb84629127a9b8561a", "patch": "@@ -2874,10 +2874,10 @@ pub mod order {\n     use super::Iterator;\n \n     /// Compare `a` and `b` for equality using `Eq`\n-    pub fn equals<A, T, S>(mut a: T, mut b: S) -> bool where\n+    pub fn equals<A, L, R>(mut a: L, mut b: R) -> bool where\n         A: Eq,\n-        T: Iterator<Item=A>,\n-        S: Iterator<Item=A>,\n+        L: Iterator<Item=A>,\n+        R: Iterator<Item=A>,\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -2889,10 +2889,10 @@ pub mod order {\n     }\n \n     /// Order `a` and `b` lexicographically using `Ord`\n-    pub fn cmp<A, T, S>(mut a: T, mut b: S) -> cmp::Ordering where\n+    pub fn cmp<A, L, R>(mut a: L, mut b: R) -> cmp::Ordering where\n         A: Ord,\n-        T: Iterator<Item=A>,\n-        S: Iterator<Item=A>,\n+        L: Iterator<Item=A>,\n+        R: Iterator<Item=A>,\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -2908,10 +2908,8 @@ pub mod order {\n     }\n \n     /// Order `a` and `b` lexicographically using `PartialOrd`\n-    pub fn partial_cmp<A, T, S>(mut a: T, mut b: S) -> Option<cmp::Ordering> where\n-        A: PartialOrd,\n-        T: Iterator<Item=A>,\n-        S: Iterator<Item=A>,\n+    pub fn partial_cmp<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> Option<cmp::Ordering> where\n+        L::Item: PartialOrd<R::Item>\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -2927,10 +2925,8 @@ pub mod order {\n     }\n \n     /// Compare `a` and `b` for equality (Using partial equality, `PartialEq`)\n-    pub fn eq<A, B, L, R>(mut a: L, mut b: R) -> bool where\n-        A: PartialEq<B>,\n-        L: Iterator<Item=A>,\n-        R: Iterator<Item=B>,\n+    pub fn eq<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> bool where\n+        L::Item: PartialEq<R::Item>,\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -2942,10 +2938,8 @@ pub mod order {\n     }\n \n     /// Compare `a` and `b` for nonequality (Using partial equality, `PartialEq`)\n-    pub fn ne<A, B, L, R>(mut a: L, mut b: R) -> bool where\n-        A: PartialEq<B>,\n-        L: Iterator<Item=A>,\n-        R: Iterator<Item=B>,\n+    pub fn ne<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> bool where\n+        L::Item: PartialEq<R::Item>,\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -2957,10 +2951,8 @@ pub mod order {\n     }\n \n     /// Return `a` < `b` lexicographically (Using partial order, `PartialOrd`)\n-    pub fn lt<A, T, S>(mut a: T, mut b: S) -> bool where\n-        A: PartialOrd,\n-        T: Iterator<Item=A>,\n-        S: Iterator<Item=A>,\n+    pub fn lt<R: Iterator, L: Iterator>(mut a: L, mut b: R) -> bool where\n+        L::Item: PartialOrd<R::Item>,\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -2973,10 +2965,8 @@ pub mod order {\n     }\n \n     /// Return `a` <= `b` lexicographically (Using partial order, `PartialOrd`)\n-    pub fn le<A, T, S>(mut a: T, mut b: S) -> bool where\n-        A: PartialOrd,\n-        T: Iterator<Item=A>,\n-        S: Iterator<Item=A>,\n+    pub fn le<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> bool where\n+        L::Item: PartialOrd<R::Item>,\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -2989,10 +2979,8 @@ pub mod order {\n     }\n \n     /// Return `a` > `b` lexicographically (Using partial order, `PartialOrd`)\n-    pub fn gt<A, T, S>(mut a: T, mut b: S) -> bool where\n-        A: PartialOrd,\n-        T: Iterator<Item=A>,\n-        S: Iterator<Item=A>,\n+    pub fn gt<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> bool where\n+        L::Item: PartialOrd<R::Item>,\n     {\n         loop {\n             match (a.next(), b.next()) {\n@@ -3005,10 +2993,8 @@ pub mod order {\n     }\n \n     /// Return `a` >= `b` lexicographically (Using partial order, `PartialOrd`)\n-    pub fn ge<A, T, S>(mut a: T, mut b: S) -> bool where\n-        A: PartialOrd,\n-        T: Iterator<Item=A>,\n-        S: Iterator<Item=A>,\n+    pub fn ge<L: Iterator, R: Iterator>(mut a: L, mut b: R) -> bool where\n+        L::Item: PartialOrd<R::Item>,\n     {\n         loop {\n             match (a.next(), b.next()) {"}]}