{"sha": "406dace6f296c818438620b558b1add62b6e55a0", "node_id": "C_kwDOAAsO6NoAKDQwNmRhY2U2ZjI5NmM4MTg0Mzg2MjBiNTU4YjFhZGQ2MmI2ZTU1YTA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-01T02:31:48Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-02T04:24:01Z"}, "message": "Inline and remove `early_lint_node`.\n\nIt has a single call site.", "tree": {"sha": "f622ac9d384517975251e479b73ae23caf247d46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f622ac9d384517975251e479b73ae23caf247d46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/406dace6f296c818438620b558b1add62b6e55a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/406dace6f296c818438620b558b1add62b6e55a0", "html_url": "https://github.com/rust-lang/rust/commit/406dace6f296c818438620b558b1add62b6e55a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/406dace6f296c818438620b558b1add62b6e55a0/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9b02af62b07d20e3e86ad3ee39434e62401bbff", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b02af62b07d20e3e86ad3ee39434e62401bbff", "html_url": "https://github.com/rust-lang/rust/commit/a9b02af62b07d20e3e86ad3ee39434e62401bbff"}], "stats": {"total": 47, "additions": 12, "deletions": 35}, "files": [{"sha": "215df567e0e02f8e0f2b5bcc22b57c013d61c184", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 12, "deletions": 35, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/406dace6f296c818438620b558b1add62b6e55a0/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406dace6f296c818438620b558b1add62b6e55a0/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=406dace6f296c818438620b558b1add62b6e55a0", "patch": "@@ -363,30 +363,6 @@ impl<'a> EarlyCheckNode<'a> for (ast::NodeId, &'a [ast::Attribute], &'a [P<ast::\n     }\n }\n \n-fn early_lint_node<'a>(\n-    sess: &Session,\n-    warn_about_weird_lints: bool,\n-    lint_store: &LintStore,\n-    registered_tools: &RegisteredTools,\n-    buffered: LintBuffer,\n-    pass: impl EarlyLintPass,\n-    check_node: impl EarlyCheckNode<'a>,\n-) -> LintBuffer {\n-    let mut cx = EarlyContextAndPass {\n-        context: EarlyContext::new(\n-            sess,\n-            warn_about_weird_lints,\n-            lint_store,\n-            registered_tools,\n-            buffered,\n-        ),\n-        pass,\n-    };\n-\n-    cx.with_lint_attrs(check_node.id(), check_node.attrs(), |cx| check_node.check(cx));\n-    cx.context.buffered\n-}\n-\n pub fn check_ast_node<'a>(\n     sess: &Session,\n     pre_expansion: bool,\n@@ -401,21 +377,22 @@ pub fn check_ast_node<'a>(\n     let mut passes: Vec<_> = passes.iter().map(|p| (p)()).collect();\n     passes.push(Box::new(builtin_lints));\n \n-    let mut buffered = lint_buffer.unwrap_or_default();\n-    buffered = early_lint_node(\n-        sess,\n-        !pre_expansion,\n-        lint_store,\n-        registered_tools,\n-        buffered,\n-        EarlyLintPassObjects { lints: &mut passes[..] },\n-        check_node,\n-    );\n+    let mut cx = EarlyContextAndPass {\n+        context: EarlyContext::new(\n+            sess,\n+            !pre_expansion,\n+            lint_store,\n+            registered_tools,\n+            lint_buffer.unwrap_or_default(),\n+        ),\n+        pass: EarlyLintPassObjects { lints: &mut passes[..] },\n+    };\n+    cx.with_lint_attrs(check_node.id(), check_node.attrs(), |cx| check_node.check(cx));\n \n     // All of the buffered lints should have been emitted at this point.\n     // If not, that means that we somehow buffered a lint for a node id\n     // that was not lint-checked (perhaps it doesn't exist?). This is a bug.\n-    for (id, lints) in buffered.map {\n+    for (id, lints) in cx.context.buffered.map {\n         for early_lint in lints {\n             sess.delay_span_bug(\n                 early_lint.span,"}]}