{"sha": "18612b21d05ce0021f9ef995592b158e181ffd90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NjEyYjIxZDA1Y2UwMDIxZjllZjk5NTU5MmIxNThlMTgxZmZkOTA=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-06-04T08:47:21Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2017-06-04T08:47:21Z"}, "message": "Delegate str:Index(Mut) to SliceIndex<str>\n\nMove any extra logic that the former had into the latter, so they're consistent.", "tree": {"sha": "2c4ae1c1ee4552f50ef381e11379897030eb7933", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c4ae1c1ee4552f50ef381e11379897030eb7933"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18612b21d05ce0021f9ef995592b158e181ffd90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18612b21d05ce0021f9ef995592b158e181ffd90", "html_url": "https://github.com/rust-lang/rust/commit/18612b21d05ce0021f9ef995592b158e181ffd90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18612b21d05ce0021f9ef995592b158e181ffd90/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb907adbbd1727938245a67db1c92be7e4dec3e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb907adbbd1727938245a67db1c92be7e4dec3e6", "html_url": "https://github.com/rust-lang/rust/commit/bb907adbbd1727938245a67db1c92be7e4dec3e6"}], "stats": {"total": 55, "additions": 18, "deletions": 37}, "files": [{"sha": "76a5d0c0b50b158668427e20f64aa0277f0c30ac", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 18, "deletions": 37, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/18612b21d05ce0021f9ef995592b158e181ffd90/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18612b21d05ce0021f9ef995592b158e181ffd90/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=18612b21d05ce0021f9ef995592b158e181ffd90", "patch": "@@ -1617,12 +1617,7 @@ mod traits {\n \n         #[inline]\n         fn index(&self, index: ops::RangeTo<usize>) -> &str {\n-            // is_char_boundary checks that the index is in [0, .len()]\n-            if self.is_char_boundary(index.end) {\n-                unsafe { self.slice_unchecked(0, index.end) }\n-            } else {\n-                super::slice_error_fail(self, 0, index.end)\n-            }\n+            index.index(self)\n         }\n     }\n \n@@ -1636,12 +1631,7 @@ mod traits {\n     impl ops::IndexMut<ops::RangeTo<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut str {\n-            // is_char_boundary checks that the index is in [0, .len()]\n-            if self.is_char_boundary(index.end) {\n-                unsafe { self.slice_mut_unchecked(0, index.end) }\n-            } else {\n-                super::slice_error_fail(self, 0, index.end)\n-            }\n+            index.index_mut(self)\n         }\n     }\n \n@@ -1657,12 +1647,7 @@ mod traits {\n \n         #[inline]\n         fn index(&self, index: ops::RangeFrom<usize>) -> &str {\n-            // is_char_boundary checks that the index is in [0, .len()]\n-            if self.is_char_boundary(index.start) {\n-                unsafe { self.slice_unchecked(index.start, self.len()) }\n-            } else {\n-                super::slice_error_fail(self, index.start, self.len())\n-            }\n+            index.index(self)\n         }\n     }\n \n@@ -1676,13 +1661,7 @@ mod traits {\n     impl ops::IndexMut<ops::RangeFrom<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut str {\n-            // is_char_boundary checks that the index is in [0, .len()]\n-            if self.is_char_boundary(index.start) {\n-                let len = self.len();\n-                unsafe { self.slice_mut_unchecked(index.start, len) }\n-            } else {\n-                super::slice_error_fail(self, index.start, self.len())\n-            }\n+            index.index_mut(self)\n         }\n     }\n \n@@ -1724,9 +1703,7 @@ mod traits {\n \n         #[inline]\n         fn index(&self, index: ops::RangeInclusive<usize>) -> &str {\n-            assert!(index.end != usize::max_value(),\n-                \"attempted to index str up to maximum usize\");\n-            self.index(index.start .. index.end+1)\n+            index.index(self)\n         }\n     }\n \n@@ -1738,9 +1715,7 @@ mod traits {\n \n         #[inline]\n         fn index(&self, index: ops::RangeToInclusive<usize>) -> &str {\n-            assert!(index.end != usize::max_value(),\n-                \"attempted to index str up to maximum usize\");\n-            self.index(.. index.end+1)\n+            index.index(self)\n         }\n     }\n \n@@ -1750,9 +1725,7 @@ mod traits {\n     impl ops::IndexMut<ops::RangeInclusive<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeInclusive<usize>) -> &mut str {\n-            assert!(index.end != usize::max_value(),\n-                \"attempted to index str up to maximum usize\");\n-            self.index_mut(index.start .. index.end+1)\n+            index.index_mut(self)\n         }\n     }\n     #[unstable(feature = \"inclusive_range\",\n@@ -1761,9 +1734,7 @@ mod traits {\n     impl ops::IndexMut<ops::RangeToInclusive<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeToInclusive<usize>) -> &mut str {\n-            assert!(index.end != usize::max_value(),\n-                \"attempted to index str up to maximum usize\");\n-            self.index_mut(.. index.end+1)\n+            index.index_mut(self)\n         }\n     }\n \n@@ -1886,6 +1857,7 @@ mod traits {\n         }\n         #[inline]\n         fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n+            // is_char_boundary checks that the index is in [0, .len()]\n             if slice.is_char_boundary(self.end) {\n                 unsafe { self.get_unchecked_mut(slice) }\n             } else {\n@@ -1932,6 +1904,7 @@ mod traits {\n         }\n         #[inline]\n         fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n+            // is_char_boundary checks that the index is in [0, .len()]\n             if slice.is_char_boundary(self.start) {\n                 unsafe { self.get_unchecked_mut(slice) }\n             } else {\n@@ -1961,10 +1934,14 @@ mod traits {\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n+            assert!(self.end != usize::max_value(),\n+                \"attempted to index str up to maximum usize\");\n             (self.start..self.end+1).index(slice)\n         }\n         #[inline]\n         fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n+            assert!(self.end != usize::max_value(),\n+                \"attempted to index str up to maximum usize\");\n             (self.start..self.end+1).index_mut(slice)\n         }\n     }\n@@ -2002,11 +1979,15 @@ mod traits {\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n+            assert!(self.end != usize::max_value(),\n+                \"attempted to index str up to maximum usize\");\n             let end = self.end + 1;\n             self.get(slice).unwrap_or_else(|| super::slice_error_fail(slice, 0, end))\n         }\n         #[inline]\n         fn index_mut(self, slice: &mut str) -> &mut Self::Output {\n+            assert!(self.end != usize::max_value(),\n+                \"attempted to index str up to maximum usize\");\n             if slice.is_char_boundary(self.end) {\n                 unsafe { self.get_unchecked_mut(slice) }\n             } else {"}]}