{"sha": "4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkM2ZkNjJmODk3ZGE1MGRiMWIyMDNiODZmNDViOWQyY2QyNzJiNGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-20T09:10:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-20T09:10:52Z"}, "message": "Merge #4530\n\n4530: Use snippets in change_return_type_to_result r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "595b6ff2205303b2eeb55a275ac0d364742732e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/595b6ff2205303b2eeb55a275ac0d364742732e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJexPQcCRBK7hj4Ov3rIwAAdHIIAFPHOEWbPpoYiQ5yQJJgRxcg\nXv+wNcTk8byeFje0rgOBUMEYX9uEhiwo8L8e/hB/EoPpdINjkAezNZgURGGONZHx\nzS1CtewEzhAfUUKMm6DMCrYw+qlUvqiXCqqJ9gOSb3iFbPRoDDJZ4lxG4jsuGxoi\nfx686kjWB5D7q7MfNU+2KDKp6J6EIVQJUXqdih+OC/rB2Dvnd8K1aGyVcdzJXmW8\nA3qNKaAF9dH+cB6hvVj5g5Npaxi+5jPvd4Gr4txqs2xywfEctBJj/OIZof+6mEk2\nG/AXVXPynIuMNFcnVR1hEaspb6u3cyZavRpF2RPVTCIu9OGMus50okdfsZecKzU=\n=PBzl\n-----END PGP SIGNATURE-----\n", "payload": "tree 595b6ff2205303b2eeb55a275ac0d364742732e6\nparent b422cef7dce4d98391de2a108001a49ae1c9625a\nparent 33e111483fbc80c017037e0b158ee652ed41b3e8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589965852 +0000\ncommitter GitHub <noreply@github.com> 1589965852 +0000\n\nMerge #4530\n\n4530: Use snippets in change_return_type_to_result r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "html_url": "https://github.com/rust-lang/rust/commit/4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b422cef7dce4d98391de2a108001a49ae1c9625a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b422cef7dce4d98391de2a108001a49ae1c9625a", "html_url": "https://github.com/rust-lang/rust/commit/b422cef7dce4d98391de2a108001a49ae1c9625a"}, {"sha": "33e111483fbc80c017037e0b158ee652ed41b3e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/33e111483fbc80c017037e0b158ee652ed41b3e8", "html_url": "https://github.com/rust-lang/rust/commit/33e111483fbc80c017037e0b158ee652ed41b3e8"}], "stats": {"total": 177, "additions": 85, "deletions": 92}, "files": [{"sha": "837aa83774ee7fe384f5cc97f021c559b8a86b74", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{\n     ast::{\n         self, AstNode, NameOwner, StructKind, TypeAscriptionOwner, TypeParamsOwner, VisibilityOwner,\n     },\n-    TextSize, T,\n+    T,\n };\n use stdx::{format_to, SepBy};\n \n@@ -25,7 +25,7 @@ use crate::{AssistContext, AssistId, Assists};\n // }\n //\n // impl<T: Clone> Ctx<T> {\n-//     fn new(data: T) -> Self { Self { data } }\n+//     fn $0new(data: T) -> Self { Self { data } }\n // }\n //\n // ```\n@@ -42,31 +42,26 @@ pub(crate) fn add_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let impl_def = find_struct_impl(&ctx, &strukt)?;\n \n     let target = strukt.syntax().text_range();\n-    acc.add(AssistId(\"add_new\"), \"Add default constructor\", target, |edit| {\n+    acc.add(AssistId(\"add_new\"), \"Add default constructor\", target, |builder| {\n         let mut buf = String::with_capacity(512);\n \n         if impl_def.is_some() {\n             buf.push('\\n');\n         }\n \n-        let vis = strukt.visibility().map(|v| format!(\"{} \", v));\n-        let vis = vis.as_deref().unwrap_or(\"\");\n+        let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n \n         let params = field_list\n             .fields()\n             .filter_map(|f| {\n-                Some(format!(\n-                    \"{}: {}\",\n-                    f.name()?.syntax().text(),\n-                    f.ascribed_type()?.syntax().text()\n-                ))\n+                Some(format!(\"{}: {}\", f.name()?.syntax(), f.ascribed_type()?.syntax()))\n             })\n             .sep_by(\", \");\n         let fields = field_list.fields().filter_map(|f| f.name()).sep_by(\", \");\n \n         format_to!(buf, \"    {}fn new({}) -> Self {{ Self {{ {} }} }}\", vis, params, fields);\n \n-        let (start_offset, end_offset) = impl_def\n+        let start_offset = impl_def\n             .and_then(|impl_def| {\n                 buf.push('\\n');\n                 let start = impl_def\n@@ -76,17 +71,20 @@ pub(crate) fn add_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n                     .text_range()\n                     .end();\n \n-                Some((start, TextSize::of(\"\\n\")))\n+                Some(start)\n             })\n             .unwrap_or_else(|| {\n                 buf = generate_impl_text(&strukt, &buf);\n-                let start = strukt.syntax().text_range().end();\n-\n-                (start, TextSize::of(\"\\n}\\n\"))\n+                strukt.syntax().text_range().end()\n             });\n \n-        edit.set_cursor(start_offset + TextSize::of(&buf) - end_offset);\n-        edit.insert(start_offset, buf);\n+        match ctx.config.snippet_cap {\n+            None => builder.insert(start_offset, buf),\n+            Some(cap) => {\n+                buf = buf.replace(\"fn new\", \"fn $0new\");\n+                builder.insert_snippet(cap, start_offset, buf);\n+            }\n+        }\n     })\n }\n \n@@ -191,7 +189,7 @@ mod tests {\n \"struct Foo {}\n \n impl Foo {\n-    fn new() -> Self { Self {  } }<|>\n+    fn $0new() -> Self { Self {  } }\n }\n \",\n         );\n@@ -201,7 +199,7 @@ impl Foo {\n \"struct Foo<T: Clone> {}\n \n impl<T: Clone> Foo<T> {\n-    fn new() -> Self { Self {  } }<|>\n+    fn $0new() -> Self { Self {  } }\n }\n \",\n         );\n@@ -211,7 +209,7 @@ impl<T: Clone> Foo<T> {\n \"struct Foo<'a, T: Foo<'a>> {}\n \n impl<'a, T: Foo<'a>> Foo<'a, T> {\n-    fn new() -> Self { Self {  } }<|>\n+    fn $0new() -> Self { Self {  } }\n }\n \",\n         );\n@@ -221,7 +219,7 @@ impl<'a, T: Foo<'a>> Foo<'a, T> {\n \"struct Foo { baz: String }\n \n impl Foo {\n-    fn new(baz: String) -> Self { Self { baz } }<|>\n+    fn $0new(baz: String) -> Self { Self { baz } }\n }\n \",\n         );\n@@ -231,7 +229,7 @@ impl Foo {\n \"struct Foo { baz: String, qux: Vec<i32> }\n \n impl Foo {\n-    fn new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }<|>\n+    fn $0new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }\n }\n \",\n         );\n@@ -243,7 +241,7 @@ impl Foo {\n \"struct Foo { pub baz: String, pub qux: Vec<i32> }\n \n impl Foo {\n-    fn new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }<|>\n+    fn $0new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }\n }\n \",\n         );\n@@ -258,7 +256,7 @@ impl Foo {}\n \"struct Foo {}\n \n impl Foo {\n-    fn new() -> Self { Self {  } }<|>\n+    fn $0new() -> Self { Self {  } }\n }\n \",\n         );\n@@ -273,7 +271,7 @@ impl Foo {\n \"struct Foo {}\n \n impl Foo {\n-    fn new() -> Self { Self {  } }<|>\n+    fn $0new() -> Self { Self {  } }\n \n     fn qux(&self) {}\n }\n@@ -294,7 +292,7 @@ impl Foo {\n \"struct Foo {}\n \n impl Foo {\n-    fn new() -> Self { Self {  } }<|>\n+    fn $0new() -> Self { Self {  } }\n \n     fn qux(&self) {}\n     fn baz() -> i32 {\n@@ -311,7 +309,7 @@ impl Foo {\n \"pub struct Foo {}\n \n impl Foo {\n-    pub fn new() -> Self { Self {  } }<|>\n+    pub fn $0new() -> Self { Self {  } }\n }\n \",\n         );\n@@ -321,7 +319,7 @@ impl Foo {\n \"pub(crate) struct Foo {}\n \n impl Foo {\n-    pub(crate) fn new() -> Self { Self {  } }<|>\n+    pub(crate) fn $0new() -> Self { Self {  } }\n }\n \",\n         );\n@@ -414,7 +412,7 @@ pub struct Source<T> {\n }\n \n impl<T> Source<T> {\n-    pub fn new(file_id: HirFileId, ast: T) -> Self { Self { file_id, ast } }<|>\n+    pub fn $0new(file_id: HirFileId, ast: T) -> Self { Self { file_id, ast } }\n \n     pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n         Source { file_id: self.file_id, ast: f(self.ast) }"}, {"sha": "f6d25579e0c6193ce22fa499074edeb400706f21", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "patch": "@@ -50,7 +50,12 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n             format!(\"Import `{}`\", &import),\n             range,\n             |builder| {\n-                insert_use_statement(&auto_import_assets.syntax_under_caret, &import, ctx, builder);\n+                insert_use_statement(\n+                    &auto_import_assets.syntax_under_caret,\n+                    &import,\n+                    ctx,\n+                    builder.text_edit_builder(),\n+                );\n             },\n         );\n     }"}, {"sha": "c6baa0a57c6c6d6eb5dd84c4ca1f93e9437e3b73", "filename": "crates/ra_assists/src/handlers/change_return_type_to_result.rs", "status": "modified", "additions": 44, "deletions": 54, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs?ref=4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "patch": "@@ -1,8 +1,6 @@\n use ra_syntax::{\n     ast::{self, BlockExpr, Expr, LoopBodyOwner},\n-    AstNode,\n-    SyntaxKind::{COMMENT, WHITESPACE},\n-    SyntaxNode, TextSize,\n+    AstNode, SyntaxNode,\n };\n \n use crate::{AssistContext, AssistId, Assists};\n@@ -16,39 +14,40 @@ use crate::{AssistContext, AssistId, Assists};\n // ```\n // ->\n // ```\n-// fn foo() -> Result<i32, > { Ok(42i32) }\n+// fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\n // ```\n pub(crate) fn change_return_type_to_result(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let fn_def = ctx.find_node_at_offset::<ast::FnDef>();\n-    let fn_def = &mut fn_def?;\n-    let ret_type = &fn_def.ret_type()?.type_ref()?;\n-    if ret_type.syntax().text().to_string().starts_with(\"Result<\") {\n+    let ret_type = ctx.find_node_at_offset::<ast::RetType>()?;\n+    // FIXME: extend to lambdas as well\n+    let fn_def = ret_type.syntax().parent().and_then(ast::FnDef::cast)?;\n+\n+    let type_ref = &ret_type.type_ref()?;\n+    if type_ref.syntax().text().to_string().starts_with(\"Result<\") {\n         return None;\n     }\n \n     let block_expr = &fn_def.body()?;\n-    let cursor_in_ret_type =\n-        fn_def.ret_type()?.syntax().text_range().contains_range(ctx.frange.range);\n-    if !cursor_in_ret_type {\n-        return None;\n-    }\n \n     acc.add(\n         AssistId(\"change_return_type_to_result\"),\n         \"Change return type to Result\",\n-        ret_type.syntax().text_range(),\n-        |edit| {\n+        type_ref.syntax().text_range(),\n+        |builder| {\n             let mut tail_return_expr_collector = TailReturnCollector::new();\n             tail_return_expr_collector.collect_jump_exprs(block_expr, false);\n             tail_return_expr_collector.collect_tail_exprs(block_expr);\n \n             for ret_expr_arg in tail_return_expr_collector.exprs_to_wrap {\n-                edit.replace_node_and_indent(&ret_expr_arg, format!(\"Ok({})\", ret_expr_arg));\n+                builder.replace_node_and_indent(&ret_expr_arg, format!(\"Ok({})\", ret_expr_arg));\n             }\n-            edit.replace_node_and_indent(ret_type.syntax(), format!(\"Result<{}, >\", ret_type));\n \n-            if let Some(node_start) = result_insertion_offset(&ret_type) {\n-                edit.set_cursor(node_start + TextSize::of(&format!(\"Result<{}, \", ret_type)));\n+            match ctx.config.snippet_cap {\n+                Some(cap) => {\n+                    let snippet = format!(\"Result<{}, ${{0:_}}>\", type_ref);\n+                    builder.replace_snippet(cap, type_ref.syntax().text_range(), snippet)\n+                }\n+                None => builder\n+                    .replace(type_ref.syntax().text_range(), format!(\"Result<{}, _>\", type_ref)),\n             }\n         },\n     )\n@@ -250,17 +249,8 @@ fn get_tail_expr_from_block(expr: &Expr) -> Option<Vec<NodeType>> {\n     }\n }\n \n-fn result_insertion_offset(ret_type: &ast::TypeRef) -> Option<TextSize> {\n-    let non_ws_child = ret_type\n-        .syntax()\n-        .children_with_tokens()\n-        .find(|it| it.kind() != COMMENT && it.kind() != WHITESPACE)?;\n-    Some(non_ws_child.text_range().start())\n-}\n-\n #[cfg(test)]\n mod tests {\n-\n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n@@ -273,7 +263,7 @@ mod tests {\n                 let test = \"test\";\n                 return 42i32;\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 return Ok(42i32);\n             }\"#,\n@@ -288,7 +278,7 @@ mod tests {\n                 let test = \"test\";\n                 return 42i32;\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 return Ok(42i32);\n             }\"#,\n@@ -314,7 +304,7 @@ mod tests {\n                 let test = \"test\";\n                 return 42i32;\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 return Ok(42i32);\n             }\"#,\n@@ -329,7 +319,7 @@ mod tests {\n                 let test = \"test\";\n                 42i32\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 Ok(42i32)\n             }\"#,\n@@ -343,7 +333,7 @@ mod tests {\n             r#\"fn foo() -> i32<|> {\n                 42i32\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 Ok(42i32)\n             }\"#,\n         );\n@@ -359,7 +349,7 @@ mod tests {\n                     24i32\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 if true {\n                     Ok(42i32)\n                 } else {\n@@ -384,7 +374,7 @@ mod tests {\n                     24i32\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 if true {\n                     if false {\n                         Ok(1)\n@@ -413,7 +403,7 @@ mod tests {\n                     24i32.await\n                 }\n             }\"#,\n-            r#\"async fn foo() -> Result<i32, <|>> {\n+            r#\"async fn foo() -> Result<i32, ${0:_}> {\n                 if true {\n                     if false {\n                         Ok(1.await)\n@@ -434,7 +424,7 @@ mod tests {\n             r#\"fn foo() -> [i32;<|> 3] {\n                 [1, 2, 3]\n             }\"#,\n-            r#\"fn foo() -> Result<[i32; 3], <|>> {\n+            r#\"fn foo() -> Result<[i32; 3], ${0:_}> {\n                 Ok([1, 2, 3])\n             }\"#,\n         );\n@@ -455,7 +445,7 @@ mod tests {\n                     24 as i32\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 if true {\n                     if false {\n                         Ok(1 as i32)\n@@ -480,7 +470,7 @@ mod tests {\n                     _ => 24i32,\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let my_var = 5;\n                 match my_var {\n                     5 => Ok(42i32),\n@@ -503,7 +493,7 @@ mod tests {\n \n                 my_var\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let my_var = 5;\n                 loop {\n                     println!(\"test\");\n@@ -526,7 +516,7 @@ mod tests {\n \n                 my_var\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let my_var = let x = loop {\n                     break 1;\n                 };\n@@ -549,7 +539,7 @@ mod tests {\n \n                 res\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let my_var = 5;\n                 let res = match my_var {\n                     5 => 42i32,\n@@ -572,7 +562,7 @@ mod tests {\n \n                 res\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let my_var = 5;\n                 let res = if my_var == 5 {\n                     42i32\n@@ -608,7 +598,7 @@ mod tests {\n                     },\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let my_var = 5;\n                 match my_var {\n                     5 => {\n@@ -641,7 +631,7 @@ mod tests {\n                 }\n                 53i32\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 if test == \"test\" {\n                     return Ok(24i32);\n@@ -672,7 +662,7 @@ mod tests {\n \n                 the_field\n             }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, <|>> {\n+            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n                 let true_closure = || {\n                     return true;\n                 };\n@@ -711,7 +701,7 @@ mod tests {\n \n                 t.unwrap_or_else(|| the_field)\n             }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, <|>> {\n+            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n                 let true_closure = || {\n                     return true;\n                 };\n@@ -749,7 +739,7 @@ mod tests {\n                     i += 1;\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 if test == \"test\" {\n                     return Ok(24i32);\n@@ -781,7 +771,7 @@ mod tests {\n                     }\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 if test == \"test\" {\n                     return Ok(24i32);\n@@ -819,7 +809,7 @@ mod tests {\n                     }\n                 }\n             }\"#,\n-            r#\"fn foo() -> Result<i32, <|>> {\n+            r#\"fn foo() -> Result<i32, ${0:_}> {\n                 let test = \"test\";\n                 let other = 5;\n                 if test == \"test\" {\n@@ -860,7 +850,7 @@ mod tests {\n \n                 the_field\n             }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, <|>> {\n+            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n                 if the_field < 5 {\n                     let mut i = 0;\n                     loop {\n@@ -894,7 +884,7 @@ mod tests {\n \n                 the_field\n             }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, <|>> {\n+            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n                 if the_field < 5 {\n                     let mut i = 0;\n \n@@ -923,7 +913,7 @@ mod tests {\n \n                 the_field\n             }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, <|>> {\n+            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n                 if the_field < 5 {\n                     let mut i = 0;\n \n@@ -953,7 +943,7 @@ mod tests {\n \n                 the_field\n             }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, <|>> {\n+            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n                 if the_field < 5 {\n                     let mut i = 0;\n "}, {"sha": "d9f84208dfe1380939bffde95b8adb0f6a768829", "filename": "crates/ra_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn replace_qualified_name_with_use(\n         target,\n         |builder| {\n             let path_to_import = hir_path.mod_path().clone();\n-            insert_use_statement(path.syntax(), &path_to_import, ctx, builder);\n+            insert_use_statement(path.syntax(), &path_to_import, ctx, builder.text_edit_builder());\n \n             if let Some(last) = path.segment() {\n                 // Here we are assuming the assist will provide a correct use statement"}, {"sha": "cd6129dc58916aa10bd44cc5b2865ae8a29beaf6", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "patch": "@@ -204,7 +204,7 @@ struct Ctx<T: Clone> {\n }\n \n impl<T: Clone> Ctx<T> {\n-    fn new(data: T) -> Self { Self { data } }\n+    fn $0new(data: T) -> Self { Self { data } }\n }\n \n \"#####,\n@@ -276,7 +276,7 @@ fn doctest_change_return_type_to_result() {\n fn foo() -> i32<|> { 42i32 }\n \"#####,\n         r#####\"\n-fn foo() -> Result<i32, > { Ok(42i32) }\n+fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\n \"#####,\n     )\n }"}, {"sha": "0ee43482f79856a7a1f7fa963d6e89cdd3d6ac39", "filename": "crates/ra_assists/src/utils/insert_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils%2Finsert_use.rs?ref=4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "patch": "@@ -11,7 +11,7 @@ use ra_syntax::{\n };\n use ra_text_edit::TextEditBuilder;\n \n-use crate::assist_context::{AssistBuilder, AssistContext};\n+use crate::assist_context::AssistContext;\n \n /// Creates and inserts a use statement for the given path to import.\n /// The use statement is inserted in the scope most appropriate to the\n@@ -21,7 +21,7 @@ pub(crate) fn insert_use_statement(\n     position: &SyntaxNode,\n     path_to_import: &ModPath,\n     ctx: &AssistContext,\n-    builder: &mut AssistBuilder,\n+    builder: &mut TextEditBuilder,\n ) {\n     let target = path_to_import.to_string().split(\"::\").map(SmolStr::new).collect::<Vec<_>>();\n     let container = ctx.sema.ancestors_with_macros(position.clone()).find_map(|n| {\n@@ -33,7 +33,7 @@ pub(crate) fn insert_use_statement(\n \n     if let Some(container) = container {\n         let action = best_action_for_target(container, position.clone(), &target);\n-        make_assist(&action, &target, builder.text_edit_builder());\n+        make_assist(&action, &target, builder);\n     }\n }\n "}, {"sha": "006ec4d547e591c82bffa94c723cb54a44fe4ea4", "filename": "docs/user/assists.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "patch": "@@ -198,7 +198,7 @@ struct Ctx<T: Clone> {\n }\n \n impl<T: Clone> Ctx<T> {\n-    fn new(data: T) -> Self { Self { data } }\n+    fn $0new(data: T) -> Self { Self { data } }\n }\n \n ```\n@@ -268,7 +268,7 @@ Change the function's return type to Result.\n fn foo() -> i32\u2503 { 42i32 }\n \n // AFTER\n-fn foo() -> Result<i32, > { Ok(42i32) }\n+fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\n ```\n \n ## `change_visibility`"}]}