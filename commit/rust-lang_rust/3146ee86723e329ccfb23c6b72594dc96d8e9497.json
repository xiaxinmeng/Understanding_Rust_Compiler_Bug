{"sha": "3146ee86723e329ccfb23c6b72594dc96d8e9497", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNDZlZTg2NzIzZTMyOWNjZmIyM2M2YjcyNTk0ZGM5NmQ4ZTk0OTc=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-02-13T21:26:32Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-02-25T16:35:25Z"}, "message": "rustc: simplify tcx.closure_type(...) as it can copy the cached values.", "tree": {"sha": "3681fe43ed850b9cd65f2e3c1ca50e61d425d000", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3681fe43ed850b9cd65f2e3c1ca50e61d425d000"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3146ee86723e329ccfb23c6b72594dc96d8e9497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3146ee86723e329ccfb23c6b72594dc96d8e9497", "html_url": "https://github.com/rust-lang/rust/commit/3146ee86723e329ccfb23c6b72594dc96d8e9497", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3146ee86723e329ccfb23c6b72594dc96d8e9497/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91374f8fe482e5938a8f08353aa48ef9c7873637", "url": "https://api.github.com/repos/rust-lang/rust/commits/91374f8fe482e5938a8f08353aa48ef9c7873637", "html_url": "https://github.com/rust-lang/rust/commit/91374f8fe482e5938a8f08353aa48ef9c7873637"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "d7f254df7538a6b878e0e9faf2f4850d40a278e8", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=3146ee86723e329ccfb23c6b72594dc96d8e9497", "patch": "@@ -1649,20 +1649,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         Some(self.tcx.closure_kind(def_id))\n     }\n \n-    pub fn closure_type(&self,\n-                        def_id: DefId,\n-                        substs: ty::ClosureSubsts<'tcx>)\n-                        -> ty::PolyFnSig<'tcx>\n-    {\n+    pub fn closure_type(&self, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n         if let InferTables::InProgress(tables) = self.tables {\n             if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n-                if let Some(ty) = tables.borrow().closure_tys.get(&id) {\n-                    return ty.subst(self.tcx, substs.substs);\n+                if let Some(&ty) = tables.borrow().closure_tys.get(&id) {\n+                    return ty;\n                 }\n             }\n         }\n \n-        self.tcx.closure_type(def_id, substs)\n+        self.tcx.closure_type(def_id)\n     }\n }\n "}, {"sha": "a8c1559ae2373b309ca0072d0c0ec90790d1f917", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=3146ee86723e329ccfb23c6b72594dc96d8e9497", "patch": "@@ -1432,12 +1432,16 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                  body: &hir::Body)\n     {\n         let fn_ty = self.ir.tcx.item_type(self.ir.tcx.hir.local_def_id(id));\n-        let fn_ret = match fn_ty.sty {\n-            ty::TyClosure(closure_def_id, substs) =>\n-                self.ir.tcx.closure_type(closure_def_id, substs).output(),\n-            _ => fn_ty.fn_ret()\n+        let fn_sig = match fn_ty.sty {\n+            ty::TyClosure(closure_def_id, substs) => {\n+                self.ir.tcx.closure_type(closure_def_id)\n+                    .subst(self.ir.tcx, substs.substs)\n+            }\n+            _ => fn_ty.fn_sig()\n         };\n \n+        let fn_ret = fn_sig.output();\n+\n         // within the fn body, late-bound regions are liberated\n         // and must outlive the *call-site* of the function.\n         let fn_ret ="}, {"sha": "448a3166bd8609ec1db82482a6f75ba31edd0451", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=3146ee86723e329ccfb23c6b72594dc96d8e9497", "patch": "@@ -1208,7 +1208,8 @@ fn confirm_closure_candidate<'cx, 'gcx, 'tcx>(\n     -> Progress<'tcx>\n {\n     let closure_typer = selcx.closure_typer();\n-    let closure_type = closure_typer.closure_type(vtable.closure_def_id, vtable.substs);\n+    let closure_type = closure_typer.closure_type(vtable.closure_def_id)\n+        .subst(selcx.tcx(), vtable.substs.substs);\n     let Normalized {\n         value: closure_type,\n         obligations"}, {"sha": "e12ebb6d5157678b933c999d7d7cebeeb8f8062d", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=3146ee86723e329ccfb23c6b72594dc96d8e9497", "patch": "@@ -2779,7 +2779,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                                       substs: ty::ClosureSubsts<'tcx>)\n                                       -> ty::PolyTraitRef<'tcx>\n     {\n-        let closure_type = self.infcx.closure_type(closure_def_id, substs);\n+        let closure_type = self.infcx.closure_type(closure_def_id)\n+            .subst(self.tcx(), substs.substs);\n         let ty::Binder((trait_ref, _)) =\n             self.tcx().closure_trait_ref_and_return_type(obligation.predicate.def_id(),\n                                                          obligation.predicate.0.self_ty(), // (1)"}, {"sha": "01be42881462a157cf48dfc745d5e77bc90e73ab", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3146ee86723e329ccfb23c6b72594dc96d8e9497", "patch": "@@ -2467,16 +2467,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.maps.closure_kind(self, def_id)\n     }\n \n-    pub fn closure_type(self,\n-                        def_id: DefId,\n-                        substs: ClosureSubsts<'tcx>)\n-                        -> ty::PolyFnSig<'tcx>\n-    {\n-        if let Some(ty) = self.maps.closure_type.borrow().get(&def_id) {\n-            return ty.subst(self, substs.substs);\n-        }\n-\n-        self.maps.closure_type(self, def_id).subst(self, substs.substs)\n+    pub fn closure_type(self, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n+        self.maps.closure_type(self, def_id)\n     }\n \n     /// Given the def_id of an impl, return the def_id of the trait it implements."}, {"sha": "ed1cff31f2ff93f0f48f65a2f4bbbb0aea7d0284", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=3146ee86723e329ccfb23c6b72594dc96d8e9497", "patch": "@@ -1096,7 +1096,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         let data = ClosureData {\n             kind: tcx.closure_kind(def_id),\n-            ty: self.lazy(&tcx.maps.closure_type.borrow()[&def_id]),\n+            ty: self.lazy(&tcx.closure_type(def_id)),\n         };\n \n         Entry {"}, {"sha": "4925c9d547e9d19ac45108ae6479dcedc2b3b2b0", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=3146ee86723e329ccfb23c6b72594dc96d8e9497", "patch": "@@ -18,7 +18,7 @@ pub use self::CalleeData::*;\n \n use llvm::{self, ValueRef, get_params};\n use rustc::hir::def_id::DefId;\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{Substs, Subst};\n use rustc::traits;\n use abi::{Abi, FnType};\n use attributes;\n@@ -306,7 +306,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     let ref_closure_ty = tcx.mk_imm_ref(tcx.mk_region(ty::ReErased), closure_ty);\n \n     // Make a version with the type of by-ref closure.\n-    let sig = tcx.closure_type(def_id, substs);\n+    let sig = tcx.closure_type(def_id).subst(tcx, substs.substs);\n     let sig = tcx.erase_late_bound_regions_and_normalize(&sig);\n     assert_eq!(sig.abi, Abi::RustCall);\n     let llref_fn_ty = tcx.mk_fn_ptr(ty::Binder(tcx.mk_fn_sig("}, {"sha": "1032da7ef75bb4ff9f66d87f67388b01afc14eb9", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=3146ee86723e329ccfb23c6b72594dc96d8e9497", "patch": "@@ -29,6 +29,7 @@ use type_::Type;\n use value::Value;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::Layout;\n+use rustc::ty::subst::Subst;\n use rustc::traits::{self, SelectionContext, Reveal};\n use rustc::hir;\n \n@@ -579,7 +580,7 @@ pub fn ty_fn_sig<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         ty::TyFnPtr(sig) => sig,\n         ty::TyClosure(def_id, substs) => {\n             let tcx = ccx.tcx();\n-            let sig = tcx.closure_type(def_id, substs);\n+            let sig = tcx.closure_type(def_id).subst(tcx, substs.substs);\n \n             let env_region = ty::ReLateBound(ty::DebruijnIndex::new(1), ty::BrEnv);\n             let env_ty = match tcx.closure_kind(def_id) {"}, {"sha": "1f595cae6a805425787974ddbef65cd8c0e4d8a1", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=3146ee86723e329ccfb23c6b72594dc96d8e9497", "patch": "@@ -20,7 +20,7 @@ use rustc::mir;\n use rustc::mir::tcx::LvalueTy;\n use rustc::ty::{self, layout, Ty, TyCtxt, TypeFoldable};\n use rustc::ty::cast::{CastTy, IntTy};\n-use rustc::ty::subst::{Kind, Substs};\n+use rustc::ty::subst::{Kind, Substs, Subst};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use {abi, adt, base, Disr, machine};\n use callee::Callee;\n@@ -588,7 +588,8 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                                     .find(|it| it.kind == ty::AssociatedKind::Method)\n                                     .unwrap().def_id;\n                                 // Now create its substs [Closure, Tuple]\n-                                let input = tcx.closure_type(def_id, substs).input(0);\n+                                let input = tcx.closure_type(def_id)\n+                                    .subst(tcx, substs.substs).input(0);\n                                 let substs = tcx.mk_substs([operand.ty, input.skip_binder()]\n                                     .iter().cloned().map(Kind::from));\n                                 Callee::def(self.ccx, call_once, substs)"}, {"sha": "037c771c97b066d52987a7248dcec1042afc1712", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=3146ee86723e329ccfb23c6b72594dc96d8e9497", "patch": "@@ -12,7 +12,7 @@ use llvm::{self, ValueRef};\n use rustc::ty::{self, Ty};\n use rustc::ty::cast::{CastTy, IntTy};\n use rustc::ty::layout::Layout;\n-use rustc::ty::subst::Kind;\n+use rustc::ty::subst::{Kind, Subst};\n use rustc::mir::tcx::LvalueTy;\n use rustc::mir;\n use middle::lang_items::ExchangeMallocFnLangItem;\n@@ -201,7 +201,8 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                                     .find(|it| it.kind == ty::AssociatedKind::Method)\n                                     .unwrap().def_id;\n                                 // Now create its substs [Closure, Tuple]\n-                                let input = bcx.tcx().closure_type(def_id, substs).input(0);\n+                                let input = bcx.tcx().closure_type(def_id)\n+                                    .subst(bcx.tcx(), substs.substs).input(0);\n                                 let substs = bcx.tcx().mk_substs([operand.ty, input.skip_binder()]\n                                     .iter().cloned().map(Kind::from));\n                                 OperandValue::Immediate("}, {"sha": "4b88f5acf42da2415ea3442fec3c06440ef307b2", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=3146ee86723e329ccfb23c6b72594dc96d8e9497", "patch": "@@ -14,6 +14,7 @@ use hir::def::Def;\n use hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::{infer, traits};\n use rustc::ty::{self, TyCtxt, LvaluePreference, Ty};\n+use rustc::ty::subst::Subst;\n use syntax::abi;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n@@ -110,7 +111,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // haven't yet decided on whether the closure is fn vs\n                 // fnmut vs fnonce. If so, we have to defer further processing.\n                 if self.closure_kind(def_id).is_none() {\n-                    let closure_ty = self.closure_type(def_id, substs);\n+                    let closure_ty = self.closure_type(def_id).subst(self.tcx, substs.substs);\n                     let fn_sig = self.replace_late_bound_regions_with_fresh_var(call_expr.span,\n                                                                    infer::FnCall,\n                                                                    &closure_ty)"}, {"sha": "53759cc115d1cb69039a9473cdb2fc04c5b1446b", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3146ee86723e329ccfb23c6b72594dc96d8e9497/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=3146ee86723e329ccfb23c6b72594dc96d8e9497", "patch": "@@ -72,6 +72,7 @@ use rustc::ty::{self, LvaluePreference, TypeAndMut,\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::error::TypeError;\n use rustc::ty::relate::RelateResult;\n+use rustc::ty::subst::Subst;\n use syntax::abi;\n use syntax::feature_gate;\n use util::common::indent;\n@@ -587,7 +588,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n                 //     `extern \"rust-call\" fn((arg0,arg1,...)) -> _`\n                 // to\n                 //     `fn(arg0,arg1,...) -> _`\n-                let sig = self.closure_type(def_id_a, substs_a);\n+                let sig = self.closure_type(def_id_a).subst(self.tcx, substs_a.substs);\n                 let converted_sig = sig.map_bound(|s| {\n                     let params_iter = match s.inputs()[0].sty {\n                         ty::TyTuple(params, _) => {"}]}