{"sha": "1fda8c207e083acabace5a66d16824a52b43061d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZGE4YzIwN2UwODNhY2FiYWNlNWE2NmQxNjgyNGE1MmI0MzA2MWQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-17T21:20:17Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:06:35Z"}, "message": "somewhat related cleanup", "tree": {"sha": "88f66f88488424c4802b98b02f4d3d6b56a94e02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88f66f88488424c4802b98b02f4d3d6b56a94e02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fda8c207e083acabace5a66d16824a52b43061d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fda8c207e083acabace5a66d16824a52b43061d", "html_url": "https://github.com/rust-lang/rust/commit/1fda8c207e083acabace5a66d16824a52b43061d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fda8c207e083acabace5a66d16824a52b43061d/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "653f56af53c01c38f34f0926dd13ee391a290fa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/653f56af53c01c38f34f0926dd13ee391a290fa0", "html_url": "https://github.com/rust-lang/rust/commit/653f56af53c01c38f34f0926dd13ee391a290fa0"}], "stats": {"total": 15, "additions": 4, "deletions": 11}, "files": [{"sha": "b72dd6382199a37fb459b56cac7a99605d84c61f", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1fda8c207e083acabace5a66d16824a52b43061d/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda8c207e083acabace5a66d16824a52b43061d/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=1fda8c207e083acabace5a66d16824a52b43061d", "patch": "@@ -1302,7 +1302,7 @@ impl<'tcx> Predicate<'tcx> {\n         // from the substitution and the value being substituted into, and\n         // this trick achieves that).\n \n-        let substs = &trait_ref.skip_binder().substs;\n+        let substs = trait_ref.skip_binder().substs;\n         let kind = self.kind();\n         let new = match kind {\n             &PredicateKind::Trait(ref binder, constness) => {\n@@ -1555,13 +1555,6 @@ impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitRef<'tcx>> {\n     }\n }\n \n-impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<&PolyTraitRef<'tcx>> {\n-    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n-        ty::PredicateKind::Trait(self.value.to_poly_trait_predicate(), self.constness)\n-            .to_predicate(tcx)\n-    }\n-}\n-\n impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         PredicateKind::RegionOutlives(self).to_predicate(tcx)"}, {"sha": "cc8997078e0f09e8be8d249074b31370ec3a8513", "filename": "src/librustc_trait_selection/traits/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fda8c207e083acabace5a66d16824a52b43061d/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fda8c207e083acabace5a66d16824a52b43061d/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs?ref=1fda8c207e083acabace5a66d16824a52b43061d", "patch": "@@ -59,8 +59,8 @@ impl<'tcx> TraitAliasExpansionInfo<'tcx> {\n         );\n     }\n \n-    pub fn trait_ref(&self) -> &ty::PolyTraitRef<'tcx> {\n-        &self.top().0\n+    pub fn trait_ref(&self) -> ty::PolyTraitRef<'tcx> {\n+        self.top().0\n     }\n \n     pub fn top(&self) -> &(ty::PolyTraitRef<'tcx>, Span) {\n@@ -109,7 +109,7 @@ impl<'tcx> TraitAliasExpander<'tcx> {\n \n         // Don't recurse if this trait alias is already on the stack for the DFS search.\n         let anon_pred = anonymize_predicate(tcx, pred);\n-        if item.path.iter().rev().skip(1).any(|(tr, _)| {\n+        if item.path.iter().rev().skip(1).any(|&(tr, _)| {\n             anonymize_predicate(tcx, tr.without_const().to_predicate(tcx)) == anon_pred\n         }) {\n             return false;"}]}