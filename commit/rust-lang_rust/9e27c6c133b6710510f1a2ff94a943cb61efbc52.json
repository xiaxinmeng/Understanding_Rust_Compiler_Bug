{"sha": "9e27c6c133b6710510f1a2ff94a943cb61efbc52", "node_id": "C_kwDOAAsO6NoAKDllMjdjNmMxMzNiNjcxMDUxMGYxYTJmZjk0YTk0M2NiNjFlZmJjNTI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-07T08:04:34Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-03-27T12:19:15Z"}, "message": "Some tracing/instrument cleanups", "tree": {"sha": "99113e6f5123db527c9851fde6c95b66eea1ced6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99113e6f5123db527c9851fde6c95b66eea1ced6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e27c6c133b6710510f1a2ff94a943cb61efbc52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e27c6c133b6710510f1a2ff94a943cb61efbc52", "html_url": "https://github.com/rust-lang/rust/commit/9e27c6c133b6710510f1a2ff94a943cb61efbc52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e27c6c133b6710510f1a2ff94a943cb61efbc52/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c13565ca66d25d15ee9146919dd74e57cdfda89", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c13565ca66d25d15ee9146919dd74e57cdfda89", "html_url": "https://github.com/rust-lang/rust/commit/0c13565ca66d25d15ee9146919dd74e57cdfda89"}], "stats": {"total": 32, "additions": 5, "deletions": 27}, "files": [{"sha": "c9dd3e499a8c0dbffd35829e3f0bdc52dca319d7", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9e27c6c133b6710510f1a2ff94a943cb61efbc52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e27c6c133b6710510f1a2ff94a943cb61efbc52/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=9e27c6c133b6710510f1a2ff94a943cb61efbc52", "patch": "@@ -2279,6 +2279,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Returns `true` if the impls are the same polarity and the trait either\n     /// has no items or is annotated `#[marker]` and prevents item overrides.\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     pub fn impls_are_allowed_to_overlap(\n         self,\n         def_id1: DefId,\n@@ -2297,19 +2298,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {\n             (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {\n                 // `#[rustc_reservation_impl]` impls don't overlap with anything\n-                debug!(\n-                    \"impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)\",\n-                    def_id1, def_id2\n-                );\n                 return Some(ImplOverlapKind::Permitted { marker: false });\n             }\n             (ImplPolarity::Positive, ImplPolarity::Negative)\n             | (ImplPolarity::Negative, ImplPolarity::Positive) => {\n                 // `impl AutoTrait for Type` + `impl !AutoTrait for Type`\n-                debug!(\n-                    \"impls_are_allowed_to_overlap({:?}, {:?}) - None (differing polarities)\",\n-                    def_id1, def_id2\n-                );\n                 return None;\n             }\n             (ImplPolarity::Positive, ImplPolarity::Positive)\n@@ -2324,30 +2317,18 @@ impl<'tcx> TyCtxt<'tcx> {\n         };\n \n         if is_marker_overlap {\n-            debug!(\n-                \"impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)\",\n-                def_id1, def_id2\n-            );\n             Some(ImplOverlapKind::Permitted { marker: true })\n         } else {\n             if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {\n                 if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {\n                     if self_ty1 == self_ty2 {\n-                        debug!(\n-                            \"impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK\",\n-                            def_id1, def_id2\n-                        );\n                         return Some(ImplOverlapKind::Issue33140);\n                     } else {\n-                        debug!(\n-                            \"impls_are_allowed_to_overlap({:?}, {:?}) - found {:?} != {:?}\",\n-                            def_id1, def_id2, self_ty1, self_ty2\n-                        );\n+                        debug!(\"found {self_ty1:?} != {self_ty2:?}\");\n                     }\n                 }\n             }\n \n-            debug!(\"impls_are_allowed_to_overlap({:?}, {:?}) = None\", def_id1, def_id2);\n             None\n         }\n     }"}, {"sha": "aa5c624f471ff1aff71e9bf7079476934fe7383e", "filename": "compiler/rustc_trait_selection/src/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9e27c6c133b6710510f1a2ff94a943cb61efbc52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e27c6c133b6710510f1a2ff94a943cb61efbc52/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=9e27c6c133b6710510f1a2ff94a943cb61efbc52", "patch": "@@ -21,6 +21,7 @@ pub struct FutureCompatOverlapError<'tcx> {\n }\n \n /// The result of attempting to insert an impl into a group of children.\n+#[derive(Debug)]\n enum Inserted<'tcx> {\n     /// The impl was inserted as a new child in this group of children.\n     BecameNewSibling(Option<FutureCompatOverlapError<'tcx>>),\n@@ -82,6 +83,7 @@ impl<'tcx> ChildrenExt<'tcx> for Children {\n \n     /// Attempt to insert an impl into this set of children, while comparing for\n     /// specialization relationships.\n+    #[instrument(level = \"debug\", skip(self, tcx), ret)]\n     fn insert(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n@@ -92,18 +94,13 @@ impl<'tcx> ChildrenExt<'tcx> for Children {\n         let mut last_lint = None;\n         let mut replace_children = Vec::new();\n \n-        debug!(\"insert(impl_def_id={:?}, simplified_self={:?})\", impl_def_id, simplified_self,);\n-\n         let possible_siblings = match simplified_self {\n             Some(st) => PotentialSiblings::Filtered(filtered_children(self, st)),\n             None => PotentialSiblings::Unfiltered(iter_children(self)),\n         };\n \n         for possible_sibling in possible_siblings {\n-            debug!(\n-                \"insert: impl_def_id={:?}, simplified_self={:?}, possible_sibling={:?}\",\n-                impl_def_id, simplified_self, possible_sibling,\n-            );\n+            debug!(?possible_sibling);\n \n             let create_overlap_error = |overlap: traits::coherence::OverlapResult<'tcx>| {\n                 let trait_ref = overlap.impl_header.trait_ref.unwrap();"}]}