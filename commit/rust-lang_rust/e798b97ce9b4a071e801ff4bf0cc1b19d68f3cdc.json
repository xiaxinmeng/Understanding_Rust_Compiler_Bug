{"sha": "e798b97ce9b4a071e801ff4bf0cc1b19d68f3cdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3OThiOTdjZTliNGEwNzFlODAxZmY0YmYwY2MxYjE5ZDY4ZjNjZGM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-12T15:42:36Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-13T02:52:29Z"}, "message": "doc: Update the linkage documentation\n\nAfter allowing mixing rlibs and dylibs in #13892, the documentation was not\nupdated accordingly to reflect this new capability.", "tree": {"sha": "15d873956a70a5157b86b9d4170190323b2a1de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d873956a70a5157b86b9d4170190323b2a1de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e798b97ce9b4a071e801ff4bf0cc1b19d68f3cdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e798b97ce9b4a071e801ff4bf0cc1b19d68f3cdc", "html_url": "https://github.com/rust-lang/rust/commit/e798b97ce9b4a071e801ff4bf0cc1b19d68f3cdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e798b97ce9b4a071e801ff4bf0cc1b19d68f3cdc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06ea9893d58624e348cc0b4bcc3da0bda6c28327", "url": "https://api.github.com/repos/rust-lang/rust/commits/06ea9893d58624e348cc0b4bcc3da0bda6c28327", "html_url": "https://github.com/rust-lang/rust/commit/06ea9893d58624e348cc0b4bcc3da0bda6c28327"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "870b9dcb70bb32798a43d7fa23a5bcd0f7c9a794", "filename": "src/doc/rust.md", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e798b97ce9b4a071e801ff4bf0cc1b19d68f3cdc/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/e798b97ce9b4a071e801ff4bf0cc1b19d68f3cdc/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=e798b97ce9b4a071e801ff4bf0cc1b19d68f3cdc", "patch": "@@ -4006,45 +4006,45 @@ compiler must at some point make a choice between these two formats. With this\n in mind, the compiler follows these rules when determining what format of\n dependencies will be used:\n \n-1. If a dynamic library is being produced, then it is required for all upstream\n-   Rust dependencies to also be dynamic. This is a limitation of the current\n-   implementation of the linkage model.  The reason behind this limitation is to\n-   prevent multiple copies of the same upstream library from showing up, and in\n-   the future it is planned to support a mixture of dynamic and static linking.\n-\n-   When producing a dynamic library, the compiler will generate an error if an\n-   upstream dependency could not be found, and also if an upstream dependency\n-   could only be found in an `rlib` format. Remember that `staticlib` formats\n-   are always ignored by `rustc` for crate-linking purposes.\n-\n-2. If a static library is being produced, all upstream dependencies are\n+1. If a static library is being produced, all upstream dependencies are\n    required to be available in `rlib` formats. This requirement stems from the\n-   same reasons that a dynamic library must have all dynamic dependencies.\n+   reason that a dynamic library cannot be converted into a static format.\n \n    Note that it is impossible to link in native dynamic dependencies to a static\n    library, and in this case warnings will be printed about all unlinked native\n    dynamic dependencies.\n \n-3. If an `rlib` file is being produced, then there are no restrictions on what\n+2. If an `rlib` file is being produced, then there are no restrictions on what\n    format the upstream dependencies are available in. It is simply required that\n    all upstream dependencies be available for reading metadata from.\n \n    The reason for this is that `rlib` files do not contain any of their upstream\n    dependencies. It wouldn't be very efficient for all `rlib` files to contain a\n    copy of `libstd.rlib`!\n \n-4. If an executable is being produced, then things get a little interesting. As\n-   with the above limitations in dynamic and static libraries, it is required\n-   for all upstream dependencies to be in the same format. The next question is\n-   whether to prefer a dynamic or a static format. The compiler currently favors\n-   static linking over dynamic linking, but this can be inverted with the `-C\n-   prefer-dynamic` flag to the compiler.\n-\n-   What this means is that first the compiler will attempt to find all upstream\n-   dependencies as `rlib` files, and if successful, it will create a statically\n-   linked executable. If an upstream dependency is missing as an `rlib` file,\n-   then the compiler will force all dependencies to be dynamic and will generate\n-   errors if dynamic versions could not be found.\n+3. If an executable is being produced and the `-C prefer-dynamic` flag is not\n+   specified, then dependencies are first attempted to be found in the `rlib`\n+   format. If some dependencies are not available in an rlib format, then\n+   dynamic linking is attempted (see below).\n+\n+4. If a dynamic library or an executable that is being dynamically linked is\n+   being produced, then the compiler will attempt to reconcile the available\n+   dependencies in either the rlib or dylib format to create a final product.\n+\n+   A major goal of the compiler is to ensure that a library never appears more\n+   than once in any artifact. For example, if dynamic libraries B and C were\n+   each statically linked to library A, then a crate could not link to B and C\n+   together because there would be two copies of A. The compiler allows mixing\n+   the rlib and dylib formats, but this restriction must be satisfied.\n+\n+   The compiler currently implements no method of hinting what format a library\n+   should be linked with. When dynamically linking, the compiler will attempt to\n+   maximize dynamic dependencies while still allowing some dependencies to be\n+   linked in via an rlib.\n+\n+   For most situations, having all libraries available as a dylib is recommended\n+   if dynamically linking. For other situations, the compiler will emit a\n+   warning if it is unable to determine which formats to link each library with.\n \n In general, `--crate-type=bin` or `--crate-type=lib` should be sufficient for\n all compilation needs, and the other options are just available if more"}]}