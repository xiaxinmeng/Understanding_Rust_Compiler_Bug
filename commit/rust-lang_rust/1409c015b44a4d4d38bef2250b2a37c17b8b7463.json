{"sha": "1409c015b44a4d4d38bef2250b2a37c17b8b7463", "node_id": "C_kwDOAAsO6NoAKDE0MDljMDE1YjQ0YTRkNGQzOGJlZjIyNTBiMmEzN2MxN2I4Yjc0NjM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-11T17:31:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-11T17:31:07Z"}, "message": "Auto merge of #90948 - oli-obk:\ud83e\uddf9, r=nikomatsakis\n\nActually instantiate the opaque type when checking bounds\n\nBefore this change, `instantiate_opaque_types` was a no-op, because it only works relative to the defined opaque type inference anchor. If it is a no-op, the for loop will not actually have anything to iterate over, and thus nothing is checked at all.", "tree": {"sha": "1735254891cc0646c11f1d7d73b48952bb203b89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1735254891cc0646c11f1d7d73b48952bb203b89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1409c015b44a4d4d38bef2250b2a37c17b8b7463", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1409c015b44a4d4d38bef2250b2a37c17b8b7463", "html_url": "https://github.com/rust-lang/rust/commit/1409c015b44a4d4d38bef2250b2a37c17b8b7463", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1409c015b44a4d4d38bef2250b2a37c17b8b7463/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e2c86eba21a08cf505cd67073736d03ff3887ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2c86eba21a08cf505cd67073736d03ff3887ad", "html_url": "https://github.com/rust-lang/rust/commit/2e2c86eba21a08cf505cd67073736d03ff3887ad"}, {"sha": "15f7e818ec83cd8b6a726e625b24e1507d8687ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/15f7e818ec83cd8b6a726e625b24e1507d8687ee", "html_url": "https://github.com/rust-lang/rust/commit/15f7e818ec83cd8b6a726e625b24e1507d8687ee"}], "stats": {"total": 70, "additions": 49, "deletions": 21}, "files": [{"sha": "4b52513014d86e4b4d1da1bdfaecbae205314021", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1409c015b44a4d4d38bef2250b2a37c17b8b7463/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1409c015b44a4d4d38bef2250b2a37c17b8b7463/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=1409c015b44a4d4d38bef2250b2a37c17b8b7463", "patch": "@@ -626,24 +626,22 @@ pub(super) fn check_opaque_for_cycles<'tcx>(\n ///\n /// Without this check the above code is incorrectly accepted: we would ICE if\n /// some tried, for example, to clone an `Option<X<&mut ()>>`.\n+#[instrument(level = \"debug\", skip(tcx))]\n fn check_opaque_meets_bounds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n     substs: SubstsRef<'tcx>,\n     span: Span,\n     origin: &hir::OpaqueTyOrigin,\n ) {\n-    match origin {\n-        // Checked when type checking the function containing them.\n-        hir::OpaqueTyOrigin::FnReturn(..) | hir::OpaqueTyOrigin::AsyncFn(..) => return,\n-        // Can have different predicates to their defining use\n-        hir::OpaqueTyOrigin::TyAlias => {}\n-    }\n-\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let param_env = tcx.param_env(def_id);\n+    let defining_use_anchor = match *origin {\n+        hir::OpaqueTyOrigin::FnReturn(did) | hir::OpaqueTyOrigin::AsyncFn(did) => did,\n+        hir::OpaqueTyOrigin::TyAlias => def_id,\n+    };\n+    let param_env = tcx.param_env(defining_use_anchor);\n \n-    tcx.infer_ctxt().enter(move |infcx| {\n+    tcx.infer_ctxt().with_opaque_type_inference(defining_use_anchor).enter(move |infcx| {\n         let inh = Inherited::new(infcx, def_id);\n         let infcx = &inh.infcx;\n         let opaque_ty = tcx.mk_opaque(def_id.to_def_id(), substs);\n@@ -656,16 +654,15 @@ fn check_opaque_meets_bounds<'tcx>(\n \n         let opaque_type_map = infcx.inner.borrow().opaque_types.clone();\n         for (OpaqueTypeKey { def_id, substs }, opaque_defn) in opaque_type_map {\n-            match infcx\n-                .at(&misc_cause, param_env)\n-                .eq(opaque_defn.concrete_ty, tcx.type_of(def_id).subst(tcx, substs))\n-            {\n+            let hidden_type = tcx.type_of(def_id).subst(tcx, substs);\n+            trace!(?hidden_type);\n+            match infcx.at(&misc_cause, param_env).eq(opaque_defn.concrete_ty, hidden_type) {\n                 Ok(infer_ok) => inh.register_infer_ok_obligations(infer_ok),\n                 Err(ty_err) => tcx.sess.delay_span_bug(\n-                    opaque_defn.definition_span,\n+                    span,\n                     &format!(\n-                        \"could not unify `{}` with revealed type:\\n{}\",\n-                        opaque_defn.concrete_ty, ty_err,\n+                        \"could not check bounds on revealed type `{}`:\\n{}\",\n+                        hidden_type, ty_err,\n                     ),\n                 ),\n             }\n@@ -678,10 +675,17 @@ fn check_opaque_meets_bounds<'tcx>(\n             infcx.report_fulfillment_errors(&errors, None, false);\n         }\n \n-        // Finally, resolve all regions. This catches wily misuses of\n-        // lifetime parameters.\n-        let fcx = FnCtxt::new(&inh, param_env, hir_id);\n-        fcx.regionck_item(hir_id, span, FxHashSet::default());\n+        match origin {\n+            // Checked when type checking the function containing them.\n+            hir::OpaqueTyOrigin::FnReturn(..) | hir::OpaqueTyOrigin::AsyncFn(..) => return,\n+            // Can have different predicates to their defining use\n+            hir::OpaqueTyOrigin::TyAlias => {\n+                // Finally, resolve all regions. This catches wily misuses of\n+                // lifetime parameters.\n+                let fcx = FnCtxt::new(&inh, param_env, hir_id);\n+                fcx.regionck_item(hir_id, span, FxHashSet::default());\n+            }\n+        }\n     });\n }\n "}, {"sha": "a4ccae4eb7ed99e7b5b49de3479f78aa5db2f44b", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1409c015b44a4d4d38bef2250b2a37c17b8b7463/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1409c015b44a4d4d38bef2250b2a37c17b8b7463/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=1409c015b44a4d4d38bef2250b2a37c17b8b7463", "patch": "@@ -10,5 +10,29 @@ error: higher-ranked subtype error\n LL |         |x| x\n    |         ^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected type `for<'r> Fn<(&'r X,)>`\n+              found type `Fn<(&'static X,)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/issue-57611-trait-alias.rs:21:9\n+   |\n+LL |         |x| x\n+   |         ^^^^^\n+\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/issue-57611-trait-alias.rs:17:16\n+   |\n+LL |     type Bar = impl Baz<Self, Self>;\n+   |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'static X) -> &'static X` must implement `FnOnce<(&'0 X,)>`, for any lifetime `'0`...\n+   = note: ...but it actually implements `FnOnce<(&'static X,)>`\n+\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}]}