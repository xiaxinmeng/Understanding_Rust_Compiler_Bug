{"sha": "dd106ba7631e07445f374339dcb8a3bbf0fa8e18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMTA2YmE3NjMxZTA3NDQ1ZjM3NDMzOWRjYjhhM2JiZjBmYThlMTg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-27T21:52:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-27T22:49:03Z"}, "message": "export send_map and use fewer impl names", "tree": {"sha": "5db7f049cc206b6659172da81b72d501b3c9c68c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5db7f049cc206b6659172da81b72d501b3c9c68c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd106ba7631e07445f374339dcb8a3bbf0fa8e18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd106ba7631e07445f374339dcb8a3bbf0fa8e18", "html_url": "https://github.com/rust-lang/rust/commit/dd106ba7631e07445f374339dcb8a3bbf0fa8e18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd106ba7631e07445f374339dcb8a3bbf0fa8e18/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "638491712e265c8d5bc9bd9852ece17b5ec78f5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/638491712e265c8d5bc9bd9852ece17b5ec78f5b", "html_url": "https://github.com/rust-lang/rust/commit/638491712e265c8d5bc9bd9852ece17b5ec78f5b"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "e514d68e67095769d206f18ef08e1cfbcad2afa2", "filename": "src/libstd/send_map.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd106ba7631e07445f374339dcb8a3bbf0fa8e18/src%2Flibstd%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd106ba7631e07445f374339dcb8a3bbf0fa8e18/src%2Flibstd%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsend_map.rs?ref=dd106ba7631e07445f374339dcb8a3bbf0fa8e18", "patch": "@@ -15,7 +15,7 @@ type eqfn<K> = pure fn~(K, K) -> bool;\n \n /// Open addressing with linear probing.\n mod linear {\n-    export linear_map, linear_map_with_capacity;\n+    export linear_map, linear_map_with_capacity, public_methods;\n \n     const initial_capacity: uint = 32u; // 2^5\n     type bucket<K,V> = {hash: uint, key: K, value: V};\n@@ -64,7 +64,7 @@ mod linear {\n         p as &K\n     }\n \n-    impl private_const_methods<K,V> for &const linear_map<K,V> {\n+    impl private_methods<K,V> for &const linear_map<K,V> {\n         #[inline(always)]\n         pure fn to_bucket(h: uint) -> uint {\n             // FIXME(#3041) borrow a more sophisticated technique here from\n@@ -130,7 +130,7 @@ mod linear {\n         }\n     }\n \n-    impl private_mut_methods<K,V> for &mut linear_map<K,V> {\n+    impl private_methods<K,V> for &mut linear_map<K,V> {\n         /// Expands the capacity of the array and re-inserts each\n         /// of the existing buckets.\n         fn expand() {\n@@ -179,7 +179,7 @@ mod linear {\n         }\n     }\n \n-    impl mut_methods<K,V> for &mut linear_map<K,V> {\n+    impl public_methods<K,V> for &mut linear_map<K,V> {\n         fn insert(+k: K, +v: V) -> bool {\n             if self.size >= self.resize_at {\n                 // n.b.: We could also do this after searching, so\n@@ -233,13 +233,13 @@ mod linear {\n         }\n     }\n \n-    impl private_imm_methods<K,V> for &linear_map<K,V> {\n+    impl private_methods<K,V> for &linear_map<K,V> {\n         fn search(hash: uint, op: fn(x: &option<bucket<K,V>>) -> bool) {\n             let _ = self.bucket_sequence(hash, |i| op(&self.buckets[i]));\n         }\n     }\n \n-    impl const_methods<K,V> for &const linear_map<K,V> {\n+    impl public_methods<K,V> for &const linear_map<K,V> {\n         fn size() -> uint {\n             self.size\n         }\n@@ -252,7 +252,7 @@ mod linear {\n         }\n     }\n \n-    impl const_methods<K,V: copy> for &const linear_map<K,V> {\n+    impl public_methods<K,V: copy> for &const linear_map<K,V> {\n         fn find(k: &K) -> option<V> {\n             alt self.bucket_for_key(self.buckets, k) {\n               found_entry(idx) => {"}, {"sha": "f1caf092ebb1c77d58b1714cafc8b57c9c7d19d9", "filename": "src/libstd/std.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd106ba7631e07445f374339dcb8a3bbf0fa8e18/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dd106ba7631e07445f374339dcb8a3bbf0fa8e18/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=dd106ba7631e07445f374339dcb8a3bbf0fa8e18", "patch": "@@ -23,7 +23,8 @@ import core::*;\n export net, net_tcp, net_ip, net_url;\n export uv, uv_ll, uv_iotask, uv_global_loop;\n export c_vec, util, timer;\n-export bitv, deque, fun_treemap, list, map, smallintmap, sort, treemap;\n+export bitv, deque, fun_treemap, list, map, send_map;\n+export smallintmap, sort, treemap;\n export rope, arena, par;\n export ebml, dbg, getopts, json, rand, sha1, term, time, prettyprint;\n export test, tempfile, serialization;"}]}