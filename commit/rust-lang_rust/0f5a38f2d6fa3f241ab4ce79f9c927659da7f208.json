{"sha": "0f5a38f2d6fa3f241ab4ce79f9c927659da7f208", "node_id": "C_kwDOAAsO6NoAKDBmNWEzOGYyZDZmYTNmMjQxYWI0Y2U3OWY5YzkyNzY1OWRhN2YyMDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-14T13:02:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-14T13:02:06Z"}, "message": "Auto merge of #9170 - Rqnsom:box_collection, r=Jarcho\n\n[`box_collection`]: raise warn for all std collections\n\nSo far, only [`Vec`, `String`, `HashMap`] were considered.\n\nExtend collection checklist for this lint with:\n- `HashSet`\n- `VecDeque`\n- `LinkedList`\n- `BTreeMap`\n- `BTreeSet`\n- `BinaryHeap`\n\nchangelog: [`box_collection`]: raise warn for all std collections", "tree": {"sha": "126f740439cd2a55d48e590f23b8e003bc75725e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/126f740439cd2a55d48e590f23b8e003bc75725e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f5a38f2d6fa3f241ab4ce79f9c927659da7f208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f5a38f2d6fa3f241ab4ce79f9c927659da7f208", "html_url": "https://github.com/rust-lang/rust/commit/0f5a38f2d6fa3f241ab4ce79f9c927659da7f208", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f5a38f2d6fa3f241ab4ce79f9c927659da7f208/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10e85efc5327508a9d2283a6d3c1234c1d572740", "url": "https://api.github.com/repos/rust-lang/rust/commits/10e85efc5327508a9d2283a6d3c1234c1d572740", "html_url": "https://github.com/rust-lang/rust/commit/10e85efc5327508a9d2283a6d3c1234c1d572740"}, {"sha": "467e1b23aa7f33e126bc92e89217158362129df4", "url": "https://api.github.com/repos/rust-lang/rust/commits/467e1b23aa7f33e126bc92e89217158362129df4", "html_url": "https://github.com/rust-lang/rust/commit/467e1b23aa7f33e126bc92e89217158362129df4"}], "stats": {"total": 99, "additions": 84, "deletions": 15}, "files": [{"sha": "ba51404d214832976e245a61076d08bb7bfbceb8", "filename": "clippy_lints/src/types/box_collection.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0f5a38f2d6fa3f241ab4ce79f9c927659da7f208/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5a38f2d6fa3f241ab4ce79f9c927659da7f208/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fbox_collection.rs?ref=0f5a38f2d6fa3f241ab4ce79f9c927659da7f208", "patch": "@@ -15,19 +15,17 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n                 sym::String => \"\",\n                 _ => \"<..>\",\n             };\n+\n+            let box_content = format!(\"{outer}{generic}\", outer = item_type);\n             span_lint_and_help(\n                 cx,\n                 BOX_COLLECTION,\n                 hir_ty.span,\n                 &format!(\n-                    \"you seem to be trying to use `Box<{outer}{generic}>`. Consider using just `{outer}{generic}`\",\n-                    outer=item_type,\n-                    generic = generic),\n+                    \"you seem to be trying to use `Box<{box_content}>`. Consider using just `{box_content}`\"),\n                 None,\n                 &format!(\n-                    \"`{outer}{generic}` is already on the heap, `Box<{outer}{generic}>` makes an extra allocation\",\n-                    outer=item_type,\n-                    generic = generic)\n+                    \"`{box_content}` is already on the heap, `Box<{box_content}>` makes an extra allocation\")\n             );\n             true\n         } else {\n@@ -39,7 +37,18 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n fn get_std_collection(cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<Symbol> {\n     let param = qpath_generic_tys(qpath).next()?;\n     let id = path_def_id(cx, param)?;\n-    cx.tcx\n-        .get_diagnostic_name(id)\n-        .filter(|&name| matches!(name, sym::HashMap | sym::String | sym::Vec))\n+    cx.tcx.get_diagnostic_name(id).filter(|&name| {\n+        matches!(\n+            name,\n+            sym::HashMap\n+                | sym::String\n+                | sym::Vec\n+                | sym::HashSet\n+                | sym::VecDeque\n+                | sym::LinkedList\n+                | sym::BTreeMap\n+                | sym::BTreeSet\n+                | sym::BinaryHeap\n+        )\n+    })\n }"}, {"sha": "1a74cdb3ff65926ab94e679bdcbea64d4e51db0f", "filename": "tests/ui/box_collection.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0f5a38f2d6fa3f241ab4ce79f9c927659da7f208/tests%2Fui%2Fbox_collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5a38f2d6fa3f241ab4ce79f9c927659da7f208/tests%2Fui%2Fbox_collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_collection.rs?ref=0f5a38f2d6fa3f241ab4ce79f9c927659da7f208", "patch": "@@ -6,7 +6,7 @@\n     unused\n )]\n \n-use std::collections::HashMap;\n+use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, LinkedList, VecDeque};\n \n macro_rules! boxit {\n     ($init:expr, $x:ty) => {\n@@ -18,7 +18,7 @@ fn test_macro() {\n     boxit!(Vec::new(), Vec<u8>);\n }\n \n-fn test(foo: Box<Vec<bool>>) {}\n+fn test1(foo: Box<Vec<bool>>) {}\n \n fn test2(foo: Box<dyn Fn(Vec<u32>)>) {\n     // pass if #31 is fixed\n@@ -29,6 +29,18 @@ fn test3(foo: Box<String>) {}\n \n fn test4(foo: Box<HashMap<String, String>>) {}\n \n+fn test5(foo: Box<HashSet<i64>>) {}\n+\n+fn test6(foo: Box<VecDeque<i32>>) {}\n+\n+fn test7(foo: Box<LinkedList<i16>>) {}\n+\n+fn test8(foo: Box<BTreeMap<i8, String>>) {}\n+\n+fn test9(foo: Box<BTreeSet<u64>>) {}\n+\n+fn test10(foo: Box<BinaryHeap<u32>>) {}\n+\n fn test_local_not_linted() {\n     let _: Box<Vec<bool>>;\n }"}, {"sha": "2b28598ded92f41bc2d000d4fbb03dd1f674b074", "filename": "tests/ui/box_collection.stderr", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/0f5a38f2d6fa3f241ab4ce79f9c927659da7f208/tests%2Fui%2Fbox_collection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f5a38f2d6fa3f241ab4ce79f9c927659da7f208/tests%2Fui%2Fbox_collection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_collection.stderr?ref=0f5a38f2d6fa3f241ab4ce79f9c927659da7f208", "patch": "@@ -1,8 +1,8 @@\n error: you seem to be trying to use `Box<Vec<..>>`. Consider using just `Vec<..>`\n-  --> $DIR/box_collection.rs:21:14\n+  --> $DIR/box_collection.rs:21:15\n    |\n-LL | fn test(foo: Box<Vec<bool>>) {}\n-   |              ^^^^^^^^^^^^^^\n+LL | fn test1(foo: Box<Vec<bool>>) {}\n+   |               ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::box-collection` implied by `-D warnings`\n    = help: `Vec<..>` is already on the heap, `Box<Vec<..>>` makes an extra allocation\n@@ -23,5 +23,53 @@ LL | fn test4(foo: Box<HashMap<String, String>>) {}\n    |\n    = help: `HashMap<..>` is already on the heap, `Box<HashMap<..>>` makes an extra allocation\n \n-error: aborting due to 3 previous errors\n+error: you seem to be trying to use `Box<HashSet<..>>`. Consider using just `HashSet<..>`\n+  --> $DIR/box_collection.rs:32:15\n+   |\n+LL | fn test5(foo: Box<HashSet<i64>>) {}\n+   |               ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `HashSet<..>` is already on the heap, `Box<HashSet<..>>` makes an extra allocation\n+\n+error: you seem to be trying to use `Box<VecDeque<..>>`. Consider using just `VecDeque<..>`\n+  --> $DIR/box_collection.rs:34:15\n+   |\n+LL | fn test6(foo: Box<VecDeque<i32>>) {}\n+   |               ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `VecDeque<..>` is already on the heap, `Box<VecDeque<..>>` makes an extra allocation\n+\n+error: you seem to be trying to use `Box<LinkedList<..>>`. Consider using just `LinkedList<..>`\n+  --> $DIR/box_collection.rs:36:15\n+   |\n+LL | fn test7(foo: Box<LinkedList<i16>>) {}\n+   |               ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `LinkedList<..>` is already on the heap, `Box<LinkedList<..>>` makes an extra allocation\n+\n+error: you seem to be trying to use `Box<BTreeMap<..>>`. Consider using just `BTreeMap<..>`\n+  --> $DIR/box_collection.rs:38:15\n+   |\n+LL | fn test8(foo: Box<BTreeMap<i8, String>>) {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `BTreeMap<..>` is already on the heap, `Box<BTreeMap<..>>` makes an extra allocation\n+\n+error: you seem to be trying to use `Box<BTreeSet<..>>`. Consider using just `BTreeSet<..>`\n+  --> $DIR/box_collection.rs:40:15\n+   |\n+LL | fn test9(foo: Box<BTreeSet<u64>>) {}\n+   |               ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `BTreeSet<..>` is already on the heap, `Box<BTreeSet<..>>` makes an extra allocation\n+\n+error: you seem to be trying to use `Box<BinaryHeap<..>>`. Consider using just `BinaryHeap<..>`\n+  --> $DIR/box_collection.rs:42:16\n+   |\n+LL | fn test10(foo: Box<BinaryHeap<u32>>) {}\n+   |                ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: `BinaryHeap<..>` is already on the heap, `Box<BinaryHeap<..>>` makes an extra allocation\n+\n+error: aborting due to 9 previous errors\n "}]}