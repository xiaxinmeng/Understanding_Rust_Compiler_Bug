{"sha": "78b0728887bbc5ae68471eae72c4505c2aed9a6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YjA3Mjg4ODdiYmM1YWU2ODQ3MWVhZTcyYzQ1MDVjMmFlZDlhNmU=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-04-18T03:39:44Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-04-22T02:27:50Z"}, "message": "refactor: remove panics on misconfigured widths", "tree": {"sha": "ac5f326c4764630ebb29979567afa20468a636bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac5f326c4764630ebb29979567afa20468a636bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78b0728887bbc5ae68471eae72c4505c2aed9a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78b0728887bbc5ae68471eae72c4505c2aed9a6e", "html_url": "https://github.com/rust-lang/rust/commit/78b0728887bbc5ae68471eae72c4505c2aed9a6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78b0728887bbc5ae68471eae72c4505c2aed9a6e/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a168d92f9a4744ba5ce33a9dac2040c8340e1cf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5", "html_url": "https://github.com/rust-lang/rust/commit/a168d92f9a4744ba5ce33a9dac2040c8340e1cf5"}], "stats": {"total": 101, "additions": 47, "deletions": 54}, "files": [{"sha": "2f567b2552106b91d86fdcb459c4500a77c0058c", "filename": "src/config/config_type.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78b0728887bbc5ae68471eae72c4505c2aed9a6e/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b0728887bbc5ae68471eae72c4505c2aed9a6e/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=78b0728887bbc5ae68471eae72c4505c2aed9a6e", "patch": "@@ -309,7 +309,12 @@ macro_rules! create_config {\n                         return heuristic_value;\n                     }\n                     if override_value > max_width {\n-                        panic!(\"`{}` cannot have a value that exceeds `max_width`\", config_key);\n+                        eprintln!(\n+                            \"`{0}` cannot have a value that exceeds `max_width`. \\\n+                            `{0}` will be set to the same value as `max_width`\",\n+                            config_key,\n+                        );\n+                        return max_width;\n                     }\n                     override_value\n                 };"}, {"sha": "8c04363b1fd4b95125fd2c1506215ba72bbfd9bb", "filename": "src/config/mod.rs", "status": "modified", "additions": 41, "deletions": 53, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/78b0728887bbc5ae68471eae72c4505c2aed9a6e/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b0728887bbc5ae68471eae72c4505c2aed9a6e/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=78b0728887bbc5ae68471eae72c4505c2aed9a6e", "patch": "@@ -842,134 +842,122 @@ make_backup = false\n         }\n \n         #[test]\n-        #[should_panic(expected = \"`fn_call_width` cannot have a value that exceeds `max_width\")]\n-        fn test_panics_when_fn_call_width_config_exceeds_max_width() {\n+        fn test_fn_call_width_config_exceeds_max_width() {\n             let toml = r#\"\n-                max_width = 80\n-                fn_call_width = 90\n+                max_width = 90\n+                fn_call_width = 95\n             \"#;\n-            Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            assert_eq!(config.fn_call_width(), 90);\n         }\n \n         #[test]\n-        #[should_panic(\n-            expected = \"`attr_fn_like_width` cannot have a value that exceeds `max_width\"\n-        )]\n-        fn test_panics_when_attr_fn_like_width_config_exceeds_max_width() {\n+        fn test_attr_fn_like_width_config_exceeds_max_width() {\n             let toml = r#\"\n                 max_width = 80\n                 attr_fn_like_width = 90\n             \"#;\n-            Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            assert_eq!(config.attr_fn_like_width(), 80);\n         }\n \n         #[test]\n-        #[should_panic(expected = \"`struct_lit_width` cannot have a value that exceeds `max_width\")]\n-        fn test_panics_when_struct_lit_config_exceeds_max_width() {\n+        fn test_struct_lit_config_exceeds_max_width() {\n             let toml = r#\"\n-                max_width = 80\n+                max_width = 78\n                 struct_lit_width = 90\n             \"#;\n-            Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            assert_eq!(config.struct_lit_width(), 78);\n         }\n \n         #[test]\n-        #[should_panic(\n-            expected = \"`struct_variant_width` cannot have a value that exceeds `max_width\"\n-        )]\n-        fn test_panics_when_struct_variant_width_config_exceeds_max_width() {\n+        fn test_struct_variant_width_config_exceeds_max_width() {\n             let toml = r#\"\n                 max_width = 80\n                 struct_variant_width = 90\n             \"#;\n-            Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            assert_eq!(config.struct_variant_width(), 80);\n         }\n \n         #[test]\n-        #[should_panic(expected = \"`array_width` cannot have a value that exceeds `max_width\")]\n-        fn test_panics_when_array_width_config_exceeds_max_width() {\n+        fn test_array_width_config_exceeds_max_width() {\n             let toml = r#\"\n-                max_width = 80\n-                array_width = 90\n+                max_width = 60\n+                array_width = 80\n             \"#;\n-            Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            assert_eq!(config.array_width(), 60);\n         }\n \n         #[test]\n-        #[should_panic(expected = \"`chain_width` cannot have a value that exceeds `max_width\")]\n-        fn test_panics_when_chain_width_config_exceeds_max_width() {\n+        fn test_chain_width_config_exceeds_max_width() {\n             let toml = r#\"\n                 max_width = 80\n                 chain_width = 90\n             \"#;\n-            Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            assert_eq!(config.chain_width(), 80);\n         }\n \n         #[test]\n-        #[should_panic(\n-            expected = \"`single_line_if_else_max_width` cannot have a value that exceeds `max_width\"\n-        )]\n-        fn test_panics_when_single_line_if_else_max_width_config_exceeds_max_width() {\n+        fn test_single_line_if_else_max_width_config_exceeds_max_width() {\n             let toml = r#\"\n-                max_width = 80\n+                max_width = 70\n                 single_line_if_else_max_width = 90\n             \"#;\n-            Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            let config = Config::from_toml(toml, Path::new(\"\")).unwrap();\n+            assert_eq!(config.single_line_if_else_max_width(), 70);\n         }\n \n         #[test]\n-        #[should_panic(expected = \"`fn_call_width` cannot have a value that exceeds `max_width\")]\n-        fn test_panics_when_fn_call_width_override_exceeds_max_width() {\n+        fn test_override_fn_call_width_exceeds_max_width() {\n             let mut config = Config::default();\n             config.override_value(\"fn_call_width\", \"101\");\n+            assert_eq!(config.fn_call_width(), 100);\n         }\n \n         #[test]\n-        #[should_panic(\n-            expected = \"`attr_fn_like_width` cannot have a value that exceeds `max_width\"\n-        )]\n-        fn test_panics_when_attr_fn_like_width_override_exceeds_max_width() {\n+        fn test_override_attr_fn_like_width_exceeds_max_width() {\n             let mut config = Config::default();\n             config.override_value(\"attr_fn_like_width\", \"101\");\n+            assert_eq!(config.attr_fn_like_width(), 100);\n         }\n \n         #[test]\n-        #[should_panic(expected = \"`struct_lit_width` cannot have a value that exceeds `max_width\")]\n-        fn test_panics_when_struct_lit_override_exceeds_max_width() {\n+        fn test_override_struct_lit_exceeds_max_width() {\n             let mut config = Config::default();\n             config.override_value(\"struct_lit_width\", \"101\");\n+            assert_eq!(config.struct_lit_width(), 100);\n         }\n \n         #[test]\n-        #[should_panic(\n-            expected = \"`struct_variant_width` cannot have a value that exceeds `max_width\"\n-        )]\n-        fn test_panics_when_struct_variant_width_override_exceeds_max_width() {\n+        fn test_override_struct_variant_width_exceeds_max_width() {\n             let mut config = Config::default();\n             config.override_value(\"struct_variant_width\", \"101\");\n+            assert_eq!(config.struct_variant_width(), 100);\n         }\n \n         #[test]\n-        #[should_panic(expected = \"`array_width` cannot have a value that exceeds `max_width\")]\n-        fn test_panics_when_array_width_override_exceeds_max_width() {\n+        fn test_override_array_width_exceeds_max_width() {\n             let mut config = Config::default();\n             config.override_value(\"array_width\", \"101\");\n+            assert_eq!(config.array_width(), 100);\n         }\n \n         #[test]\n-        #[should_panic(expected = \"`chain_width` cannot have a value that exceeds `max_width\")]\n-        fn test_panics_when_chain_width_override_exceeds_max_width() {\n+        fn test_override_chain_width_exceeds_max_width() {\n             let mut config = Config::default();\n             config.override_value(\"chain_width\", \"101\");\n+            assert_eq!(config.chain_width(), 100);\n         }\n \n         #[test]\n-        #[should_panic(\n-            expected = \"`single_line_if_else_max_width` cannot have a value that exceeds `max_width\"\n-        )]\n-        fn test_panics_when_single_line_if_else_max_width_override_exceeds_max_width() {\n+        fn test_override_single_line_if_else_max_width_exceeds_max_width() {\n             let mut config = Config::default();\n             config.override_value(\"single_line_if_else_max_width\", \"101\");\n+            assert_eq!(config.single_line_if_else_max_width(), 100);\n         }\n     }\n }"}]}