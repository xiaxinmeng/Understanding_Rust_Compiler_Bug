{"sha": "a9a262ad5a27d7fb06b3fc306331ab60d00c2afc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YTI2MmFkNWEyN2Q3ZmIwNmIzZmMzMDYzMzFhYjYwZDAwYzJhZmM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-23T20:09:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-23T20:09:08Z"}, "message": "Merge pull request #1078 from CohenArthur/remove-clone-on-nop-filling\n\nRemove clone() when removing extra stack operations", "tree": {"sha": "7f93aa98b07e52697dbd180c97dfe96075ad1cb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f93aa98b07e52697dbd180c97dfe96075ad1cb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9a262ad5a27d7fb06b3fc306331ab60d00c2afc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfQszkCRBK7hj4Ov3rIwAAdHIIAFzOXspPuoKQbzNCJ1b5ZtyY\nV+dQ5CYbnYH6eD0tt525IUPsDzQ2d9ghUsu0+TB9Jqk4GVRrVevVOtaZhPFTX8Sf\nacP6cWR/ZmPF2sZJNrWQttKvVjJT+/J4/GqsggwHpTcpjgw5JEifyX3XpyLqV3Y4\nRVLw5cGmMvXD3jAkS1HmO4ic2jzpjKUrXfVEiM5UTEabBZ93KUZ/wmhqb1Qj2JwY\nLFHUb0tLnzcbJI4x9Skb9wrOR8FESNN0vIoSRtfpd7GWmIMqTHbtakwQ/5dJ89PP\n0v3tMu3Frpt11hml9ieAjS4So3CE1Fnrf9jBdCcoLthpYSqfmc5VnlHTpkZK+sM=\n=X/f2\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f93aa98b07e52697dbd180c97dfe96075ad1cb3\nparent 18348b1aec3d2705232fb6f7be862625384b0bf9\nparent cb386896ee4df8f76758737044abe9300d6f8802\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1598213348 +0200\ncommitter GitHub <noreply@github.com> 1598213348 +0200\n\nMerge pull request #1078 from CohenArthur/remove-clone-on-nop-filling\n\nRemove clone() when removing extra stack operations"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a262ad5a27d7fb06b3fc306331ab60d00c2afc", "html_url": "https://github.com/rust-lang/rust/commit/a9a262ad5a27d7fb06b3fc306331ab60d00c2afc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9a262ad5a27d7fb06b3fc306331ab60d00c2afc/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18348b1aec3d2705232fb6f7be862625384b0bf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/18348b1aec3d2705232fb6f7be862625384b0bf9", "html_url": "https://github.com/rust-lang/rust/commit/18348b1aec3d2705232fb6f7be862625384b0bf9"}, {"sha": "cb386896ee4df8f76758737044abe9300d6f8802", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb386896ee4df8f76758737044abe9300d6f8802", "html_url": "https://github.com/rust-lang/rust/commit/cb386896ee4df8f76758737044abe9300d6f8802"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "b072d9bd8c2edb431f3009bb6e9e605eae8153c7", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9a262ad5a27d7fb06b3fc306331ab60d00c2afc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a9a262ad5a27d7fb06b3fc306331ab60d00c2afc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a9a262ad5a27d7fb06b3fc306331ab60d00c2afc", "patch": "@@ -1,5 +1,11 @@\n # This file is automatically @generated by Cargo.\n # It is not intended for manual editing.\n+[[package]]\n+name = \"ahash\"\n+version = \"0.3.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e8fd72866655d1904d6b0997d0b07ba561047d070fbe29de039031c641b61217\"\n+\n [[package]]\n name = \"anyhow\"\n version = \"1.0.32\"\n@@ -197,6 +203,7 @@ version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"34f595585f103464d8d2f6e9864682d74c1601fed5e07d62b1c9058dba8246fb\"\n dependencies = [\n+ \"ahash\",\n  \"autocfg\",\n ]\n \n@@ -325,6 +332,7 @@ dependencies = [\n  \"cranelift-object\",\n  \"cranelift-simplejit\",\n  \"gimli\",\n+ \"hashbrown\",\n  \"indexmap\",\n  \"libloading\",\n  \"object\","}, {"sha": "858a0f0e33e3f7ca48dcd0abdf470b6eed35c285", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9a262ad5a27d7fb06b3fc306331ab60d00c2afc/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a9a262ad5a27d7fb06b3fc306331ab60d00c2afc/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=a9a262ad5a27d7fb06b3fc306331ab60d00c2afc", "patch": "@@ -23,6 +23,7 @@ byteorder = \"1.2.7\"\n indexmap = \"1.0.2\"\n cfg-if = \"0.1.10\"\n libloading = { version = \"0.6.0\", optional = true }\n+hashbrown = \"0.8.1\"\n \n # Uncomment to use local checkout of cranelift\n #[patch.\"https://github.com/bytecodealliance/wasmtime/\"]"}, {"sha": "aceced41f2703e15c626e15eccd8196c5d0a58c4", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a9a262ad5a27d7fb06b3fc306331ab60d00c2afc/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a262ad5a27d7fb06b3fc306331ab60d00c2afc/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=a9a262ad5a27d7fb06b3fc306331ab60d00c2afc", "patch": "@@ -13,12 +13,15 @@ use std::collections::BTreeMap;\n use std::fmt;\n use std::ops::Not;\n \n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashSet, FxHasher};\n \n use cranelift_codegen::cursor::{Cursor, FuncCursor};\n use cranelift_codegen::ir::{InstructionData, Opcode, ValueDef};\n use cranelift_codegen::ir::immediates::Offset32;\n \n+use hashbrown::HashSet;\n+use std::hash::BuildHasherDefault;\n+\n use crate::prelude::*;\n \n /// Workaround for `StackSlot` not implementing `Ord`.\n@@ -45,9 +48,9 @@ impl Ord for OrdStackSlot {\n \n #[derive(Debug, Default)]\n struct StackSlotUsage {\n-    stack_addr: FxHashSet<Inst>,\n-    stack_load: FxHashSet<Inst>,\n-    stack_store: FxHashSet<Inst>,\n+    stack_addr: HashSet<Inst, BuildHasherDefault<FxHasher>>,\n+    stack_load: HashSet<Inst, BuildHasherDefault<FxHasher>>,\n+    stack_store: HashSet<Inst, BuildHasherDefault<FxHasher>>,\n }\n \n impl StackSlotUsage {\n@@ -79,16 +82,14 @@ impl StackSlotUsage {\n         }).collect::<Vec<Inst>>()\n     }\n \n-    fn remove_unused_stack_addr(&mut self, func: &mut Function, inst: Inst) {\n+    fn remove_unused_stack_addr(func: &mut Function, inst: Inst) {\n         func.dfg.detach_results(inst);\n         func.dfg.replace(inst).nop();\n-        self.stack_addr.remove(&inst);\n     }\n \n-    fn remove_unused_load(&mut self, func: &mut Function, load: Inst) {\n+    fn remove_unused_load(func: &mut Function, load: Inst) {\n         func.dfg.detach_results(load);\n         func.dfg.replace(load).nop();\n-        self.stack_load.remove(&load);\n     }\n \n     fn remove_dead_store(&mut self, func: &mut Function, store: Inst) {\n@@ -314,19 +315,21 @@ fn remove_unused_stack_addr_and_stack_load(opt_ctx: &mut OptimizeContext<'_>) {\n     }\n \n     // Replace all unused stack_addr and stack_load instructions with nop.\n-    for stack_slot_users in opt_ctx.stack_slot_usage_map.values_mut() {\n-        // FIXME remove clone\n-        for &inst in stack_slot_users.stack_addr.clone().iter() {\n-            if stack_addr_load_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n-                stack_slot_users.remove_unused_stack_addr(&mut opt_ctx.ctx.func, inst);\n-            }\n-        }\n+    let mut func = &mut opt_ctx.ctx.func;\n \n-        for &inst in stack_slot_users.stack_load.clone().iter() {\n-            if stack_addr_load_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n-                stack_slot_users.remove_unused_load(&mut opt_ctx.ctx.func, inst);\n-            }\n-        }\n+    // drain_filter() on hashbrown::HashSet drains the items that do *not* match the\n+    // predicate. Once hashbrown gets updated to match the behaviour of std::drain_filter\n+    // (0.8.2), the predicate will have to be reversed\n+    for stack_slot_users in opt_ctx.stack_slot_usage_map.values_mut() {\n+        stack_slot_users\n+            .stack_addr\n+            .drain_filter(|inst| !(stack_addr_load_insts_users.get(inst).map(|users| users.is_empty()).unwrap_or(true)))\n+            .for_each(|inst| StackSlotUsage::remove_unused_stack_addr(&mut func, inst));\n+\n+        stack_slot_users\n+            .stack_load\n+            .drain_filter(|inst| !(stack_addr_load_insts_users.get(inst).map(|users| users.is_empty()).unwrap_or(true)))\n+            .for_each(|inst| StackSlotUsage::remove_unused_load(&mut func, inst));\n     }\n }\n "}]}