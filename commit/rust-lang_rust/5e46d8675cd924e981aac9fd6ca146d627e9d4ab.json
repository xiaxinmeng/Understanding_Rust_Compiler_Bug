{"sha": "5e46d8675cd924e981aac9fd6ca146d627e9d4ab", "node_id": "C_kwDOAAsO6NoAKDVlNDZkODY3NWNkOTI0ZTk4MWFhYzlmZDZjYTE0NmQ2MjdlOWQ0YWI", "commit": {"author": {"name": "Sarthak Singh", "email": "ss269@uw.edu", "date": "2022-10-23T06:59:59Z"}, "committer": {"name": "Sarthak Singh", "email": "ss269@uw.edu", "date": "2022-10-25T07:35:34Z"}, "message": "Added helper to prevent verbose printing from the `PrettyPrinter` when printing constants", "tree": {"sha": "9026951201d7d2ca249196dfbe6824af998273a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9026951201d7d2ca249196dfbe6824af998273a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e46d8675cd924e981aac9fd6ca146d627e9d4ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e46d8675cd924e981aac9fd6ca146d627e9d4ab", "html_url": "https://github.com/rust-lang/rust/commit/5e46d8675cd924e981aac9fd6ca146d627e9d4ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e46d8675cd924e981aac9fd6ca146d627e9d4ab/comments", "author": {"login": "SarthakSingh31", "id": 35749450, "node_id": "MDQ6VXNlcjM1NzQ5NDUw", "avatar_url": "https://avatars.githubusercontent.com/u/35749450?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SarthakSingh31", "html_url": "https://github.com/SarthakSingh31", "followers_url": "https://api.github.com/users/SarthakSingh31/followers", "following_url": "https://api.github.com/users/SarthakSingh31/following{/other_user}", "gists_url": "https://api.github.com/users/SarthakSingh31/gists{/gist_id}", "starred_url": "https://api.github.com/users/SarthakSingh31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SarthakSingh31/subscriptions", "organizations_url": "https://api.github.com/users/SarthakSingh31/orgs", "repos_url": "https://api.github.com/users/SarthakSingh31/repos", "events_url": "https://api.github.com/users/SarthakSingh31/events{/privacy}", "received_events_url": "https://api.github.com/users/SarthakSingh31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SarthakSingh31", "id": 35749450, "node_id": "MDQ6VXNlcjM1NzQ5NDUw", "avatar_url": "https://avatars.githubusercontent.com/u/35749450?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SarthakSingh31", "html_url": "https://github.com/SarthakSingh31", "followers_url": "https://api.github.com/users/SarthakSingh31/followers", "following_url": "https://api.github.com/users/SarthakSingh31/following{/other_user}", "gists_url": "https://api.github.com/users/SarthakSingh31/gists{/gist_id}", "starred_url": "https://api.github.com/users/SarthakSingh31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SarthakSingh31/subscriptions", "organizations_url": "https://api.github.com/users/SarthakSingh31/orgs", "repos_url": "https://api.github.com/users/SarthakSingh31/repos", "events_url": "https://api.github.com/users/SarthakSingh31/events{/privacy}", "received_events_url": "https://api.github.com/users/SarthakSingh31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2702e922ba31e49d6167f5651d4545646dcf22d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2702e922ba31e49d6167f5651d4545646dcf22d", "html_url": "https://github.com/rust-lang/rust/commit/f2702e922ba31e49d6167f5651d4545646dcf22d"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "ffdb8de5b6c8c355b1fad36cb5b0e09f20932f67", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e46d8675cd924e981aac9fd6ca146d627e9d4ab/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e46d8675cd924e981aac9fd6ca146d627e9d4ab/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=5e46d8675cd924e981aac9fd6ca146d627e9d4ab", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::definitions::DisambiguatedDefPathData;\n use rustc_middle::mir::interpret::{Allocation, ConstAllocation};\n use rustc_middle::ty::{\n     self,\n-    print::{PrettyPrinter, Print, Printer},\n+    print::{with_no_verbose_constants, PrettyPrinter, Print, Printer},\n     subst::{GenericArg, GenericArgKind},\n     Ty, TyCtxt,\n };\n@@ -190,7 +190,9 @@ impl Write for AbsolutePathPrinter<'_> {\n \n /// Directly returns an `Allocation` containing an absolute path representation of the given type.\n pub(crate) fn alloc_type_name<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ConstAllocation<'tcx> {\n-    let path = AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path;\n+    let path = with_no_verbose_constants!(\n+        AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path\n+    );\n     let alloc = Allocation::from_bytes_byte_aligned_immutable(path.into_bytes());\n     tcx.intern_const_alloc(alloc)\n }"}, {"sha": "c1c2e162f28399bd1c43563edc4d4c9dfad734e1", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e46d8675cd924e981aac9fd6ca146d627e9d4ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e46d8675cd924e981aac9fd6ca146d627e9d4ab/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=5e46d8675cd924e981aac9fd6ca146d627e9d4ab", "patch": "@@ -63,6 +63,7 @@ thread_local! {\n     static NO_TRIMMED_PATH: Cell<bool> = const { Cell::new(false) };\n     static NO_QUERIES: Cell<bool> = const { Cell::new(false) };\n     static NO_VISIBLE_PATH: Cell<bool> = const { Cell::new(false) };\n+    static NO_VERBOSE_CONSTANTS: Cell<bool> = const { Cell::new(false) };\n }\n \n macro_rules! define_helper {\n@@ -117,6 +118,9 @@ define_helper!(\n     /// Prevent selection of visible paths. `Display` impl of DefId will prefer\n     /// visible (public) reexports of types as paths.\n     fn with_no_visible_paths(NoVisibleGuard, NO_VISIBLE_PATH);\n+    /// Prevent verbose printing of constants. Verbose printing of constants is\n+    /// never desirable in some contexts like `std::any::type_name`.\n+    fn with_no_verbose_constants(NoVerboseConstantsGuard, NO_VERBOSE_CONSTANTS);\n );\n \n /// The \"region highlights\" are used to control region printing during\n@@ -759,7 +763,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Array(ty, sz) => {\n                 p!(\"[\", print(ty), \"; \");\n-                if self.tcx().sess.verbose() {\n+                if !NO_VERBOSE_CONSTANTS.with(|flag| flag.get()) && self.tcx().sess.verbose() {\n                     p!(write(\"{:?}\", sz));\n                 } else if let ty::ConstKind::Unevaluated(..) = sz.kind() {\n                     // Do not try to evaluate unevaluated constants. If we are const evaluating an\n@@ -1181,7 +1185,7 @@ pub trait PrettyPrinter<'tcx>:\n     ) -> Result<Self::Const, Self::Error> {\n         define_scoped_cx!(self);\n \n-        if self.tcx().sess.verbose() {\n+        if !NO_VERBOSE_CONSTANTS.with(|flag| flag.get()) && self.tcx().sess.verbose() {\n             p!(write(\"Const({:?}: {:?})\", ct.kind(), ct.ty()));\n             return Ok(self);\n         }\n@@ -1416,7 +1420,7 @@ pub trait PrettyPrinter<'tcx>:\n     ) -> Result<Self::Const, Self::Error> {\n         define_scoped_cx!(self);\n \n-        if self.tcx().sess.verbose() {\n+        if !NO_VERBOSE_CONSTANTS.with(|flag| flag.get()) && self.tcx().sess.verbose() {\n             p!(write(\"ValTree({:?}: \", valtree), print(ty), \")\");\n             return Ok(self);\n         }"}, {"sha": "902ef5ade2b0eb01844c9634f01aa06e3285582d", "filename": "src/test/ui/type/issue-94187-verbose-type-name.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5e46d8675cd924e981aac9fd6ca146d627e9d4ab/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e46d8675cd924e981aac9fd6ca146d627e9d4ab/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs?ref=5e46d8675cd924e981aac9fd6ca146d627e9d4ab", "patch": "@@ -0,0 +1,13 @@\n+// Check to insure that the output of `std::any::type_name` does not change based on -Zverbose\n+// when printing constants\n+// run-pass\n+// edition: 2018\n+// revisions: normal verbose\n+// [verbose]compile-flags:-Zverbose\n+\n+struct Wrapper<const VALUE: usize>;\n+\n+fn main() {\n+    assert_eq!(std::any::type_name::<[u32; 0]>(), \"[u32; 0]\");\n+    assert_eq!(std::any::type_name::<Wrapper<0>>(), \"issue_94187_verbose_type_name::Wrapper<0>\");\n+}"}]}