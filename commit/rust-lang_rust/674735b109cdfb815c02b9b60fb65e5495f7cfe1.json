{"sha": "674735b109cdfb815c02b9b60fb65e5495f7cfe1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NDczNWIxMDljZGZiODE1YzAyYjliNjBmYjY1ZTU0OTVmN2NmZTE=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-01-17T07:49:30Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-01-17T07:49:30Z"}, "message": "Impl EncodableWithShorthand for PredicateKind", "tree": {"sha": "9365131eb81a856441a944c9eef730ea28bd213e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9365131eb81a856441a944c9eef730ea28bd213e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/674735b109cdfb815c02b9b60fb65e5495f7cfe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/674735b109cdfb815c02b9b60fb65e5495f7cfe1", "html_url": "https://github.com/rust-lang/rust/commit/674735b109cdfb815c02b9b60fb65e5495f7cfe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/674735b109cdfb815c02b9b60fb65e5495f7cfe1/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43", "html_url": "https://github.com/rust-lang/rust/commit/f2ed9a3a8cc8d7972509143f2d8cb2a53e1a6b43"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "5e2674254b2955116a6929f12930f89438fbc51e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/674735b109cdfb815c02b9b60fb65e5495f7cfe1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/674735b109cdfb815c02b9b60fb65e5495f7cfe1/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=674735b109cdfb815c02b9b60fb65e5495f7cfe1", "patch": "@@ -46,6 +46,7 @@ pub(super) struct EncodeContext<'a, 'tcx> {\n \n     lazy_state: LazyState,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n+    predicate_shorthands: FxHashMap<ty::PredicateKind<'tcx>, usize>,\n \n     interpret_allocs: FxIndexSet<interpret::AllocId>,\n \n@@ -327,6 +328,10 @@ impl<'a, 'tcx> TyEncoder<'tcx> for EncodeContext<'a, 'tcx> {\n         &mut self.type_shorthands\n     }\n \n+    fn predicate_shorthands(&mut self) -> &mut FxHashMap<ty::PredicateKind<'tcx>, usize> {\n+        &mut self.predicate_shorthands\n+    }\n+\n     fn encode_alloc_id(\n         &mut self,\n         alloc_id: &rustc_middle::mir::interpret::AllocId,\n@@ -2146,6 +2151,7 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {\n         tables: Default::default(),\n         lazy_state: LazyState::NoNode,\n         type_shorthands: Default::default(),\n+        predicate_shorthands: Default::default(),\n         source_file_cache,\n         interpret_allocs: Default::default(),\n         required_source_files,"}, {"sha": "0aaba81819b00498f439000584081c12a563c6ee", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/674735b109cdfb815c02b9b60fb65e5495f7cfe1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/674735b109cdfb815c02b9b60fb65e5495f7cfe1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=674735b109cdfb815c02b9b60fb65e5495f7cfe1", "patch": "@@ -43,11 +43,21 @@ impl<'tcx, E: TyEncoder<'tcx>> EncodableWithShorthand<'tcx, E> for Ty<'tcx> {\n     }\n }\n \n+impl<'tcx, E: TyEncoder<'tcx>> EncodableWithShorthand<'tcx, E> for ty::PredicateKind<'tcx> {\n+    type Variant = ty::PredicateKind<'tcx>;\n+\n+    #[inline]\n+    fn variant(&self) -> &Self::Variant {\n+        self\n+    }\n+}\n+\n pub trait TyEncoder<'tcx>: Encoder {\n     const CLEAR_CROSS_CRATE: bool;\n \n     fn position(&self) -> usize;\n     fn type_shorthands(&mut self) -> &mut FxHashMap<Ty<'tcx>, usize>;\n+    fn predicate_shorthands(&mut self) -> &mut FxHashMap<ty::PredicateKind<'tcx>, usize>;\n     fn encode_alloc_id(&mut self, alloc_id: &AllocId) -> Result<(), Self::Error>;\n }\n \n@@ -110,6 +120,12 @@ impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for Ty<'tcx> {\n     }\n }\n \n+impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::PredicateKind<'tcx> {\n+    fn encode(&self, e: &mut E) -> Result<(), E::Error> {\n+        encode_with_shorthand(e, self, TyEncoder::predicate_shorthands)\n+    }\n+}\n+\n impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Predicate<'tcx> {\n     fn encode(&self, e: &mut E) -> Result<(), E::Error> {\n         self.kind().encode(e)\n@@ -210,6 +226,21 @@ impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for Ty<'tcx> {\n     }\n }\n \n+impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::PredicateKind<'tcx> {\n+    fn decode(decoder: &mut D) -> Result<ty::PredicateKind<'tcx>, D::Error> {\n+        // Handle shorthands first, if we have an usize > 0x80.\n+        if decoder.positioned_at_shorthand() {\n+            let pos = decoder.read_usize()?;\n+            assert!(pos >= SHORTHAND_OFFSET);\n+            let shorthand = pos - SHORTHAND_OFFSET;\n+\n+            decoder.with_position(shorthand, ty::PredicateKind::decode)\n+        } else {\n+            Ok(ty::PredicateKind::decode(decoder)?)\n+        }\n+    }\n+}\n+\n impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Predicate<'tcx> {\n     fn decode(decoder: &mut D) -> Result<ty::Predicate<'tcx>, D::Error> {\n         let predicate_kind = Decodable::decode(decoder)?;"}, {"sha": "88a2aac010c9a266c64b3f6247608fecc08723da", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/674735b109cdfb815c02b9b60fb65e5495f7cfe1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/674735b109cdfb815c02b9b60fb65e5495f7cfe1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=674735b109cdfb815c02b9b60fb65e5495f7cfe1", "patch": "@@ -1081,7 +1081,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Predicate<'tcx> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n #[derive(HashStable, TypeFoldable)]\n pub enum PredicateKind<'tcx> {\n     /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be"}, {"sha": "cfe47004e01b67fd309d59f6451c6226e10b8691", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/674735b109cdfb815c02b9b60fb65e5495f7cfe1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/674735b109cdfb815c02b9b60fb65e5495f7cfe1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=674735b109cdfb815c02b9b60fb65e5495f7cfe1", "patch": "@@ -293,6 +293,7 @@ impl<'sess> OnDiskCache<'sess> {\n                 tcx,\n                 encoder,\n                 type_shorthands: Default::default(),\n+                predicate_shorthands: Default::default(),\n                 interpret_allocs: Default::default(),\n                 source_map: CachingSourceMapView::new(tcx.sess.source_map()),\n                 file_to_file_index,\n@@ -988,6 +989,7 @@ struct CacheEncoder<'a, 'tcx, E: OpaqueEncoder> {\n     tcx: TyCtxt<'tcx>,\n     encoder: &'a mut E,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n+    predicate_shorthands: FxHashMap<ty::PredicateKind<'tcx>, usize>,\n     interpret_allocs: FxIndexSet<interpret::AllocId>,\n     source_map: CachingSourceMapView<'tcx>,\n     file_to_file_index: FxHashMap<*const SourceFile, SourceFileIndex>,\n@@ -1101,6 +1103,9 @@ where\n     fn type_shorthands(&mut self) -> &mut FxHashMap<Ty<'tcx>, usize> {\n         &mut self.type_shorthands\n     }\n+    fn predicate_shorthands(&mut self) -> &mut FxHashMap<ty::PredicateKind<'tcx>, usize> {\n+        &mut self.predicate_shorthands\n+    }\n     fn encode_alloc_id(&mut self, alloc_id: &interpret::AllocId) -> Result<(), Self::Error> {\n         let (index, _) = self.interpret_allocs.insert_full(*alloc_id);\n "}]}