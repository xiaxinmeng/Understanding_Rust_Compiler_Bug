{"sha": "4451e2881fbc7c066e8f44c1b09b69b0648e41d7", "node_id": "C_kwDOAAsO6NoAKDQ0NTFlMjg4MWZiYzdjMDY2ZThmNDRjMWIwOWI2OWIwNjQ4ZTQxZDc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-19T14:35:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-19T14:35:19Z"}, "message": "Rollup merge of #103969 - ferrocene:pa-download-rustc-ui-tests, r=jyn514\n\nPartial support for running UI tests with `download-rustc`\n\nRight now trying to run UI tests with `download-rustc` results in a bunch of test failures, requiring someone who wants to only work on tests to also build the full compiler. This PR **partially** addresses the problem by solving a lot of the errors (but not all).\n\n* This installs the `rust-src` component on CI toolchains, since the test output depends on whether the standard library source code is installed; We can't just symlink the current source because the `rustc-dev` component already includes the compiler sources, but not the library sources, and mixing things is worse IMO.\n* This ensures the `$SRC_DIR` normalization done by compiletest correctly handles the source code added above.\n* This unconditionally sets `remap-prefix` to the prefix used in the downloaded toolchain, to ensure compiletest normalizes it.", "tree": {"sha": "b7ec0ac4f046a73c15df8453b5160f335d209ab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7ec0ac4f046a73c15df8453b5160f335d209ab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4451e2881fbc7c066e8f44c1b09b69b0648e41d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjeOmnCRBK7hj4Ov3rIwAApKAIAI2eNUau9tHi4b5106qKcMRs\niYDUE43R94/cQQsHXLQZ9/iifpJIgLR1Pw52vLHvzSLQXj8RS0znAB1iOlzCpyOG\neOjbf+HvwHnorj6zlRcW8p5rkRbsQZr4OukmU9q7K/hO5V6qZk89yxViSjvBQc96\nJnExlyL1sUFbNo/MIkAUfu+K86mJlPYfbstxBOC+gyKoCIjgAAsllB3DqPly8rNE\nPsCpuHDMiFvU+MiLFsx8h4vQEBKPCTjmWOijZWPIAakp4wzti7AD8jZ5Ugx/0Xmu\nMEMX0UqkMRPH9zMXjCJOLjIwSQ/aGdPVAnfRAKLkuLjMg4+MgGK71j9iB87hD3M=\n=u/wv\n-----END PGP SIGNATURE-----\n", "payload": "tree b7ec0ac4f046a73c15df8453b5160f335d209ab0\nparent 52cc0d5360622fe505b4f25973e06b1c9600f07c\nparent 470423c3d2cde3a62d5d4ac23840d734e8145366\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668868519 +0100\ncommitter GitHub <noreply@github.com> 1668868519 +0100\n\nRollup merge of #103969 - ferrocene:pa-download-rustc-ui-tests, r=jyn514\n\nPartial support for running UI tests with `download-rustc`\n\nRight now trying to run UI tests with `download-rustc` results in a bunch of test failures, requiring someone who wants to only work on tests to also build the full compiler. This PR **partially** addresses the problem by solving a lot of the errors (but not all).\n\n* This installs the `rust-src` component on CI toolchains, since the test output depends on whether the standard library source code is installed; We can't just symlink the current source because the `rustc-dev` component already includes the compiler sources, but not the library sources, and mixing things is worse IMO.\n* This ensures the `$SRC_DIR` normalization done by compiletest correctly handles the source code added above.\n* This unconditionally sets `remap-prefix` to the prefix used in the downloaded toolchain, to ensure compiletest normalizes it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4451e2881fbc7c066e8f44c1b09b69b0648e41d7", "html_url": "https://github.com/rust-lang/rust/commit/4451e2881fbc7c066e8f44c1b09b69b0648e41d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4451e2881fbc7c066e8f44c1b09b69b0648e41d7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52cc0d5360622fe505b4f25973e06b1c9600f07c", "url": "https://api.github.com/repos/rust-lang/rust/commits/52cc0d5360622fe505b4f25973e06b1c9600f07c", "html_url": "https://github.com/rust-lang/rust/commit/52cc0d5360622fe505b4f25973e06b1c9600f07c"}, {"sha": "470423c3d2cde3a62d5d4ac23840d734e8145366", "url": "https://api.github.com/repos/rust-lang/rust/commits/470423c3d2cde3a62d5d4ac23840d734e8145366", "html_url": "https://github.com/rust-lang/rust/commit/470423c3d2cde3a62d5d4ac23840d734e8145366"}], "stats": {"total": 70, "additions": 45, "deletions": 25}, "files": [{"sha": "babf09d2b93349605ed3c8b2965635e7932a352b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4451e2881fbc7c066e8f44c1b09b69b0648e41d7/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4451e2881fbc7c066e8f44c1b09b69b0648e41d7/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=4451e2881fbc7c066e8f44c1b09b69b0648e41d7", "patch": "@@ -1511,19 +1511,25 @@ impl Config {\n \n     /// Return whether we will use a downloaded, pre-compiled version of rustc, or just build from source.\n     pub(crate) fn download_rustc(&self) -> bool {\n-        static DOWNLOAD_RUSTC: OnceCell<bool> = OnceCell::new();\n+        self.download_rustc_commit().is_some()\n+    }\n+\n+    pub(crate) fn download_rustc_commit(&self) -> Option<&'static str> {\n+        static DOWNLOAD_RUSTC: OnceCell<Option<String>> = OnceCell::new();\n         if self.dry_run() && DOWNLOAD_RUSTC.get().is_none() {\n             // avoid trying to actually download the commit\n-            return false;\n+            return None;\n         }\n \n-        *DOWNLOAD_RUSTC.get_or_init(|| match &self.download_rustc_commit {\n-            None => false,\n-            Some(commit) => {\n-                self.download_ci_rustc(commit);\n-                true\n-            }\n-        })\n+        DOWNLOAD_RUSTC\n+            .get_or_init(|| match &self.download_rustc_commit {\n+                None => None,\n+                Some(commit) => {\n+                    self.download_ci_rustc(commit);\n+                    Some(commit.clone())\n+                }\n+            })\n+            .as_deref()\n     }\n \n     pub(crate) fn initial_rustfmt(&self) -> Option<PathBuf> {"}, {"sha": "b22b7ad4ae04a7b28ed8e1cd347d78eff9754e50", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4451e2881fbc7c066e8f44c1b09b69b0648e41d7/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4451e2881fbc7c066e8f44c1b09b69b0648e41d7/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=4451e2881fbc7c066e8f44c1b09b69b0648e41d7", "patch": "@@ -1401,6 +1401,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         cmd.arg(\"--src-base\").arg(builder.src.join(\"src/test\").join(suite));\n         cmd.arg(\"--build-base\").arg(testdir(builder, compiler.host).join(suite));\n+        cmd.arg(\"--sysroot-base\").arg(builder.sysroot(compiler));\n         cmd.arg(\"--stage-id\").arg(format!(\"stage{}-{}\", compiler.stage, target));\n         cmd.arg(\"--suite\").arg(suite);\n         cmd.arg(\"--mode\").arg(mode);\n@@ -1670,6 +1671,10 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         cmd.arg(\"--channel\").arg(&builder.config.channel);\n \n+        if let Some(commit) = builder.config.download_rustc_commit() {\n+            cmd.env(\"FAKE_DOWNLOAD_RUSTC_PREFIX\", format!(\"/rustc/{commit}\"));\n+        }\n+\n         builder.ci_env.force_coloring_in_ci(&mut cmd);\n \n         builder.info(&format!("}, {"sha": "07b80b8baac1639ee9270142114cbb3f271246b3", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4451e2881fbc7c066e8f44c1b09b69b0648e41d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4451e2881fbc7c066e8f44c1b09b69b0648e41d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=4451e2881fbc7c066e8f44c1b09b69b0648e41d7", "patch": "@@ -230,6 +230,9 @@ pub struct Config {\n     /// The directory where programs should be built\n     pub build_base: PathBuf,\n \n+    /// The directory containing the compiler sysroot\n+    pub sysroot_base: PathBuf,\n+\n     /// The name of the stage being built (stage1, etc)\n     pub stage_id: String,\n "}, {"sha": "e42b8c5240842a1387a490dfdbb02569a22e18e7", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4451e2881fbc7c066e8f44c1b09b69b0648e41d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4451e2881fbc7c066e8f44c1b09b69b0648e41d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=4451e2881fbc7c066e8f44c1b09b69b0648e41d7", "patch": "@@ -46,6 +46,7 @@ fn config() -> Config {\n         \"--jsondocck-path=\",\n         \"--src-base=\",\n         \"--build-base=\",\n+        \"--sysroot-base=\",\n         \"--stage-id=stage2\",\n         \"--cc=c\",\n         \"--cxx=c++\","}, {"sha": "519da685f940a24a6b18a2ab5780ad20db66146f", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4451e2881fbc7c066e8f44c1b09b69b0648e41d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4451e2881fbc7c066e8f44c1b09b69b0648e41d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=4451e2881fbc7c066e8f44c1b09b69b0648e41d7", "patch": "@@ -69,6 +69,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         .optopt(\"\", \"llvm-filecheck\", \"path to LLVM's FileCheck binary\", \"DIR\")\n         .reqopt(\"\", \"src-base\", \"directory to scan for test files\", \"PATH\")\n         .reqopt(\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\")\n+        .reqopt(\"\", \"sysroot-base\", \"directory containing the compiler sysroot\", \"PATH\")\n         .reqopt(\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\")\n         .reqopt(\n             \"\",\n@@ -234,6 +235,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         llvm_bin_dir: matches.opt_str(\"llvm-bin-dir\").map(PathBuf::from),\n         src_base,\n         build_base: opt_path(matches, \"build-base\"),\n+        sysroot_base: opt_path(matches, \"sysroot-base\"),\n         stage_id: matches.opt_str(\"stage-id\").unwrap(),\n         mode,\n         suite: matches.opt_str(\"suite\").unwrap(),"}, {"sha": "a392114aa67f52319f92b7260b62ad2917ced317", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4451e2881fbc7c066e8f44c1b09b69b0648e41d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4451e2881fbc7c066e8f44c1b09b69b0648e41d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=4451e2881fbc7c066e8f44c1b09b69b0648e41d7", "patch": "@@ -3533,22 +3533,25 @@ impl<'test> TestCx<'test> {\n         let parent_dir = self.testpaths.file.parent().unwrap();\n         normalize_path(parent_dir, \"$DIR\");\n \n-        // Paths into the libstd/libcore\n-        let base_dir = self.config.src_base.parent().unwrap().parent().unwrap().parent().unwrap();\n-        let src_dir = base_dir.join(\"library\");\n-        normalize_path(&src_dir, \"$SRC_DIR\");\n-\n-        // `ui-fulldeps` tests can show paths to the compiler source when testing macros from\n-        // `rustc_macros`\n-        // eg. /home/user/rust/compiler\n-        let compiler_src_dir = base_dir.join(\"compiler\");\n-        normalize_path(&compiler_src_dir, \"$COMPILER_DIR\");\n-\n-        if let Some(virtual_rust_source_base_dir) =\n-            option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from)\n-        {\n-            normalize_path(&virtual_rust_source_base_dir.join(\"library\"), \"$SRC_DIR\");\n-            normalize_path(&virtual_rust_source_base_dir.join(\"compiler\"), \"$COMPILER_DIR\");\n+        let source_bases = &[\n+            // Source base on the current filesystem (calculated as parent of `src/test/$suite`):\n+            Some(self.config.src_base.parent().unwrap().parent().unwrap().parent().unwrap().into()),\n+            // Source base on the sysroot (from the src components downloaded by `download-rustc`):\n+            Some(self.config.sysroot_base.join(\"lib\").join(\"rustlib\").join(\"src\").join(\"rust\")),\n+            // Virtual `/rustc/$sha` remapped paths (if `remap-debuginfo` is enabled):\n+            option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from),\n+            // Virtual `/rustc/$sha` coming from download-rustc:\n+            std::env::var_os(\"FAKE_DOWNLOAD_RUSTC_PREFIX\").map(PathBuf::from),\n+        ];\n+        for base_dir in source_bases {\n+            if let Some(base_dir) = base_dir {\n+                // Paths into the libstd/libcore\n+                normalize_path(&base_dir.join(\"library\"), \"$SRC_DIR\");\n+                // `ui-fulldeps` tests can show paths to the compiler source when testing macros from\n+                // `rustc_macros`\n+                // eg. /home/user/rust/compiler\n+                normalize_path(&base_dir.join(\"compiler\"), \"$COMPILER_DIR\");\n+            }\n         }\n \n         // Paths into the build directory"}]}