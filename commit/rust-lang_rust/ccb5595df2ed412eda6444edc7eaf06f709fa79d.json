{"sha": "ccb5595df2ed412eda6444edc7eaf06f709fa79d", "node_id": "C_kwDOAAsO6NoAKGNjYjU1OTVkZjJlZDQxMmVkYTY0NDRlZGM3ZWFmMDZmNzA5ZmE3OWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-08T10:30:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-08T10:30:00Z"}, "message": "Auto merge of #98900 - lcnr:region-stuff, r=jackh726\n\nconst_generics: correctly deal with bound variables\n\nremoves the hack in `resolve` which was needed because we evaluated constants without caring about their bound variables.\n\nEach commit should be fairly self-contained, even if they build on each other\n\nr? `@jackh726`", "tree": {"sha": "8f36aaed3f0d5aec36c2a8ee8de0818b9b8f9c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f36aaed3f0d5aec36c2a8ee8de0818b9b8f9c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccb5595df2ed412eda6444edc7eaf06f709fa79d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb5595df2ed412eda6444edc7eaf06f709fa79d", "html_url": "https://github.com/rust-lang/rust/commit/ccb5595df2ed412eda6444edc7eaf06f709fa79d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccb5595df2ed412eda6444edc7eaf06f709fa79d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b42244c2ab462a5ac4c901e8988f9fcb78776d9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b42244c2ab462a5ac4c901e8988f9fcb78776d9c", "html_url": "https://github.com/rust-lang/rust/commit/b42244c2ab462a5ac4c901e8988f9fcb78776d9c"}, {"sha": "e6660326a31d4fcd0031562d83d9fd648fb28e56", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6660326a31d4fcd0031562d83d9fd648fb28e56", "html_url": "https://github.com/rust-lang/rust/commit/e6660326a31d4fcd0031562d83d9fd648fb28e56"}], "stats": {"total": 159, "additions": 76, "deletions": 83}, "files": [{"sha": "7dba5059307eaea2bc3369ea1c003d59f6ce92d3", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=ccb5595df2ed412eda6444edc7eaf06f709fa79d", "patch": "@@ -79,9 +79,9 @@ pub(crate) fn eval_nullary_intrinsic<'tcx>(\n             ty::Projection(_)\n             | ty::Opaque(_, _)\n             | ty::Param(_)\n-            | ty::Bound(_, _)\n             | ty::Placeholder(_)\n             | ty::Infer(_) => throw_inval!(TooGeneric),\n+            ty::Bound(_, _) => bug!(\"bound ty during ctfe\"),\n             ty::Bool\n             | ty::Char\n             | ty::Int(_)"}, {"sha": "f6c4f7dd1122105405065a171e1978eb69370e54", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=ccb5595df2ed412eda6444edc7eaf06f709fa79d", "patch": "@@ -559,15 +559,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::Provenance>> {\n         match c.kind() {\n-            ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),\n+            ty::ConstKind::Param(_) | ty::ConstKind::Placeholder(..) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => {\n                 throw_inval!(AlreadyReported(reported))\n             }\n             ty::ConstKind::Unevaluated(uv) => {\n                 let instance = self.resolve(uv.def, uv.substs)?;\n                 Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())\n             }\n-            ty::ConstKind::Infer(..) | ty::ConstKind::Placeholder(..) => {\n+            ty::ConstKind::Bound(..) | ty::ConstKind::Infer(..) => {\n                 span_bug!(self.cur_span(), \"const_to_op: Unexpected ConstKind {:?}\", c)\n             }\n             ty::ConstKind::Value(valtree) => {"}, {"sha": "c1fb59009d369ef5e85463ac42fe5654287721ad", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=ccb5595df2ed412eda6444edc7eaf06f709fa79d", "patch": "@@ -486,7 +486,7 @@ struct Generalizer<'cx, 'tcx> {\n \n     param_env: ty::ParamEnv<'tcx>,\n \n-    cache: SsoHashMap<Ty<'tcx>, RelateResult<'tcx, Ty<'tcx>>>,\n+    cache: SsoHashMap<Ty<'tcx>, Ty<'tcx>>,\n }\n \n /// Result from a generalization operation. This includes\n@@ -593,8 +593,8 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n     fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n         assert_eq!(t, t2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==\n \n-        if let Some(result) = self.cache.get(&t) {\n-            return result.clone();\n+        if let Some(&result) = self.cache.get(&t) {\n+            return Ok(result);\n         }\n         debug!(\"generalize: t={:?}\", t);\n \n@@ -664,10 +664,10 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 Ok(t)\n             }\n             _ => relate::super_relate_tys(self, t, t),\n-        };\n+        }?;\n \n-        self.cache.insert(t, result.clone());\n-        return result;\n+        self.cache.insert(t, result);\n+        Ok(result)\n     }\n \n     fn regions(\n@@ -743,9 +743,7 @@ impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n-                if self.tcx().lazy_normalization() =>\n-            {\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n                 assert_eq!(promoted, None);\n                 let substs = self.relate_with_variance(\n                     ty::Variance::Invariant,\n@@ -967,9 +965,7 @@ impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n-                if self.tcx().lazy_normalization() =>\n-            {\n+            ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) => {\n                 assert_eq!(promoted, None);\n                 let substs = self.relate_with_variance(\n                     ty::Variance::Invariant,"}, {"sha": "ff20da65c016de18341a4352e1fd8f1e8fc37e5c", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=ccb5595df2ed412eda6444edc7eaf06f709fa79d", "patch": "@@ -180,6 +180,7 @@ impl<'tcx> ConstKind<'tcx> {\n         param_env: ParamEnv<'tcx>,\n         eval_mode: EvalMode,\n     ) -> Option<Result<EvalResult<'tcx>, ErrorGuaranteed>> {\n+        assert!(!self.has_escaping_bound_vars(), \"escaping vars in {self:?}\");\n         if let ConstKind::Unevaluated(unevaluated) = self {\n             use crate::mir::interpret::ErrorHandled;\n "}, {"sha": "81476195d29958009beeb9f8b0512d8ada8ae0ab", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=ccb5595df2ed412eda6444edc7eaf06f709fa79d", "patch": "@@ -594,10 +594,6 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         );\n     }\n \n-    let eagerly_eval = |x: ty::Const<'tcx>| x.eval(tcx, relation.param_env());\n-    let a = eagerly_eval(a);\n-    let b = eagerly_eval(b);\n-\n     // Currently, the values that can be unified are primitive types,\n     // and those that derive both `PartialEq` and `Eq`, corresponding\n     // to structural-match types."}, {"sha": "8a093bf4281cb751b7a32556587611beabe8dc80", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=ccb5595df2ed412eda6444edc7eaf06f709fa79d", "patch": "@@ -635,13 +635,18 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn fold_const(&mut self, constant: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        if self.selcx.tcx().lazy_normalization() || !self.eager_inference_replacement {\n+        let tcx = self.selcx.tcx();\n+        if tcx.lazy_normalization() {\n             constant\n         } else {\n             let constant = constant.super_fold_with(self);\n-            debug!(?constant);\n-            debug!(\"self.param_env: {:?}\", self.param_env);\n-            constant.eval(self.selcx.tcx(), self.param_env)\n+            debug!(?constant, ?self.param_env);\n+            with_replaced_escaping_bound_vars(\n+                self.selcx.infcx(),\n+                &mut self.universes,\n+                constant,\n+                |constant| constant.eval(tcx, self.param_env),\n+            )\n         }\n     }\n \n@@ -671,6 +676,41 @@ pub struct BoundVarReplacer<'me, 'tcx> {\n     universe_indices: &'me mut Vec<Option<ty::UniverseIndex>>,\n }\n \n+/// Executes `f` on `value` after replacing all escaping bound variables with placeholders\n+/// and then replaces these placeholders with the original bound variables in the result.\n+///\n+/// In most places, bound variables should be replaced right when entering a binder, making\n+/// this function unnecessary. However, normalization currently does not do that, so we have\n+/// to do this lazily.\n+///\n+/// You should not add any additional uses of this function, at least not without first\n+/// discussing it with t-types.\n+///\n+/// FIXME(@lcnr): We may even consider experimenting with eagerly replacing bound vars during\n+/// normalization as well, at which point this function will be unnecessary and can be removed.\n+pub fn with_replaced_escaping_bound_vars<'a, 'tcx, T: TypeFoldable<'tcx>, R: TypeFoldable<'tcx>>(\n+    infcx: &'a InferCtxt<'a, 'tcx>,\n+    universe_indices: &'a mut Vec<Option<ty::UniverseIndex>>,\n+    value: T,\n+    f: impl FnOnce(T) -> R,\n+) -> R {\n+    if value.has_escaping_bound_vars() {\n+        let (value, mapped_regions, mapped_types, mapped_consts) =\n+            BoundVarReplacer::replace_bound_vars(infcx, universe_indices, value);\n+        let result = f(value);\n+        PlaceholderReplacer::replace_placeholders(\n+            infcx,\n+            mapped_regions,\n+            mapped_types,\n+            mapped_consts,\n+            universe_indices,\n+            result,\n+        )\n+    } else {\n+        f(value)\n+    }\n+}\n+\n impl<'me, 'tcx> BoundVarReplacer<'me, 'tcx> {\n     /// Returns `Some` if we *were* able to replace bound vars. If there are any bound vars that\n     /// use a binding level above `universe_indices.len()`, we fail."}, {"sha": "f65fc5bad0d9184144b37fa1fe0a3a41d2f6611d", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=ccb5595df2ed412eda6444edc7eaf06f709fa79d", "patch": "@@ -6,7 +6,7 @@ use crate::infer::at::At;\n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::{InferCtxt, InferOk};\n use crate::traits::error_reporting::InferCtxtExt;\n-use crate::traits::project::needs_normalization;\n+use crate::traits::project::{needs_normalization, BoundVarReplacer, PlaceholderReplacer};\n use crate::traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n@@ -283,11 +283,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 let tcx = self.infcx.tcx;\n                 let infcx = self.infcx;\n                 let (data, mapped_regions, mapped_types, mapped_consts) =\n-                    crate::traits::project::BoundVarReplacer::replace_bound_vars(\n-                        infcx,\n-                        &mut self.universes,\n-                        data,\n-                    );\n+                    BoundVarReplacer::replace_bound_vars(infcx, &mut self.universes, data);\n                 let data = data.try_fold_with(self)?;\n \n                 let mut orig_values = OriginalQueryValues::default();\n@@ -313,8 +309,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 debug!(\"QueryNormalizer: result = {:#?}\", result);\n                 debug!(\"QueryNormalizer: obligations = {:#?}\", obligations);\n                 self.obligations.extend(obligations);\n-\n-                let res = crate::traits::project::PlaceholderReplacer::replace_placeholders(\n+                let res = PlaceholderReplacer::replace_placeholders(\n                     infcx,\n                     mapped_regions,\n                     mapped_types,\n@@ -343,7 +338,13 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n         constant: ty::Const<'tcx>,\n     ) -> Result<ty::Const<'tcx>, Self::Error> {\n         let constant = constant.try_super_fold_with(self)?;\n-        Ok(constant.eval(self.infcx.tcx, self.param_env))\n+        debug!(?constant, ?self.param_env);\n+        Ok(crate::traits::project::with_replaced_escaping_bound_vars(\n+            self.infcx,\n+            &mut self.universes,\n+            constant,\n+            |constant| constant.eval(self.infcx.tcx, self.param_env),\n+        ))\n     }\n \n     fn try_fold_mir_const("}, {"sha": "b07edd43c0716e430cc408a537648d98e5d3ebdc", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5595df2ed412eda6444edc7eaf06f709fa79d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=ccb5595df2ed412eda6444edc7eaf06f709fa79d", "patch": "@@ -495,13 +495,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn to_const(&self, ast_c: &hir::AnonConst) -> ty::Const<'tcx> {\n         let const_def_id = self.tcx.hir().local_def_id(ast_c.hir_id);\n+        let span = self.tcx.hir().span(ast_c.hir_id);\n         let c = ty::Const::from_anon_const(self.tcx, const_def_id);\n-        self.register_wf_obligation(\n-            c.into(),\n-            self.tcx.hir().span(ast_c.hir_id),\n-            ObligationCauseCode::WellFormed(None),\n-        );\n-        c\n+        self.register_wf_obligation(c.into(), span, ObligationCauseCode::WellFormed(None));\n+        self.normalize_associated_types_in(span, c)\n     }\n \n     pub fn const_arg_to_const("}, {"sha": "6ac5380a5aa23b0dcd7161a40741f9c639b29902", "filename": "src/test/ui/closures/issue-52437.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5595df2ed412eda6444edc7eaf06f709fa79d/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5595df2ed412eda6444edc7eaf06f709fa79d/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.rs?ref=ccb5595df2ed412eda6444edc7eaf06f709fa79d", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n     //~^ ERROR: invalid label name `'static`\n     //~| ERROR: type annotations needed\n-    //~| ERROR mismatched types\n }"}, {"sha": "4c24a54bbbe014ddc03ee083e274aa58d97110de", "filename": "src/test/ui/closures/issue-52437.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5595df2ed412eda6444edc7eaf06f709fa79d/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5595df2ed412eda6444edc7eaf06f709fa79d/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr?ref=ccb5595df2ed412eda6444edc7eaf06f709fa79d", "patch": "@@ -15,15 +15,6 @@ help: consider giving this closure parameter an explicit type\n LL |     [(); &(&'static: loop { |x: _| {}; }) as *const _ as usize]\n    |                               +++\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-52437.rs:2:5\n-   |\n-LL | fn main() {\n-   |           - expected `()` because of default return type\n-LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[(); _]`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0282, E0308.\n-For more information about an error, try `rustc --explain E0282`.\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "835fdfae86c033790b72681ddb11d7454b35d3de", "filename": "src/test/ui/issues/issue-66706.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5595df2ed412eda6444edc7eaf06f709fa79d/src%2Ftest%2Fui%2Fissues%2Fissue-66706.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5595df2ed412eda6444edc7eaf06f709fa79d/src%2Ftest%2Fui%2Fissues%2Fissue-66706.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66706.rs?ref=ccb5595df2ed412eda6444edc7eaf06f709fa79d", "patch": "@@ -2,7 +2,6 @@ fn a() {\n     [0; [|_: _ &_| ()].len()]\n     //~^ ERROR expected `,`, found `&`\n     //~| ERROR type annotations needed\n-    //~| ERROR mismatched types\n }\n \n fn b() {\n@@ -13,13 +12,11 @@ fn b() {\n fn c() {\n     [0; [|&_: _ &_| {}; 0 ].len()]\n     //~^ ERROR expected `,`, found `&`\n-    //~| ERROR mismatched types\n }\n \n fn d() {\n     [0; match [|f @ &ref _| () ] {} ]\n     //~^ ERROR expected identifier, found reserved identifier `_`\n-    //~| ERROR mismatched types\n }\n \n fn main() {}"}, {"sha": "8a30c0cad39c5167ee855721d865d2c0169370ba", "filename": "src/test/ui/issues/issue-66706.stderr", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ccb5595df2ed412eda6444edc7eaf06f709fa79d/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccb5595df2ed412eda6444edc7eaf06f709fa79d/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr?ref=ccb5595df2ed412eda6444edc7eaf06f709fa79d", "patch": "@@ -7,21 +7,21 @@ LL |     [0; [|_: _ &_| ()].len()]\n    |               help: missing `,`\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/issue-66706.rs:9:20\n+  --> $DIR/issue-66706.rs:8:20\n    |\n LL |     [0; [|f @ &ref _| {} ; 0 ].len() ];\n    |                    ^ expected identifier, found reserved identifier\n \n error: expected `,`, found `&`\n-  --> $DIR/issue-66706.rs:14:17\n+  --> $DIR/issue-66706.rs:13:17\n    |\n LL |     [0; [|&_: _ &_| {}; 0 ].len()]\n    |                -^ expected `,`\n    |                |\n    |                help: missing `,`\n \n error: expected identifier, found reserved identifier `_`\n-  --> $DIR/issue-66706.rs:20:26\n+  --> $DIR/issue-66706.rs:18:26\n    |\n LL |     [0; match [|f @ &ref _| () ] {} ]\n    |                          ^ expected identifier, found reserved identifier\n@@ -32,31 +32,6 @@ error[E0282]: type annotations needed\n LL |     [0; [|_: _ &_| ()].len()]\n    |           ^ cannot infer type\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-66706.rs:2:5\n-   |\n-LL | fn a() {\n-   |        - help: try adding a return type: `-> [i32; _]`\n-LL |     [0; [|_: _ &_| ()].len()]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-66706.rs:14:5\n-   |\n-LL | fn c() {\n-   |        - help: try adding a return type: `-> [i32; _]`\n-LL |     [0; [|&_: _ &_| {}; 0 ].len()]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-66706.rs:20:5\n-   |\n-LL | fn d() {\n-   |        - help: try adding a return type: `-> [i32; _]`\n-LL |     [0; match [|f @ &ref _| () ] {} ]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0282, E0308.\n-For more information about an error, try `rustc --explain E0282`.\n+For more information about this error, try `rustc --explain E0282`."}]}