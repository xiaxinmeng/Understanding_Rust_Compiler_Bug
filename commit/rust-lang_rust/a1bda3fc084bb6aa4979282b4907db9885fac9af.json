{"sha": "a1bda3fc084bb6aa4979282b4907db9885fac9af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYmRhM2ZjMDg0YmI2YWE0OTc5MjgyYjQ5MDdkYjk4ODVmYWM5YWY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-16T22:05:57Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-16T22:06:41Z"}, "message": "Handle generic args for method calls", "tree": {"sha": "de0f6864caba195ac3a0e463ab7a49e5adc66e8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de0f6864caba195ac3a0e463ab7a49e5adc66e8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1bda3fc084bb6aa4979282b4907db9885fac9af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1bda3fc084bb6aa4979282b4907db9885fac9af", "html_url": "https://github.com/rust-lang/rust/commit/a1bda3fc084bb6aa4979282b4907db9885fac9af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1bda3fc084bb6aa4979282b4907db9885fac9af/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65bd9bc3a800e09f52a315cf98e86c120c366c2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/65bd9bc3a800e09f52a315cf98e86c120c366c2c", "html_url": "https://github.com/rust-lang/rust/commit/65bd9bc3a800e09f52a315cf98e86c120c366c2c"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "e9db8282f5a040600dde49a7b9edee36ccc598d8", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1bda3fc084bb6aa4979282b4907db9885fac9af/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1bda3fc084bb6aa4979282b4907db9885fac9af/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=a1bda3fc084bb6aa4979282b4907db9885fac9af", "patch": "@@ -14,7 +14,7 @@ use crate::{\n     name::AsName,\n     type_ref::{Mutability, TypeRef},\n };\n-use crate::ty::primitive::{UintTy, UncertainIntTy, UncertainFloatTy};\n+use crate::{ path::GenericArgs, ty::primitive::{UintTy, UncertainIntTy, UncertainFloatTy}};\n \n pub use self::scope::{ExprScopes, ScopesWithSyntaxMapping, ScopeEntryWithSyntax};\n \n@@ -193,6 +193,7 @@ pub enum Expr {\n         receiver: ExprId,\n         method_name: Name,\n         args: Vec<ExprId>,\n+        generic_args: Option<GenericArgs>,\n     },\n     Match {\n         expr: ExprId,\n@@ -597,7 +598,11 @@ impl ExprCollector {\n                     Vec::new()\n                 };\n                 let method_name = e.name_ref().map(|nr| nr.as_name()).unwrap_or_else(Name::missing);\n-                self.alloc_expr(Expr::MethodCall { receiver, method_name, args }, syntax_ptr)\n+                let generic_args = e.type_arg_list().and_then(GenericArgs::from_ast);\n+                self.alloc_expr(\n+                    Expr::MethodCall { receiver, method_name, args, generic_args },\n+                    syntax_ptr,\n+                )\n             }\n             ast::ExprKind::MatchExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());"}, {"sha": "83bbbb7416e46fa8fef1ec3294e0bb4684b1df08", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1bda3fc084bb6aa4979282b4907db9885fac9af/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1bda3fc084bb6aa4979282b4907db9885fac9af/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=a1bda3fc084bb6aa4979282b4907db9885fac9af", "patch": "@@ -129,7 +129,7 @@ impl Path {\n }\n \n impl GenericArgs {\n-    fn from_ast(node: &ast::TypeArgList) -> Option<GenericArgs> {\n+    pub fn from_ast(node: &ast::TypeArgList) -> Option<GenericArgs> {\n         let mut args = Vec::new();\n         for type_arg in node.type_args() {\n             let type_ref = TypeRef::from_ast_opt(type_arg.type_ref());"}, {"sha": "f32c77fafd3f4a8c015bc15a904bd70eb9056cca", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a1bda3fc084bb6aa4979282b4907db9885fac9af/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1bda3fc084bb6aa4979282b4907db9885fac9af/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=a1bda3fc084bb6aa4979282b4907db9885fac9af", "patch": "@@ -165,6 +165,17 @@ impl Substs {\n     pub fn empty() -> Substs {\n         Substs(Arc::new([]))\n     }\n+\n+    /// Replaces the end of the substitutions by other ones.\n+    pub(crate) fn replace_tail(self, replace_by: Vec<Ty>) -> Substs {\n+        // again missing Arc::make_mut_slice...\n+        let len = replace_by.len().min(self.0.len());\n+        let parent_len = self.0.len() - len;\n+        let mut result = Vec::with_capacity(parent_len + len);\n+        result.extend(self.0.iter().take(parent_len).cloned());\n+        result.extend(replace_by);\n+        Substs(result.into())\n+    }\n }\n \n /// A type. This is based on the `TyKind` enum in rustc (librustc/ty/sty.rs).\n@@ -1367,15 +1378,34 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 }\n                 ret_ty\n             }\n-            Expr::MethodCall { receiver, args, method_name } => {\n+            Expr::MethodCall { receiver, args, method_name, generic_args } => {\n                 let receiver_ty = self.infer_expr(*receiver, &Expectation::none());\n                 let resolved = receiver_ty.clone().lookup_method(self.db, method_name);\n-                let method_ty = match resolved {\n+                let (method_ty, def_generics) = match resolved {\n                     Some(func) => {\n                         self.write_method_resolution(tgt_expr, func);\n-                        self.db.type_for_def(func.into())\n+                        (self.db.type_for_def(func.into()), Some(func.generic_params(self.db)))\n+                    }\n+                    None => (Ty::Unknown, None),\n+                };\n+                // handle provided type arguments\n+                let method_ty = if let Some(generic_args) = generic_args {\n+                    // if args are provided, it should be all of them, but we can't rely on that\n+                    let param_count = def_generics.map(|g| g.params.len()).unwrap_or(0);\n+                    let mut new_substs = Vec::with_capacity(generic_args.args.len());\n+                    for arg in generic_args.args.iter().take(param_count) {\n+                        match arg {\n+                            GenericArg::Type(type_ref) => {\n+                                let ty = self.make_ty(type_ref);\n+                                new_substs.push(ty);\n+                            }\n+                        }\n                     }\n-                    None => Ty::Unknown,\n+                    let substs = method_ty.substs().unwrap_or_else(Substs::empty);\n+                    let substs = substs.replace_tail(new_substs);\n+                    method_ty.apply_substs(substs)\n+                } else {\n+                    method_ty\n                 };\n                 let method_ty = self.insert_type_vars(method_ty);\n                 let (expected_receiver_ty, param_tys, ret_ty) = match &method_ty {"}, {"sha": "44f00a52eb62e15d36c8ba319f851e2a7e2744dc", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_impl_generics.snap", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1bda3fc084bb6aa4979282b4907db9885fac9af/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_impl_generics.snap", "raw_url": "https://github.com/rust-lang/rust/raw/a1bda3fc084bb6aa4979282b4907db9885fac9af/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_impl_generics.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_impl_generics.snap?ref=a1bda3fc084bb6aa4979282b4907db9885fac9af", "patch": "@@ -1,5 +1,5 @@\n ---\n-created: \"2019-02-16T20:53:59.657979128Z\"\n+created: \"2019-02-16T21:58:14.029368845Z\"\n creator: insta@0.6.2\n source: crates/ra_hir/src/ty/tests.rs\n expression: \"&result\"\n@@ -34,6 +34,6 @@ expression: \"&result\"\n [309; 319) 'a.z(1i128)': (u64, i64, i128)\n [313; 318) '1i128': i128\n [325; 326) 'a': A<u64, i64>\n-[325; 339) 'a.z::<u128>(1)': (u64, i64, i32)\n-[337; 338) '1': i32\n+[325; 339) 'a.z::<u128>(1)': (u64, i64, u128)\n+[337; 338) '1': u128\n "}, {"sha": "dd91b5063542cb07c1f669279f9289d639e19590", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1bda3fc084bb6aa4979282b4907db9885fac9af/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1bda3fc084bb6aa4979282b4907db9885fac9af/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=a1bda3fc084bb6aa4979282b4907db9885fac9af", "patch": "@@ -2095,6 +2095,10 @@ impl MethodCallExpr {\n     pub fn name_ref(&self) -> Option<&NameRef> {\n         super::child_opt(self)\n     }\n+\n+    pub fn type_arg_list(&self) -> Option<&TypeArgList> {\n+        super::child_opt(self)\n+    }\n }\n \n // Module"}, {"sha": "27a1236813de1ac174509ea29d6ebd5065e1024b", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1bda3fc084bb6aa4979282b4907db9885fac9af/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/a1bda3fc084bb6aa4979282b4907db9885fac9af/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=a1bda3fc084bb6aa4979282b4907db9885fac9af", "patch": "@@ -431,7 +431,7 @@ Grammar(\n         ),\n         \"MethodCallExpr\": (\n             traits: [\"ArgListOwner\"],\n-            options: [ \"Expr\", \"NameRef\" ],\n+            options: [ \"Expr\", \"NameRef\", \"TypeArgList\" ],\n         ),\n         \"IndexExpr\": (),\n         \"FieldExpr\": (options: [\"Expr\", \"NameRef\"]),"}]}