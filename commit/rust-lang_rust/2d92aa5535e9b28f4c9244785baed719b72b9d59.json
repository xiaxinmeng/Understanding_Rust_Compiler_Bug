{"sha": "2d92aa5535e9b28f4c9244785baed719b72b9d59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkOTJhYTU1MzVlOWIyOGY0YzkyNDQ3ODViYWVkNzE5YjcyYjlkNTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-01T09:53:20Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T16:54:48Z"}, "message": "Fuse associated constant parsing.", "tree": {"sha": "0f362ff5700a1f79f0dbc5c8f5cf18ce2df6ead4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f362ff5700a1f79f0dbc5c8f5cf18ce2df6ead4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d92aa5535e9b28f4c9244785baed719b72b9d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d92aa5535e9b28f4c9244785baed719b72b9d59", "html_url": "https://github.com/rust-lang/rust/commit/2d92aa5535e9b28f4c9244785baed719b72b9d59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d92aa5535e9b28f4c9244785baed719b72b9d59/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92a372b0204a5f18286ff94648b98e4c0d6d27d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/92a372b0204a5f18286ff94648b98e4c0d6d27d2", "html_url": "https://github.com/rust-lang/rust/commit/92a372b0204a5f18286ff94648b98e4c0d6d27d2"}], "stats": {"total": 28, "additions": 8, "deletions": 20}, "files": [{"sha": "d07fe358272c6aa637cc97054b4ab10bdbd6b86a", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2d92aa5535e9b28f4c9244785baed719b72b9d59/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d92aa5535e9b28f4c9244785baed719b72b9d59/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=2d92aa5535e9b28f4c9244785baed719b72b9d59", "patch": "@@ -7,6 +7,7 @@ use rustc_errors::{PResult, Applicability, DiagnosticBuilder, StashKey};\n use rustc_error_codes::*;\n use syntax::ast::{self, DUMMY_NODE_ID, Ident, Attribute, AttrKind, AttrStyle, AnonConst, Item};\n use syntax::ast::{ItemKind, ImplItem, ImplItemKind, TraitItem, TraitItemKind, UseTree, UseTreeKind};\n+use syntax::ast::{AssocItemKind};\n use syntax::ast::{PathSegment, IsAuto, Constness, IsAsync, Unsafety, Defaultness, Extern, StrLit};\n use syntax::ast::{Visibility, VisibilityKind, Mutability, FnHeader, ForeignItem, ForeignItemKind};\n use syntax::ast::{Ty, TyKind, Generics, TraitRef, EnumDef, Variant, VariantData, StructField};\n@@ -699,7 +700,7 @@ impl<'a> Parser<'a> {\n         let (name, kind, generics) = if self.eat_keyword(kw::Type) {\n             self.parse_impl_assoc_ty()?\n         } else if self.is_const_item() {\n-            self.parse_impl_const()?\n+            self.parse_assoc_const()?\n         } else if let Some(mac) = self.parse_assoc_macro_invoc(\"impl\", Some(&vis), at_end)? {\n             // FIXME: code copied from `parse_macro_use_or_failure` -- use abstraction!\n             (Ident::invalid(), ast::ImplItemKind::Macro(mac), Generics::default())\n@@ -749,22 +750,6 @@ impl<'a> Parser<'a> {\n             !self.is_keyword_ahead(1, &[kw::Fn, kw::Unsafe])\n     }\n \n-    /// This parses the grammar:\n-    ///     ImplItemConst = \"const\" Ident \":\" Ty \"=\" Expr \";\"\n-    fn parse_impl_const(&mut self) -> PResult<'a, (Ident, ImplItemKind, Generics)> {\n-        self.expect_keyword(kw::Const)?;\n-        let ident = self.parse_ident()?;\n-        self.expect(&token::Colon)?;\n-        let ty = self.parse_ty()?;\n-        let expr = if self.eat(&token::Eq) {\n-            Some(self.parse_expr()?)\n-        } else {\n-            None\n-        };\n-        self.expect_semi()?;\n-        Ok((ident, ImplItemKind::Const(ty, expr), Generics::default()))\n-    }\n-\n     /// Parses the following grammar:\n     ///\n     ///     AssocTy = Ident [\"<\"...\">\"] [\":\" [GenericBounds]] [\"where\" ...] [\"=\" Ty]\n@@ -911,7 +896,7 @@ impl<'a> Parser<'a> {\n         let (name, kind, generics) = if self.eat_keyword(kw::Type) {\n             self.parse_trait_item_assoc_ty()?\n         } else if self.is_const_item() {\n-            self.parse_trait_item_const()?\n+            self.parse_assoc_const()?\n         } else if let Some(mac) = self.parse_assoc_macro_invoc(\"trait\", None, &mut false)? {\n             // trait item macro.\n             (Ident::invalid(), TraitItemKind::Macro(mac), Generics::default())\n@@ -932,7 +917,10 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    fn parse_trait_item_const(&mut self) -> PResult<'a, (Ident, TraitItemKind, Generics)> {\n+    /// This parses the grammar:\n+    ///\n+    ///     AssocConst = \"const\" Ident \":\" Ty \"=\" Expr \";\"\n+    fn parse_assoc_const(&mut self) -> PResult<'a, (Ident, AssocItemKind, Generics)> {\n         self.expect_keyword(kw::Const)?;\n         let ident = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n@@ -943,7 +931,7 @@ impl<'a> Parser<'a> {\n             None\n         };\n         self.expect_semi()?;\n-        Ok((ident, TraitItemKind::Const(ty, expr), Generics::default()))\n+        Ok((ident, AssocItemKind::Const(ty, expr), Generics::default()))\n     }\n \n     /// Parses the following grammar:"}]}