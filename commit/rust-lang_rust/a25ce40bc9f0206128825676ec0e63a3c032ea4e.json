{"sha": "a25ce40bc9f0206128825676ec0e63a3c032ea4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNWNlNDBiYzlmMDIwNjEyODgyNTY3NmVjMGU2M2EzYzAzMmVhNGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-04T20:51:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-04T20:51:56Z"}, "message": "Rollup merge of #68818 - matthiaskrgr:misc_perf, r=Mark-Simulacrum\n\nfix couple of perf related clippy warnings\n\nlibrustc: don't clone a type that is copy\nlibrustc_incremental: use faster vector initialization\nlibrustc_typeck: don't clone a type that is copy\nlibrustdoc: don't create a vector where a slice will do", "tree": {"sha": "76f1c27f84b1fa321718c9022048362d35d166be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76f1c27f84b1fa321718c9022048362d35d166be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a25ce40bc9f0206128825676ec0e63a3c032ea4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeOdlsCRBK7hj4Ov3rIwAAdHIIAIsy8Tu5qAlTNlgZSUiXW74n\n6pt6wvzS5fY3vHA7tLuNuUeHCpaCCWXlQfClotXMqJQ1eC2QTiwMHKAEbsApzr98\nw8cnLgXgZQn307hA8z89SMmJF0xCyDjyueJtWEyMsoTgYWLE8jqES7542W9mcFum\nzh4a71mi4FaaBQINbTQmMFZ92yULm2XwcyRCnuCbZSlxlrn6d6En0lJDJz5i36nJ\nM5rTCF1nBDtVOYjNjSYzuGVqcyiT0qUwaGarEpBeJlva/JhAZB8aP9m7nrvrjeMC\nm18DM90Emfy0tlBrnwWr+x4k3DsmTdhpUI8hy0yV8pgrstzhRD88tYje5Tv6igI=\n=nxcG\n-----END PGP SIGNATURE-----\n", "payload": "tree 76f1c27f84b1fa321718c9022048362d35d166be\nparent 3fe4c0ddf970e6be6fb1af81a8c4d81c195a33fb\nparent fe1314dbc42da3331062c9348f7117b3585ad6bd\nauthor Dylan DPC <dylan.dpc@gmail.com> 1580849516 +0100\ncommitter GitHub <noreply@github.com> 1580849516 +0100\n\nRollup merge of #68818 - matthiaskrgr:misc_perf, r=Mark-Simulacrum\n\nfix couple of perf related clippy warnings\n\nlibrustc: don't clone a type that is copy\nlibrustc_incremental: use faster vector initialization\nlibrustc_typeck: don't clone a type that is copy\nlibrustdoc: don't create a vector where a slice will do\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a25ce40bc9f0206128825676ec0e63a3c032ea4e", "html_url": "https://github.com/rust-lang/rust/commit/a25ce40bc9f0206128825676ec0e63a3c032ea4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a25ce40bc9f0206128825676ec0e63a3c032ea4e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fe4c0ddf970e6be6fb1af81a8c4d81c195a33fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe4c0ddf970e6be6fb1af81a8c4d81c195a33fb", "html_url": "https://github.com/rust-lang/rust/commit/3fe4c0ddf970e6be6fb1af81a8c4d81c195a33fb"}, {"sha": "fe1314dbc42da3331062c9348f7117b3585ad6bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1314dbc42da3331062c9348f7117b3585ad6bd", "html_url": "https://github.com/rust-lang/rust/commit/fe1314dbc42da3331062c9348f7117b3585ad6bd"}], "stats": {"total": 20, "additions": 5, "deletions": 15}, "files": [{"sha": "4012c42a879a0e96d0bef9d522b5468388aeda50", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a25ce40bc9f0206128825676ec0e63a3c032ea4e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a25ce40bc9f0206128825676ec0e63a3c032ea4e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a25ce40bc9f0206128825676ec0e63a3c032ea4e", "patch": "@@ -1347,7 +1347,7 @@ pub trait ToPredicate<'tcx> {\n impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<TraitRef<'tcx>> {\n     fn to_predicate(&self) -> Predicate<'tcx> {\n         ty::Predicate::Trait(\n-            ty::Binder::dummy(ty::TraitPredicate { trait_ref: self.value.clone() }),\n+            ty::Binder::dummy(ty::TraitPredicate { trait_ref: self.value }),\n             self.constness,\n         )\n     }"}, {"sha": "5c72b049d97e98647e56efe307c7433eb0085b85", "filename": "src/librustc_incremental/persist/file_format.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a25ce40bc9f0206128825676ec0e63a3c032ea4e/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a25ce40bc9f0206128825676ec0e63a3c032ea4e/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs?ref=a25ce40bc9f0206128825676ec0e63a3c032ea4e", "patch": "@@ -90,8 +90,7 @@ pub fn read_file(\n         let mut rustc_version_str_len = [0u8; 1];\n         file.read_exact(&mut rustc_version_str_len)?;\n         let rustc_version_str_len = rustc_version_str_len[0] as usize;\n-        let mut buffer = Vec::with_capacity(rustc_version_str_len);\n-        buffer.resize(rustc_version_str_len, 0);\n+        let mut buffer = vec![0; rustc_version_str_len];\n         file.read_exact(&mut buffer)?;\n \n         if buffer != rustc_version().as_bytes() {"}, {"sha": "231aed48fb6be7ff580c1e5c895c28275b04d77b", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a25ce40bc9f0206128825676ec0e63a3c032ea4e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a25ce40bc9f0206128825676ec0e63a3c032ea4e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a25ce40bc9f0206128825676ec0e63a3c032ea4e", "patch": "@@ -1438,10 +1438,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         // Expand trait aliases recursively and check that only one regular (non-auto) trait\n         // is used and no 'maybe' bounds are used.\n-        let expanded_traits = traits::expand_trait_aliases(\n-            tcx,\n-            bounds.trait_bounds.iter().map(|&(a, b, _)| (a.clone(), b)),\n-        );\n+        let expanded_traits =\n+            traits::expand_trait_aliases(tcx, bounds.trait_bounds.iter().map(|&(a, b, _)| (a, b)));\n         let (mut auto_traits, regular_traits): (Vec<_>, Vec<_>) =\n             expanded_traits.partition(|i| tcx.trait_is_auto(i.trait_ref().def_id()));\n         if regular_traits.len() > 1 {"}, {"sha": "6a23b230e1224b8fd84e0f3b86d12795f5759e41", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a25ce40bc9f0206128825676ec0e63a3c032ea4e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a25ce40bc9f0206128825676ec0e63a3c032ea4e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=a25ce40bc9f0206128825676ec0e63a3c032ea4e", "patch": "@@ -3627,14 +3627,7 @@ fn render_impl(\n                 for it in &i.inner_impl().items {\n                     if let clean::TypedefItem(ref tydef, _) = it.inner {\n                         write!(w, \"<span class=\\\"where fmt-newline\\\">  \");\n-                        assoc_type(\n-                            w,\n-                            it,\n-                            &vec![],\n-                            Some(&tydef.type_),\n-                            AssocItemLink::Anchor(None),\n-                            \"\",\n-                        );\n+                        assoc_type(w, it, &[], Some(&tydef.type_), AssocItemLink::Anchor(None), \"\");\n                         write!(w, \";</span>\");\n                     }\n                 }"}]}