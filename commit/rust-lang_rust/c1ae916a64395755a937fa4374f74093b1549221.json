{"sha": "c1ae916a64395755a937fa4374f74093b1549221", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYWU5MTZhNjQzOTU3NTVhOTM3ZmE0Mzc0Zjc0MDkzYjE1NDkyMjE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-09-20T01:01:28Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-09-20T01:01:28Z"}, "message": "Remove a few instances of eval_operand_to_ptr.", "tree": {"sha": "30a62dcaeab3d0cce9d113ddd02c2bc8d699adce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30a62dcaeab3d0cce9d113ddd02c2bc8d699adce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1ae916a64395755a937fa4374f74093b1549221", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ae916a64395755a937fa4374f74093b1549221", "html_url": "https://github.com/rust-lang/rust/commit/c1ae916a64395755a937fa4374f74093b1549221", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1ae916a64395755a937fa4374f74093b1549221/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63100401db156eb9cb001263cab65711de317d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/63100401db156eb9cb001263cab65711de317d9b", "html_url": "https://github.com/rust-lang/rust/commit/63100401db156eb9cb001263cab65711de317d9b"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "f15755533034fd52e4a05980d30d878d07b5c2df", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1ae916a64395755a937fa4374f74093b1549221/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ae916a64395755a937fa4374f74093b1549221/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=c1ae916a64395755a937fa4374f74093b1549221", "patch": "@@ -107,7 +107,7 @@ pub struct Frame<'a, 'tcx: 'a> {\n /// For optimization of a few very common cases, there is also a representation for a pair of\n /// primitive values (`ByValPair`). It allows Miri to avoid making allocations for checked binary\n /// operations and fat pointers. This idea was taken from rustc's trans.\n-#[derive(Clone, Copy, Debug, PartialEq)]\n+#[derive(Clone, Copy, Debug)]\n enum Value {\n     ByRef(Pointer),\n     ByVal(PrimVal),"}, {"sha": "6636e2b854fe9bc2a1c54c0974b194ed6ca758c5", "filename": "src/interpreter/terminator.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c1ae916a64395755a937fa4374f74093b1549221/src%2Finterpreter%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ae916a64395755a937fa4374f74093b1549221/src%2Finterpreter%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator.rs?ref=c1ae916a64395755a937fa4374f74093b1549221", "patch": "@@ -91,8 +91,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let func_ty = self.operand_ty(func);\n                 match func_ty.sty {\n                     ty::TyFnPtr(bare_fn_ty) => {\n-                        let ptr = self.eval_operand_to_ptr(func)?;\n-                        let fn_ptr = self.memory.read_ptr(ptr)?;\n+                        let fn_ptr = self.eval_operand_to_primval(func)?\n+                            .expect_fn_ptr(\"TyFnPtr callee did not evaluate to PrimVal::FnPtr\");\n                         let (def_id, substs, fn_ty) = self.memory.get_fn(fn_ptr.alloc_id)?;\n                         if fn_ty != bare_fn_ty {\n                             return Err(EvalError::FunctionPointerTyMismatch(fn_ty, bare_fn_ty));\n@@ -124,13 +124,16 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 } else {\n                     return match *msg {\n                         mir::AssertMessage::BoundsCheck { ref len, ref index } => {\n-                            let len = self.eval_operand_to_ptr(len).expect(\"can't eval len\");\n-                            let len = self.memory.read_usize(len).expect(\"can't read len\");\n-                            let index = self.eval_operand_to_ptr(index).expect(\"can't eval index\");\n-                            let index = self.memory.read_usize(index).expect(\"can't read index\");\n-                            Err(EvalError::ArrayIndexOutOfBounds(terminator.source_info.span, len, index))\n+                            let span = terminator.source_info.span;\n+                            let len = self.eval_operand_to_primval(len).expect(\"can't eval len\")\n+                                .expect_uint(\"BoundsCheck len wasn't a uint\");\n+                            let index = self.eval_operand_to_primval(index)\n+                                .expect(\"can't eval index\")\n+                                .expect_uint(\"BoundsCheck index wasn't a uint\");\n+                            Err(EvalError::ArrayIndexOutOfBounds(span, len, index))\n                         },\n-                        mir::AssertMessage::Math(ref err) => Err(EvalError::Math(terminator.source_info.span, err.clone())),\n+                        mir::AssertMessage::Math(ref err) =>\n+                            Err(EvalError::Math(terminator.source_info.span, err.clone())),\n                     }\n                 }\n             },"}, {"sha": "d75b7879c375cc9d20fc5221e69657ffd14c9cc3", "filename": "src/primval.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c1ae916a64395755a937fa4374f74093b1549221/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ae916a64395755a937fa4374f74093b1549221/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=c1ae916a64395755a937fa4374f74093b1549221", "patch": "@@ -20,10 +20,28 @@ pub enum PrimVal {\n     F32(f32), F64(f64),\n }\n \n+macro_rules! declare_expect_fn {\n+    ($name:ident, $variant:ident, $t:ty) => (\n+        pub fn $name(self, error_msg: &str) -> $t {\n+            match self {\n+                PrimVal::$variant(x) => x,\n+                _ => bug!(\"{}\", error_msg),\n+            }\n+        }\n+    );\n+}\n+\n impl PrimVal {\n-    pub fn expect_bool(self, error_msg: &str) -> bool {\n+    declare_expect_fn!(expect_bool, Bool, bool);\n+    declare_expect_fn!(expect_fn_ptr, FnPtr, Pointer);\n+\n+    pub fn expect_uint(self, error_msg: &str) -> u64 {\n+        use self::PrimVal::*;\n         match self {\n-            PrimVal::Bool(b) => b,\n+            U8(u)  => u as u64,\n+            U16(u) => u as u64,\n+            U32(u) => u as u64,\n+            U64(u) => u,\n             _ => bug!(\"{}\", error_msg),\n         }\n     }"}]}