{"sha": "b7e25ba854a5ca0f1dee7082c113170876358632", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZTI1YmE4NTRhNWNhMGYxZGVlNzA4MmMxMTMxNzA4NzYzNTg2MzI=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-27T15:55:54Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-27T15:55:54Z"}, "message": "Improve perf of finding unsafe exprs", "tree": {"sha": "36ffee1ed6acbc5b6669b78d8332b7119bb3ff5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36ffee1ed6acbc5b6669b78d8332b7119bb3ff5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7e25ba854a5ca0f1dee7082c113170876358632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e25ba854a5ca0f1dee7082c113170876358632", "html_url": "https://github.com/rust-lang/rust/commit/b7e25ba854a5ca0f1dee7082c113170876358632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7e25ba854a5ca0f1dee7082c113170876358632/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1992b469cae689f7de01ea9031962735a409198", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1992b469cae689f7de01ea9031962735a409198", "html_url": "https://github.com/rust-lang/rust/commit/b1992b469cae689f7de01ea9031962735a409198"}], "stats": {"total": 88, "additions": 39, "deletions": 49}, "files": [{"sha": "aad13d99cc004eec97951993817432e38857ce77", "filename": "crates/ra_hir_ty/src/unsafe_validation.rs", "status": "modified", "additions": 39, "deletions": 49, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/b7e25ba854a5ca0f1dee7082c113170876358632/crates%2Fra_hir_ty%2Fsrc%2Funsafe_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e25ba854a5ca0f1dee7082c113170876358632/crates%2Fra_hir_ty%2Fsrc%2Funsafe_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Funsafe_validation.rs?ref=b7e25ba854a5ca0f1dee7082c113170876358632", "patch": "@@ -60,72 +60,62 @@ pub struct UnsafeExpr {\n     pub inside_unsafe_block: bool,\n }\n \n-impl UnsafeExpr {\n-    fn new(expr: ExprId) -> Self {\n-        Self { expr, inside_unsafe_block: false }\n-    }\n-}\n-\n pub fn unsafe_expressions(\n     db: &dyn HirDatabase,\n     infer: &InferenceResult,\n     def: DefWithBodyId,\n ) -> Vec<UnsafeExpr> {\n     let mut unsafe_exprs = vec![];\n     let body = db.body(def);\n-    for (id, expr) in body.exprs.iter() {\n-        match expr {\n-            Expr::Call { callee, .. } => {\n-                let ty = &infer[*callee];\n-                if let &Ty::Apply(ApplicationTy {\n-                    ctor: TypeCtor::FnDef(CallableDef::FunctionId(func)),\n-                    ..\n-                }) = ty\n-                {\n-                    if db.function_data(func).is_unsafe {\n-                        unsafe_exprs.push(UnsafeExpr::new(id));\n-                    }\n+    walk_unsafe(&mut unsafe_exprs, db, infer, &body, body.body_expr, false);\n+\n+    unsafe_exprs\n+}\n+\n+fn walk_unsafe(\n+    unsafe_exprs: &mut Vec<UnsafeExpr>,\n+    db: &dyn HirDatabase,\n+    infer: &InferenceResult,\n+    body: &Body,\n+    current: ExprId,\n+    inside_unsafe_block: bool,\n+) {\n+    let expr = &body.exprs[current];\n+    match expr {\n+        Expr::Call { callee, .. } => {\n+            let ty = &infer[*callee];\n+            if let &Ty::Apply(ApplicationTy {\n+                ctor: TypeCtor::FnDef(CallableDef::FunctionId(func)),\n+                ..\n+            }) = ty\n+            {\n+                if db.function_data(func).is_unsafe {\n+                    unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n                 }\n             }\n-            Expr::MethodCall { .. } => {\n-                if infer\n-                    .method_resolution(id)\n-                    .map(|func| db.function_data(func).is_unsafe)\n-                    .unwrap_or(false)\n-                {\n-                    unsafe_exprs.push(UnsafeExpr::new(id));\n-                }\n+        }\n+        Expr::MethodCall { .. } => {\n+            if infer\n+                .method_resolution(current)\n+                .map(|func| db.function_data(func).is_unsafe)\n+                .unwrap_or(false)\n+            {\n+                unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n             }\n-            Expr::UnaryOp { expr, op: UnaryOp::Deref } => {\n-                if let Ty::Apply(ApplicationTy { ctor: TypeCtor::RawPtr(..), .. }) = &infer[*expr] {\n-                    unsafe_exprs.push(UnsafeExpr::new(id));\n-                }\n+        }\n+        Expr::UnaryOp { expr, op: UnaryOp::Deref } => {\n+            if let Ty::Apply(ApplicationTy { ctor: TypeCtor::RawPtr(..), .. }) = &infer[*expr] {\n+                unsafe_exprs.push(UnsafeExpr { expr: current, inside_unsafe_block });\n             }\n-            _ => {}\n         }\n+        _ => {}\n     }\n \n-    for unsafe_expr in &mut unsafe_exprs {\n-        unsafe_expr.inside_unsafe_block =\n-            is_in_unsafe(&body, body.body_expr, unsafe_expr.expr, false);\n-    }\n-\n-    unsafe_exprs\n-}\n-\n-fn is_in_unsafe(body: &Body, current: ExprId, needle: ExprId, within_unsafe: bool) -> bool {\n-    if current == needle {\n-        return within_unsafe;\n-    }\n-\n-    let expr = &body.exprs[current];\n     if let &Expr::Unsafe { body: child } = expr {\n-        return is_in_unsafe(body, child, needle, true);\n+        return walk_unsafe(unsafe_exprs, db, infer, body, child, true);\n     }\n \n-    let mut found = false;\n     expr.walk_child_exprs(|child| {\n-        found = found || is_in_unsafe(body, child, needle, within_unsafe);\n+        walk_unsafe(unsafe_exprs, db, infer, body, child, inside_unsafe_block);\n     });\n-    found\n }"}]}