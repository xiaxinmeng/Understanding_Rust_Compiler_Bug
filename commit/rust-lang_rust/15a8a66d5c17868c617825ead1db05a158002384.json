{"sha": "15a8a66d5c17868c617825ead1db05a158002384", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YThhNjZkNWMxNzg2OGM2MTc4MjVlYWQxZGIwNWExNTgwMDIzODQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-14T14:40:17Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-14T18:44:19Z"}, "message": "Lint the use of async as an identifier", "tree": {"sha": "2b429b6fea926b5f44e05e153f7dfc6436f8fcf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b429b6fea926b5f44e05e153f7dfc6436f8fcf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15a8a66d5c17868c617825ead1db05a158002384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15a8a66d5c17868c617825ead1db05a158002384", "html_url": "https://github.com/rust-lang/rust/commit/15a8a66d5c17868c617825ead1db05a158002384", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15a8a66d5c17868c617825ead1db05a158002384/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22d21b1575c0686c17381ed056558fd12599f715", "url": "https://api.github.com/repos/rust-lang/rust/commits/22d21b1575c0686c17381ed056558fd12599f715", "html_url": "https://github.com/rust-lang/rust/commit/22d21b1575c0686c17381ed056558fd12599f715"}], "stats": {"total": 404, "additions": 297, "deletions": 107}, "files": [{"sha": "610ed681827eac892d67cda780cb3e9845474e67", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 93, "deletions": 83, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/15a8a66d5c17868c617825ead1db05a158002384/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a8a66d5c17868c617825ead1db05a158002384/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=15a8a66d5c17868c617825ead1db05a158002384", "patch": "@@ -27,7 +27,7 @@\n use self::TargetLint::*;\n \n use std::slice;\n-use rustc_data_structures::sync::{RwLock, ReadGuard};\n+use rustc_data_structures::sync::ReadGuard;\n use lint::{EarlyLintPassObject, LateLintPassObject};\n use lint::{Level, Lint, LintId, LintPass, LintBuffer};\n use lint::builtin::BuiltinLintDiagnostics;\n@@ -59,8 +59,8 @@ pub struct LintStore {\n     lints: Vec<(&'static Lint, bool)>,\n \n     /// Trait objects for each lint pass.\n-    /// This is only `None` while performing a lint pass. See the definition\n-    /// of `LintSession::new`.\n+    /// This is only `None` while performing a lint pass.\n+    pre_expansion_passes: Option<Vec<EarlyLintPassObject>>,\n     early_passes: Option<Vec<EarlyLintPassObject>>,\n     late_passes: Option<Vec<LateLintPassObject>>,\n \n@@ -139,6 +139,7 @@ impl LintStore {\n     pub fn new() -> LintStore {\n         LintStore {\n             lints: vec![],\n+            pre_expansion_passes: Some(vec![]),\n             early_passes: Some(vec![]),\n             late_passes: Some(vec![]),\n             by_name: FxHashMap(),\n@@ -165,6 +166,15 @@ impl LintStore {\n         self.early_passes.as_mut().unwrap().push(pass);\n     }\n \n+    pub fn register_pre_expansion_pass(\n+        &mut self,\n+        sess: Option<&Session>,\n+        pass: EarlyLintPassObject,\n+    ) {\n+        self.push_pass(sess, false, &pass);\n+        self.pre_expansion_passes.as_mut().unwrap().push(pass);\n+    }\n+\n     pub fn register_late_pass(&mut self,\n                               sess: Option<&Session>,\n                               from_plugin: bool,\n@@ -332,28 +342,6 @@ impl LintStore {\n     }\n }\n \n-impl<'a, PassObject: LintPassObject> LintSession<'a, PassObject> {\n-    /// Creates a new `LintSession`, by moving out the `LintStore`'s initial\n-    /// lint levels and pass objects. These can be restored using the `restore`\n-    /// method.\n-    fn new(store: &'a RwLock<LintStore>) -> LintSession<'a, PassObject> {\n-        let mut s = store.borrow_mut();\n-        let passes = PassObject::take_passes(&mut *s);\n-        drop(s);\n-        LintSession {\n-            lints: store.borrow(),\n-            passes,\n-        }\n-    }\n-\n-    /// Restores the levels back to the original lint store.\n-    fn restore(self, store: &RwLock<LintStore>) {\n-        drop(self.lints);\n-        let mut s = store.borrow_mut();\n-        PassObject::restore_passes(&mut *s, self.passes);\n-    }\n-}\n-\n /// Context for lint checking after type checking.\n pub struct LateContext<'a, 'tcx: 'a> {\n     /// Type context we're checking in.\n@@ -405,30 +393,11 @@ macro_rules! run_lints { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.lint_sess_mut().passes = Some(passes);\n }) }\n \n-pub trait LintPassObject: Sized {\n-    fn take_passes(store: &mut LintStore) -> Option<Vec<Self>>;\n-    fn restore_passes(store: &mut LintStore, passes: Option<Vec<Self>>);\n-}\n-\n-impl LintPassObject for EarlyLintPassObject {\n-    fn take_passes(store: &mut LintStore) -> Option<Vec<Self>> {\n-        store.early_passes.take()\n-    }\n+pub trait LintPassObject: Sized {}\n \n-    fn restore_passes(store: &mut LintStore, passes: Option<Vec<Self>>) {\n-        store.early_passes = passes;\n-    }\n-}\n-\n-impl LintPassObject for LateLintPassObject {\n-    fn take_passes(store: &mut LintStore) -> Option<Vec<Self>> {\n-        store.late_passes.take()\n-    }\n+impl LintPassObject for EarlyLintPassObject {}\n \n-    fn restore_passes(store: &mut LintStore, passes: Option<Vec<Self>>) {\n-        store.late_passes = passes;\n-    }\n-}\n+impl LintPassObject for LateLintPassObject {}\n \n \n pub trait LintContext<'tcx>: Sized {\n@@ -515,14 +484,21 @@ pub trait LintContext<'tcx>: Sized {\n \n \n impl<'a> EarlyContext<'a> {\n-    fn new(sess: &'a Session,\n-           krate: &'a ast::Crate) -> EarlyContext<'a> {\n+    fn new(\n+        sess: &'a Session,\n+        krate: &'a ast::Crate,\n+        passes: Option<Vec<EarlyLintPassObject>>,\n+        buffered: LintBuffer,\n+    ) -> EarlyContext<'a> {\n         EarlyContext {\n             sess,\n             krate,\n-            lint_sess: LintSession::new(&sess.lint_store),\n+            lint_sess: LintSession {\n+                lints: sess.lint_store.borrow(),\n+                passes,\n+            },\n             builder: LintLevelSets::builder(sess),\n-            buffered: sess.buffered_lints.borrow_mut().take().unwrap(),\n+            buffered,\n         }\n     }\n \n@@ -1041,9 +1017,14 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n         run_lints!(self, check_attribute, attr);\n     }\n \n-    fn visit_mac_def(&mut self, _mac: &'a ast::MacroDef, id: ast::NodeId) {\n+    fn visit_mac_def(&mut self, mac: &'a ast::MacroDef, id: ast::NodeId) {\n+        run_lints!(self, check_mac_def, mac, id);\n         self.check_id(id);\n     }\n+\n+    fn visit_mac(&mut self, mac: &'ast ast::Mac) {\n+        run_lints!(self, check_mac, mac);\n+    }\n }\n \n \n@@ -1054,48 +1035,77 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     let krate = tcx.hir.krate();\n+    let passes = tcx.sess.lint_store.borrow_mut().late_passes.take();\n+\n+    let passes = {\n+        let mut cx = LateContext {\n+            tcx,\n+            tables: &ty::TypeckTables::empty(None),\n+            param_env: ty::ParamEnv::empty(),\n+            access_levels,\n+            lint_sess: LintSession {\n+                passes,\n+                lints: tcx.sess.lint_store.borrow(),\n+            },\n+            last_ast_node_with_lint_attrs: ast::CRATE_NODE_ID,\n+            generics: None,\n+        };\n \n-    let mut cx = LateContext {\n-        tcx,\n-        tables: &ty::TypeckTables::empty(None),\n-        param_env: ty::ParamEnv::empty(),\n-        access_levels,\n-        lint_sess: LintSession::new(&tcx.sess.lint_store),\n-        last_ast_node_with_lint_attrs: ast::CRATE_NODE_ID,\n-        generics: None,\n-    };\n-\n-    // Visit the whole crate.\n-    cx.with_lint_attrs(ast::CRATE_NODE_ID, &krate.attrs, |cx| {\n-        // since the root module isn't visited as an item (because it isn't an\n-        // item), warn for it here.\n-        run_lints!(cx, check_crate, krate);\n+        // Visit the whole crate.\n+        cx.with_lint_attrs(ast::CRATE_NODE_ID, &krate.attrs, |cx| {\n+            // since the root module isn't visited as an item (because it isn't an\n+            // item), warn for it here.\n+            run_lints!(cx, check_crate, krate);\n \n-        hir_visit::walk_crate(cx, krate);\n+            hir_visit::walk_crate(cx, krate);\n \n-        run_lints!(cx, check_crate_post, krate);\n-    });\n+            run_lints!(cx, check_crate_post, krate);\n+        });\n+        cx.lint_sess.passes\n+    };\n \n     // Put the lint store levels and passes back in the session.\n-    cx.lint_sess.restore(&tcx.sess.lint_store);\n+    tcx.sess.lint_store.borrow_mut().late_passes = passes;\n }\n \n-pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n-    let mut cx = EarlyContext::new(sess, krate);\n+pub fn check_ast_crate(\n+    sess: &Session,\n+    krate: &ast::Crate,\n+    pre_expansion: bool,\n+) {\n+    let (passes, buffered) = if pre_expansion {\n+        (\n+            sess.lint_store.borrow_mut().pre_expansion_passes.take(),\n+            LintBuffer::new(),\n+        )\n+    } else {\n+        (\n+            sess.lint_store.borrow_mut().early_passes.take(),\n+            sess.buffered_lints.borrow_mut().take().unwrap(),\n+        )\n+    };\n+    let (passes, buffered) = {\n+        let mut cx = EarlyContext::new(sess, krate, passes, buffered);\n \n-    // Visit the whole crate.\n-    cx.with_lint_attrs(ast::CRATE_NODE_ID, &krate.attrs, |cx| {\n-        // since the root module isn't visited as an item (because it isn't an\n-        // item), warn for it here.\n-        run_lints!(cx, check_crate, krate);\n+        // Visit the whole crate.\n+        cx.with_lint_attrs(ast::CRATE_NODE_ID, &krate.attrs, |cx| {\n+            // since the root module isn't visited as an item (because it isn't an\n+            // item), warn for it here.\n+            run_lints!(cx, check_crate, krate);\n \n-        ast_visit::walk_crate(cx, krate);\n+            ast_visit::walk_crate(cx, krate);\n \n-        run_lints!(cx, check_crate_post, krate);\n-    });\n+            run_lints!(cx, check_crate_post, krate);\n+        });\n+        (cx.lint_sess.passes, cx.buffered)\n+    };\n \n     // Put the lint store levels and passes back in the session.\n-    cx.lint_sess.restore(&sess.lint_store);\n+    if pre_expansion {\n+        sess.lint_store.borrow_mut().pre_expansion_passes = passes;\n+    } else {\n+        sess.lint_store.borrow_mut().early_passes = passes;\n+    }\n \n     // All of the buffered lints should have been emitted at this point.\n     // If not, that means that we somehow buffered a lint for a node id\n@@ -1107,7 +1117,7 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n     // unused_macro lint) anymore. So we only run this check\n     // when we're not in rustdoc mode. (see issue #47639)\n     if !sess.opts.actually_rustdoc {\n-        for (_id, lints) in cx.buffered.map {\n+        for (_id, lints) in buffered.map {\n             for early_lint in lints {\n                 sess.delay_span_bug(early_lint.span, \"failed to process buffered lint here\");\n             }"}, {"sha": "e3d35a7c105eab9b792a18c1c211401b9af675a2", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15a8a66d5c17868c617825ead1db05a158002384/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a8a66d5c17868c617825ead1db05a158002384/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=15a8a66d5c17868c617825ead1db05a158002384", "patch": "@@ -327,6 +327,8 @@ pub trait EarlyLintPass: LintPass {\n     fn check_lifetime(&mut self, _: &EarlyContext, _: &ast::Lifetime) { }\n     fn check_path(&mut self, _: &EarlyContext, _: &ast::Path, _: ast::NodeId) { }\n     fn check_attribute(&mut self, _: &EarlyContext, _: &ast::Attribute) { }\n+    fn check_mac_def(&mut self, _: &EarlyContext, _: &ast::MacroDef, _id: ast::NodeId) { }\n+    fn check_mac(&mut self, _: &EarlyContext, _: &ast::Mac) { }\n \n     /// Called when entering a syntax node that can have lint attributes such\n     /// as `#[allow(...)]`. Called with *all* the attributes of that node.\n@@ -341,6 +343,8 @@ pub type EarlyLintPassObject = Box<dyn EarlyLintPass + sync::Send + sync::Sync +\n pub type LateLintPassObject = Box<dyn for<'a, 'tcx> LateLintPass<'a, 'tcx> + sync::Send\n                                                                            + sync::Sync + 'static>;\n \n+\n+\n /// Identifies a lint known to the compiler.\n #[derive(Clone, Copy, Debug)]\n pub struct LintId {"}, {"sha": "349e00bfd90d4dc1861e130fd0e8405b8af14a21", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15a8a66d5c17868c617825ead1db05a158002384/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a8a66d5c17868c617825ead1db05a158002384/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=15a8a66d5c17868c617825ead1db05a158002384", "patch": "@@ -922,6 +922,10 @@ where\n         return Err(CompileIncomplete::Stopped);\n     }\n \n+    time(sess, \"pre ast expansion lint checks\", || {\n+        lint::check_ast_crate(sess, &krate, true)\n+    });\n+\n     let mut resolver = Resolver::new(\n         sess,\n         cstore,\n@@ -1134,7 +1138,7 @@ where\n     });\n \n     time(sess, \"early lint checks\", || {\n-        lint::check_ast_crate(sess, &krate)\n+        lint::check_ast_crate(sess, &krate, false)\n     });\n \n     // Discard hygiene data, which isn't required after lowering to HIR."}, {"sha": "6950166a5cd94376dffbce439e509a023e115329", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/15a8a66d5c17868c617825ead1db05a158002384/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a8a66d5c17868c617825ead1db05a158002384/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=15a8a66d5c17868c617825ead1db05a158002384", "patch": "@@ -41,6 +41,7 @@ use lint::{LintPass, LateLintPass, EarlyLintPass, EarlyContext};\n \n use std::collections::HashSet;\n \n+use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap::Spanned;\n@@ -1784,3 +1785,70 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnameableTestFunctions {\n         };\n     }\n }\n+\n+declare_lint! {\n+    pub ASYNC_IDENTS,\n+    Allow,\n+    \"detects `async` being used as an identifier\"\n+}\n+\n+/// Checks for uses of `async` as an identifier\n+#[derive(Clone)]\n+pub struct Async2018;\n+\n+impl LintPass for Async2018 {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!()\n+    }\n+}\n+\n+impl Async2018 {\n+    fn check_tokens(&mut self, cx: &EarlyContext, tokens: TokenStream) {\n+        for tt in tokens.into_trees() {\n+            match tt {\n+                TokenTree::Token(span, tok) => match tok.ident() {\n+                    // only report non-raw idents\n+                    Some((ident, false)) if ident.as_str() == \"async\" => {\n+                        self.report(cx, span.substitute_dummy(ident.span))\n+                    },\n+                    _ => {},\n+                }\n+                TokenTree::Delimited(_, ref delim) => {\n+                    self.check_tokens(cx, delim.tts.clone().into())\n+                },\n+            }\n+        }\n+    }\n+    fn report(&mut self, cx: &EarlyContext, span: Span) {\n+        // don't lint `r#async`\n+        if cx.sess.parse_sess.raw_identifier_spans.borrow().contains(&span) {\n+            return;\n+        }\n+        let mut lint = cx.struct_span_lint(\n+            ASYNC_IDENTS,\n+            span,\n+            \"`async` is a keyword in the 2018 edition\",\n+        );\n+        lint.span_suggestion_with_applicability(\n+            span,\n+            \"you can use a raw identifier to stay compatible\",\n+            \"r#async\".to_string(),\n+            Applicability::MachineApplicable,\n+        );\n+        lint.emit()\n+    }\n+}\n+\n+impl EarlyLintPass for Async2018 {\n+    fn check_mac_def(&mut self, cx: &EarlyContext, mac_def: &ast::MacroDef, _id: ast::NodeId) {\n+        self.check_tokens(cx, mac_def.stream());\n+    }\n+    fn check_mac(&mut self, cx: &EarlyContext, mac: &ast::Mac) {\n+        self.check_tokens(cx, mac.node.tts.clone().into());\n+    }\n+    fn check_ident(&mut self, cx: &EarlyContext, ident: ast::Ident) {\n+        if ident.as_str() == \"async\" {\n+            self.report(cx, ident.span);\n+        }\n+    }\n+}"}, {"sha": "399725c0023f866ca7e451ffa7223eb027d7c559", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/15a8a66d5c17868c617825ead1db05a158002384/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a8a66d5c17868c617825ead1db05a158002384/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=15a8a66d5c17868c617825ead1db05a158002384", "patch": "@@ -80,6 +80,14 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             )\n     }\n \n+    macro_rules! add_pre_expansion_builtin {\n+        ($sess:ident, $($name:ident),*,) => (\n+            {$(\n+                store.register_early_pass($sess, false, box $name);\n+                )*}\n+            )\n+    }\n+\n     macro_rules! add_early_builtin_with_new {\n         ($sess:ident, $($name:ident),*,) => (\n             {$(\n@@ -94,6 +102,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             )\n     }\n \n+    add_pre_expansion_builtin!(sess,\n+        Async2018,\n+    );\n+\n     add_early_builtin!(sess,\n                        UnusedParens,\n                        UnusedImportBraces,\n@@ -177,6 +189,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     add_lint_group!(sess,\n                     \"rust_2018_idioms\",\n                     BARE_TRAIT_OBJECTS,\n+                    ASYNC_IDENTS,\n                     UNREACHABLE_PUB,\n                     UNUSED_EXTERN_CRATES,\n                     ELLIPSIS_INCLUSIVE_RANGE_PATTERNS);"}, {"sha": "56d4a86096f6819a2e7b35f37fa85a3af681c17c", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-attrs.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15a8a66d5c17868c617825ead1db05a158002384/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a8a66d5c17868c617825ead1db05a158002384/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr?ref=15a8a66d5c17868c617825ead1db05a158002384", "patch": "@@ -1,3 +1,12 @@\n+error[E0453]: allow(test_lint) overruled by outer forbid(test_lint)\n+  --> $DIR/lint-plugin-forbid-attrs.rs:20:9\n+   |\n+LL | #![forbid(test_lint)]\n+   |           --------- `forbid` level set here\n+...\n+LL | #[allow(test_lint)]\n+   |         ^^^^^^^^^ overruled by previous forbid\n+\n error: item is named 'lintme'\n   --> $DIR/lint-plugin-forbid-attrs.rs:18:1\n    |\n@@ -10,15 +19,6 @@ note: lint level defined here\n LL | #![forbid(test_lint)]\n    |           ^^^^^^^^^\n \n-error[E0453]: allow(test_lint) overruled by outer forbid(test_lint)\n-  --> $DIR/lint-plugin-forbid-attrs.rs:20:9\n-   |\n-LL | #![forbid(test_lint)]\n-   |           --------- `forbid` level set here\n-...\n-LL | #[allow(test_lint)]\n-   |         ^^^^^^^^^ overruled by previous forbid\n-\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0453`."}, {"sha": "2dbe9831014666f81eb9eb0ca9331b136e523a8e", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/15a8a66d5c17868c617825ead1db05a158002384/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a8a66d5c17868c617825ead1db05a158002384/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=15a8a66d5c17868c617825ead1db05a158002384", "patch": "@@ -1,17 +1,3 @@\n-warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:500:1\n-   |\n-LL | #[macro_escape]\n-   | ^^^^^^^^^^^^^^^\n-\n-warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:503:17\n-   |\n-LL |     mod inner { #![macro_escape] }\n-   |                 ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider an outer attribute, #[macro_use] mod ...\n-\n warning: unknown lint: `x5400`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:49:33\n    |\n@@ -186,6 +172,20 @@ warning: unknown lint: `x5100`\n LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n+warning: macro_escape is a deprecated synonym for macro_use\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:500:1\n+   |\n+LL | #[macro_escape]\n+   | ^^^^^^^^^^^^^^^\n+\n+warning: macro_escape is a deprecated synonym for macro_use\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:503:17\n+   |\n+LL |     mod inner { #![macro_escape] }\n+   |                 ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider an outer attribute, #[macro_use] mod ...\n+\n warning: `repr` attribute isn't configurable with a literal\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:316:17\n    |"}, {"sha": "8ede6c07bf8b9ad400fb5ecf9e70362776b6cae5", "filename": "src/test/ui/rust-2018/async-ident.fixed", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/15a8a66d5c17868c617825ead1db05a158002384/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/15a8a66d5c17868c617825ead1db05a158002384/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.fixed?ref=15a8a66d5c17868c617825ead1db05a158002384", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(raw_identifiers)]\n+#![deny(rust_2018_idioms)]\n+#![allow(dead_code)]\n+\n+// run-rustfix\n+\n+fn r#async() {} //~ ERROR async\n+\n+macro_rules! foo {\n+    ($foo:ident) => {};\n+    ($r#async:expr, r#async) => {};\n+    //~^ ERROR async\n+    //~| ERROR async\n+}\n+\n+foo!(async);\n+\n+mod dont_lint_raw {\n+    fn r#async() {}\n+}\n+\n+fn main() {}"}, {"sha": "6e529ec0229d17174525602a644e83c2de513a4c", "filename": "src/test/ui/rust-2018/async-ident.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/15a8a66d5c17868c617825ead1db05a158002384/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15a8a66d5c17868c617825ead1db05a158002384/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.rs?ref=15a8a66d5c17868c617825ead1db05a158002384", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(raw_identifiers)]\n+#![deny(rust_2018_idioms)]\n+#![allow(dead_code)]\n+\n+// run-rustfix\n+\n+fn async() {} //~ ERROR async\n+\n+macro_rules! foo {\n+    ($foo:ident) => {};\n+    ($async:expr, async) => {};\n+    //~^ ERROR async\n+    //~| ERROR async\n+}\n+\n+foo!(async);\n+\n+mod dont_lint_raw {\n+    fn r#async() {}\n+}\n+\n+fn main() {}"}, {"sha": "22a3e1aedcc3a20277a8e65e53c9a26b7157672c", "filename": "src/test/ui/rust-2018/async-ident.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/15a8a66d5c17868c617825ead1db05a158002384/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/15a8a66d5c17868c617825ead1db05a158002384/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fasync-ident.stderr?ref=15a8a66d5c17868c617825ead1db05a158002384", "patch": "@@ -0,0 +1,27 @@\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:17:4\n+   |\n+LL | fn async() {} //~ ERROR async\n+   |    ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+   |\n+note: lint level defined here\n+  --> $DIR/async-ident.rs:12:9\n+   |\n+LL | #![deny(rust_2018_idioms)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: #[deny(async_idents)] implied by #[deny(rust_2018_idioms)]\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:21:7\n+   |\n+LL |     ($async:expr, async) => {};\n+   |       ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+\n+error: `async` is a keyword in the 2018 edition\n+  --> $DIR/async-ident.rs:21:19\n+   |\n+LL |     ($async:expr, async) => {};\n+   |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#async`\n+\n+error: aborting due to 3 previous errors\n+"}]}