{"sha": "11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZTliYzYwYTJkOWMyMmRiZjUxYjdlMWFhM2Q2ZTMwYTcwMDZhMzU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-16T17:57:47Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-16T17:57:47Z"}, "message": "Move doc-comment highlight injection from AST to HIR", "tree": {"sha": "c45f80a838b17f45ec87282fa4377b35da284096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c45f80a838b17f45ec87282fa4377b35da284096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35", "html_url": "https://github.com/rust-lang/rust/commit/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a69f7ce312ba04acbca970a61d9576d520dacb2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a69f7ce312ba04acbca970a61d9576d520dacb2e", "html_url": "https://github.com/rust-lang/rust/commit/a69f7ce312ba04acbca970a61d9576d520dacb2e"}], "stats": {"total": 81, "additions": 63, "deletions": 18}, "files": [{"sha": "505fc05e71bd2ad767814734a0a956da00440404", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35", "patch": "@@ -11,8 +11,8 @@ use hir_ty::db::HirDatabase;\n use syntax::ast;\n \n use crate::{\n-    Adt, Const, ConstParam, Enum, Field, Function, GenericParam, LifetimeParam, MacroDef, Module,\n-    ModuleDef, Static, Struct, Trait, TypeAlias, TypeParam, Union, Variant,\n+    Adt, Const, ConstParam, Enum, Field, Function, GenericParam, Impl, LifetimeParam, MacroDef,\n+    Module, ModuleDef, Static, Struct, Trait, TypeAlias, TypeParam, Union, Variant,\n };\n \n pub trait HasAttrs {\n@@ -64,6 +64,7 @@ impl_has_attrs![\n     (Adt, AdtId),\n     (Module, ModuleId),\n     (GenericParam, GenericParamId),\n+    (Impl, ImplId),\n ];\n \n macro_rules! impl_has_attrs_enum {"}, {"sha": "c7e0d0be3afcc44ad049e4e03ee81182c678a814", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35", "patch": "@@ -752,6 +752,7 @@ macro_rules! to_def_impls {\n \n to_def_impls![\n     (crate::Module, ast::Module, module_to_def),\n+    (crate::Module, ast::SourceFile, source_file_to_def),\n     (crate::Struct, ast::Struct, struct_to_def),\n     (crate::Enum, ast::Enum, enum_to_def),\n     (crate::Union, ast::Union, union_to_def),"}, {"sha": "c6ad5ecb5fb7fd558a0d8a718e6fd8a87b37bec1", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35", "patch": "@@ -71,6 +71,12 @@ impl SourceToDefCtx<'_, '_> {\n         Some(def_map.module_id(child_id))\n     }\n \n+    pub(super) fn source_file_to_def(&mut self, src: InFile<ast::SourceFile>) -> Option<ModuleId> {\n+        let _p = profile::span(\"source_file_to_def\");\n+        let file_id = src.file_id.original_file(self.db.upcast());\n+        self.file_to_def(file_id).get(0).copied()\n+    }\n+\n     pub(super) fn trait_to_def(&mut self, src: InFile<ast::Trait>) -> Option<TraitId> {\n         self.to_def(src, keys::TRAIT)\n     }"}, {"sha": "505c4cd17cd6752435ae4a4261e199472fef4622", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35", "patch": "@@ -475,7 +475,7 @@ impl<'a> AttrQuery<'a> {\n         self.attrs().next().is_some()\n     }\n \n-    pub(crate) fn attrs(self) -> impl Iterator<Item = &'a Attr> {\n+    pub fn attrs(self) -> impl Iterator<Item = &'a Attr> {\n         let key = self.key;\n         self.attrs\n             .iter()"}, {"sha": "ba3447b3a3ebd40f359a1bcb0b23a828dc58311e", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35", "patch": "@@ -150,7 +150,7 @@ fn traverse(\n             WalkEvent::Enter(it) => it,\n             WalkEvent::Leave(it) => {\n                 if let Some(node) = it.as_node() {\n-                    inject::doc_comment(hl, node);\n+                    inject::doc_comment(hl, sema, node);\n                 }\n                 continue;\n             }"}, {"sha": "5b065c09f4db2ebd23a69f959a9197bd3a3fc030", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 51, "deletions": 14, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35", "patch": "@@ -1,8 +1,12 @@\n //! \"Recursive\" Syntax highlighting for code in doctests and fixtures.\n \n-use hir::Semantics;\n+use either::Either;\n+use hir::{HasAttrs, Semantics};\n use ide_db::call_info::ActiveParameter;\n-use syntax::{ast, AstToken, SyntaxNode, SyntaxToken, TextRange, TextSize};\n+use syntax::{\n+    ast::{self, AstNode, AttrsOwner},\n+    match_ast, AstToken, SyntaxNode, SyntaxToken, TextRange, TextSize,\n+};\n \n use crate::{Analysis, HlMod, HlRange, HlTag, RootDatabase};\n \n@@ -81,16 +85,46 @@ const RUSTDOC_FENCE_TOKENS: &[&'static str] = &[\n     \"edition2021\",\n ];\n \n+fn doc_attributes<'node>(\n+    sema: &Semantics<RootDatabase>,\n+    node: &'node SyntaxNode,\n+) -> Option<(Box<dyn AttrsOwner>, hir::Attrs)> {\n+    match_ast! {\n+        match node {\n+            ast::SourceFile(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::Fn(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::Struct(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::Union(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::RecordField(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::TupleField(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::Enum(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::Variant(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::Trait(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::Module(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::Static(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::Const(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::TypeAlias(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::Impl(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::MacroRules(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::MacroRules(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            // ast::MacroDef(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            // ast::Use(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            _ => return None\n+        }\n+    }\n+}\n+\n /// Injection of syntax highlighting of doctests.\n-pub(super) fn doc_comment(hl: &mut Highlights, node: &SyntaxNode) {\n-    let doc_comments = node\n-        .children_with_tokens()\n-        .filter_map(|it| it.into_token().and_then(ast::Comment::cast))\n-        .filter(|it| it.kind().doc.is_some());\n+pub(super) fn doc_comment(hl: &mut Highlights, sema: &Semantics<RootDatabase>, node: &SyntaxNode) {\n+    let (owner, attributes) = match doc_attributes(sema, node) {\n+        Some(it) => it,\n+        None => return,\n+    };\n \n-    if !doc_comments.clone().any(|it| it.text().contains(RUSTDOC_FENCE)) {\n+    if attributes.docs().map_or(true, |docs| !String::from(docs).contains(RUSTDOC_FENCE)) {\n         return;\n     }\n+    let doc_comments = attributes.by_key(\"doc\").attrs().map(|attr| attr.to_src(&*owner));\n \n     let mut inj = Injector::default();\n     inj.add_unmapped(\"fn doctest() {\\n\");\n@@ -102,11 +136,17 @@ pub(super) fn doc_comment(hl: &mut Highlights, node: &SyntaxNode) {\n     // spanning comment ranges.\n     let mut new_comments = Vec::new();\n     for comment in doc_comments {\n-        match comment.text().find(RUSTDOC_FENCE) {\n+        let (line, range, prefix) = match &comment {\n+            Either::Left(_) => continue, // FIXME\n+            Either::Right(comment) => {\n+                (comment.text(), comment.syntax().text_range(), comment.prefix())\n+            }\n+        };\n+        match line.find(RUSTDOC_FENCE) {\n             Some(idx) => {\n                 is_codeblock = !is_codeblock;\n                 // Check whether code is rust by inspecting fence guards\n-                let guards = &comment.text()[idx + RUSTDOC_FENCE.len()..];\n+                let guards = &line[idx + RUSTDOC_FENCE.len()..];\n                 let is_rust =\n                     guards.split(',').all(|sub| RUSTDOC_FENCE_TOKENS.contains(&sub.trim()));\n                 is_doctest = is_codeblock && is_rust;\n@@ -116,10 +156,7 @@ pub(super) fn doc_comment(hl: &mut Highlights, node: &SyntaxNode) {\n             None => (),\n         }\n \n-        let line: &str = comment.text();\n-        let range = comment.syntax().text_range();\n-\n-        let mut pos = TextSize::of(comment.prefix());\n+        let mut pos = TextSize::of(prefix);\n         // whitespace after comment is ignored\n         if let Some(ws) = line[pos.into()..].chars().next().filter(|c| c.is_whitespace()) {\n             pos += TextSize::of(ws);"}]}