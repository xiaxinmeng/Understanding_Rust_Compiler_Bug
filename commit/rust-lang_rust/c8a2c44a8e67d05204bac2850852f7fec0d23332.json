{"sha": "c8a2c44a8e67d05204bac2850852f7fec0d23332", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YTJjNDRhOGU2N2QwNTIwNGJhYzI4NTA4NTJmN2ZlYzBkMjMzMzI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-14T22:17:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-14T22:17:57Z"}, "message": "Expand generic info in lval_result.", "tree": {"sha": "da25ed158c1d5d9ec5e739c99bd92029cce2652f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da25ed158c1d5d9ec5e739c99bd92029cce2652f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8a2c44a8e67d05204bac2850852f7fec0d23332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8a2c44a8e67d05204bac2850852f7fec0d23332", "html_url": "https://github.com/rust-lang/rust/commit/c8a2c44a8e67d05204bac2850852f7fec0d23332", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8a2c44a8e67d05204bac2850852f7fec0d23332/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc416284ac070fcf904cfd900c72610519c40730", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc416284ac070fcf904cfd900c72610519c40730", "html_url": "https://github.com/rust-lang/rust/commit/bc416284ac070fcf904cfd900c72610519c40730"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "2a44f1ebce19de1b0ee752b536ec9f8a5eb820f5", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c8a2c44a8e67d05204bac2850852f7fec0d23332/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a2c44a8e67d05204bac2850852f7fec0d23332/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=c8a2c44a8e67d05204bac2850852f7fec0d23332", "patch": "@@ -1757,22 +1757,25 @@ impure fn trans_alt(@block_ctxt cx, @ast.expr expr, vec[ast.arm] arms)\n     ret res(last_cx, C_nil());\n }\n \n+type generic_info = rec(@ty.t monotype,\n+                        vec[ValueRef] tydescs);\n+\n type lval_result = rec(result res,\n                        bool is_mem,\n-                       option.t[vec[ValueRef]] lltys,\n+                       option.t[generic_info] generic,\n                        option.t[ValueRef] llobj);\n \n fn lval_mem(@block_ctxt cx, ValueRef val) -> lval_result {\n     ret rec(res=res(cx, val),\n             is_mem=true,\n-            lltys=none[vec[ValueRef]],\n+            generic=none[generic_info],\n             llobj=none[ValueRef]);\n }\n \n fn lval_val(@block_ctxt cx, ValueRef val) -> lval_result {\n     ret rec(res=res(cx, val),\n             is_mem=false,\n-            lltys=none[vec[ValueRef]],\n+            generic=none[generic_info],\n             llobj=none[ValueRef]);\n }\n \n@@ -1802,21 +1805,23 @@ fn trans_path(@block_ctxt cx, &ast.path p, &option.t[ast.def] dopt,\n                     check (cx.fcx.ccx.item_ids.contains_key(did));\n \n                     auto fn_item = cx.fcx.ccx.items.get(did);\n+                    auto lv = lval_val(cx, cx.fcx.ccx.fn_pairs.get(did));\n                     auto monoty = node_ann_type(cx.fcx.ccx, ann);\n                     auto tys = ty.resolve_ty_params(fn_item, monoty);\n-                    auto vt = none[vec[ValueRef]];\n \n                     if (_vec.len[@ty.t](tys) != 0u) {\n                         let vec[ValueRef] tydescs = vec();\n                         for (@ty.t t in tys) {\n                             append[ValueRef](tydescs,\n                                              get_tydesc(cx, t));\n                         }\n-                        vt = some[vec[ValueRef]](tydescs);\n+                        auto gen = rec( monotype = monoty,\n+                                        tydescs = tydescs );\n+                        lv = rec(generic = some[generic_info](gen)\n+                                 with lv);\n                     }\n \n-                    auto lv = lval_val(cx, cx.fcx.ccx.fn_pairs.get(did));\n-                    ret rec(lltys = vt with lv);\n+                    ret lv;\n                 }\n                 case (ast.def_obj(?did)) {\n                     check (cx.fcx.ccx.fn_pairs.contains_key(did));\n@@ -1968,7 +1973,7 @@ impure fn trans_cast(@block_ctxt cx, @ast.expr e, &ast.ann ann) -> result {\n impure fn trans_args(@block_ctxt cx,\n                      ValueRef llclosure,\n                      option.t[ValueRef] llobj,\n-                     option.t[vec[ValueRef]] lltydescs,\n+                     option.t[generic_info] gen,\n                      &vec[@ast.expr] es,\n                      @ty.t fn_ty)\n     -> tup(@block_ctxt, vec[ValueRef]) {\n@@ -1981,9 +1986,9 @@ impure fn trans_args(@block_ctxt cx,\n         case (_) { fail; }\n     }\n \n-    alt (lltydescs) {\n-        case (some[vec[ValueRef]](?tys)) {\n-            for (ValueRef t in tys) {\n+    alt (gen) {\n+        case (some[generic_info](?g)) {\n+            for (ValueRef t in g.tydescs) {\n                 vs += t;\n             }\n         }\n@@ -2277,7 +2282,7 @@ impure fn trans_call(@block_ctxt cx, @ast.expr f,\n     auto ret_ty = ty.ann_to_type(ann);\n     auto args_res = trans_args(f_res.res.bcx,\n                                llclosure, f_res.llobj,\n-                               f_res.lltys,\n+                               f_res.generic,\n                                args, fn_ty);\n \n     auto real_retval = args_res._0.build.FastCall(faddr, args_res._1);"}]}