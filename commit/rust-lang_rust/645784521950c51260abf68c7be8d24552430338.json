{"sha": "645784521950c51260abf68c7be8d24552430338", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NTc4NDUyMTk1MGM1MTI2MGFiZjY4YzdiZThkMjQ1NTI0MzAzMzg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-01-22T05:31:17Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-09T04:15:36Z"}, "message": "Absolute bare minimum for downloading rustc from CI\n\n- Use the same compiler for stage0 and stage1. This should be fixed at\n  some point (so bootstrap isn't constantly rebuilt).\n- Make sure `x.py build` and `x.py check` work.\n- Use `git merge-base` to determine the most recent commit to download.\n- Copy stage0 to the various sysroots in `Sysroot`, and delegate to\n  Sysroot in Assemble. Leave all other code unchanged.\n- Rename date -> key\n\n  This can also be a commit hash, so 'date' is no longer a good name.\n\n- Add the commented-out option to config.toml.example\n- Disable all steps by default when `download-rustc` is enabled\n\n  Most steps don't make sense when downloading a compiler, because they'll\n  be pre-built in the sysroot. Only enable the ones that might be useful,\n  in particular Rustdoc and all `check` steps.\n\n  At some point, this should probably enable other tools, but rustdoc is\n  enough to test out `download-rustc`.\n\n- Don't print 'Skipping' twice in a row\n\n  Bootstrap forcibly enables a dry run if it isn't already set, so\n  previously it would print the message twice:\n\n  ```\n  Skipping bootstrap::compile::Std because it is not enabled for `download-rustc`\n  Skipping bootstrap::compile::Std because it is not enabled for `download-rustc`\n  ```\n\n  Now it correctly only prints once.\n\n ## Future work\n\n- Add FIXME about supporting beta commits\n- Debug logging will never work. This should be fixed.", "tree": {"sha": "926908572b07a610f0391bd6a184844f2e5c1a98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/926908572b07a610f0391bd6a184844f2e5c1a98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/645784521950c51260abf68c7be8d24552430338", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/645784521950c51260abf68c7be8d24552430338", "html_url": "https://github.com/rust-lang/rust/commit/645784521950c51260abf68c7be8d24552430338", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/645784521950c51260abf68c7be8d24552430338/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a1d6174c925f54c923599e29b09d6855e6b3a78", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1d6174c925f54c923599e29b09d6855e6b3a78", "html_url": "https://github.com/rust-lang/rust/commit/9a1d6174c925f54c923599e29b09d6855e6b3a78"}], "stats": {"total": 156, "additions": 138, "deletions": 18}, "files": [{"sha": "f3bc98d78aed440be29cafc9607541a03d18b494", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/645784521950c51260abf68c7be8d24552430338/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/645784521950c51260abf68c7be8d24552430338/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=645784521950c51260abf68c7be8d24552430338", "patch": "@@ -358,6 +358,12 @@ changelog-seen = 2\n #\n #debug = false\n \n+# Whether to download the stage 1 and 2 compilers from CI.\n+# This is mostly useful for tools; if you have changes to `compiler/` they will be ignored.\n+#\n+# FIXME: currently, this also uses the downloaded compiler for stage0, but that causes unnecessary rebuilds.\n+#download-rustc = false\n+\n # Number of codegen units to use for each compiler invocation. A value of 0\n # means \"the number of cores on this machine\", and 1+ is passed through to the\n # compiler."}, {"sha": "bd02b8354efa5ddba0b4e8f91ffa2f6fcd67db55", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 78, "deletions": 12, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/645784521950c51260abf68c7be8d24552430338/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/645784521950c51260abf68c7be8d24552430338/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=645784521950c51260abf68c7be8d24552430338", "patch": "@@ -378,6 +378,7 @@ def __init__(self):\n         self.verbose = False\n         self.git_version = None\n         self.nix_deps_dir = None\n+        self.rustc_commit = None\n \n     def download_stage0(self):\n         \"\"\"Fetch the build system for Rust, written in Rust\n@@ -394,20 +395,27 @@ def download_stage0(self):\n \n         if self.rustc().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.rustc()) or\n-                 self.program_out_of_date(self.rustc_stamp(), self.date)):\n+                 self.program_out_of_date(self.rustc_stamp(), self.date + str(self.rustc_commit))):\n             if os.path.exists(self.bin_root()):\n                 shutil.rmtree(self.bin_root())\n+            download_rustc = self.rustc_commit is not None\n             tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n             filename = \"rust-std-{}-{}{}\".format(\n                 rustc_channel, self.build, tarball_suffix)\n             pattern = \"rust-std-{}\".format(self.build)\n-            self._download_stage0_helper(filename, pattern, tarball_suffix)\n+            self._download_component_helper(filename, pattern, tarball_suffix, download_rustc)\n             filename = \"rustc-{}-{}{}\".format(rustc_channel, self.build,\n                                               tarball_suffix)\n-            self._download_stage0_helper(filename, \"rustc\", tarball_suffix)\n+            self._download_component_helper(filename, \"rustc\", tarball_suffix, download_rustc)\n             filename = \"cargo-{}-{}{}\".format(rustc_channel, self.build,\n                                               tarball_suffix)\n-            self._download_stage0_helper(filename, \"cargo\", tarball_suffix)\n+            self._download_component_helper(filename, \"cargo\", tarball_suffix)\n+            if self.rustc_commit is not None:\n+                filename = \"rustc-dev-{}-{}{}\".format(rustc_channel, self.build, tarball_suffix)\n+                self._download_component_helper(\n+                    filename, \"rustc-dev\", tarball_suffix, download_rustc\n+                )\n+\n             self.fix_bin_or_dylib(\"{}/bin/rustc\".format(self.bin_root()))\n             self.fix_bin_or_dylib(\"{}/bin/rustdoc\".format(self.bin_root()))\n             self.fix_bin_or_dylib(\"{}/bin/cargo\".format(self.bin_root()))\n@@ -416,7 +424,7 @@ def download_stage0(self):\n                 if lib.endswith(\".so\"):\n                     self.fix_bin_or_dylib(os.path.join(lib_dir, lib), rpath_libz=True)\n             with output(self.rustc_stamp()) as rust_stamp:\n-                rust_stamp.write(self.date)\n+                rust_stamp.write(self.date + str(self.rustc_commit))\n \n         if self.rustfmt() and self.rustfmt().startswith(self.bin_root()) and (\n             not os.path.exists(self.rustfmt())\n@@ -426,7 +434,9 @@ def download_stage0(self):\n                 tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n                 [channel, date] = rustfmt_channel.split('-', 1)\n                 filename = \"rustfmt-{}-{}{}\".format(channel, self.build, tarball_suffix)\n-                self._download_stage0_helper(filename, \"rustfmt-preview\", tarball_suffix, date)\n+                self._download_component_helper(\n+                    filename, \"rustfmt-preview\", tarball_suffix, key=date\n+                )\n                 self.fix_bin_or_dylib(\"{}/bin/rustfmt\".format(self.bin_root()))\n                 self.fix_bin_or_dylib(\"{}/bin/cargo-fmt\".format(self.bin_root()))\n                 with output(self.rustfmt_stamp()) as rustfmt_stamp:\n@@ -482,18 +492,27 @@ def downloading_llvm(self):\n         return opt == \"true\" \\\n             or (opt == \"if-available\" and self.build in supported_platforms)\n \n-    def _download_stage0_helper(self, filename, pattern, tarball_suffix, date=None):\n-        if date is None:\n-            date = self.date\n+    def _download_component_helper(\n+        self, filename, pattern, tarball_suffix, download_rustc=False, key=None\n+    ):\n+        if key is None:\n+            if download_rustc:\n+                key = self.rustc_commit\n+            else:\n+                key = self.date\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n-        rustc_cache = os.path.join(cache_dst, date)\n+        rustc_cache = os.path.join(cache_dst, key)\n         if not os.path.exists(rustc_cache):\n             os.makedirs(rustc_cache)\n \n-        url = \"{}/dist/{}\".format(self._download_url, date)\n+        if download_rustc:\n+            url = \"https://ci-artifacts.rust-lang.org/rustc-builds/{}\".format(self.rustc_commit)\n+        else:\n+            url = \"{}/dist/{}\".format(self._download_url, key)\n         tarball = os.path.join(rustc_cache, filename)\n         if not os.path.exists(tarball):\n-            get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n+            do_verify = not download_rustc\n+            get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose, do_verify=do_verify)\n         unpack(tarball, tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n \n     def _download_ci_llvm(self, llvm_sha, llvm_assertions):\n@@ -613,6 +632,46 @@ def fix_bin_or_dylib(self, fname, rpath_libz=False):\n             print(\"warning: failed to call patchelf:\", reason)\n             return\n \n+    # Return the stage1 compiler to download, if any.\n+    def maybe_download_rustc(self):\n+        # If `download-rustc` is not set, default to rebuilding.\n+        if self.get_toml(\"download-rustc\", section=\"rust\") != \"true\":\n+            return None\n+        # Look for a version to compare to based on the current commit.\n+        # There are a few different cases to handle.\n+        # 1. This commit is a fast-forward from master: `master - * - * - HEAD`\n+        # 2. This commit and master have diverged:\n+        # ```\n+        #   Y - * - HEAD\n+        #  /\n+        # X - * - master\n+        # ```\n+        # In this case, we should compare to `X`.\n+        # 3. `master` and `HEAD` are radically different (>100 commits, or similar). This probably\n+        # means that `master` does *not* correspond to the version we want to compare to, e.g. a\n+        # fork. Instead, we want to compare to `rust-lang/rust:master`, which this has to share a\n+        # recent merge base with.\n+\n+        # Find which remote corresponds to `rust-lang/rust`.\n+        remotes = subprocess.check_output([\"git\", \"remote\", \"-v\"], universal_newlines=True)\n+        # e.g. `origin https://github.com//rust-lang/rust (fetch)`\n+        rust_lang_remote = next(line for line in remotes.splitlines() if \"rust-lang/rust\" in line)\n+        rust_lang_remote = rust_lang_remote.split()[0]\n+\n+        # Find which commit to compare to\n+        merge_base = [\"git\", \"merge-base\", \"HEAD\", \"{}/master\".format(rust_lang_remote)]\n+        commit = subprocess.check_output(merge_base, universal_newlines=True).strip()\n+\n+        # Warn if there were changes to the compiler since the ancestor commit.\n+        rev_parse = [\"git\", \"rev-parse\", \"--show-toplevel\"]\n+        top_level = subprocess.check_output(rev_parse, universal_newlines=True).strip()\n+        compiler = \"{}/compiler/\".format(top_level)\n+        status = subprocess.call([\"git\", \"diff-index\", \"--quiet\", commit, \"--\", compiler])\n+        if status != 0:\n+            print(\"warning: `download-rustc` is enabled, but there are changes to compiler/\")\n+\n+        return commit\n+\n     def rustc_stamp(self):\n         \"\"\"Return the path for .rustc-stamp\n \n@@ -1090,6 +1149,13 @@ def bootstrap(help_triggered):\n     build.update_submodules()\n \n     # Fetch/build the bootstrap\n+    build.rustc_commit = build.maybe_download_rustc()\n+    if build.rustc_commit is not None:\n+        if build.verbose:\n+            commit = build.rustc_commit\n+            print(\"using downloaded stage1 artifacts from CI (commit {})\".format(commit))\n+        # FIXME: support downloading artifacts from the beta channel\n+        build.rustc_channel = \"nightly\"\n     build.download_stage0()\n     sys.stdout.flush()\n     build.ensure_vendored()"}, {"sha": "6ab106f3024651f0d6e935fe1390193e8e4fd11e", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/645784521950c51260abf68c7be8d24552430338/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645784521950c51260abf68c7be8d24552430338/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=645784521950c51260abf68c7be8d24552430338", "patch": "@@ -57,6 +57,14 @@ pub trait Step: 'static + Clone + Debug + PartialEq + Eq + Hash {\n     /// `true` here can still be overwritten by `should_run` calling `default_condition`.\n     const DEFAULT: bool = false;\n \n+    /// Whether this step should be run even when `download-rustc` is set.\n+    ///\n+    /// Most steps are not important when the compiler is downloaded, since they will be included in\n+    /// the pre-compiled sysroot. Steps can set this to `true` to be built anyway.\n+    ///\n+    /// When in doubt, set this to `false`.\n+    const ENABLE_DOWNLOAD_RUSTC: bool = false;\n+\n     /// If true, then this rule should be skipped if --target was specified, but --host was not\n     const ONLY_HOSTS: bool = false;\n \n@@ -99,6 +107,7 @@ impl RunConfig<'_> {\n \n struct StepDescription {\n     default: bool,\n+    enable_download_rustc: bool,\n     only_hosts: bool,\n     should_run: fn(ShouldRun<'_>) -> ShouldRun<'_>,\n     make_run: fn(RunConfig<'_>),\n@@ -153,6 +162,7 @@ impl StepDescription {\n     fn from<S: Step>() -> StepDescription {\n         StepDescription {\n             default: S::DEFAULT,\n+            enable_download_rustc: S::ENABLE_DOWNLOAD_RUSTC,\n             only_hosts: S::ONLY_HOSTS,\n             should_run: S::should_run,\n             make_run: S::make_run,\n@@ -169,6 +179,14 @@ impl StepDescription {\n                 \"{:?} not skipped for {:?} -- not in {:?}\",\n                 pathset, self.name, builder.config.exclude\n             );\n+        } else if builder.config.download_rustc && !self.enable_download_rustc {\n+            if !builder.config.dry_run {\n+                eprintln!(\n+                    \"Not running {} because its artifacts have been downloaded from CI (`download-rustc` is set)\",\n+                    self.name\n+                );\n+            }\n+            return;\n         }\n \n         // Determine the targets participating in this rule.\n@@ -629,8 +647,12 @@ impl<'a> Builder<'a> {\n                     .join(\"rustlib\")\n                     .join(self.target.triple)\n                     .join(\"lib\");\n-                let _ = fs::remove_dir_all(&sysroot);\n-                t!(fs::create_dir_all(&sysroot));\n+                // Avoid deleting the rustlib/ directory we just copied\n+                // (in `impl Step for Sysroot`).\n+                if !builder.config.download_rustc {\n+                    let _ = fs::remove_dir_all(&sysroot);\n+                    t!(fs::create_dir_all(&sysroot));\n+                }\n                 INTERNER.intern_path(sysroot)\n             }\n         }"}, {"sha": "9b80f1cf9fca7c93e0708cbafdb0fe17fab8ae43", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/645784521950c51260abf68c7be8d24552430338/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645784521950c51260abf68c7be8d24552430338/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=645784521950c51260abf68c7be8d24552430338", "patch": "@@ -62,6 +62,7 @@ fn cargo_subcommand(kind: Kind) -> &'static str {\n impl Step for Std {\n     type Output = ();\n     const DEFAULT: bool = true;\n+    const ENABLE_DOWNLOAD_RUSTC: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.all_krates(\"test\")\n@@ -155,6 +156,7 @@ impl Step for Rustc {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n     const DEFAULT: bool = true;\n+    const ENABLE_DOWNLOAD_RUSTC: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.all_krates(\"rustc-main\")\n@@ -233,6 +235,7 @@ impl Step for CodegenBackend {\n     type Output = ();\n     const ONLY_HOSTS: bool = true;\n     const DEFAULT: bool = true;\n+    const ENABLE_DOWNLOAD_RUSTC: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         run.paths(&[\"compiler/rustc_codegen_cranelift\", \"rustc_codegen_cranelift\"])\n@@ -290,6 +293,7 @@ macro_rules! tool_check_step {\n             type Output = ();\n             const ONLY_HOSTS: bool = true;\n             const DEFAULT: bool = true;\n+            const ENABLE_DOWNLOAD_RUSTC: bool = true;\n \n             fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n                 run.path($path)"}, {"sha": "833c13e9a2615032d319e2d91d73debb8874d593", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/645784521950c51260abf68c7be8d24552430338/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645784521950c51260abf68c7be8d24552430338/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=645784521950c51260abf68c7be8d24552430338", "patch": "@@ -41,7 +41,10 @@ impl Step for Std {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"test\")\n+        // When downloading stage1, the standard library has already been copied to the sysroot, so\n+        // there's no need to rebuild it.\n+        let download_rustc = run.builder.config.download_rustc;\n+        run.all_krates(\"test\").default_condition(!download_rustc)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -904,6 +907,18 @@ impl Step for Sysroot {\n         let _ = fs::remove_dir_all(&sysroot);\n         t!(fs::create_dir_all(&sysroot));\n \n+        // If we're downloading a compiler from CI, we can use the same compiler for all stages other than 0.\n+        if builder.config.download_rustc {\n+            assert_eq!(\n+                builder.config.build, compiler.host,\n+                \"Cross-compiling is not yet supported with `download-rustc`\",\n+            );\n+            // Copy the compiler into the correct sysroot.\n+            let stage0_dir = builder.config.out.join(&*builder.config.build.triple).join(\"stage0\");\n+            builder.cp_r(&stage0_dir, &sysroot);\n+            return INTERNER.intern_path(sysroot);\n+        }\n+\n         // Symlink the source root into the same location inside the sysroot,\n         // where `rust-src` component would go (`$sysroot/lib/rustlib/src/rust`),\n         // so that any tools relying on `rust-src` also work for local builds,\n@@ -975,13 +990,16 @@ impl Step for Assemble {\n         // produce some other architecture compiler we need to start from\n         // `build` to get there.\n         //\n-        // FIXME: Perhaps we should download those libraries?\n-        //        It would make builds faster...\n-        //\n         // FIXME: It may be faster if we build just a stage 1 compiler and then\n         //        use that to bootstrap this compiler forward.\n         let build_compiler = builder.compiler(target_compiler.stage - 1, builder.config.build);\n \n+        // If we're downloading a compiler from CI, we can use the same compiler for all stages other than 0.\n+        if builder.config.download_rustc {\n+            builder.ensure(Sysroot { compiler: target_compiler });\n+            return target_compiler;\n+        }\n+\n         // Build the libraries for this compiler to link to (i.e., the libraries\n         // it uses at runtime). NOTE: Crates the target compiler compiles don't\n         // link to these. (FIXME: Is that correct? It seems to be correct most"}, {"sha": "e4b8269f94cacc1084fa9620cb48ebc4911aaf6d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/645784521950c51260abf68c7be8d24552430338/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645784521950c51260abf68c7be8d24552430338/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=645784521950c51260abf68c7be8d24552430338", "patch": "@@ -80,6 +80,7 @@ pub struct Config {\n     pub cmd: Subcommand,\n     pub incremental: bool,\n     pub dry_run: bool,\n+    pub download_rustc: bool,\n \n     pub deny_warnings: bool,\n     pub backtrace_on_ice: bool,\n@@ -503,6 +504,7 @@ struct Rust {\n     new_symbol_mangling: Option<bool>,\n     profile_generate: Option<String>,\n     profile_use: Option<String>,\n+    download_rustc: Option<bool>,\n }\n \n /// TOML representation of how each build target is configured.\n@@ -885,6 +887,7 @@ impl Config {\n             config.rust_codegen_units_std = rust.codegen_units_std.map(threads_from_config);\n             config.rust_profile_use = flags.rust_profile_use.or(rust.profile_use);\n             config.rust_profile_generate = flags.rust_profile_generate.or(rust.profile_generate);\n+            config.download_rustc = rust.download_rustc.unwrap_or(false);\n         } else {\n             config.rust_profile_use = flags.rust_profile_use;\n             config.rust_profile_generate = flags.rust_profile_generate;"}, {"sha": "5c874f69bd92da8bfeac2e0ba5c1e5d986a33f1a", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/645784521950c51260abf68c7be8d24552430338/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645784521950c51260abf68c7be8d24552430338/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=645784521950c51260abf68c7be8d24552430338", "patch": "@@ -477,6 +477,7 @@ pub struct Rustdoc {\n impl Step for Rustdoc {\n     type Output = PathBuf;\n     const DEFAULT: bool = true;\n+    const ENABLE_DOWNLOAD_RUSTC: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {"}]}