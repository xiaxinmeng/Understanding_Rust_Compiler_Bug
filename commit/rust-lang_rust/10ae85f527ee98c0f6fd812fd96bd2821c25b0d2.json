{"sha": "10ae85f527ee98c0f6fd812fd96bd2821c25b0d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYWU4NWY1MjdlZTk4YzBmNmZkODEyZmQ5NmJkMjgyMWMyNWIwZDI=", "commit": {"author": {"name": "Matthias Schiffer", "email": "mschiffer@universe-factory.net", "date": "2020-04-13T18:52:06Z"}, "committer": {"name": "Matthias Schiffer", "email": "mschiffer@universe-factory.net", "date": "2020-04-14T16:49:28Z"}, "message": "rustc: add lang items \"const_slice_ptr\" and \"mut_slice_ptr\"\n\nAdd lang items for methods on raw slices.", "tree": {"sha": "345b55f5de04db132bc6ded5be57626101d5adbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/345b55f5de04db132bc6ded5be57626101d5adbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10ae85f527ee98c0f6fd812fd96bd2821c25b0d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEZmTnvaa2aYgexS51Fu8/ZMsgHZwFAl6V6ZgACgkQFu8/ZMsg\nHZzOtxAAtsk6qEZyiTnLCbzWucJqyHo2ByFuCTMkHDb42GomUrvHBU/KOhlVWash\nBlcYHVMUWestVJcy3wO6NqvQNk5NzH+GzXd8zAV1HQMACNgap+/REm35vH1LEIB6\n6ZSFf0nTJZrW3MYUcYtMT4SPs3oOf9Y4cZCBCtu9/YPyCJDp2m1kMB5Q3BDlJwCL\nAR3lKT0rANgff05Mdl1di8bbyjCvRSTupQq4IfsegLUOry/xhNkeO3B3HSLccqVy\nAMcaUpCVCrPFGgdFKmqH0vuADJ8RK5Bqwe+KezvkdssJISTeQyPZx3IX9KzJu/Kr\ntnqZO953RessGpZXJJJr5/ATAaLSotkfxo26LGWcv+Tufi7Jz8pNEVGT0SaY12mx\niDokM4ORS6UPoSpoGXI6zHkrdRspDaFAILUTk3EmoCu7SdHEkLYYy4dZUPae+IiX\ndQQnfWxO+TamhlC/GyvE619aKsxUP7o5g8Al2p6Jo50eVw+h2trrF+7/2hbEUU7W\nsWypddkGJyEb3wrKf1/25nzOgJFrooPfFA6XesZiJWmM1azn9mZjI9e4VAGPKx6b\nVhw0wXJUCAcHglgJ7y0RQTLOgGx0IiHZyE8oQGAs/TKea/ynURpiMiOuXepOA7M5\nJbNn2H73sqYRCimxPFOJFTRFSen9VZ9C+gMl/vguwBvAzhUN1ZE=\n=5oGx\n-----END PGP SIGNATURE-----", "payload": "tree 345b55f5de04db132bc6ded5be57626101d5adbe\nparent ba72b15666b2491415aec703a02c2364fe5e2790\nauthor Matthias Schiffer <mschiffer@universe-factory.net> 1586803926 +0200\ncommitter Matthias Schiffer <mschiffer@universe-factory.net> 1586882968 +0200\n\nrustc: add lang items \"const_slice_ptr\" and \"mut_slice_ptr\"\n\nAdd lang items for methods on raw slices.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10ae85f527ee98c0f6fd812fd96bd2821c25b0d2", "html_url": "https://github.com/rust-lang/rust/commit/10ae85f527ee98c0f6fd812fd96bd2821c25b0d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10ae85f527ee98c0f6fd812fd96bd2821c25b0d2/comments", "author": {"login": "NeoRaider", "id": 419139, "node_id": "MDQ6VXNlcjQxOTEzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/419139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeoRaider", "html_url": "https://github.com/NeoRaider", "followers_url": "https://api.github.com/users/NeoRaider/followers", "following_url": "https://api.github.com/users/NeoRaider/following{/other_user}", "gists_url": "https://api.github.com/users/NeoRaider/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeoRaider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeoRaider/subscriptions", "organizations_url": "https://api.github.com/users/NeoRaider/orgs", "repos_url": "https://api.github.com/users/NeoRaider/repos", "events_url": "https://api.github.com/users/NeoRaider/events{/privacy}", "received_events_url": "https://api.github.com/users/NeoRaider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "NeoRaider", "id": 419139, "node_id": "MDQ6VXNlcjQxOTEzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/419139?v=4", "gravatar_id": "", "url": "https://api.github.com/users/NeoRaider", "html_url": "https://github.com/NeoRaider", "followers_url": "https://api.github.com/users/NeoRaider/followers", "following_url": "https://api.github.com/users/NeoRaider/following{/other_user}", "gists_url": "https://api.github.com/users/NeoRaider/gists{/gist_id}", "starred_url": "https://api.github.com/users/NeoRaider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/NeoRaider/subscriptions", "organizations_url": "https://api.github.com/users/NeoRaider/orgs", "repos_url": "https://api.github.com/users/NeoRaider/repos", "events_url": "https://api.github.com/users/NeoRaider/events{/privacy}", "received_events_url": "https://api.github.com/users/NeoRaider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba72b15666b2491415aec703a02c2364fe5e2790", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba72b15666b2491415aec703a02c2364fe5e2790", "html_url": "https://github.com/rust-lang/rust/commit/ba72b15666b2491415aec703a02c2364fe5e2790"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "53f72804a848d551b5227d4bfe49f70bdb7bf653", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10ae85f527ee98c0f6fd812fd96bd2821c25b0d2/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ae85f527ee98c0f6fd812fd96bd2821c25b0d2/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=10ae85f527ee98c0f6fd812fd96bd2821c25b0d2", "patch": "@@ -135,6 +135,8 @@ language_item_table! {\n     SliceU8AllocImplItem,        \"slice_u8_alloc\",     slice_u8_alloc_impl,     Target::Impl;\n     ConstPtrImplItem,            \"const_ptr\",          const_ptr_impl,          Target::Impl;\n     MutPtrImplItem,              \"mut_ptr\",            mut_ptr_impl,            Target::Impl;\n+    ConstSlicePtrImplItem,       \"const_slice_ptr\",    const_slice_ptr_impl,    Target::Impl;\n+    MutSlicePtrImplItem,         \"mut_slice_ptr\",      mut_slice_ptr_impl,      Target::Impl;\n     I8ImplItem,                  \"i8\",                 i8_impl,                 Target::Impl;\n     I16ImplItem,                 \"i16\",                i16_impl,                Target::Impl;\n     I32ImplItem,                 \"i32\",                i32_impl,                Target::Impl;"}, {"sha": "9b1c8b9a9c83e62cbd3b9dbceb7596660305dd47", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/10ae85f527ee98c0f6fd812fd96bd2821c25b0d2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ae85f527ee98c0f6fd812fd96bd2821c25b0d2/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=10ae85f527ee98c0f6fd812fd96bd2821c25b0d2", "patch": "@@ -649,11 +649,16 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 }\n             }\n             ty::RawPtr(ty::TypeAndMut { ty: _, mutbl }) => {\n-                let lang_def_id = match mutbl {\n-                    hir::Mutability::Not => lang_items.const_ptr_impl(),\n-                    hir::Mutability::Mut => lang_items.mut_ptr_impl(),\n+                let (lang_def_id1, lang_def_id2) = match mutbl {\n+                    hir::Mutability::Not => {\n+                        (lang_items.const_ptr_impl(), lang_items.const_slice_ptr_impl())\n+                    }\n+                    hir::Mutability::Mut => {\n+                        (lang_items.mut_ptr_impl(), lang_items.mut_slice_ptr_impl())\n+                    }\n                 };\n-                self.assemble_inherent_impl_for_primitive(lang_def_id);\n+                self.assemble_inherent_impl_for_primitive(lang_def_id1);\n+                self.assemble_inherent_impl_for_primitive(lang_def_id2);\n             }\n             ty::Int(i) => {\n                 let lang_def_id = match i {"}, {"sha": "2e84173477074de71f8ad5718d53e622a782a961", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/10ae85f527ee98c0f6fd812fd96bd2821c25b0d2/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10ae85f527ee98c0f6fd812fd96bd2821c25b0d2/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=10ae85f527ee98c0f6fd812fd96bd2821c25b0d2", "patch": "@@ -112,6 +112,30 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n                     item.span,\n                 );\n             }\n+            ty::RawPtr(ty::TypeAndMut { ty: inner, mutbl: hir::Mutability::Not })\n+                if matches!(inner.kind, ty::Slice(_)) =>\n+            {\n+                self.check_primitive_impl(\n+                    def_id,\n+                    lang_items.const_slice_ptr_impl(),\n+                    None,\n+                    \"const_slice_ptr\",\n+                    \"*const [T]\",\n+                    item.span,\n+                );\n+            }\n+            ty::RawPtr(ty::TypeAndMut { ty: inner, mutbl: hir::Mutability::Mut })\n+                if matches!(inner.kind, ty::Slice(_)) =>\n+            {\n+                self.check_primitive_impl(\n+                    def_id,\n+                    lang_items.mut_slice_ptr_impl(),\n+                    None,\n+                    \"mut_slice_ptr\",\n+                    \"*mut [T]\",\n+                    item.span,\n+                );\n+            }\n             ty::RawPtr(ty::TypeAndMut { ty: _, mutbl: hir::Mutability::Not }) => {\n                 self.check_primitive_impl(\n                     def_id,"}]}