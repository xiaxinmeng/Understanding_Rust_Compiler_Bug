{"sha": "dedf0ff7c549a72063fc4823e915aeab2d264f5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZGYwZmY3YzU0OWE3MjA2M2ZjNDgyM2U5MTVhZWFiMmQyNjRmNWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-11T11:39:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-07-11T11:41:21Z"}, "message": "internal: document NameClass and NameRefClass", "tree": {"sha": "05d159a9ae080c32d649fa453578fae1439a19c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05d159a9ae080c32d649fa453578fae1439a19c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dedf0ff7c549a72063fc4823e915aeab2d264f5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dedf0ff7c549a72063fc4823e915aeab2d264f5e", "html_url": "https://github.com/rust-lang/rust/commit/dedf0ff7c549a72063fc4823e915aeab2d264f5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dedf0ff7c549a72063fc4823e915aeab2d264f5e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "325140a165e1081432cb758fc4114a3eff0af490", "url": "https://api.github.com/repos/rust-lang/rust/commits/325140a165e1081432cb758fc4114a3eff0af490", "html_url": "https://github.com/rust-lang/rust/commit/325140a165e1081432cb758fc4114a3eff0af490"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "4c7313f2f6debb5bbdeed9d86652aab6d92211ec", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dedf0ff7c549a72063fc4823e915aeab2d264f5e/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedf0ff7c549a72063fc4823e915aeab2d264f5e/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=dedf0ff7c549a72063fc4823e915aeab2d264f5e", "patch": "@@ -97,13 +97,25 @@ impl Definition {\n     }\n }\n \n+/// On a first blush, a single `ast::Name` defines a single definition at some\n+/// scope. That is, that, by just looking at the syntactical category, we can\n+/// unambiguously define the semantic category.\n+///\n+/// Sadly, that's not 100% true, there are special cases. To make sure that call\n+/// the code handles all the special cases correctly via exhaustive matching, we\n+/// add a [`NameClass`] enum which lists all of them!\n+///\n+/// A model special case is `None` constant in pattern.\n #[derive(Debug)]\n pub enum NameClass {\n     ExternCrate(Crate),\n     Definition(Definition),\n     /// `None` in `if let None = Some(82) {}`.\n+    /// Syntactically, it is a name, but semantically it is a reference.\n     ConstReference(Definition),\n-    /// `field` in `if let Foo { field } = foo`.\n+    /// `field` in `if let Foo { field } = foo`. Here, `ast::Name` both Here the\n+    /// name both introduces a definition into a local scope, and refers to an\n+    /// existing definition.\n     PatFieldShorthand {\n         local_def: Local,\n         field_ref: Definition,\n@@ -283,6 +295,12 @@ impl NameClass {\n     }\n }\n \n+/// This is similar to [`NameClass`], but works for [`ast::NameRef`] rather than\n+/// for [`ast::Name`]. Similarly, what looks like a reference in syntax is a\n+/// reference most of the time, but there are a couple of annoying exceptions.\n+///\n+/// A model special case is field shorthand syntax, which uses a single\n+/// reference to point to two different defs.\n #[derive(Debug)]\n pub enum NameRefClass {\n     ExternCrate(Crate),"}]}