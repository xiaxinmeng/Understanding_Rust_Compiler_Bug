{"sha": "f2b8d7bb3189115b3de4bc5e73b57a67b1dce364", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYjhkN2JiMzE4OTExNWIzZGU0YmM1ZTczYjU3YTY3YjFkY2UzNjQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-11-10T20:06:51Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-11-10T20:06:51Z"}, "message": "ICH: Add test case for if- and if-let-expressions.", "tree": {"sha": "15bbdbcc2be393c437f6acc38f5d580b800e2e6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15bbdbcc2be393c437f6acc38f5d580b800e2e6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2b8d7bb3189115b3de4bc5e73b57a67b1dce364", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b8d7bb3189115b3de4bc5e73b57a67b1dce364", "html_url": "https://github.com/rust-lang/rust/commit/f2b8d7bb3189115b3de4bc5e73b57a67b1dce364", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2b8d7bb3189115b3de4bc5e73b57a67b1dce364/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc1cc1db6ddee8d57d20adc05b740e3b73649ab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1cc1db6ddee8d57d20adc05b740e3b73649ab5", "html_url": "https://github.com/rust-lang/rust/commit/bc1cc1db6ddee8d57d20adc05b740e3b73649ab5"}], "stats": {"total": 232, "additions": 232, "deletions": 0}, "files": [{"sha": "ba6289f754edef95404680a3fa27ad4717b63cef", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/f2b8d7bb3189115b3de4bc5e73b57a67b1dce364/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2b8d7bb3189115b3de4bc5e73b57a67b1dce364/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=f2b8d7bb3189115b3de4bc5e73b57a67b1dce364", "patch": "@@ -0,0 +1,232 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for if expressions.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+// Change condition (if) -------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_condition(x: bool) -> u32 {\n+    if x {\n+        return 1\n+    }\n+\n+    return 0\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_condition(x: bool) -> u32 {\n+    if !x {\n+        return 1\n+    }\n+\n+    return 0\n+}\n+\n+// Change then branch (if) -----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_then_branch(x: bool) -> u32 {\n+    if x {\n+        return 1\n+    }\n+\n+    return 0\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_then_branch(x: bool) -> u32 {\n+    if x {\n+        return 2\n+    }\n+\n+    return 0\n+}\n+\n+\n+\n+// Change else branch (if) -----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_else_branch(x: bool) -> u32 {\n+    if x {\n+        1\n+    } else {\n+        2\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_else_branch(x: bool) -> u32 {\n+    if x {\n+        1\n+    } else {\n+        3\n+    }\n+}\n+\n+\n+\n+// Add else branch (if) --------------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn add_else_branch(x: bool) -> u32 {\n+    let mut ret = 1;\n+\n+    if x {\n+        ret += 1;\n+    }\n+\n+    ret\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn add_else_branch(x: bool) -> u32 {\n+    let mut ret = 1;\n+\n+    if x {\n+        ret += 1;\n+    } else {\n+    }\n+\n+    ret\n+}\n+\n+\n+\n+// Change condition (if let) ---------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n+    if let Some(_x) = x {\n+        return 1\n+    }\n+\n+    0\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n+    if let Some(_) = x {\n+        return 1\n+    }\n+\n+    0\n+}\n+\n+\n+\n+// Change then branch (if let) -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n+    if let Some(x) = x {\n+        return x\n+    }\n+\n+    0\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n+    if let Some(x) = x {\n+        return x + 1\n+    }\n+\n+    0\n+}\n+\n+\n+\n+// Change else branch (if let) -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n+    if let Some(x) = x {\n+        x\n+    } else {\n+        1\n+    }\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n+    if let Some(x) = x {\n+        x\n+    } else {\n+        2\n+    }\n+}\n+\n+\n+\n+// Add else branch (if let) ----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n+    let mut ret = 1;\n+\n+    if let Some(x) = x {\n+        ret += x;\n+    }\n+\n+    ret\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n+    let mut ret = 1;\n+\n+    if let Some(x) = x {\n+        ret += x;\n+    } else {\n+    }\n+\n+    ret\n+}"}]}