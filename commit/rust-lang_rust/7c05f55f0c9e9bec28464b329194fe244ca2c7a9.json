{"sha": "7c05f55f0c9e9bec28464b329194fe244ca2c7a9", "node_id": "C_kwDOAAsO6NoAKDdjMDVmNTVmMGM5ZTliZWMyODQ2NGIzMjkxOTRmZTI0NGNhMmM3YTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-18T07:06:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-18T07:06:27Z"}, "message": "Auto merge of #13789 - feniljain:fix_enum_completion, r=Veykril\n\nfeat: show only missing variant suggestion for enums in patterns completion and bump them in list too\n\nFixes #12438\n\n### Points to help in review:\n\n- This PR can be reviewed commit wise, first commit is about bumping enum variant completions up in the list of completions and second commit is about only showing enum variants which are not complete\n- I am calculating missing variants in analysis.rs by firstly locating the enum and then comparing each of it's variant's name and checking if arm string already contains that name, this is kinda hacky but I didn't want to implement complete missing_arms assist here as that would have been too bulky to run on each completion cycle ( if we can improve this somehow would appreciate some inputs on it )\n\n### Output:\n\nhttps://user-images.githubusercontent.com/49019259/208245540-57d7321b-b275-477e-bef0-b3a1ff8b7040.mov\n\nRelevant Zulip Discussion: https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Frust-analyzer/topic/Issue.20.2312438", "tree": {"sha": "f44b36a3c7132a010bb45c29ca70dc7b8f4ad6c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f44b36a3c7132a010bb45c29ca70dc7b8f4ad6c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c05f55f0c9e9bec28464b329194fe244ca2c7a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c05f55f0c9e9bec28464b329194fe244ca2c7a9", "html_url": "https://github.com/rust-lang/rust/commit/7c05f55f0c9e9bec28464b329194fe244ca2c7a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c05f55f0c9e9bec28464b329194fe244ca2c7a9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "924d277f32b53219fcaa03226c17b485a081ed16", "url": "https://api.github.com/repos/rust-lang/rust/commits/924d277f32b53219fcaa03226c17b485a081ed16", "html_url": "https://github.com/rust-lang/rust/commit/924d277f32b53219fcaa03226c17b485a081ed16"}, {"sha": "a79a76a94274c22676e2047039cf68ca199c07dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a79a76a94274c22676e2047039cf68ca199c07dd", "html_url": "https://github.com/rust-lang/rust/commit/a79a76a94274c22676e2047039cf68ca199c07dd"}], "stats": {"total": 160, "additions": 147, "deletions": 13}, "files": [{"sha": "c3136f6df4b391a1f6951f17491ccab6e29d9819", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7c05f55f0c9e9bec28464b329194fe244ca2c7a9/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c05f55f0c9e9bec28464b329194fe244ca2c7a9/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=7c05f55f0c9e9bec28464b329194fe244ca2c7a9", "patch": "@@ -23,7 +23,7 @@ pub(crate) mod env_vars;\n \n use std::iter;\n \n-use hir::{known, ScopeDef};\n+use hir::{known, ScopeDef, Variant};\n use ide_db::{imports::import_assets::LocatedImport, SymbolKind};\n use syntax::ast;\n \n@@ -537,17 +537,20 @@ fn enum_variants_with_paths(\n     impl_: &Option<ast::Impl>,\n     cb: impl Fn(&mut Completions, &CompletionContext<'_>, hir::Variant, hir::ModPath),\n ) {\n+    let mut process_variant = |variant: Variant| {\n+        let self_path = hir::ModPath::from_segments(\n+            hir::PathKind::Plain,\n+            iter::once(known::SELF_TYPE).chain(iter::once(variant.name(ctx.db))),\n+        );\n+\n+        cb(acc, ctx, variant, self_path);\n+    };\n+\n     let variants = enum_.variants(ctx.db);\n \n     if let Some(impl_) = impl_.as_ref().and_then(|impl_| ctx.sema.to_def(impl_)) {\n         if impl_.self_ty(ctx.db).as_adt() == Some(hir::Adt::Enum(enum_)) {\n-            for &variant in &variants {\n-                let self_path = hir::ModPath::from_segments(\n-                    hir::PathKind::Plain,\n-                    iter::once(known::SELF_TYPE).chain(iter::once(variant.name(ctx.db))),\n-                );\n-                cb(acc, ctx, variant, self_path);\n-            }\n+            variants.iter().for_each(|variant| process_variant(*variant));\n         }\n     }\n "}, {"sha": "8cbf89e9c301954e83b32ba23cc88179ff31e07e", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c05f55f0c9e9bec28464b329194fe244ca2c7a9/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c05f55f0c9e9bec28464b329194fe244ca2c7a9/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=7c05f55f0c9e9bec28464b329194fe244ca2c7a9", "patch": "@@ -220,6 +220,8 @@ pub(super) struct PatternContext {\n     /// The record pattern this name or ref is a field of\n     pub(super) record_pat: Option<ast::RecordPat>,\n     pub(super) impl_: Option<ast::Impl>,\n+    /// List of missing variants in a match expr\n+    pub(super) missing_variants: Vec<hir::Variant>,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "a94c404586b11b4923762ca5f5a7a0659caa7d45", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7c05f55f0c9e9bec28464b329194fe244ca2c7a9/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c05f55f0c9e9bec28464b329194fe244ca2c7a9/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=7c05f55f0c9e9bec28464b329194fe244ca2c7a9", "patch": "@@ -1,7 +1,7 @@\n //! Module responsible for analyzing the code surrounding the cursor for completion.\n use std::iter;\n \n-use hir::{Semantics, Type, TypeInfo};\n+use hir::{Semantics, Type, TypeInfo, Variant};\n use ide_db::{active_parameter::ActiveParameter, RootDatabase};\n use syntax::{\n     algo::{find_node_at_offset, non_trivia_sibling},\n@@ -1132,6 +1132,9 @@ fn pattern_context_for(\n     pat: ast::Pat,\n ) -> PatternContext {\n     let mut param_ctx = None;\n+\n+    let mut missing_variants = vec![];\n+\n     let (refutability, has_type_ascription) =\n     pat\n         .syntax()\n@@ -1161,7 +1164,52 @@ fn pattern_context_for(\n                         })();\n                         return (PatternRefutability::Irrefutable, has_type_ascription)\n                     },\n-                    ast::MatchArm(_) => PatternRefutability::Refutable,\n+                    ast::MatchArm(match_arm) => {\n+                       let missing_variants_opt = match_arm\n+                            .syntax()\n+                            .parent()\n+                            .and_then(ast::MatchArmList::cast)\n+                            .and_then(|match_arm_list| {\n+                                match_arm_list\n+                                .syntax()\n+                                .parent()\n+                                .and_then(ast::MatchExpr::cast)\n+                                .and_then(|match_expr| {\n+                                    let expr_opt = find_opt_node_in_file(&original_file, match_expr.expr());\n+\n+                                    expr_opt.and_then(|expr| {\n+                                        sema.type_of_expr(&expr)?\n+                                        .adjusted()\n+                                        .autoderef(sema.db)\n+                                        .find_map(|ty| match ty.as_adt() {\n+                                            Some(hir::Adt::Enum(e)) => Some(e),\n+                                            _ => None,\n+                                        }).and_then(|enum_| {\n+                                            Some(enum_.variants(sema.db))\n+                                        })\n+                                    })\n+                                }).and_then(|variants| {\n+                                   Some(variants.iter().filter_map(|variant| {\n+                                        let variant_name = variant.name(sema.db).to_string();\n+\n+                                        let variant_already_present = match_arm_list.arms().any(|arm| {\n+                                            arm.pat().and_then(|pat| {\n+                                                let pat_already_present = pat.syntax().to_string().contains(&variant_name);\n+                                                pat_already_present.then(|| pat_already_present)\n+                                            }).is_some()\n+                                        });\n+\n+                                        (!variant_already_present).then_some(variant.clone())\n+                                    }).collect::<Vec<Variant>>())\n+                                })\n+                        });\n+\n+                        if let Some(missing_variants_) = missing_variants_opt {\n+                            missing_variants = missing_variants_;\n+                        };\n+\n+                        PatternRefutability::Refutable\n+                    },\n                     ast::LetExpr(_) => PatternRefutability::Refutable,\n                     ast::ForExpr(_) => PatternRefutability::Irrefutable,\n                     _ => PatternRefutability::Irrefutable,\n@@ -1183,6 +1231,7 @@ fn pattern_context_for(\n         ref_token,\n         record_pat: None,\n         impl_: fetch_immediate_impl(sema, original_file, pat.syntax()),\n+        missing_variants,\n     }\n }\n "}, {"sha": "9225c91bebf51897c871798075457def5d4c780d", "filename": "crates/ide-completion/src/render/pattern.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7c05f55f0c9e9bec28464b329194fe244ca2c7a9/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c05f55f0c9e9bec28464b329194fe244ca2c7a9/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs?ref=7c05f55f0c9e9bec28464b329194fe244ca2c7a9", "patch": "@@ -37,7 +37,9 @@ pub(crate) fn render_struct_pat(\n     let lookup = format_literal_lookup(name.as_str(), kind);\n     let pat = render_pat(&ctx, pattern_ctx, &escaped_name, kind, &visible_fields, fields_omitted)?;\n \n-    Some(build_completion(ctx, label, lookup, pat, strukt))\n+    let db = ctx.db();\n+\n+    Some(build_completion(ctx, label, lookup, pat, strukt, strukt.ty(db), false))\n }\n \n pub(crate) fn render_variant_pat(\n@@ -52,6 +54,7 @@ pub(crate) fn render_variant_pat(\n \n     let fields = variant.fields(ctx.db());\n     let (visible_fields, fields_omitted) = visible_fields(ctx.completion, &fields, variant)?;\n+    let enum_ty = variant.parent_enum(ctx.db()).ty(ctx.db());\n \n     let (name, escaped_name) = match path {\n         Some(path) => (path.unescaped().to_string().into(), path.to_string().into()),\n@@ -81,7 +84,15 @@ pub(crate) fn render_variant_pat(\n         }\n     };\n \n-    Some(build_completion(ctx, label, lookup, pat, variant))\n+    Some(build_completion(\n+        ctx,\n+        label,\n+        lookup,\n+        pat,\n+        variant,\n+        enum_ty,\n+        pattern_ctx.missing_variants.contains(&variant),\n+    ))\n }\n \n fn build_completion(\n@@ -90,13 +101,22 @@ fn build_completion(\n     lookup: SmolStr,\n     pat: String,\n     def: impl HasAttrs + Copy,\n+    adt_ty: hir::Type,\n+    // Missing in context of match statement completions\n+    is_variant_missing: bool,\n ) -> CompletionItem {\n+    let mut relevance = ctx.completion_relevance();\n+\n+    if is_variant_missing {\n+        relevance.type_match = super::compute_type_match(ctx.completion, &adt_ty);\n+    }\n+\n     let mut item = CompletionItem::new(CompletionItemKind::Binding, ctx.source_range(), label);\n     item.set_documentation(ctx.docs(def))\n         .set_deprecated(ctx.is_deprecated(def))\n         .detail(&pat)\n         .lookup_by(lookup)\n-        .set_relevance(ctx.completion_relevance());\n+        .set_relevance(relevance);\n     match ctx.snippet_cap() {\n         Some(snippet_cap) => item.insert_snippet(snippet_cap, pat),\n         None => item.insert_text(pat),"}, {"sha": "65cefdb0856d214106fba77f20b26118bfb42fe7", "filename": "crates/ide-completion/src/tests/record.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7c05f55f0c9e9bec28464b329194fe244ca2c7a9/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c05f55f0c9e9bec28464b329194fe244ca2c7a9/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Frecord.rs?ref=7c05f55f0c9e9bec28464b329194fe244ca2c7a9", "patch": "@@ -46,6 +46,66 @@ fn foo(s: Struct) {\n     );\n }\n \n+#[test]\n+fn record_pattern_field_enum() {\n+    check(\n+        r#\"\n+//- minicore:result\n+enum Baz { Foo, Bar }\n+\n+fn foo(baz: Baz) {\n+    match baz {\n+        Baz::Foo => (),\n+        $0\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            en Baz\n+            en Result\n+            md core\n+            ev Err\n+            ev Ok\n+            bn Baz::Bar Baz::Bar$0\n+            bn Baz::Foo Baz::Foo$0\n+            bn Err(\u2026)   Err($1)$0\n+            bn Ok(\u2026)    Ok($1)$0\n+            kw mut\n+            kw ref\n+        \"#]],\n+    );\n+\n+    check(\n+        r#\"\n+//- minicore:result\n+enum Baz { Foo, Bar }\n+\n+fn foo(baz: Baz) {\n+    use Baz::*;\n+    match baz {\n+        Foo => (),\n+        $0\n+    }\n+}\n+ \"#,\n+        expect![[r#\"\n+         en Baz\n+         en Result\n+         md core\n+         ev Bar\n+         ev Err\n+         ev Foo\n+         ev Ok\n+         bn Bar    Bar$0\n+         bn Err(\u2026) Err($1)$0\n+         bn Foo    Foo$0\n+         bn Ok(\u2026)  Ok($1)$0\n+         kw mut\n+         kw ref\n+         \"#]],\n+    );\n+}\n+\n #[test]\n fn pattern_enum_variant() {\n     check("}]}