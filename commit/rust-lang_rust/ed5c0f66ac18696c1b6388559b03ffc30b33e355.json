{"sha": "ed5c0f66ac18696c1b6388559b03ffc30b33e355", "node_id": "C_kwDOAAsO6NoAKGVkNWMwZjY2YWMxODY5NmMxYjYzODg1NTliMDNmZmMzMGIzM2UzNTU", "commit": {"author": {"name": "David CARLIER", "email": "devnexen@gmail.com", "date": "2021-12-11T15:24:38Z"}, "committer": {"name": "David Carlier", "email": "devnexen@gmail.com", "date": "2023-03-27T15:48:41Z"}, "message": "socket ancillary data implementation for FreeBSD (from 13 and above).\n\nintroducing new build config as well.", "tree": {"sha": "eab55f2c6aabc171d955f86dd17692ae37611fe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eab55f2c6aabc171d955f86dd17692ae37611fe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed5c0f66ac18696c1b6388559b03ffc30b33e355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed5c0f66ac18696c1b6388559b03ffc30b33e355", "html_url": "https://github.com/rust-lang/rust/commit/ed5c0f66ac18696c1b6388559b03ffc30b33e355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed5c0f66ac18696c1b6388559b03ffc30b33e355/comments", "author": {"login": "devnexen", "id": 4922778, "node_id": "MDQ6VXNlcjQ5MjI3Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4922778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnexen", "html_url": "https://github.com/devnexen", "followers_url": "https://api.github.com/users/devnexen/followers", "following_url": "https://api.github.com/users/devnexen/following{/other_user}", "gists_url": "https://api.github.com/users/devnexen/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnexen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnexen/subscriptions", "organizations_url": "https://api.github.com/users/devnexen/orgs", "repos_url": "https://api.github.com/users/devnexen/repos", "events_url": "https://api.github.com/users/devnexen/events{/privacy}", "received_events_url": "https://api.github.com/users/devnexen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devnexen", "id": 4922778, "node_id": "MDQ6VXNlcjQ5MjI3Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/4922778?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devnexen", "html_url": "https://github.com/devnexen", "followers_url": "https://api.github.com/users/devnexen/followers", "following_url": "https://api.github.com/users/devnexen/following{/other_user}", "gists_url": "https://api.github.com/users/devnexen/gists{/gist_id}", "starred_url": "https://api.github.com/users/devnexen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devnexen/subscriptions", "organizations_url": "https://api.github.com/users/devnexen/orgs", "repos_url": "https://api.github.com/users/devnexen/repos", "events_url": "https://api.github.com/users/devnexen/events{/privacy}", "received_events_url": "https://api.github.com/users/devnexen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "553ecbe8bae12bc43a34ac0b8a63e17026ce1e8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/553ecbe8bae12bc43a34ac0b8a63e17026ce1e8a", "html_url": "https://github.com/rust-lang/rust/commit/553ecbe8bae12bc43a34ac0b8a63e17026ce1e8a"}], "stats": {"total": 230, "additions": 209, "deletions": 21}, "files": [{"sha": "cf708db6f27e1d780e66cdf52f555b55d003aebe", "filename": "library/std/build.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed5c0f66ac18696c1b6388559b03ffc30b33e355/library%2Fstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5c0f66ac18696c1b6388559b03ffc30b33e355/library%2Fstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fbuild.rs?ref=ed5c0f66ac18696c1b6388559b03ffc30b33e355", "patch": "@@ -6,6 +6,9 @@ fn main() {\n     if target.contains(\"freebsd\") {\n         if env::var(\"RUST_STD_FREEBSD_12_ABI\").is_ok() {\n             println!(\"cargo:rustc-cfg=freebsd12\");\n+        } else if env::var(\"RUST_STD_FREEBSD_13_ABI\").is_ok() {\n+            println!(\"cargo:rustc-cfg=freebsd12\");\n+            println!(\"cargo:rustc-cfg=freebsd13\");\n         }\n     } else if target.contains(\"linux\")\n         || target.contains(\"netbsd\")"}, {"sha": "7565fbc0d099cb66a59def3d45d47864f617bfa3", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 129, "deletions": 12, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/ed5c0f66ac18696c1b6388559b03ffc30b33e355/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5c0f66ac18696c1b6388559b03ffc30b33e355/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=ed5c0f66ac18696c1b6388559b03ffc30b33e355", "patch": "@@ -86,7 +86,12 @@ fn add_to_ancillary_data<T>(\n     cmsg_level: libc::c_int,\n     cmsg_type: libc::c_int,\n ) -> bool {\n-    let source_len = if let Some(source_len) = source.len().checked_mul(size_of::<T>()) {\n+    #[cfg(not(target_os = \"freebsd\"))]\n+    let cmsg_size = source.len().checked_mul(size_of::<T>());\n+    #[cfg(target_os = \"freebsd\")]\n+    let cmsg_size = Some(unsafe { libc::SOCKCRED2SIZE(1) });\n+\n+    let source_len = if let Some(source_len) = cmsg_size {\n         if let Ok(source_len) = u32::try_from(source_len) {\n             source_len\n         } else {\n@@ -178,7 +183,13 @@ impl<'a, T> Iterator for AncillaryDataIter<'a, T> {\n     }\n }\n \n-#[cfg(all(doc, not(target_os = \"android\"), not(target_os = \"linux\"), not(target_os = \"netbsd\")))]\n+#[cfg(all(\n+    doc,\n+    not(target_os = \"android\"),\n+    not(target_os = \"linux\"),\n+    not(target_os = \"netbsd\"),\n+    not(target_os = \"freebsd\")\n+))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n #[derive(Clone)]\n pub struct SocketCred(());\n@@ -194,6 +205,11 @@ pub struct SocketCred(libc::ucred);\n #[derive(Clone)]\n pub struct SocketCred(libc::sockcred);\n \n+#[cfg(target_os = \"freebsd\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+#[derive(Clone)]\n+pub struct SocketCred(libc::sockcred2);\n+\n #[doc(cfg(any(target_os = \"android\", target_os = \"linux\")))]\n #[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n impl SocketCred {\n@@ -246,6 +262,66 @@ impl SocketCred {\n     }\n }\n \n+#[cfg(target_os = \"freebsd\")]\n+impl SocketCred {\n+    /// Create a Unix credential struct.\n+    ///\n+    /// PID, UID and GID is set to 0.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    #[must_use]\n+    pub fn new() -> SocketCred {\n+        SocketCred(libc::sockcred2 {\n+            sc_version: 0,\n+            sc_pid: 0,\n+            sc_uid: 0,\n+            sc_euid: 0,\n+            sc_gid: 0,\n+            sc_egid: 0,\n+            sc_ngroups: 0,\n+            sc_groups: [0; 1],\n+        })\n+    }\n+\n+    /// Set the PID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_pid(&mut self, pid: libc::pid_t) {\n+        self.0.sc_pid = pid;\n+    }\n+\n+    /// Get the current PID.\n+    #[must_use]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_pid(&self) -> libc::pid_t {\n+        self.0.sc_pid\n+    }\n+\n+    /// Set the UID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_uid(&mut self, uid: libc::uid_t) {\n+        self.0.sc_euid = uid;\n+    }\n+\n+    /// Get the current UID.\n+    #[must_use]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_uid(&self) -> libc::uid_t {\n+        self.0.sc_euid\n+    }\n+\n+    /// Set the GID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_gid(&mut self, gid: libc::gid_t) {\n+        self.0.sc_egid = gid;\n+    }\n+\n+    /// Get the current GID.\n+    #[must_use]\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_gid(&self) -> libc::gid_t {\n+        self.0.sc_egid\n+    }\n+}\n+\n #[cfg(target_os = \"netbsd\")]\n impl SocketCred {\n     /// Create a Unix credential struct.\n@@ -271,6 +347,7 @@ impl SocketCred {\n     }\n \n     /// Get the current PID.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn get_pid(&self) -> libc::pid_t {\n         self.0.sc_pid\n@@ -283,6 +360,7 @@ impl SocketCred {\n     }\n \n     /// Get the current UID.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn get_uid(&self) -> libc::uid_t {\n         self.0.sc_uid\n@@ -295,6 +373,7 @@ impl SocketCred {\n     }\n \n     /// Get the current GID.\n+    #[must_use]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn get_gid(&self) -> libc::gid_t {\n         self.0.sc_gid\n@@ -316,7 +395,13 @@ impl<'a> Iterator for ScmRights<'a> {\n     }\n }\n \n-#[cfg(all(doc, not(target_os = \"android\"), not(target_os = \"linux\"), not(target_os = \"netbsd\")))]\n+#[cfg(all(\n+    doc,\n+    not(target_os = \"android\"),\n+    not(target_os = \"linux\"),\n+    not(target_os = \"netbsd\"),\n+    not(target_os = \"freebsd\")\n+))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct ScmCredentials<'a>(AncillaryDataIter<'a, ()>);\n \n@@ -327,11 +412,21 @@ pub struct ScmCredentials<'a>(AncillaryDataIter<'a, ()>);\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::ucred>);\n \n+#[cfg(target_os = \"freebsd\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::sockcred2>);\n+\n #[cfg(target_os = \"netbsd\")]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::sockcred>);\n \n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n+#[cfg(any(\n+    doc,\n+    target_os = \"android\",\n+    target_os = \"linux\",\n+    target_os = \"netbsd\",\n+    target_os = \"freebsd\"\n+))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n impl<'a> Iterator for ScmCredentials<'a> {\n     type Item = SocketCred;\n@@ -353,7 +448,13 @@ pub enum AncillaryError {\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub enum AncillaryData<'a> {\n     ScmRights(ScmRights<'a>),\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n+    #[cfg(any(\n+        doc,\n+        target_os = \"android\",\n+        target_os = \"linux\",\n+        target_os = \"netbsd\",\n+        target_os = \"freebsd\"\n+    ))]\n     ScmCredentials(ScmCredentials<'a>),\n }\n \n@@ -376,7 +477,13 @@ impl<'a> AncillaryData<'a> {\n     ///\n     /// `data` must contain a valid control message and the control message must be type of\n     /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDS`.\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n+    #[cfg(any(\n+        doc,\n+        target_os = \"android\",\n+        target_os = \"linux\",\n+        target_os = \"netbsd\",\n+        target_os = \"freebsd\"\n+    ))]\n     unsafe fn as_credentials(data: &'a [u8]) -> Self {\n         let ancillary_data_iter = AncillaryDataIter::new(data);\n         let scm_credentials = ScmCredentials(ancillary_data_iter);\n@@ -395,6 +502,8 @@ impl<'a> AncillaryData<'a> {\n                     libc::SCM_RIGHTS => Ok(AncillaryData::as_rights(data)),\n                     #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n                     libc::SCM_CREDENTIALS => Ok(AncillaryData::as_credentials(data)),\n+                    #[cfg(target_os = \"freebsd\")]\n+                    libc::SCM_CREDS2 => Ok(AncillaryData::as_credentials(data)),\n                     #[cfg(target_os = \"netbsd\")]\n                     libc::SCM_CREDS => Ok(AncillaryData::as_credentials(data)),\n                     cmsg_type => {\n@@ -603,12 +712,18 @@ impl<'a> SocketAncillary<'a> {\n \n     /// Add credentials to the ancillary data.\n     ///\n-    /// The function returns `true` if there was enough space in the buffer.\n-    /// If there was not enough space then no credentials was appended.\n+    /// The function returns `true` if there is enough space in the buffer.\n+    /// If there is not enough space then no credentials will be appended.\n     /// Technically, that means this operation adds a control message with the level `SOL_SOCKET`\n-    /// and type `SCM_CREDENTIALS` or `SCM_CREDS`.\n-    ///\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n+    /// and type `SCM_CREDENTIALS`, `SCM_CREDS`, or `SCM_CREDS2`.\n+    ///\n+    #[cfg(any(\n+        doc,\n+        target_os = \"android\",\n+        target_os = \"linux\",\n+        target_os = \"netbsd\",\n+        target_os = \"freebsd\"\n+    ))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn add_creds(&mut self, creds: &[SocketCred]) -> bool {\n         self.truncated = false;\n@@ -617,8 +732,10 @@ impl<'a> SocketAncillary<'a> {\n             &mut self.length,\n             creds,\n             libc::SOL_SOCKET,\n-            #[cfg(not(target_os = \"netbsd\"))]\n+            #[cfg(not(any(target_os = \"netbsd\", target_os = \"freebsd\")))]\n             libc::SCM_CREDENTIALS,\n+            #[cfg(target_os = \"freebsd\")]\n+            libc::SCM_CREDS2,\n             #[cfg(target_os = \"netbsd\")]\n             libc::SCM_CREDS,\n         )"}, {"sha": "41cdcda4613f7eaec086c7664594f55d1fe6d9f5", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ed5c0f66ac18696c1b6388559b03ffc30b33e355/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5c0f66ac18696c1b6388559b03ffc30b33e355/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=ed5c0f66ac18696c1b6388559b03ffc30b33e355", "patch": "@@ -808,8 +808,24 @@ impl UnixDatagram {\n     ///\n     /// # Examples\n     ///\n-    #[cfg_attr(any(target_os = \"android\", target_os = \"linux\"), doc = \"```no_run\")]\n-    #[cfg_attr(not(any(target_os = \"android\", target_os = \"linux\")), doc = \"```ignore\")]\n+    #[cfg_attr(\n+        any(\n+            target_os = \"android\",\n+            target_os = \"linux\",\n+            target_os = \"netbsd\",\n+            target_os = \"freebsd\",\n+        ),\n+        doc = \"```no_run\"\n+    )]\n+    #[cfg_attr(\n+        not(any(\n+            target_os = \"android\",\n+            target_os = \"linux\",\n+            target_os = \"netbsd\",\n+            target_os = \"freebsd\"\n+        )),\n+        doc = \"```ignore\"\n+    )]\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::UnixDatagram;\n     ///\n@@ -819,7 +835,13 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n+    #[cfg(any(\n+        doc,\n+        target_os = \"android\",\n+        target_os = \"linux\",\n+        target_os = \"netbsd\",\n+        target_os = \"freebsd\"\n+    ))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         self.0.set_passcred(passcred)\n@@ -831,7 +853,13 @@ impl UnixDatagram {\n     /// Get the socket option `SO_PASSCRED`.\n     ///\n     /// [`set_passcred`]: UnixDatagram::set_passcred\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n+    #[cfg(any(\n+        doc,\n+        target_os = \"android\",\n+        target_os = \"linux\",\n+        target_os = \"netbsd\",\n+        target_os = \"freebsd\"\n+    ))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn passcred(&self) -> io::Result<bool> {\n         self.0.passcred()"}, {"sha": "5aa3fb92576c93984107a79779c080a60e975e6e", "filename": "library/std/src/os/unix/net/stream.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ed5c0f66ac18696c1b6388559b03ffc30b33e355/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5c0f66ac18696c1b6388559b03ffc30b33e355/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs?ref=ed5c0f66ac18696c1b6388559b03ffc30b33e355", "patch": "@@ -397,8 +397,24 @@ impl UnixStream {\n     ///\n     /// # Examples\n     ///\n-    #[cfg_attr(any(target_os = \"android\", target_os = \"linux\"), doc = \"```no_run\")]\n-    #[cfg_attr(not(any(target_os = \"android\", target_os = \"linux\")), doc = \"```ignore\")]\n+    #[cfg_attr(\n+        any(\n+            target_os = \"android\",\n+            target_os = \"linux\",\n+            target_os = \"netbsd\",\n+            target_os = \"freebsd\"\n+        ),\n+        doc = \"```no_run\"\n+    )]\n+    #[cfg_attr(\n+        not(any(\n+            target_os = \"android\",\n+            target_os = \"linux\",\n+            target_os = \"netbsd\",\n+            target_os = \"freebsd\"\n+        )),\n+        doc = \"```ignore\"\n+    )]\n     /// #![feature(unix_socket_ancillary_data)]\n     /// use std::os::unix::net::UnixStream;\n     ///\n@@ -408,7 +424,13 @@ impl UnixStream {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n+    #[cfg(any(\n+        doc,\n+        target_os = \"android\",\n+        target_os = \"linux\",\n+        target_os = \"netbsd\",\n+        target_os = \"freebsd\"\n+    ))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         self.0.set_passcred(passcred)\n@@ -420,7 +442,13 @@ impl UnixStream {\n     /// Get the socket option `SO_PASSCRED`.\n     ///\n     /// [`set_passcred`]: UnixStream::set_passcred\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n+    #[cfg(any(\n+        doc,\n+        target_os = \"android\",\n+        target_os = \"linux\",\n+        target_os = \"netbsd\",\n+        target_os = \"freebsd\"\n+    ))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn passcred(&self) -> io::Result<bool> {\n         self.0.passcred()"}, {"sha": "39f10c50dc4212c6371b77ead070422f9516d07a", "filename": "library/std/src/os/unix/net/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed5c0f66ac18696c1b6388559b03ffc30b33e355/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5c0f66ac18696c1b6388559b03ffc30b33e355/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Ftests.rs?ref=ed5c0f66ac18696c1b6388559b03ffc30b33e355", "patch": "@@ -646,7 +646,7 @@ fn test_send_vectored_fds_unix_stream() {\n     }\n }\n \n-#[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n+#[cfg(any(target_os = \"android\", target_os = \"linux\", target_os = \"freebsd\"))]\n #[test]\n fn test_send_vectored_with_ancillary_to_unix_datagram() {\n     fn getpid() -> libc::pid_t {"}, {"sha": "573bfa6587e8154fd13fd18f296fb6e86bcb46b7", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed5c0f66ac18696c1b6388559b03ffc30b33e355/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5c0f66ac18696c1b6388559b03ffc30b33e355/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=ed5c0f66ac18696c1b6388559b03ffc30b33e355", "patch": "@@ -443,6 +443,17 @@ impl Socket {\n         Ok(passcred != 0)\n     }\n \n+    #[cfg(target_os = \"freebsd\")]\n+    pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n+        setsockopt(self, libc::AF_LOCAL, libc::LOCAL_CREDS_PERSISTENT, passcred as libc::c_int)\n+    }\n+\n+    #[cfg(target_os = \"freebsd\")]\n+    pub fn passcred(&self) -> io::Result<bool> {\n+        let passcred: libc::c_int = getsockopt(self, libc::AF_LOCAL, libc::LOCAL_CREDS_PERSISTENT)?;\n+        Ok(passcred != 0)\n+    }\n+\n     #[cfg(not(any(target_os = \"solaris\", target_os = \"illumos\")))]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         let mut nonblocking = nonblocking as libc::c_int;"}, {"sha": "4c95169722a9d54eb610bc5135a3265654c85e87", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed5c0f66ac18696c1b6388559b03ffc30b33e355/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5c0f66ac18696c1b6388559b03ffc30b33e355/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=ed5c0f66ac18696c1b6388559b03ffc30b33e355", "patch": "@@ -125,6 +125,7 @@ const EXTRA_CHECK_CFGS: &[(Option<Mode>, &'static str, Option<&[&'static str]>)]\n     (Some(Mode::Std), \"no_rc\", None),\n     (Some(Mode::Std), \"no_sync\", None),\n     (Some(Mode::Std), \"freebsd12\", None),\n+    (Some(Mode::Std), \"freebsd13\", None),\n     (Some(Mode::Std), \"backtrace_in_libstd\", None),\n     /* Extra values not defined in the built-in targets yet, but used in std */\n     (Some(Mode::Std), \"target_env\", Some(&[\"libnx\"])),"}]}