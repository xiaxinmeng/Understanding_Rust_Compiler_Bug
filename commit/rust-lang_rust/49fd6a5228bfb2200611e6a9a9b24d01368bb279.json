{"sha": "49fd6a5228bfb2200611e6a9a9b24d01368bb279", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZmQ2YTUyMjhiZmIyMjAwNjExZTZhOWE5YjI0ZDAxMzY4YmIyNzk=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-01-09T21:27:10Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-01-10T20:14:19Z"}, "message": "Split Declaration out into it's own type", "tree": {"sha": "ae4cd3555e5504369d1d4dd66224e2e760335ad3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae4cd3555e5504369d1d4dd66224e2e760335ad3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49fd6a5228bfb2200611e6a9a9b24d01368bb279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49fd6a5228bfb2200611e6a9a9b24d01368bb279", "html_url": "https://github.com/rust-lang/rust/commit/49fd6a5228bfb2200611e6a9a9b24d01368bb279", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49fd6a5228bfb2200611e6a9a9b24d01368bb279/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc96ddfe695c2b3d2e9f28c3c5205a83a99a8ac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc96ddfe695c2b3d2e9f28c3c5205a83a99a8ac3", "html_url": "https://github.com/rust-lang/rust/commit/cc96ddfe695c2b3d2e9f28c3c5205a83a99a8ac3"}], "stats": {"total": 104, "additions": 55, "deletions": 49}, "files": [{"sha": "4d8deb21c8b7f03fd4e24a546d7208ade71693ce", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49fd6a5228bfb2200611e6a9a9b24d01368bb279/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49fd6a5228bfb2200611e6a9a9b24d01368bb279/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=49fd6a5228bfb2200611e6a9a9b24d01368bb279", "patch": "@@ -75,7 +75,9 @@ pub use crate::{\n     inlay_hints::{InlayHint, InlayKind},\n     line_index::{LineCol, LineIndex},\n     line_index_utils::translate_offset_with_edit,\n-    references::{Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult, SearchScope},\n+    references::{\n+        Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult, SearchScope,\n+    },\n     runnables::{Runnable, RunnableKind},\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n     syntax_highlighting::HighlightedRange,"}, {"sha": "2d20de1d047983682c4b7893a01979f4942c7062", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 52, "deletions": 48, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/49fd6a5228bfb2200611e6a9a9b24d01368bb279/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49fd6a5228bfb2200611e6a9a9b24d01368bb279/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=49fd6a5228bfb2200611e6a9a9b24d01368bb279", "patch": "@@ -37,11 +37,17 @@ pub use self::search_scope::SearchScope;\n \n #[derive(Debug, Clone)]\n pub struct ReferenceSearchResult {\n-    declaration: NavigationTarget,\n-    declaration_kind: ReferenceKind,\n+    declaration: Declaration,\n     references: Vec<Reference>,\n }\n \n+#[derive(Debug, Clone)]\n+pub struct Declaration {\n+    pub nav: NavigationTarget,\n+    pub kind: ReferenceKind,\n+    pub access: Option<ReferenceAccess>,\n+}\n+\n #[derive(Debug, Clone)]\n pub struct Reference {\n     pub file_range: FileRange,\n@@ -62,10 +68,14 @@ pub enum ReferenceAccess {\n }\n \n impl ReferenceSearchResult {\n-    pub fn declaration(&self) -> &NavigationTarget {\n+    pub fn declaration(&self) -> &Declaration {\n         &self.declaration\n     }\n \n+    pub fn decl_target(&self) -> &NavigationTarget {\n+        &self.declaration.nav\n+    }\n+\n     pub fn references(&self) -> &[Reference] {\n         &self.references\n     }\n@@ -88,11 +98,11 @@ impl IntoIterator for ReferenceSearchResult {\n         let mut v = Vec::with_capacity(self.len());\n         v.push(Reference {\n             file_range: FileRange {\n-                file_id: self.declaration.file_id(),\n-                range: self.declaration.range(),\n+                file_id: self.declaration.nav.file_id(),\n+                range: self.declaration.nav.range(),\n             },\n-            kind: self.declaration_kind,\n-            access: None,\n+            kind: self.declaration.kind,\n+            access: self.declaration.access,\n         });\n         v.append(&mut self.references);\n         v.into_iter()\n@@ -139,15 +149,14 @@ pub(crate) fn find_all_refs(\n         }\n     };\n \n+    let declaration = Declaration { nav: declaration, kind: ReferenceKind::Other, access: None };\n+\n     let references = process_definition(db, def, name, search_scope)\n         .into_iter()\n         .filter(|r| search_kind == ReferenceKind::Other || search_kind == r.kind)\n         .collect();\n \n-    Some(RangeInfo::new(\n-        range,\n-        ReferenceSearchResult { declaration, references, declaration_kind: ReferenceKind::Other },\n-    ))\n+    Some(RangeInfo::new(range, ReferenceSearchResult { declaration, references }))\n }\n \n fn find_name<'a>(\n@@ -259,7 +268,7 @@ fn access_mode(kind: NameKind, name_ref: &ast::NameRef) -> Option<ReferenceAcces\n mod tests {\n     use crate::{\n         mock_analysis::{analysis_and_position, single_file_with_position, MockAnalysis},\n-        Reference, ReferenceKind, ReferenceSearchResult, SearchScope,\n+        Declaration, Reference, ReferenceSearchResult, SearchScope,\n     };\n \n     #[test]\n@@ -279,8 +288,7 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(1) [5; 39) [12; 15)\",\n-            ReferenceKind::Other,\n+            \"Foo STRUCT_DEF FileId(1) [5; 39) [12; 15) Other\",\n             &[\"FileId(1) [142; 145) StructLiteral\"],\n         );\n     }\n@@ -303,8 +311,7 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"i BIND_PAT FileId(1) [33; 34)\",\n-            ReferenceKind::Other,\n+            \"i BIND_PAT FileId(1) [33; 34) Other\",\n             &[\n                 \"FileId(1) [67; 68) Other Write\",\n                 \"FileId(1) [71; 72) Other Read\",\n@@ -324,8 +331,7 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"i BIND_PAT FileId(1) [12; 13)\",\n-            ReferenceKind::Other,\n+            \"i BIND_PAT FileId(1) [12; 13) Other\",\n             &[\"FileId(1) [38; 39) Other Read\"],\n         );\n     }\n@@ -340,8 +346,7 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"i BIND_PAT FileId(1) [12; 13)\",\n-            ReferenceKind::Other,\n+            \"i BIND_PAT FileId(1) [12; 13) Other\",\n             &[\"FileId(1) [38; 39) Other Read\"],\n         );\n     }\n@@ -362,8 +367,7 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"spam RECORD_FIELD_DEF FileId(1) [66; 79) [70; 74)\",\n-            ReferenceKind::Other,\n+            \"spam RECORD_FIELD_DEF FileId(1) [66; 79) [70; 74) Other\",\n             &[\"FileId(1) [152; 156) Other Read\"],\n         );\n     }\n@@ -379,7 +383,7 @@ mod tests {\n         \"#;\n \n         let refs = get_all_refs(code);\n-        check_result(refs, \"f FN_DEF FileId(1) [88; 104) [91; 92)\", ReferenceKind::Other, &[]);\n+        check_result(refs, \"f FN_DEF FileId(1) [88; 104) [91; 92) Other\", &[]);\n     }\n \n     #[test]\n@@ -394,7 +398,7 @@ mod tests {\n         \"#;\n \n         let refs = get_all_refs(code);\n-        check_result(refs, \"B ENUM_VARIANT FileId(1) [83; 84) [83; 84)\", ReferenceKind::Other, &[]);\n+        check_result(refs, \"B ENUM_VARIANT FileId(1) [83; 84) [83; 84) Other\", &[]);\n     }\n \n     #[test]\n@@ -435,8 +439,7 @@ mod tests {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(2) [16; 50) [27; 30)\",\n-            ReferenceKind::Other,\n+            \"Foo STRUCT_DEF FileId(2) [16; 50) [27; 30) Other\",\n             &[\"FileId(1) [52; 55) StructLiteral\", \"FileId(3) [77; 80) StructLiteral\"],\n         );\n     }\n@@ -466,8 +469,7 @@ mod tests {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"foo SOURCE_FILE FileId(2) [0; 35)\",\n-            ReferenceKind::Other,\n+            \"foo SOURCE_FILE FileId(2) [0; 35) Other\",\n             &[\"FileId(1) [13; 16) Other\"],\n         );\n     }\n@@ -496,8 +498,7 @@ mod tests {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(3) [0; 41) [18; 21)\",\n-            ReferenceKind::Other,\n+            \"Foo STRUCT_DEF FileId(3) [0; 41) [18; 21) Other\",\n             &[\"FileId(2) [20; 23) Other\", \"FileId(2) [46; 49) StructLiteral\"],\n         );\n     }\n@@ -525,17 +526,15 @@ mod tests {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"quux FN_DEF FileId(1) [18; 34) [25; 29)\",\n-            ReferenceKind::Other,\n+            \"quux FN_DEF FileId(1) [18; 34) [25; 29) Other\",\n             &[\"FileId(2) [16; 20) Other\", \"FileId(3) [16; 20) Other\"],\n         );\n \n         let refs =\n             analysis.find_all_refs(pos, Some(SearchScope::single_file(bar))).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"quux FN_DEF FileId(1) [18; 34) [25; 29)\",\n-            ReferenceKind::Other,\n+            \"quux FN_DEF FileId(1) [18; 34) [25; 29) Other\",\n             &[\"FileId(3) [16; 20) Other\"],\n         );\n     }\n@@ -554,8 +553,7 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"m1 MACRO_CALL FileId(1) [9; 63) [46; 48)\",\n-            ReferenceKind::Other,\n+            \"m1 MACRO_CALL FileId(1) [9; 63) [46; 48) Other\",\n             &[\"FileId(1) [96; 98) Other\", \"FileId(1) [114; 116) Other\"],\n         );\n     }\n@@ -571,8 +569,7 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"i BIND_PAT FileId(1) [36; 37)\",\n-            ReferenceKind::Other,\n+            \"i BIND_PAT FileId(1) [36; 37) Other\",\n             &[\"FileId(1) [55; 56) Other Write\", \"FileId(1) [59; 60) Other Read\"],\n         );\n     }\n@@ -592,8 +589,7 @@ mod tests {\n         let refs = get_all_refs(code);\n         check_result(\n             refs,\n-            \"f RECORD_FIELD_DEF FileId(1) [32; 38) [32; 33)\",\n-            ReferenceKind::Other,\n+            \"f RECORD_FIELD_DEF FileId(1) [32; 38) [32; 33) Other\",\n             &[\"FileId(1) [96; 97) Other Read\", \"FileId(1) [117; 118) Other Write\"],\n         );\n     }\n@@ -603,19 +599,27 @@ mod tests {\n         analysis.find_all_refs(position, None).unwrap().unwrap()\n     }\n \n-    fn check_result(\n-        res: ReferenceSearchResult,\n-        expected_decl: &str,\n-        decl_kind: ReferenceKind,\n-        expected_refs: &[&str],\n-    ) {\n+    fn check_result(res: ReferenceSearchResult, expected_decl: &str, expected_refs: &[&str]) {\n         res.declaration().assert_match(expected_decl);\n-        assert_eq!(res.declaration_kind, decl_kind);\n-\n         assert_eq!(res.references.len(), expected_refs.len());\n         res.references().iter().enumerate().for_each(|(i, r)| r.assert_match(expected_refs[i]));\n     }\n \n+    impl Declaration {\n+        fn debug_render(&self) -> String {\n+            let mut s = format!(\"{} {:?}\", self.nav.debug_render(), self.kind);\n+            if let Some(access) = self.access {\n+                s.push_str(&format!(\" {:?}\", access));\n+            }\n+            s\n+        }\n+\n+        fn assert_match(&self, expected: &str) {\n+            let actual = self.debug_render();\n+            test_utils::assert_eq_text!(expected.trim(), actual.trim(),);\n+        }\n+    }\n+\n     impl Reference {\n         fn debug_render(&self) -> String {\n             let mut s = format!("}]}