{"sha": "af8604faddc44b27a59d1a719ff6ceca8bc145eb", "node_id": "C_kwDOAAsO6NoAKGFmODYwNGZhZGRjNDRiMjdhNTlkMWE3MTlmZjZjZWNhOGJjMTQ1ZWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-11T13:56:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-11T13:56:33Z"}, "message": "Auto merge of #94845 - Dylan-DPC:rollup-3phylaq, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #93283 (Fix for localized windows editions in testcase fn read_link() Issue#93211)\n - #94592 (Fallback to top-level config.toml if not present in current directory, and remove fallback for env vars and CLI flags)\n - #94776 (Optimize ascii::escape_default)\n - #94840 (update `replace_bound_vars_with_placeholders` doc comment)\n - #94842 (Remove unnecessary try_opt for operations that cannot fail)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3ebff941cb237e063071d52aab12375e4b77297d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ebff941cb237e063071d52aab12375e4b77297d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af8604faddc44b27a59d1a719ff6ceca8bc145eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af8604faddc44b27a59d1a719ff6ceca8bc145eb", "html_url": "https://github.com/rust-lang/rust/commit/af8604faddc44b27a59d1a719ff6ceca8bc145eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af8604faddc44b27a59d1a719ff6ceca8bc145eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f58d51b3c00b1e30acd75aead202eb2248bb33f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f58d51b3c00b1e30acd75aead202eb2248bb33f9", "html_url": "https://github.com/rust-lang/rust/commit/f58d51b3c00b1e30acd75aead202eb2248bb33f9"}, {"sha": "fb3d1264588181496f95ca484affcfcbd7005f74", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb3d1264588181496f95ca484affcfcbd7005f74", "html_url": "https://github.com/rust-lang/rust/commit/fb3d1264588181496f95ca484affcfcbd7005f74"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "73cc411e533d346545c45beba9ac9c2a7f4e1d40", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af8604faddc44b27a59d1a719ff6ceca8bc145eb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8604faddc44b27a59d1a719ff6ceca8bc145eb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=af8604faddc44b27a59d1a719ff6ceca8bc145eb", "patch": "@@ -58,14 +58,11 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n-    /// Replaces all regions (resp. types) bound by `binder` with placeholder\n-    /// regions (resp. types) and return a map indicating which bound-region\n-    /// placeholder region. This is the first step of checking subtyping\n-    /// when higher-ranked things are involved.\n+    /// Replaces all bound variables (lifetimes, types, and constants) bound by\n+    /// `binder` with placeholder variables.\n     ///\n-    /// **Important:** You have to be careful to not leak these placeholders,\n-    /// for more information about how placeholders and HRTBs work, see\n-    /// the [rustc dev guide].\n+    /// This is the first step of checking subtyping when higher-ranked things are involved.\n+    /// For more details visit the relevant sections of the [rustc dev guide].\n     ///\n     /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html\n     pub fn replace_bound_vars_with_placeholders<T>(&self, binder: ty::Binder<'tcx, T>) -> T"}, {"sha": "8a4cb78cc7f92f5a2fabedad3f3342389d7b3b48", "filename": "library/core/src/ascii.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af8604faddc44b27a59d1a719ff6ceca8bc145eb/library%2Fcore%2Fsrc%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8604faddc44b27a59d1a719ff6ceca8bc145eb/library%2Fcore%2Fsrc%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fascii.rs?ref=af8604faddc44b27a59d1a719ff6ceca8bc145eb", "patch": "@@ -98,22 +98,20 @@ pub fn escape_default(c: u8) -> EscapeDefault {\n         b'\\'' => ([b'\\\\', b'\\'', 0, 0], 2),\n         b'\"' => ([b'\\\\', b'\"', 0, 0], 2),\n         b'\\x20'..=b'\\x7e' => ([c, 0, 0, 0], 1),\n-        _ => ([b'\\\\', b'x', hexify(c >> 4), hexify(c & 0xf)], 4),\n+        _ => {\n+            let hex_digits: &[u8; 16] = b\"0123456789abcdef\";\n+            ([b'\\\\', b'x', hex_digits[(c >> 4) as usize], hex_digits[(c & 0xf) as usize]], 4)\n+        }\n     };\n \n     return EscapeDefault { range: 0..len, data };\n-\n-    fn hexify(b: u8) -> u8 {\n-        match b {\n-            0..=9 => b'0' + b,\n-            _ => b'a' + b - 10,\n-        }\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Iterator for EscapeDefault {\n     type Item = u8;\n+\n+    #[inline]\n     fn next(&mut self) -> Option<u8> {\n         self.range.next().map(|i| self.data[i as usize])\n     }"}, {"sha": "3665573ab0ff2577ee00c296113d8061be4f1b5d", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af8604faddc44b27a59d1a719ff6ceca8bc145eb/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8604faddc44b27a59d1a719ff6ceca8bc145eb/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=af8604faddc44b27a59d1a719ff6ceca8bc145eb", "patch": "@@ -2166,15 +2166,17 @@ macro_rules! int_impl {\n \n             let r = try_opt!(self.checked_rem(rhs));\n             let m = if (r > 0 && rhs < 0) || (r < 0 && rhs > 0) {\n-                try_opt!(r.checked_add(rhs))\n+                // r + rhs cannot overflow because they have opposite signs\n+                r + rhs\n             } else {\n                 r\n             };\n \n             if m == 0 {\n                 Some(self)\n             } else {\n-                self.checked_add(try_opt!(rhs.checked_sub(m)))\n+                // rhs - m cannot overflow because m has the same sign as rhs\n+                self.checked_add(rhs - m)\n             }\n         }\n "}, {"sha": "baa23e08fe774fa70f6ed20bdc168f33312edf89", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af8604faddc44b27a59d1a719ff6ceca8bc145eb/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8604faddc44b27a59d1a719ff6ceca8bc145eb/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=af8604faddc44b27a59d1a719ff6ceca8bc145eb", "patch": "@@ -2119,7 +2119,8 @@ macro_rules! uint_impl {\n         pub const fn checked_next_multiple_of(self, rhs: Self) -> Option<Self> {\n             match try_opt!(self.checked_rem(rhs)) {\n                 0 => Some(self),\n-                r => self.checked_add(try_opt!(rhs.checked_sub(r)))\n+                // rhs - r cannot overflow because r is smaller than rhs\n+                r => self.checked_add(rhs - r)\n             }\n         }\n "}, {"sha": "6d67c396c623a759ba323ce421f22c01577d894e", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af8604faddc44b27a59d1a719ff6ceca8bc145eb/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8604faddc44b27a59d1a719ff6ceca8bc145eb/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=af8604faddc44b27a59d1a719ff6ceca8bc145eb", "patch": "@@ -1,5 +1,6 @@\n use crate::io::prelude::*;\n \n+use crate::env;\n use crate::fs::{self, File, OpenOptions};\n use crate::io::{ErrorKind, SeekFrom};\n use crate::path::Path;\n@@ -906,7 +907,14 @@ fn read_link() {\n         // junction\n         assert_eq!(check!(fs::read_link(r\"C:\\Users\\Default User\")), Path::new(r\"C:\\Users\\Default\"));\n         // junction with special permissions\n-        assert_eq!(check!(fs::read_link(r\"C:\\Documents and Settings\\\")), Path::new(r\"C:\\Users\"));\n+        // Since not all localized windows versions contain the folder \"Documents and Settings\" in english,\n+        // we will briefly check, if it exists and otherwise skip the test. Except during CI we will always execute the test.\n+        if Path::new(r\"C:\\Documents and Settings\\\").exists() || env::var_os(\"CI\").is_some() {\n+            assert_eq!(\n+                check!(fs::read_link(r\"C:\\Documents and Settings\\\")),\n+                Path::new(r\"C:\\Users\")\n+            );\n+        }\n     }\n     let tmpdir = tmpdir();\n     let link = tmpdir.join(\"link\");"}, {"sha": "71b8f3c4553bce5140bc6df271b2b181fd58c661", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af8604faddc44b27a59d1a719ff6ceca8bc145eb/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/af8604faddc44b27a59d1a719ff6ceca8bc145eb/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=af8604faddc44b27a59d1a719ff6ceca8bc145eb", "patch": "@@ -1233,16 +1233,18 @@ def bootstrap(help_triggered):\n     build.verbose = args.verbose\n     build.clean = args.clean\n \n-    # Read from `--config`, then `RUST_BOOTSTRAP_CONFIG`, then fallback to `config.toml` (if it\n-    # exists).\n+    # Read from `--config`, then `RUST_BOOTSTRAP_CONFIG`, then `./config.toml`,\n+    # then `config.toml` in the root directory.\n     toml_path = args.config or os.getenv('RUST_BOOTSTRAP_CONFIG')\n-    if not toml_path and os.path.exists('config.toml'):\n+    using_default_path = toml_path is None\n+    if using_default_path:\n         toml_path = 'config.toml'\n-\n-    if toml_path:\n         if not os.path.exists(toml_path):\n             toml_path = os.path.join(build.rust_root, toml_path)\n \n+    # Give a hard error if `--config` or `RUST_BOOTSTRAP_CONFIG` are set to a missing path,\n+    # but not if `config.toml` hasn't been created.\n+    if not using_default_path or os.path.exists(toml_path):\n         with open(toml_path) as config:\n             build.config_toml = config.read()\n "}, {"sha": "0c0a4733231d22e07bbbcc910eb1bda673a01f0d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/af8604faddc44b27a59d1a719ff6ceca8bc145eb/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af8604faddc44b27a59d1a719ff6ceca8bc145eb/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=af8604faddc44b27a59d1a719ff6ceca8bc145eb", "patch": "@@ -647,7 +647,8 @@ impl Config {\n         let get_toml = |file: &Path| {\n             use std::process;\n \n-            let contents = t!(fs::read_to_string(file), \"`include` config not found\");\n+            let contents =\n+                t!(fs::read_to_string(file), format!(\"config file {} not found\", file.display()));\n             match toml::from_str(&contents) {\n                 Ok(table) => table,\n                 Err(err) => {\n@@ -657,14 +658,24 @@ impl Config {\n             }\n         };\n \n-        // check --config first, then `$RUST_BOOTSTRAP_CONFIG` first, then `config.toml`\n+        // Read from `--config`, then `RUST_BOOTSTRAP_CONFIG`, then `./config.toml`, then `config.toml` in the root directory.\n         let toml_path = flags\n             .config\n             .clone()\n-            .or_else(|| env::var_os(\"RUST_BOOTSTRAP_CONFIG\").map(PathBuf::from))\n-            .unwrap_or_else(|| PathBuf::from(\"config.toml\"));\n-        let mut toml =\n-            if toml_path.exists() { get_toml(&toml_path) } else { TomlConfig::default() };\n+            .or_else(|| env::var_os(\"RUST_BOOTSTRAP_CONFIG\").map(PathBuf::from));\n+        let using_default_path = toml_path.is_none();\n+        let mut toml_path = toml_path.unwrap_or_else(|| PathBuf::from(\"config.toml\"));\n+        if using_default_path && !toml_path.exists() {\n+            toml_path = config.src.join(toml_path);\n+        }\n+\n+        // Give a hard error if `--config` or `RUST_BOOTSTRAP_CONFIG` are set to a missing path,\n+        // but not if `config.toml` hasn't been created.\n+        let mut toml = if !using_default_path || toml_path.exists() {\n+            get_toml(&toml_path)\n+        } else {\n+            TomlConfig::default()\n+        };\n \n         if let Some(include) = &toml.profile {\n             let mut include_path = config.src.clone();"}]}