{"sha": "339f8163d643ff98df897572a9cfb395cb6496b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOWY4MTYzZDY0M2ZmOThkZjg5NzU3MmE5Y2ZiMzk1Y2I2NDk2YjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-14T13:41:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-14T13:41:26Z"}, "message": "auto merge of #12875 : alexcrichton/rust/demangle-more-things, r=brson\n\nAdd some more infrastructure support for demangling `$`-sequences, as well as fixing demangling of closure symbol names if there's more than one closure in a function.", "tree": {"sha": "bc48256b8b4aa17352bb27d469275820009685a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc48256b8b4aa17352bb27d469275820009685a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/339f8163d643ff98df897572a9cfb395cb6496b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/339f8163d643ff98df897572a9cfb395cb6496b2", "html_url": "https://github.com/rust-lang/rust/commit/339f8163d643ff98df897572a9cfb395cb6496b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/339f8163d643ff98df897572a9cfb395cb6496b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c7ebee1ac65151835f8b82d7140d52402c22c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c7ebee1ac65151835f8b82d7140d52402c22c2", "html_url": "https://github.com/rust-lang/rust/commit/a1c7ebee1ac65151835f8b82d7140d52402c22c2"}, {"sha": "a07149b138fc1ff19d8a8510cf703ecb811961fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a07149b138fc1ff19d8a8510cf703ecb811961fd", "html_url": "https://github.com/rust-lang/rust/commit/a07149b138fc1ff19d8a8510cf703ecb811961fd"}], "stats": {"total": 68, "additions": 60, "deletions": 8}, "files": [{"sha": "bfe5d5187d79da9f080d132c54fe9f842cb34884", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/339f8163d643ff98df897572a9cfb395cb6496b2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339f8163d643ff98df897572a9cfb395cb6496b2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=339f8163d643ff98df897572a9cfb395cb6496b2", "patch": "@@ -103,8 +103,13 @@ pub fn return_type_is_void(ccx: &CrateContext, ty: ty::t) -> bool {\n     ty::type_is_nil(ty) || ty::type_is_bot(ty) || ty::type_is_empty(ccx.tcx, ty)\n }\n \n+/// Generates a unique symbol based off the name given. This is used to create\n+/// unique symbols for things like closures.\n pub fn gensym_name(name: &str) -> PathElem {\n-    PathName(token::gensym(name))\n+    let num = token::gensym(name);\n+    // use one colon which will get translated to a period by the mangler, and\n+    // we're guaranteed that `num` is globally unique for this crate.\n+    PathName(token::gensym(format!(\"{}:{}\", name, num)))\n }\n \n pub struct tydesc_info {"}, {"sha": "831f6c73e35f17bb98d50076f112fa81f990a029", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/339f8163d643ff98df897572a9cfb395cb6496b2/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339f8163d643ff98df897572a9cfb395cb6496b2/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=339f8163d643ff98df897572a9cfb395cb6496b2", "patch": "@@ -91,8 +91,47 @@ fn demangle(writer: &mut Writer, s: &str) -> IoResult<()> {\n                 rest = rest.slice_from(1);\n             }\n             let i: uint = from_str(s.slice_to(s.len() - rest.len())).unwrap();\n-            try!(writer.write_str(rest.slice_to(i)));\n             s = rest.slice_from(i);\n+            rest = rest.slice_to(i);\n+            loop {\n+                if rest.starts_with(\"$\") {\n+                    macro_rules! demangle(\n+                        ($($pat:expr => $demangled:expr),*) => ({\n+                            $(if rest.starts_with($pat) {\n+                                try!(writer.write_str($demangled));\n+                                rest = rest.slice_from($pat.len());\n+                              } else)*\n+                            {\n+                                try!(writer.write_str(rest));\n+                                break;\n+                            }\n+\n+                        })\n+                    )\n+                    // see src/librustc/back/link.rs for these mappings\n+                    demangle! (\n+                        \"$SP$\" => \"@\",\n+                        \"$UP$\" => \"~\",\n+                        \"$RP$\" => \"*\",\n+                        \"$BP$\" => \"&\",\n+                        \"$LT$\" => \"<\",\n+                        \"$GT$\" => \">\",\n+                        \"$LP$\" => \"(\",\n+                        \"$RP$\" => \")\",\n+                        \"$C$\"  => \",\",\n+\n+                        // in theory we can demangle any unicode code point, but\n+                        // for simplicity we just catch the common ones.\n+                        \"$x20\" => \" \",\n+                        \"$x27\" => \"'\",\n+                        \"$x5b\" => \"[\",\n+                        \"$x5d\" => \"]\"\n+                    )\n+                } else {\n+                    try!(writer.write_str(rest));\n+                    break;\n+                }\n+            }\n         }\n     }\n \n@@ -698,17 +737,25 @@ mod test {\n     use io::MemWriter;\n     use str;\n \n+    macro_rules! t( ($a:expr, $b:expr) => ({\n+        let mut m = MemWriter::new();\n+        super::demangle(&mut m, $a).unwrap();\n+        assert_eq!(str::from_utf8_owned(m.unwrap()).unwrap(), $b.to_owned());\n+    }) )\n+\n     #[test]\n     fn demangle() {\n-        macro_rules! t( ($a:expr, $b:expr) => ({\n-            let mut m = MemWriter::new();\n-            super::demangle(&mut m, $a);\n-            assert_eq!(str::from_utf8_owned(m.unwrap()).unwrap(), $b.to_owned());\n-        }) )\n-\n         t!(\"test\", \"test\");\n         t!(\"_ZN4testE\", \"test\");\n         t!(\"_ZN4test\", \"_ZN4test\");\n         t!(\"_ZN4test1a2bcE\", \"test::a::bc\");\n     }\n+\n+    #[test]\n+    fn demangle_dollars() {\n+        t!(\"_ZN4$UP$E\", \"~\");\n+        t!(\"_ZN8$UP$testE\", \"~test\");\n+        t!(\"_ZN8$UP$test4foobE\", \"~test::foob\");\n+        t!(\"_ZN8$x20test4foobE\", \" test::foob\");\n+    }\n }"}]}