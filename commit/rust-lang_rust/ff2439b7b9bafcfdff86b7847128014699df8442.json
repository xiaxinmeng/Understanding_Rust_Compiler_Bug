{"sha": "ff2439b7b9bafcfdff86b7847128014699df8442", "node_id": "C_kwDOAAsO6NoAKGZmMjQzOWI3YjliYWZjZmRmZjg2Yjc4NDcxMjgwMTQ2OTlkZjg0NDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-03T16:26:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-03T16:26:01Z"}, "message": "Auto merge of #91491 - spastorino:revert-91354, r=oli-obk\n\nRevert \"Auto merge of #91354 - fee1-dead:const_env, r=spastorino\"\n\nThis reverts commit 18bb8c61a975fff6424cda831ace5b0404277145, reversing\nchanges made to d9baa361902b172be716f96619b909f340802dea.\n\nReverts #91354 in order to address #91489. We would need to place this changes in a more granular way and would also be nice to address the small perf regression that was also introduced.\n\nr? `@oli-obk`\ncc `@fee1-dead`", "tree": {"sha": "c2ff656fc3ca340a25e09b60b7e24fdae93082fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2ff656fc3ca340a25e09b60b7e24fdae93082fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff2439b7b9bafcfdff86b7847128014699df8442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2439b7b9bafcfdff86b7847128014699df8442", "html_url": "https://github.com/rust-lang/rust/commit/ff2439b7b9bafcfdff86b7847128014699df8442", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff2439b7b9bafcfdff86b7847128014699df8442/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a9e0831d6603d87220cedd1b1293e2eb82ef55c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9e0831d6603d87220cedd1b1293e2eb82ef55c", "html_url": "https://github.com/rust-lang/rust/commit/2a9e0831d6603d87220cedd1b1293e2eb82ef55c"}, {"sha": "85b723c4e6c88fc5d7e1e3f6b3c86711144882b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/85b723c4e6c88fc5d7e1e3f6b3c86711144882b5", "html_url": "https://github.com/rust-lang/rust/commit/85b723c4e6c88fc5d7e1e3f6b3c86711144882b5"}], "stats": {"total": 804, "additions": 428, "deletions": 376}, "files": [{"sha": "da26d9c7b87790e85e784cf889e28fc92796f187", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -31,7 +31,7 @@ use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef, UserSubsts};\n use rustc_middle::ty::{\n     self, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, OpaqueTypeKey, RegionVid,\n-    ToPredicate, Ty, TyCtxt, UserType, UserTypeAnnotationIndex,\n+    ToPredicate, Ty, TyCtxt, UserType, UserTypeAnnotationIndex, WithConstness,\n };\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::{Span, DUMMY_SP};"}, {"sha": "6d3a89c0a8a5ba3927510556463c1b55d4397baa", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -7,7 +7,6 @@ use crate::interpret::{\n };\n \n use rustc_errors::ErrorReported;\n-use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -216,7 +215,6 @@ pub fn eval_to_const_value_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::EvalToConstValueResult<'tcx> {\n-    assert!(key.param_env.constness() == hir::Constness::Const);\n     // see comment in eval_to_allocation_raw_provider for what we're doing here\n     if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n@@ -251,7 +249,6 @@ pub fn eval_to_allocation_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::EvalToAllocationRawResult<'tcx> {\n-    assert!(key.param_env.constness() == hir::Constness::Const);\n     // Because the constant is computed twice (once per value of `Reveal`), we are at risk of\n     // reporting the same error twice here. To resolve this, we check whether we can evaluate the\n     // constant in the more restrictive `Reveal::UserFacing`, which most likely already was"}, {"sha": "cf084faade8cc6c69e8e5cabbe3fc13f7cc63b73", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -918,7 +918,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         } else {\n             self.param_env\n         };\n-        let param_env = param_env.with_const();\n         let val = self.tcx.eval_to_allocation_raw(param_env.and(gid))?;\n         self.raw_const_to_mplace(val)\n     }"}, {"sha": "274665ccd98364f7f4f90d060247840e6f4ca46e", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -817,7 +817,8 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                     );\n \n                     let implsrc = tcx.infer_ctxt().enter(|infcx| {\n-                        let mut selcx = SelectionContext::new(&infcx);\n+                        let mut selcx =\n+                            SelectionContext::with_constness(&infcx, hir::Constness::Const);\n                         selcx.select(&obligation)\n                     });\n "}, {"sha": "abc5a3c6a5206b352fe017a1f5dbef97b286d265", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -3,6 +3,7 @@\n //! See the `Qualif` trait for more info.\n \n use rustc_errors::ErrorReported;\n+use rustc_hir as hir;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, subst::SubstsRef, AdtDef, Ty};\n@@ -166,7 +167,7 @@ impl Qualif for NeedsNonConstDrop {\n         );\n \n         let implsrc = cx.tcx.infer_ctxt().enter(|infcx| {\n-            let mut selcx = SelectionContext::new(&infcx);\n+            let mut selcx = SelectionContext::with_constness(&infcx, hir::Constness::Const);\n             selcx.select(&obligation)\n         });\n         !matches!("}, {"sha": "2466e69f83646b0ab092d3fc3b7066030989315e", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -3230,6 +3230,31 @@ impl<'hir> Node<'hir> {\n         }\n     }\n \n+    /// Returns `Constness::Const` when this node is a const fn/impl/item.\n+    pub fn constness_for_typeck(&self) -> Constness {\n+        match self {\n+            Node::Item(Item {\n+                kind: ItemKind::Fn(FnSig { header: FnHeader { constness, .. }, .. }, ..),\n+                ..\n+            })\n+            | Node::TraitItem(TraitItem {\n+                kind: TraitItemKind::Fn(FnSig { header: FnHeader { constness, .. }, .. }, ..),\n+                ..\n+            })\n+            | Node::ImplItem(ImplItem {\n+                kind: ImplItemKind::Fn(FnSig { header: FnHeader { constness, .. }, .. }, ..),\n+                ..\n+            })\n+            | Node::Item(Item { kind: ItemKind::Impl(Impl { constness, .. }), .. }) => *constness,\n+\n+            Node::Item(Item { kind: ItemKind::Const(..), .. })\n+            | Node::TraitItem(TraitItem { kind: TraitItemKind::Const(..), .. })\n+            | Node::ImplItem(ImplItem { kind: ImplItemKind::Const(..), .. }) => Constness::Const,\n+\n+            _ => Constness::NotConst,\n+        }\n+    }\n+\n     pub fn as_owner(self) -> Option<OwnerNode<'hir>> {\n         match self {\n             Node::Item(i) => Some(OwnerNode::Item(i)),"}, {"sha": "152a395c871be44a6008ba8cb46bd81c9094548a", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -1,8 +1,9 @@\n use crate::infer::InferCtxt;\n use crate::traits::Obligation;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_middle::ty::{self, ToPredicate, Ty};\n+use rustc_middle::ty::{self, ToPredicate, Ty, WithConstness};\n \n use super::FulfillmentError;\n use super::{ObligationCause, PredicateObligation};\n@@ -47,9 +48,26 @@ pub trait TraitEngine<'tcx>: 'tcx {\n \n     fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>>;\n \n+    fn select_all_with_constness_or_error(\n+        &mut self,\n+        infcx: &InferCtxt<'_, 'tcx>,\n+        _constness: hir::Constness,\n+    ) -> Vec<FulfillmentError<'tcx>> {\n+        self.select_all_or_error(infcx)\n+    }\n+\n     fn select_where_possible(&mut self, infcx: &InferCtxt<'_, 'tcx>)\n     -> Vec<FulfillmentError<'tcx>>;\n \n+    // FIXME(fee1-dead) this should not provide a default body for chalk as chalk should be updated\n+    fn select_with_constness_where_possible(\n+        &mut self,\n+        infcx: &InferCtxt<'_, 'tcx>,\n+        _constness: hir::Constness,\n+    ) -> Vec<FulfillmentError<'tcx>> {\n+        self.select_where_possible(infcx)\n+    }\n+\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>>;\n \n     fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships>;"}, {"sha": "e8622b3c819d2316316daa9c3a46aaddcc35181d", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -69,16 +69,6 @@ impl PredicateObligation<'tcx> {\n     }\n }\n \n-impl TraitObligation<'tcx> {\n-    /// Returns `true` if the trait predicate is considered `const` in its ParamEnv.\n-    pub fn is_const(&self) -> bool {\n-        match (self.predicate.skip_binder().constness, self.param_env.constness()) {\n-            (ty::BoundConstness::ConstIfConst, hir::Constness::Const) => true,\n-            _ => false,\n-        }\n-    }\n-}\n-\n // `PredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(PredicateObligation<'_>, 32);"}, {"sha": "92f74af4eb3eb930959168337dd0911572a85803", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -3,7 +3,7 @@ use smallvec::smallvec;\n use crate::infer::outlives::components::{push_outlives_components, Component};\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n-use rustc_middle::ty::{self, ToPredicate, TyCtxt};\n+use rustc_middle::ty::{self, ToPredicate, TyCtxt, WithConstness};\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n@@ -328,8 +328,8 @@ pub fn transitive_bounds_that_define_assoc_type<'tcx>(\n                 ));\n                 for (super_predicate, _) in super_predicates.predicates {\n                     let subst_predicate = super_predicate.subst_supertrait(tcx, &trait_ref);\n-                    if let Some(binder) = subst_predicate.to_opt_poly_trait_pred() {\n-                        stack.push(binder.map_bound(|t| t.trait_ref));\n+                    if let Some(binder) = subst_predicate.to_opt_poly_trait_ref() {\n+                        stack.push(binder.value);\n                     }\n                 }\n \n@@ -362,8 +362,8 @@ impl<'tcx, I: Iterator<Item = PredicateObligation<'tcx>>> Iterator for FilterToT\n \n     fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> {\n         while let Some(obligation) = self.base_iterator.next() {\n-            if let Some(data) = obligation.predicate.to_opt_poly_trait_pred() {\n-                return Some(data.map_bound(|t| t.trait_ref));\n+            if let Some(data) = obligation.predicate.to_opt_poly_trait_ref() {\n+                return Some(data.value);\n             }\n         }\n         None"}, {"sha": "5c4c2eee21fc1e5c954720987ee08f079a97b44f", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -474,8 +474,7 @@ impl<'hir> Map<'hir> {\n     /// Panics if `LocalDefId` does not have an associated body.\n     ///\n     /// This should only be used for determining the context of a body, a return\n-    /// value of `Some` does not always suggest that the owner of the body is `const`,\n-    /// just that it has to be checked as if it were.\n+    /// value of `Some` does not always suggest that the owner of the body is `const`.\n     pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {\n         let hir_id = self.local_def_id_to_hir_id(did);\n         let ccx = match self.body_owner_kind(hir_id) {"}, {"sha": "c63613ae3af29b097ea4a562f0c9bd5505869746", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -64,7 +64,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         cid: GlobalId<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n-        let param_env = param_env.with_const();\n         // Const-eval shouldn't depend on lifetimes at all, so we can erase them, which should\n         // improve caching of queries.\n         let inputs = self.erase_regions(param_env.and(cid));\n@@ -93,7 +92,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         gid: GlobalId<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Result<&'tcx mir::Allocation, ErrorHandled> {\n-        let param_env = param_env.with_const();\n         trace!(\"eval_to_allocation: Need to compute {:?}\", gid);\n         let raw_const = self.eval_to_allocation_raw(param_env.and(gid))?;\n         Ok(self.global_alloc(raw_const.alloc_id).unwrap_memory())"}, {"sha": "560660517f34b27ab7134b515951762b6e9c8133", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -12,12 +12,14 @@ use rustc_hir::def_id::DefId;\n use rustc_query_system::cache::Cache;\n \n pub type SelectionCache<'tcx> = Cache<\n-    ty::ParamEnvAnd<'tcx, ty::TraitPredicate<'tcx>>,\n+    (ty::ConstnessAnd<ty::ParamEnvAnd<'tcx, ty::TraitRef<'tcx>>>, ty::ImplPolarity),\n     SelectionResult<'tcx, SelectionCandidate<'tcx>>,\n >;\n \n-pub type EvaluationCache<'tcx> =\n-    Cache<ty::ParamEnvAnd<'tcx, ty::PolyTraitPredicate<'tcx>>, EvaluationResult>;\n+pub type EvaluationCache<'tcx> = Cache<\n+    (ty::ParamEnvAnd<'tcx, ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>>, ty::ImplPolarity),\n+    EvaluationResult,\n+>;\n \n /// The selection process begins by considering all impls, where\n /// clauses, and so forth that might resolve an obligation. Sometimes\n@@ -101,7 +103,7 @@ pub enum SelectionCandidate<'tcx> {\n         /// `false` if there are no *further* obligations.\n         has_nested: bool,\n     },\n-    ParamCandidate(ty::PolyTraitPredicate<'tcx>),\n+    ParamCandidate((ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>, ty::ImplPolarity)),\n     ImplCandidate(DefId),\n     AutoImplCandidate(DefId),\n "}, {"sha": "3490c6881704a62e0ca642dcaa2317fc02ed9d0b", "filename": "compiler/rustc_middle/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Futil.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -26,9 +26,9 @@ impl<'tcx> Elaborator<'tcx> {\n             .predicates\n             .into_iter()\n             .flat_map(|(pred, _)| {\n-                pred.subst_supertrait(self.tcx, &trait_ref).to_opt_poly_trait_pred()\n+                pred.subst_supertrait(self.tcx, &trait_ref).to_opt_poly_trait_ref()\n             })\n-            .map(|t| t.map_bound(|pred| pred.trait_ref))\n+            .map(|t| t.value)\n             .filter(|supertrait_ref| self.visited.insert(*supertrait_ref));\n \n         self.stack.extend(supertrait_refs);"}, {"sha": "5070e1565b3d409c07bcc4c04259377bad57d4c8", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 53, "deletions": 77, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -230,19 +230,6 @@ pub enum BoundConstness {\n     ConstIfConst,\n }\n \n-impl BoundConstness {\n-    /// Reduce `self` and `constness` to two possible combined states instead of four.\n-    pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {\n-        match (constness, self) {\n-            (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,\n-            (_, this) => {\n-                *this = BoundConstness::NotConst;\n-                hir::Constness::NotConst\n-            }\n-        }\n-    }\n-}\n-\n impl fmt::Display for BoundConstness {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n@@ -859,6 +846,20 @@ impl ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {\n     }\n }\n \n+impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitRef<'tcx>> {\n+    fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n+        self.value\n+            .map_bound(|trait_ref| {\n+                PredicateKind::Trait(ty::TraitPredicate {\n+                    trait_ref,\n+                    constness: self.constness,\n+                    polarity: ty::ImplPolarity::Positive,\n+                })\n+            })\n+            .to_predicate(tcx)\n+    }\n+}\n+\n impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.map_bound(PredicateKind::Trait).to_predicate(tcx)\n@@ -884,10 +885,12 @@ impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n }\n \n impl<'tcx> Predicate<'tcx> {\n-    pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {\n+    pub fn to_opt_poly_trait_ref(self) -> Option<ConstnessAnd<PolyTraitRef<'tcx>>> {\n         let predicate = self.kind();\n         match predicate.skip_binder() {\n-            PredicateKind::Trait(t) => Some(predicate.rebind(t)),\n+            PredicateKind::Trait(t) => {\n+                Some(ConstnessAnd { constness: t.constness, value: predicate.rebind(t.trait_ref) })\n+            }\n             PredicateKind::Projection(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n@@ -1218,33 +1221,23 @@ pub struct ParamEnv<'tcx> {\n     /// want `Reveal::All`.\n     ///\n     /// Note: This is packed, use the reveal() method to access it.\n-    packed: CopyTaggedPtr<&'tcx List<Predicate<'tcx>>, ParamTag, true>,\n+    packed: CopyTaggedPtr<&'tcx List<Predicate<'tcx>>, traits::Reveal, true>,\n }\n \n-#[derive(Copy, Clone)]\n-struct ParamTag {\n-    reveal: traits::Reveal,\n-    constness: hir::Constness,\n-}\n-\n-unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {\n-    const BITS: usize = 2;\n+unsafe impl rustc_data_structures::tagged_ptr::Tag for traits::Reveal {\n+    const BITS: usize = 1;\n     #[inline]\n     fn into_usize(self) -> usize {\n         match self {\n-            Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,\n-            Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,\n-            Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,\n-            Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,\n+            traits::Reveal::UserFacing => 0,\n+            traits::Reveal::All => 1,\n         }\n     }\n     #[inline]\n     unsafe fn from_usize(ptr: usize) -> Self {\n         match ptr {\n-            0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },\n-            1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },\n-            2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },\n-            3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },\n+            0 => traits::Reveal::UserFacing,\n+            1 => traits::Reveal::All,\n             _ => std::hint::unreachable_unchecked(),\n         }\n     }\n@@ -1255,7 +1248,6 @@ impl<'tcx> fmt::Debug for ParamEnv<'tcx> {\n         f.debug_struct(\"ParamEnv\")\n             .field(\"caller_bounds\", &self.caller_bounds())\n             .field(\"reveal\", &self.reveal())\n-            .field(\"constness\", &self.constness())\n             .finish()\n     }\n }\n@@ -1264,7 +1256,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ParamEnv<'tcx> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         self.caller_bounds().hash_stable(hcx, hasher);\n         self.reveal().hash_stable(hcx, hasher);\n-        self.constness().hash_stable(hcx, hasher);\n     }\n }\n \n@@ -1276,14 +1267,12 @@ impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n         Ok(ParamEnv::new(\n             self.caller_bounds().try_fold_with(folder)?,\n             self.reveal().try_fold_with(folder)?,\n-            self.constness().try_fold_with(folder)?,\n         ))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n         self.caller_bounds().visit_with(visitor)?;\n-        self.reveal().visit_with(visitor)?;\n-        self.constness().visit_with(visitor)\n+        self.reveal().visit_with(visitor)\n     }\n }\n \n@@ -1294,7 +1283,7 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// type-checking.\n     #[inline]\n     pub fn empty() -> Self {\n-        Self::new(List::empty(), Reveal::UserFacing, hir::Constness::NotConst)\n+        Self::new(List::empty(), Reveal::UserFacing)\n     }\n \n     #[inline]\n@@ -1304,12 +1293,7 @@ impl<'tcx> ParamEnv<'tcx> {\n \n     #[inline]\n     pub fn reveal(self) -> traits::Reveal {\n-        self.packed.tag().reveal\n-    }\n-\n-    #[inline]\n-    pub fn constness(self) -> hir::Constness {\n-        self.packed.tag().constness\n+        self.packed.tag()\n     }\n \n     /// Construct a trait environment with no where-clauses in scope\n@@ -1321,31 +1305,17 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// or invoke `param_env.with_reveal_all()`.\n     #[inline]\n     pub fn reveal_all() -> Self {\n-        Self::new(List::empty(), Reveal::All, hir::Constness::NotConst)\n+        Self::new(List::empty(), Reveal::All)\n     }\n \n     /// Construct a trait environment with the given set of predicates.\n     #[inline]\n-    pub fn new(\n-        caller_bounds: &'tcx List<Predicate<'tcx>>,\n-        reveal: Reveal,\n-        constness: hir::Constness,\n-    ) -> Self {\n-        ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }\n+    pub fn new(caller_bounds: &'tcx List<Predicate<'tcx>>, reveal: Reveal) -> Self {\n+        ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, reveal) }\n     }\n \n     pub fn with_user_facing(mut self) -> Self {\n-        self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });\n-        self\n-    }\n-\n-    pub fn with_constness(mut self, constness: hir::Constness) -> Self {\n-        self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });\n-        self\n-    }\n-\n-    pub fn with_const(mut self) -> Self {\n-        self.packed.set_tag(ParamTag { constness: hir::Constness::Const, ..self.packed.tag() });\n+        self.packed.set_tag(Reveal::UserFacing);\n         self\n     }\n \n@@ -1359,21 +1329,17 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// will be normalized to their underlying types.\n     /// See PR #65989 and issue #65918 for more details\n     pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {\n-        if self.packed.tag().reveal == traits::Reveal::All {\n+        if self.packed.tag() == traits::Reveal::All {\n             return self;\n         }\n \n-        ParamEnv::new(\n-            tcx.normalize_opaque_types(self.caller_bounds()),\n-            Reveal::All,\n-            self.constness(),\n-        )\n+        ParamEnv::new(tcx.normalize_opaque_types(self.caller_bounds()), Reveal::All)\n     }\n \n     /// Returns this same environment but with no caller bounds.\n     #[inline]\n     pub fn without_caller_bounds(self) -> Self {\n-        Self::new(List::empty(), self.reveal(), self.constness())\n+        Self::new(List::empty(), self.reveal())\n     }\n \n     /// Creates a suitable environment in which to perform trait\n@@ -1403,23 +1369,33 @@ impl<'tcx> ParamEnv<'tcx> {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]\n+pub struct ConstnessAnd<T> {\n+    pub constness: BoundConstness,\n+    pub value: T,\n+}\n+\n // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that\n // the constness of trait bounds is being propagated correctly.\n-impl PolyTraitRef<'tcx> {\n+pub trait WithConstness: Sized {\n     #[inline]\n-    pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {\n-        self.map_bound(|trait_ref| ty::TraitPredicate {\n-            trait_ref,\n-            constness,\n-            polarity: ty::ImplPolarity::Positive,\n-        })\n+    fn with_constness(self, constness: BoundConstness) -> ConstnessAnd<Self> {\n+        ConstnessAnd { constness, value: self }\n+    }\n+\n+    #[inline]\n+    fn with_const_if_const(self) -> ConstnessAnd<Self> {\n+        self.with_constness(BoundConstness::ConstIfConst)\n     }\n+\n     #[inline]\n-    pub fn without_const(self) -> PolyTraitPredicate<'tcx> {\n+    fn without_const(self) -> ConstnessAnd<Self> {\n         self.with_constness(BoundConstness::NotConst)\n     }\n }\n \n+impl<T> WithConstness for T {}\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]\n pub struct ParamEnvAnd<'tcx, T> {\n     pub param_env: ParamEnv<'tcx>,"}, {"sha": "c7d8bec506f6b80af01ed5e80d120ea8879ac7bb", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -218,6 +218,19 @@ impl<'tcx> Relate<'tcx> for ty::BoundConstness {\n     }\n }\n \n+impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::ConstnessAnd<T> {\n+    fn relate<R: TypeRelation<'tcx>>(\n+        relation: &mut R,\n+        a: ty::ConstnessAnd<T>,\n+        b: ty::ConstnessAnd<T>,\n+    ) -> RelateResult<'tcx, ty::ConstnessAnd<T>> {\n+        Ok(ty::ConstnessAnd {\n+            constness: relation.relate(a.constness, b.constness)?,\n+            value: relation.relate(a.value, b.value)?,\n+        })\n+    }\n+}\n+\n impl<'tcx> Relate<'tcx> for ast::Unsafety {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,"}, {"sha": "16a6c586358d9815fa8de3302a0bb734f3cca3ff", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -480,7 +480,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n     type Lifted = ty::ParamEnv<'tcx>;\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(self.caller_bounds())\n-            .map(|caller_bounds| ty::ParamEnv::new(caller_bounds, self.reveal(), self.constness()))\n+            .map(|caller_bounds| ty::ParamEnv::new(caller_bounds, self.reveal()))\n     }\n }\n "}, {"sha": "6bd761d61e247905e41a368844802f5207c71df3", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -8,7 +8,9 @@ use crate::infer::canonical::Canonical;\n use crate::ty::fold::ValidateBoundVars;\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::InferTy::{self, *};\n-use crate::ty::{self, AdtDef, DefIdTree, Discr, Ty, TyCtxt, TypeFlags, TypeFoldable};\n+use crate::ty::{\n+    self, AdtDef, DefIdTree, Discr, Ty, TyCtxt, TypeFlags, TypeFoldable, WithConstness,\n+};\n use crate::ty::{DelaySpanBugEmitted, List, ParamEnv, TyS};\n use polonius_engine::Atom;\n use rustc_data_structures::captures::Captures;"}, {"sha": "4c80483fc1f1e7750b5c3e68200c75ccb6a6ec23", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -3,7 +3,7 @@ use crate::traits::{self, TraitEngine};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_infer::infer::InferCtxt;\n-use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt};\n+use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt, WithConstness};\n use rustc_middle::ty::{ToPredicate, TypeFoldable};\n use rustc_session::{DiagnosticMessageId, Limit};\n use rustc_span::def_id::LOCAL_CRATE;"}, {"sha": "70816b5722b2d4ae88a62170692238d8ef54adfa", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::infer::canonical::{Canonical, CanonicalizedQueryResponse, Quer\n use rustc_middle::traits::query::Fallible;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::ToPredicate;\n+use rustc_middle::ty::WithConstness;\n use rustc_middle::ty::{self, Ty, TypeFoldable};\n use rustc_span::{Span, DUMMY_SP};\n "}, {"sha": "54f7b91080dd9fb0a9cae74dea7ecd43517972a5", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -370,17 +370,12 @@ impl AutoTraitFinder<'tcx> {\n                 computed_preds.clone().chain(user_computed_preds.iter().cloned()),\n             )\n             .map(|o| o.predicate);\n-            new_env = ty::ParamEnv::new(\n-                tcx.mk_predicates(normalized_preds),\n-                param_env.reveal(),\n-                param_env.constness(),\n-            );\n+            new_env = ty::ParamEnv::new(tcx.mk_predicates(normalized_preds), param_env.reveal());\n         }\n \n         let final_user_env = ty::ParamEnv::new(\n             tcx.mk_predicates(user_computed_preds.into_iter()),\n             user_env.reveal(),\n-            user_env.constness(),\n         );\n         debug!(\n             \"evaluate_nested_obligations(ty={:?}, trait_did={:?}): succeeded with '{:?}' \\"}, {"sha": "d9f86fbc23b5d192bc9a84858352ecceab2e1cf1", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -24,7 +24,7 @@ use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::{\n     self, fast_reject, AdtKind, SubtypePredicate, ToPolyTraitRef, ToPredicate, Ty, TyCtxt,\n-    TypeFoldable,\n+    TypeFoldable, WithConstness,\n };\n use rustc_session::DiagnosticMessageId;\n use rustc_span::symbol::{kw, sym};"}, {"sha": "a90140a9b50b924ded3a3ec7e52e5c2b3bbbcb45", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -21,7 +21,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n use rustc_middle::ty::{\n     self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind, DefIdTree,\n-    Infer, InferTy, ToPredicate, Ty, TyCtxt, TypeFoldable,\n+    Infer, InferTy, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n use rustc_middle::ty::{TypeAndMut, TypeckResults};\n use rustc_session::Limit;"}, {"sha": "e121837c987ae9b694ea1b45281abca63da8e8c7", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -4,6 +4,7 @@ use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{Error, ForestObligation, Outcome};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n use rustc_errors::ErrorReported;\n+use rustc_hir as hir;\n use rustc_infer::traits::{SelectionError, TraitEngine, TraitEngineExt as _, TraitObligation};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::thir::abstract_const::NotConstEvaluatable;\n@@ -230,6 +231,21 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()\n     }\n \n+    fn select_all_with_constness_or_error(\n+        &mut self,\n+        infcx: &InferCtxt<'_, 'tcx>,\n+        constness: rustc_hir::Constness,\n+    ) -> Vec<FulfillmentError<'tcx>> {\n+        {\n+            let errors = self.select_with_constness_where_possible(infcx, constness);\n+            if !errors.is_empty() {\n+                return errors;\n+            }\n+        }\n+\n+        self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()\n+    }\n+\n     fn select_where_possible(\n         &mut self,\n         infcx: &InferCtxt<'_, 'tcx>,\n@@ -238,6 +254,15 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         self.select(&mut selcx)\n     }\n \n+    fn select_with_constness_where_possible(\n+        &mut self,\n+        infcx: &InferCtxt<'_, 'tcx>,\n+        constness: hir::Constness,\n+    ) -> Vec<FulfillmentError<'tcx>> {\n+        let mut selcx = SelectionContext::with_constness(infcx, constness);\n+        self.select(&mut selcx)\n+    }\n+\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n         self.predicates.map_pending_obligations(|o| o.obligation.clone())\n     }\n@@ -654,7 +679,12 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n         if obligation.predicate.is_known_global() {\n             // no type variables present, can use evaluation for better caching.\n             // FIXME: consider caching errors too.\n-            if infcx.predicate_must_hold_considering_regions(obligation) {\n+            //\n+            // If the predicate is considered const, then we cannot use this because\n+            // it will cause false negatives in the ui tests.\n+            if !self.selcx.is_predicate_const(obligation.predicate)\n+                && infcx.predicate_must_hold_considering_regions(obligation)\n+            {\n                 debug!(\n                     \"selecting trait at depth {} evaluated to holds\",\n                     obligation.recursion_depth\n@@ -708,7 +738,12 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n         if obligation.predicate.is_global(tcx) {\n             // no type variables present, can use evaluation for better caching.\n             // FIXME: consider caching errors too.\n-            if self.selcx.infcx().predicate_must_hold_considering_regions(obligation) {\n+            //\n+            // If the predicate is considered const, then we cannot use this because\n+            // it will cause false negatives in the ui tests.\n+            if !self.selcx.is_predicate_const(obligation.predicate)\n+                && self.selcx.infcx().predicate_must_hold_considering_regions(obligation)\n+            {\n                 return ProcessResult::Changed(vec![]);\n             } else {\n                 tracing::debug!(\"Does NOT hold: {:?}\", obligation);"}, {"sha": "4bc22d5d73543f9b30a32c9130dffdba5a348d85", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -33,7 +33,8 @@ use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::{\n-    self, GenericParamDefKind, ToPredicate, Ty, TyCtxt, VtblEntry, COMMON_VTABLE_ENTRIES,\n+    self, GenericParamDefKind, ToPredicate, Ty, TyCtxt, VtblEntry, WithConstness,\n+    COMMON_VTABLE_ENTRIES,\n };\n use rustc_span::{sym, Span};\n use smallvec::SmallVec;\n@@ -306,11 +307,8 @@ pub fn normalize_param_env_or_error<'tcx>(\n \n     debug!(\"normalize_param_env_or_error: elaborated-predicates={:?}\", predicates);\n \n-    let elaborated_env = ty::ParamEnv::new(\n-        tcx.intern_predicates(&predicates),\n-        unnormalized_env.reveal(),\n-        unnormalized_env.constness(),\n-    );\n+    let elaborated_env =\n+        ty::ParamEnv::new(tcx.intern_predicates(&predicates), unnormalized_env.reveal());\n \n     // HACK: we are trying to normalize the param-env inside *itself*. The problem is that\n     // normalization expects its param-env to be already normalized, which means we have\n@@ -362,11 +360,8 @@ pub fn normalize_param_env_or_error<'tcx>(\n     // predicates here anyway. Keeping them here anyway because it seems safer.\n     let outlives_env: Vec<_> =\n         non_outlives_predicates.iter().chain(&outlives_predicates).cloned().collect();\n-    let outlives_env = ty::ParamEnv::new(\n-        tcx.intern_predicates(&outlives_env),\n-        unnormalized_env.reveal(),\n-        unnormalized_env.constness(),\n-    );\n+    let outlives_env =\n+        ty::ParamEnv::new(tcx.intern_predicates(&outlives_env), unnormalized_env.reveal());\n     let outlives_predicates = match do_normalize_predicates(\n         tcx,\n         region_context,\n@@ -386,11 +381,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     let mut predicates = non_outlives_predicates;\n     predicates.extend(outlives_predicates);\n     debug!(\"normalize_param_env_or_error: final predicates={:?}\", predicates);\n-    ty::ParamEnv::new(\n-        tcx.intern_predicates(&predicates),\n-        unnormalized_env.reveal(),\n-        unnormalized_env.constness(),\n-    )\n+    ty::ParamEnv::new(tcx.intern_predicates(&predicates), unnormalized_env.reveal())\n }\n \n pub fn fully_normalize<'a, 'tcx, T>(\n@@ -573,17 +564,14 @@ fn prepare_vtable_segments<'tcx, T>(\n                     .predicates\n                     .into_iter()\n                     .filter_map(move |(pred, _)| {\n-                        pred.subst_supertrait(tcx, &inner_most_trait_ref).to_opt_poly_trait_pred()\n+                        pred.subst_supertrait(tcx, &inner_most_trait_ref).to_opt_poly_trait_ref()\n                     });\n \n                 'diving_in_skip_visited_traits: loop {\n                     if let Some(next_super_trait) = direct_super_traits_iter.next() {\n                         if visited.insert(next_super_trait.to_predicate(tcx)) {\n-                            // We're throwing away potential constness of super traits here.\n-                            // FIXME: handle ~const super traits\n-                            let next_super_trait = next_super_trait.map_bound(|t| t.trait_ref);\n                             stack.push((\n-                                next_super_trait,\n+                                next_super_trait.value,\n                                 emit_vptr_on_new_entry,\n                                 Some(direct_super_traits_iter),\n                             ));\n@@ -615,11 +603,7 @@ fn prepare_vtable_segments<'tcx, T>(\n                     if let Some(siblings) = siblings_opt {\n                         if let Some(next_inner_most_trait_ref) = siblings.next() {\n                             if visited.insert(next_inner_most_trait_ref.to_predicate(tcx)) {\n-                                // We're throwing away potential constness of super traits here.\n-                                // FIXME: handle ~const super traits\n-                                let next_inner_most_trait_ref =\n-                                    next_inner_most_trait_ref.map_bound(|t| t.trait_ref);\n-                                *inner_most_trait_ref = next_inner_most_trait_ref;\n+                                *inner_most_trait_ref = next_inner_most_trait_ref.value;\n                                 *emit_vptr = emit_vptr_on_new_entry;\n                                 break 'exiting_out;\n                             } else {"}, {"sha": "afc546540d2e262d99c2818a6125805a07746eb6", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -18,7 +18,7 @@ use rustc_errors::FatalError;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, Subst};\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitor, WithConstness};\n use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n use rustc_span::symbol::Symbol;\n@@ -698,11 +698,7 @@ fn receiver_is_dispatchable<'tcx>(\n             .chain(array::IntoIter::new([unsize_predicate, trait_predicate]))\n             .collect();\n \n-        ty::ParamEnv::new(\n-            tcx.intern_predicates(&caller_bounds),\n-            param_env.reveal(),\n-            param_env.constness(),\n-        )\n+        ty::ParamEnv::new(tcx.intern_predicates(&caller_bounds), param_env.reveal())\n     };\n \n     // Receiver: DispatchFromDyn<Receiver[Self => U]>"}, {"sha": "b8c66931cbe52ef093ce8cfb2629d29f72ec7268", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -27,7 +27,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::resolve::OpportunisticRegionResolver;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_span::symbol::sym;\n \n use std::collections::BTreeMap;"}, {"sha": "6e3e3b9b14480d383fdad71dd9a6829647b5b61f", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -11,7 +11,7 @@ use rustc_infer::traits::TraitEngine;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n use rustc_lint_defs::builtin::DEREF_INTO_DYN_SUPERTRAIT;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TypeFoldable, WithConstness};\n use rustc_target::spec::abi::Abi;\n \n use crate::traits;\n@@ -303,7 +303,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             } else if lang_items.drop_trait() == Some(def_id)\n                 && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst\n             {\n-                if obligation.param_env.constness() == hir::Constness::Const {\n+                if self.is_in_const_context {\n                     self.assemble_const_drop_candidates(obligation, stack, &mut candidates)?;\n                 } else {\n                     debug!(\"passing ~const Drop bound; in non-const context\");\n@@ -383,19 +383,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .param_env\n             .caller_bounds()\n             .iter()\n-            .filter_map(|o| o.to_opt_poly_trait_pred());\n+            .filter_map(|o| o.to_opt_poly_trait_ref());\n \n         // Micro-optimization: filter out predicates relating to different traits.\n         let matching_bounds =\n-            all_bounds.filter(|p| p.def_id() == stack.obligation.predicate.def_id());\n+            all_bounds.filter(|p| p.value.def_id() == stack.obligation.predicate.def_id());\n \n         // Keep only those bounds which may apply, and propagate overflow if it occurs.\n         for bound in matching_bounds {\n-            // FIXME(oli-obk): it is suspicious that we are dropping the constness and\n-            // polarity here.\n-            let wc = self.evaluate_where_clause(stack, bound.map_bound(|t| t.trait_ref))?;\n+            let wc = self.evaluate_where_clause(stack, bound.value)?;\n             if wc.may_apply() {\n-                candidates.vec.push(ParamCandidate(bound));\n+                candidates.vec.push(ParamCandidate((bound, stack.obligation.polarity())));\n             }\n         }\n "}, {"sha": "2f1f7971a7926aa433352e92bfe306c48d26d8b0", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -13,7 +13,7 @@ use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst, SubstsRef};\n use rustc_middle::ty::{self, Ty};\n-use rustc_middle::ty::{ToPolyTraitRef, ToPredicate};\n+use rustc_middle::ty::{ToPolyTraitRef, ToPredicate, WithConstness};\n use rustc_span::def_id::DefId;\n \n use crate::traits::project::{normalize_with_depth, normalize_with_depth_to};\n@@ -58,9 +58,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ParamCandidate(param) => {\n-                let obligations =\n-                    self.confirm_param_candidate(obligation, param.map_bound(|t| t.trait_ref));\n-                Ok(ImplSource::Param(obligations, param.skip_binder().constness))\n+                let obligations = self.confirm_param_candidate(obligation, param.0.value);\n+                Ok(ImplSource::Param(obligations, param.0.constness))\n             }\n \n             ImplCandidate(impl_def_id) => {\n@@ -140,7 +139,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             let trait_predicate = self.infcx.shallow_resolve(obligation.predicate);\n             let placeholder_trait_predicate =\n-                self.infcx().replace_bound_vars_with_placeholders(trait_predicate).trait_ref;\n+                self.infcx().replace_bound_vars_with_placeholders(trait_predicate);\n             let placeholder_self_ty = placeholder_trait_predicate.self_ty();\n             let placeholder_trait_predicate = ty::Binder::dummy(placeholder_trait_predicate);\n             let (def_id, substs) = match *placeholder_self_ty.kind() {\n@@ -151,9 +150,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             let candidate_predicate = tcx.item_bounds(def_id)[idx].subst(tcx, substs);\n             let candidate = candidate_predicate\n-                .to_opt_poly_trait_pred()\n-                .expect(\"projection candidate is not a trait predicate\")\n-                .map_bound(|t| t.trait_ref);\n+                .to_opt_poly_trait_ref()\n+                .expect(\"projection candidate is not a trait predicate\");\n             let mut obligations = Vec::new();\n             let candidate = normalize_with_depth_to(\n                 self,\n@@ -167,7 +165,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligations.extend(self.infcx.commit_if_ok(|_| {\n                 self.infcx\n                     .at(&obligation.cause, obligation.param_env)\n-                    .sup(placeholder_trait_predicate, candidate)\n+                    .sup(placeholder_trait_predicate.to_poly_trait_ref(), candidate.value)\n                     .map(|InferOk { obligations, .. }| obligations)\n                     .map_err(|_| Unimplemented)\n             })?);"}, {"sha": "32d04b55754fc62025eb173923f47515af4cea37", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 152, "deletions": 84, "changes": 236, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -39,6 +39,7 @@ use rustc_middle::ty::fast_reject;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArgKind, Subst, SubstsRef};\n+use rustc_middle::ty::WithConstness;\n use rustc_middle::ty::{self, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable};\n use rustc_span::symbol::sym;\n@@ -127,6 +128,9 @@ pub struct SelectionContext<'cx, 'tcx> {\n     /// and a negative impl\n     allow_negative_impls: bool,\n \n+    /// Are we in a const context that needs `~const` bounds to be const?\n+    is_in_const_context: bool,\n+\n     /// The mode that trait queries run in, which informs our error handling\n     /// policy. In essence, canonicalized queries need their errors propagated\n     /// rather than immediately reported because we do not have accurate spans.\n@@ -137,9 +141,9 @@ pub struct SelectionContext<'cx, 'tcx> {\n struct TraitObligationStack<'prev, 'tcx> {\n     obligation: &'prev TraitObligation<'tcx>,\n \n-    /// The trait predicate from `obligation` but \"freshened\" with the\n+    /// The trait ref from `obligation` but \"freshened\" with the\n     /// selection-context's freshener. Used to check for recursion.\n-    fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,\n+    fresh_trait_ref: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n \n     /// Starts out equal to `depth` -- if, during evaluation, we\n     /// encounter a cycle, then we will set this flag to the minimum\n@@ -218,6 +222,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n+            is_in_const_context: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -229,6 +234,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: true,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n+            is_in_const_context: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -244,6 +250,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls,\n+            is_in_const_context: false,\n             query_mode: TraitQueryMode::Standard,\n         }\n     }\n@@ -259,10 +266,26 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             intercrate: false,\n             intercrate_ambiguity_causes: None,\n             allow_negative_impls: false,\n+            is_in_const_context: false,\n             query_mode,\n         }\n     }\n \n+    pub fn with_constness(\n+        infcx: &'cx InferCtxt<'cx, 'tcx>,\n+        constness: hir::Constness,\n+    ) -> SelectionContext<'cx, 'tcx> {\n+        SelectionContext {\n+            infcx,\n+            freshener: infcx.freshener_keep_static(),\n+            intercrate: false,\n+            intercrate_ambiguity_causes: None,\n+            allow_negative_impls: false,\n+            is_in_const_context: matches!(constness, hir::Constness::Const),\n+            query_mode: TraitQueryMode::Standard,\n+        }\n+    }\n+\n     /// Enables tracking of intercrate ambiguity causes. These are\n     /// used in coherence to give improved diagnostics. We don't do\n     /// this until we detect a coherence error because it can lead to\n@@ -295,6 +318,20 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         self.intercrate\n     }\n \n+    /// Returns `true` if the trait predicate is considerd `const` to this selection context.\n+    pub fn is_trait_predicate_const(&self, pred: ty::TraitPredicate<'_>) -> bool {\n+        matches!(pred.constness, ty::BoundConstness::ConstIfConst) && self.is_in_const_context\n+    }\n+\n+    /// Returns `true` if the predicate is considered `const` to\n+    /// this selection context.\n+    pub fn is_predicate_const(&self, pred: ty::Predicate<'_>) -> bool {\n+        match pred.kind().skip_binder() {\n+            ty::PredicateKind::Trait(pred) => self.is_trait_predicate_const(pred),\n+            _ => false,\n+        }\n+    }\n+\n     ///////////////////////////////////////////////////////////////////////////\n     // Selection\n     //\n@@ -679,22 +716,20 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         let stack = self.push_stack(previous_stack, &obligation);\n-        let mut fresh_trait_pred = stack.fresh_trait_pred;\n-        let mut param_env = obligation.param_env;\n-\n-        fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {\n-            param_env = param_env.with_constness(pred.constness.and(param_env.constness()));\n-            pred\n-        });\n+        let fresh_trait_ref = stack.fresh_trait_ref;\n \n-        debug!(?fresh_trait_pred);\n+        debug!(?fresh_trait_ref);\n \n-        if let Some(result) = self.check_evaluation_cache(param_env, fresh_trait_pred) {\n+        if let Some(result) = self.check_evaluation_cache(\n+            obligation.param_env,\n+            fresh_trait_ref,\n+            obligation.polarity(),\n+        ) {\n             debug!(?result, \"CACHE HIT\");\n             return Ok(result);\n         }\n \n-        if let Some(result) = stack.cache().get_provisional(fresh_trait_pred) {\n+        if let Some(result) = stack.cache().get_provisional(fresh_trait_ref) {\n             debug!(?result, \"PROVISIONAL CACHE HIT\");\n             stack.update_reached_depth(result.reached_depth);\n             return Ok(result.result);\n@@ -719,12 +754,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let reached_depth = stack.reached_depth.get();\n         if reached_depth >= stack.depth {\n             debug!(?result, \"CACHE MISS\");\n-            self.insert_evaluation_cache(param_env, fresh_trait_pred, dep_node, result);\n+            self.insert_evaluation_cache(\n+                obligation.param_env,\n+                fresh_trait_ref,\n+                obligation.polarity(),\n+                dep_node,\n+                result,\n+            );\n \n-            stack.cache().on_completion(stack.dfn, |fresh_trait_pred, provisional_result| {\n+            stack.cache().on_completion(stack.dfn, |fresh_trait_ref, provisional_result| {\n                 self.insert_evaluation_cache(\n-                    param_env,\n-                    fresh_trait_pred,\n+                    obligation.param_env,\n+                    fresh_trait_ref,\n+                    obligation.polarity(),\n                     dep_node,\n                     provisional_result.max(result),\n                 );\n@@ -734,10 +776,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             debug!(\n                 \"caching provisionally because {:?} \\\n                  is a cycle participant (at depth {}, reached depth {})\",\n-                fresh_trait_pred, stack.depth, reached_depth,\n+                fresh_trait_ref, stack.depth, reached_depth,\n             );\n \n-            stack.cache().insert_provisional(stack.dfn, reached_depth, fresh_trait_pred, result);\n+            stack.cache().insert_provisional(stack.dfn, reached_depth, fresh_trait_ref, result);\n         }\n \n         Ok(result)\n@@ -771,7 +813,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .skip(1) // Skip top-most frame.\n             .find(|prev| {\n                 stack.obligation.param_env == prev.obligation.param_env\n-                    && stack.fresh_trait_pred == prev.fresh_trait_pred\n+                    && stack.fresh_trait_ref == prev.fresh_trait_ref\n             })\n             .map(|stack| stack.depth)\n         {\n@@ -834,7 +876,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // terms of `Fn` etc, but we could probably make this more\n         // precise still.\n         let unbound_input_types =\n-            stack.fresh_trait_pred.skip_binder().trait_ref.substs.types().any(|ty| ty.is_fresh());\n+            stack.fresh_trait_ref.value.skip_binder().substs.types().any(|ty| ty.is_fresh());\n \n         if stack.obligation.polarity() != ty::ImplPolarity::Negative {\n             // This check was an imperfect workaround for a bug in the old\n@@ -872,8 +914,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             && stack.iter().skip(1).any(|prev| {\n                 stack.obligation.param_env == prev.obligation.param_env\n                     && self.match_fresh_trait_refs(\n-                        stack.fresh_trait_pred,\n-                        prev.fresh_trait_pred,\n+                        stack.fresh_trait_ref,\n+                        prev.fresh_trait_ref,\n                         prev.obligation.param_env,\n                     )\n             })\n@@ -951,7 +993,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // not just the lifetime choice for this particular (non-erased)\n         // predicate.\n         // See issue #80691\n-        if stack.fresh_trait_pred.has_erased_regions() {\n+        if stack.fresh_trait_ref.has_erased_regions() {\n             result = result.max(EvaluatedToOkModuloRegions);\n         }\n \n@@ -962,7 +1004,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn check_evaluation_cache(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+        trait_ref: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n+        polarity: ty::ImplPolarity,\n     ) -> Option<EvaluationResult> {\n         // Neither the global nor local cache is aware of intercrate\n         // mode, so don't do any caching. In particular, we might\n@@ -974,17 +1017,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let tcx = self.tcx();\n         if self.can_use_global_caches(param_env) {\n-            if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_pred), tcx) {\n+            if let Some(res) = tcx.evaluation_cache.get(&(param_env.and(trait_ref), polarity), tcx)\n+            {\n                 return Some(res);\n             }\n         }\n-        self.infcx.evaluation_cache.get(&param_env.and(trait_pred), tcx)\n+        self.infcx.evaluation_cache.get(&(param_env.and(trait_ref), polarity), tcx)\n     }\n \n     fn insert_evaluation_cache(\n         &mut self,\n         param_env: ty::ParamEnv<'tcx>,\n-        trait_pred: ty::PolyTraitPredicate<'tcx>,\n+        trait_ref: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n+        polarity: ty::ImplPolarity,\n         dep_node: DepNodeIndex,\n         result: EvaluationResult,\n     ) {\n@@ -1003,19 +1048,23 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         if self.can_use_global_caches(param_env) {\n-            if !trait_pred.needs_infer() {\n-                debug!(?trait_pred, ?result, \"insert_evaluation_cache global\");\n+            if !trait_ref.needs_infer() {\n+                debug!(?trait_ref, ?result, \"insert_evaluation_cache global\");\n                 // This may overwrite the cache with the same value\n                 // FIXME: Due to #50507 this overwrites the different values\n                 // This should be changed to use HashMapExt::insert_same\n                 // when that is fixed\n-                self.tcx().evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);\n+                self.tcx().evaluation_cache.insert(\n+                    (param_env.and(trait_ref), polarity),\n+                    dep_node,\n+                    result,\n+                );\n                 return;\n             }\n         }\n \n-        debug!(?trait_pred, ?result, \"insert_evaluation_cache\");\n-        self.infcx.evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);\n+        debug!(?trait_ref, ?result, \"insert_evaluation_cache\");\n+        self.infcx.evaluation_cache.insert((param_env.and(trait_ref), polarity), dep_node, result);\n     }\n \n     /// For various reasons, it's possible for a subobligation\n@@ -1093,15 +1142,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         for candidate in candidates {\n             // Respect const trait obligations\n-            if obligation.is_const() {\n+            if self.is_trait_predicate_const(obligation.predicate.skip_binder()) {\n                 match candidate {\n                     // const impl\n                     ImplCandidate(def_id)\n                         if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n                     // const param\n-                    ParamCandidate(trait_pred)\n-                        if trait_pred.skip_binder().constness\n-                            == ty::BoundConstness::ConstIfConst => {}\n+                    ParamCandidate((\n+                        ty::ConstnessAnd { constness: ty::BoundConstness::ConstIfConst, .. },\n+                        _,\n+                    )) => {}\n                     // auto trait impl\n                     AutoImplCandidate(..) => {}\n                     // generator, this will raise error in other places\n@@ -1210,7 +1260,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn check_candidate_cache(\n         &mut self,\n-        mut param_env: ty::ParamEnv<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n         cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> Option<SelectionResult<'tcx, SelectionCandidate<'tcx>>> {\n         // Neither the global nor local cache is aware of intercrate\n@@ -1221,15 +1271,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return None;\n         }\n         let tcx = self.tcx();\n-        let mut pred = cache_fresh_trait_pred.skip_binder();\n-        param_env = param_env.with_constness(pred.constness.and(param_env.constness()));\n-\n+        let pred = &cache_fresh_trait_pred.skip_binder();\n+        let trait_ref = pred.trait_ref;\n         if self.can_use_global_caches(param_env) {\n-            if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {\n+            if let Some(res) = tcx\n+                .selection_cache\n+                .get(&(param_env.and(trait_ref).with_constness(pred.constness), pred.polarity), tcx)\n+            {\n                 return Some(res);\n             }\n         }\n-        self.infcx.selection_cache.get(&param_env.and(pred), tcx)\n+        self.infcx\n+            .selection_cache\n+            .get(&(param_env.and(trait_ref).with_constness(pred.constness), pred.polarity), tcx)\n     }\n \n     /// Determines whether can we safely cache the result\n@@ -1267,36 +1321,43 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn insert_candidate_cache(\n         &mut self,\n-        mut param_env: ty::ParamEnv<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n         cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,\n         dep_node: DepNodeIndex,\n         candidate: SelectionResult<'tcx, SelectionCandidate<'tcx>>,\n     ) {\n         let tcx = self.tcx();\n-        let mut pred = cache_fresh_trait_pred.skip_binder();\n-\n-        param_env = param_env.with_constness(pred.constness.and(param_env.constness()));\n+        let pred = cache_fresh_trait_pred.skip_binder();\n+        let trait_ref = pred.trait_ref;\n \n         if !self.can_cache_candidate(&candidate) {\n-            debug!(?pred, ?candidate, \"insert_candidate_cache - candidate is not cacheable\");\n+            debug!(?trait_ref, ?candidate, \"insert_candidate_cache - candidate is not cacheable\");\n             return;\n         }\n \n         if self.can_use_global_caches(param_env) {\n             if let Err(Overflow) = candidate {\n                 // Don't cache overflow globally; we only produce this in certain modes.\n-            } else if !pred.needs_infer() {\n+            } else if !trait_ref.needs_infer() {\n                 if !candidate.needs_infer() {\n-                    debug!(?pred, ?candidate, \"insert_candidate_cache global\");\n+                    debug!(?trait_ref, ?candidate, \"insert_candidate_cache global\");\n                     // This may overwrite the cache with the same value.\n-                    tcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);\n+                    tcx.selection_cache.insert(\n+                        (param_env.and(trait_ref).with_constness(pred.constness), pred.polarity),\n+                        dep_node,\n+                        candidate,\n+                    );\n                     return;\n                 }\n             }\n         }\n \n-        debug!(?pred, ?candidate, \"insert_candidate_cache local\");\n-        self.infcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);\n+        debug!(?trait_ref, ?candidate, \"insert_candidate_cache local\");\n+        self.infcx.selection_cache.insert(\n+            (param_env.and(trait_ref).with_constness(pred.constness), pred.polarity),\n+            dep_node,\n+            candidate,\n+        );\n     }\n \n     /// Matches a predicate against the bounds of its self type.\n@@ -1487,7 +1548,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Check if a bound would previously have been removed when normalizing\n         // the param_env so that it can be given the lowest priority. See\n         // #50825 for the motivation for this.\n-        let is_global = |cand: &ty::PolyTraitPredicate<'tcx>| {\n+        let is_global = |cand: &ty::PolyTraitRef<'tcx>| {\n             cand.is_global(self.infcx.tcx) && !cand.has_late_bound_regions()\n         };\n \n@@ -1520,22 +1581,25 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | ConstDropCandidate,\n             ) => false,\n \n-            (ParamCandidate(other), ParamCandidate(victim)) => {\n-                let same_except_bound_vars = other.skip_binder().trait_ref\n-                    == victim.skip_binder().trait_ref\n-                    && other.skip_binder().constness == victim.skip_binder().constness\n-                    && other.skip_binder().polarity == victim.skip_binder().polarity\n-                    && !other.skip_binder().trait_ref.has_escaping_bound_vars();\n+            (\n+                ParamCandidate((other, other_polarity)),\n+                ParamCandidate((victim, victim_polarity)),\n+            ) => {\n+                let same_except_bound_vars = other.value.skip_binder()\n+                    == victim.value.skip_binder()\n+                    && other.constness == victim.constness\n+                    && other_polarity == victim_polarity\n+                    && !other.value.skip_binder().has_escaping_bound_vars();\n                 if same_except_bound_vars {\n                     // See issue #84398. In short, we can generate multiple ParamCandidates which are\n                     // the same except for unused bound vars. Just pick the one with the fewest bound vars\n                     // or the current one if tied (they should both evaluate to the same answer). This is\n                     // probably best characterized as a \"hack\", since we might prefer to just do our\n                     // best to *not* create essentially duplicate candidates in the first place.\n-                    other.bound_vars().len() <= victim.bound_vars().len()\n-                } else if other.skip_binder().trait_ref == victim.skip_binder().trait_ref\n-                    && victim.skip_binder().constness == ty::BoundConstness::NotConst\n-                    && other.skip_binder().polarity == victim.skip_binder().polarity\n+                    other.value.bound_vars().len() <= victim.value.bound_vars().len()\n+                } else if other.value == victim.value\n+                    && victim.constness == ty::BoundConstness::NotConst\n+                    && other_polarity == victim_polarity\n                 {\n                     // Drop otherwise equivalent non-const candidates in favor of const candidates.\n                     true\n@@ -1565,11 +1629,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | TraitAliasCandidate(..)\n                 | ObjectCandidate(_)\n                 | ProjectionCandidate(_),\n-            ) => !is_global(cand),\n+            ) => !is_global(&cand.0.value),\n             (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {\n                 // Prefer these to a global where-clause bound\n                 // (see issue #50825).\n-                is_global(cand)\n+                is_global(&cand.0.value)\n             }\n             (\n                 ImplCandidate(_)\n@@ -1585,7 +1649,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ) => {\n                 // Prefer these to a global where-clause bound\n                 // (see issue #50825).\n-                is_global(cand) && other.evaluation.must_apply_modulo_regions()\n+                is_global(&cand.0.value) && other.evaluation.must_apply_modulo_regions()\n             }\n \n             (ProjectionCandidate(i), ProjectionCandidate(j))\n@@ -2145,8 +2209,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn match_fresh_trait_refs(\n         &self,\n-        previous: ty::PolyTraitPredicate<'tcx>,\n-        current: ty::PolyTraitPredicate<'tcx>,\n+        previous: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n+        current: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> bool {\n         let mut matcher = ty::_match::Match::new(self.tcx(), param_env);\n@@ -2158,13 +2222,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         previous_stack: TraitObligationStackList<'o, 'tcx>,\n         obligation: &'o TraitObligation<'tcx>,\n     ) -> TraitObligationStack<'o, 'tcx> {\n-        let fresh_trait_pred = obligation.predicate.fold_with(&mut self.freshener);\n+        let fresh_trait_ref = obligation\n+            .predicate\n+            .to_poly_trait_ref()\n+            .fold_with(&mut self.freshener)\n+            .with_constness(obligation.predicate.skip_binder().constness);\n \n         let dfn = previous_stack.cache.next_dfn();\n         let depth = previous_stack.depth() + 1;\n         TraitObligationStack {\n             obligation,\n-            fresh_trait_pred,\n+            fresh_trait_ref,\n             reached_depth: Cell::new(depth),\n             previous: previous_stack,\n             dfn,\n@@ -2358,7 +2426,7 @@ impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {\n         debug!(reached_depth, \"update_reached_depth\");\n         let mut p = self;\n         while reached_depth < p.depth {\n-            debug!(?p.fresh_trait_pred, \"update_reached_depth: marking as cycle participant\");\n+            debug!(?p.fresh_trait_ref, \"update_reached_depth: marking as cycle participant\");\n             p.reached_depth.set(p.reached_depth.get().min(reached_depth));\n             p = p.previous.head.unwrap();\n         }\n@@ -2437,7 +2505,7 @@ struct ProvisionalEvaluationCache<'tcx> {\n     /// - then we determine that `E` is in error -- we will then clear\n     ///   all cache values whose DFN is >= 4 -- in this case, that\n     ///   means the cached value for `F`.\n-    map: RefCell<FxHashMap<ty::PolyTraitPredicate<'tcx>, ProvisionalEvaluation>>,\n+    map: RefCell<FxHashMap<ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>, ProvisionalEvaluation>>,\n }\n \n /// A cache value for the provisional cache: contains the depth-first\n@@ -2469,28 +2537,28 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n     /// `reached_depth` (from the returned value).\n     fn get_provisional(\n         &self,\n-        fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,\n+        fresh_trait_ref: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n     ) -> Option<ProvisionalEvaluation> {\n         debug!(\n-            ?fresh_trait_pred,\n+            ?fresh_trait_ref,\n             \"get_provisional = {:#?}\",\n-            self.map.borrow().get(&fresh_trait_pred),\n+            self.map.borrow().get(&fresh_trait_ref),\n         );\n-        Some(*self.map.borrow().get(&fresh_trait_pred)?)\n+        Some(*self.map.borrow().get(&fresh_trait_ref)?)\n     }\n \n     /// Insert a provisional result into the cache. The result came\n     /// from the node with the given DFN. It accessed a minimum depth\n-    /// of `reached_depth` to compute. It evaluated `fresh_trait_pred`\n+    /// of `reached_depth` to compute. It evaluated `fresh_trait_ref`\n     /// and resulted in `result`.\n     fn insert_provisional(\n         &self,\n         from_dfn: usize,\n         reached_depth: usize,\n-        fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,\n+        fresh_trait_ref: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n         result: EvaluationResult,\n     ) {\n-        debug!(?from_dfn, ?fresh_trait_pred, ?result, \"insert_provisional\");\n+        debug!(?from_dfn, ?fresh_trait_ref, ?result, \"insert_provisional\");\n \n         let mut map = self.map.borrow_mut();\n \n@@ -2514,7 +2582,7 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n             }\n         }\n \n-        map.insert(fresh_trait_pred, ProvisionalEvaluation { from_dfn, reached_depth, result });\n+        map.insert(fresh_trait_ref, ProvisionalEvaluation { from_dfn, reached_depth, result });\n     }\n \n     /// Invoked when the node with dfn `dfn` does not get a successful\n@@ -2565,16 +2633,16 @@ impl<'tcx> ProvisionalEvaluationCache<'tcx> {\n     fn on_completion(\n         &self,\n         dfn: usize,\n-        mut op: impl FnMut(ty::PolyTraitPredicate<'tcx>, EvaluationResult),\n+        mut op: impl FnMut(ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>, EvaluationResult),\n     ) {\n         debug!(?dfn, \"on_completion\");\n \n-        for (fresh_trait_pred, eval) in\n+        for (fresh_trait_ref, eval) in\n             self.map.borrow_mut().drain_filter(|_k, eval| eval.from_dfn >= dfn)\n         {\n-            debug!(?fresh_trait_pred, ?eval, \"on_completion\");\n+            debug!(?fresh_trait_ref, ?eval, \"on_completion\");\n \n-            op(fresh_trait_pred, eval.result);\n+            op(fresh_trait_ref, eval.result);\n         }\n     }\n }"}, {"sha": "b64c55592272ed07f63b2813a3a748ff7e2d8778", "filename": "compiler/rustc_trait_selection/src/traits/specialize/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fspecialize%2Fmod.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -508,9 +508,9 @@ crate fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<St\n         Vec::with_capacity(predicates.len() + types_without_default_bounds.len());\n \n     for (p, _) in predicates {\n-        if let Some(poly_trait_ref) = p.to_opt_poly_trait_pred() {\n-            if Some(poly_trait_ref.def_id()) == sized_trait {\n-                types_without_default_bounds.remove(poly_trait_ref.self_ty().skip_binder());\n+        if let Some(poly_trait_ref) = p.to_opt_poly_trait_ref() {\n+            if Some(poly_trait_ref.value.def_id()) == sized_trait {\n+                types_without_default_bounds.remove(poly_trait_ref.value.self_ty().skip_binder());\n                 continue;\n             }\n         }"}, {"sha": "6d2323abba465e152e76ed1c23538c725626fb4e", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -6,7 +6,7 @@ use smallvec::SmallVec;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, Subst, SubstsRef};\n-use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n \n use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n pub use rustc_infer::traits::{self, util::*};\n@@ -126,8 +126,8 @@ impl<'tcx> TraitAliasExpander<'tcx> {\n \n         let items = predicates.predicates.iter().rev().filter_map(|(pred, span)| {\n             pred.subst_supertrait(tcx, &trait_ref)\n-                .to_opt_poly_trait_pred()\n-                .map(|trait_ref| item.clone_and_push(trait_ref.map_bound(|t| t.trait_ref), *span))\n+                .to_opt_poly_trait_ref()\n+                .map(|trait_ref| item.clone_and_push(trait_ref.value, *span))\n         });\n         debug!(\"expand_trait_aliases: items={:?}\", items.clone());\n \n@@ -183,8 +183,8 @@ impl Iterator for SupertraitDefIds<'tcx> {\n             predicates\n                 .predicates\n                 .iter()\n-                .filter_map(|(pred, _)| pred.to_opt_poly_trait_pred())\n-                .map(|trait_ref| trait_ref.def_id())\n+                .filter_map(|(pred, _)| pred.to_opt_poly_trait_ref())\n+                .map(|trait_ref| trait_ref.value.def_id())\n                 .filter(|&super_def_id| visited.insert(super_def_id)),\n         );\n         Some(def_id)"}, {"sha": "2a66684e2a2a0937a498866a831992877c24f02e", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -6,7 +6,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_span::Span;\n \n use std::iter;\n@@ -298,10 +298,9 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n         let extend = |obligation: traits::PredicateObligation<'tcx>| {\n             let mut cause = cause.clone();\n-            if let Some(parent_trait_ref) = obligation.predicate.to_opt_poly_trait_pred() {\n+            if let Some(parent_trait_ref) = obligation.predicate.to_opt_poly_trait_ref() {\n                 let derived_cause = traits::DerivedObligationCause {\n-                    // FIXME(fee1-dead): when improving error messages, change this to PolyTraitPredicate\n-                    parent_trait_ref: parent_trait_ref.map_bound(|t| t.trait_ref),\n+                    parent_trait_ref: parent_trait_ref.value,\n                     parent_code: Lrc::new(obligation.cause.code.clone()),\n                 };\n                 cause.make_mut().code ="}, {"sha": "711a6f2fbebdd44d792d736b2a5e32704a6234e4", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 12, "deletions": 73, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -2,7 +2,9 @@ use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{\n+    self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt, WithConstness,\n+};\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n \n@@ -280,79 +282,16 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     // issue #89334\n     predicates = tcx.expose_default_const_substs(predicates);\n \n-    let local_did = def_id.as_local();\n-    let hir_id = local_did.map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id));\n+    let unnormalized_env =\n+        ty::ParamEnv::new(tcx.intern_predicates(&predicates), traits::Reveal::UserFacing);\n \n-    let constness = match hir_id {\n-        Some(hir_id) => match tcx.hir().get(hir_id) {\n-            hir::Node::Item(hir::Item { kind: hir::ItemKind::Const(..), .. })\n-            | hir::Node::Item(hir::Item { kind: hir::ItemKind::Static(..), .. })\n-            | hir::Node::TraitItem(hir::TraitItem {\n-                kind: hir::TraitItemKind::Const(..), ..\n-            })\n-            | hir::Node::AnonConst(_)\n-            | hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(..), .. })\n-            | hir::Node::ImplItem(hir::ImplItem {\n-                kind:\n-                    hir::ImplItemKind::Fn(\n-                        hir::FnSig {\n-                            header: hir::FnHeader { constness: hir::Constness::Const, .. },\n-                            ..\n-                        },\n-                        ..,\n-                    ),\n-                ..\n-            }) => hir::Constness::Const,\n-\n-            hir::Node::ImplItem(hir::ImplItem {\n-                kind: hir::ImplItemKind::TyAlias(..) | hir::ImplItemKind::Fn(..),\n-                ..\n-            }) => {\n-                let parent_hir_id = tcx.hir().get_parent_node(hir_id);\n-                match tcx.hir().get(parent_hir_id) {\n-                    hir::Node::Item(hir::Item {\n-                        kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),\n-                        ..\n-                    }) => *constness,\n-                    _ => span_bug!(\n-                        tcx.def_span(parent_hir_id.owner),\n-                        \"impl item's parent node is not an impl\",\n-                    ),\n-                }\n-            }\n-\n-            hir::Node::Item(hir::Item {\n-                kind:\n-                    hir::ItemKind::Fn(hir::FnSig { header: hir::FnHeader { constness, .. }, .. }, ..),\n-                ..\n-            })\n-            | hir::Node::TraitItem(hir::TraitItem {\n-                kind:\n-                    hir::TraitItemKind::Fn(\n-                        hir::FnSig { header: hir::FnHeader { constness, .. }, .. },\n-                        ..,\n-                    ),\n-                ..\n-            })\n-            | hir::Node::Item(hir::Item {\n-                kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),\n-                ..\n-            }) => *constness,\n-\n-            _ => hir::Constness::NotConst,\n-        },\n-        None => hir::Constness::NotConst,\n-    };\n-\n-    let unnormalized_env = ty::ParamEnv::new(\n-        tcx.intern_predicates(&predicates),\n-        traits::Reveal::UserFacing,\n-        constness,\n-    );\n-\n-    let body_id = hir_id.map_or(hir::CRATE_HIR_ID, |id| {\n-        tcx.hir().maybe_body_owned_by(id).map_or(id, |body| body.hir_id)\n-    });\n+    debug!(\"unnormalized_env caller bounds: {:?}\", unnormalized_env.caller_bounds());\n+    let body_id = def_id\n+        .as_local()\n+        .map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id))\n+        .map_or(hir::CRATE_HIR_ID, |id| {\n+            tcx.hir().maybe_body_owned_by(id).map_or(id, |body| body.hir_id)\n+        });\n     let cause = traits::ObligationCause::misc(tcx.def_span(def_id), body_id);\n     traits::normalize_param_env_or_error(tcx, def_id, unnormalized_env, cause)\n }"}, {"sha": "da751f2075399cef877e49ae73c661a34c2a03a6", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -1588,7 +1588,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 traits::transitive_bounds_that_define_assoc_type(\n                     tcx,\n                     predicates.iter().filter_map(|(p, _)| {\n-                        Some(p.to_opt_poly_trait_pred()?.map_bound(|t| t.trait_ref))\n+                        p.to_opt_poly_trait_ref().map(|trait_ref| trait_ref.value)\n                     }),\n                     assoc_name,\n                 )"}, {"sha": "24474e163b9daf23586c3d24e2efb063f652c596", "filename": "compiler/rustc_typeck/src/bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fbounds.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -1,7 +1,7 @@\n //! Bounds are restrictions applied to some types after they've been converted into the\n //! `ty` form from the HIR.\n \n-use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_span::Span;\n \n /// Collects together a list of type bounds. These lists of bounds occur in many places"}, {"sha": "44fc81a889d1732b404cee3674066f1e1f2744e4", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -208,11 +208,8 @@ fn compare_predicate_entailment<'tcx>(\n     // The key step here is to update the caller_bounds's predicates to be\n     // the new hybrid bounds we computed.\n     let normalize_cause = traits::ObligationCause::misc(impl_m_span, impl_m_hir_id);\n-    let param_env = ty::ParamEnv::new(\n-        tcx.intern_predicates(&hybrid_preds.predicates),\n-        Reveal::UserFacing,\n-        hir::Constness::NotConst,\n-    );\n+    let param_env =\n+        ty::ParamEnv::new(tcx.intern_predicates(&hybrid_preds.predicates), Reveal::UserFacing);\n     let param_env =\n         traits::normalize_param_env_or_error(tcx, impl_m.def_id, param_env, normalize_cause);\n \n@@ -1168,11 +1165,8 @@ fn compare_type_predicate_entailment<'tcx>(\n     debug!(\"compare_type_predicate_entailment: bounds={:?}\", hybrid_preds);\n \n     let normalize_cause = traits::ObligationCause::misc(impl_ty_span, impl_ty_hir_id);\n-    let param_env = ty::ParamEnv::new(\n-        tcx.intern_predicates(&hybrid_preds.predicates),\n-        Reveal::UserFacing,\n-        hir::Constness::NotConst,\n-    );\n+    let param_env =\n+        ty::ParamEnv::new(tcx.intern_predicates(&hybrid_preds.predicates), Reveal::UserFacing);\n     let param_env = traits::normalize_param_env_or_error(\n         tcx,\n         impl_ty.def_id,\n@@ -1357,11 +1351,7 @@ pub fn check_type_bounds<'tcx>(\n                 .to_predicate(tcx),\n             ),\n         };\n-        ty::ParamEnv::new(\n-            tcx.intern_predicates(&predicates),\n-            Reveal::UserFacing,\n-            param_env.constness(),\n-        )\n+        ty::ParamEnv::new(tcx.intern_predicates(&predicates), Reveal::UserFacing)\n     };\n     debug!(?normalize_param_env);\n \n@@ -1370,7 +1360,13 @@ pub fn check_type_bounds<'tcx>(\n         impl_ty_substs.rebase_onto(tcx, impl_ty.container.id(), impl_trait_ref.substs);\n \n     tcx.infer_ctxt().enter(move |infcx| {\n-        let inh = Inherited::new(infcx, impl_ty.def_id.expect_local());\n+        let constness = impl_ty\n+            .container\n+            .impl_def_id()\n+            .map(|did| tcx.impl_constness(did))\n+            .unwrap_or(hir::Constness::NotConst);\n+\n+        let inh = Inherited::with_constness(infcx, impl_ty.def_id.expect_local(), constness);\n         let infcx = &inh.infcx;\n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n@@ -1414,7 +1410,8 @@ pub fn check_type_bounds<'tcx>(\n \n         // Check that all obligations are satisfied by the implementation's\n         // version.\n-        let errors = inh.fulfillment_cx.borrow_mut().select_all_or_error(&infcx);\n+        let errors =\n+            inh.fulfillment_cx.borrow_mut().select_all_with_constness_or_error(&infcx, constness);\n         if !errors.is_empty() {\n             infcx.report_fulfillment_errors(&errors, None, false);\n             return Err(ErrorReported);"}, {"sha": "a02a7d7cbfeb281c712f27e62ca8afb25ef75464", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -616,7 +616,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     pub(in super::super) fn select_all_obligations_or_error(&self) {\n-        let errors = self.fulfillment_cx.borrow_mut().select_all_or_error(&self);\n+        let errors = self\n+            .fulfillment_cx\n+            .borrow_mut()\n+            .select_all_with_constness_or_error(&self, self.inh.constness);\n \n         if !errors.is_empty() {\n             self.report_fulfillment_errors(&errors, self.inh.body_id, false);\n@@ -629,7 +632,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         fallback_has_occurred: bool,\n         mutate_fulfillment_errors: impl Fn(&mut Vec<traits::FulfillmentError<'tcx>>),\n     ) {\n-        let mut result = self.fulfillment_cx.borrow_mut().select_where_possible(self);\n+        let mut result = self\n+            .fulfillment_cx\n+            .borrow_mut()\n+            .select_with_constness_where_possible(self, self.inh.constness);\n         if !result.is_empty() {\n             mutate_fulfillment_errors(&mut result);\n             self.report_fulfillment_errors(&result, self.inh.body_id, fallback_has_occurred);"}, {"sha": "f7552c1f4eb0cae7e6281e52d553f3cae5a09ec6", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -53,6 +53,9 @@ pub struct Inherited<'a, 'tcx> {\n     pub(super) deferred_generator_interiors:\n         RefCell<Vec<(hir::BodyId, Ty<'tcx>, hir::GeneratorKind)>>,\n \n+    /// Reports whether this is in a const context.\n+    pub(super) constness: hir::Constness,\n+\n     pub(super) body_id: Option<hir::BodyId>,\n \n     /// Whenever we introduce an adjustment from `!` into a type variable,\n@@ -99,6 +102,16 @@ impl<'tcx> InheritedBuilder<'tcx> {\n \n impl Inherited<'a, 'tcx> {\n     pub(super) fn new(infcx: InferCtxt<'a, 'tcx>, def_id: LocalDefId) -> Self {\n+        let tcx = infcx.tcx;\n+        let item_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+        Self::with_constness(infcx, def_id, tcx.hir().get(item_id).constness_for_typeck())\n+    }\n+\n+    pub(super) fn with_constness(\n+        infcx: InferCtxt<'a, 'tcx>,\n+        def_id: LocalDefId,\n+        constness: hir::Constness,\n+    ) -> Self {\n         let tcx = infcx.tcx;\n         let item_id = tcx.hir().local_def_id_to_hir_id(def_id);\n         let body_id = tcx.hir().maybe_body_owned_by(item_id);\n@@ -115,6 +128,7 @@ impl Inherited<'a, 'tcx> {\n             deferred_cast_checks: RefCell::new(Vec::new()),\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n             diverging_type_vars: RefCell::new(Default::default()),\n+            constness,\n             body_id,\n         }\n     }"}, {"sha": "dbc1d4ec193772ffea2c3cdf8d430278c860a13c", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -22,7 +22,7 @@ use rustc_infer::infer::{self, InferOk};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TypeFoldable, WithConstness};\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n use rustc_trait_selection::traits;"}, {"sha": "9fd7e8c4daa2043c0ea4cfde26934575a84be8a0", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -21,7 +21,7 @@ use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n use rustc_middle::middle::stability;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{self, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::lev_distance::{find_best_match_for_name, lev_distance};"}, {"sha": "ca174ed5e84972cb3950e301e6bd3c7a107be699", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -12,7 +12,7 @@ use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::ty::fast_reject::simplify_type;\n use rustc_middle::ty::print::with_crate_prefix;\n-use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_span::lev_distance;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{source_map, FileName, MultiSpan, Span, Symbol};"}, {"sha": "33a0c3275ca2a4d412a1daa19475f885c5287254", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -21,6 +21,7 @@ use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n     self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeVisitor,\n+    WithConstness,\n };\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Ident, Symbol};"}, {"sha": "4b41730ffd50bd59f353e744f1ac2161b041c457", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -41,7 +41,7 @@ use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::Discr;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, AdtKind, Const, DefIdTree, Ty, TyCtxt};\n-use rustc_middle::ty::{ReprOptions, ToPredicate};\n+use rustc_middle::ty::{ReprOptions, ToPredicate, WithConstness};\n use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};"}, {"sha": "f44589f60675f5dbe8bb38c358121be812d540d1", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -3,7 +3,7 @@ use rustc_hir as hir;\n use rustc_infer::infer::{InferOk, TyCtxtInferExt};\n use rustc_infer::traits;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::ToPredicate;\n+use rustc_middle::ty::{ToPredicate, WithConstness};\n use rustc_span::DUMMY_SP;\n \n use super::*;\n@@ -66,8 +66,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .into_iter()\n                             .chain(Some(\n                                 ty::Binder::dummy(trait_ref)\n-                                    .to_poly_trait_predicate()\n-                                    .map_bound(ty::PredicateKind::Trait)\n+                                    .without_const()\n                                     .to_predicate(infcx.tcx),\n                             ));\n                         for predicate in predicates {"}, {"sha": "369645f9030fbc8c9d93fc4438e9a280fa671c12", "filename": "src/test/ui/infinite/infinite-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -19,7 +19,7 @@ LL | struct Take(Take);\n    | ^^^^^^^^^^^^^^^^^^\n    |\n    = note: ...which immediately requires computing drop-check constraints for `Take` again\n-   = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst }, value: Take } }`\n+   = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing }, value: Take } }`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "61b5e9467752642487ab59618946c91f797f01a6", "filename": "src/test/ui/infinite/infinite-tag-type-recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -18,7 +18,7 @@ LL | enum MList { Cons(isize, MList), Nil }\n    | ^^^^^^^^^^\n    |\n    = note: ...which immediately requires computing drop-check constraints for `MList` again\n-   = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst }, value: MList } }`\n+   = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing }, value: MList } }`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "228b5ed71e80a833142ecd43054b0cc42fd936bb", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -1,5 +1,6 @@\n // FIXME(fee1-dead): this should have a better error message\n #![feature(const_trait_impl)]\n+\n struct NonConstAdd(i32);\n \n impl std::ops::Add for NonConstAdd {"}, {"sha": "b894092205e433448fc0c812770e9fbace38583b", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -1,12 +1,12 @@\n error[E0277]: cannot add `NonConstAdd` to `NonConstAdd`\n-  --> $DIR/assoc-type.rs:18:5\n+  --> $DIR/assoc-type.rs:19:5\n    |\n LL |     type Bar = NonConstAdd;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `NonConstAdd + NonConstAdd`\n    |\n    = help: the trait `Add` is not implemented for `NonConstAdd`\n note: required by a bound in `Foo::Bar`\n-  --> $DIR/assoc-type.rs:14:15\n+  --> $DIR/assoc-type.rs:15:15\n    |\n LL |     type Bar: ~const std::ops::Add;\n    |               ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Foo::Bar`"}, {"sha": "6b2ac985555dc59fc7014b3c0afeb4267ffd9420", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2439b7b9bafcfdff86b7847128014699df8442/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2439b7b9bafcfdff86b7847128014699df8442/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=ff2439b7b9bafcfdff86b7847128014699df8442", "patch": "@@ -67,8 +67,8 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n             let mut is_future = false;\n             for &(p, _span) in preds {\n                 let p = p.subst(cx.tcx, subst);\n-                if let Some(trait_pred) = p.to_opt_poly_trait_pred() {\n-                    if Some(trait_pred.skip_binder().trait_ref.def_id) == cx.tcx.lang_items().future_trait() {\n+                if let Some(trait_ref) = p.to_opt_poly_trait_ref() {\n+                    if Some(trait_ref.value.def_id()) == cx.tcx.lang_items().future_trait() {\n                         is_future = true;\n                         break;\n                     }"}]}