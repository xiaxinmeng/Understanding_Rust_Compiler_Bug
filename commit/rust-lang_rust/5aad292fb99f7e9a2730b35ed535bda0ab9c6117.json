{"sha": "5aad292fb99f7e9a2730b35ed535bda0ab9c6117", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYWQyOTJmYjk5ZjdlOWEyNzMwYjM1ZWQ1MzViZGEwYWI5YzYxMTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-10T20:51:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-10T20:51:22Z"}, "message": "auto merge of #10880 : cmr/rust/tut++, r=pnkfelix\n\nMany of them are small. Will squash on request, but I feel like it's easier\nfor everyone (easier to see and back out individual changes) this way.", "tree": {"sha": "cdbea5cce7a19bcf099c5dd827023e9dfd4fc773", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdbea5cce7a19bcf099c5dd827023e9dfd4fc773"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aad292fb99f7e9a2730b35ed535bda0ab9c6117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aad292fb99f7e9a2730b35ed535bda0ab9c6117", "html_url": "https://github.com/rust-lang/rust/commit/5aad292fb99f7e9a2730b35ed535bda0ab9c6117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aad292fb99f7e9a2730b35ed535bda0ab9c6117/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ab6a0856ff4ce59ae39ce067110446576ab227f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ab6a0856ff4ce59ae39ce067110446576ab227f", "html_url": "https://github.com/rust-lang/rust/commit/4ab6a0856ff4ce59ae39ce067110446576ab227f"}, {"sha": "c935a88a971f3b1e988e74182a3d8bba869fabbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c935a88a971f3b1e988e74182a3d8bba869fabbe", "html_url": "https://github.com/rust-lang/rust/commit/c935a88a971f3b1e988e74182a3d8bba869fabbe"}], "stats": {"total": 252, "additions": 156, "deletions": 96}, "files": [{"sha": "29ac2d2a2f3647433f82975ce951f506e93ff860", "filename": "doc/rustdoc.md", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/5aad292fb99f7e9a2730b35ed535bda0ab9c6117/doc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/5aad292fb99f7e9a2730b35ed535bda0ab9c6117/doc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frustdoc.md?ref=5aad292fb99f7e9a2730b35ed535bda0ab9c6117", "patch": "@@ -0,0 +1,72 @@\n+% Rust Documentation\n+\n+`rustdoc` is the built-in tool for generating documentation. It integrates\n+with the compiler to provide accurate hyperlinking between usage of types and\n+their documentation. Furthermore, by not using a separate parser, it will\n+never reject your valid Rust code.\n+\n+# Creating Documentation\n+\n+Documenting Rust APIs is quite simple. To document a given item, we have \"doc\n+comments\":\n+\n+~~~\n+// the \"link\" crate attribute is currently required for rustdoc, but normally\n+// isn't needed.\n+#[link(name=\"universe\")];\n+#[crate_type=\"lib\"];\n+\n+//! Tools for dealing with universes (this is a doc comment, and is shown on\n+//! the crate index page. The ! makes it apply to the parent of the comment,\n+//! rather than what follows).\n+\n+/// Widgets are very common (this is a doc comment, and will show up on\n+/// Widget's documentation).\n+pub struct Widget {\n+\t/// All widgets have a purpose (this is a doc comment, and will show up\n+\t/// the field's documentation).\n+\tpurpose: ~str,\n+\t/// Humans are not allowed to understand some widgets\n+\tunderstandable: bool\n+}\n+\n+pub fn recalibrate() {\n+\t//! Recalibrate a pesky universe (this is also a doc comment, like above,\n+\t//! the documentation will be applied to the *parent* item, so\n+\t//! `recalibrate`).\n+\t/* ... */\n+}\n+~~~\n+\n+Then, one can run `rustdoc universe.rs`. By default, it generates a directory\n+called `doc`, with the documentation for `universe` being in\n+`doc/universe/index.html`. If you are using other crates with `extern mod`,\n+rustdoc will even link to them when you use their types, as long as their\n+documentation has already been generated by a previous run of rustdoc, or the\n+crate advertises that its documentation is hosted at a given URL.\n+\n+The generated output can be controlled with the `doc` crate attribute, which\n+is how the above advertisement works. An example from the `libstd`\n+documentation:\n+\n+~~~\n+#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n+      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n+~~~\n+\n+The `html_root_url` is the prefix that rustdoc will apply to any references to\n+that crate's types etc.\n+\n+rustdoc can also generate JSON, for consumption by other tools, with\n+`rustdoc --output-format json`, and also consume already-generated JSON with\n+`rustdoc --input-format json`.\n+\n+# Using the Documentation\n+\n+The web pages generated by rustdoc present the same logical heirarchy that one\n+writes a library with. Every kind of item (function, struct, etc) has its own\n+color, and one can always click on a colored type to jump to its\n+documentation. There is a search bar at the top, which is powered by some\n+javascript and a statically-generated search index. No special web server is\n+required for the search."}, {"sha": "ae045581ad3e0c4e7614701be46a52f516b7f03b", "filename": "doc/tutorial.md", "status": "modified", "additions": 77, "deletions": 96, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/5aad292fb99f7e9a2730b35ed535bda0ab9c6117/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/5aad292fb99f7e9a2730b35ed535bda0ab9c6117/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=5aad292fb99f7e9a2730b35ed535bda0ab9c6117", "patch": "@@ -57,9 +57,13 @@ they don't contain references to names that aren't actually defined.\n \n # Getting started\n \n-The Rust compiler currently must be built from a [tarball], unless you\n-are on Windows, in which case using the [installer][win-exe] is\n-recommended.\n+> **NOTE**: The tarball and installer links are for the most recent release,\n+> not master.\n+\n+The Rust compiler currently must be built from a [tarball] or [git], unless\n+you are on Windows, in which case using the [installer][win-exe] is\n+recommended. There is a list of community-maintained nightly builds and\n+packages [on the wiki][wiki-packages].\n \n Since the Rust compiler is written in Rust, it must be built by\n a precompiled \"snapshot\" version of itself (made in an earlier state\n@@ -84,6 +88,7 @@ supported build environments that are most likely to work.\n \n [bug-3319]: https://github.com/mozilla/rust/issues/3319\n [wiki-start]: https://github.com/mozilla/rust/wiki/Note-getting-started-developing-Rust\n+[git]: https://github.com/mozilla/rust.git\n \n To build from source you will also need the following prerequisite\n packages:\n@@ -141,15 +146,15 @@ an error message like this:\n ~~~~ {.notrust}\n hello.rs:2:4: 2:16 error: unresolved name: print_with_unicorns\n hello.rs:2     print_with_unicorns(\"hello?\");\n-               ^~~~~~~~~~~~~~~~~~~~~~~\n+               ^~~~~~~~~~~~~~~~~~~\n ~~~~\n \n In its simplest form, a Rust program is a `.rs` file with some types\n and functions defined in it. If it has a `main` function, it can be\n compiled to an executable. Rust does not allow code that's not a\n declaration to appear at the top level of the file: all statements must\n live inside a function.  Rust programs can also be compiled as\n-libraries, and included in other programs.\n+libraries, and included in other programs, even ones not written in Rust.\n \n ## Editing Rust code\n \n@@ -163,6 +168,9 @@ Sublime Text 2, available both [standalone][sublime] and through\n [Sublime Package Control][sublime-pkg], and support for Kate\n under `src/etc/kate`.\n \n+A community-maintained list of available Rust tooling is [on the\n+wiki][wiki-packages].\n+\n There is ctags support via `src/etc/ctags.rust`, but many other\n tools and editors are not yet supported. If you end up writing a Rust\n mode for your favorite editor, let us know so that we can link to it.\n@@ -207,14 +215,15 @@ let hi = \"hi\";\n let mut count = 0;\n \n while count < 10 {\n-    println!(\"count: {}\", count);\n+    println!(\"count is {}\", count);\n     count += 1;\n }\n ~~~~\n \n-Although Rust can almost always infer the types of local variables, you\n-can specify a variable's type by following it with a colon, then the type\n-name. Static items, on the other hand, always require a type annotation.\n+Although Rust can almost always infer the types of local variables, you can\n+specify a variable's type by following it in the `let` with a colon, then the\n+type name. Static items, on the other hand, always require a type annotation.\n+\n \n ~~~~\n static MONSTER_FACTOR: f64 = 57.8;\n@@ -326,15 +335,16 @@ let d = 1000i32; // d is an i32\n There are two floating-point types: `f32`, and `f64`.\n Floating-point numbers are written `0.0`, `1e6`, or `2.1e-4`.\n Like integers, floating-point literals are inferred to the correct type.\n-Suffixes ``f32`, and `f64` can be used to create literals of a specific type.\n+Suffixes `f32`, and `f64` can be used to create literals of a specific type.\n \n The keywords `true` and `false` produce literals of type `bool`.\n \n Characters, the `char` type, are four-byte Unicode codepoints,\n whose literals are written between single quotes, as in `'x'`.\n Just like C, Rust understands a number of character escapes, using the backslash\n character, such as `\\n`, `\\r`, and `\\t`. String literals,\n-written between double quotes, allow the same escape sequences.\n+written between double quotes, allow the same escape sequences, and do no\n+other processing, unlike languages such as PHP or shell.\n \n On the other hand, raw string literals do not process any escape sequences.\n They are written as `r##\"blah\"##`, with a matching number of zero or more `#`\n@@ -351,24 +361,28 @@ Rust's set of operators contains very few surprises. Arithmetic is done with\n also a unary prefix operator that negates numbers. As in C, the bitwise operators\n `>>`, `<<`, `&`, `|`, and `^` are also supported.\n \n-Note that, if applied to an integer value, `!` flips all the bits (like `~` in\n-C).\n+Note that, if applied to an integer value, `!` flips all the bits (bitwise\n+NOT, like `~` in C).\n \n The comparison operators are the traditional `==`, `!=`, `<`, `>`,\n `<=`, and `>=`. Short-circuiting (lazy) boolean operators are written\n `&&` (and) and `||` (or).\n \n-For type casting, Rust uses the binary `as` operator.  It takes an\n-expression on the left side and a type on the right side and will,\n-if a meaningful conversion exists, convert the result of the\n-expression to the given type.\n+For compile-time type casting, Rust uses the binary `as` operator.  It takes\n+an expression on the left side and a type on the right side and will, if a\n+meaningful conversion exists, convert the result of the expression to the\n+given type. Generally, `as` is only used with the primitive numeric types or\n+pointers, and is not overloadable.  [`transmute`][transmute] can be used for\n+unsafe C-like casting of same-sized types.\n \n ~~~~\n let x: f64 = 4.0;\n let y: uint = x as uint;\n assert!(y == 4u);\n ~~~~\n \n+[transmute]: http://static.rust-lang.org/doc/master/std/cast/fn.transmute.html\n+\n ## Syntax extensions\n \n *Syntax extensions* are special forms that are not built into the language,\n@@ -379,7 +393,7 @@ useful of which is [`format!`][fmt], a `sprintf`-like text formatter that you\n will often see in examples, and its related family of macros: `print!`,\n `println!`, and `write!`.\n \n-`format!` draws syntax from python, but contains many of the same principles\n+`format!` draws syntax from Python, but contains many of the same principles\n that [printf][pf] has. Unlike printf, `format!` will give you a compile-time\n error when the types of the directives don't match the types of the arguments.\n \n@@ -396,7 +410,9 @@ println!(\"what is this thing: {:?}\", mystery_object);\n [pf]: http://en.cppreference.com/w/cpp/io/c/fprintf\n [fmt]: http://static.rust-lang.org/doc/master/std/fmt/index.html\n \n-You can define your own syntax extensions with the macro system. For details, see the [macro tutorial][macros].\n+You can define your own syntax extensions with the macro system. For details,\n+see the [macro tutorial][macros]. Note that macro definition is currently\n+considered an unstable feature.\n \n # Control structures\n \n@@ -457,9 +473,8 @@ their own value. A single arm may match multiple different patterns by\n combining them with the pipe operator (`|`), so long as every pattern\n binds the same set of variables. Ranges of numeric literal patterns\n can be expressed with two dots, as in `M..N`. The underscore (`_`) is\n-a wildcard pattern that matches any single value. The asterisk (`*`)\n-is a different wildcard that can match one or more fields in an `enum`\n-variant.\n+a wildcard pattern that matches any single value. (`..`) is a different\n+wildcard that can match one or more fields in an `enum` variant.\n \n The patterns in a match arm are followed by a fat arrow, `=>`, then an\n expression to evaluate. Each case is separated by commas. It's often\n@@ -531,7 +546,7 @@ literals and most `enum` variants.\n \n `while` denotes a loop that iterates as long as its given condition\n (which must have type `bool`) evaluates to `true`. Inside a loop, the\n-keyword `break` aborts the loop, and `loop` aborts the current\n+keyword `break` aborts the loop, and `continue` aborts the current\n iteration and continues with the next.\n \n ~~~~\n@@ -575,9 +590,8 @@ struct Point {\n }\n ~~~~\n \n-Inherited mutability means that any field of a struct may be mutable, if the\n-struct is in a mutable slot (or a field of a struct in a mutable slot, and\n-so forth).\n+Structs have \"inherited mutability\", which means that any field of a struct\n+may be mutable, if the struct is in a mutable slot.\n \n With a value (say, `mypoint`) of such a type in a mutable location, you can do\n `mypoint.y += 1.0`. But in an immutable location, such an assignment to a\n@@ -739,9 +753,9 @@ fn area(sh: Shape) -> f64 {\n \n ## Tuples\n \n-Tuples in Rust behave exactly like structs, except that their fields\n-do not have names. Thus, you cannot access their fields with dot notation.\n-Tuples can have any arity except for 0 (though you may consider\n+Tuples in Rust behave exactly like structs, except that their fields do not\n+have names. Thus, you cannot access their fields with dot notation.  Tuples\n+can have any arity (number of elements) except for 0 (though you may consider\n unit, `()`, as the empty tuple if you like).\n \n ~~~~\n@@ -789,7 +803,7 @@ let id_int: int = *my_gizmo_id;\n ~~~~\n \n Types like this can be useful to differentiate between data that have\n-the same type but must be used in different ways.\n+the same underlying type but must be used in different ways.\n \n ~~~~\n struct Inches(int);\n@@ -806,7 +820,7 @@ declarations, such as `type`, functions can be declared both at the\n top level and inside other functions (or in modules, which we'll come\n back to [later](#crates-and-the-module-system)). The `fn` keyword introduces a\n function. A function has an argument list, which is a parenthesized\n-list of `expr: type` pairs separated by commas. An arrow `->`\n+list of `name: type` pairs separated by commas. An arrow `->`\n separates the argument list and the function's return type.\n \n ~~~~\n@@ -863,9 +877,9 @@ A *destructor* is a function responsible for cleaning up the resources used by\n an object when it is no longer accessible. Destructors can be defined to handle\n the release of resources like files, sockets and heap memory.\n \n-Objects are never accessible after their destructor has been called, so there\n-are no dynamic failures from accessing freed resources. When a task fails, the\n-destructors of all objects in the task are called.\n+Objects are never accessible after their destructor has been called, so no\n+dynamic failures are possible from accessing freed resources. When a task\n+fails, destructors of all objects in the task are called.\n \n The `~` sigil represents a unique handle for a memory allocation on the heap:\n \n@@ -908,11 +922,15 @@ let mut b = Foo { x: 5, y: ~10 };\n b.x = 10;\n ~~~~\n \n-If an object doesn't contain garbage-collected boxes, it consists of a single\n-ownership tree and is given the `Owned` trait which allows it to be sent\n+If an object doesn't contain any non-Send types, it consists of a single\n+ownership tree and is itself given the `Send` trait which allows it to be sent\n between tasks. Custom destructors can only be implemented directly on types\n-that are `Owned`, but garbage-collected boxes can still *contain* types with\n-custom destructors.\n+that are `Send`, but non-`Send` types can still *contain* types with custom\n+destructors. Example of types which are not `Send` are [`Gc<T>`][gc] and\n+[`Rc<T>`][rc], the shared-ownership types.\n+\n+[gc]: http://static.rust-lang.org/doc/master/std/gc/struct.Gc.html\n+[rc]: http://static.rust-lang.org/doc/master/std/rc/struct.Rc.html\n \n # Implementing a linked list\n \n@@ -1217,8 +1235,9 @@ xs = prepend::<int>(xs, 15);\n xs = prepend::<int>(xs, 20);\n ~~~\n \n-In the type grammar, the language uses `Type<T, U, V>` to describe a list of\n-type parameters, but expressions use `identifier::<T, U, V>`.\n+In declarations, the language uses `Type<T, U, V>` to describe a list of type\n+parameters, but expressions use `identifier::<T, U, V>`, to disambiguate the\n+`<` operator.\n \n ## Defining list equality with generics\n \n@@ -1295,7 +1314,7 @@ provide.\n \n In uncommon cases, the indirection can provide a performance gain or memory\n reduction by making values smaller. However, unboxed values should almost\n-always be preferred.\n+always be preferred when they are usable.\n \n Note that returning large unboxed values via boxes is unnecessary. A large\n value is returned via a hidden output parameter, and the decision on where to\n@@ -1306,7 +1325,7 @@ fn foo() -> (u64, u64, u64, u64, u64, u64) {\n     (5, 5, 5, 5, 5, 5)\n }\n \n-let x = ~foo(); // allocates, and writes the integers directly to it\n+let x = ~foo(); // allocates a ~ box, and writes the integers directly to it\n ~~~~\n \n Beyond the properties granted by the size, an owned box behaves as a regular\n@@ -1385,7 +1404,7 @@ compute_distance(managed_box, owned_box);\n Here the `&` operator is used to take the address of the variable\n `on_the_stack`; this is because `on_the_stack` has the type `Point`\n (that is, a struct value) and we have to take its address to get a\n-value. We also call this _borrowing_ the local variable\n+reference. We also call this _borrowing_ the local variable\n `on_the_stack`, because we are creating an alias: that is, another\n route to the same data.\n \n@@ -1412,7 +1431,8 @@ For a more in-depth explanation of borrowed pointers, read the\n ## Freezing\n \n Lending an immutable pointer to an object freezes it and prevents mutation.\n-`Owned` objects have freezing enforced statically at compile-time.\n+`Freeze` objects have freezing enforced statically at compile-time. Examples\n+of non-`Freeze` types are `@mut` and [`RefCell<T>`][refcell].\n \n ~~~~\n let mut x = 5;\n@@ -1437,6 +1457,8 @@ let y = x;\n // the box is now unfrozen again\n ~~~~\n \n+[refcell]: http://static.rust-lang.org/doc/master/std/cell/struct.RefCell.html\n+\n # Dereferencing pointers\n \n Rust uses the unary star operator (`*`) to access the contents of a\n@@ -3174,59 +3196,15 @@ Both auto-insertions can be disabled with an attribute if necessary:\n #[no_implicit_prelude];\n ~~~\n \n-## The standard library in detail\n-\n-The Rust standard library provides runtime features required by the language,\n-including the task scheduler and memory allocators, as well as library\n-support for Rust built-in types, platform abstractions, and other commonly\n-used features.\n-\n-[`std`] includes modules corresponding to each of the integer types, each of\n-the floating point types, the [`bool`] type, [tuples], [characters], [strings],\n-[vectors], [managed boxes], [owned boxes],\n-and unsafe and borrowed [pointers].  Additionally, `std` provides\n-some pervasive types ([`option`] and [`result`]),\n-[task] creation and [communication] primitives,\n-platform abstractions ([`os`] and [`path`]), basic\n-I/O abstractions ([`io`]), [containers] like [`hashmap`],\n-common traits ([`kinds`], [`ops`], [`cmp`], [`num`],\n-[`to_str`], [`clone`]), and complete bindings to the C standard library ([`libc`]).\n-\n-The full documentation for `std` can be found here: [standard library].\n-\n-[standard library]: std/index.html\n-[`std`]: std/index.html\n-[`bool`]: std/bool/index.html\n-[tuples]: std/tuple/index.html\n-[characters]: std/char/index.html\n-[strings]: std/str/index.html\n-[vectors]: std/vec/index.html\n-[managed boxes]: std/managed/index.html\n-[owned boxes]: std/owned/index.html\n-[pointers]: std/ptr/index.html\n-[`option`]: std/option/index.html\n-[`result`]: std/result/index.html\n-[task]: std/task/index.html\n-[communication]: std/comm/index.html\n-[`os`]: std/os/index.html\n-[`path`]: std/path/index.html\n-[`io`]: std/io/index.html\n-[containers]: std/container/index.html\n-[`hashmap`]: std/hashmap/index.html\n-[`kinds`]: std/kinds/index.html\n-[`ops`]: std/ops/index.html\n-[`cmp`]: std/cmp/index.html\n-[`num`]: std/num/index.html\n-[`to_str`]: std/to_str/index.html\n-[`clone`]: std/clone/index.html\n-[`libc`]: std/libc/index.html\n+See the [API documentation][stddoc] for details.\n+\n+[stddoc]: std/index.html\n \n ## The extra library\n \n-Rust also ships with the [extra library], an accumulation of\n-useful things, that are however not important enough\n-to deserve a place in the standard library.\n-You can use them by linking to `extra` with an `extern mod extra;`.\n+Rust also ships with the [extra library], an accumulation of useful things,\n+that are however not important enough to deserve a place in the standard\n+library.  You can use them by linking to `extra` with an `extern mod extra;`.\n \n [extra library]: extra/index.html\n \n@@ -3245,8 +3223,10 @@ tutorials on individual topics.\n * [Containers and iterators][container]\n * [Error-handling and Conditions][conditions]\n * [Packaging up Rust code][rustpkg]\n+* [Documenting Rust code][rustdoc]\n \n-There is further documentation on the [wiki], however those tend to be even more out of date as this document.\n+There is further documentation on the [wiki], however those tend to be even\n+more out of date than this document.\n \n [borrow]: tutorial-borrowed-ptr.html\n [tasks]: tutorial-tasks.html\n@@ -3255,6 +3235,7 @@ There is further documentation on the [wiki], however those tend to be even more\n [container]: tutorial-container.html\n [conditions]: tutorial-conditions.html\n [rustpkg]: tutorial-rustpkg.html\n+[rustdoc]: tutorial-rustdoc.html\n \n [wiki]: https://github.com/mozilla/rust/wiki/Docs\n-\n+[wiki-packages]: https://github.com/mozilla/rust/wiki/Doc-packages,-editors,-and-other-tools"}, {"sha": "43b7e9e30997a9fe19ade25061bf96112e1bf198", "filename": "mk/docs.mk", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5aad292fb99f7e9a2730b35ed535bda0ab9c6117/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/5aad292fb99f7e9a2730b35ed535bda0ab9c6117/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=5aad292fb99f7e9a2730b35ed535bda0ab9c6117", "patch": "@@ -74,6 +74,13 @@ doc/rustpkg.html: rustpkg.md doc/version_info.html doc/rust.css \\\n \t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n \t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n \n+DOCS += doc/rustdoc.html\n+doc/rustdoc.html: rustdoc.md doc/version_info.html doc/rust.css \\\n+\t\t\t\tdoc/favicon.inc\n+\t@$(call E, pandoc: $@)\n+\t$(Q)$(CFG_NODE) $(S)doc/prep.js --highlight $< | \\\n+\t$(CFG_PANDOC) $(HTML_OPTS) --output=$@\n+\n DOCS += doc/tutorial.html\n doc/tutorial.html: tutorial.md doc/version_info.html doc/rust.css \\\n \t\t\t\tdoc/favicon.inc"}]}