{"sha": "dc720c3aba3ef66b49b74ef73579dc716efc2c6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNzIwYzNhYmEzZWY2NmI0OWI3NGVmNzM1NzlkYzcxNmVmYzJjNmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-10T21:30:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-10T21:35:12Z"}, "message": "rt: Implement polymorphic log on strings", "tree": {"sha": "de3f28959689a8dabfc0ab39a6ed48ae16e17f9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de3f28959689a8dabfc0ab39a6ed48ae16e17f9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc720c3aba3ef66b49b74ef73579dc716efc2c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc720c3aba3ef66b49b74ef73579dc716efc2c6a", "html_url": "https://github.com/rust-lang/rust/commit/dc720c3aba3ef66b49b74ef73579dc716efc2c6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc720c3aba3ef66b49b74ef73579dc716efc2c6a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adce35acd481d6ecc087c5957601b0a680e936a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/adce35acd481d6ecc087c5957601b0a680e936a8", "html_url": "https://github.com/rust-lang/rust/commit/adce35acd481d6ecc087c5957601b0a680e936a8"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "f33ecd91c5191930c29f435dd7511a429e495b25", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dc720c3aba3ef66b49b74ef73579dc716efc2c6a/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dc720c3aba3ef66b49b74ef73579dc716efc2c6a/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=dc720c3aba3ef66b49b74ef73579dc716efc2c6a", "patch": "@@ -2,10 +2,12 @@\n // actions, such as copying, freeing, comparing, and so on.\n \n #include <algorithm>\n+#include <iomanip>\n #include <iostream>\n #include <sstream>\n #include <utility>\n #include <cassert>\n+#include <cctype>\n #include <cstdio>\n #include <cstdlib>\n #include \"rust_internal.h\"\n@@ -227,6 +229,9 @@ class ptr {\n         return make(p + amount);\n     }\n     inline ptr &operator+=(const size_t amount) { p += amount; return *this; }\n+    inline bool operator<(const ptr other) { return p < other.p; }\n+    inline ptr operator++() { ptr rv(*this); p++; return rv; }\n+    inline uint8_t operator*() { return *p; }\n \n     template<typename T>\n     inline operator T *() { return (T *)p; }\n@@ -289,6 +294,8 @@ class ctxt {\n     get_variant_sp(tag_info &info, uint32_t variant_id);\n \n protected:\n+    inline uint8_t peek() { return *sp; }\n+\n     static inline uint16_t get_u16(const uint8_t *addr);\n     static inline uint16_t get_u16_bump(const uint8_t *&addr);\n     inline size_align get_size_align(const uint8_t *&addr);\n@@ -1236,6 +1243,8 @@ class log : public data<log,ptr> {\n     : data<log,ptr>(other.task, in_sp, in_params, in_tables, other.dp),\n       out(other.out) {}\n \n+    void walk_string(const std::pair<ptr,ptr> &data);\n+\n     void walk_evec(bool align, bool is_pod, uint16_t sp_size) {\n         walk_vec(align, is_pod, get_evec_data_range(dp));\n     }\n@@ -1267,10 +1276,32 @@ class log : public data<log,ptr> {\n       out(in_out) {}\n };\n \n+void\n+log::walk_string(const std::pair<ptr,ptr> &data) {\n+    out << \"\\\"\" << std::hex;\n+\n+    ptr subdp = data.first;\n+    while (subdp < data.second) {\n+        char ch = *subdp;\n+        if (isprint(ch))\n+            out << ch;\n+        else if (ch)\n+            out << \"\\\\x\" << std::setw(2) << std::setfill('0') << (int)ch;\n+        ++subdp;\n+    }\n+\n+    out << \"\\\"\" << std::dec;\n+}\n+\n void\n log::walk_vec(bool align, bool is_pod, const std::pair<ptr,ptr> &data) {\n-    // TODO: Check to see whether this is a string (contains u8). If so,\n-    // write the vector \"\"-style; otherwise [ ... , ... ] style.\n+    if (peek() == SHAPE_U8) {\n+        sp++;   // It's a string. We handle this ourselves.\n+        walk_string(data);\n+        return;\n+    }\n+\n+    // TODO: Write vectors [ ..., ..., ... ] style.\n }\n \n } // end namespace shape"}]}