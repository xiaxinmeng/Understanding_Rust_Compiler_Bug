{"sha": "dc39c31699a83313edf2ac096d0bf3cef871b705", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMzljMzE2OTlhODMzMTNlZGYyYWMwOTZkMGJmM2NlZjg3MWI3MDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-17T21:00:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-17T21:00:27Z"}, "message": "Auto merge of #46788 - petrochenkov:assocrecov, r=estebank\n\nsyntax: recovery for incorrect associated item paths like `[T; N]::clone`\n\ncc https://github.com/rust-lang/rust/pull/44970\nFixes https://github.com/rust-lang/rust/issues/42187\nr? @estebank", "tree": {"sha": "b1ef5060520a0140a21aee2f9773383c06e5d789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1ef5060520a0140a21aee2f9773383c06e5d789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc39c31699a83313edf2ac096d0bf3cef871b705", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc39c31699a83313edf2ac096d0bf3cef871b705", "html_url": "https://github.com/rust-lang/rust/commit/dc39c31699a83313edf2ac096d0bf3cef871b705", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc39c31699a83313edf2ac096d0bf3cef871b705/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cc68bac7c89a81ec83cbd8f0aff9db001425c50", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc68bac7c89a81ec83cbd8f0aff9db001425c50", "html_url": "https://github.com/rust-lang/rust/commit/3cc68bac7c89a81ec83cbd8f0aff9db001425c50"}, {"sha": "70e5c3731961b5754bc5b155a75b2f7ff7fb997b", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e5c3731961b5754bc5b155a75b2f7ff7fb997b", "html_url": "https://github.com/rust-lang/rust/commit/70e5c3731961b5754bc5b155a75b2f7ff7fb997b"}], "stats": {"total": 377, "additions": 357, "deletions": 20}, "files": [{"sha": "461cb0480d20bf19560da5bba7cb22a2c34a1c38", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=dc39c31699a83313edf2ac096d0bf3cef871b705", "patch": "@@ -20,6 +20,7 @@ use syntax_pos::{Span, DUMMY_SP};\n use codemap::{respan, Spanned};\n use abi::Abi;\n use ext::hygiene::{Mark, SyntaxContext};\n+use parse::parser::{RecoverQPath, PathStyle};\n use print::pprust;\n use ptr::P;\n use rustc_data_structures::indexed_vec;\n@@ -519,6 +520,38 @@ impl Pat {\n     }\n }\n \n+impl RecoverQPath for Pat {\n+    fn to_ty(&self) -> Option<P<Ty>> {\n+        let node = match &self.node {\n+            PatKind::Wild => TyKind::Infer,\n+            PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), ident, None) =>\n+                TyKind::Path(None, Path::from_ident(ident.span, ident.node)),\n+            PatKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),\n+            PatKind::Mac(mac) => TyKind::Mac(mac.clone()),\n+            PatKind::Ref(pat, mutbl) =>\n+                pat.to_ty().map(|ty| TyKind::Rptr(None, MutTy { ty, mutbl: *mutbl }))?,\n+            PatKind::Slice(pats, None, _) if pats.len() == 1 =>\n+                pats[0].to_ty().map(TyKind::Slice)?,\n+            PatKind::Tuple(pats, None) => {\n+                let mut tys = Vec::new();\n+                for pat in pats {\n+                    tys.push(pat.to_ty()?);\n+                }\n+                TyKind::Tup(tys)\n+            }\n+            _ => return None,\n+        };\n+\n+        Some(P(Ty { node, id: self.id, span: self.span }))\n+    }\n+    fn to_recovered(&self, qself: Option<QSelf>, path: Path) -> Self {\n+        Self { span: path.span, node: PatKind::Path(qself, path), id: self.id }\n+    }\n+    fn to_string(&self) -> String {\n+        pprust::pat_to_string(self)\n+    }\n+}\n+\n /// A single field in a struct pattern\n ///\n /// Patterns like the fields of Foo `{ x, ref y, ref mut z }`\n@@ -877,6 +910,54 @@ impl Expr {\n             true\n         }\n     }\n+\n+    fn to_bound(&self) -> Option<TyParamBound> {\n+        match &self.node {\n+            ExprKind::Path(None, path) =>\n+                Some(TraitTyParamBound(PolyTraitRef::new(Vec::new(), path.clone(), self.span),\n+                                       TraitBoundModifier::None)),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+impl RecoverQPath for Expr {\n+    fn to_ty(&self) -> Option<P<Ty>> {\n+        let node = match &self.node {\n+            ExprKind::Path(qself, path) => TyKind::Path(qself.clone(), path.clone()),\n+            ExprKind::Mac(mac) => TyKind::Mac(mac.clone()),\n+            ExprKind::Paren(expr) => expr.to_ty().map(TyKind::Paren)?,\n+            ExprKind::AddrOf(mutbl, expr) =>\n+                expr.to_ty().map(|ty| TyKind::Rptr(None, MutTy { ty, mutbl: *mutbl }))?,\n+            ExprKind::Repeat(expr, expr_len) =>\n+                expr.to_ty().map(|ty| TyKind::Array(ty, expr_len.clone()))?,\n+            ExprKind::Array(exprs) if exprs.len() == 1 =>\n+                exprs[0].to_ty().map(TyKind::Slice)?,\n+            ExprKind::Tup(exprs) => {\n+                let mut tys = Vec::new();\n+                for expr in exprs {\n+                    tys.push(expr.to_ty()?);\n+                }\n+                TyKind::Tup(tys)\n+            }\n+            ExprKind::Binary(binop, lhs, rhs) if binop.node == BinOpKind::Add =>\n+                if let (Some(lhs), Some(rhs)) = (lhs.to_bound(), rhs.to_bound()) {\n+                    TyKind::TraitObject(vec![lhs, rhs], TraitObjectSyntax::None)\n+                } else {\n+                    return None;\n+                }\n+            _ => return None,\n+        };\n+\n+        Some(P(Ty { node, id: self.id, span: self.span }))\n+    }\n+    fn to_recovered(&self, qself: Option<QSelf>, path: Path) -> Self {\n+        Self { span: path.span, node: ExprKind::Path(qself, path),\n+               id: self.id, attrs: self.attrs.clone() }\n+    }\n+    fn to_string(&self) -> String {\n+        pprust::expr_to_string(self)\n+    }\n }\n \n impl fmt::Debug for Expr {\n@@ -1388,6 +1469,19 @@ pub struct Ty {\n     pub span: Span,\n }\n \n+impl RecoverQPath for Ty {\n+    fn to_ty(&self) -> Option<P<Ty>> {\n+        Some(P(self.clone()))\n+    }\n+    fn to_recovered(&self, qself: Option<QSelf>, path: Path) -> Self {\n+        Self { span: path.span, node: TyKind::Path(qself, path), id: self.id }\n+    }\n+    fn to_string(&self) -> String {\n+        pprust::ty_to_string(self)\n+    }\n+    const PATH_STYLE: PathStyle = PathStyle::Type;\n+}\n+\n impl fmt::Debug for Ty {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"type({})\", pprust::ty_to_string(self))"}, {"sha": "44383233a8af190b505944f6ed57dba8df52ab65", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=dc39c31699a83313edf2ac096d0bf3cef871b705", "patch": "@@ -22,6 +22,7 @@\n \n #![feature(unicode)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(match_default_bindings)]\n #![feature(i128_type)]\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this."}, {"sha": "c3dd17e8775668ca8c2526bc481020d392ebb010", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 50, "deletions": 20, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=dc39c31699a83313edf2ac096d0bf3cef871b705", "patch": "@@ -169,6 +169,13 @@ enum PrevTokenKind {\n     Other,\n }\n \n+pub(crate) trait RecoverQPath: Sized {\n+    fn to_ty(&self) -> Option<P<Ty>>;\n+    fn to_recovered(&self, qself: Option<QSelf>, path: ast::Path) -> Self;\n+    fn to_string(&self) -> String;\n+    const PATH_STYLE: PathStyle = PathStyle::Expr;\n+}\n+\n /* ident is handled by common.rs */\n \n #[derive(Clone)]\n@@ -1567,6 +1574,7 @@ impl<'a> Parser<'a> {\n \n         // Try to recover from use of `+` with incorrect priority.\n         self.maybe_recover_from_bad_type_plus(allow_plus, &ty)?;\n+        let ty = self.maybe_recover_from_bad_qpath(ty)?;\n \n         Ok(P(ty))\n     }\n@@ -1621,6 +1629,32 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n+    // Try to recover from associated item paths like `[T]::AssocItem`/`(T, U)::AssocItem`.\n+    fn maybe_recover_from_bad_qpath<T: RecoverQPath>(&mut self, base: T) -> PResult<'a, T> {\n+        // Do not add `::` to expected tokens.\n+        if self.token != token::ModSep {\n+            return Ok(base);\n+        }\n+        let ty = match base.to_ty() {\n+            Some(ty) => ty,\n+            None => return Ok(base),\n+        };\n+\n+        self.bump(); // `::`\n+        let mut segments = Vec::new();\n+        self.parse_path_segments(&mut segments, T::PATH_STYLE, true)?;\n+\n+        let span = ty.span.to(self.prev_span);\n+        let recovered =\n+            base.to_recovered(Some(QSelf { ty, position: 0 }), ast::Path { segments, span });\n+\n+        self.diagnostic()\n+            .struct_span_err(span, \"missing angle brackets in associated item path\")\n+            .span_suggestion(span, \"try\", recovered.to_string()).emit();\n+\n+        Ok(recovered)\n+    }\n+\n     fn parse_borrowed_pointee(&mut self) -> PResult<'a, TyKind> {\n         let opt_lifetime = if self.check_lifetime() { Some(self.expect_lifetime()) } else { None };\n         let mutbl = self.parse_mutability();\n@@ -2012,12 +2046,7 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn mk_expr(&mut self, span: Span, node: ExprKind, attrs: ThinVec<Attribute>) -> P<Expr> {\n-        P(Expr {\n-            id: ast::DUMMY_NODE_ID,\n-            node,\n-            span,\n-            attrs: attrs.into(),\n-        })\n+        P(Expr { node, span, attrs, id: ast::DUMMY_NODE_ID })\n     }\n \n     pub fn mk_unary(&mut self, unop: ast::UnOp, expr: P<Expr>) -> ast::ExprKind {\n@@ -2139,12 +2168,11 @@ impl<'a> Parser<'a> {\n                 self.bump();\n \n                 hi = self.prev_span;\n-                let span = lo.to(hi);\n-                return if es.len() == 1 && !trailing_comma {\n-                    Ok(self.mk_expr(span, ExprKind::Paren(es.into_iter().nth(0).unwrap()), attrs))\n+                ex = if es.len() == 1 && !trailing_comma {\n+                    ExprKind::Paren(es.into_iter().nth(0).unwrap())\n                 } else {\n-                    Ok(self.mk_expr(span, ExprKind::Tup(es), attrs))\n-                }\n+                    ExprKind::Tup(es)\n+                };\n             }\n             token::OpenDelim(token::Brace) => {\n                 return self.parse_block_expr(lo, BlockCheckMode::Default, attrs);\n@@ -2344,7 +2372,10 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        return Ok(self.mk_expr(lo.to(hi), ex, attrs));\n+        let expr = Expr { node: ex, span: lo.to(hi), id: ast::DUMMY_NODE_ID, attrs };\n+        let expr = self.maybe_recover_from_bad_qpath(expr)?;\n+\n+        return Ok(P(expr));\n     }\n \n     fn parse_struct_expr(&mut self, lo: Span, pth: ast::Path, mut attrs: ThinVec<Attribute>)\n@@ -3405,7 +3436,7 @@ impl<'a> Parser<'a> {\n \n                     if self.check(&token::Comma) ||\n                             self.check(&token::CloseDelim(token::Bracket)) {\n-                        slice = Some(P(ast::Pat {\n+                        slice = Some(P(Pat {\n                             id: ast::DUMMY_NODE_ID,\n                             node: PatKind::Wild,\n                             span: self.span,\n@@ -3492,14 +3523,14 @@ impl<'a> Parser<'a> {\n                     (false, false) => BindingMode::ByValue(Mutability::Immutable),\n                 };\n                 let fieldpath = codemap::Spanned{span:self.prev_span, node:fieldname};\n-                let fieldpat = P(ast::Pat{\n+                let fieldpat = P(Pat {\n                     id: ast::DUMMY_NODE_ID,\n                     node: PatKind::Ident(bind_type, fieldpath, None),\n                     span: boxed_span.to(hi),\n                 });\n \n                 let subpat = if is_box {\n-                    P(ast::Pat{\n+                    P(Pat {\n                         id: ast::DUMMY_NODE_ID,\n                         node: PatKind::Box(fieldpat),\n                         span: lo.to(hi),\n@@ -3708,11 +3739,10 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        Ok(P(ast::Pat {\n-            id: ast::DUMMY_NODE_ID,\n-            node: pat,\n-            span: lo.to(self.prev_span),\n-        }))\n+        let pat = Pat { node: pat, span: lo.to(self.prev_span), id: ast::DUMMY_NODE_ID };\n+        let pat = self.maybe_recover_from_bad_qpath(pat)?;\n+\n+        Ok(P(pat))\n     }\n \n     /// Parse ident or ident @ pat"}, {"sha": "72b616ddd69c61075c20467c903cceafb126ab58", "filename": "src/test/ui/did_you_mean/bad-assoc-expr.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.rs?ref=dc39c31699a83313edf2ac096d0bf3cef871b705", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let a = [1, 2, 3, 4];\n+    [i32; 4]::clone(&a);\n+    //~^ ERROR missing angle brackets in associated item path\n+\n+    [i32]::as_ref(&a);\n+    //~^ ERROR missing angle brackets in associated item path\n+\n+    (u8)::clone(&0);\n+    //~^ ERROR missing angle brackets in associated item path\n+\n+    (u8, u8)::clone(&(0, 0));\n+    //~^ ERROR missing angle brackets in associated item path\n+}"}, {"sha": "1f8fc118f78a130ddb8301e12328c4f463088d7a", "filename": "src/test/ui/did_you_mean/bad-assoc-expr.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr?ref=dc39c31699a83313edf2ac096d0bf3cef871b705", "patch": "@@ -0,0 +1,26 @@\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-expr.rs:13:5\n+   |\n+13 |     [i32; 4]::clone(&a);\n+   |     ^^^^^^^^^^^^^^^ help: try: `<[i32; 4]>::clone`\n+\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-expr.rs:16:5\n+   |\n+16 |     [i32]::as_ref(&a);\n+   |     ^^^^^^^^^^^^^ help: try: `<[i32]>::as_ref`\n+\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-expr.rs:19:5\n+   |\n+19 |     (u8)::clone(&0);\n+   |     ^^^^^^^^^^^ help: try: `<(u8)>::clone`\n+\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-expr.rs:22:5\n+   |\n+22 |     (u8, u8)::clone(&(0, 0));\n+   |     ^^^^^^^^^^^^^^^ help: try: `<(u8, u8)>::clone`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "e6b7127f1005262a7304f5616040b1f92da2903b", "filename": "src/test/ui/did_you_mean/bad-assoc-pat.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.rs?ref=dc39c31699a83313edf2ac096d0bf3cef871b705", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    match 0u8 {\n+        [u8]::AssocItem => {}\n+        //~^ ERROR missing angle brackets in associated item path\n+        //~| ERROR no associated item named `AssocItem` found for type `[u8]` in the current scope\n+        (u8, u8)::AssocItem => {}\n+        //~^ ERROR missing angle brackets in associated item path\n+        //~| ERROR no associated item named `AssocItem` found for type `(u8, u8)` in the current sco\n+        _::AssocItem => {}\n+        //~^ ERROR missing angle brackets in associated item path\n+        //~| ERROR no associated item named `AssocItem` found for type `_` in the current scope\n+    }\n+}"}, {"sha": "20f9b96dbaa792f7d34a7435b59440d238bc71bb", "filename": "src/test/ui/did_you_mean/bad-assoc-pat.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr?ref=dc39c31699a83313edf2ac096d0bf3cef871b705", "patch": "@@ -0,0 +1,38 @@\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-pat.rs:13:9\n+   |\n+13 |         [u8]::AssocItem => {}\n+   |         ^^^^^^^^^^^^^^^ help: try: `<[u8]>::AssocItem`\n+\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-pat.rs:16:9\n+   |\n+16 |         (u8, u8)::AssocItem => {}\n+   |         ^^^^^^^^^^^^^^^^^^^ help: try: `<(u8, u8)>::AssocItem`\n+\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-pat.rs:19:9\n+   |\n+19 |         _::AssocItem => {}\n+   |         ^^^^^^^^^^^^ help: try: `<_>::AssocItem`\n+\n+error[E0599]: no associated item named `AssocItem` found for type `[u8]` in the current scope\n+  --> $DIR/bad-assoc-pat.rs:13:9\n+   |\n+13 |         [u8]::AssocItem => {}\n+   |         ^^^^^^^^^^^^^^^ associated item not found in `[u8]`\n+\n+error[E0599]: no associated item named `AssocItem` found for type `(u8, u8)` in the current scope\n+  --> $DIR/bad-assoc-pat.rs:16:9\n+   |\n+16 |         (u8, u8)::AssocItem => {}\n+   |         ^^^^^^^^^^^^^^^^^^^ associated item not found in `(u8, u8)`\n+\n+error[E0599]: no associated item named `AssocItem` found for type `_` in the current scope\n+  --> $DIR/bad-assoc-pat.rs:19:9\n+   |\n+19 |         _::AssocItem => {}\n+   |         ^^^^^^^^^^^^ associated item not found in `_`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "45a52936738823719b39ca4d1fc1dcc664b11d07", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs?ref=dc39c31699a83313edf2ac096d0bf3cef871b705", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+type A = [u8; 4]::AssocTy;\n+//~^ ERROR missing angle brackets in associated item path\n+//~| ERROR ambiguous associated type\n+\n+type B = [u8]::AssocTy;\n+//~^ ERROR missing angle brackets in associated item path\n+//~| ERROR ambiguous associated type\n+\n+type C = (u8)::AssocTy;\n+//~^ ERROR missing angle brackets in associated item path\n+//~| ERROR ambiguous associated type\n+\n+type D = (u8, u8)::AssocTy;\n+//~^ ERROR missing angle brackets in associated item path\n+//~| ERROR ambiguous associated type\n+\n+type E = _::AssocTy;\n+//~^ ERROR missing angle brackets in associated item path\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n+fn main() {}"}, {"sha": "617339a7d92d664feea42beb446b22d6f6ee490b", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc39c31699a83313edf2ac096d0bf3cef871b705/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=dc39c31699a83313edf2ac096d0bf3cef871b705", "patch": "@@ -0,0 +1,70 @@\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-ty.rs:11:10\n+   |\n+11 | type A = [u8; 4]::AssocTy;\n+   |          ^^^^^^^^^^^^^^^^ help: try: `<[u8; 4]>::AssocTy`\n+\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-ty.rs:15:10\n+   |\n+15 | type B = [u8]::AssocTy;\n+   |          ^^^^^^^^^^^^^ help: try: `<[u8]>::AssocTy`\n+\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-ty.rs:19:10\n+   |\n+19 | type C = (u8)::AssocTy;\n+   |          ^^^^^^^^^^^^^ help: try: `<(u8)>::AssocTy`\n+\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-ty.rs:23:10\n+   |\n+23 | type D = (u8, u8)::AssocTy;\n+   |          ^^^^^^^^^^^^^^^^^ help: try: `<(u8, u8)>::AssocTy`\n+\n+error: missing angle brackets in associated item path\n+  --> $DIR/bad-assoc-ty.rs:27:10\n+   |\n+27 | type E = _::AssocTy;\n+   |          ^^^^^^^^^^ help: try: `<_>::AssocTy`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/bad-assoc-ty.rs:11:10\n+   |\n+11 | type A = [u8; 4]::AssocTy;\n+   |          ^^^^^^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<[u8; <unevaluated[]>] as Trait>::AssocTy`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/bad-assoc-ty.rs:15:10\n+   |\n+15 | type B = [u8]::AssocTy;\n+   |          ^^^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<[u8] as Trait>::AssocTy`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/bad-assoc-ty.rs:19:10\n+   |\n+19 | type C = (u8)::AssocTy;\n+   |          ^^^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<u8 as Trait>::AssocTy`\n+\n+error[E0223]: ambiguous associated type\n+  --> $DIR/bad-assoc-ty.rs:23:10\n+   |\n+23 | type D = (u8, u8)::AssocTy;\n+   |          ^^^^^^^^^^^^^^^^^ ambiguous associated type\n+   |\n+   = note: specify the type using the syntax `<(u8, u8) as Trait>::AssocTy`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/bad-assoc-ty.rs:27:10\n+   |\n+27 | type E = _::AssocTy;\n+   |          ^ not allowed in type signatures\n+\n+error: aborting due to 10 previous errors\n+"}]}