{"sha": "48a91a08d166d293fcc03fdc9f86fa30ecbcc51c", "node_id": "C_kwDOAAsO6NoAKDQ4YTkxYTA4ZDE2NmQyOTNmY2MwM2ZkYzlmODZmYTMwZWNiY2M1MWM", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:36:37Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:36:37Z"}, "message": "Move Option::as_deref", "tree": {"sha": "88b53c4379f58a4adced133a331e6029c45956de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88b53c4379f58a4adced133a331e6029c45956de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48a91a08d166d293fcc03fdc9f86fa30ecbcc51c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHN/DUACgkQ+boUO5X/\nbYJe4Q//UqBRmkKZlZVwUPczy4fV3gfTT7qDHDKG29nOoieWntsu99rii4Q8+5Ml\nrBKtjbwqIsUo6b0LGmmeS4y4iRHJQwUYhDVOzq7hOuSqKo1+Cz009423qDHM+4pw\nq6b9KEEUyM1ALsIhy+yXL56BAiBgq3uuCFdv8nC2G7o2aBYWx5GOaIdkWEMkbXRb\nzFUkOh4lgaK+5bBoo2WjuPro7CcrDxF6iaqHwmT5mOBXAs31Gn7R1gyU9XqRu3Yw\nVntXKe78Z6yWFIll4q7z38OC9RzUPztd+7cFLDGd14JdPfpyVnOiHIuY1XUeSJ9+\na4XQRreKDRZtl0q509q/+db1TSVuMvX75N8LzojiL6K60B299FXnhG8YZ1vybaWe\noSKicjX9aexHMTsOfOBR6sdO41K/fSmDQw3hmaiv2ZCY83B4OCf5XVAu6qIHSXhG\nn0XOUr9+1TLPDQsFllkqjBmwHPNiUI5s1HsR7MA9nepwNAwlC2AYQCAoRK1uv5HW\nozvn9c4yiWvCnuFPPfBV5XvvEBSrqr87PhUo6mdH90TMAvsn7BJ5DMk6vCJWEZAX\ndozi5TxbjPZT4bHDkGRBW6fgGXshsYxDdZPyvRyeSUeo3QvuqlisDeEZmkXi7kcW\nHq00FFH1VkVv4sc5BhJJBQpCHAvI5sGXnnNbg/6bDGoeNtcoI9w=\n=n7P1\n-----END PGP SIGNATURE-----", "payload": "tree 88b53c4379f58a4adced133a331e6029c45956de\nparent bbcf09f2fb50c146a4b79a1cfece94bfbe1b159a\nauthor David Tolnay <dtolnay@gmail.com> 1640889397 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1640889397 -0800\n\nMove Option::as_deref\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48a91a08d166d293fcc03fdc9f86fa30ecbcc51c", "html_url": "https://github.com/rust-lang/rust/commit/48a91a08d166d293fcc03fdc9f86fa30ecbcc51c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48a91a08d166d293fcc03fdc9f86fa30ecbcc51c/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbcf09f2fb50c146a4b79a1cfece94bfbe1b159a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcf09f2fb50c146a4b79a1cfece94bfbe1b159a", "html_url": "https://github.com/rust-lang/rust/commit/bbcf09f2fb50c146a4b79a1cfece94bfbe1b159a"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "8feebe11e97881f56d94f7848e5f01aef8ba30c0", "filename": "library/core/src/option.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/48a91a08d166d293fcc03fdc9f86fa30ecbcc51c/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48a91a08d166d293fcc03fdc9f86fa30ecbcc51c/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=48a91a08d166d293fcc03fdc9f86fa30ecbcc51c", "patch": "@@ -1072,6 +1072,32 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.\n+    ///\n+    /// Leaves the original Option in-place, creating a new one with a reference\n+    /// to the original one, additionally coercing the contents via [`Deref`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x: Option<String> = Some(\"hey\".to_owned());\n+    /// assert_eq!(x.as_deref(), Some(\"hey\"));\n+    ///\n+    /// let x: Option<String> = None;\n+    /// assert_eq!(x.as_deref(), None);\n+    /// ```\n+    #[stable(feature = \"option_deref\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n+    pub const fn as_deref(&self) -> Option<&T::Target>\n+    where\n+        T: ~const Deref,\n+    {\n+        match self.as_ref() {\n+            Some(t) => Some(t.deref()),\n+            None => None,\n+        }\n+    }\n+\n     /////////////////////////////////////////////////////////////////////////\n     // Iterator constructors\n     /////////////////////////////////////////////////////////////////////////\n@@ -1724,34 +1750,6 @@ impl<T: Clone> Option<&mut T> {\n     }\n }\n \n-impl<T: Deref> Option<T> {\n-    /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.\n-    ///\n-    /// Leaves the original Option in-place, creating a new one with a reference\n-    /// to the original one, additionally coercing the contents via [`Deref`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// let x: Option<String> = Some(\"hey\".to_owned());\n-    /// assert_eq!(x.as_deref(), Some(\"hey\"));\n-    ///\n-    /// let x: Option<String> = None;\n-    /// assert_eq!(x.as_deref(), None);\n-    /// ```\n-    #[stable(feature = \"option_deref\", since = \"1.40.0\")]\n-    #[rustc_const_unstable(feature = \"const_option_ext\", issue = \"91930\")]\n-    pub const fn as_deref(&self) -> Option<&T::Target>\n-    where\n-        T: ~const Deref,\n-    {\n-        match self.as_ref() {\n-            Some(t) => Some(t.deref()),\n-            None => None,\n-        }\n-    }\n-}\n-\n impl<T: DerefMut> Option<T> {\n     /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.\n     ///"}]}