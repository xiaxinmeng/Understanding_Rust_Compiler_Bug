{"sha": "8d8876c0b75ea6ee5ee5eac6abf78fb92c9ac9f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkODg3NmMwYjc1ZWE2ZWU1ZWU1ZWFjNmFiZjc4ZmI5MmM5YWM5ZjM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-08-08T04:32:47Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-08-08T04:32:47Z"}, "message": "driver: factor out a helper and make another helper public", "tree": {"sha": "19d010a349720021a5313530f74a43dfc3feff4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19d010a349720021a5313530f74a43dfc3feff4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d8876c0b75ea6ee5ee5eac6abf78fb92c9ac9f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d8876c0b75ea6ee5ee5eac6abf78fb92c9ac9f3", "html_url": "https://github.com/rust-lang/rust/commit/8d8876c0b75ea6ee5ee5eac6abf78fb92c9ac9f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d8876c0b75ea6ee5ee5eac6abf78fb92c9ac9f3/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65b0a0c2c7a658ba32233c12c3cca6ea46f3ce5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/65b0a0c2c7a658ba32233c12c3cca6ea46f3ce5a", "html_url": "https://github.com/rust-lang/rust/commit/65b0a0c2c7a658ba32233c12c3cca6ea46f3ce5a"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "b4b7446f753d06b70a930d37c2b68b415498bafe", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8d8876c0b75ea6ee5ee5eac6abf78fb92c9ac9f3/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d8876c0b75ea6ee5ee5eac6abf78fb92c9ac9f3/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8d8876c0b75ea6ee5ee5eac6abf78fb92c9ac9f3", "patch": "@@ -518,7 +518,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                         -> CompileController<'a> {\n         let mut control = CompileController::basic();\n \n-        control.keep_ast = sess.opts.debugging_opts.keep_ast || save_analysis(sess);\n+        control.keep_ast = sess.opts.debugging_opts.keep_ast;\n \n         if let Some((ppm, opt_uii)) = parse_pretty(sess, matches) {\n             if ppm.needs_ast_map(&opt_uii) {\n@@ -574,19 +574,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n         }\n \n         if save_analysis(sess) {\n-            control.after_analysis.callback = box |state| {\n-                time(state.session.time_passes(), \"save analysis\", || {\n-                    save::process_crate(state.tcx.unwrap(),\n-                                        state.expanded_crate.unwrap(),\n-                                        state.analysis.unwrap(),\n-                                        state.crate_name.unwrap(),\n-                                        None,\n-                                        DumpHandler::new(state.out_dir,\n-                                                         state.crate_name.unwrap()))\n-                });\n-            };\n-            control.after_analysis.run_callback_on_error = true;\n-            control.make_glob_map = resolve::MakeGlobMap::Yes;\n+            enable_save_analysis(&mut control);\n         }\n \n         if sess.print_fuel_crate.is_some() {\n@@ -603,6 +591,23 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     }\n }\n \n+pub fn enable_save_analysis(control: &mut CompileController) {\n+    control.keep_ast = true;\n+    control.after_analysis.callback = box |state| {\n+        time(state.session.time_passes(), \"save analysis\", || {\n+            save::process_crate(state.tcx.unwrap(),\n+                                state.expanded_crate.unwrap(),\n+                                state.analysis.unwrap(),\n+                                state.crate_name.unwrap(),\n+                                None,\n+                                DumpHandler::new(state.out_dir,\n+                                                 state.crate_name.unwrap()))\n+        });\n+    };\n+    control.after_analysis.run_callback_on_error = true;\n+    control.make_glob_map = resolve::MakeGlobMap::Yes;\n+}\n+\n fn save_analysis(sess: &Session) -> bool {\n     sess.opts.debugging_opts.save_analysis\n }\n@@ -1215,7 +1220,7 @@ pub fn diagnostics_registry() -> errors::registry::Registry {\n     Registry::new(&all_errors)\n }\n \n-fn get_args() -> Vec<String> {\n+pub fn get_args() -> Vec<String> {\n     env::args_os().enumerate()\n         .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n              early_error(ErrorOutputType::default(),"}]}