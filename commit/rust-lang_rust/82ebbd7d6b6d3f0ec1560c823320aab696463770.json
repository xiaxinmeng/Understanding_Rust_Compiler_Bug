{"sha": "82ebbd7d6b6d3f0ec1560c823320aab696463770", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZWJiZDdkNmI2ZDNmMGVjMTU2MGM4MjMzMjBhYWI2OTY0NjM3NzA=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-11T08:46:35Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-18T15:11:34Z"}, "message": "add test for let-bindings", "tree": {"sha": "06feadd22488a9cc8b6d9188259ab01731768fca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06feadd22488a9cc8b6d9188259ab01731768fca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82ebbd7d6b6d3f0ec1560c823320aab696463770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82ebbd7d6b6d3f0ec1560c823320aab696463770", "html_url": "https://github.com/rust-lang/rust/commit/82ebbd7d6b6d3f0ec1560c823320aab696463770", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82ebbd7d6b6d3f0ec1560c823320aab696463770/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7d16df1d81934ff33d9d421ac2dc34c893ad68f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d16df1d81934ff33d9d421ac2dc34c893ad68f", "html_url": "https://github.com/rust-lang/rust/commit/c7d16df1d81934ff33d9d421ac2dc34c893ad68f"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "731ccfad2b44f50ec9222772a382b90e82f25feb", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82ebbd7d6b6d3f0ec1560c823320aab696463770/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ebbd7d6b6d3f0ec1560c823320aab696463770/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=82ebbd7d6b6d3f0ec1560c823320aab696463770", "patch": "@@ -1693,25 +1693,27 @@ pub fn const_evaluatable_predicates_of<'tcx>(\n ) -> impl Iterator<Item = (ty::Predicate<'tcx>, Span)> {\n     #[derive(Default)]\n     struct ConstCollector<'tcx> {\n-        ct: SmallVec<[(ty::WithOptConstParam<DefId>, SubstsRef<'tcx>); 4]>,\n+        ct: SmallVec<[(ty::WithOptConstParam<DefId>, SubstsRef<'tcx>, Span); 4]>,\n+        curr_span: Span,\n     }\n \n     impl<'tcx> TypeVisitor<'tcx> for ConstCollector<'tcx> {\n         fn visit_const(&mut self, ct: &'tcx Const<'tcx>) -> bool {\n             if let ty::ConstKind::Unevaluated(def, substs, None) = ct.val {\n-                self.ct.push((def, substs));\n+                self.ct.push((def, substs, self.curr_span));\n             }\n             false\n         }\n     }\n \n     let mut collector = ConstCollector::default();\n-    for (pred, _span) in predicates.predicates.iter() {\n+    for &(pred, span) in predicates.predicates.iter() {\n+        collector.curr_span = span;\n         pred.visit_with(&mut collector);\n     }\n     warn!(\"const_evaluatable_predicates_of({:?}) = {:?}\", def_id, collector.ct);\n-    collector.ct.into_iter().map(move |(def_id, subst)| {\n-        (ty::PredicateAtom::ConstEvaluatable(def_id, subst).to_predicate(tcx), DUMMY_SP)\n+    collector.ct.into_iter().map(move |(def_id, subst, span)| {\n+        (ty::PredicateAtom::ConstEvaluatable(def_id, subst).to_predicate(tcx), span)\n     })\n }\n "}, {"sha": "d96788f8cd100510437c26612f9368f23313cfa6", "filename": "src/test/ui/const-generics/const_evaluatable_checked/let-bindings.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82ebbd7d6b6d3f0ec1560c823320aab696463770/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82ebbd7d6b6d3f0ec1560c823320aab696463770/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.rs?ref=82ebbd7d6b6d3f0ec1560c823320aab696463770", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+// We do not yet want to support let-bindings in abstract consts,\n+// so this test should keep failing for now.\n+fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n+    //~^ ERROR constant expression depends\n+    //~| ERROR constant expression depends\n+    Default::default()\n+}\n+\n+fn main() {\n+    let x = test::<31>();\n+    assert_eq!(x, [0; 32]);\n+}"}, {"sha": "95fb48bd434027c88245a0a1864b74f3f0233822", "filename": "src/test/ui/const-generics/const_evaluatable_checked/let-bindings.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/82ebbd7d6b6d3f0ec1560c823320aab696463770/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/82ebbd7d6b6d3f0ec1560c823320aab696463770/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.stderr?ref=82ebbd7d6b6d3f0ec1560c823320aab696463770", "patch": "@@ -0,0 +1,18 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/let-bindings.rs:6:91\n+   |\n+LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n+   |                                                                                           ^^^^^^^ required by this bound in `test::{{constant}}#0`\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/let-bindings.rs:6:30\n+   |\n+LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n+"}]}