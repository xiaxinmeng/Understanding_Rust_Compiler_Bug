{"sha": "51a25295fdd44b270f3ce4b8074bc756a12699c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYTI1Mjk1ZmRkNDRiMjcwZjNjZTRiODA3NGJjNzU2YTEyNjk5Yzc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-11-17T04:57:07Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-11-17T04:57:07Z"}, "message": "Merge pull request #457 from sanxiyn/match-block-comma\n\nRemove trailing commas in match arms with blocks", "tree": {"sha": "62369505b8f7e271dcfa1eaa9b549e2a376efafc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62369505b8f7e271dcfa1eaa9b549e2a376efafc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51a25295fdd44b270f3ce4b8074bc756a12699c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51a25295fdd44b270f3ce4b8074bc756a12699c7", "html_url": "https://github.com/rust-lang/rust/commit/51a25295fdd44b270f3ce4b8074bc756a12699c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51a25295fdd44b270f3ce4b8074bc756a12699c7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1555eed5fb97393fb260218f444d7b9c8ffce3d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1555eed5fb97393fb260218f444d7b9c8ffce3d1", "html_url": "https://github.com/rust-lang/rust/commit/1555eed5fb97393fb260218f444d7b9c8ffce3d1"}, {"sha": "b17e38782e4cf4313c7ce21c27f00a98dcf823c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b17e38782e4cf4313c7ce21c27f00a98dcf823c1", "html_url": "https://github.com/rust-lang/rust/commit/b17e38782e4cf4313c7ce21c27f00a98dcf823c1"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "c8530b92d48c68a18b0af687d2b4f9be76ea94ba", "filename": "src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -185,7 +185,7 @@ fn fetch_int_literal(cx: &LateContext, lit : &Expr) -> Option<u64> {\n             if let &LitInt(value, _) = &lit_ptr.node {\n                 Option::Some(value) //TODO: Handle sign\n             } else { Option::None }\n-        },\n+        }\n         ExprPath(_, _) => {\n             // Important to let the borrow expire before the const lookup to avoid double\n             // borrowing."}, {"sha": "1750495d1f36fed6af0f81160a81f64d31e394f5", "filename": "src/consts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -246,7 +246,7 @@ fn constant_not(o: Constant) -> Option<Constant> {\n                 SignedIntLit(ity, Plus) => {\n                     if value == ::std::u64::MAX { return None; }\n                     (value + 1, SignedIntLit(ity, Minus))\n-                },\n+                }\n                 SignedIntLit(ity, Minus) => {\n                     if value == 0 {\n                         (1, SignedIntLit(ity, Minus))\n@@ -267,7 +267,7 @@ fn constant_not(o: Constant) -> Option<Constant> {\n                 UnsuffixedIntLit(_) => { return None; }  // refuse to guess\n             };\n             ConstantInt(nvalue, nty)\n-        },\n+        }\n         _ => { return None; }\n     })\n }\n@@ -279,11 +279,11 @@ fn constant_negate(o: Constant) -> Option<Constant> {\n                 SignedIntLit(ity, sign) =>\n                     SignedIntLit(ity, neg_sign(sign)),\n                 UnsuffixedIntLit(sign) => UnsuffixedIntLit(neg_sign(sign)),\n-                _ => { return None; },\n+                _ => { return None; }\n             }),\n         ConstantFloat(is, ty) =>\n             ConstantFloat(neg_float_str(is), ty),\n-        _ => { return None; },\n+        _ => { return None; }\n     })\n }\n \n@@ -461,7 +461,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                                 add_neg_int(l64, lty, r64, rty)\n                             }\n                         }\n-                    },\n+                    }\n                     // TODO: float (would need bignum library?)\n                     _ => None\n                 }),\n@@ -513,7 +513,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                         unify_int_type(lty, rty, if is_negative(lty) ==\n                                 is_negative(rty) { Plus } else { Minus })\n                             .map(|ty| ConstantInt(value, ty)))\n-                },\n+                }\n                 _ => None,\n             })\n     }"}, {"sha": "c4c0912464ceffe7afa095773c35be53ee73b35c", "filename": "src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feta_reduction.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -26,7 +26,7 @@ impl LateLintPass for EtaPass {\n                 for arg in args {\n                     check_closure(cx, arg)\n                 }\n-            },\n+            }\n             _ => (),\n         }\n     }"}, {"sha": "7ed784f00fc49696a1f5f72828c911a3922ee964", "filename": "src/identity_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fidentity_op.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -26,19 +26,19 @@ impl LateLintPass for IdentityOp {\n                 BiAdd | BiBitOr | BiBitXor => {\n                     check(cx, left, 0, e.span, right.span);\n                     check(cx, right, 0, e.span, left.span);\n-                },\n+                }\n                 BiShl | BiShr | BiSub =>\n                     check(cx, right, 0, e.span, left.span),\n                 BiMul => {\n                     check(cx, left, 1, e.span, right.span);\n                     check(cx, right, 1, e.span, left.span);\n-                },\n+                }\n                 BiDiv =>\n                     check(cx, right, 1, e.span, left.span),\n                 BiBitAnd => {\n                     check(cx, left, -1, e.span, right.span);\n                     check(cx, right, -1, e.span, left.span);\n-                },\n+                }\n                 _ => ()\n             }\n         }"}, {"sha": "09c5821dd49b4b55534a2d64ca57ae6f96ad684e", "filename": "src/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -196,13 +196,13 @@ impl <'v, 't> RefVisitor<'v, 't>  {\n                                 self.record(&None);\n                             }\n                         }\n-                    },\n+                    }\n                     Some(DefTrait(def_id)) => {\n                         let trait_def = self.cx.tcx.trait_defs.borrow()[&def_id];\n                         for _ in &trait_def.generics.regions {\n                             self.record(&None);\n                         }\n-                    },\n+                    }\n                     _ => {}\n                 }\n             }\n@@ -221,10 +221,10 @@ impl<'v, 't> Visitor<'v> for RefVisitor<'v, 't> {\n         match ty.node {\n             TyRptr(None, _) => {\n                 self.record(&None);\n-            },\n+            }\n             TyPath(_, ref path) => {\n                 self.collect_anonymous_lifetimes(path, ty);\n-            },\n+            }\n             _ => {}\n         }\n         walk_ty(self, ty);"}, {"sha": "60ae2c23f0a08819ba38bdbf46a12b1aa6704560", "filename": "src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -545,13 +545,13 @@ impl<'v, 't> Visitor<'v> for InitializeVisitor<'v, 't> {\n                 match parent.node {\n                     ExprAssignOp(_, ref lhs, _) if lhs.id == expr.id => {\n                         self.state = VarState::DontWarn;\n-                    },\n+                    }\n                     ExprAssign(ref lhs, ref rhs) if lhs.id == expr.id => {\n                         self.state = if is_integer_literal(rhs, 0) && self.depth == 0 {\n                             VarState::Warn\n                         } else {\n                             VarState::DontWarn\n-                        }},\n+                        }}\n                     ExprAddrOf(mutability,_) if mutability == MutMutable => self.state = VarState::DontWarn,\n                     _ => ()\n                 }"}, {"sha": "ba561fbb16781e2fb77df735cb2c80e5c83ab616", "filename": "src/map_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmap_clone.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -55,7 +55,7 @@ impl LateLintPass for MapClonePass {\n                                 }\n                             }\n                         }\n-                    },\n+                    }\n                     ExprPath(_, ref path) => {\n                         if match_path(path, &CLONE_PATH) {\n                             let type_name = get_type_name(cx, expr, &args[0]).unwrap_or(\"_\");\n@@ -77,7 +77,7 @@ fn expr_eq_ident(expr: &Expr, id: Ident) -> bool {\n         ExprPath(None, ref path) => {\n             let arg_segment = [PathSegment { identifier: id, parameters: PathParameters::none() }];\n             !path.global && path.segments == arg_segment\n-        },\n+        }\n         _ => false,\n     }\n }\n@@ -104,7 +104,7 @@ fn only_derefs(cx: &LateContext, expr: &Expr, id: Ident) -> bool {\n     match expr.node {\n         ExprUnary(UnDeref, ref subexpr) if !is_adjusted(cx, subexpr) => {\n             only_derefs(cx, subexpr, id)\n-        },\n+        }\n         _ => expr_eq_ident(expr, id),\n     }\n }"}, {"sha": "7ed651847275157fdb07dcca11ac4b6e12e45899", "filename": "src/minmax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fminmax.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -31,7 +31,7 @@ impl LateLintPass for MinMaxPass {\n                     _ => {\n                         span_lint(cx, MIN_MAX, expr.span,\n                             \"this min/max combination leads to constant result\")\n-                    },\n+                    }\n                 }\n             }\n         }"}, {"sha": "857ae1cc0c35d3ca03af89fa7b0a72e20093d470", "filename": "src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -187,7 +187,7 @@ fn check_to_owned(cx: &LateContext, expr: &Expr, other_span: Span, left: bool, o\n                 } else {\n                     return\n                 }\n-        },\n+        }\n         ExprCall(ref path, ref v) if v.len() == 1 => {\n             if let &ExprPath(None, ref path) = &path.node {\n                 if match_path(path, &[\"String\", \"from_str\"]) ||\n@@ -199,7 +199,7 @@ fn check_to_owned(cx: &LateContext, expr: &Expr, other_span: Span, left: bool, o\n             } else {\n                 return\n             }\n-        },\n+        }\n         _ => return\n     };\n     if left {"}, {"sha": "86c272affb77afea869a98999a0f363942f065b7", "filename": "src/mut_reference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_reference.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -32,22 +32,22 @@ impl LateLintPass for UnnecessaryMutPassed {\n                             check_arguments(cx, &arguments, function_type, \n                                             &format!(\"{}\", path));\n                         }\n-                    },\n+                    }\n                     None => unreachable!(), // A function with unknown type is called.\n                                             // If this happened the compiler would have aborted the\n                                             // compilation long ago.\n                 };\n \n \n-            },\n+            }\n             ExprMethodCall(ref name, _, ref arguments) => {\n                 let method_call = MethodCall::expr(e.id);\n                 match borrowed_table.method_map.get(&method_call) {\n                     Some(method_type) => check_arguments(cx, &arguments, method_type.ty, \n                                                          &format!(\"{}\", name.node.as_str())),\n                     None => unreachable!(), // Just like above, this should never happen.\n                 };\n-            },\n+            }\n             _ => {}\n         }\n     }\n@@ -66,7 +66,7 @@ fn check_arguments(cx: &LateContext, arguments: &[P<Expr>], type_definition: &Ty\n                                   doesn't need a mutable reference\", \n                                   name));\n                     }\n-                },\n+                }\n                 _ => {}\n             }\n         }"}, {"sha": "52f23c7518a6a1eb048478192546f7e2bcd8fd4b", "filename": "src/needless_bool.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -31,26 +31,26 @@ impl LateLintPass for NeedlessBool {\n             match (fetch_bool_block(then_block), fetch_bool_expr(else_expr)) {\n                 (Some(true), Some(true)) => {\n                     span_lint(cx, NEEDLESS_BOOL, e.span,\n-                              \"this if-then-else expression will always return true\"); },\n+                              \"this if-then-else expression will always return true\"); }\n                 (Some(false), Some(false)) => {\n                     span_lint(cx, NEEDLESS_BOOL, e.span,\n-                              \"this if-then-else expression will always return false\"); },\n+                              \"this if-then-else expression will always return false\"); }\n                 (Some(true), Some(false)) => {\n                     let pred_snip = snippet(cx, pred.span, \"..\");\n                     let hint = if pred_snip == \"..\" { \"its predicate\".into() } else {\n                         format!(\"`{}`\", pred_snip)\n                     };\n                     span_lint(cx, NEEDLESS_BOOL, e.span, &format!(\n                         \"you can reduce this if-then-else expression to just {}\", hint));\n-                },\n+                }\n                 (Some(false), Some(true)) => {\n                     let pred_snip = snippet(cx, pred.span, \"..\");\n                     let hint = if pred_snip == \"..\" { \"`!` and its predicate\".into() } else {\n                         format!(\"`!{}`\", pred_snip)\n                     };\n                     span_lint(cx, NEEDLESS_BOOL, e.span, &format!(\n                         \"you can reduce this if-then-else expression to just {}\", hint));\n-                },\n+                }\n                 _ => ()\n             }\n         }"}, {"sha": "732852e168657571ab0ed4068c7c0df462ac3f08", "filename": "src/open_options.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fopen_options.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -65,7 +65,7 @@ fn get_open_options(cx: &LateContext, argument: &Expr, options: &mut Vec<(OpenOp\n                                 // which is not a boolean literal. This is theoretically\n                                 // possible, but not very likely.\n                     }\n-                },\n+                }\n                 _ => {\n                     Argument::Unknown\n                 }\n@@ -74,19 +74,19 @@ fn get_open_options(cx: &LateContext, argument: &Expr, options: &mut Vec<(OpenOp\n             match &*name.node.as_str() {\n                 \"create\" => {\n                     options.push((OpenOption::Create, argument_option));\n-                },\n+                }\n                 \"append\" => {\n                     options.push((OpenOption::Append, argument_option));\n-                },\n+                }\n                 \"truncate\" => {\n                     options.push((OpenOption::Truncate, argument_option));\n-                },\n+                }\n                 \"read\" => {\n                     options.push((OpenOption::Read, argument_option));\n-                },\n+                }\n                 \"write\" => {\n                     options.push((OpenOption::Write, argument_option));\n-                },\n+                }\n                 _ => {}\n             }\n             "}, {"sha": "a1e86028752a4bd8c4409185e0e1c7458ee400d6", "filename": "src/shadow.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -101,7 +101,7 @@ fn check_pat(cx: &LateContext, pat: &Pat, init: &Option<&Expr>, span: Span,\n                 }\n             }\n             if let Some(ref p) = *inner { check_pat(cx, p, init, span, bindings); }\n-        },\n+        }\n         //PatEnum(Path, Option<Vec<P<Pat>>>),\n         PatStruct(_, ref pfields, _) =>\n             if let Some(ref init_struct) = *init {\n@@ -149,7 +149,7 @@ fn check_pat(cx: &LateContext, pat: &Pat, init: &Option<&Expr>, span: Span,\n             } else {\n                 check_pat(cx, inner, init, span, bindings);\n             }\n-        },\n+        }\n         PatRegion(ref inner, _) =>\n             check_pat(cx, inner, init, span, bindings),\n         //PatVec(Vec<P<Pat>>, Option<P<Pat>>, Vec<P<Pat>>),\n@@ -200,9 +200,9 @@ fn check_expr(cx: &LateContext, expr: &Expr, bindings: &mut Vec<(Name, Span)>) {\n     match expr.node {\n         ExprUnary(_, ref e) | ExprField(ref e, _) |\n         ExprTupField(ref e, _) | ExprAddrOf(_, ref e) | ExprBox(ref e)\n-            => { check_expr(cx, e, bindings) },\n+            => { check_expr(cx, e, bindings) }\n         ExprBlock(ref block) | ExprLoop(ref block, _) =>\n-            { check_block(cx, block, bindings) },\n+            { check_block(cx, block, bindings) }\n         //ExprCall\n         //ExprMethodCall\n         ExprVec(ref v) | ExprTup(ref v) =>\n@@ -211,11 +211,11 @@ fn check_expr(cx: &LateContext, expr: &Expr, bindings: &mut Vec<(Name, Span)>) {\n             check_expr(cx, cond, bindings);\n             check_block(cx, then, bindings);\n             if let &Some(ref o) = otherwise { check_expr(cx, o, bindings); }\n-        },\n+        }\n         ExprWhile(ref cond, ref block, _) => {\n             check_expr(cx, cond, bindings);\n             check_block(cx, block, bindings);\n-        },\n+        }\n         ExprMatch(ref init, ref arms, _) => {\n             check_expr(cx, init, bindings);\n             let len = bindings.len();\n@@ -230,7 +230,7 @@ fn check_expr(cx: &LateContext, expr: &Expr, bindings: &mut Vec<(Name, Span)>) {\n                     bindings.truncate(len);\n                 }\n             }\n-        },\n+        }\n         _ => ()\n     }\n }\n@@ -242,10 +242,10 @@ fn check_ty(cx: &LateContext, ty: &Ty, bindings: &mut Vec<(Name, Span)>) {\n         TyFixedLengthVec(ref fty, ref expr) => {\n             check_ty(cx, fty, bindings);\n             check_expr(cx, expr, bindings);\n-        },\n+        }\n         TyPtr(MutTy{ ty: ref mty, .. }) |\n         TyRptr(_, MutTy{ ty: ref mty, .. }) => check_ty(cx, mty, bindings),\n-        TyTup(ref tup) => { for ref t in tup { check_ty(cx, t, bindings) } },\n+        TyTup(ref tup) => { for ref t in tup { check_ty(cx, t, bindings) } }\n         TyTypeof(ref expr) => check_expr(cx, expr, bindings),\n         _ => (),\n     }"}, {"sha": "68120f65e1fe57677f63abfe51934136d08a01a4", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -229,7 +229,7 @@ impl LateLintPass for CastPass {\n                         if is_isize_or_usize(cast_from) || from_nbits >= to_nbits {\n                             span_precision_loss_lint(cx, expr, cast_from, to_nbits == 64);\n                         }\n-                    },\n+                    }\n                     (false, true) => {\n                         span_lint(cx, CAST_POSSIBLE_TRUNCATION, expr.span,\n                             &format!(\"casting {} to {} may truncate the value\",\n@@ -239,7 +239,7 @@ impl LateLintPass for CastPass {\n                                 &format!(\"casting {} to {} may lose the sign of the value\",\n                                     cast_from, cast_to));\n                         }\n-                    },\n+                    }\n                     (true, true) => {\n                         if cast_from.is_signed() && !cast_to.is_signed() {\n                             span_lint(cx, CAST_SIGN_LOSS, expr.span,"}, {"sha": "3fcfa66259ce4634eda49150a7e80e16ba2e3bc1", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -167,7 +167,7 @@ pub fn get_item_name(cx: &LateContext, expr: &Expr) -> Option<Name> {\n         Some(NodeTraitItem(&TraitItem{ id: _, ref name, .. })) |\n         Some(NodeImplItem(&ImplItem{ id: _, ref name, .. })) => {\n             Some(*name)\n-        },\n+        }\n         _ => None,\n     }\n }"}, {"sha": "20d7552d77aaa02fe591f1e79160a1277e639576", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51a25295fdd44b270f3ce4b8074bc756a12699c7/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a25295fdd44b270f3ce4b8074bc756a12699c7/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=51a25295fdd44b270f3ce4b8074bc756a12699c7", "patch": "@@ -54,17 +54,17 @@ fn match_bool() {\n     \n     match test { //~ ERROR you seem to be trying to match on a boolean expression\n         true => (),\n-        false => { println!(\"Noooo!\"); },\n+        false => { println!(\"Noooo!\"); }\n     };\n     \n     match test { //~ ERROR you seem to be trying to match on a boolean expression\n-        false => { println!(\"Noooo!\"); },\n+        false => { println!(\"Noooo!\"); }\n         _ => (),\n     };\n     \n     match test { //~ ERROR you seem to be trying to match on a boolean expression\n-        false => { println!(\"Noooo!\"); },\n-        true => { println!(\"Yes!\"); },\n+        false => { println!(\"Noooo!\"); }\n+        true => { println!(\"Yes!\"); }\n     };\n \n     // Not linted"}]}