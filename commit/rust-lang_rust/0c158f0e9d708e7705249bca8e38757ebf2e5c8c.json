{"sha": "0c158f0e9d708e7705249bca8e38757ebf2e5c8c", "node_id": "C_kwDOAAsO6NoAKDBjMTU4ZjBlOWQ3MDhlNzcwNTI0OWJjYThlMzg3NTdlYmYyZTVjOGM", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-10-10T23:00:46Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-10-10T23:00:46Z"}, "message": "Add a test case for #[track_caller] on async fn", "tree": {"sha": "e87a21feab28fb1f91fbbcc0b78820e7b8fc842d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e87a21feab28fb1f91fbbcc0b78820e7b8fc842d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c158f0e9d708e7705249bca8e38757ebf2e5c8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c158f0e9d708e7705249bca8e38757ebf2e5c8c", "html_url": "https://github.com/rust-lang/rust/commit/0c158f0e9d708e7705249bca8e38757ebf2e5c8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c158f0e9d708e7705249bca8e38757ebf2e5c8c/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c22af267fd9337bc05382b2771dde49d2e9f26", "url": "https://api.github.com/repos/rust-lang/rust/commits/43c22af267fd9337bc05382b2771dde49d2e9f26", "html_url": "https://github.com/rust-lang/rust/commit/43c22af267fd9337bc05382b2771dde49d2e9f26"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "934764912d35a05d242007c796e417d076899214", "filename": "src/test/ui/async-await/panic-no-track-caller.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0c158f0e9d708e7705249bca8e38757ebf2e5c8c/src%2Ftest%2Fui%2Fasync-await%2Fpanic-no-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c158f0e9d708e7705249bca8e38757ebf2e5c8c/src%2Ftest%2Fui%2Fasync-await%2Fpanic-no-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpanic-no-track-caller.rs?ref=0c158f0e9d708e7705249bca8e38757ebf2e5c8c", "patch": "@@ -0,0 +1,74 @@\n+// run-pass\n+// edition:2021\n+\n+use std::future::Future;\n+use std::panic;\n+use std::sync::{Arc, Mutex};\n+use std::task::{Context, Poll, Wake};\n+use std::thread::{self, Thread};\n+\n+/// A waker that wakes up the current thread when called.\n+struct ThreadWaker(Thread);\n+\n+impl Wake for ThreadWaker {\n+    fn wake(self: Arc<Self>) {\n+        self.0.unpark();\n+    }\n+}\n+\n+/// Run a future to completion on the current thread.\n+fn block_on<T>(fut: impl Future<Output = T>) -> T {\n+    // Pin the future so it can be polled.\n+    let mut fut = Box::pin(fut);\n+\n+    // Create a new context to be passed to the future.\n+    let t = thread::current();\n+    let waker = Arc::new(ThreadWaker(t)).into();\n+    let mut cx = Context::from_waker(&waker);\n+\n+    // Run the future to completion.\n+    loop {\n+        match fut.as_mut().poll(&mut cx) {\n+            Poll::Ready(res) => return res,\n+            Poll::Pending => thread::park(),\n+        }\n+    }\n+}\n+\n+async fn bar() {\n+    panic!()\n+}\n+\n+async fn foo() {\n+    bar().await\n+}\n+\n+#[track_caller]\n+async fn bar_track_caller() {\n+    panic!()\n+}\n+\n+async fn foo_track_caller() {\n+    bar_track_caller().await\n+}\n+\n+fn panicked_at(f: impl FnOnce() + panic::UnwindSafe) -> u32 {\n+    let loc = Arc::new(Mutex::new(None));\n+\n+    let hook = panic::take_hook();\n+    {\n+        let loc = loc.clone();\n+        panic::set_hook(Box::new(move |info| {\n+            *loc.lock().unwrap() = info.location().map(|loc| loc.line())\n+        }));\n+    }\n+    panic::catch_unwind(f).unwrap_err();\n+    panic::set_hook(hook);\n+    let x = loc.lock().unwrap().unwrap();\n+    x\n+}\n+\n+fn main() {\n+    assert_eq!(panicked_at(|| block_on(foo())), 39);\n+    assert_eq!(panicked_at(|| block_on(foo_track_caller())), 52);\n+}"}]}