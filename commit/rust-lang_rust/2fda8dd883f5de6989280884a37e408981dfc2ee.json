{"sha": "2fda8dd883f5de6989280884a37e408981dfc2ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZGE4ZGQ4ODNmNWRlNjk4OTI4MDg4NGEzN2U0MDg5ODFkZmMyZWU=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-07-19T20:25:44Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-07-19T21:43:03Z"}, "message": "Format if-let-else expressions", "tree": {"sha": "b925d9122f5e5d02d765ae9dc251e02a4fda4bbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b925d9122f5e5d02d765ae9dc251e02a4fda4bbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fda8dd883f5de6989280884a37e408981dfc2ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fda8dd883f5de6989280884a37e408981dfc2ee", "html_url": "https://github.com/rust-lang/rust/commit/2fda8dd883f5de6989280884a37e408981dfc2ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fda8dd883f5de6989280884a37e408981dfc2ee/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b161815fe0aace4baa7007386b783a88547d7548", "url": "https://api.github.com/repos/rust-lang/rust/commits/b161815fe0aace4baa7007386b783a88547d7548", "html_url": "https://github.com/rust-lang/rust/commit/b161815fe0aace4baa7007386b783a88547d7548"}], "stats": {"total": 90, "additions": 79, "deletions": 11}, "files": [{"sha": "68b780b414af970ce0e286e6249bd520392ce537", "filename": "src/expr.rs", "status": "modified", "additions": 48, "deletions": 11, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2fda8dd883f5de6989280884a37e408981dfc2ee/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fda8dd883f5de6989280884a37e408981dfc2ee/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=2fda8dd883f5de6989280884a37e408981dfc2ee", "patch": "@@ -84,6 +84,16 @@ impl Rewrite for ast::Expr {\n                                 cond,\n                                 if_block,\n                                 else_block.as_ref().map(|e| &**e),\n+                                None,\n+                                width,\n+                                offset)\n+            }\n+            ast::Expr_::ExprIfLet(ref pat, ref cond, ref if_block, ref else_block) => {\n+                rewrite_if_else(context,\n+                                cond,\n+                                if_block,\n+                                else_block.as_ref().map(|e| &**e),\n+                                Some(pat),\n                                 width,\n                                 offset)\n             }\n@@ -112,9 +122,16 @@ impl Rewrite for ast::Block {\n     }\n }\n \n+// TODO(#18): implement pattern formatting\n+impl Rewrite for ast::Pat {\n+    fn rewrite(&self, context: &RewriteContext, _: usize, _: usize) -> Option<String> {\n+        context.codemap.span_to_snippet(self.span).ok()\n+    }\n+}\n+\n fn rewrite_label(label: Option<ast::Ident>) -> String {\n     match label {\n-        Some(ident) => format!(\"{}: \", ident.as_str()),\n+        Some(ident) => format!(\"{}: \", ident),\n         None => \"\".to_owned()\n     }\n }\n@@ -123,23 +140,43 @@ fn rewrite_if_else(context: &RewriteContext,\n                    cond: &ast::Expr,\n                    if_block: &ast::Block,\n                    else_block: Option<&ast::Expr>,\n+                   pat: Option<&ast::Pat>,\n                    width: usize,\n                    offset: usize)\n                    -> Option<String> {\n     // FIXME: missing comments between control statements and blocks\n-    let cond_string = try_opt!(cond.rewrite(context, width - 3 - 2, offset + 3));\n+    // 3 = \"if \", 2 = \" {\"\n+    let pat_string = match pat {\n+        Some(pat) => {\n+            // 7 = \"let \".len() + \" = \".len()\n+            // 4 = \"let \".len()\n+            let pat_string = try_opt!(pat.rewrite(context, width - 3 - 2 - 7, offset + 3 + 4));\n+            format!(\"let {} = \", pat_string)\n+        }\n+        None => String::new()\n+    };\n+\n+    // Consider only the last line of the pat string\n+    let extra_offset = match pat_string.rfind('\\n') {\n+        // 1 for newline character\n+        Some(idx) => pat_string.len() - idx - 1 - offset,\n+        None => 3 + pat_string.len()\n+    };\n+\n+    let cond_string = try_opt!(cond.rewrite(context,\n+                                            width - extra_offset - 2,\n+                                            offset + extra_offset));\n     let if_block_string = try_opt!(if_block.rewrite(context, width, offset));\n+    let mut result = format!(\"if {}{} {}\", pat_string, cond_string, if_block_string);\n \n-    match else_block {\n-        Some(else_block) => {\n-            else_block.rewrite(context, width, offset).map(|else_block_string| {\n-                format!(\"if {} {} else {}\", cond_string, if_block_string, else_block_string)\n-            })\n-        }\n-        None => {\n-            Some(format!(\"if {} {}\", cond_string, if_block_string))\n-        }\n+    if let Some(else_block) = else_block {\n+        let else_block_string = try_opt!(else_block.rewrite(context, width, offset));\n+\n+        result.push_str(\" else \");\n+        result.push_str(&else_block_string);\n     }\n+\n+    Some(result)\n }\n \n fn rewrite_string_lit(context: &RewriteContext,"}, {"sha": "19baa90ace26b67f1498e57ac777943b8bddf959", "filename": "tests/source/expr.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2fda8dd883f5de6989280884a37e408981dfc2ee/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fda8dd883f5de6989280884a37e408981dfc2ee/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=2fda8dd883f5de6989280884a37e408981dfc2ee", "patch": "@@ -16,6 +16,20 @@ some_ridiculously_loooooooooooooooooooooong_function(10000 * 30000000000 + 40000\n \n      if  1  + 2 > 0  { let result = 5; result } else { 4};\n \n+    if  let   Some(x)  =  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa {\n+        // Nothing\n+    }\n+\n+    if  let   Some(x)  =  (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa + aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa) {}\n+\n+    if let (some_very_large,\n+            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1\n+        + 2 + 3 {\n+    }\n+\n+    if let (some_very_large,\n+            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1111 + 2222 {}\n+\n     if cond() {\n         something();\n     } else  if different_cond() {"}, {"sha": "86ad2dd406d70e30b210e58308e357c6ccc1d952", "filename": "tests/target/expr.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2fda8dd883f5de6989280884a37e408981dfc2ee/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fda8dd883f5de6989280884a37e408981dfc2ee/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=2fda8dd883f5de6989280884a37e408981dfc2ee", "patch": "@@ -22,6 +22,23 @@ fn foo() -> bool {\n         4\n     };\n \n+    if let Some(x) = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa {\n+        // Nothing\n+    }\n+\n+    if let Some(x) = (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n+                      aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa) {\n+    }\n+\n+    if let (some_very_large,\n+            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1 + 2 + 3 {\n+    }\n+\n+    if let (some_very_large,\n+            tuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuple) = 1111 +\n+                                                                                         2222 {\n+    }\n+\n     if cond() {\n         something();\n     } else if different_cond() {"}]}