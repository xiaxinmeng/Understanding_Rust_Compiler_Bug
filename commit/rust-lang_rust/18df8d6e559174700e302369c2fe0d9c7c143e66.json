{"sha": "18df8d6e559174700e302369c2fe0d9c7c143e66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZGY4ZDZlNTU5MTc0NzAwZTMwMjM2OWMyZmUwZDljN2MxNDNlNjY=", "commit": {"author": {"name": "Kevin Reid", "email": "kpreid@google.com", "date": "2021-08-31T03:20:14Z"}, "committer": {"name": "Kevin Reid", "email": "kpreid@google.com", "date": "2021-08-31T03:31:52Z"}, "message": "Expand documentation for `FpCategory`.\n\nI intend these changes to be helpful to readers who are not yet familiar\nwith the quirks of floating-point numbers. Additionally, I felt it was\nmisleading to describe `Nan` as being the result of division by zero,\nsince most divisions by zero (except for 0/0) produce `Infinite` floats,\nso I moved that remark to the `Infinite` variant with adjustment.\n\nThe first sentence of the `Nan` documentation is copied from `f32`;\nI followed the example of the `f64` documentation by referring to `f32`\nfor general concepts, rather than duplicating the text.", "tree": {"sha": "4a93a70e5aa20106f782e0bb9586648d79938a2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a93a70e5aa20106f782e0bb9586648d79938a2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18df8d6e559174700e302369c2fe0d9c7c143e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18df8d6e559174700e302369c2fe0d9c7c143e66", "html_url": "https://github.com/rust-lang/rust/commit/18df8d6e559174700e302369c2fe0d9c7c143e66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18df8d6e559174700e302369c2fe0d9c7c143e66/comments", "author": {"login": "kpreid", "id": 779501, "node_id": "MDQ6VXNlcjc3OTUwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/779501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpreid", "html_url": "https://github.com/kpreid", "followers_url": "https://api.github.com/users/kpreid/followers", "following_url": "https://api.github.com/users/kpreid/following{/other_user}", "gists_url": "https://api.github.com/users/kpreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpreid/subscriptions", "organizations_url": "https://api.github.com/users/kpreid/orgs", "repos_url": "https://api.github.com/users/kpreid/repos", "events_url": "https://api.github.com/users/kpreid/events{/privacy}", "received_events_url": "https://api.github.com/users/kpreid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kpreid", "id": 779501, "node_id": "MDQ6VXNlcjc3OTUwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/779501?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpreid", "html_url": "https://github.com/kpreid", "followers_url": "https://api.github.com/users/kpreid/followers", "following_url": "https://api.github.com/users/kpreid/following{/other_user}", "gists_url": "https://api.github.com/users/kpreid/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpreid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpreid/subscriptions", "organizations_url": "https://api.github.com/users/kpreid/orgs", "repos_url": "https://api.github.com/users/kpreid/repos", "events_url": "https://api.github.com/users/kpreid/events{/privacy}", "received_events_url": "https://api.github.com/users/kpreid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f388bb369ddb6fb64e547009e031598425f773c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f388bb369ddb6fb64e547009e031598425f773c", "html_url": "https://github.com/rust-lang/rust/commit/6f388bb369ddb6fb64e547009e031598425f773c"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "360ca9b700b7af733e77efeaae37e9c342893b85", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/18df8d6e559174700e302369c2fe0d9c7c143e66/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18df8d6e559174700e302369c2fe0d9c7c143e66/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=18df8d6e559174700e302369c2fe0d9c7c143e66", "patch": "@@ -778,23 +778,41 @@ impl usize {\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum FpCategory {\n-    /// \"Not a Number\", often obtained by dividing by zero.\n+    /// NaN (not a number): this value results from calculations like `(-1.0).sqrt()`.\n+    ///\n+    /// See [the documentation for `f32`](f32) for more information on the unusual properties\n+    /// of NaN.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Nan,\n \n-    /// Positive or negative infinity.\n+    /// Positive or negative infinity, which often results from dividing a nonzero number\n+    /// by zero.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Infinite,\n \n     /// Positive or negative zero.\n+    ///\n+    /// See [the documentation for `f32`](f32) for more information on the signedness of zeroes.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Zero,\n \n-    /// De-normalized floating point representation (less precise than `Normal`).\n+    /// \u201cSubnormal\u201d or \u201cdenormal\u201d floating point representation (less precise, relative to\n+    /// their magnitude, than [`Normal`]).\n+    ///\n+    /// Subnormal numbers are larger in magnitude than [`Zero`] but smaller in magnitude than all\n+    /// [`Normal`] numbers.\n+    ///\n+    /// [`Normal`]: Self::Normal\n+    /// [`Zero`]: Self::Zero\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Subnormal,\n \n-    /// A regular floating point number.\n+    /// A regular floating point number, not any of the exceptional categories.\n+    ///\n+    /// The smallest positive normal numbers are [`f32::MIN_POSITIVE`] and [`f64::MIN_POSITIVE`],\n+    /// and the largest positive normal numbers are [`f32::MAX`] and [`f64::MAX`]. (Unlike signed\n+    /// integers, floating point numbers are symmetric in their range, so negating any of these\n+    /// constants will produce their negative counterpart.)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Normal,\n }"}]}