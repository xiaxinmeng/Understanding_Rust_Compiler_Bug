{"sha": "f640438b402b6507e734862026b0b004090c8ac0", "node_id": "C_kwDOAAsO6NoAKGY2NDA0MzhiNDAyYjY1MDdlNzM0ODYyMDI2YjBiMDA0MDkwYzhhYzA", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-16T20:07:23Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-13T17:09:16Z"}, "message": "Keep info on pre-desugaring expression for better \"incorrect `.await`\" suggestion\n\nKeep the `HirId` of `.await`ed expressions so in the case of a `fn` call\non on a sync `fn`, we can suggest maybe turning it into an `async fn`.", "tree": {"sha": "a193d31c6a2cb48b200138792f56346fc1fd4fe3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a193d31c6a2cb48b200138792f56346fc1fd4fe3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f640438b402b6507e734862026b0b004090c8ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f640438b402b6507e734862026b0b004090c8ac0", "html_url": "https://github.com/rust-lang/rust/commit/f640438b402b6507e734862026b0b004090c8ac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f640438b402b6507e734862026b0b004090c8ac0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d45e030c04c19ce9c14787a793fd2e32674814d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d45e030c04c19ce9c14787a793fd2e32674814d7", "html_url": "https://github.com/rust-lang/rust/commit/d45e030c04c19ce9c14787a793fd2e32674814d7"}], "stats": {"total": 174, "additions": 138, "deletions": 36}, "files": [{"sha": "16fdd714575d4334cb760b92dfc0c4c0a5357e9a", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=f640438b402b6507e734862026b0b004090c8ac0", "patch": "@@ -479,8 +479,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         expr: &'hir hir::Expr<'hir>,\n         overall_span: Span,\n     ) -> &'hir hir::Expr<'hir> {\n-        let constructor =\n-            self.arena.alloc(self.expr_lang_item_path(method_span, lang_item, ThinVec::new()));\n+        let constructor = self.arena.alloc(self.expr_lang_item_path(\n+            method_span,\n+            lang_item,\n+            ThinVec::new(),\n+            None,\n+        ));\n         self.expr_call(overall_span, constructor, std::slice::from_ref(expr))\n     }\n \n@@ -584,8 +588,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // `future::from_generator`:\n         let unstable_span =\n             self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n-        let gen_future =\n-            self.expr_lang_item_path(unstable_span, hir::LangItem::FromGenerator, ThinVec::new());\n+        let gen_future = self.expr_lang_item_path(\n+            unstable_span,\n+            hir::LangItem::FromGenerator,\n+            ThinVec::new(),\n+            None,\n+        );\n \n         // `future::from_generator(generator)`:\n         hir::ExprKind::Call(self.arena.alloc(gen_future), arena_vec![self; generator])\n@@ -657,16 +665,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 span,\n                 hir::LangItem::PinNewUnchecked,\n                 arena_vec![self; ref_mut_pinned],\n+                Some(expr.hir_id),\n             );\n             let get_context = self.expr_call_lang_item_fn_mut(\n                 gen_future_span,\n                 hir::LangItem::GetContext,\n                 arena_vec![self; task_context],\n+                Some(expr.hir_id),\n             );\n             let call = self.expr_call_lang_item_fn(\n                 span,\n                 hir::LangItem::FuturePoll,\n                 arena_vec![self; new_unchecked, get_context],\n+                Some(expr.hir_id),\n             );\n             self.arena.alloc(self.expr_unsafe(call))\n         };\n@@ -679,7 +690,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let (x_pat, x_pat_hid) = self.pat_ident(span, x_ident);\n             let x_expr = self.expr_ident(span, x_ident, x_pat_hid);\n             let ready_field = self.single_pat_field(span, x_pat);\n-            let ready_pat = self.pat_lang_item_variant(span, hir::LangItem::PollReady, ready_field);\n+            let ready_pat = self.pat_lang_item_variant(\n+                span,\n+                hir::LangItem::PollReady,\n+                ready_field,\n+                Some(expr.hir_id),\n+            );\n             let break_x = self.with_loop_scope(loop_node_id, move |this| {\n                 let expr_break =\n                     hir::ExprKind::Break(this.lower_loop_destination(None), Some(x_expr));\n@@ -690,7 +706,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         // `::std::task::Poll::Pending => {}`\n         let pending_arm = {\n-            let pending_pat = self.pat_lang_item_variant(span, hir::LangItem::PollPending, &[]);\n+            let pending_pat = self.pat_lang_item_variant(\n+                span,\n+                hir::LangItem::PollPending,\n+                &[],\n+                Some(expr.hir_id),\n+            );\n             let empty_block = self.expr_block_empty(span);\n             self.arm(pending_pat, empty_block)\n         };\n@@ -1161,7 +1182,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_expr_range_closed(&mut self, span: Span, e1: &Expr, e2: &Expr) -> hir::ExprKind<'hir> {\n         let e1 = self.lower_expr_mut(e1);\n         let e2 = self.lower_expr_mut(e2);\n-        let fn_path = hir::QPath::LangItem(hir::LangItem::RangeInclusiveNew, self.lower_span(span));\n+        let fn_path =\n+            hir::QPath::LangItem(hir::LangItem::RangeInclusiveNew, self.lower_span(span), None);\n         let fn_expr =\n             self.arena.alloc(self.expr(span, hir::ExprKind::Path(fn_path), ThinVec::new()));\n         hir::ExprKind::Call(fn_expr, arena_vec![self; e1, e2])\n@@ -1195,7 +1217,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         );\n \n         hir::ExprKind::Struct(\n-            self.arena.alloc(hir::QPath::LangItem(lang_item, self.lower_span(span))),\n+            self.arena.alloc(hir::QPath::LangItem(lang_item, self.lower_span(span), None)),\n             fields,\n             None,\n         )\n@@ -1390,6 +1412,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 head_span,\n                 hir::LangItem::IteratorNext,\n                 arena_vec![self; ref_mut_iter],\n+                None,\n             );\n             let arms = arena_vec![self; none_arm, some_arm];\n \n@@ -1418,6 +1441,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 head_span,\n                 hir::LangItem::IntoIterIntoIter,\n                 arena_vec![self; head],\n+                None,\n             )\n         };\n \n@@ -1473,6 +1497,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 unstable_span,\n                 hir::LangItem::TryTraitBranch,\n                 arena_vec![self; sub_expr],\n+                None,\n             )\n         };\n \n@@ -1629,8 +1654,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         span: Span,\n         lang_item: hir::LangItem,\n         args: &'hir [hir::Expr<'hir>],\n+        hir_id: Option<hir::HirId>,\n     ) -> hir::Expr<'hir> {\n-        let path = self.arena.alloc(self.expr_lang_item_path(span, lang_item, ThinVec::new()));\n+        let path =\n+            self.arena.alloc(self.expr_lang_item_path(span, lang_item, ThinVec::new(), hir_id));\n         self.expr_call_mut(span, path, args)\n     }\n \n@@ -1639,19 +1666,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         span: Span,\n         lang_item: hir::LangItem,\n         args: &'hir [hir::Expr<'hir>],\n+        hir_id: Option<hir::HirId>,\n     ) -> &'hir hir::Expr<'hir> {\n-        self.arena.alloc(self.expr_call_lang_item_fn_mut(span, lang_item, args))\n+        self.arena.alloc(self.expr_call_lang_item_fn_mut(span, lang_item, args, hir_id))\n     }\n \n     fn expr_lang_item_path(\n         &mut self,\n         span: Span,\n         lang_item: hir::LangItem,\n         attrs: AttrVec,\n+        hir_id: Option<hir::HirId>,\n     ) -> hir::Expr<'hir> {\n         self.expr(\n             span,\n-            hir::ExprKind::Path(hir::QPath::LangItem(lang_item, self.lower_span(span))),\n+            hir::ExprKind::Path(hir::QPath::LangItem(lang_item, self.lower_span(span), hir_id)),\n             attrs,\n         )\n     }"}, {"sha": "e03e82b2b7784f97b46a73dcad8df3e000f68690", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=f640438b402b6507e734862026b0b004090c8ac0", "patch": "@@ -2127,21 +2127,21 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n     fn pat_cf_continue(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {\n         let field = self.single_pat_field(span, pat);\n-        self.pat_lang_item_variant(span, hir::LangItem::ControlFlowContinue, field)\n+        self.pat_lang_item_variant(span, hir::LangItem::ControlFlowContinue, field, None)\n     }\n \n     fn pat_cf_break(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {\n         let field = self.single_pat_field(span, pat);\n-        self.pat_lang_item_variant(span, hir::LangItem::ControlFlowBreak, field)\n+        self.pat_lang_item_variant(span, hir::LangItem::ControlFlowBreak, field, None)\n     }\n \n     fn pat_some(&mut self, span: Span, pat: &'hir hir::Pat<'hir>) -> &'hir hir::Pat<'hir> {\n         let field = self.single_pat_field(span, pat);\n-        self.pat_lang_item_variant(span, hir::LangItem::OptionSome, field)\n+        self.pat_lang_item_variant(span, hir::LangItem::OptionSome, field, None)\n     }\n \n     fn pat_none(&mut self, span: Span) -> &'hir hir::Pat<'hir> {\n-        self.pat_lang_item_variant(span, hir::LangItem::OptionNone, &[])\n+        self.pat_lang_item_variant(span, hir::LangItem::OptionNone, &[], None)\n     }\n \n     fn single_pat_field(\n@@ -2164,8 +2164,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         span: Span,\n         lang_item: hir::LangItem,\n         fields: &'hir [hir::PatField<'hir>],\n+        hir_id: Option<hir::HirId>,\n     ) -> &'hir hir::Pat<'hir> {\n-        let qpath = hir::QPath::LangItem(lang_item, self.lower_span(span));\n+        let qpath = hir::QPath::LangItem(lang_item, self.lower_span(span), hir_id);\n         self.pat(span, hir::PatKind::Struct(qpath, fields, false))\n     }\n "}, {"sha": "01d95f71c9b59f577ef45a554ef0e17278ba4f9b", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=f640438b402b6507e734862026b0b004090c8ac0", "patch": "@@ -1627,13 +1627,13 @@ pub fn is_range_literal(expr: &Expr<'_>) -> bool {\n                     | LangItem::RangeFrom\n                     | LangItem::RangeFull\n                     | LangItem::RangeToInclusive,\n-                _,\n+                ..\n             )\n         ),\n \n         // `..=` desugars into `::std::ops::RangeInclusive::new(...)`.\n         ExprKind::Call(ref func, _) => {\n-            matches!(func.kind, ExprKind::Path(QPath::LangItem(LangItem::RangeInclusiveNew, _)))\n+            matches!(func.kind, ExprKind::Path(QPath::LangItem(LangItem::RangeInclusiveNew, ..)))\n         }\n \n         _ => false,\n@@ -1788,8 +1788,8 @@ pub enum QPath<'hir> {\n     /// the `X` and `Y` nodes each being a `TyKind::Path(QPath::TypeRelative(..))`.\n     TypeRelative(&'hir Ty<'hir>, &'hir PathSegment<'hir>),\n \n-    /// Reference to a `#[lang = \"foo\"]` item.\n-    LangItem(LangItem, Span),\n+    /// Reference to a `#[lang = \"foo\"]` item. `HirId` of the inner expr.\n+    LangItem(LangItem, Span, Option<HirId>),\n }\n \n impl<'hir> QPath<'hir> {\n@@ -1798,7 +1798,7 @@ impl<'hir> QPath<'hir> {\n         match *self {\n             QPath::Resolved(_, path) => path.span,\n             QPath::TypeRelative(qself, ps) => qself.span.to(ps.ident.span),\n-            QPath::LangItem(_, span) => span,\n+            QPath::LangItem(_, span, _) => span,\n         }\n     }\n \n@@ -1808,7 +1808,7 @@ impl<'hir> QPath<'hir> {\n         match *self {\n             QPath::Resolved(_, path) => path.span,\n             QPath::TypeRelative(qself, _) => qself.span,\n-            QPath::LangItem(_, span) => span,\n+            QPath::LangItem(_, span, _) => span,\n         }\n     }\n \n@@ -1818,7 +1818,7 @@ impl<'hir> QPath<'hir> {\n         match *self {\n             QPath::Resolved(_, path) => path.segments.last().unwrap().ident.span,\n             QPath::TypeRelative(_, segment) => segment.ident.span,\n-            QPath::LangItem(_, span) => span,\n+            QPath::LangItem(_, span, _) => span,\n         }\n     }\n }"}, {"sha": "389e3845c56b9bf6b87568533c6025ce99d1e671", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=f640438b402b6507e734862026b0b004090c8ac0", "patch": "@@ -1731,7 +1731,7 @@ impl<'a> State<'a> {\n                     colons_before_params,\n                 )\n             }\n-            hir::QPath::LangItem(lang_item, span) => {\n+            hir::QPath::LangItem(lang_item, span, _) => {\n                 self.word(\"#[lang = \\\"\");\n                 self.print_ident(Ident::new(lang_item.name(), span));\n                 self.word(\"\\\"]\");"}, {"sha": "b6151757588dd7c19470291bca4035001fe2cb6f", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=f640438b402b6507e734862026b0b004090c8ac0", "patch": "@@ -52,7 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for ArrayIntoIter {\n             if let hir::ExprKind::Call(path, [arg]) = &arg.kind {\n                 if let hir::ExprKind::Path(hir::QPath::LangItem(\n                     hir::LangItem::IntoIterIntoIter,\n-                    _,\n+                    ..,\n                 )) = &path.kind\n                 {\n                     self.for_expr_span = arg.span;"}, {"sha": "a5bd246712b8ee2a9d12d90ccd8ab31e7168ce0f", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=f640438b402b6507e734862026b0b004090c8ac0", "patch": "@@ -348,7 +348,7 @@ pub enum ObligationCauseCode<'tcx> {\n     /// If `X` is the concrete type of an opaque type `impl Y`, then `X` must implement `Y`\n     OpaqueType,\n \n-    AwaitableExpr,\n+    AwaitableExpr(Option<hir::HirId>),\n \n     ForLoopIterator,\n "}, {"sha": "1d9c44bffa3fc83cdf1618ef6c418a4d2b1e4534", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=f640438b402b6507e734862026b0b004090c8ac0", "patch": "@@ -286,7 +286,7 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                     refs: vec![SigElement { id, start, end }],\n                 })\n             }\n-            hir::TyKind::Path(hir::QPath::LangItem(lang_item, _)) => {\n+            hir::TyKind::Path(hir::QPath::LangItem(lang_item, _, _)) => {\n                 Ok(text_sig(format!(\"#[lang = \\\"{}\\\"]\", lang_item.name())))\n             }\n             hir::TyKind::TraitObject(bounds, ..) => {"}, {"sha": "ede8511d8154c4686960840c268593443713ed3f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=f640438b402b6507e734862026b0b004090c8ac0", "patch": "@@ -886,7 +886,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) {\n         let span = obligation.cause.span;\n \n-        if let ObligationCauseCode::AwaitableExpr = obligation.cause.code {\n+        if let ObligationCauseCode::AwaitableExpr(hir_id) = obligation.cause.code {\n             // FIXME: use `obligation.predicate.kind()...trait_ref.self_ty()` to see if we have `()`\n             // and if not maybe suggest doing something else? If we kept the expression around we\n             // could also check if it is an fn call (very likely) and suggest changing *that*, if\n@@ -897,6 +897,40 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 String::new(),\n                 Applicability::MachineApplicable,\n             );\n+            // FIXME: account for associated `async fn`s.\n+            let hir = self.tcx.hir();\n+            if let Some(node) = hir_id.and_then(|hir_id| hir.find(hir_id)) {\n+                if let hir::Node::Expr(hir::Expr {\n+                    span, kind: hir::ExprKind::Call(base, _), ..\n+                }) = node\n+                {\n+                    if let ty::PredicateKind::Trait(pred) =\n+                        obligation.predicate.kind().skip_binder()\n+                    {\n+                        err.span_label(*span, &format!(\"this call returns `{}`\", pred.self_ty()));\n+                    }\n+                    if let Some(typeck_results) =\n+                        self.in_progress_typeck_results.map(|t| t.borrow())\n+                    {\n+                        let ty = typeck_results.expr_ty_adjusted(base);\n+                        if let ty::FnDef(def_id, _substs) = ty.kind() {\n+                            if let Some(hir::Node::Item(hir::Item { span, ident, .. })) =\n+                                hir.get_if_local(*def_id)\n+                            {\n+                                err.span_suggestion_verbose(\n+                                    span.shrink_to_lo(),\n+                                    &format!(\n+                                        \"alternatively, consider making `fn {}` asynchronous\",\n+                                        ident\n+                                    ),\n+                                    \"async \".to_string(),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n         }\n     }\n \n@@ -1962,7 +1996,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             | ObligationCauseCode::ReturnType\n             | ObligationCauseCode::ReturnValue(_)\n             | ObligationCauseCode::BlockTailExpression(_)\n-            | ObligationCauseCode::AwaitableExpr\n+            | ObligationCauseCode::AwaitableExpr(_)\n             | ObligationCauseCode::ForLoopIterator\n             | ObligationCauseCode::QuestionMark\n             | ObligationCauseCode::LetElse => {}"}, {"sha": "8a44874bb477ccbc59deb1d861cc3976de744228", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=f640438b402b6507e734862026b0b004090c8ac0", "patch": "@@ -2362,7 +2362,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     .map(|(ty, _, _)| ty)\n                     .unwrap_or_else(|_| tcx.ty_error())\n             }\n-            hir::TyKind::Path(hir::QPath::LangItem(lang_item, span)) => {\n+            hir::TyKind::Path(hir::QPath::LangItem(lang_item, span, _)) => {\n                 let def_id = tcx.require_lang_item(lang_item, Some(span));\n                 let (substs, _) = self.create_substs_for_ast_path(\n                     span,"}, {"sha": "bc6ad3c9686719a8f8df63ad146276035ddd102f", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=f640438b402b6507e734862026b0b004090c8ac0", "patch": "@@ -277,8 +277,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::AddrOf(kind, mutbl, oprnd) => {\n                 self.check_expr_addr_of(kind, mutbl, oprnd, expected, expr)\n             }\n-            ExprKind::Path(QPath::LangItem(lang_item, _)) => {\n-                self.check_lang_item_path(lang_item, expr)\n+            ExprKind::Path(QPath::LangItem(lang_item, _, hir_id)) => {\n+                self.check_lang_item_path(lang_item, expr, hir_id)\n             }\n             ExprKind::Path(ref qpath) => self.check_expr_path(qpath, expr, &[]),\n             ExprKind::InlineAsm(asm) => self.check_expr_asm(asm),\n@@ -498,8 +498,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         lang_item: hir::LangItem,\n         expr: &'tcx hir::Expr<'tcx>,\n+        hir_id: Option<hir::HirId>,\n     ) -> Ty<'tcx> {\n-        self.resolve_lang_item_path(lang_item, expr.span, expr.hir_id).1\n+        self.resolve_lang_item_path(lang_item, expr.span, expr.hir_id, hir_id).1\n     }\n \n     pub(crate) fn check_expr_path("}, {"sha": "ab2d5286907c50eeeccf5eaf8479097598311a72", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=f640438b402b6507e734862026b0b004090c8ac0", "patch": "@@ -791,6 +791,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         lang_item: hir::LangItem,\n         span: Span,\n         hir_id: hir::HirId,\n+        expr_hir_id: Option<hir::HirId>,\n     ) -> (Res, Ty<'tcx>) {\n         let def_id = self.tcx.require_lang_item(lang_item, Some(span));\n         let def_kind = self.tcx.def_kind(def_id);\n@@ -809,7 +810,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             def_id,\n             &substs,\n             match lang_item {\n-                hir::LangItem::FuturePoll => ObligationCauseCode::AwaitableExpr,\n+                hir::LangItem::FuturePoll => ObligationCauseCode::AwaitableExpr(expr_hir_id),\n                 hir::LangItem::IteratorNext | hir::LangItem::IntoIterIntoIter => {\n                     ObligationCauseCode::ForLoopIterator\n                 }"}, {"sha": "b2641726075c99a98c4cdd3fbefdcc790fe7c6d1", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f640438b402b6507e734862026b0b004090c8ac0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=f640438b402b6507e734862026b0b004090c8ac0", "patch": "@@ -938,8 +938,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 (result.map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)), ty)\n             }\n-            QPath::LangItem(lang_item, span) => {\n-                self.resolve_lang_item_path(lang_item, span, hir_id)\n+            QPath::LangItem(lang_item, span, id) => {\n+                self.resolve_lang_item_path(lang_item, span, hir_id, id)\n             }\n         }\n     }"}, {"sha": "70c38aaeb25117d30e18e6fceb31aad1ed422b26", "filename": "src/test/ui/async-await/unnecessary-await.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f640438b402b6507e734862026b0b004090c8ac0/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f640438b402b6507e734862026b0b004090c8ac0/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.rs?ref=f640438b402b6507e734862026b0b004090c8ac0", "patch": "@@ -0,0 +1,14 @@\n+// edition:2018\n+\n+async fn foo () { }\n+fn bar () -> impl std::future::Future { async {} }\n+fn boo () {}\n+\n+async fn baz() -> std::io::Result<()> {\n+    foo().await;\n+    boo().await; //~ ERROR `()` is not a future\n+    bar().await;\n+    std::io::Result::Ok(())\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "4caa15e67b7c9b301a72c251a6ceeda3658cb850", "filename": "src/test/ui/async-await/unnecessary-await.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f640438b402b6507e734862026b0b004090c8ac0/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f640438b402b6507e734862026b0b004090c8ac0/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.stderr?ref=f640438b402b6507e734862026b0b004090c8ac0", "patch": "@@ -0,0 +1,22 @@\n+error[E0277]: `()` is not a future\n+  --> $DIR/unnecessary-await.rs:9:10\n+   |\n+LL |     boo().await;\n+   |     -----^^^^^^ `()` is not a future\n+   |     |\n+   |     this call returns `()`\n+   |\n+   = help: the trait `Future` is not implemented for `()`\n+help: do not `.await` the expression\n+   |\n+LL -     boo().await;\n+LL +     boo();\n+   | \n+help: alternatively, consider making `fn boo` asynchronous\n+   |\n+LL | async fn boo () {}\n+   | +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}