{"sha": "895de1f13e78de456d5ecbdca3c87526c4dbbef2", "node_id": "C_kwDOAAsO6NoAKDg5NWRlMWYxM2U3OGRlNDU2ZDVlY2JkY2EzYzg3NTI2YzRkYmJlZjI", "commit": {"author": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-18T22:18:36Z"}, "committer": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-18T22:18:36Z"}, "message": "feat: make fixable", "tree": {"sha": "1207ed498325f9aa8a33b3c44c9bb671752e9199", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1207ed498325f9aa8a33b3c44c9bb671752e9199"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/895de1f13e78de456d5ecbdca3c87526c4dbbef2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEhJzmO046LuvaNO3WIPoWCbA7HW0FAmI1BTwACgkQIPoWCbA7\nHW0h4xAAsGw/ZGD0rzBCsIzEgbLgaHaETqpyoD7BBYIFYhYhaDR3S787uMvrt5X+\nejniz4zeqVWQep/QLUMPMG7ni66KFrirfFP1CrGdyWC+R/dx8NKwuGBvV7IvUo2R\nAFZjpHYlWlpnwUkmvC2TjkIXmcQ551EMQJcoW2Y0G+3sCeQ/QkjdzIIjQvUn3+OC\n6LPwkFTYP0Hyqx5hVTo9u8JQNgELXIM1e5CxptD0psHtNk2Rz7kFvz7eJDc6t6zy\nv2qBfkcO8NVQKuiXvgOYwGAGGpewAwqv1StVxdO7IC1y/j86VRSqlBunliS49wfK\n7Md7tQYilEPyFLQFneaPchdNLh52QOHmGQb6zSE64Vu2yaFoegVUf0f/0QRySLzM\nkunQ/3Cbgtn3d6QjAmeEUAcHzQQOBh1gCjgK+lXOAjDZDph/0q5GB2MddtUWX4Wc\n9Bspl57g7+X9mYE3Ybrhp2DJJiEydCORie1CCk7VClIWk6QHWV8dH081gyPI+DDK\nPQU1Ywx7TXXAWGDvNwg6sk1fAjJIf7SnL0EApspKFAbZIF3JQ69nT0oVUomAsqYc\nUuXlne6sQxBQ9RDyhacohpBWWU5NZehm6dMAymG9dWPssHhTuc7AXpu/U7cMV5P4\nwQ3mi7AifM83HBav8SiWsqu196nyQVI4ixj8FwkaLsQAlVNYioE=\n=ioxk\n-----END PGP SIGNATURE-----", "payload": "tree 1207ed498325f9aa8a33b3c44c9bb671752e9199\nparent f00e844a1f3b7e6d8a5d84e90baa37b0cebeac67\nauthor Max Baumann <max@bmn.dev> 1647641916 +0100\ncommitter Max Baumann <max@bmn.dev> 1647641916 +0100\n\nfeat: make fixable\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/895de1f13e78de456d5ecbdca3c87526c4dbbef2", "html_url": "https://github.com/rust-lang/rust/commit/895de1f13e78de456d5ecbdca3c87526c4dbbef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/895de1f13e78de456d5ecbdca3c87526c4dbbef2/comments", "author": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f00e844a1f3b7e6d8a5d84e90baa37b0cebeac67", "url": "https://api.github.com/repos/rust-lang/rust/commits/f00e844a1f3b7e6d8a5d84e90baa37b0cebeac67", "html_url": "https://github.com/rust-lang/rust/commit/f00e844a1f3b7e6d8a5d84e90baa37b0cebeac67"}], "stats": {"total": 88, "additions": 75, "deletions": 13}, "files": [{"sha": "4e2dcf6723176a918b1cee4c772ac1c7097000f7", "filename": "clippy_lints/src/methods/or_then_unwrap.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/895de1f13e78de456d5ecbdca3c87526c4dbbef2/clippy_lints%2Fsrc%2Fmethods%2For_then_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895de1f13e78de456d5ecbdca3c87526c4dbbef2/clippy_lints%2Fsrc%2Fmethods%2For_then_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_then_unwrap.rs?ref=895de1f13e78de456d5ecbdca3c87526c4dbbef2", "patch": "@@ -1,4 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -17,15 +18,20 @@ pub(super) fn check<'tcx>(\n ) {\n     let ty = cx.typeck_results().expr_ty(recv); // get type of x (we later check if it's Option or Result)\n     let title;\n+    let or_arg_content: Span;\n \n     if is_type_diagnostic_item(cx, ty, sym::Option) {\n         title = \".or(Some(\u2026)).unwrap() found\";\n-        if !is(or_arg, \"Some\") {\n+        if let Some(content) = get_content_if_is(or_arg, \"Some\") {\n+            or_arg_content = content;\n+        } else {\n             return;\n         }\n     } else if is_type_diagnostic_item(cx, ty, sym::Result) {\n         title = \".or(Ok(\u2026)).unwrap() found\";\n-        if !is(or_arg, \"Ok\") {\n+        if let Some(content) = get_content_if_is(or_arg, \"Ok\") {\n+            or_arg_content = content;\n+        } else {\n             return;\n         }\n     } else {\n@@ -41,30 +47,36 @@ pub(super) fn check<'tcx>(\n         unwrap_expr.span\n     };\n \n+    let mut applicability = Applicability::MachineApplicable;\n+    let suggestion = format!(\n+        \"unwrap_or({})\",\n+        snippet_with_applicability(cx, or_arg_content, \"..\", &mut applicability)\n+    );\n+\n     span_lint_and_sugg(\n         cx,\n         OR_THEN_UNWRAP,\n         or_span.to(unwrap_span),\n         title,\n         \"try this\",\n-        \"unwrap_or(...)\".into(),\n-        Applicability::HasPlaceholders,\n+        suggestion,\n+        applicability,\n     );\n }\n \n-/// is expr a Call to name?\n+/// is expr a Call to name? if so, return what it's wrapping\n /// name might be \"Some\", \"Ok\", \"Err\", etc.\n-fn is<'a>(expr: &Expr<'a>, name: &str) -> bool {\n+fn get_content_if_is<'a>(expr: &Expr<'a>, name: &str) -> Option<Span> {\n     if_chain! {\n-        if let ExprKind::Call(some_expr, _some_args) = expr.kind;\n+        if let ExprKind::Call(some_expr, [arg]) = expr.kind;\n         if let ExprKind::Path(QPath::Resolved(_, path)) = &some_expr.kind;\n         if let Some(path_segment) = path.segments.first();\n         if path_segment.ident.name.as_str() == name;\n         then {\n-            true\n+            Some(arg.span)\n         }\n         else {\n-            false\n+            None\n         }\n     }\n }"}, {"sha": "b1e69ce2d26ab15d323525fb948e5036515b2f8b", "filename": "tests/ui/or_then_unwrap.fixed", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/895de1f13e78de456d5ecbdca3c87526c4dbbef2/tests%2Fui%2For_then_unwrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/895de1f13e78de456d5ecbdca3c87526c4dbbef2/tests%2Fui%2For_then_unwrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_then_unwrap.fixed?ref=895de1f13e78de456d5ecbdca3c87526c4dbbef2", "patch": "@@ -0,0 +1,48 @@\n+// run-rustfix\n+\n+#![warn(clippy::or_then_unwrap)]\n+#![allow(clippy::map_identity)]\n+\n+struct SomeStruct {}\n+impl SomeStruct {\n+    fn or(self, _: Option<Self>) -> Self {\n+        self\n+    }\n+    fn unwrap(&self) {}\n+}\n+\n+struct SomeOtherStruct {}\n+impl SomeOtherStruct {\n+    fn or(self) -> Self {\n+        self\n+    }\n+    fn unwrap(&self) {}\n+}\n+\n+fn main() {\n+    let option: Option<&str> = None;\n+    let _ = option.unwrap_or(\"fallback\"); // should trigger lint\n+\n+    let result: Result<&str, &str> = Err(\"Error\");\n+    let _ = result.unwrap_or(\"fallback\"); // should trigger lint\n+\n+    // Not Option/Result\n+    let instance = SomeStruct {};\n+    let _ = instance.or(Some(SomeStruct {})).unwrap(); // should not trigger lint\n+\n+    // or takes no argument\n+    let instance = SomeOtherStruct {};\n+    let _ = instance.or().unwrap(); // should not trigger lint and should not panic\n+\n+    // None in or\n+    let option: Option<&str> = None;\n+    let _ = option.or(None).unwrap(); // should not trigger lint\n+\n+    // Not Err in or\n+    let result: Result<&str, &str> = Err(\"Error\");\n+    let _ = result.or::<&str>(Err(\"Other Error\")).unwrap(); // should not trigger lint\n+\n+    // other function between\n+    let option: Option<&str> = None;\n+    let _ = option.or(Some(\"fallback\")).map(|v| v).unwrap(); // should not trigger lint\n+}"}, {"sha": "dc66e86be6f3c0e4a77e8f367447a2caabbebee5", "filename": "tests/ui/or_then_unwrap.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/895de1f13e78de456d5ecbdca3c87526c4dbbef2/tests%2Fui%2For_then_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/895de1f13e78de456d5ecbdca3c87526c4dbbef2/tests%2Fui%2For_then_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_then_unwrap.rs?ref=895de1f13e78de456d5ecbdca3c87526c4dbbef2", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #![warn(clippy::or_then_unwrap)]\n #![allow(clippy::map_identity)]\n "}, {"sha": "301a54530cfc56325900190e469f7965aa332b30", "filename": "tests/ui/or_then_unwrap.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/895de1f13e78de456d5ecbdca3c87526c4dbbef2/tests%2Fui%2For_then_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/895de1f13e78de456d5ecbdca3c87526c4dbbef2/tests%2Fui%2For_then_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_then_unwrap.stderr?ref=895de1f13e78de456d5ecbdca3c87526c4dbbef2", "patch": "@@ -1,16 +1,16 @@\n error: .or(Some(\u2026)).unwrap() found\n-  --> $DIR/or_then_unwrap.rs:22:20\n+  --> $DIR/or_then_unwrap.rs:24:20\n    |\n LL |     let _ = option.or(Some(\"fallback\")).unwrap(); // should trigger lint\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or(...)`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or(\"fallback\")`\n    |\n    = note: `-D clippy::or-then-unwrap` implied by `-D warnings`\n \n error: .or(Ok(\u2026)).unwrap() found\n-  --> $DIR/or_then_unwrap.rs:25:20\n+  --> $DIR/or_then_unwrap.rs:27:20\n    |\n LL |     let _ = result.or::<&str>(Ok(\"fallback\")).unwrap(); // should trigger lint\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or(...)`\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or(\"fallback\")`\n \n error: aborting due to 2 previous errors\n "}]}