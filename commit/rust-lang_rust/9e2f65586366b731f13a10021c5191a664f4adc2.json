{"sha": "9e2f65586366b731f13a10021c5191a664f4adc2", "node_id": "C_kwDOAAsO6NoAKDllMmY2NTU4NjM2NmI3MzFmMTNhMTAwMjFjNTE5MWE2NjRmNGFkYzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-23T07:57:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-23T07:57:15Z"}, "message": "Auto merge of #97304 - Dylan-DPC:rollup-qxrfddc, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97087 (Clarify slice and Vec iteration order)\n - #97254 (Remove feature: `crate` visibility modifier)\n - #97271 (Add regression test for #91949)\n - #97294 (std::time : fix variable name in the doc)\n - #97303 (Fix some typos in arg checking algorithm)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5578dad4597c1da5bdc53961a04366fae678da42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5578dad4597c1da5bdc53961a04366fae678da42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e2f65586366b731f13a10021c5191a664f4adc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2f65586366b731f13a10021c5191a664f4adc2", "html_url": "https://github.com/rust-lang/rust/commit/9e2f65586366b731f13a10021c5191a664f4adc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e2f65586366b731f13a10021c5191a664f4adc2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03c8b0b6edb22d0c3a935a16ca5f068728da4b26", "url": "https://api.github.com/repos/rust-lang/rust/commits/03c8b0b6edb22d0c3a935a16ca5f068728da4b26", "html_url": "https://github.com/rust-lang/rust/commit/03c8b0b6edb22d0c3a935a16ca5f068728da4b26"}, {"sha": "b5ff4ad02ce4f491d37d56cd4b81dd142f709a4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ff4ad02ce4f491d37d56cd4b81dd142f709a4a", "html_url": "https://github.com/rust-lang/rust/commit/b5ff4ad02ce4f491d37d56cd4b81dd142f709a4a"}], "stats": {"total": 266, "additions": 118, "deletions": 148}, "files": [{"sha": "b81f7a2427076a028a3cd5278d2f4a1880a877c8", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -2552,15 +2552,6 @@ impl PolyTraitRef {\n     }\n }\n \n-#[derive(Copy, Clone, Encodable, Decodable, Debug, HashStable_Generic)]\n-pub enum CrateSugar {\n-    /// Source is `pub(crate)`.\n-    PubCrate,\n-\n-    /// Source is (just) `crate`.\n-    JustCrate,\n-}\n-\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub struct Visibility {\n     pub kind: VisibilityKind,\n@@ -2571,7 +2562,6 @@ pub struct Visibility {\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum VisibilityKind {\n     Public,\n-    Crate(CrateSugar),\n     Restricted { path: P<Path>, id: NodeId },\n     Inherited,\n }"}, {"sha": "85bb52964865bab31cae06050335eb19295e823a", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -1469,7 +1469,7 @@ pub fn noop_flat_map_stmt_kind<T: MutVisitor>(\n \n pub fn noop_visit_vis<T: MutVisitor>(visibility: &mut Visibility, vis: &mut T) {\n     match &mut visibility.kind {\n-        VisibilityKind::Public | VisibilityKind::Crate(_) | VisibilityKind::Inherited => {}\n+        VisibilityKind::Public | VisibilityKind::Inherited => {}\n         VisibilityKind::Restricted { path, id } => {\n             vis.visit_path(path);\n             vis.visit_id(id);"}, {"sha": "f0b94047ed9daa5517007163f3441c6db1c661f2", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -697,18 +697,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n         visit::walk_assoc_item(self, i, ctxt)\n     }\n-\n-    fn visit_vis(&mut self, vis: &'a ast::Visibility) {\n-        if let ast::VisibilityKind::Crate(ast::CrateSugar::JustCrate) = vis.kind {\n-            gate_feature_post!(\n-                &self,\n-                crate_visibility_modifier,\n-                vis.span,\n-                \"`crate` visibility modifier is experimental\"\n-            );\n-        }\n-        visit::walk_vis(self, vis)\n-    }\n }\n \n pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n@@ -770,7 +758,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n \n     gate_all!(trait_alias, \"trait aliases are experimental\");\n     gate_all!(associated_type_bounds, \"associated type bounds are unstable\");\n-    gate_all!(crate_visibility_modifier, \"`crate` visibility modifier is experimental\");\n     gate_all!(decl_macro, \"`macro` is experimental\");\n     gate_all!(box_patterns, \"box pattern syntax is experimental\");\n     gate_all!(exclusive_range_pattern, \"exclusive range pattern syntax is experimental\");"}, {"sha": "67b539a7ad41b77f25b231fe34c89773704ed1b8", "filename": "compiler/rustc_ast_pretty/src/pprust/state/item.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fitem.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -403,13 +403,9 @@ impl<'a> State<'a> {\n     pub(crate) fn print_visibility(&mut self, vis: &ast::Visibility) {\n         match vis.kind {\n             ast::VisibilityKind::Public => self.word_nbsp(\"pub\"),\n-            ast::VisibilityKind::Crate(sugar) => match sugar {\n-                ast::CrateSugar::PubCrate => self.word_nbsp(\"pub(crate)\"),\n-                ast::CrateSugar::JustCrate => self.word_nbsp(\"crate\"),\n-            },\n             ast::VisibilityKind::Restricted { ref path, .. } => {\n                 let path = Self::to_string(|s| s.print_path(path, false, 0));\n-                if path == \"self\" || path == \"super\" {\n+                if path == \"crate\" || path == \"self\" || path == \"super\" {\n                     self.word_nbsp(format!(\"pub({})\", path))\n                 } else {\n                     self.word_nbsp(format!(\"pub(in {})\", path))"}, {"sha": "1956327dfaba4be5c1ba9f5e8b9e4dee10987e91", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -351,8 +351,6 @@ declare_features! (\n     (active, const_trait_impl, \"1.42.0\", Some(67792), None),\n     /// Allows the `?` operator in const contexts.\n     (active, const_try, \"1.56.0\", Some(74935), None),\n-    /// Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n-    (active, crate_visibility_modifier, \"1.23.0\", Some(53120), None),\n     /// Allows non-builtin attributes in inner attribute position.\n     (active, custom_inner_attributes, \"1.30.0\", Some(54726), None),\n     /// Allows custom test frameworks with `#![test_runner]` and `#[test_case]`."}, {"sha": "b546662dc1496bf090c30e9599bf44dd21883553", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -72,6 +72,8 @@ declare_features! (\n     /// Allows `T: ?const Trait` syntax in bounds.\n     (removed, const_trait_bound_opt_out, \"1.42.0\", Some(67794), None,\n      Some(\"Removed in favor of `~const` bound in #![feature(const_trait_impl)]\")),\n+    /// Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n+    (removed, crate_visibility_modifier, \"1.63.0\", Some(53120), None, Some(\"removed in favor of `pub(crate)`\")),\n     /// Allows using custom attributes (RFC 572).\n     (removed, custom_attribute, \"1.0.0\", Some(29642), None,\n      Some(\"removed in favor of `#![register_tool]` and `#![register_attr]`\")),"}, {"sha": "9317858aed909812b867788927a24d5c748ff9f4", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -1372,17 +1372,11 @@ impl UnreachablePub {\n             let def_span = cx.tcx.sess.source_map().guess_head_span(span);\n             cx.struct_span_lint(UNREACHABLE_PUB, def_span, |lint| {\n                 let mut err = lint.build(&format!(\"unreachable `pub` {}\", what));\n-                let replacement = if cx.tcx.features().crate_visibility_modifier {\n-                    \"crate\"\n-                } else {\n-                    \"pub(crate)\"\n-                }\n-                .to_owned();\n \n                 err.span_suggestion(\n                     vis_span,\n                     \"consider restricting its visibility\",\n-                    replacement,\n+                    \"pub(crate)\".to_owned(),\n                     applicability,\n                 );\n                 if exportable {"}, {"sha": "e99347206fe50e9075dc77f7e27c18edcc0d1e2d", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -302,8 +302,7 @@ impl<'a> Parser<'a> {\n \n     /// When parsing a statement, would the start of a path be an item?\n     pub(super) fn is_path_start_item(&mut self) -> bool {\n-        self.is_crate_vis() // no: `crate::b`, yes: `crate $item`\n-        || self.is_kw_followed_by_ident(kw::Union) // no: `union::b`, yes: `union U { .. }`\n+        self.is_kw_followed_by_ident(kw::Union) // no: `union::b`, yes: `union U { .. }`\n         || self.check_auto_or_unsafe_trait_item() // no: `auto::b`, yes: `auto trait X { .. }`\n         || self.is_async_fn() // no(2015): `async::b`, yes: `async fn`\n         || matches!(self.is_macro_rules_item(), IsMacroRulesItem::Yes{..}) // no: `macro_rules::b`, yes: `macro_rules! mac`"}, {"sha": "6e6c1ffe747375853822230e5be16add2f1f3c43", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -25,7 +25,7 @@ use rustc_ast::tokenstream::{self, DelimSpan, Spacing};\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_ast::AttrId;\n use rustc_ast::DUMMY_NODE_ID;\n-use rustc_ast::{self as ast, AnonConst, AttrStyle, AttrVec, Const, CrateSugar, Extern};\n+use rustc_ast::{self as ast, AnonConst, AttrStyle, AttrVec, Const, Extern};\n use rustc_ast::{Async, Expr, ExprKind, MacArgs, MacArgsEq, MacDelimiter, Mutability, StrLit};\n use rustc_ast::{HasAttrs, HasTokens, Unsafe, Visibility, VisibilityKind};\n use rustc_ast_pretty::pprust;\n@@ -1245,30 +1245,15 @@ impl<'a> Parser<'a> {\n         res\n     }\n \n-    fn is_crate_vis(&self) -> bool {\n-        self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)\n-    }\n-\n-    /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,\n-    /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.\n+    /// Parses `pub` and `pub(in path)` plus shortcuts `pub(crate)` for `pub(in crate)`, `pub(self)`\n+    /// for `pub(in self)` and `pub(super)` for `pub(in super)`.\n     /// If the following element can't be a tuple (i.e., it's a function definition), then\n     /// it's not a tuple struct field), and the contents within the parentheses aren't valid,\n     /// so emit a proper diagnostic.\n     // Public for rustfmt usage.\n     pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {\n         maybe_whole!(self, NtVis, |x| x.into_inner());\n \n-        self.expected_tokens.push(TokenType::Keyword(kw::Crate));\n-        if self.is_crate_vis() {\n-            self.bump(); // `crate`\n-            self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);\n-            return Ok(Visibility {\n-                span: self.prev_token.span,\n-                kind: VisibilityKind::Crate(CrateSugar::JustCrate),\n-                tokens: None,\n-            });\n-        }\n-\n         if !self.eat_keyword(kw::Pub) {\n             // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no\n             // keyword to grab a span from for inherited visibility; an empty span at the\n@@ -1286,20 +1271,7 @@ impl<'a> Parser<'a> {\n             // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.\n             // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so\n             // by the following tokens.\n-            if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)\n-            // account for `pub(crate::foo)`\n-            {\n-                // Parse `pub(crate)`.\n-                self.bump(); // `(`\n-                self.bump(); // `crate`\n-                self.expect(&token::CloseDelim(Delimiter::Parenthesis))?; // `)`\n-                let vis = VisibilityKind::Crate(CrateSugar::PubCrate);\n-                return Ok(Visibility {\n-                    span: lo.to(self.prev_token.span),\n-                    kind: vis,\n-                    tokens: None,\n-                });\n-            } else if self.is_keyword_ahead(1, &[kw::In]) {\n+            if self.is_keyword_ahead(1, &[kw::In]) {\n                 // Parse `pub(in path)`.\n                 self.bump(); // `(`\n                 self.bump(); // `in`\n@@ -1312,11 +1284,11 @@ impl<'a> Parser<'a> {\n                     tokens: None,\n                 });\n             } else if self.look_ahead(2, |t| t == &token::CloseDelim(Delimiter::Parenthesis))\n-                && self.is_keyword_ahead(1, &[kw::Super, kw::SelfLower])\n+                && self.is_keyword_ahead(1, &[kw::Crate, kw::Super, kw::SelfLower])\n             {\n-                // Parse `pub(self)` or `pub(super)`.\n+                // Parse `pub(crate)`, `pub(self)`, or `pub(super)`.\n                 self.bump(); // `(`\n-                let path = self.parse_path(PathStyle::Mod)?; // `super`/`self`\n+                let path = self.parse_path(PathStyle::Mod)?; // `crate`/`super`/`self`\n                 self.expect(&token::CloseDelim(Delimiter::Parenthesis))?; // `)`\n                 let vis = VisibilityKind::Restricted { path: P(path), id: ast::DUMMY_NODE_ID };\n                 return Ok(Visibility {"}, {"sha": "20d9123e411ab2361a1ef9f5c10028accd40448b", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -249,9 +249,6 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let parent_scope = &self.parent_scope;\n         match vis.kind {\n             ast::VisibilityKind::Public => Ok(ty::Visibility::Public),\n-            ast::VisibilityKind::Crate(..) => {\n-                Ok(ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id()))\n-            }\n             ast::VisibilityKind::Inherited => {\n                 Ok(match self.parent_scope.module.kind {\n                     // Any inherited visibility resolved directly inside an enum or trait"}, {"sha": "dff0a225871a457ea5da8e59b14f407bb89d5248", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -768,7 +768,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 let second_input_ty =\n                                     self.resolve_vars_if_possible(expected_input_tys[second_idx]);\n                                 let third_input_ty =\n-                                    self.resolve_vars_if_possible(expected_input_tys[second_idx]);\n+                                    self.resolve_vars_if_possible(expected_input_tys[third_idx]);\n                                 let span = if third_idx < provided_arg_count {\n                                     let first_arg_span = provided_args[first_idx].span;\n                                     let third_arg_span = provided_args[third_idx].span;\n@@ -809,16 +809,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                             missing_idxs => {\n                                 let first_idx = *missing_idxs.first().unwrap();\n-                                let second_idx = *missing_idxs.last().unwrap();\n+                                let last_idx = *missing_idxs.last().unwrap();\n                                 // NOTE: Because we might be re-arranging arguments, might have extra arguments, etc.\n                                 // It's hard to *really* know where we should provide this error label, so this is a\n                                 // decent heuristic\n-                                let span = if first_idx < provided_arg_count {\n+                                let span = if last_idx < provided_arg_count {\n                                     let first_arg_span = provided_args[first_idx].span;\n-                                    let second_arg_span = provided_args[second_idx].span;\n+                                    let last_arg_span = provided_args[last_idx].span;\n                                     Span::new(\n                                         first_arg_span.lo(),\n-                                        second_arg_span.hi(),\n+                                        last_arg_span.hi(),\n                                         first_arg_span.ctxt(),\n                                         None,\n                                     )"}, {"sha": "c157aba83c2832c46d1dd51c570001db11c40edd", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -2626,10 +2626,13 @@ impl<T, A: Allocator> IntoIterator for Vec<T, A> {\n     ///\n     /// ```\n     /// let v = vec![\"a\".to_string(), \"b\".to_string()];\n-    /// for s in v.into_iter() {\n-    ///     // s has type String, not &String\n-    ///     println!(\"{s}\");\n-    /// }\n+    /// let mut v_iter = v.into_iter();\n+    ///\n+    /// let first_element: Option<String> = v_iter.next();\n+    ///\n+    /// assert_eq!(first_element, Some(\"a\".to_string()));\n+    /// assert_eq!(v_iter.next(), Some(\"b\".to_string()));\n+    /// assert_eq!(v_iter.next(), None);\n     /// ```\n     #[inline]\n     fn into_iter(self) -> IntoIter<T, A> {"}, {"sha": "f5a90cb3d7ac9fcb5e27daf0ea54a455cc206000", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -716,6 +716,8 @@ impl<T> [T] {\n \n     /// Returns an iterator over the slice.\n     ///\n+    /// The iterator yields all items from start to end.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -735,6 +737,8 @@ impl<T> [T] {\n \n     /// Returns an iterator that allows modifying each value.\n     ///\n+    /// The iterator yields all items from start to end.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "b2014f462bd34569865955b30ab13d48e222c5b6", "filename": "library/std/src/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -95,8 +95,8 @@ pub use core::time::FromFloatSecsError;\n /// use std::time::{Instant, Duration};\n ///\n /// let now = Instant::now();\n-/// let max_nanoseconds = u64::MAX / 1_000_000_000;\n-/// let duration = Duration::new(max_nanoseconds, 0);\n+/// let max_seconds = u64::MAX / 1_000_000_000;\n+/// let duration = Duration::new(max_seconds, 0);\n /// println!(\"{:?}\", now + duration);\n /// ```\n ///"}, {"sha": "b59859dd348e70a323db7504f2865f344782479f", "filename": "src/doc/unstable-book/src/language-features/crate-visibility-modifier.md", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/03c8b0b6edb22d0c3a935a16ca5f068728da4b26/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-visibility-modifier.md", "raw_url": "https://github.com/rust-lang/rust/raw/03c8b0b6edb22d0c3a935a16ca5f068728da4b26/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-visibility-modifier.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-visibility-modifier.md?ref=03c8b0b6edb22d0c3a935a16ca5f068728da4b26", "patch": "@@ -1,20 +0,0 @@\n-# `crate_visibility_modifier`\n-\n-The tracking issue for this feature is: [#53120]\n-\n-[#53120]: https://github.com/rust-lang/rust/issues/53120\n-\n------\n-\n-The `crate_visibility_modifier` feature allows the `crate` keyword to be used\n-as a visibility modifier synonymous to `pub(crate)`, indicating that a type\n-(function, _&c._) is to be visible to the entire enclosing crate, but not to\n-other crates.\n-\n-```rust\n-#![feature(crate_visibility_modifier)]\n-\n-crate struct Foo {\n-    bar: usize,\n-}\n-```"}, {"sha": "6f9f4293e49643d0ce312a24d805e3d3e4cb99fd", "filename": "src/test/ui/argument-suggestions/issue-97197.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97197.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    g((), ());\n+    //~^ ERROR this function takes 6 arguments but 2 arguments were supplied\n+}\n+\n+pub fn g(a1: (), a2: bool, a3: bool, a4: bool, a5: bool, a6: ()) -> () {}"}, {"sha": "10689d5095748b75a4a4c0a9d08afafc7ee6be0a", "filename": "src/test/ui/argument-suggestions/issue-97197.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97197.stderr?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -0,0 +1,19 @@\n+error[E0061]: this function takes 6 arguments but 2 arguments were supplied\n+  --> $DIR/issue-97197.rs:2:5\n+   |\n+LL |     g((), ());\n+   |     ^-------- multiple arguments are missing\n+   |\n+note: function defined here\n+  --> $DIR/issue-97197.rs:6:8\n+   |\n+LL | pub fn g(a1: (), a2: bool, a3: bool, a4: bool, a5: bool, a6: ()) -> () {}\n+   |        ^ ------  --------  --------  --------  --------  ------\n+help: provide the arguments\n+   |\n+LL |     g((), {bool}, {bool}, {bool}, {bool}, ());\n+   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "5236d15b94574107e8f9b863b2a3cdb7a5133c27", "filename": "src/test/ui/argument-suggestions/missing_arguments.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftest%2Fui%2Fargument-suggestions%2Fmissing_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftest%2Fui%2Fargument-suggestions%2Fmissing_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fmissing_arguments.stderr?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -293,7 +293,7 @@ error[E0061]: this function takes 5 arguments but 2 arguments were supplied\n   --> $DIR/missing_arguments.rs:39:3\n    |\n LL |   complex(   1,                     \"\"   );\n-   |   ^^^^^^^--------------------------------- three arguments of type `f32`, `i32`, and `i32` are missing\n+   |   ^^^^^^^--------------------------------- three arguments of type `f32`, `i32`, and `f32` are missing\n    |\n note: function defined here\n   --> $DIR/missing_arguments.rs:7:4"}, {"sha": "0e3f6b168be6b602b8ced5181e712c7b26b6dde1", "filename": "src/test/ui/feature-gates/feature-gate-crate_visibility_modifier.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03c8b0b6edb22d0c3a935a16ca5f068728da4b26/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03c8b0b6edb22d0c3a935a16ca5f068728da4b26/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.rs?ref=03c8b0b6edb22d0c3a935a16ca5f068728da4b26", "patch": "@@ -1,8 +0,0 @@\n-crate struct Bender { //~ ERROR `crate` visibility modifier is experimental\n-    earth: bool,\n-    fire: bool,\n-    air: bool,\n-    water: bool,\n-}\n-\n-fn main() {}"}, {"sha": "969606375c3e9cb918ab7d28bbf2d9fc4412a08c", "filename": "src/test/ui/feature-gates/feature-gate-crate_visibility_modifier.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/03c8b0b6edb22d0c3a935a16ca5f068728da4b26/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03c8b0b6edb22d0c3a935a16ca5f068728da4b26/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_visibility_modifier.stderr?ref=03c8b0b6edb22d0c3a935a16ca5f068728da4b26", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: `crate` visibility modifier is experimental\n-  --> $DIR/feature-gate-crate_visibility_modifier.rs:1:1\n-   |\n-LL | crate struct Bender {\n-   | ^^^^^\n-   |\n-   = note: see issue #53120 <https://github.com/rust-lang/rust/issues/53120> for more information\n-   = help: add `#![feature(crate_visibility_modifier)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "f246aa26a9d039586271a095083f10ac24c9905b", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -861,10 +861,8 @@ fn test_vis() {\n     // VisibilityKind::Public\n     assert_eq!(stringify_vis!(pub), \"pub \");\n \n-    // VisibilityKind::Crate\n-    assert_eq!(stringify_vis!(crate), \"crate \");\n-\n     // VisibilityKind::Restricted\n+    assert_eq!(stringify_vis!(pub(crate)), \"pub(crate) \");\n     assert_eq!(stringify_vis!(pub(self)), \"pub(self) \");\n     assert_eq!(stringify_vis!(pub(super)), \"pub(super) \");\n     assert_eq!(stringify_vis!(pub(in self)), \"pub(self) \");"}, {"sha": "cf2218fe52292fa3a6f04fe1efaa2351c1a1bbf5", "filename": "src/test/ui/traits/issue-91949-hangs-on-recursion.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -0,0 +1,30 @@\n+// build-fail\n+// error-pattern: overflow evaluating the requirement `(): Sized`\n+// error-pattern: function cannot return without recursing\n+\n+// Regression test for #91949.\n+// This hanged *forever* on 1.56, fixed by #90423.\n+\n+#![recursion_limit = \"256\"]\n+\n+struct Wrapped<T>(T);\n+\n+struct IteratorOfWrapped<T, I: Iterator<Item = T>>(I);\n+\n+impl<T, I: Iterator<Item = T>> Iterator for IteratorOfWrapped<T, I> {\n+    type Item = Wrapped<T>;\n+    fn next(&mut self) -> Option<Wrapped<T>> {\n+        self.0.next().map(Wrapped)\n+    }\n+}\n+\n+fn recurse<T>(elements: T) -> Vec<char>\n+where\n+    T: Iterator<Item = ()>,\n+{\n+    recurse(IteratorOfWrapped(elements).map(|t| t.0))\n+}\n+\n+fn main() {\n+    recurse(std::iter::empty());\n+}"}, {"sha": "6c04616344f547c4d6ab526ea81f204547d3585c", "filename": "src/test/ui/traits/issue-91949-hangs-on-recursion.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -0,0 +1,25 @@\n+warning: function cannot return without recursing\n+  --> $DIR/issue-91949-hangs-on-recursion.rs:21:1\n+   |\n+LL | / fn recurse<T>(elements: T) -> Vec<char>\n+LL | | where\n+LL | |     T: Iterator<Item = ()>,\n+LL | | {\n+LL | |     recurse(IteratorOfWrapped(elements).map(|t| t.0))\n+   | |     ------------------------------------------------- recursive call site\n+LL | | }\n+   | |_^ cannot return without recursing\n+   |\n+   = note: `#[warn(unconditional_recursion)]` on by default\n+   = help: a `loop` may express intention better if this is on purpose\n+\n+error[E0275]: overflow evaluating the requirement `(): Sized`\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"512\"]` attribute to your crate (`issue_91949_hangs_on_recursion`)\n+   = note: required because of the requirements on the impl of `Iterator` for `std::iter::Empty<()>`\n+   = note: 171 redundant requirements hidden\n+   = note: required because of the requirements on the impl of `Iterator` for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), std::iter::Empty<()>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:25:45: 25:52]>>`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "6487199172e0939faf520c2b473fb88e6309efdb", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -545,7 +545,7 @@ pub fn eq_defaultness(l: Defaultness, r: Defaultness) -> bool {\n pub fn eq_vis(l: &Visibility, r: &Visibility) -> bool {\n     use VisibilityKind::*;\n     match (&l.kind, &r.kind) {\n-        (Public, Public) | (Inherited, Inherited) | (Crate(_), Crate(_)) => true,\n+        (Public, Public) | (Inherited, Inherited) => true,\n         (Restricted { path: l, .. }, Restricted { path: r, .. }) => eq_path(l, r),\n         _ => false,\n     }"}, {"sha": "8816d7d2f1fe2623da86deca3f056547e42d88bf", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -1361,7 +1361,7 @@ pub(crate) fn format_struct_struct(\n \n fn get_bytepos_after_visibility(vis: &ast::Visibility, default_span: Span) -> BytePos {\n     match vis.kind {\n-        ast::VisibilityKind::Crate(..) | ast::VisibilityKind::Restricted { .. } => vis.span.hi(),\n+        ast::VisibilityKind::Restricted { .. } => vis.span.hi(),\n         _ => default_span.lo(),\n     }\n }"}, {"sha": "58fd95c656e799fafccf22f41a52483495c0ce16", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e2f65586366b731f13a10021c5191a664f4adc2/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=9e2f65586366b731f13a10021c5191a664f4adc2", "patch": "@@ -1,7 +1,7 @@\n use std::borrow::Cow;\n \n use rustc_ast::ast::{\n-    self, Attribute, CrateSugar, MetaItem, MetaItemKind, NestedMetaItem, NodeId, Path, Visibility,\n+    self, Attribute, MetaItem, MetaItemKind, NestedMetaItem, NodeId, Path, Visibility,\n     VisibilityKind,\n };\n use rustc_ast::ptr;\n@@ -44,15 +44,7 @@ pub(crate) fn is_same_visibility(a: &Visibility, b: &Visibility) -> bool {\n             VisibilityKind::Restricted { path: q, .. },\n         ) => pprust::path_to_string(p) == pprust::path_to_string(q),\n         (VisibilityKind::Public, VisibilityKind::Public)\n-        | (VisibilityKind::Inherited, VisibilityKind::Inherited)\n-        | (\n-            VisibilityKind::Crate(CrateSugar::PubCrate),\n-            VisibilityKind::Crate(CrateSugar::PubCrate),\n-        )\n-        | (\n-            VisibilityKind::Crate(CrateSugar::JustCrate),\n-            VisibilityKind::Crate(CrateSugar::JustCrate),\n-        ) => true,\n+        | (VisibilityKind::Inherited, VisibilityKind::Inherited) => true,\n         _ => false,\n     }\n }\n@@ -65,8 +57,6 @@ pub(crate) fn format_visibility(\n     match vis.kind {\n         VisibilityKind::Public => Cow::from(\"pub \"),\n         VisibilityKind::Inherited => Cow::from(\"\"),\n-        VisibilityKind::Crate(CrateSugar::PubCrate) => Cow::from(\"pub(crate) \"),\n-        VisibilityKind::Crate(CrateSugar::JustCrate) => Cow::from(\"crate \"),\n         VisibilityKind::Restricted { ref path, .. } => {\n             let Path { ref segments, .. } = **path;\n             let mut segments_iter = segments.iter().map(|seg| rewrite_ident(context, seg.ident));\n@@ -75,7 +65,7 @@ pub(crate) fn format_visibility(\n                     .next()\n                     .expect(\"Non-global path in pub(restricted)?\");\n             }\n-            let is_keyword = |s: &str| s == \"self\" || s == \"super\";\n+            let is_keyword = |s: &str| s == \"crate\" || s == \"self\" || s == \"super\";\n             let path = segments_iter.collect::<Vec<_>>().join(\"::\");\n             let in_str = if is_keyword(&path) { \"\" } else { \"in \" };\n "}]}