{"sha": "63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "node_id": "C_kwDOAAsO6NoAKDYzZjc4ZDE3YjRjMzAyYmNmOTZiYWUzMDZmZmI0MmVlY2IwYTVlNmY", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2022-11-07T00:46:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-07T00:46:25Z"}, "message": "Rollup merge of #103885 - fmease:rustdoc-various-cross-crate-reexport-fixes, r=cjgillot,GuillaumeGomez\n\nrustdoc: various cross-crate reexport fixes\n\nFixes for various smaller cross-crate reexport issues.\nThe PR is split into several commits for easier review. Will be squashed after approval.\n\nMost notable changes:\n\n* We finally render late-bound lifetimes in the generic parameter list of cross-crate functions & methods.\n  Previously, we would display the re-export of `pub fn f<'s>(x: &'s str) {}` as `pub fn f(x: &'s str)`\n* We now render unnamed parameters of cross-crate functions and function pointers as underscores\n  since that's exactly what we do for local definitions, too. Mentioned as a bug in #44306.\n* From now on, the rendering of cross-crate trait-object types is more correct:\n  * `for<>` parameter lists (for higher-ranked lifetimes) are now shown\n  * the return type of `Fn{,Mut,Once}` trait bounds is now displayed\n\nRegarding the last list item, here is a diff for visualization (before vs. after):\n\n```patch\n- dyn FnOnce(&'any str) + 'static\n+ dyn for<'any> FnOnce(&'any str) -> bool + 'static\n```\n\nThe redundant `+ 'static` will be removed in a follow-up PR that will hide trait-object lifetime-bounds if they coincide with [their default](https://doc.rust-lang.org/reference/lifetime-elision.html#default-trait-object-lifetimes) (see [Zulip discussion](https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/clean_middle_ty.3A.20I.20need.20to.20add.20a.20parameter/near/307143097)). `FIXME(fmease)`s were added.\n\n``@rustbot`` label A-cross-crate-reexports\nr? ``@GuillaumeGomez``", "tree": {"sha": "850c2afee8f691ccc11ad863490aa1ebf0178133", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/850c2afee8f691ccc11ad863490aa1ebf0178133"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjaFVhCRBK7hj4Ov3rIwAA5IMIAEqemGSLC6INIaOhqpPOTCmK\nTc7zGzJniXjOyU8mgiXuPuNU2HOHBuhIDwKzWqxPc03oy4hW7EKkeX2Mz4/xacc0\nQcfXeeKOeDD/41RPom0hmDWlUr9l9oz+4YcbyyebTDdqIOfr5OuvnLCGmTrf0pjl\noeh92UVejIPvhF13GYygr/Hv2mW47kflyBi4vnNqKTnky4h/8iaoIHVpYmUK1oHY\n8mHv/tr6aWT2jGY3L04hlmXUzb1IweILAFkwYcKtEj+4fZZOiYtIDihay6ooY6/D\nVrIMgypoOTMS/Ov0eMRcUA8k53SS11KwVsU1nxOVysR67KLVP1Re/SYNjGKV3QY=\n=Eg9S\n-----END PGP SIGNATURE-----\n", "payload": "tree 850c2afee8f691ccc11ad863490aa1ebf0178133\nparent 7eef946fc0e0eff40e588eab77b09b287accbec3\nparent 5ccaed212e111e0850a764c1c090261c0c431413\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1667781985 +0900\ncommitter GitHub <noreply@github.com> 1667781985 +0900\n\nRollup merge of #103885 - fmease:rustdoc-various-cross-crate-reexport-fixes, r=cjgillot,GuillaumeGomez\n\nrustdoc: various cross-crate reexport fixes\n\nFixes for various smaller cross-crate reexport issues.\nThe PR is split into several commits for easier review. Will be squashed after approval.\n\nMost notable changes:\n\n* We finally render late-bound lifetimes in the generic parameter list of cross-crate functions & methods.\n  Previously, we would display the re-export of `pub fn f<'s>(x: &'s str) {}` as `pub fn f(x: &'s str)`\n* We now render unnamed parameters of cross-crate functions and function pointers as underscores\n  since that's exactly what we do for local definitions, too. Mentioned as a bug in #44306.\n* From now on, the rendering of cross-crate trait-object types is more correct:\n  * `for<>` parameter lists (for higher-ranked lifetimes) are now shown\n  * the return type of `Fn{,Mut,Once}` trait bounds is now displayed\n\nRegarding the last list item, here is a diff for visualization (before vs. after):\n\n```patch\n- dyn FnOnce(&'any str) + 'static\n+ dyn for<'any> FnOnce(&'any str) -> bool + 'static\n```\n\nThe redundant `+ 'static` will be removed in a follow-up PR that will hide trait-object lifetime-bounds if they coincide with [their default](https://doc.rust-lang.org/reference/lifetime-elision.html#default-trait-object-lifetimes) (see [Zulip discussion](https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/clean_middle_ty.3A.20I.20need.20to.20add.20a.20parameter/near/307143097)). `FIXME(fmease)`s were added.\n\n``@rustbot`` label A-cross-crate-reexports\nr? ``@GuillaumeGomez``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "html_url": "https://github.com/rust-lang/rust/commit/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eef946fc0e0eff40e588eab77b09b287accbec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eef946fc0e0eff40e588eab77b09b287accbec3", "html_url": "https://github.com/rust-lang/rust/commit/7eef946fc0e0eff40e588eab77b09b287accbec3"}, {"sha": "5ccaed212e111e0850a764c1c090261c0c431413", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ccaed212e111e0850a764c1c090261c0c431413", "html_url": "https://github.com/rust-lang/rust/commit/5ccaed212e111e0850a764c1c090261c0c431413"}], "stats": {"total": 199, "additions": 148, "deletions": 51}, "files": [{"sha": "85bd8446640dd70a8e7428b94de2e1993af163ea", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "patch": "@@ -336,10 +336,7 @@ where\n                 match br {\n                     // We only care about named late bound regions, as we need to add them\n                     // to the 'for<>' section\n-                    ty::BrNamed(_, name) => Some(GenericParamDef {\n-                        name,\n-                        kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n-                    }),\n+                    ty::BrNamed(_, name) => Some(GenericParamDef::lifetime(name)),\n                     _ => None,\n                 }\n             })"}, {"sha": "8a5463c10f210a62f1292e36a37208552f10c8cc", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "patch": "@@ -243,10 +243,19 @@ pub(crate) fn build_external_trait(cx: &mut DocContext<'_>, did: DefId) -> clean\n fn build_external_function<'tcx>(cx: &mut DocContext<'tcx>, did: DefId) -> Box<clean::Function> {\n     let sig = cx.tcx.fn_sig(did);\n \n-    let predicates = cx.tcx.predicates_of(did);\n+    let late_bound_regions = sig.bound_vars().into_iter().filter_map(|var| match var {\n+        ty::BoundVariableKind::Region(ty::BrNamed(_, name)) if name != kw::UnderscoreLifetime => {\n+            Some(clean::GenericParamDef::lifetime(name))\n+        }\n+        _ => None,\n+    });\n+\n+    let predicates = cx.tcx.explicit_predicates_of(did);\n     let (generics, decl) = clean::enter_impl_trait(cx, |cx| {\n         // NOTE: generics need to be cleaned before the decl!\n-        let generics = clean_ty_generics(cx, cx.tcx.generics_of(did), predicates);\n+        let mut generics = clean_ty_generics(cx, cx.tcx.generics_of(did), predicates);\n+        // FIXME: This does not place parameters in source order (late-bound ones come last)\n+        generics.params.extend(late_bound_regions);\n         let decl = clean_fn_decl_from_did_and_sig(cx, Some(did), sig);\n         (generics, decl)\n     });"}, {"sha": "19276b9b187a03e70bdba8a81c69f79c9c69193b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 61, "deletions": 20, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "patch": "@@ -12,7 +12,7 @@ pub(crate) mod utils;\n \n use rustc_ast as ast;\n use rustc_attr as attr;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n@@ -182,10 +182,9 @@ fn clean_poly_trait_ref_with_bindings<'tcx>(\n         .collect_referenced_late_bound_regions(&poly_trait_ref)\n         .into_iter()\n         .filter_map(|br| match br {\n-            ty::BrNamed(_, name) if name != kw::UnderscoreLifetime => Some(GenericParamDef {\n-                name,\n-                kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n-            }),\n+            ty::BrNamed(_, name) if name != kw::UnderscoreLifetime => {\n+                Some(GenericParamDef::lifetime(name))\n+            }\n             _ => None,\n         })\n         .collect();\n@@ -741,10 +740,7 @@ fn clean_ty_generics<'tcx>(\n                             p.get_bound_params()\n                                 .into_iter()\n                                 .flatten()\n-                                .map(|param| GenericParamDef {\n-                                    name: param.0,\n-                                    kind: GenericParamDefKind::Lifetime { outlives: Vec::new() },\n-                                })\n+                                .map(|param| GenericParamDef::lifetime(param.0))\n                                 .collect(),\n                         ));\n                     }\n@@ -957,12 +953,14 @@ fn clean_args_from_types_and_names<'tcx>(\n         values: types\n             .iter()\n             .enumerate()\n-            .map(|(i, ty)| {\n-                let mut name = names.get(i).map_or(kw::Empty, |ident| ident.name);\n-                if name.is_empty() {\n-                    name = kw::Underscore;\n-                }\n-                Argument { name, type_: clean_ty(ty, cx), is_const: false }\n+            .map(|(i, ty)| Argument {\n+                type_: clean_ty(ty, cx),\n+                name: names\n+                    .get(i)\n+                    .map(|ident| ident.name)\n+                    .filter(|ident| !ident.is_empty())\n+                    .unwrap_or(kw::Underscore),\n+                is_const: false,\n             })\n             .collect(),\n     }\n@@ -1024,7 +1022,11 @@ fn clean_fn_decl_from_did_and_sig<'tcx>(\n                 .iter()\n                 .map(|t| Argument {\n                     type_: clean_middle_ty(*t, cx, None),\n-                    name: names.next().map_or(kw::Empty, |i| i.name),\n+                    name: names\n+                        .next()\n+                        .map(|i| i.name)\n+                        .filter(|i| !i.is_empty())\n+                        .unwrap_or(kw::Underscore),\n                     is_const: false,\n                 })\n                 .collect(),\n@@ -1144,12 +1146,25 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n             }\n         }\n         ty::AssocKind::Fn => {\n-            let generics = clean_ty_generics(\n+            let sig = tcx.fn_sig(assoc_item.def_id);\n+\n+            let late_bound_regions = sig.bound_vars().into_iter().filter_map(|var| match var {\n+                ty::BoundVariableKind::Region(ty::BrNamed(_, name))\n+                    if name != kw::UnderscoreLifetime =>\n+                {\n+                    Some(GenericParamDef::lifetime(name))\n+                }\n+                _ => None,\n+            });\n+\n+            let mut generics = clean_ty_generics(\n                 cx,\n                 tcx.generics_of(assoc_item.def_id),\n                 tcx.explicit_predicates_of(assoc_item.def_id),\n             );\n-            let sig = tcx.fn_sig(assoc_item.def_id);\n+            // FIXME: This does not place parameters in source order (late-bound ones come last)\n+            generics.params.extend(late_bound_regions);\n+\n             let mut decl = clean_fn_decl_from_did_and_sig(cx, Some(assoc_item.def_id), sig);\n \n             if assoc_item.fn_has_self_parameter {\n@@ -1281,7 +1296,16 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n                         ..\n                     }) = generics.params.iter_mut().find(|param| &param.name == arg)\n                     {\n-                        param_bounds.extend(mem::take(bounds));\n+                        param_bounds.append(bounds);\n+                    } else if let WherePredicate::RegionPredicate { lifetime: Lifetime(arg), bounds } = &mut pred\n+                    && let Some(GenericParamDef {\n+                        kind: GenericParamDefKind::Lifetime { outlives: param_bounds },\n+                        ..\n+                    }) = generics.params.iter_mut().find(|param| &param.name == arg) {\n+                        param_bounds.extend(bounds.drain(..).map(|bound| match bound {\n+                            GenericBound::Outlives(lifetime) => lifetime,\n+                            _ => unreachable!(),\n+                        }));\n                     } else {\n                         where_predicates.push(pred);\n                     }\n@@ -1653,6 +1677,9 @@ pub(crate) fn clean_middle_ty<'tcx>(\n \n             inline::record_extern_fqn(cx, did, ItemType::Trait);\n \n+            // FIXME(fmease): Hide the trait-object lifetime bound if it coincides with its default\n+            // to partially address #44306. Follow the rules outlined at\n+            // https://doc.rust-lang.org/reference/lifetime-elision.html#default-trait-object-lifetimes\n             let lifetime = clean_middle_region(*reg);\n             let mut bounds = dids\n                 .map(|did| {\n@@ -1680,8 +1707,22 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                 })\n                 .collect();\n \n+            let late_bound_regions: FxIndexSet<_> = obj\n+                .iter()\n+                .flat_map(|pb| pb.bound_vars())\n+                .filter_map(|br| match br {\n+                    ty::BoundVariableKind::Region(ty::BrNamed(_, name))\n+                        if name != kw::UnderscoreLifetime =>\n+                    {\n+                        Some(GenericParamDef::lifetime(name))\n+                    }\n+                    _ => None,\n+                })\n+                .collect();\n+            let late_bound_regions = late_bound_regions.into_iter().collect();\n+\n             let path = external_path(cx, did, false, bindings, substs);\n-            bounds.insert(0, PolyTrait { trait_: path, generic_params: Vec::new() });\n+            bounds.insert(0, PolyTrait { trait_: path, generic_params: late_bound_regions });\n \n             DynTrait(bounds, lifetime)\n         }"}, {"sha": "7d97d2994e460ee3d46ba6d1169032109ea9d245", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "patch": "@@ -51,10 +51,7 @@ pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> ThinVec<WP\n         let Some((bounds, _)) = tybounds.get_mut(ty) else { return true };\n         let bound_params = bound_params\n             .into_iter()\n-            .map(|param| clean::GenericParamDef {\n-                name: param.0,\n-                kind: clean::GenericParamDefKind::Lifetime { outlives: Vec::new() },\n-            })\n+            .map(|param| clean::GenericParamDef::lifetime(param.0))\n             .collect();\n         merge_bounds(cx, bounds, bound_params, trait_did, name, rhs)\n     });\n@@ -99,9 +96,8 @@ pub(crate) fn merge_bounds(\n         let last = trait_ref.trait_.segments.last_mut().expect(\"segments were empty\");\n \n         trait_ref.generic_params.append(&mut bound_params);\n-        // Since the parameters (probably) originate from `tcx.collect_*_late_bound_regions` which\n-        // returns a hash set, sort them alphabetically to guarantee a stable and deterministic\n-        // output (and to fully deduplicate them).\n+        // Sort parameters (likely) originating from a hashset alphabetically to\n+        // produce predictable output (and to allow for full deduplication).\n         trait_ref.generic_params.sort_unstable_by(|p, q| p.name.as_str().cmp(q.name.as_str()));\n         trait_ref.generic_params.dedup_by_key(|p| p.name);\n "}, {"sha": "bbedfdd0eafe09031e5db1a379b62bc8011a0650", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "patch": "@@ -1437,6 +1437,10 @@ pub(crate) struct GenericParamDef {\n }\n \n impl GenericParamDef {\n+    pub(crate) fn lifetime(name: Symbol) -> Self {\n+        Self { name, kind: GenericParamDefKind::Lifetime { outlives: Vec::new() } }\n+    }\n+\n     pub(crate) fn is_synthetic_type_param(&self) -> bool {\n         match self.kind {\n             GenericParamDefKind::Lifetime { .. } | GenericParamDefKind::Const { .. } => false,"}, {"sha": "824d98113c8f3a18ae8aa3ffbb4197a74df499d9", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "patch": "@@ -4,7 +4,7 @@ use crate::clean::render_macro_matchers::render_macro_matcher;\n use crate::clean::{\n     clean_doc_module, clean_middle_const, clean_middle_region, clean_middle_ty, inline, Crate,\n     ExternalCrate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime, Path,\n-    PathSegment, Primitive, PrimitiveType, Type, TypeBinding,\n+    PathSegment, Primitive, PrimitiveType, Term, Type, TypeBinding, TypeBindingKind,\n };\n use crate::core::DocContext;\n use crate::html::format::visibility_to_src_with_space;\n@@ -113,12 +113,12 @@ fn external_generic_args<'tcx>(\n                 ty::Tuple(tys) => tys.iter().map(|t| clean_middle_ty(t, cx, None)).collect::<Vec<_>>().into(),\n                 _ => return GenericArgs::AngleBracketed { args: args.into(), bindings },\n             };\n-        let output = None;\n-        // FIXME(#20299) return type comes from a projection now\n-        // match types[1].kind {\n-        //     ty::Tuple(ref v) if v.is_empty() => None, // -> ()\n-        //     _ => Some(types[1].clean(cx))\n-        // };\n+        let output = bindings.into_iter().next().and_then(|binding| match binding.kind {\n+            TypeBindingKind::Equality { term: Term::Type(ty) } if ty != Type::Tuple(Vec::new()) => {\n+                Some(Box::new(ty))\n+            }\n+            _ => None,\n+        });\n         GenericArgs::Parenthesized { inputs, output }\n     } else {\n         GenericArgs::AngleBracketed { args: args.into(), bindings: bindings.into() }"}, {"sha": "a5c3d35b1b594ec9bcbc3ba401c23d7fccfb4944", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "patch": "@@ -1232,9 +1232,8 @@ impl clean::Arguments {\n     ) -> impl fmt::Display + 'a + Captures<'tcx> {\n         display_fn(move |f| {\n             for (i, input) in self.values.iter().enumerate() {\n-                if !input.name.is_empty() {\n-                    write!(f, \"{}: \", input.name)?;\n-                }\n+                write!(f, \"{}: \", input.name)?;\n+\n                 if f.alternate() {\n                     write!(f, \"{:#}\", input.type_.print(cx))?;\n                 } else {\n@@ -1367,10 +1366,8 @@ impl clean::FnDecl {\n                     args.push_str(\"const \");\n                     args_plain.push_str(\"const \");\n                 }\n-                if !input.name.is_empty() {\n-                    write!(args, \"{}: \", input.name);\n-                    write!(args_plain, \"{}: \", input.name);\n-                }\n+                write!(args, \"{}: \", input.name);\n+                write!(args_plain, \"{}: \", input.name);\n \n                 if f.alternate() {\n                     write!(args, \"{:#}\", input.type_.print(cx));"}, {"sha": "3da19a13e5331ecb3e83dabc2b014f252eb98a01", "filename": "src/test/rustdoc/assoc-consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-consts.rs?ref=63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "patch": "@@ -46,6 +46,7 @@ pub fn f(_: &(ToString + 'static)) {}\n impl Bar {\n     // @has assoc_consts/struct.Bar.html '//*[@id=\"associatedconstant.F\"]' \\\n     //      \"const F: fn(_: &(dyn ToString + 'static))\"\n+    // FIXME(fmease): Hide default lifetime, render \"const F: fn(_: &dyn ToString)\"\n     pub const F: fn(_: &(ToString + 'static)) = f;\n }\n "}, {"sha": "db2491b87b4d64b755027a9c430d3cb7348e3240", "filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.rs?ref=63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "patch": "@@ -33,8 +33,12 @@ extern crate assoc_item_trait_bounds as aux;\n // @snapshot out9 - '//*[@id=\"associatedtype.Out9\"]/*[@class=\"code-header\"]'\n //\n // @has - '//*[@id=\"tymethod.make\"]' \\\n-// \"fn make<F>(F, impl FnMut(&str) -> bool)\\\n+// \"fn make<F>(_: F, _: impl FnMut(&str) -> bool)\\\n // where \\\n //     F: FnOnce(u32) -> String, \\\n //     Self::Out2<()>: Protocol<u8, Q0 = Self::Item, Q1 = ()>\"\n pub use aux::Main;\n+\n+// @has main/trait.Aid.html\n+// @has - '//*[@id=\"associatedtype.Result\"]' \"type Result<'inter: 'src>\"\n+pub use aux::Aid;"}, {"sha": "6644c8e41478914ae08ab0cd84393ec4dba17962", "filename": "src/test/rustdoc/inline_cross/auxiliary/assoc_item_trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds.rs?ref=63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "patch": "@@ -42,5 +42,5 @@ pub trait Helper {\n }\n \n pub trait Aid<'src> {\n-    type Result<'inter>;\n+    type Result<'inter: 'src>;\n }"}, {"sha": "9ac2e3d96debdf3fd12db4b7fea67de8be16becc", "filename": "src/test/rustdoc/inline_cross/auxiliary/dyn_trait.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fdyn_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fdyn_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fdyn_trait.rs?ref=63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "patch": "@@ -0,0 +1,17 @@\n+pub type Ty0 = dyn for<'any> FnOnce(&'any str) -> bool;\n+\n+pub type Ty1<'obj> = dyn std::fmt::Display + 'obj;\n+\n+pub type Ty2 = dyn for<'a, 'r> Container<'r, Item<'a, 'static> = ()>;\n+\n+pub type Ty3<'s> = &'s dyn ToString;\n+\n+pub fn func0(_: &(dyn Fn() + '_)) {}\n+\n+pub fn func1<'func>(_: &(dyn Fn() + 'func)) {}\n+\n+pub trait Container<'r> {\n+    type Item<'a, 'ctx>;\n+}\n+\n+pub trait Shape<'a> {}"}, {"sha": "fa760540e436596d54dc7c359a1ab4112b5333ac", "filename": "src/test/rustdoc/inline_cross/dyn_trait.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Ftest%2Frustdoc%2Finline_cross%2Fdyn_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Ftest%2Frustdoc%2Finline_cross%2Fdyn_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fdyn_trait.rs?ref=63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "patch": "@@ -0,0 +1,31 @@\n+#![crate_name = \"user\"]\n+\n+// aux-crate:dyn_trait=dyn_trait.rs\n+// edition:2021\n+\n+// @has user/type.Ty0.html\n+// @has - '//*[@class=\"item-decl\"]//code' \"dyn for<'any> FnOnce(&'any str) -> bool + 'static\"\n+// FIXME(fmease): Hide default lifetime bound `'static`\n+pub use dyn_trait::Ty0;\n+\n+// @has user/type.Ty1.html\n+// @has - '//*[@class=\"item-decl\"]//code' \"dyn Display + 'obj\"\n+pub use dyn_trait::Ty1;\n+\n+// @has user/type.Ty2.html\n+// @has - '//*[@class=\"item-decl\"]//code' \"dyn for<'a, 'r> Container<'r, Item<'a, 'static> = ()>\"\n+pub use dyn_trait::Ty2;\n+\n+// @has user/type.Ty3.html\n+// @has - '//*[@class=\"item-decl\"]//code' \"&'s (dyn ToString + 's)\"\n+// FIXME(fmease): Hide default lifetime bound, render \"&'s dyn ToString\"\n+pub use dyn_trait::Ty3;\n+\n+// @has user/fn.func0.html\n+// @has - '//pre[@class=\"rust fn\"]' \"func0(_: &dyn Fn())\"\n+// FIXME(fmease): Show placeholder-lifetime bound, render \"func0(_: &(dyn Fn() + '_))\"\n+pub use dyn_trait::func0;\n+\n+// @has user/fn.func1.html\n+// @has - '//pre[@class=\"rust fn\"]' \"func1<'func>(_: &(dyn Fn() + 'func))\"\n+pub use dyn_trait::func1;"}, {"sha": "9c4f646592038e6ec62fe4036f2b47c4aef8f794", "filename": "src/test/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "patch": "@@ -29,7 +29,7 @@ pub use impl_trait_aux::func4;\n // @has impl_trait/fn.func5.html\n // @has - '//pre[@class=\"rust fn\"]' \"func5(\"\n // @has - '//pre[@class=\"rust fn\"]' \"_f: impl for<'any> Fn(&'any str, &'any str) -> bool + for<'r> Other<T<'r> = ()>,\"\n-// @has - '//pre[@class=\"rust fn\"]' \"_a: impl for<'alpha, 'beta> Auxiliary<'alpha, Item<'beta> = fn(&'beta ())>\"\n+// @has - '//pre[@class=\"rust fn\"]' \"_a: impl for<'alpha, 'beta> Auxiliary<'alpha, Item<'beta> = fn(_: &'beta ())>\"\n // @!has - '//pre[@class=\"rust fn\"]' 'where'\n pub use impl_trait_aux::func5;\n "}, {"sha": "c1a98cd57daf8cc66e452bf5fee3991e0e8cacb5", "filename": "src/test/rustdoc/issue-20727.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Ftest%2Frustdoc%2Fissue-20727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f78d17b4c302bcf96bae306ffb42eecb0a5e6f/src%2Ftest%2Frustdoc%2Fissue-20727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-20727.rs?ref=63f78d17b4c302bcf96bae306ffb42eecb0a5e6f", "patch": "@@ -19,6 +19,6 @@ pub mod reexport {\n     // @has - '//*[@class=\"rust trait\"]' 'trait Deref {'\n     // @has - '//*[@class=\"rust trait\"]' 'type Target: ?Sized;'\n     // @has - '//*[@class=\"rust trait\"]' \\\n-    //      \"fn deref(&'a self) -> &'a Self::Target;\"\n+    //      \"fn deref<'a>(&'a self) -> &'a Self::Target;\"\n     pub use issue_20727::Deref;\n }"}]}