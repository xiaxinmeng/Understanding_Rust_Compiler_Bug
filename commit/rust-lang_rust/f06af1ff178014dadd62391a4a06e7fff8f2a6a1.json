{"sha": "f06af1ff178014dadd62391a4a06e7fff8f2a6a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNmFmMWZmMTc4MDE0ZGFkZDYyMzkxYTRhMDZlN2ZmZjhmMmE2YTE=", "commit": {"author": {"name": "Harald Hoyer", "email": "harald@redhat.com", "date": "2019-02-07T15:10:34Z"}, "committer": {"name": "Harald Hoyer", "email": "harald@hoyer.xyz", "date": "2019-02-09T15:04:25Z"}, "message": "impl iter_sources() and iter_chain() for dyn Error\n\nExamples:\n\n```rust\nlet next_error_type_a = err\n    .iter_chain()\n    .filter_map(Error::downcast_ref::<ErrorTypeA>)\n    .next();\n```\n\n```rust\nlet source_root_error = err.iter_chain().last();\n```\n\nCredit for the ErrorIter goes to Tim Diekmann\nhttps://www.reddit.com/r/rust/comments/aj3lpg/is_an_iterator_impl_over_errorsource_possible/", "tree": {"sha": "9588f5e1fda722fdf9f4ef40f28cc3c4265e0881", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9588f5e1fda722fdf9f4ef40f28cc3c4265e0881"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f06af1ff178014dadd62391a4a06e7fff8f2a6a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEExdxr/R5NxsU+Wm67+ko5wcKGHUcFAlxe6/wACgkQ+ko5wcKG\nHUdimAgAw0N9LSlaLw4mQyYu/mO0pkrrxEw3WRxT5cOo1C23wkpBYScwj/0NGkmN\nKLwfA4E/VskDfbIy1EoEEFHgR2kr+xNKPNCZ5vPPbe551P3EK0D6ClaTWmWvlW2Q\nI1k2LkOTRZP2By82c2E02V9OVy5eX3V5RuJWqacBns1zzlE1PlGTM+pncpT0l7Qv\nWBmTDlINVAf0InmEblyPtTknfQv7xOzsp5koTrTfocFrR8P8Zm0rWaoe+Ot15dWj\nUizD5vSMjZJrCeL2QsqQebkH1epyh85Z3j7usKhdsEFeYU3Rj6rTS7KIssLheCQ6\nDMreti9WRBG0rY/HVYcgVNzT2ngTSA==\n=f2Z/\n-----END PGP SIGNATURE-----", "payload": "tree 9588f5e1fda722fdf9f4ef40f28cc3c4265e0881\nparent 825f355c7483746f3a17166f34dfabe3b2df1741\nauthor Harald Hoyer <harald@redhat.com> 1549552234 +0100\ncommitter Harald Hoyer <harald@hoyer.xyz> 1549724665 +0100\n\nimpl iter_sources() and iter_chain() for dyn Error\n\nExamples:\n\n```rust\nlet next_error_type_a = err\n    .iter_chain()\n    .filter_map(Error::downcast_ref::<ErrorTypeA>)\n    .next();\n```\n\n```rust\nlet source_root_error = err.iter_chain().last();\n```\n\nCredit for the ErrorIter goes to Tim Diekmann\nhttps://www.reddit.com/r/rust/comments/aj3lpg/is_an_iterator_impl_over_errorsource_possible/\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f06af1ff178014dadd62391a4a06e7fff8f2a6a1", "html_url": "https://github.com/rust-lang/rust/commit/f06af1ff178014dadd62391a4a06e7fff8f2a6a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f06af1ff178014dadd62391a4a06e7fff8f2a6a1/comments", "author": {"login": "haraldh", "id": 427825, "node_id": "MDQ6VXNlcjQyNzgyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/427825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haraldh", "html_url": "https://github.com/haraldh", "followers_url": "https://api.github.com/users/haraldh/followers", "following_url": "https://api.github.com/users/haraldh/following{/other_user}", "gists_url": "https://api.github.com/users/haraldh/gists{/gist_id}", "starred_url": "https://api.github.com/users/haraldh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haraldh/subscriptions", "organizations_url": "https://api.github.com/users/haraldh/orgs", "repos_url": "https://api.github.com/users/haraldh/repos", "events_url": "https://api.github.com/users/haraldh/events{/privacy}", "received_events_url": "https://api.github.com/users/haraldh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "haraldh", "id": 427825, "node_id": "MDQ6VXNlcjQyNzgyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/427825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/haraldh", "html_url": "https://github.com/haraldh", "followers_url": "https://api.github.com/users/haraldh/followers", "following_url": "https://api.github.com/users/haraldh/following{/other_user}", "gists_url": "https://api.github.com/users/haraldh/gists{/gist_id}", "starred_url": "https://api.github.com/users/haraldh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/haraldh/subscriptions", "organizations_url": "https://api.github.com/users/haraldh/orgs", "repos_url": "https://api.github.com/users/haraldh/repos", "events_url": "https://api.github.com/users/haraldh/events{/privacy}", "received_events_url": "https://api.github.com/users/haraldh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "825f355c7483746f3a17166f34dfabe3b2df1741", "url": "https://api.github.com/repos/rust-lang/rust/commits/825f355c7483746f3a17166f34dfabe3b2df1741", "html_url": "https://github.com/rust-lang/rust/commit/825f355c7483746f3a17166f34dfabe3b2df1741"}], "stats": {"total": 152, "additions": 152, "deletions": 0}, "files": [{"sha": "de27333d28c64dde48509c1372a375d94153042d", "filename": "src/libstd/error.rs", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/f06af1ff178014dadd62391a4a06e7fff8f2a6a1/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06af1ff178014dadd62391a4a06e7fff8f2a6a1/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=f06af1ff178014dadd62391a4a06e7fff8f2a6a1", "patch": "@@ -667,6 +667,158 @@ impl dyn Error {\n             Err(self)\n         }\n     }\n+\n+    /// Returns an iterator starting with the current error and continuing with\n+    /// recursively calling [`source`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(error_iter)]\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct A;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct B(Option<Box<dyn Error + 'static>>);\n+    ///\n+    /// impl fmt::Display for A {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"A\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl fmt::Display for B {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"B\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for A {}\n+    ///\n+    /// impl Error for B {\n+    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    ///         self.0.as_ref().map(|e| e.as_ref())\n+    ///     }\n+    /// }\n+    ///\n+    /// let b = B(Some(Box::new(A)));\n+    ///\n+    /// // let err : Box<Error> = b.into(); // or\n+    /// let err = &b as &(dyn Error);\n+    ///\n+    /// let mut iter = err.iter_chain();\n+    ///\n+    /// assert_eq!(\"B\".to_string(), iter.next().unwrap().to_string());\n+    /// assert_eq!(\"A\".to_string(), iter.next().unwrap().to_string());\n+    /// assert!(iter.next().is_none());\n+    /// assert!(iter.next().is_none());\n+    /// ```\n+    ///\n+    /// [`source`]: trait.Error.html#method.source\n+    #[unstable(feature = \"error_iter\", issue = \"58289\")]\n+    #[inline]\n+    pub fn iter_chain(&self) -> ErrorIter {\n+        ErrorIter {\n+            current: Some(self),\n+        }\n+    }\n+\n+    /// Returns an iterator starting with the [`source`] of this error\n+    /// and continuing with recursively calling [`source`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(error_iter)]\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct A;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct B(Option<Box<dyn Error + 'static>>);\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct C(Option<Box<dyn Error + 'static>>);\n+    ///\n+    /// impl fmt::Display for A {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"A\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl fmt::Display for B {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"B\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl fmt::Display for C {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"C\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for A {}\n+    ///\n+    /// impl Error for B {\n+    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    ///         self.0.as_ref().map(|e| e.as_ref())\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for C {\n+    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    ///         self.0.as_ref().map(|e| e.as_ref())\n+    ///     }\n+    /// }\n+    ///\n+    /// let b = B(Some(Box::new(A)));\n+    /// let c = C(Some(Box::new(b)));\n+    ///\n+    /// // let err : Box<Error> = c.into(); // or\n+    /// let err = &c as &(dyn Error);\n+    ///\n+    /// let mut iter = err.iter_sources();\n+    ///\n+    /// assert_eq!(\"B\".to_string(), iter.next().unwrap().to_string());\n+    /// assert_eq!(\"A\".to_string(), iter.next().unwrap().to_string());\n+    /// assert!(iter.next().is_none());\n+    /// assert!(iter.next().is_none());\n+    /// ```\n+    ///\n+    /// [`source`]: trait.Error.html#method.source\n+    #[inline]\n+    #[unstable(feature = \"error_iter\", issue = \"58289\")]\n+    pub fn iter_sources(&self) -> ErrorIter {\n+        ErrorIter {\n+            current: self.source(),\n+        }\n+    }\n+}\n+\n+/// An iterator over [`Error`]\n+///\n+/// [`Error`]: trait.Error.html\n+#[unstable(feature = \"error_iter\", issue = \"58289\")]\n+#[derive(Copy, Clone, Debug)]\n+pub struct ErrorIter<'a> {\n+    current: Option<&'a (dyn Error + 'static)>,\n+}\n+\n+#[unstable(feature = \"error_iter\", issue = \"58289\")]\n+impl<'a> Iterator for ErrorIter<'a> {\n+    type Item = &'a (dyn Error + 'static);\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        let current = self.current;\n+        self.current = self.current.and_then(Error::source);\n+        current\n+    }\n }\n \n impl dyn Error + Send {"}]}