{"sha": "b51698ad60ecad793ac745be676d3f059bea4b80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MTY5OGFkNjBlY2FkNzkzYWM3NDViZTY3NmQzZjA1OWJlYTRiODA=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-05-01T19:54:55Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-05-01T19:58:46Z"}, "message": "match check: note \"catchall\" patterns in unreachable error\n\nCaught as catchall patterns are:\n\n* unconditional name bindings\n* references to them\n* tuple bindings with catchall elements\n\nFixes #31221.", "tree": {"sha": "5041c36f684223e5af5a8edeb373bf4ee89e6357", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5041c36f684223e5af5a8edeb373bf4ee89e6357"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b51698ad60ecad793ac745be676d3f059bea4b80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b51698ad60ecad793ac745be676d3f059bea4b80", "html_url": "https://github.com/rust-lang/rust/commit/b51698ad60ecad793ac745be676d3f059bea4b80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b51698ad60ecad793ac745be676d3f059bea4b80/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a815a26c8ce70e1aede585827c020d9775a8faf", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a815a26c8ce70e1aede585827c020d9775a8faf", "html_url": "https://github.com/rust-lang/rust/commit/2a815a26c8ce70e1aede585827c020d9775a8faf"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "adc158b323c91bc6a21a4387b4cc37f374efd39a", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b51698ad60ecad793ac745be676d3f059bea4b80/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51698ad60ecad793ac745be676d3f059bea4b80/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=b51698ad60ecad793ac745be676d3f059bea4b80", "patch": "@@ -341,7 +341,15 @@ fn check_arms(cx: &MatchCheckCtxt,\n                         },\n \n                         hir::MatchSource::Normal => {\n-                            span_err!(cx.tcx.sess, pat.span, E0001, \"unreachable pattern\")\n+                            let mut err = struct_span_err!(cx.tcx.sess, pat.span, E0001,\n+                                                           \"unreachable pattern\");\n+                            // if we had a catchall pattern, hint at that\n+                            for row in &seen.0 {\n+                                if pat_is_catchall(&cx.tcx.def_map.borrow(), row[0]) {\n+                                    span_note!(err, row[0].span, \"this pattern matches any value\");\n+                                }\n+                            }\n+                            err.emit();\n                         },\n \n                         hir::MatchSource::TryDesugar => {\n@@ -361,7 +369,18 @@ fn check_arms(cx: &MatchCheckCtxt,\n     }\n }\n \n-fn raw_pat<'a>(p: &'a Pat) -> &'a Pat {\n+/// Checks for common cases of \"catchall\" patterns that may not be intended as such.\n+fn pat_is_catchall(dm: &DefMap, p: &Pat) -> bool {\n+    match p.node {\n+        PatKind::Ident(_, _, None) => pat_is_binding(dm, p),\n+        PatKind::Ident(_, _, Some(ref s)) => pat_is_catchall(dm, &s),\n+        PatKind::Ref(ref s, _) => pat_is_catchall(dm, &s),\n+        PatKind::Tup(ref v) => v.iter().all(|p| pat_is_catchall(dm, &p)),\n+        _ => false\n+    }\n+}\n+\n+fn raw_pat(p: &Pat) -> &Pat {\n     match p.node {\n         PatKind::Ident(_, _, Some(ref s)) => raw_pat(&s),\n         _ => p"}, {"sha": "2b3df9ad1d83b7fe8dc02bb3fff1c65fec2bdfbd", "filename": "src/test/compile-fail/issue-31221.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b51698ad60ecad793ac745be676d3f059bea4b80/src%2Ftest%2Fcompile-fail%2Fissue-31221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b51698ad60ecad793ac745be676d3f059bea4b80/src%2Ftest%2Fcompile-fail%2Fissue-31221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31221.rs?ref=b51698ad60ecad793ac745be676d3f059bea4b80", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Enum {\n+    Var1,\n+    Var2,\n+}\n+\n+fn main() {\n+    use Enum::*;\n+    let s = Var1;\n+    match s {\n+        Var1 => (),\n+        Var3 => (),\n+        //~^ NOTE this pattern matches any value\n+        Var2 => (),\n+        //~^ ERROR unreachable pattern\n+    };\n+    match &s {\n+        &Var1 => (),\n+        &Var3 => (),\n+        //~^ NOTE this pattern matches any value\n+        &Var2 => (),\n+        //~^ ERROR unreachable pattern\n+    };\n+    let t = (Var1, Var1);\n+    match t {\n+        (Var1, b) => (),\n+        (c, d) => (),\n+        //~^ NOTE this pattern matches any value\n+        anything => ()\n+        //~^ ERROR unreachable pattern\n+    };\n+    // `_` need not emit a note, it is pretty obvious already.\n+    let t = (Var1, Var1);\n+    match t {\n+        (Var1, b) => (),\n+        _ => (),\n+        anything => ()\n+        //~^ ERROR unreachable pattern\n+    };\n+}"}]}