{"sha": "30973ccb9041a5035cdb24b382a0d5634ccc9e2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOTczY2NiOTA0MWE1MDM1Y2RiMjRiMzgyYTBkNTYzNGNjYzllMmU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-15T13:17:53Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-16T00:50:28Z"}, "message": "std: allow any sort of string to be Added with +.", "tree": {"sha": "3692360c9ae278a7b8f4ef15d20dc82f57ef305f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3692360c9ae278a7b8f4ef15d20dc82f57ef305f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30973ccb9041a5035cdb24b382a0d5634ccc9e2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30973ccb9041a5035cdb24b382a0d5634ccc9e2e", "html_url": "https://github.com/rust-lang/rust/commit/30973ccb9041a5035cdb24b382a0d5634ccc9e2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30973ccb9041a5035cdb24b382a0d5634ccc9e2e/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee25cf8d75671415e74ff3fe1a3c0ba42e35396a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee25cf8d75671415e74ff3fe1a3c0ba42e35396a", "html_url": "https://github.com/rust-lang/rust/commit/ee25cf8d75671415e74ff3fe1a3c0ba42e35396a"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "0af6ed724e1dafeb66edfb3b3ec24244ecfb42a2", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30973ccb9041a5035cdb24b382a0d5634ccc9e2e/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/30973ccb9041a5035cdb24b382a0d5634ccc9e2e/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=30973ccb9041a5035cdb24b382a0d5634ccc9e2e", "patch": "@@ -370,7 +370,7 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n                     if arg.ends_with(\".rs\") || arg.ends_with(\".rc\") {\n                     (arg.slice_to(arg.len() - 3).to_owned(), copy *arg)\n                 } else {\n-                    (copy *arg, arg + \".rs\")\n+                    (copy *arg, *arg + \".rs\")\n                 };\n                 match compile_crate(filename, copy repl.binary) {\n                     Some(_) => loaded_crates.push(crate),"}, {"sha": "21f747317f4a5f1e5ce9a823b5dd24aed31d8a11", "filename": "src/libstd/str.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/30973ccb9041a5035cdb24b382a0d5634ccc9e2e/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30973ccb9041a5035cdb24b382a0d5634ccc9e2e/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=30973ccb9041a5035cdb24b382a0d5634ccc9e2e", "patch": "@@ -913,10 +913,12 @@ pub mod traits {\n     use cmp::{TotalOrd, Ordering, Less, Equal, Greater, Eq, Ord, Equiv, TotalEq};\n     use super::{Str, eq_slice};\n \n-    impl<'self> Add<&'self str,~str> for ~str {\n+    impl<'self> Add<&'self str,~str> for &'self str {\n         #[inline(always)]\n         fn add(&self, rhs: & &'self str) -> ~str {\n-            self.append((*rhs))\n+            let mut ret = self.to_owned();\n+            ret.push_str(*rhs);\n+            ret\n         }\n     }\n \n@@ -3137,6 +3139,24 @@ mod tests {\n         assert_eq!(\"abc\".char_range_at_reverse(0).next, 0);\n     }\n \n+    #[test]\n+    fn test_add() {\n+        macro_rules! t (\n+            ($s1:expr, $s2:expr, $e:expr) => {\n+                assert_eq!($s1 + $s2, $e);\n+                assert_eq!($s1.to_owned() + $s2, $e);\n+                assert_eq!($s1.to_managed() + $s2, $e);\n+            }\n+        );\n+\n+        t!(\"foo\",  \"bar\", ~\"foobar\");\n+        t!(\"foo\", @\"bar\", ~\"foobar\");\n+        t!(\"foo\", ~\"bar\", ~\"foobar\");\n+        t!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\",  \"\u534eVi\u1ec7t Nam\", ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+        t!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\", @\"\u534eVi\u1ec7t Nam\", ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+        t!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\", ~\"\u534eVi\u1ec7t Nam\", ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+    }\n+\n     #[test]\n     fn test_iterator() {\n         use iterator::*;"}]}