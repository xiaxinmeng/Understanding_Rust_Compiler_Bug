{"sha": "9d9c2c92b834c430f102ea96f65119e37320776e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkOWMyYzkyYjgzNGM0MzBmMTAyZWE5NmY2NTExOWUzNzMyMDc3NmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-19T20:49:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-19T20:49:27Z"}, "message": "Auto merge of #84342 - Dylan-DPC:rollup-5b40142, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #84123 (Introduce CompileMonoItem DepNode)\n - #84126 (Enable sanitizers for x86_64-unknown-linux-musl)\n - #84168 (Lower async fn in traits.)\n - #84256 (doc: use U+2212 for minus sign in floating-point -0.0 remarks)\n - #84291 (fix aliasing violations in thread_local_const_init)\n - #84313 (fix suggestion for unsized function parameters)\n - #84330 (Remove unused footer section)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f6ad6cd563741ad1f0458d28234f06686ccab49a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6ad6cd563741ad1f0458d28234f06686ccab49a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d9c2c92b834c430f102ea96f65119e37320776e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d9c2c92b834c430f102ea96f65119e37320776e", "html_url": "https://github.com/rust-lang/rust/commit/9d9c2c92b834c430f102ea96f65119e37320776e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d9c2c92b834c430f102ea96f65119e37320776e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a6c98e4d6f6338dac2357b9433af8ef2a6ba320", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6c98e4d6f6338dac2357b9433af8ef2a6ba320", "html_url": "https://github.com/rust-lang/rust/commit/1a6c98e4d6f6338dac2357b9433af8ef2a6ba320"}, {"sha": "a23fd1694de044565890faa10125f451b454d67b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a23fd1694de044565890faa10125f451b454d67b", "html_url": "https://github.com/rust-lang/rust/commit/a23fd1694de044565890faa10125f451b454d67b"}], "stats": {"total": 203, "additions": 146, "deletions": 57}, "files": [{"sha": "5fd8f7eb33a1fa882fdc068c3397cdaf0024dec6", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -836,9 +836,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Required(names)))\n             }\n             AssocItemKind::Fn(box FnKind(_, ref sig, ref generics, Some(ref body))) => {\n-                let body_id = self.lower_fn_body_block(i.span, &sig.decl, Some(body));\n-                let (generics, sig) =\n-                    self.lower_method_sig(generics, sig, trait_item_def_id, false, None, i.id);\n+                let asyncness = sig.header.asyncness;\n+                let body_id =\n+                    self.lower_maybe_async_body(i.span, &sig.decl, asyncness, Some(&body));\n+                let (generics, sig) = self.lower_method_sig(\n+                    generics,\n+                    sig,\n+                    trait_item_def_id,\n+                    false,\n+                    asyncness.opt_return_id(),\n+                    i.id,\n+                );\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Provided(body_id)))\n             }\n             AssocItemKind::TyAlias(box TyAliasKind(_, ref generics, ref bounds, ref default)) => {"}, {"sha": "aa54d1ae7b9d118426d9702dac6384725e0b50c4", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -32,8 +32,8 @@\n //! `DepNode` definition happens in the `define_dep_nodes!()` macro. This macro\n //! defines the `DepKind` enum. Each `DepKind` has its own parameters that are\n //! needed at runtime in order to construct a valid `DepNode` fingerprint.\n-//! However, only `CompileCodegenUnit` is constructed explicitly (with\n-//! `make_compile_codegen_unit`).\n+//! However, only `CompileCodegenUnit` and `CompileMonoItem` are constructed\n+//! explicitly (with `make_compile_codegen_unit` cq `make_compile_mono_item`).\n //!\n //! Because the macro sees what parameters a given `DepKind` requires, it can\n //! \"infer\" some properties for each kind of `DepNode`:\n@@ -46,15 +46,17 @@\n //!   `DefId` it was computed from. In other cases, too much information gets\n //!   lost during fingerprint computation.\n //!\n-//! `make_compile_codegen_unit`, together with `DepNode::new()`, ensures that only\n-//! valid `DepNode` instances can be constructed. For example, the API does not\n-//! allow for constructing parameterless `DepNode`s with anything other\n-//! than a zeroed out fingerprint. More generally speaking, it relieves the\n-//! user of the `DepNode` API of having to know how to compute the expected\n-//! fingerprint for a given set of node parameters.\n+//! `make_compile_codegen_unit` and `make_compile_mono_items`, together with\n+//! `DepNode::new()`, ensures that only valid `DepNode` instances can be\n+//! constructed. For example, the API does not allow for constructing\n+//! parameterless `DepNode`s with anything other than a zeroed out fingerprint.\n+//! More generally speaking, it relieves the user of the `DepNode` API of\n+//! having to know how to compute the expected fingerprint for a given set of\n+//! node parameters.\n //!\n //! [dependency graph]: https://rustc-dev-guide.rust-lang.org/query.html\n \n+use crate::mir::mono::MonoItem;\n use crate::ty::TyCtxt;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -175,6 +177,14 @@ pub mod dep_kind {\n         can_reconstruct_query_key: || false,\n     };\n \n+    pub const CompileMonoItem: DepKindStruct = DepKindStruct {\n+        has_params: true,\n+        is_anon: false,\n+        is_eval_always: false,\n+\n+        can_reconstruct_query_key: || false,\n+    };\n+\n     macro_rules! define_query_dep_kinds {\n         ($(\n             [$($attrs:tt)*]\n@@ -251,6 +261,10 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n \n     // WARNING: if `Symbol` is changed, make sure you update `make_compile_codegen_unit` below.\n     [] CompileCodegenUnit(Symbol),\n+\n+    // WARNING: if `MonoItem` is changed, make sure you update `make_compile_mono_item` below.\n+    // Only used by rustc_codegen_cranelift\n+    [] CompileMonoItem(MonoItem),\n ]);\n \n // WARNING: `construct` is generic and does not know that `CompileCodegenUnit` takes `Symbol`s as keys.\n@@ -259,6 +273,12 @@ crate fn make_compile_codegen_unit(tcx: TyCtxt<'_>, name: Symbol) -> DepNode {\n     DepNode::construct(tcx, DepKind::CompileCodegenUnit, &name)\n }\n \n+// WARNING: `construct` is generic and does not know that `CompileMonoItem` takes `MonoItem`s as keys.\n+// Be very careful changing this type signature!\n+crate fn make_compile_mono_item(tcx: TyCtxt<'tcx>, mono_item: &MonoItem<'tcx>) -> DepNode {\n+    DepNode::construct(tcx, DepKind::CompileMonoItem, mono_item)\n+}\n+\n pub type DepNode = rustc_query_system::dep_graph::DepNode<DepKind>;\n \n // We keep a lot of `DepNode`s in memory during compilation. It's not"}, {"sha": "31bea8329587d7469350bd4bc8c550f2a9fbf029", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -12,8 +12,8 @@ pub use rustc_query_system::dep_graph::{\n     SerializedDepNodeIndex, WorkProduct, WorkProductId,\n };\n \n-crate use dep_node::make_compile_codegen_unit;\n pub use dep_node::{label_strs, DepKind, DepNode, DepNodeExt};\n+crate use dep_node::{make_compile_codegen_unit, make_compile_mono_item};\n \n pub type DepGraph = rustc_query_system::dep_graph::DepGraph<DepKind>;\n pub type TaskDeps = rustc_query_system::dep_graph::TaskDeps<DepKind>;"}, {"sha": "92a1094bbcdc1bbdfb3bb7b6953bac7d8574c8a1", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -181,6 +181,11 @@ impl<'tcx> MonoItem<'tcx> {\n         }\n         .map(|hir_id| tcx.hir().span(hir_id))\n     }\n+\n+    // Only used by rustc_codegen_cranelift\n+    pub fn codegen_dep_node(&self, tcx: TyCtxt<'tcx>) -> DepNode {\n+        crate::dep_graph::make_compile_mono_item(tcx, self)\n+    }\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for MonoItem<'tcx> {"}, {"sha": "ee914fa1ba95cfb2cedf993b0a1da6168042dd79", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -438,6 +438,11 @@ macro_rules! define_queries {\n                 try_load_from_on_disk_cache: |_, _| {},\n             };\n \n+            pub const CompileMonoItem: QueryStruct = QueryStruct {\n+                force_from_dep_node: |_, _| false,\n+                try_load_from_on_disk_cache: |_, _| {},\n+            };\n+\n             $(pub const $name: QueryStruct = {\n                 const is_anon: bool = is_anon!([$($modifiers)*]);\n "}, {"sha": "1e2e5766a311bcf8cc6fb67894538ec424a98945", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n@@ -7,6 +7,8 @@ pub fn target() -> Target {\n     base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".to_string());\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n     base.static_position_independent_executables = true;\n+    base.supported_sanitizers =\n+        SanitizerSet::ADDRESS | SanitizerSet::LEAK | SanitizerSet::MEMORY | SanitizerSet::THREAD;\n \n     Target {\n         llvm_target: \"x86_64-unknown-linux-musl\".to_string(),"}, {"sha": "2683e886eeb0f1ebb6664bed44fca837cdb3d6d7", "filename": "compiler/rustc_typeck/src/check/gather_locals.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgather_locals.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -6,20 +6,19 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_middle::ty::Ty;\n use rustc_span::{sym, Span};\n use rustc_trait_selection::traits;\n-use std::mem;\n \n pub(super) struct GatherLocalsVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n     parent_id: hir::HirId,\n     // parameters are special cases of patterns, but we want to handle them as\n     // *distinct* cases. so track when we are hitting a pattern *within* an fn\n     // parameter.\n-    outermost_fn_param_pat: bool,\n+    outermost_fn_param_pat: Option<Span>,\n }\n \n impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n     pub(super) fn new(fcx: &'a FnCtxt<'a, 'tcx>, parent_id: hir::HirId) -> Self {\n-        Self { fcx, parent_id, outermost_fn_param_pat: false }\n+        Self { fcx, parent_id, outermost_fn_param_pat: None }\n     }\n \n     fn assign(&mut self, span: Span, nid: hir::HirId, ty_opt: Option<LocalTy<'tcx>>) -> Ty<'tcx> {\n@@ -92,7 +91,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n-        let old_outermost_fn_param_pat = mem::replace(&mut self.outermost_fn_param_pat, true);\n+        let old_outermost_fn_param_pat = self.outermost_fn_param_pat.replace(param.ty_span);\n         intravisit::walk_param(self, param);\n         self.outermost_fn_param_pat = old_outermost_fn_param_pat;\n     }\n@@ -102,12 +101,12 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n         if let PatKind::Binding(_, _, ident, _) = p.kind {\n             let var_ty = self.assign(p.span, p.hir_id, None);\n \n-            if self.outermost_fn_param_pat {\n+            if let Some(ty_span) = self.outermost_fn_param_pat {\n                 if !self.fcx.tcx.features().unsized_fn_params {\n                     self.fcx.require_type_is_sized(\n                         var_ty,\n                         p.span,\n-                        traits::SizedArgumentType(Some(p.span)),\n+                        traits::SizedArgumentType(Some(ty_span)),\n                     );\n                 }\n             } else {\n@@ -123,7 +122,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n                 var_ty\n             );\n         }\n-        let old_outermost_fn_param_pat = mem::replace(&mut self.outermost_fn_param_pat, false);\n+        let old_outermost_fn_param_pat = self.outermost_fn_param_pat.take();\n         intravisit::walk_pat(self, p);\n         self.outermost_fn_param_pat = old_outermost_fn_param_pat;\n     }"}, {"sha": "84d072b9860e82f59bd32a5c873abd3aec30ebc7", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -807,10 +807,10 @@ mod prim_tuple {}\n ///\n /// Additionally, `f32` can represent some special values:\n ///\n-/// - -0.0: IEEE 754 floating point numbers have a bit that indicates their sign, so -0.0 is a\n-///   possible value. For comparison `-0.0 == +0.0` is true but floating point operations can\n-///   carry the sign bit through arithmetic operations. This means `-1.0 * 0.0` produces -0.0 and\n-///   a negative number rounded to a value smaller than a float can represent also produces -0.0.\n+/// - \u22120.0: IEEE 754 floating point numbers have a bit that indicates their sign, so \u22120.0 is a\n+///   possible value. For comparison \u22120.0 = +0.0, but floating point operations can carry\n+///   the sign bit through arithmetic operations. This means \u22120.0 \u00d7 +0.0 produces \u22120.0 and\n+///   a negative number rounded to a value smaller than a float can represent also produces \u22120.0.\n /// - [\u221e](#associatedconstant.INFINITY) and\n ///   [\u2212\u221e](#associatedconstant.NEG_INFINITY): these result from calculations\n ///   like `1.0 / 0.0`."}, {"sha": "3dcf7e334531fdb3b1c78408aec956b7bb321699", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -217,7 +217,7 @@ macro_rules! __thread_local_inner {\n                         //   so now.\n                         0 => {\n                             $crate::thread::__FastLocalKeyInner::<$t>::register_dtor(\n-                                &VAL as *const _ as *mut u8,\n+                                $crate::ptr::addr_of_mut!(VAL) as *mut u8,\n                                 destroy,\n                             );\n                             STATE = 1;"}, {"sha": "bde0a96f03013d22aeb30a80e8a600a15f252ebc", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -814,6 +814,9 @@ fn supported_sanitizers(\n         \"x86_64-unknown-linux-gnu\" => {\n             common_libs(\"linux\", \"x86_64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])\n         }\n+        \"x86_64-unknown-linux-musl\" => {\n+            common_libs(\"linux\", \"x86_64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])\n+        }\n         _ => Vec::new(),\n     }\n }"}, {"sha": "c50ebf1e6dcce456995f1dc55d54b7deecfc412a", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -110,7 +110,6 @@ crate fn render<T: Print, S: Print>(\n     </nav>\\\n     <section id=\\\"main\\\" class=\\\"content\\\">{content}</section>\\\n     <section id=\\\"search\\\" class=\\\"content hidden\\\"></section>\\\n-    <section class=\\\"footer\\\"></section>\\\n     {after_content}\\\n     <div id=\\\"rustdoc-vars\\\" data-root-path=\\\"{root_path}\\\" data-current-crate=\\\"{krate}\\\" \\\n        data-search-index-js=\\\"{root_path}search-index{suffix}.js\\\" \\"}, {"sha": "e2062e82725c0507fad934ec9f6720dfab28ea71", "filename": "src/test/ui/async-await/async-trait-fn.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -2,6 +2,10 @@\n trait T {\n     async fn foo() {} //~ ERROR functions in traits cannot be declared `async`\n     async fn bar(&self) {} //~ ERROR functions in traits cannot be declared `async`\n+    async fn baz() { //~ ERROR functions in traits cannot be declared `async`\n+        // Nested item must not ICE.\n+        fn a() {}\n+    }\n }\n \n fn main() {}"}, {"sha": "1eb8969a80d20047db21c886240c0dc11aebc73d", "filename": "src/test/ui/async-await/async-trait-fn.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-trait-fn.stderr?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -20,6 +20,22 @@ LL |     async fn bar(&self) {}\n    = note: `async` trait functions are not currently supported\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n-error: aborting due to 2 previous errors\n+error[E0706]: functions in traits cannot be declared `async`\n+  --> $DIR/async-trait-fn.rs:5:5\n+   |\n+LL |       async fn baz() {\n+   |       ^----\n+   |       |\n+   |  _____`async` because of this\n+   | |\n+LL | |         // Nested item must not ICE.\n+LL | |         fn a() {}\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `async` trait functions are not currently supported\n+   = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0706`."}, {"sha": "dea0bb259f5062e95be1a454e8c64fb652422e09", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -9,8 +9,8 @@ LL | fn f(p: Path) { }\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn f(&p: Path) { }\n-   |      ^\n+LL | fn f(p: &Path) { }\n+   |         ^\n \n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/E0277.rs:15:15"}, {"sha": "3631a03938a65972ceecc59c4b1a97258171ab43", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -8,8 +8,8 @@ LL | fn foo(x: dyn Foo) {\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn foo(&x: dyn Foo) {\n-   |        ^\n+LL | fn foo(x: &dyn Foo) {\n+   |           ^\n \n error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n   --> $DIR/feature-gate-unsized_fn_params.rs:24:5"}, {"sha": "0919c2f3a1e0e663f4137e2690f041321775dae7", "filename": "src/test/ui/feature-gates/feature-gate-unsized_locals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_locals.stderr?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -8,8 +8,8 @@ LL | fn f(f: dyn FnOnce()) {}\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn f(&f: dyn FnOnce()) {}\n-   |      ^\n+LL | fn f(f: &dyn FnOnce()) {}\n+   |         ^\n \n error: aborting due to previous error\n "}, {"sha": "82866b355573c5bdb2ce22023d862ff814150521", "filename": "src/test/ui/issues/issue-5883.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Fissues%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Fissues%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -4,9 +4,9 @@ struct Struct {\n     r: dyn A + 'static\n }\n \n-fn new_struct(r: dyn A + 'static)\n-    -> Struct { //~^ ERROR the size for values of type\n-    //~^ ERROR the size for values of type\n+fn new_struct(\n+    r: dyn A + 'static //~ ERROR the size for values of type\n+) -> Struct {          //~ ERROR the size for values of type\n     Struct { r: r }\n }\n "}, {"sha": "de598a70ee06ac471677d071481a6498bba08410", "filename": "src/test/ui/issues/issue-5883.stderr", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5883.stderr?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -1,22 +1,21 @@\n error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-5883.rs:7:15\n+  --> $DIR/issue-5883.rs:8:5\n    |\n-LL | fn new_struct(r: dyn A + 'static)\n-   |               ^ doesn't have a size known at compile-time\n+LL |     r: dyn A + 'static\n+   |     ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn A + 'static)`\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn new_struct(&r: dyn A + 'static)\n-   |               ^\n+LL |     r: &dyn A + 'static\n+   |        ^\n \n error[E0277]: the size for values of type `(dyn A + 'static)` cannot be known at compilation time\n-  --> $DIR/issue-5883.rs:8:8\n+  --> $DIR/issue-5883.rs:9:6\n    |\n-LL |     -> Struct {\n-   |        ^^^^^^ doesn't have a size known at compile-time\n-LL |\n+LL | ) -> Struct {\n+   |      ^^^^^^ doesn't have a size known at compile-time\n LL |     Struct { r: r }\n    |     --------------- this returned value is of type `Struct`\n    |"}, {"sha": "e94877fded78467dc24155ce46e4ccb842ff84ff", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -8,8 +8,8 @@ LL | fn foo(_x: K) {}\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn foo(&_x: K) {}\n-   |        ^\n+LL | fn foo(_x: &K) {}\n+   |            ^\n \n error: aborting due to previous error\n "}, {"sha": "5919a6f7492058988705b4de0d2f85f846115d0a", "filename": "src/test/ui/suggestions/path-by-value.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpath-by-value.stderr?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -9,8 +9,8 @@ LL | fn f(p: Path) { }\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn f(&p: Path) { }\n-   |      ^\n+LL | fn f(p: &Path) { }\n+   |         ^\n \n error: aborting due to previous error\n "}, {"sha": "b8ae88ace02ddded1dfe449a44b204722b67caf6", "filename": "src/test/ui/traits/bound/not-on-bare-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -16,8 +16,8 @@ LL | fn foo(_x: Foo + Send) {\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn foo(&_x: Foo + Send) {\n-   |        ^\n+LL | fn foo(_x: &Foo + Send) {\n+   |            ^\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "2c686c6c2b27113d90ef2e36f2780c9b5a79913b", "filename": "src/test/ui/unsized/unsized-fn-arg.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.fixed?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+#![crate_type=\"lib\"]\n+#![allow(unused)]\n+\n+fn f<T: ?Sized>(t: &T) {}\n+//~^ ERROR the size for values of type `T` cannot be known at compilation time"}, {"sha": "9fc08bd6d3e755d63518a572592ca37ad58de30f", "filename": "src/test/ui/unsized/unsized-fn-arg.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+#![crate_type=\"lib\"]\n+#![allow(unused)]\n+\n+fn f<T: ?Sized>(t: T) {}\n+//~^ ERROR the size for values of type `T` cannot be known at compilation time"}, {"sha": "6b802ddf542d5f9d51cc703bf251a289c3971d1f", "filename": "src/test/ui/unsized/unsized-fn-arg.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.stderr?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/unsized-fn-arg.rs:5:17\n+   |\n+LL | fn f<T: ?Sized>(t: T) {}\n+   |      -          ^ doesn't have a size known at compile-time\n+   |      |\n+   |      this type parameter needs to be `std::marker::Sized`\n+   |\n+   = help: unsized fn params are gated as an unstable feature\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL | fn f<T: ?Sized>(t: &T) {}\n+   |                    ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "5e385f33bee7d42e2833c585291647aa35393ce8", "filename": "src/test/ui/unsized/unsized-tuple-impls.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized-tuple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized-tuple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-tuple-impls.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "previous_filename": "src/test/ui/unsized-tuple-impls.rs"}, {"sha": "54304834d4b2bd6bfd6ce0817c8739d42eb05eda", "filename": "src/test/ui/unsized/unsized.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "previous_filename": "src/test/ui/unsized.rs"}, {"sha": "be4406399fd0f7ba8ebefa0441bc16954d4f3286", "filename": "src/test/ui/unsized/unsized2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized2.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "previous_filename": "src/test/ui/unsized2.rs"}, {"sha": "65efbd6b52070c5ff628aab36b9c41919129cc7f", "filename": "src/test/ui/unsized/unsized3-rpass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized3-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized3-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3-rpass.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "previous_filename": "src/test/ui/unsized3-rpass.rs"}, {"sha": "f5b5d02593155963477ca07a306c15b9bd305550", "filename": "src/test/ui/unsized/unsized3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "previous_filename": "src/test/ui/unsized3.rs"}, {"sha": "bd36008aca044e67b803605cfd3a9e180f4a1ca2", "filename": "src/test/ui/unsized/unsized3.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "previous_filename": "src/test/ui/unsized3.stderr"}, {"sha": "befd2244d975b936ae200c19826de896845d3911", "filename": "src/test/ui/unsized/unsized5.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized5.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "previous_filename": "src/test/ui/unsized5.rs"}, {"sha": "0bfd4565529aa2d599c182b097c30d6d0c4cb7b0", "filename": "src/test/ui/unsized/unsized5.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized5.stderr?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "previous_filename": "src/test/ui/unsized5.stderr"}, {"sha": "79133554d5472ba2097c6cdc724b4188504e76a6", "filename": "src/test/ui/unsized/unsized6.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized6.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "previous_filename": "src/test/ui/unsized6.rs"}, {"sha": "8e5734dffb145abe239c55417493a438f29c969e", "filename": "src/test/ui/unsized/unsized6.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -135,8 +135,8 @@ LL | fn g1<X: ?Sized>(x: X) {}\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn g1<X: ?Sized>(&x: X) {}\n-   |                  ^\n+LL | fn g1<X: ?Sized>(x: &X) {}\n+   |                     ^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:40:22\n@@ -149,8 +149,8 @@ LL | fn g2<X: ?Sized + T>(x: X) {}\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn g2<X: ?Sized + T>(&x: X) {}\n-   |                      ^\n+LL | fn g2<X: ?Sized + T>(x: &X) {}\n+   |                         ^\n \n error: aborting due to 13 previous errors\n ", "previous_filename": "src/test/ui/unsized6.stderr"}, {"sha": "422a784814e9165ca0b4b1af051ddb2896d41041", "filename": "src/test/ui/unsized/unsized7.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized7.rs?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "previous_filename": "src/test/ui/unsized7.rs"}, {"sha": "7dbddd4ed24430579ccc44e484b859a91482cb3a", "filename": "src/test/ui/unsized/unsized7.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftest%2Fui%2Funsized%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized7.stderr?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "previous_filename": "src/test/ui/unsized7.stderr"}, {"sha": "8498c0407808d1b60950894cb8495fca0a30f787", "filename": "src/tools/clippy/tests/ui/crashes/ice-6251.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d9c2c92b834c430f102ea96f65119e37320776e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6251.stderr?ref=9d9c2c92b834c430f102ea96f65119e37320776e", "patch": "@@ -16,8 +16,8 @@ LL | fn bug<T>() -> impl Iterator<Item = [(); { |x: [u8]| x }]> {\n    = help: unsized fn params are gated as an unstable feature\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n-LL | fn bug<T>() -> impl Iterator<Item = [(); { |&x: [u8]| x }]> {\n-   |                                             ^\n+LL | fn bug<T>() -> impl Iterator<Item = [(); { |x: &[u8]| x }]> {\n+   |                                                ^\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/ice-6251.rs:4:54"}]}