{"sha": "d958269fe5afb26ee5026be5bc0cea459593bccf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NTgyNjlmZTVhZmIyNmVlNTAyNmJlNWJjMGNlYTQ1OTU5M2JjY2Y=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-10-07T22:03:26Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-10-30T22:29:44Z"}, "message": "Rename single_char_push_str to single_char_add_str", "tree": {"sha": "8008702d7b6444095cc92d6471f2416b2b888bdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8008702d7b6444095cc92d6471f2416b2b888bdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d958269fe5afb26ee5026be5bc0cea459593bccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d958269fe5afb26ee5026be5bc0cea459593bccf", "html_url": "https://github.com/rust-lang/rust/commit/d958269fe5afb26ee5026be5bc0cea459593bccf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d958269fe5afb26ee5026be5bc0cea459593bccf/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1eb8ceede6538590a39721c65ee2f943ceffe40", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1eb8ceede6538590a39721c65ee2f943ceffe40", "html_url": "https://github.com/rust-lang/rust/commit/c1eb8ceede6538590a39721c65ee2f943ceffe40"}], "stats": {"total": 358, "additions": 166, "deletions": 192}, "files": [{"sha": "27e861b0d3e5eaae7a5d33cddcbf29e7d8abed40", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d958269fe5afb26ee5026be5bc0cea459593bccf/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d958269fe5afb26ee5026be5bc0cea459593bccf/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d958269fe5afb26ee5026be5bc0cea459593bccf", "patch": "@@ -1939,8 +1939,8 @@ Released 2018-09-13\n [`should_assert_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_assert_eq\n [`should_implement_trait`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait\n [`similar_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#similar_names\n+[`single_char_add_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str\n [`single_char_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern\n-[`single_char_push_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_push_str\n [`single_component_path_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_component_path_imports\n [`single_element_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_element_loop\n [`single_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match"}, {"sha": "f2056c72c07f540a3fcd81238329800bcdba521d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d958269fe5afb26ee5026be5bc0cea459593bccf/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d958269fe5afb26ee5026be5bc0cea459593bccf/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d958269fe5afb26ee5026be5bc0cea459593bccf", "patch": "@@ -713,8 +713,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::RESULT_MAP_OR_INTO_OPTION,\n         &methods::SEARCH_IS_SOME,\n         &methods::SHOULD_IMPLEMENT_TRAIT,\n+        &methods::SINGLE_CHAR_ADD_STR,\n         &methods::SINGLE_CHAR_PATTERN,\n-        &methods::SINGLE_CHAR_PUSH_STR,\n         &methods::SKIP_WHILE_NEXT,\n         &methods::STRING_EXTEND_CHARS,\n         &methods::SUSPICIOUS_MAP,\n@@ -1438,8 +1438,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::RESULT_MAP_OR_INTO_OPTION),\n         LintId::of(&methods::SEARCH_IS_SOME),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n+        LintId::of(&methods::SINGLE_CHAR_ADD_STR),\n         LintId::of(&methods::SINGLE_CHAR_PATTERN),\n-        LintId::of(&methods::SINGLE_CHAR_PUSH_STR),\n         LintId::of(&methods::SKIP_WHILE_NEXT),\n         LintId::of(&methods::STRING_EXTEND_CHARS),\n         LintId::of(&methods::SUSPICIOUS_MAP),\n@@ -1631,7 +1631,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::OPTION_MAP_OR_NONE),\n         LintId::of(&methods::RESULT_MAP_OR_INTO_OPTION),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n-        LintId::of(&methods::SINGLE_CHAR_PUSH_STR),\n+        LintId::of(&methods::SINGLE_CHAR_ADD_STR),\n         LintId::of(&methods::STRING_EXTEND_CHARS),\n         LintId::of(&methods::UNNECESSARY_FOLD),\n         LintId::of(&methods::UNNECESSARY_LAZY_EVALUATIONS),"}, {"sha": "89a2db2b76b9f5c8ab8dce418cea7eec5f95acc6", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d958269fe5afb26ee5026be5bc0cea459593bccf/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d958269fe5afb26ee5026be5bc0cea459593bccf/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d958269fe5afb26ee5026be5bc0cea459593bccf", "patch": "@@ -1290,8 +1290,8 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Warns when using `push_str` with a single-character string literal\n-    /// where `push` with a `char` would work fine.\n+    /// **What it does:** Warns when using `push_str`/`insert_str` with a single-character string literal\n+    /// where `push`/`insert` with a `char` would work fine.\n     ///\n     /// **Why is this bad?** It's less clear that we are pushing a single character.\n     ///\n@@ -1300,16 +1300,18 @@ declare_clippy_lint! {\n     /// **Example:**\n     /// ```rust\n     /// let mut string = String::new();\n+    /// string.insert_str(0, \"R\");\n     /// string.push_str(\"R\");\n     /// ```\n     /// Could be written as\n     /// ```rust\n     /// let mut string = String::new();\n+    /// string.insert(0, 'R');\n     /// string.push('R');\n     /// ```\n-    pub SINGLE_CHAR_PUSH_STR,\n+    pub SINGLE_CHAR_ADD_STR,\n     style,\n-    \"`push_str()` used with a single-character string literal as parameter\"\n+    \"`push_str()` or `insert_str()` used with a single-character string literal as parameter\"\n }\n \n declare_clippy_lint! {\n@@ -1390,7 +1392,7 @@ declare_lint_pass!(Methods => [\n     INEFFICIENT_TO_STRING,\n     NEW_RET_NO_SELF,\n     SINGLE_CHAR_PATTERN,\n-    SINGLE_CHAR_PUSH_STR,\n+    SINGLE_CHAR_ADD_STR,\n     SEARCH_IS_SOME,\n     FILTER_NEXT,\n     SKIP_WHILE_NEXT,\n@@ -3248,7 +3250,7 @@ fn lint_single_char_push_string(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args\n         let sugg = format!(\"{}.push({})\", base_string_snippet, extension_string);\n         span_lint_and_sugg(\n             cx,\n-            SINGLE_CHAR_PUSH_STR,\n+            SINGLE_CHAR_ADD_STR,\n             expr.span,\n             \"calling `push_str()` using a single-character string literal\",\n             \"consider using `push` with a character literal\",\n@@ -3268,7 +3270,7 @@ fn lint_single_char_insert_string(cx: &LateContext<'_>, expr: &hir::Expr<'_>, ar\n         let sugg = format!(\"{}.insert({}, {})\", base_string_snippet, pos_arg, extension_string);\n         span_lint_and_sugg(\n             cx,\n-            SINGLE_CHAR_PUSH_STR,\n+            SINGLE_CHAR_ADD_STR,\n             expr.span,\n             \"calling `insert_str()` using a single-character string literal\",\n             \"consider using `insert` with a character literal\","}, {"sha": "b22bb07423874908279a3c72c9b016900ac37f64", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d958269fe5afb26ee5026be5bc0cea459593bccf/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d958269fe5afb26ee5026be5bc0cea459593bccf/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=d958269fe5afb26ee5026be5bc0cea459593bccf", "patch": "@@ -2147,16 +2147,16 @@ vec![\n         module: \"non_expressive_names\",\n     },\n     Lint {\n-        name: \"single_char_pattern\",\n-        group: \"perf\",\n-        desc: \"using a single-character str where a char could be used, e.g., `_.split(\\\"x\\\")`\",\n+        name: \"single_char_add_str\",\n+        group: \"style\",\n+        desc: \"`push_str()` or `insert_str()` used with a single-character string literal as parameter\",\n         deprecation: None,\n         module: \"methods\",\n     },\n     Lint {\n-        name: \"single_char_push_str\",\n-        group: \"style\",\n-        desc: \"`push_str()` used with a single-character string literal as parameter\",\n+        name: \"single_char_pattern\",\n+        group: \"perf\",\n+        desc: \"using a single-character str where a char could be used, e.g., `_.split(\\\"x\\\")`\",\n         deprecation: None,\n         module: \"methods\",\n     },"}, {"sha": "2feba4b8069dc3f774ed57fc703af826701919bf", "filename": "tests/ui/single_char_add_str.fixed", "status": "renamed", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d958269fe5afb26ee5026be5bc0cea459593bccf/tests%2Fui%2Fsingle_char_add_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d958269fe5afb26ee5026be5bc0cea459593bccf/tests%2Fui%2Fsingle_char_add_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_add_str.fixed?ref=d958269fe5afb26ee5026be5bc0cea459593bccf", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![warn(clippy::single_char_push_str)]\n+#![warn(clippy::single_char_add_str)]\n \n macro_rules! get_string {\n     () => {\n@@ -8,6 +8,23 @@ macro_rules! get_string {\n }\n \n fn main() {\n+    // `push_str` tests\n+\n+    let mut string = String::new();\n+    string.push('R');\n+    string.push('\\'');\n+\n+    string.push('u');\n+    string.push_str(\"st\");\n+    string.push_str(\"\");\n+    string.push('\\x52');\n+    string.push('\\u{0052}');\n+    string.push('a');\n+\n+    get_string!().push('\u00f6');\n+\n+    // `insert_str` tests\n+\n     let mut string = String::new();\n     string.insert(0, 'R');\n     string.insert(1, '\\'');", "previous_filename": "tests/ui/single_char_insert_str.fixed"}, {"sha": "681b3d1034584fb14bd7a0b72747f8293fd94916", "filename": "tests/ui/single_char_add_str.rs", "status": "renamed", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d958269fe5afb26ee5026be5bc0cea459593bccf/tests%2Fui%2Fsingle_char_add_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d958269fe5afb26ee5026be5bc0cea459593bccf/tests%2Fui%2Fsingle_char_add_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_add_str.rs?ref=d958269fe5afb26ee5026be5bc0cea459593bccf", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![warn(clippy::single_char_push_str)]\n+#![warn(clippy::single_char_add_str)]\n \n macro_rules! get_string {\n     () => {\n@@ -8,6 +8,23 @@ macro_rules! get_string {\n }\n \n fn main() {\n+    // `push_str` tests\n+\n+    let mut string = String::new();\n+    string.push_str(\"R\");\n+    string.push_str(\"'\");\n+\n+    string.push('u');\n+    string.push_str(\"st\");\n+    string.push_str(\"\");\n+    string.push_str(\"\\x52\");\n+    string.push_str(\"\\u{0052}\");\n+    string.push_str(r##\"a\"##);\n+\n+    get_string!().push_str(\"\u00f6\");\n+\n+    // `insert_str` tests\n+\n     let mut string = String::new();\n     string.insert_str(0, \"R\");\n     string.insert_str(1, \"'\");", "previous_filename": "tests/ui/single_char_insert_str.rs"}, {"sha": "2b17279a56424a97d317bd5af353765abcdc44a4", "filename": "tests/ui/single_char_add_str.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/d958269fe5afb26ee5026be5bc0cea459593bccf/tests%2Fui%2Fsingle_char_add_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d958269fe5afb26ee5026be5bc0cea459593bccf/tests%2Fui%2Fsingle_char_add_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_add_str.stderr?ref=d958269fe5afb26ee5026be5bc0cea459593bccf", "patch": "@@ -0,0 +1,82 @@\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:14:5\n+   |\n+LL |     string.push_str(\"R\");\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('R')`\n+   |\n+   = note: `-D clippy::single-char-add-str` implied by `-D warnings`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:15:5\n+   |\n+LL |     string.push_str(\"'\");\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/'')`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:20:5\n+   |\n+LL |     string.push_str(\"/x52\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/x52')`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:21:5\n+   |\n+LL |     string.push_str(\"/u{0052}\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/u{0052}')`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:22:5\n+   |\n+LL |     string.push_str(r##\"a\"##);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('a')`\n+\n+error: calling `push_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:24:5\n+   |\n+LL |     get_string!().push_str(\"\u00f6\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `get_string!().push('\u00f6')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:29:5\n+   |\n+LL |     string.insert_str(0, \"R\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(0, 'R')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:30:5\n+   |\n+LL |     string.insert_str(1, \"'\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(1, '/'')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:35:5\n+   |\n+LL |     string.insert_str(0, \"/x52\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(0, '/x52')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:36:5\n+   |\n+LL |     string.insert_str(0, \"/u{0052}\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(0, '/u{0052}')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:38:5\n+   |\n+LL |     string.insert_str(x, r##\"a\"##);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(x, 'a')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:40:5\n+   |\n+LL |     string.insert_str(Y, r##\"a\"##);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(Y, 'a')`\n+\n+error: calling `insert_str()` using a single-character string literal\n+  --> $DIR/single_char_add_str.rs:42:5\n+   |\n+LL |     get_string!().insert_str(1, \"?\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `get_string!().insert(1, '?')`\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "3d00c91a2ac24f82d3d3fdd192922a01b5e57997", "filename": "tests/ui/single_char_insert_str.stderr", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c1eb8ceede6538590a39721c65ee2f943ceffe40/tests%2Fui%2Fsingle_char_insert_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1eb8ceede6538590a39721c65ee2f943ceffe40/tests%2Fui%2Fsingle_char_insert_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_insert_str.stderr?ref=c1eb8ceede6538590a39721c65ee2f943ceffe40", "patch": "@@ -1,46 +0,0 @@\n-error: calling `insert_str()` using a single-character string literal\n-  --> $DIR/single_char_insert_str.rs:12:5\n-   |\n-LL |     string.insert_str(0, \"R\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(0, 'R')`\n-   |\n-   = note: `-D clippy::single-char-push-str` implied by `-D warnings`\n-\n-error: calling `insert_str()` using a single-character string literal\n-  --> $DIR/single_char_insert_str.rs:13:5\n-   |\n-LL |     string.insert_str(1, \"'\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(1, '/'')`\n-\n-error: calling `insert_str()` using a single-character string literal\n-  --> $DIR/single_char_insert_str.rs:18:5\n-   |\n-LL |     string.insert_str(0, \"/x52\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(0, '/x52')`\n-\n-error: calling `insert_str()` using a single-character string literal\n-  --> $DIR/single_char_insert_str.rs:19:5\n-   |\n-LL |     string.insert_str(0, \"/u{0052}\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(0, '/u{0052}')`\n-\n-error: calling `insert_str()` using a single-character string literal\n-  --> $DIR/single_char_insert_str.rs:21:5\n-   |\n-LL |     string.insert_str(x, r##\"a\"##);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(x, 'a')`\n-\n-error: calling `insert_str()` using a single-character string literal\n-  --> $DIR/single_char_insert_str.rs:23:5\n-   |\n-LL |     string.insert_str(Y, r##\"a\"##);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `string.insert(Y, 'a')`\n-\n-error: calling `insert_str()` using a single-character string literal\n-  --> $DIR/single_char_insert_str.rs:25:5\n-   |\n-LL |     get_string!().insert_str(1, \"?\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `insert` with a character literal: `get_string!().insert(1, '?')`\n-\n-error: aborting due to 7 previous errors\n-"}, {"sha": "d8b5f19e144dcfd0567610bc8ef6302109125eb3", "filename": "tests/ui/single_char_pattern.fixed", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d958269fe5afb26ee5026be5bc0cea459593bccf/tests%2Fui%2Fsingle_char_pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d958269fe5afb26ee5026be5bc0cea459593bccf/tests%2Fui%2Fsingle_char_pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.fixed?ref=d958269fe5afb26ee5026be5bc0cea459593bccf", "patch": "@@ -12,12 +12,6 @@ fn main() {\n \n     let y = \"x\";\n     x.split(y);\n-    // Not yet testing for multi-byte characters\n-    // Changing `r.len() == 1` to `r.chars().count() == 1` in `lint_clippy::single_char_pattern`\n-    // should have done this but produced an ICE\n-    //\n-    // We may not want to suggest changing these anyway\n-    // See: https://github.com/rust-lang/rust-clippy/issues/650#issuecomment-184328984\n     x.split('\u00df');\n     x.split('\u211d');\n     x.split('\ud83d\udca3');"}, {"sha": "a7bc73e3756dfb13e30925159b237321d296a62c", "filename": "tests/ui/single_char_pattern.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d958269fe5afb26ee5026be5bc0cea459593bccf/tests%2Fui%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d958269fe5afb26ee5026be5bc0cea459593bccf/tests%2Fui%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.rs?ref=d958269fe5afb26ee5026be5bc0cea459593bccf", "patch": "@@ -12,12 +12,6 @@ fn main() {\n \n     let y = \"x\";\n     x.split(y);\n-    // Not yet testing for multi-byte characters\n-    // Changing `r.len() == 1` to `r.chars().count() == 1` in `lint_clippy::single_char_pattern`\n-    // should have done this but produced an ICE\n-    //\n-    // We may not want to suggest changing these anyway\n-    // See: https://github.com/rust-lang/rust-clippy/issues/650#issuecomment-184328984\n     x.split(\"\u00df\");\n     x.split(\"\u211d\");\n     x.split(\"\ud83d\udca3\");"}, {"sha": "ee4e7e50efd17371a24a1eb904a8db47e4b12a27", "filename": "tests/ui/single_char_pattern.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d958269fe5afb26ee5026be5bc0cea459593bccf/tests%2Fui%2Fsingle_char_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d958269fe5afb26ee5026be5bc0cea459593bccf/tests%2Fui%2Fsingle_char_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.stderr?ref=d958269fe5afb26ee5026be5bc0cea459593bccf", "patch": "@@ -7,175 +7,175 @@ LL |     x.split(\"x\");\n    = note: `-D clippy::single-char-pattern` implied by `-D warnings`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:21:13\n+  --> $DIR/single_char_pattern.rs:15:13\n    |\n LL |     x.split(\"\u00df\");\n    |             ^^^ help: try using a `char` instead: `'\u00df'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:22:13\n+  --> $DIR/single_char_pattern.rs:16:13\n    |\n LL |     x.split(\"\u211d\");\n    |             ^^^ help: try using a `char` instead: `'\u211d'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:23:13\n+  --> $DIR/single_char_pattern.rs:17:13\n    |\n LL |     x.split(\"\ud83d\udca3\");\n    |             ^^^^ help: try using a `char` instead: `'\ud83d\udca3'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:26:16\n+  --> $DIR/single_char_pattern.rs:20:16\n    |\n LL |     x.contains(\"x\");\n    |                ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:27:19\n+  --> $DIR/single_char_pattern.rs:21:19\n    |\n LL |     x.starts_with(\"x\");\n    |                   ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:28:17\n+  --> $DIR/single_char_pattern.rs:22:17\n    |\n LL |     x.ends_with(\"x\");\n    |                 ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:29:12\n+  --> $DIR/single_char_pattern.rs:23:12\n    |\n LL |     x.find(\"x\");\n    |            ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:30:13\n+  --> $DIR/single_char_pattern.rs:24:13\n    |\n LL |     x.rfind(\"x\");\n    |             ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:31:14\n+  --> $DIR/single_char_pattern.rs:25:14\n    |\n LL |     x.rsplit(\"x\");\n    |              ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:32:24\n+  --> $DIR/single_char_pattern.rs:26:24\n    |\n LL |     x.split_terminator(\"x\");\n    |                        ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:33:25\n+  --> $DIR/single_char_pattern.rs:27:25\n    |\n LL |     x.rsplit_terminator(\"x\");\n    |                         ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:34:17\n+  --> $DIR/single_char_pattern.rs:28:17\n    |\n LL |     x.splitn(0, \"x\");\n    |                 ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:35:18\n+  --> $DIR/single_char_pattern.rs:29:18\n    |\n LL |     x.rsplitn(0, \"x\");\n    |                  ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:36:15\n+  --> $DIR/single_char_pattern.rs:30:15\n    |\n LL |     x.matches(\"x\");\n    |               ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:37:16\n+  --> $DIR/single_char_pattern.rs:31:16\n    |\n LL |     x.rmatches(\"x\");\n    |                ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:38:21\n+  --> $DIR/single_char_pattern.rs:32:21\n    |\n LL |     x.match_indices(\"x\");\n    |                     ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:39:22\n+  --> $DIR/single_char_pattern.rs:33:22\n    |\n LL |     x.rmatch_indices(\"x\");\n    |                      ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:40:26\n+  --> $DIR/single_char_pattern.rs:34:26\n    |\n LL |     x.trim_start_matches(\"x\");\n    |                          ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:41:24\n+  --> $DIR/single_char_pattern.rs:35:24\n    |\n LL |     x.trim_end_matches(\"x\");\n    |                        ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:43:13\n+  --> $DIR/single_char_pattern.rs:37:13\n    |\n LL |     x.split(\"/n\");\n    |             ^^^^ help: try using a `char` instead: `'/n'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:44:13\n+  --> $DIR/single_char_pattern.rs:38:13\n    |\n LL |     x.split(\"'\");\n    |             ^^^ help: try using a `char` instead: `'/''`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:45:13\n+  --> $DIR/single_char_pattern.rs:39:13\n    |\n LL |     x.split(\"/'\");\n    |             ^^^^ help: try using a `char` instead: `'/''`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:50:31\n+  --> $DIR/single_char_pattern.rs:44:31\n    |\n LL |     x.replace(\";\", \",\").split(\",\"); // issue #2978\n    |                               ^^^ help: try using a `char` instead: `','`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:51:19\n+  --> $DIR/single_char_pattern.rs:45:19\n    |\n LL |     x.starts_with(\"/x03\"); // issue #2996\n    |                   ^^^^^^ help: try using a `char` instead: `'/x03'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:58:13\n+  --> $DIR/single_char_pattern.rs:52:13\n    |\n LL |     x.split(r\"a\");\n    |             ^^^^ help: try using a `char` instead: `'a'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:59:13\n+  --> $DIR/single_char_pattern.rs:53:13\n    |\n LL |     x.split(r#\"a\"#);\n    |             ^^^^^^ help: try using a `char` instead: `'a'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:60:13\n+  --> $DIR/single_char_pattern.rs:54:13\n    |\n LL |     x.split(r###\"a\"###);\n    |             ^^^^^^^^^^ help: try using a `char` instead: `'a'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:61:13\n+  --> $DIR/single_char_pattern.rs:55:13\n    |\n LL |     x.split(r###\"'\"###);\n    |             ^^^^^^^^^^ help: try using a `char` instead: `'/''`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:62:13\n+  --> $DIR/single_char_pattern.rs:56:13\n    |\n LL |     x.split(r###\"#\"###);\n    |             ^^^^^^^^^^ help: try using a `char` instead: `'#'`"}, {"sha": "3c550bee9a38672b9f0cf0b04e181dc0043c449c", "filename": "tests/ui/single_char_push_str.fixed", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c1eb8ceede6538590a39721c65ee2f943ceffe40/tests%2Fui%2Fsingle_char_push_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c1eb8ceede6538590a39721c65ee2f943ceffe40/tests%2Fui%2Fsingle_char_push_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.fixed?ref=c1eb8ceede6538590a39721c65ee2f943ceffe40", "patch": "@@ -1,23 +0,0 @@\n-// run-rustfix\n-#![warn(clippy::single_char_push_str)]\n-\n-macro_rules! get_string {\n-    () => {\n-        String::from(\"Hello world!\")\n-    };\n-}\n-\n-fn main() {\n-    let mut string = String::new();\n-    string.push('R');\n-    string.push('\\'');\n-\n-    string.push('u');\n-    string.push_str(\"st\");\n-    string.push_str(\"\");\n-    string.push('\\x52');\n-    string.push('\\u{0052}');\n-    string.push('a');\n-\n-    get_string!().push('\u00f6');\n-}"}, {"sha": "a8203e6503ef9ebd8610b1796a75d2771f5ebcd7", "filename": "tests/ui/single_char_push_str.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c1eb8ceede6538590a39721c65ee2f943ceffe40/tests%2Fui%2Fsingle_char_push_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1eb8ceede6538590a39721c65ee2f943ceffe40/tests%2Fui%2Fsingle_char_push_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.rs?ref=c1eb8ceede6538590a39721c65ee2f943ceffe40", "patch": "@@ -1,23 +0,0 @@\n-// run-rustfix\n-#![warn(clippy::single_char_push_str)]\n-\n-macro_rules! get_string {\n-    () => {\n-        String::from(\"Hello world!\")\n-    };\n-}\n-\n-fn main() {\n-    let mut string = String::new();\n-    string.push_str(\"R\");\n-    string.push_str(\"'\");\n-\n-    string.push('u');\n-    string.push_str(\"st\");\n-    string.push_str(\"\");\n-    string.push_str(\"\\x52\");\n-    string.push_str(\"\\u{0052}\");\n-    string.push_str(r##\"a\"##);\n-\n-    get_string!().push_str(\"\u00f6\");\n-}"}, {"sha": "d6e6e635cc5356b9d95aa7e30d509e41dcf97b17", "filename": "tests/ui/single_char_push_str.stderr", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c1eb8ceede6538590a39721c65ee2f943ceffe40/tests%2Fui%2Fsingle_char_push_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1eb8ceede6538590a39721c65ee2f943ceffe40/tests%2Fui%2Fsingle_char_push_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_push_str.stderr?ref=c1eb8ceede6538590a39721c65ee2f943ceffe40", "patch": "@@ -1,40 +0,0 @@\n-error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:12:5\n-   |\n-LL |     string.push_str(\"R\");\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('R')`\n-   |\n-   = note: `-D clippy::single-char-push-str` implied by `-D warnings`\n-\n-error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:13:5\n-   |\n-LL |     string.push_str(\"'\");\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/'')`\n-\n-error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:18:5\n-   |\n-LL |     string.push_str(\"/x52\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/x52')`\n-\n-error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:19:5\n-   |\n-LL |     string.push_str(\"/u{0052}\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('/u{0052}')`\n-\n-error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:20:5\n-   |\n-LL |     string.push_str(r##\"a\"##);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `string.push('a')`\n-\n-error: calling `push_str()` using a single-character string literal\n-  --> $DIR/single_char_push_str.rs:22:5\n-   |\n-LL |     get_string!().push_str(\"\u00f6\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `push` with a character literal: `get_string!().push('\u00f6')`\n-\n-error: aborting due to 6 previous errors\n-"}]}