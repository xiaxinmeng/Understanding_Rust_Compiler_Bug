{"sha": "7ef40979157b4117faa52bbe79ec144ebd45b0e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlZjQwOTc5MTU3YjQxMTdmYWE1MmJiZTc5ZWMxNDRlYmQ0NWIwZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-24T14:44:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-24T14:44:13Z"}, "message": "Auto merge of #854 - lzutao:warn-idioms, r=RalfJung\n\nbuild: Warn if not use 2018 idioms\n\nAs requested in https://github.com/rust-lang/miri/pull/852#issuecomment-514612244", "tree": {"sha": "8e00ee517c7db6605a1d39b560a2cd9af37c0131", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e00ee517c7db6605a1d39b560a2cd9af37c0131"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ef40979157b4117faa52bbe79ec144ebd45b0e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ef40979157b4117faa52bbe79ec144ebd45b0e3", "html_url": "https://github.com/rust-lang/rust/commit/7ef40979157b4117faa52bbe79ec144ebd45b0e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ef40979157b4117faa52bbe79ec144ebd45b0e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aadff8560b8b10842f444e00c9d33648b706d97b", "url": "https://api.github.com/repos/rust-lang/rust/commits/aadff8560b8b10842f444e00c9d33648b706d97b", "html_url": "https://github.com/rust-lang/rust/commit/aadff8560b8b10842f444e00c9d33648b706d97b"}, {"sha": "e6a677fe63286dac484714282da7bb873dd2dbd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a677fe63286dac484714282da7bb873dd2dbd3", "html_url": "https://github.com/rust-lang/rust/commit/e6a677fe63286dac484714282da7bb873dd2dbd3"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "e688d3594718607f8d0ac89c5bc40d5f8665d2c3", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ef40979157b4117faa52bbe79ec144ebd45b0e3/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef40979157b4117faa52bbe79ec144ebd45b0e3/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=7ef40979157b4117faa52bbe79ec144ebd45b0e3", "patch": "@@ -179,7 +179,7 @@ pub fn eval_main<'tcx>(\n     };\n \n     // Perform the main execution.\n-    let res: InterpResult = (|| {\n+    let res: InterpResult<'_> = (|| {\n         ecx.run()?;\n         ecx.run_tls_dtors()\n     })();"}, {"sha": "0265fbf15cc5b5af3befd07fe4d7facbdf17464a", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ef40979157b4117faa52bbe79ec144ebd45b0e3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef40979157b4117faa52bbe79ec144ebd45b0e3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=7ef40979157b4117faa52bbe79ec144ebd45b0e3", "patch": "@@ -1,5 +1,6 @@\n #![feature(rustc_private)]\n \n+#![warn(rust_2018_idioms)]\n #![allow(clippy::cast_lossless)]\n \n #[macro_use]"}, {"sha": "0fe42f7974fbdc0a9ccadaf9810f4fdcfb432c6e", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ef40979157b4117faa52bbe79ec144ebd45b0e3/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ef40979157b4117faa52bbe79ec144ebd45b0e3/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=7ef40979157b4117faa52bbe79ec144ebd45b0e3", "patch": "@@ -28,7 +28,7 @@ pub enum Tag {\n }\n \n impl fmt::Debug for Tag {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             Tag::Tagged(id) => write!(f, \"<{}>\", id),\n             Tag::Untagged => write!(f, \"<untagged>\"),\n@@ -62,7 +62,7 @@ pub struct Item {\n }\n \n impl fmt::Debug for Item {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"[{:?} for {:?}\", self.perm, self.tag)?;\n         if let Some(call) = self.protector {\n             write!(f, \" (call {})\", call)?;\n@@ -117,7 +117,7 @@ pub enum AccessKind {\n }\n \n impl fmt::Display for AccessKind {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             AccessKind::Read => write!(f, \"read access\"),\n             AccessKind::Write => write!(f, \"write access\"),\n@@ -139,7 +139,7 @@ pub enum RefKind {\n }\n \n impl fmt::Display for RefKind {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             RefKind::Unique { two_phase: false } => write!(f, \"unique\"),\n             RefKind::Unique { two_phase: true } => write!(f, \"unique (two-phase)\"),"}]}