{"sha": "3dbd9c5489702442831d5600c6aacd27159984d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYmQ5YzU0ODk3MDI0NDI4MzFkNTYwMGM2YWFjZDI3MTU5OTg0ZDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-16T14:16:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-17T00:09:40Z"}, "message": "Rollup merge of #44577 - cuviper:flat_map-fold, r=alexcrichton\n\nCustomize `<FlatMap as Iterator>::fold`\n\n`FlatMap` can use internal iteration for its `fold`, which shows a\nperformance advantage in the new benchmarks:\n\n    test iter::bench_flat_map_chain_ref_sum ... bench:   4,354,111 ns/iter (+/- 108,871)\n    test iter::bench_flat_map_chain_sum     ... bench:     468,167 ns/iter (+/- 2,274)\n    test iter::bench_flat_map_ref_sum       ... bench:     449,616 ns/iter (+/- 6,257)\n    test iter::bench_flat_map_sum           ... bench:     348,010 ns/iter (+/- 1,227)\n\n... where the \"ref\" benches are using `by_ref()` that isn't optimized.\nSo this change shows a decent advantage on its own, but much more when\ncombined with a `chain` iterator that also optimizes `fold`.", "tree": {"sha": "55bd59ed9fc35597d1f1b5ab99adc7d30bf6d600", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55bd59ed9fc35597d1f1b5ab99adc7d30bf6d600"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dbd9c5489702442831d5600c6aacd27159984d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbd9c5489702442831d5600c6aacd27159984d4", "html_url": "https://github.com/rust-lang/rust/commit/3dbd9c5489702442831d5600c6aacd27159984d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dbd9c5489702442831d5600c6aacd27159984d4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c25290d7150ef5be75edf00420f25cbad2280f0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c25290d7150ef5be75edf00420f25cbad2280f0f", "html_url": "https://github.com/rust-lang/rust/commit/c25290d7150ef5be75edf00420f25cbad2280f0f"}, {"sha": "351f56a6034486c38c3b36bfbbd15a81a39ba9aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/351f56a6034486c38c3b36bfbbd15a81a39ba9aa", "html_url": "https://github.com/rust-lang/rust/commit/351f56a6034486c38c3b36bfbbd15a81a39ba9aa"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "827c6354c60baccab3033212df5ec052c0a14df7", "filename": "src/libcore/benches/iter.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3dbd9c5489702442831d5600c6aacd27159984d4/src%2Flibcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbd9c5489702442831d5600c6aacd27159984d4/src%2Flibcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fiter.rs?ref=3dbd9c5489702442831d5600c6aacd27159984d4", "patch": "@@ -146,3 +146,41 @@ fn bench_for_each_chain_ref_fold(b: &mut Bencher) {\n         acc\n     });\n }\n+\n+#[bench]\n+fn bench_flat_map_sum(b: &mut Bencher) {\n+    b.iter(|| -> i64 {\n+        (0i64..1000).flat_map(|x| x..x+1000)\n+            .map(black_box)\n+            .sum()\n+    });\n+}\n+\n+#[bench]\n+fn bench_flat_map_ref_sum(b: &mut Bencher) {\n+    b.iter(|| -> i64 {\n+        (0i64..1000).flat_map(|x| x..x+1000)\n+            .map(black_box)\n+            .by_ref()\n+            .sum()\n+    });\n+}\n+\n+#[bench]\n+fn bench_flat_map_chain_sum(b: &mut Bencher) {\n+    b.iter(|| -> i64 {\n+        (0i64..1000000).flat_map(|x| once(x).chain(once(x)))\n+            .map(black_box)\n+            .sum()\n+    });\n+}\n+\n+#[bench]\n+fn bench_flat_map_chain_ref_sum(b: &mut Bencher) {\n+    b.iter(|| -> i64 {\n+        (0i64..1000000).flat_map(|x| once(x).chain(once(x)))\n+            .map(black_box)\n+            .by_ref()\n+            .sum()\n+    });\n+}"}, {"sha": "a596ffd6ae8fc9caf840b117cc7857ff0bf4e4c3", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3dbd9c5489702442831d5600c6aacd27159984d4/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbd9c5489702442831d5600c6aacd27159984d4/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=3dbd9c5489702442831d5600c6aacd27159984d4", "patch": "@@ -1902,6 +1902,16 @@ impl<I: Iterator, U: IntoIterator, F> Iterator for FlatMap<I, U, F>\n             _ => (lo, None)\n         }\n     }\n+\n+    #[inline]\n+    fn fold<Acc, Fold>(self, init: Acc, mut fold: Fold) -> Acc\n+        where Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        self.frontiter.into_iter()\n+            .chain(self.iter.map(self.f).map(U::into_iter))\n+            .chain(self.backiter)\n+            .fold(init, |acc, iter| iter.fold(acc, &mut fold))\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "59ae30de452c96f9f41ff28cbfbf56779f875502", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3dbd9c5489702442831d5600c6aacd27159984d4/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbd9c5489702442831d5600c6aacd27159984d4/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=3dbd9c5489702442831d5600c6aacd27159984d4", "patch": "@@ -654,6 +654,22 @@ fn test_iterator_flat_map() {\n     assert_eq!(i, ys.len());\n }\n \n+/// Test `FlatMap::fold` with items already picked off the front and back,\n+/// to make sure all parts of the `FlatMap` are folded correctly.\n+#[test]\n+fn test_iterator_flat_map_fold() {\n+    let xs = [0, 3, 6];\n+    let ys = [1, 2, 3, 4, 5, 6, 7];\n+    let mut it = xs.iter().flat_map(|&x| x..x+3);\n+    it.next();\n+    it.next_back();\n+    let i = it.fold(0, |i, x| {\n+        assert_eq!(x, ys[i]);\n+        i + 1\n+    });\n+    assert_eq!(i, ys.len());\n+}\n+\n #[test]\n fn test_inspect() {\n     let xs = [1, 2, 3, 4];"}]}