{"sha": "4ed78f80f4cc3cf32681fce6722293da6c8df76d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZDc4ZjgwZjRjYzNjZjMyNjgxZmNlNjcyMjI5M2RhNmM4ZGY3NmQ=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-12-19T14:43:41Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-12-19T14:43:41Z"}, "message": "Remove TruncateOptions struct", "tree": {"sha": "217f9900f114bdb2298a3c29ab16747d53805ebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/217f9900f114bdb2298a3c29ab16747d53805ebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ed78f80f4cc3cf32681fce6722293da6c8df76d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ed78f80f4cc3cf32681fce6722293da6c8df76d", "html_url": "https://github.com/rust-lang/rust/commit/4ed78f80f4cc3cf32681fce6722293da6c8df76d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ed78f80f4cc3cf32681fce6722293da6c8df76d/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fb25ef43bd96da94467ffa4de8fbf0af82b28d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb25ef43bd96da94467ffa4de8fbf0af82b28d1", "html_url": "https://github.com/rust-lang/rust/commit/4fb25ef43bd96da94467ffa4de8fbf0af82b28d1"}], "stats": {"total": 56, "additions": 24, "deletions": 32}, "files": [{"sha": "2e52a1f5c06a6ba88ea4378c96dd7d4a106b2221", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ed78f80f4cc3cf32681fce6722293da6c8df76d/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed78f80f4cc3cf32681fce6722293da6c8df76d/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=4ed78f80f4cc3cf32681fce6722293da6c8df76d", "patch": "@@ -60,7 +60,4 @@ pub use hir_def::{\n pub use hir_expand::{\n     name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Origin,\n };\n-pub use hir_ty::{\n-    display::{HirDisplay, TruncateOptions},\n-    CallableDef,\n-};\n+pub use hir_ty::{display::HirDisplay, CallableDef};"}, {"sha": "dcca1bace6f3d09f9c501e6883d7af253ee61f56", "filename": "crates/ra_hir_ty/src/display.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4ed78f80f4cc3cf32681fce6722293da6c8df76d/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed78f80f4cc3cf32681fce6722293da6c8df76d/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs?ref=4ed78f80f4cc3cf32681fce6722293da6c8df76d", "patch": "@@ -9,7 +9,8 @@ pub struct HirFormatter<'a, 'b, DB> {\n     fmt: &'a mut fmt::Formatter<'b>,\n     buf: String,\n     curr_size: usize,\n-    truncate_options: Option<&'a TruncateOptions>,\n+    max_size: Option<usize>,\n+    should_display_default_types: bool,\n }\n \n pub trait HirDisplay {\n@@ -19,18 +20,18 @@ pub trait HirDisplay {\n     where\n         Self: Sized,\n     {\n-        HirDisplayWrapper(db, self, None)\n+        HirDisplayWrapper(db, self, None, true)\n     }\n \n     fn display_truncated<'a, DB>(\n         &'a self,\n         db: &'a DB,\n-        truncate_options: &'a TruncateOptions,\n+        max_size: Option<usize>,\n     ) -> HirDisplayWrapper<'a, DB, Self>\n     where\n         Self: Sized,\n     {\n-        HirDisplayWrapper(db, self, Some(truncate_options))\n+        HirDisplayWrapper(db, self, max_size, false)\n     }\n }\n \n@@ -66,24 +67,19 @@ where\n     }\n \n     pub fn should_truncate(&self) -> bool {\n-        if let Some(max_size) = self.truncate_options.and_then(|options| options.max_length) {\n+        if let Some(max_size) = self.max_size {\n             self.curr_size >= max_size\n         } else {\n             false\n         }\n     }\n \n     pub fn should_display_default_types(&self) -> bool {\n-        self.truncate_options.map(|options| options.show_default_types).unwrap_or(true)\n+        self.should_display_default_types\n     }\n }\n \n-pub struct TruncateOptions {\n-    pub max_length: Option<usize>,\n-    pub show_default_types: bool,\n-}\n-\n-pub struct HirDisplayWrapper<'a, DB, T>(&'a DB, &'a T, Option<&'a TruncateOptions>);\n+pub struct HirDisplayWrapper<'a, DB, T>(&'a DB, &'a T, Option<usize>, bool);\n \n impl<'a, DB, T> fmt::Display for HirDisplayWrapper<'a, DB, T>\n where\n@@ -96,7 +92,8 @@ where\n             fmt: f,\n             buf: String::with_capacity(20),\n             curr_size: 0,\n-            truncate_options: self.2,\n+            max_size: self.2,\n+            should_display_default_types: self.3,\n         })\n     }\n }"}, {"sha": "3154df4572731dfce3cf2c27d0ab45c263949e01", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4ed78f80f4cc3cf32681fce6722293da6c8df76d/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed78f80f4cc3cf32681fce6722293da6c8df76d/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=4ed78f80f4cc3cf32681fce6722293da6c8df76d", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use crate::{db::RootDatabase, FileId};\n-use hir::{HirDisplay, SourceAnalyzer, TruncateOptions};\n+use hir::{HirDisplay, SourceAnalyzer};\n use ra_syntax::{\n     ast::{self, AstNode, TypeAscriptionOwner},\n     match_ast, SmolStr, SourceFile, SyntaxKind, SyntaxNode, TextRange,\n@@ -23,11 +23,11 @@ pub(crate) fn inlay_hints(\n     db: &RootDatabase,\n     file_id: FileId,\n     file: &SourceFile,\n-    truncate_options: &TruncateOptions,\n+    max_inlay_hint_length: Option<usize>,\n ) -> Vec<InlayHint> {\n     file.syntax()\n         .descendants()\n-        .map(|node| get_inlay_hints(db, file_id, &node, truncate_options).unwrap_or_default())\n+        .map(|node| get_inlay_hints(db, file_id, &node, max_inlay_hint_length).unwrap_or_default())\n         .flatten()\n         .collect()\n }\n@@ -36,7 +36,7 @@ fn get_inlay_hints(\n     db: &RootDatabase,\n     file_id: FileId,\n     node: &SyntaxNode,\n-    truncate_options: &TruncateOptions,\n+    max_inlay_hint_length: Option<usize>,\n ) -> Option<Vec<InlayHint>> {\n     let analyzer = SourceAnalyzer::new(db, hir::InFile::new(file_id.into(), node), None);\n     match_ast! {\n@@ -46,38 +46,38 @@ fn get_inlay_hints(\n                     return None;\n                 }\n                 let pat = it.pat()?;\n-                Some(get_pat_type_hints(db, &analyzer, pat, false, truncate_options))\n+                Some(get_pat_type_hints(db, &analyzer, pat, false, max_inlay_hint_length))\n             },\n             ast::LambdaExpr(it) => {\n                 it.param_list().map(|param_list| {\n                     param_list\n                         .params()\n                         .filter(|closure_param| closure_param.ascribed_type().is_none())\n                         .filter_map(|closure_param| closure_param.pat())\n-                        .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, false, truncate_options))\n+                        .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, false, max_inlay_hint_length))\n                         .flatten()\n                         .collect()\n                 })\n             },\n             ast::ForExpr(it) => {\n                 let pat = it.pat()?;\n-                Some(get_pat_type_hints(db, &analyzer, pat, false, truncate_options))\n+                Some(get_pat_type_hints(db, &analyzer, pat, false, max_inlay_hint_length))\n             },\n             ast::IfExpr(it) => {\n                 let pat = it.condition()?.pat()?;\n-                Some(get_pat_type_hints(db, &analyzer, pat, true, truncate_options))\n+                Some(get_pat_type_hints(db, &analyzer, pat, true, max_inlay_hint_length))\n             },\n             ast::WhileExpr(it) => {\n                 let pat = it.condition()?.pat()?;\n-                Some(get_pat_type_hints(db, &analyzer, pat, true, truncate_options))\n+                Some(get_pat_type_hints(db, &analyzer, pat, true, max_inlay_hint_length))\n             },\n             ast::MatchArmList(it) => {\n                 Some(\n                     it\n                         .arms()\n                         .map(|match_arm| match_arm.pats())\n                         .flatten()\n-                        .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, true, truncate_options))\n+                        .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, true, max_inlay_hint_length))\n                         .flatten()\n                         .collect(),\n                 )\n@@ -92,7 +92,7 @@ fn get_pat_type_hints(\n     analyzer: &SourceAnalyzer,\n     root_pat: ast::Pat,\n     skip_root_pat_hint: bool,\n-    truncate_options: &TruncateOptions,\n+    max_inlay_hint_length: Option<usize>,\n ) -> Vec<InlayHint> {\n     let original_pat = &root_pat.clone();\n \n@@ -109,7 +109,7 @@ fn get_pat_type_hints(\n         .map(|(range, pat_type)| InlayHint {\n             range,\n             kind: InlayKind::TypeHint,\n-            label: pat_type.display_truncated(db, truncate_options).to_string().into(),\n+            label: pat_type.display_truncated(db, max_inlay_hint_length).to_string().into(),\n         })\n         .collect()\n }"}, {"sha": "779a81b2c0aa0d9ee9a47a02081d05311fa6da8d", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ed78f80f4cc3cf32681fce6722293da6c8df76d/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed78f80f4cc3cf32681fce6722293da6c8df76d/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=4ed78f80f4cc3cf32681fce6722293da6c8df76d", "patch": "@@ -349,10 +349,8 @@ impl Analysis {\n         file_id: FileId,\n         max_inlay_hint_length: Option<usize>,\n     ) -> Cancelable<Vec<InlayHint>> {\n-        let truncate_options =\n-            hir::TruncateOptions { max_length: max_inlay_hint_length, show_default_types: false };\n         self.with_db(|db| {\n-            inlay_hints::inlay_hints(db, file_id, &db.parse(file_id).tree(), &truncate_options)\n+            inlay_hints::inlay_hints(db, file_id, &db.parse(file_id).tree(), max_inlay_hint_length)\n         })\n     }\n "}]}