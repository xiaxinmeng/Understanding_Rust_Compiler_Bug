{"sha": "ff124c6ae8bc34f73431ff938656f8dae9ed5e0d", "node_id": "C_kwDOAAsO6NoAKGZmMTI0YzZhZThiYzM0ZjczNDMxZmY5Mzg2NTZmOGRhZTllZDVlMGQ", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-09-05T23:36:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-05T23:36:05Z"}, "message": "Rollup merge of #101404 - joboet:always_cleanup_stdout, r=joshtriplett\n\nFix cleanup for uninitialized stdout\n\nFixes #101375 by disabling buffering even if the buffer was not initialized yet.", "tree": {"sha": "4dcc3b0b9ba69a5276ea29043b5b3cfc3efa650c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dcc3b0b9ba69a5276ea29043b5b3cfc3efa650c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff124c6ae8bc34f73431ff938656f8dae9ed5e0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjFoflCRBK7hj4Ov3rIwAA0RIIAJz34taULL0YFUcwk+e/Feru\nv7WbTJg1H+TWdU0ZSaRU2pGQj3iSMPqHsdrHM6MdCxRId40z188v6xiYU6GFM/2d\nJVcyyMm0R7OKzLbVsczzbl6qGvIn5s/8Xggq9udTnR1z/EHIC/REItEY0Wvuxuqh\nFmYlA2GwVT0bz8lrupP6mZRb1+oB6ZfLfBdAGLqoOR/r/o01Tha2GU4XjchjMrMM\nl+gjnqzOiuYykBJOsaFaQ5sDvUb1PHB2pw/KwOc8kqnWrsRLgfsEtFv2ydIN9LGG\n9OVMiGVEhGW+P1aZQQKLmcLW9kDAQ6JbuIAo+y7x+g3ZMFeGMx0y1RrBEKVpPEg=\n=gfi9\n-----END PGP SIGNATURE-----\n", "payload": "tree 4dcc3b0b9ba69a5276ea29043b5b3cfc3efa650c\nparent 957b44a13c0a2eccacdbf917bff78eb625b0bd54\nparent 774cadfbfa3a1b0ae3a0f8b142b556124fd552b5\nauthor Yuki Okushi <jtitor@2k36.org> 1662420965 +0900\ncommitter GitHub <noreply@github.com> 1662420965 +0900\n\nRollup merge of #101404 - joboet:always_cleanup_stdout, r=joshtriplett\n\nFix cleanup for uninitialized stdout\n\nFixes #101375 by disabling buffering even if the buffer was not initialized yet.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff124c6ae8bc34f73431ff938656f8dae9ed5e0d", "html_url": "https://github.com/rust-lang/rust/commit/ff124c6ae8bc34f73431ff938656f8dae9ed5e0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff124c6ae8bc34f73431ff938656f8dae9ed5e0d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "957b44a13c0a2eccacdbf917bff78eb625b0bd54", "url": "https://api.github.com/repos/rust-lang/rust/commits/957b44a13c0a2eccacdbf917bff78eb625b0bd54", "html_url": "https://github.com/rust-lang/rust/commit/957b44a13c0a2eccacdbf917bff78eb625b0bd54"}, {"sha": "774cadfbfa3a1b0ae3a0f8b142b556124fd552b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/774cadfbfa3a1b0ae3a0f8b142b556124fd552b5", "html_url": "https://github.com/rust-lang/rust/commit/774cadfbfa3a1b0ae3a0f8b142b556124fd552b5"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "91cff3217d21bce19ad24ebdd7632d66729a91e5", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ff124c6ae8bc34f73431ff938656f8dae9ed5e0d/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff124c6ae8bc34f73431ff938656f8dae9ed5e0d/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=ff124c6ae8bc34f73431ff938656f8dae9ed5e0d", "patch": "@@ -607,15 +607,24 @@ pub fn stdout() -> Stdout {\n     }\n }\n \n+// Flush the data and disable buffering during shutdown\n+// by replacing the line writer by one with zero\n+// buffering capacity.\n pub fn cleanup() {\n-    // Flush the data and disable buffering during shutdown\n-    // by replacing the line writer by one with zero\n-    // buffering capacity.\n-    // We use try_lock() instead of lock(), because someone\n-    // might have leaked a StdoutLock, which would\n-    // otherwise cause a deadlock here.\n-    if let Some(lock) = STDOUT.get().and_then(ReentrantMutex::try_lock) {\n-        *lock.borrow_mut() = LineWriter::with_capacity(0, stdout_raw());\n+    let mut initialized = false;\n+    let stdout = STDOUT.get_or_init(|| {\n+        initialized = true;\n+        ReentrantMutex::new(RefCell::new(LineWriter::with_capacity(0, stdout_raw())))\n+    });\n+\n+    if !initialized {\n+        // The buffer was previously initialized, overwrite it here.\n+        // We use try_lock() instead of lock(), because someone\n+        // might have leaked a StdoutLock, which would\n+        // otherwise cause a deadlock here.\n+        if let Some(lock) = stdout.try_lock() {\n+            *lock.borrow_mut() = LineWriter::with_capacity(0, stdout_raw());\n+        }\n     }\n }\n "}]}