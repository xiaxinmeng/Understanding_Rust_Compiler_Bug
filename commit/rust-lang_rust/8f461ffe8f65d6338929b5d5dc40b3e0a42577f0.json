{"sha": "8f461ffe8f65d6338929b5d5dc40b3e0a42577f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNDYxZmZlOGY2NWQ2MzM4OTI5YjVkNWRjNDBiM2UwYTQyNTc3ZjA=", "commit": {"author": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2021-02-08T10:30:16Z"}, "committer": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2021-02-08T10:30:16Z"}, "message": "Consolidate `fn load_cargo(\u2026)` parameters into `struct LoadCargoConfig {\u00a0\u2026 }`", "tree": {"sha": "d2238e7bb4f0c1d86eeb790bed957f7d222c8332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2238e7bb4f0c1d86eeb790bed957f7d222c8332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f461ffe8f65d6338929b5d5dc40b3e0a42577f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f461ffe8f65d6338929b5d5dc40b3e0a42577f0", "html_url": "https://github.com/rust-lang/rust/commit/8f461ffe8f65d6338929b5d5dc40b3e0a42577f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f461ffe8f65d6338929b5d5dc40b3e0a42577f0/comments", "author": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "committer": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d9c13c7105f0d5287ccb76439214ec536cd1ea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d9c13c7105f0d5287ccb76439214ec536cd1ea4", "html_url": "https://github.com/rust-lang/rust/commit/6d9c13c7105f0d5287ccb76439214ec536cd1ea4"}], "stats": {"total": 101, "additions": 70, "deletions": 31}, "files": [{"sha": "6735b6388cd692c728bcfdf3751694d5fce2b068", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8f461ffe8f65d6338929b5d5dc40b3e0a42577f0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f461ffe8f65d6338929b5d5dc40b3e0a42577f0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=8f461ffe8f65d6338929b5d5dc40b3e0a42577f0", "patch": "@@ -16,7 +16,10 @@ use ide_db::{\n };\n use vfs::AbsPathBuf;\n \n-use crate::cli::{load_cargo::load_cargo, print_memory_usage, Verbosity};\n+use crate::cli::{\n+    load_cargo::{load_cargo, LoadCargoConfig},\n+    print_memory_usage, Verbosity,\n+};\n \n pub struct BenchCmd {\n     pub path: PathBuf,\n@@ -59,12 +62,14 @@ impl BenchCmd {\n \n         let start = Instant::now();\n         eprint!(\"loading: \");\n-        let (mut host, vfs) = load_cargo(\n-            &self.path,\n-            &Default::default(),\n-            self.load_output_dirs,\n-            self.with_proc_macro,\n-        )?;\n+\n+        let load_cargo_config = LoadCargoConfig {\n+            cargo_config: Default::default(),\n+            load_out_dirs_from_check: self.load_output_dirs,\n+            with_proc_macro: self.with_proc_macro,\n+        };\n+\n+        let (mut host, vfs) = load_cargo(&self.path, &load_cargo_config)?;\n         eprintln!(\"{:?}\\n\", start.elapsed());\n \n         let file_id = {"}, {"sha": "3417af687d57ba97796eb3f601a87e5c9adcc00a", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8f461ffe8f65d6338929b5d5dc40b3e0a42577f0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f461ffe8f65d6338929b5d5dc40b3e0a42577f0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=8f461ffe8f65d6338929b5d5dc40b3e0a42577f0", "patch": "@@ -25,8 +25,10 @@ use stdx::format_to;\n use syntax::AstNode;\n \n use crate::cli::{\n-    load_cargo::load_cargo, print_memory_usage, progress_report::ProgressReport, report_metric,\n-    Result, Verbosity,\n+    load_cargo::{load_cargo, LoadCargoConfig},\n+    print_memory_usage,\n+    progress_report::ProgressReport,\n+    report_metric, Result, Verbosity,\n };\n use profile::StopWatch;\n \n@@ -57,12 +59,12 @@ impl AnalysisStatsCmd {\n         };\n \n         let mut db_load_sw = self.stop_watch();\n-        let (host, vfs) = load_cargo(\n-            &self.path,\n-            &Default::default(),\n-            self.load_output_dirs,\n-            self.with_proc_macro,\n-        )?;\n+        let load_cargo_config = LoadCargoConfig {\n+            cargo_config: Default::default(),\n+            load_out_dirs_from_check: self.load_output_dirs,\n+            with_proc_macro: self.with_proc_macro,\n+        };\n+        let (host, vfs) = load_cargo(&self.path, &load_cargo_config)?;\n         let db = host.raw_database();\n         eprintln!(\"{:<20} {}\", \"Database loaded:\", db_load_sw.elapsed());\n "}, {"sha": "c60374c24f1595f2c1efed04674942c052a80014", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8f461ffe8f65d6338929b5d5dc40b3e0a42577f0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f461ffe8f65d6338929b5d5dc40b3e0a42577f0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=8f461ffe8f65d6338929b5d5dc40b3e0a42577f0", "patch": "@@ -10,7 +10,10 @@ use hir::{db::HirDatabase, Crate, Module};\n use ide::{DiagnosticsConfig, Severity};\n use ide_db::base_db::SourceDatabaseExt;\n \n-use crate::cli::{load_cargo::load_cargo, Result};\n+use crate::cli::{\n+    load_cargo::{load_cargo, LoadCargoConfig},\n+    Result,\n+};\n \n fn all_modules(db: &dyn HirDatabase) -> Vec<Module> {\n     let mut worklist: Vec<_> =\n@@ -25,8 +28,17 @@ fn all_modules(db: &dyn HirDatabase) -> Vec<Module> {\n     modules\n }\n \n-pub fn diagnostics(path: &Path, load_output_dirs: bool, with_proc_macro: bool) -> Result<()> {\n-    let (host, _vfs) = load_cargo(path, &Default::default(), load_output_dirs, with_proc_macro)?;\n+pub fn diagnostics(\n+    path: &Path,\n+    load_out_dirs_from_check: bool,\n+    with_proc_macro: bool,\n+) -> Result<()> {\n+    let load_cargo_config = LoadCargoConfig {\n+        cargo_config: Default::default(),\n+        load_out_dirs_from_check,\n+        with_proc_macro,\n+    };\n+    let (host, _vfs) = load_cargo(path, &load_cargo_config)?;\n     let db = host.raw_database();\n     let analysis = host.analysis();\n "}, {"sha": "cc63c6cc2d0dffd3673fd320e4b6dcd1c3c035b9", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8f461ffe8f65d6338929b5d5dc40b3e0a42577f0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f461ffe8f65d6338929b5d5dc40b3e0a42577f0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=8f461ffe8f65d6338929b5d5dc40b3e0a42577f0", "patch": "@@ -13,15 +13,16 @@ use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n \n use crate::reload::{ProjectFolders, SourceRootConfig};\n \n-pub fn load_cargo(\n-    root: &Path,\n-    config: &CargoConfig,\n-    load_out_dirs_from_check: bool,\n-    with_proc_macro: bool,\n-) -> Result<(AnalysisHost, vfs::Vfs)> {\n+pub struct LoadCargoConfig {\n+    pub cargo_config: CargoConfig,\n+    pub load_out_dirs_from_check: bool,\n+    pub with_proc_macro: bool,\n+}\n+\n+pub fn load_cargo(root: &Path, config: &LoadCargoConfig) -> Result<(AnalysisHost, vfs::Vfs)> {\n     let root = AbsPathBuf::assert(std::env::current_dir()?.join(root));\n     let root = ProjectManifest::discover_single(&root)?;\n-    let ws = ProjectWorkspace::load(root, config, &|_| {})?;\n+    let ws = ProjectWorkspace::load(root, &config.cargo_config, &|_| {})?;\n \n     let (sender, receiver) = unbounded();\n     let mut vfs = vfs::Vfs::default();\n@@ -31,14 +32,14 @@ pub fn load_cargo(\n         Box::new(loader)\n     };\n \n-    let proc_macro_client = if with_proc_macro {\n+    let proc_macro_client = if config.with_proc_macro {\n         let path = std::env::current_exe()?;\n         Some(ProcMacroClient::extern_process(path, &[\"proc-macro\"]).unwrap())\n     } else {\n         None\n     };\n \n-    let build_data = if load_out_dirs_from_check {\n+    let build_data = if config.load_out_dirs_from_check {\n         let mut collector = BuildDataCollector::default();\n         ws.collect_build_data_configs(&mut collector);\n         Some(collector.collect(&|_| {})?)\n@@ -117,7 +118,13 @@ mod tests {\n     #[test]\n     fn test_loading_rust_analyzer() {\n         let path = Path::new(env!(\"CARGO_MANIFEST_DIR\")).parent().unwrap().parent().unwrap();\n-        let (host, _vfs) = load_cargo(path, &Default::default(), false, false).unwrap();\n+        let load_cargo_config = LoadCargoConfig {\n+            cargo_config: Default::default(),\n+            load_out_dirs_from_check: false,\n+            with_proc_macro: false,\n+        };\n+\n+        let (host, _vfs) = load_cargo(path, &load_cargo_config).unwrap();\n         let n_crates = Crate::all(host.raw_database()).len();\n         // RA has quite a few crates, but the exact count doesn't matter\n         assert!(n_crates > 20);"}, {"sha": "8729ff0d9f6308afdd45515105a3fb6f3c4e5d65", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8f461ffe8f65d6338929b5d5dc40b3e0a42577f0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f461ffe8f65d6338929b5d5dc40b3e0a42577f0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=8f461ffe8f65d6338929b5d5dc40b3e0a42577f0", "patch": "@@ -1,11 +1,19 @@\n //! Applies structured search replace rules from the command line.\n \n-use crate::cli::{load_cargo::load_cargo, Result};\n+use crate::cli::{\n+    load_cargo::{load_cargo, LoadCargoConfig},\n+    Result,\n+};\n use ssr::{MatchFinder, SsrPattern, SsrRule};\n \n pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n     use ide_db::base_db::SourceDatabaseExt;\n-    let (host, vfs) = load_cargo(&std::env::current_dir()?, &Default::default(), true, true)?;\n+    let load_cargo_config = LoadCargoConfig {\n+        cargo_config: Default::default(),\n+        load_out_dirs_from_check: true,\n+        with_proc_macro: true,\n+    };\n+    let (host, vfs) = load_cargo(&std::env::current_dir()?, &load_cargo_config)?;\n     let db = host.raw_database();\n     let mut match_finder = MatchFinder::at_first_file(db)?;\n     for rule in rules {\n@@ -28,7 +36,12 @@ pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n pub fn search_for_patterns(patterns: Vec<SsrPattern>, debug_snippet: Option<String>) -> Result<()> {\n     use ide_db::base_db::SourceDatabaseExt;\n     use ide_db::symbol_index::SymbolsDatabase;\n-    let (host, _vfs) = load_cargo(&std::env::current_dir()?, &Default::default(), true, true)?;\n+    let load_cargo_config = LoadCargoConfig {\n+        cargo_config: Default::default(),\n+        load_out_dirs_from_check: true,\n+        with_proc_macro: true,\n+    };\n+    let (host, _vfs) = load_cargo(&std::env::current_dir()?, &load_cargo_config)?;\n     let db = host.raw_database();\n     let mut match_finder = MatchFinder::at_first_file(db)?;\n     for pattern in patterns {"}]}