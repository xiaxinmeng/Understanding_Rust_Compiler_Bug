{"sha": "9299e6915d0dec6282dd4a45a4551d94b9ad9790", "node_id": "C_kwDOAAsO6NoAKDkyOTllNjkxNWQwZGVjNjI4MmRkNGE0NWE0NTUxZDk0YjlhZDk3OTA", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-05-03T10:33:10Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-05-03T10:37:52Z"}, "message": "Round timeouts up to infinite in futex_wait on DragonFlyBSD.", "tree": {"sha": "3702bc4733717e6068719e806d2de906b5aca760", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3702bc4733717e6068719e806d2de906b5aca760"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9299e6915d0dec6282dd4a45a4551d94b9ad9790", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9299e6915d0dec6282dd4a45a4551d94b9ad9790", "html_url": "https://github.com/rust-lang/rust/commit/9299e6915d0dec6282dd4a45a4551d94b9ad9790", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9299e6915d0dec6282dd4a45a4551d94b9ad9790/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ee9b93c4f5b6a7f035540c2e4a151232cd1c6cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee9b93c4f5b6a7f035540c2e4a151232cd1c6cf", "html_url": "https://github.com/rust-lang/rust/commit/8ee9b93c4f5b6a7f035540c2e4a151232cd1c6cf"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "678c6f0d6ead1b6ab299a196ba10974517d551d1", "filename": "library/std/src/sys/unix/futex.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9299e6915d0dec6282dd4a45a4551d94b9ad9790/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9299e6915d0dec6282dd4a45a4551d94b9ad9790/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffutex.rs?ref=9299e6915d0dec6282dd4a45a4551d94b9ad9790", "patch": "@@ -185,16 +185,15 @@ pub fn futex_wake_all(futex: &AtomicU32) {\n #[cfg(target_os = \"dragonfly\")]\n pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {\n     use crate::convert::TryFrom;\n+\n+    // A timeout of 0 means infinite.\n+    // We round smaller timeouts up to 1 millisecond.\n+    // Overflows are rounded up to an infinite timeout.\n+    let timeout_ms =\n+        timeout.and_then(|d| Some(i32::try_from(d.as_millis()).ok()?.max(1))).unwrap_or(0);\n+\n     let r = unsafe {\n-        libc::umtx_sleep(\n-            futex as *const AtomicU32 as *const i32,\n-            expected as i32,\n-            // A timeout of 0 means infinite, so we round smaller timeouts up to 1 millisecond.\n-            // Timeouts larger than i32::MAX milliseconds saturate.\n-            timeout.map_or(0, |d| {\n-                i32::try_from(d.as_millis()).map_or(i32::MAX, |millis| millis.max(1))\n-            }),\n-        )\n+        libc::umtx_sleep(futex as *const AtomicU32 as *const i32, expected as i32, timeout_ms)\n     };\n \n     r == 0 || super::os::errno() != libc::ETIMEDOUT"}]}