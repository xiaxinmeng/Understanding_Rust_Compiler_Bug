{"sha": "a69a2acfba1c09d2ca47f454ecff7b571c324d57", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2OWEyYWNmYmExYzA5ZDJjYTQ3ZjQ1NGVjZmY3YjU3MWMzMjRkNTc=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-02-21T06:46:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-11T22:38:55Z"}, "message": "rt/core: port os::list_dir to rust ref #4812", "tree": {"sha": "d3b952b31d20c922ef23871a0c2d84d09c944910", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3b952b31d20c922ef23871a0c2d84d09c944910"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a69a2acfba1c09d2ca47f454ecff7b571c324d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a69a2acfba1c09d2ca47f454ecff7b571c324d57", "html_url": "https://github.com/rust-lang/rust/commit/a69a2acfba1c09d2ca47f454ecff7b571c324d57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a69a2acfba1c09d2ca47f454ecff7b571c324d57/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53db6c7e2a11764a806e87c7268d31288fa9171d", "url": "https://api.github.com/repos/rust-lang/rust/commits/53db6c7e2a11764a806e87c7268d31288fa9171d", "html_url": "https://github.com/rust-lang/rust/commit/53db6c7e2a11764a806e87c7268d31288fa9171d"}], "stats": {"total": 260, "additions": 174, "deletions": 86}, "files": [{"sha": "7f293b98e24a921e5b75e17a83af38c6d8ef9f25", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=a69a2acfba1c09d2ca47f454ecff7b571c324d57", "patch": "@@ -534,6 +534,7 @@ pub mod types {\n \n                 pub type LPCWSTR = *WCHAR;\n                 pub type LPCSTR = *CHAR;\n+                pub type LPCTSTR = *CHAR;\n                 pub type LPTCH = *CHAR;\n \n                 pub type LPWSTR = *mut WCHAR;\n@@ -793,6 +794,7 @@ pub mod consts {\n \n             pub const ERROR_SUCCESS : int = 0;\n             pub const ERROR_INSUFFICIENT_BUFFER : int = 122;\n+            pub const INVALID_HANDLE_VALUE: int = -1;\n         }\n     }\n \n@@ -1116,6 +1118,7 @@ pub mod funcs {\n         pub mod string {\n             use libc::types::common::c95::c_void;\n             use libc::types::os::arch::c95::{c_char, c_int, size_t};\n+            use libc::types::os::arch::c95::{wchar_t};\n \n             pub extern {\n                 unsafe fn strcpy(dst: *c_char, src: *c_char) -> *c_char;\n@@ -1139,6 +1142,7 @@ pub mod funcs {\n                 unsafe fn strtok(s: *c_char, t: *c_char) -> *c_char;\n                 unsafe fn strxfrm(s: *c_char, ct: *c_char, n: size_t)\n                                -> size_t;\n+                unsafe fn wcslen(buf: *wchar_t) -> size_t;\n \n                 // These are fine to execute on the Rust stack. They must be,\n                 // in fact, because LLVM generates calls to them!\n@@ -1382,9 +1386,28 @@ pub mod funcs {\n             use libc::types::os::arch::c95::{c_char, c_int, c_long};\n \n             pub extern {\n+                // default bindings for opendir and readdir in\n+                // non-macos unix\n+                #[cfg(target_os = \"linux\")]\n+                #[cfg(target_os = \"android\")]\n+                #[cfg(target_os = \"freebsd\")]\n                 unsafe fn opendir(dirname: *c_char) -> *DIR;\n-                unsafe fn closedir(dirp: *DIR) -> c_int;\n+                #[cfg(target_os = \"linux\")]\n+                #[cfg(target_os = \"android\")]\n+                #[cfg(target_os = \"freebsd\")]\n                 unsafe fn readdir(dirp: *DIR) -> *dirent_t;\n+                // on OSX (particularly when running with a\n+                // 64bit kernel), we have an issue where there\n+                // are separate bindings for opendir and readdir,\n+                // which we have to explicitly link, as below.\n+                #[cfg(target_os = \"macos\")]\n+                #[link_name = \"opendir$INODE64\"]\n+                unsafe fn opendir(dirname: *c_char) -> *DIR;\n+                #[cfg(target_os = \"macos\")]\n+                #[link_name = \"readdir$INODE64\"]\n+                unsafe fn readdir(dirp: *DIR) -> *dirent_t;\n+\n+                unsafe fn closedir(dirp: *DIR) -> c_int;\n                 unsafe fn rewinddir(dirp: *DIR);\n                 unsafe fn seekdir(dirp: *DIR, loc: c_long);\n                 unsafe fn telldir(dirp: *DIR) -> c_long;\n@@ -1597,6 +1620,7 @@ pub mod funcs {\n             use libc::types::os::arch::extra::{BOOL, DWORD, HMODULE};\n             use libc::types::os::arch::extra::{LPCWSTR, LPWSTR, LPTCH};\n             use libc::types::os::arch::extra::{LPSECURITY_ATTRIBUTES};\n+            use libc::types::os::arch::extra::{HANDLE};\n \n             #[abi = \"stdcall\"]\n             pub extern {\n@@ -1626,6 +1650,13 @@ pub mod funcs {\n                 unsafe fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;\n \n                 unsafe fn GetLastError() -> DWORD;\n+                unsafe fn FindFirstFileW(fileName: *u16,\n+                                        findFileData: HANDLE)\n+                    -> HANDLE;\n+                unsafe fn FindNextFileW(findFile: HANDLE,\n+                                       findFileData: HANDLE)\n+                    -> BOOL;\n+                unsafe fn FindClose(findFile: HANDLE) -> BOOL;\n             }\n         }\n "}, {"sha": "24d5df7140ed572bb64cfa56f335218148efba8b", "filename": "src/libcore/os.rs", "status": "modified", "additions": 88, "deletions": 8, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=a69a2acfba1c09d2ca47f454ecff7b571c324d57", "patch": "@@ -58,10 +58,8 @@ pub mod rustrt {\n     pub extern {\n         unsafe fn rust_get_argc() -> c_int;\n         unsafe fn rust_get_argv() -> **c_char;\n-        unsafe fn rust_getcwd() -> ~str;\n         unsafe fn rust_path_is_dir(path: *libc::c_char) -> c_int;\n         unsafe fn rust_path_exists(path: *libc::c_char) -> c_int;\n-        unsafe fn rust_list_files2(&&path: ~str) -> ~[~str];\n         unsafe fn rust_process_wait(handle: c_int) -> c_int;\n         unsafe fn rust_set_exit_status(code: libc::intptr_t);\n     }\n@@ -670,13 +668,95 @@ pub fn make_dir(p: &Path, mode: c_int) -> bool {\n #[allow(non_implicitly_copyable_typarams)]\n pub fn list_dir(p: &Path) -> ~[~str] {\n     unsafe {\n-        #[cfg(unix)]\n-        fn star(p: &Path) -> Path { copy *p }\n-\n+        #[cfg(target_os = \"linux\")]\n+        #[cfg(target_os = \"android\")]\n+        #[cfg(target_os = \"freebsd\")]\n+        #[cfg(target_os = \"macos\")]\n+        unsafe fn get_list(p: &Path) -> ~[~str] {\n+            use libc::{DIR, dirent_t};\n+            use libc::{opendir, readdir, closedir};\n+            extern mod rustrt {\n+                unsafe fn rust_list_dir_val(ptr: *dirent_t)\n+                    -> *libc::c_char;\n+            }\n+            let input = p.to_str();\n+            let mut strings = ~[];\n+            let input_ptr = ::cast::transmute(&input[0]);\n+            log(debug, \"os::list_dir -- BEFORE OPENDIR\");\n+            let dir_ptr = opendir(input_ptr);\n+            if (dir_ptr as uint != 0) {\n+\t\tlog(debug, \"os::list_dir -- opendir() SUCCESS\");\n+                let mut entry_ptr = readdir(dir_ptr);\n+                while (entry_ptr as uint != 0) {\n+                    strings.push(\n+                        str::raw::from_c_str(\n+                            rustrt::rust_list_dir_val(\n+                                entry_ptr)));\n+                    entry_ptr = readdir(dir_ptr);\n+                }\n+                closedir(dir_ptr);\n+            }\n+            else {\n+\t\tlog(debug, \"os::list_dir -- opendir() FAILURE\");\n+            }\n+            log(debug, fmt!(\"os::list_dir -- AFTER ITERATION -- # of results: %?\", strings.len()));\n+            strings\n+        }\n         #[cfg(windows)]\n-        fn star(p: &Path) -> Path { p.push(\"*\") }\n-\n-        do rustrt::rust_list_files2(star(p).to_str()).filtered |filename| {\n+        unsafe fn get_list(p: &Path) -> ~[~str] {\n+            use libc::types::os::arch::extra::{LPCTSTR, HANDLE, BOOL};\n+            use libc::consts::os::extra::INVALID_HANDLE_VALUE;\n+            use libc::wcslen;\n+            use libc::funcs::extra::kernel32::{\n+                FindFirstFileW,\n+                FindNextFileW,\n+                FindClose,\n+            };\n+            use os::win32::{\n+                as_utf16_p\n+            };\n+            use private::exchange_alloc::{malloc_raw, free_raw};\n+            #[nolink]\n+            extern mod rustrt {\n+                unsafe fn rust_list_dir_wfd_size() -> libc::size_t;\n+                unsafe fn rust_list_dir_wfd_fp_buf(wfd: *libc::c_void)\n+                    -> *u16;\n+            }\n+            fn star(p: &Path) -> Path { p.push(\"*\") }\n+            do as_utf16_p(star(p).to_str()) |path_ptr| {\n+                let mut strings = ~[];\n+                let wfd_ptr = malloc_raw(\n+                    rustrt::rust_list_dir_wfd_size() as uint);\n+                let find_handle =\n+                    FindFirstFileW(\n+                        path_ptr,\n+                        ::cast::transmute(wfd_ptr));\n+                if find_handle as int != INVALID_HANDLE_VALUE {\n+                    let mut more_files = 1 as libc::c_int;\n+                    while more_files != 0 {\n+                        let fp_buf = rustrt::rust_list_dir_wfd_fp_buf(\n+                            wfd_ptr);\n+                        if fp_buf as uint == 0 {\n+                            fail!(~\"os::list_dir() failure:\"+\n+                                  ~\" got null ptr from wfd\");\n+                        }\n+                        else {\n+                            let fp_vec = vec::from_buf(\n+                                fp_buf, wcslen(fp_buf) as uint);\n+                            let fp_str = str::from_utf16(fp_vec);\n+                            strings.push(fp_str);\n+                        }\n+                        more_files = FindNextFileW(\n+                            find_handle,\n+                            ::cast::transmute(wfd_ptr));\n+                    }\n+                    FindClose(find_handle);\n+                    free_raw(wfd_ptr);\n+                }\n+                strings\n+            }\n+        }\n+        do get_list(p).filtered |filename| {\n             *filename != ~\".\" && *filename != ~\"..\"\n         }\n     }"}, {"sha": "9f8ddc92a7728cc2c4c0eb40586fa93041b45d8a", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=a69a2acfba1c09d2ca47f454ecff7b571c324d57", "patch": "@@ -18,9 +18,9 @@ use sys;\n \n #[cfg(test)] use vec;\n #[cfg(test)] use str;\n-#[cfg(test)] use uint;\n-#[cfg(test)] use debug;\n #[cfg(notest)] use cmp::{Eq, Ord};\n+use debug;\n+use uint;\n \n pub mod libc_ {\n     use libc::c_void;\n@@ -504,6 +504,7 @@ pub mod ptr_tests {\n     }\n     #[test]\n     #[should_fail]\n+    #[ignore(cfg(windows))]\n     pub fn test_ptr_array_each_with_len_null_ptr() {\n         unsafe {\n             ptr::array_each_with_len(0 as **libc::c_char, 1, |e| {\n@@ -513,6 +514,7 @@ pub mod ptr_tests {\n     }\n     #[test]\n     #[should_fail]\n+    #[ignore(cfg(windows))]\n     pub fn test_ptr_array_each_null_ptr() {\n         unsafe {\n             ptr::array_each(0 as **libc::c_char, |e| {"}, {"sha": "3b4d86ba86b422ae6d60e04dcd3bb7c2ac0100e1", "filename": "src/libcore/unstable/exchange_alloc.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Flibcore%2Funstable%2Fexchange_alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Flibcore%2Funstable%2Fexchange_alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fexchange_alloc.rs?ref=a69a2acfba1c09d2ca47f454ecff7b571c324d57", "patch": "@@ -41,6 +41,17 @@ pub unsafe fn malloc(td: *TypeDesc, size: uint) -> *c_void {\n         return transmute(box);\n     }\n }\n+/**\n+Thin wrapper around libc::malloc, none of the box header\n+stuff in exchange_alloc::malloc\n+*/\n+pub unsafe fn malloc_raw(size: uint) -> *c_void {\n+    let p = c_malloc(size as size_t);\n+    if p.is_null() {\n+        fail!(~\"Failure in malloc_raw: result ptr is null\");\n+    }\n+    p\n+}\n \n pub unsafe fn free(ptr: *c_void) {\n     let exchange_count = &mut *rust_get_exchange_count_ptr();\n@@ -49,6 +60,10 @@ pub unsafe fn free(ptr: *c_void) {\n     fail_unless!(ptr.is_not_null());\n     c_free(ptr);\n }\n+///Thin wrapper around libc::free, as with exchange_alloc::malloc_raw\n+pub unsafe fn free_raw(ptr: *c_void) {\n+    c_free(ptr);\n+}\n \n fn get_box_size(body_size: uint, body_align: uint) -> uint {\n     let header_size = size_of::<BoxHeaderRepr>();"}, {"sha": "a621d61cdf792ec75613784462f940d9fe8148cd", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=a69a2acfba1c09d2ca47f454ecff7b571c324d57", "patch": "@@ -247,49 +247,43 @@ debug_get_stk_seg() {\n     return task->stk;\n }\n \n-extern \"C\" CDECL rust_vec_box*\n-rust_list_files(rust_str *path) {\n-    rust_task *task = rust_get_current_task();\n-    array_list<rust_str*> strings;\n+extern \"C\" CDECL char*\n #if defined(__WIN32__)\n-    WIN32_FIND_DATA FindFileData;\n-    HANDLE hFind = FindFirstFile((char*)path->body.data, &FindFileData);\n-    if (hFind != INVALID_HANDLE_VALUE) {\n-        do {\n-            rust_str *str = make_str(task->kernel, FindFileData.cFileName,\n-                                     strlen(FindFileData.cFileName),\n-                                     \"list_files_str\");\n-            strings.push(str);\n-        } while (FindNextFile(hFind, &FindFileData));\n-        FindClose(hFind);\n-    }\n+rust_list_dir_val(WIN32_FIND_DATA* entry_ptr) {\n+    return entry_ptr->cFileName;\n+}\n #else\n-    DIR *dirp = opendir((char*)path->body.data);\n-  if (dirp) {\n-      struct dirent *dp;\n-      while ((dp = readdir(dirp))) {\n-          rust_vec_box *str = make_str(task->kernel, dp->d_name,\n-                                       strlen(dp->d_name),\n-                                       \"list_files_str\");\n-          strings.push(str);\n-      }\n-      closedir(dirp);\n-  }\n+rust_list_dir_val(dirent* entry_ptr) {\n+    return entry_ptr->d_name;\n+}\n #endif\n \n-  rust_vec_box *vec = (rust_vec_box *)\n-      task->kernel->malloc(vec_size<rust_vec_box*>(strings.size()),\n-                           \"list_files_vec\");\n-  size_t alloc_sz = sizeof(rust_vec*) * strings.size();\n-  vec->body.fill = vec->body.alloc = alloc_sz;\n-  memcpy(&vec->body.data[0], strings.data(), alloc_sz);\n-  return vec;\n+extern \"C\" CDECL size_t\n+#if defined(__WIN32__)\n+rust_list_dir_wfd_size() {\n+    return sizeof(WIN32_FIND_DATAW);\n+}\n+#else\n+rust_list_dir_wfd_size() {\n+    return 0;\n }\n+#endif\n \n-extern \"C\" CDECL rust_vec_box*\n-rust_list_files2(rust_str **path) {\n-    return rust_list_files(*path);\n+extern \"C\" CDECL void*\n+#if defined(__WIN32__)\n+rust_list_dir_wfd_fp_buf(WIN32_FIND_DATAW* wfd) {\n+    if(wfd == NULL) {\n+        return 0;\n+    }\n+    else {\n+        return wfd->cFileName;\n+    }\n }\n+#else\n+rust_list_dir_wfd_fp_buf(void* wfd) {\n+    return 0;\n+}\n+#endif\n \n extern \"C\" CDECL int\n rust_path_is_dir(char *path) {"}, {"sha": "101d04c8804752f80f8150e58d220486c78fab8b", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=a69a2acfba1c09d2ca47f454ecff7b571c324d57", "patch": "@@ -79,38 +79,6 @@ inline void reserve_vec_exact(rust_vec_box** vpp,\n \n typedef rust_vec_box rust_str;\n \n-inline rust_str *\n-make_str(rust_kernel* kernel, const char* c, size_t strlen,\n-         const char* name) {\n-    size_t str_fill = strlen + 1;\n-    size_t str_alloc = str_fill;\n-    rust_str *str = (rust_str *)\n-        kernel->malloc(vec_size<char>(str_fill), name);\n-    str->header.td = &str_body_tydesc;\n-    str->body.fill = str_fill;\n-    str->body.alloc = str_alloc;\n-    memcpy(&str->body.data, c, strlen);\n-    str->body.data[strlen] = '\\0';\n-    return str;\n-}\n-\n-inline rust_vec_box *\n-make_str_vec(rust_kernel* kernel, size_t nstrs, char **strs) {\n-    rust_vec_box *v = (rust_vec_box *)\n-        kernel->malloc(vec_size<rust_vec_box*>(nstrs),\n-                       \"str vec interior\");\n-    // FIXME: should have a real td (Issue #2639)\n-    v->header.td = NULL;\n-    v->body.fill = v->body.alloc = sizeof(rust_vec_box*) * nstrs;\n-    for (size_t i = 0; i < nstrs; ++i) {\n-        rust_str *str = make_str(kernel, strs[i],\n-                                 strlen(strs[i]),\n-                                 \"str\");\n-        ((rust_str**)&v->body.data)[i] = str;\n-    }\n-    return v;\n-}\n-\n inline size_t get_box_size(size_t body_size, size_t body_align) {\n     size_t header_size = sizeof(rust_opaque_box);\n     // FIXME (#2699): This alignment calculation is suspicious. Is it right?"}, {"sha": "284f827bc753a83b46a87e805343665b6092c507", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=a69a2acfba1c09d2ca47f454ecff7b571c324d57", "patch": "@@ -32,8 +32,9 @@ rust_path_exists\n rust_get_stdin\n rust_get_stdout\n rust_get_stderr\n-rust_list_files\n-rust_list_files2\n+rust_list_dir_val\n+rust_list_dir_wfd_size\n+rust_list_dir_wfd_fp_buf\n rust_log_console_on\n rust_log_console_off\n rust_process_wait"}, {"sha": "fa6f59999f84c9721705e8aff43d362ce80db4d0", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=a69a2acfba1c09d2ca47f454ecff7b571c324d57", "patch": "@@ -112,8 +112,8 @@ mod test_foreign_items {\n         #[abi = \"cdecl\"]\n         pub extern {\n             #[cfg(bogus)]\n-            pub fn rust_getcwd() -> ~str;\n-            pub fn rust_getcwd() -> ~str;\n+            pub fn rust_get_stdin() -> ~str;\n+            pub fn rust_get_stdin() -> ~str;\n         }\n     }\n }"}, {"sha": "7e0b4b47846e08a57f1ea81e45504a7b2d410276", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69a2acfba1c09d2ca47f454ecff7b571c324d57/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=a69a2acfba1c09d2ca47f454ecff7b571c324d57", "patch": "@@ -17,7 +17,6 @@ mod rustrt {\n \n         pub fn rust_get_sched_id() -> libc::intptr_t;\n         pub fn rust_get_argc() -> libc::c_int;\n-        pub fn rust_getcwd() -> ~str;\n         pub fn get_task_id() -> libc::intptr_t;\n         pub fn rust_sched_threads();\n         pub fn rust_get_task();\n@@ -26,7 +25,6 @@ mod rustrt {\n \n fn calllink01() { unsafe { rustrt::rust_get_sched_id(); } }\n fn calllink02() { unsafe { rustrt::rust_get_argc(); } }\n-fn calllink03() { unsafe { rustrt::rust_getcwd(); } }\n fn calllink08() { unsafe { rustrt::get_task_id(); } }\n fn calllink09() { unsafe { rustrt::rust_sched_threads(); } }\n fn calllink10() { unsafe { rustrt::rust_get_task(); } }\n@@ -59,7 +57,6 @@ pub fn main() {\n     let fns = ~[\n         calllink01,\n         calllink02,\n-        calllink03,\n         calllink08,\n         calllink09,\n         calllink10"}]}