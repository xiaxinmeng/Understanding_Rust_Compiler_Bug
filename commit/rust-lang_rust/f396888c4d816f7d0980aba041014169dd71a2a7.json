{"sha": "f396888c4d816f7d0980aba041014169dd71a2a7", "node_id": "C_kwDOAAsO6NoAKGYzOTY4ODhjNGQ4MTZmN2QwOTgwYWJhMDQxMDE0MTY5ZGQ3MWEyYTc", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-11T19:18:18Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-01-17T20:01:21Z"}, "message": "Update w/ comments\n\nRemoves uses of ty() where a method is implemented on TypeFoldable, and also directly formats\na Term.", "tree": {"sha": "04035a503f6f69f4d996227113ed97e30ad904d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04035a503f6f69f4d996227113ed97e30ad904d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f396888c4d816f7d0980aba041014169dd71a2a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f396888c4d816f7d0980aba041014169dd71a2a7", "html_url": "https://github.com/rust-lang/rust/commit/f396888c4d816f7d0980aba041014169dd71a2a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f396888c4d816f7d0980aba041014169dd71a2a7/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7529d6a3867ed1692818702b40814ee992eba2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7529d6a3867ed1692818702b40814ee992eba2d", "html_url": "https://github.com/rust-lang/rust/commit/e7529d6a3867ed1692818702b40814ee992eba2d"}], "stats": {"total": 53, "additions": 21, "deletions": 32}, "files": [{"sha": "c6b03739927a3200518e6eefaf04722bf83cb0d0", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=f396888c4d816f7d0980aba041014169dd71a2a7", "patch": "@@ -905,7 +905,13 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n \n                 for (assoc_item_def_id, term) in assoc_items {\n-                    let ty = if let Term::Ty(ty) = term.skip_binder() { ty } else { continue };\n+                    let ty = match term.skip_binder() {\n+                        Term::Ty(ty) => ty,\n+                        Term::Const(c) => {\n+                            p!(print(c));\n+                            continue;\n+                        }\n+                    };\n                     if !first {\n                         p!(\", \");\n                     }"}, {"sha": "ffc339f35888362746523f46d056bd9741940586", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=f396888c4d816f7d0980aba041014169dd71a2a7", "patch": "@@ -1580,10 +1580,9 @@ impl<'tcx> ExistentialProjection<'tcx> {\n     ) -> Self {\n         // Assert there is a Self.\n         projection_predicate.projection_ty.substs.type_at(0);\n-        let ty = if let Term::Ty(ty) = projection_predicate.term {\n-            ty\n-        } else {\n-            panic!(\"Only types are permitted here\");\n+        let ty = match projection_predicate.term {\n+            Term::Ty(ty) => ty,\n+            Term::Const(_c) => unimplemented!(),\n         };\n \n         Self {"}, {"sha": "66767e2b81fdcaa7059531940de9b296c9748e50", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=f396888c4d816f7d0980aba041014169dd71a2a7", "patch": "@@ -128,10 +128,7 @@ where\n                 polarity: _,\n             }) => self.visit_trait(trait_ref),\n             ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {\n-                match term {\n-                    ty::Term::Ty(ty) => ty.visit_with(self)?,\n-                    ty::Term::Const(ct) => ct.visit_with(self)?,\n-                }\n+                term.visit_with(self)?;\n                 self.visit_projection_ty(projection_ty)\n             }\n             ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, _region)) => {\n@@ -1189,10 +1186,7 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n \n             for (poly_predicate, _) in bounds.projection_bounds {\n                 let pred = poly_predicate.skip_binder();\n-                let poly_pred_term = match pred.term {\n-                    ty::Term::Ty(ty) => self.visit(ty),\n-                    ty::Term::Const(ct) => self.visit(ct),\n-                };\n+                let poly_pred_term = self.visit(pred.term);\n                 if poly_pred_term.is_break()\n                     || self.visit_projection_ty(pred.projection_ty).is_break()\n                 {"}, {"sha": "8a33d26fa86586823a1edc5d0d02e9576ea043c8", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=f396888c4d816f7d0980aba041014169dd71a2a7", "patch": "@@ -779,8 +779,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                             // However, we should always make progress (either by generating\n                             // subobligations or getting an error) when we started off with\n                             // inference variables\n-                            if p.term().skip_binder().ty().map_or(false, |ty| ty.has_infer_types())\n-                            {\n+                            if p.term().skip_binder().ty().has_infer_types() {\n                                 panic!(\"Unexpected result when selecting {:?} {:?}\", ty, obligation)\n                             }\n                         }"}, {"sha": "e88099afa03539ce855f6e40d2320a40c968677c", "filename": "compiler/rustc_typeck/src/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fclosure.rs?ref=f396888c4d816f7d0980aba041014169dd71a2a7", "patch": "@@ -709,7 +709,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // does not have any regions in it.\n         let output_ty = self.resolve_vars_if_possible(predicate.term);\n         debug!(\"deduce_future_output_from_projection: output_ty={:?}\", output_ty);\n-        // FIXME(...): How to handle consts here? Will this always be a const?\n+        // This is a projection on a Fn trait so will always be a type.\n         Some(output_ty.ty().unwrap())\n     }\n "}, {"sha": "56f4d5afe400d8c1d3e05338364d4f5111d33c42", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f396888c4d816f7d0980aba041014169dd71a2a7", "patch": "@@ -789,13 +789,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     item_def_id: projection_ty.item_def_id,\n                                 };\n \n-                                let fmt = match pred.skip_binder().term {\n-                                    ty::Term::Ty(ty) => format!(\"{}\", ty),\n-                                    ty::Term::Const(c) => format!(\"{}\", c),\n-                                };\n+                                let term = pred.skip_binder().term;\n \n-                                let obligation = format!(\"{} = {}\", projection_ty, fmt);\n-                                let quiet = format!(\"{} = {}\", quiet_projection_ty, fmt);\n+                                let obligation = format!(\"{} = {}\", projection_ty, term);\n+                                let quiet = format!(\"{} = {}\", quiet_projection_ty, term);\n \n                                 bound_span_label(projection_ty.self_ty(), &obligation, &quiet);\n                                 Some((obligation, projection_ty.self_ty()))"}, {"sha": "f748b88d90ce36f3bfc0e8246070ffeccddf5156", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=f396888c4d816f7d0980aba041014169dd71a2a7", "patch": "@@ -694,10 +694,7 @@ fn bounds_from_generic_predicates<'tcx>(\n         where_clauses.push(format!(\n             \"{} = {}\",\n             tcx.def_path_str(p.projection_ty.item_def_id),\n-            match p.term {\n-                ty::Term::Ty(ty) => format!(\"{}\", ty),\n-                ty::Term::Const(c) => format!(\"{}\", c),\n-            }\n+            p.term,\n         ));\n     }\n     let where_clauses = if where_clauses.is_empty() {"}, {"sha": "d87e670a8fb5a7bf912ea64031a9b1a5d70e4944", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f396888c4d816f7d0980aba041014169dd71a2a7/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=f396888c4d816f7d0980aba041014169dd71a2a7", "patch": "@@ -199,7 +199,7 @@ fn unconstrained_parent_impl_substs<'tcx>(\n     for (predicate, _) in impl_generic_predicates.predicates.iter() {\n         if let ty::PredicateKind::Projection(proj) = predicate.kind().skip_binder() {\n             let projection_ty = proj.projection_ty;\n-            let projected_ty = proj.term.ty();\n+            let projected_ty = proj.term;\n \n             let unbound_trait_ref = projection_ty.trait_ref(tcx);\n             if Some(unbound_trait_ref) == impl_trait_ref {"}, {"sha": "fac1a0817e03300dc94d5c2b2df4e31dc1738ce8", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f396888c4d816f7d0980aba041014169dd71a2a7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f396888c4d816f7d0980aba041014169dd71a2a7/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=f396888c4d816f7d0980aba041014169dd71a2a7", "patch": "@@ -1309,10 +1309,7 @@ impl FnDecl {\n                 GenericBound::TraitBound(PolyTrait { trait_, .. }, ..) => {\n                     let bindings = trait_.bindings().unwrap();\n                     let ret_ty = bindings[0].term();\n-                    let ty = match ret_ty {\n-                        Term::Type(ty) => ty,\n-                        Term::Constant(_c) => unreachable!(),\n-                    };\n+                    let ty = ret_ty.ty().expect(\"Unexpected constant return term\");\n                     FnRetTy::Return(ty.clone())\n                 }\n                 _ => panic!(\"unexpected desugaring of async function\"),"}, {"sha": "d5b928de4a81aab86c64aeba2104aa6eb2ef52f0", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f396888c4d816f7d0980aba041014169dd71a2a7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f396888c4d816f7d0980aba041014169dd71a2a7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f396888c4d816f7d0980aba041014169dd71a2a7", "patch": "@@ -2143,7 +2143,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n                         let assoc_ty = match projection_predicate.term {\n                           ty::Term::Ty(ty) => ty,\n-                          ty::Term::Const(c) => c.ty,\n+                          ty::Term::Const(_c) => continue,\n                         };\n                         // walk the associated type and check for Self\n                         if let Some(self_adt) = self_ty.ty_adt_def() {"}]}