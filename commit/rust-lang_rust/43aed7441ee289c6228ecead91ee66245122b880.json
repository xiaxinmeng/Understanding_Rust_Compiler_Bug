{"sha": "43aed7441ee289c6228ecead91ee66245122b880", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYWVkNzQ0MWVlMjg5YzYyMjhlY2VhZDkxZWU2NjI0NTEyMmI4ODA=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-01-29T16:23:56Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-02-17T13:38:25Z"}, "message": "[libtest] Run the test synchronously when hitting thread limit", "tree": {"sha": "919f0f13c12982b011efa8c68b0f7a5f4e138d94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/919f0f13c12982b011efa8c68b0f7a5f4e138d94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43aed7441ee289c6228ecead91ee66245122b880", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYC0cURUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLhe7wEA4jODS5n1210xkEp3YvkddPnoHgBy\nrWh5hL/R5yBZMnAA/0/kIljuAY91F4Pb8hzQOaSydyj+x//ji67QgaV9ljsM\n=VjEP\n-----END PGP SIGNATURE-----", "payload": "tree 919f0f13c12982b011efa8c68b0f7a5f4e138d94\nparent 099f27b6cbf10e31d41e4a2e6cb55ec39dbb0527\nauthor hyd-dev <yd-huang@outlook.com> 1611937436 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1613569105 +0800\n\n[libtest] Run the test synchronously when hitting thread limit\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43aed7441ee289c6228ecead91ee66245122b880", "html_url": "https://github.com/rust-lang/rust/commit/43aed7441ee289c6228ecead91ee66245122b880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43aed7441ee289c6228ecead91ee66245122b880/comments", "author": null, "committer": null, "parents": [{"sha": "099f27b6cbf10e31d41e4a2e6cb55ec39dbb0527", "url": "https://api.github.com/repos/rust-lang/rust/commits/099f27b6cbf10e31d41e4a2e6cb55ec39dbb0527", "html_url": "https://github.com/rust-lang/rust/commit/099f27b6cbf10e31d41e4a2e6cb55ec39dbb0527"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "50b71cb561f342870bee1b3b5898db0bc7c262e9", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/43aed7441ee289c6228ecead91ee66245122b880/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43aed7441ee289c6228ecead91ee66245122b880/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=43aed7441ee289c6228ecead91ee66245122b880", "patch": "@@ -506,7 +506,18 @@ pub fn run_test(\n         let supports_threads = !cfg!(target_os = \"emscripten\") && !cfg!(target_arch = \"wasm32\");\n         if concurrency == Concurrent::Yes && supports_threads {\n             let cfg = thread::Builder::new().name(name.as_slice().to_owned());\n-            Some(cfg.spawn(runtest).unwrap())\n+            let mut runtest = Arc::new(Mutex::new(Some(runtest)));\n+            let runtest2 = runtest.clone();\n+            match cfg.spawn(move || runtest2.lock().unwrap().take().unwrap()()) {\n+                Ok(handle) => Some(handle),\n+                Err(e) if e.kind() == io::ErrorKind::WouldBlock => {\n+                    // `ErrorKind::WouldBlock` means hitting the thread limit on some\n+                    // platforms, so run the test synchronously here instead.\n+                    Arc::get_mut(&mut runtest).unwrap().get_mut().unwrap().take().unwrap()();\n+                    None\n+                }\n+                Err(e) => panic!(\"failed to spawn thread to run test: {}\", e),\n+            }\n         } else {\n             runtest();\n             None"}, {"sha": "29c1bc71d870459d5ebcd94f04b8eb4686efd809", "filename": "src/test/run-make/libtest-thread-limit/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/43aed7441ee289c6228ecead91ee66245122b880/src%2Ftest%2Frun-make%2Flibtest-thread-limit%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/43aed7441ee289c6228ecead91ee66245122b880/src%2Ftest%2Frun-make%2Flibtest-thread-limit%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flibtest-thread-limit%2FMakefile?ref=43aed7441ee289c6228ecead91ee66245122b880", "patch": "@@ -0,0 +1,7 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# only-linux\n+\n+all:\n+\t$(RUSTC) test.rs --test --target $(TARGET)\n+\t$(shell ulimit -p 0 && $(call RUN,test))"}, {"sha": "d899411a49ea0c9979eabb6691c5701d4c017c37", "filename": "src/test/run-make/libtest-thread-limit/test.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43aed7441ee289c6228ecead91ee66245122b880/src%2Ftest%2Frun-make%2Flibtest-thread-limit%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43aed7441ee289c6228ecead91ee66245122b880/src%2Ftest%2Frun-make%2Flibtest-thread-limit%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flibtest-thread-limit%2Ftest.rs?ref=43aed7441ee289c6228ecead91ee66245122b880", "patch": "@@ -0,0 +1,16 @@\n+#![feature(once_cell)]\n+\n+use std::{io::ErrorKind, lazy::SyncOnceCell, thread::{self, Builder, ThreadId}};\n+\n+static THREAD_ID: SyncOnceCell<ThreadId> = SyncOnceCell::new();\n+\n+#[test]\n+fn spawn_thread_would_block() {\n+    assert_eq!(Builder::new().spawn(|| unreachable!()).unwrap_err().kind(), ErrorKind::WouldBlock);\n+    THREAD_ID.set(thread::current().id()).unwrap();\n+}\n+\n+#[test]\n+fn run_in_same_thread() {\n+    assert_eq!(*THREAD_ID.get().unwrap(), thread::current().id());\n+}"}]}