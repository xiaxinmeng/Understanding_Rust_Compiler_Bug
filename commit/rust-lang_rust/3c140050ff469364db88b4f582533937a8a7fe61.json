{"sha": "3c140050ff469364db88b4f582533937a8a7fe61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMTQwMDUwZmY0NjkzNjRkYjg4YjRmNTgyNTMzOTM3YThhN2ZlNjE=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-10-29T20:08:36Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-10-29T20:08:36Z"}, "message": "Profile all request handlers", "tree": {"sha": "cb005285d0936057debeee83e59709ba19220225", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb005285d0936057debeee83e59709ba19220225"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c140050ff469364db88b4f582533937a8a7fe61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c140050ff469364db88b4f582533937a8a7fe61", "html_url": "https://github.com/rust-lang/rust/commit/3c140050ff469364db88b4f582533937a8a7fe61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c140050ff469364db88b4f582533937a8a7fe61/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "542bc18223fdef60c942d0d6ca0dd9be9de2cd91", "url": "https://api.github.com/repos/rust-lang/rust/commits/542bc18223fdef60c942d0d6ca0dd9be9de2cd91", "html_url": "https://github.com/rust-lang/rust/commit/542bc18223fdef60c942d0d6ca0dd9be9de2cd91"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "20f9aee138fb540691b83f8bb09f80dfcedcc378", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3c140050ff469364db88b4f582533937a8a7fe61/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c140050ff469364db88b4f582533937a8a7fe61/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=3c140050ff469364db88b4f582533937a8a7fe61", "patch": "@@ -27,6 +27,7 @@ use crate::{\n };\n \n pub fn handle_analyzer_status(world: WorldSnapshot, _: ()) -> Result<String> {\n+    let _p = profile(\"handle_analyzer_status\");\n     let mut buf = world.status();\n     writeln!(buf, \"\\n\\nrequests:\").unwrap();\n     let requests = world.latest_requests.read();\n@@ -38,6 +39,7 @@ pub fn handle_analyzer_status(world: WorldSnapshot, _: ()) -> Result<String> {\n }\n \n pub fn handle_syntax_tree(world: WorldSnapshot, params: req::SyntaxTreeParams) -> Result<String> {\n+    let _p = profile(\"handle_syntax_tree\");\n     let id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(id)?;\n     let text_range = params.range.map(|p| p.conv_with(&line_index));\n@@ -172,6 +174,7 @@ pub fn handle_document_symbol(\n     world: WorldSnapshot,\n     params: req::DocumentSymbolParams,\n ) -> Result<Option<req::DocumentSymbolResponse>> {\n+    let _p = profile(\"handle_document_symbol\");\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n \n@@ -210,6 +213,7 @@ pub fn handle_workspace_symbol(\n     world: WorldSnapshot,\n     params: req::WorkspaceSymbolParams,\n ) -> Result<Option<Vec<SymbolInformation>>> {\n+    let _p = profile(\"handle_workspace_symbol\");\n     let all_symbols = params.query.contains('#');\n     let libs = params.query.contains('*');\n     let query = {\n@@ -253,6 +257,7 @@ pub fn handle_goto_definition(\n     world: WorldSnapshot,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<req::GotoDefinitionResponse>> {\n+    let _p = profile(\"handle_goto_definition\");\n     let position = params.try_conv_with(&world)?;\n     let nav_info = match world.analysis().goto_definition(position)? {\n         None => return Ok(None),\n@@ -266,6 +271,7 @@ pub fn handle_goto_implementation(\n     world: WorldSnapshot,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<req::GotoImplementationResponse>> {\n+    let _p = profile(\"handle_goto_implementation\");\n     let position = params.try_conv_with(&world)?;\n     let nav_info = match world.analysis().goto_implementation(position)? {\n         None => return Ok(None),\n@@ -279,6 +285,7 @@ pub fn handle_goto_type_definition(\n     world: WorldSnapshot,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<req::GotoTypeDefinitionResponse>> {\n+    let _p = profile(\"handle_goto_type_definition\");\n     let position = params.try_conv_with(&world)?;\n     let nav_info = match world.analysis().goto_type_definition(position)? {\n         None => return Ok(None),\n@@ -292,6 +299,7 @@ pub fn handle_parent_module(\n     world: WorldSnapshot,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Vec<Location>> {\n+    let _p = profile(\"handle_parent_module\");\n     let position = params.try_conv_with(&world)?;\n     world.analysis().parent_module(position)?.iter().try_conv_with_to_vec(&world)\n }\n@@ -300,6 +308,7 @@ pub fn handle_runnables(\n     world: WorldSnapshot,\n     params: req::RunnablesParams,\n ) -> Result<Vec<req::Runnable>> {\n+    let _p = profile(\"handle_runnables\");\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let offset = params.position.map(|it| it.conv_with(&line_index));\n@@ -341,6 +350,7 @@ pub fn handle_decorations(\n     world: WorldSnapshot,\n     params: TextDocumentIdentifier,\n ) -> Result<Vec<Decoration>> {\n+    let _p = profile(\"handle_decorations\");\n     let file_id = params.try_conv_with(&world)?;\n     highlight(&world, file_id)\n }\n@@ -389,6 +399,7 @@ pub fn handle_folding_range(\n     world: WorldSnapshot,\n     params: FoldingRangeParams,\n ) -> Result<Option<Vec<FoldingRange>>> {\n+    let _p = profile(\"handle_folding_range\");\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let folds = world.analysis().folding_ranges(file_id)?;\n     let text = world.analysis().file_text(file_id)?;\n@@ -406,6 +417,7 @@ pub fn handle_signature_help(\n     world: WorldSnapshot,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<req::SignatureHelp>> {\n+    let _p = profile(\"handle_signature_help\");\n     let position = params.try_conv_with(&world)?;\n     if let Some(call_info) = world.analysis().call_info(position)? {\n         let active_parameter = call_info.active_parameter.map(|it| it as i64);\n@@ -425,6 +437,7 @@ pub fn handle_hover(\n     world: WorldSnapshot,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<Hover>> {\n+    let _p = profile(\"handle_hover\");\n     let position = params.try_conv_with(&world)?;\n     let info = match world.analysis().hover(position)? {\n         None => return Ok(None),\n@@ -523,6 +536,7 @@ pub fn handle_formatting(\n     world: WorldSnapshot,\n     params: DocumentFormattingParams,\n ) -> Result<Option<Vec<TextEdit>>> {\n+    let _p = profile(\"handle_formatting\");\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let file = world.analysis().file_text(file_id)?;\n \n@@ -645,6 +659,7 @@ pub fn handle_code_lens(\n     world: WorldSnapshot,\n     params: req::CodeLensParams,\n ) -> Result<Option<Vec<CodeLens>>> {\n+    let _p = profile(\"handle_code_lens\");\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n \n@@ -705,6 +720,7 @@ enum CodeLensResolveData {\n }\n \n pub fn handle_code_lens_resolve(world: WorldSnapshot, code_lens: CodeLens) -> Result<CodeLens> {\n+    let _p = profile(\"handle_code_lens_resolve\");\n     let data = code_lens.data.unwrap();\n     let resolve = serde_json::from_value(data)?;\n     match resolve {\n@@ -776,6 +792,7 @@ pub fn publish_diagnostics(\n     world: &WorldSnapshot,\n     file_id: FileId,\n ) -> Result<req::PublishDiagnosticsParams> {\n+    let _p = profile(\"publish_diagnostics\");\n     let uri = world.file_id_to_uri(file_id)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let diagnostics = world\n@@ -798,6 +815,7 @@ pub fn publish_decorations(\n     world: &WorldSnapshot,\n     file_id: FileId,\n ) -> Result<req::PublishDecorationsParams> {\n+    let _p = profile(\"publish_decorations\");\n     let uri = world.file_id_to_uri(file_id)?;\n     Ok(req::PublishDecorationsParams { uri, decorations: highlight(&world, file_id)? })\n }\n@@ -847,6 +865,7 @@ pub fn handle_inlay_hints(\n     world: WorldSnapshot,\n     params: InlayHintsParams,\n ) -> Result<Vec<InlayHint>> {\n+    let _p = profile(\"handle_inlay_hints\");\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let analysis = world.analysis();\n     let line_index = analysis.file_line_index(file_id)?;"}]}