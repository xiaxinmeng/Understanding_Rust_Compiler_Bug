{"sha": "001397da3ced1065b254a0e87ae071e17d0b16ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMTM5N2RhM2NlZDEwNjViMjU0YTBlODdhZTA3MWUxN2QwYjE2YmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-05T06:52:47Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-05T06:52:47Z"}, "message": "stdlib: Add ivec::any() and ivec::all(); put out burning tinderbox", "tree": {"sha": "ca150dac36fef768b6775e6d5b702036201c4a5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca150dac36fef768b6775e6d5b702036201c4a5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/001397da3ced1065b254a0e87ae071e17d0b16ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/001397da3ced1065b254a0e87ae071e17d0b16ba", "html_url": "https://github.com/rust-lang/rust/commit/001397da3ced1065b254a0e87ae071e17d0b16ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/001397da3ced1065b254a0e87ae071e17d0b16ba/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f71c8dd91873d3983a21b85f5c86651b1a5cefed", "url": "https://api.github.com/repos/rust-lang/rust/commits/f71c8dd91873d3983a21b85f5c86651b1a5cefed", "html_url": "https://github.com/rust-lang/rust/commit/f71c8dd91873d3983a21b85f5c86651b1a5cefed"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "fcc5667cdb3071b53aa13e51714069b6f08437a8", "filename": "src/lib/ivec.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/001397da3ced1065b254a0e87ae071e17d0b16ba/src%2Flib%2Fivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001397da3ced1065b254a0e87ae071e17d0b16ba/src%2Flib%2Fivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fivec.rs?ref=001397da3ced1065b254a0e87ae071e17d0b16ba", "patch": "@@ -171,6 +171,16 @@ fn map[T,U](fn(&T)->U f, &mutable T[mutable?] v) -> U[] {\n     ret result;\n }\n \n+fn any[T](fn(&T)->bool f, &T[] v) -> bool {\n+    for (T elem in v) { if (f(elem)) { ret true; } }\n+    ret false;\n+}\n+\n+fn all[T](fn(&T)->bool f, &T[] v) -> bool {\n+    for (T elem in v) { if (!f(elem)) { ret false; } }\n+    ret true;\n+}\n+\n \n mod unsafe {\n     fn copy_from_buf[T](&mutable T[] v, *T ptr, uint count) {"}, {"sha": "3653ffb4db5597dd6fd2833c502fbef9963fd91f", "filename": "src/test/run-pass/lib-ivec.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/001397da3ced1065b254a0e87ae071e17d0b16ba/src%2Ftest%2Frun-pass%2Flib-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001397da3ced1065b254a0e87ae071e17d0b16ba/src%2Ftest%2Frun-pass%2Flib-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-ivec.rs?ref=001397da3ced1065b254a0e87ae071e17d0b16ba", "patch": "@@ -7,6 +7,10 @@ import std::option::some;\n \n fn square(uint n) -> uint { ret n * n; }\n \n+fn square_alias(&uint n) -> uint { ret n * n; }\n+\n+pred is_three(&uint n) -> bool { ret n == 3u; }\n+\n fn test_reserve_and_on_heap() {\n     let int[] v = ~[ 1, 2 ];\n     assert (!ivec::on_heap(v));\n@@ -167,15 +171,15 @@ fn test_grow_set() {\n fn test_map() {\n     // Test on-stack map.\n     auto v = ~[ 1u, 2u, 3u ];\n-    auto w = ivec::map(square, v);\n+    auto w = ivec::map(square_alias, v);\n     assert (ivec::len(w) == 3u);\n     assert (w.(0) == 1u);\n     assert (w.(1) == 4u);\n     assert (w.(2) == 9u);\n \n     // Test on-heap map.\n     v = ~[ 1u, 2u, 3u, 4u, 5u ];\n-    w = ivec::map(square, v);\n+    w = ivec::map(square_alias, v);\n     assert (ivec::len(w) == 5u);\n     assert (w.(0) == 1u);\n     assert (w.(1) == 4u);\n@@ -184,6 +188,18 @@ fn test_map() {\n     assert (w.(4) == 25u);\n }\n \n+fn test_any_and_all() {\n+    assert (ivec::any(is_three, ~[ 1u, 2u, 3u ]));\n+    assert (!ivec::any(is_three, ~[ 0u, 1u, 2u ]));\n+    assert (ivec::any(is_three, ~[ 1u, 2u, 3u, 4u, 5u ]));\n+    assert (!ivec::any(is_three, ~[ 1u, 2u, 4u, 5u, 6u ]));\n+\n+    assert (ivec::all(is_three, ~[ 3u, 3u, 3u ]));\n+    assert (!ivec::all(is_three, ~[ 3u, 3u, 2u ]));\n+    assert (ivec::all(is_three, ~[ 3u, 3u, 3u, 3u, 3u ]));\n+    assert (!ivec::all(is_three, ~[ 3u, 3u, 0u, 1u, 2u ]));\n+}\n+\n fn main() {\n     test_reserve_and_on_heap();\n     test_unsafe_ptrs();\n@@ -204,5 +220,6 @@ fn main() {\n \n     // Functional utilities\n     test_map();\n+    test_any_and_all();\n }\n "}]}