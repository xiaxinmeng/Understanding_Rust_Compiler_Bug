{"sha": "7eb64b86ce44cc1828dd176a8b981e37ea08fc38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYjY0Yjg2Y2U0NGNjMTgyOGRkMTc2YThiOTgxZTM3ZWEwOGZjMzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-20T17:34:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-20T17:34:17Z"}, "message": "Auto merge of #46583 - scottmcm:fix-static-i128-lower, r=eddyb\n\nFix -Z lower_128bit_ops handling of statics\n\nAvoids ICEs such as the following:\n>  error: internal compiler error: src\\librustc_metadata\\cstore_impl.rs:131:\n>  get_optimized_mir: missing MIR for `DefId(8/0:40 ~\n>  compiler_builtins[9532]::int[0]::addsub[0]::rust_i128_addo[0])`\n\nr? @nagisa\n\ncc #45676 @est31", "tree": {"sha": "958b76839e53cc4a7185767b5978bb0346df1ec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/958b76839e53cc4a7185767b5978bb0346df1ec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eb64b86ce44cc1828dd176a8b981e37ea08fc38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb64b86ce44cc1828dd176a8b981e37ea08fc38", "html_url": "https://github.com/rust-lang/rust/commit/7eb64b86ce44cc1828dd176a8b981e37ea08fc38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eb64b86ce44cc1828dd176a8b981e37ea08fc38/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81622c6b02536bdcf56145beb317da0d336703c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/81622c6b02536bdcf56145beb317da0d336703c1", "html_url": "https://github.com/rust-lang/rust/commit/81622c6b02536bdcf56145beb317da0d336703c1"}, {"sha": "4b95ca8db252d485db6b4e23eb3dd057e9cfde51", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b95ca8db252d485db6b4e23eb3dd057e9cfde51", "html_url": "https://github.com/rust-lang/rust/commit/4b95ca8db252d485db6b4e23eb3dd057e9cfde51"}], "stats": {"total": 315, "additions": 311, "deletions": 4}, "files": [{"sha": "d836d796c4113372714a115bb5bfae6099dced13", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/7eb64b86ce44cc1828dd176a8b981e37ea08fc38/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb64b86ce44cc1828dd176a8b981e37ea08fc38/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=7eb64b86ce44cc1828dd176a8b981e37ea08fc38", "patch": "@@ -410,6 +410,42 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                                 }\n                                 _ => span_bug!(span, \"{:?} in constant\", terminator.kind)\n                             }\n+                        } else if let Some((op, is_checked)) = self.is_binop_lang_item(def_id) {\n+                            (||{\n+                                assert_eq!(arg_vals.len(), 2);\n+                                let rhs = arg_vals.pop().unwrap()?;\n+                                let lhs = arg_vals.pop().unwrap()?;\n+                                if !is_checked {\n+                                    let binop_ty = op.ty(tcx, lhs.ty, rhs.ty);\n+                                    let (lhs, rhs) = (lhs.llval, rhs.llval);\n+                                    Ok(Const::new(const_scalar_binop(op, lhs, rhs, binop_ty),\n+                                                  binop_ty))\n+                                } else {\n+                                    let ty = lhs.ty;\n+                                    let val_ty = op.ty(tcx, lhs.ty, rhs.ty);\n+                                    let binop_ty = tcx.intern_tup(&[val_ty, tcx.types.bool], false);\n+                                    let (lhs, rhs) = (lhs.llval, rhs.llval);\n+                                    assert!(!ty.is_fp());\n+\n+                                    match const_scalar_checked_binop(tcx, op, lhs, rhs, ty) {\n+                                        Some((llval, of)) => {\n+                                            Ok(trans_const_adt(\n+                                                self.ccx,\n+                                                binop_ty,\n+                                                &mir::AggregateKind::Tuple,\n+                                                &[\n+                                                    Const::new(llval, val_ty),\n+                                                    Const::new(C_bool(self.ccx, of), tcx.types.bool)\n+                                                ]))\n+                                        }\n+                                        None => {\n+                                            span_bug!(span,\n+                                                \"{:?} got non-integer operands: {:?} and {:?}\",\n+                                                op, Value(lhs), Value(rhs));\n+                                        }\n+                                    }\n+                                }\n+                            })()\n                         } else {\n                             MirConstContext::trans_def(self.ccx, def_id, substs, arg_vals)\n                         };\n@@ -425,6 +461,37 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n         }\n     }\n \n+    fn is_binop_lang_item(&mut self, def_id: DefId) -> Option<(mir::BinOp, bool)> {\n+        let tcx = self.ccx.tcx();\n+        let items = tcx.lang_items();\n+        let def_id = Some(def_id);\n+        if items.i128_add_fn() == def_id { Some((mir::BinOp::Add, false)) }\n+        else if items.u128_add_fn() == def_id { Some((mir::BinOp::Add, false)) }\n+        else if items.i128_sub_fn() == def_id { Some((mir::BinOp::Sub, false)) }\n+        else if items.u128_sub_fn() == def_id { Some((mir::BinOp::Sub, false)) }\n+        else if items.i128_mul_fn() == def_id { Some((mir::BinOp::Mul, false)) }\n+        else if items.u128_mul_fn() == def_id { Some((mir::BinOp::Mul, false)) }\n+        else if items.i128_div_fn() == def_id { Some((mir::BinOp::Div, false)) }\n+        else if items.u128_div_fn() == def_id { Some((mir::BinOp::Div, false)) }\n+        else if items.i128_rem_fn() == def_id { Some((mir::BinOp::Rem, false)) }\n+        else if items.u128_rem_fn() == def_id { Some((mir::BinOp::Rem, false)) }\n+        else if items.i128_shl_fn() == def_id { Some((mir::BinOp::Shl, false)) }\n+        else if items.u128_shl_fn() == def_id { Some((mir::BinOp::Shl, false)) }\n+        else if items.i128_shr_fn() == def_id { Some((mir::BinOp::Shr, false)) }\n+        else if items.u128_shr_fn() == def_id { Some((mir::BinOp::Shr, false)) }\n+        else if items.i128_addo_fn() == def_id { Some((mir::BinOp::Add, true)) }\n+        else if items.u128_addo_fn() == def_id { Some((mir::BinOp::Add, true)) }\n+        else if items.i128_subo_fn() == def_id { Some((mir::BinOp::Sub, true)) }\n+        else if items.u128_subo_fn() == def_id { Some((mir::BinOp::Sub, true)) }\n+        else if items.i128_mulo_fn() == def_id { Some((mir::BinOp::Mul, true)) }\n+        else if items.u128_mulo_fn() == def_id { Some((mir::BinOp::Mul, true)) }\n+        else if items.i128_shlo_fn() == def_id { Some((mir::BinOp::Shl, true)) }\n+        else if items.u128_shlo_fn() == def_id { Some((mir::BinOp::Shl, true)) }\n+        else if items.i128_shro_fn() == def_id { Some((mir::BinOp::Shr, true)) }\n+        else if items.u128_shro_fn() == def_id { Some((mir::BinOp::Shr, true)) }\n+        else { None }\n+    }\n+\n     fn store(&mut self,\n              dest: &mir::Place<'tcx>,\n              value: Result<Const<'tcx>, ConstEvalErr<'tcx>>,"}, {"sha": "1752445a141c3dde3330929fa624ecf2c58974c7", "filename": "src/test/mir-opt/lower_128bit_debug_test.rs", "status": "modified", "additions": 122, "deletions": 2, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/7eb64b86ce44cc1828dd176a8b981e37ea08fc38/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb64b86ce44cc1828dd176a8b981e37ea08fc38/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_debug_test.rs?ref=7eb64b86ce44cc1828dd176a8b981e37ea08fc38", "patch": "@@ -16,6 +16,18 @@\n // compile-flags: -Z lower_128bit_ops=yes -C debug_assertions=yes\n \n #![feature(i128_type)]\n+#![feature(const_fn)]\n+\n+static TEST_SIGNED: i128 = const_signed(-222);\n+static TEST_UNSIGNED: u128 = const_unsigned(200);\n+\n+const fn const_signed(mut x: i128) -> i128 {\n+    ((((((x + 1) - 2) * 3) / 4) % 5) << 6) >> 7\n+}\n+\n+const fn const_unsigned(mut x: u128) -> u128 {\n+    ((((((x + 1) - 2) * 3) / 4) % 5) << 6) >> 7\n+}\n \n fn test_signed(mut x: i128) -> i128 {\n     x += 1;\n@@ -39,13 +51,121 @@ fn test_unsigned(mut x: u128) -> u128 {\n     x\n }\n \n+fn check(x: i128, y: u128) {\n+    assert_eq!(test_signed(x), -1);\n+    assert_eq!(const_signed(x), -1);\n+    assert_eq!(TEST_SIGNED, -1);\n+    assert_eq!(test_unsigned(y), 2);\n+    assert_eq!(const_unsigned(y), 2);\n+    assert_eq!(TEST_UNSIGNED, 2);\n+}\n+\n fn main() {\n-    assert_eq!(test_signed(-222), -1);\n-    assert_eq!(test_unsigned(200), 2);\n+    check(-222, 200);\n }\n \n // END RUST SOURCE\n \n+// START rustc.const_signed.Lower128Bit.after.mir\n+//     _8 = _1;\n+//     _9 = const compiler_builtins::int::addsub::rust_i128_addo(move _8, const 1i128) -> bb10;\n+//     ...\n+//     _7 = move (_9.0: i128);\n+//     ...\n+//     _10 = const compiler_builtins::int::addsub::rust_i128_subo(move _7, const 2i128) -> bb11;\n+//     ...\n+//     _6 = move (_10.0: i128);\n+//     ...\n+//     _11 = const compiler_builtins::int::mul::rust_i128_mulo(move _6, const 3i128) -> bb12;\n+//     ...\n+//     _5 = move (_11.0: i128);\n+//     ...\n+//     _12 = Eq(const 4i128, const 0i128);\n+//     assert(!move _12, \"attempt to divide by zero\") -> bb4;\n+//     ...\n+//     _13 = Eq(const 4i128, const -1i128);\n+//     _14 = Eq(_5, const -170141183460469231731687303715884105728i128);\n+//     _15 = BitAnd(move _13, move _14);\n+//     assert(!move _15, \"attempt to divide with overflow\") -> bb5;\n+//     ...\n+//     _4 = const compiler_builtins::int::sdiv::rust_i128_div(move _5, const 4i128) -> bb13;\n+//     ...\n+//     _17 = Eq(const 5i128, const -1i128);\n+//     _18 = Eq(_4, const -170141183460469231731687303715884105728i128);\n+//     _19 = BitAnd(move _17, move _18);\n+//     assert(!move _19, \"attempt to calculate the remainder with overflow\") -> bb7;\n+//     ...\n+//     _3 = const compiler_builtins::int::sdiv::rust_i128_rem(move _4, const 5i128) -> bb15;\n+//     ...\n+//     _2 = move (_20.0: i128);\n+//     ...\n+//     _23 = const 7i32 as u128 (Misc);\n+//     _21 = const compiler_builtins::int::shift::rust_i128_shro(move _2, move _23) -> bb16;\n+//     ...\n+//     _0 = move (_21.0: i128);\n+//     ...\n+//     assert(!move (_9.1: bool), \"attempt to add with overflow\") -> bb1;\n+//     ...\n+//     assert(!move (_10.1: bool), \"attempt to subtract with overflow\") -> bb2;\n+//     ...\n+//     assert(!move (_11.1: bool), \"attempt to multiply with overflow\") -> bb3;\n+//     ...\n+//     _16 = Eq(const 5i128, const 0i128);\n+//     assert(!move _16, \"attempt to calculate the remainder with a divisor of zero\") -> bb6;\n+//     ...\n+//     assert(!move (_20.1: bool), \"attempt to shift left with overflow\") -> bb8;\n+//     ...\n+//     _22 = const 6i32 as u128 (Misc);\n+//     _20 = const compiler_builtins::int::shift::rust_i128_shlo(move _3, move _22) -> bb14;\n+//     ...\n+//     assert(!move (_21.1: bool), \"attempt to shift right with overflow\") -> bb9;\n+// END rustc.const_signed.Lower128Bit.after.mir\n+\n+// START rustc.const_unsigned.Lower128Bit.after.mir\n+//     _8 = _1;\n+//     _9 = const compiler_builtins::int::addsub::rust_u128_addo(move _8, const 1u128) -> bb8;\n+//     ...\n+//     _7 = move (_9.0: u128);\n+//     ...\n+//     _10 = const compiler_builtins::int::addsub::rust_u128_subo(move _7, const 2u128) -> bb9;\n+//     ...\n+//     _6 = move (_10.0: u128);\n+//     ...\n+//     _11 = const compiler_builtins::int::mul::rust_u128_mulo(move _6, const 3u128) -> bb10;\n+//     ...\n+//     _5 = move (_11.0: u128);\n+//     ...\n+//     _12 = Eq(const 4u128, const 0u128);\n+//     assert(!move _12, \"attempt to divide by zero\") -> bb4;\n+//     ...\n+//     _4 = const compiler_builtins::int::udiv::rust_u128_div(move _5, const 4u128) -> bb11;\n+//     ...\n+//     _3 = const compiler_builtins::int::udiv::rust_u128_rem(move _4, const 5u128) -> bb13;\n+//     ...\n+//     _2 = move (_14.0: u128);\n+//     ...\n+//     _17 = const 7i32 as u128 (Misc);\n+//     _15 = const compiler_builtins::int::shift::rust_u128_shro(move _2, move _17) -> bb14;\n+//     ...\n+//     _0 = move (_15.0: u128);\n+//     ...\n+//     assert(!move (_9.1: bool), \"attempt to add with overflow\") -> bb1;\n+//     ...\n+//     assert(!move (_10.1: bool), \"attempt to subtract with overflow\") -> bb2;\n+//     ...\n+//     assert(!move (_11.1: bool), \"attempt to multiply with overflow\") -> bb3;\n+//     ...\n+//     _13 = Eq(const 5u128, const 0u128);\n+//     assert(!move _13, \"attempt to calculate the remainder with a divisor of zero\") -> bb5;\n+//     ...\n+//     assert(!move (_14.1: bool), \"attempt to shift left with overflow\") -> bb6;\n+//     ...\n+//     _16 = const 6i32 as u128 (Misc);\n+//     _14 = const compiler_builtins::int::shift::rust_u128_shlo(move _3, move _16) -> bb12;\n+//     ...\n+//     assert(!move (_15.1: bool), \"attempt to shift right with overflow\") -> bb7;\n+// END rustc.const_unsigned.Lower128Bit.after.mir\n+\n // START rustc.test_signed.Lower128Bit.after.mir\n //     _2 = const compiler_builtins::int::addsub::rust_i128_addo(_1, const 1i128) -> bb10;\n //     ..."}, {"sha": "4058eaef9b0a4e8c09c6dcd991874e978a16ee2c", "filename": "src/test/mir-opt/lower_128bit_test.rs", "status": "modified", "additions": 122, "deletions": 2, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/7eb64b86ce44cc1828dd176a8b981e37ea08fc38/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb64b86ce44cc1828dd176a8b981e37ea08fc38/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs?ref=7eb64b86ce44cc1828dd176a8b981e37ea08fc38", "patch": "@@ -16,6 +16,18 @@\n // compile-flags: -Z lower_128bit_ops=yes -C debug_assertions=no\n \n #![feature(i128_type)]\n+#![feature(const_fn)]\n+\n+static TEST_SIGNED: i128 = const_signed(-222);\n+static TEST_UNSIGNED: u128 = const_unsigned(200);\n+\n+const fn const_signed(mut x: i128) -> i128 {\n+    ((((((x + 1) - 2) * 3) / 4) % 5) << 6) >> 7\n+}\n+\n+const fn const_unsigned(mut x: u128) -> u128 {\n+    ((((((x + 1) - 2) * 3) / 4) % 5) << 6) >> 7\n+}\n \n fn test_signed(mut x: i128) -> i128 {\n     x += 1;\n@@ -39,13 +51,121 @@ fn test_unsigned(mut x: u128) -> u128 {\n     x\n }\n \n+fn check(x: i128, y: u128) {\n+    assert_eq!(test_signed(x), -1);\n+    assert_eq!(const_signed(x), -1);\n+    assert_eq!(TEST_SIGNED, -1);\n+    assert_eq!(test_unsigned(y), 2);\n+    assert_eq!(const_unsigned(y), 2);\n+    assert_eq!(TEST_UNSIGNED, 2);\n+}\n+\n fn main() {\n-    assert_eq!(test_signed(-222), -1);\n-    assert_eq!(test_unsigned(200), 2);\n+    check(-222, 200);\n }\n \n // END RUST SOURCE\n \n+// START rustc.const_signed.Lower128Bit.after.mir\n+//     _8 = _1;\n+//     _9 = const compiler_builtins::int::addsub::rust_i128_addo(move _8, const 1i128) -> bb10;\n+//     ...\n+//     _7 = move (_9.0: i128);\n+//     ...\n+//     _10 = const compiler_builtins::int::addsub::rust_i128_subo(move _7, const 2i128) -> bb11;\n+//     ...\n+//     _6 = move (_10.0: i128);\n+//     ...\n+//     _11 = const compiler_builtins::int::mul::rust_i128_mulo(move _6, const 3i128) -> bb12;\n+//     ...\n+//     _5 = move (_11.0: i128);\n+//     ...\n+//     _12 = Eq(const 4i128, const 0i128);\n+//     assert(!move _12, \"attempt to divide by zero\") -> bb4;\n+//     ...\n+//     _13 = Eq(const 4i128, const -1i128);\n+//     _14 = Eq(_5, const -170141183460469231731687303715884105728i128);\n+//     _15 = BitAnd(move _13, move _14);\n+//     assert(!move _15, \"attempt to divide with overflow\") -> bb5;\n+//     ...\n+//     _4 = const compiler_builtins::int::sdiv::rust_i128_div(move _5, const 4i128) -> bb13;\n+//     ...\n+//     _17 = Eq(const 5i128, const -1i128);\n+//     _18 = Eq(_4, const -170141183460469231731687303715884105728i128);\n+//     _19 = BitAnd(move _17, move _18);\n+//     assert(!move _19, \"attempt to calculate the remainder with overflow\") -> bb7;\n+//     ...\n+//     _3 = const compiler_builtins::int::sdiv::rust_i128_rem(move _4, const 5i128) -> bb15;\n+//     ...\n+//     _2 = move (_20.0: i128);\n+//     ...\n+//     _23 = const 7i32 as u128 (Misc);\n+//     _21 = const compiler_builtins::int::shift::rust_i128_shro(move _2, move _23) -> bb16;\n+//     ...\n+//     _0 = move (_21.0: i128);\n+//     ...\n+//     assert(!move (_9.1: bool), \"attempt to add with overflow\") -> bb1;\n+//     ...\n+//     assert(!move (_10.1: bool), \"attempt to subtract with overflow\") -> bb2;\n+//     ...\n+//     assert(!move (_11.1: bool), \"attempt to multiply with overflow\") -> bb3;\n+//     ...\n+//     _16 = Eq(const 5i128, const 0i128);\n+//     assert(!move _16, \"attempt to calculate the remainder with a divisor of zero\") -> bb6;\n+//     ...\n+//     assert(!move (_20.1: bool), \"attempt to shift left with overflow\") -> bb8;\n+//     ...\n+//     _22 = const 6i32 as u128 (Misc);\n+//     _20 = const compiler_builtins::int::shift::rust_i128_shlo(move _3, move _22) -> bb14;\n+//     ...\n+//     assert(!move (_21.1: bool), \"attempt to shift right with overflow\") -> bb9;\n+// END rustc.const_signed.Lower128Bit.after.mir\n+\n+// START rustc.const_unsigned.Lower128Bit.after.mir\n+//     _8 = _1;\n+//     _9 = const compiler_builtins::int::addsub::rust_u128_addo(move _8, const 1u128) -> bb8;\n+//     ...\n+//     _7 = move (_9.0: u128);\n+//     ...\n+//     _10 = const compiler_builtins::int::addsub::rust_u128_subo(move _7, const 2u128) -> bb9;\n+//     ...\n+//     _6 = move (_10.0: u128);\n+//     ...\n+//     _11 = const compiler_builtins::int::mul::rust_u128_mulo(move _6, const 3u128) -> bb10;\n+//     ...\n+//     _5 = move (_11.0: u128);\n+//     ...\n+//     _12 = Eq(const 4u128, const 0u128);\n+//     assert(!move _12, \"attempt to divide by zero\") -> bb4;\n+//     ...\n+//     _4 = const compiler_builtins::int::udiv::rust_u128_div(move _5, const 4u128) -> bb11;\n+//     ...\n+//     _3 = const compiler_builtins::int::udiv::rust_u128_rem(move _4, const 5u128) -> bb13;\n+//     ...\n+//     _2 = move (_14.0: u128);\n+//     ...\n+//     _17 = const 7i32 as u128 (Misc);\n+//     _15 = const compiler_builtins::int::shift::rust_u128_shro(move _2, move _17) -> bb14;\n+//     ...\n+//     _0 = move (_15.0: u128);\n+//     ...\n+//     assert(!move (_9.1: bool), \"attempt to add with overflow\") -> bb1;\n+//     ...\n+//     assert(!move (_10.1: bool), \"attempt to subtract with overflow\") -> bb2;\n+//     ...\n+//     assert(!move (_11.1: bool), \"attempt to multiply with overflow\") -> bb3;\n+//     ...\n+//     _13 = Eq(const 5u128, const 0u128);\n+//     assert(!move _13, \"attempt to calculate the remainder with a divisor of zero\") -> bb5;\n+//     ...\n+//     assert(!move (_14.1: bool), \"attempt to shift left with overflow\") -> bb6;\n+//     ...\n+//     _16 = const 6i32 as u128 (Misc);\n+//     _14 = const compiler_builtins::int::shift::rust_u128_shlo(move _3, move _16) -> bb12;\n+//     ...\n+//     assert(!move (_15.1: bool), \"attempt to shift right with overflow\") -> bb7;\n+// END rustc.const_unsigned.Lower128Bit.after.mir\n+\n // START rustc.test_signed.Lower128Bit.after.mir\n //     _1 = const compiler_builtins::int::addsub::rust_i128_add(_1, const 1i128) -> bb7;\n //     ..."}]}