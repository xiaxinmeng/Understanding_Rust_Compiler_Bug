{"sha": "2633b85ab2c89822d2c227fc9e81c6ec1c0ed9b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2MzNiODVhYjJjODk4MjJkMmMyMjdmYzllODFjNmVjMWMwZWQ5YjY=", "commit": {"author": {"name": "Ixrec", "email": "ericrhitchcock@gmail.com", "date": "2017-09-17T16:03:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-17T16:03:56Z"}, "message": "Replace str's transmute() calls with pointer casts\n\nAfter the following conversation in #rust-lang:\r\n```\r\n[14:43:50] <Ixrec> TIL the implementation of from_utf_unchecked is literally just \"mem::transmute(x)\"\r\n[14:43:59] <Ixrec> no wonder people keep saying transmute is overpowered\r\n[15:15:30] <eddyb> Ixrec: it should be a pointer cast lol\r\n[15:15:46] <eddyb> unless it doesn't let you\r\n[16:50:34] <Ixrec> https://play.rust-lang.org/?gist=d1e6b629ad9ec1baf64ce261c63845e6&version=stable seems like it does let me\r\n[16:52:35] <eddyb> Ixrec: yeah that's the preferred impl\r\n[16:52:46] <eddyb> Ixrec: it just wasn't in 1.0\r\n[16:52:50] <eddyb> IIRC\r\n[16:53:00] <eddyb> (something something fat pointers)\r\n```\r\nSince I already wrote half of the preferred impls in the playground, might as well make an actual PR.", "tree": {"sha": "153dd6766670875f2940c36f8e057a8bde27eae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/153dd6766670875f2940c36f8e057a8bde27eae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2633b85ab2c89822d2c227fc9e81c6ec1c0ed9b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2633b85ab2c89822d2c227fc9e81c6ec1c0ed9b6", "html_url": "https://github.com/rust-lang/rust/commit/2633b85ab2c89822d2c227fc9e81c6ec1c0ed9b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2633b85ab2c89822d2c227fc9e81c6ec1c0ed9b6/comments", "author": {"login": "Ixrec", "id": 5285357, "node_id": "MDQ6VXNlcjUyODUzNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5285357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ixrec", "html_url": "https://github.com/Ixrec", "followers_url": "https://api.github.com/users/Ixrec/followers", "following_url": "https://api.github.com/users/Ixrec/following{/other_user}", "gists_url": "https://api.github.com/users/Ixrec/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ixrec/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ixrec/subscriptions", "organizations_url": "https://api.github.com/users/Ixrec/orgs", "repos_url": "https://api.github.com/users/Ixrec/repos", "events_url": "https://api.github.com/users/Ixrec/events{/privacy}", "received_events_url": "https://api.github.com/users/Ixrec/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef227f5ffe438783db0add58208d79dd84158c06", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef227f5ffe438783db0add58208d79dd84158c06", "html_url": "https://github.com/rust-lang/rust/commit/ef227f5ffe438783db0add58208d79dd84158c06"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "60f3640446cab3249155760e2129200a2b914dd7", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2633b85ab2c89822d2c227fc9e81c6ec1c0ed9b6/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2633b85ab2c89822d2c227fc9e81c6ec1c0ed9b6/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=2633b85ab2c89822d2c227fc9e81c6ec1c0ed9b6", "patch": "@@ -404,7 +404,7 @@ unsafe fn from_raw_parts_mut<'a>(p: *mut u8, len: usize) -> &'a mut str {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n-    mem::transmute(v)\n+    &*(v as *const [u8] as *const str)\n }\n \n /// Converts a slice of bytes to a string slice without checking\n@@ -429,7 +429,7 @@ pub unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n #[inline]\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {\n-    mem::transmute(v)\n+    &*(v as *mut [u8] as *mut str)\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2447,12 +2447,12 @@ impl StrExt for str {\n \n     #[inline]\n     fn as_bytes(&self) -> &[u8] {\n-        unsafe { mem::transmute(self) }\n+        unsafe { &*(self as *const str as *const [u8]) }\n     }\n \n     #[inline]\n     unsafe fn as_bytes_mut(&mut self) -> &mut [u8] {\n-        mem::transmute(self)\n+        &mut *(self as *mut str as *mut [u8])\n     }\n \n     fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {"}]}