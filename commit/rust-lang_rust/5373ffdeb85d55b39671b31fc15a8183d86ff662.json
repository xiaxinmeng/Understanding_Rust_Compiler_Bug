{"sha": "5373ffdeb85d55b39671b31fc15a8183d86ff662", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNzNmZmRlYjg1ZDU1YjM5NjcxYjMxZmMxNWE4MTgzZDg2ZmY2NjI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-01T09:34:45Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-18T13:06:39Z"}, "message": "suggest inserting underscores for simple cases", "tree": {"sha": "32f654e8e03a3ffe7b672a8ac08f0b43db48f00a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32f654e8e03a3ffe7b672a8ac08f0b43db48f00a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5373ffdeb85d55b39671b31fc15a8183d86ff662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5373ffdeb85d55b39671b31fc15a8183d86ff662", "html_url": "https://github.com/rust-lang/rust/commit/5373ffdeb85d55b39671b31fc15a8183d86ff662", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5373ffdeb85d55b39671b31fc15a8183d86ff662/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06ca1fc0a6d88ff5fbe0dabcc595687861c8c9b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/06ca1fc0a6d88ff5fbe0dabcc595687861c8c9b1", "html_url": "https://github.com/rust-lang/rust/commit/06ca1fc0a6d88ff5fbe0dabcc595687861c8c9b1"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "fc8bb69c5bc6e92b4d67d52281cc6ec4c1f861ad", "filename": "src/non_expressive_names.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5373ffdeb85d55b39671b31fc15a8183d86ff662/src%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5373ffdeb85d55b39671b31fc15a8183d86ff662/src%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnon_expressive_names.rs?ref=5373ffdeb85d55b39671b31fc15a8183d86ff662", "patch": "@@ -3,7 +3,7 @@ use syntax::codemap::Span;\n use syntax::parse::token::InternedString;\n use syntax::ast::*;\n use syntax::visit::{self, FnKind};\n-use utils::{span_note_and_lint, in_macro};\n+use utils::{span_lint_and_then, in_macro};\n use strsim::levenshtein;\n \n /// **What it does:** This lint warns about names that are very similar and thus confusing\n@@ -95,17 +95,35 @@ impl<'a, 'b, 'c> SimilarNamesNameVisitor<'a, 'b, 'c> {\n                existing_name.ends_with(&*interned_name) {\n                 continue;\n             }\n+            let mut split_at = None;\n             if dist == 1 {\n                 // are we doing stuff like a_bar, b_bar, c_bar?\n-                if interned_name.chars().next() != existing_name.chars().next() && interned_name.chars().nth(1) == Some('_') {\n-                    continue;\n+                if interned_name.chars().next() != existing_name.chars().next() {\n+                    if interned_name.chars().nth(1) == Some('_') {\n+                        continue;\n+                    }\n+                    split_at = interned_name.chars().next().map(|c| c.len_utf8());\n                 }\n                 // are we doing stuff like foo_x, foo_y, foo_z?\n-                if interned_name.chars().rev().next() != existing_name.chars().rev().next() && interned_name.chars().rev().nth(1) == Some('_') {\n-                    continue;\n+                if interned_name.chars().rev().next() != existing_name.chars().rev().next() {\n+                    if interned_name.chars().rev().nth(1) == Some('_') {\n+                        continue;\n+                    }\n+                    split_at = interned_name.char_indices().rev().next().map(|(i, _)| i);\n                 }\n             }\n-            span_note_and_lint(self.0.cx, SIMILAR_NAMES, span, \"binding's name is too similar to existing binding\", sp, \"existing binding defined here\");\n+            span_lint_and_then(self.0.cx,\n+                               SIMILAR_NAMES,\n+                               span,\n+                               \"binding's name is too similar to existing binding\",\n+                               |diag| {\n+                                   diag.span_note(sp, \"existing binding defined here\");\n+                                   if let Some(split) = split_at {\n+                                       diag.span_help(span, &format!(\"separate the discriminating character by an underscore like: `{}_{}`\",\n+                                                                     &interned_name[..split],\n+                                                                     &interned_name[split..]));\n+                                   }\n+                               });\n             return;\n         }\n         self.0.names.push((interned_name, span));"}, {"sha": "35dba1a82ca33037ecd70d276a6e0f3f3b83e380", "filename": "tests/compile-fail/non_expressive_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5373ffdeb85d55b39671b31fc15a8183d86ff662/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5373ffdeb85d55b39671b31fc15a8183d86ff662/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnon_expressive_names.rs?ref=5373ffdeb85d55b39671b31fc15a8183d86ff662", "patch": "@@ -29,9 +29,9 @@ fn main() {\n \n     let blubx: i32; //~ NOTE: existing binding defined here\n     let bluby: i32; //~ ERROR: name is too similar\n+    //~| HELP: separate the discriminating character by an underscore like: `blub_y`\n \n     let cake: i32; //~ NOTE: existing binding defined here\n-    let caked: i32; //~ NOTE: existing binding defined here\n-    let cakes: i32; //~ ERROR: name is too similar\n+    let cakes: i32;\n     let coke: i32; //~ ERROR: name is too similar\n }"}]}