{"sha": "8c71b67159e1a3d0863caf28b7cefee0160cb927", "node_id": "C_kwDOAAsO6NoAKDhjNzFiNjcxNTllMWEzZDA4NjNjYWYyOGI3Y2VmZWUwMTYwY2I5Mjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-05T11:41:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-05T11:41:40Z"}, "message": "Auto merge of #98736 - alex:lipo-magic, r=bjorn3\n\nresolve error when attempting to link a universal library on macOS\n\nPreviously attempting to link universal libraries into libraries (but not binaries) would produce an error that \"File too small to be an archive\". This works around this by invoking `lipo -thin` to extract a library for the target platform when passed a univeral library.\n\nFixes #55235\n\nIt's worth acknowledging that this implementation is kind of a horrible hack. Unfortunately I don't know how to do anything better, hopefully this PR will be a jumping off point.", "tree": {"sha": "ce442e01e1f02f2303faee0d685c189b7d2811dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce442e01e1f02f2303faee0d685c189b7d2811dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c71b67159e1a3d0863caf28b7cefee0160cb927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c71b67159e1a3d0863caf28b7cefee0160cb927", "html_url": "https://github.com/rust-lang/rust/commit/8c71b67159e1a3d0863caf28b7cefee0160cb927", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c71b67159e1a3d0863caf28b7cefee0160cb927/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "html_url": "https://github.com/rust-lang/rust/commit/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2"}, {"sha": "c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6", "html_url": "https://github.com/rust-lang/rust/commit/c65c36242e99ddbf787dcdd9bd2d14f42f7cfce6"}], "stats": {"total": 83, "additions": 80, "deletions": 3}, "files": [{"sha": "072902f333d813480f150fa37643f0c3d42b8b9b", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c71b67159e1a3d0863caf28b7cefee0160cb927/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8c71b67159e1a3d0863caf28b7cefee0160cb927/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8c71b67159e1a3d0863caf28b7cefee0160cb927", "patch": "@@ -3319,6 +3319,7 @@ dependencies = [\n  \"rustc_symbol_mangling\",\n  \"rustc_target\",\n  \"smallvec\",\n+ \"tempfile\",\n  \"tracing\",\n ]\n "}, {"sha": "df4a9fea19d740aee21ce707d677c876a454c427", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c71b67159e1a3d0863caf28b7cefee0160cb927/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8c71b67159e1a3d0863caf28b7cefee0160cb927/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=8c71b67159e1a3d0863caf28b7cefee0160cb927", "patch": "@@ -34,3 +34,4 @@ rustc_target = { path = \"../rustc_target\" }\n smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n+tempfile = \"3.2.0\""}, {"sha": "20a063f80fd00d2e0a89535b943086b4e4a945a5", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/8c71b67159e1a3d0863caf28b7cefee0160cb927/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c71b67159e1a3d0863caf28b7cefee0160cb927/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=8c71b67159e1a3d0863caf28b7cefee0160cb927", "patch": "@@ -2,16 +2,20 @@\n \n use std::env;\n use std::ffi::{CStr, CString, OsString};\n-use std::io;\n+use std::fs;\n+use std::io::{self, Write};\n use std::mem;\n use std::path::{Path, PathBuf};\n use std::ptr;\n use std::str;\n \n+use object::read::macho::FatArch;\n+\n use crate::common;\n use crate::llvm::archive_ro::{ArchiveRO, Child};\n use crate::llvm::{self, ArchiveKind, LLVMMachineType, LLVMRustCOFFShortExport};\n use rustc_codegen_ssa::back::archive::{ArchiveBuilder, ArchiveBuilderBuilder};\n+use rustc_data_structures::memmap::Mmap;\n use rustc_session::cstore::DllImport;\n use rustc_session::Session;\n \n@@ -53,21 +57,78 @@ fn llvm_machine_type(cpu: &str) -> LLVMMachineType {\n     }\n }\n \n+fn try_filter_fat_archs(\n+    archs: object::read::Result<&[impl FatArch]>,\n+    target_arch: object::Architecture,\n+    archive_path: &Path,\n+    archive_map_data: &[u8],\n+) -> io::Result<Option<PathBuf>> {\n+    let archs = archs.map_err(|e| io::Error::new(io::ErrorKind::Other, e))?;\n+\n+    let desired = match archs.iter().filter(|a| a.architecture() == target_arch).next() {\n+        Some(a) => a,\n+        None => return Ok(None),\n+    };\n+\n+    let (mut new_f, extracted_path) = tempfile::Builder::new()\n+        .suffix(archive_path.file_name().unwrap())\n+        .tempfile()?\n+        .keep()\n+        .unwrap();\n+\n+    new_f.write_all(\n+        desired.data(archive_map_data).map_err(|e| io::Error::new(io::ErrorKind::Other, e))?,\n+    )?;\n+\n+    Ok(Some(extracted_path))\n+}\n+\n+fn try_extract_macho_fat_archive(\n+    sess: &Session,\n+    archive_path: &Path,\n+) -> io::Result<Option<PathBuf>> {\n+    let archive_map = unsafe { Mmap::map(fs::File::open(&archive_path)?)? };\n+    let target_arch = match sess.target.arch.as_ref() {\n+        \"aarch64\" => object::Architecture::Aarch64,\n+        \"x86_64\" => object::Architecture::X86_64,\n+        _ => return Ok(None),\n+    };\n+\n+    match object::macho::FatHeader::parse(&*archive_map) {\n+        Ok(h) if h.magic.get(object::endian::BigEndian) == object::macho::FAT_MAGIC => {\n+            let archs = object::macho::FatHeader::parse_arch32(&*archive_map);\n+            try_filter_fat_archs(archs, target_arch, archive_path, &*archive_map)\n+        }\n+        Ok(h) if h.magic.get(object::endian::BigEndian) == object::macho::FAT_MAGIC_64 => {\n+            let archs = object::macho::FatHeader::parse_arch64(&*archive_map);\n+            try_filter_fat_archs(archs, target_arch, archive_path, &*archive_map)\n+        }\n+        // Not a FatHeader at all, just return None.\n+        _ => Ok(None),\n+    }\n+}\n+\n impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n     fn add_archive(\n         &mut self,\n         archive: &Path,\n         skip: Box<dyn FnMut(&str) -> bool + 'static>,\n     ) -> io::Result<()> {\n-        let archive_ro = match ArchiveRO::open(archive) {\n+        let mut archive = archive.to_path_buf();\n+        if self.sess.target.llvm_target.contains(\"-apple-macosx\") {\n+            if let Some(new_archive) = try_extract_macho_fat_archive(&self.sess, &archive)? {\n+                archive = new_archive\n+            }\n+        }\n+        let archive_ro = match ArchiveRO::open(&archive) {\n             Ok(ar) => ar,\n             Err(e) => return Err(io::Error::new(io::ErrorKind::Other, e)),\n         };\n         if self.additions.iter().any(|ar| ar.path() == archive) {\n             return Ok(());\n         }\n         self.additions.push(Addition::Archive {\n-            path: archive.to_path_buf(),\n+            path: archive,\n             archive: archive_ro,\n             skip: Box::new(skip),\n         });"}, {"sha": "cc99375db6902410e10d0359ad6191c1084cbd97", "filename": "src/test/run-make/macos-fat-archive/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c71b67159e1a3d0863caf28b7cefee0160cb927/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8c71b67159e1a3d0863caf28b7cefee0160cb927/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2FMakefile?ref=8c71b67159e1a3d0863caf28b7cefee0160cb927", "patch": "@@ -0,0 +1,10 @@\n+# only-macos\n+\n+-include ../../run-make-fulldeps/tools.mk\n+\n+\"$(TMPDIR)\"/libnative-library.a: native-library.c\n+\t$(CC) -arch arm64 -arch x86_64 native-library.c -c -o \"$(TMPDIR)\"/native-library.o\n+\t$(AR) crs \"$(TMPDIR)\"/libnative-library.a \"$(TMPDIR)\"/native-library.o\n+\n+all: \"$(TMPDIR)\"/libnative-library.a\n+\t$(RUSTC) lib.rs --crate-type=lib -L \"native=$(TMPDIR)\" -l static=native-library"}, {"sha": "9943a266c3e4c857aa6439aea3ac0161f8d66691", "filename": "src/test/run-make/macos-fat-archive/lib.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c71b67159e1a3d0863caf28b7cefee0160cb927/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c71b67159e1a3d0863caf28b7cefee0160cb927/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2Flib.rs?ref=8c71b67159e1a3d0863caf28b7cefee0160cb927", "patch": "@@ -0,0 +1,3 @@\n+extern \"C\" {\n+    pub fn native_func();\n+}"}, {"sha": "d300fdf1c1742457d38238032f368dc10853d629", "filename": "src/test/run-make/macos-fat-archive/native-library.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c71b67159e1a3d0863caf28b7cefee0160cb927/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2Fnative-library.c", "raw_url": "https://github.com/rust-lang/rust/raw/8c71b67159e1a3d0863caf28b7cefee0160cb927/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2Fnative-library.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmacos-fat-archive%2Fnative-library.c?ref=8c71b67159e1a3d0863caf28b7cefee0160cb927", "patch": "@@ -0,0 +1 @@\n+void native_func() {}"}]}