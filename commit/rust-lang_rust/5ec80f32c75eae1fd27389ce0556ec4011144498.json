{"sha": "5ec80f32c75eae1fd27389ce0556ec4011144498", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYzgwZjMyYzc1ZWFlMWZkMjczODljZTA1NTZlYzQwMTExNDQ0OTg=", "commit": {"author": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2021-06-09T07:39:11Z"}, "committer": {"name": "Bastian Kersting", "email": "bastian@cmbt.de", "date": "2021-06-09T07:43:25Z"}, "message": "Refactored multiline check", "tree": {"sha": "0c7ce6e0a715f79942ea3392885ff6ff38bbad76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c7ce6e0a715f79942ea3392885ff6ff38bbad76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ec80f32c75eae1fd27389ce0556ec4011144498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ec80f32c75eae1fd27389ce0556ec4011144498", "html_url": "https://github.com/rust-lang/rust/commit/5ec80f32c75eae1fd27389ce0556ec4011144498", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ec80f32c75eae1fd27389ce0556ec4011144498/comments", "author": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "1c3t3a", "id": 45260993, "node_id": "MDQ6VXNlcjQ1MjYwOTkz", "avatar_url": "https://avatars.githubusercontent.com/u/45260993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/1c3t3a", "html_url": "https://github.com/1c3t3a", "followers_url": "https://api.github.com/users/1c3t3a/followers", "following_url": "https://api.github.com/users/1c3t3a/following{/other_user}", "gists_url": "https://api.github.com/users/1c3t3a/gists{/gist_id}", "starred_url": "https://api.github.com/users/1c3t3a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/1c3t3a/subscriptions", "organizations_url": "https://api.github.com/users/1c3t3a/orgs", "repos_url": "https://api.github.com/users/1c3t3a/repos", "events_url": "https://api.github.com/users/1c3t3a/events{/privacy}", "received_events_url": "https://api.github.com/users/1c3t3a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bf8303c4768e91deb3ba02f4c8a846166b5600b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf8303c4768e91deb3ba02f4c8a846166b5600b", "html_url": "https://github.com/rust-lang/rust/commit/6bf8303c4768e91deb3ba02f4c8a846166b5600b"}], "stats": {"total": 28, "additions": 3, "deletions": 25}, "files": [{"sha": "da3e30af35ca4ffd7e2a8de07ef16ce6e028e04c", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5ec80f32c75eae1fd27389ce0556ec4011144498/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ec80f32c75eae1fd27389ce0556ec4011144498/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=5ec80f32c75eae1fd27389ce0556ec4011144498", "patch": "@@ -1,11 +1,10 @@\n use crate::rustc_lint::LintContext;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_macro_callsite;\n-use clippy_utils::{get_parent_expr_for_hir, in_macro, sugg};\n+use clippy_utils::{in_macro, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::Expr;\n-use rustc_hir::{Block, BlockCheckMode, ExprKind};\n+use rustc_hir::{Block, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -47,7 +46,7 @@ impl LateLintPass<'_> for SemicolonIfNothingReturned {\n             if t_expr.is_unit();\n             if let snippet = snippet_with_macro_callsite(cx, expr.span, \"}\");\n             if !snippet.ends_with('}');\n-            if !check_if_inside_block_on_same_line(cx, block, expr);\n+            if cx.sess().source_map().is_multiline(block.span);\n             then {\n                 // filter out the desugared `for` loop\n                 if let ExprKind::DropTemps(..) = &expr.kind {\n@@ -69,24 +68,3 @@ impl LateLintPass<'_> for SemicolonIfNothingReturned {\n         }\n     }\n }\n-\n-/// Check if this block is inside a closure or an unsafe block or a normal on the same line.\n-fn check_if_inside_block_on_same_line<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    block: &'tcx Block<'tcx>,\n-    last_expr: &'tcx Expr<'_>,\n-) -> bool {\n-    if_chain! {\n-        if let Some(parent) = get_parent_expr_for_hir(cx, block.hir_id);\n-\n-        if !matches!(block.rules, BlockCheckMode::DefaultBlock) ||\n-        matches!(parent.kind, ExprKind::Closure(..) | ExprKind::Block(..));\n-\n-        if block.stmts.is_empty();\n-        then {\n-            let source_map = cx.sess().source_map();\n-            return !source_map.is_multiline(parent.span.to(last_expr.span));\n-        }\n-    }\n-    false\n-}"}]}