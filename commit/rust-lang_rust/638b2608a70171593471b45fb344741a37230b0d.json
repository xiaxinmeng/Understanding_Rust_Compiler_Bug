{"sha": "638b2608a70171593471b45fb344741a37230b0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzOGIyNjA4YTcwMTcxNTkzNDcxYjQ1ZmIzNDQ3NDFhMzcyMzBiMGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-27T11:01:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-27T11:01:11Z"}, "message": "Auto merge of #28689 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #28664, #28673, #28681, #28682, #28688\n- Failed merges:", "tree": {"sha": "dc53b7eac13b589e6e4135493bf24892cd09eb06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc53b7eac13b589e6e4135493bf24892cd09eb06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/638b2608a70171593471b45fb344741a37230b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/638b2608a70171593471b45fb344741a37230b0d", "html_url": "https://github.com/rust-lang/rust/commit/638b2608a70171593471b45fb344741a37230b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/638b2608a70171593471b45fb344741a37230b0d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "219eca11b044de3644b3e9101124513c1a842b09", "url": "https://api.github.com/repos/rust-lang/rust/commits/219eca11b044de3644b3e9101124513c1a842b09", "html_url": "https://github.com/rust-lang/rust/commit/219eca11b044de3644b3e9101124513c1a842b09"}, {"sha": "c34f3eaebc2f805864d3de9c7ce257eb41a6def2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c34f3eaebc2f805864d3de9c7ce257eb41a6def2", "html_url": "https://github.com/rust-lang/rust/commit/c34f3eaebc2f805864d3de9c7ce257eb41a6def2"}], "stats": {"total": 317, "additions": 195, "deletions": 122}, "files": [{"sha": "32cd4193d8855983b2a645479e890d721c540525", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -49,16 +49,7 @@ impl<E> Clone for EnumSet<E> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<E:CLike + fmt::Debug> fmt::Debug for EnumSet<E> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(fmt, \"{{\"));\n-        let mut first = true;\n-        for e in self {\n-            if !first {\n-                try!(write!(fmt, \", \"));\n-            }\n-            try!(write!(fmt, \"{:?}\", e));\n-            first = false;\n-        }\n-        write!(fmt, \"}}\")\n+        fmt.debug_set().entries(self).finish()\n     }\n }\n "}, {"sha": "124fe3fab56e9ae5a3cf77f11925116f055bd18c", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -506,8 +506,6 @@ impl str {\n     ///\n     /// # Examples\n     /// ```\n-    /// #![feature(str_split_at)]\n-    ///\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     /// let first_space = s.find(' ').unwrap_or(s.len());\n     /// let (a, b) = s.split_at(first_space);"}, {"sha": "d645de028ce468ad17216bff24d71f0dd64aebf0", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -753,8 +753,6 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(split_off)]\n-    ///\n     /// let mut vec = vec![1,2,3];\n     /// let vec2 = vec.split_off(1);\n     /// assert_eq!(vec, [1]);"}, {"sha": "f7efe9a38dfb9c5170209ead83499404776dafb3", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -1319,8 +1319,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(split_off)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<_> = vec![1,2,3].into_iter().collect();\n@@ -1406,8 +1404,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(vec_deque_retain)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1787,14 +1783,7 @@ impl<'a, T: 'a + Copy> Extend<&'a T> for VecDeque<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: fmt::Debug> fmt::Debug for VecDeque<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        try!(write!(f, \"[\"));\n-\n-        for (i, e) in self.iter().enumerate() {\n-            if i != 0 { try!(write!(f, \", \")); }\n-            try!(write!(f, \"{:?}\", *e));\n-        }\n-\n-        write!(f, \"]\")\n+        f.debug_list().entries(self).finish()\n     }\n }\n "}, {"sha": "63c7bc15c8fc66f7adb46df4e8ad04cd2ada78ab", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![feature(ascii)]\n-#![feature(append)]\n #![feature(binary_heap_extras)]\n #![feature(box_syntax)]\n #![feature(btree_range)]\n@@ -29,18 +28,14 @@\n #![feature(set_recovery)]\n #![feature(slice_bytes)]\n #![feature(slice_splits)]\n-#![feature(split_off)]\n #![feature(step_by)]\n #![feature(str_char)]\n #![feature(str_escape)]\n #![feature(str_match_indices)]\n-#![feature(str_split_at)]\n #![feature(str_utf16)]\n-#![feature(box_str)]\n #![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n-#![feature(vec_deque_retain)]\n #![feature(vec_push_all)]\n \n #[macro_use] extern crate log;"}, {"sha": "3def56f94a1818b62cc631f80782500b21e4a4ec", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -43,7 +43,7 @@ use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap;\n use syntax::codemap::{Span, DUMMY_SP};\n-use util::nodemap::{FnvHashMap, NodeMap};\n+use util::nodemap::{FnvHashMap, FnvHashSet, NodeMap};\n \n use self::combine::CombineFields;\n use self::region_inference::{RegionVarBindings, RegionSnapshot};\n@@ -92,6 +92,10 @@ pub struct InferCtxt<'a, 'tcx: 'a> {\n \n     pub fulfillment_cx: RefCell<traits::FulfillmentContext<'tcx>>,\n \n+    // the set of predicates on which errors have been reported, to\n+    // avoid reporting the same error twice.\n+    pub reported_trait_errors: RefCell<FnvHashSet<traits::TraitErrorKey<'tcx>>>,\n+\n     // This is a temporary field used for toggling on normalization in the inference context,\n     // as we move towards the approach described here:\n     // https://internals.rust-lang.org/t/flattening-the-contexts-for-fun-and-profit/2293\n@@ -374,6 +378,7 @@ pub fn new_infer_ctxt<'a, 'tcx>(tcx: &'a ty::ctxt<'tcx>,\n         region_vars: RegionVarBindings::new(tcx),\n         parameter_environment: param_env.unwrap_or(tcx.empty_parameter_environment()),\n         fulfillment_cx: RefCell::new(traits::FulfillmentContext::new(errors_will_be_reported)),\n+        reported_trait_errors: RefCell::new(FnvHashSet()),\n         normalize: false,\n         err_count_on_creation: tcx.sess.err_count()\n     }"}, {"sha": "017c8f1e42bec94049b9460e66cc1ed92a9ce913", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -348,13 +348,17 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n     // this properly would result in the necessity of computing *type*\n     // reachability, which might result in a compile time loss.\n     fn mark_destructors_reachable(&mut self) {\n-        for adt in self.tcx.adt_defs() {\n-            if let Some(destructor_def_id) = adt.destructor() {\n-                if destructor_def_id.is_local() {\n-                    self.reachable_symbols.insert(destructor_def_id.node);\n+        let drop_trait = match self.tcx.lang_items.drop_trait() {\n+            Some(id) => self.tcx.lookup_trait_def(id), None => { return }\n+        };\n+        drop_trait.for_each_impl(self.tcx, |drop_impl| {\n+            for destructor in &self.tcx.impl_items.borrow()[&drop_impl] {\n+                let destructor_did = destructor.def_id();\n+                if destructor_did.is_local() {\n+                    self.reachable_symbols.insert(destructor_did.node);\n                 }\n             }\n-        }\n+        })\n     }\n }\n "}, {"sha": "43b3831604bbf8819d5fabf238e5a8c3e075999c", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -28,11 +28,32 @@ use middle::def_id::DefId;\n use middle::infer::InferCtxt;\n use middle::ty::{self, ToPredicate, HasTypeFlags, ToPolyTraitRef, TraitRef, Ty};\n use middle::ty::fold::TypeFoldable;\n-use std::collections::HashMap;\n+use util::nodemap::{FnvHashMap, FnvHashSet};\n+\n use std::fmt;\n use syntax::codemap::Span;\n use syntax::attr::{AttributeMethods, AttrMetaMethods};\n \n+#[derive(Debug, PartialEq, Eq, Hash)]\n+pub struct TraitErrorKey<'tcx> {\n+    is_warning: bool,\n+    span: Span,\n+    predicate: ty::Predicate<'tcx>\n+}\n+\n+impl<'tcx> TraitErrorKey<'tcx> {\n+    fn from_error<'a>(infcx: &InferCtxt<'a, 'tcx>,\n+                      e: &FulfillmentError<'tcx>) -> Self {\n+        let predicate =\n+            infcx.resolve_type_vars_if_possible(&e.obligation.predicate);\n+        TraitErrorKey {\n+            is_warning: is_warning(&e.obligation),\n+            span: e.obligation.cause.span,\n+            predicate: infcx.tcx.erase_regions(&predicate)\n+        }\n+    }\n+}\n+\n pub fn report_fulfillment_errors<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                            errors: &Vec<FulfillmentError<'tcx>>) {\n     for error in errors {\n@@ -42,6 +63,13 @@ pub fn report_fulfillment_errors<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n \n fn report_fulfillment_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                       error: &FulfillmentError<'tcx>) {\n+    let error_key = TraitErrorKey::from_error(infcx, error);\n+    debug!(\"report_fulfillment_errors({:?}) - key={:?}\",\n+           error, error_key);\n+    if !infcx.reported_trait_errors.borrow_mut().insert(error_key) {\n+        debug!(\"report_fulfillment_errors: skipping duplicate\");\n+        return;\n+    }\n     match error.code {\n         FulfillmentErrorCode::CodeSelectionError(ref e) => {\n             report_selection_error(infcx, &error.obligation, e);\n@@ -97,7 +125,7 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                                (gen.name.as_str().to_string(),\n                                                 trait_ref.substs.types.get(param, i)\n                                                          .to_string())\n-                                              }).collect::<HashMap<String, String>>();\n+                                              }).collect::<FnvHashMap<String, String>>();\n                 generic_map.insert(\"Self\".to_string(),\n                                    trait_ref.self_ty().to_string());\n                 let parser = Parser::new(&istring);\n@@ -308,7 +336,11 @@ pub fn report_object_safety_error<'tcx>(tcx: &ty::ctxt<'tcx>,\n         \"the trait `{}` cannot be made into an object\",\n         tcx.item_path_str(trait_def_id));\n \n+    let mut reported_violations = FnvHashSet();\n     for violation in violations {\n+        if !reported_violations.insert(violation.clone()) {\n+            continue;\n+        }\n         match violation {\n             ObjectSafetyViolation::SizedSelf => {\n                 tcx.sess.fileline_note("}, {"sha": "d4e6f693d965d79c7e008948975e912924bdaca1", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -49,6 +49,12 @@ pub struct FulfillmentContext<'tcx> {\n     // than the `SelectionCache`: it avoids duplicate errors and\n     // permits recursive obligations, which are often generated from\n     // traits like `Send` et al.\n+    //\n+    // Note that because of type inference, a predicate can still\n+    // occur twice in the predicates list, for example when 2\n+    // initially-distinct type variables are unified after being\n+    // inserted. Deduplicating the predicate set on selection had a\n+    // significant performance cost the last time I checked.\n     duplicate_set: FulfilledPredicates<'tcx>,\n \n     // A list of all obligations that have been registered with this"}, {"sha": "a037621f5c02545265b5fc7ae4a87845083dbe9a", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -21,10 +21,12 @@ use middle::subst;\n use middle::ty::{self, HasTypeFlags, Ty};\n use middle::ty::fold::TypeFoldable;\n use middle::infer::{self, fixup_err_to_string, InferCtxt};\n+\n use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap::{Span, DUMMY_SP};\n \n+pub use self::error_reporting::TraitErrorKey;\n pub use self::error_reporting::report_fulfillment_errors;\n pub use self::error_reporting::report_overflow_error;\n pub use self::error_reporting::report_selection_error;"}, {"sha": "5768e13c5bf2ddb3917955ff5eb943279ae7564f", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -27,7 +27,7 @@ use middle::ty::{self, ToPolyTraitRef, Ty};\n use std::rc::Rc;\n use syntax::ast;\n \n-#[derive(Debug)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub enum ObjectSafetyViolation<'tcx> {\n     /// Self : Sized declared on the trait\n     SizedSelf,"}, {"sha": "f32e86e276c711380c07803e9b707bc75def7e87", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -245,9 +245,6 @@ pub struct ctxt<'tcx> {\n     /// True if the variance has been computed yet; false otherwise.\n     pub variance_computed: Cell<bool>,\n \n-    /// A method will be in this list if and only if it is a destructor.\n-    pub destructors: RefCell<DefIdSet>,\n-\n     /// Maps a DefId of a type to a list of its inherent impls.\n     /// Contains implementations of methods that are inherent to a type.\n     /// Methods in these implementations don't need to be exported.\n@@ -475,7 +472,6 @@ impl<'tcx> ctxt<'tcx> {\n             normalized_cache: RefCell::new(FnvHashMap()),\n             lang_items: lang_items,\n             provided_method_sources: RefCell::new(DefIdMap()),\n-            destructors: RefCell::new(DefIdSet()),\n             inherent_impls: RefCell::new(DefIdMap()),\n             impl_items: RefCell::new(DefIdMap()),\n             used_unsafe: RefCell::new(NodeSet()),"}, {"sha": "c3e7fd4ceca21b47bb0479c10ff2cbafbf8c99e3", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -272,6 +272,20 @@ impl<'tcx> Method<'tcx> {\n     }\n }\n \n+impl<'tcx> PartialEq for Method<'tcx> {\n+    #[inline]\n+    fn eq(&self, other: &Self) -> bool { self.def_id == other.def_id }\n+}\n+\n+impl<'tcx> Eq for Method<'tcx> {}\n+\n+impl<'tcx> Hash for Method<'tcx> {\n+    #[inline]\n+    fn hash<H: Hasher>(&self, s: &mut H) {\n+        self.def_id.hash(s)\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug)]\n pub struct AssociatedConst<'tcx> {\n     pub name: Name,\n@@ -1681,7 +1695,6 @@ impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n     }\n \n     pub fn set_destructor(&self, dtor: DefId) {\n-        assert!(self.destructor.get().is_none());\n         self.destructor.set(Some(dtor));\n     }\n \n@@ -2315,11 +2328,6 @@ impl<'tcx> ctxt<'tcx> {\n         self.lookup_adt_def_master(did)\n     }\n \n-    /// Return the list of all interned ADT definitions\n-    pub fn adt_defs(&self) -> Vec<AdtDef<'tcx>> {\n-        self.adt_defs.borrow().values().cloned().collect()\n-    }\n-\n     /// Given the did of an item, returns its full set of predicates.\n     pub fn lookup_predicates(&self, did: DefId) -> GenericPredicates<'tcx> {\n         lookup_locally_or_in_crate_store("}, {"sha": "fa2c098e2cff7c98ab7472f604c8427b44b0dec8", "filename": "src/librustc_front/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc_front%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc_front%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flib.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -36,7 +36,6 @@\n #![feature(staged_api)]\n #![feature(str_char)]\n #![feature(filling_drop)]\n-#![cfg_attr(test, feature(test))]\n \n extern crate serialize;\n #[macro_use] extern crate log;"}, {"sha": "90f877b29a13480d179519bfebdc54dc163f2642", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -1210,15 +1210,14 @@ impl LintPass for DropWithReprExtern {\n \n impl LateLintPass for DropWithReprExtern {\n     fn check_crate(&mut self, ctx: &LateContext, _: &hir::Crate) {\n-        for dtor_did in ctx.tcx.destructors.borrow().iter() {\n-            let (drop_impl_did, dtor_self_type) =\n-                if dtor_did.is_local() {\n-                    let impl_did = ctx.tcx.map.get_parent_did(dtor_did.node);\n-                    let ty = ctx.tcx.lookup_item_type(impl_did).ty;\n-                    (impl_did, ty)\n-                } else {\n-                    continue;\n-                };\n+        let drop_trait = match ctx.tcx.lang_items.drop_trait() {\n+            Some(id) => ctx.tcx.lookup_trait_def(id), None => { return }\n+        };\n+        drop_trait.for_each_impl(ctx.tcx, |drop_impl_did| {\n+            if !drop_impl_did.is_local() {\n+                return;\n+            }\n+            let dtor_self_type = ctx.tcx.lookup_item_type(drop_impl_did).ty;\n \n             match dtor_self_type.sty {\n                 ty::TyEnum(self_type_def, _) |\n@@ -1244,6 +1243,6 @@ impl LateLintPass for DropWithReprExtern {\n                 }\n                 _ => {}\n             }\n-        }\n+        })\n     }\n }"}, {"sha": "1b3242eb97d33caafacfb0b38aea31c07ed83ae8", "filename": "src/librustc_trans/back/archive.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc_trans%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc_trans%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Farchive.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -145,10 +145,13 @@ impl<'a> ArchiveBuilder<'a> {\n \n     /// Adds all of the contents of a native library to this archive. This will\n     /// search in the relevant locations for a library named `name`.\n-    pub fn add_native_library(&mut self, name: &str) -> io::Result<()> {\n+    pub fn add_native_library(&mut self, name: &str) {\n         let location = find_library(name, &self.config.lib_search_paths,\n                                     self.config.sess);\n-        self.add_archive(&location, name, |_| false)\n+        self.add_archive(&location, name, |_| false).unwrap_or_else(|e| {\n+            self.config.sess.fatal(&format!(\"failed to add native library {}: {}\",\n+                                            location.to_string_lossy(), e));\n+        });\n     }\n \n     /// Adds all of the contents of the rlib at the specified path to this"}, {"sha": "4e493e6779c667ae2492d192b879c88450161820", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -616,7 +616,7 @@ fn link_rlib<'a>(sess: &'a Session,\n \n     for &(ref l, kind) in sess.cstore.get_used_libraries().borrow().iter() {\n         match kind {\n-            cstore::NativeStatic => ab.add_native_library(&l).unwrap(),\n+            cstore::NativeStatic => ab.add_native_library(&l),\n             cstore::NativeFramework | cstore::NativeUnknown => {}\n         }\n     }\n@@ -792,7 +792,7 @@ fn link_staticlib(sess: &Session, objects: &[PathBuf], out_filename: &Path,\n         ab.build();\n     }\n     if !sess.target.target.options.no_compiler_rt {\n-        ab.add_native_library(\"compiler-rt\").unwrap();\n+        ab.add_native_library(\"compiler-rt\");\n     }\n \n     let mut all_native_libs = vec![];"}, {"sha": "b0e81803ba72f5d1df5deea26fa42cb86d0c5ee2", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -620,13 +620,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n             ty::TraitContainer(trait_def_id) => {\n                 callee::check_legal_trait_for_method_call(self.fcx.ccx, self.span, trait_def_id)\n             }\n-            ty::ImplContainer(..) => {\n-                // Since `drop` is a trait method, we expect that any\n-                // potential calls to it will wind up in the other\n-                // arm. But just to be sure, check that the method id\n-                // does not appear in the list of destructors.\n-                assert!(!self.tcx().destructors.borrow().contains(&pick.item.def_id()));\n-            }\n+            ty::ImplContainer(..) => {}\n         }\n     }\n "}, {"sha": "2003d7eea591c06f94888b8b1f9b3b668ad5bfe1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -431,17 +431,19 @@ pub fn check_item_bodies(ccx: &CrateCtxt) {\n }\n \n pub fn check_drop_impls(ccx: &CrateCtxt) {\n-    for drop_method_did in ccx.tcx.destructors.borrow().iter() {\n-        if drop_method_did.is_local() {\n-            let drop_impl_did = ccx.tcx.map.get_parent_did(drop_method_did.node);\n+    let drop_trait = match ccx.tcx.lang_items.drop_trait() {\n+        Some(id) => ccx.tcx.lookup_trait_def(id), None => { return }\n+    };\n+    drop_trait.for_each_impl(ccx.tcx, |drop_impl_did| {\n+        if drop_impl_did.is_local() {\n             match dropck::check_drop_impl(ccx.tcx, drop_impl_did) {\n                 Ok(()) => {}\n                 Err(()) => {\n                     assert!(ccx.tcx.sess.has_errors());\n                 }\n             }\n         }\n-    }\n+    });\n \n     ccx.tcx.sess.abort_if_errors();\n }"}, {"sha": "0c152a419d25f56ce19ec7f8a5913af2eef7b626", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n         // Populate the table of destructors. It might seem a bit strange to\n         // do this here, but it's actually the most convenient place, since\n         // the coherence tables contain the trait -> type mappings.\n-        self.populate_destructor_table();\n+        self.populate_destructors();\n \n         // Check to make sure implementations of `Copy` are legal.\n         self.check_implementations_of_copy();\n@@ -286,7 +286,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n     // Destructors\n     //\n \n-    fn populate_destructor_table(&self) {\n+    fn populate_destructors(&self) {\n         let tcx = self.crate_context.tcx;\n         let drop_trait = match tcx.lang_items.drop_trait() {\n             Some(id) => id, None => { return }\n@@ -309,9 +309,6 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                 ty::TyEnum(type_def, _) |\n                 ty::TyStruct(type_def, _) => {\n                     type_def.set_destructor(method_def_id.def_id());\n-                    tcx.destructors\n-                       .borrow_mut()\n-                       .insert(method_def_id.def_id());\n                 }\n                 _ => {\n                     // Destructors only work on nominal types."}, {"sha": "9dce1b28c97b5dbcd4d5fc9700bc8563702ecd8e", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -386,6 +386,9 @@\n                 if ((aaa.item.ty === TY_PRIMITIVE) && (bbb.item.ty !== TY_PRIMITIVE)) {\n                     return -1;\n                 }\n+                if ((bbb.item.ty === TY_PRIMITIVE) && (aaa.item.ty !== TY_PRIMITIVE)) {\n+                    return 1;\n+                }\n \n                 // sort by description (no description goes later)\n                 a = (aaa.item.desc === '');\n@@ -572,6 +575,10 @@\n                         displayPath = item.path + '::';\n                         href = rootPath + item.path.replace(/::/g, '/') +\n                                '/index.html';\n+                    } else if (type === \"primitive\") {\n+                        displayPath = \"\";\n+                        href = rootPath + item.path.replace(/::/g, '/') +\n+                               '/' + type + '.' + name + '.html';\n                     } else if (item.parent !== undefined) {\n                         var myparent = item.parent;\n                         var anchor = '#' + type + '.' + name;"}, {"sha": "10c7190ca0c47caa4508f45a53db79a5f31d0a60", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -249,8 +249,8 @@\n #![feature(wrapping)]\n #![feature(zero_one)]\n #![cfg_attr(windows, feature(str_utf16))]\n-#![cfg_attr(test, feature(float_from_str_radix, range_inclusive, float_extras, hash_default))]\n-#![cfg_attr(test, feature(test, rustc_private, float_consts))]\n+#![cfg_attr(test, feature(float_from_str_radix, range_inclusive, float_extras))]\n+#![cfg_attr(test, feature(test, rustc_private))]\n #![cfg_attr(target_env = \"msvc\", feature(link_args))]\n \n // Don't link to std. We are std."}, {"sha": "c5a47f3e5358f1440330edbfc7427c32d4bf7f10", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -32,5 +32,4 @@ fn ice<A>(a: A) {\n     let r = loop {};\n     r = r + a;\n     //~^ ERROR not implemented\n-    //~| ERROR not implemented\n }"}, {"sha": "c9374d42938002979a871480b1e1b94987ea567b", "filename": "src/test/compile-fail/associated-types-path-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -39,7 +39,6 @@ pub fn f1_int_uint() {\n pub fn f1_uint_uint() {\n     f1(2u32, 4u32);\n     //~^ ERROR the trait `Foo` is not implemented\n-    //~| ERROR the trait `Foo` is not implemented\n }\n \n pub fn f1_uint_int() {"}, {"sha": "90cbbf242aad4b2b07ac0cb751444cb1cda22943", "filename": "src/test/compile-fail/coerce-unsafe-to-closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fcoerce-unsafe-to-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fcoerce-unsafe-to-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-unsafe-to-closure.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -11,5 +11,4 @@\n fn main() {\n     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n }"}, {"sha": "a8f47ab92e52950040606ebc5174b7e47d8373c0", "filename": "src/test/compile-fail/const-eval-overflow-4b.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow-4b.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -23,7 +23,6 @@ const A_I8_T\n     : [u32; (i8::MAX as i8 + 1u8) as usize]\n     //~^ ERROR mismatched types\n     //~| the trait `core::ops::Add<u8>` is not implemented for the type `i8`\n-    //~| the trait `core::ops::Add<u8>` is not implemented for the type `i8`\n     = [0; (i8::MAX as usize) + 1];\n \n fn main() {\n@@ -33,4 +32,3 @@ fn main() {\n fn foo<T:fmt::Debug>(x: T) {\n     println!(\"{:?}\", x);\n }\n-"}, {"sha": "e9dd1cb719dbcc88455cab8a61d517fa6e37e77d", "filename": "src/test/compile-fail/fn-variance-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-variance-1.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -20,10 +20,8 @@ fn main() {\n     apply(&3, takes_imm);\n     apply(&3, takes_mut);\n     //~^ ERROR (values differ in mutability)\n-    //~| ERROR (values differ in mutability)\n \n     apply(&mut 3, takes_mut);\n     apply(&mut 3, takes_imm);\n     //~^ ERROR (values differ in mutability)\n-    //~| ERROR (values differ in mutability)\n }"}, {"sha": "c77683045170e11675cf029c64b20f169c16f346", "filename": "src/test/compile-fail/for-loop-bogosity.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-bogosity.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -25,9 +25,6 @@ pub fn main() {\n         y: 2,\n     };\n     for x in bogus { //~ ERROR `core::iter::Iterator` is not implemented for the type `MyStruct`\n-    //~^ ERROR\n-    //~^^ ERROR\n-    // FIXME(#21528) not fulfilled obligation error should be reported once, not thrice\n         drop(x);\n     }\n }"}, {"sha": "3d3b7bc1bcb430b30416e4f77ac0a2c656a220c8", "filename": "src/test/compile-fail/indexing-requires-a-uint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findexing-requires-a-uint.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -14,7 +14,6 @@\n fn main() {\n     fn bar<T>(_: T) {}\n     [0][0u8]; //~ ERROR: the trait `core::ops::Index<u8>` is not implemented\n-    //~^ ERROR: the trait `core::ops::Index<u8>` is not implemented\n \n     [0][0]; // should infer to be a usize\n "}, {"sha": "f78d677679bc88ed9d4cd75b31b91901c704c98d", "filename": "src/test/compile-fail/integral-indexing.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -14,21 +14,13 @@ pub fn main() {\n     v[3_usize];\n     v[3];\n     v[3u8];  //~ERROR the trait `core::ops::Index<u8>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<u8>` is not implemented\n     v[3i8];  //~ERROR the trait `core::ops::Index<i8>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<i8>` is not implemented\n     v[3u32]; //~ERROR the trait `core::ops::Index<u32>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<u32>` is not implemented\n     v[3i32]; //~ERROR the trait `core::ops::Index<i32>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<i32>` is not implemented\n     s.as_bytes()[3_usize];\n     s.as_bytes()[3];\n     s.as_bytes()[3u8];  //~ERROR the trait `core::ops::Index<u8>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<u8>` is not implemented\n     s.as_bytes()[3i8];  //~ERROR the trait `core::ops::Index<i8>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<i8>` is not implemented\n     s.as_bytes()[3u32]; //~ERROR the trait `core::ops::Index<u32>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<u32>` is not implemented\n     s.as_bytes()[3i32]; //~ERROR the trait `core::ops::Index<i32>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<i32>` is not implemented\n }"}, {"sha": "69899105bc3178720a9c880b5f7efc61c1b0724f", "filename": "src/test/compile-fail/issue-11771.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-11771.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-11771.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11771.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -12,12 +12,10 @@ fn main() {\n     let x = ();\n     1 +\n     x //~^ ERROR E0277\n-      //~| ERROR E0277\n     ;\n \n     let x: () = ();\n     1 +\n     x //~^ ERROR E0277\n-      //~| ERROR E0277\n     ;\n }"}, {"sha": "13e677d72bc1e35c0cef924ac7ba63c0dd789a61", "filename": "src/test/compile-fail/issue-13352.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-13352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-13352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13352.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -18,5 +18,4 @@ fn main() {\n     });\n     2_usize + (loop {});\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n }"}, {"sha": "6b19cb0b68f10e6c294d9fe30d4c226df3b37b3b", "filename": "src/test/compile-fail/issue-14084.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -14,5 +14,4 @@\n fn main() {\n     in () { 0 };\n     //~^ ERROR: the trait `core::ops::Placer<_>` is not implemented\n-    //~| ERROR: the trait `core::ops::Placer<_>` is not implemented\n }"}, {"sha": "f2d65af9cdfc80276be064f05092f903f8be64d3", "filename": "src/test/compile-fail/issue-20605.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20605.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -11,9 +11,6 @@\n fn changer<'a>(mut things: Box<Iterator<Item=&'a mut u8>>) {\n     for item in *things { *item = 0 }\n //~^ ERROR the trait `core::marker::Sized` is not implemented for the type `core::iter::Iterator\n-//~^^ ERROR\n-//~^^^ ERROR\n-// FIXME(#21528) error should be reported once, not thrice\n }\n \n fn main() {}"}, {"sha": "62d775adac3c7955a776251c29f6d1e65266bc60", "filename": "src/test/compile-fail/issue-20692.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-20692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-20692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20692.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Array: Sized {}\n+\n+fn f<T: Array>(x: &T) {\n+    let _ = x\n+    //~^ ERROR `Array` cannot be made into an object\n+    //~| NOTE the trait cannot require that `Self : Sized`\n+    as\n+    &Array;\n+    //~^ ERROR `Array` cannot be made into an object\n+    //~| NOTE the trait cannot require that `Self : Sized`\n+}\n+\n+fn main() {}"}, {"sha": "256c5d8e6f72cc08d375e1e45caba593528c0e77", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -17,7 +17,6 @@ impl<A> vec_monad<A> for Vec<A> {\n         let mut r = panic!();\n         for elt in self { r = r + f(*elt); }\n         //~^ ERROR E0277\n-        //~| ERROR E0277\n    }\n }\n fn main() {"}, {"sha": "aa7fa82fa29ba843654586c2f5ad14681770ddfd", "filename": "src/test/compile-fail/issue-22645.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-22645.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-22645.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22645.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -23,7 +23,5 @@ impl<RHS: Scalar> Add <RHS> for Bob {\n fn main() {\n   let b = Bob + 3.5;\n   b + 3 //~ ERROR: is not implemented\n-  //~^ ERROR: is not implemented\n-  //~^^ ERROR: is not implemented\n-  //~^^^ ERROR: mismatched types\n+  //~^ ERROR: mismatched types\n }"}, {"sha": "9936f67b3af3c8e0908bfff2d03376c0d7725c77", "filename": "src/test/compile-fail/issue-24352.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-24352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-24352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24352.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -11,5 +11,4 @@\n fn main() {\n     1.0f64 - 1.0;\n     1.0f64 - 1 //~ ERROR: is not implemented\n-    //~^ ERROR: is not implemented\n }"}, {"sha": "f565d24e1fd082809170801f889a335d0cee5a45", "filename": "src/test/compile-fail/issue-28098.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-28098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-28098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28098.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let _ = Iterator::next(&mut ());\n+    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+\n+    for _ in false {}\n+    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+\n+    let _ = Iterator::next(&mut ());\n+    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+\n+    other()\n+}\n+\n+pub fn other() {\n+    // check errors are still reported globally\n+\n+    let _ = Iterator::next(&mut ());\n+    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+\n+    let _ = Iterator::next(&mut ());\n+    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+\n+    for _ in false {}\n+    //~^ ERROR the trait `core::iter::Iterator` is not implemented\n+}"}, {"sha": "36b4a57eb117fc7641199f08f4484dcf137fb445", "filename": "src/test/compile-fail/issue-28568.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-28568.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fissue-28568.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28568.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct MyStruct;\n+\n+impl Drop for MyStruct {\n+//~^ ERROR conflicting implementations for trait\n+    fn drop(&mut self) { }\n+}\n+\n+impl Drop for MyStruct {\n+//~^ NOTE conflicting implementation here\n+    fn drop(&mut self) { }\n+}\n+\n+fn main() {}"}, {"sha": "c980572fa152f595693a2e5132be769fb85f23c6", "filename": "src/test/compile-fail/shift-various-bad-types.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fshift-various-bad-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fshift-various-bad-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshift-various-bad-types.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -18,15 +18,12 @@ struct Panolpy {\n fn foo(p: &Panolpy) {\n     22 >> p.char;\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n \n     22 >> p.str;\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n \n     22 >> p;\n     //~^ ERROR E0277\n-    //~| ERROR E0277\n \n     let x;\n     22 >> x; // ambiguity error winds up being suppressed"}, {"sha": "6e48ae20d09f3ab1ebe47f1f91fa81b89bd1db5b", "filename": "src/test/compile-fail/str-idx.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-idx.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -11,5 +11,4 @@\n pub fn main() {\n     let s: &str = \"hello\";\n     let c: u8 = s[4]; //~ ERROR the trait `core::ops::Index<_>` is not implemented\n-    //~^ ERROR the trait `core::ops::Index<_>` is not implemented\n }"}, {"sha": "ec6a14778a463f22f266b9f6aa66654b52935d5f", "filename": "src/test/compile-fail/str-mut-idx.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstr-mut-idx.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -17,7 +17,6 @@ fn mutate(s: &mut str) {\n     s[1usize] = bot();\n     //~^ ERROR `core::ops::Index<usize>` is not implemented for the type `str`\n     //~| ERROR `core::ops::IndexMut<usize>` is not implemented for the type `str`\n-    //~| ERROR `core::ops::Index<usize>` is not implemented for the type `str`\n }\n \n pub fn main() {}"}, {"sha": "361df93a71669ed3ccdb7a22e27415efb587a9dd", "filename": "src/test/compile-fail/unboxed-closures-unsafe-extern-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -35,7 +35,6 @@ fn b() {\n fn c() {\n     let z = call_it_once(square, 22);\n     //~^ ERROR not implemented\n-    //~| ERROR not implemented\n }\n \n fn main() { }"}, {"sha": "ca15d1bb5eefc83f11278776d3d9ba9bbab47784", "filename": "src/test/compile-fail/unboxed-closures-wrong-abi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -35,7 +35,6 @@ fn b() {\n fn c() {\n     let z = call_it_once(square, 22);\n     //~^ ERROR not implemented\n-    //~| ERROR not implemented\n }\n \n fn main() { }"}, {"sha": "b960362aad7cd36c3f0d97bafa4507b9087ad2cd", "filename": "src/test/compile-fail/unboxed-closures-wrong-arg-type-extern-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -36,7 +36,6 @@ fn b() {\n fn c() {\n     let z = call_it_once(square, 22);\n     //~^ ERROR not implemented\n-    //~| ERROR not implemented\n }\n \n fn main() { }"}, {"sha": "d4aa6d5e720985d2766f333347861f7531146074", "filename": "src/test/run-make/invalid-staticlib/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Frun-make%2Finvalid-staticlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/638b2608a70171593471b45fb344741a37230b0d/src%2Ftest%2Frun-make%2Finvalid-staticlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finvalid-staticlib%2FMakefile?ref=638b2608a70171593471b45fb344741a37230b0d", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all:\n+\ttouch $(TMPDIR)/libfoo.a\n+\techo | $(RUSTC) - --crate-type=rlib -lstatic=foo 2>&1 | grep \"failed to add native library\""}]}