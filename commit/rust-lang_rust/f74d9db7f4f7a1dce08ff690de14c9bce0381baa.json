{"sha": "f74d9db7f4f7a1dce08ff690de14c9bce0381baa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NGQ5ZGI3ZjRmN2ExZGNlMDhmZjY5MGRlMTRjOWJjZTAzODFiYWE=", "commit": {"author": {"name": "KRAAI, MATTHEW [VISUS]", "email": "mkraai@its.jnj.com", "date": "2019-08-16T16:29:30Z"}, "committer": {"name": "KRAAI, MATTHEW [VISUS]", "email": "mkraai@its.jnj.com", "date": "2019-08-16T16:31:12Z"}, "message": "Use outer_expn_data instead of outer_expn_info", "tree": {"sha": "1bf6e272ca859a607da0b27c57d9fc37a5fabf32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bf6e272ca859a607da0b27c57d9fc37a5fabf32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f74d9db7f4f7a1dce08ff690de14c9bce0381baa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f74d9db7f4f7a1dce08ff690de14c9bce0381baa", "html_url": "https://github.com/rust-lang/rust/commit/f74d9db7f4f7a1dce08ff690de14c9bce0381baa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/comments", "author": null, "committer": null, "parents": [{"sha": "348d398b1caeda66a85c9992e79a04e0ccbe3291", "url": "https://api.github.com/repos/rust-lang/rust/commits/348d398b1caeda66a85c9992e79a04e0ccbe3291", "html_url": "https://github.com/rust-lang/rust/commit/348d398b1caeda66a85c9992e79a04e0ccbe3291"}], "stats": {"total": 154, "additions": 89, "deletions": 65}, "files": [{"sha": "3054f11c17698afee1ee1f00a0c06c8cc6db3c57", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f74d9db7f4f7a1dce08ff690de14c9bce0381baa", "patch": "@@ -445,7 +445,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_early_lint_pass(box utils::internal_lints::ClippyLintsInternal);\n     reg.register_late_lint_pass(box utils::internal_lints::CompilerLintFunctions::new());\n     reg.register_late_lint_pass(box utils::internal_lints::LintWithoutLintPass::default());\n-    reg.register_late_lint_pass(box utils::internal_lints::OuterExpnInfoPass);\n+    reg.register_late_lint_pass(box utils::internal_lints::OuterExpnDataPass);\n     reg.register_late_lint_pass(box utils::inspector::DeepCodeInspector);\n     reg.register_late_lint_pass(box utils::author::Author);\n     reg.register_late_lint_pass(box types::Types);\n@@ -681,7 +681,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n         utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n         utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n-        utils::internal_lints::OUTER_EXPN_EXPN_INFO,\n+        utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n     ]);\n \n     reg.register_lint_group(\"clippy::all\", Some(\"clippy\"), vec!["}, {"sha": "a127431e2d53324a9448d46af8d3c286dec9785b", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=f74d9db7f4f7a1dce08ff690de14c9bce0381baa", "patch": "@@ -625,13 +625,17 @@ fn is_used(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n /// generated by `#[derive(...)]` or the like).\n fn in_attributes_expansion(expr: &Expr) -> bool {\n     use syntax::ext::hygiene::MacroKind;\n-    expr.span.ctxt().outer_expn_info().map_or(false, |info| {\n-        if let ExpnKind::Macro(MacroKind::Attr, _) = info.kind {\n+    if expr.span.from_expansion() {\n+        let data = expr.span.ctxt().outer_expn_data();\n+\n+        if let ExpnKind::Macro(MacroKind::Attr, _) = data.kind {\n             true\n         } else {\n             false\n         }\n-    })\n+    } else {\n+        false\n+    }\n }\n \n /// Tests whether `res` is a variable defined outside a macro."}, {"sha": "617ac2393d511aa7511ca9572b73b6816eba947a", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=f74d9db7f4f7a1dce08ff690de14c9bce0381baa", "patch": "@@ -69,8 +69,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PanicUnimplemented {\n \n fn get_outer_span(expr: &Expr) -> Span {\n     if_chain! {\n-        if let Some(first) = expr.span.ctxt().outer_expn_info();\n-        if let Some(second) = first.call_site.ctxt().outer_expn_info();\n+        if expr.span.from_expansion();\n+        let first = expr.span.ctxt().outer_expn_data();\n+        if first.call_site.from_expansion();\n+        let second = first.call_site.ctxt().outer_expn_data();\n         then {\n             second.call_site\n         } else {"}, {"sha": "a4ce129c95ea4dcb16036e427319a22d0b3f4292", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=f74d9db7f4f7a1dce08ff690de14c9bce0381baa", "patch": "@@ -147,10 +147,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ranges {\n             }) = higher::range(cx, expr);\n             if let Some(y) = y_plus_one(end);\n             then {\n-                let span = expr.span\n-                    .ctxt()\n-                    .outer_expn_info()\n-                    .map_or(expr.span, |info| info.call_site);\n+                let span = if expr.span.from_expansion() {\n+                    expr.span\n+                        .ctxt()\n+                        .outer_expn_data()\n+                        .call_site\n+                } else {\n+                    expr.span\n+                };\n                 span_lint_and_then(\n                     cx,\n                     RANGE_PLUS_ONE,"}, {"sha": "8a8133bfa1ea86056cbbc03b9b47b23dfccd8667", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=f74d9db7f4f7a1dce08ff690de14c9bce0381baa", "patch": "@@ -317,7 +317,11 @@ fn attr_is_cfg(attr: &ast::Attribute) -> bool {\n \n // get the def site\n fn get_def(span: Span) -> Option<Span> {\n-    span.ctxt().outer_expn_info().and_then(|info| Some(info.def_site))\n+    if span.from_expansion() {\n+        Some(span.ctxt().outer_expn_data().def_site)\n+    } else {\n+        None\n+    }\n }\n \n // is this expr a `()` unit?"}, {"sha": "9f4ea395df46110a7ff67370cc5cef23d46b7b0a", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=f74d9db7f4f7a1dce08ff690de14c9bce0381baa", "patch": "@@ -76,26 +76,26 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for calls to `cx.outer().expn_info()` and suggests to use\n-    /// the `cx.outer_expn_info()`\n+    /// **What it does:** Checks for calls to `cx.outer().expn_data()` and suggests to use\n+    /// the `cx.outer_expn_data()`\n     ///\n-    /// **Why is this bad?** `cx.outer_expn_info()` is faster and more concise.\n+    /// **Why is this bad?** `cx.outer_expn_data()` is faster and more concise.\n     ///\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n     /// Bad:\n     /// ```rust,ignore\n-    /// expr.span.ctxt().outer().expn_info()\n+    /// expr.span.ctxt().outer().expn_data()\n     /// ```\n     ///\n     /// Good:\n     /// ```rust,ignore\n-    /// expr.span.ctxt().outer_expn_info()\n+    /// expr.span.ctxt().outer_expn_data()\n     /// ```\n-    pub OUTER_EXPN_EXPN_INFO,\n+    pub OUTER_EXPN_EXPN_DATA,\n     internal,\n-    \"using `cx.outer_expn().expn_info()` instead of `cx.outer_expn_info()`\"\n+    \"using `cx.outer_expn().expn_data()` instead of `cx.outer_expn_data()`\"\n }\n \n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n@@ -182,9 +182,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n             // actual span that invoked `declare_tool_lint!`:\n             let lint_span = lint_span\n                 .ctxt()\n-                .outer_expn_info()\n-                .map(|ei| ei.call_site)\n-                .expect(\"unable to get call_site\");\n+                .outer_expn_data()\n+                .call_site;\n \n             if !self.registered_lints.contains(lint_name) {\n                 span_lint(\n@@ -278,17 +277,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n     }\n }\n \n-pub struct OuterExpnInfoPass;\n+pub struct OuterExpnDataPass;\n \n-impl_lint_pass!(OuterExpnInfoPass => [OUTER_EXPN_EXPN_INFO]);\n+impl_lint_pass!(OuterExpnDataPass => [OUTER_EXPN_EXPN_DATA]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnInfoPass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnDataPass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n         let (method_names, arg_lists) = method_calls(expr, 2);\n         let method_names: Vec<LocalInternedString> = method_names.iter().map(|s| s.as_str()).collect();\n         let method_names: Vec<&str> = method_names.iter().map(std::convert::AsRef::as_ref).collect();\n         if_chain! {\n-            if let [\"expn_info\", \"outer_expn\"] = method_names.as_slice();\n+            if let [\"expn_data\", \"outer_expn\"] = method_names.as_slice();\n             let args = arg_lists[1];\n             if args.len() == 1;\n             let self_arg = &args[0];\n@@ -297,11 +296,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnInfoPass {\n             then {\n                 span_lint_and_sugg(\n                     cx,\n-                    OUTER_EXPN_EXPN_INFO,\n+                    OUTER_EXPN_EXPN_DATA,\n                     expr.span.trim_start(self_arg.span).unwrap_or(expr.span),\n-                    \"usage of `outer_expn().expn_info()`\",\n+                    \"usage of `outer_expn().expn_data()`\",\n                     \"try\",\n-                    \".outer_expn_info()\".to_string(),\n+                    \".outer_expn_data()\".to_string(),\n                     Applicability::MachineApplicable,\n                 );\n             }"}, {"sha": "a25f2504127239a1a3353600f023c06c861b425a", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=f74d9db7f4f7a1dce08ff690de14c9bce0381baa", "patch": "@@ -92,15 +92,15 @@ pub fn in_constant(cx: &LateContext<'_, '_>, id: HirId) -> bool {\n     }\n }\n \n-/// Returns `true` if this `expn_info` was expanded by any macro or desugaring\n+/// Returns `true` if this `span` was expanded by any macro or desugaring\n pub fn in_macro_or_desugar(span: Span) -> bool {\n-    span.ctxt().outer_expn_info().is_some()\n+    span.from_expansion()\n }\n \n-/// Returns `true` if this `expn_info` was expanded by any macro.\n+/// Returns `true` if this `span` was expanded by any macro.\n pub fn in_macro(span: Span) -> bool {\n-    if let Some(info) = span.ctxt().outer_expn_info() {\n-        if let ExpnKind::Desugaring(..) = info.kind {\n+    if span.from_expansion() {\n+        if let ExpnKind::Desugaring(..) = span.ctxt().outer_expn_data().kind {\n             false\n         } else {\n             true\n@@ -686,12 +686,18 @@ pub fn is_adjusted(cx: &LateContext<'_, '_>, e: &Expr) -> bool {\n /// See also `is_direct_expn_of`.\n pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n     loop {\n-        let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.kind.descr(), ei.call_site));\n+        if span.from_expansion() {\n+            let data = span.ctxt().outer_expn_data();\n+            let mac_name = data.kind.descr();\n+            let new_span = data.call_site;\n \n-        match span_name_span {\n-            Some((mac_name, new_span)) if mac_name.as_str() == name => return Some(new_span),\n-            None => return None,\n-            Some((_, new_span)) => span = new_span,\n+            if mac_name.as_str() == name {\n+                return Some(new_span);\n+            } else {\n+                span = new_span;\n+            }\n+        } else {\n+            return None;\n         }\n     }\n }\n@@ -706,11 +712,18 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n /// `bar!` by\n /// `is_direct_expn_of`.\n pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n-    let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.kind.descr(), ei.call_site));\n+    if span.from_expansion() {\n+        let data = span.ctxt().outer_expn_data();\n+        let mac_name = data.kind.descr();\n+        let new_span = data.call_site;\n \n-    match span_name_span {\n-        Some((mac_name, new_span)) if mac_name.as_str() == name => Some(new_span),\n-        _ => None,\n+        if mac_name.as_str() == name {\n+            Some(new_span)\n+        } else {\n+            None\n+        }\n+    } else {\n+        None\n     }\n }\n "}, {"sha": "d7709784a3eb4df0c92c50e6b522f982b5a2f338", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=f74d9db7f4f7a1dce08ff690de14c9bce0381baa", "patch": "@@ -49,13 +49,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessVec {\n                 // report the error around the `vec!` not inside `<std macros>:`\n                 let span = arg.span\n                     .ctxt()\n-                    .outer_expn_info()\n-                    .map(|info| info.call_site)\n-                    .expect(\"unable to get call_site\")\n+                    .outer_expn_data()\n+                    .call_site\n                     .ctxt()\n-                    .outer_expn_info()\n-                    .map(|info| info.call_site)\n-                    .expect(\"unable to get call_site\");\n+                    .outer_expn_data()\n+                    .call_site;\n                 check_vec_macro(cx, &vec_args, span);\n             }\n         }"}, {"sha": "15ac315a586fd4b18dc37186df8277164bc2773c", "filename": "tests/ui/outer_expn_data.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/tests%2Fui%2Fouter_expn_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/tests%2Fui%2Fouter_expn_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_data.rs?ref=f74d9db7f4f7a1dce08ff690de14c9bce0381baa", "patch": "@@ -16,7 +16,7 @@ declare_lint_pass!(Pass => [TEST_LINT]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_expr(&mut self, _cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        let _ = expr.span.ctxt().outer_expn().expn_info();\n+        let _ = expr.span.ctxt().outer_expn().expn_data();\n     }\n }\n ", "previous_filename": "tests/ui/outer_expn_info.rs"}, {"sha": "cd12ad79dd12a46fbf8970ada7885cc4bdb8ca89", "filename": "tests/ui/outer_expn_data.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/tests%2Fui%2Fouter_expn_data.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f74d9db7f4f7a1dce08ff690de14c9bce0381baa/tests%2Fui%2Fouter_expn_data.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_data.stderr?ref=f74d9db7f4f7a1dce08ff690de14c9bce0381baa", "patch": "@@ -0,0 +1,15 @@\n+error: usage of `outer_expn().expn_data()`\n+  --> $DIR/outer_expn_data.rs:19:33\n+   |\n+LL |         let _ = expr.span.ctxt().outer_expn().expn_data();\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.outer_expn_data()`\n+   |\n+note: lint level defined here\n+  --> $DIR/outer_expn_data.rs:1:9\n+   |\n+LL | #![deny(clippy::internal)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: `#[deny(clippy::outer_expn_expn_data)]` implied by `#[deny(clippy::internal)]`\n+\n+error: aborting due to previous error\n+"}, {"sha": "4bbd1493dc4f8bd82200f1076c20d4bb3b84f41b", "filename": "tests/ui/outer_expn_info.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/348d398b1caeda66a85c9992e79a04e0ccbe3291/tests%2Fui%2Fouter_expn_info.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/348d398b1caeda66a85c9992e79a04e0ccbe3291/tests%2Fui%2Fouter_expn_info.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_info.stderr?ref=348d398b1caeda66a85c9992e79a04e0ccbe3291", "patch": "@@ -1,15 +0,0 @@\n-error: usage of `outer_expn().expn_info()`\n-  --> $DIR/outer_expn_info.rs:19:33\n-   |\n-LL |         let _ = expr.span.ctxt().outer_expn().expn_info();\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.outer_expn_info()`\n-   |\n-note: lint level defined here\n-  --> $DIR/outer_expn_info.rs:1:9\n-   |\n-LL | #![deny(clippy::internal)]\n-   |         ^^^^^^^^^^^^^^^^\n-   = note: `#[deny(clippy::outer_expn_expn_info)]` implied by `#[deny(clippy::internal)]`\n-\n-error: aborting due to previous error\n-"}]}