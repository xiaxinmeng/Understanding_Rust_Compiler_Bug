{"sha": "82f2e4dc9f1078df868bca825315d35a589e5681", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZjJlNGRjOWYxMDc4ZGY4NjhiY2E4MjUzMTVkMzVhNTg5ZTU2ODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-15T13:54:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-15T13:54:59Z"}, "message": "auto merge of #7147 : huonw/rust/vec-connect, r=Aatch\n\nThis is caused by StrVector having a generic implementation for &[S]\r\nand so #5898 means that method resolution of ~[~[1]].concat() sees that\r\nboth StrVector and VectorVector have methods that (superficially) match.\r\n\r\nThey are now connect_vec and concat_vec, which means that they can actually be\r\ncalled.", "tree": {"sha": "25b26f68d7960f2e609fedfce3e8fff498ea5696", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25b26f68d7960f2e609fedfce3e8fff498ea5696"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82f2e4dc9f1078df868bca825315d35a589e5681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82f2e4dc9f1078df868bca825315d35a589e5681", "html_url": "https://github.com/rust-lang/rust/commit/82f2e4dc9f1078df868bca825315d35a589e5681", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82f2e4dc9f1078df868bca825315d35a589e5681/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac6f15417da1599c04c77f776a940b02fa359010", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac6f15417da1599c04c77f776a940b02fa359010", "html_url": "https://github.com/rust-lang/rust/commit/ac6f15417da1599c04c77f776a940b02fa359010"}, {"sha": "18542568a8f7d5580094634c4a10695fb71ba74a", "url": "https://api.github.com/repos/rust-lang/rust/commits/18542568a8f7d5580094634c4a10695fb71ba74a", "html_url": "https://github.com/rust-lang/rust/commit/18542568a8f7d5580094634c4a10695fb71ba74a"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "211ee12c291059e2b7dbf76d8b13903410253029", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/82f2e4dc9f1078df868bca825315d35a589e5681/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f2e4dc9f1078df868bca825315d35a589e5681/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=82f2e4dc9f1078df868bca825315d35a589e5681", "patch": "@@ -1002,31 +1002,33 @@ pub fn retain<T>(v: &mut ~[T], f: &fn(t: &T) -> bool) {\n }\n \n /// Flattens a vector of vectors of T into a single vector of T.\n-pub fn concat<T:Copy>(v: &[~[T]]) -> ~[T] { v.concat() }\n+pub fn concat<T:Copy>(v: &[~[T]]) -> ~[T] { v.concat_vec() }\n \n /// Concatenate a vector of vectors, placing a given separator between each\n-pub fn connect<T:Copy>(v: &[~[T]], sep: &T) -> ~[T] { v.connect(sep) }\n+pub fn connect<T:Copy>(v: &[~[T]], sep: &T) -> ~[T] { v.connect_vec(sep) }\n \n /// Flattens a vector of vectors of T into a single vector of T.\n-pub fn concat_slices<T:Copy>(v: &[&[T]]) -> ~[T] { v.concat() }\n+pub fn concat_slices<T:Copy>(v: &[&[T]]) -> ~[T] { v.concat_vec() }\n \n /// Concatenate a vector of vectors, placing a given separator between each\n-pub fn connect_slices<T:Copy>(v: &[&[T]], sep: &T) -> ~[T] { v.connect(sep) }\n+pub fn connect_slices<T:Copy>(v: &[&[T]], sep: &T) -> ~[T] { v.connect_vec(sep) }\n \n #[allow(missing_doc)]\n pub trait VectorVector<T> {\n-    pub fn concat(&self) -> ~[T];\n-    pub fn connect(&self, sep: &T) -> ~[T];\n+    // FIXME #5898: calling these .concat and .connect conflicts with\n+    // StrVector::con{cat,nect}, since they have generic contents.\n+    pub fn concat_vec(&self) -> ~[T];\n+    pub fn connect_vec(&self, sep: &T) -> ~[T];\n }\n \n impl<'self, T:Copy> VectorVector<T> for &'self [~[T]] {\n     /// Flattens a vector of slices of T into a single vector of T.\n-    pub fn concat(&self) -> ~[T] {\n+    pub fn concat_vec(&self) -> ~[T] {\n         self.flat_map(|&inner| inner)\n     }\n \n     /// Concatenate a vector of vectors, placing a given separator between each.\n-    pub fn connect(&self, sep: &T) -> ~[T] {\n+    pub fn connect_vec(&self, sep: &T) -> ~[T] {\n         let mut r = ~[];\n         let mut first = true;\n         for self.each |&inner| {\n@@ -1039,12 +1041,12 @@ impl<'self, T:Copy> VectorVector<T> for &'self [~[T]] {\n \n impl<'self, T:Copy> VectorVector<T> for &'self [&'self [T]] {\n     /// Flattens a vector of slices of T into a single vector of T.\n-    pub fn concat(&self) -> ~[T] {\n+    pub fn concat_vec(&self) -> ~[T] {\n         self.flat_map(|&inner| inner.to_owned())\n     }\n \n     /// Concatenate a vector of slices, placing a given separator between each.\n-    pub fn connect(&self, sep: &T) -> ~[T] {\n+    pub fn connect_vec(&self, sep: &T) -> ~[T] {\n         let mut r = ~[];\n         let mut first = true;\n         for self.each |&inner| {\n@@ -3639,25 +3641,25 @@ mod tests {\n     #[test]\n     fn test_concat() {\n         assert_eq!(concat([~[1], ~[2,3]]), ~[1, 2, 3]);\n-        assert_eq!([~[1], ~[2,3]].concat(), ~[1, 2, 3]);\n+        assert_eq!([~[1], ~[2,3]].concat_vec(), ~[1, 2, 3]);\n \n         assert_eq!(concat_slices([&[1], &[2,3]]), ~[1, 2, 3]);\n-        assert_eq!([&[1], &[2,3]].concat(), ~[1, 2, 3]);\n+        assert_eq!([&[1], &[2,3]].concat_vec(), ~[1, 2, 3]);\n     }\n \n     #[test]\n     fn test_connect() {\n         assert_eq!(connect([], &0), ~[]);\n         assert_eq!(connect([~[1], ~[2, 3]], &0), ~[1, 0, 2, 3]);\n         assert_eq!(connect([~[1], ~[2], ~[3]], &0), ~[1, 0, 2, 0, 3]);\n-        assert_eq!([~[1], ~[2, 3]].connect(&0), ~[1, 0, 2, 3]);\n-        assert_eq!([~[1], ~[2], ~[3]].connect(&0), ~[1, 0, 2, 0, 3]);\n+        assert_eq!([~[1], ~[2, 3]].connect_vec(&0), ~[1, 0, 2, 3]);\n+        assert_eq!([~[1], ~[2], ~[3]].connect_vec(&0), ~[1, 0, 2, 0, 3]);\n \n         assert_eq!(connect_slices([], &0), ~[]);\n         assert_eq!(connect_slices([&[1], &[2, 3]], &0), ~[1, 0, 2, 3]);\n         assert_eq!(connect_slices([&[1], &[2], &[3]], &0), ~[1, 0, 2, 0, 3]);\n-        assert_eq!([&[1], &[2, 3]].connect(&0), ~[1, 0, 2, 3]);\n-        assert_eq!([&[1], &[2], &[3]].connect(&0), ~[1, 0, 2, 0, 3]);\n+        assert_eq!([&[1], &[2, 3]].connect_vec(&0), ~[1, 0, 2, 3]);\n+        assert_eq!([&[1], &[2], &[3]].connect_vec(&0), ~[1, 0, 2, 0, 3]);\n     }\n \n     #[test]"}]}