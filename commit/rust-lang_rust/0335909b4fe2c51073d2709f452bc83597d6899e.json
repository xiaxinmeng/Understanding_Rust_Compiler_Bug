{"sha": "0335909b4fe2c51073d2709f452bc83597d6899e", "node_id": "C_kwDOAAsO6NoAKDAzMzU5MDliNGZlMmM1MTA3M2QyNzA5ZjQ1MmJjODM1OTdkNjg5OWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-28T07:35:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-28T07:35:22Z"}, "message": "Rollup merge of #101098 - petrochenkov:noinvis, r=TaKO8Ki\n\nrustc_middle: Remove `Visibility::Invisible`\n\nIt had a different meaning in the past, but now it's only used as an implementation detail of import resolution.", "tree": {"sha": "a41dfc7a341296491eb721dd97bdfaccd9384a3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a41dfc7a341296491eb721dd97bdfaccd9384a3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0335909b4fe2c51073d2709f452bc83597d6899e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjCxq6CRBK7hj4Ov3rIwAA3PYIABXGpg7OWhtykuNpAkZEuTEX\nYdeSJi02km9HKxWLTtteuP5Kc7rtFIPLUaE9cRbhACAmqHoG00HQTiK7goZhjY4e\n+3pOX0kQfrBA6JMJysnpOg9O/CANz6sEoaLIs3YFGjuh2bkrzUuXRu1MKkB9UKkp\npkyHvAZf94wmof80nhjkwAoWbYOZ6K2JppbwrQvksRujqhSJnHgL+PXZaPNs21dm\nmARwOQGGtu0CgchbXYLGvl1UbEFJbljQNjlTLUEwFmW5y6LyfeOQv2alj2v4HAF8\nygNuQU+cqfKNUFkMz+pl5LJjoq4pPVa1VqIr9mrUwOh4asdhwWeBLC2t1zVHvbA=\n=fqqv\n-----END PGP SIGNATURE-----\n", "payload": "tree a41dfc7a341296491eb721dd97bdfaccd9384a3d\nparent c2f294a73fa8959945df78db72a3fc4fe6270069\nparent fc3f3c304bd6840f7c298a9d000c5ebddfe0b13c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661672122 +0200\ncommitter GitHub <noreply@github.com> 1661672122 +0200\n\nRollup merge of #101098 - petrochenkov:noinvis, r=TaKO8Ki\n\nrustc_middle: Remove `Visibility::Invisible`\n\nIt had a different meaning in the past, but now it's only used as an implementation detail of import resolution.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0335909b4fe2c51073d2709f452bc83597d6899e", "html_url": "https://github.com/rust-lang/rust/commit/0335909b4fe2c51073d2709f452bc83597d6899e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0335909b4fe2c51073d2709f452bc83597d6899e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2f294a73fa8959945df78db72a3fc4fe6270069", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2f294a73fa8959945df78db72a3fc4fe6270069", "html_url": "https://github.com/rust-lang/rust/commit/c2f294a73fa8959945df78db72a3fc4fe6270069"}, {"sha": "fc3f3c304bd6840f7c298a9d000c5ebddfe0b13c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc3f3c304bd6840f7c298a9d000c5ebddfe0b13c", "html_url": "https://github.com/rust-lang/rust/commit/fc3f3c304bd6840f7c298a9d000c5ebddfe0b13c"}], "stats": {"total": 96, "additions": 43, "deletions": 53}, "files": [{"sha": "d0a6f216858b61575238b6101f2a34fd151d8bd0", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=0335909b4fe2c51073d2709f452bc83597d6899e", "patch": "@@ -1500,24 +1500,18 @@ fn vcall_visibility_metadata<'ll, 'tcx>(\n         // If there is not LTO and the visibility in public, we have to assume that the vtable can\n         // be seen from anywhere. With multiple CGUs, the vtable is quasi-public.\n         (Lto::No | Lto::ThinLocal, Visibility::Public, _)\n-        | (Lto::No, Visibility::Restricted(_) | Visibility::Invisible, false) => {\n-            VCallVisibility::Public\n-        }\n+        | (Lto::No, Visibility::Restricted(_), false) => VCallVisibility::Public,\n         // With LTO and a quasi-public visibility, the usages of the functions of the vtable are\n         // all known by the `LinkageUnit`.\n         // FIXME: LLVM only supports this optimization for `Lto::Fat` currently. Once it also\n         // supports `Lto::Thin` the `VCallVisibility` may have to be adjusted for those.\n         (Lto::Fat | Lto::Thin, Visibility::Public, _)\n-        | (\n-            Lto::ThinLocal | Lto::Thin | Lto::Fat,\n-            Visibility::Restricted(_) | Visibility::Invisible,\n-            false,\n-        ) => VCallVisibility::LinkageUnit,\n+        | (Lto::ThinLocal | Lto::Thin | Lto::Fat, Visibility::Restricted(_), false) => {\n+            VCallVisibility::LinkageUnit\n+        }\n         // If there is only one CGU, private vtables can only be seen by that CGU/translation unit\n         // and therefore we know of all usages of functions in the vtable.\n-        (_, Visibility::Restricted(_) | Visibility::Invisible, true) => {\n-            VCallVisibility::TranslationUnit\n-        }\n+        (_, Visibility::Restricted(_), true) => VCallVisibility::TranslationUnit,\n     };\n \n     let trait_ref_typeid = typeid_for_trait_ref(cx.tcx, trait_ref);"}, {"sha": "d182929c40066c3691176ee529487e48de05437d", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=0335909b4fe2c51073d2709f452bc83597d6899e", "patch": "@@ -293,7 +293,7 @@ fn skip_stability_check_due_to_privacy(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n \n         // These are not visible outside crate; therefore\n         // stability markers are irrelevant, if even present.\n-        ty::Visibility::Restricted(..) | ty::Visibility::Invisible => true,\n+        ty::Visibility::Restricted(..) => true,\n     }\n }\n "}, {"sha": "aaa66deb2a3ecf98223c69477a5321ac3962bd8a", "filename": "compiler/rustc_middle/src/ty/inhabitedness/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fmod.rs?ref=0335909b4fe2c51073d2709f452bc83597d6899e", "patch": "@@ -169,14 +169,10 @@ impl<'tcx> FieldDef {\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> DefIdForest<'tcx> {\n         let data_uninhabitedness = move || self.ty(tcx, substs).uninhabited_from(tcx, param_env);\n-        // FIXME(canndrew): Currently enum fields are (incorrectly) stored with\n-        // `Visibility::Invisible` so we need to override `self.vis` if we're\n-        // dealing with an enum.\n         if is_enum {\n             data_uninhabitedness()\n         } else {\n             match self.vis {\n-                Visibility::Invisible => DefIdForest::empty(),\n                 Visibility::Restricted(from) => {\n                     let forest = DefIdForest::from_id(from);\n                     let iter = Some(forest).into_iter().chain(Some(data_uninhabitedness()));"}, {"sha": "ed04e7660339e639c24868b5f68aed921c35c19f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=0335909b4fe2c51073d2709f452bc83597d6899e", "patch": "@@ -268,8 +268,6 @@ pub enum Visibility {\n     Public,\n     /// Visible only in the given crate-local module.\n     Restricted(DefId),\n-    /// Not visible anywhere in the local crate. This is the visibility of private external items.\n-    Invisible,\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]\n@@ -366,8 +364,6 @@ impl Visibility {\n         let restriction = match self {\n             // Public items are visible everywhere.\n             Visibility::Public => return true,\n-            // Private items from other crates are visible nowhere.\n-            Visibility::Invisible => return false,\n             // Restricted items are visible in an arbitrary local module.\n             Visibility::Restricted(other) if other.krate != module.krate => return false,\n             Visibility::Restricted(module) => module,\n@@ -380,7 +376,6 @@ impl Visibility {\n     pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {\n         let vis_restriction = match vis {\n             Visibility::Public => return self == Visibility::Public,\n-            Visibility::Invisible => return true,\n             Visibility::Restricted(module) => module,\n         };\n \n@@ -392,7 +387,6 @@ impl Visibility {\n         match self {\n             Visibility::Public => true,\n             Visibility::Restricted(def_id) => def_id.is_local(),\n-            Visibility::Invisible => false,\n         }\n     }\n "}, {"sha": "5d562f18a815814785602fff35961933b7b32d0a", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=0335909b4fe2c51073d2709f452bc83597d6899e", "patch": "@@ -1731,7 +1731,6 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n         if !vis.is_at_least(self.required_visibility, self.tcx) {\n             let vis_descr = match vis {\n                 ty::Visibility::Public => \"public\",\n-                ty::Visibility::Invisible => \"private\",\n                 ty::Visibility::Restricted(vis_def_id) => {\n                     if vis_def_id == self.tcx.parent_module(hir_id).to_def_id() {\n                         \"private\""}, {"sha": "8f3b6009bd6ef8a5f31fa6387c5badaceb443faf", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=0335909b4fe2c51073d2709f452bc83597d6899e", "patch": "@@ -380,7 +380,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             has_attributes: !item.attrs.is_empty(),\n             root_span,\n             root_id,\n-            vis: Cell::new(vis),\n+            vis: Cell::new(Some(vis)),\n             used: Cell::new(false),\n         });\n \n@@ -588,7 +588,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             ast::UseTreeKind::Glob => {\n                 let kind = ImportKind::Glob {\n                     is_prelude: self.r.session.contains_name(&item.attrs, sym::prelude_import),\n-                    max_vis: Cell::new(ty::Visibility::Invisible),\n+                    max_vis: Cell::new(None),\n                 };\n                 self.r.visibilities.insert(self.r.local_def_id(id), vis);\n                 self.add_import(prefix, kind, use_tree.span, id, item, root_span, item.id, vis);\n@@ -650,7 +650,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         true,\n                         // The whole `use` item\n                         item,\n-                        ty::Visibility::Invisible,\n+                        ty::Visibility::Restricted(self.parent_scope.module.nearest_parent_mod()),\n                         root_span,\n                     );\n                 }\n@@ -885,7 +885,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             root_span: item.span,\n             span: item.span,\n             module_path: Vec::new(),\n-            vis: Cell::new(vis),\n+            vis: Cell::new(Some(vis)),\n             used: Cell::new(used),\n         });\n         self.r.potentially_unused_imports.push(import);\n@@ -1118,7 +1118,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 root_span: span,\n                 span,\n                 module_path: Vec::new(),\n-                vis: Cell::new(ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id())),\n+                vis: Cell::new(Some(ty::Visibility::Restricted(CRATE_DEF_ID.to_def_id()))),\n                 used: Cell::new(false),\n             })\n         };"}, {"sha": "8b58b32b65649bae91276c92375e13ceefa86cfb", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=0335909b4fe2c51073d2709f452bc83597d6899e", "patch": "@@ -227,7 +227,7 @@ impl Resolver<'_> {\n         for import in self.potentially_unused_imports.iter() {\n             match import.kind {\n                 _ if import.used.get()\n-                    || import.vis.get().is_public()\n+                    || import.expect_vis().is_public()\n                     || import.span.is_dummy() =>\n                 {\n                     if let ImportKind::MacroUse = import.kind {"}, {"sha": "23c0ca108d38582e838522f8d5d1009ea86ba699", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=0335909b4fe2c51073d2709f452bc83597d6899e", "patch": "@@ -953,7 +953,10 @@ impl<'a> Resolver<'a> {\n         // Check if one of single imports can still define the name,\n         // if it can then our result is not determined and can be invalidated.\n         for single_import in &resolution.single_imports {\n-            if !self.is_accessible_from(single_import.vis.get(), parent_scope.module) {\n+            let Some(import_vis) = single_import.vis.get() else {\n+                continue;\n+            };\n+            if !self.is_accessible_from(import_vis, parent_scope.module) {\n                 continue;\n             }\n             let Some(module) = single_import.imported_module.get() else {\n@@ -1018,7 +1021,10 @@ impl<'a> Resolver<'a> {\n         // Check if one of glob imports can still define the name,\n         // if it can then our \"no resolution\" result is not determined and can be invalidated.\n         for glob_import in module.globs.borrow().iter() {\n-            if !self.is_accessible_from(glob_import.vis.get(), parent_scope.module) {\n+            let Some(import_vis) = glob_import.vis.get() else {\n+                continue;\n+            };\n+            if !self.is_accessible_from(import_vis, parent_scope.module) {\n                 continue;\n             }\n             let module = match glob_import.imported_module.get() {"}, {"sha": "c2491c6ebdec08892d03f255f2f991b4484b902a", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0335909b4fe2c51073d2709f452bc83597d6899e/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=0335909b4fe2c51073d2709f452bc83597d6899e", "patch": "@@ -52,8 +52,8 @@ pub enum ImportKind<'a> {\n     },\n     Glob {\n         is_prelude: bool,\n-        max_vis: Cell<ty::Visibility>, // The visibility of the greatest re-export.\n-                                       // n.b. `max_vis` is only used in `finalize_import` to check for re-export errors.\n+        max_vis: Cell<Option<ty::Visibility>>, // The visibility of the greatest re-export.\n+                                               // n.b. `max_vis` is only used in `finalize_import` to check for re-export errors.\n     },\n     ExternCrate {\n         source: Option<Symbol>,\n@@ -144,7 +144,7 @@ pub(crate) struct Import<'a> {\n     pub module_path: Vec<Segment>,\n     /// The resolution of `module_path`.\n     pub imported_module: Cell<Option<ModuleOrUniformRoot<'a>>>,\n-    pub vis: Cell<ty::Visibility>,\n+    pub vis: Cell<Option<ty::Visibility>>,\n     pub used: Cell<bool>,\n }\n \n@@ -159,6 +159,10 @@ impl<'a> Import<'a> {\n             _ => false,\n         }\n     }\n+\n+    pub(crate) fn expect_vis(&self) -> ty::Visibility {\n+        self.vis.get().expect(\"encountered cleared import visibility\")\n+    }\n }\n \n /// Records information about the resolution of a name in a namespace of a module.\n@@ -199,7 +203,7 @@ fn pub_use_of_private_extern_crate_hack(import: &Import<'_>, binding: &NameBindi\n                 import: Import { kind: ImportKind::ExternCrate { .. }, .. },\n                 ..\n             },\n-        ) => import.vis.get().is_public(),\n+        ) => import.expect_vis().is_public(),\n         _ => false,\n     }\n }\n@@ -212,17 +216,20 @@ impl<'a> Resolver<'a> {\n         binding: &'a NameBinding<'a>,\n         import: &'a Import<'a>,\n     ) -> &'a NameBinding<'a> {\n-        let vis = if binding.vis.is_at_least(import.vis.get(), self)\n+        let import_vis = import.expect_vis();\n+        let vis = if binding.vis.is_at_least(import_vis, self)\n             || pub_use_of_private_extern_crate_hack(import, binding)\n         {\n-            import.vis.get()\n+            import_vis\n         } else {\n             binding.vis\n         };\n \n         if let ImportKind::Glob { ref max_vis, .. } = import.kind {\n-            if vis == import.vis.get() || vis.is_at_least(max_vis.get(), self) {\n-                max_vis.set(vis)\n+            if vis == import_vis\n+                || max_vis.get().map_or(true, |max_vis| vis.is_at_least(max_vis, self))\n+            {\n+                max_vis.set(Some(vis))\n             }\n         }\n \n@@ -536,7 +543,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         } else {\n             // For better failure detection, pretend that the import will\n             // not define any names while resolving its module path.\n-            let orig_vis = import.vis.replace(ty::Visibility::Invisible);\n+            let orig_vis = import.vis.take();\n             let path_res =\n                 self.r.maybe_resolve_path(&import.module_path, None, &import.parent_scope);\n             import.vis.set(orig_vis);\n@@ -571,7 +578,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 if let Err(Undetermined) = source_bindings[ns].get() {\n                     // For better failure detection, pretend that the import will\n                     // not define any names while resolving its module path.\n-                    let orig_vis = import.vis.replace(ty::Visibility::Invisible);\n+                    let orig_vis = import.vis.take();\n                     let binding = this.resolve_ident_in_module(\n                         module,\n                         source,\n@@ -620,7 +627,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n     /// Optionally returns an unresolved import error. This error is buffered and used to\n     /// consolidate multiple unresolved import errors into a single diagnostic.\n     fn finalize_import(&mut self, import: &'b Import<'b>) -> Option<UnresolvedImportError> {\n-        let orig_vis = import.vis.replace(ty::Visibility::Invisible);\n+        let orig_vis = import.vis.take();\n         let ignore_binding = match &import.kind {\n             ImportKind::Single { target_bindings, .. } => target_bindings[TypeNS].get(),\n             _ => None,\n@@ -727,9 +734,9 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                         });\n                     }\n                 }\n-                if !is_prelude &&\n-                   max_vis.get() != ty::Visibility::Invisible && // Allow empty globs.\n-                   !max_vis.get().is_at_least(import.vis.get(), &*self.r)\n+                if !is_prelude\n+                    && let Some(max_vis) = max_vis.get()\n+                    && !max_vis.is_at_least(import.expect_vis(), &*self.r)\n                 {\n                     let msg = \"glob import doesn't reexport anything because no candidate is public enough\";\n                     self.r.lint_buffer.buffer_lint(UNUSED_IMPORTS, import.id, import.span, msg);\n@@ -742,7 +749,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         let mut all_ns_err = true;\n         self.r.per_ns(|this, ns| {\n             if !type_ns_only || ns == TypeNS {\n-                let orig_vis = import.vis.replace(ty::Visibility::Invisible);\n+                let orig_vis = import.vis.take();\n                 let binding = this.resolve_ident_in_module(\n                     module,\n                     ident,\n@@ -906,8 +913,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         let mut crate_private_reexport = false;\n         self.r.per_ns(|this, ns| {\n             if let Ok(binding) = source_bindings[ns].get() {\n-                let vis = import.vis.get();\n-                if !binding.vis.is_at_least(vis, &*this) {\n+                if !binding.vis.is_at_least(import.expect_vis(), &*this) {\n                     reexport_error = Some((ns, binding));\n                     if let ty::Visibility::Restricted(binding_def_id) = binding.vis {\n                         if binding_def_id.is_top_level_module() {"}, {"sha": "420159b5a6751cb3eebce2e70fa85e878b5bf4cf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0335909b4fe2c51073d2709f452bc83597d6899e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0335909b4fe2c51073d2709f452bc83597d6899e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0335909b4fe2c51073d2709f452bc83597d6899e", "patch": "@@ -1776,11 +1776,6 @@ fn is_field_vis_inherited(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n pub(crate) fn clean_visibility(vis: ty::Visibility) -> Visibility {\n     match vis {\n         ty::Visibility::Public => Visibility::Public,\n-        // NOTE: this is not quite right: `ty` uses `Invisible` to mean 'private',\n-        // while rustdoc really does mean inherited. That means that for enum variants, such as\n-        // `pub enum E { V }`, `V` will be marked as `Public` by `ty`, but as `Inherited` by rustdoc.\n-        // Various parts of clean override `tcx.visibility` explicitly to make sure this distinction is captured.\n-        ty::Visibility::Invisible => Visibility::Inherited,\n         ty::Visibility::Restricted(module) => Visibility::Restricted(module),\n     }\n }"}]}