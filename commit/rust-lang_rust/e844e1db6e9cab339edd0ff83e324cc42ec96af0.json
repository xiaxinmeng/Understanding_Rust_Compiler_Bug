{"sha": "e844e1db6e9cab339edd0ff83e324cc42ec96af0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NDRlMWRiNmU5Y2FiMzM5ZWRkMGZmODNlMzI0Y2M0MmVjOTZhZjA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-27T04:19:57Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-27T04:29:22Z"}, "message": "change vec::view sig to be sound (good catch @bblum)", "tree": {"sha": "e4cea710a9902720eaf6000bc5d55a1ff91ff8c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4cea710a9902720eaf6000bc5d55a1ff91ff8c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e844e1db6e9cab339edd0ff83e324cc42ec96af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e844e1db6e9cab339edd0ff83e324cc42ec96af0", "html_url": "https://github.com/rust-lang/rust/commit/e844e1db6e9cab339edd0ff83e324cc42ec96af0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e844e1db6e9cab339edd0ff83e324cc42ec96af0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2340ef96d54d488c53eeab1967a2347aebde38ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/2340ef96d54d488c53eeab1967a2347aebde38ca", "html_url": "https://github.com/rust-lang/rust/commit/2340ef96d54d488c53eeab1967a2347aebde38ca"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "47ea01af67700d50d2dcdb67d284e3c18a150e2c", "filename": "src/libcore/io.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e844e1db6e9cab339edd0ff83e324cc42ec96af0/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e844e1db6e9cab339edd0ff83e324cc42ec96af0/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=e844e1db6e9cab339edd0ff83e324cc42ec96af0", "patch": "@@ -697,8 +697,10 @@ impl BytesWriter: Writer {\n             vec::reserve(&mut buf, count);\n             unsafe { vec::raw::set_len(buf, count); }\n \n-            let view = vec::mut_view(buf, self.pos, count);\n-            vec::bytes::memcpy(view, v, v_len);\n+            {\n+                let view = vec::mut_view(buf, self.pos, count);\n+                vec::bytes::memcpy(view, v, v_len);\n+            }\n \n             self.pos += v_len;\n "}, {"sha": "77ac4b171ff6f4ca9642a48a3c3ad7805fefbec1", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e844e1db6e9cab339edd0ff83e324cc42ec96af0/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e844e1db6e9cab339edd0ff83e324cc42ec96af0/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=e844e1db6e9cab339edd0ff83e324cc42ec96af0", "patch": "@@ -338,7 +338,7 @@ pure fn slice<T: Copy>(v: &[const T], start: uint, end: uint) -> ~[T] {\n }\n \n /// Return a slice that points into another slice.\n-pure fn view<T>(v: &[T], start: uint, end: uint) -> &[T] {\n+pure fn view<T>(v: &r/[T], start: uint, end: uint) -> &r/[T] {\n     assert (start <= end);\n     assert (end <= len(v));\n     do as_imm_buf(v) |p, _len| {\n@@ -351,7 +351,7 @@ pure fn view<T>(v: &[T], start: uint, end: uint) -> &[T] {\n }\n \n /// Return a slice that points into another slice.\n-pure fn mut_view<T>(v: &[mut T], start: uint, end: uint) -> &[mut T] {\n+pure fn mut_view<T>(v: &r/[mut T], start: uint, end: uint) -> &r/[mut T] {\n     assert (start <= end);\n     assert (end <= len(v));\n     do as_mut_buf(v) |p, _len| {\n@@ -364,7 +364,8 @@ pure fn mut_view<T>(v: &[mut T], start: uint, end: uint) -> &[mut T] {\n }\n \n /// Return a slice that points into another slice.\n-pure fn const_view<T>(v: &[const T], start: uint, end: uint) -> &[const T] {\n+pure fn const_view<T>(v: &r/[const T], start: uint,\n+                      end: uint) -> &r/[const T] {\n     assert (start <= end);\n     assert (end <= len(v));\n     do as_const_buf(v) |p, _len| {\n@@ -1526,7 +1527,7 @@ impl<T: Copy> &[const T]: CopyableVector<T> {\n }\n \n trait ImmutableVector<T> {\n-    pure fn view(start: uint, end: uint) -> &[T];\n+    pure fn view(start: uint, end: uint) -> &self/[T];\n     pure fn foldr<U: Copy>(z: U, p: fn(T, U) -> U) -> U;\n     pure fn map<U>(f: fn(v: &T) -> U) -> ~[U];\n     pure fn mapi<U>(f: fn(uint, v: &T) -> U) -> ~[U];\n@@ -1546,7 +1547,7 @@ trait ImmutableEqVector<T: Eq> {\n /// Extension methods for vectors\n impl<T> &[T]: ImmutableVector<T> {\n     /// Return a slice that points into another slice.\n-    pure fn view(start: uint, end: uint) -> &[T] {\n+    pure fn view(start: uint, end: uint) -> &self/[T] {\n         view(self, start, end)\n     }\n     /// Reduce a vector from right to left"}]}