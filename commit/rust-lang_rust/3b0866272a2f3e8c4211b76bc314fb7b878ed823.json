{"sha": "3b0866272a2f3e8c4211b76bc314fb7b878ed823", "node_id": "C_kwDOAAsO6NoAKDNiMDg2NjI3MmEyZjNlOGM0MjExYjc2YmMzMTRmYjdiODc4ZWQ4MjM", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-05T11:10:02Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-10T05:34:13Z"}, "message": "Stop resolving doc links on `mod` items twice", "tree": {"sha": "75bf5cb65fe504479728c6b0414f444d6990e83d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75bf5cb65fe504479728c6b0414f444d6990e83d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b0866272a2f3e8c4211b76bc314fb7b878ed823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0866272a2f3e8c4211b76bc314fb7b878ed823", "html_url": "https://github.com/rust-lang/rust/commit/3b0866272a2f3e8c4211b76bc314fb7b878ed823", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b0866272a2f3e8c4211b76bc314fb7b878ed823/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b62b82aef4b6aa667161c664fc3ae738c2fc6b9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b62b82aef4b6aa667161c664fc3ae738c2fc6b9f", "html_url": "https://github.com/rust-lang/rust/commit/b62b82aef4b6aa667161c664fc3ae738c2fc6b9f"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "c767bcd464c0ca554cf99d7792cdc20826156464", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b0866272a2f3e8c4211b76bc314fb7b878ed823/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0866272a2f3e8c4211b76bc314fb7b878ed823/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=3b0866272a2f3e8c4211b76bc314fb7b878ed823", "patch": "@@ -2199,7 +2199,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     }\n \n     fn resolve_item(&mut self, item: &'ast Item) {\n-        self.resolve_doc_links(&item.attrs);\n+        let mod_inner_docs =\n+            matches!(item.kind, ItemKind::Mod(..)) && rustdoc::inner_docs(&item.attrs);\n+        if !mod_inner_docs {\n+            self.resolve_doc_links(&item.attrs);\n+        }\n \n         let name = item.ident.name;\n         debug!(\"(resolving item) resolving {} ({:?})\", name, item.kind);\n@@ -2292,7 +2296,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n             ItemKind::Mod(..) => {\n                 self.with_scope(item.id, |this| {\n-                    this.resolve_doc_links(&item.attrs);\n+                    if mod_inner_docs {\n+                        this.resolve_doc_links(&item.attrs);\n+                    }\n                     let old_macro_rules = this.parent_scope.macro_rules;\n                     visit::walk_item(this, item);\n                     // Maintain macro_rules scopes in the same way as during early resolution"}, {"sha": "a967f4b940c80901b4effc2426814567384bdbb3", "filename": "compiler/rustc_resolve/src/rustdoc.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b0866272a2f3e8c4211b76bc314fb7b878ed823/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0866272a2f3e8c4211b76bc314fb7b878ed823/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Frustdoc.rs?ref=3b0866272a2f3e8c4211b76bc314fb7b878ed823", "patch": "@@ -326,6 +326,14 @@ pub fn strip_generics_from_path(path_str: &str) -> Result<String, MalformedGener\n     if !stripped_path.is_empty() { Ok(stripped_path) } else { Err(MalformedGenerics::MissingType) }\n }\n \n+/// Returns whether the first doc-comment is an inner attribute.\n+///\n+//// If there are no doc-comments, return true.\n+/// FIXME(#78591): Support both inner and outer attributes on the same item.\n+pub fn inner_docs(attrs: &[ast::Attribute]) -> bool {\n+    attrs.iter().find(|a| a.doc_str().is_some()).map_or(true, |a| a.style == ast::AttrStyle::Inner)\n+}\n+\n /// Simplified version of the corresponding function in rustdoc.\n /// If the rustdoc version returns a successful result, this function must return the same result.\n /// Otherwise this function may return anything."}, {"sha": "ffe6fea7ea44731794f55d902ebc77d92ea10520", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3b0866272a2f3e8c4211b76bc314fb7b878ed823/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0866272a2f3e8c4211b76bc314fb7b878ed823/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=3b0866272a2f3e8c4211b76bc314fb7b878ed823", "patch": "@@ -10,7 +10,7 @@ use std::{fmt, iter};\n use arrayvec::ArrayVec;\n use thin_vec::ThinVec;\n \n-use rustc_ast::{self as ast, AttrStyle};\n+use rustc_ast as ast;\n use rustc_attr::{ConstStability, Deprecation, Stability, StabilityLevel};\n use rustc_const_eval::const_eval::is_unstable_const_fn;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -23,7 +23,7 @@ use rustc_hir_analysis::check::intrinsic::intrinsic_operation_unsafety;\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt, Visibility};\n-use rustc_resolve::rustdoc::{add_doc_fragment, attrs_to_doc_fragments, DocFragment};\n+use rustc_resolve::rustdoc::{add_doc_fragment, attrs_to_doc_fragments, inner_docs, DocFragment};\n use rustc_session::Session;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n@@ -405,7 +405,7 @@ impl Item {\n     pub(crate) fn inner_docs(&self, tcx: TyCtxt<'_>) -> bool {\n         self.item_id\n             .as_def_id()\n-            .map(|did| tcx.get_attrs_unchecked(did).inner_docs())\n+            .map(|did| inner_docs(tcx.get_attrs_unchecked(did)))\n             .unwrap_or(false)\n     }\n \n@@ -874,8 +874,6 @@ pub(crate) trait AttributesExt {\n \n     fn span(&self) -> Option<rustc_span::Span>;\n \n-    fn inner_docs(&self) -> bool;\n-\n     fn cfg(&self, tcx: TyCtxt<'_>, hidden_cfg: &FxHashSet<Cfg>) -> Option<Arc<Cfg>>;\n }\n \n@@ -894,14 +892,6 @@ impl AttributesExt for [ast::Attribute] {\n         self.iter().find(|attr| attr.doc_str().is_some()).map(|attr| attr.span)\n     }\n \n-    /// Returns whether the first doc-comment is an inner attribute.\n-    ///\n-    //// If there are no doc-comments, return true.\n-    /// FIXME(#78591): Support both inner and outer attributes on the same item.\n-    fn inner_docs(&self) -> bool {\n-        self.iter().find(|a| a.doc_str().is_some()).map_or(true, |a| a.style == AttrStyle::Inner)\n-    }\n-\n     fn cfg(&self, tcx: TyCtxt<'_>, hidden_cfg: &FxHashSet<Cfg>) -> Option<Arc<Cfg>> {\n         let sess = tcx.sess;\n         let doc_cfg_active = tcx.features().doc_cfg;"}]}