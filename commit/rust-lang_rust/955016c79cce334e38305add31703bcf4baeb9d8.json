{"sha": "955016c79cce334e38305add31703bcf4baeb9d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NTAxNmM3OWNjZTMzNGUzODMwNWFkZDMxNzAzYmNmNGJhZWI5ZDg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-18T02:47:26Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-18T04:54:57Z"}, "message": "Rollup merge of #55080 - thanatos:fix-localstorage-crash, r=GuillaumeGomez\n\nDetect if access to localStorage is forbidden by the user's browser\n\nIf the user's cookie/persistent storage setting forbid access to `localStorage`, catch the exception and abort the access.\n\nCurrently, attempting to use the expand/contract links at the top of the page for structs/consts/etc. fails due to an unhandled error while accessing `localStorage`, if such access is forbidden, as the exception from the failed access propagates all the way out, interrupting the expand/contract. Instead, I would like to degrade gracefully; the access won't happen (the collapse/expand state won't get persisted) but the actual expanding/contracting of the item will go on to succeed.\n\nFixes #55079", "tree": {"sha": "fb9c5f48d958c18754eb98cf2e2329080d852df7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb9c5f48d958c18754eb98cf2e2329080d852df7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/955016c79cce334e38305add31703bcf4baeb9d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvIEiIACgkQ/vbIBR0O\nATyBCQ/6AoCtB0e1h3OlqleaGRajQGt9cQ/ZIjWYe1zULgKIs6D5ZPvVD9DzfLtu\nmnmcGU+sDNQiVSHD2r/UrJJ3CuY/Gbg/3z2cg/eulfL3QQalmfh14jhktorhW1JT\nXy8kf+l93rMd5H9Fu4hGDjK9AjlRZbFjTikQlZRlfUf6YNjp9yAiWqmXd3rzntZH\n7okqA/k1CzZuIT3m/DtXXu3MqV6Xk450k13OKVpLwrLDLH8PhRvgzTu2Ve49BGBn\nVkDi3OV5XB5iO3U/cHaXKCj6DjbxIUHwDc5FjwlLFyiMWmFI+3YeMyl/oa5UoZXq\n0wEbk1KlunvC9eeAE3TCxZBw7tXDCsIurQ+o20vVGM7rk5UIcikAf0sbUmRo9sKs\n6SW+XvJItZk14cB6FrS0mlpDU10GnlwELyfcOV1zNH+9hAEcy5EEgUjXwy40/BW0\nhN+HI1NG6XRdGo7hwkItNR10KD3ewJ1RT7aFRkpJSJdvBaSGNQ7w4xQb5pqW8mUg\ncapxyTrEEbrOftTc5Ds+Fq9yLhhCWMnppFpOCcveiaEiBdd3U59aqLDYdH0OQu2w\nagpFbCEcoL0bhHkOabXwTa+TPRCHLrXvuG5Y0dA4lGDNeiUVmJK11x9NdVwisoEl\njClN2xl7vnzeIUZ1e7ffBqlho7tQTfc0ekNZyWM1qDV6go/P7Fo=\n=OZM+\n-----END PGP SIGNATURE-----", "payload": "tree fb9c5f48d958c18754eb98cf2e2329080d852df7\nparent ed68f1a5aa24350b0f38988a9a6d86301cd95166\nparent cbe98ec803c023deb6d200b6761acd7c7d73254c\nauthor kennytm <kennytm@gmail.com> 1539830846 +0800\ncommitter kennytm <kennytm@gmail.com> 1539838497 +0800\n\nRollup merge of #55080 - thanatos:fix-localstorage-crash, r=GuillaumeGomez\n\nDetect if access to localStorage is forbidden by the user's browser\n\nIf the user's cookie/persistent storage setting forbid access to `localStorage`, catch the exception and abort the access.\n\nCurrently, attempting to use the expand/contract links at the top of the page for structs/consts/etc. fails due to an unhandled error while accessing `localStorage`, if such access is forbidden, as the exception from the failed access propagates all the way out, interrupting the expand/contract. Instead, I would like to degrade gracefully; the access won't happen (the collapse/expand state won't get persisted) but the actual expanding/contracting of the item will go on to succeed.\n\nFixes #55079\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/955016c79cce334e38305add31703bcf4baeb9d8", "html_url": "https://github.com/rust-lang/rust/commit/955016c79cce334e38305add31703bcf4baeb9d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/955016c79cce334e38305add31703bcf4baeb9d8/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed68f1a5aa24350b0f38988a9a6d86301cd95166", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed68f1a5aa24350b0f38988a9a6d86301cd95166", "html_url": "https://github.com/rust-lang/rust/commit/ed68f1a5aa24350b0f38988a9a6d86301cd95166"}, {"sha": "cbe98ec803c023deb6d200b6761acd7c7d73254c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe98ec803c023deb6d200b6761acd7c7d73254c", "html_url": "https://github.com/rust-lang/rust/commit/cbe98ec803c023deb6d200b6761acd7c7d73254c"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "e10e330402f5edf3ca56fae7f527ab7bad8cdcb2", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/955016c79cce334e38305add31703bcf4baeb9d8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/955016c79cce334e38305add31703bcf4baeb9d8/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=955016c79cce334e38305add31703bcf4baeb9d8", "patch": "@@ -26,16 +26,34 @@ function onEach(arr, func) {\n     return false;\n }\n \n+function usableLocalStorage() {\n+    // Check if the browser supports localStorage at all:\n+    if (typeof(Storage) === \"undefined\") {\n+        return false;\n+    }\n+    // Check if we can access it; this access will fail if the browser\n+    // preferences deny access to localStorage, e.g., to prevent storage of\n+    // \"cookies\" (or cookie-likes, as is the case here).\n+    try {\n+        window.localStorage;\n+    } catch(err) {\n+        // Storage is supported, but browser preferences deny access to it.\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n function updateLocalStorage(name, value) {\n-    if (typeof(Storage) !== \"undefined\") {\n+    if (usableLocalStorage()) {\n         localStorage[name] = value;\n     } else {\n         // No Web Storage support so we do nothing\n     }\n }\n \n function getCurrentValue(name) {\n-    if (typeof(Storage) !== \"undefined\" && localStorage[name] !== undefined) {\n+    if (usableLocalStorage() && localStorage[name] !== undefined) {\n         return localStorage[name];\n     }\n     return null;"}]}