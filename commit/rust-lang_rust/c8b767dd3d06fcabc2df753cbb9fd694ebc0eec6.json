{"sha": "c8b767dd3d06fcabc2df753cbb9fd694ebc0eec6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4Yjc2N2RkM2QwNmZjYWJjMmRmNzUzY2JiOWZkNjk0ZWJjMGVlYzY=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-09-22T21:14:33Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-09-24T23:09:14Z"}, "message": "Rename `begin_unwind_string` to `fail_str`, refs #16114", "tree": {"sha": "034b0e71403f1cd4d534f065bca2cfbd12fa7e5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/034b0e71403f1cd4d534f065bca2cfbd12fa7e5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8b767dd3d06fcabc2df753cbb9fd694ebc0eec6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8b767dd3d06fcabc2df753cbb9fd694ebc0eec6", "html_url": "https://github.com/rust-lang/rust/commit/c8b767dd3d06fcabc2df753cbb9fd694ebc0eec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8b767dd3d06fcabc2df753cbb9fd694ebc0eec6/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c7d253ca3601d2f9caddc52e66bfc1de3bdd441", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441", "html_url": "https://github.com/rust-lang/rust/commit/1c7d253ca3601d2f9caddc52e66bfc1de3bdd441"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "f5f45b2f72e2a582f8efa46a1a8e375111e16fee", "filename": "src/libcore/failure.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8b767dd3d06fcabc2df753cbb9fd694ebc0eec6/src%2Flibcore%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b767dd3d06fcabc2df753cbb9fd694ebc0eec6/src%2Flibcore%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffailure.rs?ref=c8b767dd3d06fcabc2df753cbb9fd694ebc0eec6", "patch": "@@ -41,7 +41,7 @@ fn fail_(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n     let (expr, file, line) = *expr_file_line;\n     let ref file_line = (file, line);\n     format_args!(|args| -> () {\n-        fail_impl(args, file_line);\n+        fail_fmt(args, file_line);\n     }, \"{}\", expr);\n \n     unsafe { intrinsics::abort() }\n@@ -54,7 +54,7 @@ fn fail(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n     let (expr, file, line) = *expr_file_line;\n     let ref file_line = (file, line);\n     format_args!(|args| -> () {\n-        fail_impl(args, file_line);\n+        fail_fmt(args, file_line);\n     }, \"{}\", expr);\n \n     unsafe { intrinsics::abort() }\n@@ -65,18 +65,18 @@ fn fail(expr_file_line: &(&'static str, &'static str, uint)) -> ! {\n fn fail_bounds_check(file_line: &(&'static str, uint),\n                      index: uint, len: uint) -> ! {\n     format_args!(|args| -> () {\n-        fail_impl(args, file_line);\n+        fail_fmt(args, file_line);\n     }, \"index out of bounds: the len is {} but the index is {}\", len, index);\n     unsafe { intrinsics::abort() }\n }\n \n #[cold] #[inline(never)]\n-pub fn fail_impl_string(msg: &str, file: &(&'static str, uint)) -> ! {\n-    format_args!(|fmt| fail_impl(fmt, file), \"{}\", msg)\n+pub fn fail_str(msg: &str, file: &(&'static str, uint)) -> ! {\n+    format_args!(|fmt| fail_fmt(fmt, file), \"{}\", msg)\n }\n \n #[cold] #[inline(never)]\n-pub fn fail_impl(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n+pub fn fail_fmt(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n     #[allow(ctypes)]\n     extern {\n "}, {"sha": "0f972a6702916f22d4aab0f4d100d3e122cb4855", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8b767dd3d06fcabc2df753cbb9fd694ebc0eec6/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8b767dd3d06fcabc2df753cbb9fd694ebc0eec6/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=c8b767dd3d06fcabc2df753cbb9fd694ebc0eec6", "patch": "@@ -18,7 +18,7 @@ macro_rules! fail(\n     );\n     ($msg:expr) => ({\n         static _FILE_LINE: (&'static str, uint) = (file!(), line!());\n-        ::core::failure::fail_impl_string($msg, &_FILE_LINE)\n+        ::core::failure::fail_str($msg, &_FILE_LINE)\n     });\n     ($fmt:expr, $($arg:tt)*) => ({\n         // a closure can't have return type !, so we need a full\n@@ -40,7 +40,7 @@ macro_rules! fail(\n         #[inline(always)]\n         fn _run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n             static _FILE_LINE: (&'static str, uint) = (file!(), line!());\n-            ::core::failure::fail_impl(fmt, &_FILE_LINE)\n+            ::core::failure::fail_fmt(fmt, &_FILE_LINE)\n         }\n         format_args!(_run_fmt, $fmt, $($arg)*)\n     });"}]}