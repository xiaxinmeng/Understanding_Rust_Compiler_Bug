{"sha": "259379426cebf2c66e67076e6214b9e3e8c920df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1OTM3OTQyNmNlYmYyYzY2ZTY3MDc2ZTYyMTRiOWUzZThjOTIwZGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-08T22:53:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-12T17:53:55Z"}, "message": "Revamp the \"future incompatible\" section to clarify the situation\nbetter", "tree": {"sha": "8d31de5883048cd4306e287d5ee34aa5c8095bb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d31de5883048cd4306e287d5ee34aa5c8095bb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/259379426cebf2c66e67076e6214b9e3e8c920df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/259379426cebf2c66e67076e6214b9e3e8c920df", "html_url": "https://github.com/rust-lang/rust/commit/259379426cebf2c66e67076e6214b9e3e8c920df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/259379426cebf2c66e67076e6214b9e3e8c920df/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cffc9b1951f5e51ad19bf3b854f7afa8073aadb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cffc9b1951f5e51ad19bf3b854f7afa8073aadb", "html_url": "https://github.com/rust-lang/rust/commit/7cffc9b1951f5e51ad19bf3b854f7afa8073aadb"}], "stats": {"total": 97, "additions": 76, "deletions": 21}, "files": [{"sha": "3689312bed1d4e3a204c7436a762a89bd7a356d9", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=259379426cebf2c66e67076e6214b9e3e8c920df", "patch": "@@ -16,9 +16,6 @@\n \n use lint::{LintPass, LateLintPass, LintArray};\n \n-// name of the future-incompatible group\n-pub const FUTURE_INCOMPATIBLE: &'static str = \"future_incompatible\";\n-\n declare_lint! {\n     pub CONST_ERR,\n     Warn,"}, {"sha": "dca83dadec14be83ce12f97c7a52fd9a86fe05bd", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=259379426cebf2c66e67076e6214b9e3e8c920df", "patch": "@@ -75,10 +75,22 @@ pub struct LintStore {\n     /// is true if the lint group was added by a plugin.\n     lint_groups: FnvHashMap<&'static str, (Vec<LintId>, bool)>,\n \n+    /// Extra info for future incompatibility lints, descibing the\n+    /// issue or RFC that caused the incompatibility.\n+    future_incompatible: FnvHashMap<LintId, FutureIncompatibleInfo>,\n+\n     /// Maximum level a lint can be\n     lint_cap: Option<Level>,\n }\n \n+/// Extra information for a future incompatibility lint. See the call\n+/// to `register_future_incompatible` in `librustc_lint/lib.rs` for\n+/// guidelines.\n+pub struct FutureIncompatibleInfo {\n+    pub id: LintId,\n+    pub reference: &'static str // e.g., a URL for an issue/PR/RFC or error code\n+}\n+\n /// The targed of the `by_name` map, which accounts for renaming/deprecation.\n enum TargetLint {\n     /// A direct lint target\n@@ -123,6 +135,7 @@ impl LintStore {\n             late_passes: Some(vec!()),\n             by_name: FnvHashMap(),\n             levels: FnvHashMap(),\n+            future_incompatible: FnvHashMap(),\n             lint_groups: FnvHashMap(),\n             lint_cap: None,\n         }\n@@ -182,6 +195,20 @@ impl LintStore {\n         }\n     }\n \n+    pub fn register_future_incompatible(&mut self,\n+                                        sess: Option<&Session>,\n+                                        lints: Vec<FutureIncompatibleInfo>) {\n+        let ids = lints.iter().map(|f| f.id).collect();\n+        self.register_group(sess, false, \"future_incompatible\", ids);\n+        for info in lints {\n+            self.future_incompatible.insert(info.id, info);\n+        }\n+    }\n+\n+    pub fn future_incompatible(&self, id: LintId) -> Option<&FutureIncompatibleInfo> {\n+        self.future_incompatible.get(&id)\n+    }\n+\n     pub fn register_group(&mut self, sess: Option<&Session>,\n                           from_plugin: bool, name: &'static str,\n                           to: Vec<LintId>) {\n@@ -417,14 +444,18 @@ pub fn raw_struct_lint<'a>(sess: &'a Session,\n     };\n \n     // Check for future incompatibility lints and issue a stronger warning.\n-    let future_incompat_lints = &lints.lint_groups[builtin::FUTURE_INCOMPATIBLE];\n-    let this_id = LintId::of(lint);\n-    if future_incompat_lints.0.iter().any(|&id| id == this_id) {\n-        let msg = \"this lint will become a HARD ERROR in a future release!\";\n+    if let Some(future_incompatible) = lints.future_incompatible(LintId::of(lint)) {\n+        let explanation = format!(\"this was previously accepted by the compiler \\\n+                                   but is being phased out, \\\n+                                   and will become a HARD ERROR in a future release!\");\n+        let citation = format!(\"for more information, see {}\",\n+                               future_incompatible.reference);\n         if let Some(sp) = span {\n-            err.span_note(sp, msg);\n+            err.span_warn(sp, &explanation);\n+            err.span_note(sp, &citation);\n         } else {\n-            err.note(msg);\n+            err.warn(&explanation);\n+            err.note(&citation);\n         }\n     }\n "}, {"sha": "6061525ef398cc09da3749f08068d88c4113e3c6", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=259379426cebf2c66e67076e6214b9e3e8c920df", "patch": "@@ -41,7 +41,7 @@ use rustc_front::hir;\n \n pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         raw_emit_lint, check_crate, check_ast_crate, gather_attrs,\n-                        raw_struct_lint, GatherNodeLevels};\n+                        raw_struct_lint, GatherNodeLevels, FutureIncompatibleInfo};\n \n /// Specification of a single lint.\n #[derive(Copy, Clone, Debug)]"}, {"sha": "e80221cf645106c5d3942f1e7edfce281ab8d520", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=259379426cebf2c66e67076e6214b9e3e8c920df", "patch": "@@ -54,6 +54,7 @@ pub use rustc::util as util;\n \n use session::Session;\n use lint::LintId;\n+use lint::FutureIncompatibleInfo;\n \n mod bad_style;\n mod builtin;\n@@ -144,9 +145,28 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_MUT, UNREACHABLE_CODE, UNUSED_MUST_USE,\n                     UNUSED_UNSAFE, PATH_STATEMENTS, UNUSED_ATTRIBUTES);\n \n-    add_lint_group!(sess, FUTURE_INCOMPATIBLE,\n-                    PRIVATE_IN_PUBLIC, INVALID_TYPE_PARAM_DEFAULT,\n-                    MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT);\n+    // Guidelines for creating a future incompatibility lint:\n+    //\n+    // - Create a lint defaulting to warn as normal, with ideally the same error\n+    //   message you would normally give\n+    // - Add a suitable reference, typically an RFC or tracking issue. Go ahead\n+    //   and include the full URL.\n+    // - Later, change lint to error\n+    // - Eventually, remove lint\n+    store.register_future_incompatible(sess, vec![\n+        FutureIncompatibleInfo {\n+            id: LintId::of(PRIVATE_IN_PUBLIC),\n+            reference: \"the explanation for E0446 (`--explain E0446`)\",\n+        },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(INVALID_TYPE_PARAM_DEFAULT),\n+            reference: \"PR 30742 <https://github.com/rust-lang/rust/pull/30724>\",\n+        },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT),\n+            reference: \"RFC 218 <https://github.com/rust-lang/rfcs/blob/master/text/0218-empty-struct-with-braces.md>\",\n+        },\n+        ]);\n \n     // We have one lint pass defined specially\n     store.register_late_pass(sess, false, box lint::GatherNodeLevels);"}, {"sha": "73a1ecf7fc5dc926769311a8c21c75b87f346379", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=259379426cebf2c66e67076e6214b9e3e8c920df", "patch": "@@ -1528,7 +1528,7 @@ impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a,\n                                         lint::builtin::PRIVATE_IN_PUBLIC,\n                                         node_id,\n                                         ty.span,\n-                                        \"private type in public interface (error E0446)\".to_string()\n+                                        format!(\"private type in public interface\"),\n                                     );\n                                 }\n                             }"}, {"sha": "dfa144699b217ad0a6ec540dbf96f096ca41dccc", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=259379426cebf2c66e67076e6214b9e3e8c920df", "patch": "@@ -595,14 +595,10 @@ fn bad_struct_kind_err(sess: &Session, pat: &hir::Pat, path: &hir::Path, lint: b\n     let name = pprust::path_to_string(path);\n     let msg = format!(\"`{}` does not name a tuple variant or a tuple struct\", name);\n     if lint {\n-        let expanded_msg =\n-            format!(\"{}; RFC 218 disallowed matching of unit variants or unit structs via {}(..)\",\n-                    msg,\n-                    name);\n         sess.add_lint(lint::builtin::MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n                       pat.id,\n                       pat.span,\n-                      expanded_msg);\n+                      msg);\n     } else {\n         span_err!(sess, pat.span, E0164, \"{}\", msg);\n     }"}, {"sha": "af2824d0930d2e8ed8058264054a10d95d0185d0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=259379426cebf2c66e67076e6214b9e3e8c920df", "patch": "@@ -1917,8 +1917,8 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                 lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n                 param.id,\n                 param.span,\n-                format!(\"defaults for type parameters are only allowed \\\n-                         on `struct` or `enum` definitions (see issue #27336)\"));\n+                format!(\"defaults for type parameters are only allowed on type definitions, \\\n+                         like `struct` or `enum`\"));\n         }\n     }\n "}, {"sha": "16e5f06c07c9e8168dd3a3274ed3c34af45cf727", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259379426cebf2c66e67076e6214b9e3e8c920df/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=259379426cebf2c66e67076e6214b9e3e8c920df", "patch": "@@ -160,6 +160,17 @@ impl<'a> DiagnosticBuilder<'a> {\n         self.sub(Level::Note, msg, Some(sp), None);\n         self\n     }\n+    pub fn warn(&mut self, msg: &str) -> &mut DiagnosticBuilder<'a>  {\n+        self.sub(Level::Warning, msg, None, None);\n+        self\n+    }\n+    pub fn span_warn(&mut self,\n+                     sp: Span,\n+                     msg: &str)\n+                     -> &mut DiagnosticBuilder<'a> {\n+        self.sub(Level::Warning, msg, Some(sp), None);\n+        self\n+    }\n     pub fn help(&mut self , msg: &str) -> &mut DiagnosticBuilder<'a>  {\n         self.sub(Level::Help, msg, None, None);\n         self"}]}