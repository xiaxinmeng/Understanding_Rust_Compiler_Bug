{"sha": "744fa610eb6bd476b875dd2d6f8be5b7b9f1b77c", "node_id": "C_kwDOAAsO6NoAKDc0NGZhNjEwZWI2YmQ0NzZiODc1ZGQyZDZmOGJlNWI3YjlmMWI3N2M", "commit": {"author": {"name": "Zhixing Zhang", "email": "account@neoto.xin", "date": "2022-11-01T00:01:00Z"}, "committer": {"name": "Zhixing Zhang", "email": "me@neoto.xin", "date": "2022-11-01T22:41:16Z"}, "message": "fix(generic_const_exprs): Fix predicate inheritance for children of opaque types", "tree": {"sha": "c77ab0b92c19b4de6f7ae2dfc130ee6da30b566a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c77ab0b92c19b4de6f7ae2dfc130ee6da30b566a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/744fa610eb6bd476b875dd2d6f8be5b7b9f1b77c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/744fa610eb6bd476b875dd2d6f8be5b7b9f1b77c", "html_url": "https://github.com/rust-lang/rust/commit/744fa610eb6bd476b875dd2d6f8be5b7b9f1b77c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/744fa610eb6bd476b875dd2d6f8be5b7b9f1b77c/comments", "author": {"login": "Neo-Zhixing", "id": 8980455, "node_id": "MDQ6VXNlcjg5ODA0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8980455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Neo-Zhixing", "html_url": "https://github.com/Neo-Zhixing", "followers_url": "https://api.github.com/users/Neo-Zhixing/followers", "following_url": "https://api.github.com/users/Neo-Zhixing/following{/other_user}", "gists_url": "https://api.github.com/users/Neo-Zhixing/gists{/gist_id}", "starred_url": "https://api.github.com/users/Neo-Zhixing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Neo-Zhixing/subscriptions", "organizations_url": "https://api.github.com/users/Neo-Zhixing/orgs", "repos_url": "https://api.github.com/users/Neo-Zhixing/repos", "events_url": "https://api.github.com/users/Neo-Zhixing/events{/privacy}", "received_events_url": "https://api.github.com/users/Neo-Zhixing/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Neo-Zhixing", "id": 8980455, "node_id": "MDQ6VXNlcjg5ODA0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8980455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Neo-Zhixing", "html_url": "https://github.com/Neo-Zhixing", "followers_url": "https://api.github.com/users/Neo-Zhixing/followers", "following_url": "https://api.github.com/users/Neo-Zhixing/following{/other_user}", "gists_url": "https://api.github.com/users/Neo-Zhixing/gists{/gist_id}", "starred_url": "https://api.github.com/users/Neo-Zhixing/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Neo-Zhixing/subscriptions", "organizations_url": "https://api.github.com/users/Neo-Zhixing/orgs", "repos_url": "https://api.github.com/users/Neo-Zhixing/repos", "events_url": "https://api.github.com/users/Neo-Zhixing/events{/privacy}", "received_events_url": "https://api.github.com/users/Neo-Zhixing/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95a3a7277b44bbd2dd3485703d9a05f64652b60e", "url": "https://api.github.com/repos/rust-lang/rust/commits/95a3a7277b44bbd2dd3485703d9a05f64652b60e", "html_url": "https://github.com/rust-lang/rust/commit/95a3a7277b44bbd2dd3485703d9a05f64652b60e"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "5d1ca1cbd2389046881a349839011366507c796d", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/744fa610eb6bd476b875dd2d6f8be5b7b9f1b77c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744fa610eb6bd476b875dd2d6f8be5b7b9f1b77c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=744fa610eb6bd476b875dd2d6f8be5b7b9f1b77c", "patch": "@@ -427,6 +427,8 @@ pub(super) fn explicit_predicates_of<'tcx>(\n     } else {\n         if matches!(def_kind, DefKind::AnonConst) && tcx.lazy_normalization() {\n             let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+            let parent_def_id = tcx.hir().get_parent_item(hir_id);\n+\n             if tcx.hir().opt_const_param_default_param_hir_id(hir_id).is_some() {\n                 // In `generics_of` we set the generics' parent to be our parent's parent which means that\n                 // we lose out on the predicates of our actual parent if we dont return those predicates here.\n@@ -439,8 +441,33 @@ pub(super) fn explicit_predicates_of<'tcx>(\n                 //        parent of generics returned by `generics_of`\n                 //\n                 // In the above code we want the anon const to have predicates in its param env for `T: Trait`\n-                let item_def_id = tcx.hir().get_parent_item(hir_id);\n-                // In the above code example we would be calling `explicit_predicates_of(Foo)` here\n+                // and we would be calling `explicit_predicates_of(Foo)` here\n+                return tcx.explicit_predicates_of(parent_def_id);\n+            }\n+\n+            let parent_def_kind = tcx.def_kind(parent_def_id);\n+            if matches!(parent_def_kind, DefKind::OpaqueTy) {\n+                // In `instantiate_identity` we inherit the predicates of our parent.\n+                // However, opaque types do not have a parent (see `gather_explicit_predicates_of`), which means\n+                // that we lose out on the predicates of our actual parent if we dont return those predicates here.\n+                //\n+                //\n+                // fn foo<T: Trait>() -> impl Iterator<Output = Another<{ <T as Trait>::ASSOC }> > { todo!() }\n+                //                                                        ^^^^^^^^^^^^^^^^^^^ the def id we are calling\n+                //                                                                            explicit_predicates_of on\n+                //\n+                // In the above code we want the anon const to have predicates in its param env for `T: Trait`.\n+                // However, the anon const cannot inherit predicates from its parent since it's opaque.\n+                //\n+                // To fix this, we call `explicit_predicates_of` directly on `foo`, the parent's parent.\n+\n+                // In the above example this is `foo::{opaque#0}` or `impl Iterator`\n+                let parent_hir_id = tcx.hir().local_def_id_to_hir_id(parent_def_id.def_id);\n+\n+                // In the above example this is the function `foo`\n+                let item_def_id = tcx.hir().get_parent_item(parent_hir_id);\n+\n+                // In the above code example we would be calling `explicit_predicates_of(foo)` here\n                 return tcx.explicit_predicates_of(item_def_id);\n             }\n         }"}, {"sha": "75b57b621bb574160965e9d76f935458f8bd8d6e", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-99705.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/744fa610eb6bd476b875dd2d6f8be5b7b9f1b77c/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-99705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/744fa610eb6bd476b875dd2d6f8be5b7b9f1b77c/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-99705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-99705.rs?ref=744fa610eb6bd476b875dd2d6f8be5b7b9f1b77c", "patch": "@@ -0,0 +1,33 @@\n+// check-pass\n+#![crate_type = \"lib\"]\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+pub trait MyIterator {\n+    type Output;\n+}\n+\n+pub trait Foo {\n+    const ABC: usize;\n+}\n+\n+pub struct IteratorStruct<const N: usize>{\n+\n+}\n+\n+pub struct Bar<const N: usize> {\n+    pub data: [usize; N]\n+}\n+\n+impl<const N: usize> MyIterator for IteratorStruct<N> {\n+    type Output = Bar<N>;\n+}\n+\n+pub fn test1<T: Foo>() -> impl MyIterator<Output = Bar<{T::ABC}>> where [(); T::ABC]: Sized {\n+    IteratorStruct::<{T::ABC}>{}\n+}\n+\n+pub trait Baz<const N: usize>{}\n+impl<const N: usize> Baz<N> for Bar<N> {}\n+pub fn test2<T: Foo>() -> impl MyIterator<Output = impl Baz<{ T::ABC }>> where [(); T::ABC]: Sized {\n+    IteratorStruct::<{T::ABC}>{}\n+}"}]}