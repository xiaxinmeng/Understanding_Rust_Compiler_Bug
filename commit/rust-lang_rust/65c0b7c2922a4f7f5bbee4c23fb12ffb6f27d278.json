{"sha": "65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YzBiN2MyOTIyYTRmN2Y1YmJlZTRjMjNmYjEyZmZiNmYyN2QyNzg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-16T09:31:51Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T18:07:19Z"}, "message": "track def-id for inlined items", "tree": {"sha": "2dc059b1ee100c5f7b3c852667aedc1265e4d253", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dc059b1ee100c5f7b3c852667aedc1265e4d253"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278", "html_url": "https://github.com/rust-lang/rust/commit/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "247570732205fd226981082ee5c96c0abf5fed21", "url": "https://api.github.com/repos/rust-lang/rust/commits/247570732205fd226981082ee5c96c0abf5fed21", "html_url": "https://github.com/rust-lang/rust/commit/247570732205fd226981082ee5c96c0abf5fed21"}], "stats": {"total": 88, "additions": 72, "deletions": 16}, "files": [{"sha": "7f66b56b2d3170465e1f3e51d6fe64c580230c65", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278", "patch": "@@ -14,7 +14,7 @@ use super::MapEntry::*;\n use rustc_front::hir::*;\n use rustc_front::util;\n use rustc_front::intravisit::{self, Visitor};\n-use middle::def_id::{CRATE_DEF_INDEX, DefIndex};\n+use middle::def_id::{CRATE_DEF_INDEX, DefId, DefIndex};\n use std::iter::repeat;\n use syntax::ast::{NodeId, CRATE_NODE_ID, DUMMY_NODE_ID};\n use syntax::codemap::Span;\n@@ -50,6 +50,7 @@ impl<'ast> NodeCollector<'ast> {\n                   parent: &'ast InlinedParent,\n                   parent_node: NodeId,\n                   parent_def_path: DefPath,\n+                  parent_def_id: DefId,\n                   map: Vec<MapEntry<'ast>>,\n                   definitions: Definitions)\n                   -> NodeCollector<'ast> {\n@@ -60,8 +61,14 @@ impl<'ast> NodeCollector<'ast> {\n             definitions: definitions,\n         };\n \n+        assert_eq!(parent_def_path.krate, parent_def_id.krate);\n+        let root_path = Box::new(InlinedRootPath {\n+            data: parent_def_path.data,\n+            def_id: parent_def_id,\n+        });\n+\n         collector.insert_entry(parent_node, RootInlinedParent(parent));\n-        collector.create_def(parent_node, DefPathData::InlinedRoot(parent_def_path));\n+        collector.create_def(parent_node, DefPathData::InlinedRoot(root_path));\n \n         collector\n     }"}, {"sha": "bf5fd736526a106e3e1962a65c2a7431ab098938", "filename": "src/librustc/front/map/definitions.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fdefinitions.rs?ref=65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278", "patch": "@@ -60,13 +60,38 @@ pub struct DefData {\n }\n \n pub type DefPath = Vec<DisambiguatedDefPathData>;\n+/// Root of an inlined item. We track the `DefPath` of the item within\n+/// the original crate but also its def-id. This is kind of an\n+/// augmented version of a `DefPath` that includes a `DefId`. This is\n+/// all sort of ugly but the hope is that inlined items will be going\n+/// away soon anyway.\n+///\n+/// Some of the constraints that led to the current approach:\n+///\n+/// - I don't want to have a `DefId` in the main `DefPath` because\n+///   that gets serialized for incr. comp., and when reloaded the\n+///   `DefId` is no longer valid. I'd rather maintain the invariant\n+///   that every `DefId` is valid, and a potentially outdated `DefId` is\n+///   represented as a `DefPath`.\n+///   - (We don't serialize def-paths from inlined items, so it's ok to have one here.)\n+/// - We need to be able to extract the def-id from inline items to\n+///   make the symbol name. In theory we could retrace it from the\n+///   data, but the metadata doesn't have the required indices, and I\n+///   don't want to write the code to create one just for this.\n+/// - It may be that we don't actually need `data` at all. We'll have\n+///   to see about that.\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n+pub struct InlinedRootPath {\n+    pub data: Vec<DisambiguatedDefPathData>,\n+    pub def_id: DefId,\n+}\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum DefPathData {\n     // Root: these should only be used for the root nodes, because\n     // they are treated specially by the `def_path` function.\n     CrateRoot,\n-    InlinedRoot(DefPath),\n+    InlinedRoot(Box<InlinedRootPath>),\n \n     // Catch-all for random DefId things like DUMMY_NODE_ID\n     Misc,"}, {"sha": "a1355046f48c1ddea156190ca8b0b493b233b973", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278", "patch": "@@ -12,7 +12,8 @@ pub use self::Node::*;\n pub use self::PathElem::*;\n use self::MapEntry::*;\n use self::collector::NodeCollector;\n-pub use self::definitions::{Definitions, DefKey, DefPath, DefPathData, DisambiguatedDefPathData};\n+pub use self::definitions::{Definitions, DefKey, DefPath, DefPathData,\n+                            DisambiguatedDefPathData, InlinedRootPath};\n \n use dep_graph::{DepGraph, DepNode};\n \n@@ -322,7 +323,8 @@ impl<'ast> Map<'ast> {\n                     id = p,\n \n                 RootCrate |\n-                RootInlinedParent(_) => // FIXME(#2369) clarify story about cross-crate dep tracking\n+                RootInlinedParent(_) =>\n+                    // FIXME(#32015) clarify story about cross-crate dep tracking\n                     return DepNode::Krate,\n \n                 NotPresent =>\n@@ -958,6 +960,7 @@ pub fn map_crate<'ast>(forest: &'ast mut Forest) -> Map<'ast> {\n pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n                                           parent_path: Vec<PathElem>,\n                                           parent_def_path: DefPath,\n+                                          parent_def_id: DefId,\n                                           ii: InlinedItem,\n                                           fold_ops: F)\n                                           -> &'ast InlinedItem {\n@@ -987,6 +990,7 @@ pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n             ii_parent,\n             ii_parent_id,\n             parent_def_path,\n+            parent_def_id,\n             mem::replace(&mut *map.map.borrow_mut(), vec![]),\n             mem::replace(&mut *map.definitions.borrow_mut(), Definitions::new()));\n     ii_parent.ii.visit(&mut collector);"}, {"sha": "60f7110764699eeacbae0dfdd10ea8abb1291a5c", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278", "patch": "@@ -125,6 +125,7 @@ pub fn decode_inlined_item<'tcx>(cdata: &cstore::crate_metadata,\n                                  tcx: &TyCtxt<'tcx>,\n                                  parent_path: Vec<ast_map::PathElem>,\n                                  parent_def_path: ast_map::DefPath,\n+                                 parent_did: DefId,\n                                  ast_doc: rbml::Doc,\n                                  orig_did: DefId)\n                                  -> &'tcx InlinedItem {\n@@ -149,6 +150,7 @@ pub fn decode_inlined_item<'tcx>(cdata: &cstore::crate_metadata,\n     let ii = ast_map::map_decoded_item(&dcx.tcx.map,\n                                        parent_path,\n                                        parent_def_path,\n+                                       parent_did,\n                                        decode_ast(ast_doc),\n                                        dcx);\n     let name = match *ii {\n@@ -349,8 +351,8 @@ fn simplify_ast(ii: InlinedItemRef) -> InlinedItem {\n     }\n }\n \n-fn decode_ast(par_doc: rbml::Doc) -> InlinedItem {\n-    let chi_doc = par_doc.get(c::tag_tree as usize);\n+fn decode_ast(item_doc: rbml::Doc) -> InlinedItem {\n+    let chi_doc = item_doc.get(c::tag_tree as usize);\n     let mut rbml_r = reader::Decoder::new(chi_doc);\n     rbml_r.read_opaque(|decoder, _| Decodable::decode(decoder)).unwrap()\n }\n@@ -1280,8 +1282,8 @@ fn encode_item_ast(rbml_w: &mut Encoder, item: &hir::Item) {\n }\n \n #[cfg(test)]\n-fn decode_item_ast(par_doc: rbml::Doc) -> hir::Item {\n-    let chi_doc = par_doc.get(c::tag_tree as usize);\n+fn decode_item_ast(item_doc: rbml::Doc) -> hir::Item {\n+    let chi_doc = item_doc.get(c::tag_tree as usize);\n     let mut d = reader::Decoder::new(chi_doc);\n     Decodable::decode(&mut d).unwrap()\n }"}, {"sha": "5c3c7ad1b3023410ac9d01e60b064d36dee2e931", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=65c0b7c2922a4f7f5bbee4c23fb12ffb6f27d278", "patch": "@@ -803,25 +803,43 @@ pub fn maybe_get_item_ast<'tcx>(cdata: Cmd, tcx: &TyCtxt<'tcx>, id: DefIndex)\n     debug!(\"Looking up item: {:?}\", id);\n     let item_doc = cdata.lookup_item(id);\n     let item_did = item_def_id(item_doc, cdata);\n+    let parent_def_id = DefId {\n+        krate: cdata.cnum,\n+        index: def_key(cdata, id).parent.unwrap()\n+    };\n     let mut parent_path = item_path(item_doc);\n     parent_path.pop();\n     let mut parent_def_path = def_path(cdata, id);\n     parent_def_path.pop();\n     if let Some(ast_doc) = reader::maybe_get_doc(item_doc, tag_ast as usize) {\n-        let ii = decode_inlined_item(cdata, tcx, parent_path,\n+        let ii = decode_inlined_item(cdata,\n+                                     tcx,\n+                                     parent_path,\n                                      parent_def_path,\n-                                     ast_doc, item_did);\n+                                     parent_def_id,\n+                                     ast_doc,\n+                                     item_did);\n         return FoundAst::Found(ii);\n     } else if let Some(parent_did) = item_parent_item(cdata, item_doc) {\n         // Remove the last element from the paths, since we are now\n         // trying to inline the parent.\n-        parent_path.pop();\n-        parent_def_path.pop();\n+        let grandparent_def_id = DefId {\n+            krate: cdata.cnum,\n+            index: def_key(cdata, parent_def_id.index).parent.unwrap()\n+        };\n+        let mut grandparent_path = parent_path;\n+        grandparent_path.pop();\n+        let mut grandparent_def_path = parent_def_path;\n+        grandparent_def_path.pop();\n         let parent_doc = cdata.lookup_item(parent_did.index);\n         if let Some(ast_doc) = reader::maybe_get_doc(parent_doc, tag_ast as usize) {\n-            let ii = decode_inlined_item(cdata, tcx, parent_path,\n-                                         parent_def_path,\n-                                         ast_doc, parent_did);\n+            let ii = decode_inlined_item(cdata,\n+                                         tcx,\n+                                         grandparent_path,\n+                                         grandparent_def_path,\n+                                         grandparent_def_id,\n+                                         ast_doc,\n+                                         parent_did);\n             if let &InlinedItem::Item(ref i) = ii {\n                 return FoundAst::FoundParent(parent_did, i);\n             }"}]}