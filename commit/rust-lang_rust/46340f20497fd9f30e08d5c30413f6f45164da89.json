{"sha": "46340f20497fd9f30e08d5c30413f6f45164da89", "node_id": "C_kwDOAAsO6NoAKDQ2MzQwZjIwNDk3ZmQ5ZjMwZTA4ZDVjMzA0MTNmNmY0NTE2NGRhODk", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-30T09:57:53Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-03-30T09:57:53Z"}, "message": "clippy: nameres for primitive type impls", "tree": {"sha": "7f3bc97576b0f7686f705b7f76cd70c750652c01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f3bc97576b0f7686f705b7f76cd70c750652c01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46340f20497fd9f30e08d5c30413f6f45164da89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46340f20497fd9f30e08d5c30413f6f45164da89", "html_url": "https://github.com/rust-lang/rust/commit/46340f20497fd9f30e08d5c30413f6f45164da89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46340f20497fd9f30e08d5c30413f6f45164da89/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01d4e835c1c7f7035efe6c187a0137dd2432c2c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/01d4e835c1c7f7035efe6c187a0137dd2432c2c3", "html_url": "https://github.com/rust-lang/rust/commit/01d4e835c1c7f7035efe6c187a0137dd2432c2c3"}], "stats": {"total": 113, "additions": 75, "deletions": 38}, "files": [{"sha": "62e144398012d4b5780c83bbe51f44a2efc5928e", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 60, "deletions": 35, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/46340f20497fd9f30e08d5c30413f6f45164da89/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46340f20497fd9f30e08d5c30413f6f45164da89/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=46340f20497fd9f30e08d5c30413f6f45164da89", "patch": "@@ -87,6 +87,8 @@ use rustc_middle::hir::place::PlaceBase;\n use rustc_middle::ty as rustc_ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc_middle::ty::binding::BindingMode;\n+use rustc_middle::ty::{IntTy, UintTy, FloatTy};\n+use rustc_middle::ty::fast_reject::SimplifiedTypeGen::*;\n use rustc_middle::ty::{layout::IntegerExt, BorrowKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeFoldable, UpvarCapture};\n use rustc_semver::RustcVersion;\n use rustc_session::Session;\n@@ -455,14 +457,6 @@ pub fn path_def_id<'tcx>(cx: &LateContext<'_>, maybe_path: &impl MaybePath<'tcx>\n /// Resolves a def path like `std::vec::Vec`.\n /// This function is expensive and should be used sparingly.\n pub fn def_path_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n-    macro_rules! try_res {\n-        ($e:expr) => {\n-            match $e {\n-                Some(e) => e,\n-                None => return Res::Err,\n-            }\n-        };\n-    }\n     fn item_child_by_name(tcx: TyCtxt<'_>, def_id: DefId, name: &str) -> Option<Res> {\n         match tcx.def_kind(def_id) {\n             DefKind::Mod | DefKind::Enum | DefKind::Trait => tcx\n@@ -479,10 +473,36 @@ pub fn def_path_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n             _ => None,\n         }\n     }\n-    fn find_primitive(_tcx: TyCtxt<'_>, _name: &str) -> Option<DefId> {\n-        // FIXME: Deal with this without relying on lang items or by only\n-        // looking at a single impl.\n-        None\n+    fn find_primitive<'tcx>(tcx: TyCtxt<'tcx>, name: &str) -> impl Iterator<Item = DefId> + 'tcx {\n+        let single = |ty| tcx.incoherent_impls(ty).iter().copied();\n+        let empty = || [].iter().copied();\n+        match name {\n+            \"bool\" => single(BoolSimplifiedType),\n+            \"char\" => single(CharSimplifiedType),\n+            \"str\" => single(StrSimplifiedType),\n+            \"array\" => single(ArraySimplifiedType),\n+            \"slice\" => single(SliceSimplifiedType),\n+            // FIXME: rustdoc documents these two using just `pointer`.\n+            //\n+            // Maybe this is something we should do here too.\n+            \"const_ptr\" => single(PtrSimplifiedType(Mutability::Not)),\n+            \"mut_ptr\" => single(PtrSimplifiedType(Mutability::Mut)),\n+            \"isize\" => single(IntSimplifiedType(IntTy::Isize)),\n+            \"i8\" => single(IntSimplifiedType(IntTy::I8)),\n+            \"i16\" => single(IntSimplifiedType(IntTy::I16)),\n+            \"i32\" => single(IntSimplifiedType(IntTy::I32)),\n+            \"i64\" => single(IntSimplifiedType(IntTy::I64)),\n+            \"i128\" => single(IntSimplifiedType(IntTy::I128)),\n+            \"usize\" => single(UintSimplifiedType(UintTy::Usize)),\n+            \"u8\" => single(UintSimplifiedType(UintTy::U8)),\n+            \"u16\" => single(UintSimplifiedType(UintTy::U16)),\n+            \"u32\" => single(UintSimplifiedType(UintTy::U32)),\n+            \"u64\" => single(UintSimplifiedType(UintTy::U64)),\n+            \"u128\" => single(UintSimplifiedType(UintTy::U128)),\n+            \"f32\" => single(FloatSimplifiedType(FloatTy::F32)),\n+            \"f64\" => single(FloatSimplifiedType(FloatTy::F64)),\n+            _ => empty(),\n+        }\n     }\n     fn find_crate(tcx: TyCtxt<'_>, name: &str) -> Option<DefId> {\n         tcx.crates(())\n@@ -500,30 +520,35 @@ pub fn def_path_res(cx: &LateContext<'_>, path: &[&str]) -> Res {\n         _ => return Res::Err,\n     };\n     let tcx = cx.tcx;\n-    let first = try_res!(\n-        find_primitive(tcx, base)\n-            .or_else(|| find_crate(tcx, base))\n-            .and_then(|id| item_child_by_name(tcx, id, first))\n-    );\n+    let starts = find_primitive(tcx, base)\n+        .chain(find_crate(tcx, base))\n+        .flat_map(|id| item_child_by_name(tcx, id, first));\n \n-    let last = path\n-        .iter()\n-        .copied()\n-        // for each segment, find the child item\n-        .try_fold(first, |res, segment| {\n-            let def_id = res.def_id();\n-            if let Some(item) = item_child_by_name(tcx, def_id, segment) {\n-                Some(item)\n-            } else if matches!(res, Res::Def(DefKind::Enum | DefKind::Struct, _)) {\n-                // it is not a child item so check inherent impl items\n-                tcx.inherent_impls(def_id)\n-                    .iter()\n-                    .find_map(|&impl_def_id| item_child_by_name(tcx, impl_def_id, segment))\n-            } else {\n-                None\n-            }\n-        });\n-    try_res!(last).expect_non_local()\n+    for first in starts {\n+        let last = path\n+            .iter()\n+            .copied()\n+            // for each segment, find the child item\n+            .try_fold(first, |res, segment| {\n+                let def_id = res.def_id();\n+                if let Some(item) = item_child_by_name(tcx, def_id, segment) {\n+                    Some(item)\n+                } else if matches!(res, Res::Def(DefKind::Enum | DefKind::Struct, _)) {\n+                    // it is not a child item so check inherent impl items\n+                    tcx.inherent_impls(def_id)\n+                        .iter()\n+                        .find_map(|&impl_def_id| item_child_by_name(tcx, impl_def_id, segment))\n+                } else {\n+                    None\n+                }\n+            });\n+\n+        if let Some(last) = last {\n+            return last;\n+        }\n+    }\n+\n+    Res::Err\n }\n \n /// Convenience function to get the `DefId` of a trait by path."}, {"sha": "338b3b5b28f429b9700d5849886109698f758242", "filename": "src/tools/clippy/tests/ui-toml/toml_disallowed_methods/conf_disallowed_methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46340f20497fd9f30e08d5c30413f6f45164da89/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46340f20497fd9f30e08d5c30413f6f45164da89/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.rs?ref=46340f20497fd9f30e08d5c30413f6f45164da89", "patch": "@@ -10,8 +10,8 @@ fn main() {\n     let mut a = vec![1, 2, 3, 4];\n     a.iter().sum::<i32>();\n \n-    a.sort_unstable(); // FIXME: Warn here\n+    a.sort_unstable();\n \n-    let _ = 2.0f32.clamp(3.0f32, 4.0f32); // FIXME: Warn here\n+    let _ = 2.0f32.clamp(3.0f32, 4.0f32);\n     let _ = 2.0f64.clamp(3.0f64, 4.0f64);\n }"}, {"sha": "5533676aea287b80677e8ec9f9cd0423dd52e405", "filename": "src/tools/clippy/tests/ui-toml/toml_disallowed_methods/conf_disallowed_methods.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/46340f20497fd9f30e08d5c30413f6f45164da89/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46340f20497fd9f30e08d5c30413f6f45164da89/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.stderr?ref=46340f20497fd9f30e08d5c30413f6f45164da89", "patch": "@@ -20,5 +20,17 @@ error: use of a disallowed method `std::iter::Iterator::sum`\n LL |     a.iter().sum::<i32>();\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: use of a disallowed method `slice::sort_unstable`\n+  --> $DIR/conf_disallowed_methods.rs:13:5\n+   |\n+LL |     a.sort_unstable();\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: use of a disallowed method `f32::clamp`\n+  --> $DIR/conf_disallowed_methods.rs:15:13\n+   |\n+LL |     let _ = 2.0f32.clamp(3.0f32, 4.0f32);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n "}]}