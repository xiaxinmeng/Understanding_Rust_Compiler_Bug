{"sha": "4dd45069feda95e06cf8287629caea9c64d9d481", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZDQ1MDY5ZmVkYTk1ZTA2Y2Y4Mjg3NjI5Y2FlYTljNjRkOWQ0ODE=", "commit": {"author": {"name": "Yukio Siraichi", "email": "yukio.siraichi@gmail.com", "date": "2018-03-11T05:21:38Z"}, "committer": {"name": "Yukio Siraichi", "email": "yukio.siraichi@gmail.com", "date": "2018-03-18T23:46:24Z"}, "message": "Refactored with high-order functions.", "tree": {"sha": "61837a83cfc5c692aea13160265e6bfac6d2cd9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61837a83cfc5c692aea13160265e6bfac6d2cd9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dd45069feda95e06cf8287629caea9c64d9d481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd45069feda95e06cf8287629caea9c64d9d481", "html_url": "https://github.com/rust-lang/rust/commit/4dd45069feda95e06cf8287629caea9c64d9d481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dd45069feda95e06cf8287629caea9c64d9d481/comments", "author": {"login": "ysiraichi", "id": 3337141, "node_id": "MDQ6VXNlcjMzMzcxNDE=", "avatar_url": "https://avatars.githubusercontent.com/u/3337141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysiraichi", "html_url": "https://github.com/ysiraichi", "followers_url": "https://api.github.com/users/ysiraichi/followers", "following_url": "https://api.github.com/users/ysiraichi/following{/other_user}", "gists_url": "https://api.github.com/users/ysiraichi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysiraichi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysiraichi/subscriptions", "organizations_url": "https://api.github.com/users/ysiraichi/orgs", "repos_url": "https://api.github.com/users/ysiraichi/repos", "events_url": "https://api.github.com/users/ysiraichi/events{/privacy}", "received_events_url": "https://api.github.com/users/ysiraichi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ysiraichi", "id": 3337141, "node_id": "MDQ6VXNlcjMzMzcxNDE=", "avatar_url": "https://avatars.githubusercontent.com/u/3337141?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysiraichi", "html_url": "https://github.com/ysiraichi", "followers_url": "https://api.github.com/users/ysiraichi/followers", "following_url": "https://api.github.com/users/ysiraichi/following{/other_user}", "gists_url": "https://api.github.com/users/ysiraichi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysiraichi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysiraichi/subscriptions", "organizations_url": "https://api.github.com/users/ysiraichi/orgs", "repos_url": "https://api.github.com/users/ysiraichi/repos", "events_url": "https://api.github.com/users/ysiraichi/events{/privacy}", "received_events_url": "https://api.github.com/users/ysiraichi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab7020bd95c695be4f3c06dce236fada0dabb8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab7020bd95c695be4f3c06dce236fada0dabb8e", "html_url": "https://github.com/rust-lang/rust/commit/fab7020bd95c695be4f3c06dce236fada0dabb8e"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "5bfeff89e355a8335725e3bc6d9fbf5f4a4f8044", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4dd45069feda95e06cf8287629caea9c64d9d481/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd45069feda95e06cf8287629caea9c64d9d481/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=4dd45069feda95e06cf8287629caea9c64d9d481", "patch": "@@ -888,28 +888,22 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                 err: &mut DiagnosticBuilder<'tcx>,\n                                 trait_ref: &ty::Binder<ty::TraitRef<'tcx>>) {\n         let ty::Binder(trait_ref) = trait_ref;\n-\n         let span = obligation.cause.span;\n-        let mut snippet = match self.tcx.sess.codemap().span_to_snippet(span) {\n-            Ok(s) => s,\n-            Err(_) => String::from(\"\"),\n-        };\n \n-        let mut refs_number = 0;\n+        if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(span) {\n+            let refs_number = snippet.chars()\n+                .filter(|c| !c.is_whitespace())\n+                .take_while(|c| *c == '&')\n+                .count();\n \n-        for c in snippet.chars() {\n-            if c == '&' {\n-                refs_number += 1;\n-            }\n-        }\n+            let mut refs_remaining = refs_number;\n+            let mut trait_type = trait_ref.self_ty();\n+            let mut selcx = SelectionContext::new(self);\n \n-        let mut refs_remaining = refs_number;\n-        let mut trait_type = trait_ref.self_ty();\n-        let mut selcx = SelectionContext::new(self);\n+            while refs_remaining > 0 {\n+                if let ty::TypeVariants::TyRef(_, ty::TypeAndMut{ ty: t_type, mutbl: _ }) =\n+                    trait_type.sty {\n \n-        while refs_remaining > 0 {\n-            if let ty::TypeVariants::TyRef(_, ty::TypeAndMut{ ty: t_type, mutbl: _ }) =\n-                trait_type.sty {\n                     trait_type = t_type;\n                     refs_remaining -= 1;\n \n@@ -920,14 +914,20 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                          new_trait_ref.to_predicate());\n \n                     if selcx.evaluate_obligation(&new_obligation) {\n-                        for i in 0..refs_number {\n-                            snippet.remove(i);\n-                        }\n-                        err.span_suggestion(span, \"consider removing `&`s like\", format!(\"{}\", snippet));\n+                        let suggest_snippet = snippet.chars()\n+                            .skip(refs_number)\n+                            .collect::<String>();\n+\n+                        err.span_suggestion(span,\n+                                            \"consider removing `&`s like\",\n+                                            format!(\"{}\", suggest_snippet));\n+\n+                        break;\n                     }\n                 } else {\n                     break;\n                 }\n+            }\n         }\n     }\n "}]}