{"sha": "887e927e7b39212e72ab85fb263f6b01a8fef7a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4N2U5MjdlN2IzOTIxMmU3MmFiODVmYjI2M2Y2YjAxYThmZWY3YTc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-26T15:05:49Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-26T15:05:49Z"}, "message": "Rollup merge of #32440 - tshepang:compact, r=steveklabnik\n\ndoc: remove needless bindings\n\nThe extra syntax is more noise than help in simple examples like this", "tree": {"sha": "4f0603b6c8f2ae44afae0809d18231ba44df8f46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f0603b6c8f2ae44afae0809d18231ba44df8f46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/887e927e7b39212e72ab85fb263f6b01a8fef7a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/887e927e7b39212e72ab85fb263f6b01a8fef7a7", "html_url": "https://github.com/rust-lang/rust/commit/887e927e7b39212e72ab85fb263f6b01a8fef7a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/887e927e7b39212e72ab85fb263f6b01a8fef7a7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8869394bb574134355334f0d55eed7be3188d97", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8869394bb574134355334f0d55eed7be3188d97", "html_url": "https://github.com/rust-lang/rust/commit/f8869394bb574134355334f0d55eed7be3188d97"}, {"sha": "2c48214a1b8e8a609fbe36b10bc62cbf6bd7b9e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c48214a1b8e8a609fbe36b10bc62cbf6bd7b9e3", "html_url": "https://github.com/rust-lang/rust/commit/2c48214a1b8e8a609fbe36b10bc62cbf6bd7b9e3"}], "stats": {"total": 180, "additions": 48, "deletions": 132}, "files": [{"sha": "7b9296bb4c893ff2fc6f5efba19c9b9017de2f4e", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 48, "deletions": 132, "changes": 180, "blob_url": "https://github.com/rust-lang/rust/blob/887e927e7b39212e72ab85fb263f6b01a8fef7a7/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887e927e7b39212e72ab85fb263f6b01a8fef7a7/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=887e927e7b39212e72ab85fb263f6b01a8fef7a7", "patch": "@@ -153,14 +153,9 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let d = '1';\n-    ///\n-    /// assert!(d.is_digit(10));\n-    ///\n-    /// let d = 'f';\n-    ///\n-    /// assert!(d.is_digit(16));\n-    /// assert!(!d.is_digit(10));\n+    /// assert!('1'.is_digit(10));\n+    /// assert!('f'.is_digit(16));\n+    /// assert!(!'f'.is_digit(10));\n     /// ```\n     ///\n     /// Passing a large radix, causing a panic:\n@@ -169,10 +164,8 @@ impl char {\n     /// use std::thread;\n     ///\n     /// let result = thread::spawn(|| {\n-    ///     let d = '1';\n-    ///\n     ///     // this panics\n-    ///     d.is_digit(37);\n+    ///     '1'.is_digit(37);\n     /// }).join();\n     ///\n     /// assert!(result.is_err());\n@@ -209,25 +202,15 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let d = '1';\n-    ///\n-    /// assert_eq!(d.to_digit(10), Some(1));\n-    ///\n-    /// let d = 'f';\n-    ///\n-    /// assert_eq!(d.to_digit(16), Some(15));\n+    /// assert_eq!('1'.to_digit(10), Some(1));\n+    /// assert_eq!('f'.to_digit(16), Some(15));\n     /// ```\n     ///\n     /// Passing a non-digit results in failure:\n     ///\n     /// ```\n-    /// let d = 'f';\n-    ///\n-    /// assert_eq!(d.to_digit(10), None);\n-    ///\n-    /// let d = 'z';\n-    ///\n-    /// assert_eq!(d.to_digit(16), None);\n+    /// assert_eq!('f'.to_digit(10), None);\n+    /// assert_eq!('z'.to_digit(16), None);\n     /// ```\n     ///\n     /// Passing a large radix, causing a panic:\n@@ -236,9 +219,7 @@ impl char {\n     /// use std::thread;\n     ///\n     /// let result = thread::spawn(|| {\n-    ///   let d = '1';\n-    ///\n-    ///   d.to_digit(37);\n+    ///     '1'.to_digit(37);\n     /// }).join();\n     ///\n     /// assert!(result.is_err());\n@@ -463,12 +444,8 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = 'a';\n-    ///\n-    /// assert!(c.is_alphabetic());\n-    ///\n-    /// let c = '\u4eac';\n-    /// assert!(c.is_alphabetic());\n+    /// assert!('a'.is_alphabetic());\n+    /// assert!('\u4eac'.is_alphabetic());\n     ///\n     /// let c = '\ud83d\udc9d';\n     /// // love is many things, but it is not alphabetic\n@@ -522,21 +499,13 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = 'a';\n-    /// assert!(c.is_lowercase());\n-    ///\n-    /// let c = '\u03b4';\n-    /// assert!(c.is_lowercase());\n-    ///\n-    /// let c = 'A';\n-    /// assert!(!c.is_lowercase());\n-    ///\n-    /// let c = '\u0394';\n-    /// assert!(!c.is_lowercase());\n+    /// assert!('a'.is_lowercase());\n+    /// assert!('\u03b4'.is_lowercase());\n+    /// assert!(!'A'.is_lowercase());\n+    /// assert!(!'\u0394'.is_lowercase());\n     ///\n     /// // The various Chinese scripts do not have case, and so:\n-    /// let c = '\u4e2d';\n-    /// assert!(!c.is_lowercase());\n+    /// assert!(!'\u4e2d'.is_lowercase());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -558,21 +527,13 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = 'a';\n-    /// assert!(!c.is_uppercase());\n-    ///\n-    /// let c = '\u03b4';\n-    /// assert!(!c.is_uppercase());\n-    ///\n-    /// let c = 'A';\n-    /// assert!(c.is_uppercase());\n-    ///\n-    /// let c = '\u0394';\n-    /// assert!(c.is_uppercase());\n+    /// assert!(!'a'.is_uppercase());\n+    /// assert!(!'\u03b4'.is_uppercase());\n+    /// assert!('A'.is_uppercase());\n+    /// assert!('\u0394'.is_uppercase());\n     ///\n     /// // The various Chinese scripts do not have case, and so:\n-    /// let c = '\u4e2d';\n-    /// assert!(!c.is_uppercase());\n+    /// assert!(!'\u4e2d'.is_uppercase());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -594,15 +555,12 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = ' ';\n-    /// assert!(c.is_whitespace());\n+    /// assert!(' '.is_whitespace());\n     ///\n     /// // a non-breaking space\n-    /// let c = '\\u{A0}';\n-    /// assert!(c.is_whitespace());\n+    /// assert!('\\u{A0}'.is_whitespace());\n     ///\n-    /// let c = '\u8d8a';\n-    /// assert!(!c.is_whitespace());\n+    /// assert!(!'\u8d8a'.is_whitespace());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -624,29 +582,14 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = '\u0663';\n-    /// assert!(c.is_alphanumeric());\n-    ///\n-    /// let c = '7';\n-    /// assert!(c.is_alphanumeric());\n-    ///\n-    /// let c = '\u09ec';\n-    /// assert!(c.is_alphanumeric());\n-    ///\n-    /// let c = 'K';\n-    /// assert!(c.is_alphanumeric());\n-    ///\n-    /// let c = '\u0648';\n-    /// assert!(c.is_alphanumeric());\n-    ///\n-    /// let c = '\u85cf';\n-    /// assert!(c.is_alphanumeric());\n-    ///\n-    /// let c = '\u00be';\n-    /// assert!(!c.is_alphanumeric());\n-    ///\n-    /// let c = '\u2460';\n-    /// assert!(!c.is_alphanumeric());\n+    /// assert!('\u0663'.is_alphanumeric());\n+    /// assert!('7'.is_alphanumeric());\n+    /// assert!('\u09ec'.is_alphanumeric());\n+    /// assert!('K'.is_alphanumeric());\n+    /// assert!('\u0648'.is_alphanumeric());\n+    /// assert!('\u85cf'.is_alphanumeric());\n+    /// assert!(!'\u00be'.is_alphanumeric());\n+    /// assert!(!'\u2460'.is_alphanumeric());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -665,11 +608,8 @@ impl char {\n     ///\n     /// ```\n     /// // U+009C, STRING TERMINATOR\n-    /// let c = '\u009c';\n-    /// assert!(c.is_control());\n-    ///\n-    /// let c = 'q';\n-    /// assert!(!c.is_control());\n+    /// assert!('\u009c'.is_control());\n+    /// assert!(!'q'.is_control());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -687,29 +627,14 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = '\u0663';\n-    /// assert!(c.is_numeric());\n-    ///\n-    /// let c = '7';\n-    /// assert!(c.is_numeric());\n-    ///\n-    /// let c = '\u09ec';\n-    /// assert!(c.is_numeric());\n-    ///\n-    /// let c = 'K';\n-    /// assert!(!c.is_numeric());\n-    ///\n-    /// let c = '\u0648';\n-    /// assert!(!c.is_numeric());\n-    ///\n-    /// let c = '\u85cf';\n-    /// assert!(!c.is_numeric());\n-    ///\n-    /// let c = '\u00be';\n-    /// assert!(!c.is_numeric());\n-    ///\n-    /// let c = '\u2460';\n-    /// assert!(!c.is_numeric());\n+    /// assert!('\u0663'.is_numeric());\n+    /// assert!('7'.is_numeric());\n+    /// assert!('\u09ec'.is_numeric());\n+    /// assert!(!'K'.is_numeric());\n+    /// assert!(!'\u0648'.is_numeric());\n+    /// assert!(!'\u85cf'.is_numeric());\n+    /// assert!(!'\u00be'.is_numeric());\n+    /// assert!(!'\u2460'.is_numeric());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -744,13 +669,10 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = 'C';\n-    ///\n-    /// assert_eq!(c.to_lowercase().next(), Some('c'));\n+    /// assert_eq!('C'.to_lowercase().next(), Some('c'));\n     ///\n     /// // Japanese scripts do not have case, and so:\n-    /// let c = '\u5c71';\n-    /// assert_eq!(c.to_lowercase().next(), Some('\u5c71'));\n+    /// assert_eq!('\u5c71'.to_lowercase().next(), Some('\u5c71'));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -781,12 +703,10 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let c = 'c';\n-    /// assert_eq!(c.to_uppercase().next(), Some('C'));\n+    /// assert_eq!('c'.to_uppercase().next(), Some('C'));\n     ///\n     /// // Japanese does not have case, and so:\n-    /// let c = '\u5c71';\n-    /// assert_eq!(c.to_uppercase().next(), Some('\u5c71'));\n+    /// assert_eq!('\u5c71'.to_uppercase().next(), Some('\u5c71'));\n     /// ```\n     ///\n     /// In Turkish, the equivalent of 'i' in Latin has five forms instead of two:\n@@ -797,19 +717,15 @@ impl char {\n     /// Note that the lowercase dotted 'i' is the same as the Latin. Therefore:\n     ///\n     /// ```\n-    /// let i = 'i';\n-    ///\n-    /// let upper_i = i.to_uppercase().next();\n+    /// let upper_i = 'i'.to_uppercase().next();\n     /// ```\n     ///\n     /// The value of `upper_i` here relies on the language of the text: if we're\n     /// in `en-US`, it should be `Some('I')`, but if we're in `tr_TR`, it should\n     /// be `Some('\u0130')`. `to_uppercase()` does not take this into account, and so:\n     ///\n     /// ```\n-    /// let i = 'i';\n-    ///\n-    /// let upper_i = i.to_uppercase().next();\n+    /// let upper_i = 'i'.to_uppercase().next();\n     ///\n     /// assert_eq!(Some('I'), upper_i);\n     /// ```"}]}