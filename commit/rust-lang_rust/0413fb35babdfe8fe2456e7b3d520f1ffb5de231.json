{"sha": "0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "node_id": "C_kwDOAAsO6NoAKDA0MTNmYjM1YmFiZGZlOGZlMjQ1NmU3YjNkNTIwZjFmZmI1ZGUyMzE", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2023-02-26T00:08:29Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2023-02-26T00:28:50Z"}, "message": "Merge commit '149392b0baa4730c68f3c3eadf5c6ed7b16b85a4' into clippyup", "tree": {"sha": "9938720b708db9e681ba8c47a2f93ab99bba4286", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9938720b708db9e681ba8c47a2f93ab99bba4286"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "html_url": "https://github.com/rust-lang/rust/commit/0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5df17aae5f9554ea8d241b4af91109400dc5cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5df17aae5f9554ea8d241b4af91109400dc5cbd", "html_url": "https://github.com/rust-lang/rust/commit/e5df17aae5f9554ea8d241b4af91109400dc5cbd"}], "stats": {"total": 3651, "additions": 3023, "deletions": 628}, "files": [{"sha": "765826ed867d049062b2d34a487d52489c4583c2", "filename": "CHANGELOG.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -4430,6 +4430,7 @@ Released 2018-09-13\n [`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n [`if_then_some_else_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n+[`impl_trait_in_params`]: https://rust-lang.github.io/rust-clippy/master/index.html#impl_trait_in_params\n [`implicit_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_clone\n [`implicit_hasher`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher\n [`implicit_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\n@@ -4494,6 +4495,7 @@ Released 2018-09-13\n [`let_underscore_future`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_future\n [`let_underscore_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_lock\n [`let_underscore_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use\n+[`let_underscore_untyped`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_untyped\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n [`linkedlist`]: https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist\n [`logic_bug`]: https://rust-lang.github.io/rust-clippy/master/index.html#logic_bug\n@@ -4620,6 +4622,7 @@ Released 2018-09-13\n [`no_effect`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect\n [`no_effect_replace`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_replace\n [`no_effect_underscore_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding\n+[`no_mangle_with_rust_abi`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_mangle_with_rust_abi\n [`non_ascii_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_ascii_literal\n [`non_octal_unix_permissions`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_octal_unix_permissions\n [`non_send_fields_in_send_ty`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_send_fields_in_send_ty\n@@ -4675,6 +4678,7 @@ Released 2018-09-13\n [`pub_enum_variant_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#pub_enum_variant_names\n [`pub_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#pub_use\n [`question_mark`]: https://rust-lang.github.io/rust-clippy/master/index.html#question_mark\n+[`question_mark_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\n [`range_minus_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_minus_one\n [`range_plus_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_plus_one\n [`range_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_step_by_zero\n@@ -4734,6 +4738,7 @@ Released 2018-09-13\n [`should_assert_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_assert_eq\n [`should_implement_trait`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait\n [`significant_drop_in_scrutinee`]: https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_in_scrutinee\n+[`significant_drop_tightening`]: https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening\n [`similar_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#similar_names\n [`single_char_add_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str\n [`single_char_lifetime_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_lifetime_names\n@@ -4764,6 +4769,7 @@ Released 2018-09-13\n [`suboptimal_flops`]: https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops\n [`suspicious_arithmetic_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_arithmetic_impl\n [`suspicious_assignment_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_assignment_formatting\n+[`suspicious_command_arg_space`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_command_arg_space\n [`suspicious_else_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_else_formatting\n [`suspicious_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_map\n [`suspicious_op_assign_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_op_assign_impl\n@@ -4790,6 +4796,7 @@ Released 2018-09-13\n [`transmute_int_to_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_bool\n [`transmute_int_to_char`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_char\n [`transmute_int_to_float`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_float\n+[`transmute_int_to_non_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_non_zero\n [`transmute_null_to_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_null_to_fn\n [`transmute_num_to_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_num_to_bytes\n [`transmute_ptr_to_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr"}, {"sha": "3e7379ace7ea5726d02b5b2f4d692359a9659e8b", "filename": "README.md", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -19,21 +19,35 @@ You can choose how much Clippy is supposed to ~~annoy~~ help you by changing the\n | `clippy::complexity`  | code that does something simple but in a complex way                                | **warn**      |\n | `clippy::perf`        | code that can be written to run faster                                              | **warn**      |\n | `clippy::pedantic`    | lints which are rather strict or have occasional false positives                    | allow         |\n+| `clippy::restriction` | lints which prevent the use of language and library features[^restrict]             | allow         |\n | `clippy::nursery`     | new lints that are still under development                                          | allow         |\n | `clippy::cargo`       | lints for the cargo manifest                                                        | allow         |\n \n More to come, please [file an issue](https://github.com/rust-lang/rust-clippy/issues) if you have ideas!\n \n-The [lint list](https://rust-lang.github.io/rust-clippy/master/index.html) also contains \"restriction lints\", which are\n-for things which are usually not considered \"bad\", but may be useful to turn on in specific cases. These should be used\n-very selectively, if at all.\n+The `restriction` category should, *emphatically*, not be enabled as a whole. The contained\n+lints may lint against perfectly reasonable code, may not have an alternative suggestion,\n+and may contradict any other lints (including other categories). Lints should be considered\n+on a case-by-case basis before enabling.\n+\n+[^restrict]: Some use cases for `restriction` lints include:\n+    - Strict coding styles (e.g. [`clippy::else_if_without_else`]).\n+    - Additional restrictions on CI (e.g. [`clippy::todo`]).\n+    - Preventing panicking in certain functions (e.g. [`clippy::unwrap_used`]).\n+    - Running a lint only on a subset of code (e.g. `#[forbid(clippy::float_arithmetic)]` on a module).\n+\n+[`clippy::else_if_without_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#else_if_without_else\n+[`clippy::todo`]: https://rust-lang.github.io/rust-clippy/master/index.html#todo\n+[`clippy::unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\n+\n+---\n \n Table of contents:\n \n-*   [Usage instructions](#usage)\n-*   [Configuration](#configuration)\n-*   [Contributing](#contributing)\n-*   [License](#license)\n+* [Usage instructions](#usage)\n+* [Configuration](#configuration)\n+* [Contributing](#contributing)\n+* [License](#license)\n \n ## Usage\n \n@@ -64,6 +78,7 @@ Once you have rustup and the latest stable release (at least Rust 1.29) installe\n ```terminal\n rustup component add clippy\n ```\n+\n If it says that it can't find the `clippy` component, please run `rustup self update`.\n \n #### Step 3: Run Clippy\n@@ -143,16 +158,16 @@ line. (You can swap `clippy::all` with the specific lint category you are target\n \n You can add options to your code to `allow`/`warn`/`deny` Clippy lints:\n \n-*   the whole set of `Warn` lints using the `clippy` lint group (`#![deny(clippy::all)]`).\n+* the whole set of `Warn` lints using the `clippy` lint group (`#![deny(clippy::all)]`).\n     Note that `rustc` has additional [lint groups](https://doc.rust-lang.org/rustc/lints/groups.html).\n \n-*   all lints using both the `clippy` and `clippy::pedantic` lint groups (`#![deny(clippy::all)]`,\n+* all lints using both the `clippy` and `clippy::pedantic` lint groups (`#![deny(clippy::all)]`,\n     `#![deny(clippy::pedantic)]`). Note that `clippy::pedantic` contains some very aggressive\n     lints prone to false positives.\n \n-*   only some lints (`#![deny(clippy::single_match, clippy::box_vec)]`, etc.)\n+* only some lints (`#![deny(clippy::single_match, clippy::box_vec)]`, etc.)\n \n-*   `allow`/`warn`/`deny` can be limited to a single function or module using `#[allow(...)]`, etc.\n+* `allow`/`warn`/`deny` can be limited to a single function or module using `#[allow(...)]`, etc.\n \n Note: `allow` means to suppress the lint for your code. With `warn` the lint\n will only emit a warning, while with `deny` the lint will emit an error, when\n@@ -176,12 +191,14 @@ cargo clippy -- -W clippy::lint_name\n \n This also works with lint groups. For example, you\n can run Clippy with warnings for all lints enabled:\n+\n ```terminal\n cargo clippy -- -W clippy::pedantic\n ```\n \n If you care only about a single lint, you can allow all others and then explicitly warn on\n the lint(s) you are interested in:\n+\n ```terminal\n cargo clippy -- -A clippy::all -W clippy::useless_format -W clippy::...\n ```"}, {"sha": "6920c4e4656196f48bb614052eaf3c6785c71f44", "filename": "book/src/development/infrastructure/backport.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbackport.md", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbackport.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbackport.md?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -28,6 +28,7 @@ repository. You can do this with:\n ```bash\n # Assuming the current directory corresponds to the Rust repository\n $ git checkout beta\n+# Make sure to change `your-github-name` to your github name in the following command\n $ git subtree pull -p src/tools/clippy https://github.com/<your-github-name>/rust-clippy backport\n $ ./x.py test src/tools/clippy\n ```"}, {"sha": "02cfc11b55acb730ebd5251d4d173506fe4a4f5f", "filename": "book/src/development/infrastructure/sync.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fsync.md", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fsync.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fsync.md?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -79,8 +79,7 @@ to be run inside the `rust` directory):\n    `rustup check`.\n 3. Sync the changes to the rust-copy of Clippy to your Clippy fork:\n     ```bash\n-    # Make sure to change `your-github-name` to your github name in the following command. Also be\n-    # sure to either use a net-new branch, e.g. `sync-from-rust`, or delete the branch beforehand\n+    # Be sure to either use a net-new branch, e.g. `sync-from-rust`, or delete the branch beforehand\n     # because changes cannot be fast forwarded and you have to run this command again.\n     git subtree push -P src/tools/clippy clippy-local sync-from-rust\n     ```"}, {"sha": "33f2b5c1de99c0eb1c08dd0da516dacb620d82e1", "filename": "book/src/lint_configuration.md", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/book%2Fsrc%2Flint_configuration.md", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/book%2Fsrc%2Flint_configuration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flint_configuration.md?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -53,6 +53,7 @@ Please use that command to update the file and do not edit it by hand.\n | [ignore-interior-mutability](#ignore-interior-mutability) | `[\"bytes::Bytes\"]` |\n | [allow-mixed-uninlined-format-args](#allow-mixed-uninlined-format-args) | `true` |\n | [suppress-restriction-lint-in-const](#suppress-restriction-lint-in-const) | `false` |\n+| [missing-docs-in-crate-items](#missing-docs-in-crate-items) | `false` |\n \n ### arithmetic-side-effects-allowed\n Suppress checking of the passed type names in all types of operations.\n@@ -471,31 +472,31 @@ The maximum size of a file included via `include_bytes!()` or `include_str!()`,\n \n \n ### allow-expect-in-tests\n-Whether `expect` should be allowed within `#[cfg(test)]`\n+Whether `expect` should be allowed in test functions or `#[cfg(test)]`\n \n **Default Value:** `false` (`bool`)\n \n * [expect_used](https://rust-lang.github.io/rust-clippy/master/index.html#expect_used)\n \n \n ### allow-unwrap-in-tests\n-Whether `unwrap` should be allowed in test cfg\n+Whether `unwrap` should be allowed in test functions or `#[cfg(test)]`\n \n **Default Value:** `false` (`bool`)\n \n * [unwrap_used](https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used)\n \n \n ### allow-dbg-in-tests\n-Whether `dbg!` should be allowed in test functions\n+Whether `dbg!` should be allowed in test functions or `#[cfg(test)]`\n \n **Default Value:** `false` (`bool`)\n \n * [dbg_macro](https://rust-lang.github.io/rust-clippy/master/index.html#dbg_macro)\n \n \n ### allow-print-in-tests\n-Whether print macros (ex. `println!`) should be allowed in test functions\n+Whether print macros (ex. `println!`) should be allowed in test functions or `#[cfg(test)]`\n \n **Default Value:** `false` (`bool`)\n \n@@ -540,4 +541,13 @@ if no suggestion can be made.\n * [indexing_slicing](https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing)\n \n \n+### missing-docs-in-crate-items\n+Whether to **only** check for missing documentation in items visible within the current\n+crate. For example, `pub(crate)` items.\n+\n+**Default Value:** `false` (`bool`)\n+\n+* [missing_docs_in_private_items](https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items)\n+\n+\n "}, {"sha": "420214d9256d8a050d80a97aa3154da1db80e9e2", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,5 +1,6 @@\n use crate::clippy_project_root;\n use indoc::{formatdoc, writedoc};\n+use std::fmt;\n use std::fmt::Write as _;\n use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n@@ -256,7 +257,7 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n         )\n     });\n \n-    let _ = write!(result, \"{}\", get_lint_declaration(&name_upper, category));\n+    let _: fmt::Result = write!(result, \"{}\", get_lint_declaration(&name_upper, category));\n \n     result.push_str(&if enable_msrv {\n         formatdoc!(\n@@ -353,7 +354,7 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n     let mut lint_file_contents = String::new();\n \n     if enable_msrv {\n-        let _ = writedoc!(\n+        let _: fmt::Result = writedoc!(\n             lint_file_contents,\n             r#\"\n                 use clippy_utils::msrvs::{{self, Msrv}};\n@@ -373,7 +374,7 @@ fn create_lint_for_ty(lint: &LintData<'_>, enable_msrv: bool, ty: &str) -> io::R\n             name_upper = name_upper,\n         );\n     } else {\n-        let _ = writedoc!(\n+        let _: fmt::Result = writedoc!(\n             lint_file_contents,\n             r#\"\n                 use rustc_lint::{{{context_import}, LintContext}};\n@@ -521,7 +522,7 @@ fn setup_mod_file(path: &Path, lint: &LintData<'_>) -> io::Result<&'static str>\n         .chain(std::iter::once(&*lint_name_upper))\n         .filter(|s| !s.is_empty())\n     {\n-        let _ = write!(new_arr_content, \"\\n    {ident},\");\n+        let _: fmt::Result = write!(new_arr_content, \"\\n    {ident},\");\n     }\n     new_arr_content.push('\\n');\n "}, {"sha": "779e4d0e1e308dc39e467e7a6969b965ac4e9d6e", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -5,7 +5,7 @@ use itertools::Itertools;\n use rustc_lexer::{tokenize, unescape, LiteralKind, TokenKind};\n use std::collections::{HashMap, HashSet};\n use std::ffi::OsStr;\n-use std::fmt::Write;\n+use std::fmt::{self, Write};\n use std::fs::{self, OpenOptions};\n use std::io::{self, Read, Seek, SeekFrom, Write as _};\n use std::ops::Range;\n@@ -691,7 +691,7 @@ fn gen_deprecated(lints: &[DeprecatedLint]) -> String {\n     let mut output = GENERATED_FILE_COMMENT.to_string();\n     output.push_str(\"{\\n\");\n     for lint in lints {\n-        let _ = write!(\n+        let _: fmt::Result = write!(\n             output,\n             concat!(\n                 \"    store.register_removed(\\n\",\n@@ -726,7 +726,7 @@ fn gen_declared_lints<'a>(\n         if !is_public {\n             output.push_str(\"    #[cfg(feature = \\\"internal\\\")]\\n\");\n         }\n-        let _ = writeln!(output, \"    crate::{module_name}::{lint_name}_INFO,\");\n+        let _: fmt::Result = writeln!(output, \"    crate::{module_name}::{lint_name}_INFO,\");\n     }\n     output.push_str(\"];\\n\");\n "}, {"sha": "dfa949d1af2f4cec1d332575ff51fdc19565e9d5", "filename": "clippy_lints/src/box_default.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbox_default.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -117,7 +117,8 @@ fn given_type(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n         ) => {\n             if let Some(index) = args.iter().position(|arg| arg.hir_id == expr.hir_id) &&\n                 let Some(sig) = expr_sig(cx, path) &&\n-                let Some(input) = sig.input(index)\n+                let Some(input) = sig.input(index) &&\n+                !cx.typeck_results().expr_ty_adjusted(expr).boxed_ty().is_trait()\n             {\n                 input.no_bound_vars().is_some()\n             } else {"}, {"sha": "823970e35abbd011ef947e47cd8e80cb1781dd99", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -168,7 +168,7 @@ pub(super) fn check(\n     let suggestion = format!(\"{cast_to_snip}::try_from({name_of_cast_from})\");\n \n     span_lint_and_then(cx, CAST_POSSIBLE_TRUNCATION, expr.span, &msg, |diag| {\n-        diag.help(\"if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\");\n+        diag.help(\"if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\");\n         diag.span_suggestion_with_style(\n             expr.span,\n             \"... or use `try_from` and handle the error accordingly\","}, {"sha": "cd5dd7a570653a2f288bed280961a3943557dcb9", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -179,6 +179,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::from_raw_with_void_ptr::FROM_RAW_WITH_VOID_PTR_INFO,\n     crate::from_str_radix_10::FROM_STR_RADIX_10_INFO,\n     crate::functions::DOUBLE_MUST_USE_INFO,\n+    crate::functions::IMPL_TRAIT_IN_PARAMS_INFO,\n     crate::functions::MISNAMED_GETTERS_INFO,\n     crate::functions::MUST_USE_CANDIDATE_INFO,\n     crate::functions::MUST_USE_UNIT_INFO,\n@@ -224,6 +225,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::let_underscore::LET_UNDERSCORE_FUTURE_INFO,\n     crate::let_underscore::LET_UNDERSCORE_LOCK_INFO,\n     crate::let_underscore::LET_UNDERSCORE_MUST_USE_INFO,\n+    crate::let_underscore::LET_UNDERSCORE_UNTYPED_INFO,\n     crate::lifetimes::EXTRA_UNUSED_LIFETIMES_INFO,\n     crate::lifetimes::NEEDLESS_LIFETIMES_INFO,\n     crate::literal_representation::DECIMAL_LITERAL_REPRESENTATION_INFO,\n@@ -378,6 +380,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::methods::SKIP_WHILE_NEXT_INFO,\n     crate::methods::STABLE_SORT_PRIMITIVE_INFO,\n     crate::methods::STRING_EXTEND_CHARS_INFO,\n+    crate::methods::SUSPICIOUS_COMMAND_ARG_SPACE_INFO,\n     crate::methods::SUSPICIOUS_MAP_INFO,\n     crate::methods::SUSPICIOUS_SPLITN_INFO,\n     crate::methods::SUSPICIOUS_TO_OWNED_INFO,\n@@ -447,6 +450,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::no_effect::NO_EFFECT_INFO,\n     crate::no_effect::NO_EFFECT_UNDERSCORE_BINDING_INFO,\n     crate::no_effect::UNNECESSARY_OPERATION_INFO,\n+    crate::no_mangle_with_rust_abi::NO_MANGLE_WITH_RUST_ABI_INFO,\n     crate::non_copy_const::BORROW_INTERIOR_MUTABLE_CONST_INFO,\n     crate::non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST_INFO,\n     crate::non_expressive_names::JUST_UNDERSCORES_AND_DIGITS_INFO,\n@@ -506,6 +510,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::ptr_offset_with_cast::PTR_OFFSET_WITH_CAST_INFO,\n     crate::pub_use::PUB_USE_INFO,\n     crate::question_mark::QUESTION_MARK_INFO,\n+    crate::question_mark_used::QUESTION_MARK_USED_INFO,\n     crate::ranges::MANUAL_RANGE_CONTAINS_INFO,\n     crate::ranges::RANGE_MINUS_ONE_INFO,\n     crate::ranges::RANGE_PLUS_ONE_INFO,\n@@ -536,6 +541,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::shadow::SHADOW_REUSE_INFO,\n     crate::shadow::SHADOW_SAME_INFO,\n     crate::shadow::SHADOW_UNRELATED_INFO,\n+    crate::significant_drop_tightening::SIGNIFICANT_DROP_TIGHTENING_INFO,\n     crate::single_char_lifetime_names::SINGLE_CHAR_LIFETIME_NAMES_INFO,\n     crate::single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS_INFO,\n     crate::size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT_INFO,\n@@ -573,6 +579,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::transmute::TRANSMUTE_INT_TO_BOOL_INFO,\n     crate::transmute::TRANSMUTE_INT_TO_CHAR_INFO,\n     crate::transmute::TRANSMUTE_INT_TO_FLOAT_INFO,\n+    crate::transmute::TRANSMUTE_INT_TO_NON_ZERO_INFO,\n     crate::transmute::TRANSMUTE_NULL_TO_FN_INFO,\n     crate::transmute::TRANSMUTE_NUM_TO_BYTES_INFO,\n     crate::transmute::TRANSMUTE_PTR_TO_PTR_INFO,"}, {"sha": "5246a86cf8494ef419e78fdc9f44229affc424c1", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 55, "deletions": 23, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::mir::{enclosing_mir, expr_local, local_assignments, used_exact\n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n use clippy_utils::sugg::has_enclosing_paren;\n-use clippy_utils::ty::{expr_sig, is_copy, peel_mid_ty_refs, ty_sig, variant_of_res};\n+use clippy_utils::ty::{adt_and_variant_of_res, expr_sig, is_copy, peel_mid_ty_refs, ty_sig};\n use clippy_utils::{\n     fn_def_id, get_parent_expr, get_parent_expr_for_hir, is_lint_allowed, path_to_local, walk_to_expr_usage,\n };\n@@ -26,8 +26,8 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::{Rvalue, StatementKind};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::{\n-    self, Binder, BoundVariableKind, Clause, EarlyBinder, FnSig, GenericArgKind, List, ParamTy, PredicateKind,\n-    ProjectionPredicate, Ty, TyCtxt, TypeVisitableExt, TypeckResults,\n+    self, Binder, BoundVariableKind, Clause, EarlyBinder, FnSig, GenericArgKind, List, ParamEnv, ParamTy,\n+    PredicateKind, ProjectionPredicate, Ty, TyCtxt, TypeVisitableExt, TypeckResults,\n };\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::sym, Span, Symbol};\n@@ -736,7 +736,7 @@ fn walk_parents<'tcx>(\n                 ..\n             }) if span.ctxt() == ctxt => {\n                 let ty = cx.tcx.type_of(owner_id.def_id).subst_identity();\n-                Some(ty_auto_deref_stability(cx, ty, precedence).position_for_result(cx))\n+                Some(ty_auto_deref_stability(cx.tcx, cx.param_env, ty, precedence).position_for_result(cx))\n             },\n \n             Node::Item(&Item {\n@@ -760,18 +760,31 @@ fn walk_parents<'tcx>(\n                 let output = cx\n                     .tcx\n                     .erase_late_bound_regions(cx.tcx.fn_sig(owner_id).subst_identity().output());\n-                Some(ty_auto_deref_stability(cx, output, precedence).position_for_result(cx))\n+                Some(ty_auto_deref_stability(cx.tcx, cx.param_env, output, precedence).position_for_result(cx))\n             },\n \n             Node::ExprField(field) if field.span.ctxt() == ctxt => match get_parent_expr_for_hir(cx, field.hir_id) {\n                 Some(Expr {\n                     hir_id,\n                     kind: ExprKind::Struct(path, ..),\n                     ..\n-                }) => variant_of_res(cx, cx.qpath_res(path, *hir_id))\n-                    .and_then(|variant| variant.fields.iter().find(|f| f.name == field.ident.name))\n-                    .map(|field_def| {\n-                        ty_auto_deref_stability(cx, cx.tcx.type_of(field_def.did).subst_identity(), precedence).position_for_arg()\n+                }) => adt_and_variant_of_res(cx, cx.qpath_res(path, *hir_id))\n+                    .and_then(|(adt, variant)| {\n+                        variant\n+                            .fields\n+                            .iter()\n+                            .find(|f| f.name == field.ident.name)\n+                            .map(|f| (adt, f))\n+                    })\n+                    .map(|(adt, field_def)| {\n+                        ty_auto_deref_stability(\n+                            cx.tcx,\n+                            // Use the param_env of the target type.\n+                            cx.tcx.param_env(adt.did()),\n+                            cx.tcx.type_of(field_def.did).subst_identity(),\n+                            precedence,\n+                        )\n+                        .position_for_arg()\n                     }),\n                 _ => None,\n             },\n@@ -792,7 +805,7 @@ fn walk_parents<'tcx>(\n                             let output = cx\n                                 .tcx\n                                 .erase_late_bound_regions(cx.tcx.fn_sig(owner_id).subst_identity().output());\n-                            ty_auto_deref_stability(cx, output, precedence).position_for_result(cx)\n+                            ty_auto_deref_stability(cx.tcx, cx.param_env, output, precedence).position_for_result(cx)\n                         },\n                     )\n                 },\n@@ -835,15 +848,20 @@ fn walk_parents<'tcx>(\n                                             msrv,\n                                         )\n                                     } else {\n-                                        ty_auto_deref_stability(cx, cx.tcx.erase_late_bound_regions(ty), precedence)\n-                                            .position_for_arg()\n+                                        ty_auto_deref_stability(\n+                                            cx.tcx,\n+                                            // Use the param_env of the target function.\n+                                            sig.predicates_id().map_or(ParamEnv::empty(), |id| cx.tcx.param_env(id)),\n+                                            cx.tcx.erase_late_bound_regions(ty),\n+                                            precedence\n+                                        ).position_for_arg()\n                                     }\n                                 },\n                             }\n                         })\n                     }),\n                 ExprKind::MethodCall(method, receiver, args, _) => {\n-                    let id = cx.typeck_results().type_dependent_def_id(parent.hir_id).unwrap();\n+                    let fn_id = cx.typeck_results().type_dependent_def_id(parent.hir_id).unwrap();\n                     if receiver.hir_id == child_id {\n                         // Check for calls to trait methods where the trait is implemented on a reference.\n                         // Two cases need to be handled:\n@@ -852,13 +870,17 @@ fn walk_parents<'tcx>(\n                         //   priority.\n                         if e.hir_id != child_id {\n                             return Some(Position::ReborrowStable(precedence))\n-                        } else if let Some(trait_id) = cx.tcx.trait_of_item(id)\n+                        } else if let Some(trait_id) = cx.tcx.trait_of_item(fn_id)\n                             && let arg_ty = cx.tcx.erase_regions(cx.typeck_results().expr_ty_adjusted(e))\n                             && let ty::Ref(_, sub_ty, _) = *arg_ty.kind()\n                             && let subs = cx\n                                 .typeck_results()\n                                 .node_substs_opt(parent.hir_id).map(|subs| &subs[1..]).unwrap_or_default()\n-                            && let impl_ty = if cx.tcx.fn_sig(id).subst_identity().skip_binder().inputs()[0].is_ref() {\n+                            && let impl_ty = if cx.tcx.fn_sig(fn_id)\n+                                .subst_identity()\n+                                .skip_binder()\n+                                .inputs()[0].is_ref()\n+                            {\n                                 // Trait methods taking `&self`\n                                 sub_ty\n                             } else {\n@@ -879,10 +901,13 @@ fn walk_parents<'tcx>(\n                         return Some(Position::MethodReceiver);\n                     }\n                     args.iter().position(|arg| arg.hir_id == child_id).map(|i| {\n-                        let ty = cx.tcx.fn_sig(id).subst_identity().skip_binder().inputs()[i + 1];\n+                        let ty = cx.tcx.fn_sig(fn_id).subst_identity().input(i + 1);\n                         // `e.hir_id == child_id` for https://github.com/rust-lang/rust-clippy/issues/9739\n                         // `method.args.is_none()` for https://github.com/rust-lang/rust-clippy/issues/9782\n-                        if e.hir_id == child_id && method.args.is_none() && let ty::Param(param_ty) = ty.kind() {\n+                        if e.hir_id == child_id\n+                            && method.args.is_none()\n+                            && let ty::Param(param_ty) = ty.skip_binder().kind()\n+                        {\n                             needless_borrow_impl_arg_position(\n                                 cx,\n                                 possible_borrowers,\n@@ -895,8 +920,10 @@ fn walk_parents<'tcx>(\n                             )\n                         } else {\n                             ty_auto_deref_stability(\n-                                cx,\n-                                cx.tcx.erase_late_bound_regions(cx.tcx.fn_sig(id).subst_identity().input(i + 1)),\n+                                cx.tcx,\n+                                // Use the param_env of the target function.\n+                                cx.tcx.param_env(fn_id),\n+                                cx.tcx.erase_late_bound_regions(ty),\n                                 precedence,\n                             )\n                             .position_for_arg()\n@@ -1378,11 +1405,18 @@ impl<'tcx> TyPosition<'tcx> {\n }\n \n // Checks whether a type is stable when switching to auto dereferencing,\n-fn ty_auto_deref_stability<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, precedence: i8) -> TyPosition<'tcx> {\n+fn ty_auto_deref_stability<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n+    ty: Ty<'tcx>,\n+    precedence: i8,\n+) -> TyPosition<'tcx> {\n     let ty::Ref(_, mut ty, _) = *ty.kind() else {\n         return Position::Other(precedence).into();\n     };\n \n+    ty = tcx.try_normalize_erasing_regions(param_env, ty).unwrap_or(ty);\n+\n     loop {\n         break match *ty.kind() {\n             ty::Ref(_, ref_ty, _) => {\n@@ -1423,9 +1457,7 @@ fn ty_auto_deref_stability<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, precedenc\n             | ty::Closure(..)\n             | ty::Never\n             | ty::Tuple(_)\n-            | ty::Alias(ty::Projection, _) => {\n-                Position::DerefStable(precedence, ty.is_sized(cx.tcx, cx.param_env.without_caller_bounds())).into()\n-            },\n+            | ty::Alias(ty::Projection, _) => Position::DerefStable(precedence, ty.is_sized(tcx, param_env)).into(),\n         };\n     }\n }"}, {"sha": "384aca7feadd6d6939f383855bdae1da6778663e", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -6,6 +6,11 @@ use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use clippy_utils::{is_entrypoint_fn, method_chain_args, return_ty};\n use if_chain::if_chain;\n use itertools::Itertools;\n+use pulldown_cmark::Event::{\n+    Code, End, FootnoteReference, HardBreak, Html, Rule, SoftBreak, Start, TaskListMarker, Text,\n+};\n+use pulldown_cmark::Tag::{CodeBlock, Heading, Item, Link, Paragraph};\n+use pulldown_cmark::{BrokenLink, CodeBlockKind, CowStr, Options};\n use rustc_ast::ast::{Async, AttrKind, Attribute, Fn, FnRetTy, ItemKind};\n use rustc_ast::token::CommentKind;\n use rustc_data_structures::fx::FxHashSet;\n@@ -497,7 +502,6 @@ struct DocHeaders {\n }\n \n fn check_attrs(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs: &[Attribute]) -> Option<DocHeaders> {\n-    use pulldown_cmark::{BrokenLink, CowStr, Options};\n     /// We don't want the parser to choke on intra doc links. Since we don't\n     /// actually care about rendering them, just pretend that all broken links are\n     /// point to a fake address.\n@@ -538,8 +542,6 @@ fn check_attrs(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs: &[\n         pulldown_cmark::Parser::new_with_broken_link_callback(&doc, Options::empty(), Some(&mut cb)).into_offset_iter();\n     // Iterate over all `Events` and combine consecutive events into one\n     let events = parser.coalesce(|previous, current| {\n-        use pulldown_cmark::Event::Text;\n-\n         let previous_range = previous.1;\n         let current_range = current.1;\n \n@@ -564,12 +566,6 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n     spans: &[(usize, Span)],\n ) -> DocHeaders {\n     // true if a safety header was found\n-    use pulldown_cmark::Event::{\n-        Code, End, FootnoteReference, HardBreak, Html, Rule, SoftBreak, Start, TaskListMarker, Text,\n-    };\n-    use pulldown_cmark::Tag::{CodeBlock, Heading, Item, Link, Paragraph};\n-    use pulldown_cmark::{CodeBlockKind, CowStr};\n-\n     let mut headers = DocHeaders::default();\n     let mut in_code = false;\n     let mut in_link = None;\n@@ -660,6 +656,12 @@ fn check_doc<'a, Events: Iterator<Item = (pulldown_cmark::Event<'a>, Range<usize\n                     check_link_quotes(cx, in_link.is_some(), trimmed_text, span, &range, begin, text.len());\n                     // Adjust for the beginning of the current `Event`\n                     let span = span.with_lo(span.lo() + BytePos::from_usize(range.start - begin));\n+                    if let Some(link) = in_link.as_ref()\n+                      && let Ok(url) = Url::parse(link)\n+                      && (url.scheme() == \"https\" || url.scheme() == \"http\") {\n+                        // Don't check the text associated with external URLs\n+                        continue;\n+                    }\n                     text_to_check.push((text, span));\n                 }\n             },\n@@ -704,10 +706,8 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                 let filename = FileName::anon_source_code(&code);\n \n                 let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-                let fallback_bundle = rustc_errors::fallback_fluent_bundle(\n-                    rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(),\n-                    false\n-                );\n+                let fallback_bundle =\n+                    rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(), false);\n                 let emitter = EmitterWriter::new(\n                     Box::new(io::sink()),\n                     None,"}, {"sha": "48a54f60253c85032b9698d7d058f607db07a378", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::{\n     source::{reindent_multiline, snippet_indent, snippet_with_applicability, snippet_with_context},\n     SpanlessEq,\n };\n-use core::fmt::Write;\n+use core::fmt::{self, Write};\n use rustc_errors::Applicability;\n use rustc_hir::{\n     hir_id::HirIdSet,\n@@ -65,6 +65,10 @@ declare_lint_pass!(HashMapPass => [MAP_ENTRY]);\n impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n     #[expect(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if expr.span.from_expansion() {\n+            return;\n+        }\n+\n         let Some(higher::If { cond: cond_expr, then: then_expr, r#else: else_expr }) = higher::If::hir(expr) else {\n             return\n         };\n@@ -532,7 +536,7 @@ impl<'tcx> InsertSearchResults<'tcx> {\n             if is_expr_used_or_unified(cx.tcx, insertion.call) {\n                 write_wrapped(&mut res, insertion, ctxt, app);\n             } else {\n-                let _ = write!(\n+                let _: fmt::Result = write!(\n                     res,\n                     \"e.insert({})\",\n                     snippet_with_context(cx, insertion.value.span, ctxt, \"..\", app).0\n@@ -548,7 +552,7 @@ impl<'tcx> InsertSearchResults<'tcx> {\n         (\n             self.snippet(cx, span, app, |res, insertion, ctxt, app| {\n                 // Insertion into a map would return `Some(&mut value)`, but the entry returns `&mut value`\n-                let _ = write!(\n+                let _: fmt::Result = write!(\n                     res,\n                     \"Some(e.insert({}))\",\n                     snippet_with_context(cx, insertion.value.span, ctxt, \"..\", app).0\n@@ -562,7 +566,7 @@ impl<'tcx> InsertSearchResults<'tcx> {\n         (\n             self.snippet(cx, span, app, |res, insertion, ctxt, app| {\n                 // Insertion into a map would return `None`, but the entry returns a mutable reference.\n-                let _ = if is_expr_final_block_expr(cx.tcx, insertion.call) {\n+                let _: fmt::Result = if is_expr_final_block_expr(cx.tcx, insertion.call) {\n                     write!(\n                         res,\n                         \"e.insert({});\\n{}None\","}, {"sha": "20565e1d232eebad3e0ab9dd4ffb6d43f62ce560", "filename": "clippy_lints/src/extra_unused_type_parameters.rs", "status": "modified", "additions": 72, "deletions": 21, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fextra_unused_type_parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fextra_unused_type_parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fextra_unused_type_parameters.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -4,12 +4,17 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::MultiSpan;\n use rustc_hir::intravisit::{walk_impl_item, walk_item, walk_param_bound, walk_ty, Visitor};\n use rustc_hir::{\n-    GenericParamKind, Generics, ImplItem, ImplItemKind, Item, ItemKind, PredicateOrigin, Ty, TyKind, WherePredicate,\n+    BodyId, ExprKind, GenericBound, GenericParamKind, Generics, ImplItem, ImplItemKind, Item, ItemKind,\n+    PredicateOrigin, Ty, TyKind, WherePredicate,\n };\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::nested_filter;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{def_id::DefId, Span};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{\n+    def_id::{DefId, LocalDefId},\n+    Span,\n+};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -21,7 +26,6 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // unused type parameters\n     /// fn unused_ty<T>(x: u8) {\n     ///     // ..\n     /// }\n@@ -37,13 +41,35 @@ declare_clippy_lint! {\n     complexity,\n     \"unused type parameters in function definitions\"\n }\n-declare_lint_pass!(ExtraUnusedTypeParameters => [EXTRA_UNUSED_TYPE_PARAMETERS]);\n+\n+pub struct ExtraUnusedTypeParameters {\n+    avoid_breaking_exported_api: bool,\n+}\n+\n+impl ExtraUnusedTypeParameters {\n+    pub fn new(avoid_breaking_exported_api: bool) -> Self {\n+        Self {\n+            avoid_breaking_exported_api,\n+        }\n+    }\n+\n+    /// Don't lint external macros or functions with empty bodies. Also, don't lint public items if\n+    /// the `avoid_breaking_exported_api` config option is set.\n+    fn check_false_positive(&self, cx: &LateContext<'_>, span: Span, def_id: LocalDefId, body_id: BodyId) -> bool {\n+        let body = cx.tcx.hir().body(body_id).value;\n+        let fn_empty = matches!(&body.kind, ExprKind::Block(blk, None) if blk.stmts.is_empty() && blk.expr.is_none());\n+        let is_exported = cx.effective_visibilities.is_exported(def_id);\n+        in_external_macro(cx.sess(), span) || (self.avoid_breaking_exported_api && is_exported) || fn_empty\n+    }\n+}\n+\n+impl_lint_pass!(ExtraUnusedTypeParameters => [EXTRA_UNUSED_TYPE_PARAMETERS]);\n \n /// A visitor struct that walks a given function and gathers generic type parameters, plus any\n /// trait bounds those parameters have.\n struct TypeWalker<'cx, 'tcx> {\n     cx: &'cx LateContext<'tcx>,\n-    /// Collection of all the type parameters and their spans.\n+    /// Collection of all the function's type parameters.\n     ty_params: FxHashMap<DefId, Span>,\n     /// Collection of any (inline) trait bounds corresponding to each type parameter.\n     bounds: FxHashMap<DefId, Span>,\n@@ -64,8 +90,8 @@ impl<'cx, 'tcx> TypeWalker<'cx, 'tcx> {\n             .params\n             .iter()\n             .filter_map(|param| {\n-                if let GenericParamKind::Type { .. } = param.kind {\n-                    Some((param.def_id.into(), param.span))\n+                if let GenericParamKind::Type { synthetic, .. } = param.kind {\n+                    (!synthetic).then_some((param.def_id.into(), param.span))\n                 } else {\n                     if !param.is_elided_lifetime() {\n                         all_params_unused = false;\n@@ -74,6 +100,7 @@ impl<'cx, 'tcx> TypeWalker<'cx, 'tcx> {\n                 }\n             })\n             .collect();\n+\n         Self {\n             cx,\n             ty_params,\n@@ -83,6 +110,12 @@ impl<'cx, 'tcx> TypeWalker<'cx, 'tcx> {\n         }\n     }\n \n+    fn mark_param_used(&mut self, def_id: DefId) {\n+        if self.ty_params.remove(&def_id).is_some() {\n+            self.all_params_unused = false;\n+        }\n+    }\n+\n     fn emit_lint(&self) {\n         let (msg, help) = match self.ty_params.len() {\n             0 => return,\n@@ -96,7 +129,7 @@ impl<'cx, 'tcx> TypeWalker<'cx, 'tcx> {\n             ),\n         };\n \n-        let source_map = self.cx.tcx.sess.source_map();\n+        let source_map = self.cx.sess().source_map();\n         let span = if self.all_params_unused {\n             self.generics.span.into() // Remove the entire list of generics\n         } else {\n@@ -118,14 +151,18 @@ impl<'cx, 'tcx> TypeWalker<'cx, 'tcx> {\n     }\n }\n \n+/// Given a generic bound, if the bound is for a trait that's not a `LangItem`, return the\n+/// `LocalDefId` for that trait.\n+fn bound_to_trait_def_id(bound: &GenericBound<'_>) -> Option<LocalDefId> {\n+    bound.trait_ref()?.trait_def_id()?.as_local()\n+}\n+\n impl<'cx, 'tcx> Visitor<'tcx> for TypeWalker<'cx, 'tcx> {\n     type NestedFilter = nested_filter::OnlyBodies;\n \n     fn visit_ty(&mut self, t: &'tcx Ty<'tcx>) {\n         if let Some((def_id, _)) = t.peel_refs().as_generic_param() {\n-            if self.ty_params.remove(&def_id).is_some() {\n-                self.all_params_unused = false;\n-            }\n+            self.mark_param_used(def_id);\n         } else if let TyKind::OpaqueDef(id, _, _) = t.kind {\n             // Explicitly walk OpaqueDef. Normally `walk_ty` would do the job, but it calls\n             // `visit_nested_item`, which checks that `Self::NestedFilter::INTER` is set. We're\n@@ -139,12 +176,21 @@ impl<'cx, 'tcx> Visitor<'tcx> for TypeWalker<'cx, 'tcx> {\n \n     fn visit_where_predicate(&mut self, predicate: &'tcx WherePredicate<'tcx>) {\n         if let WherePredicate::BoundPredicate(predicate) = predicate {\n-            // Collect spans for bounds that appear in the list of generics (not in a where-clause)\n-            // for use in forming the help message\n-            if let Some((def_id, _)) = predicate.bounded_ty.peel_refs().as_generic_param()\n-                && let PredicateOrigin::GenericParam = predicate.origin\n-            {\n-                self.bounds.insert(def_id, predicate.span);\n+            // Collect spans for any bounds on type parameters. We only keep bounds that appear in\n+            // the list of generics (not in a where-clause).\n+            if let Some((def_id, _)) = predicate.bounded_ty.peel_refs().as_generic_param() {\n+                // If the bound contains non-public traits, err on the safe side and don't lint the\n+                // corresponding parameter.\n+                if !predicate\n+                    .bounds\n+                    .iter()\n+                    .filter_map(bound_to_trait_def_id)\n+                    .all(|id| self.cx.effective_visibilities.is_exported(id))\n+                {\n+                    self.mark_param_used(def_id);\n+                } else if let PredicateOrigin::GenericParam = predicate.origin {\n+                    self.bounds.insert(def_id, predicate.span);\n+                }\n             }\n             // Only walk the right-hand side of where-bounds\n             for bound in predicate.bounds {\n@@ -160,7 +206,9 @@ impl<'cx, 'tcx> Visitor<'tcx> for TypeWalker<'cx, 'tcx> {\n \n impl<'tcx> LateLintPass<'tcx> for ExtraUnusedTypeParameters {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n-        if let ItemKind::Fn(_, generics, _) = item.kind {\n+        if let ItemKind::Fn(_, generics, body_id) = item.kind\n+            && !self.check_false_positive(cx, item.span, item.owner_id.def_id, body_id)\n+        {\n             let mut walker = TypeWalker::new(cx, generics);\n             walk_item(&mut walker, item);\n             walker.emit_lint();\n@@ -169,7 +217,10 @@ impl<'tcx> LateLintPass<'tcx> for ExtraUnusedTypeParameters {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'tcx>) {\n         // Only lint on inherent methods, not trait methods.\n-        if let ImplItemKind::Fn(..) = item.kind && trait_ref_of_method(cx, item.owner_id.def_id).is_none() {\n+        if let ImplItemKind::Fn(.., body_id) = item.kind\n+            && trait_ref_of_method(cx, item.owner_id.def_id).is_none()\n+            && !self.check_false_positive(cx, item.span, item.owner_id.def_id, body_id)\n+        {\n             let mut walker = TypeWalker::new(cx, item.generics);\n             walk_impl_item(&mut walker, item);\n             walker.emit_lint();"}, {"sha": "c511d85e9cf295d05e322e44d0489fe6997e3783", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -340,6 +340,7 @@ fn check_one_arg(\n     if matches!(param.kind, Implicit | Starred | Named(_) | Numbered)\n         && let ExprKind::Path(QPath::Resolved(None, path)) = param.value.kind\n         && let [segment] = path.segments\n+        && segment.args.is_none()\n         && let Some(arg_span) = args.value_with_prev_comma_span(param.value.hir_id)\n     {\n         let replacement = match param.usage {"}, {"sha": "2811a73f6c18947cfde5fa935c51bc8fd7f38a30", "filename": "clippy_lints/src/functions/impl_trait_in_params.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Ffunctions%2Fimpl_trait_in_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Ffunctions%2Fimpl_trait_in_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fimpl_trait_in_params.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,50 @@\n+use clippy_utils::{diagnostics::span_lint_and_then, is_in_test_function};\n+\n+use rustc_hir::{intravisit::FnKind, Body, HirId};\n+use rustc_lint::LateContext;\n+use rustc_span::Span;\n+\n+use super::IMPL_TRAIT_IN_PARAMS;\n+\n+pub(super) fn check_fn<'tcx>(cx: &LateContext<'_>, kind: &'tcx FnKind<'_>, body: &'tcx Body<'_>, hir_id: HirId) {\n+    if cx.tcx.visibility(cx.tcx.hir().body_owner_def_id(body.id())).is_public() && !is_in_test_function(cx.tcx, hir_id)\n+    {\n+        if let FnKind::ItemFn(ident, generics, _) = kind {\n+            for param in generics.params {\n+                if param.is_impl_trait() {\n+                    // No generics with nested generics, and no generics like FnMut(x)\n+                    span_lint_and_then(\n+                        cx,\n+                        IMPL_TRAIT_IN_PARAMS,\n+                        param.span,\n+                        \"'`impl Trait` used as a function parameter'\",\n+                        |diag| {\n+                            if let Some(gen_span) = generics.span_for_param_suggestion() {\n+                                diag.span_suggestion_with_style(\n+                                    gen_span,\n+                                    \"add a type paremeter\",\n+                                    format!(\", {{ /* Generic name */ }}: {}\", &param.name.ident().as_str()[5..]),\n+                                    rustc_errors::Applicability::HasPlaceholders,\n+                                    rustc_errors::SuggestionStyle::ShowAlways,\n+                                );\n+                            } else {\n+                                diag.span_suggestion_with_style(\n+                                    Span::new(\n+                                        body.params[0].span.lo() - rustc_span::BytePos(1),\n+                                        ident.span.hi(),\n+                                        ident.span.ctxt(),\n+                                        ident.span.parent(),\n+                                    ),\n+                                    \"add a type paremeter\",\n+                                    format!(\"<{{ /* Generic name */ }}: {}>\", &param.name.ident().as_str()[5..]),\n+                                    rustc_errors::Applicability::HasPlaceholders,\n+                                    rustc_errors::SuggestionStyle::ShowAlways,\n+                                );\n+                            }\n+                        },\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "d2852b4acad1eca80da81340410c0953c09ff651", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,3 +1,4 @@\n+mod impl_trait_in_params;\n mod misnamed_getters;\n mod must_use;\n mod not_unsafe_ptr_arg_deref;\n@@ -327,6 +328,32 @@ declare_clippy_lint! {\n     \"getter method returning the wrong field\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Lints when `impl Trait` is being used in a function's paremeters.\n+    /// ### Why is this bad?\n+    /// Turbofish syntax (`::<>`) cannot be used when `impl Trait` is being used, making `impl Trait` less powerful. Readability may also be a factor.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// trait MyTrait {}\n+    /// fn foo(a: impl MyTrait) {\n+    /// \t// [...]\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// trait MyTrait {}\n+    /// fn foo<T: MyTrait>(a: T) {\n+    /// \t// [...]\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.68.0\"]\n+    pub IMPL_TRAIT_IN_PARAMS,\n+    restriction,\n+    \"`impl Trait` is used in the function's parameters\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct Functions {\n     too_many_arguments_threshold: u64,\n@@ -354,6 +381,7 @@ impl_lint_pass!(Functions => [\n     RESULT_UNIT_ERR,\n     RESULT_LARGE_ERR,\n     MISNAMED_GETTERS,\n+    IMPL_TRAIT_IN_PARAMS,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Functions {\n@@ -371,6 +399,7 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n         too_many_lines::check_fn(cx, kind, span, body, self.too_many_lines_threshold);\n         not_unsafe_ptr_arg_deref::check_fn(cx, kind, decl, body, def_id);\n         misnamed_getters::check_fn(cx, kind, decl, body, span);\n+        impl_trait_in_params::check_fn(cx, &kind, body, hir_id);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {"}, {"sha": "1ad886f2cf35fe5a7b6526d2bae3baaa1971f502", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -7,7 +7,7 @@ use rustc_hir::{self as hir, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Symbol;\n-use std::fmt::Write as _;\n+use std::fmt::{self, Write as _};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -90,7 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for InconsistentStructConstructor {\n                 let mut fields_snippet = String::new();\n                 let (last_ident, idents) = ordered_fields.split_last().unwrap();\n                 for ident in idents {\n-                    let _ = write!(fields_snippet, \"{ident}, \");\n+                    let _: fmt::Result = write!(fields_snippet, \"{ident}, \");\n                 }\n                 fields_snippet.push_str(&last_ident.to_string());\n "}, {"sha": "7600777fab97039f41f4064d664386d6f9d372bd", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -90,7 +90,45 @@ declare_clippy_lint! {\n     \"non-binding `let` on a future\"\n }\n \n-declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK, LET_UNDERSCORE_FUTURE]);\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `let _ = <expr>` without a type annotation, and suggests to either provide one,\n+    /// or remove the `let` keyword altogether.\n+    ///\n+    /// ### Why is this bad?\n+    /// The `let _ = <expr>` expression ignores the value of `<expr>` but will remain doing so even\n+    /// if the type were to change, thus potentially introducing subtle bugs. By supplying a type\n+    /// annotation, one will be forced to re-visit the decision to ignore the value in such cases.\n+    ///\n+    /// ### Known problems\n+    /// The `_ = <expr>` is not properly supported by some tools (e.g. IntelliJ) and may seem odd\n+    /// to many developers. This lint also partially overlaps with the other `let_underscore_*`\n+    /// lints.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// fn foo() -> Result<u32, ()> {\n+    ///     Ok(123)\n+    /// }\n+    /// let _ = foo();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn foo() -> Result<u32, ()> {\n+    ///     Ok(123)\n+    /// }\n+    /// // Either provide a type annotation:\n+    /// let _: Result<u32, ()> = foo();\n+    /// // \u2026or drop the let keyword:\n+    /// _ = foo();\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub LET_UNDERSCORE_UNTYPED,\n+    pedantic,\n+    \"non-binding `let` without a type annotation\"\n+}\n+\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK, LET_UNDERSCORE_FUTURE, LET_UNDERSCORE_UNTYPED]);\n \n const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n     &paths::PARKING_LOT_MUTEX_GUARD,\n@@ -148,6 +186,18 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                     \"consider explicitly using function result\",\n                 );\n             }\n+\n+            if local.pat.default_binding_modes && local.ty.is_none() {\n+                // When `default_binding_modes` is true, the `let` keyword is present.\n+                span_lint_and_help(\n+                    cx,\n+                    LET_UNDERSCORE_UNTYPED,\n+                    local.span,\n+                    \"non-binding `let` without a type annotation\",\n+                    None,\n+                    \"consider adding a type annotation or removing the `let` keyword\",\n+                );\n+            }\n         }\n     }\n }"}, {"sha": "145cf524652f11576f238e458cefda110de4c403", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -2,6 +2,7 @@\n #![feature(binary_heap_into_iter_sorted)]\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n+#![feature(if_let_guard)]\n #![feature(iter_intersperse)]\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n@@ -219,6 +220,7 @@ mod neg_cmp_op_on_partial_ord;\n mod neg_multiply;\n mod new_without_default;\n mod no_effect;\n+mod no_mangle_with_rust_abi;\n mod non_copy_const;\n mod non_expressive_names;\n mod non_octal_unix_permissions;\n@@ -243,6 +245,7 @@ mod ptr;\n mod ptr_offset_with_cast;\n mod pub_use;\n mod question_mark;\n+mod question_mark_used;\n mod ranges;\n mod rc_clone_in_vec_init;\n mod read_zero_byte_vec;\n@@ -264,6 +267,7 @@ mod semicolon_block;\n mod semicolon_if_nothing_returned;\n mod serde_api;\n mod shadow;\n+mod significant_drop_tightening;\n mod single_char_lifetime_names;\n mod single_component_path_imports;\n mod size_of_in_element_count;\n@@ -559,6 +563,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(eta_reduction::EtaReduction));\n     store.register_late_pass(|_| Box::new(mut_mut::MutMut));\n     store.register_late_pass(|_| Box::new(mut_reference::UnnecessaryMutPassed));\n+    store.register_late_pass(|_| Box::<significant_drop_tightening::SignificantDropTightening<'_>>::default());\n     store.register_late_pass(|_| Box::new(len_zero::LenZero));\n     store.register_late_pass(|_| Box::new(attrs::Attributes));\n     store.register_late_pass(|_| Box::new(blocks_in_if_conditions::BlocksInIfConditions));\n@@ -665,12 +670,13 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         ))\n     });\n     let doc_valid_idents = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();\n+    let missing_docs_in_crate_items = conf.missing_docs_in_crate_items;\n     store.register_late_pass(move |_| Box::new(doc::DocMarkdown::new(doc_valid_idents.clone())));\n     store.register_late_pass(|_| Box::new(neg_multiply::NegMultiply));\n     store.register_late_pass(|_| Box::new(mem_forget::MemForget));\n     store.register_late_pass(|_| Box::new(let_if_seq::LetIfSeq));\n     store.register_late_pass(|_| Box::new(mixed_read_write_in_expression::EvalOrderDependence));\n-    store.register_late_pass(|_| Box::new(missing_doc::MissingDoc::new()));\n+    store.register_late_pass(move |_| Box::new(missing_doc::MissingDoc::new(missing_docs_in_crate_items)));\n     store.register_late_pass(|_| Box::new(missing_inline::MissingInline));\n     store.register_late_pass(move |_| Box::new(exhaustive_items::ExhaustiveItems));\n     store.register_late_pass(|_| Box::new(match_result_ok::MatchResultOk));\n@@ -694,6 +700,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(implicit_hasher::ImplicitHasher));\n     store.register_late_pass(|_| Box::new(fallible_impl_from::FallibleImplFrom));\n     store.register_late_pass(|_| Box::new(question_mark::QuestionMark));\n+    store.register_late_pass(|_| Box::new(question_mark_used::QuestionMarkUsed));\n     store.register_early_pass(|| Box::new(suspicious_operation_groupings::SuspiciousOperationGroupings));\n     store.register_late_pass(|_| Box::new(suspicious_trait_impl::SuspiciousImpl));\n     store.register_late_pass(|_| Box::new(map_unit_fn::MapUnit));\n@@ -911,7 +918,12 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(permissions_set_readonly_false::PermissionsSetReadonlyFalse));\n     store.register_late_pass(|_| Box::new(size_of_ref::SizeOfRef));\n     store.register_late_pass(|_| Box::new(multiple_unsafe_ops_per_block::MultipleUnsafeOpsPerBlock));\n-    store.register_late_pass(|_| Box::new(extra_unused_type_parameters::ExtraUnusedTypeParameters));\n+    store.register_late_pass(move |_| {\n+        Box::new(extra_unused_type_parameters::ExtraUnusedTypeParameters::new(\n+            avoid_breaking_exported_api,\n+        ))\n+    });\n+    store.register_late_pass(|_| Box::new(no_mangle_with_rust_abi::NoMangleWithRustAbi));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "986ffcad883db909db9f0776a73d359a0bec31f0", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -144,6 +144,10 @@ fn check_fn_inner<'tcx>(\n         .filter(|param| matches!(param.kind, GenericParamKind::Type { .. }));\n \n     for typ in types {\n+        if !typ.span.eq_ctxt(span) {\n+            return;\n+        }\n+\n         for pred in generics.bounds_for_param(typ.def_id) {\n             if pred.origin == PredicateOrigin::WhereClause {\n                 // has_where_lifetimes checked that this predicate contains no lifetime.\n@@ -181,6 +185,10 @@ fn check_fn_inner<'tcx>(\n     }\n \n     if let Some((elidable_lts, usages)) = could_use_elision(cx, sig.decl, body, trait_sig, generics.params) {\n+        if usages.iter().any(|usage| !usage.ident.span.eq_ctxt(span)) {\n+            return;\n+        }\n+\n         let lts = elidable_lts\n             .iter()\n             // In principle, the result of the call to `Node::ident` could be `unwrap`ped, as `DefId` should refer to a"}, {"sha": "dadcd9c5135c25cf0e1d8fa56cca74ced58ffbee", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -210,7 +210,7 @@ impl WarningType {\n                 cx,\n                 UNUSUAL_BYTE_GROUPINGS,\n                 span,\n-                \"digits of hex or binary literal not grouped by four\",\n+                \"digits of hex, binary or octal literal not in groups of equal size\",\n                 \"consider\",\n                 suggested_format,\n                 Applicability::MachineApplicable,\n@@ -427,8 +427,12 @@ impl LiteralDigitGrouping {\n \n         let first = groups.next().expect(\"At least one group\");\n \n-        if (radix == Radix::Binary || radix == Radix::Hexadecimal) && groups.any(|i| i != 4 && i != 2) {\n-            return Err(WarningType::UnusualByteGroupings);\n+        if radix == Radix::Binary || radix == Radix::Octal || radix == Radix::Hexadecimal {\n+            if let Some(second_size) = groups.next() {\n+                if !groups.all(|i| i == second_size) || first > second_size {\n+                    return Err(WarningType::UnusualByteGroupings);\n+                }\n+            }\n         }\n \n         if let Some(second) = groups.next() {\n@@ -484,7 +488,7 @@ impl DecimalLiteralRepresentation {\n             then {\n                 let hex = format!(\"{val:#X}\");\n                 let num_lit = NumericLiteral::new(&hex, num_lit.suffix, false);\n-                let _ = Self::do_lint(num_lit.integer).map_err(|warning_type| {\n+                let _: Result<(), ()> = Self::do_lint(num_lit.integer).map_err(|warning_type| {\n                     warning_type.display(num_lit.format(), cx, span);\n                 });\n             }"}, {"sha": "ea7630ce56dd352b7d4a88f0de3f9413b614320c", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -39,6 +39,7 @@ pub(super) fn check(\n             });\n         },\n         NeverLoopResult::MayContinueMainLoop | NeverLoopResult::Otherwise => (),\n+        NeverLoopResult::IgnoreUntilEnd(_) => unreachable!(),\n     }\n }\n \n@@ -48,6 +49,8 @@ enum NeverLoopResult {\n     AlwaysBreak,\n     // A continue may occur for the main loop.\n     MayContinueMainLoop,\n+    // Ignore everything until the end of the block with this id\n+    IgnoreUntilEnd(HirId),\n     Otherwise,\n }\n \n@@ -56,34 +59,34 @@ fn absorb_break(arg: NeverLoopResult) -> NeverLoopResult {\n     match arg {\n         NeverLoopResult::AlwaysBreak | NeverLoopResult::Otherwise => NeverLoopResult::Otherwise,\n         NeverLoopResult::MayContinueMainLoop => NeverLoopResult::MayContinueMainLoop,\n+        NeverLoopResult::IgnoreUntilEnd(id) => NeverLoopResult::IgnoreUntilEnd(id),\n     }\n }\n \n // Combine two results for parts that are called in order.\n #[must_use]\n fn combine_seq(first: NeverLoopResult, second: NeverLoopResult) -> NeverLoopResult {\n     match first {\n-        NeverLoopResult::AlwaysBreak | NeverLoopResult::MayContinueMainLoop => first,\n-        NeverLoopResult::Otherwise => second,\n-    }\n-}\n-\n-// Combine two results where both parts are called but not necessarily in order.\n-#[must_use]\n-fn combine_both(left: NeverLoopResult, right: NeverLoopResult) -> NeverLoopResult {\n-    match (left, right) {\n-        (NeverLoopResult::MayContinueMainLoop, _) | (_, NeverLoopResult::MayContinueMainLoop) => {\n-            NeverLoopResult::MayContinueMainLoop\n+        NeverLoopResult::AlwaysBreak | NeverLoopResult::MayContinueMainLoop | NeverLoopResult::IgnoreUntilEnd(_) => {\n+            first\n         },\n-        (NeverLoopResult::AlwaysBreak, _) | (_, NeverLoopResult::AlwaysBreak) => NeverLoopResult::AlwaysBreak,\n-        (NeverLoopResult::Otherwise, NeverLoopResult::Otherwise) => NeverLoopResult::Otherwise,\n+        NeverLoopResult::Otherwise => second,\n     }\n }\n \n // Combine two results where only one of the part may have been executed.\n #[must_use]\n-fn combine_branches(b1: NeverLoopResult, b2: NeverLoopResult) -> NeverLoopResult {\n+fn combine_branches(b1: NeverLoopResult, b2: NeverLoopResult, ignore_ids: &[HirId]) -> NeverLoopResult {\n     match (b1, b2) {\n+        (NeverLoopResult::IgnoreUntilEnd(a), NeverLoopResult::IgnoreUntilEnd(b)) => {\n+            if ignore_ids.iter().find(|&e| e == &a || e == &b).unwrap() == &a {\n+                NeverLoopResult::IgnoreUntilEnd(b)\n+            } else {\n+                NeverLoopResult::IgnoreUntilEnd(a)\n+            }\n+        },\n+        (i @ NeverLoopResult::IgnoreUntilEnd(_), NeverLoopResult::AlwaysBreak)\n+        | (NeverLoopResult::AlwaysBreak, i @ NeverLoopResult::IgnoreUntilEnd(_)) => i,\n         (NeverLoopResult::AlwaysBreak, NeverLoopResult::AlwaysBreak) => NeverLoopResult::AlwaysBreak,\n         (NeverLoopResult::MayContinueMainLoop, _) | (_, NeverLoopResult::MayContinueMainLoop) => {\n             NeverLoopResult::MayContinueMainLoop\n@@ -103,7 +106,7 @@ fn never_loop_block(block: &Block<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id\n         let e = never_loop_expr(e, ignore_ids, main_loop_id);\n         // els is an else block in a let...else binding\n         els.map_or(e, |els| {\n-            combine_branches(e, never_loop_block(els, ignore_ids, main_loop_id))\n+            combine_branches(e, never_loop_block(els, ignore_ids, main_loop_id), ignore_ids)\n         })\n     })\n     .fold(NeverLoopResult::Otherwise, combine_seq)\n@@ -139,7 +142,7 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n         ExprKind::Struct(_, fields, base) => {\n             let fields = never_loop_expr_all(&mut fields.iter().map(|f| f.expr), ignore_ids, main_loop_id);\n             if let Some(base) = base {\n-                combine_both(fields, never_loop_expr(base, ignore_ids, main_loop_id))\n+                combine_seq(fields, never_loop_expr(base, ignore_ids, main_loop_id))\n             } else {\n                 fields\n             }\n@@ -159,7 +162,7 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n             let e3 = e3.as_ref().map_or(NeverLoopResult::Otherwise, |e| {\n                 never_loop_expr(e, ignore_ids, main_loop_id)\n             });\n-            combine_seq(e1, combine_branches(e2, e3))\n+            combine_seq(e1, combine_branches(e2, e3, ignore_ids))\n         },\n         ExprKind::Match(e, arms, _) => {\n             let e = never_loop_expr(e, ignore_ids, main_loop_id);\n@@ -175,8 +178,13 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n                 ignore_ids.push(b.hir_id);\n             }\n             let ret = never_loop_block(b, ignore_ids, main_loop_id);\n-            ignore_ids.pop();\n-            ret\n+            if l.is_some() {\n+                ignore_ids.pop();\n+            }\n+            match ret {\n+                NeverLoopResult::IgnoreUntilEnd(a) if a == b.hir_id => NeverLoopResult::Otherwise,\n+                _ => ret,\n+            }\n         },\n         ExprKind::Continue(d) => {\n             let id = d\n@@ -190,8 +198,8 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n         },\n         // checks if break targets a block instead of a loop\n         ExprKind::Break(Destination { target_id: Ok(t), .. }, e) if ignore_ids.contains(&t) => e\n-            .map_or(NeverLoopResult::Otherwise, |e| {\n-                combine_seq(never_loop_expr(e, ignore_ids, main_loop_id), NeverLoopResult::Otherwise)\n+            .map_or(NeverLoopResult::IgnoreUntilEnd(t), |e| {\n+                never_loop_expr(e, ignore_ids, main_loop_id)\n             }),\n         ExprKind::Break(_, e) | ExprKind::Ret(e) => e.as_ref().map_or(NeverLoopResult::AlwaysBreak, |e| {\n             combine_seq(\n@@ -218,7 +226,7 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n                 | InlineAsmOperand::SymFn { .. }\n                 | InlineAsmOperand::SymStatic { .. } => NeverLoopResult::Otherwise,\n             })\n-            .fold(NeverLoopResult::Otherwise, combine_both),\n+            .fold(NeverLoopResult::Otherwise, combine_seq),\n         ExprKind::Yield(_, _)\n         | ExprKind::Closure { .. }\n         | ExprKind::Path(_)\n@@ -234,16 +242,17 @@ fn never_loop_expr_all<'a, T: Iterator<Item = &'a Expr<'a>>>(\n     main_loop_id: HirId,\n ) -> NeverLoopResult {\n     es.map(|e| never_loop_expr(e, ignore_ids, main_loop_id))\n-        .fold(NeverLoopResult::Otherwise, combine_both)\n+        .fold(NeverLoopResult::Otherwise, combine_seq)\n }\n \n fn never_loop_expr_branch<'a, T: Iterator<Item = &'a Expr<'a>>>(\n     e: &mut T,\n     ignore_ids: &mut Vec<HirId>,\n     main_loop_id: HirId,\n ) -> NeverLoopResult {\n-    e.map(|e| never_loop_expr(e, ignore_ids, main_loop_id))\n-        .fold(NeverLoopResult::AlwaysBreak, combine_branches)\n+    e.fold(NeverLoopResult::AlwaysBreak, |a, b| {\n+        combine_branches(a, never_loop_expr(b, ignore_ids, main_loop_id), ignore_ids)\n+    })\n }\n \n fn for_to_if_let_sugg(cx: &LateContext<'_>, iterator: &Expr<'_>, pat: &Pat<'_>) -> String {"}, {"sha": "98e698c6c2a0c3197709884a589b531e9ee92f63", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 101, "deletions": 52, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -4,11 +4,12 @@ use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::peel_blocks;\n use clippy_utils::source::snippet_with_context;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::visitors::{for_each_expr, Descend};\n+use clippy_utils::visitors::{Descend, Visitable};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, MatchSource, Pat, PatKind, QPath, Stmt, StmtKind};\n+use rustc_hir::intravisit::{walk_expr, Visitor};\n+use rustc_hir::{Expr, ExprKind, HirId, ItemId, Local, MatchSource, Pat, PatKind, QPath, Stmt, StmtKind, Ty};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -115,6 +116,13 @@ impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n                     .enumerate()\n                     .find(|(_, arm)| expr_diverges(cx, arm.body) && pat_allowed_for_else(cx, arm.pat, check_types));\n                 let Some((idx, diverging_arm)) = diverging_arm_opt else { return; };\n+                // If the non-diverging arm is the first one, its pattern can be reused in a let/else statement.\n+                // However, if it arrives in second position, its pattern may cover some cases already covered\n+                // by the diverging one.\n+                // TODO: accept the non-diverging arm as a second position if patterns are disjointed.\n+                if idx == 0 {\n+                    return;\n+                }\n                 let pat_arm = &arms[1 - idx];\n                 if !expr_is_simple_identity(pat_arm.pat, pat_arm.body) {\n                     return;\n@@ -162,61 +170,102 @@ fn emit_manual_let_else(cx: &LateContext<'_>, span: Span, expr: &Expr<'_>, pat:\n     );\n }\n \n-fn expr_diverges(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n-    fn is_never(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n-        if let Some(ty) = cx.typeck_results().expr_ty_opt(expr) {\n-            return ty.is_never();\n-        }\n-        false\n+/// Check whether an expression is divergent. May give false negatives.\n+fn expr_diverges(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    struct V<'cx, 'tcx> {\n+        cx: &'cx LateContext<'tcx>,\n+        res: ControlFlow<(), Descend>,\n     }\n-    // We can't just call is_never on expr and be done, because the type system\n-    // sometimes coerces the ! type to something different before we can get\n-    // our hands on it. So instead, we do a manual search. We do fall back to\n-    // is_never in some places when there is no better alternative.\n-    for_each_expr(expr, |ex| {\n-        match ex.kind {\n-            ExprKind::Continue(_) | ExprKind::Break(_, _) | ExprKind::Ret(_) => ControlFlow::Break(()),\n-            ExprKind::Call(call, _) => {\n-                if is_never(cx, ex) || is_never(cx, call) {\n-                    return ControlFlow::Break(());\n-                }\n-                ControlFlow::Continue(Descend::Yes)\n-            },\n-            ExprKind::MethodCall(..) => {\n-                if is_never(cx, ex) {\n-                    return ControlFlow::Break(());\n-                }\n-                ControlFlow::Continue(Descend::Yes)\n-            },\n-            ExprKind::If(if_expr, if_then, if_else) => {\n-                let else_diverges = if_else.map_or(false, |ex| expr_diverges(cx, ex));\n-                let diverges = expr_diverges(cx, if_expr) || (else_diverges && expr_diverges(cx, if_then));\n-                if diverges {\n-                    return ControlFlow::Break(());\n+    impl<'tcx> Visitor<'tcx> for V<'_, '_> {\n+        fn visit_expr(&mut self, e: &'tcx Expr<'tcx>) {\n+            fn is_never(cx: &LateContext<'_>, expr: &'_ Expr<'_>) -> bool {\n+                if let Some(ty) = cx.typeck_results().expr_ty_opt(expr) {\n+                    return ty.is_never();\n                 }\n-                ControlFlow::Continue(Descend::No)\n-            },\n-            ExprKind::Match(match_expr, match_arms, _) => {\n-                let diverges = expr_diverges(cx, match_expr)\n-                    || match_arms.iter().all(|arm| {\n-                        let guard_diverges = arm.guard.as_ref().map_or(false, |g| expr_diverges(cx, g.body()));\n-                        guard_diverges || expr_diverges(cx, arm.body)\n-                    });\n-                if diverges {\n-                    return ControlFlow::Break(());\n-                }\n-                ControlFlow::Continue(Descend::No)\n-            },\n+                false\n+            }\n \n-            // Don't continue into loops or labeled blocks, as they are breakable,\n-            // and we'd have to start checking labels.\n-            ExprKind::Block(_, Some(_)) | ExprKind::Loop(..) => ControlFlow::Continue(Descend::No),\n+            if self.res.is_break() {\n+                return;\n+            }\n \n-            // Default: descend\n-            _ => ControlFlow::Continue(Descend::Yes),\n+            // We can't just call is_never on expr and be done, because the type system\n+            // sometimes coerces the ! type to something different before we can get\n+            // our hands on it. So instead, we do a manual search. We do fall back to\n+            // is_never in some places when there is no better alternative.\n+            self.res = match e.kind {\n+                ExprKind::Continue(_) | ExprKind::Break(_, _) | ExprKind::Ret(_) => ControlFlow::Break(()),\n+                ExprKind::Call(call, _) => {\n+                    if is_never(self.cx, e) || is_never(self.cx, call) {\n+                        ControlFlow::Break(())\n+                    } else {\n+                        ControlFlow::Continue(Descend::Yes)\n+                    }\n+                },\n+                ExprKind::MethodCall(..) => {\n+                    if is_never(self.cx, e) {\n+                        ControlFlow::Break(())\n+                    } else {\n+                        ControlFlow::Continue(Descend::Yes)\n+                    }\n+                },\n+                ExprKind::If(if_expr, if_then, if_else) => {\n+                    let else_diverges = if_else.map_or(false, |ex| expr_diverges(self.cx, ex));\n+                    let diverges =\n+                        expr_diverges(self.cx, if_expr) || (else_diverges && expr_diverges(self.cx, if_then));\n+                    if diverges {\n+                        ControlFlow::Break(())\n+                    } else {\n+                        ControlFlow::Continue(Descend::No)\n+                    }\n+                },\n+                ExprKind::Match(match_expr, match_arms, _) => {\n+                    let diverges = expr_diverges(self.cx, match_expr)\n+                        || match_arms.iter().all(|arm| {\n+                            let guard_diverges = arm.guard.as_ref().map_or(false, |g| expr_diverges(self.cx, g.body()));\n+                            guard_diverges || expr_diverges(self.cx, arm.body)\n+                        });\n+                    if diverges {\n+                        ControlFlow::Break(())\n+                    } else {\n+                        ControlFlow::Continue(Descend::No)\n+                    }\n+                },\n+\n+                // Don't continue into loops or labeled blocks, as they are breakable,\n+                // and we'd have to start checking labels.\n+                ExprKind::Block(_, Some(_)) | ExprKind::Loop(..) => ControlFlow::Continue(Descend::No),\n+\n+                // Default: descend\n+                _ => ControlFlow::Continue(Descend::Yes),\n+            };\n+            if let ControlFlow::Continue(Descend::Yes) = self.res {\n+                walk_expr(self, e);\n+            }\n+        }\n+\n+        fn visit_local(&mut self, local: &'tcx Local<'_>) {\n+            // Don't visit the else block of a let/else statement as it will not make\n+            // the statement divergent even though the else block is divergent.\n+            if let Some(init) = local.init {\n+                self.visit_expr(init);\n+            }\n         }\n-    })\n-    .is_some()\n+\n+        // Avoid unnecessary `walk_*` calls.\n+        fn visit_ty(&mut self, _: &'tcx Ty<'tcx>) {}\n+        fn visit_pat(&mut self, _: &'tcx Pat<'tcx>) {}\n+        fn visit_qpath(&mut self, _: &'tcx QPath<'tcx>, _: HirId, _: Span) {}\n+        // Avoid monomorphising all `visit_*` functions.\n+        fn visit_nested_item(&mut self, _: ItemId) {}\n+    }\n+\n+    let mut v = V {\n+        cx,\n+        res: ControlFlow::Continue(Descend::Yes),\n+    };\n+    expr.visit(&mut v);\n+    v.res.is_break()\n }\n \n fn pat_allowed_for_else(cx: &LateContext<'_>, pat: &'_ Pat<'_>, check_types: bool) -> bool {"}, {"sha": "c5fc145b28908417afda5aeb4f3919edcbcdb0a1", "filename": "clippy_lints/src/methods/bytes_nth.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -5,6 +5,8 @@ use rustc_errors::Applicability;\n use rustc_hir::{Expr, LangItem};\n use rustc_lint::LateContext;\n \n+use crate::methods::method_call;\n+\n use super::BYTES_NTH;\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, recv: &'tcx Expr<'tcx>, n_arg: &'tcx Expr<'tcx>) {\n@@ -16,18 +18,32 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, recv: &'tcx E\n     } else {\n         return;\n     };\n+\n     let mut applicability = Applicability::MachineApplicable;\n-    span_lint_and_sugg(\n-        cx,\n-        BYTES_NTH,\n-        expr.span,\n-        &format!(\"called `.bytes().nth()` on a `{caller_type}`\"),\n-        \"try\",\n-        format!(\n-            \"{}.as_bytes().get({})\",\n-            snippet_with_applicability(cx, recv.span, \"..\", &mut applicability),\n-            snippet_with_applicability(cx, n_arg.span, \"..\", &mut applicability)\n-        ),\n-        applicability,\n-    );\n+    let receiver = snippet_with_applicability(cx, recv.span, \"..\", &mut applicability);\n+    let n = snippet_with_applicability(cx, n_arg.span, \"..\", &mut applicability);\n+\n+    if let Some(parent) = clippy_utils::get_parent_expr(cx, expr)\n+      && let Some((name, _, _, _, _)) = method_call(parent)\n+      && name == \"unwrap\" {\n+        span_lint_and_sugg(\n+            cx,\n+            BYTES_NTH,\n+            parent.span,\n+            &format!(\"called `.bytes().nth().unwrap()` on a `{caller_type}`\"),\n+            \"try\",\n+            format!(\"{receiver}.as_bytes()[{n}]\",),\n+            applicability\n+        );\n+    } else {\n+        span_lint_and_sugg(\n+            cx,\n+            BYTES_NTH,\n+            expr.span,\n+            &format!(\"called `.bytes().nth()` on a `{caller_type}`\"),\n+            \"try\",\n+            format!(\"{receiver}.as_bytes().get({n}).copied()\"), \n+            applicability\n+        );\n+    };\n }"}, {"sha": "614610335a1343e5e6c92ced38e01266e6b039f1", "filename": "clippy_lints/src/methods/expect_used.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::is_in_cfg_test;\n use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{is_in_cfg_test, is_in_test_function};\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::sym;\n@@ -27,7 +27,7 @@ pub(super) fn check(\n \n     let method = if is_err { \"expect_err\" } else { \"expect\" };\n \n-    if allow_expect_in_tests && is_in_cfg_test(cx.tcx, expr.hir_id) {\n+    if allow_expect_in_tests && (is_in_test_function(cx.tcx, expr.hir_id) || is_in_cfg_test(cx.tcx, expr.hir_id)) {\n         return;\n     }\n "}, {"sha": "5a78a41687725655e8e0b18d07a7c67a5826dd33", "filename": "clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -53,7 +53,9 @@ pub fn is_clone_like(cx: &LateContext<'_>, method_name: &str, method_def_id: hir\n         \"to_vec\" => cx\n             .tcx\n             .impl_of_method(method_def_id)\n-            .filter(|&impl_did| cx.tcx.type_of(impl_did).subst_identity().is_slice() && cx.tcx.impl_trait_ref(impl_did).is_none())\n+            .filter(|&impl_did| {\n+                cx.tcx.type_of(impl_did).subst_identity().is_slice() && cx.tcx.impl_trait_ref(impl_did).is_none()\n+            })\n             .is_some(),\n         _ => false,\n     }"}, {"sha": "702df4b282b85fa93eb59e98a95b0bf9650490ec", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -80,6 +80,7 @@ mod skip_while_next;\n mod stable_sort_primitive;\n mod str_splitn;\n mod string_extend_chars;\n+mod suspicious_command_arg_space;\n mod suspicious_map;\n mod suspicious_splitn;\n mod suspicious_to_owned;\n@@ -3162,6 +3163,32 @@ declare_clippy_lint! {\n     \"collecting an iterator when collect is not needed\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for `Command::arg()` invocations that look like they\n+    /// should be multiple arguments instead, such as `arg(\"-t ext2\")`.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// `Command::arg()` does not split arguments by space. An argument like `arg(\"-t ext2\")`\n+    /// will be passed as a single argument to the command,\n+    /// which is likely not what was intended.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// std::process::Command::new(\"echo\").arg(\"-n hello\").spawn().unwrap();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// std::process::Command::new(\"echo\").args([\"-n\", \"hello\"]).spawn().unwrap();\n+    /// ```\n+    #[clippy::version = \"1.67.0\"]\n+    pub SUSPICIOUS_COMMAND_ARG_SPACE,\n+    suspicious,\n+    \"single command line argument that looks like it should be multiple arguments\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Msrv,\n@@ -3289,6 +3316,7 @@ impl_lint_pass!(Methods => [\n     SEEK_FROM_CURRENT,\n     SEEK_TO_START_INSTEAD_OF_REWIND,\n     NEEDLESS_COLLECT,\n+    SUSPICIOUS_COMMAND_ARG_SPACE,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -3496,6 +3524,9 @@ impl Methods {\n                         unnecessary_lazy_eval::check(cx, expr, recv, arg, \"and\");\n                     }\n                 },\n+                (\"arg\", [arg]) => {\n+                    suspicious_command_arg_space::check(cx, recv, arg, span);\n+                }\n                 (\"as_deref\" | \"as_deref_mut\", []) => {\n                     needless_option_as_deref::check(cx, expr, recv, name);\n                 },"}, {"sha": "73632c5a357ddf0f042fcea5efdd9f8ef3fbccbb", "filename": "clippy_lints/src/methods/suspicious_command_arg_space.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_command_arg_space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_command_arg_space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_command_arg_space.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,39 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::paths;\n+use clippy_utils::ty::match_type;\n+use rustc_ast as ast;\n+use rustc_errors::{Applicability, Diagnostic};\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_span::Span;\n+\n+use super::SUSPICIOUS_COMMAND_ARG_SPACE;\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, recv: &'tcx hir::Expr<'_>, arg: &'tcx hir::Expr<'_>, span: Span) {\n+    let ty = cx.typeck_results().expr_ty(recv).peel_refs();\n+\n+    if match_type(cx, ty, &paths::STD_PROCESS_COMMAND)\n+        && let hir::ExprKind::Lit(lit) = &arg.kind\n+        && let ast::LitKind::Str(s, _) = &lit.node\n+        && let Some((arg1, arg2)) = s.as_str().split_once(' ')\n+        && arg1.starts_with('-')\n+        && arg1.chars().all(|c| c.is_ascii_alphanumeric() || c == '_' || c == '-')\n+    {\n+        span_lint_and_then(\n+            cx,\n+            SUSPICIOUS_COMMAND_ARG_SPACE,\n+            arg.span,\n+            \"single argument that looks like it should be multiple arguments\",\n+            |diag: &mut Diagnostic| {\n+                diag.multipart_suggestion_verbose(\n+                    \"consider splitting the argument\",\n+                    vec![\n+                        (span, \"args\".to_string()),\n+                        (arg.span, format!(\"[{arg1:?}, {arg2:?}]\")),\n+                    ],\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        );\n+    }\n+}"}, {"sha": "5e4c3daee644702e43edd19e03be2110d4dc5e1f", "filename": "clippy_lints/src/methods/unwrap_used.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{is_in_cfg_test, is_lint_allowed};\n+use clippy_utils::{is_in_cfg_test, is_in_test_function, is_lint_allowed};\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::sym;\n@@ -27,7 +27,7 @@ pub(super) fn check(\n \n     let method_suffix = if is_err { \"_err\" } else { \"\" };\n \n-    if allow_unwrap_in_tests && is_in_cfg_test(cx.tcx, expr.hir_id) {\n+    if allow_unwrap_in_tests && (is_in_test_function(cx.tcx, expr.hir_id) || is_in_cfg_test(cx.tcx, expr.hir_id)) {\n         return;\n     }\n "}, {"sha": "9659ca8ced2efcdb36a44ebbcdf85c5690921efc", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -8,10 +8,12 @@\n use clippy_utils::attrs::is_doc_hidden;\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::is_from_proc_macro;\n+use hir::def_id::LocalDefId;\n+use if_chain::if_chain;\n use rustc_ast::ast::{self, MetaItem, MetaItemKind};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::ty::DefIdTree;\n+use rustc_middle::ty::{DefIdTree, Visibility};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::source_map::Span;\n@@ -34,6 +36,9 @@ declare_clippy_lint! {\n }\n \n pub struct MissingDoc {\n+    /// Whether to **only** check for missing documentation in items visible within the current\n+    /// crate. For example, `pub(crate)` items.\n+    crate_items_only: bool,\n     /// Stack of whether #[doc(hidden)] is set\n     /// at each level which has lint attributes.\n     doc_hidden_stack: Vec<bool>,\n@@ -42,14 +47,15 @@ pub struct MissingDoc {\n impl Default for MissingDoc {\n     #[must_use]\n     fn default() -> Self {\n-        Self::new()\n+        Self::new(false)\n     }\n }\n \n impl MissingDoc {\n     #[must_use]\n-    pub fn new() -> Self {\n+    pub fn new(crate_items_only: bool) -> Self {\n         Self {\n+            crate_items_only,\n             doc_hidden_stack: vec![false],\n         }\n     }\n@@ -75,6 +81,7 @@ impl MissingDoc {\n     fn check_missing_docs_attrs(\n         &self,\n         cx: &LateContext<'_>,\n+        def_id: LocalDefId,\n         attrs: &[ast::Attribute],\n         sp: Span,\n         article: &'static str,\n@@ -95,6 +102,13 @@ impl MissingDoc {\n             return;\n         }\n \n+        if self.crate_items_only && def_id != CRATE_DEF_ID {\n+            let vis = cx.tcx.visibility(def_id);\n+            if vis == Visibility::Public || vis != Visibility::Restricted(CRATE_DEF_ID.into()) {\n+                return;\n+            }\n+        }\n+\n         let has_doc = attrs\n             .iter()\n             .any(|a| a.doc_str().is_some() || Self::has_include(a.meta()));\n@@ -123,7 +137,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_crate(&mut self, cx: &LateContext<'tcx>) {\n         let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n-        self.check_missing_docs_attrs(cx, attrs, cx.tcx.def_span(CRATE_DEF_ID), \"the\", \"crate\");\n+        self.check_missing_docs_attrs(cx, CRATE_DEF_ID, attrs, cx.tcx.def_span(CRATE_DEF_ID), \"the\", \"crate\");\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, it: &'tcx hir::Item<'_>) {\n@@ -159,7 +173,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n         let attrs = cx.tcx.hir().attrs(it.hir_id());\n         if !is_from_proc_macro(cx, it) {\n-            self.check_missing_docs_attrs(cx, attrs, it.span, article, desc);\n+            self.check_missing_docs_attrs(cx, it.owner_id.def_id, attrs, it.span, article, desc);\n         }\n     }\n \n@@ -168,7 +182,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n         let attrs = cx.tcx.hir().attrs(trait_item.hir_id());\n         if !is_from_proc_macro(cx, trait_item) {\n-            self.check_missing_docs_attrs(cx, attrs, trait_item.span, article, desc);\n+            self.check_missing_docs_attrs(cx, trait_item.owner_id.def_id, attrs, trait_item.span, article, desc);\n         }\n     }\n \n@@ -185,23 +199,23 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         let (article, desc) = cx.tcx.article_and_description(impl_item.owner_id.to_def_id());\n         let attrs = cx.tcx.hir().attrs(impl_item.hir_id());\n         if !is_from_proc_macro(cx, impl_item) {\n-            self.check_missing_docs_attrs(cx, attrs, impl_item.span, article, desc);\n+            self.check_missing_docs_attrs(cx, impl_item.owner_id.def_id, attrs, impl_item.span, article, desc);\n         }\n     }\n \n     fn check_field_def(&mut self, cx: &LateContext<'tcx>, sf: &'tcx hir::FieldDef<'_>) {\n         if !sf.is_positional() {\n             let attrs = cx.tcx.hir().attrs(sf.hir_id);\n             if !is_from_proc_macro(cx, sf) {\n-                self.check_missing_docs_attrs(cx, attrs, sf.span, \"a\", \"struct field\");\n+                self.check_missing_docs_attrs(cx, sf.def_id, attrs, sf.span, \"a\", \"struct field\");\n             }\n         }\n     }\n \n     fn check_variant(&mut self, cx: &LateContext<'tcx>, v: &'tcx hir::Variant<'_>) {\n         let attrs = cx.tcx.hir().attrs(v.hir_id);\n         if !is_from_proc_macro(cx, v) {\n-            self.check_missing_docs_attrs(cx, attrs, v.span, \"a\", \"variant\");\n+            self.check_missing_docs_attrs(cx, v.def_id, attrs, v.span, \"a\", \"variant\");\n         }\n     }\n }"}, {"sha": "349fcd2274d3ec61a7b0e2352298999c2265138e", "filename": "clippy_lints/src/module_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmodule_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmodule_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodule_style.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -134,7 +134,7 @@ fn process_paths_for_mod_files<'a>(\n     mod_folders: &mut FxHashSet<&'a OsStr>,\n ) {\n     let mut comp = path.components().rev().peekable();\n-    let _ = comp.next();\n+    let _: Option<_> = comp.next();\n     if path.ends_with(\"mod.rs\") {\n         mod_folders.insert(comp.peek().map(|c| c.as_os_str()).unwrap_or_default());\n     }"}, {"sha": "8aa814b74053606f6c4cd0cffb1719873a49ca33", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -166,7 +166,8 @@ impl MutableKeyType {\n             Ref(_, inner_ty, mutbl) => mutbl == hir::Mutability::Mut || self.is_interior_mutable_type(cx, inner_ty),\n             Slice(inner_ty) => self.is_interior_mutable_type(cx, inner_ty),\n             Array(inner_ty, size) => {\n-                size.try_eval_target_usize(cx.tcx, cx.param_env).map_or(true, |u| u != 0)\n+                size.try_eval_target_usize(cx.tcx, cx.param_env)\n+                    .map_or(true, |u| u != 0)\n                     && self.is_interior_mutable_type(cx, inner_ty)\n             },\n             Tuple(fields) => fields.iter().any(|ty| self.is_interior_mutable_type(cx, ty)),"}, {"sha": "1ab81aee7b8d5a805190c1c6b9e40f6f386aec4b", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -149,7 +149,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n         };\n \n         let fn_sig = cx.tcx.fn_sig(fn_def_id).subst_identity();\n-        let fn_sig = cx.tcx.erase_late_bound_regions(fn_sig);\n+        let fn_sig = cx.tcx.liberate_late_bound_regions(fn_def_id.to_def_id(), fn_sig);\n \n         for (idx, ((input, &ty), arg)) in decl.inputs.iter().zip(fn_sig.inputs()).zip(body.params).enumerate() {\n             // All spans generated from a proc-macro invocation are the same..."}, {"sha": "bc64ccb295cb626643cd8d09a491b09bf68608be", "filename": "clippy_lints/src/no_mangle_with_rust_abi.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fno_mangle_with_rust_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fno_mangle_with_rust_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_mangle_with_rust_abi.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,65 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_target::spec::abi::Abi;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for Rust ABI functions with the `#[no_mangle]` attribute.\n+    ///\n+    /// ### Why is this bad?\n+    /// The Rust ABI is not stable, but in many simple cases matches\n+    /// enough with the C ABI that it is possible to forget to add\n+    /// `extern \"C\"` to a function called from C. Changes to the\n+    /// Rust ABI can break this at any point.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    ///  #[no_mangle]\n+    ///  fn example(arg_one: u32, arg_two: usize) {}\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    ///  #[no_mangle]\n+    ///  extern \"C\" fn example(arg_one: u32, arg_two: usize) {}\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub NO_MANGLE_WITH_RUST_ABI,\n+    pedantic,\n+    \"convert Rust ABI functions to C ABI\"\n+}\n+declare_lint_pass!(NoMangleWithRustAbi => [NO_MANGLE_WITH_RUST_ABI]);\n+\n+impl<'tcx> LateLintPass<'tcx> for NoMangleWithRustAbi {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        if let ItemKind::Fn(fn_sig, _, _) = &item.kind {\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            let mut applicability = Applicability::MachineApplicable;\n+            let snippet = snippet_with_applicability(cx, fn_sig.span, \"..\", &mut applicability);\n+            for attr in attrs {\n+                if let Some(ident) = attr.ident()\n+                    && ident.name == rustc_span::sym::no_mangle\n+                    && fn_sig.header.abi == Abi::Rust\n+                    && !snippet.contains(\"extern\") {\n+\n+                    let suggestion = snippet.split_once(\"fn\")\n+                        .map_or(String::new(), |(first, second)| format!(r#\"{first}extern \"C\" fn{second}\"#));\n+\n+                    span_lint_and_sugg(\n+                        cx,\n+                        NO_MANGLE_WITH_RUST_ABI,\n+                        fn_sig.span,\n+                        \"attribute #[no_mangle] set on a Rust ABI function\",\n+                        \"try\",\n+                        suggestion,\n+                        applicability\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "87a8a2ed12b2a8c0967a9566d784a1a929cb5b51", "filename": "clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,8 +1,8 @@\n use super::ARITHMETIC_SIDE_EFFECTS;\n use clippy_utils::{\n-    consts::{constant, constant_simple},\n+    consts::{constant, constant_simple, Constant},\n     diagnostics::span_lint,\n-    peel_hir_expr_refs, peel_hir_expr_unary,\n+    is_lint_allowed, peel_hir_expr_refs, peel_hir_expr_unary,\n };\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -97,17 +97,19 @@ impl ArithmeticSideEffects {\n         self.expr_span = Some(expr.span);\n     }\n \n-    /// If `expr` is not a literal integer like `1`, returns `None`.\n+    /// Returns the numeric value of a literal integer originated from `expr`, if any.\n     ///\n-    /// Returns the absolute value of the expression, if this is an integer literal.\n-    fn literal_integer(expr: &hir::Expr<'_>) -> Option<u128> {\n+    /// Literal integers can be originated from adhoc declarations like `1`, associated constants\n+    /// like `i32::MAX` or constant references like `N` from `const N: i32 = 1;`,\n+    fn literal_integer(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<u128> {\n         let actual = peel_hir_expr_unary(expr).0;\n         if let hir::ExprKind::Lit(ref lit) = actual.kind && let ast::LitKind::Int(n, _) = lit.node {\n-            Some(n)\n+            return Some(n)\n         }\n-        else {\n-            None\n+        if let Some((Constant::Int(n), _)) = constant(cx, cx.typeck_results(), expr) {\n+            return Some(n);\n         }\n+        None\n     }\n \n     /// Manages when the lint should be triggered. Operations in constant environments, hard coded\n@@ -143,7 +145,10 @@ impl ArithmeticSideEffects {\n         let has_valid_op = if Self::is_integral(lhs_ty) && Self::is_integral(rhs_ty) {\n             let (actual_lhs, lhs_ref_counter) = peel_hir_expr_refs(lhs);\n             let (actual_rhs, rhs_ref_counter) = peel_hir_expr_refs(rhs);\n-            match (Self::literal_integer(actual_lhs), Self::literal_integer(actual_rhs)) {\n+            match (\n+                Self::literal_integer(cx, actual_lhs),\n+                Self::literal_integer(cx, actual_rhs),\n+            ) {\n                 (None, None) => false,\n                 (None, Some(n)) | (Some(n), None) => match (&op.node, n) {\n                     (hir::BinOpKind::Div | hir::BinOpKind::Rem, 0) => false,\n@@ -180,20 +185,22 @@ impl ArithmeticSideEffects {\n             return;\n         }\n         let actual_un_expr = peel_hir_expr_refs(un_expr).0;\n-        if Self::literal_integer(actual_un_expr).is_some() {\n+        if Self::literal_integer(cx, actual_un_expr).is_some() {\n             return;\n         }\n         self.issue_lint(cx, expr);\n     }\n \n-    fn should_skip_expr(&mut self, expr: &hir::Expr<'_>) -> bool {\n-        self.expr_span.is_some() || self.const_span.map_or(false, |sp| sp.contains(expr.span))\n+    fn should_skip_expr(&mut self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n+        is_lint_allowed(cx, ARITHMETIC_SIDE_EFFECTS, expr.hir_id)\n+            || self.expr_span.is_some()\n+            || self.const_span.map_or(false, |sp| sp.contains(expr.span))\n     }\n }\n \n impl<'tcx> LateLintPass<'tcx> for ArithmeticSideEffects {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &hir::Expr<'tcx>) {\n-        if self.should_skip_expr(expr) {\n+        if self.should_skip_expr(cx, expr) {\n             return;\n         }\n         match &expr.kind {"}, {"sha": "9b678e8d753c2a20f9abb96f29462a5d0be11ef8", "filename": "clippy_lints/src/question_mark_used.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fquestion_mark_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fquestion_mark_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark_used.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,52 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+\n+use clippy_utils::macros::span_is_local;\n+use rustc_hir::{Expr, ExprKind, MatchSource};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for expressions that use the question mark operator and rejects them.\n+    ///\n+    /// ### Why is this bad?\n+    /// Sometimes code wants to avoid the question mark operator because for instance a local\n+    /// block requires a macro to re-throw errors to attach additional information to the\n+    /// error.\n+    ///\n+    /// ### Example\n+    /// ```ignore\n+    /// let result = expr?;\n+    /// ```\n+    ///\n+    /// Could be written:\n+    ///\n+    /// ```ignore\n+    /// utility_macro!(expr);\n+    /// ```\n+    #[clippy::version = \"pre 1.29.0\"]\n+    pub QUESTION_MARK_USED,\n+    restriction,\n+    \"complains if the question mark operator is used\"\n+}\n+\n+declare_lint_pass!(QuestionMarkUsed => [QUESTION_MARK_USED]);\n+\n+impl<'tcx> LateLintPass<'tcx> for QuestionMarkUsed {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if let ExprKind::Match(_, _, MatchSource::TryDesugar) = expr.kind {\n+            if !span_is_local(expr.span) {\n+                return;\n+            }\n+\n+            span_lint_and_help(\n+                cx,\n+                QUESTION_MARK_USED,\n+                expr.span,\n+                \"question mark operator was used\",\n+                None,\n+                \"consider using a custom macro or match expression\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "f0d7dd23a67860aac6435463120dc0dd6d75b422", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 65, "deletions": 45, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -14,6 +14,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::source_map::Span;\n use rustc_span::{BytePos, Pos};\n+use std::borrow::Cow;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -69,31 +70,41 @@ declare_clippy_lint! {\n     \"using a return statement like `return expr;` where an expression would suffice\"\n }\n \n-#[derive(PartialEq, Eq, Copy, Clone)]\n-enum RetReplacement {\n+#[derive(PartialEq, Eq, Clone)]\n+enum RetReplacement<'tcx> {\n     Empty,\n     Block,\n     Unit,\n+    IfSequence(Cow<'tcx, str>, Applicability),\n+    Expr(Cow<'tcx, str>, Applicability),\n }\n \n-impl RetReplacement {\n+impl<'tcx> RetReplacement<'tcx> {\n     fn sugg_help(self) -> &'static str {\n         match self {\n-            Self::Empty => \"remove `return`\",\n+            Self::Empty | Self::Expr(..) => \"remove `return`\",\n             Self::Block => \"replace `return` with an empty block\",\n             Self::Unit => \"replace `return` with a unit value\",\n+            Self::IfSequence(..) => \"remove `return` and wrap the sequence with parentheses\",\n+        }\n+    }\n+    fn applicability(&self) -> Option<Applicability> {\n+        match self {\n+            Self::Expr(_, ap) | Self::IfSequence(_, ap) => Some(*ap),\n+            _ => None,\n         }\n     }\n }\n \n-impl ToString for RetReplacement {\n+impl<'tcx> ToString for RetReplacement<'tcx> {\n     fn to_string(&self) -> String {\n-        match *self {\n-            Self::Empty => \"\",\n-            Self::Block => \"{}\",\n-            Self::Unit => \"()\",\n+        match self {\n+            Self::Empty => String::new(),\n+            Self::Block => \"{}\".to_string(),\n+            Self::Unit => \"()\".to_string(),\n+            Self::IfSequence(inner, _) => format!(\"({inner})\"),\n+            Self::Expr(inner, _) => inner.to_string(),\n         }\n-        .to_string()\n     }\n }\n \n@@ -204,34 +215,47 @@ fn check_final_expr<'tcx>(\n     expr: &'tcx Expr<'tcx>,\n     semi_spans: Vec<Span>, /* containing all the places where we would need to remove semicolons if finding an\n                             * needless return */\n-    replacement: RetReplacement,\n+    replacement: RetReplacement<'tcx>,\n ) {\n     let peeled_drop_expr = expr.peel_drop_temps();\n     match &peeled_drop_expr.kind {\n         // simple return is always \"bad\"\n         ExprKind::Ret(ref inner) => {\n-            // if desugar of `do yeet`, don't lint\n-            if let Some(inner_expr) = inner\n-                && let ExprKind::Call(path_expr, _) = inner_expr.kind\n-                && let ExprKind::Path(QPath::LangItem(LangItem::TryTraitFromYeet, _, _)) = path_expr.kind\n-            {\n-                return;\n-            }\n+            // check if expr return nothing\n+            let ret_span = if inner.is_none() && replacement == RetReplacement::Empty {\n+                extend_span_to_previous_non_ws(cx, peeled_drop_expr.span)\n+            } else {\n+                peeled_drop_expr.span\n+            };\n+\n+            let replacement = if let Some(inner_expr) = inner {\n+                // if desugar of `do yeet`, don't lint\n+                if let ExprKind::Call(path_expr, _) = inner_expr.kind\n+                    && let ExprKind::Path(QPath::LangItem(LangItem::TryTraitFromYeet, _, _)) = path_expr.kind\n+                {\n+                    return;\n+                }\n+\n+                let mut applicability = Applicability::MachineApplicable;\n+                let (snippet, _) = snippet_with_context(cx, inner_expr.span, ret_span.ctxt(), \"..\", &mut applicability);\n+                if expr_contains_conjunctive_ifs(inner_expr) {\n+                    RetReplacement::IfSequence(snippet, applicability)\n+                } else {\n+                    RetReplacement::Expr(snippet, applicability)\n+                }\n+            } else {\n+                replacement\n+            };\n+\n             if !cx.tcx.hir().attrs(expr.hir_id).is_empty() {\n                 return;\n             }\n             let borrows = inner.map_or(false, |inner| last_statement_borrows(cx, inner));\n             if borrows {\n                 return;\n             }\n-            // check if expr return nothing\n-            let ret_span = if inner.is_none() && replacement == RetReplacement::Empty {\n-                extend_span_to_previous_non_ws(cx, peeled_drop_expr.span)\n-            } else {\n-                peeled_drop_expr.span\n-            };\n \n-            emit_return_lint(cx, ret_span, semi_spans, inner.as_ref().map(|i| i.span), replacement);\n+            emit_return_lint(cx, ret_span, semi_spans, replacement);\n         },\n         ExprKind::If(_, then, else_clause_opt) => {\n             check_block_return(cx, &then.kind, peeled_drop_expr.span, semi_spans.clone());\n@@ -253,29 +277,25 @@ fn check_final_expr<'tcx>(\n     }\n }\n \n-fn emit_return_lint(\n-    cx: &LateContext<'_>,\n-    ret_span: Span,\n-    semi_spans: Vec<Span>,\n-    inner_span: Option<Span>,\n-    replacement: RetReplacement,\n-) {\n+fn expr_contains_conjunctive_ifs<'tcx>(expr: &'tcx Expr<'tcx>) -> bool {\n+    fn contains_if(expr: &Expr<'_>, on_if: bool) -> bool {\n+        match expr.kind {\n+            ExprKind::If(..) => on_if,\n+            ExprKind::Binary(_, left, right) => contains_if(left, true) || contains_if(right, true),\n+            _ => false,\n+        }\n+    }\n+\n+    contains_if(expr, false)\n+}\n+\n+fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, semi_spans: Vec<Span>, replacement: RetReplacement<'_>) {\n     if ret_span.from_expansion() {\n         return;\n     }\n-    let mut applicability = Applicability::MachineApplicable;\n-    let return_replacement = inner_span.map_or_else(\n-        || replacement.to_string(),\n-        |inner_span| {\n-            let (snippet, _) = snippet_with_context(cx, inner_span, ret_span.ctxt(), \"..\", &mut applicability);\n-            snippet.to_string()\n-        },\n-    );\n-    let sugg_help = if inner_span.is_some() {\n-        \"remove `return`\"\n-    } else {\n-        replacement.sugg_help()\n-    };\n+    let applicability = replacement.applicability().unwrap_or(Applicability::MachineApplicable);\n+    let return_replacement = replacement.to_string();\n+    let sugg_help = replacement.sugg_help();\n     span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |diag| {\n         diag.span_suggestion_hidden(ret_span, sugg_help, return_replacement, applicability);\n         // for each parent statement, we need to remove the semicolon"}, {"sha": "e2d90edec5a4c31d1f280717158c531c1b3495e0", "filename": "clippy_lints/src/significant_drop_tightening.rs", "status": "added", "additions": 399, "deletions": 0, "changes": 399, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,399 @@\n+use crate::FxHashSet;\n+use clippy_utils::{\n+    diagnostics::span_lint_and_then,\n+    get_attr,\n+    source::{indent_of, snippet},\n+};\n+use rustc_errors::{Applicability, Diagnostic};\n+use rustc_hir::{\n+    self as hir,\n+    intravisit::{walk_expr, Visitor},\n+};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::ty::{subst::GenericArgKind, Ty, TypeAndMut};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{symbol::Ident, Span, DUMMY_SP};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Searches for elements marked with `#[clippy::significant_drop]` that could be early\n+    /// dropped but are in fact dropped at the end of their scopes. In other words, enforces the\n+    /// \"tightening\" of their possible lifetimes.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Elements marked with `#[clippy::has_significant_drop]` are generally synchronizing\n+    /// primitives that manage shared resources, as such, it is desired to release them as soon as\n+    /// possible to avoid unnecessary resource contention.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore\n+    /// fn main() {\n+    ///   let lock = some_sync_resource.lock();\n+    ///   let owned_rslt = lock.do_stuff_with_resource();\n+    ///   // Only `owned_rslt` is needed but `lock` is still held.\n+    ///   do_heavy_computation_that_takes_time(owned_rslt);\n+    /// }\n+    /// ```\n+    ///\n+    /// Use instead:\n+    ///\n+    /// ```rust,ignore\n+    /// fn main() {\n+    ///     let owned_rslt = some_sync_resource.lock().do_stuff_with_resource();\n+    ///     do_heavy_computation_that_takes_time(owned_rslt);\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.67.0\"]\n+    pub SIGNIFICANT_DROP_TIGHTENING,\n+    nursery,\n+    \"Searches for elements marked with `#[clippy::has_significant_drop]` that could be early dropped but are in fact dropped at the end of their scopes\"\n+}\n+\n+impl_lint_pass!(SignificantDropTightening<'_> => [SIGNIFICANT_DROP_TIGHTENING]);\n+\n+#[derive(Default)]\n+pub struct SignificantDropTightening<'tcx> {\n+    /// Auxiliary structure used to avoid having to verify the same type multiple times.\n+    seen_types: FxHashSet<Ty<'tcx>>,\n+}\n+\n+impl<'tcx> SignificantDropTightening<'tcx> {\n+    /// Unifies the statements of a block with its return expression.\n+    fn all_block_stmts<'ret, 'rslt, 'stmts>(\n+        block_stmts: &'stmts [hir::Stmt<'tcx>],\n+        dummy_ret_stmt: Option<&'ret hir::Stmt<'tcx>>,\n+    ) -> impl Iterator<Item = &'rslt hir::Stmt<'tcx>>\n+    where\n+        'ret: 'rslt,\n+        'stmts: 'rslt,\n+    {\n+        block_stmts.iter().chain(dummy_ret_stmt)\n+    }\n+\n+    /// Searches for at least one statement that could slow down the release of a significant drop.\n+    fn at_least_one_stmt_is_expensive<'stmt>(stmts: impl Iterator<Item = &'stmt hir::Stmt<'tcx>>) -> bool\n+    where\n+        'tcx: 'stmt,\n+    {\n+        for stmt in stmts {\n+            match stmt.kind {\n+                hir::StmtKind::Expr(expr) if let hir::ExprKind::Path(_) = expr.kind => {}\n+                hir::StmtKind::Local(local) if let Some(expr) = local.init\n+                    && let hir::ExprKind::Path(_) = expr.kind => {},\n+                _ => return true\n+            };\n+        }\n+        false\n+    }\n+\n+    /// Verifies if the expression is of type `drop(some_lock_path)` to assert that the temporary\n+    /// is already being dropped before the end of its scope.\n+    fn has_drop(expr: &'tcx hir::Expr<'_>, init_bind_ident: Ident) -> bool {\n+        if let hir::ExprKind::Call(fun, args) = expr.kind\n+            && let hir::ExprKind::Path(hir::QPath::Resolved(_, fun_path)) = &fun.kind\n+            && let [fun_ident, ..] = fun_path.segments\n+            && fun_ident.ident.name == rustc_span::sym::drop\n+            && let [first_arg, ..] = args\n+            && let hir::ExprKind::Path(hir::QPath::Resolved(_, arg_path)) = &first_arg.kind\n+            && let [first_arg_ps, .. ] = arg_path.segments\n+        {\n+            first_arg_ps.ident == init_bind_ident\n+        }\n+        else {\n+            false\n+        }\n+    }\n+\n+    /// Tries to find types marked with `#[has_significant_drop]` of an expression `expr` that is\n+    /// originated from `stmt` and then performs common logic on `sdap`.\n+    fn modify_sdap_if_sig_drop_exists(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        expr: &'tcx hir::Expr<'_>,\n+        idx: usize,\n+        sdap: &mut SigDropAuxParams,\n+        stmt: &hir::Stmt<'_>,\n+        cb: impl Fn(&mut SigDropAuxParams),\n+    ) {\n+        let mut sig_drop_finder = SigDropFinder::new(cx, &mut self.seen_types);\n+        sig_drop_finder.visit_expr(expr);\n+        if sig_drop_finder.has_sig_drop {\n+            cb(sdap);\n+            if sdap.number_of_stmts > 0 {\n+                sdap.last_use_stmt_idx = idx;\n+                sdap.last_use_stmt_span = stmt.span;\n+                if let hir::ExprKind::MethodCall(_, _, _, span) = expr.kind {\n+                    sdap.last_use_method_span = span;\n+                }\n+            }\n+            sdap.number_of_stmts = sdap.number_of_stmts.wrapping_add(1);\n+        }\n+    }\n+\n+    /// Shows generic overall messages as well as specialized messages depending on the usage.\n+    fn set_suggestions(cx: &LateContext<'tcx>, block_span: Span, diag: &mut Diagnostic, sdap: &SigDropAuxParams) {\n+        match sdap.number_of_stmts {\n+            0 | 1 => {},\n+            2 => {\n+                let indent = \" \".repeat(indent_of(cx, sdap.last_use_stmt_span).unwrap_or(0));\n+                let init_method = snippet(cx, sdap.init_method_span, \"..\");\n+                let usage_method = snippet(cx, sdap.last_use_method_span, \"..\");\n+                let stmt = if let Some(last_use_bind_span) = sdap.last_use_bind_span {\n+                    format!(\n+                        \"\\n{indent}let {} = {init_method}.{usage_method};\",\n+                        snippet(cx, last_use_bind_span, \"..\"),\n+                    )\n+                } else {\n+                    format!(\"\\n{indent}{init_method}.{usage_method};\")\n+                };\n+                diag.span_suggestion_verbose(\n+                    sdap.init_stmt_span,\n+                    \"merge the temporary construction with its single usage\",\n+                    stmt,\n+                    Applicability::MaybeIncorrect,\n+                );\n+                diag.span_suggestion(\n+                    sdap.last_use_stmt_span,\n+                    \"remove separated single usage\",\n+                    \"\",\n+                    Applicability::MaybeIncorrect,\n+                );\n+            },\n+            _ => {\n+                diag.span_suggestion(\n+                    sdap.last_use_stmt_span.shrink_to_hi(),\n+                    \"drop the temporary after the end of its last usage\",\n+                    format!(\n+                        \"\\n{}drop({});\",\n+                        \" \".repeat(indent_of(cx, sdap.last_use_stmt_span).unwrap_or(0)),\n+                        sdap.init_bind_ident\n+                    ),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            },\n+        }\n+        diag.note(\"this might lead to unnecessary resource contention\");\n+        diag.span_label(\n+            block_span,\n+            format!(\n+                \"temporary `{}` is currently being dropped at the end of its contained scope\",\n+                sdap.init_bind_ident\n+            ),\n+        );\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for SignificantDropTightening<'tcx> {\n+    fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx hir::Block<'_>) {\n+        let dummy_ret_stmt = block.expr.map(|expr| hir::Stmt {\n+            hir_id: hir::HirId::INVALID,\n+            kind: hir::StmtKind::Expr(expr),\n+            span: DUMMY_SP,\n+        });\n+        let mut sdap = SigDropAuxParams::default();\n+        for (idx, stmt) in Self::all_block_stmts(block.stmts, dummy_ret_stmt.as_ref()).enumerate() {\n+            match stmt.kind {\n+                hir::StmtKind::Expr(expr) => self.modify_sdap_if_sig_drop_exists(\n+                    cx,\n+                    expr,\n+                    idx,\n+                    &mut sdap,\n+                    stmt,\n+                    |_| {}\n+                ),\n+                hir::StmtKind::Local(local) if let Some(expr) = local.init => self.modify_sdap_if_sig_drop_exists(\n+                    cx,\n+                    expr,\n+                    idx,\n+                    &mut sdap,\n+                    stmt,\n+                    |local_sdap| {\n+                        if local_sdap.number_of_stmts == 0 {\n+                            if let hir::PatKind::Binding(_, _, ident, _) = local.pat.kind {\n+                                local_sdap.init_bind_ident = ident;\n+                            }\n+                            if let hir::ExprKind::MethodCall(_, local_expr, _, span) = expr.kind {\n+                                local_sdap.init_method_span = local_expr.span.to(span);\n+                            }\n+                            local_sdap.init_stmt_span = stmt.span;\n+                        }\n+                        else if let hir::PatKind::Binding(_, _, ident, _) = local.pat.kind {\n+                            local_sdap.last_use_bind_span = Some(ident.span);\n+                        }\n+                    }\n+                ),\n+                hir::StmtKind::Semi(expr) => {\n+                    if Self::has_drop(expr, sdap.init_bind_ident) {\n+                        return;\n+                    }\n+                    self.modify_sdap_if_sig_drop_exists(cx, expr, idx, &mut sdap, stmt, |_| {});\n+                },\n+                _ => {}\n+            };\n+        }\n+\n+        let idx = sdap.last_use_stmt_idx.wrapping_add(1);\n+        let stmts_after_last_use = Self::all_block_stmts(block.stmts, dummy_ret_stmt.as_ref()).skip(idx);\n+        if sdap.number_of_stmts > 1 && Self::at_least_one_stmt_is_expensive(stmts_after_last_use) {\n+            span_lint_and_then(\n+                cx,\n+                SIGNIFICANT_DROP_TIGHTENING,\n+                sdap.init_bind_ident.span,\n+                \"temporary with significant `Drop` can be early dropped\",\n+                |diag| {\n+                    Self::set_suggestions(cx, block.span, diag, &sdap);\n+                },\n+            );\n+        }\n+    }\n+}\n+\n+/// Auxiliary parameters used on each block check.\n+struct SigDropAuxParams {\n+    /// The binding or variable that references the initial construction of the type marked with\n+    /// `#[has_significant_drop]`.\n+    init_bind_ident: Ident,\n+    /// Similar to `init_bind_ident` but encompasses the right-hand method call.\n+    init_method_span: Span,\n+    /// Similar to `init_bind_ident` but encompasses the whole contained statement.\n+    init_stmt_span: Span,\n+\n+    /// The last visited binding or variable span within a block that had any referenced inner type\n+    /// marked with `#[has_significant_drop]`.\n+    last_use_bind_span: Option<Span>,\n+    /// Index of the last visited statement within a block that had any referenced inner type\n+    /// marked with `#[has_significant_drop]`.\n+    last_use_stmt_idx: usize,\n+    /// Similar to `last_use_bind_span` but encompasses the whole contained statement.\n+    last_use_stmt_span: Span,\n+    /// Similar to `last_use_bind_span` but encompasses the right-hand method call.\n+    last_use_method_span: Span,\n+\n+    /// Total number of statements within a block that have any referenced inner type marked with\n+    /// `#[has_significant_drop]`.\n+    number_of_stmts: usize,\n+}\n+\n+impl Default for SigDropAuxParams {\n+    fn default() -> Self {\n+        Self {\n+            init_bind_ident: Ident::empty(),\n+            init_method_span: DUMMY_SP,\n+            init_stmt_span: DUMMY_SP,\n+            last_use_bind_span: None,\n+            last_use_method_span: DUMMY_SP,\n+            last_use_stmt_idx: 0,\n+            last_use_stmt_span: DUMMY_SP,\n+            number_of_stmts: 0,\n+        }\n+    }\n+}\n+\n+/// Checks the existence of the `#[has_significant_drop]` attribute\n+struct SigDropChecker<'cx, 'sdt, 'tcx> {\n+    cx: &'cx LateContext<'tcx>,\n+    seen_types: &'sdt mut FxHashSet<Ty<'tcx>>,\n+}\n+\n+impl<'cx, 'sdt, 'tcx> SigDropChecker<'cx, 'sdt, 'tcx> {\n+    pub(crate) fn new(cx: &'cx LateContext<'tcx>, seen_types: &'sdt mut FxHashSet<Ty<'tcx>>) -> Self {\n+        seen_types.clear();\n+        Self { cx, seen_types }\n+    }\n+\n+    pub(crate) fn has_sig_drop_attr(&mut self, ty: Ty<'tcx>) -> bool {\n+        if let Some(adt) = ty.ty_adt_def() {\n+            let mut iter = get_attr(\n+                self.cx.sess(),\n+                self.cx.tcx.get_attrs_unchecked(adt.did()),\n+                \"has_significant_drop\",\n+            );\n+            if iter.next().is_some() {\n+                return true;\n+            }\n+        }\n+        match ty.kind() {\n+            rustc_middle::ty::Adt(a, b) => {\n+                for f in a.all_fields() {\n+                    let ty = f.ty(self.cx.tcx, b);\n+                    if !self.has_seen_ty(ty) && self.has_sig_drop_attr(ty) {\n+                        return true;\n+                    }\n+                }\n+                for generic_arg in b.iter() {\n+                    if let GenericArgKind::Type(ty) = generic_arg.unpack() {\n+                        if self.has_sig_drop_attr(ty) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+                false\n+            },\n+            rustc_middle::ty::Array(ty, _)\n+            | rustc_middle::ty::RawPtr(TypeAndMut { ty, .. })\n+            | rustc_middle::ty::Ref(_, ty, _)\n+            | rustc_middle::ty::Slice(ty) => self.has_sig_drop_attr(*ty),\n+            _ => false,\n+        }\n+    }\n+\n+    fn has_seen_ty(&mut self, ty: Ty<'tcx>) -> bool {\n+        !self.seen_types.insert(ty)\n+    }\n+}\n+\n+/// Performs recursive calls to find any inner type marked with `#[has_significant_drop]`.\n+struct SigDropFinder<'cx, 'sdt, 'tcx> {\n+    cx: &'cx LateContext<'tcx>,\n+    has_sig_drop: bool,\n+    sig_drop_checker: SigDropChecker<'cx, 'sdt, 'tcx>,\n+}\n+\n+impl<'cx, 'sdt, 'tcx> SigDropFinder<'cx, 'sdt, 'tcx> {\n+    fn new(cx: &'cx LateContext<'tcx>, seen_types: &'sdt mut FxHashSet<Ty<'tcx>>) -> Self {\n+        Self {\n+            cx,\n+            has_sig_drop: false,\n+            sig_drop_checker: SigDropChecker::new(cx, seen_types),\n+        }\n+    }\n+}\n+\n+impl<'cx, 'sdt, 'tcx> Visitor<'tcx> for SigDropFinder<'cx, 'sdt, 'tcx> {\n+    fn visit_expr(&mut self, ex: &'tcx hir::Expr<'_>) {\n+        if self\n+            .sig_drop_checker\n+            .has_sig_drop_attr(self.cx.typeck_results().expr_ty(ex))\n+        {\n+            self.has_sig_drop = true;\n+            return;\n+        }\n+\n+        match ex.kind {\n+            hir::ExprKind::MethodCall(_, expr, ..) => {\n+                self.visit_expr(expr);\n+            },\n+            hir::ExprKind::Array(..)\n+            | hir::ExprKind::Assign(..)\n+            | hir::ExprKind::AssignOp(..)\n+            | hir::ExprKind::Binary(..)\n+            | hir::ExprKind::Box(..)\n+            | hir::ExprKind::Call(..)\n+            | hir::ExprKind::Field(..)\n+            | hir::ExprKind::If(..)\n+            | hir::ExprKind::Index(..)\n+            | hir::ExprKind::Match(..)\n+            | hir::ExprKind::Repeat(..)\n+            | hir::ExprKind::Ret(..)\n+            | hir::ExprKind::Tup(..)\n+            | hir::ExprKind::Unary(..)\n+            | hir::ExprKind::Yield(..) => {\n+                walk_expr(self, ex);\n+            },\n+            _ => {},\n+        }\n+    }\n+}"}, {"sha": "0f062cecf886c281c7ceecc85fbe1234a855e22f", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 64, "deletions": 43, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -10,7 +10,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n-use rustc_span::{sym, Span};\n+use rustc_span::{sym, symbol::Ident, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -174,53 +174,74 @@ fn check_manual_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n \n /// Implementation of the `ALMOST_SWAPPED` lint.\n fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n-    for w in block.stmts.windows(2) {\n-        if_chain! {\n-            if let StmtKind::Semi(first) = w[0].kind;\n-            if let StmtKind::Semi(second) = w[1].kind;\n-            if first.span.ctxt() == second.span.ctxt();\n-            if let ExprKind::Assign(lhs0, rhs0, _) = first.kind;\n-            if let ExprKind::Assign(lhs1, rhs1, _) = second.kind;\n-            if eq_expr_value(cx, lhs0, rhs1);\n-            if eq_expr_value(cx, lhs1, rhs0);\n-            then {\n-                let lhs0 = Sugg::hir_opt(cx, lhs0);\n-                let rhs0 = Sugg::hir_opt(cx, rhs0);\n-                let (what, lhs, rhs) = if let (Some(first), Some(second)) = (lhs0, rhs0) {\n-                    (\n-                        format!(\" `{first}` and `{second}`\"),\n-                        first.mut_addr().to_string(),\n-                        second.mut_addr().to_string(),\n-                    )\n-                } else {\n-                    (String::new(), String::new(), String::new())\n-                };\n+    for [first, second] in block.stmts.array_windows() {\n+        if let Some((lhs0, rhs0)) = parse(first)\n+            && let Some((lhs1, rhs1)) = parse(second)\n+            && first.span.eq_ctxt(second.span)\n+            && is_same(cx, lhs0, rhs1)\n+            && is_same(cx, lhs1, rhs0)\n+            && let Some(lhs_sugg) = match &lhs0 {\n+                ExprOrIdent::Expr(expr) => Sugg::hir_opt(cx, expr),\n+                ExprOrIdent::Ident(ident) => Some(Sugg::NonParen(ident.as_str().into())),\n+            }\n+            && let Some(rhs_sugg) = Sugg::hir_opt(cx, rhs0)\n+        {\n+            let span = first.span.to(rhs1.span);\n+            let Some(sugg) = std_or_core(cx) else { return };\n+            span_lint_and_then(\n+                cx,\n+                ALMOST_SWAPPED,\n+                span,\n+                &format!(\"this looks like you are trying to swap `{lhs_sugg}` and `{rhs_sugg}`\"),\n+                |diag| {\n+                    diag.span_suggestion(\n+                        span,\n+                        \"try\",\n+                        format!(\"{sugg}::mem::swap({}, {})\", lhs_sugg.mut_addr(), rhs_sugg.mut_addr()),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    diag.note(format!(\"or maybe you should use `{sugg}::mem::replace`?\"));\n+                },\n+            );\n+        }\n+    }\n+}\n+\n+fn is_same(cx: &LateContext<'_>, lhs: ExprOrIdent<'_>, rhs: &Expr<'_>) -> bool {\n+    match lhs {\n+        ExprOrIdent::Expr(expr) => eq_expr_value(cx, expr, rhs),\n+        ExprOrIdent::Ident(ident) => {\n+            if let ExprKind::Path(QPath::Resolved(None, path)) = rhs.kind\n+                && let [segment] = &path.segments\n+                && segment.ident == ident\n+            {\n+                true\n+            } else {\n+                false\n+            }\n+        }\n+    }\n+}\n \n-                let span = first.span.to(second.span);\n-                let Some(sugg) = std_or_core(cx) else { return };\n+#[derive(Debug, Clone, Copy)]\n+enum ExprOrIdent<'a> {\n+    Expr(&'a Expr<'a>),\n+    Ident(Ident),\n+}\n \n-                span_lint_and_then(cx,\n-                    ALMOST_SWAPPED,\n-                    span,\n-                    &format!(\"this looks like you are trying to swap{what}\"),\n-                    |diag| {\n-                        if !what.is_empty() {\n-                            diag.span_suggestion(\n-                                span,\n-                                \"try\",\n-                                format!(\n-                                    \"{sugg}::mem::swap({lhs}, {rhs})\",\n-                                ),\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                            diag.note(\n-                                format!(\"or maybe you should use `{sugg}::mem::replace`?\")\n-                            );\n-                        }\n-                    });\n+fn parse<'a, 'hir>(stmt: &'a Stmt<'hir>) -> Option<(ExprOrIdent<'hir>, &'a Expr<'hir>)> {\n+    if let StmtKind::Semi(expr) = stmt.kind {\n+        if let ExprKind::Assign(lhs, rhs, _) = expr.kind {\n+            return Some((ExprOrIdent::Expr(lhs), rhs));\n+        }\n+    } else if let StmtKind::Local(expr) = stmt.kind {\n+        if let Some(rhs) = expr.init {\n+            if let PatKind::Binding(_, _, ident_l, _) = expr.pat.kind {\n+                return Some((ExprOrIdent::Ident(ident_l), rhs));\n             }\n         }\n     }\n+    None\n }\n \n /// Implementation of the xor case for `MANUAL_SWAP` lint."}, {"sha": "c01cbe5090f79dc88a546f53b779d9ef5028e457", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -3,6 +3,7 @@ mod transmute_float_to_int;\n mod transmute_int_to_bool;\n mod transmute_int_to_char;\n mod transmute_int_to_float;\n+mod transmute_int_to_non_zero;\n mod transmute_null_to_fn;\n mod transmute_num_to_bytes;\n mod transmute_ptr_to_ptr;\n@@ -253,6 +254,31 @@ declare_clippy_lint! {\n     \"transmutes from an integer to a float\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for transmutes from integers to `NonZero*` types, and suggests their `new_unchecked`\n+    /// method instead.\n+    ///\n+    /// ### Why is this bad?\n+    /// Transmutes work on any types and thus might cause unsoundness when those types change\n+    /// elsewhere. `new_unchecked` only works for the appropriate types instead.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # use core::num::NonZeroU32;\n+    /// let _non_zero: NonZeroU32 = unsafe { std::mem::transmute(123) };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # use core::num::NonZeroU32;\n+    /// let _non_zero = unsafe { NonZeroU32::new_unchecked(123) };\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub TRANSMUTE_INT_TO_NON_ZERO,\n+    complexity,\n+    \"transmutes from an integer to a non-zero wrapper\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for transmutes from a float to an integer.\n@@ -451,6 +477,7 @@ impl_lint_pass!(Transmute => [\n     TRANSMUTE_BYTES_TO_STR,\n     TRANSMUTE_INT_TO_BOOL,\n     TRANSMUTE_INT_TO_FLOAT,\n+    TRANSMUTE_INT_TO_NON_ZERO,\n     TRANSMUTE_FLOAT_TO_INT,\n     TRANSMUTE_NUM_TO_BYTES,\n     UNSOUND_COLLECTION_TRANSMUTE,\n@@ -501,6 +528,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                     | transmute_ptr_to_ptr::check(cx, e, from_ty, to_ty, arg)\n                     | transmute_int_to_bool::check(cx, e, from_ty, to_ty, arg)\n                     | transmute_int_to_float::check(cx, e, from_ty, to_ty, arg, const_context)\n+                    | transmute_int_to_non_zero::check(cx, e, from_ty, to_ty, arg)\n                     | transmute_float_to_int::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_num_to_bytes::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | ("}, {"sha": "5503653253c55f9bc5788cd4d54642872530e357", "filename": "clippy_lints/src/transmute/transmute_int_to_non_zero.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_non_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_non_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_non_zero.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,61 @@\n+use super::TRANSMUTE_INT_TO_NON_ZERO;\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sugg;\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_middle::{\n+    query::Key,\n+    ty::{self, Ty},\n+};\n+use rustc_span::symbol::sym;\n+\n+/// Checks for `transmute_int_to_non_zero` lint.\n+/// Returns `true` if it's triggered, otherwise returns `false`.\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    from_ty: Ty<'tcx>,\n+    to_ty: Ty<'tcx>,\n+    arg: &'tcx Expr<'_>,\n+) -> bool {\n+    let (ty::Int(_) | ty::Uint(_), Some(to_ty_id)) = (&from_ty.kind(), to_ty.ty_adt_id()) else {\n+        return false;\n+    };\n+    let Some(to_type_sym) = cx.tcx.get_diagnostic_name(to_ty_id) else {\n+        return false;\n+    };\n+\n+    if !matches!(\n+        to_type_sym,\n+        sym::NonZeroU8\n+            | sym::NonZeroU16\n+            | sym::NonZeroU32\n+            | sym::NonZeroU64\n+            | sym::NonZeroU128\n+            | sym::NonZeroI8\n+            | sym::NonZeroI16\n+            | sym::NonZeroI32\n+            | sym::NonZeroI64\n+            | sym::NonZeroI128\n+    ) {\n+        return false;\n+    }\n+\n+    span_lint_and_then(\n+        cx,\n+        TRANSMUTE_INT_TO_NON_ZERO,\n+        e.span,\n+        &format!(\"transmute from a `{from_ty}` to a `{to_type_sym}`\"),\n+        |diag| {\n+            let arg = sugg::Sugg::hir(cx, arg, \"..\");\n+            diag.span_suggestion(\n+                e.span,\n+                \"consider using\",\n+                format!(\"{to_type_sym}::{}({arg})\", sym::new_unchecked),\n+                Applicability::Unspecified,\n+            );\n+        },\n+    );\n+    true\n+}"}, {"sha": "a57bf7ee82255f43782b0dd1e4f401bab86a73c4", "filename": "clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -400,7 +400,7 @@ fn drain_matching(\n \n     // If `ThinVec` had the `drain_filter` method, this loop could be rewritten\n     // like so:\n-    // \n+    //\n     //   for pat in alternatives.drain_filter(|p| {\n     //       // Check if we should extract, but only if `idx >= start`.\n     //       idx += 1;\n@@ -412,12 +412,12 @@ fn drain_matching(\n     while i < alternatives.len() {\n         idx += 1;\n         // Check if we should extract, but only if `idx >= start`.\n-\tif idx > start && predicate(&alternatives[i].kind) {\n-\t    let pat = alternatives.remove(i);\n+        if idx > start && predicate(&alternatives[i].kind) {\n+            let pat = alternatives.remove(i);\n             tail_or.push(extract(pat.into_inner().kind));\n-\t} else {\n-\t    i += 1;\n-\t}\n+        } else {\n+            i += 1;\n+        }\n     }\n \n     tail_or"}, {"sha": "5f74de5a2886713de93e9c4e220ab6d81f1f003a", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -419,19 +419,19 @@ define_Conf! {\n     (max_include_file_size: u64 = 1_000_000),\n     /// Lint: EXPECT_USED.\n     ///\n-    /// Whether `expect` should be allowed within `#[cfg(test)]`\n+    /// Whether `expect` should be allowed in test functions or `#[cfg(test)]`\n     (allow_expect_in_tests: bool = false),\n     /// Lint: UNWRAP_USED.\n     ///\n-    /// Whether `unwrap` should be allowed in test cfg\n+    /// Whether `unwrap` should be allowed in test functions or `#[cfg(test)]`\n     (allow_unwrap_in_tests: bool = false),\n     /// Lint: DBG_MACRO.\n     ///\n-    /// Whether `dbg!` should be allowed in test functions\n+    /// Whether `dbg!` should be allowed in test functions or `#[cfg(test)]`\n     (allow_dbg_in_tests: bool = false),\n     /// Lint: PRINT_STDOUT, PRINT_STDERR.\n     ///\n-    /// Whether print macros (ex. `println!`) should be allowed in test functions\n+    /// Whether print macros (ex. `println!`) should be allowed in test functions or `#[cfg(test)]`\n     (allow_print_in_tests: bool = false),\n     /// Lint: RESULT_LARGE_ERR.\n     ///\n@@ -454,6 +454,11 @@ define_Conf! {\n     /// configuration will cause restriction lints to trigger even\n     /// if no suggestion can be made.\n     (suppress_restriction_lint_in_const: bool = false),\n+    /// Lint: MISSING_DOCS_IN_PRIVATE_ITEMS.\n+    ///\n+    /// Whether to **only** check for missing documentation in items visible within the current\n+    /// crate. For example, `pub(crate)` items.\n+    (missing_docs_in_crate_items: bool = false),\n }\n \n /// Search for the configuration file."}, {"sha": "b59ef4086cd8b77c45986a34e420dea505d126d9", "filename": "clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{def_path_def_ids, is_lint_allowed, match_any_def_paths, peel_hir_expr_refs};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -44,7 +44,7 @@ impl_lint_pass!(UnnecessaryDefPath => [UNNECESSARY_DEF_PATH]);\n \n #[derive(Default)]\n pub struct UnnecessaryDefPath {\n-    array_def_ids: FxHashSet<(DefId, Span)>,\n+    array_def_ids: FxIndexSet<(DefId, Span)>,\n     linted_def_ids: FxHashSet<DefId>,\n }\n "}, {"sha": "be6133d320241bb05444c843eee8194320a96163", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -391,11 +391,18 @@ impl FormatString {\n         };\n \n         let mut unescaped = String::with_capacity(inner.len());\n+        // Sometimes the original string comes from a macro which accepts a malformed string, such as in a\n+        // #[display(\"\"somestring)] attribute (accepted by the `displaythis` crate). Reconstructing the\n+        // string from the span will not be possible, so we will just return None here.\n+        let mut unparsable = false;\n         unescape_literal(inner, mode, &mut |_, ch| match ch {\n             Ok(ch) => unescaped.push(ch),\n             Err(e) if !e.is_fatal() => (),\n-            Err(e) => panic!(\"{e:?}\"),\n+            Err(_) => unparsable = true,\n         });\n+        if unparsable {\n+            return None;\n+        }\n \n         let mut parts = Vec::new();\n         let _: Option<!> = for_each_expr(pieces, |expr| {"}, {"sha": "c225398ad2a8fdfed1a54fec623970ef62f0e8ec", "filename": "clippy_utils/src/numeric_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fnumeric_literal.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -186,7 +186,7 @@ impl<'a> NumericLiteral<'a> {\n         // The exponent may have a sign, output it early, otherwise it will be\n         // treated as a digit\n         if digits.clone().next() == Some('-') {\n-            let _ = digits.next();\n+            let _: Option<char> = digits.next();\n             output.push('-');\n         }\n "}, {"sha": "4aae0f7284e4d96f7110d5ac9bab954cd2924730", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -115,6 +115,7 @@ pub const STD_FS_CREATE_DIR: [&str; 3] = [\"std\", \"fs\", \"create_dir\"];\n pub const STD_IO_SEEK: [&str; 3] = [\"std\", \"io\", \"Seek\"];\n pub const STD_IO_SEEK_FROM_CURRENT: [&str; 4] = [\"std\", \"io\", \"SeekFrom\", \"Current\"];\n pub const STD_IO_SEEKFROM_START: [&str; 4] = [\"std\", \"io\", \"SeekFrom\", \"Start\"];\n+pub const STD_PROCESS_COMMAND: [&str; 3] = [\"std\", \"process\", \"Command\"];\n pub const STRING_AS_MUT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_mut_str\"];\n pub const STRING_AS_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_str\"];\n pub const STRING_NEW: [&str; 4] = [\"alloc\", \"string\", \"String\", \"new\"];"}, {"sha": "51e270d330c88d78eb102856950e7257a1a9777c", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::mir::{FakeReadCause, Mutability};\n use rustc_middle::ty;\n use rustc_span::source_map::{BytePos, CharPos, Pos, Span, SyntaxContext};\n use std::borrow::Cow;\n-use std::fmt::{Display, Write as _};\n+use std::fmt::{self, Display, Write as _};\n use std::ops::{Add, Neg, Not, Sub};\n \n /// A helper type to build suggestion correctly handling parentheses.\n@@ -932,7 +932,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n             if cmt.place.projections.is_empty() {\n                 // handle item without any projection, that needs an explicit borrowing\n                 // i.e.: suggest `&x` instead of `x`\n-                let _ = write!(self.suggestion_start, \"{start_snip}&{ident_str}\");\n+                let _: fmt::Result = write!(self.suggestion_start, \"{start_snip}&{ident_str}\");\n             } else {\n                 // cases where a parent `Call` or `MethodCall` is using the item\n                 // i.e.: suggest `.contains(&x)` for `.find(|x| [1, 2, 3].contains(x)).is_none()`\n@@ -947,7 +947,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                         // given expression is the self argument and will be handled completely by the compiler\n                         // i.e.: `|x| x.is_something()`\n                         ExprKind::MethodCall(_, self_expr, ..) if self_expr.hir_id == cmt.hir_id => {\n-                            let _ = write!(self.suggestion_start, \"{start_snip}{ident_str_with_proj}\");\n+                            let _: fmt::Result = write!(self.suggestion_start, \"{start_snip}{ident_str_with_proj}\");\n                             self.next_pos = span.hi();\n                             return;\n                         },\n@@ -1055,7 +1055,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                     }\n                 }\n \n-                let _ = write!(self.suggestion_start, \"{start_snip}{replacement_str}\");\n+                let _: fmt::Result = write!(self.suggestion_start, \"{start_snip}{replacement_str}\");\n             }\n             self.next_pos = span.hi();\n         }"}, {"sha": "25654e6957b9fff06e5d9e1beb1b5b22c31c9da0", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -17,8 +17,8 @@ use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n     self, AdtDef, AliasTy, AssocKind, Binder, BoundRegion, DefIdTree, FnSig, IntTy, List, ParamEnv, Predicate,\n-    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor, UintTy,\n-    VariantDef, VariantDiscr, TypeVisitableExt,\n+    PredicateKind, Region, RegionKind, SubstsRef, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitableExt,\n+    TypeVisitor, UintTy, VariantDef, VariantDiscr,\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n use rustc_span::symbol::Ident;\n@@ -894,16 +894,29 @@ impl AdtVariantInfo {\n }\n \n /// Gets the struct or enum variant from the given `Res`\n-pub fn variant_of_res<'tcx>(cx: &LateContext<'tcx>, res: Res) -> Option<&'tcx VariantDef> {\n+pub fn adt_and_variant_of_res<'tcx>(cx: &LateContext<'tcx>, res: Res) -> Option<(AdtDef<'tcx>, &'tcx VariantDef)> {\n     match res {\n-        Res::Def(DefKind::Struct, id) => Some(cx.tcx.adt_def(id).non_enum_variant()),\n-        Res::Def(DefKind::Variant, id) => Some(cx.tcx.adt_def(cx.tcx.parent(id)).variant_with_id(id)),\n-        Res::Def(DefKind::Ctor(CtorOf::Struct, _), id) => Some(cx.tcx.adt_def(cx.tcx.parent(id)).non_enum_variant()),\n+        Res::Def(DefKind::Struct, id) => {\n+            let adt = cx.tcx.adt_def(id);\n+            Some((adt, adt.non_enum_variant()))\n+        },\n+        Res::Def(DefKind::Variant, id) => {\n+            let adt = cx.tcx.adt_def(cx.tcx.parent(id));\n+            Some((adt, adt.variant_with_id(id)))\n+        },\n+        Res::Def(DefKind::Ctor(CtorOf::Struct, _), id) => {\n+            let adt = cx.tcx.adt_def(cx.tcx.parent(id));\n+            Some((adt, adt.non_enum_variant()))\n+        },\n         Res::Def(DefKind::Ctor(CtorOf::Variant, _), id) => {\n             let var_id = cx.tcx.parent(id);\n-            Some(cx.tcx.adt_def(cx.tcx.parent(var_id)).variant_with_id(var_id))\n+            let adt = cx.tcx.adt_def(cx.tcx.parent(var_id));\n+            Some((adt, adt.variant_with_id(var_id)))\n+        },\n+        Res::SelfCtor(id) => {\n+            let adt = cx.tcx.type_of(id).subst_identity().ty_adt_def().unwrap();\n+            Some((adt, adt.non_enum_variant()))\n         },\n-        Res::SelfCtor(id) => Some(cx.tcx.type_of(id).subst_identity().ty_adt_def().unwrap().non_enum_variant()),\n         _ => None,\n     }\n }"}, {"sha": "e0244ddcecb8058341e5e46f42d68d96d755acd0", "filename": "lintcheck/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/lintcheck%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/lintcheck%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fconfig.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -35,7 +35,7 @@ fn get_clap_config() -> ArgMatches {\n                 .long(\"markdown\")\n                 .help(\"Change the reports table to use markdown links\"),\n             Arg::new(\"recursive\")\n-                .long(\"--recursive\")\n+                .long(\"recursive\")\n                 .help(\"Run clippy on the dependencies of crates specified in crates-toml\")\n                 .conflicts_with(\"threads\")\n                 .conflicts_with(\"fix\"),"}, {"sha": "23c85298027597f33bcef3cec8ff5a591f64982c", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -17,9 +17,9 @@ use crate::recursive::LintcheckServer;\n use std::collections::{HashMap, HashSet};\n use std::env;\n use std::env::consts::EXE_SUFFIX;\n-use std::fmt::Write as _;\n+use std::fmt::{self, Write as _};\n use std::fs;\n-use std::io::ErrorKind;\n+use std::io::{self, ErrorKind};\n use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::sync::atomic::{AtomicUsize, Ordering};\n@@ -145,8 +145,8 @@ impl ClippyWarning {\n             }\n \n             let mut output = String::from(\"| \");\n-            let _ = write!(output, \"[`{file_with_pos}`]({file}#L{})\", self.line);\n-            let _ = write!(output, r#\" | `{:<50}` | \"{}\" |\"#, self.lint_type, self.message);\n+            let _: fmt::Result = write!(output, \"[`{file_with_pos}`]({file}#L{})\", self.line);\n+            let _: fmt::Result = write!(output, r#\" | `{:<50}` | \"{}\" |\"#, self.lint_type, self.message);\n             output.push('\\n');\n             output\n         } else {\n@@ -632,7 +632,7 @@ fn main() {\n         .unwrap();\n \n     let server = config.recursive.then(|| {\n-        let _ = fs::remove_dir_all(\"target/lintcheck/shared_target_dir/recursive\");\n+        let _: io::Result<()> = fs::remove_dir_all(\"target/lintcheck/shared_target_dir/recursive\");\n \n         LintcheckServer::spawn(recursive_options)\n     });\n@@ -689,7 +689,7 @@ fn main() {\n     write!(text, \"{}\", all_msgs.join(\"\")).unwrap();\n     text.push_str(\"\\n\\n### ICEs:\\n\");\n     for (cratename, msg) in &ices {\n-        let _ = write!(text, \"{cratename}: '{msg}'\");\n+        let _: fmt::Result = write!(text, \"{cratename}: '{msg}'\");\n     }\n \n     println!(\"Writing logs to {}\", config.lintcheck_results_path.display());"}, {"sha": "cfe845ec78f0a020bba0df2435244f3b10840082", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-02-10\"\n+channel = \"nightly-2023-02-25\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "dd183362f276e5b79ba34e4f9d5fe2939b1c16ed", "filename": "src/driver.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -209,10 +209,7 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // Separate the output with an empty line\n     eprintln!();\n \n-    let fallback_bundle = rustc_errors::fallback_fluent_bundle(\n-        rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(),\n-        false\n-    );\n+    let fallback_bundle = rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES.to_vec(), false);\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n         rustc_errors::ColorConfig::Auto,\n         None,"}, {"sha": "837811bdf1effaa4188c5c4c0c2b5dbeecf9a39d", "filename": "tests/ui-internal/custom_ice_message.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-internal%2Fcustom_ice_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-internal%2Fcustom_ice_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcustom_ice_message.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,8 +1,9 @@\n // rustc-env:RUST_BACKTRACE=0\n // normalize-stderr-test: \"Clippy version: .*\" -> \"Clippy version: foo\"\n-// normalize-stderr-test: \"internal_lints.rs:\\d*:\\d*\" -> \"internal_lints.rs\"\n+// normalize-stderr-test: \"produce_ice.rs:\\d*:\\d*\" -> \"produce_ice.rs\"\n // normalize-stderr-test: \"', .*clippy_lints\" -> \"', clippy_lints\"\n // normalize-stderr-test: \"'rustc'\" -> \"'<unnamed>'\"\n+// normalize-stderr-test: \"(?ms)query stack during panic:\\n.*end of query stack\\n\" -> \"\"\n \n #![deny(clippy::internal)]\n #![allow(clippy::missing_clippy_version_attribute)]"}, {"sha": "7ed0ef0274fa39b824ab57cc5056ad996fd27aa0", "filename": "tests/ui-internal/custom_ice_message.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-internal%2Fcustom_ice_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-internal%2Fcustom_ice_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Fcustom_ice_message.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,4 +1,4 @@\n-thread '<unnamed>' panicked at 'Would you like some help with that?', clippy_lints/src/utils/internal_lints/produce_ice.rs:28:9\n+thread '<unnamed>' panicked at 'Would you like some help with that?', clippy_lints/src/utils/internal_lints/produce_ice.rs\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n error: internal compiler error: unexpected panic\n@@ -9,5 +9,3 @@ note: we would appreciate a bug report: https://github.com/rust-lang/rust-clippy\n \n note: Clippy version: foo\n \n-query stack during panic:\n-end of query stack"}, {"sha": "3ca45404e44bb88290ad846bccca89f21b88f6a7", "filename": "tests/ui-internal/unnecessary_def_path_hardcoded_path.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_def_path_hardcoded_path.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,19 +1,11 @@\n-error: hardcoded path to a diagnostic item\n-  --> $DIR/unnecessary_def_path_hardcoded_path.rs:12:43\n-   |\n-LL |     const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: convert all references to use `sym::deref_method`\n-   = note: `-D clippy::unnecessary-def-path` implied by `-D warnings`\n-\n error: hardcoded path to a diagnostic item\n   --> $DIR/unnecessary_def_path_hardcoded_path.rs:10:36\n    |\n LL |     const DEREF_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"Deref\"];\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: convert all references to use `sym::Deref`\n+   = note: `-D clippy::unnecessary-def-path` implied by `-D warnings`\n \n error: hardcoded path to a language item\n   --> $DIR/unnecessary_def_path_hardcoded_path.rs:11:40\n@@ -23,5 +15,13 @@ LL |     const DEREF_MUT_TRAIT: [&str; 4] = [\"core\", \"ops\", \"deref\", \"DerefMut\"]\n    |\n    = help: convert all references to use `LangItem::DerefMut`\n \n+error: hardcoded path to a diagnostic item\n+  --> $DIR/unnecessary_def_path_hardcoded_path.rs:12:43\n+   |\n+LL |     const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: convert all references to use `sym::deref_method`\n+\n error: aborting due to 3 previous errors\n "}, {"sha": "89f142a150d95247776cc94ee68085483240a87e", "filename": "tests/ui-toml/expect_used/expect_used.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -16,6 +16,18 @@ fn main() {\n     expect_result();\n }\n \n+#[test]\n+fn test_expect_option() {\n+    let opt = Some(0);\n+    let _ = opt.expect(\"\");\n+}\n+\n+#[test]\n+fn test_expect_result() {\n+    let res: Result<u8, ()> = Ok(0);\n+    let _ = res.expect(\"\");\n+}\n+\n #[cfg(test)]\n mod issue9612 {\n     // should not lint in `#[cfg(test)]` modules"}, {"sha": "ec210a987830588e5bd6fb52b5bb5b50a307fc4a", "filename": "tests/ui-toml/pub_crate_missing_docs/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fclippy.toml?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1 @@\n+missing-docs-in-crate-items = true"}, {"sha": "830d71f61dd50b50cf22dc4991d515d452e5e412", "filename": "tests/ui-toml/pub_crate_missing_docs/pub_crate_missing_doc.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fpub_crate_missing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fpub_crate_missing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fpub_crate_missing_doc.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,59 @@\n+//! this is crate\n+#![allow(missing_docs)]\n+#![warn(clippy::missing_docs_in_private_items)]\n+\n+/// this is mod\n+mod my_mod {\n+    /// some docs\n+    fn priv_with_docs() {}\n+    fn priv_no_docs() {}\n+    /// some docs\n+    pub(crate) fn crate_with_docs() {}\n+    pub(crate) fn crate_no_docs() {}\n+    /// some docs\n+    pub(super) fn super_with_docs() {}\n+    pub(super) fn super_no_docs() {}\n+\n+    mod my_sub {\n+        /// some docs\n+        fn sub_priv_with_docs() {}\n+        fn sub_priv_no_docs() {}\n+        /// some docs\n+        pub(crate) fn sub_crate_with_docs() {}\n+        pub(crate) fn sub_crate_no_docs() {}\n+        /// some docs\n+        pub(super) fn sub_super_with_docs() {}\n+        pub(super) fn sub_super_no_docs() {}\n+    }\n+\n+    /// some docs\n+    pub(crate) struct CrateStructWithDocs {\n+        /// some docs\n+        pub(crate) crate_field_with_docs: (),\n+        pub(crate) crate_field_no_docs: (),\n+        /// some docs\n+        priv_field_with_docs: (),\n+        priv_field_no_docs: (),\n+    }\n+\n+    pub(crate) struct CrateStructNoDocs {\n+        /// some docs\n+        pub(crate) crate_field_with_docs: (),\n+        pub(crate) crate_field_no_docs: (),\n+        /// some docs\n+        priv_field_with_docs: (),\n+        priv_field_no_docs: (),\n+    }\n+}\n+\n+/// some docs\n+type CrateTypedefWithDocs = String;\n+type CrateTypedefNoDocs = String;\n+/// some docs\n+pub type PubTypedefWithDocs = String;\n+pub type PubTypedefNoDocs = String;\n+\n+fn main() {\n+    my_mod::crate_with_docs();\n+    my_mod::crate_no_docs();\n+}"}, {"sha": "a474187050c17c7a7d0c0da70606ade5f618b6c3", "filename": "tests/ui-toml/pub_crate_missing_docs/pub_crate_missing_doc.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fpub_crate_missing_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fpub_crate_missing_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fpub_crate_missing_docs%2Fpub_crate_missing_doc.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,52 @@\n+error: missing documentation for a function\n+  --> $DIR/pub_crate_missing_doc.rs:12:5\n+   |\n+LL |     pub(crate) fn crate_no_docs() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::missing-docs-in-private-items` implied by `-D warnings`\n+\n+error: missing documentation for a function\n+  --> $DIR/pub_crate_missing_doc.rs:15:5\n+   |\n+LL |     pub(super) fn super_no_docs() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+  --> $DIR/pub_crate_missing_doc.rs:23:9\n+   |\n+LL |         pub(crate) fn sub_crate_no_docs() {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a struct field\n+  --> $DIR/pub_crate_missing_doc.rs:33:9\n+   |\n+LL |         pub(crate) crate_field_no_docs: (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a struct\n+  --> $DIR/pub_crate_missing_doc.rs:39:5\n+   |\n+LL | /     pub(crate) struct CrateStructNoDocs {\n+LL | |         /// some docs\n+LL | |         pub(crate) crate_field_with_docs: (),\n+LL | |         pub(crate) crate_field_no_docs: (),\n+...  |\n+LL | |         priv_field_no_docs: (),\n+LL | |     }\n+   | |_____^\n+\n+error: missing documentation for a struct field\n+  --> $DIR/pub_crate_missing_doc.rs:42:9\n+   |\n+LL |         pub(crate) crate_field_no_docs: (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a type alias\n+  --> $DIR/pub_crate_missing_doc.rs:51:1\n+   |\n+LL | type CrateTypedefNoDocs = String;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "6a246afac76e056a05b9e89b8c2bb9043011dac7", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -33,6 +33,7 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            max-struct-bools\n            max-suggested-slice-pattern-length\n            max-trait-bounds\n+           missing-docs-in-crate-items\n            msrv\n            pass-by-value-size-limit\n            single-char-binding-names-threshold"}, {"sha": "6525ea5bfc3fcf39a6226a6a3868b9e777afa80d", "filename": "tests/ui-toml/unwrap_used/unwrap_used.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -66,6 +66,12 @@ fn main() {\n     }\n }\n \n+#[test]\n+fn test() {\n+    let boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let _ = boxed_slice.get(1).unwrap();\n+}\n+\n #[cfg(test)]\n mod issue9612 {\n     // should not lint in `#[cfg(test)]` modules"}, {"sha": "8a32750e3c92d974ced3168c5e8c52043ad894fa", "filename": "tests/ui-toml/unwrap_used/unwrap_used.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -188,10 +188,16 @@ LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/unwrap_used.rs:84:17\n+  --> $DIR/unwrap_used.rs:72:13\n+   |\n+LL |     let _ = boxed_slice.get(1).unwrap();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n+\n+error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/unwrap_used.rs:90:17\n    |\n LL |         let _ = Box::new([0]).get(1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&Box::new([0])[1]`\n \n-error: aborting due to 27 previous errors\n+error: aborting due to 28 previous errors\n "}, {"sha": "2611e3a785f6fe7740b5d3a4097d1f73b29cd068", "filename": "tests/ui/arithmetic_side_effects.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic_side_effects.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -13,6 +13,9 @@\n \n use core::num::{Saturating, Wrapping};\n \n+const ONE: i32 = 1;\n+const ZERO: i32 = 0;\n+\n #[derive(Clone, Copy)]\n pub struct Custom;\n \n@@ -182,6 +185,10 @@ pub fn non_overflowing_ops_or_ops_already_handled_by_the_compiler_should_not_tri\n     _n += &0;\n     _n -= 0;\n     _n -= &0;\n+    _n += ZERO;\n+    _n += &ZERO;\n+    _n -= ZERO;\n+    _n -= &ZERO;\n     _n /= 99;\n     _n /= &99;\n     _n %= 99;\n@@ -190,10 +197,18 @@ pub fn non_overflowing_ops_or_ops_already_handled_by_the_compiler_should_not_tri\n     _n *= &0;\n     _n *= 1;\n     _n *= &1;\n+    _n *= ZERO;\n+    _n *= &ZERO;\n+    _n *= ONE;\n+    _n *= &ONE;\n     _n += -0;\n     _n += &-0;\n     _n -= -0;\n     _n -= &-0;\n+    _n += -ZERO;\n+    _n += &-ZERO;\n+    _n -= -ZERO;\n+    _n -= &-ZERO;\n     _n /= -99;\n     _n /= &-99;\n     _n %= -99;\n@@ -208,10 +223,18 @@ pub fn non_overflowing_ops_or_ops_already_handled_by_the_compiler_should_not_tri\n     _n = _n + &0;\n     _n = 0 + _n;\n     _n = &0 + _n;\n+    _n = _n + ZERO;\n+    _n = _n + &ZERO;\n+    _n = ZERO + _n;\n+    _n = &ZERO + _n;\n     _n = _n - 0;\n     _n = _n - &0;\n     _n = 0 - _n;\n     _n = &0 - _n;\n+    _n = _n - ZERO;\n+    _n = _n - &ZERO;\n+    _n = ZERO - _n;\n+    _n = &ZERO - _n;\n     _n = _n / 99;\n     _n = _n / &99;\n     _n = _n % 99;\n@@ -222,6 +245,10 @@ pub fn non_overflowing_ops_or_ops_already_handled_by_the_compiler_should_not_tri\n     _n = &0 * _n;\n     _n = _n * 1;\n     _n = _n * &1;\n+    _n = ZERO * _n;\n+    _n = &ZERO * _n;\n+    _n = _n * ONE;\n+    _n = _n * &ONE;\n     _n = 1 * _n;\n     _n = &1 * _n;\n     _n = 23 + 85;"}, {"sha": "17a2448fbfcad911a7a8db64d665c0329b16ff10", "filename": "tests/ui/arithmetic_side_effects.stderr", "status": "modified", "additions": 99, "deletions": 99, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Farithmetic_side_effects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Farithmetic_side_effects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic_side_effects.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,595 +1,595 @@\n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:243:5\n+  --> $DIR/arithmetic_side_effects.rs:270:5\n    |\n LL |     _n += 1;\n    |     ^^^^^^^\n    |\n    = note: `-D clippy::arithmetic-side-effects` implied by `-D warnings`\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:244:5\n+  --> $DIR/arithmetic_side_effects.rs:271:5\n    |\n LL |     _n += &1;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:245:5\n+  --> $DIR/arithmetic_side_effects.rs:272:5\n    |\n LL |     _n -= 1;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:246:5\n+  --> $DIR/arithmetic_side_effects.rs:273:5\n    |\n LL |     _n -= &1;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:247:5\n+  --> $DIR/arithmetic_side_effects.rs:274:5\n    |\n LL |     _n /= 0;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:248:5\n+  --> $DIR/arithmetic_side_effects.rs:275:5\n    |\n LL |     _n /= &0;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:249:5\n+  --> $DIR/arithmetic_side_effects.rs:276:5\n    |\n LL |     _n %= 0;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:250:5\n+  --> $DIR/arithmetic_side_effects.rs:277:5\n    |\n LL |     _n %= &0;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:251:5\n+  --> $DIR/arithmetic_side_effects.rs:278:5\n    |\n LL |     _n *= 2;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:252:5\n+  --> $DIR/arithmetic_side_effects.rs:279:5\n    |\n LL |     _n *= &2;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:253:5\n+  --> $DIR/arithmetic_side_effects.rs:280:5\n    |\n LL |     _n += -1;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:254:5\n+  --> $DIR/arithmetic_side_effects.rs:281:5\n    |\n LL |     _n += &-1;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:255:5\n+  --> $DIR/arithmetic_side_effects.rs:282:5\n    |\n LL |     _n -= -1;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:256:5\n+  --> $DIR/arithmetic_side_effects.rs:283:5\n    |\n LL |     _n -= &-1;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:257:5\n+  --> $DIR/arithmetic_side_effects.rs:284:5\n    |\n LL |     _n /= -0;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:258:5\n+  --> $DIR/arithmetic_side_effects.rs:285:5\n    |\n LL |     _n /= &-0;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:259:5\n+  --> $DIR/arithmetic_side_effects.rs:286:5\n    |\n LL |     _n %= -0;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:260:5\n+  --> $DIR/arithmetic_side_effects.rs:287:5\n    |\n LL |     _n %= &-0;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:261:5\n+  --> $DIR/arithmetic_side_effects.rs:288:5\n    |\n LL |     _n *= -2;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:262:5\n+  --> $DIR/arithmetic_side_effects.rs:289:5\n    |\n LL |     _n *= &-2;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:263:5\n+  --> $DIR/arithmetic_side_effects.rs:290:5\n    |\n LL |     _custom += Custom;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:264:5\n+  --> $DIR/arithmetic_side_effects.rs:291:5\n    |\n LL |     _custom += &Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:265:5\n+  --> $DIR/arithmetic_side_effects.rs:292:5\n    |\n LL |     _custom -= Custom;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:266:5\n+  --> $DIR/arithmetic_side_effects.rs:293:5\n    |\n LL |     _custom -= &Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:267:5\n+  --> $DIR/arithmetic_side_effects.rs:294:5\n    |\n LL |     _custom /= Custom;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:268:5\n+  --> $DIR/arithmetic_side_effects.rs:295:5\n    |\n LL |     _custom /= &Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:269:5\n+  --> $DIR/arithmetic_side_effects.rs:296:5\n    |\n LL |     _custom %= Custom;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:270:5\n+  --> $DIR/arithmetic_side_effects.rs:297:5\n    |\n LL |     _custom %= &Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:271:5\n+  --> $DIR/arithmetic_side_effects.rs:298:5\n    |\n LL |     _custom *= Custom;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:272:5\n+  --> $DIR/arithmetic_side_effects.rs:299:5\n    |\n LL |     _custom *= &Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:273:5\n+  --> $DIR/arithmetic_side_effects.rs:300:5\n    |\n LL |     _custom += -Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:274:5\n+  --> $DIR/arithmetic_side_effects.rs:301:5\n    |\n LL |     _custom += &-Custom;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:275:5\n+  --> $DIR/arithmetic_side_effects.rs:302:5\n    |\n LL |     _custom -= -Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:276:5\n+  --> $DIR/arithmetic_side_effects.rs:303:5\n    |\n LL |     _custom -= &-Custom;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:277:5\n+  --> $DIR/arithmetic_side_effects.rs:304:5\n    |\n LL |     _custom /= -Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:278:5\n+  --> $DIR/arithmetic_side_effects.rs:305:5\n    |\n LL |     _custom /= &-Custom;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:279:5\n+  --> $DIR/arithmetic_side_effects.rs:306:5\n    |\n LL |     _custom %= -Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:280:5\n+  --> $DIR/arithmetic_side_effects.rs:307:5\n    |\n LL |     _custom %= &-Custom;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:281:5\n+  --> $DIR/arithmetic_side_effects.rs:308:5\n    |\n LL |     _custom *= -Custom;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:282:5\n+  --> $DIR/arithmetic_side_effects.rs:309:5\n    |\n LL |     _custom *= &-Custom;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:285:10\n+  --> $DIR/arithmetic_side_effects.rs:312:10\n    |\n LL |     _n = _n + 1;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:286:10\n+  --> $DIR/arithmetic_side_effects.rs:313:10\n    |\n LL |     _n = _n + &1;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:287:10\n+  --> $DIR/arithmetic_side_effects.rs:314:10\n    |\n LL |     _n = 1 + _n;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:288:10\n+  --> $DIR/arithmetic_side_effects.rs:315:10\n    |\n LL |     _n = &1 + _n;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:289:10\n+  --> $DIR/arithmetic_side_effects.rs:316:10\n    |\n LL |     _n = _n - 1;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:290:10\n+  --> $DIR/arithmetic_side_effects.rs:317:10\n    |\n LL |     _n = _n - &1;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:291:10\n+  --> $DIR/arithmetic_side_effects.rs:318:10\n    |\n LL |     _n = 1 - _n;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:292:10\n+  --> $DIR/arithmetic_side_effects.rs:319:10\n    |\n LL |     _n = &1 - _n;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:293:10\n+  --> $DIR/arithmetic_side_effects.rs:320:10\n    |\n LL |     _n = _n / 0;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:294:10\n+  --> $DIR/arithmetic_side_effects.rs:321:10\n    |\n LL |     _n = _n / &0;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:295:10\n+  --> $DIR/arithmetic_side_effects.rs:322:10\n    |\n LL |     _n = _n % 0;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:296:10\n+  --> $DIR/arithmetic_side_effects.rs:323:10\n    |\n LL |     _n = _n % &0;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:297:10\n+  --> $DIR/arithmetic_side_effects.rs:324:10\n    |\n LL |     _n = _n * 2;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:298:10\n+  --> $DIR/arithmetic_side_effects.rs:325:10\n    |\n LL |     _n = _n * &2;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:299:10\n+  --> $DIR/arithmetic_side_effects.rs:326:10\n    |\n LL |     _n = 2 * _n;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:300:10\n+  --> $DIR/arithmetic_side_effects.rs:327:10\n    |\n LL |     _n = &2 * _n;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:301:10\n+  --> $DIR/arithmetic_side_effects.rs:328:10\n    |\n LL |     _n = 23 + &85;\n    |          ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:302:10\n+  --> $DIR/arithmetic_side_effects.rs:329:10\n    |\n LL |     _n = &23 + 85;\n    |          ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:303:10\n+  --> $DIR/arithmetic_side_effects.rs:330:10\n    |\n LL |     _n = &23 + &85;\n    |          ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:304:15\n+  --> $DIR/arithmetic_side_effects.rs:331:15\n    |\n LL |     _custom = _custom + _custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:305:15\n+  --> $DIR/arithmetic_side_effects.rs:332:15\n    |\n LL |     _custom = _custom + &_custom;\n    |               ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:306:15\n+  --> $DIR/arithmetic_side_effects.rs:333:15\n    |\n LL |     _custom = Custom + _custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:307:15\n+  --> $DIR/arithmetic_side_effects.rs:334:15\n    |\n LL |     _custom = &Custom + _custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:308:15\n+  --> $DIR/arithmetic_side_effects.rs:335:15\n    |\n LL |     _custom = _custom - Custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:309:15\n+  --> $DIR/arithmetic_side_effects.rs:336:15\n    |\n LL |     _custom = _custom - &Custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:310:15\n+  --> $DIR/arithmetic_side_effects.rs:337:15\n    |\n LL |     _custom = Custom - _custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:311:15\n+  --> $DIR/arithmetic_side_effects.rs:338:15\n    |\n LL |     _custom = &Custom - _custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:312:15\n+  --> $DIR/arithmetic_side_effects.rs:339:15\n    |\n LL |     _custom = _custom / Custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:313:15\n+  --> $DIR/arithmetic_side_effects.rs:340:15\n    |\n LL |     _custom = _custom / &Custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:314:15\n+  --> $DIR/arithmetic_side_effects.rs:341:15\n    |\n LL |     _custom = _custom % Custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:315:15\n+  --> $DIR/arithmetic_side_effects.rs:342:15\n    |\n LL |     _custom = _custom % &Custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:316:15\n+  --> $DIR/arithmetic_side_effects.rs:343:15\n    |\n LL |     _custom = _custom * Custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:317:15\n+  --> $DIR/arithmetic_side_effects.rs:344:15\n    |\n LL |     _custom = _custom * &Custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:318:15\n+  --> $DIR/arithmetic_side_effects.rs:345:15\n    |\n LL |     _custom = Custom * _custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:319:15\n+  --> $DIR/arithmetic_side_effects.rs:346:15\n    |\n LL |     _custom = &Custom * _custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:320:15\n+  --> $DIR/arithmetic_side_effects.rs:347:15\n    |\n LL |     _custom = Custom + &Custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:321:15\n+  --> $DIR/arithmetic_side_effects.rs:348:15\n    |\n LL |     _custom = &Custom + Custom;\n    |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:322:15\n+  --> $DIR/arithmetic_side_effects.rs:349:15\n    |\n LL |     _custom = &Custom + &Custom;\n    |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:325:10\n+  --> $DIR/arithmetic_side_effects.rs:352:10\n    |\n LL |     _n = -_n;\n    |          ^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:326:10\n+  --> $DIR/arithmetic_side_effects.rs:353:10\n    |\n LL |     _n = -&_n;\n    |          ^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:327:15\n+  --> $DIR/arithmetic_side_effects.rs:354:15\n    |\n LL |     _custom = -_custom;\n    |               ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:328:15\n+  --> $DIR/arithmetic_side_effects.rs:355:15\n    |\n LL |     _custom = -&_custom;\n    |               ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:337:5\n+  --> $DIR/arithmetic_side_effects.rs:364:5\n    |\n LL |     1 + i;\n    |     ^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:338:5\n+  --> $DIR/arithmetic_side_effects.rs:365:5\n    |\n LL |     i * 2;\n    |     ^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:340:5\n+  --> $DIR/arithmetic_side_effects.rs:367:5\n    |\n LL |     i - 2 + 2 - i;\n    |     ^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:341:5\n+  --> $DIR/arithmetic_side_effects.rs:368:5\n    |\n LL |     -i;\n    |     ^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:342:5\n+  --> $DIR/arithmetic_side_effects.rs:369:5\n    |\n LL |     i >> 1;\n    |     ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:343:5\n+  --> $DIR/arithmetic_side_effects.rs:370:5\n    |\n LL |     i << 1;\n    |     ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:352:5\n+  --> $DIR/arithmetic_side_effects.rs:379:5\n    |\n LL |     i += 1;\n    |     ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:353:5\n+  --> $DIR/arithmetic_side_effects.rs:380:5\n    |\n LL |     i -= 1;\n    |     ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:354:5\n+  --> $DIR/arithmetic_side_effects.rs:381:5\n    |\n LL |     i *= 2;\n    |     ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:356:5\n+  --> $DIR/arithmetic_side_effects.rs:383:5\n    |\n LL |     i /= 0;\n    |     ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:358:5\n+  --> $DIR/arithmetic_side_effects.rs:385:5\n    |\n LL |     i /= var1;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:359:5\n+  --> $DIR/arithmetic_side_effects.rs:386:5\n    |\n LL |     i /= var2;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:361:5\n+  --> $DIR/arithmetic_side_effects.rs:388:5\n    |\n LL |     i %= 0;\n    |     ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:363:5\n+  --> $DIR/arithmetic_side_effects.rs:390:5\n    |\n LL |     i %= var1;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:364:5\n+  --> $DIR/arithmetic_side_effects.rs:391:5\n    |\n LL |     i %= var2;\n    |     ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:365:5\n+  --> $DIR/arithmetic_side_effects.rs:392:5\n    |\n LL |     i <<= 3;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:366:5\n+  --> $DIR/arithmetic_side_effects.rs:393:5\n    |\n LL |     i >>= 2;\n    |     ^^^^^^^"}, {"sha": "59c0baf8718aae16755f769719e0c6823ca4afb9", "filename": "tests/ui/box_default.fixed", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fbox_default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fbox_default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -33,6 +33,7 @@ fn main() {\n     let _vec4: Box<_> = Box::<Vec<bool>>::default();\n     let _more = ret_ty_fn();\n     call_ty_fn(Box::default());\n+    issue_10381();\n }\n \n fn ret_ty_fn() -> Box<bool> {\n@@ -65,3 +66,20 @@ fn issue_10089() {\n         let _ = Box::<WeirdPathed>::default();\n     };\n }\n+\n+fn issue_10381() {\n+    #[derive(Default)]\n+    pub struct Foo {}\n+    pub trait Bar {}\n+    impl Bar for Foo {}\n+\n+    fn maybe_get_bar(i: u32) -> Option<Box<dyn Bar>> {\n+        if i % 2 == 0 {\n+            Some(Box::<Foo>::default())\n+        } else {\n+            None\n+        }\n+    }\n+\n+    assert!(maybe_get_bar(2).is_some());\n+}"}, {"sha": "f7d832193a3a1a82e02e8bafd15edb6d0727126e", "filename": "tests/ui/box_default.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -33,6 +33,7 @@ fn main() {\n     let _vec4: Box<_> = Box::new(Vec::from([false; 0]));\n     let _more = ret_ty_fn();\n     call_ty_fn(Box::new(u8::default()));\n+    issue_10381();\n }\n \n fn ret_ty_fn() -> Box<bool> {\n@@ -65,3 +66,20 @@ fn issue_10089() {\n         let _ = Box::new(WeirdPathed::default());\n     };\n }\n+\n+fn issue_10381() {\n+    #[derive(Default)]\n+    pub struct Foo {}\n+    pub trait Bar {}\n+    impl Bar for Foo {}\n+\n+    fn maybe_get_bar(i: u32) -> Option<Box<dyn Bar>> {\n+        if i % 2 == 0 {\n+            Some(Box::new(Foo::default()))\n+        } else {\n+            None\n+        }\n+    }\n+\n+    assert!(maybe_get_bar(2).is_some());\n+}"}, {"sha": "78e17b9f0359c11be2673336eef032f095e815d9", "filename": "tests/ui/box_default.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fbox_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fbox_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -73,22 +73,28 @@ LL |     call_ty_fn(Box::new(u8::default()));\n    |                ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:39:5\n+  --> $DIR/box_default.rs:40:5\n    |\n LL |     Box::new(bool::default())\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<bool>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:56:28\n+  --> $DIR/box_default.rs:57:28\n    |\n LL |     let _: Box<dyn Read> = Box::new(ImplementsDefault::default());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:65:17\n+  --> $DIR/box_default.rs:66:17\n    |\n LL |         let _ = Box::new(WeirdPathed::default());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<WeirdPathed>::default()`\n \n-error: aborting due to 15 previous errors\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:78:18\n+   |\n+LL |             Some(Box::new(Foo::default()))\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<Foo>::default()`\n+\n+error: aborting due to 16 previous errors\n "}, {"sha": "a35c679afb71f37739b7e0b60dcfa70092a54e06", "filename": "tests/ui/bytes_nth.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fbytes_nth.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fbytes_nth.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_nth.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -5,7 +5,7 @@\n \n fn main() {\n     let s = String::from(\"String\");\n-    let _ = s.as_bytes().get(3);\n-    let _ = &s.as_bytes().get(3);\n-    let _ = s[..].as_bytes().get(3);\n+    let _ = s.as_bytes().get(3).copied();\n+    let _ = &s.as_bytes()[3];\n+    let _ = s[..].as_bytes().get(3).copied();\n }"}, {"sha": "1ecffea53035e3e308333f6b1539a901b7746286", "filename": "tests/ui/bytes_nth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fbytes_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fbytes_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_nth.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -6,6 +6,6 @@\n fn main() {\n     let s = String::from(\"String\");\n     let _ = s.bytes().nth(3);\n-    let _ = &s.bytes().nth(3);\n+    let _ = &s.bytes().nth(3).unwrap();\n     let _ = s[..].bytes().nth(3);\n }"}, {"sha": "e8b15027829e38e4e0a9d851fe8e0be45a4cf264", "filename": "tests/ui/bytes_nth.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fbytes_nth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fbytes_nth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_nth.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -2,21 +2,21 @@ error: called `.bytes().nth()` on a `String`\n   --> $DIR/bytes_nth.rs:8:13\n    |\n LL |     let _ = s.bytes().nth(3);\n-   |             ^^^^^^^^^^^^^^^^ help: try: `s.as_bytes().get(3)`\n+   |             ^^^^^^^^^^^^^^^^ help: try: `s.as_bytes().get(3).copied()`\n    |\n    = note: `-D clippy::bytes-nth` implied by `-D warnings`\n \n-error: called `.bytes().nth()` on a `String`\n+error: called `.bytes().nth().unwrap()` on a `String`\n   --> $DIR/bytes_nth.rs:9:14\n    |\n-LL |     let _ = &s.bytes().nth(3);\n-   |              ^^^^^^^^^^^^^^^^ help: try: `s.as_bytes().get(3)`\n+LL |     let _ = &s.bytes().nth(3).unwrap();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `s.as_bytes()[3]`\n \n error: called `.bytes().nth()` on a `str`\n   --> $DIR/bytes_nth.rs:10:13\n    |\n LL |     let _ = s[..].bytes().nth(3);\n-   |             ^^^^^^^^^^^^^^^^^^^^ help: try: `s[..].as_bytes().get(3)`\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: try: `s[..].as_bytes().get(3).copied()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "451078de23b22cea71088fb87e8f8c78ae03cf45", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -42,7 +42,7 @@ error: casting `f32` to `i32` may truncate the value\n LL |     1f32 as i32;\n    |     ^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n help: ... or use `try_from` and handle the error accordingly\n    |\n@@ -55,7 +55,7 @@ error: casting `f32` to `u32` may truncate the value\n LL |     1f32 as u32;\n    |     ^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     u32::try_from(1f32);\n@@ -75,7 +75,7 @@ error: casting `f64` to `f32` may truncate the value\n LL |     1f64 as f32;\n    |     ^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     f32::try_from(1f64);\n@@ -87,7 +87,7 @@ error: casting `i32` to `i8` may truncate the value\n LL |     1i32 as i8;\n    |     ^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     i8::try_from(1i32);\n@@ -99,7 +99,7 @@ error: casting `i32` to `u8` may truncate the value\n LL |     1i32 as u8;\n    |     ^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     u8::try_from(1i32);\n@@ -111,7 +111,7 @@ error: casting `f64` to `isize` may truncate the value\n LL |     1f64 as isize;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     isize::try_from(1f64);\n@@ -123,7 +123,7 @@ error: casting `f64` to `usize` may truncate the value\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     usize::try_from(1f64);\n@@ -141,7 +141,7 @@ error: casting `u32` to `u16` may truncate the value\n LL |     1f32 as u32 as u16;\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     u16::try_from(1f32 as u32);\n@@ -153,7 +153,7 @@ error: casting `f32` to `u32` may truncate the value\n LL |     1f32 as u32 as u16;\n    |     ^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     u32::try_from(1f32) as u16;\n@@ -215,7 +215,7 @@ error: casting `i64` to `i8` may truncate the value\n LL |     (-99999999999i64).min(1) as i8; // should be linted because signed\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     i8::try_from((-99999999999i64).min(1)); // should be linted because signed\n@@ -227,7 +227,7 @@ error: casting `u64` to `u8` may truncate the value\n LL |     999999u64.clamp(0, 256) as u8; // should still be linted\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     u8::try_from(999999u64.clamp(0, 256)); // should still be linted\n@@ -239,7 +239,7 @@ error: casting `main::E2` to `u8` may truncate the value\n LL |             let _ = self as u8;\n    |                     ^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |             let _ = u8::try_from(self);\n@@ -259,7 +259,7 @@ error: casting `main::E5` to `i8` may truncate the value\n LL |             let _ = self as i8;\n    |                     ^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |             let _ = i8::try_from(self);\n@@ -277,7 +277,7 @@ error: casting `main::E6` to `i16` may truncate the value\n LL |             let _ = self as i16;\n    |                     ^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |             let _ = i16::try_from(self);\n@@ -289,7 +289,7 @@ error: casting `main::E7` to `usize` may truncate the value on targets with 32-b\n LL |             let _ = self as usize;\n    |                     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |             let _ = usize::try_from(self);\n@@ -301,7 +301,7 @@ error: casting `main::E10` to `u16` may truncate the value\n LL |             let _ = self as u16;\n    |                     ^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |             let _ = u16::try_from(self);\n@@ -313,7 +313,7 @@ error: casting `u32` to `u8` may truncate the value\n LL |     let c = (q >> 16) as u8;\n    |             ^^^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     let c = u8::try_from((q >> 16));\n@@ -325,7 +325,7 @@ error: casting `u32` to `u8` may truncate the value\n LL |     let c = (q / 1000) as u8;\n    |             ^^^^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     let c = u8::try_from((q / 1000));"}, {"sha": "6d2d49d9ed2088a80d8db7ece441a75531911d43", "filename": "tests/ui/cast_size.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -4,7 +4,7 @@ error: casting `isize` to `i8` may truncate the value\n LL |     1isize as i8;\n    |     ^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n help: ... or use `try_from` and handle the error accordingly\n    |\n@@ -43,7 +43,7 @@ error: casting `isize` to `i32` may truncate the value on targets with 64-bit wi\n LL |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     i32::try_from(1isize);\n@@ -55,7 +55,7 @@ error: casting `isize` to `u32` may truncate the value on targets with 64-bit wi\n LL |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     u32::try_from(1isize);\n@@ -67,7 +67,7 @@ error: casting `usize` to `u32` may truncate the value on targets with 64-bit wi\n LL |     1usize as u32;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     u32::try_from(1usize);\n@@ -79,7 +79,7 @@ error: casting `usize` to `i32` may truncate the value on targets with 64-bit wi\n LL |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     i32::try_from(1usize);\n@@ -99,7 +99,7 @@ error: casting `i64` to `isize` may truncate the value on targets with 32-bit wi\n LL |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     isize::try_from(1i64);\n@@ -111,7 +111,7 @@ error: casting `i64` to `usize` may truncate the value on targets with 32-bit wi\n LL |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     usize::try_from(1i64);\n@@ -123,7 +123,7 @@ error: casting `u64` to `isize` may truncate the value on targets with 32-bit wi\n LL |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     isize::try_from(1u64);\n@@ -141,7 +141,7 @@ error: casting `u64` to `usize` may truncate the value on targets with 32-bit wi\n LL |     1u64 as usize;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: if this is intentional allow the lint with `#[allow(clippy::cast_precision_loss)]` ...\n+   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...\n help: ... or use `try_from` and handle the error accordingly\n    |\n LL |     usize::try_from(1u64);"}, {"sha": "dd3d8b8b6d1569fe7166574f0a22a87aeef9951d", "filename": "tests/ui/crashes/needless_pass_by_value-w-late-bound.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fcrashes%2Fneedless_pass_by_value-w-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fcrashes%2Fneedless_pass_by_value-w-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fneedless_pass_by_value-w-late-bound.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,9 @@\n+// https://github.com/rust-lang/rust/issues/107147\n+\n+#![warn(clippy::needless_pass_by_value)]\n+\n+struct Foo<'a>(&'a [(); 100]);\n+\n+fn test(x: Foo<'_>) {}\n+\n+fn main() {}"}, {"sha": "7a0a648974fc768f20b0b3da4b27a8ae64b7d8ff", "filename": "tests/ui/crashes/needless_pass_by_value-w-late-bound.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fcrashes%2Fneedless_pass_by_value-w-late-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fcrashes%2Fneedless_pass_by_value-w-late-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fneedless_pass_by_value-w-late-bound.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,15 @@\n+error: this argument is passed by value, but not consumed in the function body\n+  --> $DIR/needless_pass_by_value-w-late-bound.rs:7:12\n+   |\n+LL | fn test(x: Foo<'_>) {}\n+   |            ^^^^^^^ help: consider taking a reference instead: `&Foo<'_>`\n+   |\n+help: consider marking this type as `Copy`\n+  --> $DIR/needless_pass_by_value-w-late-bound.rs:5:1\n+   |\n+LL | struct Foo<'a>(&'a [(); 100]);\n+   | ^^^^^^^^^^^^^^\n+   = note: `-D clippy::needless-pass-by-value` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "ecb0bf3644eede78a4412eb2f187356e581cd00b", "filename": "tests/ui/doc/doc-fixable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fdoc%2Fdoc-fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fdoc%2Fdoc-fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Fdoc-fixable.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -78,7 +78,7 @@ fn test_allowed() {\n /// This test has [a `link_with_underscores`][chunked-example] inside it. See #823.\n /// See also [the issue tracker](https://github.com/rust-lang/rust-clippy/search?q=clippy::doc_markdown&type=Issues)\n /// on GitHub (which is a camel-cased word, but is OK). And here is another [inline link][inline_link].\n-/// It can also be [`inline_link2`].\n+/// It can also be [inline_link2]. A link to [StackOverflow](https://stackoverflow.com) is also acceptable.\n ///\n /// [chunked-example]: https://en.wikipedia.org/wiki/Chunked_transfer_encoding#Example\n /// [inline_link]: https://foobar"}, {"sha": "11c48dd103d691746448cf5540cf1f1c430b9fe7", "filename": "tests/ui/doc/doc-fixable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fdoc%2Fdoc-fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fdoc%2Fdoc-fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Fdoc-fixable.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -75,10 +75,10 @@ fn test_units() {\n fn test_allowed() {\n }\n \n-/// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n+/// This test has [a `link_with_underscores`][chunked-example] inside it. See #823.\n /// See also [the issue tracker](https://github.com/rust-lang/rust-clippy/search?q=clippy::doc_markdown&type=Issues)\n /// on GitHub (which is a camel-cased word, but is OK). And here is another [inline link][inline_link].\n-/// It can also be [inline_link2].\n+/// It can also be [inline_link2]. A link to [StackOverflow](https://stackoverflow.com) is also acceptable.\n ///\n /// [chunked-example]: https://en.wikipedia.org/wiki/Chunked_transfer_encoding#Example\n /// [inline_link]: https://foobar"}, {"sha": "6c67c903c7508e4547bdb116acce9b40578e2e3a", "filename": "tests/ui/doc/doc-fixable.stderr", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fdoc%2Fdoc-fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fdoc%2Fdoc-fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc%2Fdoc-fixable.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -142,28 +142,6 @@ help: try\n LL | /// `be_sure_we_got_to_the_end_of_it`\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-error: item in documentation is missing backticks\n-  --> $DIR/doc-fixable.rs:78:22\n-   |\n-LL | /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n-   |                      ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: try\n-   |\n-LL | /// This test has [a `link_with_underscores`][chunked-example] inside it. See #823.\n-   |                      ~~~~~~~~~~~~~~~~~~~~~~~\n-\n-error: item in documentation is missing backticks\n-  --> $DIR/doc-fixable.rs:81:21\n-   |\n-LL | /// It can also be [inline_link2].\n-   |                     ^^^^^^^^^^^^\n-   |\n-help: try\n-   |\n-LL | /// It can also be [`inline_link2`].\n-   |                     ~~~~~~~~~~~~~~\n-\n error: item in documentation is missing backticks\n   --> $DIR/doc-fixable.rs:91:5\n    |\n@@ -329,5 +307,5 @@ help: try\n LL | /// An iterator over `mycrate::Collection`'s values.\n    |                      ~~~~~~~~~~~~~~~~~~~~~\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 28 previous errors\n "}, {"sha": "dbe09e0ff3c694778e9777fdfd499232e8aa05d8", "filename": "tests/ui/entry.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fentry.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fentry.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -152,4 +152,18 @@ fn hash_map<K: Eq + Hash + Copy, V: Copy>(m: &mut HashMap<K, V>, m2: &mut HashMa\n     });\n }\n \n+// Issue 10331\n+// do not suggest a bad expansion because the compiler unrolls the first\n+// occurrence of the loop\n+pub fn issue_10331() {\n+    let mut m = HashMap::new();\n+    let mut i = 0;\n+    let mut x = 0;\n+    while !m.contains_key(&x) {\n+        m.insert(x, i);\n+        i += 1;\n+        x += 1;\n+    }\n+}\n+\n fn main() {}"}, {"sha": "30fed34fc5de22391ec6e2971e8ba08d6e5ad393", "filename": "tests/ui/entry.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -156,4 +156,18 @@ fn hash_map<K: Eq + Hash + Copy, V: Copy>(m: &mut HashMap<K, V>, m2: &mut HashMa\n     }\n }\n \n+// Issue 10331\n+// do not suggest a bad expansion because the compiler unrolls the first\n+// occurrence of the loop\n+pub fn issue_10331() {\n+    let mut m = HashMap::new();\n+    let mut i = 0;\n+    let mut x = 0;\n+    while !m.contains_key(&x) {\n+        m.insert(x, i);\n+        i += 1;\n+        x += 1;\n+    }\n+}\n+\n fn main() {}"}, {"sha": "5d40c850424ff728ea9511c64f6089ff1b7a2c72", "filename": "tests/ui/explicit_auto_deref.fixed", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fexplicit_auto_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fexplicit_auto_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -269,6 +269,9 @@ fn main() {\n \n     trait WithAssoc {\n         type Assoc: ?Sized;\n+        fn to_assoc(&self) -> &Self::Assoc {\n+            panic!()\n+        }\n     }\n     impl WithAssoc for String {\n         type Assoc = str;\n@@ -281,4 +284,15 @@ fn main() {\n     // Issue #9901\n     fn takes_ref(_: &i32) {}\n     takes_ref(*Box::new(&0i32));\n+\n+    // Issue #10384\n+    impl<'a> WithAssoc for &'a u32 {\n+        type Assoc = dyn core::fmt::Display;\n+        fn to_assoc(&self) -> &Self::Assoc {\n+            *self\n+        }\n+    }\n+    fn return_dyn_assoc<'a>(x: &'a &'a u32) -> &'a <&'a u32 as WithAssoc>::Assoc {\n+        *x\n+    }\n }"}, {"sha": "79e03f4d76c171cc128c1078a481d61d6222d05a", "filename": "tests/ui/explicit_auto_deref.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fexplicit_auto_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fexplicit_auto_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_auto_deref.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -269,6 +269,9 @@ fn main() {\n \n     trait WithAssoc {\n         type Assoc: ?Sized;\n+        fn to_assoc(&self) -> &Self::Assoc {\n+            panic!()\n+        }\n     }\n     impl WithAssoc for String {\n         type Assoc = str;\n@@ -281,4 +284,15 @@ fn main() {\n     // Issue #9901\n     fn takes_ref(_: &i32) {}\n     takes_ref(*Box::new(&0i32));\n+\n+    // Issue #10384\n+    impl<'a> WithAssoc for &'a u32 {\n+        type Assoc = dyn core::fmt::Display;\n+        fn to_assoc(&self) -> &Self::Assoc {\n+            *self\n+        }\n+    }\n+    fn return_dyn_assoc<'a>(x: &'a &'a u32) -> &'a <&'a u32 as WithAssoc>::Assoc {\n+        *x\n+    }\n }"}, {"sha": "48017434276577ac230bec202c09012971e58184", "filename": "tests/ui/extra_unused_type_parameters.rs", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fextra_unused_type_parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fextra_unused_type_parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_type_parameters.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,11 +1,17 @@\n #![allow(unused, clippy::needless_lifetimes)]\n #![warn(clippy::extra_unused_type_parameters)]\n \n-fn unused_ty<T>(x: u8) {}\n+fn unused_ty<T>(x: u8) {\n+    unimplemented!()\n+}\n \n-fn unused_multi<T, U>(x: u8) {}\n+fn unused_multi<T, U>(x: u8) {\n+    unimplemented!()\n+}\n \n-fn unused_with_lt<'a, T>(x: &'a u8) {}\n+fn unused_with_lt<'a, T>(x: &'a u8) {\n+    unimplemented!()\n+}\n \n fn used_ty<T>(x: T, y: u8) {}\n \n@@ -15,15 +21,20 @@ fn used_ret<T: Default>(x: u8) -> T {\n     T::default()\n }\n \n-fn unused_bounded<T: Default, U>(x: U) {}\n+fn unused_bounded<T: Default, U>(x: U) {\n+    unimplemented!();\n+}\n \n fn unused_where_clause<T, U>(x: U)\n where\n     T: Default,\n {\n+    unimplemented!();\n }\n \n-fn some_unused<A, B, C, D: Iterator<Item = (B, C)>, E>(b: B, c: C) {}\n+fn some_unused<A, B, C, D: Iterator<Item = (B, C)>, E>(b: B, c: C) {\n+    unimplemented!();\n+}\n \n fn used_opaque<A>(iter: impl Iterator<Item = A>) -> usize {\n     iter.count()\n@@ -46,7 +57,9 @@ fn used_closure<T: Default + ToString>() -> impl Fn() {\n struct S;\n \n impl S {\n-    fn unused_ty_impl<T>(&self) {}\n+    fn unused_ty_impl<T>(&self) {\n+        unimplemented!()\n+    }\n }\n \n // Don't lint on trait methods\n@@ -66,4 +79,32 @@ where\n         .filter_map(move |(i, a)| if i == index { None } else { Some(a) })\n }\n \n+fn unused_opaque<A, B>(dummy: impl Default) {\n+    unimplemented!()\n+}\n+\n+mod unexported_trait_bounds {\n+    mod private {\n+        pub trait Private {}\n+    }\n+\n+    fn priv_trait_bound<T: private::Private>() {\n+        unimplemented!();\n+    }\n+\n+    fn unused_with_priv_trait_bound<T: private::Private, U>() {\n+        unimplemented!();\n+    }\n+}\n+\n+mod issue10319 {\n+    fn assert_send<T: Send>() {}\n+\n+    fn assert_send_where<T>()\n+    where\n+        T: Send,\n+    {\n+    }\n+}\n+\n fn main() {}"}, {"sha": "86c88fc9bf006f42b247c0a57fda094ac23ac1d3", "filename": "tests/ui/extra_unused_type_parameters.stderr", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fextra_unused_type_parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fextra_unused_type_parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_type_parameters.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,59 +1,75 @@\n error: type parameter goes unused in function definition\n   --> $DIR/extra_unused_type_parameters.rs:4:13\n    |\n-LL | fn unused_ty<T>(x: u8) {}\n+LL | fn unused_ty<T>(x: u8) {\n    |             ^^^\n    |\n    = help: consider removing the parameter\n    = note: `-D clippy::extra-unused-type-parameters` implied by `-D warnings`\n \n error: type parameters go unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:6:16\n+  --> $DIR/extra_unused_type_parameters.rs:8:16\n    |\n-LL | fn unused_multi<T, U>(x: u8) {}\n+LL | fn unused_multi<T, U>(x: u8) {\n    |                ^^^^^^\n    |\n    = help: consider removing the parameters\n \n error: type parameter goes unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:8:23\n+  --> $DIR/extra_unused_type_parameters.rs:12:23\n    |\n-LL | fn unused_with_lt<'a, T>(x: &'a u8) {}\n+LL | fn unused_with_lt<'a, T>(x: &'a u8) {\n    |                       ^\n    |\n    = help: consider removing the parameter\n \n error: type parameter goes unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:18:19\n+  --> $DIR/extra_unused_type_parameters.rs:24:19\n    |\n-LL | fn unused_bounded<T: Default, U>(x: U) {}\n+LL | fn unused_bounded<T: Default, U>(x: U) {\n    |                   ^^^^^^^^^^^\n    |\n    = help: consider removing the parameter\n \n error: type parameter goes unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:20:24\n+  --> $DIR/extra_unused_type_parameters.rs:28:24\n    |\n LL | fn unused_where_clause<T, U>(x: U)\n    |                        ^^\n    |\n    = help: consider removing the parameter\n \n error: type parameters go unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:26:16\n+  --> $DIR/extra_unused_type_parameters.rs:35:16\n    |\n-LL | fn some_unused<A, B, C, D: Iterator<Item = (B, C)>, E>(b: B, c: C) {}\n+LL | fn some_unused<A, B, C, D: Iterator<Item = (B, C)>, E>(b: B, c: C) {\n    |                ^^       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^\n    |\n    = help: consider removing the parameters\n \n error: type parameter goes unused in function definition\n-  --> $DIR/extra_unused_type_parameters.rs:49:22\n+  --> $DIR/extra_unused_type_parameters.rs:60:22\n    |\n-LL |     fn unused_ty_impl<T>(&self) {}\n+LL |     fn unused_ty_impl<T>(&self) {\n    |                      ^^^\n    |\n    = help: consider removing the parameter\n \n-error: aborting due to 7 previous errors\n+error: type parameters go unused in function definition\n+  --> $DIR/extra_unused_type_parameters.rs:82:17\n+   |\n+LL | fn unused_opaque<A, B>(dummy: impl Default) {\n+   |                 ^^^^^^\n+   |\n+   = help: consider removing the parameters\n+\n+error: type parameter goes unused in function definition\n+  --> $DIR/extra_unused_type_parameters.rs:95:58\n+   |\n+LL |     fn unused_with_priv_trait_bound<T: private::Private, U>() {\n+   |                                                          ^\n+   |\n+   = help: consider removing the parameter\n+\n+error: aborting due to 9 previous errors\n "}, {"sha": "cd2f70ee8b0292f09c4c2a3f1354377136c677ac", "filename": "tests/ui/format.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fformat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fformat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// aux-build: proc_macro_with_span.rs\n #![warn(clippy::useless_format)]\n #![allow(\n     unused_tuple_struct_fields,\n@@ -9,6 +10,8 @@\n     clippy::uninlined_format_args\n )]\n \n+extern crate proc_macro_with_span;\n+\n struct Foo(pub String);\n \n macro_rules! foo {\n@@ -87,4 +90,7 @@ fn main() {\n     let _ = abc.to_string();\n     let xx = \"xx\";\n     let _ = xx.to_string();\n+\n+    // Issue #10148\n+    println!(proc_macro_with_span::with_span!(\"\"something \"\"));\n }"}, {"sha": "c22345a79d4329bc734c541a6a4d2b025f3d7c62", "filename": "tests/ui/format.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+// aux-build: proc_macro_with_span.rs\n #![warn(clippy::useless_format)]\n #![allow(\n     unused_tuple_struct_fields,\n@@ -9,6 +10,8 @@\n     clippy::uninlined_format_args\n )]\n \n+extern crate proc_macro_with_span;\n+\n struct Foo(pub String);\n \n macro_rules! foo {\n@@ -89,4 +92,7 @@ fn main() {\n     let _ = format!(\"{abc}\");\n     let xx = \"xx\";\n     let _ = format!(\"{xx}\");\n+\n+    // Issue #10148\n+    println!(proc_macro_with_span::with_span!(\"\"something \"\"));\n }"}, {"sha": "a0e5d5c8ad21f21b64b13aa2052e5bdd1fd08b87", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,25 +1,25 @@\n error: useless use of `format!`\n-  --> $DIR/format.rs:19:5\n+  --> $DIR/format.rs:22:5\n    |\n LL |     format!(\"foo\");\n    |     ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n    |\n    = note: `-D clippy::useless-format` implied by `-D warnings`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:20:5\n+  --> $DIR/format.rs:23:5\n    |\n LL |     format!(\"{{}}\");\n    |     ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{}\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:21:5\n+  --> $DIR/format.rs:24:5\n    |\n LL |     format!(\"{{}} abc {{}}\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{} abc {}\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:22:5\n+  --> $DIR/format.rs:25:5\n    |\n LL | /     format!(\n LL | |         r##\"foo {{}}\n@@ -34,67 +34,67 @@ LL ~ \" bar\"##.to_string();\n    |\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:27:13\n+  --> $DIR/format.rs:30:13\n    |\n LL |     let _ = format!(\"\");\n    |             ^^^^^^^^^^^ help: consider using `String::new()`: `String::new()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:29:5\n+  --> $DIR/format.rs:32:5\n    |\n LL |     format!(\"{}\", \"foo\");\n    |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:37:5\n+  --> $DIR/format.rs:40:5\n    |\n LL |     format!(\"{}\", arg);\n    |     ^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:67:5\n+  --> $DIR/format.rs:70:5\n    |\n LL |     format!(\"{}\", 42.to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `42.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:69:5\n+  --> $DIR/format.rs:72:5\n    |\n LL |     format!(\"{}\", x.display().to_string());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.display().to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:73:18\n+  --> $DIR/format.rs:76:18\n    |\n LL |     let _ = Some(format!(\"{}\", a + \"bar\"));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `a + \"bar\"`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:77:22\n+  --> $DIR/format.rs:80:22\n    |\n LL |     let _s: String = format!(\"{}\", &*v.join(\"/n\"));\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `(&*v.join(\"/n\")).to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:83:13\n+  --> $DIR/format.rs:86:13\n    |\n LL |     let _ = format!(\"{x}\");\n    |             ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:85:13\n+  --> $DIR/format.rs:88:13\n    |\n LL |     let _ = format!(\"{y}\", y = x);\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:89:13\n+  --> $DIR/format.rs:92:13\n    |\n LL |     let _ = format!(\"{abc}\");\n    |             ^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `abc.to_string()`\n \n error: useless use of `format!`\n-  --> $DIR/format.rs:91:13\n+  --> $DIR/format.rs:94:13\n    |\n LL |     let _ = format!(\"{xx}\");\n    |             ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `xx.to_string()`"}, {"sha": "07560101a4167cb2047d8ad33a91991cbe773e7f", "filename": "tests/ui/impl_trait_in_params.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fimpl_trait_in_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fimpl_trait_in_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl_trait_in_params.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,17 @@\n+#![allow(unused)]\n+#![warn(clippy::impl_trait_in_params)]\n+\n+pub trait Trait {}\n+pub trait AnotherTrait<T> {}\n+\n+// Should warn\n+pub fn a(_: impl Trait) {}\n+pub fn c<C: Trait>(_: C, _: impl Trait) {}\n+fn d(_: impl AnotherTrait<u32>) {}\n+\n+// Shouldn't warn\n+\n+pub fn b<B: Trait>(_: B) {}\n+fn e<T: AnotherTrait<u32>>(_: T) {}\n+\n+fn main() {}"}, {"sha": "acfcc21445ebcbaae7225f261276f4a14b3335db", "filename": "tests/ui/impl_trait_in_params.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fimpl_trait_in_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fimpl_trait_in_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl_trait_in_params.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,25 @@\n+error: '`impl Trait` used as a function parameter'\n+  --> $DIR/impl_trait_in_params.rs:8:13\n+   |\n+LL | pub fn a(_: impl Trait) {}\n+   |             ^^^^^^^^^^\n+   |\n+   = note: `-D clippy::impl-trait-in-params` implied by `-D warnings`\n+help: add a type paremeter\n+   |\n+LL | pub fn a<{ /* Generic name */ }: Trait>(_: impl Trait) {}\n+   |         +++++++++++++++++++++++++++++++\n+\n+error: '`impl Trait` used as a function parameter'\n+  --> $DIR/impl_trait_in_params.rs:9:29\n+   |\n+LL | pub fn c<C: Trait>(_: C, _: impl Trait) {}\n+   |                             ^^^^^^^^^^\n+   |\n+help: add a type paremeter\n+   |\n+LL | pub fn c<C: Trait, { /* Generic name */ }: Trait>(_: C, _: impl Trait) {}\n+   |                  +++++++++++++++++++++++++++++++\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ea18dac0683361ea65a077b3e17824b4f9b5201d", "filename": "tests/ui/large_digit_groups.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Flarge_digit_groups.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Flarge_digit_groups.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -11,15 +11,15 @@ fn main() {\n     let _good = (\n         0b1011_i64,\n         0o1_234_u32,\n-        0x0123_4567,\n+        0x1_234_567,\n         1_2345_6789,\n         1234_f32,\n         1_234.12_f32,\n         1_234.123_f32,\n         1.123_4_f32,\n     );\n     let _bad = (\n-        0b11_0110_i64,\n+        0b1_10110_i64,\n         0xdead_beef_usize,\n         123_456_f32,\n         123_456.12_f32,"}, {"sha": "19c0fae98a645188e3d15050e58c6d065e524dc7", "filename": "tests/ui/large_digit_groups.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Flarge_digit_groups.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Flarge_digit_groups.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,22 +1,10 @@\n-error: digits of hex or binary literal not grouped by four\n-  --> $DIR/large_digit_groups.rs:14:9\n-   |\n-LL |         0x1_234_567,\n-   |         ^^^^^^^^^^^ help: consider: `0x0123_4567`\n-   |\n-   = note: `-D clippy::unusual-byte-groupings` implied by `-D warnings`\n-\n-error: digits of hex or binary literal not grouped by four\n-  --> $DIR/large_digit_groups.rs:22:9\n-   |\n-LL |         0b1_10110_i64,\n-   |         ^^^^^^^^^^^^^ help: consider: `0b11_0110_i64`\n-\n-error: digits of hex or binary literal not grouped by four\n+error: digits of hex, binary or octal literal not in groups of equal size\n   --> $DIR/large_digit_groups.rs:23:9\n    |\n LL |         0xd_e_adbee_f_usize,\n    |         ^^^^^^^^^^^^^^^^^^^ help: consider: `0xdead_beef_usize`\n+   |\n+   = note: `-D clippy::unusual-byte-groupings` implied by `-D warnings`\n \n error: digit groups should be smaller\n   --> $DIR/large_digit_groups.rs:24:9\n@@ -44,5 +32,5 @@ error: digit groups should be smaller\n LL |         1_23456.12345_6_f64,\n    |         ^^^^^^^^^^^^^^^^^^^ help: consider: `123_456.123_456_f64`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "bcb33c5c7e37e713f2b04e0d276e2d16eda5f44a", "filename": "tests/ui/let_underscore_untyped.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Flet_underscore_untyped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Flet_underscore_untyped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_untyped.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,54 @@\n+#![allow(unused)]\n+#![warn(clippy::let_underscore_untyped)]\n+\n+use std::future::Future;\n+use std::{boxed::Box, fmt::Display};\n+\n+fn a() -> u32 {\n+    1\n+}\n+\n+fn b<T>(x: T) -> T {\n+    x\n+}\n+\n+fn c() -> impl Display {\n+    1\n+}\n+\n+fn d(x: &u32) -> &u32 {\n+    x\n+}\n+\n+fn e() -> Result<u32, ()> {\n+    Ok(1)\n+}\n+\n+fn f() -> Box<dyn Display> {\n+    Box::new(1)\n+}\n+\n+fn main() {\n+    let _ = a();\n+    let _ = b(1);\n+    let _ = c();\n+    let _ = d(&1);\n+    let _ = e();\n+    let _ = f();\n+\n+    _ = a();\n+    _ = b(1);\n+    _ = c();\n+    _ = d(&1);\n+    _ = e();\n+    _ = f();\n+\n+    let _: u32 = a();\n+    let _: u32 = b(1);\n+    let _: &u32 = d(&1);\n+    let _: Result<_, _> = e();\n+    let _: Box<_> = f();\n+\n+    #[allow(clippy::let_underscore_untyped)]\n+    let _ = a();\n+}"}, {"sha": "36c3d1214d6b3e1831a5b605fdf1e351466e7b4f", "filename": "tests/ui/let_underscore_untyped.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Flet_underscore_untyped.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Flet_underscore_untyped.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_untyped.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,51 @@\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:32:5\n+   |\n+LL |     let _ = a();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+   = note: `-D clippy::let-underscore-untyped` implied by `-D warnings`\n+\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:33:5\n+   |\n+LL |     let _ = b(1);\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:34:5\n+   |\n+LL |     let _ = c();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:35:5\n+   |\n+LL |     let _ = d(&1);\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:36:5\n+   |\n+LL |     let _ = e();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+\n+error: non-binding `let` without a type annotation\n+  --> $DIR/let_underscore_untyped.rs:37:5\n+   |\n+LL |     let _ = f();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = help: consider adding a type annotation or removing the `let` keyword\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "9bc7948c7cc1fc615fa86ba7a088a8b9640698be", "filename": "tests/ui/literals.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fliterals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fliterals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -121,20 +121,14 @@ error: digits grouped inconsistently by underscores\n LL |     let fail23 = 3__16___23;\n    |                  ^^^^^^^^^^ help: consider: `31_623`\n \n-error: digits of hex or binary literal not grouped by four\n+error: digits of hex, binary or octal literal not in groups of equal size\n   --> $DIR/literals.rs:38:18\n    |\n LL |     let fail24 = 0xAB_ABC_AB;\n    |                  ^^^^^^^^^^^ help: consider: `0x0ABA_BCAB`\n    |\n    = note: `-D clippy::unusual-byte-groupings` implied by `-D warnings`\n \n-error: digits of hex or binary literal not grouped by four\n-  --> $DIR/literals.rs:39:18\n-   |\n-LL |     let fail25 = 0b01_100_101;\n-   |                  ^^^^^^^^^^^^ help: consider: `0b0110_0101`\n-\n error: this is a decimal constant\n   --> $DIR/literals.rs:46:13\n    |\n@@ -168,5 +162,5 @@ help: if you mean to use a decimal constant, remove the `0` to avoid confusion\n LL |     let _ = 89;\n    |             ~~\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 20 previous errors\n "}, {"sha": "d175597a44a63e0b6c8e319fc0f29efe708943fd", "filename": "tests/ui/manual_let_else.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -248,4 +248,15 @@ fn not_fire() {\n         Some(value) => value,\n         _ => macro_call!(),\n     };\n+\n+    // Issue 10296\n+    // The let/else block in the else part is not divergent despite the presence of return\n+    let _x = if let Some(x) = Some(1) {\n+        x\n+    } else {\n+        let Some(_z) = Some(3) else {\n+            return\n+        };\n+        1\n+    };\n }"}, {"sha": "73b74679125978913c96a650c10113b27f3d77b3", "filename": "tests/ui/manual_let_else_match.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmanual_let_else_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmanual_let_else_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else_match.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -42,13 +42,13 @@ fn fire() {\n     loop {\n         // More complex pattern for the identity arm and diverging arm\n         let v = match h() {\n-            (Some(_), Some(_)) | (None, None) => continue,\n             (Some(v), None) | (None, Some(v)) => v,\n+            (Some(_), Some(_)) | (None, None) => continue,\n         };\n         // Custom enums are supported as long as the \"else\" arm is a simple _\n         let v = match build_enum() {\n-            _ => continue,\n             Variant::Bar(v) | Variant::Baz(v) => v,\n+            _ => continue,\n         };\n     }\n \n@@ -71,6 +71,12 @@ fn fire() {\n         Variant::Bar(_) | Variant::Baz(_) => (),\n         _ => return,\n     };\n+\n+    let data = [1_u8, 2, 3, 4, 0, 0, 0, 0];\n+    let data = match data.as_slice() {\n+        [data @ .., 0, 0, 0, 0] | [data @ .., 0, 0] | [data @ .., 0] => data,\n+        _ => return,\n+    };\n }\n \n fn not_fire() {\n@@ -125,4 +131,23 @@ fn not_fire() {\n         Ok(v) | Err(Variant::Bar(v) | Variant::Baz(v)) => v,\n         Err(Variant::Foo) => return,\n     };\n+\n+    // Issue 10241\n+    // The non-divergent arm arrives in second position and\n+    // may cover values already matched in the first arm.\n+    let v = match h() {\n+        (Some(_), Some(_)) | (None, None) => return,\n+        (Some(v), _) | (None, Some(v)) => v,\n+    };\n+\n+    let v = match build_enum() {\n+        _ => return,\n+        Variant::Bar(v) | Variant::Baz(v) => v,\n+    };\n+\n+    let data = [1_u8, 2, 3, 4, 0, 0, 0, 0];\n+    let data = match data.as_slice() {\n+        [] | [0, 0] => return,\n+        [data @ .., 0, 0, 0, 0] | [data @ .., 0, 0] | [data @ ..] => data,\n+    };\n }"}, {"sha": "7abaa0b85d23ec2e914ed319d4e955103dd08819", "filename": "tests/ui/manual_let_else_match.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmanual_let_else_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmanual_let_else_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else_match.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -22,17 +22,17 @@ error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else_match.rs:44:9\n    |\n LL | /         let v = match h() {\n-LL | |             (Some(_), Some(_)) | (None, None) => continue,\n LL | |             (Some(v), None) | (None, Some(v)) => v,\n+LL | |             (Some(_), Some(_)) | (None, None) => continue,\n LL | |         };\n    | |__________^ help: consider writing: `let ((Some(v), None) | (None, Some(v))) = h() else { continue };`\n \n error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else_match.rs:49:9\n    |\n LL | /         let v = match build_enum() {\n-LL | |             _ => continue,\n LL | |             Variant::Bar(v) | Variant::Baz(v) => v,\n+LL | |             _ => continue,\n LL | |         };\n    | |__________^ help: consider writing: `let (Variant::Bar(v) | Variant::Baz(v)) = build_enum() else { continue };`\n \n@@ -63,5 +63,14 @@ LL | |         _ => return,\n LL | |     };\n    | |______^ help: consider writing: `let (Variant::Bar(_) | Variant::Baz(_)) = f else { return };`\n \n-error: aborting due to 7 previous errors\n+error: this could be rewritten as `let...else`\n+  --> $DIR/manual_let_else_match.rs:76:5\n+   |\n+LL | /     let data = match data.as_slice() {\n+LL | |         [data @ .., 0, 0, 0, 0] | [data @ .., 0, 0] | [data @ .., 0] => data,\n+LL | |         _ => return,\n+LL | |     };\n+   | |______^ help: consider writing: `let ([data @ .., 0, 0, 0, 0] | [data @ .., 0, 0] | [data @ .., 0]) = data.as_slice() else { return };`\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "8e2f11389f8988442f8bcbf80fc724be571d5809", "filename": "tests/ui/map_flatten_fixable.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmap_flatten_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmap_flatten_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::let_underscore_untyped)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n #![allow(clippy::redundant_closure)]"}, {"sha": "a783a99c4ffd39907be0348b289af6c702bdbfe8", "filename": "tests/ui/map_flatten_fixable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmap_flatten_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmap_flatten_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,6 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::all, clippy::pedantic)]\n+#![allow(clippy::let_underscore_untyped)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::map_identity)]\n #![allow(clippy::redundant_closure)]"}, {"sha": "c91f0b9ae94fec2626997de308d60c006d6ffaa4", "filename": "tests/ui/map_flatten_fixable.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmap_flatten_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmap_flatten_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten_fixable.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,49 +1,49 @@\n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:17:47\n+  --> $DIR/map_flatten_fixable.rs:18:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(option_id)`\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n \n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:18:47\n+  --> $DIR/map_flatten_fixable.rs:19:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(option_id_ref)`\n \n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:19:47\n+  --> $DIR/map_flatten_fixable.rs:20:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(option_id_closure)`\n \n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:20:47\n+  --> $DIR/map_flatten_fixable.rs:21:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `filter_map` and remove the `.flatten()`: `filter_map(|x| x.checked_add(1))`\n \n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:23:47\n+  --> $DIR/map_flatten_fixable.rs:24:47\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n    |                                               ^^^^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `flat_map` and remove the `.flatten()`: `flat_map(|x| 0..x)`\n \n error: called `map(..).flatten()` on `Option`\n-  --> $DIR/map_flatten_fixable.rs:26:40\n+  --> $DIR/map_flatten_fixable.rs:27:40\n    |\n LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n    |                                        ^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `and_then` and remove the `.flatten()`: `and_then(|x| x)`\n \n error: called `map(..).flatten()` on `Result`\n-  --> $DIR/map_flatten_fixable.rs:29:42\n+  --> $DIR/map_flatten_fixable.rs:30:42\n    |\n LL |     let _: Result<_, &str> = (Ok(Ok(1))).map(|x| x).flatten();\n    |                                          ^^^^^^^^^^^^^^^^^^^^ help: try replacing `map` with `and_then` and remove the `.flatten()`: `and_then(|x| x)`\n \n error: called `map(..).flatten()` on `Iterator`\n-  --> $DIR/map_flatten_fixable.rs:38:10\n+  --> $DIR/map_flatten_fixable.rs:39:10\n    |\n LL |           .map(|n| match n {\n    |  __________^\n@@ -72,7 +72,7 @@ LL ~         });\n    |\n \n error: called `map(..).flatten()` on `Option`\n-  --> $DIR/map_flatten_fixable.rs:58:10\n+  --> $DIR/map_flatten_fixable.rs:59:10\n    |\n LL |           .map(|_| {\n    |  __________^"}, {"sha": "1519e4da9348a482ca2fda1dd94e7373b722e173", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -4,6 +4,7 @@\n #![allow(\n     clippy::disallowed_names,\n     clippy::default_trait_access,\n+    clippy::let_underscore_untyped,\n     clippy::missing_docs_in_private_items,\n     clippy::missing_safety_doc,\n     clippy::non_ascii_literal,"}, {"sha": "4643e09e2702835ac9803b6050b49f1ba7267171", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,5 +1,5 @@\n error: methods called `new` usually return `Self`\n-  --> $DIR/methods.rs:104:5\n+  --> $DIR/methods.rs:105:5\n    |\n LL | /     fn new() -> i32 {\n LL | |         0\n@@ -9,7 +9,7 @@ LL | |     }\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead\n-  --> $DIR/methods.rs:125:13\n+  --> $DIR/methods.rs:126:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^"}, {"sha": "bbbb3cf621e41446426a319b1898039bdc8ca5f1", "filename": "tests/ui/must_use_candidates.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmust_use_candidates.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmust_use_candidates.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -84,7 +84,7 @@ pub unsafe fn mutates_static() -> usize {\n }\n \n #[no_mangle]\n-pub fn unmangled(i: bool) -> bool {\n+pub extern \"C\" fn unmangled(i: bool) -> bool {\n     !i\n }\n "}, {"sha": "94d3c83bdb93a91b436c7ee30d4d33af5a0f7332", "filename": "tests/ui/must_use_candidates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmust_use_candidates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fmust_use_candidates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -84,7 +84,7 @@ pub unsafe fn mutates_static() -> usize {\n }\n \n #[no_mangle]\n-pub fn unmangled(i: bool) -> bool {\n+pub extern \"C\" fn unmangled(i: bool) -> bool {\n     !i\n }\n "}, {"sha": "f0f1f9298ac65635416280a5a6600d6282af5d5c", "filename": "tests/ui/needless_lifetimes.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fneedless_lifetimes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fneedless_lifetimes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -516,6 +516,16 @@ mod in_macro {\n \n     // no lint on external macro\n     macro_rules::needless_lifetime!();\n+\n+    macro_rules! expanded_lifetime {\n+        ($l:lifetime) => {\n+            fn f<$l>(arg: &$l str) -> &$l str {\n+                arg\n+            }\n+        }\n+    }\n+\n+    expanded_lifetime!('a);\n }\n \n mod issue5787 {"}, {"sha": "ddfd10430038effb10fdfe1a889835a0af6d564d", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -516,6 +516,16 @@ mod in_macro {\n \n     // no lint on external macro\n     macro_rules::needless_lifetime!();\n+\n+    macro_rules! expanded_lifetime {\n+        ($l:lifetime) => {\n+            fn f<$l>(arg: &$l str) -> &$l str {\n+                arg\n+            }\n+        }\n+    }\n+\n+    expanded_lifetime!('a);\n }\n \n mod issue5787 {"}, {"sha": "0f525dd294c9b6e2b8abb3e847836a7f6861f875", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -297,4 +297,14 @@ fn issue10051() -> Result<String, String> {\n     }\n }\n \n+mod issue10049 {\n+    fn single() -> u32 {\n+        if true { 1 } else { 2 }\n+    }\n+\n+    fn multiple(b1: bool, b2: bool, b3: bool) -> u32 {\n+        (if b1 { 0 } else { 1 } | if b2 { 2 } else { 3 } | if b3 { 4 } else { 5 })\n+    }\n+}\n+\n fn main() {}"}, {"sha": "a1db8375d95b9ac0480f407053f298bd4beca105", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -307,4 +307,14 @@ fn issue10051() -> Result<String, String> {\n     }\n }\n \n+mod issue10049 {\n+    fn single() -> u32 {\n+        return if true { 1 } else { 2 };\n+    }\n+\n+    fn multiple(b1: bool, b2: bool, b3: bool) -> u32 {\n+        return if b1 { 0 } else { 1 } | if b2 { 2 } else { 3 } | if b3 { 4 } else { 5 };\n+    }\n+}\n+\n fn main() {}"}, {"sha": "87d0cd3e14cfabb315e5ebe2c528d6bc73f5cfa6", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -418,5 +418,21 @@ LL |         return Err(format!(\"err!\"));\n    |\n    = help: remove `return`\n \n-error: aborting due to 50 previous errors\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:312:9\n+   |\n+LL |         return if true { 1 } else { 2 };\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:316:9\n+   |\n+LL |         return if b1 { 0 } else { 1 } | if b2 { 2 } else { 3 } | if b3 { 4 } else { 5 };\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return` and wrap the sequence with parentheses\n+\n+error: aborting due to 52 previous errors\n "}, {"sha": "29821ff96fc0f66bc6f056f3bdc3810f1a0e26b9", "filename": "tests/ui/never_loop.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -250,6 +250,51 @@ pub fn test20() {\n     }\n }\n \n+pub fn test21() {\n+    loop {\n+        'a: {\n+            {}\n+            break 'a;\n+        }\n+    }\n+}\n+\n+// Issue 10304: code after break from block was not considered\n+// unreachable code and was considered for further analysis of\n+// whether the loop would ever be executed or not.\n+pub fn test22() {\n+    for _ in 0..10 {\n+        'block: {\n+            break 'block;\n+            return;\n+        }\n+        println!(\"looped\");\n+    }\n+}\n+\n+pub fn test23() {\n+    for _ in 0..10 {\n+        'block: {\n+            for _ in 0..20 {\n+                break 'block;\n+            }\n+        }\n+        println!(\"looped\");\n+    }\n+}\n+\n+pub fn test24() {\n+    'a: for _ in 0..10 {\n+        'b: {\n+            let x = Some(1);\n+            match x {\n+                None => break 'a,\n+                Some(_) => break 'b,\n+            }\n+        }\n+    }\n+}\n+\n fn main() {\n     test1();\n     test2();"}, {"sha": "704d448644e289428a97389a4651ec96a11a10a3", "filename": "tests/ui/never_loop.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fnever_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fnever_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -126,5 +126,18 @@ LL | |         }\n LL | |     }\n    | |_____^\n \n-error: aborting due to 11 previous errors\n+error: this loop never actually loops\n+  --> $DIR/never_loop.rs:278:13\n+   |\n+LL | /             for _ in 0..20 {\n+LL | |                 break 'block;\n+LL | |             }\n+   | |_____________^\n+   |\n+help: if you need the first element of the iterator, try writing\n+   |\n+LL |             if let Some(_) = (0..20).next() {\n+   |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 12 previous errors\n "}, {"sha": "d18dec22a8bbe1a1449689599165e7484a48c6fa", "filename": "tests/ui/no_mangle_with_rust_abi.fixed", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fno_mangle_with_rust_abi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fno_mangle_with_rust_abi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_mangle_with_rust_abi.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,48 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::no_mangle_with_rust_abi)]\n+\n+#[no_mangle]\n+extern \"C\" fn rust_abi_fn_one(arg_one: u32, arg_two: usize) {}\n+\n+#[no_mangle]\n+pub extern \"C\" fn rust_abi_fn_two(arg_one: u32, arg_two: usize) {}\n+\n+/// # Safety\n+/// This function shouldn't be called unless the horsemen are ready\n+#[no_mangle]\n+pub unsafe extern \"C\" fn rust_abi_fn_three(arg_one: u32, arg_two: usize) {}\n+\n+/// # Safety\n+/// This function shouldn't be called unless the horsemen are ready\n+#[no_mangle]\n+unsafe extern \"C\" fn rust_abi_fn_four(arg_one: u32, arg_two: usize) {}\n+\n+#[no_mangle]\n+extern \"C\" fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n+    arg_one: u32,\n+    arg_two: usize,\n+) -> u32 {\n+    0\n+}\n+\n+// Must not run on functions that explicitly opt in to Rust ABI with `extern \"Rust\"`\n+#[no_mangle]\n+#[rustfmt::skip]\n+extern \"Rust\" fn rust_abi_fn_explicit_opt_in(arg_one: u32, arg_two: usize) {}\n+\n+fn rust_abi_fn_again(arg_one: u32, arg_two: usize) {}\n+\n+#[no_mangle]\n+extern \"C\" fn c_abi_fn(arg_one: u32, arg_two: usize) {}\n+\n+extern \"C\" fn c_abi_fn_again(arg_one: u32, arg_two: usize) {}\n+\n+extern \"C\" {\n+    fn c_abi_in_block(arg_one: u32, arg_two: usize);\n+}\n+\n+fn main() {\n+    // test code goes here\n+}"}, {"sha": "481e1b6d961971a4a95e36ab5c967e2fdd4a18fc", "filename": "tests/ui/no_mangle_with_rust_abi.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fno_mangle_with_rust_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fno_mangle_with_rust_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_mangle_with_rust_abi.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,48 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::no_mangle_with_rust_abi)]\n+\n+#[no_mangle]\n+fn rust_abi_fn_one(arg_one: u32, arg_two: usize) {}\n+\n+#[no_mangle]\n+pub fn rust_abi_fn_two(arg_one: u32, arg_two: usize) {}\n+\n+/// # Safety\n+/// This function shouldn't be called unless the horsemen are ready\n+#[no_mangle]\n+pub unsafe fn rust_abi_fn_three(arg_one: u32, arg_two: usize) {}\n+\n+/// # Safety\n+/// This function shouldn't be called unless the horsemen are ready\n+#[no_mangle]\n+unsafe fn rust_abi_fn_four(arg_one: u32, arg_two: usize) {}\n+\n+#[no_mangle]\n+fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n+    arg_one: u32,\n+    arg_two: usize,\n+) -> u32 {\n+    0\n+}\n+\n+// Must not run on functions that explicitly opt in to Rust ABI with `extern \"Rust\"`\n+#[no_mangle]\n+#[rustfmt::skip]\n+extern \"Rust\" fn rust_abi_fn_explicit_opt_in(arg_one: u32, arg_two: usize) {}\n+\n+fn rust_abi_fn_again(arg_one: u32, arg_two: usize) {}\n+\n+#[no_mangle]\n+extern \"C\" fn c_abi_fn(arg_one: u32, arg_two: usize) {}\n+\n+extern \"C\" fn c_abi_fn_again(arg_one: u32, arg_two: usize) {}\n+\n+extern \"C\" {\n+    fn c_abi_in_block(arg_one: u32, arg_two: usize);\n+}\n+\n+fn main() {\n+    // test code goes here\n+}"}, {"sha": "71517d318095e797fd28eb5385ab6bb120990552", "filename": "tests/ui/no_mangle_with_rust_abi.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fno_mangle_with_rust_abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fno_mangle_with_rust_abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_mangle_with_rust_abi.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,45 @@\n+error: attribute #[no_mangle] set on a Rust ABI function\n+  --> $DIR/no_mangle_with_rust_abi.rs:7:1\n+   |\n+LL | fn rust_abi_fn_one(arg_one: u32, arg_two: usize) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `extern \"C\" fn rust_abi_fn_one(arg_one: u32, arg_two: usize)`\n+   |\n+   = note: `-D clippy::no-mangle-with-rust-abi` implied by `-D warnings`\n+\n+error: attribute #[no_mangle] set on a Rust ABI function\n+  --> $DIR/no_mangle_with_rust_abi.rs:10:1\n+   |\n+LL | pub fn rust_abi_fn_two(arg_one: u32, arg_two: usize) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `pub extern \"C\" fn rust_abi_fn_two(arg_one: u32, arg_two: usize)`\n+\n+error: attribute #[no_mangle] set on a Rust ABI function\n+  --> $DIR/no_mangle_with_rust_abi.rs:15:1\n+   |\n+LL | pub unsafe fn rust_abi_fn_three(arg_one: u32, arg_two: usize) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `pub unsafe extern \"C\" fn rust_abi_fn_three(arg_one: u32, arg_two: usize)`\n+\n+error: attribute #[no_mangle] set on a Rust ABI function\n+  --> $DIR/no_mangle_with_rust_abi.rs:20:1\n+   |\n+LL | unsafe fn rust_abi_fn_four(arg_one: u32, arg_two: usize) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `unsafe extern \"C\" fn rust_abi_fn_four(arg_one: u32, arg_two: usize)`\n+\n+error: attribute #[no_mangle] set on a Rust ABI function\n+  --> $DIR/no_mangle_with_rust_abi.rs:23:1\n+   |\n+LL | / fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n+LL | |     arg_one: u32,\n+LL | |     arg_two: usize,\n+LL | | ) -> u32 {\n+   | |________^\n+   |\n+help: try\n+   |\n+LL + extern \"C\" fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n+LL +     arg_one: u32,\n+LL +     arg_two: usize,\n+LL ~ ) -> u32 {\n+   |\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "8c3ef789697fc062ecc66b62fbca87ae0200892c", "filename": "tests/ui/question_mark_used.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fquestion_mark_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fquestion_mark_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark_used.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,15 @@\n+// non rustfixable\n+#![allow(unreachable_code)]\n+#![allow(dead_code)]\n+#![warn(clippy::question_mark_used)]\n+\n+fn other_function() -> Option<i32> {\n+    Some(32)\n+}\n+\n+fn my_function() -> Option<i32> {\n+    other_function()?;\n+    None\n+}\n+\n+fn main() {}"}, {"sha": "8b5fcbcdbfd6cc4ec38cc2994456bd11fe8113eb", "filename": "tests/ui/question_mark_used.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fquestion_mark_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fquestion_mark_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark_used.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,11 @@\n+error: question mark operator was used\n+  --> $DIR/question_mark_used.rs:11:5\n+   |\n+LL |     other_function()?;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a custom macro or match expression\n+   = note: `-D clippy::question-mark-used` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "da998c610bd29429245e81581dd909a6a4b5fa64", "filename": "tests/ui/significant_drop_tightening.fixed", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fsignificant_drop_tightening.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fsignificant_drop_tightening.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_tightening.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,84 @@\n+// run-rustfix\n+\n+#![warn(clippy::significant_drop_tightening)]\n+\n+use std::sync::Mutex;\n+\n+pub fn complex_return_triggers_the_lint() -> i32 {\n+    fn foo() -> i32 {\n+        1\n+    }\n+    let mutex = Mutex::new(1);\n+    let lock = mutex.lock().unwrap();\n+    let _ = *lock;\n+    let _ = *lock;\n+    drop(lock);\n+    foo()\n+}\n+\n+pub fn path_return_can_be_ignored() -> i32 {\n+    let mutex = Mutex::new(1);\n+    let lock = mutex.lock().unwrap();\n+    let rslt = *lock;\n+    let _ = *lock;\n+    rslt\n+}\n+\n+pub fn post_bindings_can_be_ignored() {\n+    let mutex = Mutex::new(1);\n+    let lock = mutex.lock().unwrap();\n+    let rslt = *lock;\n+    let another = rslt;\n+    let _ = another;\n+}\n+\n+pub fn unnecessary_contention_with_multiple_owned_results() {\n+    {\n+        let mutex = Mutex::new(1i32);\n+        let lock = mutex.lock().unwrap();\n+        let _ = lock.abs();\n+        let _ = lock.is_positive();\n+    }\n+\n+    {\n+        let mutex = Mutex::new(1i32);\n+        let lock = mutex.lock().unwrap();\n+        let rslt0 = lock.abs();\n+        let rslt1 = lock.is_positive();\n+        drop(lock);\n+        do_heavy_computation_that_takes_time((rslt0, rslt1));\n+    }\n+}\n+\n+pub fn unnecessary_contention_with_single_owned_results() {\n+    {\n+        let mutex = Mutex::new(1i32);\n+        let lock = mutex.lock().unwrap();\n+        let _ = lock.abs();\n+    }\n+    {\n+        let mutex = Mutex::new(vec![1i32]);\n+        let mut lock = mutex.lock().unwrap();\n+        lock.clear();\n+    }\n+\n+    {\n+        let mutex = Mutex::new(1i32);\n+        \n+        let rslt0 = mutex.lock().unwrap().abs();\n+        \n+        do_heavy_computation_that_takes_time(rslt0);\n+    }\n+    {\n+        let mutex = Mutex::new(vec![1i32]);\n+        \n+        mutex.lock().unwrap().clear();\n+        \n+        do_heavy_computation_that_takes_time(());\n+    }\n+}\n+\n+// Marker used for illustration purposes.\n+pub fn do_heavy_computation_that_takes_time<T>(_: T) {}\n+\n+fn main() {}"}, {"sha": "83823f95f68ac502b292e027e10f78d6ed770f0c", "filename": "tests/ui/significant_drop_tightening.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fsignificant_drop_tightening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fsignificant_drop_tightening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_tightening.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,80 @@\n+// run-rustfix\n+\n+#![warn(clippy::significant_drop_tightening)]\n+\n+use std::sync::Mutex;\n+\n+pub fn complex_return_triggers_the_lint() -> i32 {\n+    fn foo() -> i32 {\n+        1\n+    }\n+    let mutex = Mutex::new(1);\n+    let lock = mutex.lock().unwrap();\n+    let _ = *lock;\n+    let _ = *lock;\n+    foo()\n+}\n+\n+pub fn path_return_can_be_ignored() -> i32 {\n+    let mutex = Mutex::new(1);\n+    let lock = mutex.lock().unwrap();\n+    let rslt = *lock;\n+    let _ = *lock;\n+    rslt\n+}\n+\n+pub fn post_bindings_can_be_ignored() {\n+    let mutex = Mutex::new(1);\n+    let lock = mutex.lock().unwrap();\n+    let rslt = *lock;\n+    let another = rslt;\n+    let _ = another;\n+}\n+\n+pub fn unnecessary_contention_with_multiple_owned_results() {\n+    {\n+        let mutex = Mutex::new(1i32);\n+        let lock = mutex.lock().unwrap();\n+        let _ = lock.abs();\n+        let _ = lock.is_positive();\n+    }\n+\n+    {\n+        let mutex = Mutex::new(1i32);\n+        let lock = mutex.lock().unwrap();\n+        let rslt0 = lock.abs();\n+        let rslt1 = lock.is_positive();\n+        do_heavy_computation_that_takes_time((rslt0, rslt1));\n+    }\n+}\n+\n+pub fn unnecessary_contention_with_single_owned_results() {\n+    {\n+        let mutex = Mutex::new(1i32);\n+        let lock = mutex.lock().unwrap();\n+        let _ = lock.abs();\n+    }\n+    {\n+        let mutex = Mutex::new(vec![1i32]);\n+        let mut lock = mutex.lock().unwrap();\n+        lock.clear();\n+    }\n+\n+    {\n+        let mutex = Mutex::new(1i32);\n+        let lock = mutex.lock().unwrap();\n+        let rslt0 = lock.abs();\n+        do_heavy_computation_that_takes_time(rslt0);\n+    }\n+    {\n+        let mutex = Mutex::new(vec![1i32]);\n+        let mut lock = mutex.lock().unwrap();\n+        lock.clear();\n+        do_heavy_computation_that_takes_time(());\n+    }\n+}\n+\n+// Marker used for illustration purposes.\n+pub fn do_heavy_computation_that_takes_time<T>(_: T) {}\n+\n+fn main() {}"}, {"sha": "ab8ce356ec7b5982370502eb92024c26a92532e7", "filename": "tests/ui/significant_drop_tightening.stderr", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fsignificant_drop_tightening.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fsignificant_drop_tightening.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_tightening.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,94 @@\n+error: temporary with significant `Drop` can be early dropped\n+  --> $DIR/significant_drop_tightening.rs:12:9\n+   |\n+LL |   pub fn complex_return_triggers_the_lint() -> i32 {\n+   |  __________________________________________________-\n+LL | |     fn foo() -> i32 {\n+LL | |         1\n+LL | |     }\n+LL | |     let mutex = Mutex::new(1);\n+LL | |     let lock = mutex.lock().unwrap();\n+   | |         ^^^^\n+...  |\n+LL | |     foo()\n+LL | | }\n+   | |_- temporary `lock` is currently being dropped at the end of its contained scope\n+   |\n+   = note: this might lead to unnecessary resource contention\n+   = note: `-D clippy::significant-drop-tightening` implied by `-D warnings`\n+help: drop the temporary after the end of its last usage\n+   |\n+LL ~     let _ = *lock;\n+LL +     drop(lock);\n+   |\n+\n+error: temporary with significant `Drop` can be early dropped\n+  --> $DIR/significant_drop_tightening.rs:44:13\n+   |\n+LL | /     {\n+LL | |         let mutex = Mutex::new(1i32);\n+LL | |         let lock = mutex.lock().unwrap();\n+   | |             ^^^^\n+LL | |         let rslt0 = lock.abs();\n+LL | |         let rslt1 = lock.is_positive();\n+LL | |         do_heavy_computation_that_takes_time((rslt0, rslt1));\n+LL | |     }\n+   | |_____- temporary `lock` is currently being dropped at the end of its contained scope\n+   |\n+   = note: this might lead to unnecessary resource contention\n+help: drop the temporary after the end of its last usage\n+   |\n+LL ~         let rslt1 = lock.is_positive();\n+LL +         drop(lock);\n+   |\n+\n+error: temporary with significant `Drop` can be early dropped\n+  --> $DIR/significant_drop_tightening.rs:65:13\n+   |\n+LL | /     {\n+LL | |         let mutex = Mutex::new(1i32);\n+LL | |         let lock = mutex.lock().unwrap();\n+   | |             ^^^^\n+LL | |         let rslt0 = lock.abs();\n+LL | |         do_heavy_computation_that_takes_time(rslt0);\n+LL | |     }\n+   | |_____- temporary `lock` is currently being dropped at the end of its contained scope\n+   |\n+   = note: this might lead to unnecessary resource contention\n+help: merge the temporary construction with its single usage\n+   |\n+LL ~         \n+LL +         let rslt0 = mutex.lock().unwrap().abs();\n+   |\n+help: remove separated single usage\n+   |\n+LL -         let rslt0 = lock.abs();\n+LL +         \n+   |\n+\n+error: temporary with significant `Drop` can be early dropped\n+  --> $DIR/significant_drop_tightening.rs:71:17\n+   |\n+LL | /     {\n+LL | |         let mutex = Mutex::new(vec![1i32]);\n+LL | |         let mut lock = mutex.lock().unwrap();\n+   | |                 ^^^^\n+LL | |         lock.clear();\n+LL | |         do_heavy_computation_that_takes_time(());\n+LL | |     }\n+   | |_____- temporary `lock` is currently being dropped at the end of its contained scope\n+   |\n+   = note: this might lead to unnecessary resource contention\n+help: merge the temporary construction with its single usage\n+   |\n+LL ~         \n+LL +         mutex.lock().unwrap().clear();\n+   |\n+help: remove separated single usage\n+   |\n+LL -         lock.clear();\n+LL +         \n+   |\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "bdc6113a250015a31f1e56693344a1f524a32906", "filename": "tests/ui/suspicious_command_arg_space.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fsuspicious_command_arg_space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fsuspicious_command_arg_space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_command_arg_space.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    // Things it should warn about:\n+    std::process::Command::new(\"echo\").arg(\"-n hello\").spawn().unwrap();\n+    std::process::Command::new(\"cat\").arg(\"--number file\").spawn().unwrap();\n+\n+    // Things it should not warn about:\n+    std::process::Command::new(\"echo\").arg(\"hello world\").spawn().unwrap();\n+    std::process::Command::new(\"a\").arg(\"--fmt=%a %b %c\").spawn().unwrap();\n+    std::process::Command::new(\"b\").arg(\"-ldflags=-s -w\").spawn().unwrap();\n+}"}, {"sha": "9bc0ca93aec9ec0b6e28a3c180e704a1a81ed78e", "filename": "tests/ui/suspicious_command_arg_space.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fsuspicious_command_arg_space.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fsuspicious_command_arg_space.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_command_arg_space.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,25 @@\n+error: single argument that looks like it should be multiple arguments\n+  --> $DIR/suspicious_command_arg_space.rs:3:44\n+   |\n+LL |     std::process::Command::new(\"echo\").arg(\"-n hello\").spawn().unwrap();\n+   |                                            ^^^^^^^^^^\n+   |\n+   = note: `-D clippy::suspicious-command-arg-space` implied by `-D warnings`\n+help: consider splitting the argument\n+   |\n+LL |     std::process::Command::new(\"echo\").args([\"-n\", \"hello\"]).spawn().unwrap();\n+   |                                        ~~~~ ~~~~~~~~~~~~~~~\n+\n+error: single argument that looks like it should be multiple arguments\n+  --> $DIR/suspicious_command_arg_space.rs:4:43\n+   |\n+LL |     std::process::Command::new(\"cat\").arg(\"--number file\").spawn().unwrap();\n+   |                                           ^^^^^^^^^^^^^^^\n+   |\n+help: consider splitting the argument\n+   |\n+LL |     std::process::Command::new(\"cat\").args([\"--number\", \"file\"]).spawn().unwrap();\n+   |                                       ~~~~ ~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "fa89706a815afc8bd4ce30e8315ec90c1f533b6c", "filename": "tests/ui/swap.fixed", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fswap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fswap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -7,7 +7,8 @@\n     clippy::redundant_clone,\n     redundant_semicolons,\n     dead_code,\n-    unused_assignments\n+    unused_assignments,\n+    unused_variables\n )]\n \n struct Foo(u32);\n@@ -121,6 +122,27 @@ fn main() {\n     std::mem::swap(&mut c.0, &mut a);\n \n     ; std::mem::swap(&mut c.0, &mut a);\n+\n+    std::mem::swap(&mut a, &mut b);\n+\n+    let mut c = 1;\n+    let mut d = 2;\n+    std::mem::swap(&mut d, &mut c);\n+\n+    let mut b = 1;\n+    std::mem::swap(&mut a, &mut b);\n+\n+    let b = 1;\n+    let a = 2;\n+\n+    let t = b;\n+    let b = a;\n+    let a = t;\n+\n+    let mut b = 1;\n+    let mut a = 2;\n+\n+    std::mem::swap(&mut b, &mut a);\n }\n \n fn issue_8154() {"}, {"sha": "ef8a81c8341b17a6e78f7169ba99887e7332a753", "filename": "tests/ui/swap.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -7,7 +7,8 @@\n     clippy::redundant_clone,\n     redundant_semicolons,\n     dead_code,\n-    unused_assignments\n+    unused_assignments,\n+    unused_variables\n )]\n \n struct Foo(u32);\n@@ -143,6 +144,32 @@ fn main() {\n     ; let t = c.0;\n     c.0 = a;\n     a = t;\n+\n+    let a = b;\n+    let b = a;\n+\n+    let mut c = 1;\n+    let mut d = 2;\n+    d = c;\n+    c = d;\n+\n+    let mut b = 1;\n+    let a = b;\n+    b = a;\n+\n+    let b = 1;\n+    let a = 2;\n+\n+    let t = b;\n+    let b = a;\n+    let a = t;\n+\n+    let mut b = 1;\n+    let mut a = 2;\n+\n+    let t = b;\n+    b = a;\n+    a = t;\n }\n \n fn issue_8154() {"}, {"sha": "f0acbfe253f43aefe2b0617680157477893106bf", "filename": "tests/ui/swap.stderr", "status": "modified", "additions": 51, "deletions": 14, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fswap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Fswap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,5 +1,5 @@\n error: this looks like you are swapping `bar.a` and `bar.b` manually\n-  --> $DIR/swap.rs:24:5\n+  --> $DIR/swap.rs:25:5\n    |\n LL | /     let temp = bar.a;\n LL | |     bar.a = bar.b;\n@@ -10,55 +10,55 @@ LL | |     bar.b = temp;\n    = note: `-D clippy::manual-swap` implied by `-D warnings`\n \n error: this looks like you are swapping elements of `foo` manually\n-  --> $DIR/swap.rs:36:5\n+  --> $DIR/swap.rs:37:5\n    |\n LL | /     let temp = foo[0];\n LL | |     foo[0] = foo[1];\n LL | |     foo[1] = temp;\n    | |_________________^ help: try: `foo.swap(0, 1)`\n \n error: this looks like you are swapping elements of `foo` manually\n-  --> $DIR/swap.rs:45:5\n+  --> $DIR/swap.rs:46:5\n    |\n LL | /     let temp = foo[0];\n LL | |     foo[0] = foo[1];\n LL | |     foo[1] = temp;\n    | |_________________^ help: try: `foo.swap(0, 1)`\n \n error: this looks like you are swapping elements of `foo` manually\n-  --> $DIR/swap.rs:64:5\n+  --> $DIR/swap.rs:65:5\n    |\n LL | /     let temp = foo[0];\n LL | |     foo[0] = foo[1];\n LL | |     foo[1] = temp;\n    | |_________________^ help: try: `foo.swap(0, 1)`\n \n error: this looks like you are swapping `a` and `b` manually\n-  --> $DIR/swap.rs:75:5\n+  --> $DIR/swap.rs:76:5\n    |\n LL | /     a ^= b;\n LL | |     b ^= a;\n LL | |     a ^= b;\n    | |___________^ help: try: `std::mem::swap(&mut a, &mut b)`\n \n error: this looks like you are swapping `bar.a` and `bar.b` manually\n-  --> $DIR/swap.rs:83:5\n+  --> $DIR/swap.rs:84:5\n    |\n LL | /     bar.a ^= bar.b;\n LL | |     bar.b ^= bar.a;\n LL | |     bar.a ^= bar.b;\n    | |___________________^ help: try: `std::mem::swap(&mut bar.a, &mut bar.b)`\n \n error: this looks like you are swapping elements of `foo` manually\n-  --> $DIR/swap.rs:91:5\n+  --> $DIR/swap.rs:92:5\n    |\n LL | /     foo[0] ^= foo[1];\n LL | |     foo[1] ^= foo[0];\n LL | |     foo[0] ^= foo[1];\n    | |_____________________^ help: try: `foo.swap(0, 1)`\n \n error: this looks like you are swapping `foo[0][1]` and `bar[1][0]` manually\n-  --> $DIR/swap.rs:120:5\n+  --> $DIR/swap.rs:121:5\n    |\n LL | /     let temp = foo[0][1];\n LL | |     foo[0][1] = bar[1][0];\n@@ -68,7 +68,7 @@ LL | |     bar[1][0] = temp;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are swapping `a` and `b` manually\n-  --> $DIR/swap.rs:134:7\n+  --> $DIR/swap.rs:135:7\n    |\n LL |       ; let t = a;\n    |  _______^\n@@ -79,7 +79,7 @@ LL | |     b = t;\n    = note: or maybe you should use `std::mem::replace`?\n \n error: this looks like you are swapping `c.0` and `a` manually\n-  --> $DIR/swap.rs:143:7\n+  --> $DIR/swap.rs:144:7\n    |\n LL |       ; let t = c.0;\n    |  _______^\n@@ -89,8 +89,18 @@ LL | |     a = t;\n    |\n    = note: or maybe you should use `std::mem::replace`?\n \n+error: this looks like you are swapping `b` and `a` manually\n+  --> $DIR/swap.rs:170:5\n+   |\n+LL | /     let t = b;\n+LL | |     b = a;\n+LL | |     a = t;\n+   | |_________^ help: try: `std::mem::swap(&mut b, &mut a)`\n+   |\n+   = note: or maybe you should use `std::mem::replace`?\n+\n error: this looks like you are trying to swap `a` and `b`\n-  --> $DIR/swap.rs:131:5\n+  --> $DIR/swap.rs:132:5\n    |\n LL | /     a = b;\n LL | |     b = a;\n@@ -100,16 +110,43 @@ LL | |     b = a;\n    = note: `-D clippy::almost-swapped` implied by `-D warnings`\n \n error: this looks like you are trying to swap `c.0` and `a`\n-  --> $DIR/swap.rs:140:5\n+  --> $DIR/swap.rs:141:5\n    |\n LL | /     c.0 = a;\n LL | |     a = c.0;\n    | |___________^ help: try: `std::mem::swap(&mut c.0, &mut a)`\n    |\n    = note: or maybe you should use `std::mem::replace`?\n \n+error: this looks like you are trying to swap `a` and `b`\n+  --> $DIR/swap.rs:148:5\n+   |\n+LL | /     let a = b;\n+LL | |     let b = a;\n+   | |_____________^ help: try: `std::mem::swap(&mut a, &mut b)`\n+   |\n+   = note: or maybe you should use `std::mem::replace`?\n+\n+error: this looks like you are trying to swap `d` and `c`\n+  --> $DIR/swap.rs:153:5\n+   |\n+LL | /     d = c;\n+LL | |     c = d;\n+   | |_________^ help: try: `std::mem::swap(&mut d, &mut c)`\n+   |\n+   = note: or maybe you should use `std::mem::replace`?\n+\n+error: this looks like you are trying to swap `a` and `b`\n+  --> $DIR/swap.rs:157:5\n+   |\n+LL | /     let a = b;\n+LL | |     b = a;\n+   | |_________^ help: try: `std::mem::swap(&mut a, &mut b)`\n+   |\n+   = note: or maybe you should use `std::mem::replace`?\n+\n error: this looks like you are swapping `s.0.x` and `s.0.y` manually\n-  --> $DIR/swap.rs:178:5\n+  --> $DIR/swap.rs:205:5\n    |\n LL | /     let t = s.0.x;\n LL | |     s.0.x = s.0.y;\n@@ -118,5 +155,5 @@ LL | |     s.0.y = t;\n    |\n    = note: or maybe you should use `std::mem::replace`?\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 17 previous errors\n "}, {"sha": "a38406782506804f25a615e7fb29d30cdd3d9116", "filename": "tests/ui/transmute_int_to_non_zero.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Ftransmute_int_to_non_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Ftransmute_int_to_non_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_int_to_non_zero.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,41 @@\n+#![warn(clippy::transmute_int_to_non_zero)]\n+\n+use core::num::*;\n+\n+fn main() {\n+    let int_u8: u8 = 1;\n+    let int_u16: u16 = 1;\n+    let int_u32: u32 = 1;\n+    let int_u64: u64 = 1;\n+    let int_u128: u128 = 1;\n+\n+    let int_i8: i8 = 1;\n+    let int_i16: i16 = 1;\n+    let int_i32: i32 = 1;\n+    let int_i64: i64 = 1;\n+    let int_i128: i128 = 1;\n+\n+    let _: NonZeroU8 = unsafe { std::mem::transmute(int_u8) };\n+    let _: NonZeroU16 = unsafe { std::mem::transmute(int_u16) };\n+    let _: NonZeroU32 = unsafe { std::mem::transmute(int_u32) };\n+    let _: NonZeroU64 = unsafe { std::mem::transmute(int_u64) };\n+    let _: NonZeroU128 = unsafe { std::mem::transmute(int_u128) };\n+\n+    let _: NonZeroI8 = unsafe { std::mem::transmute(int_i8) };\n+    let _: NonZeroI16 = unsafe { std::mem::transmute(int_i16) };\n+    let _: NonZeroI32 = unsafe { std::mem::transmute(int_i32) };\n+    let _: NonZeroI64 = unsafe { std::mem::transmute(int_i64) };\n+    let _: NonZeroI128 = unsafe { std::mem::transmute(int_i128) };\n+\n+    let _: NonZeroU8 = unsafe { NonZeroU8::new_unchecked(int_u8) };\n+    let _: NonZeroU16 = unsafe { NonZeroU16::new_unchecked(int_u16) };\n+    let _: NonZeroU32 = unsafe { NonZeroU32::new_unchecked(int_u32) };\n+    let _: NonZeroU64 = unsafe { NonZeroU64::new_unchecked(int_u64) };\n+    let _: NonZeroU128 = unsafe { NonZeroU128::new_unchecked(int_u128) };\n+\n+    let _: NonZeroI8 = unsafe { NonZeroI8::new_unchecked(int_i8) };\n+    let _: NonZeroI16 = unsafe { NonZeroI16::new_unchecked(int_i16) };\n+    let _: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(int_i32) };\n+    let _: NonZeroI64 = unsafe { NonZeroI64::new_unchecked(int_i64) };\n+    let _: NonZeroI128 = unsafe { NonZeroI128::new_unchecked(int_i128) };\n+}"}, {"sha": "33f8ce79ea780e60d6523926cf6fe0f8267b211c", "filename": "tests/ui/transmute_int_to_non_zero.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Ftransmute_int_to_non_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Ftransmute_int_to_non_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_int_to_non_zero.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -0,0 +1,64 @@\n+error: transmute from a `u8` to a `NonZeroU8`\n+  --> $DIR/transmute_int_to_non_zero.rs:18:33\n+   |\n+LL |     let _: NonZeroU8 = unsafe { std::mem::transmute(int_u8) };\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroU8::new_unchecked(int_u8)`\n+   |\n+   = note: `-D clippy::transmute-int-to-non-zero` implied by `-D warnings`\n+\n+error: transmute from a `u16` to a `NonZeroU16`\n+  --> $DIR/transmute_int_to_non_zero.rs:19:34\n+   |\n+LL |     let _: NonZeroU16 = unsafe { std::mem::transmute(int_u16) };\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroU16::new_unchecked(int_u16)`\n+\n+error: transmute from a `u32` to a `NonZeroU32`\n+  --> $DIR/transmute_int_to_non_zero.rs:20:34\n+   |\n+LL |     let _: NonZeroU32 = unsafe { std::mem::transmute(int_u32) };\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroU32::new_unchecked(int_u32)`\n+\n+error: transmute from a `u64` to a `NonZeroU64`\n+  --> $DIR/transmute_int_to_non_zero.rs:21:34\n+   |\n+LL |     let _: NonZeroU64 = unsafe { std::mem::transmute(int_u64) };\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroU64::new_unchecked(int_u64)`\n+\n+error: transmute from a `u128` to a `NonZeroU128`\n+  --> $DIR/transmute_int_to_non_zero.rs:22:35\n+   |\n+LL |     let _: NonZeroU128 = unsafe { std::mem::transmute(int_u128) };\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroU128::new_unchecked(int_u128)`\n+\n+error: transmute from a `i8` to a `NonZeroI8`\n+  --> $DIR/transmute_int_to_non_zero.rs:24:33\n+   |\n+LL |     let _: NonZeroI8 = unsafe { std::mem::transmute(int_i8) };\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroI8::new_unchecked(int_i8)`\n+\n+error: transmute from a `i16` to a `NonZeroI16`\n+  --> $DIR/transmute_int_to_non_zero.rs:25:34\n+   |\n+LL |     let _: NonZeroI16 = unsafe { std::mem::transmute(int_i16) };\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroI16::new_unchecked(int_i16)`\n+\n+error: transmute from a `i32` to a `NonZeroI32`\n+  --> $DIR/transmute_int_to_non_zero.rs:26:34\n+   |\n+LL |     let _: NonZeroI32 = unsafe { std::mem::transmute(int_i32) };\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroI32::new_unchecked(int_i32)`\n+\n+error: transmute from a `i64` to a `NonZeroI64`\n+  --> $DIR/transmute_int_to_non_zero.rs:27:34\n+   |\n+LL |     let _: NonZeroI64 = unsafe { std::mem::transmute(int_i64) };\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroI64::new_unchecked(int_i64)`\n+\n+error: transmute from a `i128` to a `NonZeroI128`\n+  --> $DIR/transmute_int_to_non_zero.rs:28:35\n+   |\n+LL |     let _: NonZeroI128 = unsafe { std::mem::transmute(int_i128) };\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `NonZeroI128::new_unchecked(int_i128)`\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "cbd5cc5fceef54257c8dc6054771a6af18669be3", "filename": "tests/ui/uninlined_format_args.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -174,3 +174,7 @@ fn _meets_msrv() {\n     let local_i32 = 1;\n     println!(\"expand='{local_i32}'\");\n }\n+\n+fn _do_not_fire() {\n+    println!(\"{:?}\", None::<()>);\n+}"}, {"sha": "cf0ea5be4813f745c2ca500f53d6f81fb095b2ec", "filename": "tests/ui/uninlined_format_args.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Funinlined_format_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Funinlined_format_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.rs?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -179,3 +179,7 @@ fn _meets_msrv() {\n     let local_i32 = 1;\n     println!(\"expand='{}'\", local_i32);\n }\n+\n+fn _do_not_fire() {\n+    println!(\"{:?}\", None::<()>);\n+}"}, {"sha": "13e5feb19263ef7015460332ce3e7fcbeab10931", "filename": "tests/ui/unreadable_literal.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Funreadable_literal.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Funreadable_literal.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.fixed?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -23,7 +23,7 @@ fn main() {\n     let _good = (\n         0b1011_i64,\n         0o1_234_u32,\n-        0x0123_4567,\n+        0x1_234_567,\n         65536,\n         1_2345_6789,\n         1234_f32,"}, {"sha": "450121b1c5a92afd43bacd81c810699c64b7f9f3", "filename": "tests/ui/unreadable_literal.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Funreadable_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0413fb35babdfe8fe2456e7b3d520f1ffb5de231/tests%2Fui%2Funreadable_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.stderr?ref=0413fb35babdfe8fe2456e7b3d520f1ffb5de231", "patch": "@@ -1,11 +1,3 @@\n-error: digits of hex or binary literal not grouped by four\n-  --> $DIR/unreadable_literal.rs:26:9\n-   |\n-LL |         0x1_234_567,\n-   |         ^^^^^^^^^^^ help: consider: `0x0123_4567`\n-   |\n-   = note: `-D clippy::unusual-byte-groupings` implied by `-D warnings`\n-\n error: long literal lacking separators\n   --> $DIR/unreadable_literal.rs:34:17\n    |\n@@ -68,5 +60,5 @@ error: long literal lacking separators\n LL |     let _fail5 = 1.100300400;\n    |                  ^^^^^^^^^^^ help: consider: `1.100_300_400`\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 10 previous errors\n "}]}