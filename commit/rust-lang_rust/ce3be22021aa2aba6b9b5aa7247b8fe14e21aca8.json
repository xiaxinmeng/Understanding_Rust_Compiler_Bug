{"sha": "ce3be22021aa2aba6b9b5aa7247b8fe14e21aca8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlM2JlMjIwMjFhYTJhYmE2YjliNWFhNzI0N2I4ZmUxNGUyMWFjYTg=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-08-09T04:30:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-09T04:30:25Z"}, "message": "Merge pull request #1151 from oli-obk/clone_ref\n\nadd suggestions to clone_on_copy", "tree": {"sha": "52d8ddc3e8846e2761964142c65557212e1f05f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52d8ddc3e8846e2761964142c65557212e1f05f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce3be22021aa2aba6b9b5aa7247b8fe14e21aca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce3be22021aa2aba6b9b5aa7247b8fe14e21aca8", "html_url": "https://github.com/rust-lang/rust/commit/ce3be22021aa2aba6b9b5aa7247b8fe14e21aca8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce3be22021aa2aba6b9b5aa7247b8fe14e21aca8/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ac99162ea99036ef475e30199fd2cc648c2dc4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac99162ea99036ef475e30199fd2cc648c2dc4a", "html_url": "https://github.com/rust-lang/rust/commit/8ac99162ea99036ef475e30199fd2cc648c2dc4a"}, {"sha": "7e67f447ced3229595cebe6b85f8687a9bf394bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e67f447ced3229595cebe6b85f8687a9bf394bc", "html_url": "https://github.com/rust-lang/rust/commit/7e67f447ced3229595cebe6b85f8687a9bf394bc"}], "stats": {"total": 48, "additions": 34, "deletions": 14}, "files": [{"sha": "75f41661d7e29743674ddf0af598e428fc6707f9", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ce3be22021aa2aba6b9b5aa7247b8fe14e21aca8/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3be22021aa2aba6b9b5aa7247b8fe14e21aca8/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=ce3be22021aa2aba6b9b5aa7247b8fe14e21aca8", "patch": "@@ -514,8 +514,7 @@ impl LateLintPass for Pass {\n \n                 let self_ty = cx.tcx.expr_ty_adjusted(&args[0]);\n                 if args.len() == 1 && name.node.as_str() == \"clone\" {\n-                    lint_clone_on_copy(cx, expr);\n-                    lint_clone_double_ref(cx, expr, &args[0], self_ty);\n+                    lint_clone_on_copy(cx, expr, &args[0], self_ty);\n                 }\n \n                 match self_ty.sty {\n@@ -701,19 +700,11 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[P<hi\n }\n \n /// Checks for the `CLONE_ON_COPY` lint.\n-fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr) {\n+fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, arg_ty: ty::Ty) {\n     let ty = cx.tcx.expr_ty(expr);\n     let parent = cx.tcx.map.get_parent(expr.id);\n     let parameter_environment = ty::ParameterEnvironment::for_item(cx.tcx, parent);\n-\n-    if !ty.moves_by_default(cx.tcx.global_tcx(), &parameter_environment, expr.span) {\n-        span_lint(cx, CLONE_ON_COPY, expr.span, \"using `clone` on a `Copy` type\");\n-    }\n-}\n-\n-/// Checks for the `CLONE_DOUBLE_REF` lint.\n-fn lint_clone_double_ref(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, ty: ty::Ty) {\n-    if let ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) = ty.sty {\n+    if let ty::TyRef(_, ty::TypeAndMut { ty: inner, .. }) = arg_ty.sty {\n         if let ty::TyRef(..) = inner.sty {\n             span_lint_and_then(cx,\n                                CLONE_DOUBLE_REF,\n@@ -723,8 +714,23 @@ fn lint_clone_double_ref(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, ty\n                                |db| if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n                                    db.span_suggestion(expr.span, \"try dereferencing it\", format!(\"({}).clone()\", snip.deref()));\n                                });\n+            return; // don't report clone_on_copy\n         }\n     }\n+\n+    if !ty.moves_by_default(cx.tcx.global_tcx(), &parameter_environment, expr.span) {\n+        span_lint_and_then(cx,\n+                           CLONE_ON_COPY,\n+                           expr.span,\n+                           \"using `clone` on a `Copy` type\",\n+                           |db| if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n+                               if let ty::TyRef(..) = cx.tcx.expr_ty(arg).sty {\n+                                   db.span_suggestion(expr.span, \"try dereferencing it\", format!(\"{}\", snip.deref()));\n+                               } else {\n+                                   db.span_suggestion(expr.span, \"try removing the `clone` call\", format!(\"{}\", snip));\n+                               }\n+                           });\n+    }\n }\n \n fn lint_extend(cx: &LateContext, expr: &hir::Expr, args: &MethodArgs) {"}, {"sha": "0bd356721c9ae61de72b4778ebbb1161eb5ec3ca", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce3be22021aa2aba6b9b5aa7247b8fe14e21aca8/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3be22021aa2aba6b9b5aa7247b8fe14e21aca8/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=ce3be22021aa2aba6b9b5aa7247b8fe14e21aca8", "patch": "@@ -161,7 +161,13 @@ impl<'a> Sugg<'a> {\n     pub fn maybe_par(self) -> Self {\n         match self {\n             Sugg::NonParen(..) => self,\n-            Sugg::MaybeParen(sugg) | Sugg::BinOp(_, sugg) => Sugg::NonParen(format!(\"({})\", sugg).into()),\n+            // (x) and (x).y() both don't need additional parens\n+            Sugg::MaybeParen(sugg) => if sugg.starts_with('(') && sugg.ends_with(')') {\n+                Sugg::MaybeParen(sugg)\n+            } else {\n+                Sugg::NonParen(format!(\"({})\", sugg).into())\n+            },\n+            Sugg::BinOp(_, sugg) => Sugg::NonParen(format!(\"({})\", sugg).into()),\n         }\n     }\n }"}, {"sha": "7235bad11bf2fe296f3ac94f77b8927291aa4d29", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce3be22021aa2aba6b9b5aa7247b8fe14e21aca8/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce3be22021aa2aba6b9b5aa7247b8fe14e21aca8/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=ce3be22021aa2aba6b9b5aa7247b8fe14e21aca8", "patch": "@@ -435,13 +435,22 @@ fn use_extend_from_slice() {\n \n fn clone_on_copy() {\n     42.clone(); //~ERROR using `clone` on a `Copy` type\n+                //~| HELP try removing the `clone` call\n+                //~| SUGGESTION 42\n     vec![1].clone(); // ok, not a Copy type\n     Some(vec![1]).clone(); // ok, not a Copy type\n+    (&42).clone(); //~ERROR using `clone` on a `Copy` type\n+                   //~| HELP try dereferencing it\n+                   //~| SUGGESTION *(&42)\n }\n \n fn clone_on_copy_generic<T: Copy>(t: T) {\n     t.clone(); //~ERROR using `clone` on a `Copy` type\n+               //~| HELP try removing the `clone` call\n+               //~| SUGGESTION t\n     Some(t).clone(); //~ERROR using `clone` on a `Copy` type\n+                     //~| HELP try removing the `clone` call\n+                     //~| SUGGESTION Some(t)\n }\n \n fn clone_on_double_ref() {\n@@ -450,7 +459,6 @@ fn clone_on_double_ref() {\n     let z: &Vec<_> = y.clone(); //~ERROR using `clone` on a double\n                                 //~| HELP try dereferencing it\n                                 //~| SUGGESTION let z: &Vec<_> = (*y).clone();\n-                                //~^^^ERROR using `clone` on a `Copy` type\n     println!(\"{:p} {:p}\",*y, z);\n }\n "}]}