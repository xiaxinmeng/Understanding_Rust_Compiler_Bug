{"sha": "47c079a0379ce266e6398d9df640d4c5655abcd3", "node_id": "C_kwDOAAsO6NoAKDQ3YzA3OWEwMzc5Y2UyNjZlNjM5OGQ5ZGY2NDBkNGM1NjU1YWJjZDM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-01T11:18:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T11:18:52Z"}, "message": "Merge #10403\n\n10403: feat: Add semantic token modifier for crate root r=Veykril a=lhvy\n\nResolves #9073\r\n\r\nI managed to implement crate root highlighting for crates mentioned specifically by name (e.g. `serde` in `use serde::Serialize;`), but not for crates referred to with `crate` or `super`. How could I implement this?\r\n\r\n> P.S. I'm participating in [Hacktoberfest 2021](https://hacktoberfest.digitalocean.com/). If this PR is up to standard and merged, I'd appreciate if the `hacktoberfest-accepted` label could be added. Thanks!\n\nCo-authored-by: lhvy <me@lhvy.dev>", "tree": {"sha": "18defb118e7a6adc498cde913072fcbbb9d53465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18defb118e7a6adc498cde913072fcbbb9d53465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47c079a0379ce266e6398d9df640d4c5655abcd3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVu6cCRBK7hj4Ov3rIwAAOoQIAB80p/Gl/UDGuXsRlj9u0hGz\noYepvHcLa8aIYQu2wDwfP8EkMLbW7bv5C+wuBohHCkix3JJ+GmQJ2ZDi7kCxohYa\nILc8vvS6kEXyls3sYILEJBcF1vqGOuw5RXpxxVqwv447OrYOL9TccdWxhi+UJfhC\neghjCNg5ixE10S0SPtAIn/RJ/XNM0XJvGqWdZPfoXxHmPxhEkEXiaT7+Z9xVjdYa\ny6jIP3yU+RY3dIGk2Pyb87ILQOl03JggEOyZnYxQfETB4KiNGomaNO8e14jhSFU0\nw1TGiEQWFroZpJeMhz/1YP//5jRDnR0yXHpajOSzOs+tJgcHpQiQPggW7tRF4F8=\n=W1OI\n-----END PGP SIGNATURE-----\n", "payload": "tree 18defb118e7a6adc498cde913072fcbbb9d53465\nparent bbd5dd0f4cfa9a59b2f56d641d3885e9cc143cf2\nparent dbb02370a4a54eff6c634b994774dbf8a9710eb5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633087132 +0000\ncommitter GitHub <noreply@github.com> 1633087132 +0000\n\nMerge #10403\n\n10403: feat: Add semantic token modifier for crate root r=Veykril a=lhvy\n\nResolves #9073\r\n\r\nI managed to implement crate root highlighting for crates mentioned specifically by name (e.g. `serde` in `use serde::Serialize;`), but not for crates referred to with `crate` or `super`. How could I implement this?\r\n\r\n> P.S. I'm participating in [Hacktoberfest 2021](https://hacktoberfest.digitalocean.com/). If this PR is up to standard and merged, I'd appreciate if the `hacktoberfest-accepted` label could be added. Thanks!\n\nCo-authored-by: lhvy <me@lhvy.dev>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47c079a0379ce266e6398d9df640d4c5655abcd3", "html_url": "https://github.com/rust-lang/rust/commit/47c079a0379ce266e6398d9df640d4c5655abcd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47c079a0379ce266e6398d9df640d4c5655abcd3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbd5dd0f4cfa9a59b2f56d641d3885e9cc143cf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd5dd0f4cfa9a59b2f56d641d3885e9cc143cf2", "html_url": "https://github.com/rust-lang/rust/commit/bbd5dd0f4cfa9a59b2f56d641d3885e9cc143cf2"}, {"sha": "dbb02370a4a54eff6c634b994774dbf8a9710eb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb02370a4a54eff6c634b994774dbf8a9710eb5", "html_url": "https://github.com/rust-lang/rust/commit/dbb02370a4a54eff6c634b994774dbf8a9710eb5"}], "stats": {"total": 155, "additions": 141, "deletions": 14}, "files": [{"sha": "03d513fe4d2fd80049f58def6882e875167a0391", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=47c079a0379ce266e6398d9df640d4c5655abcd3", "patch": "@@ -133,6 +133,7 @@ pub struct HlRange {\n // constant:: Emitted for consts.\n // consuming:: Emitted for locals that are being consumed when use in a function call.\n // controlFlow:: Emitted for control-flow related tokens, this includes the `?` operator.\n+// crateRoot:: Emitted for crate names, like `serde` and `crate`.\n // declaration:: Emitted for names of definitions, like `foo` in `fn foo() {}`.\n // defaultLibrary:: Emitted for items from built-in crates (std, core, alloc, test and proc_macro).\n // documentation:: Emitted for documentation comments."}, {"sha": "d2ec3ca939d2ac785c70e55e5586d14efe3a18ba", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=47c079a0379ce266e6398d9df640d4c5655abcd3", "patch": "@@ -164,8 +164,10 @@ fn token(\n                     T![for] if !is_child_of_impl(&token) => h | HlMod::ControlFlow,\n                     T![unsafe] => h | HlMod::Unsafe,\n                     T![true] | T![false] => HlTag::BoolLiteral.into(),\n-                    // self is handled as either a Name or NameRef already\n-                    T![self] => return None,\n+                    // crate is handled just as a token if it's in an `extern crate`\n+                    T![crate] if parent_matches::<ast::ExternCrate>(&token) => h,\n+                    // self, crate and super are handled as either a Name or NameRef already\n+                    T![self] | T![crate] | T![super] => return None,\n                     T![ref] => token\n                         .parent()\n                         .and_then(ast::IdentPat::cast)\n@@ -283,7 +285,7 @@ fn highlight_name_ref(\n                 }\n             }\n         };\n-        let h = match name_class {\n+        let mut h = match name_class {\n             NameRefClass::Definition(def) => {\n                 if let Definition::Local(local) = &def {\n                     if let Some(name) = local.name(db) {\n@@ -325,11 +327,15 @@ fn highlight_name_ref(\n             }\n             NameRefClass::FieldShorthand { .. } => SymbolKind::Field.into(),\n         };\n-        if h.tag == HlTag::Symbol(SymbolKind::Module) && name_ref.self_token().is_some() {\n-            SymbolKind::SelfParam.into()\n-        } else {\n-            h\n+        if h.tag == HlTag::Symbol(SymbolKind::Module) {\n+            if name_ref.self_token().is_some() {\n+                return SymbolKind::SelfParam.into();\n+            }\n+            if name_ref.crate_token().is_some() || name_ref.super_token().is_some() {\n+                h.tag = HlTag::Keyword;\n+            }\n         }\n+        h\n     })\n }\n \n@@ -393,7 +399,13 @@ fn highlight_def(\n         Definition::Macro(_) => Highlight::new(HlTag::Symbol(SymbolKind::Macro)),\n         Definition::Field(_) => Highlight::new(HlTag::Symbol(SymbolKind::Field)),\n         Definition::ModuleDef(def) => match def {\n-            hir::ModuleDef::Module(_) => Highlight::new(HlTag::Symbol(SymbolKind::Module)),\n+            hir::ModuleDef::Module(module) => {\n+                let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Module));\n+                if module.parent(db).is_none() {\n+                    h |= HlMod::CrateRoot\n+                }\n+                h\n+            }\n             hir::ModuleDef::Function(func) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Function));\n                 if let Some(item) = func.as_assoc_item(db) {"}, {"sha": "92c7fcab76fa3636f5d442ee72c1fd2d87d16255", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=47c079a0379ce266e6398d9df640d4c5655abcd3", "patch": "@@ -55,6 +55,8 @@ pub enum HlMod {\n     Consuming,\n     /// Used with keywords like `if` and `break`.\n     ControlFlow,\n+    /// Used for crate names, like `serde`.\n+    CrateRoot,\n     /// Used for items from built-in crates (std, core, alloc, test and proc_macro).\n     DefaultLibrary,\n     /// `foo` in `fn foo(x: i32)` is a definition, `foo` in `foo(90 + 2)` is\n@@ -194,6 +196,7 @@ impl HlMod {\n         HlMod::Callable,\n         HlMod::Consuming,\n         HlMod::ControlFlow,\n+        HlMod::CrateRoot,\n         HlMod::DefaultLibrary,\n         HlMod::Definition,\n         HlMod::Documentation,\n@@ -216,6 +219,7 @@ impl HlMod {\n             HlMod::Callable => \"callable\",\n             HlMod::Consuming => \"consuming\",\n             HlMod::ControlFlow => \"control\",\n+            HlMod::CrateRoot => \"crate_root\",\n             HlMod::DefaultLibrary => \"default_library\",\n             HlMod::Definition => \"declaration\",\n             HlMod::Documentation => \"documentation\","}, {"sha": "8b4a76453b46d89d88b8cbdf901c02cff1ca870f", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_crate_root.html", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_crate_root.html", "raw_url": "https://github.com/rust-lang/rust/raw/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_crate_root.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_crate_root.html?ref=47c079a0379ce266e6398d9df640d4c5655abcd3", "patch": "@@ -0,0 +1,64 @@\n+\n+<style>\n+body                { margin: 0; }\n+pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n+.label              { color: #DFAF8F; font-style: italic; }\n+.comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.intra_doc_link     { font-style: italic; }\n+.injected           { opacity: 0.65 ; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n+.field              { color: #94BFF3; }\n+.function           { color: #93E0E3; }\n+.function.unsafe    { color: #BC8383; }\n+.trait.unsafe       { color: #BC8383; }\n+.operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.parameter          { color: #94BFF3; }\n+.text               { color: #DCDCCC; }\n+.type               { color: #7CB8BB; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n+.attribute          { color: #94BFF3; }\n+.numeric_literal    { color: #BFEBBF; }\n+.bool_literal       { color: #BFE6EB; }\n+.macro              { color: #94BFF3; }\n+.module             { color: #AFD8AF; }\n+.value_param        { color: #DCDCCC; }\n+.variable           { color: #DCDCCC; }\n+.format_specifier   { color: #CC696B; }\n+.mutable            { text-decoration: underline; }\n+.escape_sequence    { color: #94BFF3; }\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.control            { font-style: italic; }\n+.reference          { font-style: italic; font-weight: bold; }\n+\n+.unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n+</style>\n+<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module crate_root library\">foo</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">use</span> <span class=\"module crate_root default_library library\">core</span><span class=\"operator\">::</span><span class=\"module default_library library\">iter</span><span class=\"semicolon\">;</span>\n+\n+<span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"constant declaration public\">NINETY_TWO</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u8</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"semicolon\">;</span>\n+\n+<span class=\"keyword\">use</span> <span class=\"module crate_root library\">foo</span> <span class=\"keyword\">as</span> <span class=\"module crate_root declaration library\">foooo</span><span class=\"semicolon\">;</span>\n+\n+<span class=\"keyword\">pub</span><span class=\"parenthesis\">(</span><span class=\"keyword crate_root\">crate</span><span class=\"parenthesis\">)</span> <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">baz</span> <span class=\"operator\">=</span> <span class=\"module default_library library\">iter</span><span class=\"operator\">::</span><span class=\"function default_library library\">repeat</span><span class=\"parenthesis\">(</span><span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n+\n+<span class=\"keyword\">mod</span> <span class=\"module declaration\">bar</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span><span class=\"parenthesis\">(</span><span class=\"keyword control\">in</span> <span class=\"keyword crate_root\">super</span><span class=\"parenthesis\">)</span> <span class=\"keyword\">const</span> <span class=\"constant declaration\">FORTY_TWO</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u8</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">42</span><span class=\"semicolon\">;</span>\n+\n+    <span class=\"keyword\">mod</span> <span class=\"module declaration\">baz</span> <span class=\"brace\">{</span>\n+        <span class=\"keyword\">use</span> <span class=\"keyword\">super</span><span class=\"operator\">::</span><span class=\"keyword crate_root\">super</span><span class=\"operator\">::</span><span class=\"constant public\">NINETY_TWO</span><span class=\"semicolon\">;</span>\n+        <span class=\"keyword\">use</span> <span class=\"keyword crate_root\">crate</span><span class=\"operator\">::</span><span class=\"module crate_root library\">foooo</span><span class=\"operator\">::</span><span class=\"struct library\">Point</span><span class=\"semicolon\">;</span>\n+\n+        <span class=\"keyword\">pub</span><span class=\"parenthesis\">(</span><span class=\"keyword control\">in</span> <span class=\"keyword\">super</span><span class=\"operator\">::</span><span class=\"keyword crate_root\">super</span><span class=\"parenthesis\">)</span> <span class=\"keyword\">const</span> <span class=\"constant declaration\">TWENTY_NINE</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u8</span> <span class=\"operator\">=</span> <span class=\"numeric_literal\">29</span><span class=\"semicolon\">;</span>\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n+</code></pre>\n\\ No newline at end of file"}, {"sha": "ea68f5f14a58f0b9165bd72ca3fa44b58d77b181", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_default_library.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html", "raw_url": "https://github.com/rust-lang/rust/raw/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html?ref=47c079a0379ce266e6398d9df640d4c5655abcd3", "patch": "@@ -40,7 +40,7 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">use</span> <span class=\"module default_library library\">core</span><span class=\"operator\">::</span><span class=\"module default_library library\">iter</span><span class=\"semicolon\">;</span>\n+<pre><code><span class=\"keyword\">use</span> <span class=\"module crate_root default_library library\">core</span><span class=\"operator\">::</span><span class=\"module default_library library\">iter</span><span class=\"semicolon\">;</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo</span> <span class=\"operator\">=</span> <span class=\"enum_variant default_library library\">Some</span><span class=\"parenthesis\">(</span><span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>"}, {"sha": "ca869c78be2ed3c2d4ca47316ede8d7fcbd8e6cc", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html?ref=47c079a0379ce266e6398d9df640d4c5655abcd3", "patch": "@@ -40,6 +40,6 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module default_library library\">std</span><span class=\"semicolon\">;</span>\n-<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module default_library library\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module default_library declaration library\">abc</span><span class=\"semicolon\">;</span>\n+<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module crate_root default_library library\">std</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module crate_root default_library library\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module crate_root default_library declaration library\">abc</span><span class=\"semicolon\">;</span>\n </code></pre>\n\\ No newline at end of file"}, {"sha": "05e67398300596bf3357f4a5085dc5b0d3e6c956", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=47c079a0379ce266e6398d9df640d4c5655abcd3", "patch": "@@ -253,12 +253,12 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">use_foo_items</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">bob</span> <span class=\"operator\">=</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"struct library\">Person</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">bob</span> <span class=\"operator\">=</span> <span class=\"module crate_root library\">foo</span><span class=\"operator\">::</span><span class=\"struct library\">Person</span> <span class=\"brace\">{</span>\n         <span class=\"field library\">name</span><span class=\"colon\">:</span> <span class=\"string_literal\">\"Bob\"</span><span class=\"comma\">,</span>\n-        <span class=\"field library\">age</span><span class=\"colon\">:</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"module library\">consts</span><span class=\"operator\">::</span><span class=\"constant library\">NUMBER</span><span class=\"comma\">,</span>\n+        <span class=\"field library\">age</span><span class=\"colon\">:</span> <span class=\"module crate_root library\">foo</span><span class=\"operator\">::</span><span class=\"module library\">consts</span><span class=\"operator\">::</span><span class=\"constant library\">NUMBER</span><span class=\"comma\">,</span>\n     <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">control_flow</span> <span class=\"operator\">=</span> <span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"function library\">identity</span><span class=\"parenthesis\">(</span><span class=\"module library\">foo</span><span class=\"operator\">::</span><span class=\"enum library\">ControlFlow</span><span class=\"operator\">::</span><span class=\"enum_variant library\">Continue</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">control_flow</span> <span class=\"operator\">=</span> <span class=\"module crate_root library\">foo</span><span class=\"operator\">::</span><span class=\"function library\">identity</span><span class=\"parenthesis\">(</span><span class=\"module crate_root library\">foo</span><span class=\"operator\">::</span><span class=\"enum library\">ControlFlow</span><span class=\"operator\">::</span><span class=\"enum_variant library\">Continue</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n     <span class=\"keyword control\">if</span> <span class=\"variable\">control_flow</span><span class=\"operator\">.</span><span class=\"function associated consuming library\">should_die</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n         foo::<span class=\"macro\">die!</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>"}, {"sha": "6972d431d245b1828a7475034aa7923399f79777", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=47c079a0379ce266e6398d9df640d4c5655abcd3", "patch": "@@ -779,6 +779,50 @@ fn test_extern_crate() {\n     );\n }\n \n+#[test]\n+fn test_crate_root() {\n+    check_highlighting(\n+        r#\"\n+        //- minicore: iterators\n+        //- /main.rs crate:main deps:foo\n+        extern crate foo;\n+        use core::iter;\n+\n+        pub const NINETY_TWO: u8 = 92;\n+\n+        use foo as foooo;\n+\n+        pub(crate) fn main() {\n+            let baz = iter::repeat(92);\n+        }\n+\n+        mod bar {\n+            pub(in super) const FORTY_TWO: u8 = 42;\n+\n+            mod baz {\n+                use super::super::NINETY_TWO;\n+                use crate::foooo::Point;\n+\n+                pub(in super::super) const TWENTY_NINE: u8 = 29;\n+            }\n+        }\n+        //- /foo.rs crate:foo\n+        struct Point {\n+            x: u8,\n+            y: u8,\n+        }\n+\n+        mod inner {\n+            pub(super) fn swap(p: crate::Point) -> crate::Point {\n+                crate::Point { x: p.y, y: p.x }\n+            }\n+        }\n+        \"#,\n+        expect_file![\"./test_data/highlight_crate_root.html\"],\n+        false,\n+    );\n+}\n+\n #[test]\n fn test_default_library() {\n     check_highlighting("}, {"sha": "3117b757285c330fdc0e99dc18abf7b1989ca56c", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=47c079a0379ce266e6398d9df640d4c5655abcd3", "patch": "@@ -94,6 +94,7 @@ define_semantic_token_modifiers![\n     (CONSTANT, \"constant\"),\n     (CONSUMING, \"consuming\"),\n     (CONTROL_FLOW, \"controlFlow\"),\n+    (CRATE_ROOT, \"crateRoot\"),\n     (INJECTED, \"injected\"),\n     (INTRA_DOC_LINK, \"intraDocLink\"),\n     (LIBRARY, \"library\"),"}, {"sha": "e18298fadee944991b690c6436e8dcf65285077f", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47c079a0379ce266e6398d9df640d4c5655abcd3/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=47c079a0379ce266e6398d9df640d4c5655abcd3", "patch": "@@ -535,6 +535,7 @@ fn semantic_token_type_and_modifiers(\n             HlMod::Callable => semantic_tokens::CALLABLE,\n             HlMod::Consuming => semantic_tokens::CONSUMING,\n             HlMod::ControlFlow => semantic_tokens::CONTROL_FLOW,\n+            HlMod::CrateRoot => semantic_tokens::CRATE_ROOT,\n             HlMod::DefaultLibrary => lsp_types::SemanticTokenModifier::DEFAULT_LIBRARY,\n             HlMod::Definition => lsp_types::SemanticTokenModifier::DECLARATION,\n             HlMod::Documentation => lsp_types::SemanticTokenModifier::DOCUMENTATION,"}]}