{"sha": "37abec06e502b147b9ebc730030efe10bf235765", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YWJlYzA2ZTUwMmIxNDdiOWViYzczMDAzMGVmZTEwYmYyMzU3NjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-08T01:58:00Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2016-09-30T21:02:51Z"}, "message": "Tidy", "tree": {"sha": "855671f848e9c46361080c4597bc9ca0f4a17a01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/855671f848e9c46361080c4597bc9ca0f4a17a01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37abec06e502b147b9ebc730030efe10bf235765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37abec06e502b147b9ebc730030efe10bf235765", "html_url": "https://github.com/rust-lang/rust/commit/37abec06e502b147b9ebc730030efe10bf235765", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37abec06e502b147b9ebc730030efe10bf235765/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10a52d507d984ff6e4a4d5f42fb387db1fe25c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/10a52d507d984ff6e4a4d5f42fb387db1fe25c11", "html_url": "https://github.com/rust-lang/rust/commit/10a52d507d984ff6e4a4d5f42fb387db1fe25c11"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "033cefb8dea3603e478978728da388bbd5cfe680", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37abec06e502b147b9ebc730030efe10bf235765/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37abec06e502b147b9ebc730030efe10bf235765/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=37abec06e502b147b9ebc730030efe10bf235765", "patch": "@@ -975,7 +975,8 @@ impl Build {\n         // than an entry here.\n \n         let mut base = Vec::new();\n-        if target != self.config.build && !target.contains(\"msvc\") && !target.contains(\"emscripten\") {\n+        if target != self.config.build && !target.contains(\"msvc\") &&\n+            !target.contains(\"emscripten\") {\n             base.push(format!(\"-Clinker={}\", self.cc(target).display()));\n         }\n         return base"}, {"sha": "5257575a94e8b1322a87ce3e0986adc1fa16afb7", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37abec06e502b147b9ebc730030efe10bf235765/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37abec06e502b147b9ebc730030efe10bf235765/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=37abec06e502b147b9ebc730030efe10bf235765", "patch": "@@ -66,7 +66,8 @@ fn main() {\n     let host = env::var(\"HOST\").expect(\"HOST was not set\");\n     let is_crossed = target != host;\n \n-    let optional_components = [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\", \"jsbackend\"];\n+    let optional_components = [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\", \"pnacl\", \"systemz\",\n+                               \"jsbackend\"];\n \n     // FIXME: surely we don't need all these components, right? Stuff like mcjit\n     //        or interpreter the compiler itself never uses."}, {"sha": "4c576de22021ccedf276bec0859bbe85e04f55c1", "filename": "src/test/compile-fail/allocator-dylib-is-system.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37abec06e502b147b9ebc730030efe10bf235765/src%2Ftest%2Fcompile-fail%2Fallocator-dylib-is-system.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37abec06e502b147b9ebc730030efe10bf235765/src%2Ftest%2Fcompile-fail%2Fallocator-dylib-is-system.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator-dylib-is-system.rs?ref=37abec06e502b147b9ebc730030efe10bf235765", "patch": "@@ -18,7 +18,7 @@\n // system allocator. Do this by linking in jemalloc and making sure that we get\n // an error.\n \n-// ignore-emscripten TODO: What \"other allocator\" should we use for emcc?\n+// ignore-emscripten FIXME: What \"other allocator\" should we use for emcc?\n \n #![feature(alloc_jemalloc)]\n "}, {"sha": "02c271ab24da3185a550c14d08775e1aadcba06a", "filename": "src/test/compile-fail/allocator-rust-dylib-is-jemalloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37abec06e502b147b9ebc730030efe10bf235765/src%2Ftest%2Fcompile-fail%2Fallocator-rust-dylib-is-jemalloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37abec06e502b147b9ebc730030efe10bf235765/src%2Ftest%2Fcompile-fail%2Fallocator-rust-dylib-is-jemalloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fallocator-rust-dylib-is-jemalloc.rs?ref=37abec06e502b147b9ebc730030efe10bf235765", "patch": "@@ -16,7 +16,7 @@\n // Ensure that rust dynamic libraries use jemalloc as their allocator, verifying\n // by linking in the system allocator here and ensuring that we get a complaint.\n \n-// ignore-emscripten TODO: What \"other allocator\" is correct for emscripten?\n+// ignore-emscripten FIXME: What \"other allocator\" is correct for emscripten?\n \n #![feature(alloc_system)]\n "}, {"sha": "21ced01d9d69efe619f8e23d79a72411bdf72b41", "filename": "src/test/run-fail/test-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37abec06e502b147b9ebc730030efe10bf235765/src%2Ftest%2Frun-fail%2Ftest-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37abec06e502b147b9ebc730030efe10bf235765/src%2Ftest%2Frun-fail%2Ftest-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftest-panic.rs?ref=37abec06e502b147b9ebc730030efe10bf235765", "patch": "@@ -12,7 +12,7 @@\n // error-pattern:thread 'test_foo' panicked at\n // compile-flags: --test\n // ignore-pretty: does not work well with `--test`\n-// ignore-emscripten \n+// ignore-emscripten\n \n #[test]\n fn test_foo() {"}, {"sha": "74b5f17bcf9bad053905f6d917fb3498f63d7b87", "filename": "src/test/run-fail/test-should-fail-bad-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37abec06e502b147b9ebc730030efe10bf235765/src%2Ftest%2Frun-fail%2Ftest-should-fail-bad-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37abec06e502b147b9ebc730030efe10bf235765/src%2Ftest%2Frun-fail%2Ftest-should-fail-bad-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftest-should-fail-bad-message.rs?ref=37abec06e502b147b9ebc730030efe10bf235765", "patch": "@@ -12,7 +12,7 @@\n // error-pattern:thread 'test_foo' panicked at\n // compile-flags: --test\n // ignore-pretty: does not work well with `--test`\n-// ignore-emscripten \n+// ignore-emscripten\n \n #[test]\n #[should_panic(expected = \"foobar\")]"}]}