{"sha": "6195096fb4af0158a2cd512e3c30b211366b36ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOTUwOTZmYjRhZjAxNThhMmNkNTEyZTNjMzBiMjExMzY2YjM2YWI=", "commit": {"author": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-10-01T20:36:14Z"}, "committer": {"name": "Geobert Quach", "email": "geobert@protonmail.com", "date": "2019-10-01T20:36:14Z"}, "message": "feat(assists): Even smarter with hashes\n\nCount `\"#*` streak only, extract the counting in a function, unit test this function", "tree": {"sha": "ed5f9b08fe687ea35aa9fb08423a91eef82b6eb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed5f9b08fe687ea35aa9fb08423a91eef82b6eb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6195096fb4af0158a2cd512e3c30b211366b36ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6195096fb4af0158a2cd512e3c30b211366b36ab", "html_url": "https://github.com/rust-lang/rust/commit/6195096fb4af0158a2cd512e3c30b211366b36ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6195096fb4af0158a2cd512e3c30b211366b36ab/comments", "author": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Geobert", "id": 72570, "node_id": "MDQ6VXNlcjcyNTcw", "avatar_url": "https://avatars.githubusercontent.com/u/72570?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geobert", "html_url": "https://github.com/Geobert", "followers_url": "https://api.github.com/users/Geobert/followers", "following_url": "https://api.github.com/users/Geobert/following{/other_user}", "gists_url": "https://api.github.com/users/Geobert/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geobert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geobert/subscriptions", "organizations_url": "https://api.github.com/users/Geobert/orgs", "repos_url": "https://api.github.com/users/Geobert/repos", "events_url": "https://api.github.com/users/Geobert/events{/privacy}", "received_events_url": "https://api.github.com/users/Geobert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b06c5fac14638d8a9e56b2a4cf7311a82e4a5e8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b06c5fac14638d8a9e56b2a4cf7311a82e4a5e8c", "html_url": "https://github.com/rust-lang/rust/commit/b06c5fac14638d8a9e56b2a4cf7311a82e4a5e8c"}], "stats": {"total": 56, "additions": 44, "deletions": 12}, "files": [{"sha": "b182687a4cb40158dd9b7b455ac7af236d891c11", "filename": "crates/ra_assists/src/assists/raw_string.rs", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6195096fb4af0158a2cd512e3c30b211366b36ab/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6195096fb4af0158a2cd512e3c30b211366b36ab/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fraw_string.rs?ref=6195096fb4af0158a2cd512e3c30b211366b36ab", "patch": "@@ -28,17 +28,7 @@ pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n         if error.is_err() {\n             eprintln!(\"Error unescaping string\");\n         } else {\n-            let mut max_hash_streak = 0;\n-            unescaped.chars().fold(0, |acc, c| {\n-                if c == '#' {\n-                    acc + 1\n-                } else {\n-                    if acc > max_hash_streak {\n-                        max_hash_streak = acc;\n-                    }\n-                    0\n-                }\n-            });\n+            let max_hash_streak = count_hashes(&unescaped);\n             let mut hashes = String::with_capacity(max_hash_streak + 1);\n             for _ in 0..hashes.capacity() {\n                 hashes.push('#');\n@@ -52,6 +42,19 @@ pub(crate) fn make_raw_string(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     ctx.build()\n }\n \n+fn count_hashes(s: &str) -> usize {\n+    let indexes: Vec<_> = s.match_indices(\"\\\"#\").map(|(i, _)| i).collect();\n+    let mut max_hash_streak = 0usize;\n+    for idx in indexes {\n+        let (_, sub) = s.split_at(idx + 1);\n+        let nb_hash = sub.chars().take_while(|c| *c == '#').count();\n+        if nb_hash > max_hash_streak {\n+            max_hash_streak = nb_hash;\n+        }\n+    }\n+    max_hash_streak\n+}\n+\n fn find_usual_string_range(s: &str) -> Option<TextRange> {\n     Some(TextRange::from_to(\n         TextUnit::from(s.find('\"')? as u32),\n@@ -165,12 +168,31 @@ string\"#;\n             \"###,\n             r####\"\n             fn f() {\n-                let s = <|>r###\"#random##\n+                let s = <|>r#\"#random##\n+string\"#;\n+            }\n+            \"####,\n+        )\n+    }\n+\n+    #[test]\n+    fn make_raw_string_closing_hashes_inside_works() {\n+        check_assist(\n+            make_raw_string,\n+            r###\"\n+            fn f() {\n+                let s = <|>\"#random\\\"##\\nstring\";\n+            }\n+            \"###,\n+            r####\"\n+            fn f() {\n+                let s = <|>r###\"#random\"##\n string\"###;\n             }\n             \"####,\n         )\n     }\n+\n     #[test]\n     fn make_raw_string_nothing_to_unescape_works() {\n         check_assist(\n@@ -410,4 +432,14 @@ string\"###;\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn count_hashes_test() {\n+        assert_eq!(0, count_hashes(\"abc\"));\n+        assert_eq!(0, count_hashes(\"###\"));\n+        assert_eq!(1, count_hashes(\"\\\"#abc\"));\n+        assert_eq!(0, count_hashes(\"#abc\"));\n+        assert_eq!(2, count_hashes(\"#ab\\\"##c\"));\n+        assert_eq!(4, count_hashes(\"#ab\\\"##\\\"####c\"));\n+    }\n }"}]}