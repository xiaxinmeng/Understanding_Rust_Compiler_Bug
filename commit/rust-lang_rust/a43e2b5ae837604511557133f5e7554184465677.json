{"sha": "a43e2b5ae837604511557133f5e7554184465677", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0M2UyYjVhZTgzNzYwNDUxMTU1NzEzM2Y1ZTc1NTQxODQ0NjU2Nzc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-08-16T03:58:17Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-08-19T20:11:14Z"}, "message": "Formatting", "tree": {"sha": "1b3774f2970a9dc6571af80d2ec4c2b387995a4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b3774f2970a9dc6571af80d2ec4c2b387995a4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a43e2b5ae837604511557133f5e7554184465677", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a43e2b5ae837604511557133f5e7554184465677", "html_url": "https://github.com/rust-lang/rust/commit/a43e2b5ae837604511557133f5e7554184465677", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a43e2b5ae837604511557133f5e7554184465677/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d10629d8a5149e224126d2e05943122763f2f4cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d10629d8a5149e224126d2e05943122763f2f4cc", "html_url": "https://github.com/rust-lang/rust/commit/d10629d8a5149e224126d2e05943122763f2f4cc"}], "stats": {"total": 173, "additions": 86, "deletions": 87}, "files": [{"sha": "14ca718e31840339303a27e536307a728367a17e", "filename": "src/comment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a43e2b5ae837604511557133f5e7554184465677/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43e2b5ae837604511557133f5e7554184465677/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=a43e2b5ae837604511557133f5e7554184465677", "patch": "@@ -127,8 +127,8 @@ impl FindUncommented for str {\n                     if b != c {\n                         needle_iter = pat.chars();\n                     }\n-                },\n-                None => return Some(i - pat.len())\n+                }\n+                None => return Some(i - pat.len()),\n             }\n \n             if possible_comment && (b == '/' || b == '*') {\n@@ -145,7 +145,7 @@ impl FindUncommented for str {\n         // Handle case where the pattern is a suffix of the search string\n         match needle_iter.next() {\n             Some(_) => None,\n-            None => Some(self.len() - pat.len())\n+            None => Some(self.len() - pat.len()),\n         }\n     }\n }"}, {"sha": "db646dafabae0e34d8a1e68289688d5fe6e88731", "filename": "src/expr.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a43e2b5ae837604511557133f5e7554184465677/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43e2b5ae837604511557133f5e7554184465677/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=a43e2b5ae837604511557133f5e7554184465677", "patch": "@@ -30,7 +30,7 @@ impl Rewrite for ast::Expr {\n                     ast::Lit_::LitStr(ref is, _) => {\n                         rewrite_string_lit(context, &is, l.span, width, offset)\n                     }\n-                    _ => context.codemap.span_to_snippet(self.span).ok()\n+                    _ => context.codemap.span_to_snippet(self.span).ok(),\n                 }\n             }\n             ast::Expr_::ExprCall(ref callee, ref args) => {\n@@ -105,7 +105,7 @@ impl Rewrite for ast::Expr {\n             ast::Expr_::ExprPath(ref qself, ref path) => {\n                 rewrite_path(context, qself.as_ref(), path, width, offset)\n             }\n-            _ => context.codemap.span_to_snippet(self.span).ok()\n+            _ => context.codemap.span_to_snippet(self.span).ok(),\n         }\n     }\n }\n@@ -199,7 +199,7 @@ impl<'a> Loop<'a> {\n             keyword: \"while \",\n             matcher: match pat {\n                 Some(..) => \"let \",\n-                None => \"\"\n+                None => \"\",\n             },\n             connector: \" =\",\n         }\n@@ -237,7 +237,7 @@ impl<'a> Rewrite for Loop<'a> {\n                                                     self.connector,\n                                                     inner_width,\n                                                     inner_offset)),\n-            None => String::new()\n+            None => String::new(),\n         };\n \n         // FIXME: this drops any comment between \"loop\" and the block.\n@@ -250,7 +250,7 @@ impl<'a> Rewrite for Loop<'a> {\n fn rewrite_label(label: Option<ast::Ident>) -> String {\n     match label {\n         Some(ident) => format!(\"{}: \", ident),\n-        None => \"\".to_owned()\n+        None => \"\".to_owned(),\n     }\n }\n \n@@ -262,9 +262,8 @@ fn rewrite_range(context: &RewriteContext,\n                  offset: usize)\n                  -> Option<String> {\n     let left_string = match left {\n-        // 2 = ..\n         Some(expr) => try_opt!(expr.rewrite(context, width - 2, offset)),\n-        None => String::new()\n+        None => String::new(),\n     };\n \n     let right_string = match right {\n@@ -273,7 +272,7 @@ fn rewrite_range(context: &RewriteContext,\n             let max_width = (width - 2).checked_sub(left_string.len()).unwrap_or(0);\n             try_opt!(expr.rewrite(context, max_width, offset + 2 + left_string.len()))\n         }\n-        None => String::new()\n+        None => String::new(),\n     };\n \n     Some(format!(\"{}..{}\", left_string, right_string))\n@@ -354,12 +353,13 @@ impl Rewrite for ast::Arm {\n         let pat_strs = pats.iter().map(|p| p.rewrite(context,\n                                                      // 5 = ` => {`\n                                                      width - 5,\n-                                                     offset + context.config.tab_spaces)).collect::<Vec<_>>();\n+                                                     offset + context.config.tab_spaces))\n+                           .collect::<Vec<_>>();\n         if pat_strs.iter().any(|p| p.is_none()) {\n             return None;\n         }\n         let pat_strs = pat_strs.into_iter().map(|p| p.unwrap()).collect::<Vec<_>>();\n-                                  \n+\n         let mut total_width = pat_strs.iter().fold(0, |a, p| a + p.len());\n         // Add ` | `.len().\n         total_width += (pat_strs.len() - 1) * 3;\n@@ -496,7 +496,7 @@ fn rewrite_pat_expr(context: &RewriteContext,\n                                                   pat_offset));\n             format!(\"{}{}{}\", matcher, pat_string, connector)\n         }\n-        None => String::new()\n+        None => String::new(),\n     };\n \n     // Consider only the last line of the pat string.\n@@ -804,7 +804,7 @@ fn rewrite_binary_op(context: &RewriteContext,\n     let used_width = result.len() + 1;\n     let remaining_width = match result.rfind('\\n') {\n         Some(idx) => (offset + width + idx).checked_sub(used_width).unwrap_or(0),\n-        None => width.checked_sub(used_width).unwrap_or(0)\n+        None => width.checked_sub(used_width).unwrap_or(0),\n     };\n \n     // Get \"full width\" rhs and see if it fits on the current line. This\n@@ -836,7 +836,7 @@ fn rewrite_unary_op(context: &RewriteContext,\n         ast::UnOp::UnUniq => \"box \",\n         ast::UnOp::UnDeref => \"*\",\n         ast::UnOp::UnNot => \"!\",\n-        ast::UnOp::UnNeg => \"-\"\n+        ast::UnOp::UnNeg => \"-\",\n     };\n \n     let subexpr = try_opt!(expr.rewrite(context, width - operator_str.len(), offset));"}, {"sha": "8bb5a7285bb541a152939612c63f58f8d1e17337", "filename": "src/filemap.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a43e2b5ae837604511557133f5e7554184465677/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43e2b5ae837604511557133f5e7554184465677/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=a43e2b5ae837604511557133f5e7554184465677", "patch": "@@ -58,18 +58,18 @@ fn write_file(text: &StringBuffer,\n         where T: Write\n     {\n         match config.newline_style {\n-                NewlineStyle::Unix => write!(writer, \"{}\", text),\n-                NewlineStyle::Windows => {\n-                    for (c, _) in text.chars() {\n-                        match c {\n-                            '\\n' => try!(write!(writer, \"\\r\\n\")),\n-                            '\\r' => continue,\n-                            c => try!(write!(writer, \"{}\", c)),\n-                        }\n+            NewlineStyle::Unix => write!(writer, \"{}\", text),\n+            NewlineStyle::Windows => {\n+                for (c, _) in text.chars() {\n+                    match c {\n+                        '\\n' => try!(write!(writer, \"\\r\\n\")),\n+                        '\\r' => continue,\n+                        c => try!(write!(writer, \"{}\", c)),\n                     }\n-                    Ok(())\n-                },\n+                }\n+                Ok(())\n             }\n+        }\n     }\n \n     match mode {"}, {"sha": "7d7300fb562aeb8171e3d901b1fc6d3edeef0f01", "filename": "src/imports.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a43e2b5ae837604511557133f5e7554184465677/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43e2b5ae837604511557133f5e7554184465677/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=a43e2b5ae837604511557133f5e7554184465677", "patch": "@@ -15,7 +15,8 @@ use rewrite::{Rewrite, RewriteContext};\n use syntax::ast;\n use syntax::codemap::Span;\n \n-// TODO (some day) remove unused imports, expand globs, compress many single imports into a list import\n+// TODO (some day) remove unused imports, expand globs, compress many single\n+// imports into a list import.\n \n impl Rewrite for ast::ViewPath {\n     // Returns an empty string when the ViewPath is empty (like foo::bar::{})\n@@ -39,10 +40,10 @@ impl Rewrite for ast::ViewPath {\n                 let path_str = try_opt!(path.rewrite(context, width - ident_str.len() - 4, offset));\n \n                 Some(if path.segments.last().unwrap().identifier == ident {\n-                         path_str\n-                     } else {\n-                         format!(\"{} as {}\", path_str, ident_str)\n-                     })\n+                        path_str\n+                    } else {\n+                        format!(\"{} as {}\", path_str, ident_str)\n+                    })\n             }\n         }\n     }\n@@ -81,7 +82,7 @@ pub fn rewrite_use_list(width: usize,\n     match path_list.len() {\n         0 => return None,\n         1 => return Some(rewrite_single_use_list(path_str, path_list[0])),\n-        _ => ()\n+        _ => (),\n     }\n \n     // 2 = ::\n@@ -161,7 +162,7 @@ fn move_self_to_front(items: &mut Vec<ListItem>) -> bool {\n         Some(pos) => {\n             items[0] = items.remove(pos);\n             true\n-        },\n-        None => false\n+        }\n+        None => false,\n     }\n }"}, {"sha": "e9f8255cc91a72fd3fd1f054a78d41621a2b0ffa", "filename": "src/issues.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a43e2b5ae837604511557133f5e7554184465677/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43e2b5ae837604511557133f5e7554184465677/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=a43e2b5ae837604511557133f5e7554184465677", "patch": "@@ -29,7 +29,7 @@ impl ReportTactic {\n         match *self {\n             ReportTactic::Always => true,\n             ReportTactic::Unnumbered => true,\n-            ReportTactic::Never => false\n+            ReportTactic::Never => false,\n         }\n     }\n }\n@@ -113,7 +113,7 @@ impl BadIssueSeeker {\n         match self.state {\n             Seeking::Issue { todo_idx, fixme_idx } => {\n                 self.state = self.inspect_issue(c, todo_idx, fixme_idx);\n-            },\n+            }\n             Seeking::Number { issue, part } => {\n                 let result = self.inspect_number(c, issue, part);\n \n@@ -198,19 +198,19 @@ impl BadIssueSeeker {\n                 } else {\n                     part = NumberPart::Pound;\n                 }\n-            },\n+            }\n             NumberPart::Pound => {\n                 if c == '#' {\n                     part = NumberPart::Number;\n                 }\n-            },\n+            }\n             NumberPart::Number => {\n                 if c >= '0' && c <= '9' {\n                     part = NumberPart::CloseParen;\n                 } else {\n                     return IssueClassification::Bad(issue);\n                 }\n-            },\n+            }\n             NumberPart::CloseParen => {}\n         }\n "}, {"sha": "79d374f85ecc1d053389f4c24c526fb0464707e2", "filename": "src/items.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a43e2b5ae837604511557133f5e7554184465677/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43e2b5ae837604511557133f5e7554184465677/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=a43e2b5ae837604511557133f5e7554184465677", "patch": "@@ -411,10 +411,8 @@ impl<'a> FmtVisitor<'a> {\n \n                     result.push('(');\n \n-                    let indent = self.block_indent\n-                                 + vis.len()\n-                                 + field.node.name.to_string().len()\n-                                 + 1; // Open paren\n+                    let indent = self.block_indent + vis.len() + field.node.name.to_string().len() +\n+                                 1; // Open paren\n \n                     let comma_cost = if self.config.enum_trailing_comma {\n                         1\n@@ -449,7 +447,7 @@ impl<'a> FmtVisitor<'a> {\n                 }\n \n                 result\n-            },\n+            }\n             ast::VariantKind::StructVariantKind(ref struct_def) => {\n                 // TODO Should limit the width, as we have a trailing comma\n                 self.format_struct(\"\",\n@@ -491,7 +489,7 @@ impl<'a> FmtVisitor<'a> {\n \n         let is_tuple = match struct_def.fields[0].node.kind {\n             ast::StructFieldKind::NamedField(..) => false,\n-            ast::StructFieldKind::UnnamedField(..) => true\n+            ast::StructFieldKind::UnnamedField(..) => true,\n         };\n \n         let (opener, terminator) = if is_tuple {\n@@ -506,7 +504,7 @@ impl<'a> FmtVisitor<'a> {\n                                             offset + header_str.len(),\n                                             codemap::mk_sp(span.lo,\n                                                            struct_def.fields[0].span.lo)),\n-            None => opener.to_owned()\n+            None => opener.to_owned(),\n         };\n         result.push_str(&generics_str);\n \n@@ -632,7 +630,7 @@ impl<'a> FmtVisitor<'a> {\n         };\n         let vis = match field.node.kind {\n             ast::StructFieldKind::NamedField(_, vis) |\n-            ast::StructFieldKind::UnnamedField(vis) => format_visibility(vis)\n+            ast::StructFieldKind::UnnamedField(vis) => format_visibility(vis),\n         };\n         let typ = pprust::ty_to_string(&field.node.ty);\n \n@@ -645,7 +643,7 @@ impl<'a> FmtVisitor<'a> {\n \n         match name {\n             Some(name) => format!(\"{}{}{}: {}\", attr_str, vis, name, typ),\n-            None => format!(\"{}{}{}\", attr_str, vis, typ)\n+            None => format!(\"{}{}{}\", attr_str, vis, typ),\n         }\n     }\n \n@@ -799,8 +797,7 @@ fn rewrite_explicit_self(explicit_self: &ast::ExplicitSelf, args: &[ast::Arg]) -\n \n             // this hacky solution caused by absence of `Mutability` in `SelfValue`.\n             let mut_str = {\n-                if let ast::Pat_::PatIdent(ast::BindingMode::BindByValue(mutability), _, _)\n-                        = args[0].pat.node {\n+                if let ast::Pat_::PatIdent(ast::BindingMode::BindByValue(mutability), _, _) = args[0].pat.node {\n                     format_mutability(mutability)\n                 } else {\n                     panic!(\"there is a bug or change in structure of AST, aborting.\");\n@@ -809,7 +806,7 @@ fn rewrite_explicit_self(explicit_self: &ast::ExplicitSelf, args: &[ast::Arg]) -\n \n             Some(format!(\"{}self\", mut_str))\n         }\n-        _ => None\n+        _ => None,\n     }\n }\n "}, {"sha": "9ec401b129dc5b5e83423dfa9be786c5e3aee316", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a43e2b5ae837604511557133f5e7554184465677/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43e2b5ae837604511557133f5e7554184465677/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a43e2b5ae837604511557133f5e7554184465677", "patch": "@@ -92,7 +92,7 @@ impl FromStr for WriteMode {\n             \"replace\" => Ok(WriteMode::Replace),\n             \"display\" => Ok(WriteMode::Display),\n             \"overwrite\" => Ok(WriteMode::Overwrite),\n-            _ => Err(())\n+            _ => Err(()),\n         }\n     }\n }\n@@ -243,7 +243,7 @@ fn fmt_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n \n         for (c, b) in text.chars() {\n             if c == '\\r' {\n-                continue;\n+                continuecontinue\n             }\n \n             // Add warnings for bad todos/ fixmes"}, {"sha": "eadefe2e0fb3eac9b973abc8d387115532d091a5", "filename": "src/lists.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a43e2b5ae837604511557133f5e7554184465677/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43e2b5ae837604511557133f5e7554184465677/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=a43e2b5ae837604511557133f5e7554184465677", "patch": "@@ -213,7 +213,8 @@ pub fn write_list<'b>(items: &[ListItem], formatting: &ListFormatting<'b>) -> St\n             let comment = item.post_comment.as_ref().unwrap();\n             // Use block-style only for the last item or multiline comments.\n             let block_style = !formatting.ends_with_newline && last ||\n-                              comment.trim().contains('\\n') || comment.trim().len() > width;\n+                              comment.trim().contains('\\n') ||\n+                              comment.trim().len() > width;\n \n             let formatted_comment = rewrite_comment(comment, block_style, width, offset);\n \n@@ -381,7 +382,7 @@ fn comment_len(comment: &Option<String>) -> usize {\n             } else {\n                 text_len\n             }\n-        },\n-        &None => 0\n+        }\n+        &None => 0,\n     }\n }"}, {"sha": "681bb1c8ade55eb8ecb7031cc888855264826541", "filename": "src/modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a43e2b5ae837604511557133f5e7554184465677/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43e2b5ae837604511557133f5e7554184465677/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=a43e2b5ae837604511557133f5e7554184465677", "patch": "@@ -67,6 +67,6 @@ fn module_file(id: ast::Ident,\n \n     match parser::Parser::default_submod_path(id, &dir_path, codemap).result {\n         Ok(parser::ModulePathSuccess { path, .. }) => path,\n-        Err(_) => panic!(\"Couldn't find module {}\", id)\n+        Err(_) => panic!(\"Couldn't find module {}\", id),\n     }\n }"}, {"sha": "10ab7b246cdfe2c893ee6d724d00e71254986b72", "filename": "src/types.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a43e2b5ae837604511557133f5e7554184465677/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43e2b5ae837604511557133f5e7554184465677/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=a43e2b5ae837604511557133f5e7554184465677", "patch": "@@ -157,7 +157,7 @@ fn get_path_separator(codemap: &CodeMap,\n         if c == ':' {\n             return \"::\"\n         } else if c.is_whitespace() || c == '<' {\n-            continue;\n+            continuecontinue\n         } else {\n             return \"\";\n         }\n@@ -235,7 +235,7 @@ fn rewrite_segment(segment: &ast::PathSegment,\n         ast::PathParameters::ParenthesizedParameters(ref data) => {\n             let output = match data.output {\n                 Some(ref ty) => format!(\" -> {}\", pprust::ty_to_string(&*ty)),\n-                None => String::new()\n+                None => String::new(),\n             };\n \n             let list_lo = span_after(codemap::mk_sp(*span_lo, span_hi), \"(\", context.codemap);\n@@ -267,7 +267,7 @@ fn rewrite_segment(segment: &ast::PathSegment,\n \n             format!(\"({}){}\", write_list(&items.collect::<Vec<_>>(), &fmt), output)\n         }\n-        _ => String::new()\n+        _ => String::new(),\n     };\n \n     Some(format!(\"{}{}\", segment.identifier, params))\n@@ -278,57 +278,57 @@ impl Rewrite for ast::WherePredicate {\n         // TODO dead spans?\n         // TODO assumes we'll always fit on one line...\n         Some(match self {\n-            &ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate{ref bound_lifetimes,\n+                &ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate{ref bound_lifetimes,\n                                                                           ref bounded_ty,\n                                                                           ref bounds,\n                                                                           ..}) => {\n-                if bound_lifetimes.len() > 0 {\n-                    let lifetime_str = bound_lifetimes.iter().map(|lt| {\n+                    if bound_lifetimes.len() > 0 {\n+                        let lifetime_str = bound_lifetimes.iter().map(|lt| {\n                                            lt.rewrite(context, width, offset).unwrap()\n                                        }).collect::<Vec<_>>().join(\", \");\n-                    let type_str = pprust::ty_to_string(bounded_ty);\n+                        let type_str = pprust::ty_to_string(bounded_ty);\n                     // 8 = \"for<> : \".len()\n-                    let used_width = lifetime_str.len() + type_str.len() + 8;\n-                    let bounds_str = bounds.iter().map(|ty_bound| {\n+                        let used_width = lifetime_str.len() + type_str.len() + 8;\n+                        let bounds_str = bounds.iter().map(|ty_bound| {\n                                          ty_bound.rewrite(context,\n                                                           width - used_width,\n                                                           offset + used_width)\n                                                  .unwrap()\n                                      }).collect::<Vec<_>>().join(\" + \");\n \n-                    format!(\"for<{}> {}: {}\", lifetime_str, type_str, bounds_str)\n-                } else {\n-                    let type_str = pprust::ty_to_string(bounded_ty);\n+                        format!(\"for<{}> {}: {}\", lifetime_str, type_str, bounds_str)\n+                    } else {\n+                        let type_str = pprust::ty_to_string(bounded_ty);\n                     // 2 = \": \".len()\n-                    let used_width = type_str.len() + 2;\n-                    let bounds_str = bounds.iter().map(|ty_bound| {\n+                        let used_width = type_str.len() + 2;\n+                        let bounds_str = bounds.iter().map(|ty_bound| {\n                                          ty_bound.rewrite(context,\n                                                           width - used_width,\n                                                           offset + used_width)\n                                                  .unwrap()\n                                      }).collect::<Vec<_>>().join(\" + \");\n \n-                    format!(\"{}: {}\", type_str, bounds_str)\n+                        format!(\"{}: {}\", type_str, bounds_str)\n+                    }\n                 }\n-            }\n-            &ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate{ref lifetime,\n+                &ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate{ref lifetime,\n                                                                             ref bounds,\n                                                                             ..}) => {\n-                format!(\"{}: {}\",\n+                    format!(\"{}: {}\",\n                         pprust::lifetime_to_string(lifetime),\n                         bounds.iter().map(pprust::lifetime_to_string)\n                               .collect::<Vec<_>>().join(\" + \"))\n-            }\n-            &ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{ref path, ref ty, ..}) => {\n-                let ty_str = pprust::ty_to_string(ty);\n+                }\n+                &ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{ref path, ref ty, ..}) => {\n+                    let ty_str = pprust::ty_to_string(ty);\n                 // 3 = \" = \".len()\n-                let used_width = 3 + ty_str.len();\n-                let path_str = try_opt!(path.rewrite(context,\n+                    let used_width = 3 + ty_str.len();\n+                    let path_str = try_opt!(path.rewrite(context,\n                                                      width - used_width,\n                                                      offset + used_width));\n-                format!(\"{} = {}\", path_str, ty_str)\n-            }\n-        })\n+                    format!(\"{} = {}\", path_str, ty_str)\n+                }\n+            })\n     }\n }\n "}, {"sha": "a8f7a7c7b1df2d7ccd160b1522a755a4ee81097e", "filename": "src/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a43e2b5ae837604511557133f5e7554184465677/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43e2b5ae837604511557133f5e7554184465677/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=a43e2b5ae837604511557133f5e7554184465677", "patch": "@@ -21,7 +21,7 @@ pub fn extra_offset(text: &str, offset: usize) -> usize {\n     match text.rfind('\\n') {\n         // 1 for newline character\n         Some(idx) => text.len() - idx - 1 - offset,\n-        None => text.len()\n+        None => text.len(),\n     }\n }\n \n@@ -70,15 +70,15 @@ pub fn make_indent(width: usize) -> String {\n pub fn format_visibility(vis: Visibility) -> &'static str {\n     match vis {\n         Visibility::Public => \"pub \",\n-        Visibility::Inherited => \"\"\n+        Visibility::Inherited => \"\",\n     }\n }\n \n #[inline]\n pub fn format_mutability(mutability: ast::Mutability) -> &'static str {\n     match mutability {\n         ast::Mutability::MutMutable => \"mut \",\n-        ast::Mutability::MutImmutable => \"\"\n+        ast::Mutability::MutImmutable => \"\",\n     }\n }\n "}, {"sha": "86b1197822b454872e20e41554b234461807ede5", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a43e2b5ae837604511557133f5e7554184465677/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43e2b5ae837604511557133f5e7554184465677/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=a43e2b5ae837604511557133f5e7554184465677", "patch": "@@ -351,7 +351,7 @@ impl<'a> FmtVisitor<'a> {\n                 let prev_span = codemap::mk_sp(self.last_pos, span.lo);\n                 let span_end = match self.snippet(prev_span).rfind('\\n') {\n                     Some(offset) => self.last_pos + BytePos(offset as u32),\n-                    None => span.lo\n+                    None => span.lo,\n                 };\n                 self.format_missing(span_end);\n                 self.last_pos = span.hi;"}]}