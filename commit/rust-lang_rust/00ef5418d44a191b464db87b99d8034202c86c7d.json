{"sha": "00ef5418d44a191b464db87b99d8034202c86c7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZWY1NDE4ZDQ0YTE5MWI0NjRkYjg3Yjk5ZDgwMzQyMDJjODZjN2Q=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-15T18:38:38Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-15T18:38:38Z"}, "message": "Change TLS key type to stack closure", "tree": {"sha": "ecc396e11ae330c558362b43da44b5c1f53bf71f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecc396e11ae330c558362b43da44b5c1f53bf71f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00ef5418d44a191b464db87b99d8034202c86c7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00ef5418d44a191b464db87b99d8034202c86c7d", "html_url": "https://github.com/rust-lang/rust/commit/00ef5418d44a191b464db87b99d8034202c86c7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00ef5418d44a191b464db87b99d8034202c86c7d/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a57d3e0c152a293885f65cdf44d4b98a5e2f71cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a57d3e0c152a293885f65cdf44d4b98a5e2f71cc", "html_url": "https://github.com/rust-lang/rust/commit/a57d3e0c152a293885f65cdf44d4b98a5e2f71cc"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "2748b53fb54d32a34a06fe75c3fb6bab72a43220", "filename": "src/libcore/task.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/00ef5418d44a191b464db87b99d8034202c86c7d/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ef5418d44a191b464db87b99d8034202c86c7d/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=00ef5418d44a191b464db87b99d8034202c86c7d", "patch": "@@ -1025,9 +1025,9 @@ fn kill_taskgroup(state: taskgroup_inner, me: *rust_task, is_main: bool) {\n \n // FIXME (#2912): Work around core-vs-coretest function duplication. Can't use\n // a proper closure because the #[test]s won't understand. Have to fake it.\n-unsafe fn taskgroup_key() -> local_data_key<tcb> {\n+macro_rules! taskgroup_key {\n     // Use a \"code pointer\" value that will never be a real code pointer.\n-    unsafe::transmute((-2 as uint, 0u))\n+    {} => (unsafe::transmute((-2 as uint, 0u)))\n }\n \n fn gen_child_taskgroup(linked: bool, supervised: bool)\n@@ -1036,7 +1036,8 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n     /*######################################################################*\n      * Step 1. Get spawner's taskgroup info.\n      *######################################################################*/\n-    let spawner_group = match unsafe { local_get(spawner, taskgroup_key()) } {\n+    let spawner_group = match unsafe { local_get(spawner,\n+                                                 taskgroup_key!()) } {\n         none => {\n             // Main task, doing first spawn ever. Lazily initialise here.\n             let mut members = new_taskset();\n@@ -1047,7 +1048,7 @@ fn gen_child_taskgroup(linked: bool, supervised: bool)\n             // Main task/group has no ancestors, no notifier, etc.\n             let group =\n                 @tcb(spawner, tasks, ancestor_list(none), true, none);\n-            unsafe { local_set(spawner, taskgroup_key(), group); }\n+            unsafe { local_set(spawner, taskgroup_key!(), group); }\n             group\n         }\n         some(group) => group\n@@ -1162,7 +1163,7 @@ fn spawn_raw(+opts: task_opts, +f: fn~()) {\n             if enlist_many(child, child_arc, &mut ancestors) {\n                 let group = @tcb(child, child_arc, ancestors,\n                                  is_main, notifier);\n-                unsafe { local_set(child, taskgroup_key(), group); }\n+                unsafe { local_set(child, taskgroup_key!(), group); }\n                 // Run the child's body.\n                 f();\n                 // TLS cleanup code will exit the taskgroup.\n@@ -1261,7 +1262,7 @@ fn spawn_raw(+opts: task_opts, +f: fn~()) {\n  *\n  * These two cases aside, the interface is safe.\n  */\n-type local_data_key<T: owned> = fn@(+@T);\n+type local_data_key<T: owned> = &fn(+@T);\n \n trait local_data { }\n impl<T: owned> @T: local_data { }"}]}