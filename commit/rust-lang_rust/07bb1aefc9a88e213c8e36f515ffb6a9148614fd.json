{"sha": "07bb1aefc9a88e213c8e36f515ffb6a9148614fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YmIxYWVmYzlhODhlMjEzYzhlMzZmNTE1ZmZiNmE5MTQ4NjE0ZmQ=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-20T03:08:41Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-20T18:32:18Z"}, "message": "task.rs rename supervise to linked internally", "tree": {"sha": "638a8ad70e04407996cf05cae4d82f20b3923921", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/638a8ad70e04407996cf05cae4d82f20b3923921"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07bb1aefc9a88e213c8e36f515ffb6a9148614fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07bb1aefc9a88e213c8e36f515ffb6a9148614fd", "html_url": "https://github.com/rust-lang/rust/commit/07bb1aefc9a88e213c8e36f515ffb6a9148614fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07bb1aefc9a88e213c8e36f515ffb6a9148614fd/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb2c45feaea4cac94fe0e9dc694ff5bfae038925", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb2c45feaea4cac94fe0e9dc694ff5bfae038925", "html_url": "https://github.com/rust-lang/rust/commit/bb2c45feaea4cac94fe0e9dc694ff5bfae038925"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "1b11f341c6a1fec860b4d29148154b3a16595bf2", "filename": "src/libcore/task.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07bb1aefc9a88e213c8e36f515ffb6a9148614fd/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07bb1aefc9a88e213c8e36f515ffb6a9148614fd/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=07bb1aefc9a88e213c8e36f515ffb6a9148614fd", "patch": "@@ -146,7 +146,7 @@ type sched_opts = {\n  *\n  * # Fields\n  *\n- * * supervise - Do not propagate failure to the parent task\n+ * * linked - Do not propagate failure to the parent task\n  *\n  *     All tasks are linked together via a tree, from parents to children. By\n  *     default children are 'supervised' by their parent and when they fail\n@@ -169,7 +169,7 @@ type sched_opts = {\n  *     scheduler other tasks will be impeded or even blocked indefinitely.\n  */\n type task_opts = {\n-    supervise: bool,\n+    linked: bool,\n     parented: bool,\n     notify_chan: option<comm::chan<notification>>,\n     sched: option<sched_opts>,\n@@ -207,7 +207,7 @@ fn default_task_opts() -> task_opts {\n      */\n \n     {\n-        supervise: true,\n+        linked: true,\n         parented: false,\n         notify_chan: none,\n         sched: none\n@@ -239,7 +239,7 @@ fn set_opts(builder: builder, opts: task_opts) {\n      * To update a single option use a pattern like the following:\n      *\n      *     set_opts(builder, {\n-     *         supervise: false\n+     *         linked: false\n      *         with get_opts(builder)\n      *     });\n      */\n@@ -360,7 +360,7 @@ fn unsupervise(builder: builder) {\n     //! Configures the new task to not propagate failure to its parent\n \n     set_opts(builder, {\n-        supervise: false\n+        linked: false\n         with get_opts(builder)\n     });\n }\n@@ -745,15 +745,15 @@ fn share_parent_taskgroup() -> (taskgroup_arc, bool) {\n \n fn spawn_raw(opts: task_opts, +f: fn~()) {\n     // Decide whether the child needs to be in a new linked failure group.\n-    let ((child_tg, is_main), parent_tg) = if opts.supervise {\n+    let ((child_tg, is_main), parent_tg) = if opts.linked {\n         // It doesn't mean anything for a linked-spawned-task to have a parent\n         // group. The spawning task is already bidirectionally linked to it.\n         (share_parent_taskgroup(), none)\n     } else {\n         // Detached from the parent group; create a new (non-main) one.\n         ((arc::exclusive(some((dvec::dvec(),dvec::dvec()))), false),\n          // Allow the parent to unidirectionally fail the child?\n-         if opts.parented { // FIXME(#1868) rename to unsupervise.\n+         if opts.parented {\n              let (pg,_) = share_parent_taskgroup(); some(pg)\n          } else {\n              none\n@@ -1145,7 +1145,7 @@ fn test_spawn_raw_simple() {\n #[ignore(cfg(windows))]\n fn test_spawn_raw_unsupervise() {\n     let opts = {\n-        supervise: false\n+        linked: false\n         with default_task_opts()\n     };\n     do spawn_raw(opts) {\n@@ -1269,7 +1269,7 @@ fn test_spawn_raw_notify() {\n     assert comm::recv(notify_po) == exit(task_, success);\n \n     let opts = {\n-        supervise: false,\n+        linked: false,\n         notify_chan: some(notify_ch)\n         with default_task_opts()\n     };\n@@ -1592,7 +1592,7 @@ fn test_unkillable() {\n     let ch = po.chan();\n \n     // We want to do this after failing\n-    do spawn_raw({ supervise: false with default_task_opts() }) {\n+    do spawn_raw({ linked: false with default_task_opts() }) {\n         for iter::repeat(10u) { yield() }\n         ch.send(());\n     }\n@@ -1629,7 +1629,7 @@ fn test_unkillable_nested() {\n     let ch = po.chan();\n \n     // We want to do this after failing\n-    do spawn_raw({ supervise: false with default_task_opts() }) {\n+    do spawn_raw({ linked: false with default_task_opts() }) {\n         for iter::repeat(10u) { yield() }\n         ch.send(());\n     }"}]}