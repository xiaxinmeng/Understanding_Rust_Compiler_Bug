{"sha": "c0125532ead50d3ae4bc4846e7fbdb23da6d8531", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMTI1NTMyZWFkNTBkM2FlNGJjNDg0NmU3ZmJkYjIzZGE2ZDg1MzE=", "commit": {"author": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2021-06-27T11:48:01Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2021-06-27T11:48:01Z"}, "message": "Update and bless tests for copy intrinsic", "tree": {"sha": "77cb90527727b93199f839690a1bcb777f9f27a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77cb90527727b93199f839690a1bcb777f9f27a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0125532ead50d3ae4bc4846e7fbdb23da6d8531", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCgAdFiEEeQ9lb2ZjsXFBDRuFH1AezRu9cKcFAmDYZZMACgkQH1AezRu9\ncKdGUQ/3WzPfQka52hjxiTvkz7bXIX2dQ9UTNTNpk8EJlRwyr1uuyLUyx60LYsiy\nz2PT+DuhpZsD9IIvMjPLWiSjM6pFrqXXkynBqU6NCZ36yIk4cWlf2jPjQ/7WUash\nR0uuxwzRG2AHgn71XlQaBUO5/I/M3AD3ZrwG9UecHvCstjs4/kA9Dgsn6tN9ZaWj\nnN8IdNKBhIbgcWCijlc2YZ9FFKTZjP7Ahxk9bavyDPFgeu9WnwxUBRozPxD5PlRq\nZ8ih7fUDW+fgEDHxNSjjo7gdDFEBmQWKruYRu3o+Z8yAGYmyisIWNpD03g115o0N\nUYXytiM4bBBSUKLsKLwL5wdul6X2KwY1L+QaP9/Qw4PEtM2qhm0g+mb2k1Dezyw6\n5DkhIWo9oMQQtB83IB67FtZexRM0bmt3o6H6zL+6QZFe173HudNKC3sDRi/T8vBO\nqYG8h4yq53hW0QSSj2YoA1m7oVez2xWoJrLSE5AiuyQPKNusFxnyXpt++Kwq5c5n\nukRXgKgijhCEh+vypq36xOYcEfoixEMwYwEFkhJgDxbzGXVGnMBRcIrQTV3itiYW\ncATpkT2JbnMtVgZx9cVmL+z0UWbrwXzHxzKFx6ez5LAsjtLZy39/g3zFuzq7S/Qv\nn+By6aV8PM23+5mpnz7vIv7PYaRo3cbhPH1677vwos921oDr6Q==\n=dVEv\n-----END PGP SIGNATURE-----", "payload": "tree 77cb90527727b93199f839690a1bcb777f9f27a3\nparent 56c78b2f5998315aafc9ee7f108160a7220b084f\nauthor Albin Hedman <albin9604@gmail.com> 1624794481 +0200\ncommitter Albin Hedman <albin9604@gmail.com> 1624794481 +0200\n\nUpdate and bless tests for copy intrinsic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0125532ead50d3ae4bc4846e7fbdb23da6d8531", "html_url": "https://github.com/rust-lang/rust/commit/c0125532ead50d3ae4bc4846e7fbdb23da6d8531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0125532ead50d3ae4bc4846e7fbdb23da6d8531/comments", "author": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56c78b2f5998315aafc9ee7f108160a7220b084f", "url": "https://api.github.com/repos/rust-lang/rust/commits/56c78b2f5998315aafc9ee7f108160a7220b084f", "html_url": "https://github.com/rust-lang/rust/commit/56c78b2f5998315aafc9ee7f108160a7220b084f"}], "stats": {"total": 87, "additions": 20, "deletions": 67}, "files": [{"sha": "48d128b10e802a990e4d060418de90165489f796", "filename": "src/test/ui/consts/copy-intrinsic.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c0125532ead50d3ae4bc4846e7fbdb23da6d8531/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0125532ead50d3ae4bc4846e7fbdb23da6d8531/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.rs?ref=c0125532ead50d3ae4bc4846e7fbdb23da6d8531", "patch": "@@ -24,32 +24,27 @@ const COPY_OOB_1: () = unsafe {\n     let mut x = 0i32;\n     let dangle = (&mut x as *mut i32).wrapping_add(10);\n     // Even if the first ptr is an int ptr and this is a ZST copy, we should detect dangling 2nd ptrs.\n-    copy_nonoverlapping(0x100 as *const i32, dangle, 0); //~ ERROR any use of this value will cause an error\n-    //~| memory access failed: pointer must be in-bounds\n-    //~| previously accepted\n+    copy_nonoverlapping(0x100 as *const i32, dangle, 0); //~ evaluation of constant value failed [E0080]\n };\n const COPY_OOB_2: () = unsafe {\n     let x = 0i32;\n     let dangle = (&x as *const i32).wrapping_add(10);\n     // Even if the second ptr is an int ptr and this is a ZST copy, we should detect dangling 1st ptrs.\n-    copy_nonoverlapping(dangle, 0x100 as *mut i32, 0); //~ ERROR any use of this value will cause an error\n+    copy_nonoverlapping(dangle, 0x100 as *mut i32, 0); //~ evaluation of constant value failed [E0080]\n     //~| memory access failed: pointer must be in-bounds\n-    //~| previously accepted\n };\n \n const COPY_SIZE_OVERFLOW: () = unsafe {\n     let x = 0;\n     let mut y = 0;\n-    copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ ERROR any use of this value will cause an error\n+    copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ evaluation of constant value failed [E0080]\n     //~| overflow computing total size of `copy`\n-    //~| previously accepted\n };\n const COPY_NONOVERLAPPING_SIZE_OVERFLOW: () = unsafe {\n     let x = 0;\n     let mut y = 0;\n-    copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ ERROR any use of this value will cause an error\n+    copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1)); //~ evaluation of constant value failed [E0080]\n     //~| overflow computing total size of `copy_nonoverlapping`\n-    //~| previously accepted\n };\n \n fn main() {"}, {"sha": "c1779743e8e00b4599a9e3ccfd2d52a0a3714f44", "filename": "src/test/ui/consts/copy-intrinsic.stderr", "status": "modified", "additions": 16, "deletions": 58, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/c0125532ead50d3ae4bc4846e7fbdb23da6d8531/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0125532ead50d3ae4bc4846e7fbdb23da6d8531/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcopy-intrinsic.stderr?ref=c0125532ead50d3ae4bc4846e7fbdb23da6d8531", "patch": "@@ -1,69 +1,27 @@\n-error: any use of this value will cause an error\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/copy-intrinsic.rs:27:5\n    |\n-LL | / const COPY_OOB_1: () = unsafe {\n-LL | |     let mut x = 0i32;\n-LL | |     let dangle = (&mut x as *mut i32).wrapping_add(10);\n-LL | |     // Even if the first ptr is an int ptr and this is a ZST copy, we should detect dangling 2nd ptrs.\n-LL | |     copy_nonoverlapping(0x100 as *const i32, dangle, 0);\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc4 which has size 4\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n-   |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     copy_nonoverlapping(0x100 as *const i32, dangle, 0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc4 which has size 4\n \n-error: any use of this value will cause an error\n-  --> $DIR/copy-intrinsic.rs:35:5\n-   |\n-LL | / const COPY_OOB_2: () = unsafe {\n-LL | |     let x = 0i32;\n-LL | |     let dangle = (&x as *const i32).wrapping_add(10);\n-LL | |     // Even if the second ptr is an int ptr and this is a ZST copy, we should detect dangling 1st ptrs.\n-LL | |     copy_nonoverlapping(dangle, 0x100 as *mut i32, 0);\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc6 which has size 4\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/copy-intrinsic.rs:33:5\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     copy_nonoverlapping(dangle, 0x100 as *mut i32, 0);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 40, but is outside bounds of alloc6 which has size 4\n \n-error: any use of this value will cause an error\n-  --> $DIR/copy-intrinsic.rs:43:5\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/copy-intrinsic.rs:40:5\n    |\n-LL | / const COPY_SIZE_OVERFLOW: () = unsafe {\n-LL | |     let x = 0;\n-LL | |     let mut y = 0;\n-LL | |     copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy`\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     copy(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy`\n \n-error: any use of this value will cause an error\n-  --> $DIR/copy-intrinsic.rs:50:5\n-   |\n-LL | / const COPY_NONOVERLAPPING_SIZE_OVERFLOW: () = unsafe {\n-LL | |     let x = 0;\n-LL | |     let mut y = 0;\n-LL | |     copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n-   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy_nonoverlapping`\n-LL | |\n-LL | |\n-LL | | };\n-   | |__-\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/copy-intrinsic.rs:46:5\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+LL |     copy_nonoverlapping(&x, &mut y, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy_nonoverlapping`\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}]}