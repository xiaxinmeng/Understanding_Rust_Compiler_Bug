{"sha": "0d13231a4cfb1f24c7cfc8168d15d19c63bdbdba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMTMyMzFhNGNmYjFmMjRjN2NmYzgxNjhkMTVkMTljNjNiZGJkYmE=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "rust19446194516@oli-obk.de", "date": "2015-12-27T01:17:16Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-10T11:50:12Z"}, "message": "const eval failures aren't fatal, simply return a dummy instead", "tree": {"sha": "815fde30b071c43f826e004b3f3865a257758cc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/815fde30b071c43f826e004b3f3865a257758cc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d13231a4cfb1f24c7cfc8168d15d19c63bdbdba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d13231a4cfb1f24c7cfc8168d15d19c63bdbdba", "html_url": "https://github.com/rust-lang/rust/commit/0d13231a4cfb1f24c7cfc8168d15d19c63bdbdba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d13231a4cfb1f24c7cfc8168d15d19c63bdbdba/comments", "author": null, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bde56e14941924c17daeaa1996d61d0ffdb6bd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bde56e14941924c17daeaa1996d61d0ffdb6bd1", "html_url": "https://github.com/rust-lang/rust/commit/7bde56e14941924c17daeaa1996d61d0ffdb6bd1"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "bc8dfd6c7b01637c3c7149033c54d304772d74ff", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0d13231a4cfb1f24c7cfc8168d15d19c63bdbdba/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d13231a4cfb1f24c7cfc8168d15d19c63bdbdba/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=0d13231a4cfb1f24c7cfc8168d15d19c63bdbdba", "patch": "@@ -267,6 +267,10 @@ pub enum ConstVal {\n     Array(ast::NodeId, u64),\n     Repeat(ast::NodeId, u64),\n     Char(char),\n+    /// A value that only occurs in case `eval_const_expr` reported an error. You should never\n+    /// handle this case. Its sole purpose is to allow more errors to be reported instead of\n+    /// causing a fatal error.\n+    Dummy,\n }\n \n impl hash::Hash for ConstVal {\n@@ -283,6 +287,7 @@ impl hash::Hash for ConstVal {\n             Array(a, n) => { a.hash(state); n.hash(state) },\n             Repeat(a, n) => { a.hash(state); n.hash(state) },\n             Char(c) => c.hash(state),\n+            Dummy => ().hash(state),\n         }\n     }\n }\n@@ -305,6 +310,7 @@ impl PartialEq for ConstVal {\n             (&Array(a, an), &Array(b, bn)) => (a == b) && (an == bn),\n             (&Repeat(a, an), &Repeat(b, bn)) => (a == b) && (an == bn),\n             (&Char(a), &Char(b)) => a == b,\n+            (&Dummy, &Dummy) => true, // FIXME: should this be false?\n             _ => false,\n         }\n     }\n@@ -326,6 +332,7 @@ impl ConstVal {\n             Array(..) => \"array\",\n             Repeat(..) => \"repeat\",\n             Char(..) => \"char\",\n+            Dummy => \"dummy value\",\n         }\n     }\n }\n@@ -393,7 +400,12 @@ pub fn const_expr_to_pat(tcx: &TyCtxt, expr: &Expr, span: Span) -> P<hir::Pat> {\n pub fn eval_const_expr(tcx: &TyCtxt, e: &Expr) -> ConstVal {\n     match eval_const_expr_partial(tcx, e, ExprTypeChecked, None) {\n         Ok(r) => r,\n-        Err(s) => tcx.sess.span_fatal(s.span, &s.description())\n+        // non-const path still needs to be a fatal error, because enums are funky\n+        Err(ref s) if s.kind == NonConstPath => tcx.sess.span_fatal(s.span, &s.description()),\n+        Err(s) => {\n+            tcx.sess.span_err(s.span, &s.description());\n+            Dummy\n+        },\n     }\n }\n \n@@ -405,7 +417,7 @@ pub struct ConstEvalErr {\n     pub kind: ErrKind,\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, PartialEq)]\n pub enum ErrKind {\n     CannotCast,\n     CannotCastTo(&'static str),"}, {"sha": "f8ab98a15d9c1ef65017ea7c97ebc068793c06fa", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d13231a4cfb1f24c7cfc8168d15d19c63bdbdba/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d13231a4cfb1f24c7cfc8168d15d19c63bdbdba/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=0d13231a4cfb1f24c7cfc8168d15d19c63bdbdba", "patch": "@@ -1546,7 +1546,7 @@ impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n     /// Asserts this is a struct and returns the struct's unique\n     /// variant.\n     pub fn struct_variant(&self) -> &VariantDefData<'tcx, 'container> {\n-        assert!(self.adt_kind() == AdtKind::Struct);\n+        assert_eq!(self.adt_kind(), AdtKind::Struct);\n         &self.variants[0]\n     }\n "}, {"sha": "c20d8b01eb773ab3e5d7604775822502324b3e6e", "filename": "src/librustc_trans/trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d13231a4cfb1f24c7cfc8168d15d19c63bdbdba/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d13231a4cfb1f24c7cfc8168d15d19c63bdbdba/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fconstant.rs?ref=0d13231a4cfb1f24c7cfc8168d15d19c63bdbdba", "patch": "@@ -93,6 +93,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 })\n             },\n             ConstVal::Char(c) => C_integral(Type::char(ccx), c as u64, false),\n+            ConstVal::Dummy => unreachable!(),\n             ConstVal::Function(_) => C_nil(ccx)\n         }\n     }"}]}