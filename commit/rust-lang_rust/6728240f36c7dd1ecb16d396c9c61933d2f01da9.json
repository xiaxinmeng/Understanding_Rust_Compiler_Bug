{"sha": "6728240f36c7dd1ecb16d396c9c61933d2f01da9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MjgyNDBmMzZjN2RkMWVjYjE2ZDM5NmM5YzYxOTMzZDJmMDFkYTk=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-11-07T00:02:15Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-11-07T00:31:44Z"}, "message": "Test structural matching for all range types\n\nAdds structural match tests for all range types.\n\nNote: also adds the otherwise unrelated test `test_range_to_inclusive` for completeness", "tree": {"sha": "ee7169b361d57c4d3a10a6fc0510cfa28cadc2e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee7169b361d57c4d3a10a6fc0510cfa28cadc2e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6728240f36c7dd1ecb16d396c9c61933d2f01da9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6728240f36c7dd1ecb16d396c9c61933d2f01da9", "html_url": "https://github.com/rust-lang/rust/commit/6728240f36c7dd1ecb16d396c9c61933d2f01da9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6728240f36c7dd1ecb16d396c9c61933d2f01da9/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a601302ff0217b91589b5a7310a8a23adb843fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a601302ff0217b91589b5a7310a8a23adb843fdc", "html_url": "https://github.com/rust-lang/rust/commit/a601302ff0217b91589b5a7310a8a23adb843fdc"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "e9d595e65e2b2f49af8652b2cad7c762ee96ef26", "filename": "library/core/tests/ops.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6728240f36c7dd1ecb16d396c9c61933d2f01da9/library%2Fcore%2Ftests%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6728240f36c7dd1ecb16d396c9c61933d2f01da9/library%2Fcore%2Ftests%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fops.rs?ref=6728240f36c7dd1ecb16d396c9c61933d2f01da9", "patch": "@@ -1,4 +1,4 @@\n-use core::ops::{Bound, Range, RangeFrom, RangeFull, RangeInclusive, RangeTo};\n+use core::ops::{Bound, Range, RangeFrom, RangeFull, RangeInclusive, RangeTo, RangeToInclusive};\n \n // Test the Range structs and syntax.\n \n@@ -59,6 +59,12 @@ fn test_range_inclusive() {\n     assert_eq!(r.next(), None);\n }\n \n+#[test]\n+fn test_range_to_inclusive() {\n+    // Not much to test.\n+    let _ = RangeToInclusive { end: 42 };\n+}\n+\n #[test]\n fn test_range_is_empty() {\n     assert!(!(0.0..10.0).is_empty());\n@@ -151,3 +157,43 @@ fn test_range_syntax_in_return_statement() {\n     }\n     // Not much to test.\n }\n+\n+#[test]\n+fn range_structural_match() {\n+    // test that all range types can be structurally matched upon\n+\n+    const RANGE: Range<usize> = 0..1000;\n+    match RANGE {\n+        RANGE => {}\n+        _ => unreachable!(),\n+    }\n+\n+    const RANGE_FROM: RangeFrom<usize> = 0..;\n+    match RANGE_FROM {\n+        RANGE_FROM => {}\n+        _ => unreachable!(),\n+    }\n+\n+    const RANGE_FULL: RangeFull = ..;\n+    match RANGE_FULL {\n+        RANGE_FULL => {}\n+    }\n+\n+    const RANGE_INCLUSIVE: RangeInclusive<usize> = 0..=999;\n+    match RANGE_INCLUSIVE {\n+        RANGE_INCLUSIVE => {}\n+        _ => unreachable!(),\n+    }\n+\n+    const RANGE_TO: RangeTo<usize> = ..1000;\n+    match RANGE_TO {\n+        RANGE_TO => {}\n+        _ => unreachable!(),\n+    }\n+\n+    const RANGE_TO_INCLUSIVE: RangeToInclusive<usize> = ..=999;\n+    match RANGE_TO_INCLUSIVE {\n+        RANGE_TO_INCLUSIVE => {}\n+        _ => unreachable!(),\n+    }\n+}"}]}