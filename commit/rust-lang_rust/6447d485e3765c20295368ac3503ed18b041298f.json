{"sha": "6447d485e3765c20295368ac3503ed18b041298f", "node_id": "C_kwDOAAsO6NoAKDY0NDdkNDg1ZTM3NjVjMjAyOTUzNjhhYzM1MDNlZDE4YjA0MTI5OGY", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-03-29T12:46:46Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-03-29T14:37:01Z"}, "message": "Normalize type anchor type before resolving the rest of value paths", "tree": {"sha": "cc7a6618a47a2ba394613268454d61f8ab1f2c6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc7a6618a47a2ba394613268454d61f8ab1f2c6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6447d485e3765c20295368ac3503ed18b041298f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmQkTRcACgkQ4laYqTBY\nYXHPeQ/+OL9rJTV4N/hhHQP7U/uRgL2zal9eQRZYZ/7Linu6fWU6LALqCWdXH+Tu\nDrssNsqZM7ifI0HBkmMtzW734bCHDwLybZkCumeviPj3zdOzkep5rkk/BwiiRFJE\nno/IRAtS524T6sZy5OJHUeBm2Xj0RzEnqetnm0Rgy9mYYAky8VFskflBE1RG4Wpn\nxTWzDZUlXz7h1+7Kv6HqBWQmD25jCuFsCKORfe4YJEmZehIeyKJV1BJVYoYbq7TX\nOTC+llJHYbif0NinZI5IYWn8X6cknNFw1u5PeWdc+T+e67P2EAth24486ss2AxH1\nmtFmbVNNXgsPYBFV37/Dh45EFo99mHcoD+I6T1gylsGvP4U5GZaI5Iv8PTLZkRyS\nStaiA++cHGH68BE+V/GJ+leftJvbdk048bc1tGdo/U55avbDPxqVxdaWcMl2gvee\n9A51ZHsIlBOAykQakapWcuPp7tg4y82eFU3R+gz0S3tWhFT0PEVMf1A3erA4tpPH\nwDCam2720ZIegzNvurViO3B/Qmrgyf7QThOXTCIe218LC1Mt8mhm4z+hhF73FFsa\nUWpGUbIOUhDLpoW0ZfEQ0cVVOeH7Q4g0ZbC1jlnnbBR5M8ggUZ6Ao0hXbrd6d15w\nyqWLS/Z1hP9haXRi6C+K/I/0+/+PFkOEQDSMwfe2p7L8xnp0n0I=\n=6xE8\n-----END PGP SIGNATURE-----", "payload": "tree cc7a6618a47a2ba394613268454d61f8ab1f2c6a\nparent 8aef04f1a72ea9028d468914ed15439536fc2635\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1680094006 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1680100621 +0900\n\nNormalize type anchor type before resolving the rest of value paths\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6447d485e3765c20295368ac3503ed18b041298f", "html_url": "https://github.com/rust-lang/rust/commit/6447d485e3765c20295368ac3503ed18b041298f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6447d485e3765c20295368ac3503ed18b041298f/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aef04f1a72ea9028d468914ed15439536fc2635", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aef04f1a72ea9028d468914ed15439536fc2635", "html_url": "https://github.com/rust-lang/rust/commit/8aef04f1a72ea9028d468914ed15439536fc2635"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "368c3f65243d996397674834d41d8f2ad023553f", "filename": "crates/hir-ty/src/infer/path.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6447d485e3765c20295368ac3503ed18b041298f/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6447d485e3765c20295368ac3503ed18b041298f/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpath.rs?ref=6447d485e3765c20295368ac3503ed18b041298f", "patch": "@@ -30,11 +30,18 @@ impl<'a> InferenceContext<'a> {\n \n     fn resolve_value_path(&mut self, path: &Path, id: ExprOrPatId) -> Option<Ty> {\n         let (value, self_subst) = if let Some(type_ref) = path.type_anchor() {\n-            let Some(last) = path.segments().last() else { return None };\n-            let ty = self.make_ty(type_ref);\n-            let remaining_segments_for_ty = path.segments().take(path.segments().len() - 1);\n+            let last = path.segments().last()?;\n+\n+            // Don't use `self.make_ty()` here as we need `orig_ns`.\n             let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver);\n-            let (ty, _) = ctx.lower_ty_relative_path(ty, None, remaining_segments_for_ty);\n+            let (ty, orig_ns) = ctx.lower_ty_ext(type_ref);\n+            let ty = self.table.insert_type_vars(ty);\n+            let ty = self.table.normalize_associated_types_in(ty);\n+\n+            let remaining_segments_for_ty = path.segments().take(path.segments().len() - 1);\n+            let (ty, _) = ctx.lower_ty_relative_path(ty, orig_ns, remaining_segments_for_ty);\n+            let ty = self.table.insert_type_vars(ty);\n+            let ty = self.table.normalize_associated_types_in(ty);\n             self.resolve_ty_assoc_item(ty, last.name, id).map(|(it, substs)| (it, Some(substs)))?\n         } else {\n             // FIXME: report error, unresolved first path segment\n@@ -169,7 +176,7 @@ impl<'a> InferenceContext<'a> {\n     ) -> Option<(ValueNs, Substitution)> {\n         let trait_ = trait_ref.hir_trait_id();\n         let item =\n-            self.db.trait_data(trait_).items.iter().map(|(_name, id)| (*id)).find_map(|item| {\n+            self.db.trait_data(trait_).items.iter().map(|(_name, id)| *id).find_map(|item| {\n                 match item {\n                     AssocItemId::FunctionId(func) => {\n                         if segment.name == &self.db.function_data(func).name {\n@@ -288,7 +295,7 @@ impl<'a> InferenceContext<'a> {\n         name: &Name,\n         id: ExprOrPatId,\n     ) -> Option<(ValueNs, Substitution)> {\n-        let ty = self.resolve_ty_shallow(ty);\n+        let ty = self.resolve_ty_shallow(&ty);\n         let (enum_id, subst) = match ty.as_adt() {\n             Some((AdtId::EnumId(e), subst)) => (e, subst),\n             _ => return None,"}, {"sha": "adadbb888ba988f96077a2b3a3723b70ff416823", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6447d485e3765c20295368ac3503ed18b041298f/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6447d485e3765c20295368ac3503ed18b041298f/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=6447d485e3765c20295368ac3503ed18b041298f", "patch": "@@ -103,7 +103,7 @@ impl ImplTraitLoweringState {\n #[derive(Debug)]\n pub struct TyLoweringContext<'a> {\n     pub db: &'a dyn HirDatabase,\n-    pub resolver: &'a Resolver,\n+    resolver: &'a Resolver,\n     in_binders: DebruijnIndex,\n     /// Note: Conceptually, it's thinkable that we could be in a location where\n     /// some type params should be represented as placeholders, and others"}, {"sha": "1201165cfa7f4124f0e62144f3db1ad0622634f1", "filename": "crates/hir-ty/src/tests/traits.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6447d485e3765c20295368ac3503ed18b041298f/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6447d485e3765c20295368ac3503ed18b041298f/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Ftraits.rs?ref=6447d485e3765c20295368ac3503ed18b041298f", "patch": "@@ -4239,6 +4239,26 @@ impl Trait for () {\n     type Assoc = E;\n \n     fn f() {\n+        let a = Self::Assoc::Unit;\n+      //    ^ E\n+        let a = <Self>::Assoc::Unit;\n+      //    ^ E\n+        let a = <Self::Assoc>::Unit;\n+      //    ^ E\n+        let a = <<Self>::Assoc>::Unit;\n+      //    ^ E\n+\n+        // should be `Copy` but we don't track ownership anyway.\n+        let value = E::Unit;\n+        if let Self::Assoc::Unit = value {}\n+      //       ^^^^^^^^^^^^^^^^^ E\n+        if let <Self>::Assoc::Unit = value {}\n+      //       ^^^^^^^^^^^^^^^^^^^ E\n+        if let <Self::Assoc>::Unit = value {}\n+      //       ^^^^^^^^^^^^^^^^^^^ E\n+        if let <<Self>::Assoc>::Unit = value {}\n+      //       ^^^^^^^^^^^^^^^^^^^^^ E\n+\n         let x = 42;\n         let a = Self::Assoc::Struct { x };\n       //    ^ E"}]}