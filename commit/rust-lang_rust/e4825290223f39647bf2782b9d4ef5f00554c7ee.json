{"sha": "e4825290223f39647bf2782b9d4ef5f00554c7ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ODI1MjkwMjIzZjM5NjQ3YmYyNzgyYjlkNGVmNWYwMDU1NGM3ZWU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-09T00:12:38Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-04-24T13:14:15Z"}, "message": "Fix invalid module suggestion", "tree": {"sha": "9562fcfed3f0845b66bc46843171d566c57731a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9562fcfed3f0845b66bc46843171d566c57731a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4825290223f39647bf2782b9d4ef5f00554c7ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4825290223f39647bf2782b9d4ef5f00554c7ee", "html_url": "https://github.com/rust-lang/rust/commit/e4825290223f39647bf2782b9d4ef5f00554c7ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4825290223f39647bf2782b9d4ef5f00554c7ee/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "846891aeff1a2a73524c404c6eeff5e8daf4caa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/846891aeff1a2a73524c404c6eeff5e8daf4caa2", "html_url": "https://github.com/rust-lang/rust/commit/846891aeff1a2a73524c404c6eeff5e8daf4caa2"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "dd32b40554b5d719db1ab023afb6ee8039c32763", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e4825290223f39647bf2782b9d4ef5f00554c7ee/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4825290223f39647bf2782b9d4ef5f00554c7ee/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e4825290223f39647bf2782b9d4ef5f00554c7ee", "patch": "@@ -5363,26 +5363,33 @@ impl<'a> Parser<'a> {\n             }\n             let mut err = self.diagnostic().struct_span_err(id_sp,\n                 \"cannot declare a new module at this location\");\n-            let this_module = match self.directory.path.file_name() {\n-                Some(file_name) => file_name.to_str().unwrap().to_owned(),\n-                None => self.root_module_name.as_ref().unwrap().clone(),\n-            };\n-            err.span_note(id_sp,\n-                          &format!(\"maybe move this module `{0}` to its own directory \\\n-                                    via `{0}{1}mod.rs`\",\n-                                   this_module,\n-                                   path::MAIN_SEPARATOR));\n+            if id_sp != syntax_pos::DUMMY_SP {\n+                let full_path = self.sess.codemap().span_to_filename(id_sp);\n+                let path = Path::new(&full_path);\n+                let filename = path.file_stem().unwrap();\n+                let parent = path.parent().unwrap_or(Path::new(\"\"))\n+                                          .to_str().unwrap_or(\"\").to_owned();\n+                let path = format!(\"{}/{}\",\n+                                   if parent.len() == 0 { \".\" } else { &parent },\n+                                   filename.to_str().unwrap_or(\"\"));\n+                err.span_note(id_sp,\n+                              &format!(\"maybe move this module `{0}` to its own directory \\\n+                                        via `{0}{1}mod.rs`\",\n+                                       path,\n+                                       path::MAIN_SEPARATOR));\n+            }\n             if paths.path_exists {\n                 err.span_note(id_sp,\n                               &format!(\"... or maybe `use` the module `{}` instead \\\n                                         of possibly redeclaring it\",\n                                        paths.name));\n-                Err(err)\n-            } else {\n-                Err(err)\n             }\n+            Err(err)\n         } else {\n-            paths.result.map_err(|err| self.span_fatal_err(id_sp, err))\n+            match paths.result {\n+                Ok(succ) => Ok(succ),\n+                Err(err) => Err(self.span_fatal_err(id_sp, &err.err_msg, &err.help_msg)),\n+            }\n         }\n     }\n "}]}