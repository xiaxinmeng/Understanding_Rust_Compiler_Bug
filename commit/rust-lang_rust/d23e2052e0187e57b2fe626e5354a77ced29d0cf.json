{"sha": "d23e2052e0187e57b2fe626e5354a77ced29d0cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyM2UyMDUyZTAxODdlNTdiMmZlNjI2ZTUzNTRhNzdjZWQyOWQwY2Y=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-06T15:25:04Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-06T16:40:05Z"}, "message": "Support interface casting in the typechecker\n\nIssue #1437", "tree": {"sha": "612bf3c35a55e3ef5263ad6b5694e6d022339559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/612bf3c35a55e3ef5263ad6b5694e6d022339559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d23e2052e0187e57b2fe626e5354a77ced29d0cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d23e2052e0187e57b2fe626e5354a77ced29d0cf", "html_url": "https://github.com/rust-lang/rust/commit/d23e2052e0187e57b2fe626e5354a77ced29d0cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d23e2052e0187e57b2fe626e5354a77ced29d0cf/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d214e3df1657e8fa00d475aa5d31d0498f35d337", "url": "https://api.github.com/repos/rust-lang/rust/commits/d214e3df1657e8fa00d475aa5d31d0498f35d337", "html_url": "https://github.com/rust-lang/rust/commit/d214e3df1657e8fa00d475aa5d31d0498f35d337"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "bdb4ae675454e0ad80bafe3390d67df769daed81", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d23e2052e0187e57b2fe626e5354a77ced29d0cf/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23e2052e0187e57b2fe626e5354a77ced29d0cf/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=d23e2052e0187e57b2fe626e5354a77ced29d0cf", "patch": "@@ -1892,7 +1892,7 @@ fn visit_mod_with_impl_scope(e: @env, m: ast::_mod, s: span, sc: iscopes,\n \n fn resolve_impl_in_expr(e: @env, x: @ast::expr, sc: iscopes, v: vt<iscopes>) {\n     alt x.node {\n-      ast::expr_field(_, _, _) | ast::expr_path(_) {\n+      ast::expr_field(_, _, _) | ast::expr_path(_) | ast::expr_cast(_, _) {\n         e.impl_map.insert(x.id, sc);\n       }\n       _ {}"}, {"sha": "792867a646e3395f2a773188fb00438b2fabbb98", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d23e2052e0187e57b2fe626e5354a77ced29d0cf/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d23e2052e0187e57b2fe626e5354a77ced29d0cf/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=d23e2052e0187e57b2fe626e5354a77ced29d0cf", "patch": "@@ -25,6 +25,7 @@ tag method_origin {\n     method_static(ast::def_id);\n     // iface id, method num, param num, bound num\n     method_param(ast::def_id, uint, uint, uint);\n+    method_iface;\n }\n type method_map = hashmap<ast::node_id, method_origin>;\n \n@@ -1572,6 +1573,16 @@ fn lookup_method(fcx: @fn_ctxt, isc: resolve::iscopes,\n         }\n         ret none;\n       }\n+      ty::ty_iface(did, tps) {\n+        for m in *ty::iface_methods(tcx, did) {\n+            if m.ident == name {\n+                ret some({method_ty: ty::mk_fn(tcx, m.fty),\n+                          n_tps: vec::len(*m.tps),\n+                          substs: tps,\n+                          origin: method_iface});\n+            }\n+        }\n+      }\n       _ {}\n     }\n \n@@ -2192,13 +2203,18 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                                   ty_to_str(tcx, t_1));\n         }\n \n-        // FIXME there are more forms of cast to support, eventually.\n-        if !(   type_is_scalar(fcx, expr.span, t_e)\n-             && type_is_scalar(fcx, expr.span, t_1)) {\n-            tcx.sess.span_err(expr.span,\n-                              \"non-scalar cast: \" +\n+        alt ty::struct(tcx, t_1) {\n+          // This will be looked up later on\n+          ty::ty_iface(_, _) {}\n+          _ {\n+            // FIXME there are more forms of cast to support, eventually.\n+            if !(   type_is_scalar(fcx, expr.span, t_e)\n+                 && type_is_scalar(fcx, expr.span, t_1)) {\n+                tcx.sess.span_err(expr.span, \"non-scalar cast: \" +\n                                   ty_to_str(tcx, t_e) + \" as \" +\n                                   ty_to_str(tcx, t_1));\n+            }\n+          }\n         }\n         write::ty_only_fixup(fcx, id, t_1);\n       }\n@@ -3019,6 +3035,18 @@ mod dict {\n               _ {}\n             }\n           }\n+          ast::expr_cast(src, _) {\n+            let target_ty = expr_ty(cx.tcx, ex);\n+            alt ty::struct(cx.tcx, target_ty) {\n+              ty::ty_iface(_, _) {\n+                let impls = cx.impl_map.get(ex.id);\n+                let dict = lookup_dict(fcx, impls, ex.span,\n+                                       expr_ty(cx.tcx, src), target_ty);\n+                cx.dict_map.insert(ex.id, @[dict]);\n+              }\n+              _ {}\n+            }\n+          }\n           ast::expr_fn(ast::proto_block., _, _, _) {}\n           ast::expr_fn(_, _, _, _) { ret; }\n           _ {}"}]}