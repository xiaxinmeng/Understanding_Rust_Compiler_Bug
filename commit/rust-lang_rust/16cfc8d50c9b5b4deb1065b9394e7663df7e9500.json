{"sha": "16cfc8d50c9b5b4deb1065b9394e7663df7e9500", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2Y2ZjOGQ1MGM5YjViNGRlYjEwNjViOTM5NGU3NjYzZGY3ZTk1MDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-16T15:44:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-16T15:44:25Z"}, "message": "Cache source for generics", "tree": {"sha": "d597b2a35210480e3ed2c717151ef47fc4a380a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d597b2a35210480e3ed2c717151ef47fc4a380a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16cfc8d50c9b5b4deb1065b9394e7663df7e9500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16cfc8d50c9b5b4deb1065b9394e7663df7e9500", "html_url": "https://github.com/rust-lang/rust/commit/16cfc8d50c9b5b4deb1065b9394e7663df7e9500", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16cfc8d50c9b5b4deb1065b9394e7663df7e9500/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aa627fe582e8811e9e98b58c8a6da80054ba2e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aa627fe582e8811e9e98b58c8a6da80054ba2e3", "html_url": "https://github.com/rust-lang/rust/commit/7aa627fe582e8811e9e98b58c8a6da80054ba2e3"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "00f48177be464e5b071ef4ac97c2639bb080217c", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/16cfc8d50c9b5b4deb1065b9394e7663df7e9500/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16cfc8d50c9b5b4deb1065b9394e7663df7e9500/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=16cfc8d50c9b5b4deb1065b9394e7663df7e9500", "patch": "@@ -48,6 +48,7 @@ impl<DB: HirDatabase> SourceBinder<'_, DB> {\n             ChildContainer::ModuleId(it) => it.resolver(self.db),\n             ChildContainer::EnumId(it) => it.resolver(self.db),\n             ChildContainer::VariantId(it) => it.resolver(self.db),\n+            ChildContainer::GenericDefId(it) => it.resolver(self.db),\n         };\n         SourceAnalyzer::new_for_resolver(resolver, src)\n     }\n@@ -107,6 +108,19 @@ impl<DB: HirDatabase> SourceBinder<'_, DB> {\n         let c = crate::Module::from_definition(self.db, src.with_value(module_source))?;\n         Some(c.id.into())\n     }\n+\n+    fn child_by_source(&mut self, container: ChildContainer) -> &DynMap {\n+        let db = self.db;\n+        self.child_by_source_cache.entry(container).or_insert_with(|| match container {\n+            ChildContainer::DefWithBodyId(it) => it.child_by_source(db),\n+            ChildContainer::ModuleId(it) => it.child_by_source(db),\n+            ChildContainer::TraitId(it) => it.child_by_source(db),\n+            ChildContainer::ImplId(it) => it.child_by_source(db),\n+            ChildContainer::EnumId(it) => it.child_by_source(db),\n+            ChildContainer::VariantId(it) => it.child_by_source(db),\n+            ChildContainer::GenericDefId(it) => it.child_by_source(db),\n+        })\n+    }\n }\n \n pub trait ToId: Sized {\n@@ -157,6 +171,9 @@ enum ChildContainer {\n     ImplId(ImplId),\n     EnumId(EnumId),\n     VariantId(VariantId),\n+    /// XXX: this might be the same def as, for example an `EnumId`. However,\n+    /// here the children generic parameters, and not, eg enum variants.\n+    GenericDefId(GenericDefId),\n }\n impl_froms! {\n     ChildContainer:\n@@ -166,6 +183,7 @@ impl_froms! {\n     ImplId,\n     EnumId,\n     VariantId,\n+    GenericDefId\n }\n \n pub trait ToIdByKey: Sized + AstNode + 'static {\n@@ -189,6 +207,7 @@ impl<T: ToIdByKey> ToId for T {\n                 ChildContainer::ImplId(it) => it.child_by_source(db),\n                 ChildContainer::EnumId(it) => it.child_by_source(db),\n                 ChildContainer::VariantId(it) => it.child_by_source(db),\n+                ChildContainer::GenericDefId(it) => it.child_by_source(db),\n             });\n         dyn_map[T::KEY].get(&src).copied()\n     }\n@@ -283,7 +302,7 @@ impl ToDef for ast::TypeParam {\n             };\n             Some(res)\n         })?;\n-        let &id = parent.child_by_source(sb.db)[keys::TYPE_PARAM].get(&src)?;\n+        let &id = sb.child_by_source(parent.into())[keys::TYPE_PARAM].get(&src)?;\n         Some(TypeParam { id })\n     }\n }"}]}