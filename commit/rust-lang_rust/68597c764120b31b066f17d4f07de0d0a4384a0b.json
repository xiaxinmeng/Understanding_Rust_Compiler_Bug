{"sha": "68597c764120b31b066f17d4f07de0d0a4384a0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NTk3Yzc2NDEyMGIzMWIwNjZmMTdkNGYwN2RlMGQwYTQzODRhMGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-27T06:17:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-27T06:17:49Z"}, "message": "Rollup merge of #63698 - Phosphorus15:master, r=nagisa\n\nFixed floating point issue with asinh function\n\nThis should fixes #63271 , in which `asinh(-0.0)` returns `0.0` instead of `-0.0`.\naccording to @nagisa\n>\n>\n> IEEE-754 (2008), section 9.2.1:\n>\n> > For the functions expm1, exp2m1, exp10m1, logp1, log2p1, log10p1, sin, tan, sinPi, atanPi, asin, atan, sinh, tanh, asinh, and atanh, f(+0) is +0 and f(\u22120) is \u22120 with no exception.\n>\n> and\n>\n> > sinh(\u00b1\u221e) and asinh(\u00b1\u221e) are \u00b1\u221e with no exception.\n\nAfter ensuring that the function `asinh` is the only function affected (functions like `sin`, `sinh` are all based on `cmath` library or `llvm` intrinsics), and that `atanh` always gives the correct result. The only function to modify is `asinh`.", "tree": {"sha": "1cf9b343f9fc69b097b6eea6254f719e7259d878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cf9b343f9fc69b097b6eea6254f719e7259d878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68597c764120b31b066f17d4f07de0d0a4384a0b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdZMsOCRBK7hj4Ov3rIwAAdHIIAKI2TokbM8m3tSeUwvC6h3vM\nBwG3LVtQEr+6LRRobxohodJ0Je3UsJHqf9cyy7g5LiuP9uM4EbEcm5TbPJ9og4nd\n+9V/ldAPN6QOE8QyE80Pjnl5PVeyA1WUl9Hvjt7gjtJ81vX7WjqlCwx1PCvlIJeI\nVRIporQ9Xvzuc5APFa8V+v2uioWhLttsFexy+Gf9sAaKLcLOB19gZb7PYDZYQvqg\n8D9Hb2wlHDxg7jUNZvInt4I2QsBCsD0/WESs4/c6PjtROEhoO3zDR/1c+pkKvU2y\n85rfpcxhi23p3Vz3gEn3PsVDDuWvPm7KGmqaSDlYSKwrjlSjmk12qchut40UQpM=\n=XvQS\n-----END PGP SIGNATURE-----\n", "payload": "tree 1cf9b343f9fc69b097b6eea6254f719e7259d878\nparent 6d20265a9e8cdde5f339005ee12a3103a8ddac0c\nparent e33d8707c8ed516fd798c835acf7e1567293cf9a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566886669 +0200\ncommitter GitHub <noreply@github.com> 1566886669 +0200\n\nRollup merge of #63698 - Phosphorus15:master, r=nagisa\n\nFixed floating point issue with asinh function\n\nThis should fixes #63271 , in which `asinh(-0.0)` returns `0.0` instead of `-0.0`.\naccording to @nagisa\n>\n>\n> IEEE-754 (2008), section 9.2.1:\n>\n> > For the functions expm1, exp2m1, exp10m1, logp1, log2p1, log10p1, sin, tan, sinPi, atanPi, asin, atan, sinh, tanh, asinh, and atanh, f(+0) is +0 and f(\u22120) is \u22120 with no exception.\n>\n> and\n>\n> > sinh(\u00b1\u221e) and asinh(\u00b1\u221e) are \u00b1\u221e with no exception.\n\nAfter ensuring that the function `asinh` is the only function affected (functions like `sin`, `sinh` are all based on `cmath` library or `llvm` intrinsics), and that `atanh` always gives the correct result. The only function to modify is `asinh`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68597c764120b31b066f17d4f07de0d0a4384a0b", "html_url": "https://github.com/rust-lang/rust/commit/68597c764120b31b066f17d4f07de0d0a4384a0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68597c764120b31b066f17d4f07de0d0a4384a0b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d20265a9e8cdde5f339005ee12a3103a8ddac0c", "html_url": "https://github.com/rust-lang/rust/commit/6d20265a9e8cdde5f339005ee12a3103a8ddac0c"}, {"sha": "e33d8707c8ed516fd798c835acf7e1567293cf9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e33d8707c8ed516fd798c835acf7e1567293cf9a", "html_url": "https://github.com/rust-lang/rust/commit/e33d8707c8ed516fd798c835acf7e1567293cf9a"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "795830a52c5451a3e190c238c5d8f3615cd319c5", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68597c764120b31b066f17d4f07de0d0a4384a0b/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68597c764120b31b066f17d4f07de0d0a4384a0b/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=68597c764120b31b066f17d4f07de0d0a4384a0b", "patch": "@@ -910,7 +910,7 @@ impl f32 {\n         if self == NEG_INFINITY {\n             NEG_INFINITY\n         } else {\n-            (self + ((self * self) + 1.0).sqrt()).ln()\n+            (self + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n         }\n     }\n \n@@ -931,9 +931,10 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acosh(self) -> f32 {\n-        match self {\n-            x if x < 1.0 => crate::f32::NAN,\n-            x => (x + ((x * x) - 1.0).sqrt()).ln(),\n+        if self < 1.0 {\n+            crate::f32::NAN\n+        } else {\n+            (self + ((self * self) - 1.0).sqrt()).ln()\n         }\n     }\n \n@@ -1487,6 +1488,7 @@ mod tests {\n         assert_eq!(inf.asinh(), inf);\n         assert_eq!(neg_inf.asinh(), neg_inf);\n         assert!(nan.asinh().is_nan());\n+        assert!((-0.0f32).asinh().is_sign_negative()); // issue 63271\n         assert_approx_eq!(2.0f32.asinh(), 1.443635475178810342493276740273105f32);\n         assert_approx_eq!((-2.0f32).asinh(), -1.443635475178810342493276740273105f32);\n     }"}, {"sha": "44d25f1b476575b5bbe713d9cac9a4743bec4007", "filename": "src/libstd/f64.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/68597c764120b31b066f17d4f07de0d0a4384a0b/src%2Flibstd%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68597c764120b31b066f17d4f07de0d0a4384a0b/src%2Flibstd%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff64.rs?ref=68597c764120b31b066f17d4f07de0d0a4384a0b", "patch": "@@ -244,7 +244,7 @@ impl f64 {\n     pub fn div_euclid(self, rhs: f64) -> f64 {\n         let q = (self / rhs).trunc();\n         if self % rhs < 0.0 {\n-            return if rhs > 0.0 { q - 1.0 } else { q + 1.0 }\n+            return if rhs > 0.0 { q - 1.0 } else { q + 1.0 };\n         }\n         q\n     }\n@@ -437,9 +437,9 @@ impl f64 {\n     pub fn log2(self) -> f64 {\n         self.log_wrapper(|n| {\n             #[cfg(target_os = \"android\")]\n-            return crate::sys::android::log2f64(n);\n+                return crate::sys::android::log2f64(n);\n             #[cfg(not(target_os = \"android\"))]\n-            return unsafe { intrinsics::log2f64(n) };\n+                return unsafe { intrinsics::log2f64(n) };\n         })\n     }\n \n@@ -481,16 +481,16 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     #[rustc_deprecated(since = \"1.10.0\",\n-                       reason = \"you probably meant `(self - other).abs()`: \\\n+    reason = \"you probably meant `(self - other).abs()`: \\\n                                  this operation is `(self - other).max(0.0)` \\\n                                  except that `abs_sub` also propagates NaNs (also \\\n                                  known as `fdim` in C). If you truly need the positive \\\n                                  difference, consider using that expression or the C function \\\n                                  `fdim`, depending on how you wish to handle NaN (please consider \\\n                                  filing an issue describing your use-case too).\")]\n-     pub fn abs_sub(self, other: f64) -> f64 {\n-         unsafe { cmath::fdim(self, other) }\n-     }\n+    pub fn abs_sub(self, other: f64) -> f64 {\n+        unsafe { cmath::fdim(self, other) }\n+    }\n \n     /// Takes the cubic root of a number.\n     ///\n@@ -833,7 +833,7 @@ impl f64 {\n         if self == NEG_INFINITY {\n             NEG_INFINITY\n         } else {\n-            (self + ((self * self) + 1.0).sqrt()).ln()\n+            (self + ((self * self) + 1.0).sqrt()).ln().copysign(self)\n         }\n     }\n \n@@ -852,9 +852,10 @@ impl f64 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn acosh(self) -> f64 {\n-        match self {\n-            x if x < 1.0 => NAN,\n-            x => (x + ((x * x) - 1.0).sqrt()).ln(),\n+        if self < 1.0 {\n+            NAN\n+        } else {\n+            (self + ((self * self) - 1.0).sqrt()).ln()\n         }\n     }\n \n@@ -1187,7 +1188,7 @@ mod tests {\n         assert_eq!((-0f64).abs(), 0f64);\n         assert_eq!((-1f64).abs(), 1f64);\n         assert_eq!(NEG_INFINITY.abs(), INFINITY);\n-        assert_eq!((1f64/NEG_INFINITY).abs(), 0f64);\n+        assert_eq!((1f64 / NEG_INFINITY).abs(), 0f64);\n         assert!(NAN.abs().is_nan());\n     }\n \n@@ -1199,7 +1200,7 @@ mod tests {\n         assert_eq!((-0f64).signum(), -1f64);\n         assert_eq!((-1f64).signum(), -1f64);\n         assert_eq!(NEG_INFINITY.signum(), -1f64);\n-        assert_eq!((1f64/NEG_INFINITY).signum(), -1f64);\n+        assert_eq!((1f64 / NEG_INFINITY).signum(), -1f64);\n         assert!(NAN.signum().is_nan());\n     }\n \n@@ -1211,7 +1212,7 @@ mod tests {\n         assert!(!(-0f64).is_sign_positive());\n         assert!(!(-1f64).is_sign_positive());\n         assert!(!NEG_INFINITY.is_sign_positive());\n-        assert!(!(1f64/NEG_INFINITY).is_sign_positive());\n+        assert!(!(1f64 / NEG_INFINITY).is_sign_positive());\n         assert!(NAN.is_sign_positive());\n         assert!(!(-NAN).is_sign_positive());\n     }\n@@ -1224,7 +1225,7 @@ mod tests {\n         assert!((-0f64).is_sign_negative());\n         assert!((-1f64).is_sign_negative());\n         assert!(NEG_INFINITY.is_sign_negative());\n-        assert!((1f64/NEG_INFINITY).is_sign_negative());\n+        assert!((1f64 / NEG_INFINITY).is_sign_negative());\n         assert!(!NAN.is_sign_negative());\n         assert!((-NAN).is_sign_negative());\n     }\n@@ -1433,6 +1434,8 @@ mod tests {\n         assert_eq!(inf.asinh(), inf);\n         assert_eq!(neg_inf.asinh(), neg_inf);\n         assert!(nan.asinh().is_nan());\n+        assert!((-0.0f64).asinh().is_sign_negative());\n+        // issue 63271\n         assert_approx_eq!(2.0f64.asinh(), 1.443635475178810342493276740273105f64);\n         assert_approx_eq!((-2.0f64).asinh(), -1.443635475178810342493276740273105f64);\n     }"}]}